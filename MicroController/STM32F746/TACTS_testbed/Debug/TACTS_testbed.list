
TACTS_testbed.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000151fc  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000009ec  080153d0  080153d0  000253d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08015dbc  08015dbc  0003049c  2**0
                  CONTENTS
  4 .ARM          00000008  08015dbc  08015dbc  00025dbc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08015dc4  08015dc4  0003049c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08015dc4  08015dc4  00025dc4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08015dc8  08015dc8  00025dc8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000049c  20000000  08015dcc  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002dc  2000049c  08016268  0003049c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000778  08016268  00030778  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0003049c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000213de  00000000  00000000  000304cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003adb  00000000  00000000  000518aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001768  00000000  00000000  00055388  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000015d0  00000000  00000000  00056af0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00029838  00000000  00000000  000580c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000221a5  00000000  00000000  000818f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f9764  00000000  00000000  000a3a9d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0019d201  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007a28  00000000  00000000  0019d254  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000049c 	.word	0x2000049c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080153b4 	.word	0x080153b4

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200004a0 	.word	0x200004a0
 800020c:	080153b4 	.word	0x080153b4

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2uiz>:
 8000be8:	004a      	lsls	r2, r1, #1
 8000bea:	d211      	bcs.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bec:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bf0:	d211      	bcs.n	8000c16 <__aeabi_d2uiz+0x2e>
 8000bf2:	d50d      	bpl.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bf4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bfc:	d40e      	bmi.n	8000c1c <__aeabi_d2uiz+0x34>
 8000bfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c02:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_d2uiz+0x3a>
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_d2f>:
 8000c28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c30:	bf24      	itt	cs
 8000c32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c3a:	d90d      	bls.n	8000c58 <__aeabi_d2f+0x30>
 8000c3c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c48:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c50:	bf08      	it	eq
 8000c52:	f020 0001 	biceq.w	r0, r0, #1
 8000c56:	4770      	bx	lr
 8000c58:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c5c:	d121      	bne.n	8000ca2 <__aeabi_d2f+0x7a>
 8000c5e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c62:	bfbc      	itt	lt
 8000c64:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c68:	4770      	bxlt	lr
 8000c6a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c72:	f1c2 0218 	rsb	r2, r2, #24
 8000c76:	f1c2 0c20 	rsb	ip, r2, #32
 8000c7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c82:	bf18      	it	ne
 8000c84:	f040 0001 	orrne.w	r0, r0, #1
 8000c88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c94:	ea40 000c 	orr.w	r0, r0, ip
 8000c98:	fa23 f302 	lsr.w	r3, r3, r2
 8000c9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ca0:	e7cc      	b.n	8000c3c <__aeabi_d2f+0x14>
 8000ca2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ca6:	d107      	bne.n	8000cb8 <__aeabi_d2f+0x90>
 8000ca8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cac:	bf1e      	ittt	ne
 8000cae:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cb2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cb6:	4770      	bxne	lr
 8000cb8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cbc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cc0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_uldivmod>:
 8000cc8:	b953      	cbnz	r3, 8000ce0 <__aeabi_uldivmod+0x18>
 8000cca:	b94a      	cbnz	r2, 8000ce0 <__aeabi_uldivmod+0x18>
 8000ccc:	2900      	cmp	r1, #0
 8000cce:	bf08      	it	eq
 8000cd0:	2800      	cmpeq	r0, #0
 8000cd2:	bf1c      	itt	ne
 8000cd4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cd8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cdc:	f000 b9aa 	b.w	8001034 <__aeabi_idiv0>
 8000ce0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ce4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ce8:	f000 f83c 	bl	8000d64 <__udivmoddi4>
 8000cec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cf4:	b004      	add	sp, #16
 8000cf6:	4770      	bx	lr

08000cf8 <__aeabi_d2lz>:
 8000cf8:	b538      	push	{r3, r4, r5, lr}
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	4604      	mov	r4, r0
 8000d00:	460d      	mov	r5, r1
 8000d02:	f7ff ff0b 	bl	8000b1c <__aeabi_dcmplt>
 8000d06:	b928      	cbnz	r0, 8000d14 <__aeabi_d2lz+0x1c>
 8000d08:	4620      	mov	r0, r4
 8000d0a:	4629      	mov	r1, r5
 8000d0c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d10:	f000 b80a 	b.w	8000d28 <__aeabi_d2ulz>
 8000d14:	4620      	mov	r0, r4
 8000d16:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d1a:	f000 f805 	bl	8000d28 <__aeabi_d2ulz>
 8000d1e:	4240      	negs	r0, r0
 8000d20:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d24:	bd38      	pop	{r3, r4, r5, pc}
 8000d26:	bf00      	nop

08000d28 <__aeabi_d2ulz>:
 8000d28:	b5d0      	push	{r4, r6, r7, lr}
 8000d2a:	4b0c      	ldr	r3, [pc, #48]	; (8000d5c <__aeabi_d2ulz+0x34>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	4606      	mov	r6, r0
 8000d30:	460f      	mov	r7, r1
 8000d32:	f7ff fc81 	bl	8000638 <__aeabi_dmul>
 8000d36:	f7ff ff57 	bl	8000be8 <__aeabi_d2uiz>
 8000d3a:	4604      	mov	r4, r0
 8000d3c:	f7ff fc02 	bl	8000544 <__aeabi_ui2d>
 8000d40:	4b07      	ldr	r3, [pc, #28]	; (8000d60 <__aeabi_d2ulz+0x38>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	f7ff fc78 	bl	8000638 <__aeabi_dmul>
 8000d48:	4602      	mov	r2, r0
 8000d4a:	460b      	mov	r3, r1
 8000d4c:	4630      	mov	r0, r6
 8000d4e:	4639      	mov	r1, r7
 8000d50:	f7ff faba 	bl	80002c8 <__aeabi_dsub>
 8000d54:	f7ff ff48 	bl	8000be8 <__aeabi_d2uiz>
 8000d58:	4621      	mov	r1, r4
 8000d5a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d5c:	3df00000 	.word	0x3df00000
 8000d60:	41f00000 	.word	0x41f00000

08000d64 <__udivmoddi4>:
 8000d64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d68:	9d08      	ldr	r5, [sp, #32]
 8000d6a:	4604      	mov	r4, r0
 8000d6c:	468e      	mov	lr, r1
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d14d      	bne.n	8000e0e <__udivmoddi4+0xaa>
 8000d72:	428a      	cmp	r2, r1
 8000d74:	4694      	mov	ip, r2
 8000d76:	d969      	bls.n	8000e4c <__udivmoddi4+0xe8>
 8000d78:	fab2 f282 	clz	r2, r2
 8000d7c:	b152      	cbz	r2, 8000d94 <__udivmoddi4+0x30>
 8000d7e:	fa01 f302 	lsl.w	r3, r1, r2
 8000d82:	f1c2 0120 	rsb	r1, r2, #32
 8000d86:	fa20 f101 	lsr.w	r1, r0, r1
 8000d8a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d8e:	ea41 0e03 	orr.w	lr, r1, r3
 8000d92:	4094      	lsls	r4, r2
 8000d94:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d98:	0c21      	lsrs	r1, r4, #16
 8000d9a:	fbbe f6f8 	udiv	r6, lr, r8
 8000d9e:	fa1f f78c 	uxth.w	r7, ip
 8000da2:	fb08 e316 	mls	r3, r8, r6, lr
 8000da6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000daa:	fb06 f107 	mul.w	r1, r6, r7
 8000dae:	4299      	cmp	r1, r3
 8000db0:	d90a      	bls.n	8000dc8 <__udivmoddi4+0x64>
 8000db2:	eb1c 0303 	adds.w	r3, ip, r3
 8000db6:	f106 30ff 	add.w	r0, r6, #4294967295
 8000dba:	f080 811f 	bcs.w	8000ffc <__udivmoddi4+0x298>
 8000dbe:	4299      	cmp	r1, r3
 8000dc0:	f240 811c 	bls.w	8000ffc <__udivmoddi4+0x298>
 8000dc4:	3e02      	subs	r6, #2
 8000dc6:	4463      	add	r3, ip
 8000dc8:	1a5b      	subs	r3, r3, r1
 8000dca:	b2a4      	uxth	r4, r4
 8000dcc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000dd0:	fb08 3310 	mls	r3, r8, r0, r3
 8000dd4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000dd8:	fb00 f707 	mul.w	r7, r0, r7
 8000ddc:	42a7      	cmp	r7, r4
 8000dde:	d90a      	bls.n	8000df6 <__udivmoddi4+0x92>
 8000de0:	eb1c 0404 	adds.w	r4, ip, r4
 8000de4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000de8:	f080 810a 	bcs.w	8001000 <__udivmoddi4+0x29c>
 8000dec:	42a7      	cmp	r7, r4
 8000dee:	f240 8107 	bls.w	8001000 <__udivmoddi4+0x29c>
 8000df2:	4464      	add	r4, ip
 8000df4:	3802      	subs	r0, #2
 8000df6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dfa:	1be4      	subs	r4, r4, r7
 8000dfc:	2600      	movs	r6, #0
 8000dfe:	b11d      	cbz	r5, 8000e08 <__udivmoddi4+0xa4>
 8000e00:	40d4      	lsrs	r4, r2
 8000e02:	2300      	movs	r3, #0
 8000e04:	e9c5 4300 	strd	r4, r3, [r5]
 8000e08:	4631      	mov	r1, r6
 8000e0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e0e:	428b      	cmp	r3, r1
 8000e10:	d909      	bls.n	8000e26 <__udivmoddi4+0xc2>
 8000e12:	2d00      	cmp	r5, #0
 8000e14:	f000 80ef 	beq.w	8000ff6 <__udivmoddi4+0x292>
 8000e18:	2600      	movs	r6, #0
 8000e1a:	e9c5 0100 	strd	r0, r1, [r5]
 8000e1e:	4630      	mov	r0, r6
 8000e20:	4631      	mov	r1, r6
 8000e22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e26:	fab3 f683 	clz	r6, r3
 8000e2a:	2e00      	cmp	r6, #0
 8000e2c:	d14a      	bne.n	8000ec4 <__udivmoddi4+0x160>
 8000e2e:	428b      	cmp	r3, r1
 8000e30:	d302      	bcc.n	8000e38 <__udivmoddi4+0xd4>
 8000e32:	4282      	cmp	r2, r0
 8000e34:	f200 80f9 	bhi.w	800102a <__udivmoddi4+0x2c6>
 8000e38:	1a84      	subs	r4, r0, r2
 8000e3a:	eb61 0303 	sbc.w	r3, r1, r3
 8000e3e:	2001      	movs	r0, #1
 8000e40:	469e      	mov	lr, r3
 8000e42:	2d00      	cmp	r5, #0
 8000e44:	d0e0      	beq.n	8000e08 <__udivmoddi4+0xa4>
 8000e46:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e4a:	e7dd      	b.n	8000e08 <__udivmoddi4+0xa4>
 8000e4c:	b902      	cbnz	r2, 8000e50 <__udivmoddi4+0xec>
 8000e4e:	deff      	udf	#255	; 0xff
 8000e50:	fab2 f282 	clz	r2, r2
 8000e54:	2a00      	cmp	r2, #0
 8000e56:	f040 8092 	bne.w	8000f7e <__udivmoddi4+0x21a>
 8000e5a:	eba1 010c 	sub.w	r1, r1, ip
 8000e5e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e62:	fa1f fe8c 	uxth.w	lr, ip
 8000e66:	2601      	movs	r6, #1
 8000e68:	0c20      	lsrs	r0, r4, #16
 8000e6a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e6e:	fb07 1113 	mls	r1, r7, r3, r1
 8000e72:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e76:	fb0e f003 	mul.w	r0, lr, r3
 8000e7a:	4288      	cmp	r0, r1
 8000e7c:	d908      	bls.n	8000e90 <__udivmoddi4+0x12c>
 8000e7e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e82:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e86:	d202      	bcs.n	8000e8e <__udivmoddi4+0x12a>
 8000e88:	4288      	cmp	r0, r1
 8000e8a:	f200 80cb 	bhi.w	8001024 <__udivmoddi4+0x2c0>
 8000e8e:	4643      	mov	r3, r8
 8000e90:	1a09      	subs	r1, r1, r0
 8000e92:	b2a4      	uxth	r4, r4
 8000e94:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e98:	fb07 1110 	mls	r1, r7, r0, r1
 8000e9c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000ea0:	fb0e fe00 	mul.w	lr, lr, r0
 8000ea4:	45a6      	cmp	lr, r4
 8000ea6:	d908      	bls.n	8000eba <__udivmoddi4+0x156>
 8000ea8:	eb1c 0404 	adds.w	r4, ip, r4
 8000eac:	f100 31ff 	add.w	r1, r0, #4294967295
 8000eb0:	d202      	bcs.n	8000eb8 <__udivmoddi4+0x154>
 8000eb2:	45a6      	cmp	lr, r4
 8000eb4:	f200 80bb 	bhi.w	800102e <__udivmoddi4+0x2ca>
 8000eb8:	4608      	mov	r0, r1
 8000eba:	eba4 040e 	sub.w	r4, r4, lr
 8000ebe:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000ec2:	e79c      	b.n	8000dfe <__udivmoddi4+0x9a>
 8000ec4:	f1c6 0720 	rsb	r7, r6, #32
 8000ec8:	40b3      	lsls	r3, r6
 8000eca:	fa22 fc07 	lsr.w	ip, r2, r7
 8000ece:	ea4c 0c03 	orr.w	ip, ip, r3
 8000ed2:	fa20 f407 	lsr.w	r4, r0, r7
 8000ed6:	fa01 f306 	lsl.w	r3, r1, r6
 8000eda:	431c      	orrs	r4, r3
 8000edc:	40f9      	lsrs	r1, r7
 8000ede:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ee2:	fa00 f306 	lsl.w	r3, r0, r6
 8000ee6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000eea:	0c20      	lsrs	r0, r4, #16
 8000eec:	fa1f fe8c 	uxth.w	lr, ip
 8000ef0:	fb09 1118 	mls	r1, r9, r8, r1
 8000ef4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ef8:	fb08 f00e 	mul.w	r0, r8, lr
 8000efc:	4288      	cmp	r0, r1
 8000efe:	fa02 f206 	lsl.w	r2, r2, r6
 8000f02:	d90b      	bls.n	8000f1c <__udivmoddi4+0x1b8>
 8000f04:	eb1c 0101 	adds.w	r1, ip, r1
 8000f08:	f108 3aff 	add.w	sl, r8, #4294967295
 8000f0c:	f080 8088 	bcs.w	8001020 <__udivmoddi4+0x2bc>
 8000f10:	4288      	cmp	r0, r1
 8000f12:	f240 8085 	bls.w	8001020 <__udivmoddi4+0x2bc>
 8000f16:	f1a8 0802 	sub.w	r8, r8, #2
 8000f1a:	4461      	add	r1, ip
 8000f1c:	1a09      	subs	r1, r1, r0
 8000f1e:	b2a4      	uxth	r4, r4
 8000f20:	fbb1 f0f9 	udiv	r0, r1, r9
 8000f24:	fb09 1110 	mls	r1, r9, r0, r1
 8000f28:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000f2c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000f30:	458e      	cmp	lr, r1
 8000f32:	d908      	bls.n	8000f46 <__udivmoddi4+0x1e2>
 8000f34:	eb1c 0101 	adds.w	r1, ip, r1
 8000f38:	f100 34ff 	add.w	r4, r0, #4294967295
 8000f3c:	d26c      	bcs.n	8001018 <__udivmoddi4+0x2b4>
 8000f3e:	458e      	cmp	lr, r1
 8000f40:	d96a      	bls.n	8001018 <__udivmoddi4+0x2b4>
 8000f42:	3802      	subs	r0, #2
 8000f44:	4461      	add	r1, ip
 8000f46:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f4a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f4e:	eba1 010e 	sub.w	r1, r1, lr
 8000f52:	42a1      	cmp	r1, r4
 8000f54:	46c8      	mov	r8, r9
 8000f56:	46a6      	mov	lr, r4
 8000f58:	d356      	bcc.n	8001008 <__udivmoddi4+0x2a4>
 8000f5a:	d053      	beq.n	8001004 <__udivmoddi4+0x2a0>
 8000f5c:	b15d      	cbz	r5, 8000f76 <__udivmoddi4+0x212>
 8000f5e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f62:	eb61 010e 	sbc.w	r1, r1, lr
 8000f66:	fa01 f707 	lsl.w	r7, r1, r7
 8000f6a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f6e:	40f1      	lsrs	r1, r6
 8000f70:	431f      	orrs	r7, r3
 8000f72:	e9c5 7100 	strd	r7, r1, [r5]
 8000f76:	2600      	movs	r6, #0
 8000f78:	4631      	mov	r1, r6
 8000f7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f7e:	f1c2 0320 	rsb	r3, r2, #32
 8000f82:	40d8      	lsrs	r0, r3
 8000f84:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f88:	fa21 f303 	lsr.w	r3, r1, r3
 8000f8c:	4091      	lsls	r1, r2
 8000f8e:	4301      	orrs	r1, r0
 8000f90:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f94:	fa1f fe8c 	uxth.w	lr, ip
 8000f98:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f9c:	fb07 3610 	mls	r6, r7, r0, r3
 8000fa0:	0c0b      	lsrs	r3, r1, #16
 8000fa2:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000fa6:	fb00 f60e 	mul.w	r6, r0, lr
 8000faa:	429e      	cmp	r6, r3
 8000fac:	fa04 f402 	lsl.w	r4, r4, r2
 8000fb0:	d908      	bls.n	8000fc4 <__udivmoddi4+0x260>
 8000fb2:	eb1c 0303 	adds.w	r3, ip, r3
 8000fb6:	f100 38ff 	add.w	r8, r0, #4294967295
 8000fba:	d22f      	bcs.n	800101c <__udivmoddi4+0x2b8>
 8000fbc:	429e      	cmp	r6, r3
 8000fbe:	d92d      	bls.n	800101c <__udivmoddi4+0x2b8>
 8000fc0:	3802      	subs	r0, #2
 8000fc2:	4463      	add	r3, ip
 8000fc4:	1b9b      	subs	r3, r3, r6
 8000fc6:	b289      	uxth	r1, r1
 8000fc8:	fbb3 f6f7 	udiv	r6, r3, r7
 8000fcc:	fb07 3316 	mls	r3, r7, r6, r3
 8000fd0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fd4:	fb06 f30e 	mul.w	r3, r6, lr
 8000fd8:	428b      	cmp	r3, r1
 8000fda:	d908      	bls.n	8000fee <__udivmoddi4+0x28a>
 8000fdc:	eb1c 0101 	adds.w	r1, ip, r1
 8000fe0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000fe4:	d216      	bcs.n	8001014 <__udivmoddi4+0x2b0>
 8000fe6:	428b      	cmp	r3, r1
 8000fe8:	d914      	bls.n	8001014 <__udivmoddi4+0x2b0>
 8000fea:	3e02      	subs	r6, #2
 8000fec:	4461      	add	r1, ip
 8000fee:	1ac9      	subs	r1, r1, r3
 8000ff0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000ff4:	e738      	b.n	8000e68 <__udivmoddi4+0x104>
 8000ff6:	462e      	mov	r6, r5
 8000ff8:	4628      	mov	r0, r5
 8000ffa:	e705      	b.n	8000e08 <__udivmoddi4+0xa4>
 8000ffc:	4606      	mov	r6, r0
 8000ffe:	e6e3      	b.n	8000dc8 <__udivmoddi4+0x64>
 8001000:	4618      	mov	r0, r3
 8001002:	e6f8      	b.n	8000df6 <__udivmoddi4+0x92>
 8001004:	454b      	cmp	r3, r9
 8001006:	d2a9      	bcs.n	8000f5c <__udivmoddi4+0x1f8>
 8001008:	ebb9 0802 	subs.w	r8, r9, r2
 800100c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8001010:	3801      	subs	r0, #1
 8001012:	e7a3      	b.n	8000f5c <__udivmoddi4+0x1f8>
 8001014:	4646      	mov	r6, r8
 8001016:	e7ea      	b.n	8000fee <__udivmoddi4+0x28a>
 8001018:	4620      	mov	r0, r4
 800101a:	e794      	b.n	8000f46 <__udivmoddi4+0x1e2>
 800101c:	4640      	mov	r0, r8
 800101e:	e7d1      	b.n	8000fc4 <__udivmoddi4+0x260>
 8001020:	46d0      	mov	r8, sl
 8001022:	e77b      	b.n	8000f1c <__udivmoddi4+0x1b8>
 8001024:	3b02      	subs	r3, #2
 8001026:	4461      	add	r1, ip
 8001028:	e732      	b.n	8000e90 <__udivmoddi4+0x12c>
 800102a:	4630      	mov	r0, r6
 800102c:	e709      	b.n	8000e42 <__udivmoddi4+0xde>
 800102e:	4464      	add	r4, ip
 8001030:	3802      	subs	r0, #2
 8001032:	e742      	b.n	8000eba <__udivmoddi4+0x156>

08001034 <__aeabi_idiv0>:
 8001034:	4770      	bx	lr
 8001036:	bf00      	nop

08001038 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	b08a      	sub	sp, #40	; 0x28
 800103c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800103e:	f107 0314 	add.w	r3, r7, #20
 8001042:	2200      	movs	r2, #0
 8001044:	601a      	str	r2, [r3, #0]
 8001046:	605a      	str	r2, [r3, #4]
 8001048:	609a      	str	r2, [r3, #8]
 800104a:	60da      	str	r2, [r3, #12]
 800104c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800104e:	4b51      	ldr	r3, [pc, #324]	; (8001194 <MX_GPIO_Init+0x15c>)
 8001050:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001052:	4a50      	ldr	r2, [pc, #320]	; (8001194 <MX_GPIO_Init+0x15c>)
 8001054:	f043 0302 	orr.w	r3, r3, #2
 8001058:	6313      	str	r3, [r2, #48]	; 0x30
 800105a:	4b4e      	ldr	r3, [pc, #312]	; (8001194 <MX_GPIO_Init+0x15c>)
 800105c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800105e:	f003 0302 	and.w	r3, r3, #2
 8001062:	613b      	str	r3, [r7, #16]
 8001064:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001066:	4b4b      	ldr	r3, [pc, #300]	; (8001194 <MX_GPIO_Init+0x15c>)
 8001068:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800106a:	4a4a      	ldr	r2, [pc, #296]	; (8001194 <MX_GPIO_Init+0x15c>)
 800106c:	f043 0301 	orr.w	r3, r3, #1
 8001070:	6313      	str	r3, [r2, #48]	; 0x30
 8001072:	4b48      	ldr	r3, [pc, #288]	; (8001194 <MX_GPIO_Init+0x15c>)
 8001074:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001076:	f003 0301 	and.w	r3, r3, #1
 800107a:	60fb      	str	r3, [r7, #12]
 800107c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 800107e:	4b45      	ldr	r3, [pc, #276]	; (8001194 <MX_GPIO_Init+0x15c>)
 8001080:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001082:	4a44      	ldr	r2, [pc, #272]	; (8001194 <MX_GPIO_Init+0x15c>)
 8001084:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001088:	6313      	str	r3, [r2, #48]	; 0x30
 800108a:	4b42      	ldr	r3, [pc, #264]	; (8001194 <MX_GPIO_Init+0x15c>)
 800108c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800108e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001092:	60bb      	str	r3, [r7, #8]
 8001094:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001096:	4b3f      	ldr	r3, [pc, #252]	; (8001194 <MX_GPIO_Init+0x15c>)
 8001098:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800109a:	4a3e      	ldr	r2, [pc, #248]	; (8001194 <MX_GPIO_Init+0x15c>)
 800109c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80010a0:	6313      	str	r3, [r2, #48]	; 0x30
 80010a2:	4b3c      	ldr	r3, [pc, #240]	; (8001194 <MX_GPIO_Init+0x15c>)
 80010a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80010aa:	607b      	str	r3, [r7, #4]
 80010ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80010ae:	4b39      	ldr	r3, [pc, #228]	; (8001194 <MX_GPIO_Init+0x15c>)
 80010b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010b2:	4a38      	ldr	r2, [pc, #224]	; (8001194 <MX_GPIO_Init+0x15c>)
 80010b4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80010b8:	6313      	str	r3, [r2, #48]	; 0x30
 80010ba:	4b36      	ldr	r3, [pc, #216]	; (8001194 <MX_GPIO_Init+0x15c>)
 80010bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80010c2:	603b      	str	r3, [r7, #0]
 80010c4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 80010c6:	2200      	movs	r2, #0
 80010c8:	2110      	movs	r1, #16
 80010ca:	4833      	ldr	r0, [pc, #204]	; (8001198 <MX_GPIO_Init+0x160>)
 80010cc:	f002 fff6 	bl	80040bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, GPIO_PIN_3|GPIO_PIN_2|GPIO_PIN_1|GPIO_PIN_0, GPIO_PIN_RESET);
 80010d0:	2200      	movs	r2, #0
 80010d2:	210f      	movs	r1, #15
 80010d4:	4831      	ldr	r0, [pc, #196]	; (800119c <MX_GPIO_Init+0x164>)
 80010d6:	f002 fff1 	bl	80040bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_7|GPIO_PIN_6, GPIO_PIN_RESET);
 80010da:	2200      	movs	r2, #0
 80010dc:	21c0      	movs	r1, #192	; 0xc0
 80010de:	4830      	ldr	r0, [pc, #192]	; (80011a0 <MX_GPIO_Init+0x168>)
 80010e0:	f002 ffec 	bl	80040bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 80010e4:	2310      	movs	r3, #16
 80010e6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010e8:	2301      	movs	r3, #1
 80010ea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ec:	2300      	movs	r3, #0
 80010ee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010f0:	2300      	movs	r3, #0
 80010f2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010f4:	f107 0314 	add.w	r3, r7, #20
 80010f8:	4619      	mov	r1, r3
 80010fa:	4827      	ldr	r0, [pc, #156]	; (8001198 <MX_GPIO_Init+0x160>)
 80010fc:	f002 fc4e 	bl	800399c <HAL_GPIO_Init>

  /*Configure GPIO pins : PI3 PI2 PI1 PI0 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_2|GPIO_PIN_1|GPIO_PIN_0;
 8001100:	230f      	movs	r3, #15
 8001102:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001104:	2301      	movs	r3, #1
 8001106:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001108:	2300      	movs	r3, #0
 800110a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800110c:	2300      	movs	r3, #0
 800110e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001110:	f107 0314 	add.w	r3, r7, #20
 8001114:	4619      	mov	r1, r3
 8001116:	4821      	ldr	r0, [pc, #132]	; (800119c <MX_GPIO_Init+0x164>)
 8001118:	f002 fc40 	bl	800399c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 800111c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001120:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001122:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001126:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001128:	2301      	movs	r3, #1
 800112a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800112c:	f107 0314 	add.w	r3, r7, #20
 8001130:	4619      	mov	r1, r3
 8001132:	481c      	ldr	r0, [pc, #112]	; (80011a4 <MX_GPIO_Init+0x16c>)
 8001134:	f002 fc32 	bl	800399c <HAL_GPIO_Init>

  /*Configure GPIO pins : PG7 PG6 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6;
 8001138:	23c0      	movs	r3, #192	; 0xc0
 800113a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800113c:	2301      	movs	r3, #1
 800113e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001140:	2300      	movs	r3, #0
 8001142:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001144:	2300      	movs	r3, #0
 8001146:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001148:	f107 0314 	add.w	r3, r7, #20
 800114c:	4619      	mov	r1, r3
 800114e:	4814      	ldr	r0, [pc, #80]	; (80011a0 <MX_GPIO_Init+0x168>)
 8001150:	f002 fc24 	bl	800399c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 8001154:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001158:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800115a:	2300      	movs	r3, #0
 800115c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800115e:	2300      	movs	r3, #0
 8001160:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001162:	f107 0314 	add.w	r3, r7, #20
 8001166:	4619      	mov	r1, r3
 8001168:	480b      	ldr	r0, [pc, #44]	; (8001198 <MX_GPIO_Init+0x160>)
 800116a:	f002 fc17 	bl	800399c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 800116e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001172:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001174:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001178:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800117a:	2301      	movs	r3, #1
 800117c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800117e:	f107 0314 	add.w	r3, r7, #20
 8001182:	4619      	mov	r1, r3
 8001184:	4804      	ldr	r0, [pc, #16]	; (8001198 <MX_GPIO_Init+0x160>)
 8001186:	f002 fc09 	bl	800399c <HAL_GPIO_Init>

}
 800118a:	bf00      	nop
 800118c:	3728      	adds	r7, #40	; 0x28
 800118e:	46bd      	mov	sp, r7
 8001190:	bd80      	pop	{r7, pc}
 8001192:	bf00      	nop
 8001194:	40023800 	.word	0x40023800
 8001198:	40020400 	.word	0x40020400
 800119c:	40022000 	.word	0x40022000
 80011a0:	40021800 	.word	0x40021800
 80011a4:	40020000 	.word	0x40020000

080011a8 <HX711_Init>:




void HX711_Init(void)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	af00      	add	r7, sp, #0
  // Set the SCK pin to low
  HAL_GPIO_WritePin(HX711_SCK_GPIO_Port, HX711_SCK_Pin, GPIO_PIN_RESET);
 80011ac:	2200      	movs	r2, #0
 80011ae:	2102      	movs	r1, #2
 80011b0:	4802      	ldr	r0, [pc, #8]	; (80011bc <HX711_Init+0x14>)
 80011b2:	f002 ff83 	bl	80040bc <HAL_GPIO_WritePin>
}
 80011b6:	bf00      	nop
 80011b8:	bd80      	pop	{r7, pc}
 80011ba:	bf00      	nop
 80011bc:	40022000 	.word	0x40022000

080011c0 <Read_HX711>:

int32_t Read_HX711(void)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b082      	sub	sp, #8
 80011c4:	af00      	add	r7, sp, #0
  int32_t data = 0;
 80011c6:	2300      	movs	r3, #0
 80011c8:	607b      	str	r3, [r7, #4]

  // Wait until the DT pin goes low
  while (HAL_GPIO_ReadPin(HX711_DT_GPIO_Port, HX711_DT_Pin) == GPIO_PIN_SET);
 80011ca:	bf00      	nop
 80011cc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80011d0:	4820      	ldr	r0, [pc, #128]	; (8001254 <Read_HX711+0x94>)
 80011d2:	f002 ff53 	bl	800407c <HAL_GPIO_ReadPin>
 80011d6:	4603      	mov	r3, r0
 80011d8:	2b01      	cmp	r3, #1
 80011da:	d0f7      	beq.n	80011cc <Read_HX711+0xc>

  // Read the 24-bit data
  for (int i = 0; i < 24; i++)
 80011dc:	2300      	movs	r3, #0
 80011de:	603b      	str	r3, [r7, #0]
 80011e0:	e020      	b.n	8001224 <Read_HX711+0x64>
  {
    // Generate a clock pulse on SCK pin
    HAL_GPIO_WritePin(HX711_SCK_GPIO_Port, HX711_SCK_Pin, GPIO_PIN_SET);
 80011e2:	2201      	movs	r2, #1
 80011e4:	2102      	movs	r1, #2
 80011e6:	481c      	ldr	r0, [pc, #112]	; (8001258 <Read_HX711+0x98>)
 80011e8:	f002 ff68 	bl	80040bc <HAL_GPIO_WritePin>
    DelayMicroseconds(1);
 80011ec:	2001      	movs	r0, #1
 80011ee:	f000 f86f 	bl	80012d0 <DelayMicroseconds>
    data = (data << 1);
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	005b      	lsls	r3, r3, #1
 80011f6:	607b      	str	r3, [r7, #4]
    if (HAL_GPIO_ReadPin(HX711_DT_GPIO_Port, HX711_DT_Pin) == GPIO_PIN_SET)
 80011f8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80011fc:	4815      	ldr	r0, [pc, #84]	; (8001254 <Read_HX711+0x94>)
 80011fe:	f002 ff3d 	bl	800407c <HAL_GPIO_ReadPin>
 8001202:	4603      	mov	r3, r0
 8001204:	2b01      	cmp	r3, #1
 8001206:	d102      	bne.n	800120e <Read_HX711+0x4e>
    {
      data++;
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	3301      	adds	r3, #1
 800120c:	607b      	str	r3, [r7, #4]
    }
    HAL_GPIO_WritePin(HX711_SCK_GPIO_Port, HX711_SCK_Pin, GPIO_PIN_RESET);
 800120e:	2200      	movs	r2, #0
 8001210:	2102      	movs	r1, #2
 8001212:	4811      	ldr	r0, [pc, #68]	; (8001258 <Read_HX711+0x98>)
 8001214:	f002 ff52 	bl	80040bc <HAL_GPIO_WritePin>
    DelayMicroseconds(1);
 8001218:	2001      	movs	r0, #1
 800121a:	f000 f859 	bl	80012d0 <DelayMicroseconds>
  for (int i = 0; i < 24; i++)
 800121e:	683b      	ldr	r3, [r7, #0]
 8001220:	3301      	adds	r3, #1
 8001222:	603b      	str	r3, [r7, #0]
 8001224:	683b      	ldr	r3, [r7, #0]
 8001226:	2b17      	cmp	r3, #23
 8001228:	dddb      	ble.n	80011e2 <Read_HX711+0x22>
  }

  // Generate an additional 25th pulse to set the HX711 back to idle mode
  HAL_GPIO_WritePin(HX711_SCK_GPIO_Port, HX711_SCK_Pin, GPIO_PIN_SET);
 800122a:	2201      	movs	r2, #1
 800122c:	2102      	movs	r1, #2
 800122e:	480a      	ldr	r0, [pc, #40]	; (8001258 <Read_HX711+0x98>)
 8001230:	f002 ff44 	bl	80040bc <HAL_GPIO_WritePin>
  DelayMicroseconds(1);
 8001234:	2001      	movs	r0, #1
 8001236:	f000 f84b 	bl	80012d0 <DelayMicroseconds>
  HAL_GPIO_WritePin(HX711_SCK_GPIO_Port, HX711_SCK_Pin, GPIO_PIN_RESET);
 800123a:	2200      	movs	r2, #0
 800123c:	2102      	movs	r1, #2
 800123e:	4806      	ldr	r0, [pc, #24]	; (8001258 <Read_HX711+0x98>)
 8001240:	f002 ff3c 	bl	80040bc <HAL_GPIO_WritePin>
  DelayMicroseconds(1);
 8001244:	2001      	movs	r0, #1
 8001246:	f000 f843 	bl	80012d0 <DelayMicroseconds>


  // Return the 24-bit data
  return data;
 800124a:	687b      	ldr	r3, [r7, #4]
}
 800124c:	4618      	mov	r0, r3
 800124e:	3708      	adds	r7, #8
 8001250:	46bd      	mov	sp, r7
 8001252:	bd80      	pop	{r7, pc}
 8001254:	40020400 	.word	0x40020400
 8001258:	40022000 	.word	0x40022000

0800125c <UART_SendWeight_g>:

void UART_SendWeight_g(float rawData,float loadcell_slope,float loadcell_bias)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	b090      	sub	sp, #64	; 0x40
 8001260:	af00      	add	r7, sp, #0
 8001262:	ed87 0a03 	vstr	s0, [r7, #12]
 8001266:	edc7 0a02 	vstr	s1, [r7, #8]
 800126a:	ed87 1a01 	vstr	s2, [r7, #4]
  float weight = loadcell_slope * rawData  + loadcell_bias;
 800126e:	ed97 7a02 	vldr	s14, [r7, #8]
 8001272:	edd7 7a03 	vldr	s15, [r7, #12]
 8001276:	ee67 7a27 	vmul.f32	s15, s14, s15
 800127a:	ed97 7a01 	vldr	s14, [r7, #4]
 800127e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001282:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
  char buffer[32];
  int len = sprintf(buffer, "Weight(g):");
 8001286:	f107 0314 	add.w	r3, r7, #20
 800128a:	490e      	ldr	r1, [pc, #56]	; (80012c4 <UART_SendWeight_g+0x68>)
 800128c:	4618      	mov	r0, r3
 800128e:	f00f fe6f 	bl	8010f70 <siprintf>
 8001292:	63b8      	str	r0, [r7, #56]	; 0x38
  int data = sprintf(buffer, "%.2f", weight);
 8001294:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8001296:	f7ff f977 	bl	8000588 <__aeabi_f2d>
 800129a:	4602      	mov	r2, r0
 800129c:	460b      	mov	r3, r1
 800129e:	f107 0014 	add.w	r0, r7, #20
 80012a2:	4909      	ldr	r1, [pc, #36]	; (80012c8 <UART_SendWeight_g+0x6c>)
 80012a4:	f00f fe64 	bl	8010f70 <siprintf>
 80012a8:	6378      	str	r0, [r7, #52]	; 0x34

  // Send the buffer content via UART
#if 0
  HAL_UART_Transmit(&huart1, (uint8_t *)buffer, len, 1000);
#endif
  HAL_UART_Transmit(&huart1, (uint8_t *)buffer, data, 1000);
 80012aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80012ac:	b29a      	uxth	r2, r3
 80012ae:	f107 0114 	add.w	r1, r7, #20
 80012b2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012b6:	4805      	ldr	r0, [pc, #20]	; (80012cc <UART_SendWeight_g+0x70>)
 80012b8:	f008 fb96 	bl	80099e8 <HAL_UART_Transmit>
}
 80012bc:	bf00      	nop
 80012be:	3740      	adds	r7, #64	; 0x40
 80012c0:	46bd      	mov	sp, r7
 80012c2:	bd80      	pop	{r7, pc}
 80012c4:	080153d0 	.word	0x080153d0
 80012c8:	080153dc 	.word	0x080153dc
 80012cc:	2000069c 	.word	0x2000069c

080012d0 <DelayMicroseconds>:

  // Send the buffer content via UART
  HAL_UART_Transmit(&huart1, (uint8_t *)buffer, len, 1000);
}
void DelayMicroseconds(uint32_t microseconds)
{
 80012d0:	b480      	push	{r7}
 80012d2:	b085      	sub	sp, #20
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	6078      	str	r0, [r7, #4]
  uint32_t ticks = microseconds;
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	60fb      	str	r3, [r7, #12]
  while (ticks--)
 80012dc:	e000      	b.n	80012e0 <DelayMicroseconds+0x10>
  {
    __NOP();
 80012de:	bf00      	nop
  while (ticks--)
 80012e0:	68fb      	ldr	r3, [r7, #12]
 80012e2:	1e5a      	subs	r2, r3, #1
 80012e4:	60fa      	str	r2, [r7, #12]
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d1f9      	bne.n	80012de <DelayMicroseconds+0xe>
  }
}
 80012ea:	bf00      	nop
 80012ec:	bf00      	nop
 80012ee:	3714      	adds	r7, #20
 80012f0:	46bd      	mov	sp, r7
 80012f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f6:	4770      	bx	lr

080012f8 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80012fc:	4b1b      	ldr	r3, [pc, #108]	; (800136c <MX_I2C1_Init+0x74>)
 80012fe:	4a1c      	ldr	r2, [pc, #112]	; (8001370 <MX_I2C1_Init+0x78>)
 8001300:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x6000030D;
 8001302:	4b1a      	ldr	r3, [pc, #104]	; (800136c <MX_I2C1_Init+0x74>)
 8001304:	4a1b      	ldr	r2, [pc, #108]	; (8001374 <MX_I2C1_Init+0x7c>)
 8001306:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001308:	4b18      	ldr	r3, [pc, #96]	; (800136c <MX_I2C1_Init+0x74>)
 800130a:	2200      	movs	r2, #0
 800130c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800130e:	4b17      	ldr	r3, [pc, #92]	; (800136c <MX_I2C1_Init+0x74>)
 8001310:	2201      	movs	r2, #1
 8001312:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001314:	4b15      	ldr	r3, [pc, #84]	; (800136c <MX_I2C1_Init+0x74>)
 8001316:	2200      	movs	r2, #0
 8001318:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800131a:	4b14      	ldr	r3, [pc, #80]	; (800136c <MX_I2C1_Init+0x74>)
 800131c:	2200      	movs	r2, #0
 800131e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001320:	4b12      	ldr	r3, [pc, #72]	; (800136c <MX_I2C1_Init+0x74>)
 8001322:	2200      	movs	r2, #0
 8001324:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001326:	4b11      	ldr	r3, [pc, #68]	; (800136c <MX_I2C1_Init+0x74>)
 8001328:	2200      	movs	r2, #0
 800132a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800132c:	4b0f      	ldr	r3, [pc, #60]	; (800136c <MX_I2C1_Init+0x74>)
 800132e:	2200      	movs	r2, #0
 8001330:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001332:	480e      	ldr	r0, [pc, #56]	; (800136c <MX_I2C1_Init+0x74>)
 8001334:	f002 ff06 	bl	8004144 <HAL_I2C_Init>
 8001338:	4603      	mov	r3, r0
 800133a:	2b00      	cmp	r3, #0
 800133c:	d001      	beq.n	8001342 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800133e:	f001 fc1f 	bl	8002b80 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001342:	2100      	movs	r1, #0
 8001344:	4809      	ldr	r0, [pc, #36]	; (800136c <MX_I2C1_Init+0x74>)
 8001346:	f004 fa33 	bl	80057b0 <HAL_I2CEx_ConfigAnalogFilter>
 800134a:	4603      	mov	r3, r0
 800134c:	2b00      	cmp	r3, #0
 800134e:	d001      	beq.n	8001354 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001350:	f001 fc16 	bl	8002b80 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001354:	2100      	movs	r1, #0
 8001356:	4805      	ldr	r0, [pc, #20]	; (800136c <MX_I2C1_Init+0x74>)
 8001358:	f004 faa0 	bl	800589c <HAL_I2CEx_ConfigDigitalFilter>
 800135c:	4603      	mov	r3, r0
 800135e:	2b00      	cmp	r3, #0
 8001360:	d001      	beq.n	8001366 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001362:	f001 fc0d 	bl	8002b80 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001366:	bf00      	nop
 8001368:	bd80      	pop	{r7, pc}
 800136a:	bf00      	nop
 800136c:	200004b8 	.word	0x200004b8
 8001370:	40005400 	.word	0x40005400
 8001374:	6000030d 	.word	0x6000030d

08001378 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	b0aa      	sub	sp, #168	; 0xa8
 800137c:	af00      	add	r7, sp, #0
 800137e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001380:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001384:	2200      	movs	r2, #0
 8001386:	601a      	str	r2, [r3, #0]
 8001388:	605a      	str	r2, [r3, #4]
 800138a:	609a      	str	r2, [r3, #8]
 800138c:	60da      	str	r2, [r3, #12]
 800138e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001390:	f107 0310 	add.w	r3, r7, #16
 8001394:	2284      	movs	r2, #132	; 0x84
 8001396:	2100      	movs	r1, #0
 8001398:	4618      	mov	r0, r3
 800139a:	f00e ff61 	bl	8010260 <memset>
  if(i2cHandle->Instance==I2C1)
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	4a22      	ldr	r2, [pc, #136]	; (800142c <HAL_I2C_MspInit+0xb4>)
 80013a4:	4293      	cmp	r3, r2
 80013a6:	d13c      	bne.n	8001422 <HAL_I2C_MspInit+0xaa>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80013a8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80013ac:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80013ae:	2300      	movs	r3, #0
 80013b0:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80013b2:	f107 0310 	add.w	r3, r7, #16
 80013b6:	4618      	mov	r0, r3
 80013b8:	f005 f930 	bl	800661c <HAL_RCCEx_PeriphCLKConfig>
 80013bc:	4603      	mov	r3, r0
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d001      	beq.n	80013c6 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 80013c2:	f001 fbdd 	bl	8002b80 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013c6:	4b1a      	ldr	r3, [pc, #104]	; (8001430 <HAL_I2C_MspInit+0xb8>)
 80013c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ca:	4a19      	ldr	r2, [pc, #100]	; (8001430 <HAL_I2C_MspInit+0xb8>)
 80013cc:	f043 0302 	orr.w	r3, r3, #2
 80013d0:	6313      	str	r3, [r2, #48]	; 0x30
 80013d2:	4b17      	ldr	r3, [pc, #92]	; (8001430 <HAL_I2C_MspInit+0xb8>)
 80013d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013d6:	f003 0302 	and.w	r3, r3, #2
 80013da:	60fb      	str	r3, [r7, #12]
 80013dc:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80013de:	f44f 7340 	mov.w	r3, #768	; 0x300
 80013e2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80013e6:	2312      	movs	r3, #18
 80013e8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ec:	2300      	movs	r3, #0
 80013ee:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013f2:	2303      	movs	r3, #3
 80013f4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80013f8:	2304      	movs	r3, #4
 80013fa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013fe:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001402:	4619      	mov	r1, r3
 8001404:	480b      	ldr	r0, [pc, #44]	; (8001434 <HAL_I2C_MspInit+0xbc>)
 8001406:	f002 fac9 	bl	800399c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800140a:	4b09      	ldr	r3, [pc, #36]	; (8001430 <HAL_I2C_MspInit+0xb8>)
 800140c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800140e:	4a08      	ldr	r2, [pc, #32]	; (8001430 <HAL_I2C_MspInit+0xb8>)
 8001410:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001414:	6413      	str	r3, [r2, #64]	; 0x40
 8001416:	4b06      	ldr	r3, [pc, #24]	; (8001430 <HAL_I2C_MspInit+0xb8>)
 8001418:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800141a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800141e:	60bb      	str	r3, [r7, #8]
 8001420:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001422:	bf00      	nop
 8001424:	37a8      	adds	r7, #168	; 0xa8
 8001426:	46bd      	mov	sp, r7
 8001428:	bd80      	pop	{r7, pc}
 800142a:	bf00      	nop
 800142c:	40005400 	.word	0x40005400
 8001430:	40023800 	.word	0x40023800
 8001434:	40020400 	.word	0x40020400

08001438 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001438:	b590      	push	{r4, r7, lr}
 800143a:	f5ad 5d24 	sub.w	sp, sp, #10496	; 0x2900
 800143e:	b081      	sub	sp, #4
 8001440:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001442:	f002 f84a 	bl	80034da <HAL_Init>

  /* USER CODE BEGIN Init */

	// VL53L0X initialization stuff
	uint32_t refSpadCount = 0;
 8001446:	2300      	movs	r3, #0
 8001448:	f642 0270 	movw	r2, #10352	; 0x2870
 800144c:	443a      	add	r2, r7
 800144e:	6013      	str	r3, [r2, #0]
	uint8_t isApertureSpads = 0;
 8001450:	2300      	movs	r3, #0
 8001452:	f642 026f 	movw	r2, #10351	; 0x286f
 8001456:	443a      	add	r2, r7
 8001458:	7013      	strb	r3, [r2, #0]
	uint8_t VhvSettings = 0;
 800145a:	2300      	movs	r3, #0
 800145c:	f642 026e 	movw	r2, #10350	; 0x286e
 8001460:	443a      	add	r2, r7
 8001462:	7013      	strb	r3, [r2, #0]
	uint8_t PhaseCal = 0;
 8001464:	2300      	movs	r3, #0
 8001466:	f642 026d 	movw	r2, #10349	; 0x286d
 800146a:	443a      	add	r2, r7
 800146c:	7013      	strb	r3, [r2, #0]

	VL53L0X_Dev_t vl53l0x_s[NUM_SENSOR];
	VL53L0X_DEV Dev;

	uint8_t tca_ch[8] = {0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80}; // control register of TCA9548A
 800146e:	f607 03f8 	addw	r3, r7, #2296	; 0x8f8
 8001472:	f2a3 6314 	subw	r3, r3, #1556	; 0x614
 8001476:	4a55      	ldr	r2, [pc, #340]	; (80015cc <main+0x194>)
 8001478:	e892 0003 	ldmia.w	r2, {r0, r1}
 800147c:	e883 0003 	stmia.w	r3, {r0, r1}
	uint8_t tca_ch_reset = 0x00;
 8001480:	f607 03f8 	addw	r3, r7, #2296	; 0x8f8
 8001484:	f2a3 6315 	subw	r3, r3, #1557	; 0x615
 8001488:	2200      	movs	r2, #0
 800148a:	701a      	strb	r2, [r3, #0]
    uint8_t tca_addr[] = {0x70, 0x71, 0x72};
 800148c:	f607 03f8 	addw	r3, r7, #2296	; 0x8f8
 8001490:	f5a3 63c3 	sub.w	r3, r3, #1560	; 0x618
 8001494:	4a4e      	ldr	r2, [pc, #312]	; (80015d0 <main+0x198>)
 8001496:	6812      	ldr	r2, [r2, #0]
 8001498:	4611      	mov	r1, r2
 800149a:	8019      	strh	r1, [r3, #0]
 800149c:	3302      	adds	r3, #2
 800149e:	0c12      	lsrs	r2, r2, #16
 80014a0:	701a      	strb	r2, [r3, #0]

    HAL_UART_Receive_IT(&huart1,&rxData,1);
 80014a2:	2201      	movs	r2, #1
 80014a4:	494b      	ldr	r1, [pc, #300]	; (80015d4 <main+0x19c>)
 80014a6:	484c      	ldr	r0, [pc, #304]	; (80015d8 <main+0x1a0>)
 80014a8:	f008 fb21 	bl	8009aee <HAL_UART_Receive_IT>
  int32_t rawData;

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80014ac:	f001 fa42 	bl	8002934 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80014b0:	f7ff fdc2 	bl	8001038 <MX_GPIO_Init>
  MX_I2C1_Init();
 80014b4:	f7ff ff20 	bl	80012f8 <MX_I2C1_Init>
  MX_TIM7_Init();
 80014b8:	f001 fe96 	bl	80031e8 <MX_TIM7_Init>
  MX_USART1_UART_Init();
 80014bc:	f001 ff32 	bl	8003324 <MX_USART1_UART_Init>
  MX_TIM2_Init();
 80014c0:	f001 fe1c 	bl	80030fc <MX_TIM2_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 80014c4:	f001 faa4 	bl	8002a10 <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */


  HAL_TIM_PWM_Start(&htim2,TIM_CHANNEL_1);
 80014c8:	2100      	movs	r1, #0
 80014ca:	4844      	ldr	r0, [pc, #272]	; (80015dc <main+0x1a4>)
 80014cc:	f006 fad4 	bl	8007a78 <HAL_TIM_PWM_Start>
  HAL_UART_Receive_IT(&huart1, &rxData, 1);
 80014d0:	2201      	movs	r2, #1
 80014d2:	4940      	ldr	r1, [pc, #256]	; (80015d4 <main+0x19c>)
 80014d4:	4840      	ldr	r0, [pc, #256]	; (80015d8 <main+0x1a0>)
 80014d6:	f008 fb0a 	bl	8009aee <HAL_UART_Receive_IT>

  // Initialize the HX711
  HX711_Init();
 80014da:	f7ff fe65 	bl	80011a8 <HX711_Init>

  /* UART interrupt initialization */
  HAL_UART_Transmit(&huart1, (uint8_t*)Message, sprintf((char*)Message, "JH TACTS test\n\r"), 100);
 80014de:	4940      	ldr	r1, [pc, #256]	; (80015e0 <main+0x1a8>)
 80014e0:	4840      	ldr	r0, [pc, #256]	; (80015e4 <main+0x1ac>)
 80014e2:	f00f fd45 	bl	8010f70 <siprintf>
 80014e6:	4603      	mov	r3, r0
 80014e8:	b29a      	uxth	r2, r3
 80014ea:	2364      	movs	r3, #100	; 0x64
 80014ec:	493d      	ldr	r1, [pc, #244]	; (80015e4 <main+0x1ac>)
 80014ee:	483a      	ldr	r0, [pc, #232]	; (80015d8 <main+0x1a0>)
 80014f0:	f008 fa7a 	bl	80099e8 <HAL_UART_Transmit>

	for (int i = 0; i < sizeof(tca_addr); i++) {
 80014f4:	2300      	movs	r3, #0
 80014f6:	f642 02f4 	movw	r2, #10484	; 0x28f4
 80014fa:	443a      	add	r2, r7
 80014fc:	6013      	str	r3, [r2, #0]
 80014fe:	e021      	b.n	8001544 <main+0x10c>
		HAL_I2C_Master_Transmit(&hi2c1, tca_addr[i] << 1, &tca_ch_reset, 1, 1000);
 8001500:	f607 03f8 	addw	r3, r7, #2296	; 0x8f8
 8001504:	f5a3 62c3 	sub.w	r2, r3, #1560	; 0x618
 8001508:	f642 03f4 	movw	r3, #10484	; 0x28f4
 800150c:	443b      	add	r3, r7
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	4413      	add	r3, r2
 8001512:	781b      	ldrb	r3, [r3, #0]
 8001514:	b29b      	uxth	r3, r3
 8001516:	005b      	lsls	r3, r3, #1
 8001518:	b299      	uxth	r1, r3
 800151a:	4a33      	ldr	r2, [pc, #204]	; (80015e8 <main+0x1b0>)
 800151c:	f642 03f8 	movw	r3, #10488	; 0x28f8
 8001520:	4413      	add	r3, r2
 8001522:	19da      	adds	r2, r3, r7
 8001524:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001528:	9300      	str	r3, [sp, #0]
 800152a:	2301      	movs	r3, #1
 800152c:	482f      	ldr	r0, [pc, #188]	; (80015ec <main+0x1b4>)
 800152e:	f002 ff2b 	bl	8004388 <HAL_I2C_Master_Transmit>
	for (int i = 0; i < sizeof(tca_addr); i++) {
 8001532:	f642 03f4 	movw	r3, #10484	; 0x28f4
 8001536:	443b      	add	r3, r7
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	3301      	adds	r3, #1
 800153c:	f642 02f4 	movw	r2, #10484	; 0x28f4
 8001540:	443a      	add	r2, r7
 8001542:	6013      	str	r3, [r2, #0]
 8001544:	f642 03f4 	movw	r3, #10484	; 0x28f4
 8001548:	443b      	add	r3, r7
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	2b02      	cmp	r3, #2
 800154e:	d9d7      	bls.n	8001500 <main+0xc8>
	}

	for (int i = 0; i < NUM_SENSOR; i++) {
 8001550:	2300      	movs	r3, #0
 8001552:	f642 02f0 	movw	r2, #10480	; 0x28f0
 8001556:	443a      	add	r2, r7
 8001558:	6013      	str	r3, [r2, #0]
 800155a:	e122      	b.n	80017a2 <main+0x36a>

		uint8_t q = i / 8;
 800155c:	f642 03f0 	movw	r3, #10480	; 0x28f0
 8001560:	443b      	add	r3, r7
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	2b00      	cmp	r3, #0
 8001566:	da00      	bge.n	800156a <main+0x132>
 8001568:	3307      	adds	r3, #7
 800156a:	10db      	asrs	r3, r3, #3
 800156c:	f642 027b 	movw	r2, #10363	; 0x287b
 8001570:	443a      	add	r2, r7
 8001572:	7013      	strb	r3, [r2, #0]
		uint8_t r = i % 8;
 8001574:	f642 03f0 	movw	r3, #10480	; 0x28f0
 8001578:	443b      	add	r3, r7
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	425a      	negs	r2, r3
 800157e:	f003 0307 	and.w	r3, r3, #7
 8001582:	f002 0207 	and.w	r2, r2, #7
 8001586:	bf58      	it	pl
 8001588:	4253      	negpl	r3, r2
 800158a:	f642 027a 	movw	r2, #10362	; 0x287a
 800158e:	443a      	add	r2, r7
 8001590:	7013      	strb	r3, [r2, #0]

		for (int j = 0; j < sizeof(tca_addr); j++) {
 8001592:	2300      	movs	r3, #0
 8001594:	f642 02ec 	movw	r2, #10476	; 0x28ec
 8001598:	443a      	add	r2, r7
 800159a:	6013      	str	r3, [r2, #0]
 800159c:	e055      	b.n	800164a <main+0x212>
			uint8_t *channel = (j == q) ? &tca_ch[r] : &tca_ch_reset;
 800159e:	f642 037b 	movw	r3, #10363	; 0x287b
 80015a2:	443b      	add	r3, r7
 80015a4:	781b      	ldrb	r3, [r3, #0]
 80015a6:	f642 02ec 	movw	r2, #10476	; 0x28ec
 80015aa:	443a      	add	r2, r7
 80015ac:	6812      	ldr	r2, [r2, #0]
 80015ae:	429a      	cmp	r2, r3
 80015b0:	d120      	bne.n	80015f4 <main+0x1bc>
 80015b2:	f642 037a 	movw	r3, #10362	; 0x287a
 80015b6:	443b      	add	r3, r7
 80015b8:	781a      	ldrb	r2, [r3, #0]
 80015ba:	4b0d      	ldr	r3, [pc, #52]	; (80015f0 <main+0x1b8>)
 80015bc:	f503 5323 	add.w	r3, r3, #10432	; 0x28c0
 80015c0:	f103 0338 	add.w	r3, r3, #56	; 0x38
 80015c4:	443b      	add	r3, r7
 80015c6:	4413      	add	r3, r2
 80015c8:	e01a      	b.n	8001600 <main+0x1c8>
 80015ca:	bf00      	nop
 80015cc:	080156c0 	.word	0x080156c0
 80015d0:	080156c8 	.word	0x080156c8
 80015d4:	2000058e 	.word	0x2000058e
 80015d8:	2000069c 	.word	0x2000069c
 80015dc:	20000604 	.word	0x20000604
 80015e0:	080153f8 	.word	0x080153f8
 80015e4:	200005a0 	.word	0x200005a0
 80015e8:	ffffd9eb 	.word	0xffffd9eb
 80015ec:	200004b8 	.word	0x200004b8
 80015f0:	ffffd9ec 	.word	0xffffd9ec
 80015f4:	4bac      	ldr	r3, [pc, #688]	; (80018a8 <main+0x470>)
 80015f6:	f503 5323 	add.w	r3, r3, #10432	; 0x28c0
 80015fa:	f103 0338 	add.w	r3, r3, #56	; 0x38
 80015fe:	443b      	add	r3, r7
 8001600:	f642 0274 	movw	r2, #10356	; 0x2874
 8001604:	443a      	add	r2, r7
 8001606:	6013      	str	r3, [r2, #0]
			HAL_I2C_Master_Transmit(&hi2c1, tca_addr[j] << 1, channel, 1, 1000);
 8001608:	f607 03f8 	addw	r3, r7, #2296	; 0x8f8
 800160c:	f5a3 62c3 	sub.w	r2, r3, #1560	; 0x618
 8001610:	f642 03ec 	movw	r3, #10476	; 0x28ec
 8001614:	443b      	add	r3, r7
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	4413      	add	r3, r2
 800161a:	781b      	ldrb	r3, [r3, #0]
 800161c:	b29b      	uxth	r3, r3
 800161e:	005b      	lsls	r3, r3, #1
 8001620:	b299      	uxth	r1, r3
 8001622:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001626:	9300      	str	r3, [sp, #0]
 8001628:	2301      	movs	r3, #1
 800162a:	f642 0274 	movw	r2, #10356	; 0x2874
 800162e:	443a      	add	r2, r7
 8001630:	6812      	ldr	r2, [r2, #0]
 8001632:	489e      	ldr	r0, [pc, #632]	; (80018ac <main+0x474>)
 8001634:	f002 fea8 	bl	8004388 <HAL_I2C_Master_Transmit>
		for (int j = 0; j < sizeof(tca_addr); j++) {
 8001638:	f642 03ec 	movw	r3, #10476	; 0x28ec
 800163c:	443b      	add	r3, r7
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	3301      	adds	r3, #1
 8001642:	f642 02ec 	movw	r2, #10476	; 0x28ec
 8001646:	443a      	add	r2, r7
 8001648:	6013      	str	r3, [r2, #0]
 800164a:	f642 03ec 	movw	r3, #10476	; 0x28ec
 800164e:	443b      	add	r3, r7
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	2b02      	cmp	r3, #2
 8001654:	d9a3      	bls.n	800159e <main+0x166>
		}

		Dev = &vl53l0x_s[i];
 8001656:	4b96      	ldr	r3, [pc, #600]	; (80018b0 <main+0x478>)
 8001658:	f503 5323 	add.w	r3, r3, #10432	; 0x28c0
 800165c:	f103 0338 	add.w	r3, r3, #56	; 0x38
 8001660:	443b      	add	r3, r7
 8001662:	f642 02f0 	movw	r2, #10480	; 0x28f0
 8001666:	443a      	add	r2, r7
 8001668:	6812      	ldr	r2, [r2, #0]
 800166a:	f44f 71c8 	mov.w	r1, #400	; 0x190
 800166e:	fb01 f202 	mul.w	r2, r1, r2
 8001672:	4413      	add	r3, r2
 8001674:	f642 029c 	movw	r2, #10396	; 0x289c
 8001678:	443a      	add	r2, r7
 800167a:	6013      	str	r3, [r2, #0]
		Dev->I2cHandle = &hi2c1;
 800167c:	f642 039c 	movw	r3, #10396	; 0x289c
 8001680:	443b      	add	r3, r7
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	4a89      	ldr	r2, [pc, #548]	; (80018ac <main+0x474>)
 8001686:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
		Dev->I2cDevAddr = VL53L0X_ADDR;
 800168a:	f642 039c 	movw	r3, #10396	; 0x289c
 800168e:	443b      	add	r3, r7
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	2252      	movs	r2, #82	; 0x52
 8001694:	f883 2160 	strb.w	r2, [r3, #352]	; 0x160

		VL53L0X_WaitDeviceBooted( Dev );
 8001698:	f642 039c 	movw	r3, #10396	; 0x289c
 800169c:	443b      	add	r3, r7
 800169e:	6818      	ldr	r0, [r3, #0]
 80016a0:	f00a f872 	bl	800b788 <VL53L0X_WaitDeviceBooted>
		VL53L0X_DataInit( Dev );
 80016a4:	f642 039c 	movw	r3, #10396	; 0x289c
 80016a8:	443b      	add	r3, r7
 80016aa:	6818      	ldr	r0, [r3, #0]
 80016ac:	f009 fd86 	bl	800b1bc <VL53L0X_DataInit>
		VL53L0X_StaticInit( Dev );
 80016b0:	f642 039c 	movw	r3, #10396	; 0x289c
 80016b4:	443b      	add	r3, r7
 80016b6:	6818      	ldr	r0, [r3, #0]
 80016b8:	f009 fee4 	bl	800b484 <VL53L0X_StaticInit>
		VL53L0X_SetDeviceMode(Dev, VL53L0X_DEVICEMODE_CONTINUOUS_RANGING);
 80016bc:	2101      	movs	r1, #1
 80016be:	f642 039c 	movw	r3, #10396	; 0x289c
 80016c2:	443b      	add	r3, r7
 80016c4:	6818      	ldr	r0, [r3, #0]
 80016c6:	f00a f8fd 	bl	800b8c4 <VL53L0X_SetDeviceMode>
		VL53L0X_PerformRefCalibration( Dev, &VhvSettings, &PhaseCal);
 80016ca:	f642 026d 	movw	r2, #10349	; 0x286d
 80016ce:	443a      	add	r2, r7
 80016d0:	f642 036e 	movw	r3, #10350	; 0x286e
 80016d4:	443b      	add	r3, r7
 80016d6:	4619      	mov	r1, r3
 80016d8:	f642 039c 	movw	r3, #10396	; 0x289c
 80016dc:	443b      	add	r3, r7
 80016de:	6818      	ldr	r0, [r3, #0]
 80016e0:	f00a fd72 	bl	800c1c8 <VL53L0X_PerformRefCalibration>
		VL53L0X_PerformRefSpadManagement( Dev, &refSpadCount, &isApertureSpads);
 80016e4:	f642 026f 	movw	r2, #10351	; 0x286f
 80016e8:	443a      	add	r2, r7
 80016ea:	f642 0370 	movw	r3, #10352	; 0x2870
 80016ee:	443b      	add	r3, r7
 80016f0:	4619      	mov	r1, r3
 80016f2:	f642 039c 	movw	r3, #10396	; 0x289c
 80016f6:	443b      	add	r3, r7
 80016f8:	6818      	ldr	r0, [r3, #0]
 80016fa:	f00b f9f3 	bl	800cae4 <VL53L0X_PerformRefSpadManagement>
		VL53L0X_SetLimitCheckEnable( Dev, VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, 1);
 80016fe:	2201      	movs	r2, #1
 8001700:	2100      	movs	r1, #0
 8001702:	f642 039c 	movw	r3, #10396	; 0x289c
 8001706:	443b      	add	r3, r7
 8001708:	6818      	ldr	r0, [r3, #0]
 800170a:	f00a fb57 	bl	800bdbc <VL53L0X_SetLimitCheckEnable>
		VL53L0X_SetLimitCheckEnable( Dev, VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE, 1);
 800170e:	2201      	movs	r2, #1
 8001710:	2101      	movs	r1, #1
 8001712:	f642 039c 	movw	r3, #10396	; 0x289c
 8001716:	443b      	add	r3, r7
 8001718:	6818      	ldr	r0, [r3, #0]
 800171a:	f00a fb4f 	bl	800bdbc <VL53L0X_SetLimitCheckEnable>
		VL53L0X_SetLimitCheckValue( Dev, VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE, (FixPoint1616_t)(0.1*65536));
 800171e:	f641 1299 	movw	r2, #6553	; 0x1999
 8001722:	2101      	movs	r1, #1
 8001724:	f642 039c 	movw	r3, #10396	; 0x289c
 8001728:	443b      	add	r3, r7
 800172a:	6818      	ldr	r0, [r3, #0]
 800172c:	f00a fbf6 	bl	800bf1c <VL53L0X_SetLimitCheckValue>
		VL53L0X_SetLimitCheckValue( Dev, VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, (FixPoint1616_t)(60*65536));
 8001730:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8001734:	2100      	movs	r1, #0
 8001736:	f642 039c 	movw	r3, #10396	; 0x289c
 800173a:	443b      	add	r3, r7
 800173c:	6818      	ldr	r0, [r3, #0]
 800173e:	f00a fbed 	bl	800bf1c <VL53L0X_SetLimitCheckValue>
		VL53L0X_SetMeasurementTimingBudgetMicroSeconds( Dev, 33000);
 8001742:	f248 01e8 	movw	r1, #33000	; 0x80e8
 8001746:	f642 039c 	movw	r3, #10396	; 0x289c
 800174a:	443b      	add	r3, r7
 800174c:	6818      	ldr	r0, [r3, #0]
 800174e:	f00a f917 	bl	800b980 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>
		VL53L0X_SetVcselPulsePeriod( Dev, VL53L0X_VCSEL_PERIOD_PRE_RANGE, 18);
 8001752:	2212      	movs	r2, #18
 8001754:	2100      	movs	r1, #0
 8001756:	f642 039c 	movw	r3, #10396	; 0x289c
 800175a:	443b      	add	r3, r7
 800175c:	6818      	ldr	r0, [r3, #0]
 800175e:	f00a f935 	bl	800b9cc <VL53L0X_SetVcselPulsePeriod>
		VL53L0X_SetVcselPulsePeriod( Dev, VL53L0X_VCSEL_PERIOD_FINAL_RANGE, 14);
 8001762:	220e      	movs	r2, #14
 8001764:	2101      	movs	r1, #1
 8001766:	f642 039c 	movw	r3, #10396	; 0x289c
 800176a:	443b      	add	r3, r7
 800176c:	6818      	ldr	r0, [r3, #0]
 800176e:	f00a f92d 	bl	800b9cc <VL53L0X_SetVcselPulsePeriod>
		// KalmanFilter initializer BEGIN //
		float Q = 0.1f; // Process noise covariance
		float R = 1.0f;   // Measurement noise covariance
		KalmanFilter_Init(&kalman_filters[i], Q, R);
		// KalmanFilter initializer END //			 */
		HAL_UART_Transmit(&huart1, (uint8_t*)Message, sprintf((char*)Message, "%d complete \n\r",i), 100);
 8001772:	f642 03f0 	movw	r3, #10480	; 0x28f0
 8001776:	443b      	add	r3, r7
 8001778:	681a      	ldr	r2, [r3, #0]
 800177a:	494e      	ldr	r1, [pc, #312]	; (80018b4 <main+0x47c>)
 800177c:	484e      	ldr	r0, [pc, #312]	; (80018b8 <main+0x480>)
 800177e:	f00f fbf7 	bl	8010f70 <siprintf>
 8001782:	4603      	mov	r3, r0
 8001784:	b29a      	uxth	r2, r3
 8001786:	2364      	movs	r3, #100	; 0x64
 8001788:	494b      	ldr	r1, [pc, #300]	; (80018b8 <main+0x480>)
 800178a:	484c      	ldr	r0, [pc, #304]	; (80018bc <main+0x484>)
 800178c:	f008 f92c 	bl	80099e8 <HAL_UART_Transmit>
	for (int i = 0; i < NUM_SENSOR; i++) {
 8001790:	f642 03f0 	movw	r3, #10480	; 0x28f0
 8001794:	443b      	add	r3, r7
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	3301      	adds	r3, #1
 800179a:	f642 02f0 	movw	r2, #10480	; 0x28f0
 800179e:	443a      	add	r2, r7
 80017a0:	6013      	str	r3, [r2, #0]
 80017a2:	f642 03f0 	movw	r3, #10480	; 0x28f0
 80017a6:	443b      	add	r3, r7
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	2b17      	cmp	r3, #23
 80017ac:	f77f aed6 	ble.w	800155c <main+0x124>



  while (1)
  {
	  if(startMessage==0){
 80017b0:	4b43      	ldr	r3, [pc, #268]	; (80018c0 <main+0x488>)
 80017b2:	781b      	ldrb	r3, [r3, #0]
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d15a      	bne.n	800186e <main+0x436>
		  HAL_UART_Transmit(&huart1, (uint8_t*)Message, sprintf((char*)Message, "--------------------------------------------------------------\n"), 100);
 80017b8:	4942      	ldr	r1, [pc, #264]	; (80018c4 <main+0x48c>)
 80017ba:	483f      	ldr	r0, [pc, #252]	; (80018b8 <main+0x480>)
 80017bc:	f00f fbd8 	bl	8010f70 <siprintf>
 80017c0:	4603      	mov	r3, r0
 80017c2:	b29a      	uxth	r2, r3
 80017c4:	2364      	movs	r3, #100	; 0x64
 80017c6:	493c      	ldr	r1, [pc, #240]	; (80018b8 <main+0x480>)
 80017c8:	483c      	ldr	r0, [pc, #240]	; (80018bc <main+0x484>)
 80017ca:	f008 f90d 	bl	80099e8 <HAL_UART_Transmit>
		  HAL_UART_Transmit(&huart1, (uint8_t*)Message, sprintf((char*)Message, "----- Auto Data Logging Device for TACTS made by JaeHyeong----\n"), 100);
 80017ce:	493e      	ldr	r1, [pc, #248]	; (80018c8 <main+0x490>)
 80017d0:	4839      	ldr	r0, [pc, #228]	; (80018b8 <main+0x480>)
 80017d2:	f00f fbcd 	bl	8010f70 <siprintf>
 80017d6:	4603      	mov	r3, r0
 80017d8:	b29a      	uxth	r2, r3
 80017da:	2364      	movs	r3, #100	; 0x64
 80017dc:	4936      	ldr	r1, [pc, #216]	; (80018b8 <main+0x480>)
 80017de:	4837      	ldr	r0, [pc, #220]	; (80018bc <main+0x484>)
 80017e0:	f008 f902 	bl	80099e8 <HAL_UART_Transmit>
		  HAL_UART_Transmit(&huart1, (uint8_t*)Message, sprintf((char*)Message, "-----------rev XX : Rotaing Revolution Motor (Deg)------------\n"), 100);
 80017e4:	4939      	ldr	r1, [pc, #228]	; (80018cc <main+0x494>)
 80017e6:	4834      	ldr	r0, [pc, #208]	; (80018b8 <main+0x480>)
 80017e8:	f00f fbc2 	bl	8010f70 <siprintf>
 80017ec:	4603      	mov	r3, r0
 80017ee:	b29a      	uxth	r2, r3
 80017f0:	2364      	movs	r3, #100	; 0x64
 80017f2:	4931      	ldr	r1, [pc, #196]	; (80018b8 <main+0x480>)
 80017f4:	4831      	ldr	r0, [pc, #196]	; (80018bc <main+0x484>)
 80017f6:	f008 f8f7 	bl	80099e8 <HAL_UART_Transmit>
		  HAL_UART_Transmit(&huart1, (uint8_t*)Message, sprintf((char*)Message, "-----------lin XX : Moving Linear Motor (mm)------------------\n"), 100);
 80017fa:	4935      	ldr	r1, [pc, #212]	; (80018d0 <main+0x498>)
 80017fc:	482e      	ldr	r0, [pc, #184]	; (80018b8 <main+0x480>)
 80017fe:	f00f fbb7 	bl	8010f70 <siprintf>
 8001802:	4603      	mov	r3, r0
 8001804:	b29a      	uxth	r2, r3
 8001806:	2364      	movs	r3, #100	; 0x64
 8001808:	492b      	ldr	r1, [pc, #172]	; (80018b8 <main+0x480>)
 800180a:	482c      	ldr	r0, [pc, #176]	; (80018bc <main+0x484>)
 800180c:	f008 f8ec 	bl	80099e8 <HAL_UART_Transmit>
		  HAL_UART_Transmit(&huart1, (uint8_t*)Message, sprintf((char*)Message, "-----------servo XX : Poking XX * 0.8 (mm)--------------------\n"), 100);
 8001810:	4930      	ldr	r1, [pc, #192]	; (80018d4 <main+0x49c>)
 8001812:	4829      	ldr	r0, [pc, #164]	; (80018b8 <main+0x480>)
 8001814:	f00f fbac 	bl	8010f70 <siprintf>
 8001818:	4603      	mov	r3, r0
 800181a:	b29a      	uxth	r2, r3
 800181c:	2364      	movs	r3, #100	; 0x64
 800181e:	4926      	ldr	r1, [pc, #152]	; (80018b8 <main+0x480>)
 8001820:	4826      	ldr	r0, [pc, #152]	; (80018bc <main+0x484>)
 8001822:	f008 f8e1 	bl	80099e8 <HAL_UART_Transmit>
		  HAL_UART_Transmit(&huart1, (uint8_t*)Message, sprintf((char*)Message, "-----------auto : Poking the designed point and data logging--\n"), 100);
 8001826:	492c      	ldr	r1, [pc, #176]	; (80018d8 <main+0x4a0>)
 8001828:	4823      	ldr	r0, [pc, #140]	; (80018b8 <main+0x480>)
 800182a:	f00f fba1 	bl	8010f70 <siprintf>
 800182e:	4603      	mov	r3, r0
 8001830:	b29a      	uxth	r2, r3
 8001832:	2364      	movs	r3, #100	; 0x64
 8001834:	4920      	ldr	r1, [pc, #128]	; (80018b8 <main+0x480>)
 8001836:	4821      	ldr	r0, [pc, #132]	; (80018bc <main+0x484>)
 8001838:	f008 f8d6 	bl	80099e8 <HAL_UART_Transmit>
		  HAL_UART_Transmit(&huart1, (uint8_t*)Message, sprintf((char*)Message, "-------------------------testbed_axial------------------------\n"), 100);
 800183c:	4927      	ldr	r1, [pc, #156]	; (80018dc <main+0x4a4>)
 800183e:	481e      	ldr	r0, [pc, #120]	; (80018b8 <main+0x480>)
 8001840:	f00f fb96 	bl	8010f70 <siprintf>
 8001844:	4603      	mov	r3, r0
 8001846:	b29a      	uxth	r2, r3
 8001848:	2364      	movs	r3, #100	; 0x64
 800184a:	491b      	ldr	r1, [pc, #108]	; (80018b8 <main+0x480>)
 800184c:	481b      	ldr	r0, [pc, #108]	; (80018bc <main+0x484>)
 800184e:	f008 f8cb 	bl	80099e8 <HAL_UART_Transmit>
		  HAL_UART_Transmit(&huart1, (uint8_t*)Message, sprintf((char*)Message, "--------------------------------------------------------------\n"), 100);
 8001852:	491c      	ldr	r1, [pc, #112]	; (80018c4 <main+0x48c>)
 8001854:	4818      	ldr	r0, [pc, #96]	; (80018b8 <main+0x480>)
 8001856:	f00f fb8b 	bl	8010f70 <siprintf>
 800185a:	4603      	mov	r3, r0
 800185c:	b29a      	uxth	r2, r3
 800185e:	2364      	movs	r3, #100	; 0x64
 8001860:	4915      	ldr	r1, [pc, #84]	; (80018b8 <main+0x480>)
 8001862:	4816      	ldr	r0, [pc, #88]	; (80018bc <main+0x484>)
 8001864:	f008 f8c0 	bl	80099e8 <HAL_UART_Transmit>
		  startMessage =1;
 8001868:	4b15      	ldr	r3, [pc, #84]	; (80018c0 <main+0x488>)
 800186a:	2201      	movs	r2, #1
 800186c:	701a      	strb	r2, [r3, #0]
	  }

	  if(receivedFlag)
 800186e:	4b1c      	ldr	r3, [pc, #112]	; (80018e0 <main+0x4a8>)
 8001870:	781b      	ldrb	r3, [r3, #0]
 8001872:	2b00      	cmp	r3, #0
 8001874:	d09c      	beq.n	80017b0 <main+0x378>
	  {
		  ///////////////////// Step rev /////////////////////

		  char* command = "all";
 8001876:	4b1b      	ldr	r3, [pc, #108]	; (80018e4 <main+0x4ac>)
 8001878:	f642 02b4 	movw	r2, #10420	; 0x28b4
 800187c:	443a      	add	r2, r7
 800187e:	6013      	str	r3, [r2, #0]
		  if(strncmp((char*)rxBuffer, command,strlen(command)) == 0)
 8001880:	f642 03b4 	movw	r3, #10420	; 0x28b4
 8001884:	443b      	add	r3, r7
 8001886:	6818      	ldr	r0, [r3, #0]
 8001888:	f7fe fcc2 	bl	8000210 <strlen>
 800188c:	4603      	mov	r3, r0
 800188e:	461a      	mov	r2, r3
 8001890:	f642 03b4 	movw	r3, #10420	; 0x28b4
 8001894:	443b      	add	r3, r7
 8001896:	6819      	ldr	r1, [r3, #0]
 8001898:	4813      	ldr	r0, [pc, #76]	; (80018e8 <main+0x4b0>)
 800189a:	f00f fc02 	bl	80110a2 <strncmp>
 800189e:	4603      	mov	r3, r0
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	f040 80e4 	bne.w	8001a6e <main+0x636>
 80018a6:	e021      	b.n	80018ec <main+0x4b4>
 80018a8:	ffffd9eb 	.word	0xffffd9eb
 80018ac:	200004b8 	.word	0x200004b8
 80018b0:	ffffd9f4 	.word	0xffffd9f4
 80018b4:	08015408 	.word	0x08015408
 80018b8:	200005a0 	.word	0x200005a0
 80018bc:	2000069c 	.word	0x2000069c
 80018c0:	2000059c 	.word	0x2000059c
 80018c4:	08015418 	.word	0x08015418
 80018c8:	08015458 	.word	0x08015458
 80018cc:	08015498 	.word	0x08015498
 80018d0:	080154d8 	.word	0x080154d8
 80018d4:	08015518 	.word	0x08015518
 80018d8:	08015558 	.word	0x08015558
 80018dc:	08015598 	.word	0x08015598
 80018e0:	2000058f 	.word	0x2000058f
 80018e4:	080155d8 	.word	0x080155d8
 80018e8:	2000050c 	.word	0x2000050c
		     {
		         float servo_dist=0;
 80018ec:	f607 03f8 	addw	r3, r7, #2296	; 0x8f8
 80018f0:	f2a3 631c 	subw	r3, r3, #1564	; 0x61c
 80018f4:	f04f 0200 	mov.w	r2, #0
 80018f8:	601a      	str	r2, [r3, #0]
		         int step_rev_angle=0;
 80018fa:	f607 03f8 	addw	r3, r7, #2296	; 0x8f8
 80018fe:	f5a3 63c4 	sub.w	r3, r3, #1568	; 0x620
 8001902:	2200      	movs	r2, #0
 8001904:	601a      	str	r2, [r3, #0]
		         int step_lin_dist=0;
 8001906:	f607 03f8 	addw	r3, r7, #2296	; 0x8f8
 800190a:	f2a3 6324 	subw	r3, r3, #1572	; 0x624
 800190e:	2200      	movs	r2, #0
 8001910:	601a      	str	r2, [r3, #0]

		         // Check if three integers are successfully parsed
		         if(sscanf((char*)rxBuffer + strlen(command)+1, "%f,%d,%d",&servo_dist, &step_rev_angle, &step_lin_dist) == 3)
 8001912:	f642 03b4 	movw	r3, #10420	; 0x28b4
 8001916:	443b      	add	r3, r7
 8001918:	6818      	ldr	r0, [r3, #0]
 800191a:	f7fe fc79 	bl	8000210 <strlen>
 800191e:	4603      	mov	r3, r0
 8001920:	3301      	adds	r3, #1
 8001922:	4ab3      	ldr	r2, [pc, #716]	; (8001bf0 <main+0x7b8>)
 8001924:	1898      	adds	r0, r3, r2
 8001926:	49b3      	ldr	r1, [pc, #716]	; (8001bf4 <main+0x7bc>)
 8001928:	f642 03f8 	movw	r3, #10488	; 0x28f8
 800192c:	440b      	add	r3, r1
 800192e:	19d9      	adds	r1, r3, r7
 8001930:	4ab1      	ldr	r2, [pc, #708]	; (8001bf8 <main+0x7c0>)
 8001932:	f642 03f8 	movw	r3, #10488	; 0x28f8
 8001936:	4413      	add	r3, r2
 8001938:	19da      	adds	r2, r3, r7
 800193a:	4bb0      	ldr	r3, [pc, #704]	; (8001bfc <main+0x7c4>)
 800193c:	f503 5323 	add.w	r3, r3, #10432	; 0x28c0
 8001940:	f103 0338 	add.w	r3, r3, #56	; 0x38
 8001944:	443b      	add	r3, r7
 8001946:	9300      	str	r3, [sp, #0]
 8001948:	460b      	mov	r3, r1
 800194a:	49ad      	ldr	r1, [pc, #692]	; (8001c00 <main+0x7c8>)
 800194c:	f00f fb30 	bl	8010fb0 <siscanf>
 8001950:	4603      	mov	r3, r0
 8001952:	2b03      	cmp	r3, #3
 8001954:	d179      	bne.n	8001a4a <main+0x612>
		         {
		             stepRev(step_rev_angle);
 8001956:	f607 03f8 	addw	r3, r7, #2296	; 0x8f8
 800195a:	f5a3 63c4 	sub.w	r3, r3, #1568	; 0x620
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	4618      	mov	r0, r3
 8001962:	f001 f91d 	bl	8002ba0 <stepRev>
		             stepLin(step_lin_dist);
 8001966:	f607 03f8 	addw	r3, r7, #2296	; 0x8f8
 800196a:	f2a3 6324 	subw	r3, r3, #1572	; 0x624
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	4618      	mov	r0, r3
 8001972:	f001 f97f 	bl	8002c74 <stepLin>
		             servo_angle(&htim2, TIM_CHANNEL_1, servo_dist);
 8001976:	f607 03f8 	addw	r3, r7, #2296	; 0x8f8
 800197a:	f2a3 631c 	subw	r3, r3, #1564	; 0x61c
 800197e:	edd3 7a00 	vldr	s15, [r3]
 8001982:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001986:	ee17 2a90 	vmov	r2, s15
 800198a:	2100      	movs	r1, #0
 800198c:	489d      	ldr	r0, [pc, #628]	; (8001c04 <main+0x7cc>)
 800198e:	f001 fa0b 	bl	8002da8 <servo_angle>
		             servo_dist *=0.8;
 8001992:	f607 03f8 	addw	r3, r7, #2296	; 0x8f8
 8001996:	f2a3 631c 	subw	r3, r3, #1564	; 0x61c
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	4618      	mov	r0, r3
 800199e:	f7fe fdf3 	bl	8000588 <__aeabi_f2d>
 80019a2:	a391      	add	r3, pc, #580	; (adr r3, 8001be8 <main+0x7b0>)
 80019a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019a8:	f7fe fe46 	bl	8000638 <__aeabi_dmul>
 80019ac:	4602      	mov	r2, r0
 80019ae:	460b      	mov	r3, r1
 80019b0:	4610      	mov	r0, r2
 80019b2:	4619      	mov	r1, r3
 80019b4:	f7ff f938 	bl	8000c28 <__aeabi_d2f>
 80019b8:	4602      	mov	r2, r0
 80019ba:	f607 03f8 	addw	r3, r7, #2296	; 0x8f8
 80019be:	f2a3 631c 	subw	r3, r3, #1564	; 0x61c
 80019c2:	601a      	str	r2, [r3, #0]

		 			HAL_UART_Transmit(&huart1, (uint8_t*)Message, sprintf((char*)Message, "%d deg rev \n\r",step_rev_angle), 100);
 80019c4:	f607 03f8 	addw	r3, r7, #2296	; 0x8f8
 80019c8:	f5a3 63c4 	sub.w	r3, r3, #1568	; 0x620
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	461a      	mov	r2, r3
 80019d0:	498d      	ldr	r1, [pc, #564]	; (8001c08 <main+0x7d0>)
 80019d2:	488e      	ldr	r0, [pc, #568]	; (8001c0c <main+0x7d4>)
 80019d4:	f00f facc 	bl	8010f70 <siprintf>
 80019d8:	4603      	mov	r3, r0
 80019da:	b29a      	uxth	r2, r3
 80019dc:	2364      	movs	r3, #100	; 0x64
 80019de:	498b      	ldr	r1, [pc, #556]	; (8001c0c <main+0x7d4>)
 80019e0:	488b      	ldr	r0, [pc, #556]	; (8001c10 <main+0x7d8>)
 80019e2:	f008 f801 	bl	80099e8 <HAL_UART_Transmit>
					HAL_UART_Transmit(&huart1, (uint8_t*)Message, sprintf((char*)Message, "%d mm lin \n\r",step_lin_dist), 100);
 80019e6:	f607 03f8 	addw	r3, r7, #2296	; 0x8f8
 80019ea:	f2a3 6324 	subw	r3, r3, #1572	; 0x624
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	461a      	mov	r2, r3
 80019f2:	4988      	ldr	r1, [pc, #544]	; (8001c14 <main+0x7dc>)
 80019f4:	4885      	ldr	r0, [pc, #532]	; (8001c0c <main+0x7d4>)
 80019f6:	f00f fabb 	bl	8010f70 <siprintf>
 80019fa:	4603      	mov	r3, r0
 80019fc:	b29a      	uxth	r2, r3
 80019fe:	2364      	movs	r3, #100	; 0x64
 8001a00:	4982      	ldr	r1, [pc, #520]	; (8001c0c <main+0x7d4>)
 8001a02:	4883      	ldr	r0, [pc, #524]	; (8001c10 <main+0x7d8>)
 8001a04:	f007 fff0 	bl	80099e8 <HAL_UART_Transmit>
					HAL_UART_Transmit(&huart1, (uint8_t*)Message, sprintf((char*)Message, "%.2f servo \n\r",servo_dist), 100);
 8001a08:	f607 03f8 	addw	r3, r7, #2296	; 0x8f8
 8001a0c:	f2a3 631c 	subw	r3, r3, #1564	; 0x61c
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	4618      	mov	r0, r3
 8001a14:	f7fe fdb8 	bl	8000588 <__aeabi_f2d>
 8001a18:	4602      	mov	r2, r0
 8001a1a:	460b      	mov	r3, r1
 8001a1c:	497e      	ldr	r1, [pc, #504]	; (8001c18 <main+0x7e0>)
 8001a1e:	487b      	ldr	r0, [pc, #492]	; (8001c0c <main+0x7d4>)
 8001a20:	f00f faa6 	bl	8010f70 <siprintf>
 8001a24:	4603      	mov	r3, r0
 8001a26:	b29a      	uxth	r2, r3
 8001a28:	2364      	movs	r3, #100	; 0x64
 8001a2a:	4978      	ldr	r1, [pc, #480]	; (8001c0c <main+0x7d4>)
 8001a2c:	4878      	ldr	r0, [pc, #480]	; (8001c10 <main+0x7d8>)
 8001a2e:	f007 ffdb 	bl	80099e8 <HAL_UART_Transmit>
					HAL_UART_Transmit(&huart1, (uint8_t*)Message, sprintf((char*)Message, "vaild data\r\n"), 100);
 8001a32:	497a      	ldr	r1, [pc, #488]	; (8001c1c <main+0x7e4>)
 8001a34:	4875      	ldr	r0, [pc, #468]	; (8001c0c <main+0x7d4>)
 8001a36:	f00f fa9b 	bl	8010f70 <siprintf>
 8001a3a:	4603      	mov	r3, r0
 8001a3c:	b29a      	uxth	r2, r3
 8001a3e:	2364      	movs	r3, #100	; 0x64
 8001a40:	4972      	ldr	r1, [pc, #456]	; (8001c0c <main+0x7d4>)
 8001a42:	4873      	ldr	r0, [pc, #460]	; (8001c10 <main+0x7d8>)
 8001a44:	f007 ffd0 	bl	80099e8 <HAL_UART_Transmit>
 8001a48:	e00a      	b.n	8001a60 <main+0x628>

		         }
		         else
		         {
		        	 HAL_UART_Transmit(&huart1, (uint8_t*)Message, sprintf((char*)Message, "invalid data\r\n"), 100);
 8001a4a:	4975      	ldr	r1, [pc, #468]	; (8001c20 <main+0x7e8>)
 8001a4c:	486f      	ldr	r0, [pc, #444]	; (8001c0c <main+0x7d4>)
 8001a4e:	f00f fa8f 	bl	8010f70 <siprintf>
 8001a52:	4603      	mov	r3, r0
 8001a54:	b29a      	uxth	r2, r3
 8001a56:	2364      	movs	r3, #100	; 0x64
 8001a58:	496c      	ldr	r1, [pc, #432]	; (8001c0c <main+0x7d4>)
 8001a5a:	486d      	ldr	r0, [pc, #436]	; (8001c10 <main+0x7d8>)
 8001a5c:	f007 ffc4 	bl	80099e8 <HAL_UART_Transmit>
		         }
		         HAL_Delay(1000); // Delay for 1 second
 8001a60:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001a64:	f001 fd96 	bl	8003594 <HAL_Delay>
		         receivedFlag = 0;
 8001a68:	4b6e      	ldr	r3, [pc, #440]	; (8001c24 <main+0x7ec>)
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	701a      	strb	r2, [r3, #0]
		     }
		  command = "rev";
 8001a6e:	4b6e      	ldr	r3, [pc, #440]	; (8001c28 <main+0x7f0>)
 8001a70:	f642 02b4 	movw	r2, #10420	; 0x28b4
 8001a74:	443a      	add	r2, r7
 8001a76:	6013      	str	r3, [r2, #0]
		  if(strncmp((char*)rxBuffer, command,strlen(command)) == 0)
 8001a78:	f642 03b4 	movw	r3, #10420	; 0x28b4
 8001a7c:	443b      	add	r3, r7
 8001a7e:	6818      	ldr	r0, [r3, #0]
 8001a80:	f7fe fbc6 	bl	8000210 <strlen>
 8001a84:	4603      	mov	r3, r0
 8001a86:	461a      	mov	r2, r3
 8001a88:	f642 03b4 	movw	r3, #10420	; 0x28b4
 8001a8c:	443b      	add	r3, r7
 8001a8e:	6819      	ldr	r1, [r3, #0]
 8001a90:	4857      	ldr	r0, [pc, #348]	; (8001bf0 <main+0x7b8>)
 8001a92:	f00f fb06 	bl	80110a2 <strncmp>
 8001a96:	4603      	mov	r3, r0
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d148      	bne.n	8001b2e <main+0x6f6>
		     {
		         int step_rev_angle=0;
 8001a9c:	f607 03f8 	addw	r3, r7, #2296	; 0x8f8
 8001aa0:	f5a3 63c5 	sub.w	r3, r3, #1576	; 0x628
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	601a      	str	r2, [r3, #0]
		         if(sscanf((char*)rxBuffer + strlen(command) + 1, "%d",&step_rev_angle) == 1)
 8001aa8:	f642 03b4 	movw	r3, #10420	; 0x28b4
 8001aac:	443b      	add	r3, r7
 8001aae:	6818      	ldr	r0, [r3, #0]
 8001ab0:	f7fe fbae 	bl	8000210 <strlen>
 8001ab4:	4603      	mov	r3, r0
 8001ab6:	3301      	adds	r3, #1
 8001ab8:	4a4d      	ldr	r2, [pc, #308]	; (8001bf0 <main+0x7b8>)
 8001aba:	1898      	adds	r0, r3, r2
 8001abc:	4b5b      	ldr	r3, [pc, #364]	; (8001c2c <main+0x7f4>)
 8001abe:	f503 5323 	add.w	r3, r3, #10432	; 0x28c0
 8001ac2:	f103 0338 	add.w	r3, r3, #56	; 0x38
 8001ac6:	443b      	add	r3, r7
 8001ac8:	461a      	mov	r2, r3
 8001aca:	4959      	ldr	r1, [pc, #356]	; (8001c30 <main+0x7f8>)
 8001acc:	f00f fa70 	bl	8010fb0 <siscanf>
 8001ad0:	4603      	mov	r3, r0
 8001ad2:	2b01      	cmp	r3, #1
 8001ad4:	d119      	bne.n	8001b0a <main+0x6d2>
		         {
					 stepRev(step_rev_angle);
 8001ad6:	f607 03f8 	addw	r3, r7, #2296	; 0x8f8
 8001ada:	f5a3 63c5 	sub.w	r3, r3, #1576	; 0x628
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	f001 f85d 	bl	8002ba0 <stepRev>
		 			HAL_UART_Transmit(&huart1, (uint8_t*)Message, sprintf((char*)Message, "%d deg rev \n\r",step_rev_angle), 100);
 8001ae6:	f607 03f8 	addw	r3, r7, #2296	; 0x8f8
 8001aea:	f5a3 63c5 	sub.w	r3, r3, #1576	; 0x628
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	461a      	mov	r2, r3
 8001af2:	4945      	ldr	r1, [pc, #276]	; (8001c08 <main+0x7d0>)
 8001af4:	4845      	ldr	r0, [pc, #276]	; (8001c0c <main+0x7d4>)
 8001af6:	f00f fa3b 	bl	8010f70 <siprintf>
 8001afa:	4603      	mov	r3, r0
 8001afc:	b29a      	uxth	r2, r3
 8001afe:	2364      	movs	r3, #100	; 0x64
 8001b00:	4942      	ldr	r1, [pc, #264]	; (8001c0c <main+0x7d4>)
 8001b02:	4843      	ldr	r0, [pc, #268]	; (8001c10 <main+0x7d8>)
 8001b04:	f007 ff70 	bl	80099e8 <HAL_UART_Transmit>
 8001b08:	e00a      	b.n	8001b20 <main+0x6e8>
		         }
		         else
		         {
		        	 HAL_UART_Transmit(&huart1, (uint8_t*)Message, sprintf((char*)Message, "invalid data\r\n"), 100);
 8001b0a:	4945      	ldr	r1, [pc, #276]	; (8001c20 <main+0x7e8>)
 8001b0c:	483f      	ldr	r0, [pc, #252]	; (8001c0c <main+0x7d4>)
 8001b0e:	f00f fa2f 	bl	8010f70 <siprintf>
 8001b12:	4603      	mov	r3, r0
 8001b14:	b29a      	uxth	r2, r3
 8001b16:	2364      	movs	r3, #100	; 0x64
 8001b18:	493c      	ldr	r1, [pc, #240]	; (8001c0c <main+0x7d4>)
 8001b1a:	483d      	ldr	r0, [pc, #244]	; (8001c10 <main+0x7d8>)
 8001b1c:	f007 ff64 	bl	80099e8 <HAL_UART_Transmit>
		         }
		         HAL_Delay(1000); // Delay for 1 second
 8001b20:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001b24:	f001 fd36 	bl	8003594 <HAL_Delay>
		         receivedFlag = 0;
 8001b28:	4b3e      	ldr	r3, [pc, #248]	; (8001c24 <main+0x7ec>)
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	701a      	strb	r2, [r3, #0]
		     }

		  command = "lin";
 8001b2e:	4b41      	ldr	r3, [pc, #260]	; (8001c34 <main+0x7fc>)
 8001b30:	f642 02b4 	movw	r2, #10420	; 0x28b4
 8001b34:	443a      	add	r2, r7
 8001b36:	6013      	str	r3, [r2, #0]
		  if (strncmp((char*)rxBuffer, command, strlen(command)) == 0) {
 8001b38:	f642 03b4 	movw	r3, #10420	; 0x28b4
 8001b3c:	443b      	add	r3, r7
 8001b3e:	6818      	ldr	r0, [r3, #0]
 8001b40:	f7fe fb66 	bl	8000210 <strlen>
 8001b44:	4603      	mov	r3, r0
 8001b46:	461a      	mov	r2, r3
 8001b48:	f642 03b4 	movw	r3, #10420	; 0x28b4
 8001b4c:	443b      	add	r3, r7
 8001b4e:	6819      	ldr	r1, [r3, #0]
 8001b50:	4827      	ldr	r0, [pc, #156]	; (8001bf0 <main+0x7b8>)
 8001b52:	f00f faa6 	bl	80110a2 <strncmp>
 8001b56:	4603      	mov	r3, r0
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	f040 8085 	bne.w	8001c68 <main+0x830>
		      int step_lin_dist = 0;
 8001b5e:	f607 03f8 	addw	r3, r7, #2296	; 0x8f8
 8001b62:	f2a3 632c 	subw	r3, r3, #1580	; 0x62c
 8001b66:	2200      	movs	r2, #0
 8001b68:	601a      	str	r2, [r3, #0]
		      if (sscanf((char*)rxBuffer + strlen(command) + 1, "%d", &step_lin_dist) == 1) {
 8001b6a:	f642 03b4 	movw	r3, #10420	; 0x28b4
 8001b6e:	443b      	add	r3, r7
 8001b70:	6818      	ldr	r0, [r3, #0]
 8001b72:	f7fe fb4d 	bl	8000210 <strlen>
 8001b76:	4603      	mov	r3, r0
 8001b78:	3301      	adds	r3, #1
 8001b7a:	4a1d      	ldr	r2, [pc, #116]	; (8001bf0 <main+0x7b8>)
 8001b7c:	1898      	adds	r0, r3, r2
 8001b7e:	4b2e      	ldr	r3, [pc, #184]	; (8001c38 <main+0x800>)
 8001b80:	f503 5323 	add.w	r3, r3, #10432	; 0x28c0
 8001b84:	f103 0338 	add.w	r3, r3, #56	; 0x38
 8001b88:	443b      	add	r3, r7
 8001b8a:	461a      	mov	r2, r3
 8001b8c:	4928      	ldr	r1, [pc, #160]	; (8001c30 <main+0x7f8>)
 8001b8e:	f00f fa0f 	bl	8010fb0 <siscanf>
 8001b92:	4603      	mov	r3, r0
 8001b94:	2b01      	cmp	r3, #1
 8001b96:	d155      	bne.n	8001c44 <main+0x80c>
		          stepLin(step_lin_dist);
 8001b98:	f607 03f8 	addw	r3, r7, #2296	; 0x8f8
 8001b9c:	f2a3 632c 	subw	r3, r3, #1580	; 0x62c
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	f001 f866 	bl	8002c74 <stepLin>
		          HAL_UART_Transmit(&huart1, (uint8_t*)Message, sprintf((char*)Message, "%d mm %s \n\r", step_lin_dist, command), 100);
 8001ba8:	f607 03f8 	addw	r3, r7, #2296	; 0x8f8
 8001bac:	f2a3 632c 	subw	r3, r3, #1580	; 0x62c
 8001bb0:	681a      	ldr	r2, [r3, #0]
 8001bb2:	f642 03b4 	movw	r3, #10420	; 0x28b4
 8001bb6:	443b      	add	r3, r7
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	4920      	ldr	r1, [pc, #128]	; (8001c3c <main+0x804>)
 8001bbc:	4813      	ldr	r0, [pc, #76]	; (8001c0c <main+0x7d4>)
 8001bbe:	f00f f9d7 	bl	8010f70 <siprintf>
 8001bc2:	4603      	mov	r3, r0
 8001bc4:	b29a      	uxth	r2, r3
 8001bc6:	2364      	movs	r3, #100	; 0x64
 8001bc8:	4910      	ldr	r1, [pc, #64]	; (8001c0c <main+0x7d4>)
 8001bca:	4811      	ldr	r0, [pc, #68]	; (8001c10 <main+0x7d8>)
 8001bcc:	f007 ff0c 	bl	80099e8 <HAL_UART_Transmit>
		          HAL_UART_Transmit(&huart1, (uint8_t*)Message, sprintf((char*)Message, "valid data\r\n"), 100);
 8001bd0:	491b      	ldr	r1, [pc, #108]	; (8001c40 <main+0x808>)
 8001bd2:	480e      	ldr	r0, [pc, #56]	; (8001c0c <main+0x7d4>)
 8001bd4:	f00f f9cc 	bl	8010f70 <siprintf>
 8001bd8:	4603      	mov	r3, r0
 8001bda:	b29a      	uxth	r2, r3
 8001bdc:	2364      	movs	r3, #100	; 0x64
 8001bde:	490b      	ldr	r1, [pc, #44]	; (8001c0c <main+0x7d4>)
 8001be0:	480b      	ldr	r0, [pc, #44]	; (8001c10 <main+0x7d8>)
 8001be2:	f007 ff01 	bl	80099e8 <HAL_UART_Transmit>
 8001be6:	e038      	b.n	8001c5a <main+0x822>
 8001be8:	9999999a 	.word	0x9999999a
 8001bec:	3fe99999 	.word	0x3fe99999
 8001bf0:	2000050c 	.word	0x2000050c
 8001bf4:	ffffd9e0 	.word	0xffffd9e0
 8001bf8:	ffffd9e4 	.word	0xffffd9e4
 8001bfc:	ffffd9dc 	.word	0xffffd9dc
 8001c00:	080155dc 	.word	0x080155dc
 8001c04:	20000604 	.word	0x20000604
 8001c08:	080155e8 	.word	0x080155e8
 8001c0c:	200005a0 	.word	0x200005a0
 8001c10:	2000069c 	.word	0x2000069c
 8001c14:	080155f8 	.word	0x080155f8
 8001c18:	08015608 	.word	0x08015608
 8001c1c:	08015618 	.word	0x08015618
 8001c20:	08015628 	.word	0x08015628
 8001c24:	2000058f 	.word	0x2000058f
 8001c28:	08015638 	.word	0x08015638
 8001c2c:	ffffd9d8 	.word	0xffffd9d8
 8001c30:	0801563c 	.word	0x0801563c
 8001c34:	08015640 	.word	0x08015640
 8001c38:	ffffd9d4 	.word	0xffffd9d4
 8001c3c:	08015644 	.word	0x08015644
 8001c40:	08015650 	.word	0x08015650
		      } else {
		          HAL_UART_Transmit(&huart1, (uint8_t*)Message, sprintf((char*)Message, "invalid data\r\n"), 100);
 8001c44:	4996      	ldr	r1, [pc, #600]	; (8001ea0 <main+0xa68>)
 8001c46:	4897      	ldr	r0, [pc, #604]	; (8001ea4 <main+0xa6c>)
 8001c48:	f00f f992 	bl	8010f70 <siprintf>
 8001c4c:	4603      	mov	r3, r0
 8001c4e:	b29a      	uxth	r2, r3
 8001c50:	2364      	movs	r3, #100	; 0x64
 8001c52:	4994      	ldr	r1, [pc, #592]	; (8001ea4 <main+0xa6c>)
 8001c54:	4894      	ldr	r0, [pc, #592]	; (8001ea8 <main+0xa70>)
 8001c56:	f007 fec7 	bl	80099e8 <HAL_UART_Transmit>
		      }
		      HAL_Delay(1000);
 8001c5a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001c5e:	f001 fc99 	bl	8003594 <HAL_Delay>
		      receivedFlag = 0;
 8001c62:	4b92      	ldr	r3, [pc, #584]	; (8001eac <main+0xa74>)
 8001c64:	2200      	movs	r2, #0
 8001c66:	701a      	strb	r2, [r3, #0]
		  }

		  command = "servo";
 8001c68:	4b91      	ldr	r3, [pc, #580]	; (8001eb0 <main+0xa78>)
 8001c6a:	f642 02b4 	movw	r2, #10420	; 0x28b4
 8001c6e:	443a      	add	r2, r7
 8001c70:	6013      	str	r3, [r2, #0]
		  if(strncmp((char*)rxBuffer, command,strlen(command)) == 0)
 8001c72:	f642 03b4 	movw	r3, #10420	; 0x28b4
 8001c76:	443b      	add	r3, r7
 8001c78:	6818      	ldr	r0, [r3, #0]
 8001c7a:	f7fe fac9 	bl	8000210 <strlen>
 8001c7e:	4603      	mov	r3, r0
 8001c80:	461a      	mov	r2, r3
 8001c82:	f642 03b4 	movw	r3, #10420	; 0x28b4
 8001c86:	443b      	add	r3, r7
 8001c88:	6819      	ldr	r1, [r3, #0]
 8001c8a:	488a      	ldr	r0, [pc, #552]	; (8001eb4 <main+0xa7c>)
 8001c8c:	f00f fa09 	bl	80110a2 <strncmp>
 8001c90:	4603      	mov	r3, r0
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d17c      	bne.n	8001d90 <main+0x958>
		     {
		         float servo_dist=0;
 8001c96:	f607 03f8 	addw	r3, r7, #2296	; 0x8f8
 8001c9a:	f5a3 63c6 	sub.w	r3, r3, #1584	; 0x630
 8001c9e:	f04f 0200 	mov.w	r2, #0
 8001ca2:	601a      	str	r2, [r3, #0]
		         if(sscanf((char*)rxBuffer + strlen(command)+1, "%f",&servo_dist) == 1)
 8001ca4:	f642 03b4 	movw	r3, #10420	; 0x28b4
 8001ca8:	443b      	add	r3, r7
 8001caa:	6818      	ldr	r0, [r3, #0]
 8001cac:	f7fe fab0 	bl	8000210 <strlen>
 8001cb0:	4603      	mov	r3, r0
 8001cb2:	3301      	adds	r3, #1
 8001cb4:	4a7f      	ldr	r2, [pc, #508]	; (8001eb4 <main+0xa7c>)
 8001cb6:	1898      	adds	r0, r3, r2
 8001cb8:	4b7f      	ldr	r3, [pc, #508]	; (8001eb8 <main+0xa80>)
 8001cba:	f503 5323 	add.w	r3, r3, #10432	; 0x28c0
 8001cbe:	f103 0338 	add.w	r3, r3, #56	; 0x38
 8001cc2:	443b      	add	r3, r7
 8001cc4:	461a      	mov	r2, r3
 8001cc6:	497d      	ldr	r1, [pc, #500]	; (8001ebc <main+0xa84>)
 8001cc8:	f00f f972 	bl	8010fb0 <siscanf>
 8001ccc:	4603      	mov	r3, r0
 8001cce:	2b01      	cmp	r3, #1
 8001cd0:	d147      	bne.n	8001d62 <main+0x92a>
		         {
		            servo_angle(&htim2, TIM_CHANNEL_1, servo_dist);
 8001cd2:	f607 03f8 	addw	r3, r7, #2296	; 0x8f8
 8001cd6:	f5a3 63c6 	sub.w	r3, r3, #1584	; 0x630
 8001cda:	edd3 7a00 	vldr	s15, [r3]
 8001cde:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001ce2:	ee17 2a90 	vmov	r2, s15
 8001ce6:	2100      	movs	r1, #0
 8001ce8:	4875      	ldr	r0, [pc, #468]	; (8001ec0 <main+0xa88>)
 8001cea:	f001 f85d 	bl	8002da8 <servo_angle>
		            servo_dist *=0.8;
 8001cee:	f607 03f8 	addw	r3, r7, #2296	; 0x8f8
 8001cf2:	f5a3 63c6 	sub.w	r3, r3, #1584	; 0x630
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	4618      	mov	r0, r3
 8001cfa:	f7fe fc45 	bl	8000588 <__aeabi_f2d>
 8001cfe:	a366      	add	r3, pc, #408	; (adr r3, 8001e98 <main+0xa60>)
 8001d00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d04:	f7fe fc98 	bl	8000638 <__aeabi_dmul>
 8001d08:	4602      	mov	r2, r0
 8001d0a:	460b      	mov	r3, r1
 8001d0c:	4610      	mov	r0, r2
 8001d0e:	4619      	mov	r1, r3
 8001d10:	f7fe ff8a 	bl	8000c28 <__aeabi_d2f>
 8001d14:	4602      	mov	r2, r0
 8001d16:	f607 03f8 	addw	r3, r7, #2296	; 0x8f8
 8001d1a:	f5a3 63c6 	sub.w	r3, r3, #1584	; 0x630
 8001d1e:	601a      	str	r2, [r3, #0]
					HAL_UART_Transmit(&huart1, (uint8_t*)Message, sprintf((char*)Message, "%.2f servo \n\r",servo_dist), 100);
 8001d20:	f607 03f8 	addw	r3, r7, #2296	; 0x8f8
 8001d24:	f5a3 63c6 	sub.w	r3, r3, #1584	; 0x630
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	f7fe fc2c 	bl	8000588 <__aeabi_f2d>
 8001d30:	4602      	mov	r2, r0
 8001d32:	460b      	mov	r3, r1
 8001d34:	4963      	ldr	r1, [pc, #396]	; (8001ec4 <main+0xa8c>)
 8001d36:	485b      	ldr	r0, [pc, #364]	; (8001ea4 <main+0xa6c>)
 8001d38:	f00f f91a 	bl	8010f70 <siprintf>
 8001d3c:	4603      	mov	r3, r0
 8001d3e:	b29a      	uxth	r2, r3
 8001d40:	2364      	movs	r3, #100	; 0x64
 8001d42:	4958      	ldr	r1, [pc, #352]	; (8001ea4 <main+0xa6c>)
 8001d44:	4858      	ldr	r0, [pc, #352]	; (8001ea8 <main+0xa70>)
 8001d46:	f007 fe4f 	bl	80099e8 <HAL_UART_Transmit>
					HAL_UART_Transmit(&huart1, (uint8_t*)Message, sprintf((char*)Message, "vaild data\r\n"), 100);
 8001d4a:	495f      	ldr	r1, [pc, #380]	; (8001ec8 <main+0xa90>)
 8001d4c:	4855      	ldr	r0, [pc, #340]	; (8001ea4 <main+0xa6c>)
 8001d4e:	f00f f90f 	bl	8010f70 <siprintf>
 8001d52:	4603      	mov	r3, r0
 8001d54:	b29a      	uxth	r2, r3
 8001d56:	2364      	movs	r3, #100	; 0x64
 8001d58:	4952      	ldr	r1, [pc, #328]	; (8001ea4 <main+0xa6c>)
 8001d5a:	4853      	ldr	r0, [pc, #332]	; (8001ea8 <main+0xa70>)
 8001d5c:	f007 fe44 	bl	80099e8 <HAL_UART_Transmit>
 8001d60:	e00a      	b.n	8001d78 <main+0x940>
		         }
		         else
		         {
		        	 HAL_UART_Transmit(&huart1, (uint8_t*)Message, sprintf((char*)Message, "invalid data\r\n"), 100);
 8001d62:	494f      	ldr	r1, [pc, #316]	; (8001ea0 <main+0xa68>)
 8001d64:	484f      	ldr	r0, [pc, #316]	; (8001ea4 <main+0xa6c>)
 8001d66:	f00f f903 	bl	8010f70 <siprintf>
 8001d6a:	4603      	mov	r3, r0
 8001d6c:	b29a      	uxth	r2, r3
 8001d6e:	2364      	movs	r3, #100	; 0x64
 8001d70:	494c      	ldr	r1, [pc, #304]	; (8001ea4 <main+0xa6c>)
 8001d72:	484d      	ldr	r0, [pc, #308]	; (8001ea8 <main+0xa70>)
 8001d74:	f007 fe38 	bl	80099e8 <HAL_UART_Transmit>
		         }
		         HAL_Delay(2000); // Delay for 1 second
 8001d78:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001d7c:	f001 fc0a 	bl	8003594 <HAL_Delay>

		         servo_angle(&htim2, TIM_CHANNEL_1, 0); // return to servo origin
 8001d80:	2200      	movs	r2, #0
 8001d82:	2100      	movs	r1, #0
 8001d84:	484e      	ldr	r0, [pc, #312]	; (8001ec0 <main+0xa88>)
 8001d86:	f001 f80f 	bl	8002da8 <servo_angle>

		         receivedFlag = 0;
 8001d8a:	4b48      	ldr	r3, [pc, #288]	; (8001eac <main+0xa74>)
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	701a      	strb	r2, [r3, #0]
		     }

		  command = "sensor";
 8001d90:	4b4e      	ldr	r3, [pc, #312]	; (8001ecc <main+0xa94>)
 8001d92:	f642 02b4 	movw	r2, #10420	; 0x28b4
 8001d96:	443a      	add	r2, r7
 8001d98:	6013      	str	r3, [r2, #0]
		  if (strncmp((char*)rxBuffer, command,strlen(command)) == 0) {
 8001d9a:	f642 03b4 	movw	r3, #10420	; 0x28b4
 8001d9e:	443b      	add	r3, r7
 8001da0:	6818      	ldr	r0, [r3, #0]
 8001da2:	f7fe fa35 	bl	8000210 <strlen>
 8001da6:	4603      	mov	r3, r0
 8001da8:	461a      	mov	r2, r3
 8001daa:	f642 03b4 	movw	r3, #10420	; 0x28b4
 8001dae:	443b      	add	r3, r7
 8001db0:	6819      	ldr	r1, [r3, #0]
 8001db2:	4840      	ldr	r0, [pc, #256]	; (8001eb4 <main+0xa7c>)
 8001db4:	f00f f975 	bl	80110a2 <strncmp>
 8001db8:	4603      	mov	r3, r0
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	f040 826f 	bne.w	800229e <main+0xe66>
		      HAL_UART_Transmit(&huart1, (uint8_t*)Message, sprintf((char*)Message, "sensor test\r\n"), 100);
 8001dc0:	4943      	ldr	r1, [pc, #268]	; (8001ed0 <main+0xa98>)
 8001dc2:	4838      	ldr	r0, [pc, #224]	; (8001ea4 <main+0xa6c>)
 8001dc4:	f00f f8d4 	bl	8010f70 <siprintf>
 8001dc8:	4603      	mov	r3, r0
 8001dca:	b29a      	uxth	r2, r3
 8001dcc:	2364      	movs	r3, #100	; 0x64
 8001dce:	4935      	ldr	r1, [pc, #212]	; (8001ea4 <main+0xa6c>)
 8001dd0:	4835      	ldr	r0, [pc, #212]	; (8001ea8 <main+0xa70>)
 8001dd2:	f007 fe09 	bl	80099e8 <HAL_UART_Transmit>

		      ///////////////////////////////////////////////////////
		      ////////////////////Logging Start//////////////////////
		      ///////////////////////////////////////////////////////
		      start_time = HAL_GetTick(); // ?��?�� ?���??? 측정
 8001dd6:	f001 fbd1 	bl	800357c <HAL_GetTick>
 8001dda:	4603      	mov	r3, r0
 8001ddc:	4a3d      	ldr	r2, [pc, #244]	; (8001ed4 <main+0xa9c>)
 8001dde:	6013      	str	r3, [r2, #0]

		      int distance[NUM_SENSOR][WINDOW_SIZE] = {{0}};
 8001de0:	f607 03f8 	addw	r3, r7, #2296	; 0x8f8
 8001de4:	f6a3 0338 	subw	r3, r3, #2104	; 0x838
 8001de8:	4618      	mov	r0, r3
 8001dea:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8001dee:	461a      	mov	r2, r3
 8001df0:	2100      	movs	r1, #0
 8001df2:	f00e fa35 	bl	8010260 <memset>
		      int filtered_distance[NUM_SENSOR] = {0};
 8001df6:	f607 03f8 	addw	r3, r7, #2296	; 0x8f8
 8001dfa:	f6a3 03f8 	subw	r3, r3, #2296	; 0x8f8
 8001dfe:	4618      	mov	r0, r3
 8001e00:	2360      	movs	r3, #96	; 0x60
 8001e02:	461a      	mov	r2, r3
 8001e04:	2100      	movs	r1, #0
 8001e06:	f00e fa2b 	bl	8010260 <memset>
		      int current_index[NUM_SENSOR] = {0};
 8001e0a:	f607 03f8 	addw	r3, r7, #2296	; 0x8f8
 8001e0e:	f6a3 0398 	subw	r3, r3, #2200	; 0x898
 8001e12:	4618      	mov	r0, r3
 8001e14:	2360      	movs	r3, #96	; 0x60
 8001e16:	461a      	mov	r2, r3
 8001e18:	2100      	movs	r1, #0
 8001e1a:	f00e fa21 	bl	8010260 <memset>

		      do {
		          /// Read the VL53l0x data ///
		          for (int i = 0; i < NUM_SENSOR; i++) {
 8001e1e:	2300      	movs	r3, #0
 8001e20:	f642 02e8 	movw	r2, #10472	; 0x28e8
 8001e24:	443a      	add	r2, r7
 8001e26:	6013      	str	r3, [r2, #0]
 8001e28:	e1ba      	b.n	80021a0 <main+0xd68>
		              uint8_t q = i / 8;
 8001e2a:	f642 03e8 	movw	r3, #10472	; 0x28e8
 8001e2e:	443b      	add	r3, r7
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	da00      	bge.n	8001e38 <main+0xa00>
 8001e36:	3307      	adds	r3, #7
 8001e38:	10db      	asrs	r3, r3, #3
 8001e3a:	f642 02a3 	movw	r2, #10403	; 0x28a3
 8001e3e:	443a      	add	r2, r7
 8001e40:	7013      	strb	r3, [r2, #0]
		              uint8_t r = i % 8;
 8001e42:	f642 03e8 	movw	r3, #10472	; 0x28e8
 8001e46:	443b      	add	r3, r7
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	425a      	negs	r2, r3
 8001e4c:	f003 0307 	and.w	r3, r3, #7
 8001e50:	f002 0207 	and.w	r2, r2, #7
 8001e54:	bf58      	it	pl
 8001e56:	4253      	negpl	r3, r2
 8001e58:	f642 02a2 	movw	r2, #10402	; 0x28a2
 8001e5c:	443a      	add	r2, r7
 8001e5e:	7013      	strb	r3, [r2, #0]
		              for (int j = 0; j < sizeof(tca_addr); j++) {
 8001e60:	2300      	movs	r3, #0
 8001e62:	f642 02e4 	movw	r2, #10468	; 0x28e4
 8001e66:	443a      	add	r2, r7
 8001e68:	6013      	str	r3, [r2, #0]
 8001e6a:	e062      	b.n	8001f32 <main+0xafa>
		                  uint8_t *channel = (j == q) ? &tca_ch[r] : &tca_ch_reset;
 8001e6c:	f642 03a3 	movw	r3, #10403	; 0x28a3
 8001e70:	443b      	add	r3, r7
 8001e72:	781b      	ldrb	r3, [r3, #0]
 8001e74:	f642 02e4 	movw	r2, #10468	; 0x28e4
 8001e78:	443a      	add	r2, r7
 8001e7a:	6812      	ldr	r2, [r2, #0]
 8001e7c:	429a      	cmp	r2, r3
 8001e7e:	d12d      	bne.n	8001edc <main+0xaa4>
 8001e80:	f642 03a2 	movw	r3, #10402	; 0x28a2
 8001e84:	443b      	add	r3, r7
 8001e86:	781a      	ldrb	r2, [r3, #0]
 8001e88:	4b13      	ldr	r3, [pc, #76]	; (8001ed8 <main+0xaa0>)
 8001e8a:	f503 5323 	add.w	r3, r3, #10432	; 0x28c0
 8001e8e:	f103 0338 	add.w	r3, r3, #56	; 0x38
 8001e92:	443b      	add	r3, r7
 8001e94:	4413      	add	r3, r2
 8001e96:	e027      	b.n	8001ee8 <main+0xab0>
 8001e98:	9999999a 	.word	0x9999999a
 8001e9c:	3fe99999 	.word	0x3fe99999
 8001ea0:	08015628 	.word	0x08015628
 8001ea4:	200005a0 	.word	0x200005a0
 8001ea8:	2000069c 	.word	0x2000069c
 8001eac:	2000058f 	.word	0x2000058f
 8001eb0:	08015660 	.word	0x08015660
 8001eb4:	2000050c 	.word	0x2000050c
 8001eb8:	ffffd9d0 	.word	0xffffd9d0
 8001ebc:	08015668 	.word	0x08015668
 8001ec0:	20000604 	.word	0x20000604
 8001ec4:	08015608 	.word	0x08015608
 8001ec8:	08015618 	.word	0x08015618
 8001ecc:	0801566c 	.word	0x0801566c
 8001ed0:	08015674 	.word	0x08015674
 8001ed4:	20000594 	.word	0x20000594
 8001ed8:	ffffd9ec 	.word	0xffffd9ec
 8001edc:	4b6b      	ldr	r3, [pc, #428]	; (800208c <main+0xc54>)
 8001ede:	f503 5323 	add.w	r3, r3, #10432	; 0x28c0
 8001ee2:	f103 0338 	add.w	r3, r3, #56	; 0x38
 8001ee6:	443b      	add	r3, r7
 8001ee8:	f642 0294 	movw	r2, #10388	; 0x2894
 8001eec:	443a      	add	r2, r7
 8001eee:	6013      	str	r3, [r2, #0]
		                  HAL_I2C_Master_Transmit(&hi2c1, tca_addr[j] << 1, channel, 1, 1000);
 8001ef0:	f607 03f8 	addw	r3, r7, #2296	; 0x8f8
 8001ef4:	f5a3 62c3 	sub.w	r2, r3, #1560	; 0x618
 8001ef8:	f642 03e4 	movw	r3, #10468	; 0x28e4
 8001efc:	443b      	add	r3, r7
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	4413      	add	r3, r2
 8001f02:	781b      	ldrb	r3, [r3, #0]
 8001f04:	b29b      	uxth	r3, r3
 8001f06:	005b      	lsls	r3, r3, #1
 8001f08:	b299      	uxth	r1, r3
 8001f0a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001f0e:	9300      	str	r3, [sp, #0]
 8001f10:	2301      	movs	r3, #1
 8001f12:	f642 0294 	movw	r2, #10388	; 0x2894
 8001f16:	443a      	add	r2, r7
 8001f18:	6812      	ldr	r2, [r2, #0]
 8001f1a:	485d      	ldr	r0, [pc, #372]	; (8002090 <main+0xc58>)
 8001f1c:	f002 fa34 	bl	8004388 <HAL_I2C_Master_Transmit>
		              for (int j = 0; j < sizeof(tca_addr); j++) {
 8001f20:	f642 03e4 	movw	r3, #10468	; 0x28e4
 8001f24:	443b      	add	r3, r7
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	3301      	adds	r3, #1
 8001f2a:	f642 02e4 	movw	r2, #10468	; 0x28e4
 8001f2e:	443a      	add	r2, r7
 8001f30:	6013      	str	r3, [r2, #0]
 8001f32:	f642 03e4 	movw	r3, #10468	; 0x28e4
 8001f36:	443b      	add	r3, r7
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	2b02      	cmp	r3, #2
 8001f3c:	d996      	bls.n	8001e6c <main+0xa34>
		              }
		              Dev = &vl53l0x_s[i];
 8001f3e:	4b55      	ldr	r3, [pc, #340]	; (8002094 <main+0xc5c>)
 8001f40:	f503 5323 	add.w	r3, r3, #10432	; 0x28c0
 8001f44:	f103 0338 	add.w	r3, r3, #56	; 0x38
 8001f48:	443b      	add	r3, r7
 8001f4a:	f642 02e8 	movw	r2, #10472	; 0x28e8
 8001f4e:	443a      	add	r2, r7
 8001f50:	6812      	ldr	r2, [r2, #0]
 8001f52:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8001f56:	fb01 f202 	mul.w	r2, r1, r2
 8001f5a:	4413      	add	r3, r2
 8001f5c:	f642 029c 	movw	r2, #10396	; 0x289c
 8001f60:	443a      	add	r2, r7
 8001f62:	6013      	str	r3, [r2, #0]
		              VL53L0X_PerformContinuousRangingMeasurement(Dev, &RangingData); // 1500us
 8001f64:	494c      	ldr	r1, [pc, #304]	; (8002098 <main+0xc60>)
 8001f66:	f642 039c 	movw	r3, #10396	; 0x289c
 8001f6a:	443b      	add	r3, r7
 8001f6c:	6818      	ldr	r0, [r3, #0]
 8001f6e:	f00a fdce 	bl	800cb0e <VL53L0X_PerformContinuousRangingMeasurement>

		              if (RangingData.RangeStatus == 0) {
 8001f72:	4b49      	ldr	r3, [pc, #292]	; (8002098 <main+0xc60>)
 8001f74:	7e1b      	ldrb	r3, [r3, #24]
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d139      	bne.n	8001fee <main+0xbb6>
		                  distance[i][current_index[i]] = RangingData.RangeMilliMeter;
 8001f7a:	4b47      	ldr	r3, [pc, #284]	; (8002098 <main+0xc60>)
 8001f7c:	8919      	ldrh	r1, [r3, #8]
 8001f7e:	f607 03f8 	addw	r3, r7, #2296	; 0x8f8
 8001f82:	f6a3 0398 	subw	r3, r3, #2200	; 0x898
 8001f86:	f642 02e8 	movw	r2, #10472	; 0x28e8
 8001f8a:	443a      	add	r2, r7
 8001f8c:	6812      	ldr	r2, [r2, #0]
 8001f8e:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8001f92:	460c      	mov	r4, r1
 8001f94:	f607 03f8 	addw	r3, r7, #2296	; 0x8f8
 8001f98:	f6a3 0138 	subw	r1, r3, #2104	; 0x838
 8001f9c:	f642 03e8 	movw	r3, #10472	; 0x28e8
 8001fa0:	443b      	add	r3, r7
 8001fa2:	681a      	ldr	r2, [r3, #0]
 8001fa4:	4613      	mov	r3, r2
 8001fa6:	009b      	lsls	r3, r3, #2
 8001fa8:	4413      	add	r3, r2
 8001faa:	4403      	add	r3, r0
 8001fac:	f841 4023 	str.w	r4, [r1, r3, lsl #2]
		                  current_index[i] = (current_index[i] + 1) % WINDOW_SIZE;
 8001fb0:	f607 03f8 	addw	r3, r7, #2296	; 0x8f8
 8001fb4:	f6a3 0398 	subw	r3, r3, #2200	; 0x898
 8001fb8:	f642 02e8 	movw	r2, #10472	; 0x28e8
 8001fbc:	443a      	add	r2, r7
 8001fbe:	6812      	ldr	r2, [r2, #0]
 8001fc0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001fc4:	1c59      	adds	r1, r3, #1
 8001fc6:	4b35      	ldr	r3, [pc, #212]	; (800209c <main+0xc64>)
 8001fc8:	fb83 2301 	smull	r2, r3, r3, r1
 8001fcc:	105a      	asrs	r2, r3, #1
 8001fce:	17cb      	asrs	r3, r1, #31
 8001fd0:	1ad2      	subs	r2, r2, r3
 8001fd2:	4613      	mov	r3, r2
 8001fd4:	009b      	lsls	r3, r3, #2
 8001fd6:	4413      	add	r3, r2
 8001fd8:	1aca      	subs	r2, r1, r3
 8001fda:	f607 03f8 	addw	r3, r7, #2296	; 0x8f8
 8001fde:	f6a3 0398 	subw	r3, r3, #2200	; 0x898
 8001fe2:	f642 01e8 	movw	r1, #10472	; 0x28e8
 8001fe6:	4439      	add	r1, r7
 8001fe8:	6809      	ldr	r1, [r1, #0]
 8001fea:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
		              }

		              // Apply the filter every time new data comes in
		              int temp[WINDOW_SIZE];
		              for (int j = 0; j < WINDOW_SIZE; j++) {
 8001fee:	2300      	movs	r3, #0
 8001ff0:	f642 02e0 	movw	r2, #10464	; 0x28e0
 8001ff4:	443a      	add	r2, r7
 8001ff6:	6013      	str	r3, [r2, #0]
 8001ff8:	e024      	b.n	8002044 <main+0xc0c>
		                  temp[j] = distance[i][j];
 8001ffa:	f607 03f8 	addw	r3, r7, #2296	; 0x8f8
 8001ffe:	f6a3 0138 	subw	r1, r3, #2104	; 0x838
 8002002:	f642 03e8 	movw	r3, #10472	; 0x28e8
 8002006:	443b      	add	r3, r7
 8002008:	681a      	ldr	r2, [r3, #0]
 800200a:	4613      	mov	r3, r2
 800200c:	009b      	lsls	r3, r3, #2
 800200e:	4413      	add	r3, r2
 8002010:	f642 02e0 	movw	r2, #10464	; 0x28e0
 8002014:	443a      	add	r2, r7
 8002016:	6812      	ldr	r2, [r2, #0]
 8002018:	4413      	add	r3, r2
 800201a:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800201e:	f607 03f8 	addw	r3, r7, #2296	; 0x8f8
 8002022:	f2a3 6344 	subw	r3, r3, #1604	; 0x644
 8002026:	f642 02e0 	movw	r2, #10464	; 0x28e0
 800202a:	443a      	add	r2, r7
 800202c:	6812      	ldr	r2, [r2, #0]
 800202e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		              for (int j = 0; j < WINDOW_SIZE; j++) {
 8002032:	f642 03e0 	movw	r3, #10464	; 0x28e0
 8002036:	443b      	add	r3, r7
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	3301      	adds	r3, #1
 800203c:	f642 02e0 	movw	r2, #10464	; 0x28e0
 8002040:	443a      	add	r2, r7
 8002042:	6013      	str	r3, [r2, #0]
 8002044:	f642 03e0 	movw	r3, #10464	; 0x28e0
 8002048:	443b      	add	r3, r7
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	2b04      	cmp	r3, #4
 800204e:	ddd4      	ble.n	8001ffa <main+0xbc2>
		              }

		              // Insertion sort
		              for (int j = 1; j < WINDOW_SIZE; j++) {
 8002050:	2301      	movs	r3, #1
 8002052:	f642 02dc 	movw	r2, #10460	; 0x28dc
 8002056:	443a      	add	r2, r7
 8002058:	6013      	str	r3, [r2, #0]
 800205a:	e06d      	b.n	8002138 <main+0xd00>
		                  int key = temp[j];
 800205c:	f607 03f8 	addw	r3, r7, #2296	; 0x8f8
 8002060:	f2a3 6344 	subw	r3, r3, #1604	; 0x644
 8002064:	f642 02dc 	movw	r2, #10460	; 0x28dc
 8002068:	443a      	add	r2, r7
 800206a:	6812      	ldr	r2, [r2, #0]
 800206c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002070:	f642 0298 	movw	r2, #10392	; 0x2898
 8002074:	443a      	add	r2, r7
 8002076:	6013      	str	r3, [r2, #0]
		                  int k = j - 1;
 8002078:	f642 03dc 	movw	r3, #10460	; 0x28dc
 800207c:	443b      	add	r3, r7
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	3b01      	subs	r3, #1
 8002082:	f642 02d8 	movw	r2, #10456	; 0x28d8
 8002086:	443a      	add	r2, r7
 8002088:	6013      	str	r3, [r2, #0]

		                  while (k >= 0 && temp[k] > key) {
 800208a:	e027      	b.n	80020dc <main+0xca4>
 800208c:	ffffd9eb 	.word	0xffffd9eb
 8002090:	200004b8 	.word	0x200004b8
 8002094:	ffffd9f4 	.word	0xffffd9f4
 8002098:	200005e0 	.word	0x200005e0
 800209c:	66666667 	.word	0x66666667
		                      temp[k + 1] = temp[k];
 80020a0:	f642 03d8 	movw	r3, #10456	; 0x28d8
 80020a4:	443b      	add	r3, r7
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	1c5a      	adds	r2, r3, #1
 80020aa:	f607 03f8 	addw	r3, r7, #2296	; 0x8f8
 80020ae:	f2a3 6344 	subw	r3, r3, #1604	; 0x644
 80020b2:	f642 01d8 	movw	r1, #10456	; 0x28d8
 80020b6:	4439      	add	r1, r7
 80020b8:	6809      	ldr	r1, [r1, #0]
 80020ba:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 80020be:	f607 03f8 	addw	r3, r7, #2296	; 0x8f8
 80020c2:	f2a3 6344 	subw	r3, r3, #1604	; 0x644
 80020c6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		                      k = k - 1;
 80020ca:	f642 03d8 	movw	r3, #10456	; 0x28d8
 80020ce:	443b      	add	r3, r7
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	3b01      	subs	r3, #1
 80020d4:	f642 02d8 	movw	r2, #10456	; 0x28d8
 80020d8:	443a      	add	r2, r7
 80020da:	6013      	str	r3, [r2, #0]
		                  while (k >= 0 && temp[k] > key) {
 80020dc:	f642 03d8 	movw	r3, #10456	; 0x28d8
 80020e0:	443b      	add	r3, r7
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	db0f      	blt.n	8002108 <main+0xcd0>
 80020e8:	f607 03f8 	addw	r3, r7, #2296	; 0x8f8
 80020ec:	f2a3 6344 	subw	r3, r3, #1604	; 0x644
 80020f0:	f642 02d8 	movw	r2, #10456	; 0x28d8
 80020f4:	443a      	add	r2, r7
 80020f6:	6812      	ldr	r2, [r2, #0]
 80020f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80020fc:	f642 0298 	movw	r2, #10392	; 0x2898
 8002100:	443a      	add	r2, r7
 8002102:	6812      	ldr	r2, [r2, #0]
 8002104:	429a      	cmp	r2, r3
 8002106:	dbcb      	blt.n	80020a0 <main+0xc68>
		                  }
		                  temp[k + 1] = key;
 8002108:	f642 03d8 	movw	r3, #10456	; 0x28d8
 800210c:	443b      	add	r3, r7
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	1c5a      	adds	r2, r3, #1
 8002112:	f607 03f8 	addw	r3, r7, #2296	; 0x8f8
 8002116:	f2a3 6344 	subw	r3, r3, #1604	; 0x644
 800211a:	f642 0198 	movw	r1, #10392	; 0x2898
 800211e:	4439      	add	r1, r7
 8002120:	6809      	ldr	r1, [r1, #0]
 8002122:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		              for (int j = 1; j < WINDOW_SIZE; j++) {
 8002126:	f642 03dc 	movw	r3, #10460	; 0x28dc
 800212a:	443b      	add	r3, r7
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	3301      	adds	r3, #1
 8002130:	f642 02dc 	movw	r2, #10460	; 0x28dc
 8002134:	443a      	add	r2, r7
 8002136:	6013      	str	r3, [r2, #0]
 8002138:	f642 03dc 	movw	r3, #10460	; 0x28dc
 800213c:	443b      	add	r3, r7
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	2b04      	cmp	r3, #4
 8002142:	dd8b      	ble.n	800205c <main+0xc24>
		              }

		              filtered_distance[i] = temp[WINDOW_SIZE / 2];
 8002144:	f607 03f8 	addw	r3, r7, #2296	; 0x8f8
 8002148:	f2a3 6344 	subw	r3, r3, #1604	; 0x644
 800214c:	6899      	ldr	r1, [r3, #8]
 800214e:	f607 03f8 	addw	r3, r7, #2296	; 0x8f8
 8002152:	f6a3 03f8 	subw	r3, r3, #2296	; 0x8f8
 8002156:	f642 02e8 	movw	r2, #10472	; 0x28e8
 800215a:	443a      	add	r2, r7
 800215c:	6812      	ldr	r2, [r2, #0]
 800215e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

		              // Print the filtered data to the serial port
		              HAL_UART_Transmit(&huart1, (uint8_t*)Message, sprintf((char*)Message, "%d ", filtered_distance[i]), 100);
 8002162:	f607 03f8 	addw	r3, r7, #2296	; 0x8f8
 8002166:	f6a3 03f8 	subw	r3, r3, #2296	; 0x8f8
 800216a:	f642 02e8 	movw	r2, #10472	; 0x28e8
 800216e:	443a      	add	r2, r7
 8002170:	6812      	ldr	r2, [r2, #0]
 8002172:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002176:	461a      	mov	r2, r3
 8002178:	499b      	ldr	r1, [pc, #620]	; (80023e8 <main+0xfb0>)
 800217a:	489c      	ldr	r0, [pc, #624]	; (80023ec <main+0xfb4>)
 800217c:	f00e fef8 	bl	8010f70 <siprintf>
 8002180:	4603      	mov	r3, r0
 8002182:	b29a      	uxth	r2, r3
 8002184:	2364      	movs	r3, #100	; 0x64
 8002186:	4999      	ldr	r1, [pc, #612]	; (80023ec <main+0xfb4>)
 8002188:	4899      	ldr	r0, [pc, #612]	; (80023f0 <main+0xfb8>)
 800218a:	f007 fc2d 	bl	80099e8 <HAL_UART_Transmit>
		          for (int i = 0; i < NUM_SENSOR; i++) {
 800218e:	f642 03e8 	movw	r3, #10472	; 0x28e8
 8002192:	443b      	add	r3, r7
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	3301      	adds	r3, #1
 8002198:	f642 02e8 	movw	r2, #10472	; 0x28e8
 800219c:	443a      	add	r2, r7
 800219e:	6013      	str	r3, [r2, #0]
 80021a0:	f642 03e8 	movw	r3, #10472	; 0x28e8
 80021a4:	443b      	add	r3, r7
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	2b17      	cmp	r3, #23
 80021aa:	f77f ae3e 	ble.w	8001e2a <main+0x9f2>
		          }
		          /// End of Reading and Filtering Vl53l0x data ///

				  /// Read the raw data from HX711 ///
				  rawData = Read_HX711();
 80021ae:	f7ff f807 	bl	80011c0 <Read_HX711>
 80021b2:	f642 03b0 	movw	r3, #10416	; 0x28b0
 80021b6:	443b      	add	r3, r7
 80021b8:	6018      	str	r0, [r3, #0]
				  float loadcell_slope = -1/1600.00f; // Convert the raw data to weight (replace the calibration factor with your own)
 80021ba:	4b8e      	ldr	r3, [pc, #568]	; (80023f4 <main+0xfbc>)
 80021bc:	f642 02ac 	movw	r2, #10412	; 0x28ac
 80021c0:	443a      	add	r2, r7
 80021c2:	6013      	str	r3, [r2, #0]
				  float loadcell_bias = 10002;
 80021c4:	4b8c      	ldr	r3, [pc, #560]	; (80023f8 <main+0xfc0>)
 80021c6:	f642 02a8 	movw	r2, #10408	; 0x28a8
 80021ca:	443a      	add	r2, r7
 80021cc:	6013      	str	r3, [r2, #0]
				  UART_SendWeight_g(rawData,loadcell_slope,loadcell_bias); // Send the weight data over UART
 80021ce:	f642 03b0 	movw	r3, #10416	; 0x28b0
 80021d2:	443b      	add	r3, r7
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	ee07 3a90 	vmov	s15, r3
 80021da:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80021de:	f642 03a8 	movw	r3, #10408	; 0x28a8
 80021e2:	443b      	add	r3, r7
 80021e4:	ed93 1a00 	vldr	s2, [r3]
 80021e8:	f642 03ac 	movw	r3, #10412	; 0x28ac
 80021ec:	443b      	add	r3, r7
 80021ee:	edd3 0a00 	vldr	s1, [r3]
 80021f2:	eeb0 0a67 	vmov.f32	s0, s15
 80021f6:	f7ff f831 	bl	800125c <UART_SendWeight_g>
				  /// End of Reading HX711 data ///

				  /// Read the raw data from AMT103 ///
				  float encoderAngle = encoderCount/4096.0*360.0;
 80021fa:	4b80      	ldr	r3, [pc, #512]	; (80023fc <main+0xfc4>)
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	4618      	mov	r0, r3
 8002200:	f7fe f9b0 	bl	8000564 <__aeabi_i2d>
 8002204:	f04f 0200 	mov.w	r2, #0
 8002208:	4b7d      	ldr	r3, [pc, #500]	; (8002400 <main+0xfc8>)
 800220a:	f7fe fb3f 	bl	800088c <__aeabi_ddiv>
 800220e:	4602      	mov	r2, r0
 8002210:	460b      	mov	r3, r1
 8002212:	4610      	mov	r0, r2
 8002214:	4619      	mov	r1, r3
 8002216:	f04f 0200 	mov.w	r2, #0
 800221a:	4b7a      	ldr	r3, [pc, #488]	; (8002404 <main+0xfcc>)
 800221c:	f7fe fa0c 	bl	8000638 <__aeabi_dmul>
 8002220:	4602      	mov	r2, r0
 8002222:	460b      	mov	r3, r1
 8002224:	4610      	mov	r0, r2
 8002226:	4619      	mov	r1, r3
 8002228:	f7fe fcfe 	bl	8000c28 <__aeabi_d2f>
 800222c:	4603      	mov	r3, r0
 800222e:	f642 02a4 	movw	r2, #10404	; 0x28a4
 8002232:	443a      	add	r2, r7
 8002234:	6013      	str	r3, [r2, #0]
				  HAL_UART_Transmit(&huart1, (uint8_t*)Message, sprintf((char*)Message, " %.2f ",encoderAngle), 100);
 8002236:	f642 03a4 	movw	r3, #10404	; 0x28a4
 800223a:	443b      	add	r3, r7
 800223c:	6818      	ldr	r0, [r3, #0]
 800223e:	f7fe f9a3 	bl	8000588 <__aeabi_f2d>
 8002242:	4602      	mov	r2, r0
 8002244:	460b      	mov	r3, r1
 8002246:	4970      	ldr	r1, [pc, #448]	; (8002408 <main+0xfd0>)
 8002248:	4868      	ldr	r0, [pc, #416]	; (80023ec <main+0xfb4>)
 800224a:	f00e fe91 	bl	8010f70 <siprintf>
 800224e:	4603      	mov	r3, r0
 8002250:	b29a      	uxth	r2, r3
 8002252:	2364      	movs	r3, #100	; 0x64
 8002254:	4965      	ldr	r1, [pc, #404]	; (80023ec <main+0xfb4>)
 8002256:	4866      	ldr	r0, [pc, #408]	; (80023f0 <main+0xfb8>)
 8002258:	f007 fbc6 	bl	80099e8 <HAL_UART_Transmit>
				  /// End of Reading AMT103 data ///

		          // Rest of the code...

		          end_time = HAL_GetTick(); // 종료 ?���??? 측정
 800225c:	f001 f98e 	bl	800357c <HAL_GetTick>
 8002260:	4603      	mov	r3, r0
 8002262:	4a6a      	ldr	r2, [pc, #424]	; (800240c <main+0xfd4>)
 8002264:	6013      	str	r3, [r2, #0]
		          time_diff = end_time - start_time; // ?���??? 차이 계산
 8002266:	4b69      	ldr	r3, [pc, #420]	; (800240c <main+0xfd4>)
 8002268:	681a      	ldr	r2, [r3, #0]
 800226a:	4b69      	ldr	r3, [pc, #420]	; (8002410 <main+0xfd8>)
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	1ad3      	subs	r3, r2, r3
 8002270:	4a68      	ldr	r2, [pc, #416]	; (8002414 <main+0xfdc>)
 8002272:	6013      	str	r3, [r2, #0]

		          HAL_UART_Transmit(&huart1, (uint8_t*)Message, sprintf((char*)Message, "\n"), 100);
 8002274:	4968      	ldr	r1, [pc, #416]	; (8002418 <main+0xfe0>)
 8002276:	485d      	ldr	r0, [pc, #372]	; (80023ec <main+0xfb4>)
 8002278:	f00e fe7a 	bl	8010f70 <siprintf>
 800227c:	4603      	mov	r3, r0
 800227e:	b29a      	uxth	r2, r3
 8002280:	2364      	movs	r3, #100	; 0x64
 8002282:	495a      	ldr	r1, [pc, #360]	; (80023ec <main+0xfb4>)
 8002284:	485a      	ldr	r0, [pc, #360]	; (80023f0 <main+0xfb8>)
 8002286:	f007 fbaf 	bl	80099e8 <HAL_UART_Transmit>

		      } while (time_diff < 50000);
 800228a:	4b62      	ldr	r3, [pc, #392]	; (8002414 <main+0xfdc>)
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f24c 324f 	movw	r2, #49999	; 0xc34f
 8002292:	4293      	cmp	r3, r2
 8002294:	f67f adc3 	bls.w	8001e1e <main+0x9e6>

		      receivedFlag = 0;
 8002298:	4b60      	ldr	r3, [pc, #384]	; (800241c <main+0xfe4>)
 800229a:	2200      	movs	r2, #0
 800229c:	701a      	strb	r2, [r3, #0]
		  }

		  command = "auto";
 800229e:	4b60      	ldr	r3, [pc, #384]	; (8002420 <main+0xfe8>)
 80022a0:	f642 02b4 	movw	r2, #10420	; 0x28b4
 80022a4:	443a      	add	r2, r7
 80022a6:	6013      	str	r3, [r2, #0]
		  if(strncmp((char*)rxBuffer, command,strlen(command)) == 0)
 80022a8:	f642 03b4 	movw	r3, #10420	; 0x28b4
 80022ac:	443b      	add	r3, r7
 80022ae:	6818      	ldr	r0, [r3, #0]
 80022b0:	f7fd ffae 	bl	8000210 <strlen>
 80022b4:	4603      	mov	r3, r0
 80022b6:	461a      	mov	r2, r3
 80022b8:	f642 03b4 	movw	r3, #10420	; 0x28b4
 80022bc:	443b      	add	r3, r7
 80022be:	6819      	ldr	r1, [r3, #0]
 80022c0:	4858      	ldr	r0, [pc, #352]	; (8002424 <main+0xfec>)
 80022c2:	f00e feee 	bl	80110a2 <strncmp>
 80022c6:	4603      	mov	r3, r0
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	f040 8300 	bne.w	80028ce <main+0x1496>
		     {
	        	 HAL_UART_Transmit(&huart1, (uint8_t*)Message, sprintf((char*)Message, "autoMode\r\n"), 100);
 80022ce:	4956      	ldr	r1, [pc, #344]	; (8002428 <main+0xff0>)
 80022d0:	4846      	ldr	r0, [pc, #280]	; (80023ec <main+0xfb4>)
 80022d2:	f00e fe4d 	bl	8010f70 <siprintf>
 80022d6:	4603      	mov	r3, r0
 80022d8:	b29a      	uxth	r2, r3
 80022da:	2364      	movs	r3, #100	; 0x64
 80022dc:	4943      	ldr	r1, [pc, #268]	; (80023ec <main+0xfb4>)
 80022de:	4844      	ldr	r0, [pc, #272]	; (80023f0 <main+0xfb8>)
 80022e0:	f007 fb82 	bl	80099e8 <HAL_UART_Transmit>
//		             stepRev(0); // fix the position
//
//		             stepLin(10); // moving horizontal
//		             stepLin(-10); //

	        	 for( int lin = 0; lin < 1;lin ++){
 80022e4:	2300      	movs	r3, #0
 80022e6:	f642 02d4 	movw	r2, #10452	; 0x28d4
 80022ea:	443a      	add	r2, r7
 80022ec:	6013      	str	r3, [r2, #0]
 80022ee:	e2e4      	b.n	80028ba <main+0x1482>
	        		 //stepLin(2); // moving horizontal
					 for(int rev = 0; rev<40; rev++){
 80022f0:	2300      	movs	r3, #0
 80022f2:	f642 02d0 	movw	r2, #10448	; 0x28d0
 80022f6:	443a      	add	r2, r7
 80022f8:	6013      	str	r3, [r2, #0]
 80022fa:	e2ce      	b.n	800289a <main+0x1462>
						 stepRev(9); // revolution
 80022fc:	2009      	movs	r0, #9
 80022fe:	f000 fc4f 	bl	8002ba0 <stepRev>
						 for(int r = 2;r<11;r++){
 8002302:	2302      	movs	r3, #2
 8002304:	f642 02cc 	movw	r2, #10444	; 0x28cc
 8002308:	443a      	add	r2, r7
 800230a:	6013      	str	r3, [r2, #0]
 800230c:	e2b5      	b.n	800287a <main+0x1442>

							 servo_angle(&htim2, TIM_CHANNEL_1, r); // poking
 800230e:	f642 03cc 	movw	r3, #10444	; 0x28cc
 8002312:	443b      	add	r3, r7
 8002314:	681a      	ldr	r2, [r3, #0]
 8002316:	2100      	movs	r1, #0
 8002318:	4844      	ldr	r0, [pc, #272]	; (800242c <main+0xff4>)
 800231a:	f000 fd45 	bl	8002da8 <servo_angle>
							 HAL_Delay(500);
 800231e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002322:	f001 f937 	bl	8003594 <HAL_Delay>

							 ///////////////////////////////////////////////////////
							 ////////////////////Logging Start//////////////////////
							 ///////////////////////////////////////////////////////
							 start_time = HAL_GetTick(); // ?��?�� ?���???? 측정
 8002326:	f001 f929 	bl	800357c <HAL_GetTick>
 800232a:	4603      	mov	r3, r0
 800232c:	4a38      	ldr	r2, [pc, #224]	; (8002410 <main+0xfd8>)
 800232e:	6013      	str	r3, [r2, #0]

							int distance[NUM_SENSOR][WINDOW_SIZE] = {{0}};
 8002330:	f607 03f8 	addw	r3, r7, #2296	; 0x8f8
 8002334:	f6a3 0338 	subw	r3, r3, #2104	; 0x838
 8002338:	4618      	mov	r0, r3
 800233a:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 800233e:	461a      	mov	r2, r3
 8002340:	2100      	movs	r1, #0
 8002342:	f00d ff8d 	bl	8010260 <memset>
							int filtered_distance[NUM_SENSOR] = {0};
 8002346:	f607 03f8 	addw	r3, r7, #2296	; 0x8f8
 800234a:	f6a3 03f8 	subw	r3, r3, #2296	; 0x8f8
 800234e:	4618      	mov	r0, r3
 8002350:	2360      	movs	r3, #96	; 0x60
 8002352:	461a      	mov	r2, r3
 8002354:	2100      	movs	r1, #0
 8002356:	f00d ff83 	bl	8010260 <memset>
							int current_index[NUM_SENSOR] = {0};
 800235a:	f607 03f8 	addw	r3, r7, #2296	; 0x8f8
 800235e:	f6a3 0398 	subw	r3, r3, #2200	; 0x898
 8002362:	4618      	mov	r0, r3
 8002364:	2360      	movs	r3, #96	; 0x60
 8002366:	461a      	mov	r2, r3
 8002368:	2100      	movs	r1, #0
 800236a:	f00d ff79 	bl	8010260 <memset>

							 do{
							        for (int i = 0; i < NUM_SENSOR; i++) {
 800236e:	2300      	movs	r3, #0
 8002370:	f642 02c8 	movw	r2, #10440	; 0x28c8
 8002374:	443a      	add	r2, r7
 8002376:	6013      	str	r3, [r2, #0]
 8002378:	e1b6      	b.n	80026e8 <main+0x12b0>
									  uint8_t q = i / 8;
 800237a:	f642 03c8 	movw	r3, #10440	; 0x28c8
 800237e:	443b      	add	r3, r7
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	2b00      	cmp	r3, #0
 8002384:	da00      	bge.n	8002388 <main+0xf50>
 8002386:	3307      	adds	r3, #7
 8002388:	10db      	asrs	r3, r3, #3
 800238a:	f642 0287 	movw	r2, #10375	; 0x2887
 800238e:	443a      	add	r2, r7
 8002390:	7013      	strb	r3, [r2, #0]
									  uint8_t r = i % 8;
 8002392:	f642 03c8 	movw	r3, #10440	; 0x28c8
 8002396:	443b      	add	r3, r7
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	425a      	negs	r2, r3
 800239c:	f003 0307 	and.w	r3, r3, #7
 80023a0:	f002 0207 	and.w	r2, r2, #7
 80023a4:	bf58      	it	pl
 80023a6:	4253      	negpl	r3, r2
 80023a8:	f642 0286 	movw	r2, #10374	; 0x2886
 80023ac:	443a      	add	r2, r7
 80023ae:	7013      	strb	r3, [r2, #0]
									  for (int j = 0; j < sizeof(tca_addr); j++) {
 80023b0:	2300      	movs	r3, #0
 80023b2:	f642 02c4 	movw	r2, #10436	; 0x28c4
 80023b6:	443a      	add	r2, r7
 80023b8:	6013      	str	r3, [r2, #0]
 80023ba:	e066      	b.n	800248a <main+0x1052>
										  uint8_t *channel = (j == q) ? &tca_ch[r] : &tca_ch_reset;
 80023bc:	f642 0387 	movw	r3, #10375	; 0x2887
 80023c0:	443b      	add	r3, r7
 80023c2:	781b      	ldrb	r3, [r3, #0]
 80023c4:	f642 02c4 	movw	r2, #10436	; 0x28c4
 80023c8:	443a      	add	r2, r7
 80023ca:	6812      	ldr	r2, [r2, #0]
 80023cc:	429a      	cmp	r2, r3
 80023ce:	d131      	bne.n	8002434 <main+0xffc>
 80023d0:	f642 0386 	movw	r3, #10374	; 0x2886
 80023d4:	443b      	add	r3, r7
 80023d6:	781a      	ldrb	r2, [r3, #0]
 80023d8:	4b15      	ldr	r3, [pc, #84]	; (8002430 <main+0xff8>)
 80023da:	f503 5323 	add.w	r3, r3, #10432	; 0x28c0
 80023de:	f103 0338 	add.w	r3, r3, #56	; 0x38
 80023e2:	443b      	add	r3, r7
 80023e4:	4413      	add	r3, r2
 80023e6:	e02b      	b.n	8002440 <main+0x1008>
 80023e8:	08015684 	.word	0x08015684
 80023ec:	200005a0 	.word	0x200005a0
 80023f0:	2000069c 	.word	0x2000069c
 80023f4:	ba23d70a 	.word	0xba23d70a
 80023f8:	461c4800 	.word	0x461c4800
 80023fc:	200005fc 	.word	0x200005fc
 8002400:	40b00000 	.word	0x40b00000
 8002404:	40768000 	.word	0x40768000
 8002408:	08015688 	.word	0x08015688
 800240c:	20000598 	.word	0x20000598
 8002410:	20000594 	.word	0x20000594
 8002414:	20000590 	.word	0x20000590
 8002418:	08015690 	.word	0x08015690
 800241c:	2000058f 	.word	0x2000058f
 8002420:	08015694 	.word	0x08015694
 8002424:	2000050c 	.word	0x2000050c
 8002428:	0801569c 	.word	0x0801569c
 800242c:	20000604 	.word	0x20000604
 8002430:	ffffd9ec 	.word	0xffffd9ec
 8002434:	4b68      	ldr	r3, [pc, #416]	; (80025d8 <main+0x11a0>)
 8002436:	f503 5323 	add.w	r3, r3, #10432	; 0x28c0
 800243a:	f103 0338 	add.w	r3, r3, #56	; 0x38
 800243e:	443b      	add	r3, r7
 8002440:	f642 027c 	movw	r2, #10364	; 0x287c
 8002444:	443a      	add	r2, r7
 8002446:	6013      	str	r3, [r2, #0]
										  HAL_I2C_Master_Transmit(&hi2c1, tca_addr[j] << 1, channel, 1, 1000);
 8002448:	f607 03f8 	addw	r3, r7, #2296	; 0x8f8
 800244c:	f5a3 62c3 	sub.w	r2, r3, #1560	; 0x618
 8002450:	f642 03c4 	movw	r3, #10436	; 0x28c4
 8002454:	443b      	add	r3, r7
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	4413      	add	r3, r2
 800245a:	781b      	ldrb	r3, [r3, #0]
 800245c:	b29b      	uxth	r3, r3
 800245e:	005b      	lsls	r3, r3, #1
 8002460:	b299      	uxth	r1, r3
 8002462:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002466:	9300      	str	r3, [sp, #0]
 8002468:	2301      	movs	r3, #1
 800246a:	f642 027c 	movw	r2, #10364	; 0x287c
 800246e:	443a      	add	r2, r7
 8002470:	6812      	ldr	r2, [r2, #0]
 8002472:	485a      	ldr	r0, [pc, #360]	; (80025dc <main+0x11a4>)
 8002474:	f001 ff88 	bl	8004388 <HAL_I2C_Master_Transmit>
									  for (int j = 0; j < sizeof(tca_addr); j++) {
 8002478:	f642 03c4 	movw	r3, #10436	; 0x28c4
 800247c:	443b      	add	r3, r7
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	3301      	adds	r3, #1
 8002482:	f642 02c4 	movw	r2, #10436	; 0x28c4
 8002486:	443a      	add	r2, r7
 8002488:	6013      	str	r3, [r2, #0]
 800248a:	f642 03c4 	movw	r3, #10436	; 0x28c4
 800248e:	443b      	add	r3, r7
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	2b02      	cmp	r3, #2
 8002494:	d992      	bls.n	80023bc <main+0xf84>
									  }
									  Dev = &vl53l0x_s[i];
 8002496:	4b52      	ldr	r3, [pc, #328]	; (80025e0 <main+0x11a8>)
 8002498:	f503 5323 	add.w	r3, r3, #10432	; 0x28c0
 800249c:	f103 0338 	add.w	r3, r3, #56	; 0x38
 80024a0:	443b      	add	r3, r7
 80024a2:	f642 02c8 	movw	r2, #10440	; 0x28c8
 80024a6:	443a      	add	r2, r7
 80024a8:	6812      	ldr	r2, [r2, #0]
 80024aa:	f44f 71c8 	mov.w	r1, #400	; 0x190
 80024ae:	fb01 f202 	mul.w	r2, r1, r2
 80024b2:	4413      	add	r3, r2
 80024b4:	f642 029c 	movw	r2, #10396	; 0x289c
 80024b8:	443a      	add	r2, r7
 80024ba:	6013      	str	r3, [r2, #0]
									  VL53L0X_PerformContinuousRangingMeasurement(Dev, &RangingData); // 1500us
 80024bc:	4949      	ldr	r1, [pc, #292]	; (80025e4 <main+0x11ac>)
 80024be:	f642 039c 	movw	r3, #10396	; 0x289c
 80024c2:	443b      	add	r3, r7
 80024c4:	6818      	ldr	r0, [r3, #0]
 80024c6:	f00a fb22 	bl	800cb0e <VL53L0X_PerformContinuousRangingMeasurement>

									  if (RangingData.RangeStatus == 0) {
 80024ca:	4b46      	ldr	r3, [pc, #280]	; (80025e4 <main+0x11ac>)
 80024cc:	7e1b      	ldrb	r3, [r3, #24]
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d139      	bne.n	8002546 <main+0x110e>
										  distance[i][current_index[i]] = RangingData.RangeMilliMeter;
 80024d2:	4b44      	ldr	r3, [pc, #272]	; (80025e4 <main+0x11ac>)
 80024d4:	8919      	ldrh	r1, [r3, #8]
 80024d6:	f607 03f8 	addw	r3, r7, #2296	; 0x8f8
 80024da:	f6a3 0398 	subw	r3, r3, #2200	; 0x898
 80024de:	f642 02c8 	movw	r2, #10440	; 0x28c8
 80024e2:	443a      	add	r2, r7
 80024e4:	6812      	ldr	r2, [r2, #0]
 80024e6:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 80024ea:	460c      	mov	r4, r1
 80024ec:	f607 03f8 	addw	r3, r7, #2296	; 0x8f8
 80024f0:	f6a3 0138 	subw	r1, r3, #2104	; 0x838
 80024f4:	f642 03c8 	movw	r3, #10440	; 0x28c8
 80024f8:	443b      	add	r3, r7
 80024fa:	681a      	ldr	r2, [r3, #0]
 80024fc:	4613      	mov	r3, r2
 80024fe:	009b      	lsls	r3, r3, #2
 8002500:	4413      	add	r3, r2
 8002502:	4403      	add	r3, r0
 8002504:	f841 4023 	str.w	r4, [r1, r3, lsl #2]
										  current_index[i] = (current_index[i] + 1) % WINDOW_SIZE;
 8002508:	f607 03f8 	addw	r3, r7, #2296	; 0x8f8
 800250c:	f6a3 0398 	subw	r3, r3, #2200	; 0x898
 8002510:	f642 02c8 	movw	r2, #10440	; 0x28c8
 8002514:	443a      	add	r2, r7
 8002516:	6812      	ldr	r2, [r2, #0]
 8002518:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800251c:	1c59      	adds	r1, r3, #1
 800251e:	4b32      	ldr	r3, [pc, #200]	; (80025e8 <main+0x11b0>)
 8002520:	fb83 2301 	smull	r2, r3, r3, r1
 8002524:	105a      	asrs	r2, r3, #1
 8002526:	17cb      	asrs	r3, r1, #31
 8002528:	1ad2      	subs	r2, r2, r3
 800252a:	4613      	mov	r3, r2
 800252c:	009b      	lsls	r3, r3, #2
 800252e:	4413      	add	r3, r2
 8002530:	1aca      	subs	r2, r1, r3
 8002532:	f607 03f8 	addw	r3, r7, #2296	; 0x8f8
 8002536:	f6a3 0398 	subw	r3, r3, #2200	; 0x898
 800253a:	f642 01c8 	movw	r1, #10440	; 0x28c8
 800253e:	4439      	add	r1, r7
 8002540:	6809      	ldr	r1, [r1, #0]
 8002542:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
									  }

									  // Apply the filter every time new data comes in
									  int temp[WINDOW_SIZE];
									  for (int j = 0; j < WINDOW_SIZE; j++) {
 8002546:	2300      	movs	r3, #0
 8002548:	f507 5223 	add.w	r2, r7, #10432	; 0x28c0
 800254c:	6013      	str	r3, [r2, #0]
 800254e:	e020      	b.n	8002592 <main+0x115a>
										  temp[j] = distance[i][j];
 8002550:	f607 03f8 	addw	r3, r7, #2296	; 0x8f8
 8002554:	f6a3 0138 	subw	r1, r3, #2104	; 0x838
 8002558:	f642 03c8 	movw	r3, #10440	; 0x28c8
 800255c:	443b      	add	r3, r7
 800255e:	681a      	ldr	r2, [r3, #0]
 8002560:	4613      	mov	r3, r2
 8002562:	009b      	lsls	r3, r3, #2
 8002564:	4413      	add	r3, r2
 8002566:	f507 5223 	add.w	r2, r7, #10432	; 0x28c0
 800256a:	6812      	ldr	r2, [r2, #0]
 800256c:	4413      	add	r3, r2
 800256e:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8002572:	f607 03f8 	addw	r3, r7, #2296	; 0x8f8
 8002576:	f5a3 63cb 	sub.w	r3, r3, #1624	; 0x658
 800257a:	f507 5223 	add.w	r2, r7, #10432	; 0x28c0
 800257e:	6812      	ldr	r2, [r2, #0]
 8002580:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
									  for (int j = 0; j < WINDOW_SIZE; j++) {
 8002584:	f507 5323 	add.w	r3, r7, #10432	; 0x28c0
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	3301      	adds	r3, #1
 800258c:	f507 5223 	add.w	r2, r7, #10432	; 0x28c0
 8002590:	6013      	str	r3, [r2, #0]
 8002592:	f507 5323 	add.w	r3, r7, #10432	; 0x28c0
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	2b04      	cmp	r3, #4
 800259a:	ddd9      	ble.n	8002550 <main+0x1118>
									  }

									  // Insertion sort
									  for (int j = 1; j < WINDOW_SIZE; j++) {
 800259c:	2301      	movs	r3, #1
 800259e:	f642 02bc 	movw	r2, #10428	; 0x28bc
 80025a2:	443a      	add	r2, r7
 80025a4:	6013      	str	r3, [r2, #0]
 80025a6:	e06b      	b.n	8002680 <main+0x1248>
										  int key = temp[j];
 80025a8:	f607 03f8 	addw	r3, r7, #2296	; 0x8f8
 80025ac:	f5a3 63cb 	sub.w	r3, r3, #1624	; 0x658
 80025b0:	f642 02bc 	movw	r2, #10428	; 0x28bc
 80025b4:	443a      	add	r2, r7
 80025b6:	6812      	ldr	r2, [r2, #0]
 80025b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80025bc:	f507 5222 	add.w	r2, r7, #10368	; 0x2880
 80025c0:	6013      	str	r3, [r2, #0]
										  int k = j - 1;
 80025c2:	f642 03bc 	movw	r3, #10428	; 0x28bc
 80025c6:	443b      	add	r3, r7
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	3b01      	subs	r3, #1
 80025cc:	f642 02b8 	movw	r2, #10424	; 0x28b8
 80025d0:	443a      	add	r2, r7
 80025d2:	6013      	str	r3, [r2, #0]

										  while (k >= 0 && temp[k] > key) {
 80025d4:	e028      	b.n	8002628 <main+0x11f0>
 80025d6:	bf00      	nop
 80025d8:	ffffd9eb 	.word	0xffffd9eb
 80025dc:	200004b8 	.word	0x200004b8
 80025e0:	ffffd9f4 	.word	0xffffd9f4
 80025e4:	200005e0 	.word	0x200005e0
 80025e8:	66666667 	.word	0x66666667
											  temp[k + 1] = temp[k];
 80025ec:	f642 03b8 	movw	r3, #10424	; 0x28b8
 80025f0:	443b      	add	r3, r7
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	1c5a      	adds	r2, r3, #1
 80025f6:	f607 03f8 	addw	r3, r7, #2296	; 0x8f8
 80025fa:	f5a3 63cb 	sub.w	r3, r3, #1624	; 0x658
 80025fe:	f642 01b8 	movw	r1, #10424	; 0x28b8
 8002602:	4439      	add	r1, r7
 8002604:	6809      	ldr	r1, [r1, #0]
 8002606:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 800260a:	f607 03f8 	addw	r3, r7, #2296	; 0x8f8
 800260e:	f5a3 63cb 	sub.w	r3, r3, #1624	; 0x658
 8002612:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
											  k = k - 1;
 8002616:	f642 03b8 	movw	r3, #10424	; 0x28b8
 800261a:	443b      	add	r3, r7
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	3b01      	subs	r3, #1
 8002620:	f642 02b8 	movw	r2, #10424	; 0x28b8
 8002624:	443a      	add	r2, r7
 8002626:	6013      	str	r3, [r2, #0]
										  while (k >= 0 && temp[k] > key) {
 8002628:	f642 03b8 	movw	r3, #10424	; 0x28b8
 800262c:	443b      	add	r3, r7
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	2b00      	cmp	r3, #0
 8002632:	db0e      	blt.n	8002652 <main+0x121a>
 8002634:	f607 03f8 	addw	r3, r7, #2296	; 0x8f8
 8002638:	f5a3 63cb 	sub.w	r3, r3, #1624	; 0x658
 800263c:	f642 02b8 	movw	r2, #10424	; 0x28b8
 8002640:	443a      	add	r2, r7
 8002642:	6812      	ldr	r2, [r2, #0]
 8002644:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002648:	f507 5222 	add.w	r2, r7, #10368	; 0x2880
 800264c:	6812      	ldr	r2, [r2, #0]
 800264e:	429a      	cmp	r2, r3
 8002650:	dbcc      	blt.n	80025ec <main+0x11b4>
										  }
										  temp[k + 1] = key;
 8002652:	f642 03b8 	movw	r3, #10424	; 0x28b8
 8002656:	443b      	add	r3, r7
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	1c5a      	adds	r2, r3, #1
 800265c:	f607 03f8 	addw	r3, r7, #2296	; 0x8f8
 8002660:	f5a3 63cb 	sub.w	r3, r3, #1624	; 0x658
 8002664:	f507 5122 	add.w	r1, r7, #10368	; 0x2880
 8002668:	6809      	ldr	r1, [r1, #0]
 800266a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
									  for (int j = 1; j < WINDOW_SIZE; j++) {
 800266e:	f642 03bc 	movw	r3, #10428	; 0x28bc
 8002672:	443b      	add	r3, r7
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	3301      	adds	r3, #1
 8002678:	f642 02bc 	movw	r2, #10428	; 0x28bc
 800267c:	443a      	add	r2, r7
 800267e:	6013      	str	r3, [r2, #0]
 8002680:	f642 03bc 	movw	r3, #10428	; 0x28bc
 8002684:	443b      	add	r3, r7
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	2b04      	cmp	r3, #4
 800268a:	dd8d      	ble.n	80025a8 <main+0x1170>
									  }

									  filtered_distance[i] = temp[WINDOW_SIZE / 2];
 800268c:	f607 03f8 	addw	r3, r7, #2296	; 0x8f8
 8002690:	f5a3 63cb 	sub.w	r3, r3, #1624	; 0x658
 8002694:	6899      	ldr	r1, [r3, #8]
 8002696:	f607 03f8 	addw	r3, r7, #2296	; 0x8f8
 800269a:	f6a3 03f8 	subw	r3, r3, #2296	; 0x8f8
 800269e:	f642 02c8 	movw	r2, #10440	; 0x28c8
 80026a2:	443a      	add	r2, r7
 80026a4:	6812      	ldr	r2, [r2, #0]
 80026a6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

									  // Print the filtered data to the serial port
									  HAL_UART_Transmit(&huart1, (uint8_t*)Message, sprintf((char*)Message, "%d ", filtered_distance[i]), 100);
 80026aa:	f607 03f8 	addw	r3, r7, #2296	; 0x8f8
 80026ae:	f6a3 03f8 	subw	r3, r3, #2296	; 0x8f8
 80026b2:	f642 02c8 	movw	r2, #10440	; 0x28c8
 80026b6:	443a      	add	r2, r7
 80026b8:	6812      	ldr	r2, [r2, #0]
 80026ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80026be:	461a      	mov	r2, r3
 80026c0:	498b      	ldr	r1, [pc, #556]	; (80028f0 <main+0x14b8>)
 80026c2:	488c      	ldr	r0, [pc, #560]	; (80028f4 <main+0x14bc>)
 80026c4:	f00e fc54 	bl	8010f70 <siprintf>
 80026c8:	4603      	mov	r3, r0
 80026ca:	b29a      	uxth	r2, r3
 80026cc:	2364      	movs	r3, #100	; 0x64
 80026ce:	4989      	ldr	r1, [pc, #548]	; (80028f4 <main+0x14bc>)
 80026d0:	4889      	ldr	r0, [pc, #548]	; (80028f8 <main+0x14c0>)
 80026d2:	f007 f989 	bl	80099e8 <HAL_UART_Transmit>
							        for (int i = 0; i < NUM_SENSOR; i++) {
 80026d6:	f642 03c8 	movw	r3, #10440	; 0x28c8
 80026da:	443b      	add	r3, r7
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	3301      	adds	r3, #1
 80026e0:	f642 02c8 	movw	r2, #10440	; 0x28c8
 80026e4:	443a      	add	r2, r7
 80026e6:	6013      	str	r3, [r2, #0]
 80026e8:	f642 03c8 	movw	r3, #10440	; 0x28c8
 80026ec:	443b      	add	r3, r7
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	2b17      	cmp	r3, #23
 80026f2:	f77f ae42 	ble.w	800237a <main+0xf42>

								  }


						  /// Read the raw data from HX711 ///
						  rawData = Read_HX711();
 80026f6:	f7fe fd63 	bl	80011c0 <Read_HX711>
 80026fa:	f642 03b0 	movw	r3, #10416	; 0x28b0
 80026fe:	443b      	add	r3, r7
 8002700:	6018      	str	r0, [r3, #0]
						  float loadcell_slope = -1/1600.00f; // Convert the raw data to weight (replace the calibration factor with your own)
 8002702:	4b7e      	ldr	r3, [pc, #504]	; (80028fc <main+0x14c4>)
 8002704:	f642 0290 	movw	r2, #10384	; 0x2890
 8002708:	443a      	add	r2, r7
 800270a:	6013      	str	r3, [r2, #0]
						  float loadcell_bias = 10002;
 800270c:	4b7c      	ldr	r3, [pc, #496]	; (8002900 <main+0x14c8>)
 800270e:	f642 028c 	movw	r2, #10380	; 0x288c
 8002712:	443a      	add	r2, r7
 8002714:	6013      	str	r3, [r2, #0]
						  UART_SendWeight_g(rawData,loadcell_slope,loadcell_bias); // Send the weight data over UART
 8002716:	f642 03b0 	movw	r3, #10416	; 0x28b0
 800271a:	443b      	add	r3, r7
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	ee07 3a90 	vmov	s15, r3
 8002722:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002726:	f642 038c 	movw	r3, #10380	; 0x288c
 800272a:	443b      	add	r3, r7
 800272c:	ed93 1a00 	vldr	s2, [r3]
 8002730:	f642 0390 	movw	r3, #10384	; 0x2890
 8002734:	443b      	add	r3, r7
 8002736:	edd3 0a00 	vldr	s1, [r3]
 800273a:	eeb0 0a67 	vmov.f32	s0, s15
 800273e:	f7fe fd8d 	bl	800125c <UART_SendWeight_g>
						  /// End of Reading HX711 data ///

						  /// Read the raw data from AMT103 ///
						  float encoderAngle = encoderCount/4096.0*360.0;
 8002742:	4b70      	ldr	r3, [pc, #448]	; (8002904 <main+0x14cc>)
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	4618      	mov	r0, r3
 8002748:	f7fd ff0c 	bl	8000564 <__aeabi_i2d>
 800274c:	f04f 0200 	mov.w	r2, #0
 8002750:	4b6d      	ldr	r3, [pc, #436]	; (8002908 <main+0x14d0>)
 8002752:	f7fe f89b 	bl	800088c <__aeabi_ddiv>
 8002756:	4602      	mov	r2, r0
 8002758:	460b      	mov	r3, r1
 800275a:	4610      	mov	r0, r2
 800275c:	4619      	mov	r1, r3
 800275e:	f04f 0200 	mov.w	r2, #0
 8002762:	4b6a      	ldr	r3, [pc, #424]	; (800290c <main+0x14d4>)
 8002764:	f7fd ff68 	bl	8000638 <__aeabi_dmul>
 8002768:	4602      	mov	r2, r0
 800276a:	460b      	mov	r3, r1
 800276c:	4610      	mov	r0, r2
 800276e:	4619      	mov	r1, r3
 8002770:	f7fe fa5a 	bl	8000c28 <__aeabi_d2f>
 8002774:	4603      	mov	r3, r0
 8002776:	f642 0288 	movw	r2, #10376	; 0x2888
 800277a:	443a      	add	r2, r7
 800277c:	6013      	str	r3, [r2, #0]
						  HAL_UART_Transmit(&huart1, (uint8_t*)Message, sprintf((char*)Message, " %.2f ",encoderAngle), 100);
 800277e:	f642 0388 	movw	r3, #10376	; 0x2888
 8002782:	443b      	add	r3, r7
 8002784:	6818      	ldr	r0, [r3, #0]
 8002786:	f7fd feff 	bl	8000588 <__aeabi_f2d>
 800278a:	4602      	mov	r2, r0
 800278c:	460b      	mov	r3, r1
 800278e:	4960      	ldr	r1, [pc, #384]	; (8002910 <main+0x14d8>)
 8002790:	4858      	ldr	r0, [pc, #352]	; (80028f4 <main+0x14bc>)
 8002792:	f00e fbed 	bl	8010f70 <siprintf>
 8002796:	4603      	mov	r3, r0
 8002798:	b29a      	uxth	r2, r3
 800279a:	2364      	movs	r3, #100	; 0x64
 800279c:	4955      	ldr	r1, [pc, #340]	; (80028f4 <main+0x14bc>)
 800279e:	4856      	ldr	r0, [pc, #344]	; (80028f8 <main+0x14c0>)
 80027a0:	f007 f922 	bl	80099e8 <HAL_UART_Transmit>
						  /// End of Reading AMT103 data ///

						 end_time = HAL_GetTick(); // ?�� ?���???? 측정
 80027a4:	f000 feea 	bl	800357c <HAL_GetTick>
 80027a8:	4603      	mov	r3, r0
 80027aa:	4a5a      	ldr	r2, [pc, #360]	; (8002914 <main+0x14dc>)
 80027ac:	6013      	str	r3, [r2, #0]
						 time_diff = end_time - start_time; // ?���???? 차이 계산
 80027ae:	4b59      	ldr	r3, [pc, #356]	; (8002914 <main+0x14dc>)
 80027b0:	681a      	ldr	r2, [r3, #0]
 80027b2:	4b59      	ldr	r3, [pc, #356]	; (8002918 <main+0x14e0>)
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	1ad3      	subs	r3, r2, r3
 80027b8:	4a58      	ldr	r2, [pc, #352]	; (800291c <main+0x14e4>)
 80027ba:	6013      	str	r3, [r2, #0]


						 HAL_UART_Transmit(&huart1, (uint8_t*)Message, sprintf((char*)Message, "%d ",2*lin), 100);
 80027bc:	f642 03d4 	movw	r3, #10452	; 0x28d4
 80027c0:	443b      	add	r3, r7
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	005b      	lsls	r3, r3, #1
 80027c6:	461a      	mov	r2, r3
 80027c8:	4949      	ldr	r1, [pc, #292]	; (80028f0 <main+0x14b8>)
 80027ca:	484a      	ldr	r0, [pc, #296]	; (80028f4 <main+0x14bc>)
 80027cc:	f00e fbd0 	bl	8010f70 <siprintf>
 80027d0:	4603      	mov	r3, r0
 80027d2:	b29a      	uxth	r2, r3
 80027d4:	2364      	movs	r3, #100	; 0x64
 80027d6:	4947      	ldr	r1, [pc, #284]	; (80028f4 <main+0x14bc>)
 80027d8:	4847      	ldr	r0, [pc, #284]	; (80028f8 <main+0x14c0>)
 80027da:	f007 f905 	bl	80099e8 <HAL_UART_Transmit>
						 HAL_UART_Transmit(&huart1, (uint8_t*)Message, sprintf((char*)Message, "%d ",rev), 100);
 80027de:	f642 03d0 	movw	r3, #10448	; 0x28d0
 80027e2:	443b      	add	r3, r7
 80027e4:	681a      	ldr	r2, [r3, #0]
 80027e6:	4942      	ldr	r1, [pc, #264]	; (80028f0 <main+0x14b8>)
 80027e8:	4842      	ldr	r0, [pc, #264]	; (80028f4 <main+0x14bc>)
 80027ea:	f00e fbc1 	bl	8010f70 <siprintf>
 80027ee:	4603      	mov	r3, r0
 80027f0:	b29a      	uxth	r2, r3
 80027f2:	2364      	movs	r3, #100	; 0x64
 80027f4:	493f      	ldr	r1, [pc, #252]	; (80028f4 <main+0x14bc>)
 80027f6:	4840      	ldr	r0, [pc, #256]	; (80028f8 <main+0x14c0>)
 80027f8:	f007 f8f6 	bl	80099e8 <HAL_UART_Transmit>
						 HAL_UART_Transmit(&huart1, (uint8_t*)Message, sprintf((char*)Message, "%.2f",r*0.8), 100);
 80027fc:	f642 03cc 	movw	r3, #10444	; 0x28cc
 8002800:	443b      	add	r3, r7
 8002802:	6818      	ldr	r0, [r3, #0]
 8002804:	f7fd feae 	bl	8000564 <__aeabi_i2d>
 8002808:	a337      	add	r3, pc, #220	; (adr r3, 80028e8 <main+0x14b0>)
 800280a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800280e:	f7fd ff13 	bl	8000638 <__aeabi_dmul>
 8002812:	4602      	mov	r2, r0
 8002814:	460b      	mov	r3, r1
 8002816:	4942      	ldr	r1, [pc, #264]	; (8002920 <main+0x14e8>)
 8002818:	4836      	ldr	r0, [pc, #216]	; (80028f4 <main+0x14bc>)
 800281a:	f00e fba9 	bl	8010f70 <siprintf>
 800281e:	4603      	mov	r3, r0
 8002820:	b29a      	uxth	r2, r3
 8002822:	2364      	movs	r3, #100	; 0x64
 8002824:	4933      	ldr	r1, [pc, #204]	; (80028f4 <main+0x14bc>)
 8002826:	4834      	ldr	r0, [pc, #208]	; (80028f8 <main+0x14c0>)
 8002828:	f007 f8de 	bl	80099e8 <HAL_UART_Transmit>
						 HAL_UART_Transmit(&huart1, (uint8_t*)Message, sprintf((char*)Message, "\n"), 100);
 800282c:	493d      	ldr	r1, [pc, #244]	; (8002924 <main+0x14ec>)
 800282e:	4831      	ldr	r0, [pc, #196]	; (80028f4 <main+0x14bc>)
 8002830:	f00e fb9e 	bl	8010f70 <siprintf>
 8002834:	4603      	mov	r3, r0
 8002836:	b29a      	uxth	r2, r3
 8002838:	2364      	movs	r3, #100	; 0x64
 800283a:	492e      	ldr	r1, [pc, #184]	; (80028f4 <main+0x14bc>)
 800283c:	482e      	ldr	r0, [pc, #184]	; (80028f8 <main+0x14c0>)
 800283e:	f007 f8d3 	bl	80099e8 <HAL_UART_Transmit>

						 }while(time_diff<4000);
 8002842:	4b36      	ldr	r3, [pc, #216]	; (800291c <main+0x14e4>)
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 800284a:	f4ff ad90 	bcc.w	800236e <main+0xf36>
						 ///////////////////////////////////////////////////////
						 ////////////////////Logging End////////////////////////
						 ///////////////////////////////////////////////////////
							 HAL_Delay(500);
 800284e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002852:	f000 fe9f 	bl	8003594 <HAL_Delay>

						 servo_angle(&htim2, TIM_CHANNEL_1, 0); // turn to origin
 8002856:	2200      	movs	r2, #0
 8002858:	2100      	movs	r1, #0
 800285a:	4833      	ldr	r0, [pc, #204]	; (8002928 <main+0x14f0>)
 800285c:	f000 faa4 	bl	8002da8 <servo_angle>
						 HAL_Delay(500);
 8002860:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002864:	f000 fe96 	bl	8003594 <HAL_Delay>
						 for(int r = 2;r<11;r++){
 8002868:	f642 03cc 	movw	r3, #10444	; 0x28cc
 800286c:	443b      	add	r3, r7
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	3301      	adds	r3, #1
 8002872:	f642 02cc 	movw	r2, #10444	; 0x28cc
 8002876:	443a      	add	r2, r7
 8002878:	6013      	str	r3, [r2, #0]
 800287a:	f642 03cc 	movw	r3, #10444	; 0x28cc
 800287e:	443b      	add	r3, r7
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	2b0a      	cmp	r3, #10
 8002884:	f77f ad43 	ble.w	800230e <main+0xed6>
					 for(int rev = 0; rev<40; rev++){
 8002888:	f642 03d0 	movw	r3, #10448	; 0x28d0
 800288c:	443b      	add	r3, r7
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	3301      	adds	r3, #1
 8002892:	f642 02d0 	movw	r2, #10448	; 0x28d0
 8002896:	443a      	add	r2, r7
 8002898:	6013      	str	r3, [r2, #0]
 800289a:	f642 03d0 	movw	r3, #10448	; 0x28d0
 800289e:	443b      	add	r3, r7
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	2b27      	cmp	r3, #39	; 0x27
 80028a4:	f77f ad2a 	ble.w	80022fc <main+0xec4>
	        	 for( int lin = 0; lin < 1;lin ++){
 80028a8:	f642 03d4 	movw	r3, #10452	; 0x28d4
 80028ac:	443b      	add	r3, r7
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	3301      	adds	r3, #1
 80028b2:	f642 02d4 	movw	r2, #10452	; 0x28d4
 80028b6:	443a      	add	r2, r7
 80028b8:	6013      	str	r3, [r2, #0]
 80028ba:	f642 03d4 	movw	r3, #10452	; 0x28d4
 80028be:	443b      	add	r3, r7
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	f77f ad14 	ble.w	80022f0 <main+0xeb8>
						 }
					 }
	        	 }


		         receivedFlag = 0;
 80028c8:	4b18      	ldr	r3, [pc, #96]	; (800292c <main+0x14f4>)
 80028ca:	2200      	movs	r2, #0
 80028cc:	701a      	strb	r2, [r3, #0]
		     }

     	 HAL_UART_Transmit(&huart1, (uint8_t*)Message, sprintf((char*)Message, "Message end\r\n"), 100);
 80028ce:	4918      	ldr	r1, [pc, #96]	; (8002930 <main+0x14f8>)
 80028d0:	4808      	ldr	r0, [pc, #32]	; (80028f4 <main+0x14bc>)
 80028d2:	f00e fb4d 	bl	8010f70 <siprintf>
 80028d6:	4603      	mov	r3, r0
 80028d8:	b29a      	uxth	r2, r3
 80028da:	2364      	movs	r3, #100	; 0x64
 80028dc:	4905      	ldr	r1, [pc, #20]	; (80028f4 <main+0x14bc>)
 80028de:	4806      	ldr	r0, [pc, #24]	; (80028f8 <main+0x14c0>)
 80028e0:	f007 f882 	bl	80099e8 <HAL_UART_Transmit>
	  if(startMessage==0){
 80028e4:	f7fe bf64 	b.w	80017b0 <main+0x378>
 80028e8:	9999999a 	.word	0x9999999a
 80028ec:	3fe99999 	.word	0x3fe99999
 80028f0:	08015684 	.word	0x08015684
 80028f4:	200005a0 	.word	0x200005a0
 80028f8:	2000069c 	.word	0x2000069c
 80028fc:	ba23d70a 	.word	0xba23d70a
 8002900:	461c4800 	.word	0x461c4800
 8002904:	200005fc 	.word	0x200005fc
 8002908:	40b00000 	.word	0x40b00000
 800290c:	40768000 	.word	0x40768000
 8002910:	08015688 	.word	0x08015688
 8002914:	20000598 	.word	0x20000598
 8002918:	20000594 	.word	0x20000594
 800291c:	20000590 	.word	0x20000590
 8002920:	080156a8 	.word	0x080156a8
 8002924:	08015690 	.word	0x08015690
 8002928:	20000604 	.word	0x20000604
 800292c:	2000058f 	.word	0x2000058f
 8002930:	080156b0 	.word	0x080156b0

08002934 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002934:	b580      	push	{r7, lr}
 8002936:	b094      	sub	sp, #80	; 0x50
 8002938:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800293a:	f107 0320 	add.w	r3, r7, #32
 800293e:	2230      	movs	r2, #48	; 0x30
 8002940:	2100      	movs	r1, #0
 8002942:	4618      	mov	r0, r3
 8002944:	f00d fc8c 	bl	8010260 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002948:	f107 030c 	add.w	r3, r7, #12
 800294c:	2200      	movs	r2, #0
 800294e:	601a      	str	r2, [r3, #0]
 8002950:	605a      	str	r2, [r3, #4]
 8002952:	609a      	str	r2, [r3, #8]
 8002954:	60da      	str	r2, [r3, #12]
 8002956:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002958:	4b2b      	ldr	r3, [pc, #172]	; (8002a08 <SystemClock_Config+0xd4>)
 800295a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800295c:	4a2a      	ldr	r2, [pc, #168]	; (8002a08 <SystemClock_Config+0xd4>)
 800295e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002962:	6413      	str	r3, [r2, #64]	; 0x40
 8002964:	4b28      	ldr	r3, [pc, #160]	; (8002a08 <SystemClock_Config+0xd4>)
 8002966:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002968:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800296c:	60bb      	str	r3, [r7, #8]
 800296e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002970:	4b26      	ldr	r3, [pc, #152]	; (8002a0c <SystemClock_Config+0xd8>)
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	4a25      	ldr	r2, [pc, #148]	; (8002a0c <SystemClock_Config+0xd8>)
 8002976:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800297a:	6013      	str	r3, [r2, #0]
 800297c:	4b23      	ldr	r3, [pc, #140]	; (8002a0c <SystemClock_Config+0xd8>)
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002984:	607b      	str	r3, [r7, #4]
 8002986:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002988:	2301      	movs	r3, #1
 800298a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800298c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002990:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002992:	2302      	movs	r3, #2
 8002994:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002996:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800299a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 800299c:	2319      	movs	r3, #25
 800299e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 432;
 80029a0:	f44f 73d8 	mov.w	r3, #432	; 0x1b0
 80029a4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80029a6:	2302      	movs	r3, #2
 80029a8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80029aa:	2302      	movs	r3, #2
 80029ac:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80029ae:	f107 0320 	add.w	r3, r7, #32
 80029b2:	4618      	mov	r0, r3
 80029b4:	f003 f836 	bl	8005a24 <HAL_RCC_OscConfig>
 80029b8:	4603      	mov	r3, r0
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d001      	beq.n	80029c2 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 80029be:	f000 f8df 	bl	8002b80 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80029c2:	f002 ffdf 	bl	8005984 <HAL_PWREx_EnableOverDrive>
 80029c6:	4603      	mov	r3, r0
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d001      	beq.n	80029d0 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80029cc:	f000 f8d8 	bl	8002b80 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80029d0:	230f      	movs	r3, #15
 80029d2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80029d4:	2302      	movs	r3, #2
 80029d6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80029d8:	2300      	movs	r3, #0
 80029da:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80029dc:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80029e0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80029e2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80029e6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 80029e8:	f107 030c 	add.w	r3, r7, #12
 80029ec:	2107      	movs	r1, #7
 80029ee:	4618      	mov	r0, r3
 80029f0:	f003 fb72 	bl	80060d8 <HAL_RCC_ClockConfig>
 80029f4:	4603      	mov	r3, r0
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d001      	beq.n	80029fe <SystemClock_Config+0xca>
  {
    Error_Handler();
 80029fa:	f000 f8c1 	bl	8002b80 <Error_Handler>
  }
}
 80029fe:	bf00      	nop
 8002a00:	3750      	adds	r7, #80	; 0x50
 8002a02:	46bd      	mov	sp, r7
 8002a04:	bd80      	pop	{r7, pc}
 8002a06:	bf00      	nop
 8002a08:	40023800 	.word	0x40023800
 8002a0c:	40007000 	.word	0x40007000

08002a10 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8002a10:	b580      	push	{r7, lr}
 8002a12:	af00      	add	r7, sp, #0
  /* USART1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002a14:	2200      	movs	r2, #0
 8002a16:	2100      	movs	r1, #0
 8002a18:	2025      	movs	r0, #37	; 0x25
 8002a1a:	f000 fecf 	bl	80037bc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002a1e:	2025      	movs	r0, #37	; 0x25
 8002a20:	f000 fef8 	bl	8003814 <HAL_NVIC_EnableIRQ>
  /* I2C1_ER_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8002a24:	2200      	movs	r2, #0
 8002a26:	2100      	movs	r1, #0
 8002a28:	2020      	movs	r0, #32
 8002a2a:	f000 fec7 	bl	80037bc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8002a2e:	2020      	movs	r0, #32
 8002a30:	f000 fef0 	bl	8003814 <HAL_NVIC_EnableIRQ>
  /* I2C1_EV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8002a34:	2200      	movs	r2, #0
 8002a36:	2100      	movs	r1, #0
 8002a38:	201f      	movs	r0, #31
 8002a3a:	f000 febf 	bl	80037bc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8002a3e:	201f      	movs	r0, #31
 8002a40:	f000 fee8 	bl	8003814 <HAL_NVIC_EnableIRQ>
  /* EXTI15_10_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8002a44:	2200      	movs	r2, #0
 8002a46:	2100      	movs	r1, #0
 8002a48:	2028      	movs	r0, #40	; 0x28
 8002a4a:	f000 feb7 	bl	80037bc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002a4e:	2028      	movs	r0, #40	; 0x28
 8002a50:	f000 fee0 	bl	8003814 <HAL_NVIC_EnableIRQ>
  /* EXTI9_5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8002a54:	2200      	movs	r2, #0
 8002a56:	2100      	movs	r1, #0
 8002a58:	2017      	movs	r0, #23
 8002a5a:	f000 feaf 	bl	80037bc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8002a5e:	2017      	movs	r0, #23
 8002a60:	f000 fed8 	bl	8003814 <HAL_NVIC_EnableIRQ>
  /* TIM7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8002a64:	2200      	movs	r2, #0
 8002a66:	2100      	movs	r1, #0
 8002a68:	2037      	movs	r0, #55	; 0x37
 8002a6a:	f000 fea7 	bl	80037bc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8002a6e:	2037      	movs	r0, #55	; 0x37
 8002a70:	f000 fed0 	bl	8003814 <HAL_NVIC_EnableIRQ>
  /* TIM2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002a74:	2200      	movs	r2, #0
 8002a76:	2100      	movs	r1, #0
 8002a78:	201c      	movs	r0, #28
 8002a7a:	f000 fe9f 	bl	80037bc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002a7e:	201c      	movs	r0, #28
 8002a80:	f000 fec8 	bl	8003814 <HAL_NVIC_EnableIRQ>
}
 8002a84:	bf00      	nop
 8002a86:	bd80      	pop	{r7, pc}

08002a88 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002a88:	b580      	push	{r7, lr}
 8002a8a:	b082      	sub	sp, #8
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	6078      	str	r0, [r7, #4]
  if (huart->Instance == USART1)
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	4a15      	ldr	r2, [pc, #84]	; (8002aec <HAL_UART_RxCpltCallback+0x64>)
 8002a96:	4293      	cmp	r3, r2
 8002a98:	d124      	bne.n	8002ae4 <HAL_UART_RxCpltCallback+0x5c>
  {
    if (rxData != '\n' && rxBufferIndex < RX_BUFFER_SIZE - 1)
 8002a9a:	4b15      	ldr	r3, [pc, #84]	; (8002af0 <HAL_UART_RxCpltCallback+0x68>)
 8002a9c:	781b      	ldrb	r3, [r3, #0]
 8002a9e:	2b0a      	cmp	r3, #10
 8002aa0:	d00f      	beq.n	8002ac2 <HAL_UART_RxCpltCallback+0x3a>
 8002aa2:	4b14      	ldr	r3, [pc, #80]	; (8002af4 <HAL_UART_RxCpltCallback+0x6c>)
 8002aa4:	881b      	ldrh	r3, [r3, #0]
 8002aa6:	2b7e      	cmp	r3, #126	; 0x7e
 8002aa8:	d80b      	bhi.n	8002ac2 <HAL_UART_RxCpltCallback+0x3a>
    {
      rxBuffer[rxBufferIndex++] = rxData;
 8002aaa:	4b12      	ldr	r3, [pc, #72]	; (8002af4 <HAL_UART_RxCpltCallback+0x6c>)
 8002aac:	881b      	ldrh	r3, [r3, #0]
 8002aae:	1c5a      	adds	r2, r3, #1
 8002ab0:	b291      	uxth	r1, r2
 8002ab2:	4a10      	ldr	r2, [pc, #64]	; (8002af4 <HAL_UART_RxCpltCallback+0x6c>)
 8002ab4:	8011      	strh	r1, [r2, #0]
 8002ab6:	461a      	mov	r2, r3
 8002ab8:	4b0d      	ldr	r3, [pc, #52]	; (8002af0 <HAL_UART_RxCpltCallback+0x68>)
 8002aba:	7819      	ldrb	r1, [r3, #0]
 8002abc:	4b0e      	ldr	r3, [pc, #56]	; (8002af8 <HAL_UART_RxCpltCallback+0x70>)
 8002abe:	5499      	strb	r1, [r3, r2]
 8002ac0:	e00b      	b.n	8002ada <HAL_UART_RxCpltCallback+0x52>
    }
    else
    {
      rxBuffer[rxBufferIndex] = '\0';
 8002ac2:	4b0c      	ldr	r3, [pc, #48]	; (8002af4 <HAL_UART_RxCpltCallback+0x6c>)
 8002ac4:	881b      	ldrh	r3, [r3, #0]
 8002ac6:	461a      	mov	r2, r3
 8002ac8:	4b0b      	ldr	r3, [pc, #44]	; (8002af8 <HAL_UART_RxCpltCallback+0x70>)
 8002aca:	2100      	movs	r1, #0
 8002acc:	5499      	strb	r1, [r3, r2]
      rxBufferIndex = 0;
 8002ace:	4b09      	ldr	r3, [pc, #36]	; (8002af4 <HAL_UART_RxCpltCallback+0x6c>)
 8002ad0:	2200      	movs	r2, #0
 8002ad2:	801a      	strh	r2, [r3, #0]
      receivedFlag = 1; // 문자?��?�� ?��?��?��?��?��?�� ?��리는 ?��?��그�?? ?��?��?��?��?��.
 8002ad4:	4b09      	ldr	r3, [pc, #36]	; (8002afc <HAL_UART_RxCpltCallback+0x74>)
 8002ad6:	2201      	movs	r2, #1
 8002ad8:	701a      	strb	r2, [r3, #0]
    }
    HAL_UART_Receive_IT(&huart1, &rxData, 1);
 8002ada:	2201      	movs	r2, #1
 8002adc:	4904      	ldr	r1, [pc, #16]	; (8002af0 <HAL_UART_RxCpltCallback+0x68>)
 8002ade:	4808      	ldr	r0, [pc, #32]	; (8002b00 <HAL_UART_RxCpltCallback+0x78>)
 8002ae0:	f007 f805 	bl	8009aee <HAL_UART_Receive_IT>
  }
}
 8002ae4:	bf00      	nop
 8002ae6:	3708      	adds	r7, #8
 8002ae8:	46bd      	mov	sp, r7
 8002aea:	bd80      	pop	{r7, pc}
 8002aec:	40011000 	.word	0x40011000
 8002af0:	2000058e 	.word	0x2000058e
 8002af4:	2000058c 	.word	0x2000058c
 8002af8:	2000050c 	.word	0x2000050c
 8002afc:	2000058f 	.word	0x2000058f
 8002b00:	2000069c 	.word	0x2000069c

08002b04 <HAL_GPIO_EXTI_Callback>:


#if 1
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002b04:	b580      	push	{r7, lr}
 8002b06:	b082      	sub	sp, #8
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	4603      	mov	r3, r0
 8002b0c:	80fb      	strh	r3, [r7, #6]
  if (GPIO_Pin == GPIO_PIN_8) // A?��?�� ???�� ?��?��?��?��
 8002b0e:	88fb      	ldrh	r3, [r7, #6]
 8002b10:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002b14:	d113      	bne.n	8002b3e <HAL_GPIO_EXTI_Callback+0x3a>
  {
    if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_15)) // B?�� 값을 ?��?��
 8002b16:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002b1a:	4816      	ldr	r0, [pc, #88]	; (8002b74 <HAL_GPIO_EXTI_Callback+0x70>)
 8002b1c:	f001 faae 	bl	800407c <HAL_GPIO_ReadPin>
 8002b20:	4603      	mov	r3, r0
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d005      	beq.n	8002b32 <HAL_GPIO_EXTI_Callback+0x2e>
    {
      encoderCount++;
 8002b26:	4b14      	ldr	r3, [pc, #80]	; (8002b78 <HAL_GPIO_EXTI_Callback+0x74>)
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	3301      	adds	r3, #1
 8002b2c:	4a12      	ldr	r2, [pc, #72]	; (8002b78 <HAL_GPIO_EXTI_Callback+0x74>)
 8002b2e:	6013      	str	r3, [r2, #0]
    else
    {
      encoderCount++;
    }
  }
}
 8002b30:	e01c      	b.n	8002b6c <HAL_GPIO_EXTI_Callback+0x68>
      encoderCount--;
 8002b32:	4b11      	ldr	r3, [pc, #68]	; (8002b78 <HAL_GPIO_EXTI_Callback+0x74>)
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	3b01      	subs	r3, #1
 8002b38:	4a0f      	ldr	r2, [pc, #60]	; (8002b78 <HAL_GPIO_EXTI_Callback+0x74>)
 8002b3a:	6013      	str	r3, [r2, #0]
}
 8002b3c:	e016      	b.n	8002b6c <HAL_GPIO_EXTI_Callback+0x68>
  else if (GPIO_Pin == GPIO_PIN_15) // B?��?�� ???�� ?��?��?��?��
 8002b3e:	88fb      	ldrh	r3, [r7, #6]
 8002b40:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002b44:	d112      	bne.n	8002b6c <HAL_GPIO_EXTI_Callback+0x68>
    if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_8)) // A?�� 값을 ?��?��
 8002b46:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002b4a:	480c      	ldr	r0, [pc, #48]	; (8002b7c <HAL_GPIO_EXTI_Callback+0x78>)
 8002b4c:	f001 fa96 	bl	800407c <HAL_GPIO_ReadPin>
 8002b50:	4603      	mov	r3, r0
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d005      	beq.n	8002b62 <HAL_GPIO_EXTI_Callback+0x5e>
      encoderCount--;
 8002b56:	4b08      	ldr	r3, [pc, #32]	; (8002b78 <HAL_GPIO_EXTI_Callback+0x74>)
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	3b01      	subs	r3, #1
 8002b5c:	4a06      	ldr	r2, [pc, #24]	; (8002b78 <HAL_GPIO_EXTI_Callback+0x74>)
 8002b5e:	6013      	str	r3, [r2, #0]
}
 8002b60:	e004      	b.n	8002b6c <HAL_GPIO_EXTI_Callback+0x68>
      encoderCount++;
 8002b62:	4b05      	ldr	r3, [pc, #20]	; (8002b78 <HAL_GPIO_EXTI_Callback+0x74>)
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	3301      	adds	r3, #1
 8002b68:	4a03      	ldr	r2, [pc, #12]	; (8002b78 <HAL_GPIO_EXTI_Callback+0x74>)
 8002b6a:	6013      	str	r3, [r2, #0]
}
 8002b6c:	bf00      	nop
 8002b6e:	3708      	adds	r7, #8
 8002b70:	46bd      	mov	sp, r7
 8002b72:	bd80      	pop	{r7, pc}
 8002b74:	40020400 	.word	0x40020400
 8002b78:	200005fc 	.word	0x200005fc
 8002b7c:	40020000 	.word	0x40020000

08002b80 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002b80:	b480      	push	{r7}
 8002b82:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002b84:	b672      	cpsid	i
}
 8002b86:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002b88:	e7fe      	b.n	8002b88 <Error_Handler+0x8>

08002b8a <assert_failed>:
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
 8002b8a:	b480      	push	{r7}
 8002b8c:	b083      	sub	sp, #12
 8002b8e:	af00      	add	r7, sp, #0
 8002b90:	6078      	str	r0, [r7, #4]
 8002b92:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
 8002b94:	bf00      	nop
 8002b96:	370c      	adds	r7, #12
 8002b98:	46bd      	mov	sp, r7
 8002b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b9e:	4770      	bx	lr

08002ba0 <stepRev>:
#include "tim.h"

#define PULSE 200
#define GEAR 139

void stepRev(int ANG) {
 8002ba0:	b580      	push	{r7, lr}
 8002ba2:	b086      	sub	sp, #24
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	6078      	str	r0, [r7, #4]
	// ENA D2 PG7 GPIOG GPIO_PIN_6
	// CLK D3 PB4 GPIOB GPIO_PIN_4
	// DIR D4 PG7 GPIOG GPIO_PIN_7


  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_6, GPIO_PIN_RESET);  // ENA
 8002ba8:	2200      	movs	r2, #0
 8002baa:	2140      	movs	r1, #64	; 0x40
 8002bac:	482e      	ldr	r0, [pc, #184]	; (8002c68 <stepRev+0xc8>)
 8002bae:	f001 fa85 	bl	80040bc <HAL_GPIO_WritePin>

  if (ANG != 0) {
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d04e      	beq.n	8002c56 <stepRev+0xb6>
    int direction = (ANG > 0) ? 1 : -1;
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	dd01      	ble.n	8002bc2 <stepRev+0x22>
 8002bbe:	2301      	movs	r3, #1
 8002bc0:	e001      	b.n	8002bc6 <stepRev+0x26>
 8002bc2:	f04f 33ff 	mov.w	r3, #4294967295
 8002bc6:	613b      	str	r3, [r7, #16]
    ANG *= direction;
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	693a      	ldr	r2, [r7, #16]
 8002bcc:	fb02 f303 	mul.w	r3, r2, r3
 8002bd0:	607b      	str	r3, [r7, #4]
    HAL_GPIO_WritePin(GPIOG, GPIO_PIN_7, direction == 1 ? GPIO_PIN_SET : GPIO_PIN_RESET); // DIR
 8002bd2:	693b      	ldr	r3, [r7, #16]
 8002bd4:	2b01      	cmp	r3, #1
 8002bd6:	bf0c      	ite	eq
 8002bd8:	2301      	moveq	r3, #1
 8002bda:	2300      	movne	r3, #0
 8002bdc:	b2db      	uxtb	r3, r3
 8002bde:	461a      	mov	r2, r3
 8002be0:	2180      	movs	r1, #128	; 0x80
 8002be2:	4821      	ldr	r0, [pc, #132]	; (8002c68 <stepRev+0xc8>)
 8002be4:	f001 fa6a 	bl	80040bc <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOG, GPIO_PIN_6, GPIO_PIN_RESET); // ENA
 8002be8:	2200      	movs	r2, #0
 8002bea:	2140      	movs	r1, #64	; 0x40
 8002bec:	481e      	ldr	r0, [pc, #120]	; (8002c68 <stepRev+0xc8>)
 8002bee:	f001 fa65 	bl	80040bc <HAL_GPIO_WritePin>
    uint32_t steps = PULSE * GEAR * ANG / 360.0;
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	f646 4298 	movw	r2, #27800	; 0x6c98
 8002bf8:	fb02 f303 	mul.w	r3, r2, r3
 8002bfc:	4618      	mov	r0, r3
 8002bfe:	f7fd fcb1 	bl	8000564 <__aeabi_i2d>
 8002c02:	f04f 0200 	mov.w	r2, #0
 8002c06:	4b19      	ldr	r3, [pc, #100]	; (8002c6c <stepRev+0xcc>)
 8002c08:	f7fd fe40 	bl	800088c <__aeabi_ddiv>
 8002c0c:	4602      	mov	r2, r0
 8002c0e:	460b      	mov	r3, r1
 8002c10:	4610      	mov	r0, r2
 8002c12:	4619      	mov	r1, r3
 8002c14:	f7fd ffe8 	bl	8000be8 <__aeabi_d2uiz>
 8002c18:	4603      	mov	r3, r0
 8002c1a:	60fb      	str	r3, [r7, #12]
    uint32_t pulse_delay_ms_ = 1; // 6rpm
 8002c1c:	2301      	movs	r3, #1
 8002c1e:	60bb      	str	r3, [r7, #8]

    for (int i = 0; i < steps; i++) {
 8002c20:	2300      	movs	r3, #0
 8002c22:	617b      	str	r3, [r7, #20]
 8002c24:	e012      	b.n	8002c4c <stepRev+0xac>
      HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET); //CLK
 8002c26:	2201      	movs	r2, #1
 8002c28:	2110      	movs	r1, #16
 8002c2a:	4811      	ldr	r0, [pc, #68]	; (8002c70 <stepRev+0xd0>)
 8002c2c:	f001 fa46 	bl	80040bc <HAL_GPIO_WritePin>
      HAL_Delay(pulse_delay_ms_);
 8002c30:	68b8      	ldr	r0, [r7, #8]
 8002c32:	f000 fcaf 	bl	8003594 <HAL_Delay>
      HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET); //CLK
 8002c36:	2200      	movs	r2, #0
 8002c38:	2110      	movs	r1, #16
 8002c3a:	480d      	ldr	r0, [pc, #52]	; (8002c70 <stepRev+0xd0>)
 8002c3c:	f001 fa3e 	bl	80040bc <HAL_GPIO_WritePin>
      HAL_Delay(pulse_delay_ms_);
 8002c40:	68b8      	ldr	r0, [r7, #8]
 8002c42:	f000 fca7 	bl	8003594 <HAL_Delay>
    for (int i = 0; i < steps; i++) {
 8002c46:	697b      	ldr	r3, [r7, #20]
 8002c48:	3301      	adds	r3, #1
 8002c4a:	617b      	str	r3, [r7, #20]
 8002c4c:	697b      	ldr	r3, [r7, #20]
 8002c4e:	68fa      	ldr	r2, [r7, #12]
 8002c50:	429a      	cmp	r2, r3
 8002c52:	d8e8      	bhi.n	8002c26 <stepRev+0x86>
  }
  else {
    HAL_GPIO_WritePin(GPIOG, GPIO_PIN_6, GPIO_PIN_RESET); // ENA
  }

}
 8002c54:	e004      	b.n	8002c60 <stepRev+0xc0>
    HAL_GPIO_WritePin(GPIOG, GPIO_PIN_6, GPIO_PIN_RESET); // ENA
 8002c56:	2200      	movs	r2, #0
 8002c58:	2140      	movs	r1, #64	; 0x40
 8002c5a:	4803      	ldr	r0, [pc, #12]	; (8002c68 <stepRev+0xc8>)
 8002c5c:	f001 fa2e 	bl	80040bc <HAL_GPIO_WritePin>
}
 8002c60:	bf00      	nop
 8002c62:	3718      	adds	r7, #24
 8002c64:	46bd      	mov	sp, r7
 8002c66:	bd80      	pop	{r7, pc}
 8002c68:	40021800 	.word	0x40021800
 8002c6c:	40768000 	.word	0x40768000
 8002c70:	40020400 	.word	0x40020400

08002c74 <stepLin>:

void stepLin(int DIST) {
 8002c74:	b580      	push	{r7, lr}
 8002c76:	b088      	sub	sp, #32
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	6078      	str	r0, [r7, #4]

	// ENA D5 PI0 GPIOI GPIO_PIN_0
	// CLK D8 PI2 GPIOI GPIO_PIN_2
	// DIR D7 PI3 GPIOI GPIO_PIN_3

	float ANG = DIST * 360.0 / 8; // 1 rev -> 8 mm
 8002c7c:	6878      	ldr	r0, [r7, #4]
 8002c7e:	f7fd fc71 	bl	8000564 <__aeabi_i2d>
 8002c82:	f04f 0200 	mov.w	r2, #0
 8002c86:	4b44      	ldr	r3, [pc, #272]	; (8002d98 <stepLin+0x124>)
 8002c88:	f7fd fcd6 	bl	8000638 <__aeabi_dmul>
 8002c8c:	4602      	mov	r2, r0
 8002c8e:	460b      	mov	r3, r1
 8002c90:	4610      	mov	r0, r2
 8002c92:	4619      	mov	r1, r3
 8002c94:	f04f 0200 	mov.w	r2, #0
 8002c98:	4b40      	ldr	r3, [pc, #256]	; (8002d9c <stepLin+0x128>)
 8002c9a:	f7fd fdf7 	bl	800088c <__aeabi_ddiv>
 8002c9e:	4602      	mov	r2, r0
 8002ca0:	460b      	mov	r3, r1
 8002ca2:	4610      	mov	r0, r2
 8002ca4:	4619      	mov	r1, r3
 8002ca6:	f7fd ffbf 	bl	8000c28 <__aeabi_d2f>
 8002caa:	4603      	mov	r3, r0
 8002cac:	61bb      	str	r3, [r7, #24]


  HAL_GPIO_WritePin(GPIOI, GPIO_PIN_0, GPIO_PIN_SET);  // ENA
 8002cae:	2201      	movs	r2, #1
 8002cb0:	2101      	movs	r1, #1
 8002cb2:	483b      	ldr	r0, [pc, #236]	; (8002da0 <stepLin+0x12c>)
 8002cb4:	f001 fa02 	bl	80040bc <HAL_GPIO_WritePin>

  if (ANG != 0) {
 8002cb8:	edd7 7a06 	vldr	s15, [r7, #24]
 8002cbc:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002cc0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002cc4:	d05a      	beq.n	8002d7c <stepLin+0x108>
    int direction = (ANG > 0) ? 1 : -1;
 8002cc6:	edd7 7a06 	vldr	s15, [r7, #24]
 8002cca:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002cce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002cd2:	dd01      	ble.n	8002cd8 <stepLin+0x64>
 8002cd4:	2301      	movs	r3, #1
 8002cd6:	e001      	b.n	8002cdc <stepLin+0x68>
 8002cd8:	f04f 33ff 	mov.w	r3, #4294967295
 8002cdc:	617b      	str	r3, [r7, #20]
    ANG *= direction;
 8002cde:	697b      	ldr	r3, [r7, #20]
 8002ce0:	ee07 3a90 	vmov	s15, r3
 8002ce4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002ce8:	ed97 7a06 	vldr	s14, [r7, #24]
 8002cec:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002cf0:	edc7 7a06 	vstr	s15, [r7, #24]
    HAL_GPIO_WritePin(GPIOI, GPIO_PIN_3, direction == 1 ? GPIO_PIN_SET : GPIO_PIN_RESET); // DIR
 8002cf4:	697b      	ldr	r3, [r7, #20]
 8002cf6:	2b01      	cmp	r3, #1
 8002cf8:	bf0c      	ite	eq
 8002cfa:	2301      	moveq	r3, #1
 8002cfc:	2300      	movne	r3, #0
 8002cfe:	b2db      	uxtb	r3, r3
 8002d00:	461a      	mov	r2, r3
 8002d02:	2108      	movs	r1, #8
 8002d04:	4826      	ldr	r0, [pc, #152]	; (8002da0 <stepLin+0x12c>)
 8002d06:	f001 f9d9 	bl	80040bc <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOI, GPIO_PIN_0, GPIO_PIN_RESET);  // ENA
 8002d0a:	2200      	movs	r2, #0
 8002d0c:	2101      	movs	r1, #1
 8002d0e:	4824      	ldr	r0, [pc, #144]	; (8002da0 <stepLin+0x12c>)
 8002d10:	f001 f9d4 	bl	80040bc <HAL_GPIO_WritePin>
    uint32_t steps = PULSE * ANG / 360.0;
 8002d14:	edd7 7a06 	vldr	s15, [r7, #24]
 8002d18:	ed9f 7a22 	vldr	s14, [pc, #136]	; 8002da4 <stepLin+0x130>
 8002d1c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002d20:	ee17 0a90 	vmov	r0, s15
 8002d24:	f7fd fc30 	bl	8000588 <__aeabi_f2d>
 8002d28:	f04f 0200 	mov.w	r2, #0
 8002d2c:	4b1a      	ldr	r3, [pc, #104]	; (8002d98 <stepLin+0x124>)
 8002d2e:	f7fd fdad 	bl	800088c <__aeabi_ddiv>
 8002d32:	4602      	mov	r2, r0
 8002d34:	460b      	mov	r3, r1
 8002d36:	4610      	mov	r0, r2
 8002d38:	4619      	mov	r1, r3
 8002d3a:	f7fd ff55 	bl	8000be8 <__aeabi_d2uiz>
 8002d3e:	4603      	mov	r3, r0
 8002d40:	613b      	str	r3, [r7, #16]
    uint32_t pulse_delay_ms_ = 1; // 6rpm
 8002d42:	2301      	movs	r3, #1
 8002d44:	60fb      	str	r3, [r7, #12]

    for (int i = 0; i < steps; i++) {
 8002d46:	2300      	movs	r3, #0
 8002d48:	61fb      	str	r3, [r7, #28]
 8002d4a:	e012      	b.n	8002d72 <stepLin+0xfe>
      HAL_GPIO_WritePin(GPIOI, GPIO_PIN_2, GPIO_PIN_SET); // CLK
 8002d4c:	2201      	movs	r2, #1
 8002d4e:	2104      	movs	r1, #4
 8002d50:	4813      	ldr	r0, [pc, #76]	; (8002da0 <stepLin+0x12c>)
 8002d52:	f001 f9b3 	bl	80040bc <HAL_GPIO_WritePin>
      HAL_Delay(pulse_delay_ms_);
 8002d56:	68f8      	ldr	r0, [r7, #12]
 8002d58:	f000 fc1c 	bl	8003594 <HAL_Delay>
      HAL_GPIO_WritePin(GPIOI, GPIO_PIN_2, GPIO_PIN_RESET); // CLK
 8002d5c:	2200      	movs	r2, #0
 8002d5e:	2104      	movs	r1, #4
 8002d60:	480f      	ldr	r0, [pc, #60]	; (8002da0 <stepLin+0x12c>)
 8002d62:	f001 f9ab 	bl	80040bc <HAL_GPIO_WritePin>
      HAL_Delay(pulse_delay_ms_);
 8002d66:	68f8      	ldr	r0, [r7, #12]
 8002d68:	f000 fc14 	bl	8003594 <HAL_Delay>
    for (int i = 0; i < steps; i++) {
 8002d6c:	69fb      	ldr	r3, [r7, #28]
 8002d6e:	3301      	adds	r3, #1
 8002d70:	61fb      	str	r3, [r7, #28]
 8002d72:	69fb      	ldr	r3, [r7, #28]
 8002d74:	693a      	ldr	r2, [r7, #16]
 8002d76:	429a      	cmp	r2, r3
 8002d78:	d8e8      	bhi.n	8002d4c <stepLin+0xd8>
 8002d7a:	e004      	b.n	8002d86 <stepLin+0x112>
    }
  }
  else {
    HAL_GPIO_WritePin(GPIOI, GPIO_PIN_0, GPIO_PIN_RESET);  // ENA
 8002d7c:	2200      	movs	r2, #0
 8002d7e:	2101      	movs	r1, #1
 8002d80:	4807      	ldr	r0, [pc, #28]	; (8002da0 <stepLin+0x12c>)
 8002d82:	f001 f99b 	bl	80040bc <HAL_GPIO_WritePin>
  }

  HAL_GPIO_WritePin(GPIOI, GPIO_PIN_0, GPIO_PIN_SET);  // ENA
 8002d86:	2201      	movs	r2, #1
 8002d88:	2101      	movs	r1, #1
 8002d8a:	4805      	ldr	r0, [pc, #20]	; (8002da0 <stepLin+0x12c>)
 8002d8c:	f001 f996 	bl	80040bc <HAL_GPIO_WritePin>

}
 8002d90:	bf00      	nop
 8002d92:	3720      	adds	r7, #32
 8002d94:	46bd      	mov	sp, r7
 8002d96:	bd80      	pop	{r7, pc}
 8002d98:	40768000 	.word	0x40768000
 8002d9c:	40200000 	.word	0x40200000
 8002da0:	40022000 	.word	0x40022000
 8002da4:	43480000 	.word	0x43480000

08002da8 <servo_angle>:

void servo_angle(TIM_HandleTypeDef *htim, uint32_t channel, int step) {
 8002da8:	b480      	push	{r7}
 8002daa:	b087      	sub	sp, #28
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	60f8      	str	r0, [r7, #12]
 8002db0:	60b9      	str	r1, [r7, #8]
 8002db2:	607a      	str	r2, [r7, #4]

	// 1 step is 0.8 mm
    if (step > 17)
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	2b11      	cmp	r3, #17
 8002db8:	dd01      	ble.n	8002dbe <servo_angle+0x16>
    	step = 17; // 최대 각도 제한
 8002dba:	2311      	movs	r3, #17
 8002dbc:	607b      	str	r3, [r7, #4]

    int pulse_width = 21-step; // 듀티 사이클 계산 (0도에서 180도까지)
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	f1c3 0315 	rsb	r3, r3, #21
 8002dc4:	617b      	str	r3, [r7, #20]
    __HAL_TIM_SET_COMPARE(htim, channel, pulse_width); // 듀티 사이클 변경
 8002dc6:	68bb      	ldr	r3, [r7, #8]
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d104      	bne.n	8002dd6 <servo_angle+0x2e>
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	697a      	ldr	r2, [r7, #20]
 8002dd2:	635a      	str	r2, [r3, #52]	; 0x34
}
 8002dd4:	e023      	b.n	8002e1e <servo_angle+0x76>
    __HAL_TIM_SET_COMPARE(htim, channel, pulse_width); // 듀티 사이클 변경
 8002dd6:	68bb      	ldr	r3, [r7, #8]
 8002dd8:	2b04      	cmp	r3, #4
 8002dda:	d104      	bne.n	8002de6 <servo_angle+0x3e>
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	681a      	ldr	r2, [r3, #0]
 8002de0:	697b      	ldr	r3, [r7, #20]
 8002de2:	6393      	str	r3, [r2, #56]	; 0x38
}
 8002de4:	e01b      	b.n	8002e1e <servo_angle+0x76>
    __HAL_TIM_SET_COMPARE(htim, channel, pulse_width); // 듀티 사이클 변경
 8002de6:	68bb      	ldr	r3, [r7, #8]
 8002de8:	2b08      	cmp	r3, #8
 8002dea:	d104      	bne.n	8002df6 <servo_angle+0x4e>
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	681a      	ldr	r2, [r3, #0]
 8002df0:	697b      	ldr	r3, [r7, #20]
 8002df2:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 8002df4:	e013      	b.n	8002e1e <servo_angle+0x76>
    __HAL_TIM_SET_COMPARE(htim, channel, pulse_width); // 듀티 사이클 변경
 8002df6:	68bb      	ldr	r3, [r7, #8]
 8002df8:	2b0c      	cmp	r3, #12
 8002dfa:	d104      	bne.n	8002e06 <servo_angle+0x5e>
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	681a      	ldr	r2, [r3, #0]
 8002e00:	697b      	ldr	r3, [r7, #20]
 8002e02:	6413      	str	r3, [r2, #64]	; 0x40
}
 8002e04:	e00b      	b.n	8002e1e <servo_angle+0x76>
    __HAL_TIM_SET_COMPARE(htim, channel, pulse_width); // 듀티 사이클 변경
 8002e06:	68bb      	ldr	r3, [r7, #8]
 8002e08:	2b10      	cmp	r3, #16
 8002e0a:	d104      	bne.n	8002e16 <servo_angle+0x6e>
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	681a      	ldr	r2, [r3, #0]
 8002e10:	697b      	ldr	r3, [r7, #20]
 8002e12:	6593      	str	r3, [r2, #88]	; 0x58
}
 8002e14:	e003      	b.n	8002e1e <servo_angle+0x76>
    __HAL_TIM_SET_COMPARE(htim, channel, pulse_width); // 듀티 사이클 변경
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	681a      	ldr	r2, [r3, #0]
 8002e1a:	697b      	ldr	r3, [r7, #20]
 8002e1c:	65d3      	str	r3, [r2, #92]	; 0x5c
}
 8002e1e:	bf00      	nop
 8002e20:	371c      	adds	r7, #28
 8002e22:	46bd      	mov	sp, r7
 8002e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e28:	4770      	bx	lr
	...

08002e2c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002e2c:	b480      	push	{r7}
 8002e2e:	b083      	sub	sp, #12
 8002e30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8002e32:	4b0f      	ldr	r3, [pc, #60]	; (8002e70 <HAL_MspInit+0x44>)
 8002e34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e36:	4a0e      	ldr	r2, [pc, #56]	; (8002e70 <HAL_MspInit+0x44>)
 8002e38:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e3c:	6413      	str	r3, [r2, #64]	; 0x40
 8002e3e:	4b0c      	ldr	r3, [pc, #48]	; (8002e70 <HAL_MspInit+0x44>)
 8002e40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e46:	607b      	str	r3, [r7, #4]
 8002e48:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002e4a:	4b09      	ldr	r3, [pc, #36]	; (8002e70 <HAL_MspInit+0x44>)
 8002e4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e4e:	4a08      	ldr	r2, [pc, #32]	; (8002e70 <HAL_MspInit+0x44>)
 8002e50:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002e54:	6453      	str	r3, [r2, #68]	; 0x44
 8002e56:	4b06      	ldr	r3, [pc, #24]	; (8002e70 <HAL_MspInit+0x44>)
 8002e58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e5a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002e5e:	603b      	str	r3, [r7, #0]
 8002e60:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002e62:	bf00      	nop
 8002e64:	370c      	adds	r7, #12
 8002e66:	46bd      	mov	sp, r7
 8002e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e6c:	4770      	bx	lr
 8002e6e:	bf00      	nop
 8002e70:	40023800 	.word	0x40023800

08002e74 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002e74:	b480      	push	{r7}
 8002e76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002e78:	e7fe      	b.n	8002e78 <NMI_Handler+0x4>

08002e7a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002e7a:	b480      	push	{r7}
 8002e7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002e7e:	e7fe      	b.n	8002e7e <HardFault_Handler+0x4>

08002e80 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002e80:	b480      	push	{r7}
 8002e82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002e84:	e7fe      	b.n	8002e84 <MemManage_Handler+0x4>

08002e86 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002e86:	b480      	push	{r7}
 8002e88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002e8a:	e7fe      	b.n	8002e8a <BusFault_Handler+0x4>

08002e8c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002e8c:	b480      	push	{r7}
 8002e8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002e90:	e7fe      	b.n	8002e90 <UsageFault_Handler+0x4>

08002e92 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002e92:	b480      	push	{r7}
 8002e94:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002e96:	bf00      	nop
 8002e98:	46bd      	mov	sp, r7
 8002e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e9e:	4770      	bx	lr

08002ea0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002ea0:	b480      	push	{r7}
 8002ea2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002ea4:	bf00      	nop
 8002ea6:	46bd      	mov	sp, r7
 8002ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eac:	4770      	bx	lr

08002eae <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002eae:	b480      	push	{r7}
 8002eb0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002eb2:	bf00      	nop
 8002eb4:	46bd      	mov	sp, r7
 8002eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eba:	4770      	bx	lr

08002ebc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002ebc:	b580      	push	{r7, lr}
 8002ebe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002ec0:	f000 fb48 	bl	8003554 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002ec4:	bf00      	nop
 8002ec6:	bd80      	pop	{r7, pc}

08002ec8 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8002ec8:	b580      	push	{r7, lr}
 8002eca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8002ecc:	f44f 7080 	mov.w	r0, #256	; 0x100
 8002ed0:	f001 f920 	bl	8004114 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8002ed4:	bf00      	nop
 8002ed6:	bd80      	pop	{r7, pc}

08002ed8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002ed8:	b580      	push	{r7, lr}
 8002eda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002edc:	4802      	ldr	r0, [pc, #8]	; (8002ee8 <TIM2_IRQHandler+0x10>)
 8002ede:	f004 ff95 	bl	8007e0c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002ee2:	bf00      	nop
 8002ee4:	bd80      	pop	{r7, pc}
 8002ee6:	bf00      	nop
 8002ee8:	20000604 	.word	0x20000604

08002eec <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8002eec:	b580      	push	{r7, lr}
 8002eee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8002ef0:	4802      	ldr	r0, [pc, #8]	; (8002efc <I2C1_EV_IRQHandler+0x10>)
 8002ef2:	f001 fc33 	bl	800475c <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8002ef6:	bf00      	nop
 8002ef8:	bd80      	pop	{r7, pc}
 8002efa:	bf00      	nop
 8002efc:	200004b8 	.word	0x200004b8

08002f00 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8002f00:	b580      	push	{r7, lr}
 8002f02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8002f04:	4802      	ldr	r0, [pc, #8]	; (8002f10 <I2C1_ER_IRQHandler+0x10>)
 8002f06:	f001 fc43 	bl	8004790 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8002f0a:	bf00      	nop
 8002f0c:	bd80      	pop	{r7, pc}
 8002f0e:	bf00      	nop
 8002f10:	200004b8 	.word	0x200004b8

08002f14 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002f14:	b580      	push	{r7, lr}
 8002f16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002f18:	4802      	ldr	r0, [pc, #8]	; (8002f24 <USART1_IRQHandler+0x10>)
 8002f1a:	f006 fe2d 	bl	8009b78 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002f1e:	bf00      	nop
 8002f20:	bd80      	pop	{r7, pc}
 8002f22:	bf00      	nop
 8002f24:	2000069c 	.word	0x2000069c

08002f28 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002f28:	b580      	push	{r7, lr}
 8002f2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 8002f2c:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8002f30:	f001 f8f0 	bl	8004114 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002f34:	bf00      	nop
 8002f36:	bd80      	pop	{r7, pc}

08002f38 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8002f38:	b580      	push	{r7, lr}
 8002f3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8002f3c:	4802      	ldr	r0, [pc, #8]	; (8002f48 <TIM7_IRQHandler+0x10>)
 8002f3e:	f004 ff65 	bl	8007e0c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8002f42:	bf00      	nop
 8002f44:	bd80      	pop	{r7, pc}
 8002f46:	bf00      	nop
 8002f48:	20000650 	.word	0x20000650

08002f4c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002f4c:	b480      	push	{r7}
 8002f4e:	af00      	add	r7, sp, #0
  return 1;
 8002f50:	2301      	movs	r3, #1
}
 8002f52:	4618      	mov	r0, r3
 8002f54:	46bd      	mov	sp, r7
 8002f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f5a:	4770      	bx	lr

08002f5c <_kill>:

int _kill(int pid, int sig)
{
 8002f5c:	b580      	push	{r7, lr}
 8002f5e:	b082      	sub	sp, #8
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	6078      	str	r0, [r7, #4]
 8002f64:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002f66:	f00d f943 	bl	80101f0 <__errno>
 8002f6a:	4603      	mov	r3, r0
 8002f6c:	2216      	movs	r2, #22
 8002f6e:	601a      	str	r2, [r3, #0]
  return -1;
 8002f70:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002f74:	4618      	mov	r0, r3
 8002f76:	3708      	adds	r7, #8
 8002f78:	46bd      	mov	sp, r7
 8002f7a:	bd80      	pop	{r7, pc}

08002f7c <_exit>:

void _exit (int status)
{
 8002f7c:	b580      	push	{r7, lr}
 8002f7e:	b082      	sub	sp, #8
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002f84:	f04f 31ff 	mov.w	r1, #4294967295
 8002f88:	6878      	ldr	r0, [r7, #4]
 8002f8a:	f7ff ffe7 	bl	8002f5c <_kill>
  while (1) {}    /* Make sure we hang here */
 8002f8e:	e7fe      	b.n	8002f8e <_exit+0x12>

08002f90 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002f90:	b580      	push	{r7, lr}
 8002f92:	b086      	sub	sp, #24
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	60f8      	str	r0, [r7, #12]
 8002f98:	60b9      	str	r1, [r7, #8]
 8002f9a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002f9c:	2300      	movs	r3, #0
 8002f9e:	617b      	str	r3, [r7, #20]
 8002fa0:	e00a      	b.n	8002fb8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002fa2:	f3af 8000 	nop.w
 8002fa6:	4601      	mov	r1, r0
 8002fa8:	68bb      	ldr	r3, [r7, #8]
 8002faa:	1c5a      	adds	r2, r3, #1
 8002fac:	60ba      	str	r2, [r7, #8]
 8002fae:	b2ca      	uxtb	r2, r1
 8002fb0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002fb2:	697b      	ldr	r3, [r7, #20]
 8002fb4:	3301      	adds	r3, #1
 8002fb6:	617b      	str	r3, [r7, #20]
 8002fb8:	697a      	ldr	r2, [r7, #20]
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	429a      	cmp	r2, r3
 8002fbe:	dbf0      	blt.n	8002fa2 <_read+0x12>
  }

  return len;
 8002fc0:	687b      	ldr	r3, [r7, #4]
}
 8002fc2:	4618      	mov	r0, r3
 8002fc4:	3718      	adds	r7, #24
 8002fc6:	46bd      	mov	sp, r7
 8002fc8:	bd80      	pop	{r7, pc}

08002fca <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002fca:	b580      	push	{r7, lr}
 8002fcc:	b086      	sub	sp, #24
 8002fce:	af00      	add	r7, sp, #0
 8002fd0:	60f8      	str	r0, [r7, #12]
 8002fd2:	60b9      	str	r1, [r7, #8]
 8002fd4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002fd6:	2300      	movs	r3, #0
 8002fd8:	617b      	str	r3, [r7, #20]
 8002fda:	e009      	b.n	8002ff0 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002fdc:	68bb      	ldr	r3, [r7, #8]
 8002fde:	1c5a      	adds	r2, r3, #1
 8002fe0:	60ba      	str	r2, [r7, #8]
 8002fe2:	781b      	ldrb	r3, [r3, #0]
 8002fe4:	4618      	mov	r0, r3
 8002fe6:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002fea:	697b      	ldr	r3, [r7, #20]
 8002fec:	3301      	adds	r3, #1
 8002fee:	617b      	str	r3, [r7, #20]
 8002ff0:	697a      	ldr	r2, [r7, #20]
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	429a      	cmp	r2, r3
 8002ff6:	dbf1      	blt.n	8002fdc <_write+0x12>
  }
  return len;
 8002ff8:	687b      	ldr	r3, [r7, #4]
}
 8002ffa:	4618      	mov	r0, r3
 8002ffc:	3718      	adds	r7, #24
 8002ffe:	46bd      	mov	sp, r7
 8003000:	bd80      	pop	{r7, pc}

08003002 <_close>:

int _close(int file)
{
 8003002:	b480      	push	{r7}
 8003004:	b083      	sub	sp, #12
 8003006:	af00      	add	r7, sp, #0
 8003008:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800300a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800300e:	4618      	mov	r0, r3
 8003010:	370c      	adds	r7, #12
 8003012:	46bd      	mov	sp, r7
 8003014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003018:	4770      	bx	lr

0800301a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800301a:	b480      	push	{r7}
 800301c:	b083      	sub	sp, #12
 800301e:	af00      	add	r7, sp, #0
 8003020:	6078      	str	r0, [r7, #4]
 8003022:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003024:	683b      	ldr	r3, [r7, #0]
 8003026:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800302a:	605a      	str	r2, [r3, #4]
  return 0;
 800302c:	2300      	movs	r3, #0
}
 800302e:	4618      	mov	r0, r3
 8003030:	370c      	adds	r7, #12
 8003032:	46bd      	mov	sp, r7
 8003034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003038:	4770      	bx	lr

0800303a <_isatty>:

int _isatty(int file)
{
 800303a:	b480      	push	{r7}
 800303c:	b083      	sub	sp, #12
 800303e:	af00      	add	r7, sp, #0
 8003040:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003042:	2301      	movs	r3, #1
}
 8003044:	4618      	mov	r0, r3
 8003046:	370c      	adds	r7, #12
 8003048:	46bd      	mov	sp, r7
 800304a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800304e:	4770      	bx	lr

08003050 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003050:	b480      	push	{r7}
 8003052:	b085      	sub	sp, #20
 8003054:	af00      	add	r7, sp, #0
 8003056:	60f8      	str	r0, [r7, #12]
 8003058:	60b9      	str	r1, [r7, #8]
 800305a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800305c:	2300      	movs	r3, #0
}
 800305e:	4618      	mov	r0, r3
 8003060:	3714      	adds	r7, #20
 8003062:	46bd      	mov	sp, r7
 8003064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003068:	4770      	bx	lr
	...

0800306c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800306c:	b580      	push	{r7, lr}
 800306e:	b086      	sub	sp, #24
 8003070:	af00      	add	r7, sp, #0
 8003072:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003074:	4a14      	ldr	r2, [pc, #80]	; (80030c8 <_sbrk+0x5c>)
 8003076:	4b15      	ldr	r3, [pc, #84]	; (80030cc <_sbrk+0x60>)
 8003078:	1ad3      	subs	r3, r2, r3
 800307a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800307c:	697b      	ldr	r3, [r7, #20]
 800307e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003080:	4b13      	ldr	r3, [pc, #76]	; (80030d0 <_sbrk+0x64>)
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	2b00      	cmp	r3, #0
 8003086:	d102      	bne.n	800308e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003088:	4b11      	ldr	r3, [pc, #68]	; (80030d0 <_sbrk+0x64>)
 800308a:	4a12      	ldr	r2, [pc, #72]	; (80030d4 <_sbrk+0x68>)
 800308c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800308e:	4b10      	ldr	r3, [pc, #64]	; (80030d0 <_sbrk+0x64>)
 8003090:	681a      	ldr	r2, [r3, #0]
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	4413      	add	r3, r2
 8003096:	693a      	ldr	r2, [r7, #16]
 8003098:	429a      	cmp	r2, r3
 800309a:	d207      	bcs.n	80030ac <_sbrk+0x40>
  {
    errno = ENOMEM;
 800309c:	f00d f8a8 	bl	80101f0 <__errno>
 80030a0:	4603      	mov	r3, r0
 80030a2:	220c      	movs	r2, #12
 80030a4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80030a6:	f04f 33ff 	mov.w	r3, #4294967295
 80030aa:	e009      	b.n	80030c0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80030ac:	4b08      	ldr	r3, [pc, #32]	; (80030d0 <_sbrk+0x64>)
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80030b2:	4b07      	ldr	r3, [pc, #28]	; (80030d0 <_sbrk+0x64>)
 80030b4:	681a      	ldr	r2, [r3, #0]
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	4413      	add	r3, r2
 80030ba:	4a05      	ldr	r2, [pc, #20]	; (80030d0 <_sbrk+0x64>)
 80030bc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80030be:	68fb      	ldr	r3, [r7, #12]
}
 80030c0:	4618      	mov	r0, r3
 80030c2:	3718      	adds	r7, #24
 80030c4:	46bd      	mov	sp, r7
 80030c6:	bd80      	pop	{r7, pc}
 80030c8:	20050000 	.word	0x20050000
 80030cc:	00000400 	.word	0x00000400
 80030d0:	20000600 	.word	0x20000600
 80030d4:	20000778 	.word	0x20000778

080030d8 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80030d8:	b480      	push	{r7}
 80030da:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80030dc:	4b06      	ldr	r3, [pc, #24]	; (80030f8 <SystemInit+0x20>)
 80030de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030e2:	4a05      	ldr	r2, [pc, #20]	; (80030f8 <SystemInit+0x20>)
 80030e4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80030e8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80030ec:	bf00      	nop
 80030ee:	46bd      	mov	sp, r7
 80030f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f4:	4770      	bx	lr
 80030f6:	bf00      	nop
 80030f8:	e000ed00 	.word	0xe000ed00

080030fc <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim7;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80030fc:	b580      	push	{r7, lr}
 80030fe:	b08e      	sub	sp, #56	; 0x38
 8003100:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003102:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003106:	2200      	movs	r2, #0
 8003108:	601a      	str	r2, [r3, #0]
 800310a:	605a      	str	r2, [r3, #4]
 800310c:	609a      	str	r2, [r3, #8]
 800310e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003110:	f107 031c 	add.w	r3, r7, #28
 8003114:	2200      	movs	r2, #0
 8003116:	601a      	str	r2, [r3, #0]
 8003118:	605a      	str	r2, [r3, #4]
 800311a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800311c:	463b      	mov	r3, r7
 800311e:	2200      	movs	r2, #0
 8003120:	601a      	str	r2, [r3, #0]
 8003122:	605a      	str	r2, [r3, #4]
 8003124:	609a      	str	r2, [r3, #8]
 8003126:	60da      	str	r2, [r3, #12]
 8003128:	611a      	str	r2, [r3, #16]
 800312a:	615a      	str	r2, [r3, #20]
 800312c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800312e:	4b2d      	ldr	r3, [pc, #180]	; (80031e4 <MX_TIM2_Init+0xe8>)
 8003130:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003134:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 10800-1;
 8003136:	4b2b      	ldr	r3, [pc, #172]	; (80031e4 <MX_TIM2_Init+0xe8>)
 8003138:	f642 222f 	movw	r2, #10799	; 0x2a2f
 800313c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800313e:	4b29      	ldr	r3, [pc, #164]	; (80031e4 <MX_TIM2_Init+0xe8>)
 8003140:	2200      	movs	r2, #0
 8003142:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 50-1;
 8003144:	4b27      	ldr	r3, [pc, #156]	; (80031e4 <MX_TIM2_Init+0xe8>)
 8003146:	2231      	movs	r2, #49	; 0x31
 8003148:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800314a:	4b26      	ldr	r3, [pc, #152]	; (80031e4 <MX_TIM2_Init+0xe8>)
 800314c:	2200      	movs	r2, #0
 800314e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003150:	4b24      	ldr	r3, [pc, #144]	; (80031e4 <MX_TIM2_Init+0xe8>)
 8003152:	2200      	movs	r2, #0
 8003154:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8003156:	4823      	ldr	r0, [pc, #140]	; (80031e4 <MX_TIM2_Init+0xe8>)
 8003158:	f004 fa44 	bl	80075e4 <HAL_TIM_Base_Init>
 800315c:	4603      	mov	r3, r0
 800315e:	2b00      	cmp	r3, #0
 8003160:	d001      	beq.n	8003166 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8003162:	f7ff fd0d 	bl	8002b80 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003166:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800316a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800316c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003170:	4619      	mov	r1, r3
 8003172:	481c      	ldr	r0, [pc, #112]	; (80031e4 <MX_TIM2_Init+0xe8>)
 8003174:	f005 f9d2 	bl	800851c <HAL_TIM_ConfigClockSource>
 8003178:	4603      	mov	r3, r0
 800317a:	2b00      	cmp	r3, #0
 800317c:	d001      	beq.n	8003182 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 800317e:	f7ff fcff 	bl	8002b80 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8003182:	4818      	ldr	r0, [pc, #96]	; (80031e4 <MX_TIM2_Init+0xe8>)
 8003184:	f004 fb4e 	bl	8007824 <HAL_TIM_PWM_Init>
 8003188:	4603      	mov	r3, r0
 800318a:	2b00      	cmp	r3, #0
 800318c:	d001      	beq.n	8003192 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 800318e:	f7ff fcf7 	bl	8002b80 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003192:	2300      	movs	r3, #0
 8003194:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003196:	2300      	movs	r3, #0
 8003198:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800319a:	f107 031c 	add.w	r3, r7, #28
 800319e:	4619      	mov	r1, r3
 80031a0:	4810      	ldr	r0, [pc, #64]	; (80031e4 <MX_TIM2_Init+0xe8>)
 80031a2:	f006 f9eb 	bl	800957c <HAL_TIMEx_MasterConfigSynchronization>
 80031a6:	4603      	mov	r3, r0
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d001      	beq.n	80031b0 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 80031ac:	f7ff fce8 	bl	8002b80 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80031b0:	2360      	movs	r3, #96	; 0x60
 80031b2:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80031b4:	2300      	movs	r3, #0
 80031b6:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80031b8:	2300      	movs	r3, #0
 80031ba:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80031bc:	2300      	movs	r3, #0
 80031be:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80031c0:	463b      	mov	r3, r7
 80031c2:	2200      	movs	r2, #0
 80031c4:	4619      	mov	r1, r3
 80031c6:	4807      	ldr	r0, [pc, #28]	; (80031e4 <MX_TIM2_Init+0xe8>)
 80031c8:	f004 ff40 	bl	800804c <HAL_TIM_PWM_ConfigChannel>
 80031cc:	4603      	mov	r3, r0
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d001      	beq.n	80031d6 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 80031d2:	f7ff fcd5 	bl	8002b80 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80031d6:	4803      	ldr	r0, [pc, #12]	; (80031e4 <MX_TIM2_Init+0xe8>)
 80031d8:	f000 f86e 	bl	80032b8 <HAL_TIM_MspPostInit>

}
 80031dc:	bf00      	nop
 80031de:	3738      	adds	r7, #56	; 0x38
 80031e0:	46bd      	mov	sp, r7
 80031e2:	bd80      	pop	{r7, pc}
 80031e4:	20000604 	.word	0x20000604

080031e8 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 80031e8:	b580      	push	{r7, lr}
 80031ea:	b084      	sub	sp, #16
 80031ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80031ee:	1d3b      	adds	r3, r7, #4
 80031f0:	2200      	movs	r2, #0
 80031f2:	601a      	str	r2, [r3, #0]
 80031f4:	605a      	str	r2, [r3, #4]
 80031f6:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 80031f8:	4b14      	ldr	r3, [pc, #80]	; (800324c <MX_TIM7_Init+0x64>)
 80031fa:	4a15      	ldr	r2, [pc, #84]	; (8003250 <MX_TIM7_Init+0x68>)
 80031fc:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 10800-1;
 80031fe:	4b13      	ldr	r3, [pc, #76]	; (800324c <MX_TIM7_Init+0x64>)
 8003200:	f642 222f 	movw	r2, #10799	; 0x2a2f
 8003204:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003206:	4b11      	ldr	r3, [pc, #68]	; (800324c <MX_TIM7_Init+0x64>)
 8003208:	2200      	movs	r2, #0
 800320a:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 50-1;
 800320c:	4b0f      	ldr	r3, [pc, #60]	; (800324c <MX_TIM7_Init+0x64>)
 800320e:	2231      	movs	r2, #49	; 0x31
 8003210:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003212:	4b0e      	ldr	r3, [pc, #56]	; (800324c <MX_TIM7_Init+0x64>)
 8003214:	2200      	movs	r2, #0
 8003216:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8003218:	480c      	ldr	r0, [pc, #48]	; (800324c <MX_TIM7_Init+0x64>)
 800321a:	f004 f9e3 	bl	80075e4 <HAL_TIM_Base_Init>
 800321e:	4603      	mov	r3, r0
 8003220:	2b00      	cmp	r3, #0
 8003222:	d001      	beq.n	8003228 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8003224:	f7ff fcac 	bl	8002b80 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003228:	2300      	movs	r3, #0
 800322a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800322c:	2300      	movs	r3, #0
 800322e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8003230:	1d3b      	adds	r3, r7, #4
 8003232:	4619      	mov	r1, r3
 8003234:	4805      	ldr	r0, [pc, #20]	; (800324c <MX_TIM7_Init+0x64>)
 8003236:	f006 f9a1 	bl	800957c <HAL_TIMEx_MasterConfigSynchronization>
 800323a:	4603      	mov	r3, r0
 800323c:	2b00      	cmp	r3, #0
 800323e:	d001      	beq.n	8003244 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 8003240:	f7ff fc9e 	bl	8002b80 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8003244:	bf00      	nop
 8003246:	3710      	adds	r7, #16
 8003248:	46bd      	mov	sp, r7
 800324a:	bd80      	pop	{r7, pc}
 800324c:	20000650 	.word	0x20000650
 8003250:	40001400 	.word	0x40001400

08003254 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8003254:	b480      	push	{r7}
 8003256:	b085      	sub	sp, #20
 8003258:	af00      	add	r7, sp, #0
 800325a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003264:	d10c      	bne.n	8003280 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003266:	4b12      	ldr	r3, [pc, #72]	; (80032b0 <HAL_TIM_Base_MspInit+0x5c>)
 8003268:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800326a:	4a11      	ldr	r2, [pc, #68]	; (80032b0 <HAL_TIM_Base_MspInit+0x5c>)
 800326c:	f043 0301 	orr.w	r3, r3, #1
 8003270:	6413      	str	r3, [r2, #64]	; 0x40
 8003272:	4b0f      	ldr	r3, [pc, #60]	; (80032b0 <HAL_TIM_Base_MspInit+0x5c>)
 8003274:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003276:	f003 0301 	and.w	r3, r3, #1
 800327a:	60fb      	str	r3, [r7, #12]
 800327c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM7_CLK_ENABLE();
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
}
 800327e:	e010      	b.n	80032a2 <HAL_TIM_Base_MspInit+0x4e>
  else if(tim_baseHandle->Instance==TIM7)
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	4a0b      	ldr	r2, [pc, #44]	; (80032b4 <HAL_TIM_Base_MspInit+0x60>)
 8003286:	4293      	cmp	r3, r2
 8003288:	d10b      	bne.n	80032a2 <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM7_CLK_ENABLE();
 800328a:	4b09      	ldr	r3, [pc, #36]	; (80032b0 <HAL_TIM_Base_MspInit+0x5c>)
 800328c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800328e:	4a08      	ldr	r2, [pc, #32]	; (80032b0 <HAL_TIM_Base_MspInit+0x5c>)
 8003290:	f043 0320 	orr.w	r3, r3, #32
 8003294:	6413      	str	r3, [r2, #64]	; 0x40
 8003296:	4b06      	ldr	r3, [pc, #24]	; (80032b0 <HAL_TIM_Base_MspInit+0x5c>)
 8003298:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800329a:	f003 0320 	and.w	r3, r3, #32
 800329e:	60bb      	str	r3, [r7, #8]
 80032a0:	68bb      	ldr	r3, [r7, #8]
}
 80032a2:	bf00      	nop
 80032a4:	3714      	adds	r7, #20
 80032a6:	46bd      	mov	sp, r7
 80032a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ac:	4770      	bx	lr
 80032ae:	bf00      	nop
 80032b0:	40023800 	.word	0x40023800
 80032b4:	40001400 	.word	0x40001400

080032b8 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80032b8:	b580      	push	{r7, lr}
 80032ba:	b088      	sub	sp, #32
 80032bc:	af00      	add	r7, sp, #0
 80032be:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80032c0:	f107 030c 	add.w	r3, r7, #12
 80032c4:	2200      	movs	r2, #0
 80032c6:	601a      	str	r2, [r3, #0]
 80032c8:	605a      	str	r2, [r3, #4]
 80032ca:	609a      	str	r2, [r3, #8]
 80032cc:	60da      	str	r2, [r3, #12]
 80032ce:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80032d8:	d11c      	bne.n	8003314 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80032da:	4b10      	ldr	r3, [pc, #64]	; (800331c <HAL_TIM_MspPostInit+0x64>)
 80032dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032de:	4a0f      	ldr	r2, [pc, #60]	; (800331c <HAL_TIM_MspPostInit+0x64>)
 80032e0:	f043 0301 	orr.w	r3, r3, #1
 80032e4:	6313      	str	r3, [r2, #48]	; 0x30
 80032e6:	4b0d      	ldr	r3, [pc, #52]	; (800331c <HAL_TIM_MspPostInit+0x64>)
 80032e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032ea:	f003 0301 	and.w	r3, r3, #1
 80032ee:	60bb      	str	r3, [r7, #8]
 80032f0:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80032f2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80032f6:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032f8:	2302      	movs	r3, #2
 80032fa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032fc:	2300      	movs	r3, #0
 80032fe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003300:	2300      	movs	r3, #0
 8003302:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003304:	2301      	movs	r3, #1
 8003306:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003308:	f107 030c 	add.w	r3, r7, #12
 800330c:	4619      	mov	r1, r3
 800330e:	4804      	ldr	r0, [pc, #16]	; (8003320 <HAL_TIM_MspPostInit+0x68>)
 8003310:	f000 fb44 	bl	800399c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8003314:	bf00      	nop
 8003316:	3720      	adds	r7, #32
 8003318:	46bd      	mov	sp, r7
 800331a:	bd80      	pop	{r7, pc}
 800331c:	40023800 	.word	0x40023800
 8003320:	40020000 	.word	0x40020000

08003324 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8003324:	b580      	push	{r7, lr}
 8003326:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003328:	4b14      	ldr	r3, [pc, #80]	; (800337c <MX_USART1_UART_Init+0x58>)
 800332a:	4a15      	ldr	r2, [pc, #84]	; (8003380 <MX_USART1_UART_Init+0x5c>)
 800332c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800332e:	4b13      	ldr	r3, [pc, #76]	; (800337c <MX_USART1_UART_Init+0x58>)
 8003330:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003334:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003336:	4b11      	ldr	r3, [pc, #68]	; (800337c <MX_USART1_UART_Init+0x58>)
 8003338:	2200      	movs	r2, #0
 800333a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800333c:	4b0f      	ldr	r3, [pc, #60]	; (800337c <MX_USART1_UART_Init+0x58>)
 800333e:	2200      	movs	r2, #0
 8003340:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8003342:	4b0e      	ldr	r3, [pc, #56]	; (800337c <MX_USART1_UART_Init+0x58>)
 8003344:	2200      	movs	r2, #0
 8003346:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003348:	4b0c      	ldr	r3, [pc, #48]	; (800337c <MX_USART1_UART_Init+0x58>)
 800334a:	220c      	movs	r2, #12
 800334c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800334e:	4b0b      	ldr	r3, [pc, #44]	; (800337c <MX_USART1_UART_Init+0x58>)
 8003350:	2200      	movs	r2, #0
 8003352:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003354:	4b09      	ldr	r3, [pc, #36]	; (800337c <MX_USART1_UART_Init+0x58>)
 8003356:	2200      	movs	r2, #0
 8003358:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800335a:	4b08      	ldr	r3, [pc, #32]	; (800337c <MX_USART1_UART_Init+0x58>)
 800335c:	2200      	movs	r2, #0
 800335e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003360:	4b06      	ldr	r3, [pc, #24]	; (800337c <MX_USART1_UART_Init+0x58>)
 8003362:	2200      	movs	r2, #0
 8003364:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003366:	4805      	ldr	r0, [pc, #20]	; (800337c <MX_USART1_UART_Init+0x58>)
 8003368:	f006 fa7e 	bl	8009868 <HAL_UART_Init>
 800336c:	4603      	mov	r3, r0
 800336e:	2b00      	cmp	r3, #0
 8003370:	d001      	beq.n	8003376 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8003372:	f7ff fc05 	bl	8002b80 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8003376:	bf00      	nop
 8003378:	bd80      	pop	{r7, pc}
 800337a:	bf00      	nop
 800337c:	2000069c 	.word	0x2000069c
 8003380:	40011000 	.word	0x40011000

08003384 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003384:	b580      	push	{r7, lr}
 8003386:	b0ac      	sub	sp, #176	; 0xb0
 8003388:	af00      	add	r7, sp, #0
 800338a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800338c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8003390:	2200      	movs	r2, #0
 8003392:	601a      	str	r2, [r3, #0]
 8003394:	605a      	str	r2, [r3, #4]
 8003396:	609a      	str	r2, [r3, #8]
 8003398:	60da      	str	r2, [r3, #12]
 800339a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800339c:	f107 0318 	add.w	r3, r7, #24
 80033a0:	2284      	movs	r2, #132	; 0x84
 80033a2:	2100      	movs	r1, #0
 80033a4:	4618      	mov	r0, r3
 80033a6:	f00c ff5b 	bl	8010260 <memset>
  if(uartHandle->Instance==USART1)
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	4a32      	ldr	r2, [pc, #200]	; (8003478 <HAL_UART_MspInit+0xf4>)
 80033b0:	4293      	cmp	r3, r2
 80033b2:	d15c      	bne.n	800346e <HAL_UART_MspInit+0xea>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80033b4:	2340      	movs	r3, #64	; 0x40
 80033b6:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80033b8:	2300      	movs	r3, #0
 80033ba:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80033bc:	f107 0318 	add.w	r3, r7, #24
 80033c0:	4618      	mov	r0, r3
 80033c2:	f003 f92b 	bl	800661c <HAL_RCCEx_PeriphCLKConfig>
 80033c6:	4603      	mov	r3, r0
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d001      	beq.n	80033d0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80033cc:	f7ff fbd8 	bl	8002b80 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80033d0:	4b2a      	ldr	r3, [pc, #168]	; (800347c <HAL_UART_MspInit+0xf8>)
 80033d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033d4:	4a29      	ldr	r2, [pc, #164]	; (800347c <HAL_UART_MspInit+0xf8>)
 80033d6:	f043 0310 	orr.w	r3, r3, #16
 80033da:	6453      	str	r3, [r2, #68]	; 0x44
 80033dc:	4b27      	ldr	r3, [pc, #156]	; (800347c <HAL_UART_MspInit+0xf8>)
 80033de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033e0:	f003 0310 	and.w	r3, r3, #16
 80033e4:	617b      	str	r3, [r7, #20]
 80033e6:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80033e8:	4b24      	ldr	r3, [pc, #144]	; (800347c <HAL_UART_MspInit+0xf8>)
 80033ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033ec:	4a23      	ldr	r2, [pc, #140]	; (800347c <HAL_UART_MspInit+0xf8>)
 80033ee:	f043 0302 	orr.w	r3, r3, #2
 80033f2:	6313      	str	r3, [r2, #48]	; 0x30
 80033f4:	4b21      	ldr	r3, [pc, #132]	; (800347c <HAL_UART_MspInit+0xf8>)
 80033f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033f8:	f003 0302 	and.w	r3, r3, #2
 80033fc:	613b      	str	r3, [r7, #16]
 80033fe:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003400:	4b1e      	ldr	r3, [pc, #120]	; (800347c <HAL_UART_MspInit+0xf8>)
 8003402:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003404:	4a1d      	ldr	r2, [pc, #116]	; (800347c <HAL_UART_MspInit+0xf8>)
 8003406:	f043 0301 	orr.w	r3, r3, #1
 800340a:	6313      	str	r3, [r2, #48]	; 0x30
 800340c:	4b1b      	ldr	r3, [pc, #108]	; (800347c <HAL_UART_MspInit+0xf8>)
 800340e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003410:	f003 0301 	and.w	r3, r3, #1
 8003414:	60fb      	str	r3, [r7, #12]
 8003416:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8003418:	2380      	movs	r3, #128	; 0x80
 800341a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800341e:	2302      	movs	r3, #2
 8003420:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003424:	2300      	movs	r3, #0
 8003426:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800342a:	2303      	movs	r3, #3
 800342c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003430:	2307      	movs	r3, #7
 8003432:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003436:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800343a:	4619      	mov	r1, r3
 800343c:	4810      	ldr	r0, [pc, #64]	; (8003480 <HAL_UART_MspInit+0xfc>)
 800343e:	f000 faad 	bl	800399c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8003442:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003446:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800344a:	2302      	movs	r3, #2
 800344c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003450:	2300      	movs	r3, #0
 8003452:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003456:	2303      	movs	r3, #3
 8003458:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800345c:	2307      	movs	r3, #7
 800345e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003462:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8003466:	4619      	mov	r1, r3
 8003468:	4806      	ldr	r0, [pc, #24]	; (8003484 <HAL_UART_MspInit+0x100>)
 800346a:	f000 fa97 	bl	800399c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 800346e:	bf00      	nop
 8003470:	37b0      	adds	r7, #176	; 0xb0
 8003472:	46bd      	mov	sp, r7
 8003474:	bd80      	pop	{r7, pc}
 8003476:	bf00      	nop
 8003478:	40011000 	.word	0x40011000
 800347c:	40023800 	.word	0x40023800
 8003480:	40020400 	.word	0x40020400
 8003484:	40020000 	.word	0x40020000

08003488 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8003488:	f8df d034 	ldr.w	sp, [pc, #52]	; 80034c0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800348c:	480d      	ldr	r0, [pc, #52]	; (80034c4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800348e:	490e      	ldr	r1, [pc, #56]	; (80034c8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003490:	4a0e      	ldr	r2, [pc, #56]	; (80034cc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003492:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003494:	e002      	b.n	800349c <LoopCopyDataInit>

08003496 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003496:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003498:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800349a:	3304      	adds	r3, #4

0800349c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800349c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800349e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80034a0:	d3f9      	bcc.n	8003496 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80034a2:	4a0b      	ldr	r2, [pc, #44]	; (80034d0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80034a4:	4c0b      	ldr	r4, [pc, #44]	; (80034d4 <LoopFillZerobss+0x26>)
  movs r3, #0
 80034a6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80034a8:	e001      	b.n	80034ae <LoopFillZerobss>

080034aa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80034aa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80034ac:	3204      	adds	r2, #4

080034ae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80034ae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80034b0:	d3fb      	bcc.n	80034aa <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80034b2:	f7ff fe11 	bl	80030d8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80034b6:	f00c fea1 	bl	80101fc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80034ba:	f7fd ffbd 	bl	8001438 <main>
  bx  lr    
 80034be:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80034c0:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 80034c4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80034c8:	2000049c 	.word	0x2000049c
  ldr r2, =_sidata
 80034cc:	08015dcc 	.word	0x08015dcc
  ldr r2, =_sbss
 80034d0:	2000049c 	.word	0x2000049c
  ldr r4, =_ebss
 80034d4:	20000778 	.word	0x20000778

080034d8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80034d8:	e7fe      	b.n	80034d8 <ADC_IRQHandler>

080034da <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80034da:	b580      	push	{r7, lr}
 80034dc:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80034de:	2003      	movs	r0, #3
 80034e0:	f000 f94c 	bl	800377c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80034e4:	200f      	movs	r0, #15
 80034e6:	f000 f805 	bl	80034f4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80034ea:	f7ff fc9f 	bl	8002e2c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80034ee:	2300      	movs	r3, #0
}
 80034f0:	4618      	mov	r0, r3
 80034f2:	bd80      	pop	{r7, pc}

080034f4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80034f4:	b580      	push	{r7, lr}
 80034f6:	b082      	sub	sp, #8
 80034f8:	af00      	add	r7, sp, #0
 80034fa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80034fc:	4b12      	ldr	r3, [pc, #72]	; (8003548 <HAL_InitTick+0x54>)
 80034fe:	681a      	ldr	r2, [r3, #0]
 8003500:	4b12      	ldr	r3, [pc, #72]	; (800354c <HAL_InitTick+0x58>)
 8003502:	781b      	ldrb	r3, [r3, #0]
 8003504:	4619      	mov	r1, r3
 8003506:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800350a:	fbb3 f3f1 	udiv	r3, r3, r1
 800350e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003512:	4618      	mov	r0, r3
 8003514:	f000 f996 	bl	8003844 <HAL_SYSTICK_Config>
 8003518:	4603      	mov	r3, r0
 800351a:	2b00      	cmp	r3, #0
 800351c:	d001      	beq.n	8003522 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800351e:	2301      	movs	r3, #1
 8003520:	e00e      	b.n	8003540 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	2b0f      	cmp	r3, #15
 8003526:	d80a      	bhi.n	800353e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003528:	2200      	movs	r2, #0
 800352a:	6879      	ldr	r1, [r7, #4]
 800352c:	f04f 30ff 	mov.w	r0, #4294967295
 8003530:	f000 f944 	bl	80037bc <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003534:	4a06      	ldr	r2, [pc, #24]	; (8003550 <HAL_InitTick+0x5c>)
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800353a:	2300      	movs	r3, #0
 800353c:	e000      	b.n	8003540 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800353e:	2301      	movs	r3, #1
}
 8003540:	4618      	mov	r0, r3
 8003542:	3708      	adds	r7, #8
 8003544:	46bd      	mov	sp, r7
 8003546:	bd80      	pop	{r7, pc}
 8003548:	20000000 	.word	0x20000000
 800354c:	20000008 	.word	0x20000008
 8003550:	20000004 	.word	0x20000004

08003554 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003554:	b480      	push	{r7}
 8003556:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003558:	4b06      	ldr	r3, [pc, #24]	; (8003574 <HAL_IncTick+0x20>)
 800355a:	781b      	ldrb	r3, [r3, #0]
 800355c:	461a      	mov	r2, r3
 800355e:	4b06      	ldr	r3, [pc, #24]	; (8003578 <HAL_IncTick+0x24>)
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	4413      	add	r3, r2
 8003564:	4a04      	ldr	r2, [pc, #16]	; (8003578 <HAL_IncTick+0x24>)
 8003566:	6013      	str	r3, [r2, #0]
}
 8003568:	bf00      	nop
 800356a:	46bd      	mov	sp, r7
 800356c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003570:	4770      	bx	lr
 8003572:	bf00      	nop
 8003574:	20000008 	.word	0x20000008
 8003578:	20000724 	.word	0x20000724

0800357c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800357c:	b480      	push	{r7}
 800357e:	af00      	add	r7, sp, #0
  return uwTick;
 8003580:	4b03      	ldr	r3, [pc, #12]	; (8003590 <HAL_GetTick+0x14>)
 8003582:	681b      	ldr	r3, [r3, #0]
}
 8003584:	4618      	mov	r0, r3
 8003586:	46bd      	mov	sp, r7
 8003588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800358c:	4770      	bx	lr
 800358e:	bf00      	nop
 8003590:	20000724 	.word	0x20000724

08003594 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003594:	b580      	push	{r7, lr}
 8003596:	b084      	sub	sp, #16
 8003598:	af00      	add	r7, sp, #0
 800359a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800359c:	f7ff ffee 	bl	800357c <HAL_GetTick>
 80035a0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035ac:	d005      	beq.n	80035ba <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80035ae:	4b0a      	ldr	r3, [pc, #40]	; (80035d8 <HAL_Delay+0x44>)
 80035b0:	781b      	ldrb	r3, [r3, #0]
 80035b2:	461a      	mov	r2, r3
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	4413      	add	r3, r2
 80035b8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80035ba:	bf00      	nop
 80035bc:	f7ff ffde 	bl	800357c <HAL_GetTick>
 80035c0:	4602      	mov	r2, r0
 80035c2:	68bb      	ldr	r3, [r7, #8]
 80035c4:	1ad3      	subs	r3, r2, r3
 80035c6:	68fa      	ldr	r2, [r7, #12]
 80035c8:	429a      	cmp	r2, r3
 80035ca:	d8f7      	bhi.n	80035bc <HAL_Delay+0x28>
  {
  }
}
 80035cc:	bf00      	nop
 80035ce:	bf00      	nop
 80035d0:	3710      	adds	r7, #16
 80035d2:	46bd      	mov	sp, r7
 80035d4:	bd80      	pop	{r7, pc}
 80035d6:	bf00      	nop
 80035d8:	20000008 	.word	0x20000008

080035dc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80035dc:	b480      	push	{r7}
 80035de:	b085      	sub	sp, #20
 80035e0:	af00      	add	r7, sp, #0
 80035e2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	f003 0307 	and.w	r3, r3, #7
 80035ea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80035ec:	4b0b      	ldr	r3, [pc, #44]	; (800361c <__NVIC_SetPriorityGrouping+0x40>)
 80035ee:	68db      	ldr	r3, [r3, #12]
 80035f0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80035f2:	68ba      	ldr	r2, [r7, #8]
 80035f4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80035f8:	4013      	ands	r3, r2
 80035fa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003600:	68bb      	ldr	r3, [r7, #8]
 8003602:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003604:	4b06      	ldr	r3, [pc, #24]	; (8003620 <__NVIC_SetPriorityGrouping+0x44>)
 8003606:	4313      	orrs	r3, r2
 8003608:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800360a:	4a04      	ldr	r2, [pc, #16]	; (800361c <__NVIC_SetPriorityGrouping+0x40>)
 800360c:	68bb      	ldr	r3, [r7, #8]
 800360e:	60d3      	str	r3, [r2, #12]
}
 8003610:	bf00      	nop
 8003612:	3714      	adds	r7, #20
 8003614:	46bd      	mov	sp, r7
 8003616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800361a:	4770      	bx	lr
 800361c:	e000ed00 	.word	0xe000ed00
 8003620:	05fa0000 	.word	0x05fa0000

08003624 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003624:	b480      	push	{r7}
 8003626:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003628:	4b04      	ldr	r3, [pc, #16]	; (800363c <__NVIC_GetPriorityGrouping+0x18>)
 800362a:	68db      	ldr	r3, [r3, #12]
 800362c:	0a1b      	lsrs	r3, r3, #8
 800362e:	f003 0307 	and.w	r3, r3, #7
}
 8003632:	4618      	mov	r0, r3
 8003634:	46bd      	mov	sp, r7
 8003636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800363a:	4770      	bx	lr
 800363c:	e000ed00 	.word	0xe000ed00

08003640 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003640:	b480      	push	{r7}
 8003642:	b083      	sub	sp, #12
 8003644:	af00      	add	r7, sp, #0
 8003646:	4603      	mov	r3, r0
 8003648:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800364a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800364e:	2b00      	cmp	r3, #0
 8003650:	db0b      	blt.n	800366a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003652:	79fb      	ldrb	r3, [r7, #7]
 8003654:	f003 021f 	and.w	r2, r3, #31
 8003658:	4907      	ldr	r1, [pc, #28]	; (8003678 <__NVIC_EnableIRQ+0x38>)
 800365a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800365e:	095b      	lsrs	r3, r3, #5
 8003660:	2001      	movs	r0, #1
 8003662:	fa00 f202 	lsl.w	r2, r0, r2
 8003666:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800366a:	bf00      	nop
 800366c:	370c      	adds	r7, #12
 800366e:	46bd      	mov	sp, r7
 8003670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003674:	4770      	bx	lr
 8003676:	bf00      	nop
 8003678:	e000e100 	.word	0xe000e100

0800367c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800367c:	b480      	push	{r7}
 800367e:	b083      	sub	sp, #12
 8003680:	af00      	add	r7, sp, #0
 8003682:	4603      	mov	r3, r0
 8003684:	6039      	str	r1, [r7, #0]
 8003686:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003688:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800368c:	2b00      	cmp	r3, #0
 800368e:	db0a      	blt.n	80036a6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003690:	683b      	ldr	r3, [r7, #0]
 8003692:	b2da      	uxtb	r2, r3
 8003694:	490c      	ldr	r1, [pc, #48]	; (80036c8 <__NVIC_SetPriority+0x4c>)
 8003696:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800369a:	0112      	lsls	r2, r2, #4
 800369c:	b2d2      	uxtb	r2, r2
 800369e:	440b      	add	r3, r1
 80036a0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80036a4:	e00a      	b.n	80036bc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80036a6:	683b      	ldr	r3, [r7, #0]
 80036a8:	b2da      	uxtb	r2, r3
 80036aa:	4908      	ldr	r1, [pc, #32]	; (80036cc <__NVIC_SetPriority+0x50>)
 80036ac:	79fb      	ldrb	r3, [r7, #7]
 80036ae:	f003 030f 	and.w	r3, r3, #15
 80036b2:	3b04      	subs	r3, #4
 80036b4:	0112      	lsls	r2, r2, #4
 80036b6:	b2d2      	uxtb	r2, r2
 80036b8:	440b      	add	r3, r1
 80036ba:	761a      	strb	r2, [r3, #24]
}
 80036bc:	bf00      	nop
 80036be:	370c      	adds	r7, #12
 80036c0:	46bd      	mov	sp, r7
 80036c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c6:	4770      	bx	lr
 80036c8:	e000e100 	.word	0xe000e100
 80036cc:	e000ed00 	.word	0xe000ed00

080036d0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80036d0:	b480      	push	{r7}
 80036d2:	b089      	sub	sp, #36	; 0x24
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	60f8      	str	r0, [r7, #12]
 80036d8:	60b9      	str	r1, [r7, #8]
 80036da:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	f003 0307 	and.w	r3, r3, #7
 80036e2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80036e4:	69fb      	ldr	r3, [r7, #28]
 80036e6:	f1c3 0307 	rsb	r3, r3, #7
 80036ea:	2b04      	cmp	r3, #4
 80036ec:	bf28      	it	cs
 80036ee:	2304      	movcs	r3, #4
 80036f0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80036f2:	69fb      	ldr	r3, [r7, #28]
 80036f4:	3304      	adds	r3, #4
 80036f6:	2b06      	cmp	r3, #6
 80036f8:	d902      	bls.n	8003700 <NVIC_EncodePriority+0x30>
 80036fa:	69fb      	ldr	r3, [r7, #28]
 80036fc:	3b03      	subs	r3, #3
 80036fe:	e000      	b.n	8003702 <NVIC_EncodePriority+0x32>
 8003700:	2300      	movs	r3, #0
 8003702:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003704:	f04f 32ff 	mov.w	r2, #4294967295
 8003708:	69bb      	ldr	r3, [r7, #24]
 800370a:	fa02 f303 	lsl.w	r3, r2, r3
 800370e:	43da      	mvns	r2, r3
 8003710:	68bb      	ldr	r3, [r7, #8]
 8003712:	401a      	ands	r2, r3
 8003714:	697b      	ldr	r3, [r7, #20]
 8003716:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003718:	f04f 31ff 	mov.w	r1, #4294967295
 800371c:	697b      	ldr	r3, [r7, #20]
 800371e:	fa01 f303 	lsl.w	r3, r1, r3
 8003722:	43d9      	mvns	r1, r3
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003728:	4313      	orrs	r3, r2
         );
}
 800372a:	4618      	mov	r0, r3
 800372c:	3724      	adds	r7, #36	; 0x24
 800372e:	46bd      	mov	sp, r7
 8003730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003734:	4770      	bx	lr
	...

08003738 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003738:	b580      	push	{r7, lr}
 800373a:	b082      	sub	sp, #8
 800373c:	af00      	add	r7, sp, #0
 800373e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	3b01      	subs	r3, #1
 8003744:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003748:	d301      	bcc.n	800374e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800374a:	2301      	movs	r3, #1
 800374c:	e00f      	b.n	800376e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800374e:	4a0a      	ldr	r2, [pc, #40]	; (8003778 <SysTick_Config+0x40>)
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	3b01      	subs	r3, #1
 8003754:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003756:	210f      	movs	r1, #15
 8003758:	f04f 30ff 	mov.w	r0, #4294967295
 800375c:	f7ff ff8e 	bl	800367c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003760:	4b05      	ldr	r3, [pc, #20]	; (8003778 <SysTick_Config+0x40>)
 8003762:	2200      	movs	r2, #0
 8003764:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003766:	4b04      	ldr	r3, [pc, #16]	; (8003778 <SysTick_Config+0x40>)
 8003768:	2207      	movs	r2, #7
 800376a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800376c:	2300      	movs	r3, #0
}
 800376e:	4618      	mov	r0, r3
 8003770:	3708      	adds	r7, #8
 8003772:	46bd      	mov	sp, r7
 8003774:	bd80      	pop	{r7, pc}
 8003776:	bf00      	nop
 8003778:	e000e010 	.word	0xe000e010

0800377c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800377c:	b580      	push	{r7, lr}
 800377e:	b082      	sub	sp, #8
 8003780:	af00      	add	r7, sp, #0
 8003782:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	2b07      	cmp	r3, #7
 8003788:	d00f      	beq.n	80037aa <HAL_NVIC_SetPriorityGrouping+0x2e>
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	2b06      	cmp	r3, #6
 800378e:	d00c      	beq.n	80037aa <HAL_NVIC_SetPriorityGrouping+0x2e>
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	2b05      	cmp	r3, #5
 8003794:	d009      	beq.n	80037aa <HAL_NVIC_SetPriorityGrouping+0x2e>
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	2b04      	cmp	r3, #4
 800379a:	d006      	beq.n	80037aa <HAL_NVIC_SetPriorityGrouping+0x2e>
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	2b03      	cmp	r3, #3
 80037a0:	d003      	beq.n	80037aa <HAL_NVIC_SetPriorityGrouping+0x2e>
 80037a2:	2191      	movs	r1, #145	; 0x91
 80037a4:	4804      	ldr	r0, [pc, #16]	; (80037b8 <HAL_NVIC_SetPriorityGrouping+0x3c>)
 80037a6:	f7ff f9f0 	bl	8002b8a <assert_failed>
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80037aa:	6878      	ldr	r0, [r7, #4]
 80037ac:	f7ff ff16 	bl	80035dc <__NVIC_SetPriorityGrouping>
}
 80037b0:	bf00      	nop
 80037b2:	3708      	adds	r7, #8
 80037b4:	46bd      	mov	sp, r7
 80037b6:	bd80      	pop	{r7, pc}
 80037b8:	080156cc 	.word	0x080156cc

080037bc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80037bc:	b580      	push	{r7, lr}
 80037be:	b086      	sub	sp, #24
 80037c0:	af00      	add	r7, sp, #0
 80037c2:	4603      	mov	r3, r0
 80037c4:	60b9      	str	r1, [r7, #8]
 80037c6:	607a      	str	r2, [r7, #4]
 80037c8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80037ca:	2300      	movs	r3, #0
 80037cc:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	2b0f      	cmp	r3, #15
 80037d2:	d903      	bls.n	80037dc <HAL_NVIC_SetPriority+0x20>
 80037d4:	21a9      	movs	r1, #169	; 0xa9
 80037d6:	480e      	ldr	r0, [pc, #56]	; (8003810 <HAL_NVIC_SetPriority+0x54>)
 80037d8:	f7ff f9d7 	bl	8002b8a <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 80037dc:	68bb      	ldr	r3, [r7, #8]
 80037de:	2b0f      	cmp	r3, #15
 80037e0:	d903      	bls.n	80037ea <HAL_NVIC_SetPriority+0x2e>
 80037e2:	21aa      	movs	r1, #170	; 0xaa
 80037e4:	480a      	ldr	r0, [pc, #40]	; (8003810 <HAL_NVIC_SetPriority+0x54>)
 80037e6:	f7ff f9d0 	bl	8002b8a <assert_failed>
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80037ea:	f7ff ff1b 	bl	8003624 <__NVIC_GetPriorityGrouping>
 80037ee:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80037f0:	687a      	ldr	r2, [r7, #4]
 80037f2:	68b9      	ldr	r1, [r7, #8]
 80037f4:	6978      	ldr	r0, [r7, #20]
 80037f6:	f7ff ff6b 	bl	80036d0 <NVIC_EncodePriority>
 80037fa:	4602      	mov	r2, r0
 80037fc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003800:	4611      	mov	r1, r2
 8003802:	4618      	mov	r0, r3
 8003804:	f7ff ff3a 	bl	800367c <__NVIC_SetPriority>
}
 8003808:	bf00      	nop
 800380a:	3718      	adds	r7, #24
 800380c:	46bd      	mov	sp, r7
 800380e:	bd80      	pop	{r7, pc}
 8003810:	080156cc 	.word	0x080156cc

08003814 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003814:	b580      	push	{r7, lr}
 8003816:	b082      	sub	sp, #8
 8003818:	af00      	add	r7, sp, #0
 800381a:	4603      	mov	r3, r0
 800381c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 800381e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003822:	2b00      	cmp	r3, #0
 8003824:	da03      	bge.n	800382e <HAL_NVIC_EnableIRQ+0x1a>
 8003826:	21bd      	movs	r1, #189	; 0xbd
 8003828:	4805      	ldr	r0, [pc, #20]	; (8003840 <HAL_NVIC_EnableIRQ+0x2c>)
 800382a:	f7ff f9ae 	bl	8002b8a <assert_failed>
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800382e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003832:	4618      	mov	r0, r3
 8003834:	f7ff ff04 	bl	8003640 <__NVIC_EnableIRQ>
}
 8003838:	bf00      	nop
 800383a:	3708      	adds	r7, #8
 800383c:	46bd      	mov	sp, r7
 800383e:	bd80      	pop	{r7, pc}
 8003840:	080156cc 	.word	0x080156cc

08003844 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003844:	b580      	push	{r7, lr}
 8003846:	b082      	sub	sp, #8
 8003848:	af00      	add	r7, sp, #0
 800384a:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800384c:	6878      	ldr	r0, [r7, #4]
 800384e:	f7ff ff73 	bl	8003738 <SysTick_Config>
 8003852:	4603      	mov	r3, r0
}
 8003854:	4618      	mov	r0, r3
 8003856:	3708      	adds	r7, #8
 8003858:	46bd      	mov	sp, r7
 800385a:	bd80      	pop	{r7, pc}

0800385c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800385c:	b580      	push	{r7, lr}
 800385e:	b084      	sub	sp, #16
 8003860:	af00      	add	r7, sp, #0
 8003862:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003868:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800386a:	f7ff fe87 	bl	800357c <HAL_GetTick>
 800386e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003876:	b2db      	uxtb	r3, r3
 8003878:	2b02      	cmp	r3, #2
 800387a:	d008      	beq.n	800388e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	2280      	movs	r2, #128	; 0x80
 8003880:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	2200      	movs	r2, #0
 8003886:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800388a:	2301      	movs	r3, #1
 800388c:	e052      	b.n	8003934 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	681a      	ldr	r2, [r3, #0]
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	f022 0216 	bic.w	r2, r2, #22
 800389c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	695a      	ldr	r2, [r3, #20]
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80038ac:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d103      	bne.n	80038be <HAL_DMA_Abort+0x62>
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d007      	beq.n	80038ce <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	681a      	ldr	r2, [r3, #0]
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	f022 0208 	bic.w	r2, r2, #8
 80038cc:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	681a      	ldr	r2, [r3, #0]
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	f022 0201 	bic.w	r2, r2, #1
 80038dc:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80038de:	e013      	b.n	8003908 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80038e0:	f7ff fe4c 	bl	800357c <HAL_GetTick>
 80038e4:	4602      	mov	r2, r0
 80038e6:	68bb      	ldr	r3, [r7, #8]
 80038e8:	1ad3      	subs	r3, r2, r3
 80038ea:	2b05      	cmp	r3, #5
 80038ec:	d90c      	bls.n	8003908 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	2220      	movs	r2, #32
 80038f2:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	2203      	movs	r2, #3
 80038f8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	2200      	movs	r2, #0
 8003900:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 8003904:	2303      	movs	r3, #3
 8003906:	e015      	b.n	8003934 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	f003 0301 	and.w	r3, r3, #1
 8003912:	2b00      	cmp	r3, #0
 8003914:	d1e4      	bne.n	80038e0 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800391a:	223f      	movs	r2, #63	; 0x3f
 800391c:	409a      	lsls	r2, r3
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	2201      	movs	r2, #1
 8003926:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	2200      	movs	r2, #0
 800392e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 8003932:	2300      	movs	r3, #0
}
 8003934:	4618      	mov	r0, r3
 8003936:	3710      	adds	r7, #16
 8003938:	46bd      	mov	sp, r7
 800393a:	bd80      	pop	{r7, pc}

0800393c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800393c:	b480      	push	{r7}
 800393e:	b083      	sub	sp, #12
 8003940:	af00      	add	r7, sp, #0
 8003942:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800394a:	b2db      	uxtb	r3, r3
 800394c:	2b02      	cmp	r3, #2
 800394e:	d004      	beq.n	800395a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	2280      	movs	r2, #128	; 0x80
 8003954:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003956:	2301      	movs	r3, #1
 8003958:	e00c      	b.n	8003974 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	2205      	movs	r2, #5
 800395e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	681a      	ldr	r2, [r3, #0]
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	f022 0201 	bic.w	r2, r2, #1
 8003970:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003972:	2300      	movs	r3, #0
}
 8003974:	4618      	mov	r0, r3
 8003976:	370c      	adds	r7, #12
 8003978:	46bd      	mov	sp, r7
 800397a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800397e:	4770      	bx	lr

08003980 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8003980:	b480      	push	{r7}
 8003982:	b083      	sub	sp, #12
 8003984:	af00      	add	r7, sp, #0
 8003986:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800398e:	b2db      	uxtb	r3, r3
}
 8003990:	4618      	mov	r0, r3
 8003992:	370c      	adds	r7, #12
 8003994:	46bd      	mov	sp, r7
 8003996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800399a:	4770      	bx	lr

0800399c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800399c:	b580      	push	{r7, lr}
 800399e:	b088      	sub	sp, #32
 80039a0:	af00      	add	r7, sp, #0
 80039a2:	6078      	str	r0, [r7, #4]
 80039a4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80039a6:	2300      	movs	r3, #0
 80039a8:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80039aa:	2300      	movs	r3, #0
 80039ac:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80039ae:	2300      	movs	r3, #0
 80039b0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80039b2:	2300      	movs	r3, #0
 80039b4:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	4a3a      	ldr	r2, [pc, #232]	; (8003aa4 <HAL_GPIO_Init+0x108>)
 80039ba:	4293      	cmp	r3, r2
 80039bc:	d02b      	beq.n	8003a16 <HAL_GPIO_Init+0x7a>
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	4a39      	ldr	r2, [pc, #228]	; (8003aa8 <HAL_GPIO_Init+0x10c>)
 80039c2:	4293      	cmp	r3, r2
 80039c4:	d027      	beq.n	8003a16 <HAL_GPIO_Init+0x7a>
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	4a38      	ldr	r2, [pc, #224]	; (8003aac <HAL_GPIO_Init+0x110>)
 80039ca:	4293      	cmp	r3, r2
 80039cc:	d023      	beq.n	8003a16 <HAL_GPIO_Init+0x7a>
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	4a37      	ldr	r2, [pc, #220]	; (8003ab0 <HAL_GPIO_Init+0x114>)
 80039d2:	4293      	cmp	r3, r2
 80039d4:	d01f      	beq.n	8003a16 <HAL_GPIO_Init+0x7a>
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	4a36      	ldr	r2, [pc, #216]	; (8003ab4 <HAL_GPIO_Init+0x118>)
 80039da:	4293      	cmp	r3, r2
 80039dc:	d01b      	beq.n	8003a16 <HAL_GPIO_Init+0x7a>
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	4a35      	ldr	r2, [pc, #212]	; (8003ab8 <HAL_GPIO_Init+0x11c>)
 80039e2:	4293      	cmp	r3, r2
 80039e4:	d017      	beq.n	8003a16 <HAL_GPIO_Init+0x7a>
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	4a34      	ldr	r2, [pc, #208]	; (8003abc <HAL_GPIO_Init+0x120>)
 80039ea:	4293      	cmp	r3, r2
 80039ec:	d013      	beq.n	8003a16 <HAL_GPIO_Init+0x7a>
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	4a33      	ldr	r2, [pc, #204]	; (8003ac0 <HAL_GPIO_Init+0x124>)
 80039f2:	4293      	cmp	r3, r2
 80039f4:	d00f      	beq.n	8003a16 <HAL_GPIO_Init+0x7a>
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	4a32      	ldr	r2, [pc, #200]	; (8003ac4 <HAL_GPIO_Init+0x128>)
 80039fa:	4293      	cmp	r3, r2
 80039fc:	d00b      	beq.n	8003a16 <HAL_GPIO_Init+0x7a>
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	4a31      	ldr	r2, [pc, #196]	; (8003ac8 <HAL_GPIO_Init+0x12c>)
 8003a02:	4293      	cmp	r3, r2
 8003a04:	d007      	beq.n	8003a16 <HAL_GPIO_Init+0x7a>
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	4a30      	ldr	r2, [pc, #192]	; (8003acc <HAL_GPIO_Init+0x130>)
 8003a0a:	4293      	cmp	r3, r2
 8003a0c:	d003      	beq.n	8003a16 <HAL_GPIO_Init+0x7a>
 8003a0e:	21aa      	movs	r1, #170	; 0xaa
 8003a10:	482f      	ldr	r0, [pc, #188]	; (8003ad0 <HAL_GPIO_Init+0x134>)
 8003a12:	f7ff f8ba 	bl	8002b8a <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 8003a16:	683b      	ldr	r3, [r7, #0]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	b29b      	uxth	r3, r3
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d103      	bne.n	8003a28 <HAL_GPIO_Init+0x8c>
 8003a20:	21ab      	movs	r1, #171	; 0xab
 8003a22:	482b      	ldr	r0, [pc, #172]	; (8003ad0 <HAL_GPIO_Init+0x134>)
 8003a24:	f7ff f8b1 	bl	8002b8a <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 8003a28:	683b      	ldr	r3, [r7, #0]
 8003a2a:	685b      	ldr	r3, [r3, #4]
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d035      	beq.n	8003a9c <HAL_GPIO_Init+0x100>
 8003a30:	683b      	ldr	r3, [r7, #0]
 8003a32:	685b      	ldr	r3, [r3, #4]
 8003a34:	2b01      	cmp	r3, #1
 8003a36:	d031      	beq.n	8003a9c <HAL_GPIO_Init+0x100>
 8003a38:	683b      	ldr	r3, [r7, #0]
 8003a3a:	685b      	ldr	r3, [r3, #4]
 8003a3c:	2b11      	cmp	r3, #17
 8003a3e:	d02d      	beq.n	8003a9c <HAL_GPIO_Init+0x100>
 8003a40:	683b      	ldr	r3, [r7, #0]
 8003a42:	685b      	ldr	r3, [r3, #4]
 8003a44:	2b02      	cmp	r3, #2
 8003a46:	d029      	beq.n	8003a9c <HAL_GPIO_Init+0x100>
 8003a48:	683b      	ldr	r3, [r7, #0]
 8003a4a:	685b      	ldr	r3, [r3, #4]
 8003a4c:	2b12      	cmp	r3, #18
 8003a4e:	d025      	beq.n	8003a9c <HAL_GPIO_Init+0x100>
 8003a50:	683b      	ldr	r3, [r7, #0]
 8003a52:	685b      	ldr	r3, [r3, #4]
 8003a54:	f5b3 1f88 	cmp.w	r3, #1114112	; 0x110000
 8003a58:	d020      	beq.n	8003a9c <HAL_GPIO_Init+0x100>
 8003a5a:	683b      	ldr	r3, [r7, #0]
 8003a5c:	685b      	ldr	r3, [r3, #4]
 8003a5e:	f5b3 1f04 	cmp.w	r3, #2162688	; 0x210000
 8003a62:	d01b      	beq.n	8003a9c <HAL_GPIO_Init+0x100>
 8003a64:	683b      	ldr	r3, [r7, #0]
 8003a66:	685b      	ldr	r3, [r3, #4]
 8003a68:	f5b3 1f44 	cmp.w	r3, #3211264	; 0x310000
 8003a6c:	d016      	beq.n	8003a9c <HAL_GPIO_Init+0x100>
 8003a6e:	683b      	ldr	r3, [r7, #0]
 8003a70:	685b      	ldr	r3, [r3, #4]
 8003a72:	f5b3 1f90 	cmp.w	r3, #1179648	; 0x120000
 8003a76:	d011      	beq.n	8003a9c <HAL_GPIO_Init+0x100>
 8003a78:	683b      	ldr	r3, [r7, #0]
 8003a7a:	685b      	ldr	r3, [r3, #4]
 8003a7c:	f5b3 1f08 	cmp.w	r3, #2228224	; 0x220000
 8003a80:	d00c      	beq.n	8003a9c <HAL_GPIO_Init+0x100>
 8003a82:	683b      	ldr	r3, [r7, #0]
 8003a84:	685b      	ldr	r3, [r3, #4]
 8003a86:	f5b3 1f48 	cmp.w	r3, #3276800	; 0x320000
 8003a8a:	d007      	beq.n	8003a9c <HAL_GPIO_Init+0x100>
 8003a8c:	683b      	ldr	r3, [r7, #0]
 8003a8e:	685b      	ldr	r3, [r3, #4]
 8003a90:	2b03      	cmp	r3, #3
 8003a92:	d003      	beq.n	8003a9c <HAL_GPIO_Init+0x100>
 8003a94:	21ac      	movs	r1, #172	; 0xac
 8003a96:	480e      	ldr	r0, [pc, #56]	; (8003ad0 <HAL_GPIO_Init+0x134>)
 8003a98:	f7ff f877 	bl	8002b8a <assert_failed>

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8003a9c:	2300      	movs	r3, #0
 8003a9e:	61fb      	str	r3, [r7, #28]
 8003aa0:	e2c7      	b.n	8004032 <HAL_GPIO_Init+0x696>
 8003aa2:	bf00      	nop
 8003aa4:	40020000 	.word	0x40020000
 8003aa8:	40020400 	.word	0x40020400
 8003aac:	40020800 	.word	0x40020800
 8003ab0:	40020c00 	.word	0x40020c00
 8003ab4:	40021000 	.word	0x40021000
 8003ab8:	40021400 	.word	0x40021400
 8003abc:	40021800 	.word	0x40021800
 8003ac0:	40021c00 	.word	0x40021c00
 8003ac4:	40022000 	.word	0x40022000
 8003ac8:	40022400 	.word	0x40022400
 8003acc:	40022800 	.word	0x40022800
 8003ad0:	08015708 	.word	0x08015708
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8003ad4:	2201      	movs	r2, #1
 8003ad6:	69fb      	ldr	r3, [r7, #28]
 8003ad8:	fa02 f303 	lsl.w	r3, r2, r3
 8003adc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003ade:	683b      	ldr	r3, [r7, #0]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	697a      	ldr	r2, [r7, #20]
 8003ae4:	4013      	ands	r3, r2
 8003ae6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003ae8:	693a      	ldr	r2, [r7, #16]
 8003aea:	697b      	ldr	r3, [r7, #20]
 8003aec:	429a      	cmp	r2, r3
 8003aee:	f040 829d 	bne.w	800402c <HAL_GPIO_Init+0x690>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003af2:	683b      	ldr	r3, [r7, #0]
 8003af4:	685b      	ldr	r3, [r3, #4]
 8003af6:	f003 0303 	and.w	r3, r3, #3
 8003afa:	2b01      	cmp	r3, #1
 8003afc:	d005      	beq.n	8003b0a <HAL_GPIO_Init+0x16e>
 8003afe:	683b      	ldr	r3, [r7, #0]
 8003b00:	685b      	ldr	r3, [r3, #4]
 8003b02:	f003 0303 	and.w	r3, r3, #3
 8003b06:	2b02      	cmp	r3, #2
 8003b08:	d144      	bne.n	8003b94 <HAL_GPIO_Init+0x1f8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8003b0a:	683b      	ldr	r3, [r7, #0]
 8003b0c:	68db      	ldr	r3, [r3, #12]
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d00f      	beq.n	8003b32 <HAL_GPIO_Init+0x196>
 8003b12:	683b      	ldr	r3, [r7, #0]
 8003b14:	68db      	ldr	r3, [r3, #12]
 8003b16:	2b01      	cmp	r3, #1
 8003b18:	d00b      	beq.n	8003b32 <HAL_GPIO_Init+0x196>
 8003b1a:	683b      	ldr	r3, [r7, #0]
 8003b1c:	68db      	ldr	r3, [r3, #12]
 8003b1e:	2b02      	cmp	r3, #2
 8003b20:	d007      	beq.n	8003b32 <HAL_GPIO_Init+0x196>
 8003b22:	683b      	ldr	r3, [r7, #0]
 8003b24:	68db      	ldr	r3, [r3, #12]
 8003b26:	2b03      	cmp	r3, #3
 8003b28:	d003      	beq.n	8003b32 <HAL_GPIO_Init+0x196>
 8003b2a:	21bd      	movs	r1, #189	; 0xbd
 8003b2c:	4831      	ldr	r0, [pc, #196]	; (8003bf4 <HAL_GPIO_Init+0x258>)
 8003b2e:	f7ff f82c 	bl	8002b8a <assert_failed>
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	689b      	ldr	r3, [r3, #8]
 8003b36:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8003b38:	69fb      	ldr	r3, [r7, #28]
 8003b3a:	005b      	lsls	r3, r3, #1
 8003b3c:	2203      	movs	r2, #3
 8003b3e:	fa02 f303 	lsl.w	r3, r2, r3
 8003b42:	43db      	mvns	r3, r3
 8003b44:	69ba      	ldr	r2, [r7, #24]
 8003b46:	4013      	ands	r3, r2
 8003b48:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8003b4a:	683b      	ldr	r3, [r7, #0]
 8003b4c:	68da      	ldr	r2, [r3, #12]
 8003b4e:	69fb      	ldr	r3, [r7, #28]
 8003b50:	005b      	lsls	r3, r3, #1
 8003b52:	fa02 f303 	lsl.w	r3, r2, r3
 8003b56:	69ba      	ldr	r2, [r7, #24]
 8003b58:	4313      	orrs	r3, r2
 8003b5a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	69ba      	ldr	r2, [r7, #24]
 8003b60:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	685b      	ldr	r3, [r3, #4]
 8003b66:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003b68:	2201      	movs	r2, #1
 8003b6a:	69fb      	ldr	r3, [r7, #28]
 8003b6c:	fa02 f303 	lsl.w	r3, r2, r3
 8003b70:	43db      	mvns	r3, r3
 8003b72:	69ba      	ldr	r2, [r7, #24]
 8003b74:	4013      	ands	r3, r2
 8003b76:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003b78:	683b      	ldr	r3, [r7, #0]
 8003b7a:	685b      	ldr	r3, [r3, #4]
 8003b7c:	091b      	lsrs	r3, r3, #4
 8003b7e:	f003 0201 	and.w	r2, r3, #1
 8003b82:	69fb      	ldr	r3, [r7, #28]
 8003b84:	fa02 f303 	lsl.w	r3, r2, r3
 8003b88:	69ba      	ldr	r2, [r7, #24]
 8003b8a:	4313      	orrs	r3, r2
 8003b8c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	69ba      	ldr	r2, [r7, #24]
 8003b92:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003b94:	683b      	ldr	r3, [r7, #0]
 8003b96:	685b      	ldr	r3, [r3, #4]
 8003b98:	f003 0303 	and.w	r3, r3, #3
 8003b9c:	2b03      	cmp	r3, #3
 8003b9e:	d02b      	beq.n	8003bf8 <HAL_GPIO_Init+0x25c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 8003ba0:	683b      	ldr	r3, [r7, #0]
 8003ba2:	689b      	ldr	r3, [r3, #8]
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d00b      	beq.n	8003bc0 <HAL_GPIO_Init+0x224>
 8003ba8:	683b      	ldr	r3, [r7, #0]
 8003baa:	689b      	ldr	r3, [r3, #8]
 8003bac:	2b01      	cmp	r3, #1
 8003bae:	d007      	beq.n	8003bc0 <HAL_GPIO_Init+0x224>
 8003bb0:	683b      	ldr	r3, [r7, #0]
 8003bb2:	689b      	ldr	r3, [r3, #8]
 8003bb4:	2b02      	cmp	r3, #2
 8003bb6:	d003      	beq.n	8003bc0 <HAL_GPIO_Init+0x224>
 8003bb8:	21ce      	movs	r1, #206	; 0xce
 8003bba:	480e      	ldr	r0, [pc, #56]	; (8003bf4 <HAL_GPIO_Init+0x258>)
 8003bbc:	f7fe ffe5 	bl	8002b8a <assert_failed>

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	68db      	ldr	r3, [r3, #12]
 8003bc4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8003bc6:	69fb      	ldr	r3, [r7, #28]
 8003bc8:	005b      	lsls	r3, r3, #1
 8003bca:	2203      	movs	r2, #3
 8003bcc:	fa02 f303 	lsl.w	r3, r2, r3
 8003bd0:	43db      	mvns	r3, r3
 8003bd2:	69ba      	ldr	r2, [r7, #24]
 8003bd4:	4013      	ands	r3, r2
 8003bd6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8003bd8:	683b      	ldr	r3, [r7, #0]
 8003bda:	689a      	ldr	r2, [r3, #8]
 8003bdc:	69fb      	ldr	r3, [r7, #28]
 8003bde:	005b      	lsls	r3, r3, #1
 8003be0:	fa02 f303 	lsl.w	r3, r2, r3
 8003be4:	69ba      	ldr	r2, [r7, #24]
 8003be6:	4313      	orrs	r3, r2
 8003be8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	69ba      	ldr	r2, [r7, #24]
 8003bee:	60da      	str	r2, [r3, #12]
 8003bf0:	e002      	b.n	8003bf8 <HAL_GPIO_Init+0x25c>
 8003bf2:	bf00      	nop
 8003bf4:	08015708 	.word	0x08015708
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003bf8:	683b      	ldr	r3, [r7, #0]
 8003bfa:	685b      	ldr	r3, [r3, #4]
 8003bfc:	f003 0303 	and.w	r3, r3, #3
 8003c00:	2b02      	cmp	r3, #2
 8003c02:	f040 8134 	bne.w	8003e6e <HAL_GPIO_Init+0x4d2>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 8003c06:	683b      	ldr	r3, [r7, #0]
 8003c08:	691b      	ldr	r3, [r3, #16]
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	f000 810b 	beq.w	8003e26 <HAL_GPIO_Init+0x48a>
 8003c10:	683b      	ldr	r3, [r7, #0]
 8003c12:	691b      	ldr	r3, [r3, #16]
 8003c14:	2b01      	cmp	r3, #1
 8003c16:	f000 8106 	beq.w	8003e26 <HAL_GPIO_Init+0x48a>
 8003c1a:	683b      	ldr	r3, [r7, #0]
 8003c1c:	691b      	ldr	r3, [r3, #16]
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	f000 8101 	beq.w	8003e26 <HAL_GPIO_Init+0x48a>
 8003c24:	683b      	ldr	r3, [r7, #0]
 8003c26:	691b      	ldr	r3, [r3, #16]
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	f000 80fc 	beq.w	8003e26 <HAL_GPIO_Init+0x48a>
 8003c2e:	683b      	ldr	r3, [r7, #0]
 8003c30:	691b      	ldr	r3, [r3, #16]
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	f000 80f7 	beq.w	8003e26 <HAL_GPIO_Init+0x48a>
 8003c38:	683b      	ldr	r3, [r7, #0]
 8003c3a:	691b      	ldr	r3, [r3, #16]
 8003c3c:	2b01      	cmp	r3, #1
 8003c3e:	f000 80f2 	beq.w	8003e26 <HAL_GPIO_Init+0x48a>
 8003c42:	683b      	ldr	r3, [r7, #0]
 8003c44:	691b      	ldr	r3, [r3, #16]
 8003c46:	2b02      	cmp	r3, #2
 8003c48:	f000 80ed 	beq.w	8003e26 <HAL_GPIO_Init+0x48a>
 8003c4c:	683b      	ldr	r3, [r7, #0]
 8003c4e:	691b      	ldr	r3, [r3, #16]
 8003c50:	2b02      	cmp	r3, #2
 8003c52:	f000 80e8 	beq.w	8003e26 <HAL_GPIO_Init+0x48a>
 8003c56:	683b      	ldr	r3, [r7, #0]
 8003c58:	691b      	ldr	r3, [r3, #16]
 8003c5a:	2b02      	cmp	r3, #2
 8003c5c:	f000 80e3 	beq.w	8003e26 <HAL_GPIO_Init+0x48a>
 8003c60:	683b      	ldr	r3, [r7, #0]
 8003c62:	691b      	ldr	r3, [r3, #16]
 8003c64:	2b03      	cmp	r3, #3
 8003c66:	f000 80de 	beq.w	8003e26 <HAL_GPIO_Init+0x48a>
 8003c6a:	683b      	ldr	r3, [r7, #0]
 8003c6c:	691b      	ldr	r3, [r3, #16]
 8003c6e:	2b03      	cmp	r3, #3
 8003c70:	f000 80d9 	beq.w	8003e26 <HAL_GPIO_Init+0x48a>
 8003c74:	683b      	ldr	r3, [r7, #0]
 8003c76:	691b      	ldr	r3, [r3, #16]
 8003c78:	2b03      	cmp	r3, #3
 8003c7a:	f000 80d4 	beq.w	8003e26 <HAL_GPIO_Init+0x48a>
 8003c7e:	683b      	ldr	r3, [r7, #0]
 8003c80:	691b      	ldr	r3, [r3, #16]
 8003c82:	2b03      	cmp	r3, #3
 8003c84:	f000 80cf 	beq.w	8003e26 <HAL_GPIO_Init+0x48a>
 8003c88:	683b      	ldr	r3, [r7, #0]
 8003c8a:	691b      	ldr	r3, [r3, #16]
 8003c8c:	2b03      	cmp	r3, #3
 8003c8e:	f000 80ca 	beq.w	8003e26 <HAL_GPIO_Init+0x48a>
 8003c92:	683b      	ldr	r3, [r7, #0]
 8003c94:	691b      	ldr	r3, [r3, #16]
 8003c96:	2b03      	cmp	r3, #3
 8003c98:	f000 80c5 	beq.w	8003e26 <HAL_GPIO_Init+0x48a>
 8003c9c:	683b      	ldr	r3, [r7, #0]
 8003c9e:	691b      	ldr	r3, [r3, #16]
 8003ca0:	2b04      	cmp	r3, #4
 8003ca2:	f000 80c0 	beq.w	8003e26 <HAL_GPIO_Init+0x48a>
 8003ca6:	683b      	ldr	r3, [r7, #0]
 8003ca8:	691b      	ldr	r3, [r3, #16]
 8003caa:	2b04      	cmp	r3, #4
 8003cac:	f000 80bb 	beq.w	8003e26 <HAL_GPIO_Init+0x48a>
 8003cb0:	683b      	ldr	r3, [r7, #0]
 8003cb2:	691b      	ldr	r3, [r3, #16]
 8003cb4:	2b04      	cmp	r3, #4
 8003cb6:	f000 80b6 	beq.w	8003e26 <HAL_GPIO_Init+0x48a>
 8003cba:	683b      	ldr	r3, [r7, #0]
 8003cbc:	691b      	ldr	r3, [r3, #16]
 8003cbe:	2b04      	cmp	r3, #4
 8003cc0:	f000 80b1 	beq.w	8003e26 <HAL_GPIO_Init+0x48a>
 8003cc4:	683b      	ldr	r3, [r7, #0]
 8003cc6:	691b      	ldr	r3, [r3, #16]
 8003cc8:	2b04      	cmp	r3, #4
 8003cca:	f000 80ac 	beq.w	8003e26 <HAL_GPIO_Init+0x48a>
 8003cce:	683b      	ldr	r3, [r7, #0]
 8003cd0:	691b      	ldr	r3, [r3, #16]
 8003cd2:	2b05      	cmp	r3, #5
 8003cd4:	f000 80a7 	beq.w	8003e26 <HAL_GPIO_Init+0x48a>
 8003cd8:	683b      	ldr	r3, [r7, #0]
 8003cda:	691b      	ldr	r3, [r3, #16]
 8003cdc:	2b05      	cmp	r3, #5
 8003cde:	f000 80a2 	beq.w	8003e26 <HAL_GPIO_Init+0x48a>
 8003ce2:	683b      	ldr	r3, [r7, #0]
 8003ce4:	691b      	ldr	r3, [r3, #16]
 8003ce6:	2b05      	cmp	r3, #5
 8003ce8:	f000 809d 	beq.w	8003e26 <HAL_GPIO_Init+0x48a>
 8003cec:	683b      	ldr	r3, [r7, #0]
 8003cee:	691b      	ldr	r3, [r3, #16]
 8003cf0:	2b05      	cmp	r3, #5
 8003cf2:	f000 8098 	beq.w	8003e26 <HAL_GPIO_Init+0x48a>
 8003cf6:	683b      	ldr	r3, [r7, #0]
 8003cf8:	691b      	ldr	r3, [r3, #16]
 8003cfa:	2b05      	cmp	r3, #5
 8003cfc:	f000 8093 	beq.w	8003e26 <HAL_GPIO_Init+0x48a>
 8003d00:	683b      	ldr	r3, [r7, #0]
 8003d02:	691b      	ldr	r3, [r3, #16]
 8003d04:	2b05      	cmp	r3, #5
 8003d06:	f000 808e 	beq.w	8003e26 <HAL_GPIO_Init+0x48a>
 8003d0a:	683b      	ldr	r3, [r7, #0]
 8003d0c:	691b      	ldr	r3, [r3, #16]
 8003d0e:	2b06      	cmp	r3, #6
 8003d10:	f000 8089 	beq.w	8003e26 <HAL_GPIO_Init+0x48a>
 8003d14:	683b      	ldr	r3, [r7, #0]
 8003d16:	691b      	ldr	r3, [r3, #16]
 8003d18:	2b06      	cmp	r3, #6
 8003d1a:	f000 8084 	beq.w	8003e26 <HAL_GPIO_Init+0x48a>
 8003d1e:	683b      	ldr	r3, [r7, #0]
 8003d20:	691b      	ldr	r3, [r3, #16]
 8003d22:	2b07      	cmp	r3, #7
 8003d24:	d07f      	beq.n	8003e26 <HAL_GPIO_Init+0x48a>
 8003d26:	683b      	ldr	r3, [r7, #0]
 8003d28:	691b      	ldr	r3, [r3, #16]
 8003d2a:	2b07      	cmp	r3, #7
 8003d2c:	d07b      	beq.n	8003e26 <HAL_GPIO_Init+0x48a>
 8003d2e:	683b      	ldr	r3, [r7, #0]
 8003d30:	691b      	ldr	r3, [r3, #16]
 8003d32:	2b07      	cmp	r3, #7
 8003d34:	d077      	beq.n	8003e26 <HAL_GPIO_Init+0x48a>
 8003d36:	683b      	ldr	r3, [r7, #0]
 8003d38:	691b      	ldr	r3, [r3, #16]
 8003d3a:	2b07      	cmp	r3, #7
 8003d3c:	d073      	beq.n	8003e26 <HAL_GPIO_Init+0x48a>
 8003d3e:	683b      	ldr	r3, [r7, #0]
 8003d40:	691b      	ldr	r3, [r3, #16]
 8003d42:	2b07      	cmp	r3, #7
 8003d44:	d06f      	beq.n	8003e26 <HAL_GPIO_Init+0x48a>
 8003d46:	683b      	ldr	r3, [r7, #0]
 8003d48:	691b      	ldr	r3, [r3, #16]
 8003d4a:	2b07      	cmp	r3, #7
 8003d4c:	d06b      	beq.n	8003e26 <HAL_GPIO_Init+0x48a>
 8003d4e:	683b      	ldr	r3, [r7, #0]
 8003d50:	691b      	ldr	r3, [r3, #16]
 8003d52:	2b07      	cmp	r3, #7
 8003d54:	d067      	beq.n	8003e26 <HAL_GPIO_Init+0x48a>
 8003d56:	683b      	ldr	r3, [r7, #0]
 8003d58:	691b      	ldr	r3, [r3, #16]
 8003d5a:	2b08      	cmp	r3, #8
 8003d5c:	d063      	beq.n	8003e26 <HAL_GPIO_Init+0x48a>
 8003d5e:	683b      	ldr	r3, [r7, #0]
 8003d60:	691b      	ldr	r3, [r3, #16]
 8003d62:	2b08      	cmp	r3, #8
 8003d64:	d05f      	beq.n	8003e26 <HAL_GPIO_Init+0x48a>
 8003d66:	683b      	ldr	r3, [r7, #0]
 8003d68:	691b      	ldr	r3, [r3, #16]
 8003d6a:	2b08      	cmp	r3, #8
 8003d6c:	d05b      	beq.n	8003e26 <HAL_GPIO_Init+0x48a>
 8003d6e:	683b      	ldr	r3, [r7, #0]
 8003d70:	691b      	ldr	r3, [r3, #16]
 8003d72:	2b08      	cmp	r3, #8
 8003d74:	d057      	beq.n	8003e26 <HAL_GPIO_Init+0x48a>
 8003d76:	683b      	ldr	r3, [r7, #0]
 8003d78:	691b      	ldr	r3, [r3, #16]
 8003d7a:	2b08      	cmp	r3, #8
 8003d7c:	d053      	beq.n	8003e26 <HAL_GPIO_Init+0x48a>
 8003d7e:	683b      	ldr	r3, [r7, #0]
 8003d80:	691b      	ldr	r3, [r3, #16]
 8003d82:	2b08      	cmp	r3, #8
 8003d84:	d04f      	beq.n	8003e26 <HAL_GPIO_Init+0x48a>
 8003d86:	683b      	ldr	r3, [r7, #0]
 8003d88:	691b      	ldr	r3, [r3, #16]
 8003d8a:	2b08      	cmp	r3, #8
 8003d8c:	d04b      	beq.n	8003e26 <HAL_GPIO_Init+0x48a>
 8003d8e:	683b      	ldr	r3, [r7, #0]
 8003d90:	691b      	ldr	r3, [r3, #16]
 8003d92:	2b09      	cmp	r3, #9
 8003d94:	d047      	beq.n	8003e26 <HAL_GPIO_Init+0x48a>
 8003d96:	683b      	ldr	r3, [r7, #0]
 8003d98:	691b      	ldr	r3, [r3, #16]
 8003d9a:	2b09      	cmp	r3, #9
 8003d9c:	d043      	beq.n	8003e26 <HAL_GPIO_Init+0x48a>
 8003d9e:	683b      	ldr	r3, [r7, #0]
 8003da0:	691b      	ldr	r3, [r3, #16]
 8003da2:	2b09      	cmp	r3, #9
 8003da4:	d03f      	beq.n	8003e26 <HAL_GPIO_Init+0x48a>
 8003da6:	683b      	ldr	r3, [r7, #0]
 8003da8:	691b      	ldr	r3, [r3, #16]
 8003daa:	2b09      	cmp	r3, #9
 8003dac:	d03b      	beq.n	8003e26 <HAL_GPIO_Init+0x48a>
 8003dae:	683b      	ldr	r3, [r7, #0]
 8003db0:	691b      	ldr	r3, [r3, #16]
 8003db2:	2b09      	cmp	r3, #9
 8003db4:	d037      	beq.n	8003e26 <HAL_GPIO_Init+0x48a>
 8003db6:	683b      	ldr	r3, [r7, #0]
 8003db8:	691b      	ldr	r3, [r3, #16]
 8003dba:	2b09      	cmp	r3, #9
 8003dbc:	d033      	beq.n	8003e26 <HAL_GPIO_Init+0x48a>
 8003dbe:	683b      	ldr	r3, [r7, #0]
 8003dc0:	691b      	ldr	r3, [r3, #16]
 8003dc2:	2b09      	cmp	r3, #9
 8003dc4:	d02f      	beq.n	8003e26 <HAL_GPIO_Init+0x48a>
 8003dc6:	683b      	ldr	r3, [r7, #0]
 8003dc8:	691b      	ldr	r3, [r3, #16]
 8003dca:	2b0a      	cmp	r3, #10
 8003dcc:	d02b      	beq.n	8003e26 <HAL_GPIO_Init+0x48a>
 8003dce:	683b      	ldr	r3, [r7, #0]
 8003dd0:	691b      	ldr	r3, [r3, #16]
 8003dd2:	2b0a      	cmp	r3, #10
 8003dd4:	d027      	beq.n	8003e26 <HAL_GPIO_Init+0x48a>
 8003dd6:	683b      	ldr	r3, [r7, #0]
 8003dd8:	691b      	ldr	r3, [r3, #16]
 8003dda:	2b0a      	cmp	r3, #10
 8003ddc:	d023      	beq.n	8003e26 <HAL_GPIO_Init+0x48a>
 8003dde:	683b      	ldr	r3, [r7, #0]
 8003de0:	691b      	ldr	r3, [r3, #16]
 8003de2:	2b0a      	cmp	r3, #10
 8003de4:	d01f      	beq.n	8003e26 <HAL_GPIO_Init+0x48a>
 8003de6:	683b      	ldr	r3, [r7, #0]
 8003de8:	691b      	ldr	r3, [r3, #16]
 8003dea:	2b0b      	cmp	r3, #11
 8003dec:	d01b      	beq.n	8003e26 <HAL_GPIO_Init+0x48a>
 8003dee:	683b      	ldr	r3, [r7, #0]
 8003df0:	691b      	ldr	r3, [r3, #16]
 8003df2:	2b0c      	cmp	r3, #12
 8003df4:	d017      	beq.n	8003e26 <HAL_GPIO_Init+0x48a>
 8003df6:	683b      	ldr	r3, [r7, #0]
 8003df8:	691b      	ldr	r3, [r3, #16]
 8003dfa:	2b0c      	cmp	r3, #12
 8003dfc:	d013      	beq.n	8003e26 <HAL_GPIO_Init+0x48a>
 8003dfe:	683b      	ldr	r3, [r7, #0]
 8003e00:	691b      	ldr	r3, [r3, #16]
 8003e02:	2b0c      	cmp	r3, #12
 8003e04:	d00f      	beq.n	8003e26 <HAL_GPIO_Init+0x48a>
 8003e06:	683b      	ldr	r3, [r7, #0]
 8003e08:	691b      	ldr	r3, [r3, #16]
 8003e0a:	2b0f      	cmp	r3, #15
 8003e0c:	d00b      	beq.n	8003e26 <HAL_GPIO_Init+0x48a>
 8003e0e:	683b      	ldr	r3, [r7, #0]
 8003e10:	691b      	ldr	r3, [r3, #16]
 8003e12:	2b0d      	cmp	r3, #13
 8003e14:	d007      	beq.n	8003e26 <HAL_GPIO_Init+0x48a>
 8003e16:	683b      	ldr	r3, [r7, #0]
 8003e18:	691b      	ldr	r3, [r3, #16]
 8003e1a:	2b0e      	cmp	r3, #14
 8003e1c:	d003      	beq.n	8003e26 <HAL_GPIO_Init+0x48a>
 8003e1e:	21db      	movs	r1, #219	; 0xdb
 8003e20:	4888      	ldr	r0, [pc, #544]	; (8004044 <HAL_GPIO_Init+0x6a8>)
 8003e22:	f7fe feb2 	bl	8002b8a <assert_failed>

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8003e26:	69fb      	ldr	r3, [r7, #28]
 8003e28:	08da      	lsrs	r2, r3, #3
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	3208      	adds	r2, #8
 8003e2e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003e32:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8003e34:	69fb      	ldr	r3, [r7, #28]
 8003e36:	f003 0307 	and.w	r3, r3, #7
 8003e3a:	009b      	lsls	r3, r3, #2
 8003e3c:	220f      	movs	r2, #15
 8003e3e:	fa02 f303 	lsl.w	r3, r2, r3
 8003e42:	43db      	mvns	r3, r3
 8003e44:	69ba      	ldr	r2, [r7, #24]
 8003e46:	4013      	ands	r3, r2
 8003e48:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8003e4a:	683b      	ldr	r3, [r7, #0]
 8003e4c:	691a      	ldr	r2, [r3, #16]
 8003e4e:	69fb      	ldr	r3, [r7, #28]
 8003e50:	f003 0307 	and.w	r3, r3, #7
 8003e54:	009b      	lsls	r3, r3, #2
 8003e56:	fa02 f303 	lsl.w	r3, r2, r3
 8003e5a:	69ba      	ldr	r2, [r7, #24]
 8003e5c:	4313      	orrs	r3, r2
 8003e5e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8003e60:	69fb      	ldr	r3, [r7, #28]
 8003e62:	08da      	lsrs	r2, r3, #3
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	3208      	adds	r2, #8
 8003e68:	69b9      	ldr	r1, [r7, #24]
 8003e6a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8003e74:	69fb      	ldr	r3, [r7, #28]
 8003e76:	005b      	lsls	r3, r3, #1
 8003e78:	2203      	movs	r2, #3
 8003e7a:	fa02 f303 	lsl.w	r3, r2, r3
 8003e7e:	43db      	mvns	r3, r3
 8003e80:	69ba      	ldr	r2, [r7, #24]
 8003e82:	4013      	ands	r3, r2
 8003e84:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8003e86:	683b      	ldr	r3, [r7, #0]
 8003e88:	685b      	ldr	r3, [r3, #4]
 8003e8a:	f003 0203 	and.w	r2, r3, #3
 8003e8e:	69fb      	ldr	r3, [r7, #28]
 8003e90:	005b      	lsls	r3, r3, #1
 8003e92:	fa02 f303 	lsl.w	r3, r2, r3
 8003e96:	69ba      	ldr	r2, [r7, #24]
 8003e98:	4313      	orrs	r3, r2
 8003e9a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	69ba      	ldr	r2, [r7, #24]
 8003ea0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003ea2:	683b      	ldr	r3, [r7, #0]
 8003ea4:	685b      	ldr	r3, [r3, #4]
 8003ea6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	f000 80be 	beq.w	800402c <HAL_GPIO_Init+0x690>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003eb0:	4b65      	ldr	r3, [pc, #404]	; (8004048 <HAL_GPIO_Init+0x6ac>)
 8003eb2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003eb4:	4a64      	ldr	r2, [pc, #400]	; (8004048 <HAL_GPIO_Init+0x6ac>)
 8003eb6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003eba:	6453      	str	r3, [r2, #68]	; 0x44
 8003ebc:	4b62      	ldr	r3, [pc, #392]	; (8004048 <HAL_GPIO_Init+0x6ac>)
 8003ebe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ec0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003ec4:	60fb      	str	r3, [r7, #12]
 8003ec6:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8003ec8:	4a60      	ldr	r2, [pc, #384]	; (800404c <HAL_GPIO_Init+0x6b0>)
 8003eca:	69fb      	ldr	r3, [r7, #28]
 8003ecc:	089b      	lsrs	r3, r3, #2
 8003ece:	3302      	adds	r3, #2
 8003ed0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003ed4:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8003ed6:	69fb      	ldr	r3, [r7, #28]
 8003ed8:	f003 0303 	and.w	r3, r3, #3
 8003edc:	009b      	lsls	r3, r3, #2
 8003ede:	220f      	movs	r2, #15
 8003ee0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ee4:	43db      	mvns	r3, r3
 8003ee6:	69ba      	ldr	r2, [r7, #24]
 8003ee8:	4013      	ands	r3, r2
 8003eea:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	4a58      	ldr	r2, [pc, #352]	; (8004050 <HAL_GPIO_Init+0x6b4>)
 8003ef0:	4293      	cmp	r3, r2
 8003ef2:	d037      	beq.n	8003f64 <HAL_GPIO_Init+0x5c8>
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	4a57      	ldr	r2, [pc, #348]	; (8004054 <HAL_GPIO_Init+0x6b8>)
 8003ef8:	4293      	cmp	r3, r2
 8003efa:	d031      	beq.n	8003f60 <HAL_GPIO_Init+0x5c4>
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	4a56      	ldr	r2, [pc, #344]	; (8004058 <HAL_GPIO_Init+0x6bc>)
 8003f00:	4293      	cmp	r3, r2
 8003f02:	d02b      	beq.n	8003f5c <HAL_GPIO_Init+0x5c0>
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	4a55      	ldr	r2, [pc, #340]	; (800405c <HAL_GPIO_Init+0x6c0>)
 8003f08:	4293      	cmp	r3, r2
 8003f0a:	d025      	beq.n	8003f58 <HAL_GPIO_Init+0x5bc>
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	4a54      	ldr	r2, [pc, #336]	; (8004060 <HAL_GPIO_Init+0x6c4>)
 8003f10:	4293      	cmp	r3, r2
 8003f12:	d01f      	beq.n	8003f54 <HAL_GPIO_Init+0x5b8>
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	4a53      	ldr	r2, [pc, #332]	; (8004064 <HAL_GPIO_Init+0x6c8>)
 8003f18:	4293      	cmp	r3, r2
 8003f1a:	d019      	beq.n	8003f50 <HAL_GPIO_Init+0x5b4>
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	4a52      	ldr	r2, [pc, #328]	; (8004068 <HAL_GPIO_Init+0x6cc>)
 8003f20:	4293      	cmp	r3, r2
 8003f22:	d013      	beq.n	8003f4c <HAL_GPIO_Init+0x5b0>
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	4a51      	ldr	r2, [pc, #324]	; (800406c <HAL_GPIO_Init+0x6d0>)
 8003f28:	4293      	cmp	r3, r2
 8003f2a:	d00d      	beq.n	8003f48 <HAL_GPIO_Init+0x5ac>
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	4a50      	ldr	r2, [pc, #320]	; (8004070 <HAL_GPIO_Init+0x6d4>)
 8003f30:	4293      	cmp	r3, r2
 8003f32:	d007      	beq.n	8003f44 <HAL_GPIO_Init+0x5a8>
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	4a4f      	ldr	r2, [pc, #316]	; (8004074 <HAL_GPIO_Init+0x6d8>)
 8003f38:	4293      	cmp	r3, r2
 8003f3a:	d101      	bne.n	8003f40 <HAL_GPIO_Init+0x5a4>
 8003f3c:	2309      	movs	r3, #9
 8003f3e:	e012      	b.n	8003f66 <HAL_GPIO_Init+0x5ca>
 8003f40:	230a      	movs	r3, #10
 8003f42:	e010      	b.n	8003f66 <HAL_GPIO_Init+0x5ca>
 8003f44:	2308      	movs	r3, #8
 8003f46:	e00e      	b.n	8003f66 <HAL_GPIO_Init+0x5ca>
 8003f48:	2307      	movs	r3, #7
 8003f4a:	e00c      	b.n	8003f66 <HAL_GPIO_Init+0x5ca>
 8003f4c:	2306      	movs	r3, #6
 8003f4e:	e00a      	b.n	8003f66 <HAL_GPIO_Init+0x5ca>
 8003f50:	2305      	movs	r3, #5
 8003f52:	e008      	b.n	8003f66 <HAL_GPIO_Init+0x5ca>
 8003f54:	2304      	movs	r3, #4
 8003f56:	e006      	b.n	8003f66 <HAL_GPIO_Init+0x5ca>
 8003f58:	2303      	movs	r3, #3
 8003f5a:	e004      	b.n	8003f66 <HAL_GPIO_Init+0x5ca>
 8003f5c:	2302      	movs	r3, #2
 8003f5e:	e002      	b.n	8003f66 <HAL_GPIO_Init+0x5ca>
 8003f60:	2301      	movs	r3, #1
 8003f62:	e000      	b.n	8003f66 <HAL_GPIO_Init+0x5ca>
 8003f64:	2300      	movs	r3, #0
 8003f66:	69fa      	ldr	r2, [r7, #28]
 8003f68:	f002 0203 	and.w	r2, r2, #3
 8003f6c:	0092      	lsls	r2, r2, #2
 8003f6e:	4093      	lsls	r3, r2
 8003f70:	69ba      	ldr	r2, [r7, #24]
 8003f72:	4313      	orrs	r3, r2
 8003f74:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8003f76:	4935      	ldr	r1, [pc, #212]	; (800404c <HAL_GPIO_Init+0x6b0>)
 8003f78:	69fb      	ldr	r3, [r7, #28]
 8003f7a:	089b      	lsrs	r3, r3, #2
 8003f7c:	3302      	adds	r3, #2
 8003f7e:	69ba      	ldr	r2, [r7, #24]
 8003f80:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003f84:	4b3c      	ldr	r3, [pc, #240]	; (8004078 <HAL_GPIO_Init+0x6dc>)
 8003f86:	689b      	ldr	r3, [r3, #8]
 8003f88:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003f8a:	693b      	ldr	r3, [r7, #16]
 8003f8c:	43db      	mvns	r3, r3
 8003f8e:	69ba      	ldr	r2, [r7, #24]
 8003f90:	4013      	ands	r3, r2
 8003f92:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003f94:	683b      	ldr	r3, [r7, #0]
 8003f96:	685b      	ldr	r3, [r3, #4]
 8003f98:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d003      	beq.n	8003fa8 <HAL_GPIO_Init+0x60c>
        {
          temp |= iocurrent;
 8003fa0:	69ba      	ldr	r2, [r7, #24]
 8003fa2:	693b      	ldr	r3, [r7, #16]
 8003fa4:	4313      	orrs	r3, r2
 8003fa6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003fa8:	4a33      	ldr	r2, [pc, #204]	; (8004078 <HAL_GPIO_Init+0x6dc>)
 8003faa:	69bb      	ldr	r3, [r7, #24]
 8003fac:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003fae:	4b32      	ldr	r3, [pc, #200]	; (8004078 <HAL_GPIO_Init+0x6dc>)
 8003fb0:	68db      	ldr	r3, [r3, #12]
 8003fb2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003fb4:	693b      	ldr	r3, [r7, #16]
 8003fb6:	43db      	mvns	r3, r3
 8003fb8:	69ba      	ldr	r2, [r7, #24]
 8003fba:	4013      	ands	r3, r2
 8003fbc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003fbe:	683b      	ldr	r3, [r7, #0]
 8003fc0:	685b      	ldr	r3, [r3, #4]
 8003fc2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d003      	beq.n	8003fd2 <HAL_GPIO_Init+0x636>
        {
          temp |= iocurrent;
 8003fca:	69ba      	ldr	r2, [r7, #24]
 8003fcc:	693b      	ldr	r3, [r7, #16]
 8003fce:	4313      	orrs	r3, r2
 8003fd0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003fd2:	4a29      	ldr	r2, [pc, #164]	; (8004078 <HAL_GPIO_Init+0x6dc>)
 8003fd4:	69bb      	ldr	r3, [r7, #24]
 8003fd6:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003fd8:	4b27      	ldr	r3, [pc, #156]	; (8004078 <HAL_GPIO_Init+0x6dc>)
 8003fda:	685b      	ldr	r3, [r3, #4]
 8003fdc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003fde:	693b      	ldr	r3, [r7, #16]
 8003fe0:	43db      	mvns	r3, r3
 8003fe2:	69ba      	ldr	r2, [r7, #24]
 8003fe4:	4013      	ands	r3, r2
 8003fe6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003fe8:	683b      	ldr	r3, [r7, #0]
 8003fea:	685b      	ldr	r3, [r3, #4]
 8003fec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d003      	beq.n	8003ffc <HAL_GPIO_Init+0x660>
        {
          temp |= iocurrent;
 8003ff4:	69ba      	ldr	r2, [r7, #24]
 8003ff6:	693b      	ldr	r3, [r7, #16]
 8003ff8:	4313      	orrs	r3, r2
 8003ffa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003ffc:	4a1e      	ldr	r2, [pc, #120]	; (8004078 <HAL_GPIO_Init+0x6dc>)
 8003ffe:	69bb      	ldr	r3, [r7, #24]
 8004000:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004002:	4b1d      	ldr	r3, [pc, #116]	; (8004078 <HAL_GPIO_Init+0x6dc>)
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004008:	693b      	ldr	r3, [r7, #16]
 800400a:	43db      	mvns	r3, r3
 800400c:	69ba      	ldr	r2, [r7, #24]
 800400e:	4013      	ands	r3, r2
 8004010:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004012:	683b      	ldr	r3, [r7, #0]
 8004014:	685b      	ldr	r3, [r3, #4]
 8004016:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800401a:	2b00      	cmp	r3, #0
 800401c:	d003      	beq.n	8004026 <HAL_GPIO_Init+0x68a>
        {
          temp |= iocurrent;
 800401e:	69ba      	ldr	r2, [r7, #24]
 8004020:	693b      	ldr	r3, [r7, #16]
 8004022:	4313      	orrs	r3, r2
 8004024:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004026:	4a14      	ldr	r2, [pc, #80]	; (8004078 <HAL_GPIO_Init+0x6dc>)
 8004028:	69bb      	ldr	r3, [r7, #24]
 800402a:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 800402c:	69fb      	ldr	r3, [r7, #28]
 800402e:	3301      	adds	r3, #1
 8004030:	61fb      	str	r3, [r7, #28]
 8004032:	69fb      	ldr	r3, [r7, #28]
 8004034:	2b0f      	cmp	r3, #15
 8004036:	f67f ad4d 	bls.w	8003ad4 <HAL_GPIO_Init+0x138>
      }
    }
  }
}
 800403a:	bf00      	nop
 800403c:	bf00      	nop
 800403e:	3720      	adds	r7, #32
 8004040:	46bd      	mov	sp, r7
 8004042:	bd80      	pop	{r7, pc}
 8004044:	08015708 	.word	0x08015708
 8004048:	40023800 	.word	0x40023800
 800404c:	40013800 	.word	0x40013800
 8004050:	40020000 	.word	0x40020000
 8004054:	40020400 	.word	0x40020400
 8004058:	40020800 	.word	0x40020800
 800405c:	40020c00 	.word	0x40020c00
 8004060:	40021000 	.word	0x40021000
 8004064:	40021400 	.word	0x40021400
 8004068:	40021800 	.word	0x40021800
 800406c:	40021c00 	.word	0x40021c00
 8004070:	40022000 	.word	0x40022000
 8004074:	40022400 	.word	0x40022400
 8004078:	40013c00 	.word	0x40013c00

0800407c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800407c:	b580      	push	{r7, lr}
 800407e:	b084      	sub	sp, #16
 8004080:	af00      	add	r7, sp, #0
 8004082:	6078      	str	r0, [r7, #4]
 8004084:	460b      	mov	r3, r1
 8004086:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8004088:	887b      	ldrh	r3, [r7, #2]
 800408a:	2b00      	cmp	r3, #0
 800408c:	d104      	bne.n	8004098 <HAL_GPIO_ReadPin+0x1c>
 800408e:	f240 1177 	movw	r1, #375	; 0x177
 8004092:	4809      	ldr	r0, [pc, #36]	; (80040b8 <HAL_GPIO_ReadPin+0x3c>)
 8004094:	f7fe fd79 	bl	8002b8a <assert_failed>

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	691a      	ldr	r2, [r3, #16]
 800409c:	887b      	ldrh	r3, [r7, #2]
 800409e:	4013      	ands	r3, r2
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d002      	beq.n	80040aa <HAL_GPIO_ReadPin+0x2e>
  {
    bitstatus = GPIO_PIN_SET;
 80040a4:	2301      	movs	r3, #1
 80040a6:	73fb      	strb	r3, [r7, #15]
 80040a8:	e001      	b.n	80040ae <HAL_GPIO_ReadPin+0x32>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80040aa:	2300      	movs	r3, #0
 80040ac:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80040ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80040b0:	4618      	mov	r0, r3
 80040b2:	3710      	adds	r7, #16
 80040b4:	46bd      	mov	sp, r7
 80040b6:	bd80      	pop	{r7, pc}
 80040b8:	08015708 	.word	0x08015708

080040bc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80040bc:	b580      	push	{r7, lr}
 80040be:	b082      	sub	sp, #8
 80040c0:	af00      	add	r7, sp, #0
 80040c2:	6078      	str	r0, [r7, #4]
 80040c4:	460b      	mov	r3, r1
 80040c6:	807b      	strh	r3, [r7, #2]
 80040c8:	4613      	mov	r3, r2
 80040ca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 80040cc:	887b      	ldrh	r3, [r7, #2]
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d104      	bne.n	80040dc <HAL_GPIO_WritePin+0x20>
 80040d2:	f240 1197 	movw	r1, #407	; 0x197
 80040d6:	480e      	ldr	r0, [pc, #56]	; (8004110 <HAL_GPIO_WritePin+0x54>)
 80040d8:	f7fe fd57 	bl	8002b8a <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 80040dc:	787b      	ldrb	r3, [r7, #1]
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d007      	beq.n	80040f2 <HAL_GPIO_WritePin+0x36>
 80040e2:	787b      	ldrb	r3, [r7, #1]
 80040e4:	2b01      	cmp	r3, #1
 80040e6:	d004      	beq.n	80040f2 <HAL_GPIO_WritePin+0x36>
 80040e8:	f44f 71cc 	mov.w	r1, #408	; 0x198
 80040ec:	4808      	ldr	r0, [pc, #32]	; (8004110 <HAL_GPIO_WritePin+0x54>)
 80040ee:	f7fe fd4c 	bl	8002b8a <assert_failed>

  if(PinState != GPIO_PIN_RESET)
 80040f2:	787b      	ldrb	r3, [r7, #1]
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d003      	beq.n	8004100 <HAL_GPIO_WritePin+0x44>
  {
    GPIOx->BSRR = GPIO_Pin;
 80040f8:	887a      	ldrh	r2, [r7, #2]
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80040fe:	e003      	b.n	8004108 <HAL_GPIO_WritePin+0x4c>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8004100:	887b      	ldrh	r3, [r7, #2]
 8004102:	041a      	lsls	r2, r3, #16
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	619a      	str	r2, [r3, #24]
}
 8004108:	bf00      	nop
 800410a:	3708      	adds	r7, #8
 800410c:	46bd      	mov	sp, r7
 800410e:	bd80      	pop	{r7, pc}
 8004110:	08015708 	.word	0x08015708

08004114 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004114:	b580      	push	{r7, lr}
 8004116:	b082      	sub	sp, #8
 8004118:	af00      	add	r7, sp, #0
 800411a:	4603      	mov	r3, r0
 800411c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800411e:	4b08      	ldr	r3, [pc, #32]	; (8004140 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004120:	695a      	ldr	r2, [r3, #20]
 8004122:	88fb      	ldrh	r3, [r7, #6]
 8004124:	4013      	ands	r3, r2
 8004126:	2b00      	cmp	r3, #0
 8004128:	d006      	beq.n	8004138 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800412a:	4a05      	ldr	r2, [pc, #20]	; (8004140 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800412c:	88fb      	ldrh	r3, [r7, #6]
 800412e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004130:	88fb      	ldrh	r3, [r7, #6]
 8004132:	4618      	mov	r0, r3
 8004134:	f7fe fce6 	bl	8002b04 <HAL_GPIO_EXTI_Callback>
  }
}
 8004138:	bf00      	nop
 800413a:	3708      	adds	r7, #8
 800413c:	46bd      	mov	sp, r7
 800413e:	bd80      	pop	{r7, pc}
 8004140:	40013c00 	.word	0x40013c00

08004144 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004144:	b580      	push	{r7, lr}
 8004146:	b082      	sub	sp, #8
 8004148:	af00      	add	r7, sp, #0
 800414a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	2b00      	cmp	r3, #0
 8004150:	d101      	bne.n	8004156 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004152:	2301      	movs	r3, #1
 8004154:	e107      	b.n	8004366 <HAL_I2C_Init+0x222>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	4a85      	ldr	r2, [pc, #532]	; (8004370 <HAL_I2C_Init+0x22c>)
 800415c:	4293      	cmp	r3, r2
 800415e:	d013      	beq.n	8004188 <HAL_I2C_Init+0x44>
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	4a83      	ldr	r2, [pc, #524]	; (8004374 <HAL_I2C_Init+0x230>)
 8004166:	4293      	cmp	r3, r2
 8004168:	d00e      	beq.n	8004188 <HAL_I2C_Init+0x44>
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	4a82      	ldr	r2, [pc, #520]	; (8004378 <HAL_I2C_Init+0x234>)
 8004170:	4293      	cmp	r3, r2
 8004172:	d009      	beq.n	8004188 <HAL_I2C_Init+0x44>
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	4a80      	ldr	r2, [pc, #512]	; (800437c <HAL_I2C_Init+0x238>)
 800417a:	4293      	cmp	r3, r2
 800417c:	d004      	beq.n	8004188 <HAL_I2C_Init+0x44>
 800417e:	f240 2119 	movw	r1, #537	; 0x219
 8004182:	487f      	ldr	r0, [pc, #508]	; (8004380 <HAL_I2C_Init+0x23c>)
 8004184:	f7fe fd01 	bl	8002b8a <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS1(hi2c->Init.OwnAddress1));
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	689b      	ldr	r3, [r3, #8]
 800418c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004190:	d304      	bcc.n	800419c <HAL_I2C_Init+0x58>
 8004192:	f240 211a 	movw	r1, #538	; 0x21a
 8004196:	487a      	ldr	r0, [pc, #488]	; (8004380 <HAL_I2C_Init+0x23c>)
 8004198:	f7fe fcf7 	bl	8002b8a <assert_failed>
  assert_param(IS_I2C_ADDRESSING_MODE(hi2c->Init.AddressingMode));
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	68db      	ldr	r3, [r3, #12]
 80041a0:	2b01      	cmp	r3, #1
 80041a2:	d008      	beq.n	80041b6 <HAL_I2C_Init+0x72>
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	68db      	ldr	r3, [r3, #12]
 80041a8:	2b02      	cmp	r3, #2
 80041aa:	d004      	beq.n	80041b6 <HAL_I2C_Init+0x72>
 80041ac:	f240 211b 	movw	r1, #539	; 0x21b
 80041b0:	4873      	ldr	r0, [pc, #460]	; (8004380 <HAL_I2C_Init+0x23c>)
 80041b2:	f7fe fcea 	bl	8002b8a <assert_failed>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	691b      	ldr	r3, [r3, #16]
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d009      	beq.n	80041d2 <HAL_I2C_Init+0x8e>
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	691b      	ldr	r3, [r3, #16]
 80041c2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80041c6:	d004      	beq.n	80041d2 <HAL_I2C_Init+0x8e>
 80041c8:	f44f 7107 	mov.w	r1, #540	; 0x21c
 80041cc:	486c      	ldr	r0, [pc, #432]	; (8004380 <HAL_I2C_Init+0x23c>)
 80041ce:	f7fe fcdc 	bl	8002b8a <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	695b      	ldr	r3, [r3, #20]
 80041d6:	2bff      	cmp	r3, #255	; 0xff
 80041d8:	d904      	bls.n	80041e4 <HAL_I2C_Init+0xa0>
 80041da:	f240 211d 	movw	r1, #541	; 0x21d
 80041de:	4868      	ldr	r0, [pc, #416]	; (8004380 <HAL_I2C_Init+0x23c>)
 80041e0:	f7fe fcd3 	bl	8002b8a <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	699b      	ldr	r3, [r3, #24]
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d020      	beq.n	800422e <HAL_I2C_Init+0xea>
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	699b      	ldr	r3, [r3, #24]
 80041f0:	2b01      	cmp	r3, #1
 80041f2:	d01c      	beq.n	800422e <HAL_I2C_Init+0xea>
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	699b      	ldr	r3, [r3, #24]
 80041f8:	2b02      	cmp	r3, #2
 80041fa:	d018      	beq.n	800422e <HAL_I2C_Init+0xea>
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	699b      	ldr	r3, [r3, #24]
 8004200:	2b03      	cmp	r3, #3
 8004202:	d014      	beq.n	800422e <HAL_I2C_Init+0xea>
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	699b      	ldr	r3, [r3, #24]
 8004208:	2b04      	cmp	r3, #4
 800420a:	d010      	beq.n	800422e <HAL_I2C_Init+0xea>
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	699b      	ldr	r3, [r3, #24]
 8004210:	2b05      	cmp	r3, #5
 8004212:	d00c      	beq.n	800422e <HAL_I2C_Init+0xea>
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	699b      	ldr	r3, [r3, #24]
 8004218:	2b06      	cmp	r3, #6
 800421a:	d008      	beq.n	800422e <HAL_I2C_Init+0xea>
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	699b      	ldr	r3, [r3, #24]
 8004220:	2b07      	cmp	r3, #7
 8004222:	d004      	beq.n	800422e <HAL_I2C_Init+0xea>
 8004224:	f240 211e 	movw	r1, #542	; 0x21e
 8004228:	4855      	ldr	r0, [pc, #340]	; (8004380 <HAL_I2C_Init+0x23c>)
 800422a:	f7fe fcae 	bl	8002b8a <assert_failed>
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	69db      	ldr	r3, [r3, #28]
 8004232:	2b00      	cmp	r3, #0
 8004234:	d009      	beq.n	800424a <HAL_I2C_Init+0x106>
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	69db      	ldr	r3, [r3, #28]
 800423a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800423e:	d004      	beq.n	800424a <HAL_I2C_Init+0x106>
 8004240:	f240 211f 	movw	r1, #543	; 0x21f
 8004244:	484e      	ldr	r0, [pc, #312]	; (8004380 <HAL_I2C_Init+0x23c>)
 8004246:	f7fe fca0 	bl	8002b8a <assert_failed>
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	6a1b      	ldr	r3, [r3, #32]
 800424e:	2b00      	cmp	r3, #0
 8004250:	d009      	beq.n	8004266 <HAL_I2C_Init+0x122>
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	6a1b      	ldr	r3, [r3, #32]
 8004256:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800425a:	d004      	beq.n	8004266 <HAL_I2C_Init+0x122>
 800425c:	f44f 7108 	mov.w	r1, #544	; 0x220
 8004260:	4847      	ldr	r0, [pc, #284]	; (8004380 <HAL_I2C_Init+0x23c>)
 8004262:	f7fe fc92 	bl	8002b8a <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800426c:	b2db      	uxtb	r3, r3
 800426e:	2b00      	cmp	r3, #0
 8004270:	d106      	bne.n	8004280 <HAL_I2C_Init+0x13c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	2200      	movs	r2, #0
 8004276:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800427a:	6878      	ldr	r0, [r7, #4]
 800427c:	f7fd f87c 	bl	8001378 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	2224      	movs	r2, #36	; 0x24
 8004284:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	681a      	ldr	r2, [r3, #0]
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	f022 0201 	bic.w	r2, r2, #1
 8004296:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	685a      	ldr	r2, [r3, #4]
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80042a4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	689a      	ldr	r2, [r3, #8]
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80042b4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	68db      	ldr	r3, [r3, #12]
 80042ba:	2b01      	cmp	r3, #1
 80042bc:	d107      	bne.n	80042ce <HAL_I2C_Init+0x18a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	689a      	ldr	r2, [r3, #8]
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80042ca:	609a      	str	r2, [r3, #8]
 80042cc:	e006      	b.n	80042dc <HAL_I2C_Init+0x198>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	689a      	ldr	r2, [r3, #8]
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80042da:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	68db      	ldr	r3, [r3, #12]
 80042e0:	2b02      	cmp	r3, #2
 80042e2:	d104      	bne.n	80042ee <HAL_I2C_Init+0x1aa>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80042ec:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	6859      	ldr	r1, [r3, #4]
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681a      	ldr	r2, [r3, #0]
 80042f8:	4b22      	ldr	r3, [pc, #136]	; (8004384 <HAL_I2C_Init+0x240>)
 80042fa:	430b      	orrs	r3, r1
 80042fc:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	68da      	ldr	r2, [r3, #12]
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800430c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	691a      	ldr	r2, [r3, #16]
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	695b      	ldr	r3, [r3, #20]
 8004316:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	699b      	ldr	r3, [r3, #24]
 800431e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	430a      	orrs	r2, r1
 8004326:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	69d9      	ldr	r1, [r3, #28]
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	6a1a      	ldr	r2, [r3, #32]
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	430a      	orrs	r2, r1
 8004336:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	681a      	ldr	r2, [r3, #0]
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	f042 0201 	orr.w	r2, r2, #1
 8004346:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	2200      	movs	r2, #0
 800434c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	2220      	movs	r2, #32
 8004352:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	2200      	movs	r2, #0
 800435a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	2200      	movs	r2, #0
 8004360:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8004364:	2300      	movs	r3, #0
}
 8004366:	4618      	mov	r0, r3
 8004368:	3708      	adds	r7, #8
 800436a:	46bd      	mov	sp, r7
 800436c:	bd80      	pop	{r7, pc}
 800436e:	bf00      	nop
 8004370:	40005400 	.word	0x40005400
 8004374:	40005800 	.word	0x40005800
 8004378:	40005c00 	.word	0x40005c00
 800437c:	40006000 	.word	0x40006000
 8004380:	08015744 	.word	0x08015744
 8004384:	02008000 	.word	0x02008000

08004388 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8004388:	b580      	push	{r7, lr}
 800438a:	b088      	sub	sp, #32
 800438c:	af02      	add	r7, sp, #8
 800438e:	60f8      	str	r0, [r7, #12]
 8004390:	607a      	str	r2, [r7, #4]
 8004392:	461a      	mov	r2, r3
 8004394:	460b      	mov	r3, r1
 8004396:	817b      	strh	r3, [r7, #10]
 8004398:	4613      	mov	r3, r2
 800439a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80043a2:	b2db      	uxtb	r3, r3
 80043a4:	2b20      	cmp	r3, #32
 80043a6:	f040 80da 	bne.w	800455e <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80043b0:	2b01      	cmp	r3, #1
 80043b2:	d101      	bne.n	80043b8 <HAL_I2C_Master_Transmit+0x30>
 80043b4:	2302      	movs	r3, #2
 80043b6:	e0d3      	b.n	8004560 <HAL_I2C_Master_Transmit+0x1d8>
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	2201      	movs	r2, #1
 80043bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80043c0:	f7ff f8dc 	bl	800357c <HAL_GetTick>
 80043c4:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80043c6:	697b      	ldr	r3, [r7, #20]
 80043c8:	9300      	str	r3, [sp, #0]
 80043ca:	2319      	movs	r3, #25
 80043cc:	2201      	movs	r2, #1
 80043ce:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80043d2:	68f8      	ldr	r0, [r7, #12]
 80043d4:	f000 fefb 	bl	80051ce <I2C_WaitOnFlagUntilTimeout>
 80043d8:	4603      	mov	r3, r0
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d001      	beq.n	80043e2 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 80043de:	2301      	movs	r3, #1
 80043e0:	e0be      	b.n	8004560 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	2221      	movs	r2, #33	; 0x21
 80043e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	2210      	movs	r2, #16
 80043ee:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	2200      	movs	r2, #0
 80043f6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	687a      	ldr	r2, [r7, #4]
 80043fc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	893a      	ldrh	r2, [r7, #8]
 8004402:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	2200      	movs	r2, #0
 8004408:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800440e:	b29b      	uxth	r3, r3
 8004410:	2bff      	cmp	r3, #255	; 0xff
 8004412:	d90e      	bls.n	8004432 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	22ff      	movs	r2, #255	; 0xff
 8004418:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800441e:	b2da      	uxtb	r2, r3
 8004420:	8979      	ldrh	r1, [r7, #10]
 8004422:	4b51      	ldr	r3, [pc, #324]	; (8004568 <HAL_I2C_Master_Transmit+0x1e0>)
 8004424:	9300      	str	r3, [sp, #0]
 8004426:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800442a:	68f8      	ldr	r0, [r7, #12]
 800442c:	f001 f8e6 	bl	80055fc <I2C_TransferConfig>
 8004430:	e06c      	b.n	800450c <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004436:	b29a      	uxth	r2, r3
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004440:	b2da      	uxtb	r2, r3
 8004442:	8979      	ldrh	r1, [r7, #10]
 8004444:	4b48      	ldr	r3, [pc, #288]	; (8004568 <HAL_I2C_Master_Transmit+0x1e0>)
 8004446:	9300      	str	r3, [sp, #0]
 8004448:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800444c:	68f8      	ldr	r0, [r7, #12]
 800444e:	f001 f8d5 	bl	80055fc <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8004452:	e05b      	b.n	800450c <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004454:	697a      	ldr	r2, [r7, #20]
 8004456:	6a39      	ldr	r1, [r7, #32]
 8004458:	68f8      	ldr	r0, [r7, #12]
 800445a:	f000 fef8 	bl	800524e <I2C_WaitOnTXISFlagUntilTimeout>
 800445e:	4603      	mov	r3, r0
 8004460:	2b00      	cmp	r3, #0
 8004462:	d001      	beq.n	8004468 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8004464:	2301      	movs	r3, #1
 8004466:	e07b      	b.n	8004560 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800446c:	781a      	ldrb	r2, [r3, #0]
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004478:	1c5a      	adds	r2, r3, #1
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004482:	b29b      	uxth	r3, r3
 8004484:	3b01      	subs	r3, #1
 8004486:	b29a      	uxth	r2, r3
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004490:	3b01      	subs	r3, #1
 8004492:	b29a      	uxth	r2, r3
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800449c:	b29b      	uxth	r3, r3
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d034      	beq.n	800450c <HAL_I2C_Master_Transmit+0x184>
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d130      	bne.n	800450c <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80044aa:	697b      	ldr	r3, [r7, #20]
 80044ac:	9300      	str	r3, [sp, #0]
 80044ae:	6a3b      	ldr	r3, [r7, #32]
 80044b0:	2200      	movs	r2, #0
 80044b2:	2180      	movs	r1, #128	; 0x80
 80044b4:	68f8      	ldr	r0, [r7, #12]
 80044b6:	f000 fe8a 	bl	80051ce <I2C_WaitOnFlagUntilTimeout>
 80044ba:	4603      	mov	r3, r0
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d001      	beq.n	80044c4 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 80044c0:	2301      	movs	r3, #1
 80044c2:	e04d      	b.n	8004560 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044c8:	b29b      	uxth	r3, r3
 80044ca:	2bff      	cmp	r3, #255	; 0xff
 80044cc:	d90e      	bls.n	80044ec <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	22ff      	movs	r2, #255	; 0xff
 80044d2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80044d8:	b2da      	uxtb	r2, r3
 80044da:	8979      	ldrh	r1, [r7, #10]
 80044dc:	2300      	movs	r3, #0
 80044de:	9300      	str	r3, [sp, #0]
 80044e0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80044e4:	68f8      	ldr	r0, [r7, #12]
 80044e6:	f001 f889 	bl	80055fc <I2C_TransferConfig>
 80044ea:	e00f      	b.n	800450c <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044f0:	b29a      	uxth	r2, r3
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80044fa:	b2da      	uxtb	r2, r3
 80044fc:	8979      	ldrh	r1, [r7, #10]
 80044fe:	2300      	movs	r3, #0
 8004500:	9300      	str	r3, [sp, #0]
 8004502:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004506:	68f8      	ldr	r0, [r7, #12]
 8004508:	f001 f878 	bl	80055fc <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004510:	b29b      	uxth	r3, r3
 8004512:	2b00      	cmp	r3, #0
 8004514:	d19e      	bne.n	8004454 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004516:	697a      	ldr	r2, [r7, #20]
 8004518:	6a39      	ldr	r1, [r7, #32]
 800451a:	68f8      	ldr	r0, [r7, #12]
 800451c:	f000 fed7 	bl	80052ce <I2C_WaitOnSTOPFlagUntilTimeout>
 8004520:	4603      	mov	r3, r0
 8004522:	2b00      	cmp	r3, #0
 8004524:	d001      	beq.n	800452a <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8004526:	2301      	movs	r3, #1
 8004528:	e01a      	b.n	8004560 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	2220      	movs	r2, #32
 8004530:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	6859      	ldr	r1, [r3, #4]
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	681a      	ldr	r2, [r3, #0]
 800453c:	4b0b      	ldr	r3, [pc, #44]	; (800456c <HAL_I2C_Master_Transmit+0x1e4>)
 800453e:	400b      	ands	r3, r1
 8004540:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	2220      	movs	r2, #32
 8004546:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	2200      	movs	r2, #0
 800454e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	2200      	movs	r2, #0
 8004556:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800455a:	2300      	movs	r3, #0
 800455c:	e000      	b.n	8004560 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 800455e:	2302      	movs	r3, #2
  }
}
 8004560:	4618      	mov	r0, r3
 8004562:	3718      	adds	r7, #24
 8004564:	46bd      	mov	sp, r7
 8004566:	bd80      	pop	{r7, pc}
 8004568:	80002000 	.word	0x80002000
 800456c:	fe00e800 	.word	0xfe00e800

08004570 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8004570:	b580      	push	{r7, lr}
 8004572:	b088      	sub	sp, #32
 8004574:	af02      	add	r7, sp, #8
 8004576:	60f8      	str	r0, [r7, #12]
 8004578:	607a      	str	r2, [r7, #4]
 800457a:	461a      	mov	r2, r3
 800457c:	460b      	mov	r3, r1
 800457e:	817b      	strh	r3, [r7, #10]
 8004580:	4613      	mov	r3, r2
 8004582:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800458a:	b2db      	uxtb	r3, r3
 800458c:	2b20      	cmp	r3, #32
 800458e:	f040 80db 	bne.w	8004748 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004598:	2b01      	cmp	r3, #1
 800459a:	d101      	bne.n	80045a0 <HAL_I2C_Master_Receive+0x30>
 800459c:	2302      	movs	r3, #2
 800459e:	e0d4      	b.n	800474a <HAL_I2C_Master_Receive+0x1da>
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	2201      	movs	r2, #1
 80045a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80045a8:	f7fe ffe8 	bl	800357c <HAL_GetTick>
 80045ac:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80045ae:	697b      	ldr	r3, [r7, #20]
 80045b0:	9300      	str	r3, [sp, #0]
 80045b2:	2319      	movs	r3, #25
 80045b4:	2201      	movs	r2, #1
 80045b6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80045ba:	68f8      	ldr	r0, [r7, #12]
 80045bc:	f000 fe07 	bl	80051ce <I2C_WaitOnFlagUntilTimeout>
 80045c0:	4603      	mov	r3, r0
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d001      	beq.n	80045ca <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 80045c6:	2301      	movs	r3, #1
 80045c8:	e0bf      	b.n	800474a <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	2222      	movs	r2, #34	; 0x22
 80045ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	2210      	movs	r2, #16
 80045d6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	2200      	movs	r2, #0
 80045de:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	687a      	ldr	r2, [r7, #4]
 80045e4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	893a      	ldrh	r2, [r7, #8]
 80045ea:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	2200      	movs	r2, #0
 80045f0:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045f6:	b29b      	uxth	r3, r3
 80045f8:	2bff      	cmp	r3, #255	; 0xff
 80045fa:	d90e      	bls.n	800461a <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	22ff      	movs	r2, #255	; 0xff
 8004600:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004606:	b2da      	uxtb	r2, r3
 8004608:	8979      	ldrh	r1, [r7, #10]
 800460a:	4b52      	ldr	r3, [pc, #328]	; (8004754 <HAL_I2C_Master_Receive+0x1e4>)
 800460c:	9300      	str	r3, [sp, #0]
 800460e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004612:	68f8      	ldr	r0, [r7, #12]
 8004614:	f000 fff2 	bl	80055fc <I2C_TransferConfig>
 8004618:	e06d      	b.n	80046f6 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800461e:	b29a      	uxth	r2, r3
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004628:	b2da      	uxtb	r2, r3
 800462a:	8979      	ldrh	r1, [r7, #10]
 800462c:	4b49      	ldr	r3, [pc, #292]	; (8004754 <HAL_I2C_Master_Receive+0x1e4>)
 800462e:	9300      	str	r3, [sp, #0]
 8004630:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004634:	68f8      	ldr	r0, [r7, #12]
 8004636:	f000 ffe1 	bl	80055fc <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 800463a:	e05c      	b.n	80046f6 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800463c:	697a      	ldr	r2, [r7, #20]
 800463e:	6a39      	ldr	r1, [r7, #32]
 8004640:	68f8      	ldr	r0, [r7, #12]
 8004642:	f000 fe81 	bl	8005348 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004646:	4603      	mov	r3, r0
 8004648:	2b00      	cmp	r3, #0
 800464a:	d001      	beq.n	8004650 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 800464c:	2301      	movs	r3, #1
 800464e:	e07c      	b.n	800474a <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800465a:	b2d2      	uxtb	r2, r2
 800465c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004662:	1c5a      	adds	r2, r3, #1
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800466c:	3b01      	subs	r3, #1
 800466e:	b29a      	uxth	r2, r3
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004678:	b29b      	uxth	r3, r3
 800467a:	3b01      	subs	r3, #1
 800467c:	b29a      	uxth	r2, r3
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004686:	b29b      	uxth	r3, r3
 8004688:	2b00      	cmp	r3, #0
 800468a:	d034      	beq.n	80046f6 <HAL_I2C_Master_Receive+0x186>
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004690:	2b00      	cmp	r3, #0
 8004692:	d130      	bne.n	80046f6 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004694:	697b      	ldr	r3, [r7, #20]
 8004696:	9300      	str	r3, [sp, #0]
 8004698:	6a3b      	ldr	r3, [r7, #32]
 800469a:	2200      	movs	r2, #0
 800469c:	2180      	movs	r1, #128	; 0x80
 800469e:	68f8      	ldr	r0, [r7, #12]
 80046a0:	f000 fd95 	bl	80051ce <I2C_WaitOnFlagUntilTimeout>
 80046a4:	4603      	mov	r3, r0
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d001      	beq.n	80046ae <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 80046aa:	2301      	movs	r3, #1
 80046ac:	e04d      	b.n	800474a <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046b2:	b29b      	uxth	r3, r3
 80046b4:	2bff      	cmp	r3, #255	; 0xff
 80046b6:	d90e      	bls.n	80046d6 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	22ff      	movs	r2, #255	; 0xff
 80046bc:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80046c2:	b2da      	uxtb	r2, r3
 80046c4:	8979      	ldrh	r1, [r7, #10]
 80046c6:	2300      	movs	r3, #0
 80046c8:	9300      	str	r3, [sp, #0]
 80046ca:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80046ce:	68f8      	ldr	r0, [r7, #12]
 80046d0:	f000 ff94 	bl	80055fc <I2C_TransferConfig>
 80046d4:	e00f      	b.n	80046f6 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046da:	b29a      	uxth	r2, r3
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80046e4:	b2da      	uxtb	r2, r3
 80046e6:	8979      	ldrh	r1, [r7, #10]
 80046e8:	2300      	movs	r3, #0
 80046ea:	9300      	str	r3, [sp, #0]
 80046ec:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80046f0:	68f8      	ldr	r0, [r7, #12]
 80046f2:	f000 ff83 	bl	80055fc <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046fa:	b29b      	uxth	r3, r3
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d19d      	bne.n	800463c <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004700:	697a      	ldr	r2, [r7, #20]
 8004702:	6a39      	ldr	r1, [r7, #32]
 8004704:	68f8      	ldr	r0, [r7, #12]
 8004706:	f000 fde2 	bl	80052ce <I2C_WaitOnSTOPFlagUntilTimeout>
 800470a:	4603      	mov	r3, r0
 800470c:	2b00      	cmp	r3, #0
 800470e:	d001      	beq.n	8004714 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8004710:	2301      	movs	r3, #1
 8004712:	e01a      	b.n	800474a <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	2220      	movs	r2, #32
 800471a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	6859      	ldr	r1, [r3, #4]
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	681a      	ldr	r2, [r3, #0]
 8004726:	4b0c      	ldr	r3, [pc, #48]	; (8004758 <HAL_I2C_Master_Receive+0x1e8>)
 8004728:	400b      	ands	r3, r1
 800472a:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	2220      	movs	r2, #32
 8004730:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	2200      	movs	r2, #0
 8004738:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	2200      	movs	r2, #0
 8004740:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004744:	2300      	movs	r3, #0
 8004746:	e000      	b.n	800474a <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8004748:	2302      	movs	r3, #2
  }
}
 800474a:	4618      	mov	r0, r3
 800474c:	3718      	adds	r7, #24
 800474e:	46bd      	mov	sp, r7
 8004750:	bd80      	pop	{r7, pc}
 8004752:	bf00      	nop
 8004754:	80002400 	.word	0x80002400
 8004758:	fe00e800 	.word	0xfe00e800

0800475c <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800475c:	b580      	push	{r7, lr}
 800475e:	b084      	sub	sp, #16
 8004760:	af00      	add	r7, sp, #0
 8004762:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	699b      	ldr	r3, [r3, #24]
 800476a:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004778:	2b00      	cmp	r3, #0
 800477a:	d005      	beq.n	8004788 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004780:	68ba      	ldr	r2, [r7, #8]
 8004782:	68f9      	ldr	r1, [r7, #12]
 8004784:	6878      	ldr	r0, [r7, #4]
 8004786:	4798      	blx	r3
  }
}
 8004788:	bf00      	nop
 800478a:	3710      	adds	r7, #16
 800478c:	46bd      	mov	sp, r7
 800478e:	bd80      	pop	{r7, pc}

08004790 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8004790:	b580      	push	{r7, lr}
 8004792:	b086      	sub	sp, #24
 8004794:	af00      	add	r7, sp, #0
 8004796:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	699b      	ldr	r3, [r3, #24]
 800479e:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 80047a8:	697b      	ldr	r3, [r7, #20]
 80047aa:	0a1b      	lsrs	r3, r3, #8
 80047ac:	f003 0301 	and.w	r3, r3, #1
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d010      	beq.n	80047d6 <HAL_I2C_ER_IRQHandler+0x46>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80047b4:	693b      	ldr	r3, [r7, #16]
 80047b6:	09db      	lsrs	r3, r3, #7
 80047b8:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d00a      	beq.n	80047d6 <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047c4:	f043 0201 	orr.w	r2, r3, #1
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80047d4:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 80047d6:	697b      	ldr	r3, [r7, #20]
 80047d8:	0a9b      	lsrs	r3, r3, #10
 80047da:	f003 0301 	and.w	r3, r3, #1
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d010      	beq.n	8004804 <HAL_I2C_ER_IRQHandler+0x74>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80047e2:	693b      	ldr	r3, [r7, #16]
 80047e4:	09db      	lsrs	r3, r3, #7
 80047e6:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d00a      	beq.n	8004804 <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047f2:	f043 0208 	orr.w	r2, r3, #8
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004802:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8004804:	697b      	ldr	r3, [r7, #20]
 8004806:	0a5b      	lsrs	r3, r3, #9
 8004808:	f003 0301 	and.w	r3, r3, #1
 800480c:	2b00      	cmp	r3, #0
 800480e:	d010      	beq.n	8004832 <HAL_I2C_ER_IRQHandler+0xa2>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8004810:	693b      	ldr	r3, [r7, #16]
 8004812:	09db      	lsrs	r3, r3, #7
 8004814:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8004818:	2b00      	cmp	r3, #0
 800481a:	d00a      	beq.n	8004832 <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004820:	f043 0202 	orr.w	r2, r3, #2
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004830:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004836:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	f003 030b 	and.w	r3, r3, #11
 800483e:	2b00      	cmp	r3, #0
 8004840:	d003      	beq.n	800484a <HAL_I2C_ER_IRQHandler+0xba>
  {
    I2C_ITError(hi2c, tmperror);
 8004842:	68f9      	ldr	r1, [r7, #12]
 8004844:	6878      	ldr	r0, [r7, #4]
 8004846:	f000 fb89 	bl	8004f5c <I2C_ITError>
  }
}
 800484a:	bf00      	nop
 800484c:	3718      	adds	r7, #24
 800484e:	46bd      	mov	sp, r7
 8004850:	bd80      	pop	{r7, pc}

08004852 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004852:	b480      	push	{r7}
 8004854:	b083      	sub	sp, #12
 8004856:	af00      	add	r7, sp, #0
 8004858:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800485a:	bf00      	nop
 800485c:	370c      	adds	r7, #12
 800485e:	46bd      	mov	sp, r7
 8004860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004864:	4770      	bx	lr

08004866 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004866:	b480      	push	{r7}
 8004868:	b083      	sub	sp, #12
 800486a:	af00      	add	r7, sp, #0
 800486c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800486e:	bf00      	nop
 8004870:	370c      	adds	r7, #12
 8004872:	46bd      	mov	sp, r7
 8004874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004878:	4770      	bx	lr

0800487a <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800487a:	b480      	push	{r7}
 800487c:	b083      	sub	sp, #12
 800487e:	af00      	add	r7, sp, #0
 8004880:	6078      	str	r0, [r7, #4]
 8004882:	460b      	mov	r3, r1
 8004884:	70fb      	strb	r3, [r7, #3]
 8004886:	4613      	mov	r3, r2
 8004888:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800488a:	bf00      	nop
 800488c:	370c      	adds	r7, #12
 800488e:	46bd      	mov	sp, r7
 8004890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004894:	4770      	bx	lr

08004896 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004896:	b480      	push	{r7}
 8004898:	b083      	sub	sp, #12
 800489a:	af00      	add	r7, sp, #0
 800489c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 800489e:	bf00      	nop
 80048a0:	370c      	adds	r7, #12
 80048a2:	46bd      	mov	sp, r7
 80048a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a8:	4770      	bx	lr

080048aa <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80048aa:	b480      	push	{r7}
 80048ac:	b083      	sub	sp, #12
 80048ae:	af00      	add	r7, sp, #0
 80048b0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80048b2:	bf00      	nop
 80048b4:	370c      	adds	r7, #12
 80048b6:	46bd      	mov	sp, r7
 80048b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048bc:	4770      	bx	lr

080048be <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80048be:	b480      	push	{r7}
 80048c0:	b083      	sub	sp, #12
 80048c2:	af00      	add	r7, sp, #0
 80048c4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80048c6:	bf00      	nop
 80048c8:	370c      	adds	r7, #12
 80048ca:	46bd      	mov	sp, r7
 80048cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d0:	4770      	bx	lr

080048d2 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 80048d2:	b580      	push	{r7, lr}
 80048d4:	b086      	sub	sp, #24
 80048d6:	af00      	add	r7, sp, #0
 80048d8:	60f8      	str	r0, [r7, #12]
 80048da:	60b9      	str	r1, [r7, #8]
 80048dc:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048e2:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 80048e4:	68bb      	ldr	r3, [r7, #8]
 80048e6:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80048ee:	2b01      	cmp	r3, #1
 80048f0:	d101      	bne.n	80048f6 <I2C_Slave_ISR_IT+0x24>
 80048f2:	2302      	movs	r3, #2
 80048f4:	e0ec      	b.n	8004ad0 <I2C_Slave_ISR_IT+0x1fe>
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	2201      	movs	r2, #1
 80048fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80048fe:	693b      	ldr	r3, [r7, #16]
 8004900:	095b      	lsrs	r3, r3, #5
 8004902:	f003 0301 	and.w	r3, r3, #1
 8004906:	2b00      	cmp	r3, #0
 8004908:	d009      	beq.n	800491e <I2C_Slave_ISR_IT+0x4c>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	095b      	lsrs	r3, r3, #5
 800490e:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8004912:	2b00      	cmp	r3, #0
 8004914:	d003      	beq.n	800491e <I2C_Slave_ISR_IT+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8004916:	6939      	ldr	r1, [r7, #16]
 8004918:	68f8      	ldr	r0, [r7, #12]
 800491a:	f000 f9bf 	bl	8004c9c <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800491e:	693b      	ldr	r3, [r7, #16]
 8004920:	091b      	lsrs	r3, r3, #4
 8004922:	f003 0301 	and.w	r3, r3, #1
 8004926:	2b00      	cmp	r3, #0
 8004928:	d04d      	beq.n	80049c6 <I2C_Slave_ISR_IT+0xf4>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	091b      	lsrs	r3, r3, #4
 800492e:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8004932:	2b00      	cmp	r3, #0
 8004934:	d047      	beq.n	80049c6 <I2C_Slave_ISR_IT+0xf4>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800493a:	b29b      	uxth	r3, r3
 800493c:	2b00      	cmp	r3, #0
 800493e:	d128      	bne.n	8004992 <I2C_Slave_ISR_IT+0xc0>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004946:	b2db      	uxtb	r3, r3
 8004948:	2b28      	cmp	r3, #40	; 0x28
 800494a:	d108      	bne.n	800495e <I2C_Slave_ISR_IT+0x8c>
 800494c:	697b      	ldr	r3, [r7, #20]
 800494e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004952:	d104      	bne.n	800495e <I2C_Slave_ISR_IT+0x8c>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8004954:	6939      	ldr	r1, [r7, #16]
 8004956:	68f8      	ldr	r0, [r7, #12]
 8004958:	f000 faaa 	bl	8004eb0 <I2C_ITListenCplt>
 800495c:	e032      	b.n	80049c4 <I2C_Slave_ISR_IT+0xf2>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004964:	b2db      	uxtb	r3, r3
 8004966:	2b29      	cmp	r3, #41	; 0x29
 8004968:	d10e      	bne.n	8004988 <I2C_Slave_ISR_IT+0xb6>
 800496a:	697b      	ldr	r3, [r7, #20]
 800496c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004970:	d00a      	beq.n	8004988 <I2C_Slave_ISR_IT+0xb6>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	2210      	movs	r2, #16
 8004978:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 800497a:	68f8      	ldr	r0, [r7, #12]
 800497c:	f000 fbe5 	bl	800514a <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8004980:	68f8      	ldr	r0, [r7, #12]
 8004982:	f000 f92d 	bl	8004be0 <I2C_ITSlaveSeqCplt>
 8004986:	e01d      	b.n	80049c4 <I2C_Slave_ISR_IT+0xf2>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	2210      	movs	r2, #16
 800498e:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8004990:	e096      	b.n	8004ac0 <I2C_Slave_ISR_IT+0x1ee>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	2210      	movs	r2, #16
 8004998:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800499e:	f043 0204 	orr.w	r2, r3, #4
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80049a6:	697b      	ldr	r3, [r7, #20]
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d004      	beq.n	80049b6 <I2C_Slave_ISR_IT+0xe4>
 80049ac:	697b      	ldr	r3, [r7, #20]
 80049ae:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80049b2:	f040 8085 	bne.w	8004ac0 <I2C_Slave_ISR_IT+0x1ee>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049ba:	4619      	mov	r1, r3
 80049bc:	68f8      	ldr	r0, [r7, #12]
 80049be:	f000 facd 	bl	8004f5c <I2C_ITError>
    if (hi2c->XferCount == 0U)
 80049c2:	e07d      	b.n	8004ac0 <I2C_Slave_ISR_IT+0x1ee>
 80049c4:	e07c      	b.n	8004ac0 <I2C_Slave_ISR_IT+0x1ee>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80049c6:	693b      	ldr	r3, [r7, #16]
 80049c8:	089b      	lsrs	r3, r3, #2
 80049ca:	f003 0301 	and.w	r3, r3, #1
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d030      	beq.n	8004a34 <I2C_Slave_ISR_IT+0x162>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	089b      	lsrs	r3, r3, #2
 80049d6:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d02a      	beq.n	8004a34 <I2C_Slave_ISR_IT+0x162>
  {
    if (hi2c->XferCount > 0U)
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049e2:	b29b      	uxth	r3, r3
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d018      	beq.n	8004a1a <I2C_Slave_ISR_IT+0x148>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049f2:	b2d2      	uxtb	r2, r2
 80049f4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049fa:	1c5a      	adds	r2, r3, #1
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a04:	3b01      	subs	r3, #1
 8004a06:	b29a      	uxth	r2, r3
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a10:	b29b      	uxth	r3, r3
 8004a12:	3b01      	subs	r3, #1
 8004a14:	b29a      	uxth	r2, r3
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a1e:	b29b      	uxth	r3, r3
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d14f      	bne.n	8004ac4 <I2C_Slave_ISR_IT+0x1f2>
 8004a24:	697b      	ldr	r3, [r7, #20]
 8004a26:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004a2a:	d04b      	beq.n	8004ac4 <I2C_Slave_ISR_IT+0x1f2>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8004a2c:	68f8      	ldr	r0, [r7, #12]
 8004a2e:	f000 f8d7 	bl	8004be0 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8004a32:	e047      	b.n	8004ac4 <I2C_Slave_ISR_IT+0x1f2>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8004a34:	693b      	ldr	r3, [r7, #16]
 8004a36:	08db      	lsrs	r3, r3, #3
 8004a38:	f003 0301 	and.w	r3, r3, #1
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d00a      	beq.n	8004a56 <I2C_Slave_ISR_IT+0x184>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	08db      	lsrs	r3, r3, #3
 8004a44:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d004      	beq.n	8004a56 <I2C_Slave_ISR_IT+0x184>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8004a4c:	6939      	ldr	r1, [r7, #16]
 8004a4e:	68f8      	ldr	r0, [r7, #12]
 8004a50:	f000 f842 	bl	8004ad8 <I2C_ITAddrCplt>
 8004a54:	e037      	b.n	8004ac6 <I2C_Slave_ISR_IT+0x1f4>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8004a56:	693b      	ldr	r3, [r7, #16]
 8004a58:	085b      	lsrs	r3, r3, #1
 8004a5a:	f003 0301 	and.w	r3, r3, #1
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d031      	beq.n	8004ac6 <I2C_Slave_ISR_IT+0x1f4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	085b      	lsrs	r3, r3, #1
 8004a66:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d02b      	beq.n	8004ac6 <I2C_Slave_ISR_IT+0x1f4>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a72:	b29b      	uxth	r3, r3
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d018      	beq.n	8004aaa <I2C_Slave_ISR_IT+0x1d8>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a7c:	781a      	ldrb	r2, [r3, #0]
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a88:	1c5a      	adds	r2, r3, #1
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a92:	b29b      	uxth	r3, r3
 8004a94:	3b01      	subs	r3, #1
 8004a96:	b29a      	uxth	r2, r3
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004aa0:	3b01      	subs	r3, #1
 8004aa2:	b29a      	uxth	r2, r3
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	851a      	strh	r2, [r3, #40]	; 0x28
 8004aa8:	e00d      	b.n	8004ac6 <I2C_Slave_ISR_IT+0x1f4>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8004aaa:	697b      	ldr	r3, [r7, #20]
 8004aac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004ab0:	d002      	beq.n	8004ab8 <I2C_Slave_ISR_IT+0x1e6>
 8004ab2:	697b      	ldr	r3, [r7, #20]
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d106      	bne.n	8004ac6 <I2C_Slave_ISR_IT+0x1f4>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8004ab8:	68f8      	ldr	r0, [r7, #12]
 8004aba:	f000 f891 	bl	8004be0 <I2C_ITSlaveSeqCplt>
 8004abe:	e002      	b.n	8004ac6 <I2C_Slave_ISR_IT+0x1f4>
    if (hi2c->XferCount == 0U)
 8004ac0:	bf00      	nop
 8004ac2:	e000      	b.n	8004ac6 <I2C_Slave_ISR_IT+0x1f4>
    if ((hi2c->XferCount == 0U) && \
 8004ac4:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	2200      	movs	r2, #0
 8004aca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004ace:	2300      	movs	r3, #0
}
 8004ad0:	4618      	mov	r0, r3
 8004ad2:	3718      	adds	r7, #24
 8004ad4:	46bd      	mov	sp, r7
 8004ad6:	bd80      	pop	{r7, pc}

08004ad8 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8004ad8:	b580      	push	{r7, lr}
 8004ada:	b084      	sub	sp, #16
 8004adc:	af00      	add	r7, sp, #0
 8004ade:	6078      	str	r0, [r7, #4]
 8004ae0:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004ae8:	b2db      	uxtb	r3, r3
 8004aea:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004aee:	2b28      	cmp	r3, #40	; 0x28
 8004af0:	d16a      	bne.n	8004bc8 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	699b      	ldr	r3, [r3, #24]
 8004af8:	0c1b      	lsrs	r3, r3, #16
 8004afa:	b2db      	uxtb	r3, r3
 8004afc:	f003 0301 	and.w	r3, r3, #1
 8004b00:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	699b      	ldr	r3, [r3, #24]
 8004b08:	0c1b      	lsrs	r3, r3, #16
 8004b0a:	b29b      	uxth	r3, r3
 8004b0c:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8004b10:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	689b      	ldr	r3, [r3, #8]
 8004b18:	b29b      	uxth	r3, r3
 8004b1a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004b1e:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	68db      	ldr	r3, [r3, #12]
 8004b26:	b29b      	uxth	r3, r3
 8004b28:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8004b2c:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	68db      	ldr	r3, [r3, #12]
 8004b32:	2b02      	cmp	r3, #2
 8004b34:	d138      	bne.n	8004ba8 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8004b36:	897b      	ldrh	r3, [r7, #10]
 8004b38:	09db      	lsrs	r3, r3, #7
 8004b3a:	b29a      	uxth	r2, r3
 8004b3c:	89bb      	ldrh	r3, [r7, #12]
 8004b3e:	4053      	eors	r3, r2
 8004b40:	b29b      	uxth	r3, r3
 8004b42:	f003 0306 	and.w	r3, r3, #6
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d11c      	bne.n	8004b84 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8004b4a:	897b      	ldrh	r3, [r7, #10]
 8004b4c:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004b52:	1c5a      	adds	r2, r3, #1
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004b5c:	2b02      	cmp	r3, #2
 8004b5e:	d13b      	bne.n	8004bd8 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	2200      	movs	r2, #0
 8004b64:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	2208      	movs	r2, #8
 8004b6c:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	2200      	movs	r2, #0
 8004b72:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8004b76:	89ba      	ldrh	r2, [r7, #12]
 8004b78:	7bfb      	ldrb	r3, [r7, #15]
 8004b7a:	4619      	mov	r1, r3
 8004b7c:	6878      	ldr	r0, [r7, #4]
 8004b7e:	f7ff fe7c 	bl	800487a <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8004b82:	e029      	b.n	8004bd8 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8004b84:	893b      	ldrh	r3, [r7, #8]
 8004b86:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8004b88:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004b8c:	6878      	ldr	r0, [r7, #4]
 8004b8e:	f000 fdb1 	bl	80056f4 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	2200      	movs	r2, #0
 8004b96:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8004b9a:	89ba      	ldrh	r2, [r7, #12]
 8004b9c:	7bfb      	ldrb	r3, [r7, #15]
 8004b9e:	4619      	mov	r1, r3
 8004ba0:	6878      	ldr	r0, [r7, #4]
 8004ba2:	f7ff fe6a 	bl	800487a <HAL_I2C_AddrCallback>
}
 8004ba6:	e017      	b.n	8004bd8 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8004ba8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004bac:	6878      	ldr	r0, [r7, #4]
 8004bae:	f000 fda1 	bl	80056f4 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	2200      	movs	r2, #0
 8004bb6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8004bba:	89ba      	ldrh	r2, [r7, #12]
 8004bbc:	7bfb      	ldrb	r3, [r7, #15]
 8004bbe:	4619      	mov	r1, r3
 8004bc0:	6878      	ldr	r0, [r7, #4]
 8004bc2:	f7ff fe5a 	bl	800487a <HAL_I2C_AddrCallback>
}
 8004bc6:	e007      	b.n	8004bd8 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	2208      	movs	r2, #8
 8004bce:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	2200      	movs	r2, #0
 8004bd4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 8004bd8:	bf00      	nop
 8004bda:	3710      	adds	r7, #16
 8004bdc:	46bd      	mov	sp, r7
 8004bde:	bd80      	pop	{r7, pc}

08004be0 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8004be0:	b580      	push	{r7, lr}
 8004be2:	b084      	sub	sp, #16
 8004be4:	af00      	add	r7, sp, #0
 8004be6:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	2200      	movs	r2, #0
 8004bf4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	0b9b      	lsrs	r3, r3, #14
 8004bfc:	f003 0301 	and.w	r3, r3, #1
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d008      	beq.n	8004c16 <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	681a      	ldr	r2, [r3, #0]
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004c12:	601a      	str	r2, [r3, #0]
 8004c14:	e00d      	b.n	8004c32 <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	0bdb      	lsrs	r3, r3, #15
 8004c1a:	f003 0301 	and.w	r3, r3, #1
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d007      	beq.n	8004c32 <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	681a      	ldr	r2, [r3, #0]
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004c30:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004c38:	b2db      	uxtb	r3, r3
 8004c3a:	2b29      	cmp	r3, #41	; 0x29
 8004c3c:	d112      	bne.n	8004c64 <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	2228      	movs	r2, #40	; 0x28
 8004c42:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	2221      	movs	r2, #33	; 0x21
 8004c4a:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8004c4c:	2101      	movs	r1, #1
 8004c4e:	6878      	ldr	r0, [r7, #4]
 8004c50:	f000 fd50 	bl	80056f4 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	2200      	movs	r2, #0
 8004c58:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004c5c:	6878      	ldr	r0, [r7, #4]
 8004c5e:	f7ff fdf8 	bl	8004852 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8004c62:	e017      	b.n	8004c94 <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004c6a:	b2db      	uxtb	r3, r3
 8004c6c:	2b2a      	cmp	r3, #42	; 0x2a
 8004c6e:	d111      	bne.n	8004c94 <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	2228      	movs	r2, #40	; 0x28
 8004c74:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	2222      	movs	r2, #34	; 0x22
 8004c7c:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8004c7e:	2102      	movs	r1, #2
 8004c80:	6878      	ldr	r0, [r7, #4]
 8004c82:	f000 fd37 	bl	80056f4 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	2200      	movs	r2, #0
 8004c8a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004c8e:	6878      	ldr	r0, [r7, #4]
 8004c90:	f7ff fde9 	bl	8004866 <HAL_I2C_SlaveRxCpltCallback>
}
 8004c94:	bf00      	nop
 8004c96:	3710      	adds	r7, #16
 8004c98:	46bd      	mov	sp, r7
 8004c9a:	bd80      	pop	{r7, pc}

08004c9c <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8004c9c:	b580      	push	{r7, lr}
 8004c9e:	b086      	sub	sp, #24
 8004ca0:	af00      	add	r7, sp, #0
 8004ca2:	6078      	str	r0, [r7, #4]
 8004ca4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8004cae:	683b      	ldr	r3, [r7, #0]
 8004cb0:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004cb8:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	2220      	movs	r2, #32
 8004cc0:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8004cc2:	7bfb      	ldrb	r3, [r7, #15]
 8004cc4:	2b21      	cmp	r3, #33	; 0x21
 8004cc6:	d002      	beq.n	8004cce <I2C_ITSlaveCplt+0x32>
 8004cc8:	7bfb      	ldrb	r3, [r7, #15]
 8004cca:	2b29      	cmp	r3, #41	; 0x29
 8004ccc:	d108      	bne.n	8004ce0 <I2C_ITSlaveCplt+0x44>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8004cce:	f248 0101 	movw	r1, #32769	; 0x8001
 8004cd2:	6878      	ldr	r0, [r7, #4]
 8004cd4:	f000 fd0e 	bl	80056f4 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	2221      	movs	r2, #33	; 0x21
 8004cdc:	631a      	str	r2, [r3, #48]	; 0x30
 8004cde:	e00d      	b.n	8004cfc <I2C_ITSlaveCplt+0x60>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004ce0:	7bfb      	ldrb	r3, [r7, #15]
 8004ce2:	2b22      	cmp	r3, #34	; 0x22
 8004ce4:	d002      	beq.n	8004cec <I2C_ITSlaveCplt+0x50>
 8004ce6:	7bfb      	ldrb	r3, [r7, #15]
 8004ce8:	2b2a      	cmp	r3, #42	; 0x2a
 8004cea:	d107      	bne.n	8004cfc <I2C_ITSlaveCplt+0x60>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8004cec:	f248 0102 	movw	r1, #32770	; 0x8002
 8004cf0:	6878      	ldr	r0, [r7, #4]
 8004cf2:	f000 fcff 	bl	80056f4 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	2222      	movs	r2, #34	; 0x22
 8004cfa:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	685a      	ldr	r2, [r3, #4]
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004d0a:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	6859      	ldr	r1, [r3, #4]
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681a      	ldr	r2, [r3, #0]
 8004d16:	4b64      	ldr	r3, [pc, #400]	; (8004ea8 <I2C_ITSlaveCplt+0x20c>)
 8004d18:	400b      	ands	r3, r1
 8004d1a:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8004d1c:	6878      	ldr	r0, [r7, #4]
 8004d1e:	f000 fa14 	bl	800514a <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8004d22:	693b      	ldr	r3, [r7, #16]
 8004d24:	0b9b      	lsrs	r3, r3, #14
 8004d26:	f003 0301 	and.w	r3, r3, #1
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d013      	beq.n	8004d56 <I2C_ITSlaveCplt+0xba>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	681a      	ldr	r2, [r3, #0]
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004d3c:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d020      	beq.n	8004d88 <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	685b      	ldr	r3, [r3, #4]
 8004d4e:	b29a      	uxth	r2, r3
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004d54:	e018      	b.n	8004d88 <I2C_ITSlaveCplt+0xec>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8004d56:	693b      	ldr	r3, [r7, #16]
 8004d58:	0bdb      	lsrs	r3, r3, #15
 8004d5a:	f003 0301 	and.w	r3, r3, #1
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d012      	beq.n	8004d88 <I2C_ITSlaveCplt+0xec>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	681a      	ldr	r2, [r3, #0]
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004d70:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d006      	beq.n	8004d88 <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	685b      	ldr	r3, [r3, #4]
 8004d82:	b29a      	uxth	r2, r3
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8004d88:	697b      	ldr	r3, [r7, #20]
 8004d8a:	089b      	lsrs	r3, r3, #2
 8004d8c:	f003 0301 	and.w	r3, r3, #1
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d020      	beq.n	8004dd6 <I2C_ITSlaveCplt+0x13a>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8004d94:	697b      	ldr	r3, [r7, #20]
 8004d96:	f023 0304 	bic.w	r3, r3, #4
 8004d9a:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004da6:	b2d2      	uxtb	r2, r2
 8004da8:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dae:	1c5a      	adds	r2, r3, #1
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d00c      	beq.n	8004dd6 <I2C_ITSlaveCplt+0x13a>
    {
      hi2c->XferSize--;
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004dc0:	3b01      	subs	r3, #1
 8004dc2:	b29a      	uxth	r2, r3
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004dcc:	b29b      	uxth	r3, r3
 8004dce:	3b01      	subs	r3, #1
 8004dd0:	b29a      	uxth	r2, r3
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004dda:	b29b      	uxth	r3, r3
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d005      	beq.n	8004dec <I2C_ITSlaveCplt+0x150>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004de4:	f043 0204 	orr.w	r2, r3, #4
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	2200      	movs	r2, #0
 8004df0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	2200      	movs	r2, #0
 8004df8:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d010      	beq.n	8004e24 <I2C_ITSlaveCplt+0x188>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e06:	4619      	mov	r1, r3
 8004e08:	6878      	ldr	r0, [r7, #4]
 8004e0a:	f000 f8a7 	bl	8004f5c <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004e14:	b2db      	uxtb	r3, r3
 8004e16:	2b28      	cmp	r3, #40	; 0x28
 8004e18:	d141      	bne.n	8004e9e <I2C_ITSlaveCplt+0x202>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8004e1a:	6979      	ldr	r1, [r7, #20]
 8004e1c:	6878      	ldr	r0, [r7, #4]
 8004e1e:	f000 f847 	bl	8004eb0 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004e22:	e03c      	b.n	8004e9e <I2C_ITSlaveCplt+0x202>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e28:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004e2c:	d014      	beq.n	8004e58 <I2C_ITSlaveCplt+0x1bc>
    I2C_ITSlaveSeqCplt(hi2c);
 8004e2e:	6878      	ldr	r0, [r7, #4]
 8004e30:	f7ff fed6 	bl	8004be0 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	4a1d      	ldr	r2, [pc, #116]	; (8004eac <I2C_ITSlaveCplt+0x210>)
 8004e38:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	2220      	movs	r2, #32
 8004e3e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	2200      	movs	r2, #0
 8004e46:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	2200      	movs	r2, #0
 8004e4c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8004e50:	6878      	ldr	r0, [r7, #4]
 8004e52:	f7ff fd20 	bl	8004896 <HAL_I2C_ListenCpltCallback>
}
 8004e56:	e022      	b.n	8004e9e <I2C_ITSlaveCplt+0x202>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004e5e:	b2db      	uxtb	r3, r3
 8004e60:	2b22      	cmp	r3, #34	; 0x22
 8004e62:	d10e      	bne.n	8004e82 <I2C_ITSlaveCplt+0x1e6>
    hi2c->State = HAL_I2C_STATE_READY;
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	2220      	movs	r2, #32
 8004e68:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	2200      	movs	r2, #0
 8004e70:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	2200      	movs	r2, #0
 8004e76:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004e7a:	6878      	ldr	r0, [r7, #4]
 8004e7c:	f7ff fcf3 	bl	8004866 <HAL_I2C_SlaveRxCpltCallback>
}
 8004e80:	e00d      	b.n	8004e9e <I2C_ITSlaveCplt+0x202>
    hi2c->State = HAL_I2C_STATE_READY;
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	2220      	movs	r2, #32
 8004e86:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	2200      	movs	r2, #0
 8004e8e:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	2200      	movs	r2, #0
 8004e94:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004e98:	6878      	ldr	r0, [r7, #4]
 8004e9a:	f7ff fcda 	bl	8004852 <HAL_I2C_SlaveTxCpltCallback>
}
 8004e9e:	bf00      	nop
 8004ea0:	3718      	adds	r7, #24
 8004ea2:	46bd      	mov	sp, r7
 8004ea4:	bd80      	pop	{r7, pc}
 8004ea6:	bf00      	nop
 8004ea8:	fe00e800 	.word	0xfe00e800
 8004eac:	ffff0000 	.word	0xffff0000

08004eb0 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8004eb0:	b580      	push	{r7, lr}
 8004eb2:	b082      	sub	sp, #8
 8004eb4:	af00      	add	r7, sp, #0
 8004eb6:	6078      	str	r0, [r7, #4]
 8004eb8:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	4a26      	ldr	r2, [pc, #152]	; (8004f58 <I2C_ITListenCplt+0xa8>)
 8004ebe:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	2200      	movs	r2, #0
 8004ec4:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	2220      	movs	r2, #32
 8004eca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	2200      	movs	r2, #0
 8004ed2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	2200      	movs	r2, #0
 8004eda:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8004edc:	683b      	ldr	r3, [r7, #0]
 8004ede:	089b      	lsrs	r3, r3, #2
 8004ee0:	f003 0301 	and.w	r3, r3, #1
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d022      	beq.n	8004f2e <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ef2:	b2d2      	uxtb	r2, r2
 8004ef4:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004efa:	1c5a      	adds	r2, r3, #1
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d012      	beq.n	8004f2e <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f0c:	3b01      	subs	r3, #1
 8004f0e:	b29a      	uxth	r2, r3
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f18:	b29b      	uxth	r3, r3
 8004f1a:	3b01      	subs	r3, #1
 8004f1c:	b29a      	uxth	r2, r3
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f26:	f043 0204 	orr.w	r2, r3, #4
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8004f2e:	f248 0103 	movw	r1, #32771	; 0x8003
 8004f32:	6878      	ldr	r0, [r7, #4]
 8004f34:	f000 fbde 	bl	80056f4 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	2210      	movs	r2, #16
 8004f3e:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	2200      	movs	r2, #0
 8004f44:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8004f48:	6878      	ldr	r0, [r7, #4]
 8004f4a:	f7ff fca4 	bl	8004896 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8004f4e:	bf00      	nop
 8004f50:	3708      	adds	r7, #8
 8004f52:	46bd      	mov	sp, r7
 8004f54:	bd80      	pop	{r7, pc}
 8004f56:	bf00      	nop
 8004f58:	ffff0000 	.word	0xffff0000

08004f5c <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8004f5c:	b580      	push	{r7, lr}
 8004f5e:	b084      	sub	sp, #16
 8004f60:	af00      	add	r7, sp, #0
 8004f62:	6078      	str	r0, [r7, #4]
 8004f64:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004f6c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	2200      	movs	r2, #0
 8004f72:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	4a5d      	ldr	r2, [pc, #372]	; (80050f0 <I2C_ITError+0x194>)
 8004f7a:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	2200      	movs	r2, #0
 8004f80:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004f86:	683b      	ldr	r3, [r7, #0]
 8004f88:	431a      	orrs	r2, r3
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8004f8e:	7bfb      	ldrb	r3, [r7, #15]
 8004f90:	2b28      	cmp	r3, #40	; 0x28
 8004f92:	d005      	beq.n	8004fa0 <I2C_ITError+0x44>
 8004f94:	7bfb      	ldrb	r3, [r7, #15]
 8004f96:	2b29      	cmp	r3, #41	; 0x29
 8004f98:	d002      	beq.n	8004fa0 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8004f9a:	7bfb      	ldrb	r3, [r7, #15]
 8004f9c:	2b2a      	cmp	r3, #42	; 0x2a
 8004f9e:	d10b      	bne.n	8004fb8 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8004fa0:	2103      	movs	r1, #3
 8004fa2:	6878      	ldr	r0, [r7, #4]
 8004fa4:	f000 fba6 	bl	80056f4 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	2228      	movs	r2, #40	; 0x28
 8004fac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	4a50      	ldr	r2, [pc, #320]	; (80050f4 <I2C_ITError+0x198>)
 8004fb4:	635a      	str	r2, [r3, #52]	; 0x34
 8004fb6:	e011      	b.n	8004fdc <I2C_ITError+0x80>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8004fb8:	f248 0103 	movw	r1, #32771	; 0x8003
 8004fbc:	6878      	ldr	r0, [r7, #4]
 8004fbe:	f000 fb99 	bl	80056f4 <I2C_Disable_IRQ>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004fc8:	b2db      	uxtb	r3, r3
 8004fca:	2b60      	cmp	r3, #96	; 0x60
 8004fcc:	d003      	beq.n	8004fd6 <I2C_ITError+0x7a>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	2220      	movs	r2, #32
 8004fd2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
    hi2c->XferISR       = NULL;
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	2200      	movs	r2, #0
 8004fda:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fe0:	60bb      	str	r3, [r7, #8]
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d039      	beq.n	800505e <I2C_ITError+0x102>
 8004fea:	68bb      	ldr	r3, [r7, #8]
 8004fec:	2b11      	cmp	r3, #17
 8004fee:	d002      	beq.n	8004ff6 <I2C_ITError+0x9a>
 8004ff0:	68bb      	ldr	r3, [r7, #8]
 8004ff2:	2b21      	cmp	r3, #33	; 0x21
 8004ff4:	d133      	bne.n	800505e <I2C_ITError+0x102>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005000:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005004:	d107      	bne.n	8005016 <I2C_ITError+0xba>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	681a      	ldr	r2, [r3, #0]
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005014:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800501a:	4618      	mov	r0, r3
 800501c:	f7fe fcb0 	bl	8003980 <HAL_DMA_GetState>
 8005020:	4603      	mov	r3, r0
 8005022:	2b01      	cmp	r3, #1
 8005024:	d017      	beq.n	8005056 <I2C_ITError+0xfa>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800502a:	4a33      	ldr	r2, [pc, #204]	; (80050f8 <I2C_ITError+0x19c>)
 800502c:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	2200      	movs	r2, #0
 8005032:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800503a:	4618      	mov	r0, r3
 800503c:	f7fe fc7e 	bl	800393c <HAL_DMA_Abort_IT>
 8005040:	4603      	mov	r3, r0
 8005042:	2b00      	cmp	r3, #0
 8005044:	d04d      	beq.n	80050e2 <I2C_ITError+0x186>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800504a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800504c:	687a      	ldr	r2, [r7, #4]
 800504e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005050:	4610      	mov	r0, r2
 8005052:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8005054:	e045      	b.n	80050e2 <I2C_ITError+0x186>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8005056:	6878      	ldr	r0, [r7, #4]
 8005058:	f000 f850 	bl	80050fc <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800505c:	e041      	b.n	80050e2 <I2C_ITError+0x186>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005062:	2b00      	cmp	r3, #0
 8005064:	d039      	beq.n	80050da <I2C_ITError+0x17e>
 8005066:	68bb      	ldr	r3, [r7, #8]
 8005068:	2b12      	cmp	r3, #18
 800506a:	d002      	beq.n	8005072 <I2C_ITError+0x116>
 800506c:	68bb      	ldr	r3, [r7, #8]
 800506e:	2b22      	cmp	r3, #34	; 0x22
 8005070:	d133      	bne.n	80050da <I2C_ITError+0x17e>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800507c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005080:	d107      	bne.n	8005092 <I2C_ITError+0x136>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	681a      	ldr	r2, [r3, #0]
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005090:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005096:	4618      	mov	r0, r3
 8005098:	f7fe fc72 	bl	8003980 <HAL_DMA_GetState>
 800509c:	4603      	mov	r3, r0
 800509e:	2b01      	cmp	r3, #1
 80050a0:	d017      	beq.n	80050d2 <I2C_ITError+0x176>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050a6:	4a14      	ldr	r2, [pc, #80]	; (80050f8 <I2C_ITError+0x19c>)
 80050a8:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	2200      	movs	r2, #0
 80050ae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050b6:	4618      	mov	r0, r3
 80050b8:	f7fe fc40 	bl	800393c <HAL_DMA_Abort_IT>
 80050bc:	4603      	mov	r3, r0
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d011      	beq.n	80050e6 <I2C_ITError+0x18a>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80050c8:	687a      	ldr	r2, [r7, #4]
 80050ca:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80050cc:	4610      	mov	r0, r2
 80050ce:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80050d0:	e009      	b.n	80050e6 <I2C_ITError+0x18a>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80050d2:	6878      	ldr	r0, [r7, #4]
 80050d4:	f000 f812 	bl	80050fc <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80050d8:	e005      	b.n	80050e6 <I2C_ITError+0x18a>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 80050da:	6878      	ldr	r0, [r7, #4]
 80050dc:	f000 f80e 	bl	80050fc <I2C_TreatErrorCallback>
  }
}
 80050e0:	e002      	b.n	80050e8 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80050e2:	bf00      	nop
 80050e4:	e000      	b.n	80050e8 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80050e6:	bf00      	nop
}
 80050e8:	bf00      	nop
 80050ea:	3710      	adds	r7, #16
 80050ec:	46bd      	mov	sp, r7
 80050ee:	bd80      	pop	{r7, pc}
 80050f0:	ffff0000 	.word	0xffff0000
 80050f4:	080048d3 	.word	0x080048d3
 80050f8:	08005193 	.word	0x08005193

080050fc <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80050fc:	b580      	push	{r7, lr}
 80050fe:	b082      	sub	sp, #8
 8005100:	af00      	add	r7, sp, #0
 8005102:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800510a:	b2db      	uxtb	r3, r3
 800510c:	2b60      	cmp	r3, #96	; 0x60
 800510e:	d10e      	bne.n	800512e <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	2220      	movs	r2, #32
 8005114:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	2200      	movs	r2, #0
 800511c:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	2200      	movs	r2, #0
 8005122:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8005126:	6878      	ldr	r0, [r7, #4]
 8005128:	f7ff fbc9 	bl	80048be <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800512c:	e009      	b.n	8005142 <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	2200      	movs	r2, #0
 8005132:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	2200      	movs	r2, #0
 8005138:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 800513c:	6878      	ldr	r0, [r7, #4]
 800513e:	f7ff fbb4 	bl	80048aa <HAL_I2C_ErrorCallback>
}
 8005142:	bf00      	nop
 8005144:	3708      	adds	r7, #8
 8005146:	46bd      	mov	sp, r7
 8005148:	bd80      	pop	{r7, pc}

0800514a <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800514a:	b480      	push	{r7}
 800514c:	b083      	sub	sp, #12
 800514e:	af00      	add	r7, sp, #0
 8005150:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	699b      	ldr	r3, [r3, #24]
 8005158:	f003 0302 	and.w	r3, r3, #2
 800515c:	2b02      	cmp	r3, #2
 800515e:	d103      	bne.n	8005168 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	2200      	movs	r2, #0
 8005166:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	699b      	ldr	r3, [r3, #24]
 800516e:	f003 0301 	and.w	r3, r3, #1
 8005172:	2b01      	cmp	r3, #1
 8005174:	d007      	beq.n	8005186 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	699a      	ldr	r2, [r3, #24]
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	f042 0201 	orr.w	r2, r2, #1
 8005184:	619a      	str	r2, [r3, #24]
  }
}
 8005186:	bf00      	nop
 8005188:	370c      	adds	r7, #12
 800518a:	46bd      	mov	sp, r7
 800518c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005190:	4770      	bx	lr

08005192 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8005192:	b580      	push	{r7, lr}
 8005194:	b084      	sub	sp, #16
 8005196:	af00      	add	r7, sp, #0
 8005198:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800519e:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d003      	beq.n	80051b0 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051ac:	2200      	movs	r2, #0
 80051ae:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d003      	beq.n	80051c0 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80051bc:	2200      	movs	r2, #0
 80051be:	651a      	str	r2, [r3, #80]	; 0x50
  }

  I2C_TreatErrorCallback(hi2c);
 80051c0:	68f8      	ldr	r0, [r7, #12]
 80051c2:	f7ff ff9b 	bl	80050fc <I2C_TreatErrorCallback>
}
 80051c6:	bf00      	nop
 80051c8:	3710      	adds	r7, #16
 80051ca:	46bd      	mov	sp, r7
 80051cc:	bd80      	pop	{r7, pc}

080051ce <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80051ce:	b580      	push	{r7, lr}
 80051d0:	b084      	sub	sp, #16
 80051d2:	af00      	add	r7, sp, #0
 80051d4:	60f8      	str	r0, [r7, #12]
 80051d6:	60b9      	str	r1, [r7, #8]
 80051d8:	603b      	str	r3, [r7, #0]
 80051da:	4613      	mov	r3, r2
 80051dc:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80051de:	e022      	b.n	8005226 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80051e0:	683b      	ldr	r3, [r7, #0]
 80051e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051e6:	d01e      	beq.n	8005226 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80051e8:	f7fe f9c8 	bl	800357c <HAL_GetTick>
 80051ec:	4602      	mov	r2, r0
 80051ee:	69bb      	ldr	r3, [r7, #24]
 80051f0:	1ad3      	subs	r3, r2, r3
 80051f2:	683a      	ldr	r2, [r7, #0]
 80051f4:	429a      	cmp	r2, r3
 80051f6:	d302      	bcc.n	80051fe <I2C_WaitOnFlagUntilTimeout+0x30>
 80051f8:	683b      	ldr	r3, [r7, #0]
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d113      	bne.n	8005226 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005202:	f043 0220 	orr.w	r2, r3, #32
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	2220      	movs	r2, #32
 800520e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	2200      	movs	r2, #0
 8005216:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	2200      	movs	r2, #0
 800521e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8005222:	2301      	movs	r3, #1
 8005224:	e00f      	b.n	8005246 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	699a      	ldr	r2, [r3, #24]
 800522c:	68bb      	ldr	r3, [r7, #8]
 800522e:	4013      	ands	r3, r2
 8005230:	68ba      	ldr	r2, [r7, #8]
 8005232:	429a      	cmp	r2, r3
 8005234:	bf0c      	ite	eq
 8005236:	2301      	moveq	r3, #1
 8005238:	2300      	movne	r3, #0
 800523a:	b2db      	uxtb	r3, r3
 800523c:	461a      	mov	r2, r3
 800523e:	79fb      	ldrb	r3, [r7, #7]
 8005240:	429a      	cmp	r2, r3
 8005242:	d0cd      	beq.n	80051e0 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005244:	2300      	movs	r3, #0
}
 8005246:	4618      	mov	r0, r3
 8005248:	3710      	adds	r7, #16
 800524a:	46bd      	mov	sp, r7
 800524c:	bd80      	pop	{r7, pc}

0800524e <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800524e:	b580      	push	{r7, lr}
 8005250:	b084      	sub	sp, #16
 8005252:	af00      	add	r7, sp, #0
 8005254:	60f8      	str	r0, [r7, #12]
 8005256:	60b9      	str	r1, [r7, #8]
 8005258:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800525a:	e02c      	b.n	80052b6 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800525c:	687a      	ldr	r2, [r7, #4]
 800525e:	68b9      	ldr	r1, [r7, #8]
 8005260:	68f8      	ldr	r0, [r7, #12]
 8005262:	f000 f8eb 	bl	800543c <I2C_IsErrorOccurred>
 8005266:	4603      	mov	r3, r0
 8005268:	2b00      	cmp	r3, #0
 800526a:	d001      	beq.n	8005270 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800526c:	2301      	movs	r3, #1
 800526e:	e02a      	b.n	80052c6 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005270:	68bb      	ldr	r3, [r7, #8]
 8005272:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005276:	d01e      	beq.n	80052b6 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005278:	f7fe f980 	bl	800357c <HAL_GetTick>
 800527c:	4602      	mov	r2, r0
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	1ad3      	subs	r3, r2, r3
 8005282:	68ba      	ldr	r2, [r7, #8]
 8005284:	429a      	cmp	r2, r3
 8005286:	d302      	bcc.n	800528e <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8005288:	68bb      	ldr	r3, [r7, #8]
 800528a:	2b00      	cmp	r3, #0
 800528c:	d113      	bne.n	80052b6 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005292:	f043 0220 	orr.w	r2, r3, #32
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	2220      	movs	r2, #32
 800529e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	2200      	movs	r2, #0
 80052a6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	2200      	movs	r2, #0
 80052ae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80052b2:	2301      	movs	r3, #1
 80052b4:	e007      	b.n	80052c6 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	699b      	ldr	r3, [r3, #24]
 80052bc:	f003 0302 	and.w	r3, r3, #2
 80052c0:	2b02      	cmp	r3, #2
 80052c2:	d1cb      	bne.n	800525c <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80052c4:	2300      	movs	r3, #0
}
 80052c6:	4618      	mov	r0, r3
 80052c8:	3710      	adds	r7, #16
 80052ca:	46bd      	mov	sp, r7
 80052cc:	bd80      	pop	{r7, pc}

080052ce <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80052ce:	b580      	push	{r7, lr}
 80052d0:	b084      	sub	sp, #16
 80052d2:	af00      	add	r7, sp, #0
 80052d4:	60f8      	str	r0, [r7, #12]
 80052d6:	60b9      	str	r1, [r7, #8]
 80052d8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80052da:	e028      	b.n	800532e <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80052dc:	687a      	ldr	r2, [r7, #4]
 80052de:	68b9      	ldr	r1, [r7, #8]
 80052e0:	68f8      	ldr	r0, [r7, #12]
 80052e2:	f000 f8ab 	bl	800543c <I2C_IsErrorOccurred>
 80052e6:	4603      	mov	r3, r0
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d001      	beq.n	80052f0 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80052ec:	2301      	movs	r3, #1
 80052ee:	e026      	b.n	800533e <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80052f0:	f7fe f944 	bl	800357c <HAL_GetTick>
 80052f4:	4602      	mov	r2, r0
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	1ad3      	subs	r3, r2, r3
 80052fa:	68ba      	ldr	r2, [r7, #8]
 80052fc:	429a      	cmp	r2, r3
 80052fe:	d302      	bcc.n	8005306 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8005300:	68bb      	ldr	r3, [r7, #8]
 8005302:	2b00      	cmp	r3, #0
 8005304:	d113      	bne.n	800532e <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800530a:	f043 0220 	orr.w	r2, r3, #32
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	2220      	movs	r2, #32
 8005316:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	2200      	movs	r2, #0
 800531e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	2200      	movs	r2, #0
 8005326:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800532a:	2301      	movs	r3, #1
 800532c:	e007      	b.n	800533e <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	699b      	ldr	r3, [r3, #24]
 8005334:	f003 0320 	and.w	r3, r3, #32
 8005338:	2b20      	cmp	r3, #32
 800533a:	d1cf      	bne.n	80052dc <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800533c:	2300      	movs	r3, #0
}
 800533e:	4618      	mov	r0, r3
 8005340:	3710      	adds	r7, #16
 8005342:	46bd      	mov	sp, r7
 8005344:	bd80      	pop	{r7, pc}
	...

08005348 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005348:	b580      	push	{r7, lr}
 800534a:	b084      	sub	sp, #16
 800534c:	af00      	add	r7, sp, #0
 800534e:	60f8      	str	r0, [r7, #12]
 8005350:	60b9      	str	r1, [r7, #8]
 8005352:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005354:	e064      	b.n	8005420 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005356:	687a      	ldr	r2, [r7, #4]
 8005358:	68b9      	ldr	r1, [r7, #8]
 800535a:	68f8      	ldr	r0, [r7, #12]
 800535c:	f000 f86e 	bl	800543c <I2C_IsErrorOccurred>
 8005360:	4603      	mov	r3, r0
 8005362:	2b00      	cmp	r3, #0
 8005364:	d001      	beq.n	800536a <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005366:	2301      	movs	r3, #1
 8005368:	e062      	b.n	8005430 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	699b      	ldr	r3, [r3, #24]
 8005370:	f003 0320 	and.w	r3, r3, #32
 8005374:	2b20      	cmp	r3, #32
 8005376:	d138      	bne.n	80053ea <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	699b      	ldr	r3, [r3, #24]
 800537e:	f003 0304 	and.w	r3, r3, #4
 8005382:	2b04      	cmp	r3, #4
 8005384:	d105      	bne.n	8005392 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800538a:	2b00      	cmp	r3, #0
 800538c:	d001      	beq.n	8005392 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 800538e:	2300      	movs	r3, #0
 8005390:	e04e      	b.n	8005430 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	699b      	ldr	r3, [r3, #24]
 8005398:	f003 0310 	and.w	r3, r3, #16
 800539c:	2b10      	cmp	r3, #16
 800539e:	d107      	bne.n	80053b0 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	2210      	movs	r2, #16
 80053a6:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	2204      	movs	r2, #4
 80053ac:	645a      	str	r2, [r3, #68]	; 0x44
 80053ae:	e002      	b.n	80053b6 <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	2200      	movs	r2, #0
 80053b4:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	2220      	movs	r2, #32
 80053bc:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	6859      	ldr	r1, [r3, #4]
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	681a      	ldr	r2, [r3, #0]
 80053c8:	4b1b      	ldr	r3, [pc, #108]	; (8005438 <I2C_WaitOnRXNEFlagUntilTimeout+0xf0>)
 80053ca:	400b      	ands	r3, r1
 80053cc:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	2220      	movs	r2, #32
 80053d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	2200      	movs	r2, #0
 80053da:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	2200      	movs	r2, #0
 80053e2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80053e6:	2301      	movs	r3, #1
 80053e8:	e022      	b.n	8005430 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80053ea:	f7fe f8c7 	bl	800357c <HAL_GetTick>
 80053ee:	4602      	mov	r2, r0
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	1ad3      	subs	r3, r2, r3
 80053f4:	68ba      	ldr	r2, [r7, #8]
 80053f6:	429a      	cmp	r2, r3
 80053f8:	d302      	bcc.n	8005400 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 80053fa:	68bb      	ldr	r3, [r7, #8]
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d10f      	bne.n	8005420 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005404:	f043 0220 	orr.w	r2, r3, #32
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	2220      	movs	r2, #32
 8005410:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	2200      	movs	r2, #0
 8005418:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800541c:	2301      	movs	r3, #1
 800541e:	e007      	b.n	8005430 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	699b      	ldr	r3, [r3, #24]
 8005426:	f003 0304 	and.w	r3, r3, #4
 800542a:	2b04      	cmp	r3, #4
 800542c:	d193      	bne.n	8005356 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800542e:	2300      	movs	r3, #0
}
 8005430:	4618      	mov	r0, r3
 8005432:	3710      	adds	r7, #16
 8005434:	46bd      	mov	sp, r7
 8005436:	bd80      	pop	{r7, pc}
 8005438:	fe00e800 	.word	0xfe00e800

0800543c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800543c:	b580      	push	{r7, lr}
 800543e:	b08a      	sub	sp, #40	; 0x28
 8005440:	af00      	add	r7, sp, #0
 8005442:	60f8      	str	r0, [r7, #12]
 8005444:	60b9      	str	r1, [r7, #8]
 8005446:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005448:	2300      	movs	r3, #0
 800544a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	699b      	ldr	r3, [r3, #24]
 8005454:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8005456:	2300      	movs	r3, #0
 8005458:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800545e:	69bb      	ldr	r3, [r7, #24]
 8005460:	f003 0310 	and.w	r3, r3, #16
 8005464:	2b00      	cmp	r3, #0
 8005466:	d068      	beq.n	800553a <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	2210      	movs	r2, #16
 800546e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005470:	e049      	b.n	8005506 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8005472:	68bb      	ldr	r3, [r7, #8]
 8005474:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005478:	d045      	beq.n	8005506 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800547a:	f7fe f87f 	bl	800357c <HAL_GetTick>
 800547e:	4602      	mov	r2, r0
 8005480:	69fb      	ldr	r3, [r7, #28]
 8005482:	1ad3      	subs	r3, r2, r3
 8005484:	68ba      	ldr	r2, [r7, #8]
 8005486:	429a      	cmp	r2, r3
 8005488:	d302      	bcc.n	8005490 <I2C_IsErrorOccurred+0x54>
 800548a:	68bb      	ldr	r3, [r7, #8]
 800548c:	2b00      	cmp	r3, #0
 800548e:	d13a      	bne.n	8005506 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	685b      	ldr	r3, [r3, #4]
 8005496:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800549a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80054a2:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	699b      	ldr	r3, [r3, #24]
 80054aa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80054ae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80054b2:	d121      	bne.n	80054f8 <I2C_IsErrorOccurred+0xbc>
 80054b4:	697b      	ldr	r3, [r7, #20]
 80054b6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80054ba:	d01d      	beq.n	80054f8 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80054bc:	7cfb      	ldrb	r3, [r7, #19]
 80054be:	2b20      	cmp	r3, #32
 80054c0:	d01a      	beq.n	80054f8 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	685a      	ldr	r2, [r3, #4]
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80054d0:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80054d2:	f7fe f853 	bl	800357c <HAL_GetTick>
 80054d6:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80054d8:	e00e      	b.n	80054f8 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80054da:	f7fe f84f 	bl	800357c <HAL_GetTick>
 80054de:	4602      	mov	r2, r0
 80054e0:	69fb      	ldr	r3, [r7, #28]
 80054e2:	1ad3      	subs	r3, r2, r3
 80054e4:	2b19      	cmp	r3, #25
 80054e6:	d907      	bls.n	80054f8 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 80054e8:	6a3b      	ldr	r3, [r7, #32]
 80054ea:	f043 0320 	orr.w	r3, r3, #32
 80054ee:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80054f0:	2301      	movs	r3, #1
 80054f2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 80054f6:	e006      	b.n	8005506 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	699b      	ldr	r3, [r3, #24]
 80054fe:	f003 0320 	and.w	r3, r3, #32
 8005502:	2b20      	cmp	r3, #32
 8005504:	d1e9      	bne.n	80054da <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	699b      	ldr	r3, [r3, #24]
 800550c:	f003 0320 	and.w	r3, r3, #32
 8005510:	2b20      	cmp	r3, #32
 8005512:	d003      	beq.n	800551c <I2C_IsErrorOccurred+0xe0>
 8005514:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005518:	2b00      	cmp	r3, #0
 800551a:	d0aa      	beq.n	8005472 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800551c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005520:	2b00      	cmp	r3, #0
 8005522:	d103      	bne.n	800552c <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	2220      	movs	r2, #32
 800552a:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800552c:	6a3b      	ldr	r3, [r7, #32]
 800552e:	f043 0304 	orr.w	r3, r3, #4
 8005532:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8005534:	2301      	movs	r3, #1
 8005536:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	699b      	ldr	r3, [r3, #24]
 8005540:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8005542:	69bb      	ldr	r3, [r7, #24]
 8005544:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005548:	2b00      	cmp	r3, #0
 800554a:	d00b      	beq.n	8005564 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800554c:	6a3b      	ldr	r3, [r7, #32]
 800554e:	f043 0301 	orr.w	r3, r3, #1
 8005552:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	f44f 7280 	mov.w	r2, #256	; 0x100
 800555c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800555e:	2301      	movs	r3, #1
 8005560:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8005564:	69bb      	ldr	r3, [r7, #24]
 8005566:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800556a:	2b00      	cmp	r3, #0
 800556c:	d00b      	beq.n	8005586 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800556e:	6a3b      	ldr	r3, [r7, #32]
 8005570:	f043 0308 	orr.w	r3, r3, #8
 8005574:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800557e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005580:	2301      	movs	r3, #1
 8005582:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8005586:	69bb      	ldr	r3, [r7, #24]
 8005588:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800558c:	2b00      	cmp	r3, #0
 800558e:	d00b      	beq.n	80055a8 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8005590:	6a3b      	ldr	r3, [r7, #32]
 8005592:	f043 0302 	orr.w	r3, r3, #2
 8005596:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	f44f 7200 	mov.w	r2, #512	; 0x200
 80055a0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80055a2:	2301      	movs	r3, #1
 80055a4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 80055a8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d01c      	beq.n	80055ea <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80055b0:	68f8      	ldr	r0, [r7, #12]
 80055b2:	f7ff fdca 	bl	800514a <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	6859      	ldr	r1, [r3, #4]
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	681a      	ldr	r2, [r3, #0]
 80055c0:	4b0d      	ldr	r3, [pc, #52]	; (80055f8 <I2C_IsErrorOccurred+0x1bc>)
 80055c2:	400b      	ands	r3, r1
 80055c4:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80055ca:	6a3b      	ldr	r3, [r7, #32]
 80055cc:	431a      	orrs	r2, r3
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	2220      	movs	r2, #32
 80055d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	2200      	movs	r2, #0
 80055de:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	2200      	movs	r2, #0
 80055e6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 80055ea:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80055ee:	4618      	mov	r0, r3
 80055f0:	3728      	adds	r7, #40	; 0x28
 80055f2:	46bd      	mov	sp, r7
 80055f4:	bd80      	pop	{r7, pc}
 80055f6:	bf00      	nop
 80055f8:	fe00e800 	.word	0xfe00e800

080055fc <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80055fc:	b580      	push	{r7, lr}
 80055fe:	b086      	sub	sp, #24
 8005600:	af00      	add	r7, sp, #0
 8005602:	60f8      	str	r0, [r7, #12]
 8005604:	607b      	str	r3, [r7, #4]
 8005606:	460b      	mov	r3, r1
 8005608:	817b      	strh	r3, [r7, #10]
 800560a:	4613      	mov	r3, r2
 800560c:	727b      	strb	r3, [r7, #9]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	4a2f      	ldr	r2, [pc, #188]	; (80056d0 <I2C_TransferConfig+0xd4>)
 8005614:	4293      	cmp	r3, r2
 8005616:	d013      	beq.n	8005640 <I2C_TransferConfig+0x44>
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	4a2d      	ldr	r2, [pc, #180]	; (80056d4 <I2C_TransferConfig+0xd8>)
 800561e:	4293      	cmp	r3, r2
 8005620:	d00e      	beq.n	8005640 <I2C_TransferConfig+0x44>
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	4a2c      	ldr	r2, [pc, #176]	; (80056d8 <I2C_TransferConfig+0xdc>)
 8005628:	4293      	cmp	r3, r2
 800562a:	d009      	beq.n	8005640 <I2C_TransferConfig+0x44>
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	4a2a      	ldr	r2, [pc, #168]	; (80056dc <I2C_TransferConfig+0xe0>)
 8005632:	4293      	cmp	r3, r2
 8005634:	d004      	beq.n	8005640 <I2C_TransferConfig+0x44>
 8005636:	f641 3147 	movw	r1, #6983	; 0x1b47
 800563a:	4829      	ldr	r0, [pc, #164]	; (80056e0 <I2C_TransferConfig+0xe4>)
 800563c:	f7fd faa5 	bl	8002b8a <assert_failed>
  assert_param(IS_TRANSFER_MODE(Mode));
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005646:	d00b      	beq.n	8005660 <I2C_TransferConfig+0x64>
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800564e:	d007      	beq.n	8005660 <I2C_TransferConfig+0x64>
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	2b00      	cmp	r3, #0
 8005654:	d004      	beq.n	8005660 <I2C_TransferConfig+0x64>
 8005656:	f641 3148 	movw	r1, #6984	; 0x1b48
 800565a:	4821      	ldr	r0, [pc, #132]	; (80056e0 <I2C_TransferConfig+0xe4>)
 800565c:	f7fd fa95 	bl	8002b8a <assert_failed>
  assert_param(IS_TRANSFER_REQUEST(Request));
 8005660:	6a3b      	ldr	r3, [r7, #32]
 8005662:	4a20      	ldr	r2, [pc, #128]	; (80056e4 <I2C_TransferConfig+0xe8>)
 8005664:	4293      	cmp	r3, r2
 8005666:	d00f      	beq.n	8005688 <I2C_TransferConfig+0x8c>
 8005668:	6a3b      	ldr	r3, [r7, #32]
 800566a:	4a1f      	ldr	r2, [pc, #124]	; (80056e8 <I2C_TransferConfig+0xec>)
 800566c:	4293      	cmp	r3, r2
 800566e:	d00b      	beq.n	8005688 <I2C_TransferConfig+0x8c>
 8005670:	6a3b      	ldr	r3, [r7, #32]
 8005672:	4a1e      	ldr	r2, [pc, #120]	; (80056ec <I2C_TransferConfig+0xf0>)
 8005674:	4293      	cmp	r3, r2
 8005676:	d007      	beq.n	8005688 <I2C_TransferConfig+0x8c>
 8005678:	6a3b      	ldr	r3, [r7, #32]
 800567a:	2b00      	cmp	r3, #0
 800567c:	d004      	beq.n	8005688 <I2C_TransferConfig+0x8c>
 800567e:	f641 3149 	movw	r1, #6985	; 0x1b49
 8005682:	4817      	ldr	r0, [pc, #92]	; (80056e0 <I2C_TransferConfig+0xe4>)
 8005684:	f7fd fa81 	bl	8002b8a <assert_failed>

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005688:	897b      	ldrh	r3, [r7, #10]
 800568a:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800568e:	7a7b      	ldrb	r3, [r7, #9]
 8005690:	041b      	lsls	r3, r3, #16
 8005692:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005696:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800569c:	6a3b      	ldr	r3, [r7, #32]
 800569e:	4313      	orrs	r3, r2
 80056a0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80056a4:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	685a      	ldr	r2, [r3, #4]
 80056ac:	6a3b      	ldr	r3, [r7, #32]
 80056ae:	0d5b      	lsrs	r3, r3, #21
 80056b0:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80056b4:	4b0e      	ldr	r3, [pc, #56]	; (80056f0 <I2C_TransferConfig+0xf4>)
 80056b6:	430b      	orrs	r3, r1
 80056b8:	43db      	mvns	r3, r3
 80056ba:	ea02 0103 	and.w	r1, r2, r3
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	697a      	ldr	r2, [r7, #20]
 80056c4:	430a      	orrs	r2, r1
 80056c6:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80056c8:	bf00      	nop
 80056ca:	3718      	adds	r7, #24
 80056cc:	46bd      	mov	sp, r7
 80056ce:	bd80      	pop	{r7, pc}
 80056d0:	40005400 	.word	0x40005400
 80056d4:	40005800 	.word	0x40005800
 80056d8:	40005c00 	.word	0x40005c00
 80056dc:	40006000 	.word	0x40006000
 80056e0:	08015744 	.word	0x08015744
 80056e4:	80004000 	.word	0x80004000
 80056e8:	80002400 	.word	0x80002400
 80056ec:	80002000 	.word	0x80002000
 80056f0:	03ff63ff 	.word	0x03ff63ff

080056f4 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 80056f4:	b480      	push	{r7}
 80056f6:	b085      	sub	sp, #20
 80056f8:	af00      	add	r7, sp, #0
 80056fa:	6078      	str	r0, [r7, #4]
 80056fc:	460b      	mov	r3, r1
 80056fe:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8005700:	2300      	movs	r3, #0
 8005702:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8005704:	887b      	ldrh	r3, [r7, #2]
 8005706:	f003 0301 	and.w	r3, r3, #1
 800570a:	2b00      	cmp	r3, #0
 800570c:	d00f      	beq.n	800572e <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 8005714:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800571c:	b2db      	uxtb	r3, r3
 800571e:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005722:	2b28      	cmp	r3, #40	; 0x28
 8005724:	d003      	beq.n	800572e <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 800572c:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800572e:	887b      	ldrh	r3, [r7, #2]
 8005730:	f003 0302 	and.w	r3, r3, #2
 8005734:	2b00      	cmp	r3, #0
 8005736:	d00f      	beq.n	8005758 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 800573e:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005746:	b2db      	uxtb	r3, r3
 8005748:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800574c:	2b28      	cmp	r3, #40	; 0x28
 800574e:	d003      	beq.n	8005758 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8005756:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8005758:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800575c:	2b00      	cmp	r3, #0
 800575e:	da03      	bge.n	8005768 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8005766:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8005768:	887b      	ldrh	r3, [r7, #2]
 800576a:	2b10      	cmp	r3, #16
 800576c:	d103      	bne.n	8005776 <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8005774:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8005776:	887b      	ldrh	r3, [r7, #2]
 8005778:	2b20      	cmp	r3, #32
 800577a:	d103      	bne.n	8005784 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	f043 0320 	orr.w	r3, r3, #32
 8005782:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8005784:	887b      	ldrh	r3, [r7, #2]
 8005786:	2b40      	cmp	r3, #64	; 0x40
 8005788:	d103      	bne.n	8005792 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005790:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	6819      	ldr	r1, [r3, #0]
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	43da      	mvns	r2, r3
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	400a      	ands	r2, r1
 80057a2:	601a      	str	r2, [r3, #0]
}
 80057a4:	bf00      	nop
 80057a6:	3714      	adds	r7, #20
 80057a8:	46bd      	mov	sp, r7
 80057aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ae:	4770      	bx	lr

080057b0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80057b0:	b580      	push	{r7, lr}
 80057b2:	b082      	sub	sp, #8
 80057b4:	af00      	add	r7, sp, #0
 80057b6:	6078      	str	r0, [r7, #4]
 80057b8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	4a32      	ldr	r2, [pc, #200]	; (8005888 <HAL_I2CEx_ConfigAnalogFilter+0xd8>)
 80057c0:	4293      	cmp	r3, r2
 80057c2:	d012      	beq.n	80057ea <HAL_I2CEx_ConfigAnalogFilter+0x3a>
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	4a30      	ldr	r2, [pc, #192]	; (800588c <HAL_I2CEx_ConfigAnalogFilter+0xdc>)
 80057ca:	4293      	cmp	r3, r2
 80057cc:	d00d      	beq.n	80057ea <HAL_I2CEx_ConfigAnalogFilter+0x3a>
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	4a2f      	ldr	r2, [pc, #188]	; (8005890 <HAL_I2CEx_ConfigAnalogFilter+0xe0>)
 80057d4:	4293      	cmp	r3, r2
 80057d6:	d008      	beq.n	80057ea <HAL_I2CEx_ConfigAnalogFilter+0x3a>
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	4a2d      	ldr	r2, [pc, #180]	; (8005894 <HAL_I2CEx_ConfigAnalogFilter+0xe4>)
 80057de:	4293      	cmp	r3, r2
 80057e0:	d003      	beq.n	80057ea <HAL_I2CEx_ConfigAnalogFilter+0x3a>
 80057e2:	215e      	movs	r1, #94	; 0x5e
 80057e4:	482c      	ldr	r0, [pc, #176]	; (8005898 <HAL_I2CEx_ConfigAnalogFilter+0xe8>)
 80057e6:	f7fd f9d0 	bl	8002b8a <assert_failed>
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));
 80057ea:	683b      	ldr	r3, [r7, #0]
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d007      	beq.n	8005800 <HAL_I2CEx_ConfigAnalogFilter+0x50>
 80057f0:	683b      	ldr	r3, [r7, #0]
 80057f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80057f6:	d003      	beq.n	8005800 <HAL_I2CEx_ConfigAnalogFilter+0x50>
 80057f8:	215f      	movs	r1, #95	; 0x5f
 80057fa:	4827      	ldr	r0, [pc, #156]	; (8005898 <HAL_I2CEx_ConfigAnalogFilter+0xe8>)
 80057fc:	f7fd f9c5 	bl	8002b8a <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005806:	b2db      	uxtb	r3, r3
 8005808:	2b20      	cmp	r3, #32
 800580a:	d138      	bne.n	800587e <HAL_I2CEx_ConfigAnalogFilter+0xce>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005812:	2b01      	cmp	r3, #1
 8005814:	d101      	bne.n	800581a <HAL_I2CEx_ConfigAnalogFilter+0x6a>
 8005816:	2302      	movs	r3, #2
 8005818:	e032      	b.n	8005880 <HAL_I2CEx_ConfigAnalogFilter+0xd0>
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	2201      	movs	r2, #1
 800581e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	2224      	movs	r2, #36	; 0x24
 8005826:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	681a      	ldr	r2, [r3, #0]
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	f022 0201 	bic.w	r2, r2, #1
 8005838:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	681a      	ldr	r2, [r3, #0]
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005848:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	6819      	ldr	r1, [r3, #0]
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	683a      	ldr	r2, [r7, #0]
 8005856:	430a      	orrs	r2, r1
 8005858:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	681a      	ldr	r2, [r3, #0]
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	f042 0201 	orr.w	r2, r2, #1
 8005868:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	2220      	movs	r2, #32
 800586e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	2200      	movs	r2, #0
 8005876:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800587a:	2300      	movs	r3, #0
 800587c:	e000      	b.n	8005880 <HAL_I2CEx_ConfigAnalogFilter+0xd0>
  }
  else
  {
    return HAL_BUSY;
 800587e:	2302      	movs	r3, #2
  }
}
 8005880:	4618      	mov	r0, r3
 8005882:	3708      	adds	r7, #8
 8005884:	46bd      	mov	sp, r7
 8005886:	bd80      	pop	{r7, pc}
 8005888:	40005400 	.word	0x40005400
 800588c:	40005800 	.word	0x40005800
 8005890:	40005c00 	.word	0x40005c00
 8005894:	40006000 	.word	0x40006000
 8005898:	0801577c 	.word	0x0801577c

0800589c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800589c:	b580      	push	{r7, lr}
 800589e:	b084      	sub	sp, #16
 80058a0:	af00      	add	r7, sp, #0
 80058a2:	6078      	str	r0, [r7, #4]
 80058a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg;

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	4a31      	ldr	r2, [pc, #196]	; (8005970 <HAL_I2CEx_ConfigDigitalFilter+0xd4>)
 80058ac:	4293      	cmp	r3, r2
 80058ae:	d012      	beq.n	80058d6 <HAL_I2CEx_ConfigDigitalFilter+0x3a>
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	4a2f      	ldr	r2, [pc, #188]	; (8005974 <HAL_I2CEx_ConfigDigitalFilter+0xd8>)
 80058b6:	4293      	cmp	r3, r2
 80058b8:	d00d      	beq.n	80058d6 <HAL_I2CEx_ConfigDigitalFilter+0x3a>
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	4a2e      	ldr	r2, [pc, #184]	; (8005978 <HAL_I2CEx_ConfigDigitalFilter+0xdc>)
 80058c0:	4293      	cmp	r3, r2
 80058c2:	d008      	beq.n	80058d6 <HAL_I2CEx_ConfigDigitalFilter+0x3a>
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	4a2c      	ldr	r2, [pc, #176]	; (800597c <HAL_I2CEx_ConfigDigitalFilter+0xe0>)
 80058ca:	4293      	cmp	r3, r2
 80058cc:	d003      	beq.n	80058d6 <HAL_I2CEx_ConfigDigitalFilter+0x3a>
 80058ce:	218c      	movs	r1, #140	; 0x8c
 80058d0:	482b      	ldr	r0, [pc, #172]	; (8005980 <HAL_I2CEx_ConfigDigitalFilter+0xe4>)
 80058d2:	f7fd f95a 	bl	8002b8a <assert_failed>
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));
 80058d6:	683b      	ldr	r3, [r7, #0]
 80058d8:	2b0f      	cmp	r3, #15
 80058da:	d903      	bls.n	80058e4 <HAL_I2CEx_ConfigDigitalFilter+0x48>
 80058dc:	218d      	movs	r1, #141	; 0x8d
 80058de:	4828      	ldr	r0, [pc, #160]	; (8005980 <HAL_I2CEx_ConfigDigitalFilter+0xe4>)
 80058e0:	f7fd f953 	bl	8002b8a <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_READY)
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80058ea:	b2db      	uxtb	r3, r3
 80058ec:	2b20      	cmp	r3, #32
 80058ee:	d139      	bne.n	8005964 <HAL_I2CEx_ConfigDigitalFilter+0xc8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80058f6:	2b01      	cmp	r3, #1
 80058f8:	d101      	bne.n	80058fe <HAL_I2CEx_ConfigDigitalFilter+0x62>
 80058fa:	2302      	movs	r3, #2
 80058fc:	e033      	b.n	8005966 <HAL_I2CEx_ConfigDigitalFilter+0xca>
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	2201      	movs	r2, #1
 8005902:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	2224      	movs	r2, #36	; 0x24
 800590a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	681a      	ldr	r2, [r3, #0]
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	f022 0201 	bic.w	r2, r2, #1
 800591c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800592c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800592e:	683b      	ldr	r3, [r7, #0]
 8005930:	021b      	lsls	r3, r3, #8
 8005932:	68fa      	ldr	r2, [r7, #12]
 8005934:	4313      	orrs	r3, r2
 8005936:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	68fa      	ldr	r2, [r7, #12]
 800593e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	681a      	ldr	r2, [r3, #0]
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	f042 0201 	orr.w	r2, r2, #1
 800594e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	2220      	movs	r2, #32
 8005954:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	2200      	movs	r2, #0
 800595c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005960:	2300      	movs	r3, #0
 8005962:	e000      	b.n	8005966 <HAL_I2CEx_ConfigDigitalFilter+0xca>
  }
  else
  {
    return HAL_BUSY;
 8005964:	2302      	movs	r3, #2
  }
}
 8005966:	4618      	mov	r0, r3
 8005968:	3710      	adds	r7, #16
 800596a:	46bd      	mov	sp, r7
 800596c:	bd80      	pop	{r7, pc}
 800596e:	bf00      	nop
 8005970:	40005400 	.word	0x40005400
 8005974:	40005800 	.word	0x40005800
 8005978:	40005c00 	.word	0x40005c00
 800597c:	40006000 	.word	0x40006000
 8005980:	0801577c 	.word	0x0801577c

08005984 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8005984:	b580      	push	{r7, lr}
 8005986:	b082      	sub	sp, #8
 8005988:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800598a:	2300      	movs	r3, #0
 800598c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800598e:	4b23      	ldr	r3, [pc, #140]	; (8005a1c <HAL_PWREx_EnableOverDrive+0x98>)
 8005990:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005992:	4a22      	ldr	r2, [pc, #136]	; (8005a1c <HAL_PWREx_EnableOverDrive+0x98>)
 8005994:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005998:	6413      	str	r3, [r2, #64]	; 0x40
 800599a:	4b20      	ldr	r3, [pc, #128]	; (8005a1c <HAL_PWREx_EnableOverDrive+0x98>)
 800599c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800599e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80059a2:	603b      	str	r3, [r7, #0]
 80059a4:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80059a6:	4b1e      	ldr	r3, [pc, #120]	; (8005a20 <HAL_PWREx_EnableOverDrive+0x9c>)
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	4a1d      	ldr	r2, [pc, #116]	; (8005a20 <HAL_PWREx_EnableOverDrive+0x9c>)
 80059ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80059b0:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80059b2:	f7fd fde3 	bl	800357c <HAL_GetTick>
 80059b6:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80059b8:	e009      	b.n	80059ce <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80059ba:	f7fd fddf 	bl	800357c <HAL_GetTick>
 80059be:	4602      	mov	r2, r0
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	1ad3      	subs	r3, r2, r3
 80059c4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80059c8:	d901      	bls.n	80059ce <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80059ca:	2303      	movs	r3, #3
 80059cc:	e022      	b.n	8005a14 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80059ce:	4b14      	ldr	r3, [pc, #80]	; (8005a20 <HAL_PWREx_EnableOverDrive+0x9c>)
 80059d0:	685b      	ldr	r3, [r3, #4]
 80059d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80059d6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80059da:	d1ee      	bne.n	80059ba <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80059dc:	4b10      	ldr	r3, [pc, #64]	; (8005a20 <HAL_PWREx_EnableOverDrive+0x9c>)
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	4a0f      	ldr	r2, [pc, #60]	; (8005a20 <HAL_PWREx_EnableOverDrive+0x9c>)
 80059e2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80059e6:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80059e8:	f7fd fdc8 	bl	800357c <HAL_GetTick>
 80059ec:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80059ee:	e009      	b.n	8005a04 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80059f0:	f7fd fdc4 	bl	800357c <HAL_GetTick>
 80059f4:	4602      	mov	r2, r0
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	1ad3      	subs	r3, r2, r3
 80059fa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80059fe:	d901      	bls.n	8005a04 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8005a00:	2303      	movs	r3, #3
 8005a02:	e007      	b.n	8005a14 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8005a04:	4b06      	ldr	r3, [pc, #24]	; (8005a20 <HAL_PWREx_EnableOverDrive+0x9c>)
 8005a06:	685b      	ldr	r3, [r3, #4]
 8005a08:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a0c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005a10:	d1ee      	bne.n	80059f0 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8005a12:	2300      	movs	r3, #0
}
 8005a14:	4618      	mov	r0, r3
 8005a16:	3708      	adds	r7, #8
 8005a18:	46bd      	mov	sp, r7
 8005a1a:	bd80      	pop	{r7, pc}
 8005a1c:	40023800 	.word	0x40023800
 8005a20:	40007000 	.word	0x40007000

08005a24 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005a24:	b580      	push	{r7, lr}
 8005a26:	b086      	sub	sp, #24
 8005a28:	af00      	add	r7, sp, #0
 8005a2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8005a2c:	2300      	movs	r3, #0
 8005a2e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d101      	bne.n	8005a3a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8005a36:	2301      	movs	r3, #1
 8005a38:	e345      	b.n	80060c6 <HAL_RCC_OscConfig+0x6a2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	2b0f      	cmp	r3, #15
 8005a40:	d904      	bls.n	8005a4c <HAL_RCC_OscConfig+0x28>
 8005a42:	f240 1163 	movw	r1, #355	; 0x163
 8005a46:	4892      	ldr	r0, [pc, #584]	; (8005c90 <HAL_RCC_OscConfig+0x26c>)
 8005a48:	f7fd f89f 	bl	8002b8a <assert_failed>

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	f003 0301 	and.w	r3, r3, #1
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	f000 809a 	beq.w	8005b8e <HAL_RCC_OscConfig+0x16a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	685b      	ldr	r3, [r3, #4]
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d00e      	beq.n	8005a80 <HAL_RCC_OscConfig+0x5c>
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	685b      	ldr	r3, [r3, #4]
 8005a66:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005a6a:	d009      	beq.n	8005a80 <HAL_RCC_OscConfig+0x5c>
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	685b      	ldr	r3, [r3, #4]
 8005a70:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005a74:	d004      	beq.n	8005a80 <HAL_RCC_OscConfig+0x5c>
 8005a76:	f240 1169 	movw	r1, #361	; 0x169
 8005a7a:	4885      	ldr	r0, [pc, #532]	; (8005c90 <HAL_RCC_OscConfig+0x26c>)
 8005a7c:	f7fd f885 	bl	8002b8a <assert_failed>
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005a80:	4b84      	ldr	r3, [pc, #528]	; (8005c94 <HAL_RCC_OscConfig+0x270>)
 8005a82:	689b      	ldr	r3, [r3, #8]
 8005a84:	f003 030c 	and.w	r3, r3, #12
 8005a88:	2b04      	cmp	r3, #4
 8005a8a:	d00c      	beq.n	8005aa6 <HAL_RCC_OscConfig+0x82>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005a8c:	4b81      	ldr	r3, [pc, #516]	; (8005c94 <HAL_RCC_OscConfig+0x270>)
 8005a8e:	689b      	ldr	r3, [r3, #8]
 8005a90:	f003 030c 	and.w	r3, r3, #12
 8005a94:	2b08      	cmp	r3, #8
 8005a96:	d112      	bne.n	8005abe <HAL_RCC_OscConfig+0x9a>
 8005a98:	4b7e      	ldr	r3, [pc, #504]	; (8005c94 <HAL_RCC_OscConfig+0x270>)
 8005a9a:	685b      	ldr	r3, [r3, #4]
 8005a9c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005aa0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005aa4:	d10b      	bne.n	8005abe <HAL_RCC_OscConfig+0x9a>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005aa6:	4b7b      	ldr	r3, [pc, #492]	; (8005c94 <HAL_RCC_OscConfig+0x270>)
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d06c      	beq.n	8005b8c <HAL_RCC_OscConfig+0x168>
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	685b      	ldr	r3, [r3, #4]
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d168      	bne.n	8005b8c <HAL_RCC_OscConfig+0x168>
      {
        return HAL_ERROR;
 8005aba:	2301      	movs	r3, #1
 8005abc:	e303      	b.n	80060c6 <HAL_RCC_OscConfig+0x6a2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	685b      	ldr	r3, [r3, #4]
 8005ac2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005ac6:	d106      	bne.n	8005ad6 <HAL_RCC_OscConfig+0xb2>
 8005ac8:	4b72      	ldr	r3, [pc, #456]	; (8005c94 <HAL_RCC_OscConfig+0x270>)
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	4a71      	ldr	r2, [pc, #452]	; (8005c94 <HAL_RCC_OscConfig+0x270>)
 8005ace:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005ad2:	6013      	str	r3, [r2, #0]
 8005ad4:	e02e      	b.n	8005b34 <HAL_RCC_OscConfig+0x110>
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	685b      	ldr	r3, [r3, #4]
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d10c      	bne.n	8005af8 <HAL_RCC_OscConfig+0xd4>
 8005ade:	4b6d      	ldr	r3, [pc, #436]	; (8005c94 <HAL_RCC_OscConfig+0x270>)
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	4a6c      	ldr	r2, [pc, #432]	; (8005c94 <HAL_RCC_OscConfig+0x270>)
 8005ae4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005ae8:	6013      	str	r3, [r2, #0]
 8005aea:	4b6a      	ldr	r3, [pc, #424]	; (8005c94 <HAL_RCC_OscConfig+0x270>)
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	4a69      	ldr	r2, [pc, #420]	; (8005c94 <HAL_RCC_OscConfig+0x270>)
 8005af0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005af4:	6013      	str	r3, [r2, #0]
 8005af6:	e01d      	b.n	8005b34 <HAL_RCC_OscConfig+0x110>
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	685b      	ldr	r3, [r3, #4]
 8005afc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005b00:	d10c      	bne.n	8005b1c <HAL_RCC_OscConfig+0xf8>
 8005b02:	4b64      	ldr	r3, [pc, #400]	; (8005c94 <HAL_RCC_OscConfig+0x270>)
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	4a63      	ldr	r2, [pc, #396]	; (8005c94 <HAL_RCC_OscConfig+0x270>)
 8005b08:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005b0c:	6013      	str	r3, [r2, #0]
 8005b0e:	4b61      	ldr	r3, [pc, #388]	; (8005c94 <HAL_RCC_OscConfig+0x270>)
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	4a60      	ldr	r2, [pc, #384]	; (8005c94 <HAL_RCC_OscConfig+0x270>)
 8005b14:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005b18:	6013      	str	r3, [r2, #0]
 8005b1a:	e00b      	b.n	8005b34 <HAL_RCC_OscConfig+0x110>
 8005b1c:	4b5d      	ldr	r3, [pc, #372]	; (8005c94 <HAL_RCC_OscConfig+0x270>)
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	4a5c      	ldr	r2, [pc, #368]	; (8005c94 <HAL_RCC_OscConfig+0x270>)
 8005b22:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005b26:	6013      	str	r3, [r2, #0]
 8005b28:	4b5a      	ldr	r3, [pc, #360]	; (8005c94 <HAL_RCC_OscConfig+0x270>)
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	4a59      	ldr	r2, [pc, #356]	; (8005c94 <HAL_RCC_OscConfig+0x270>)
 8005b2e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005b32:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	685b      	ldr	r3, [r3, #4]
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d013      	beq.n	8005b64 <HAL_RCC_OscConfig+0x140>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b3c:	f7fd fd1e 	bl	800357c <HAL_GetTick>
 8005b40:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005b42:	e008      	b.n	8005b56 <HAL_RCC_OscConfig+0x132>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005b44:	f7fd fd1a 	bl	800357c <HAL_GetTick>
 8005b48:	4602      	mov	r2, r0
 8005b4a:	693b      	ldr	r3, [r7, #16]
 8005b4c:	1ad3      	subs	r3, r2, r3
 8005b4e:	2b64      	cmp	r3, #100	; 0x64
 8005b50:	d901      	bls.n	8005b56 <HAL_RCC_OscConfig+0x132>
          {
            return HAL_TIMEOUT;
 8005b52:	2303      	movs	r3, #3
 8005b54:	e2b7      	b.n	80060c6 <HAL_RCC_OscConfig+0x6a2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005b56:	4b4f      	ldr	r3, [pc, #316]	; (8005c94 <HAL_RCC_OscConfig+0x270>)
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d0f0      	beq.n	8005b44 <HAL_RCC_OscConfig+0x120>
 8005b62:	e014      	b.n	8005b8e <HAL_RCC_OscConfig+0x16a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b64:	f7fd fd0a 	bl	800357c <HAL_GetTick>
 8005b68:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005b6a:	e008      	b.n	8005b7e <HAL_RCC_OscConfig+0x15a>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005b6c:	f7fd fd06 	bl	800357c <HAL_GetTick>
 8005b70:	4602      	mov	r2, r0
 8005b72:	693b      	ldr	r3, [r7, #16]
 8005b74:	1ad3      	subs	r3, r2, r3
 8005b76:	2b64      	cmp	r3, #100	; 0x64
 8005b78:	d901      	bls.n	8005b7e <HAL_RCC_OscConfig+0x15a>
          {
            return HAL_TIMEOUT;
 8005b7a:	2303      	movs	r3, #3
 8005b7c:	e2a3      	b.n	80060c6 <HAL_RCC_OscConfig+0x6a2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005b7e:	4b45      	ldr	r3, [pc, #276]	; (8005c94 <HAL_RCC_OscConfig+0x270>)
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d1f0      	bne.n	8005b6c <HAL_RCC_OscConfig+0x148>
 8005b8a:	e000      	b.n	8005b8e <HAL_RCC_OscConfig+0x16a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005b8c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	f003 0302 	and.w	r3, r3, #2
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	f000 8084 	beq.w	8005ca4 <HAL_RCC_OscConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	68db      	ldr	r3, [r3, #12]
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d008      	beq.n	8005bb6 <HAL_RCC_OscConfig+0x192>
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	68db      	ldr	r3, [r3, #12]
 8005ba8:	2b01      	cmp	r3, #1
 8005baa:	d004      	beq.n	8005bb6 <HAL_RCC_OscConfig+0x192>
 8005bac:	f240 119b 	movw	r1, #411	; 0x19b
 8005bb0:	4837      	ldr	r0, [pc, #220]	; (8005c90 <HAL_RCC_OscConfig+0x26c>)
 8005bb2:	f7fc ffea 	bl	8002b8a <assert_failed>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	691b      	ldr	r3, [r3, #16]
 8005bba:	2b1f      	cmp	r3, #31
 8005bbc:	d904      	bls.n	8005bc8 <HAL_RCC_OscConfig+0x1a4>
 8005bbe:	f44f 71ce 	mov.w	r1, #412	; 0x19c
 8005bc2:	4833      	ldr	r0, [pc, #204]	; (8005c90 <HAL_RCC_OscConfig+0x26c>)
 8005bc4:	f7fc ffe1 	bl	8002b8a <assert_failed>

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005bc8:	4b32      	ldr	r3, [pc, #200]	; (8005c94 <HAL_RCC_OscConfig+0x270>)
 8005bca:	689b      	ldr	r3, [r3, #8]
 8005bcc:	f003 030c 	and.w	r3, r3, #12
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d00b      	beq.n	8005bec <HAL_RCC_OscConfig+0x1c8>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005bd4:	4b2f      	ldr	r3, [pc, #188]	; (8005c94 <HAL_RCC_OscConfig+0x270>)
 8005bd6:	689b      	ldr	r3, [r3, #8]
 8005bd8:	f003 030c 	and.w	r3, r3, #12
 8005bdc:	2b08      	cmp	r3, #8
 8005bde:	d11c      	bne.n	8005c1a <HAL_RCC_OscConfig+0x1f6>
 8005be0:	4b2c      	ldr	r3, [pc, #176]	; (8005c94 <HAL_RCC_OscConfig+0x270>)
 8005be2:	685b      	ldr	r3, [r3, #4]
 8005be4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d116      	bne.n	8005c1a <HAL_RCC_OscConfig+0x1f6>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005bec:	4b29      	ldr	r3, [pc, #164]	; (8005c94 <HAL_RCC_OscConfig+0x270>)
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	f003 0302 	and.w	r3, r3, #2
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d005      	beq.n	8005c04 <HAL_RCC_OscConfig+0x1e0>
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	68db      	ldr	r3, [r3, #12]
 8005bfc:	2b01      	cmp	r3, #1
 8005bfe:	d001      	beq.n	8005c04 <HAL_RCC_OscConfig+0x1e0>
      {
        return HAL_ERROR;
 8005c00:	2301      	movs	r3, #1
 8005c02:	e260      	b.n	80060c6 <HAL_RCC_OscConfig+0x6a2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005c04:	4b23      	ldr	r3, [pc, #140]	; (8005c94 <HAL_RCC_OscConfig+0x270>)
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	691b      	ldr	r3, [r3, #16]
 8005c10:	00db      	lsls	r3, r3, #3
 8005c12:	4920      	ldr	r1, [pc, #128]	; (8005c94 <HAL_RCC_OscConfig+0x270>)
 8005c14:	4313      	orrs	r3, r2
 8005c16:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005c18:	e044      	b.n	8005ca4 <HAL_RCC_OscConfig+0x280>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	68db      	ldr	r3, [r3, #12]
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d023      	beq.n	8005c6a <HAL_RCC_OscConfig+0x246>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005c22:	4b1c      	ldr	r3, [pc, #112]	; (8005c94 <HAL_RCC_OscConfig+0x270>)
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	4a1b      	ldr	r2, [pc, #108]	; (8005c94 <HAL_RCC_OscConfig+0x270>)
 8005c28:	f043 0301 	orr.w	r3, r3, #1
 8005c2c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c2e:	f7fd fca5 	bl	800357c <HAL_GetTick>
 8005c32:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005c34:	e008      	b.n	8005c48 <HAL_RCC_OscConfig+0x224>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005c36:	f7fd fca1 	bl	800357c <HAL_GetTick>
 8005c3a:	4602      	mov	r2, r0
 8005c3c:	693b      	ldr	r3, [r7, #16]
 8005c3e:	1ad3      	subs	r3, r2, r3
 8005c40:	2b02      	cmp	r3, #2
 8005c42:	d901      	bls.n	8005c48 <HAL_RCC_OscConfig+0x224>
          {
            return HAL_TIMEOUT;
 8005c44:	2303      	movs	r3, #3
 8005c46:	e23e      	b.n	80060c6 <HAL_RCC_OscConfig+0x6a2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005c48:	4b12      	ldr	r3, [pc, #72]	; (8005c94 <HAL_RCC_OscConfig+0x270>)
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	f003 0302 	and.w	r3, r3, #2
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d0f0      	beq.n	8005c36 <HAL_RCC_OscConfig+0x212>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005c54:	4b0f      	ldr	r3, [pc, #60]	; (8005c94 <HAL_RCC_OscConfig+0x270>)
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	691b      	ldr	r3, [r3, #16]
 8005c60:	00db      	lsls	r3, r3, #3
 8005c62:	490c      	ldr	r1, [pc, #48]	; (8005c94 <HAL_RCC_OscConfig+0x270>)
 8005c64:	4313      	orrs	r3, r2
 8005c66:	600b      	str	r3, [r1, #0]
 8005c68:	e01c      	b.n	8005ca4 <HAL_RCC_OscConfig+0x280>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005c6a:	4b0a      	ldr	r3, [pc, #40]	; (8005c94 <HAL_RCC_OscConfig+0x270>)
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	4a09      	ldr	r2, [pc, #36]	; (8005c94 <HAL_RCC_OscConfig+0x270>)
 8005c70:	f023 0301 	bic.w	r3, r3, #1
 8005c74:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c76:	f7fd fc81 	bl	800357c <HAL_GetTick>
 8005c7a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005c7c:	e00c      	b.n	8005c98 <HAL_RCC_OscConfig+0x274>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005c7e:	f7fd fc7d 	bl	800357c <HAL_GetTick>
 8005c82:	4602      	mov	r2, r0
 8005c84:	693b      	ldr	r3, [r7, #16]
 8005c86:	1ad3      	subs	r3, r2, r3
 8005c88:	2b02      	cmp	r3, #2
 8005c8a:	d905      	bls.n	8005c98 <HAL_RCC_OscConfig+0x274>
          {
            return HAL_TIMEOUT;
 8005c8c:	2303      	movs	r3, #3
 8005c8e:	e21a      	b.n	80060c6 <HAL_RCC_OscConfig+0x6a2>
 8005c90:	080157b8 	.word	0x080157b8
 8005c94:	40023800 	.word	0x40023800
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005c98:	4b7e      	ldr	r3, [pc, #504]	; (8005e94 <HAL_RCC_OscConfig+0x470>)
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	f003 0302 	and.w	r3, r3, #2
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d1ec      	bne.n	8005c7e <HAL_RCC_OscConfig+0x25a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	f003 0308 	and.w	r3, r3, #8
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d043      	beq.n	8005d38 <HAL_RCC_OscConfig+0x314>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	695b      	ldr	r3, [r3, #20]
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d008      	beq.n	8005cca <HAL_RCC_OscConfig+0x2a6>
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	695b      	ldr	r3, [r3, #20]
 8005cbc:	2b01      	cmp	r3, #1
 8005cbe:	d004      	beq.n	8005cca <HAL_RCC_OscConfig+0x2a6>
 8005cc0:	f44f 71ee 	mov.w	r1, #476	; 0x1dc
 8005cc4:	4874      	ldr	r0, [pc, #464]	; (8005e98 <HAL_RCC_OscConfig+0x474>)
 8005cc6:	f7fc ff60 	bl	8002b8a <assert_failed>

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	695b      	ldr	r3, [r3, #20]
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d019      	beq.n	8005d06 <HAL_RCC_OscConfig+0x2e2>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005cd2:	4b70      	ldr	r3, [pc, #448]	; (8005e94 <HAL_RCC_OscConfig+0x470>)
 8005cd4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005cd6:	4a6f      	ldr	r2, [pc, #444]	; (8005e94 <HAL_RCC_OscConfig+0x470>)
 8005cd8:	f043 0301 	orr.w	r3, r3, #1
 8005cdc:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005cde:	f7fd fc4d 	bl	800357c <HAL_GetTick>
 8005ce2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005ce4:	e008      	b.n	8005cf8 <HAL_RCC_OscConfig+0x2d4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005ce6:	f7fd fc49 	bl	800357c <HAL_GetTick>
 8005cea:	4602      	mov	r2, r0
 8005cec:	693b      	ldr	r3, [r7, #16]
 8005cee:	1ad3      	subs	r3, r2, r3
 8005cf0:	2b02      	cmp	r3, #2
 8005cf2:	d901      	bls.n	8005cf8 <HAL_RCC_OscConfig+0x2d4>
        {
          return HAL_TIMEOUT;
 8005cf4:	2303      	movs	r3, #3
 8005cf6:	e1e6      	b.n	80060c6 <HAL_RCC_OscConfig+0x6a2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005cf8:	4b66      	ldr	r3, [pc, #408]	; (8005e94 <HAL_RCC_OscConfig+0x470>)
 8005cfa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005cfc:	f003 0302 	and.w	r3, r3, #2
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d0f0      	beq.n	8005ce6 <HAL_RCC_OscConfig+0x2c2>
 8005d04:	e018      	b.n	8005d38 <HAL_RCC_OscConfig+0x314>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005d06:	4b63      	ldr	r3, [pc, #396]	; (8005e94 <HAL_RCC_OscConfig+0x470>)
 8005d08:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005d0a:	4a62      	ldr	r2, [pc, #392]	; (8005e94 <HAL_RCC_OscConfig+0x470>)
 8005d0c:	f023 0301 	bic.w	r3, r3, #1
 8005d10:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005d12:	f7fd fc33 	bl	800357c <HAL_GetTick>
 8005d16:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005d18:	e008      	b.n	8005d2c <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005d1a:	f7fd fc2f 	bl	800357c <HAL_GetTick>
 8005d1e:	4602      	mov	r2, r0
 8005d20:	693b      	ldr	r3, [r7, #16]
 8005d22:	1ad3      	subs	r3, r2, r3
 8005d24:	2b02      	cmp	r3, #2
 8005d26:	d901      	bls.n	8005d2c <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8005d28:	2303      	movs	r3, #3
 8005d2a:	e1cc      	b.n	80060c6 <HAL_RCC_OscConfig+0x6a2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005d2c:	4b59      	ldr	r3, [pc, #356]	; (8005e94 <HAL_RCC_OscConfig+0x470>)
 8005d2e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005d30:	f003 0302 	and.w	r3, r3, #2
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d1f0      	bne.n	8005d1a <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	f003 0304 	and.w	r3, r3, #4
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	f000 80bc 	beq.w	8005ebe <HAL_RCC_OscConfig+0x49a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	689b      	ldr	r3, [r3, #8]
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d00c      	beq.n	8005d68 <HAL_RCC_OscConfig+0x344>
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	689b      	ldr	r3, [r3, #8]
 8005d52:	2b01      	cmp	r3, #1
 8005d54:	d008      	beq.n	8005d68 <HAL_RCC_OscConfig+0x344>
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	689b      	ldr	r3, [r3, #8]
 8005d5a:	2b05      	cmp	r3, #5
 8005d5c:	d004      	beq.n	8005d68 <HAL_RCC_OscConfig+0x344>
 8005d5e:	f240 2106 	movw	r1, #518	; 0x206
 8005d62:	484d      	ldr	r0, [pc, #308]	; (8005e98 <HAL_RCC_OscConfig+0x474>)
 8005d64:	f7fc ff11 	bl	8002b8a <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005d68:	4b4a      	ldr	r3, [pc, #296]	; (8005e94 <HAL_RCC_OscConfig+0x470>)
 8005d6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d6c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d10d      	bne.n	8005d90 <HAL_RCC_OscConfig+0x36c>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8005d74:	4b47      	ldr	r3, [pc, #284]	; (8005e94 <HAL_RCC_OscConfig+0x470>)
 8005d76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d78:	4a46      	ldr	r2, [pc, #280]	; (8005e94 <HAL_RCC_OscConfig+0x470>)
 8005d7a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005d7e:	6413      	str	r3, [r2, #64]	; 0x40
 8005d80:	4b44      	ldr	r3, [pc, #272]	; (8005e94 <HAL_RCC_OscConfig+0x470>)
 8005d82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d84:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005d88:	60bb      	str	r3, [r7, #8]
 8005d8a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005d8c:	2301      	movs	r3, #1
 8005d8e:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005d90:	4b42      	ldr	r3, [pc, #264]	; (8005e9c <HAL_RCC_OscConfig+0x478>)
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d118      	bne.n	8005dce <HAL_RCC_OscConfig+0x3aa>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8005d9c:	4b3f      	ldr	r3, [pc, #252]	; (8005e9c <HAL_RCC_OscConfig+0x478>)
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	4a3e      	ldr	r2, [pc, #248]	; (8005e9c <HAL_RCC_OscConfig+0x478>)
 8005da2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005da6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005da8:	f7fd fbe8 	bl	800357c <HAL_GetTick>
 8005dac:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005dae:	e008      	b.n	8005dc2 <HAL_RCC_OscConfig+0x39e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005db0:	f7fd fbe4 	bl	800357c <HAL_GetTick>
 8005db4:	4602      	mov	r2, r0
 8005db6:	693b      	ldr	r3, [r7, #16]
 8005db8:	1ad3      	subs	r3, r2, r3
 8005dba:	2b64      	cmp	r3, #100	; 0x64
 8005dbc:	d901      	bls.n	8005dc2 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8005dbe:	2303      	movs	r3, #3
 8005dc0:	e181      	b.n	80060c6 <HAL_RCC_OscConfig+0x6a2>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005dc2:	4b36      	ldr	r3, [pc, #216]	; (8005e9c <HAL_RCC_OscConfig+0x478>)
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d0f0      	beq.n	8005db0 <HAL_RCC_OscConfig+0x38c>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	689b      	ldr	r3, [r3, #8]
 8005dd2:	2b01      	cmp	r3, #1
 8005dd4:	d106      	bne.n	8005de4 <HAL_RCC_OscConfig+0x3c0>
 8005dd6:	4b2f      	ldr	r3, [pc, #188]	; (8005e94 <HAL_RCC_OscConfig+0x470>)
 8005dd8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005dda:	4a2e      	ldr	r2, [pc, #184]	; (8005e94 <HAL_RCC_OscConfig+0x470>)
 8005ddc:	f043 0301 	orr.w	r3, r3, #1
 8005de0:	6713      	str	r3, [r2, #112]	; 0x70
 8005de2:	e02d      	b.n	8005e40 <HAL_RCC_OscConfig+0x41c>
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	689b      	ldr	r3, [r3, #8]
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d10c      	bne.n	8005e06 <HAL_RCC_OscConfig+0x3e2>
 8005dec:	4b29      	ldr	r3, [pc, #164]	; (8005e94 <HAL_RCC_OscConfig+0x470>)
 8005dee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005df0:	4a28      	ldr	r2, [pc, #160]	; (8005e94 <HAL_RCC_OscConfig+0x470>)
 8005df2:	f023 0301 	bic.w	r3, r3, #1
 8005df6:	6713      	str	r3, [r2, #112]	; 0x70
 8005df8:	4b26      	ldr	r3, [pc, #152]	; (8005e94 <HAL_RCC_OscConfig+0x470>)
 8005dfa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005dfc:	4a25      	ldr	r2, [pc, #148]	; (8005e94 <HAL_RCC_OscConfig+0x470>)
 8005dfe:	f023 0304 	bic.w	r3, r3, #4
 8005e02:	6713      	str	r3, [r2, #112]	; 0x70
 8005e04:	e01c      	b.n	8005e40 <HAL_RCC_OscConfig+0x41c>
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	689b      	ldr	r3, [r3, #8]
 8005e0a:	2b05      	cmp	r3, #5
 8005e0c:	d10c      	bne.n	8005e28 <HAL_RCC_OscConfig+0x404>
 8005e0e:	4b21      	ldr	r3, [pc, #132]	; (8005e94 <HAL_RCC_OscConfig+0x470>)
 8005e10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e12:	4a20      	ldr	r2, [pc, #128]	; (8005e94 <HAL_RCC_OscConfig+0x470>)
 8005e14:	f043 0304 	orr.w	r3, r3, #4
 8005e18:	6713      	str	r3, [r2, #112]	; 0x70
 8005e1a:	4b1e      	ldr	r3, [pc, #120]	; (8005e94 <HAL_RCC_OscConfig+0x470>)
 8005e1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e1e:	4a1d      	ldr	r2, [pc, #116]	; (8005e94 <HAL_RCC_OscConfig+0x470>)
 8005e20:	f043 0301 	orr.w	r3, r3, #1
 8005e24:	6713      	str	r3, [r2, #112]	; 0x70
 8005e26:	e00b      	b.n	8005e40 <HAL_RCC_OscConfig+0x41c>
 8005e28:	4b1a      	ldr	r3, [pc, #104]	; (8005e94 <HAL_RCC_OscConfig+0x470>)
 8005e2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e2c:	4a19      	ldr	r2, [pc, #100]	; (8005e94 <HAL_RCC_OscConfig+0x470>)
 8005e2e:	f023 0301 	bic.w	r3, r3, #1
 8005e32:	6713      	str	r3, [r2, #112]	; 0x70
 8005e34:	4b17      	ldr	r3, [pc, #92]	; (8005e94 <HAL_RCC_OscConfig+0x470>)
 8005e36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e38:	4a16      	ldr	r2, [pc, #88]	; (8005e94 <HAL_RCC_OscConfig+0x470>)
 8005e3a:	f023 0304 	bic.w	r3, r3, #4
 8005e3e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	689b      	ldr	r3, [r3, #8]
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d015      	beq.n	8005e74 <HAL_RCC_OscConfig+0x450>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005e48:	f7fd fb98 	bl	800357c <HAL_GetTick>
 8005e4c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005e4e:	e00a      	b.n	8005e66 <HAL_RCC_OscConfig+0x442>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005e50:	f7fd fb94 	bl	800357c <HAL_GetTick>
 8005e54:	4602      	mov	r2, r0
 8005e56:	693b      	ldr	r3, [r7, #16]
 8005e58:	1ad3      	subs	r3, r2, r3
 8005e5a:	f241 3288 	movw	r2, #5000	; 0x1388
 8005e5e:	4293      	cmp	r3, r2
 8005e60:	d901      	bls.n	8005e66 <HAL_RCC_OscConfig+0x442>
        {
          return HAL_TIMEOUT;
 8005e62:	2303      	movs	r3, #3
 8005e64:	e12f      	b.n	80060c6 <HAL_RCC_OscConfig+0x6a2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005e66:	4b0b      	ldr	r3, [pc, #44]	; (8005e94 <HAL_RCC_OscConfig+0x470>)
 8005e68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e6a:	f003 0302 	and.w	r3, r3, #2
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d0ee      	beq.n	8005e50 <HAL_RCC_OscConfig+0x42c>
 8005e72:	e01b      	b.n	8005eac <HAL_RCC_OscConfig+0x488>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005e74:	f7fd fb82 	bl	800357c <HAL_GetTick>
 8005e78:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005e7a:	e011      	b.n	8005ea0 <HAL_RCC_OscConfig+0x47c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005e7c:	f7fd fb7e 	bl	800357c <HAL_GetTick>
 8005e80:	4602      	mov	r2, r0
 8005e82:	693b      	ldr	r3, [r7, #16]
 8005e84:	1ad3      	subs	r3, r2, r3
 8005e86:	f241 3288 	movw	r2, #5000	; 0x1388
 8005e8a:	4293      	cmp	r3, r2
 8005e8c:	d908      	bls.n	8005ea0 <HAL_RCC_OscConfig+0x47c>
        {
          return HAL_TIMEOUT;
 8005e8e:	2303      	movs	r3, #3
 8005e90:	e119      	b.n	80060c6 <HAL_RCC_OscConfig+0x6a2>
 8005e92:	bf00      	nop
 8005e94:	40023800 	.word	0x40023800
 8005e98:	080157b8 	.word	0x080157b8
 8005e9c:	40007000 	.word	0x40007000
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005ea0:	4b8b      	ldr	r3, [pc, #556]	; (80060d0 <HAL_RCC_OscConfig+0x6ac>)
 8005ea2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ea4:	f003 0302 	and.w	r3, r3, #2
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d1e7      	bne.n	8005e7c <HAL_RCC_OscConfig+0x458>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005eac:	7dfb      	ldrb	r3, [r7, #23]
 8005eae:	2b01      	cmp	r3, #1
 8005eb0:	d105      	bne.n	8005ebe <HAL_RCC_OscConfig+0x49a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005eb2:	4b87      	ldr	r3, [pc, #540]	; (80060d0 <HAL_RCC_OscConfig+0x6ac>)
 8005eb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005eb6:	4a86      	ldr	r2, [pc, #536]	; (80060d0 <HAL_RCC_OscConfig+0x6ac>)
 8005eb8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005ebc:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	699b      	ldr	r3, [r3, #24]
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d00c      	beq.n	8005ee0 <HAL_RCC_OscConfig+0x4bc>
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	699b      	ldr	r3, [r3, #24]
 8005eca:	2b01      	cmp	r3, #1
 8005ecc:	d008      	beq.n	8005ee0 <HAL_RCC_OscConfig+0x4bc>
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	699b      	ldr	r3, [r3, #24]
 8005ed2:	2b02      	cmp	r3, #2
 8005ed4:	d004      	beq.n	8005ee0 <HAL_RCC_OscConfig+0x4bc>
 8005ed6:	f240 214a 	movw	r1, #586	; 0x24a
 8005eda:	487e      	ldr	r0, [pc, #504]	; (80060d4 <HAL_RCC_OscConfig+0x6b0>)
 8005edc:	f7fc fe55 	bl	8002b8a <assert_failed>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	699b      	ldr	r3, [r3, #24]
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	f000 80ed 	beq.w	80060c4 <HAL_RCC_OscConfig+0x6a0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005eea:	4b79      	ldr	r3, [pc, #484]	; (80060d0 <HAL_RCC_OscConfig+0x6ac>)
 8005eec:	689b      	ldr	r3, [r3, #8]
 8005eee:	f003 030c 	and.w	r3, r3, #12
 8005ef2:	2b08      	cmp	r3, #8
 8005ef4:	f000 80b4 	beq.w	8006060 <HAL_RCC_OscConfig+0x63c>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	699b      	ldr	r3, [r3, #24]
 8005efc:	2b02      	cmp	r3, #2
 8005efe:	f040 8095 	bne.w	800602c <HAL_RCC_OscConfig+0x608>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	69db      	ldr	r3, [r3, #28]
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d009      	beq.n	8005f1e <HAL_RCC_OscConfig+0x4fa>
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	69db      	ldr	r3, [r3, #28]
 8005f0e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005f12:	d004      	beq.n	8005f1e <HAL_RCC_OscConfig+0x4fa>
 8005f14:	f240 2153 	movw	r1, #595	; 0x253
 8005f18:	486e      	ldr	r0, [pc, #440]	; (80060d4 <HAL_RCC_OscConfig+0x6b0>)
 8005f1a:	f7fc fe36 	bl	8002b8a <assert_failed>
        assert_param(IS_RCC_PLLM_VALUE(RCC_OscInitStruct->PLL.PLLM));
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	6a1b      	ldr	r3, [r3, #32]
 8005f22:	2b01      	cmp	r3, #1
 8005f24:	d903      	bls.n	8005f2e <HAL_RCC_OscConfig+0x50a>
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	6a1b      	ldr	r3, [r3, #32]
 8005f2a:	2b3f      	cmp	r3, #63	; 0x3f
 8005f2c:	d904      	bls.n	8005f38 <HAL_RCC_OscConfig+0x514>
 8005f2e:	f44f 7115 	mov.w	r1, #596	; 0x254
 8005f32:	4868      	ldr	r0, [pc, #416]	; (80060d4 <HAL_RCC_OscConfig+0x6b0>)
 8005f34:	f7fc fe29 	bl	8002b8a <assert_failed>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f3c:	2b31      	cmp	r3, #49	; 0x31
 8005f3e:	d904      	bls.n	8005f4a <HAL_RCC_OscConfig+0x526>
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f44:	f5b3 7fd8 	cmp.w	r3, #432	; 0x1b0
 8005f48:	d904      	bls.n	8005f54 <HAL_RCC_OscConfig+0x530>
 8005f4a:	f240 2155 	movw	r1, #597	; 0x255
 8005f4e:	4861      	ldr	r0, [pc, #388]	; (80060d4 <HAL_RCC_OscConfig+0x6b0>)
 8005f50:	f7fc fe1b 	bl	8002b8a <assert_failed>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f58:	2b02      	cmp	r3, #2
 8005f5a:	d010      	beq.n	8005f7e <HAL_RCC_OscConfig+0x55a>
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f60:	2b04      	cmp	r3, #4
 8005f62:	d00c      	beq.n	8005f7e <HAL_RCC_OscConfig+0x55a>
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f68:	2b06      	cmp	r3, #6
 8005f6a:	d008      	beq.n	8005f7e <HAL_RCC_OscConfig+0x55a>
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f70:	2b08      	cmp	r3, #8
 8005f72:	d004      	beq.n	8005f7e <HAL_RCC_OscConfig+0x55a>
 8005f74:	f240 2156 	movw	r1, #598	; 0x256
 8005f78:	4856      	ldr	r0, [pc, #344]	; (80060d4 <HAL_RCC_OscConfig+0x6b0>)
 8005f7a:	f7fc fe06 	bl	8002b8a <assert_failed>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f82:	2b01      	cmp	r3, #1
 8005f84:	d903      	bls.n	8005f8e <HAL_RCC_OscConfig+0x56a>
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f8a:	2b0f      	cmp	r3, #15
 8005f8c:	d904      	bls.n	8005f98 <HAL_RCC_OscConfig+0x574>
 8005f8e:	f240 2157 	movw	r1, #599	; 0x257
 8005f92:	4850      	ldr	r0, [pc, #320]	; (80060d4 <HAL_RCC_OscConfig+0x6b0>)
 8005f94:	f7fc fdf9 	bl	8002b8a <assert_failed>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005f98:	4b4d      	ldr	r3, [pc, #308]	; (80060d0 <HAL_RCC_OscConfig+0x6ac>)
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	4a4c      	ldr	r2, [pc, #304]	; (80060d0 <HAL_RCC_OscConfig+0x6ac>)
 8005f9e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005fa2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005fa4:	f7fd faea 	bl	800357c <HAL_GetTick>
 8005fa8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005faa:	e008      	b.n	8005fbe <HAL_RCC_OscConfig+0x59a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005fac:	f7fd fae6 	bl	800357c <HAL_GetTick>
 8005fb0:	4602      	mov	r2, r0
 8005fb2:	693b      	ldr	r3, [r7, #16]
 8005fb4:	1ad3      	subs	r3, r2, r3
 8005fb6:	2b02      	cmp	r3, #2
 8005fb8:	d901      	bls.n	8005fbe <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 8005fba:	2303      	movs	r3, #3
 8005fbc:	e083      	b.n	80060c6 <HAL_RCC_OscConfig+0x6a2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005fbe:	4b44      	ldr	r3, [pc, #272]	; (80060d0 <HAL_RCC_OscConfig+0x6ac>)
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d1f0      	bne.n	8005fac <HAL_RCC_OscConfig+0x588>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	69da      	ldr	r2, [r3, #28]
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	6a1b      	ldr	r3, [r3, #32]
 8005fd2:	431a      	orrs	r2, r3
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fd8:	019b      	lsls	r3, r3, #6
 8005fda:	431a      	orrs	r2, r3
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fe0:	085b      	lsrs	r3, r3, #1
 8005fe2:	3b01      	subs	r3, #1
 8005fe4:	041b      	lsls	r3, r3, #16
 8005fe6:	431a      	orrs	r2, r3
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fec:	061b      	lsls	r3, r3, #24
 8005fee:	4313      	orrs	r3, r2
 8005ff0:	4a37      	ldr	r2, [pc, #220]	; (80060d0 <HAL_RCC_OscConfig+0x6ac>)
 8005ff2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005ff6:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005ff8:	4b35      	ldr	r3, [pc, #212]	; (80060d0 <HAL_RCC_OscConfig+0x6ac>)
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	4a34      	ldr	r2, [pc, #208]	; (80060d0 <HAL_RCC_OscConfig+0x6ac>)
 8005ffe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006002:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006004:	f7fd faba 	bl	800357c <HAL_GetTick>
 8006008:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800600a:	e008      	b.n	800601e <HAL_RCC_OscConfig+0x5fa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800600c:	f7fd fab6 	bl	800357c <HAL_GetTick>
 8006010:	4602      	mov	r2, r0
 8006012:	693b      	ldr	r3, [r7, #16]
 8006014:	1ad3      	subs	r3, r2, r3
 8006016:	2b02      	cmp	r3, #2
 8006018:	d901      	bls.n	800601e <HAL_RCC_OscConfig+0x5fa>
          {
            return HAL_TIMEOUT;
 800601a:	2303      	movs	r3, #3
 800601c:	e053      	b.n	80060c6 <HAL_RCC_OscConfig+0x6a2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800601e:	4b2c      	ldr	r3, [pc, #176]	; (80060d0 <HAL_RCC_OscConfig+0x6ac>)
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006026:	2b00      	cmp	r3, #0
 8006028:	d0f0      	beq.n	800600c <HAL_RCC_OscConfig+0x5e8>
 800602a:	e04b      	b.n	80060c4 <HAL_RCC_OscConfig+0x6a0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800602c:	4b28      	ldr	r3, [pc, #160]	; (80060d0 <HAL_RCC_OscConfig+0x6ac>)
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	4a27      	ldr	r2, [pc, #156]	; (80060d0 <HAL_RCC_OscConfig+0x6ac>)
 8006032:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006036:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006038:	f7fd faa0 	bl	800357c <HAL_GetTick>
 800603c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800603e:	e008      	b.n	8006052 <HAL_RCC_OscConfig+0x62e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006040:	f7fd fa9c 	bl	800357c <HAL_GetTick>
 8006044:	4602      	mov	r2, r0
 8006046:	693b      	ldr	r3, [r7, #16]
 8006048:	1ad3      	subs	r3, r2, r3
 800604a:	2b02      	cmp	r3, #2
 800604c:	d901      	bls.n	8006052 <HAL_RCC_OscConfig+0x62e>
          {
            return HAL_TIMEOUT;
 800604e:	2303      	movs	r3, #3
 8006050:	e039      	b.n	80060c6 <HAL_RCC_OscConfig+0x6a2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006052:	4b1f      	ldr	r3, [pc, #124]	; (80060d0 <HAL_RCC_OscConfig+0x6ac>)
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800605a:	2b00      	cmp	r3, #0
 800605c:	d1f0      	bne.n	8006040 <HAL_RCC_OscConfig+0x61c>
 800605e:	e031      	b.n	80060c4 <HAL_RCC_OscConfig+0x6a0>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8006060:	4b1b      	ldr	r3, [pc, #108]	; (80060d0 <HAL_RCC_OscConfig+0x6ac>)
 8006062:	685b      	ldr	r3, [r3, #4]
 8006064:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	699b      	ldr	r3, [r3, #24]
 800606a:	2b01      	cmp	r3, #1
 800606c:	d028      	beq.n	80060c0 <HAL_RCC_OscConfig+0x69c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006078:	429a      	cmp	r2, r3
 800607a:	d121      	bne.n	80060c0 <HAL_RCC_OscConfig+0x69c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006086:	429a      	cmp	r2, r3
 8006088:	d11a      	bne.n	80060c0 <HAL_RCC_OscConfig+0x69c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800608a:	68fa      	ldr	r2, [r7, #12]
 800608c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006090:	4013      	ands	r3, r2
 8006092:	687a      	ldr	r2, [r7, #4]
 8006094:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006096:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006098:	4293      	cmp	r3, r2
 800609a:	d111      	bne.n	80060c0 <HAL_RCC_OscConfig+0x69c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060a6:	085b      	lsrs	r3, r3, #1
 80060a8:	3b01      	subs	r3, #1
 80060aa:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80060ac:	429a      	cmp	r2, r3
 80060ae:	d107      	bne.n	80060c0 <HAL_RCC_OscConfig+0x69c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060ba:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80060bc:	429a      	cmp	r2, r3
 80060be:	d001      	beq.n	80060c4 <HAL_RCC_OscConfig+0x6a0>
#endif
      {
        return HAL_ERROR;
 80060c0:	2301      	movs	r3, #1
 80060c2:	e000      	b.n	80060c6 <HAL_RCC_OscConfig+0x6a2>
      }
    }
  }
  return HAL_OK;
 80060c4:	2300      	movs	r3, #0
}
 80060c6:	4618      	mov	r0, r3
 80060c8:	3718      	adds	r7, #24
 80060ca:	46bd      	mov	sp, r7
 80060cc:	bd80      	pop	{r7, pc}
 80060ce:	bf00      	nop
 80060d0:	40023800 	.word	0x40023800
 80060d4:	080157b8 	.word	0x080157b8

080060d8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80060d8:	b580      	push	{r7, lr}
 80060da:	b084      	sub	sp, #16
 80060dc:	af00      	add	r7, sp, #0
 80060de:	6078      	str	r0, [r7, #4]
 80060e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80060e2:	2300      	movs	r3, #0
 80060e4:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d101      	bne.n	80060f0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80060ec:	2301      	movs	r3, #1
 80060ee:	e18c      	b.n	800640a <HAL_RCC_ClockConfig+0x332>
  }

  /* Check the parameters */
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d003      	beq.n	8006100 <HAL_RCC_ClockConfig+0x28>
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	2b0f      	cmp	r3, #15
 80060fe:	d904      	bls.n	800610a <HAL_RCC_ClockConfig+0x32>
 8006100:	f240 21dd 	movw	r1, #733	; 0x2dd
 8006104:	4887      	ldr	r0, [pc, #540]	; (8006324 <HAL_RCC_ClockConfig+0x24c>)
 8006106:	f7fc fd40 	bl	8002b8a <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 800610a:	683b      	ldr	r3, [r7, #0]
 800610c:	2b00      	cmp	r3, #0
 800610e:	d031      	beq.n	8006174 <HAL_RCC_ClockConfig+0x9c>
 8006110:	683b      	ldr	r3, [r7, #0]
 8006112:	2b01      	cmp	r3, #1
 8006114:	d02e      	beq.n	8006174 <HAL_RCC_ClockConfig+0x9c>
 8006116:	683b      	ldr	r3, [r7, #0]
 8006118:	2b02      	cmp	r3, #2
 800611a:	d02b      	beq.n	8006174 <HAL_RCC_ClockConfig+0x9c>
 800611c:	683b      	ldr	r3, [r7, #0]
 800611e:	2b03      	cmp	r3, #3
 8006120:	d028      	beq.n	8006174 <HAL_RCC_ClockConfig+0x9c>
 8006122:	683b      	ldr	r3, [r7, #0]
 8006124:	2b04      	cmp	r3, #4
 8006126:	d025      	beq.n	8006174 <HAL_RCC_ClockConfig+0x9c>
 8006128:	683b      	ldr	r3, [r7, #0]
 800612a:	2b05      	cmp	r3, #5
 800612c:	d022      	beq.n	8006174 <HAL_RCC_ClockConfig+0x9c>
 800612e:	683b      	ldr	r3, [r7, #0]
 8006130:	2b06      	cmp	r3, #6
 8006132:	d01f      	beq.n	8006174 <HAL_RCC_ClockConfig+0x9c>
 8006134:	683b      	ldr	r3, [r7, #0]
 8006136:	2b07      	cmp	r3, #7
 8006138:	d01c      	beq.n	8006174 <HAL_RCC_ClockConfig+0x9c>
 800613a:	683b      	ldr	r3, [r7, #0]
 800613c:	2b08      	cmp	r3, #8
 800613e:	d019      	beq.n	8006174 <HAL_RCC_ClockConfig+0x9c>
 8006140:	683b      	ldr	r3, [r7, #0]
 8006142:	2b09      	cmp	r3, #9
 8006144:	d016      	beq.n	8006174 <HAL_RCC_ClockConfig+0x9c>
 8006146:	683b      	ldr	r3, [r7, #0]
 8006148:	2b0a      	cmp	r3, #10
 800614a:	d013      	beq.n	8006174 <HAL_RCC_ClockConfig+0x9c>
 800614c:	683b      	ldr	r3, [r7, #0]
 800614e:	2b0b      	cmp	r3, #11
 8006150:	d010      	beq.n	8006174 <HAL_RCC_ClockConfig+0x9c>
 8006152:	683b      	ldr	r3, [r7, #0]
 8006154:	2b0c      	cmp	r3, #12
 8006156:	d00d      	beq.n	8006174 <HAL_RCC_ClockConfig+0x9c>
 8006158:	683b      	ldr	r3, [r7, #0]
 800615a:	2b0d      	cmp	r3, #13
 800615c:	d00a      	beq.n	8006174 <HAL_RCC_ClockConfig+0x9c>
 800615e:	683b      	ldr	r3, [r7, #0]
 8006160:	2b0e      	cmp	r3, #14
 8006162:	d007      	beq.n	8006174 <HAL_RCC_ClockConfig+0x9c>
 8006164:	683b      	ldr	r3, [r7, #0]
 8006166:	2b0f      	cmp	r3, #15
 8006168:	d004      	beq.n	8006174 <HAL_RCC_ClockConfig+0x9c>
 800616a:	f240 21de 	movw	r1, #734	; 0x2de
 800616e:	486d      	ldr	r0, [pc, #436]	; (8006324 <HAL_RCC_ClockConfig+0x24c>)
 8006170:	f7fc fd0b 	bl	8002b8a <assert_failed>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006174:	4b6c      	ldr	r3, [pc, #432]	; (8006328 <HAL_RCC_ClockConfig+0x250>)
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	f003 030f 	and.w	r3, r3, #15
 800617c:	683a      	ldr	r2, [r7, #0]
 800617e:	429a      	cmp	r2, r3
 8006180:	d910      	bls.n	80061a4 <HAL_RCC_ClockConfig+0xcc>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006182:	4b69      	ldr	r3, [pc, #420]	; (8006328 <HAL_RCC_ClockConfig+0x250>)
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	f023 020f 	bic.w	r2, r3, #15
 800618a:	4967      	ldr	r1, [pc, #412]	; (8006328 <HAL_RCC_ClockConfig+0x250>)
 800618c:	683b      	ldr	r3, [r7, #0]
 800618e:	4313      	orrs	r3, r2
 8006190:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006192:	4b65      	ldr	r3, [pc, #404]	; (8006328 <HAL_RCC_ClockConfig+0x250>)
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	f003 030f 	and.w	r3, r3, #15
 800619a:	683a      	ldr	r2, [r7, #0]
 800619c:	429a      	cmp	r2, r3
 800619e:	d001      	beq.n	80061a4 <HAL_RCC_ClockConfig+0xcc>
    {
      return HAL_ERROR;
 80061a0:	2301      	movs	r3, #1
 80061a2:	e132      	b.n	800640a <HAL_RCC_ClockConfig+0x332>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	f003 0302 	and.w	r3, r3, #2
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d049      	beq.n	8006244 <HAL_RCC_ClockConfig+0x16c>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	f003 0304 	and.w	r3, r3, #4
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d005      	beq.n	80061c8 <HAL_RCC_ClockConfig+0xf0>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80061bc:	4b5b      	ldr	r3, [pc, #364]	; (800632c <HAL_RCC_ClockConfig+0x254>)
 80061be:	689b      	ldr	r3, [r3, #8]
 80061c0:	4a5a      	ldr	r2, [pc, #360]	; (800632c <HAL_RCC_ClockConfig+0x254>)
 80061c2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80061c6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	f003 0308 	and.w	r3, r3, #8
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d005      	beq.n	80061e0 <HAL_RCC_ClockConfig+0x108>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80061d4:	4b55      	ldr	r3, [pc, #340]	; (800632c <HAL_RCC_ClockConfig+0x254>)
 80061d6:	689b      	ldr	r3, [r3, #8]
 80061d8:	4a54      	ldr	r2, [pc, #336]	; (800632c <HAL_RCC_ClockConfig+0x254>)
 80061da:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80061de:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	689b      	ldr	r3, [r3, #8]
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d024      	beq.n	8006232 <HAL_RCC_ClockConfig+0x15a>
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	689b      	ldr	r3, [r3, #8]
 80061ec:	2b80      	cmp	r3, #128	; 0x80
 80061ee:	d020      	beq.n	8006232 <HAL_RCC_ClockConfig+0x15a>
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	689b      	ldr	r3, [r3, #8]
 80061f4:	2b90      	cmp	r3, #144	; 0x90
 80061f6:	d01c      	beq.n	8006232 <HAL_RCC_ClockConfig+0x15a>
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	689b      	ldr	r3, [r3, #8]
 80061fc:	2ba0      	cmp	r3, #160	; 0xa0
 80061fe:	d018      	beq.n	8006232 <HAL_RCC_ClockConfig+0x15a>
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	689b      	ldr	r3, [r3, #8]
 8006204:	2bb0      	cmp	r3, #176	; 0xb0
 8006206:	d014      	beq.n	8006232 <HAL_RCC_ClockConfig+0x15a>
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	689b      	ldr	r3, [r3, #8]
 800620c:	2bc0      	cmp	r3, #192	; 0xc0
 800620e:	d010      	beq.n	8006232 <HAL_RCC_ClockConfig+0x15a>
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	689b      	ldr	r3, [r3, #8]
 8006214:	2bd0      	cmp	r3, #208	; 0xd0
 8006216:	d00c      	beq.n	8006232 <HAL_RCC_ClockConfig+0x15a>
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	689b      	ldr	r3, [r3, #8]
 800621c:	2be0      	cmp	r3, #224	; 0xe0
 800621e:	d008      	beq.n	8006232 <HAL_RCC_ClockConfig+0x15a>
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	689b      	ldr	r3, [r3, #8]
 8006224:	2bf0      	cmp	r3, #240	; 0xf0
 8006226:	d004      	beq.n	8006232 <HAL_RCC_ClockConfig+0x15a>
 8006228:	f240 3102 	movw	r1, #770	; 0x302
 800622c:	483d      	ldr	r0, [pc, #244]	; (8006324 <HAL_RCC_ClockConfig+0x24c>)
 800622e:	f7fc fcac 	bl	8002b8a <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006232:	4b3e      	ldr	r3, [pc, #248]	; (800632c <HAL_RCC_ClockConfig+0x254>)
 8006234:	689b      	ldr	r3, [r3, #8]
 8006236:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	689b      	ldr	r3, [r3, #8]
 800623e:	493b      	ldr	r1, [pc, #236]	; (800632c <HAL_RCC_ClockConfig+0x254>)
 8006240:	4313      	orrs	r3, r2
 8006242:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	f003 0301 	and.w	r3, r3, #1
 800624c:	2b00      	cmp	r3, #0
 800624e:	d051      	beq.n	80062f4 <HAL_RCC_ClockConfig+0x21c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	685b      	ldr	r3, [r3, #4]
 8006254:	2b00      	cmp	r3, #0
 8006256:	d00c      	beq.n	8006272 <HAL_RCC_ClockConfig+0x19a>
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	685b      	ldr	r3, [r3, #4]
 800625c:	2b01      	cmp	r3, #1
 800625e:	d008      	beq.n	8006272 <HAL_RCC_ClockConfig+0x19a>
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	685b      	ldr	r3, [r3, #4]
 8006264:	2b02      	cmp	r3, #2
 8006266:	d004      	beq.n	8006272 <HAL_RCC_ClockConfig+0x19a>
 8006268:	f240 3109 	movw	r1, #777	; 0x309
 800626c:	482d      	ldr	r0, [pc, #180]	; (8006324 <HAL_RCC_ClockConfig+0x24c>)
 800626e:	f7fc fc8c 	bl	8002b8a <assert_failed>

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	685b      	ldr	r3, [r3, #4]
 8006276:	2b01      	cmp	r3, #1
 8006278:	d107      	bne.n	800628a <HAL_RCC_ClockConfig+0x1b2>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800627a:	4b2c      	ldr	r3, [pc, #176]	; (800632c <HAL_RCC_ClockConfig+0x254>)
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006282:	2b00      	cmp	r3, #0
 8006284:	d115      	bne.n	80062b2 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8006286:	2301      	movs	r3, #1
 8006288:	e0bf      	b.n	800640a <HAL_RCC_ClockConfig+0x332>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	685b      	ldr	r3, [r3, #4]
 800628e:	2b02      	cmp	r3, #2
 8006290:	d107      	bne.n	80062a2 <HAL_RCC_ClockConfig+0x1ca>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006292:	4b26      	ldr	r3, [pc, #152]	; (800632c <HAL_RCC_ClockConfig+0x254>)
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800629a:	2b00      	cmp	r3, #0
 800629c:	d109      	bne.n	80062b2 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800629e:	2301      	movs	r3, #1
 80062a0:	e0b3      	b.n	800640a <HAL_RCC_ClockConfig+0x332>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80062a2:	4b22      	ldr	r3, [pc, #136]	; (800632c <HAL_RCC_ClockConfig+0x254>)
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	f003 0302 	and.w	r3, r3, #2
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d101      	bne.n	80062b2 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80062ae:	2301      	movs	r3, #1
 80062b0:	e0ab      	b.n	800640a <HAL_RCC_ClockConfig+0x332>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80062b2:	4b1e      	ldr	r3, [pc, #120]	; (800632c <HAL_RCC_ClockConfig+0x254>)
 80062b4:	689b      	ldr	r3, [r3, #8]
 80062b6:	f023 0203 	bic.w	r2, r3, #3
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	685b      	ldr	r3, [r3, #4]
 80062be:	491b      	ldr	r1, [pc, #108]	; (800632c <HAL_RCC_ClockConfig+0x254>)
 80062c0:	4313      	orrs	r3, r2
 80062c2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80062c4:	f7fd f95a 	bl	800357c <HAL_GetTick>
 80062c8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80062ca:	e00a      	b.n	80062e2 <HAL_RCC_ClockConfig+0x20a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80062cc:	f7fd f956 	bl	800357c <HAL_GetTick>
 80062d0:	4602      	mov	r2, r0
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	1ad3      	subs	r3, r2, r3
 80062d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80062da:	4293      	cmp	r3, r2
 80062dc:	d901      	bls.n	80062e2 <HAL_RCC_ClockConfig+0x20a>
      {
        return HAL_TIMEOUT;
 80062de:	2303      	movs	r3, #3
 80062e0:	e093      	b.n	800640a <HAL_RCC_ClockConfig+0x332>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80062e2:	4b12      	ldr	r3, [pc, #72]	; (800632c <HAL_RCC_ClockConfig+0x254>)
 80062e4:	689b      	ldr	r3, [r3, #8]
 80062e6:	f003 020c 	and.w	r2, r3, #12
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	685b      	ldr	r3, [r3, #4]
 80062ee:	009b      	lsls	r3, r3, #2
 80062f0:	429a      	cmp	r2, r3
 80062f2:	d1eb      	bne.n	80062cc <HAL_RCC_ClockConfig+0x1f4>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80062f4:	4b0c      	ldr	r3, [pc, #48]	; (8006328 <HAL_RCC_ClockConfig+0x250>)
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	f003 030f 	and.w	r3, r3, #15
 80062fc:	683a      	ldr	r2, [r7, #0]
 80062fe:	429a      	cmp	r2, r3
 8006300:	d216      	bcs.n	8006330 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006302:	4b09      	ldr	r3, [pc, #36]	; (8006328 <HAL_RCC_ClockConfig+0x250>)
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	f023 020f 	bic.w	r2, r3, #15
 800630a:	4907      	ldr	r1, [pc, #28]	; (8006328 <HAL_RCC_ClockConfig+0x250>)
 800630c:	683b      	ldr	r3, [r7, #0]
 800630e:	4313      	orrs	r3, r2
 8006310:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006312:	4b05      	ldr	r3, [pc, #20]	; (8006328 <HAL_RCC_ClockConfig+0x250>)
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	f003 030f 	and.w	r3, r3, #15
 800631a:	683a      	ldr	r2, [r7, #0]
 800631c:	429a      	cmp	r2, r3
 800631e:	d007      	beq.n	8006330 <HAL_RCC_ClockConfig+0x258>
    {
      return HAL_ERROR;
 8006320:	2301      	movs	r3, #1
 8006322:	e072      	b.n	800640a <HAL_RCC_ClockConfig+0x332>
 8006324:	080157b8 	.word	0x080157b8
 8006328:	40023c00 	.word	0x40023c00
 800632c:	40023800 	.word	0x40023800
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	f003 0304 	and.w	r3, r3, #4
 8006338:	2b00      	cmp	r3, #0
 800633a:	d025      	beq.n	8006388 <HAL_RCC_ClockConfig+0x2b0>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	68db      	ldr	r3, [r3, #12]
 8006340:	2b00      	cmp	r3, #0
 8006342:	d018      	beq.n	8006376 <HAL_RCC_ClockConfig+0x29e>
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	68db      	ldr	r3, [r3, #12]
 8006348:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800634c:	d013      	beq.n	8006376 <HAL_RCC_ClockConfig+0x29e>
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	68db      	ldr	r3, [r3, #12]
 8006352:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8006356:	d00e      	beq.n	8006376 <HAL_RCC_ClockConfig+0x29e>
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	68db      	ldr	r3, [r3, #12]
 800635c:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8006360:	d009      	beq.n	8006376 <HAL_RCC_ClockConfig+0x29e>
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	68db      	ldr	r3, [r3, #12]
 8006366:	f5b3 5fe0 	cmp.w	r3, #7168	; 0x1c00
 800636a:	d004      	beq.n	8006376 <HAL_RCC_ClockConfig+0x29e>
 800636c:	f240 3146 	movw	r1, #838	; 0x346
 8006370:	4828      	ldr	r0, [pc, #160]	; (8006414 <HAL_RCC_ClockConfig+0x33c>)
 8006372:	f7fc fc0a 	bl	8002b8a <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006376:	4b28      	ldr	r3, [pc, #160]	; (8006418 <HAL_RCC_ClockConfig+0x340>)
 8006378:	689b      	ldr	r3, [r3, #8]
 800637a:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	68db      	ldr	r3, [r3, #12]
 8006382:	4925      	ldr	r1, [pc, #148]	; (8006418 <HAL_RCC_ClockConfig+0x340>)
 8006384:	4313      	orrs	r3, r2
 8006386:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	f003 0308 	and.w	r3, r3, #8
 8006390:	2b00      	cmp	r3, #0
 8006392:	d026      	beq.n	80063e2 <HAL_RCC_ClockConfig+0x30a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	691b      	ldr	r3, [r3, #16]
 8006398:	2b00      	cmp	r3, #0
 800639a:	d018      	beq.n	80063ce <HAL_RCC_ClockConfig+0x2f6>
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	691b      	ldr	r3, [r3, #16]
 80063a0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80063a4:	d013      	beq.n	80063ce <HAL_RCC_ClockConfig+0x2f6>
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	691b      	ldr	r3, [r3, #16]
 80063aa:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80063ae:	d00e      	beq.n	80063ce <HAL_RCC_ClockConfig+0x2f6>
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	691b      	ldr	r3, [r3, #16]
 80063b4:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 80063b8:	d009      	beq.n	80063ce <HAL_RCC_ClockConfig+0x2f6>
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	691b      	ldr	r3, [r3, #16]
 80063be:	f5b3 5fe0 	cmp.w	r3, #7168	; 0x1c00
 80063c2:	d004      	beq.n	80063ce <HAL_RCC_ClockConfig+0x2f6>
 80063c4:	f240 314d 	movw	r1, #845	; 0x34d
 80063c8:	4812      	ldr	r0, [pc, #72]	; (8006414 <HAL_RCC_ClockConfig+0x33c>)
 80063ca:	f7fc fbde 	bl	8002b8a <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80063ce:	4b12      	ldr	r3, [pc, #72]	; (8006418 <HAL_RCC_ClockConfig+0x340>)
 80063d0:	689b      	ldr	r3, [r3, #8]
 80063d2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	691b      	ldr	r3, [r3, #16]
 80063da:	00db      	lsls	r3, r3, #3
 80063dc:	490e      	ldr	r1, [pc, #56]	; (8006418 <HAL_RCC_ClockConfig+0x340>)
 80063de:	4313      	orrs	r3, r2
 80063e0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80063e2:	f000 f821 	bl	8006428 <HAL_RCC_GetSysClockFreq>
 80063e6:	4602      	mov	r2, r0
 80063e8:	4b0b      	ldr	r3, [pc, #44]	; (8006418 <HAL_RCC_ClockConfig+0x340>)
 80063ea:	689b      	ldr	r3, [r3, #8]
 80063ec:	091b      	lsrs	r3, r3, #4
 80063ee:	f003 030f 	and.w	r3, r3, #15
 80063f2:	490a      	ldr	r1, [pc, #40]	; (800641c <HAL_RCC_ClockConfig+0x344>)
 80063f4:	5ccb      	ldrb	r3, [r1, r3]
 80063f6:	fa22 f303 	lsr.w	r3, r2, r3
 80063fa:	4a09      	ldr	r2, [pc, #36]	; (8006420 <HAL_RCC_ClockConfig+0x348>)
 80063fc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80063fe:	4b09      	ldr	r3, [pc, #36]	; (8006424 <HAL_RCC_ClockConfig+0x34c>)
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	4618      	mov	r0, r3
 8006404:	f7fd f876 	bl	80034f4 <HAL_InitTick>

  return HAL_OK;
 8006408:	2300      	movs	r3, #0
}
 800640a:	4618      	mov	r0, r3
 800640c:	3710      	adds	r7, #16
 800640e:	46bd      	mov	sp, r7
 8006410:	bd80      	pop	{r7, pc}
 8006412:	bf00      	nop
 8006414:	080157b8 	.word	0x080157b8
 8006418:	40023800 	.word	0x40023800
 800641c:	080158e8 	.word	0x080158e8
 8006420:	20000000 	.word	0x20000000
 8006424:	20000004 	.word	0x20000004

08006428 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006428:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800642c:	b090      	sub	sp, #64	; 0x40
 800642e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8006430:	2300      	movs	r3, #0
 8006432:	637b      	str	r3, [r7, #52]	; 0x34
 8006434:	2300      	movs	r3, #0
 8006436:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006438:	2300      	movs	r3, #0
 800643a:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0;
 800643c:	2300      	movs	r3, #0
 800643e:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006440:	4b59      	ldr	r3, [pc, #356]	; (80065a8 <HAL_RCC_GetSysClockFreq+0x180>)
 8006442:	689b      	ldr	r3, [r3, #8]
 8006444:	f003 030c 	and.w	r3, r3, #12
 8006448:	2b08      	cmp	r3, #8
 800644a:	d00d      	beq.n	8006468 <HAL_RCC_GetSysClockFreq+0x40>
 800644c:	2b08      	cmp	r3, #8
 800644e:	f200 80a1 	bhi.w	8006594 <HAL_RCC_GetSysClockFreq+0x16c>
 8006452:	2b00      	cmp	r3, #0
 8006454:	d002      	beq.n	800645c <HAL_RCC_GetSysClockFreq+0x34>
 8006456:	2b04      	cmp	r3, #4
 8006458:	d003      	beq.n	8006462 <HAL_RCC_GetSysClockFreq+0x3a>
 800645a:	e09b      	b.n	8006594 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800645c:	4b53      	ldr	r3, [pc, #332]	; (80065ac <HAL_RCC_GetSysClockFreq+0x184>)
 800645e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8006460:	e09b      	b.n	800659a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006462:	4b53      	ldr	r3, [pc, #332]	; (80065b0 <HAL_RCC_GetSysClockFreq+0x188>)
 8006464:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8006466:	e098      	b.n	800659a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006468:	4b4f      	ldr	r3, [pc, #316]	; (80065a8 <HAL_RCC_GetSysClockFreq+0x180>)
 800646a:	685b      	ldr	r3, [r3, #4]
 800646c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006470:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8006472:	4b4d      	ldr	r3, [pc, #308]	; (80065a8 <HAL_RCC_GetSysClockFreq+0x180>)
 8006474:	685b      	ldr	r3, [r3, #4]
 8006476:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800647a:	2b00      	cmp	r3, #0
 800647c:	d028      	beq.n	80064d0 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800647e:	4b4a      	ldr	r3, [pc, #296]	; (80065a8 <HAL_RCC_GetSysClockFreq+0x180>)
 8006480:	685b      	ldr	r3, [r3, #4]
 8006482:	099b      	lsrs	r3, r3, #6
 8006484:	2200      	movs	r2, #0
 8006486:	623b      	str	r3, [r7, #32]
 8006488:	627a      	str	r2, [r7, #36]	; 0x24
 800648a:	6a3b      	ldr	r3, [r7, #32]
 800648c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8006490:	2100      	movs	r1, #0
 8006492:	4b47      	ldr	r3, [pc, #284]	; (80065b0 <HAL_RCC_GetSysClockFreq+0x188>)
 8006494:	fb03 f201 	mul.w	r2, r3, r1
 8006498:	2300      	movs	r3, #0
 800649a:	fb00 f303 	mul.w	r3, r0, r3
 800649e:	4413      	add	r3, r2
 80064a0:	4a43      	ldr	r2, [pc, #268]	; (80065b0 <HAL_RCC_GetSysClockFreq+0x188>)
 80064a2:	fba0 1202 	umull	r1, r2, r0, r2
 80064a6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80064a8:	460a      	mov	r2, r1
 80064aa:	62ba      	str	r2, [r7, #40]	; 0x28
 80064ac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80064ae:	4413      	add	r3, r2
 80064b0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80064b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80064b4:	2200      	movs	r2, #0
 80064b6:	61bb      	str	r3, [r7, #24]
 80064b8:	61fa      	str	r2, [r7, #28]
 80064ba:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80064be:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80064c2:	f7fa fc01 	bl	8000cc8 <__aeabi_uldivmod>
 80064c6:	4602      	mov	r2, r0
 80064c8:	460b      	mov	r3, r1
 80064ca:	4613      	mov	r3, r2
 80064cc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80064ce:	e053      	b.n	8006578 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80064d0:	4b35      	ldr	r3, [pc, #212]	; (80065a8 <HAL_RCC_GetSysClockFreq+0x180>)
 80064d2:	685b      	ldr	r3, [r3, #4]
 80064d4:	099b      	lsrs	r3, r3, #6
 80064d6:	2200      	movs	r2, #0
 80064d8:	613b      	str	r3, [r7, #16]
 80064da:	617a      	str	r2, [r7, #20]
 80064dc:	693b      	ldr	r3, [r7, #16]
 80064de:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80064e2:	f04f 0b00 	mov.w	fp, #0
 80064e6:	4652      	mov	r2, sl
 80064e8:	465b      	mov	r3, fp
 80064ea:	f04f 0000 	mov.w	r0, #0
 80064ee:	f04f 0100 	mov.w	r1, #0
 80064f2:	0159      	lsls	r1, r3, #5
 80064f4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80064f8:	0150      	lsls	r0, r2, #5
 80064fa:	4602      	mov	r2, r0
 80064fc:	460b      	mov	r3, r1
 80064fe:	ebb2 080a 	subs.w	r8, r2, sl
 8006502:	eb63 090b 	sbc.w	r9, r3, fp
 8006506:	f04f 0200 	mov.w	r2, #0
 800650a:	f04f 0300 	mov.w	r3, #0
 800650e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8006512:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8006516:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800651a:	ebb2 0408 	subs.w	r4, r2, r8
 800651e:	eb63 0509 	sbc.w	r5, r3, r9
 8006522:	f04f 0200 	mov.w	r2, #0
 8006526:	f04f 0300 	mov.w	r3, #0
 800652a:	00eb      	lsls	r3, r5, #3
 800652c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006530:	00e2      	lsls	r2, r4, #3
 8006532:	4614      	mov	r4, r2
 8006534:	461d      	mov	r5, r3
 8006536:	eb14 030a 	adds.w	r3, r4, sl
 800653a:	603b      	str	r3, [r7, #0]
 800653c:	eb45 030b 	adc.w	r3, r5, fp
 8006540:	607b      	str	r3, [r7, #4]
 8006542:	f04f 0200 	mov.w	r2, #0
 8006546:	f04f 0300 	mov.w	r3, #0
 800654a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800654e:	4629      	mov	r1, r5
 8006550:	028b      	lsls	r3, r1, #10
 8006552:	4621      	mov	r1, r4
 8006554:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006558:	4621      	mov	r1, r4
 800655a:	028a      	lsls	r2, r1, #10
 800655c:	4610      	mov	r0, r2
 800655e:	4619      	mov	r1, r3
 8006560:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006562:	2200      	movs	r2, #0
 8006564:	60bb      	str	r3, [r7, #8]
 8006566:	60fa      	str	r2, [r7, #12]
 8006568:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800656c:	f7fa fbac 	bl	8000cc8 <__aeabi_uldivmod>
 8006570:	4602      	mov	r2, r0
 8006572:	460b      	mov	r3, r1
 8006574:	4613      	mov	r3, r2
 8006576:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8006578:	4b0b      	ldr	r3, [pc, #44]	; (80065a8 <HAL_RCC_GetSysClockFreq+0x180>)
 800657a:	685b      	ldr	r3, [r3, #4]
 800657c:	0c1b      	lsrs	r3, r3, #16
 800657e:	f003 0303 	and.w	r3, r3, #3
 8006582:	3301      	adds	r3, #1
 8006584:	005b      	lsls	r3, r3, #1
 8006586:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 8006588:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800658a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800658c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006590:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8006592:	e002      	b.n	800659a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006594:	4b05      	ldr	r3, [pc, #20]	; (80065ac <HAL_RCC_GetSysClockFreq+0x184>)
 8006596:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8006598:	bf00      	nop
    }
  }
  return sysclockfreq;
 800659a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 800659c:	4618      	mov	r0, r3
 800659e:	3740      	adds	r7, #64	; 0x40
 80065a0:	46bd      	mov	sp, r7
 80065a2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80065a6:	bf00      	nop
 80065a8:	40023800 	.word	0x40023800
 80065ac:	00f42400 	.word	0x00f42400
 80065b0:	017d7840 	.word	0x017d7840

080065b4 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80065b4:	b480      	push	{r7}
 80065b6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80065b8:	4b03      	ldr	r3, [pc, #12]	; (80065c8 <HAL_RCC_GetHCLKFreq+0x14>)
 80065ba:	681b      	ldr	r3, [r3, #0]
}
 80065bc:	4618      	mov	r0, r3
 80065be:	46bd      	mov	sp, r7
 80065c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065c4:	4770      	bx	lr
 80065c6:	bf00      	nop
 80065c8:	20000000 	.word	0x20000000

080065cc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80065cc:	b580      	push	{r7, lr}
 80065ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80065d0:	f7ff fff0 	bl	80065b4 <HAL_RCC_GetHCLKFreq>
 80065d4:	4602      	mov	r2, r0
 80065d6:	4b05      	ldr	r3, [pc, #20]	; (80065ec <HAL_RCC_GetPCLK1Freq+0x20>)
 80065d8:	689b      	ldr	r3, [r3, #8]
 80065da:	0a9b      	lsrs	r3, r3, #10
 80065dc:	f003 0307 	and.w	r3, r3, #7
 80065e0:	4903      	ldr	r1, [pc, #12]	; (80065f0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80065e2:	5ccb      	ldrb	r3, [r1, r3]
 80065e4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80065e8:	4618      	mov	r0, r3
 80065ea:	bd80      	pop	{r7, pc}
 80065ec:	40023800 	.word	0x40023800
 80065f0:	080158f8 	.word	0x080158f8

080065f4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80065f4:	b580      	push	{r7, lr}
 80065f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80065f8:	f7ff ffdc 	bl	80065b4 <HAL_RCC_GetHCLKFreq>
 80065fc:	4602      	mov	r2, r0
 80065fe:	4b05      	ldr	r3, [pc, #20]	; (8006614 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006600:	689b      	ldr	r3, [r3, #8]
 8006602:	0b5b      	lsrs	r3, r3, #13
 8006604:	f003 0307 	and.w	r3, r3, #7
 8006608:	4903      	ldr	r1, [pc, #12]	; (8006618 <HAL_RCC_GetPCLK2Freq+0x24>)
 800660a:	5ccb      	ldrb	r3, [r1, r3]
 800660c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006610:	4618      	mov	r0, r3
 8006612:	bd80      	pop	{r7, pc}
 8006614:	40023800 	.word	0x40023800
 8006618:	080158f8 	.word	0x080158f8

0800661c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800661c:	b580      	push	{r7, lr}
 800661e:	b088      	sub	sp, #32
 8006620:	af00      	add	r7, sp, #0
 8006622:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8006624:	2300      	movs	r3, #0
 8006626:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8006628:	2300      	movs	r3, #0
 800662a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 800662c:	2300      	movs	r3, #0
 800662e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8006630:	2300      	movs	r3, #0
 8006632:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8006634:	2300      	movs	r3, #0
 8006636:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	f003 0301 	and.w	r3, r3, #1
 8006640:	2b00      	cmp	r3, #0
 8006642:	f040 8089 	bne.w	8006758 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	f003 0308 	and.w	r3, r3, #8
 800664e:	2b00      	cmp	r3, #0
 8006650:	f040 8082 	bne.w	8006758 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	f003 0310 	and.w	r3, r3, #16
 800665c:	2b00      	cmp	r3, #0
 800665e:	d17b      	bne.n	8006758 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006668:	2b00      	cmp	r3, #0
 800666a:	d175      	bne.n	8006758 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006674:	2b00      	cmp	r3, #0
 8006676:	d16f      	bne.n	8006758 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006680:	2b00      	cmp	r3, #0
 8006682:	d169      	bne.n	8006758 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800668c:	2b00      	cmp	r3, #0
 800668e:	d163      	bne.n	8006758 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006698:	2b00      	cmp	r3, #0
 800669a:	d15d      	bne.n	8006758 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d157      	bne.n	8006758 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d151      	bne.n	8006758 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d14b      	bne.n	8006758 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d145      	bne.n	8006758 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d13f      	bne.n	8006758 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d139      	bne.n	8006758 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d133      	bne.n	8006758 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d12d      	bne.n	8006758 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006704:	2b00      	cmp	r3, #0
 8006706:	d127      	bne.n	8006758 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006710:	2b00      	cmp	r3, #0
 8006712:	d121      	bne.n	8006758 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800671c:	2b00      	cmp	r3, #0
 800671e:	d11b      	bne.n	8006758 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006728:	2b00      	cmp	r3, #0
 800672a:	d115      	bne.n	8006758 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006734:	2b00      	cmp	r3, #0
 8006736:	d10f      	bne.n	8006758 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006740:	2b00      	cmp	r3, #0
 8006742:	d109      	bne.n	8006758 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	f003 0320 	and.w	r3, r3, #32
 800674c:	2b00      	cmp	r3, #0
 800674e:	d103      	bne.n	8006758 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8006750:	2172      	movs	r1, #114	; 0x72
 8006752:	4895      	ldr	r0, [pc, #596]	; (80069a8 <HAL_RCCEx_PeriphCLKConfig+0x38c>)
 8006754:	f7fc fa19 	bl	8002b8a <assert_failed>

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	f003 0301 	and.w	r3, r3, #1
 8006760:	2b00      	cmp	r3, #0
 8006762:	d01f      	beq.n	80067a4 <HAL_RCCEx_PeriphCLKConfig+0x188>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006768:	2b00      	cmp	r3, #0
 800676a:	d008      	beq.n	800677e <HAL_RCCEx_PeriphCLKConfig+0x162>
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006770:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006774:	d003      	beq.n	800677e <HAL_RCCEx_PeriphCLKConfig+0x162>
 8006776:	2178      	movs	r1, #120	; 0x78
 8006778:	488b      	ldr	r0, [pc, #556]	; (80069a8 <HAL_RCCEx_PeriphCLKConfig+0x38c>)
 800677a:	f7fc fa06 	bl	8002b8a <assert_failed>

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800677e:	4b8b      	ldr	r3, [pc, #556]	; (80069ac <HAL_RCCEx_PeriphCLKConfig+0x390>)
 8006780:	689b      	ldr	r3, [r3, #8]
 8006782:	4a8a      	ldr	r2, [pc, #552]	; (80069ac <HAL_RCCEx_PeriphCLKConfig+0x390>)
 8006784:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8006788:	6093      	str	r3, [r2, #8]
 800678a:	4b88      	ldr	r3, [pc, #544]	; (80069ac <HAL_RCCEx_PeriphCLKConfig+0x390>)
 800678c:	689a      	ldr	r2, [r3, #8]
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006792:	4986      	ldr	r1, [pc, #536]	; (80069ac <HAL_RCCEx_PeriphCLKConfig+0x390>)
 8006794:	4313      	orrs	r3, r2
 8006796:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800679c:	2b00      	cmp	r3, #0
 800679e:	d101      	bne.n	80067a4 <HAL_RCCEx_PeriphCLKConfig+0x188>
    {
      plli2sused = 1;
 80067a0:	2301      	movs	r3, #1
 80067a2:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d029      	beq.n	8006804 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d00d      	beq.n	80067d4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80067bc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80067c0:	d008      	beq.n	80067d4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80067c6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80067ca:	d003      	beq.n	80067d4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 80067cc:	2188      	movs	r1, #136	; 0x88
 80067ce:	4876      	ldr	r0, [pc, #472]	; (80069a8 <HAL_RCCEx_PeriphCLKConfig+0x38c>)
 80067d0:	f7fc f9db 	bl	8002b8a <assert_failed>

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80067d4:	4b75      	ldr	r3, [pc, #468]	; (80069ac <HAL_RCCEx_PeriphCLKConfig+0x390>)
 80067d6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80067da:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80067e2:	4972      	ldr	r1, [pc, #456]	; (80069ac <HAL_RCCEx_PeriphCLKConfig+0x390>)
 80067e4:	4313      	orrs	r3, r2
 80067e6:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80067ee:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80067f2:	d101      	bne.n	80067f8 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
    {
      plli2sused = 1;
 80067f4:	2301      	movs	r3, #1
 80067f6:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d101      	bne.n	8006804 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
    {
      pllsaiused = 1;
 8006800:	2301      	movs	r3, #1
 8006802:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800680c:	2b00      	cmp	r3, #0
 800680e:	d029      	beq.n	8006864 <HAL_RCCEx_PeriphCLKConfig+0x248>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006814:	2b00      	cmp	r3, #0
 8006816:	d00d      	beq.n	8006834 <HAL_RCCEx_PeriphCLKConfig+0x218>
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800681c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006820:	d008      	beq.n	8006834 <HAL_RCCEx_PeriphCLKConfig+0x218>
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006826:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800682a:	d003      	beq.n	8006834 <HAL_RCCEx_PeriphCLKConfig+0x218>
 800682c:	219c      	movs	r1, #156	; 0x9c
 800682e:	485e      	ldr	r0, [pc, #376]	; (80069a8 <HAL_RCCEx_PeriphCLKConfig+0x38c>)
 8006830:	f7fc f9ab 	bl	8002b8a <assert_failed>

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8006834:	4b5d      	ldr	r3, [pc, #372]	; (80069ac <HAL_RCCEx_PeriphCLKConfig+0x390>)
 8006836:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800683a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006842:	495a      	ldr	r1, [pc, #360]	; (80069ac <HAL_RCCEx_PeriphCLKConfig+0x390>)
 8006844:	4313      	orrs	r3, r2
 8006846:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800684e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006852:	d101      	bne.n	8006858 <HAL_RCCEx_PeriphCLKConfig+0x23c>
    {
      plli2sused = 1;
 8006854:	2301      	movs	r3, #1
 8006856:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800685c:	2b00      	cmp	r3, #0
 800685e:	d101      	bne.n	8006864 <HAL_RCCEx_PeriphCLKConfig+0x248>
    {
      pllsaiused = 1;
 8006860:	2301      	movs	r3, #1
 8006862:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800686c:	2b00      	cmp	r3, #0
 800686e:	d001      	beq.n	8006874 <HAL_RCCEx_PeriphCLKConfig+0x258>
  {
      plli2sused = 1;
 8006870:	2301      	movs	r3, #1
 8006872:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	f003 0320 	and.w	r3, r3, #32
 800687c:	2b00      	cmp	r3, #0
 800687e:	f000 8186 	beq.w	8006b8e <HAL_RCCEx_PeriphCLKConfig+0x572>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006886:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800688a:	f000 80e4 	beq.w	8006a56 <HAL_RCCEx_PeriphCLKConfig+0x43a>
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006892:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006896:	f000 80de 	beq.w	8006a56 <HAL_RCCEx_PeriphCLKConfig+0x43a>
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800689e:	4a44      	ldr	r2, [pc, #272]	; (80069b0 <HAL_RCCEx_PeriphCLKConfig+0x394>)
 80068a0:	4293      	cmp	r3, r2
 80068a2:	f000 80d8 	beq.w	8006a56 <HAL_RCCEx_PeriphCLKConfig+0x43a>
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068aa:	4a42      	ldr	r2, [pc, #264]	; (80069b4 <HAL_RCCEx_PeriphCLKConfig+0x398>)
 80068ac:	4293      	cmp	r3, r2
 80068ae:	f000 80d2 	beq.w	8006a56 <HAL_RCCEx_PeriphCLKConfig+0x43a>
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068b6:	4a40      	ldr	r2, [pc, #256]	; (80069b8 <HAL_RCCEx_PeriphCLKConfig+0x39c>)
 80068b8:	4293      	cmp	r3, r2
 80068ba:	f000 80cc 	beq.w	8006a56 <HAL_RCCEx_PeriphCLKConfig+0x43a>
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068c2:	4a3e      	ldr	r2, [pc, #248]	; (80069bc <HAL_RCCEx_PeriphCLKConfig+0x3a0>)
 80068c4:	4293      	cmp	r3, r2
 80068c6:	f000 80c6 	beq.w	8006a56 <HAL_RCCEx_PeriphCLKConfig+0x43a>
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068ce:	4a3c      	ldr	r2, [pc, #240]	; (80069c0 <HAL_RCCEx_PeriphCLKConfig+0x3a4>)
 80068d0:	4293      	cmp	r3, r2
 80068d2:	f000 80c0 	beq.w	8006a56 <HAL_RCCEx_PeriphCLKConfig+0x43a>
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068da:	4a3a      	ldr	r2, [pc, #232]	; (80069c4 <HAL_RCCEx_PeriphCLKConfig+0x3a8>)
 80068dc:	4293      	cmp	r3, r2
 80068de:	f000 80ba 	beq.w	8006a56 <HAL_RCCEx_PeriphCLKConfig+0x43a>
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068e6:	4a38      	ldr	r2, [pc, #224]	; (80069c8 <HAL_RCCEx_PeriphCLKConfig+0x3ac>)
 80068e8:	4293      	cmp	r3, r2
 80068ea:	f000 80b4 	beq.w	8006a56 <HAL_RCCEx_PeriphCLKConfig+0x43a>
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068f2:	4a36      	ldr	r2, [pc, #216]	; (80069cc <HAL_RCCEx_PeriphCLKConfig+0x3b0>)
 80068f4:	4293      	cmp	r3, r2
 80068f6:	f000 80ae 	beq.w	8006a56 <HAL_RCCEx_PeriphCLKConfig+0x43a>
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068fe:	4a34      	ldr	r2, [pc, #208]	; (80069d0 <HAL_RCCEx_PeriphCLKConfig+0x3b4>)
 8006900:	4293      	cmp	r3, r2
 8006902:	f000 80a8 	beq.w	8006a56 <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800690a:	4a32      	ldr	r2, [pc, #200]	; (80069d4 <HAL_RCCEx_PeriphCLKConfig+0x3b8>)
 800690c:	4293      	cmp	r3, r2
 800690e:	f000 80a2 	beq.w	8006a56 <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006916:	4a30      	ldr	r2, [pc, #192]	; (80069d8 <HAL_RCCEx_PeriphCLKConfig+0x3bc>)
 8006918:	4293      	cmp	r3, r2
 800691a:	f000 809c 	beq.w	8006a56 <HAL_RCCEx_PeriphCLKConfig+0x43a>
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006922:	4a2e      	ldr	r2, [pc, #184]	; (80069dc <HAL_RCCEx_PeriphCLKConfig+0x3c0>)
 8006924:	4293      	cmp	r3, r2
 8006926:	f000 8096 	beq.w	8006a56 <HAL_RCCEx_PeriphCLKConfig+0x43a>
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800692e:	4a2c      	ldr	r2, [pc, #176]	; (80069e0 <HAL_RCCEx_PeriphCLKConfig+0x3c4>)
 8006930:	4293      	cmp	r3, r2
 8006932:	f000 8090 	beq.w	8006a56 <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800693a:	4a2a      	ldr	r2, [pc, #168]	; (80069e4 <HAL_RCCEx_PeriphCLKConfig+0x3c8>)
 800693c:	4293      	cmp	r3, r2
 800693e:	f000 808a 	beq.w	8006a56 <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006946:	4a28      	ldr	r2, [pc, #160]	; (80069e8 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8006948:	4293      	cmp	r3, r2
 800694a:	f000 8084 	beq.w	8006a56 <HAL_RCCEx_PeriphCLKConfig+0x43a>
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006952:	4a26      	ldr	r2, [pc, #152]	; (80069ec <HAL_RCCEx_PeriphCLKConfig+0x3d0>)
 8006954:	4293      	cmp	r3, r2
 8006956:	d07e      	beq.n	8006a56 <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800695c:	4a24      	ldr	r2, [pc, #144]	; (80069f0 <HAL_RCCEx_PeriphCLKConfig+0x3d4>)
 800695e:	4293      	cmp	r3, r2
 8006960:	d079      	beq.n	8006a56 <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006966:	4a23      	ldr	r2, [pc, #140]	; (80069f4 <HAL_RCCEx_PeriphCLKConfig+0x3d8>)
 8006968:	4293      	cmp	r3, r2
 800696a:	d074      	beq.n	8006a56 <HAL_RCCEx_PeriphCLKConfig+0x43a>
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006970:	4a21      	ldr	r2, [pc, #132]	; (80069f8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006972:	4293      	cmp	r3, r2
 8006974:	d06f      	beq.n	8006a56 <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800697a:	4a20      	ldr	r2, [pc, #128]	; (80069fc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800697c:	4293      	cmp	r3, r2
 800697e:	d06a      	beq.n	8006a56 <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006984:	4a1e      	ldr	r2, [pc, #120]	; (8006a00 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006986:	4293      	cmp	r3, r2
 8006988:	d065      	beq.n	8006a56 <HAL_RCCEx_PeriphCLKConfig+0x43a>
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800698e:	4a1d      	ldr	r2, [pc, #116]	; (8006a04 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006990:	4293      	cmp	r3, r2
 8006992:	d060      	beq.n	8006a56 <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006998:	4a1b      	ldr	r2, [pc, #108]	; (8006a08 <HAL_RCCEx_PeriphCLKConfig+0x3ec>)
 800699a:	4293      	cmp	r3, r2
 800699c:	d05b      	beq.n	8006a56 <HAL_RCCEx_PeriphCLKConfig+0x43a>
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069a2:	4a1a      	ldr	r2, [pc, #104]	; (8006a0c <HAL_RCCEx_PeriphCLKConfig+0x3f0>)
 80069a4:	4293      	cmp	r3, r2
 80069a6:	e033      	b.n	8006a10 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
 80069a8:	080157f0 	.word	0x080157f0
 80069ac:	40023800 	.word	0x40023800
 80069b0:	00020300 	.word	0x00020300
 80069b4:	00030300 	.word	0x00030300
 80069b8:	00040300 	.word	0x00040300
 80069bc:	00050300 	.word	0x00050300
 80069c0:	00060300 	.word	0x00060300
 80069c4:	00070300 	.word	0x00070300
 80069c8:	00080300 	.word	0x00080300
 80069cc:	00090300 	.word	0x00090300
 80069d0:	000a0300 	.word	0x000a0300
 80069d4:	000b0300 	.word	0x000b0300
 80069d8:	000c0300 	.word	0x000c0300
 80069dc:	000d0300 	.word	0x000d0300
 80069e0:	000e0300 	.word	0x000e0300
 80069e4:	000f0300 	.word	0x000f0300
 80069e8:	00100300 	.word	0x00100300
 80069ec:	00110300 	.word	0x00110300
 80069f0:	00120300 	.word	0x00120300
 80069f4:	00130300 	.word	0x00130300
 80069f8:	00140300 	.word	0x00140300
 80069fc:	00150300 	.word	0x00150300
 8006a00:	00160300 	.word	0x00160300
 8006a04:	00170300 	.word	0x00170300
 8006a08:	00180300 	.word	0x00180300
 8006a0c:	00190300 	.word	0x00190300
 8006a10:	d021      	beq.n	8006a56 <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a16:	4a4c      	ldr	r2, [pc, #304]	; (8006b48 <HAL_RCCEx_PeriphCLKConfig+0x52c>)
 8006a18:	4293      	cmp	r3, r2
 8006a1a:	d01c      	beq.n	8006a56 <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a20:	4a4a      	ldr	r2, [pc, #296]	; (8006b4c <HAL_RCCEx_PeriphCLKConfig+0x530>)
 8006a22:	4293      	cmp	r3, r2
 8006a24:	d017      	beq.n	8006a56 <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a2a:	4a49      	ldr	r2, [pc, #292]	; (8006b50 <HAL_RCCEx_PeriphCLKConfig+0x534>)
 8006a2c:	4293      	cmp	r3, r2
 8006a2e:	d012      	beq.n	8006a56 <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a34:	4a47      	ldr	r2, [pc, #284]	; (8006b54 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8006a36:	4293      	cmp	r3, r2
 8006a38:	d00d      	beq.n	8006a56 <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a3e:	4a46      	ldr	r2, [pc, #280]	; (8006b58 <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 8006a40:	4293      	cmp	r3, r2
 8006a42:	d008      	beq.n	8006a56 <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a48:	4a44      	ldr	r2, [pc, #272]	; (8006b5c <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8006a4a:	4293      	cmp	r3, r2
 8006a4c:	d003      	beq.n	8006a56 <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8006a4e:	21b7      	movs	r1, #183	; 0xb7
 8006a50:	4843      	ldr	r0, [pc, #268]	; (8006b60 <HAL_RCCEx_PeriphCLKConfig+0x544>)
 8006a52:	f7fc f89a 	bl	8002b8a <assert_failed>

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8006a56:	4b43      	ldr	r3, [pc, #268]	; (8006b64 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8006a58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a5a:	4a42      	ldr	r2, [pc, #264]	; (8006b64 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8006a5c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006a60:	6413      	str	r3, [r2, #64]	; 0x40
 8006a62:	4b40      	ldr	r3, [pc, #256]	; (8006b64 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8006a64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006a6a:	60bb      	str	r3, [r7, #8]
 8006a6c:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8006a6e:	4b3e      	ldr	r3, [pc, #248]	; (8006b68 <HAL_RCCEx_PeriphCLKConfig+0x54c>)
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	4a3d      	ldr	r2, [pc, #244]	; (8006b68 <HAL_RCCEx_PeriphCLKConfig+0x54c>)
 8006a74:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006a78:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006a7a:	f7fc fd7f 	bl	800357c <HAL_GetTick>
 8006a7e:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8006a80:	e009      	b.n	8006a96 <HAL_RCCEx_PeriphCLKConfig+0x47a>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006a82:	f7fc fd7b 	bl	800357c <HAL_GetTick>
 8006a86:	4602      	mov	r2, r0
 8006a88:	697b      	ldr	r3, [r7, #20]
 8006a8a:	1ad3      	subs	r3, r2, r3
 8006a8c:	2b64      	cmp	r3, #100	; 0x64
 8006a8e:	d902      	bls.n	8006a96 <HAL_RCCEx_PeriphCLKConfig+0x47a>
      {
        return HAL_TIMEOUT;
 8006a90:	2303      	movs	r3, #3
 8006a92:	f000 bd9f 	b.w	80075d4 <HAL_RCCEx_PeriphCLKConfig+0xfb8>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8006a96:	4b34      	ldr	r3, [pc, #208]	; (8006b68 <HAL_RCCEx_PeriphCLKConfig+0x54c>)
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d0ef      	beq.n	8006a82 <HAL_RCCEx_PeriphCLKConfig+0x466>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006aa2:	4b30      	ldr	r3, [pc, #192]	; (8006b64 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8006aa4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006aa6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006aaa:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006aac:	693b      	ldr	r3, [r7, #16]
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d036      	beq.n	8006b20 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ab6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006aba:	693a      	ldr	r2, [r7, #16]
 8006abc:	429a      	cmp	r2, r3
 8006abe:	d02f      	beq.n	8006b20 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006ac0:	4b28      	ldr	r3, [pc, #160]	; (8006b64 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8006ac2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ac4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006ac8:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006aca:	4b26      	ldr	r3, [pc, #152]	; (8006b64 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8006acc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ace:	4a25      	ldr	r2, [pc, #148]	; (8006b64 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8006ad0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006ad4:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006ad6:	4b23      	ldr	r3, [pc, #140]	; (8006b64 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8006ad8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ada:	4a22      	ldr	r2, [pc, #136]	; (8006b64 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8006adc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006ae0:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8006ae2:	4a20      	ldr	r2, [pc, #128]	; (8006b64 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8006ae4:	693b      	ldr	r3, [r7, #16]
 8006ae6:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8006ae8:	4b1e      	ldr	r3, [pc, #120]	; (8006b64 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8006aea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006aec:	f003 0301 	and.w	r3, r3, #1
 8006af0:	2b01      	cmp	r3, #1
 8006af2:	d115      	bne.n	8006b20 <HAL_RCCEx_PeriphCLKConfig+0x504>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006af4:	f7fc fd42 	bl	800357c <HAL_GetTick>
 8006af8:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006afa:	e00b      	b.n	8006b14 <HAL_RCCEx_PeriphCLKConfig+0x4f8>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006afc:	f7fc fd3e 	bl	800357c <HAL_GetTick>
 8006b00:	4602      	mov	r2, r0
 8006b02:	697b      	ldr	r3, [r7, #20]
 8006b04:	1ad3      	subs	r3, r2, r3
 8006b06:	f241 3288 	movw	r2, #5000	; 0x1388
 8006b0a:	4293      	cmp	r3, r2
 8006b0c:	d902      	bls.n	8006b14 <HAL_RCCEx_PeriphCLKConfig+0x4f8>
          {
            return HAL_TIMEOUT;
 8006b0e:	2303      	movs	r3, #3
 8006b10:	f000 bd60 	b.w	80075d4 <HAL_RCCEx_PeriphCLKConfig+0xfb8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006b14:	4b13      	ldr	r3, [pc, #76]	; (8006b64 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8006b16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b18:	f003 0302 	and.w	r3, r3, #2
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d0ed      	beq.n	8006afc <HAL_RCCEx_PeriphCLKConfig+0x4e0>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b24:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006b28:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006b2c:	d120      	bne.n	8006b70 <HAL_RCCEx_PeriphCLKConfig+0x554>
 8006b2e:	4b0d      	ldr	r3, [pc, #52]	; (8006b64 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8006b30:	689b      	ldr	r3, [r3, #8]
 8006b32:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8006b3a:	4b0c      	ldr	r3, [pc, #48]	; (8006b6c <HAL_RCCEx_PeriphCLKConfig+0x550>)
 8006b3c:	400b      	ands	r3, r1
 8006b3e:	4909      	ldr	r1, [pc, #36]	; (8006b64 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8006b40:	4313      	orrs	r3, r2
 8006b42:	608b      	str	r3, [r1, #8]
 8006b44:	e01a      	b.n	8006b7c <HAL_RCCEx_PeriphCLKConfig+0x560>
 8006b46:	bf00      	nop
 8006b48:	001a0300 	.word	0x001a0300
 8006b4c:	001b0300 	.word	0x001b0300
 8006b50:	001c0300 	.word	0x001c0300
 8006b54:	001d0300 	.word	0x001d0300
 8006b58:	001e0300 	.word	0x001e0300
 8006b5c:	001f0300 	.word	0x001f0300
 8006b60:	080157f0 	.word	0x080157f0
 8006b64:	40023800 	.word	0x40023800
 8006b68:	40007000 	.word	0x40007000
 8006b6c:	0ffffcff 	.word	0x0ffffcff
 8006b70:	4b9a      	ldr	r3, [pc, #616]	; (8006ddc <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8006b72:	689b      	ldr	r3, [r3, #8]
 8006b74:	4a99      	ldr	r2, [pc, #612]	; (8006ddc <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8006b76:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8006b7a:	6093      	str	r3, [r2, #8]
 8006b7c:	4b97      	ldr	r3, [pc, #604]	; (8006ddc <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8006b7e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b84:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006b88:	4994      	ldr	r1, [pc, #592]	; (8006ddc <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8006b8a:	4313      	orrs	r3, r2
 8006b8c:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	f003 0310 	and.w	r3, r3, #16
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d01d      	beq.n	8006bd6 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d008      	beq.n	8006bb4 <HAL_RCCEx_PeriphCLKConfig+0x598>
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ba6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006baa:	d003      	beq.n	8006bb4 <HAL_RCCEx_PeriphCLKConfig+0x598>
 8006bac:	21f1      	movs	r1, #241	; 0xf1
 8006bae:	488c      	ldr	r0, [pc, #560]	; (8006de0 <HAL_RCCEx_PeriphCLKConfig+0x7c4>)
 8006bb0:	f7fb ffeb 	bl	8002b8a <assert_failed>

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006bb4:	4b89      	ldr	r3, [pc, #548]	; (8006ddc <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8006bb6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006bba:	4a88      	ldr	r2, [pc, #544]	; (8006ddc <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8006bbc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006bc0:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8006bc4:	4b85      	ldr	r3, [pc, #532]	; (8006ddc <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8006bc6:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bce:	4983      	ldr	r1, [pc, #524]	; (8006ddc <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8006bd0:	4313      	orrs	r3, r2
 8006bd2:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d01c      	beq.n	8006c1c <HAL_RCCEx_PeriphCLKConfig+0x600>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d00d      	beq.n	8006c06 <HAL_RCCEx_PeriphCLKConfig+0x5ea>
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006bee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006bf2:	d008      	beq.n	8006c06 <HAL_RCCEx_PeriphCLKConfig+0x5ea>
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006bf8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006bfc:	d003      	beq.n	8006c06 <HAL_RCCEx_PeriphCLKConfig+0x5ea>
 8006bfe:	21fb      	movs	r1, #251	; 0xfb
 8006c00:	4877      	ldr	r0, [pc, #476]	; (8006de0 <HAL_RCCEx_PeriphCLKConfig+0x7c4>)
 8006c02:	f7fb ffc2 	bl	8002b8a <assert_failed>

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006c06:	4b75      	ldr	r3, [pc, #468]	; (8006ddc <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8006c08:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006c0c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006c14:	4971      	ldr	r1, [pc, #452]	; (8006ddc <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8006c16:	4313      	orrs	r3, r2
 8006c18:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d01d      	beq.n	8006c64 <HAL_RCCEx_PeriphCLKConfig+0x648>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d00e      	beq.n	8006c4e <HAL_RCCEx_PeriphCLKConfig+0x632>
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006c34:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006c38:	d009      	beq.n	8006c4e <HAL_RCCEx_PeriphCLKConfig+0x632>
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006c3e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8006c42:	d004      	beq.n	8006c4e <HAL_RCCEx_PeriphCLKConfig+0x632>
 8006c44:	f240 1105 	movw	r1, #261	; 0x105
 8006c48:	4865      	ldr	r0, [pc, #404]	; (8006de0 <HAL_RCCEx_PeriphCLKConfig+0x7c4>)
 8006c4a:	f7fb ff9e 	bl	8002b8a <assert_failed>

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006c4e:	4b63      	ldr	r3, [pc, #396]	; (8006ddc <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8006c50:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006c54:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006c5c:	495f      	ldr	r1, [pc, #380]	; (8006ddc <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8006c5e:	4313      	orrs	r3, r2
 8006c60:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d01d      	beq.n	8006cac <HAL_RCCEx_PeriphCLKConfig+0x690>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d00e      	beq.n	8006c96 <HAL_RCCEx_PeriphCLKConfig+0x67a>
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006c7c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006c80:	d009      	beq.n	8006c96 <HAL_RCCEx_PeriphCLKConfig+0x67a>
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006c86:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006c8a:	d004      	beq.n	8006c96 <HAL_RCCEx_PeriphCLKConfig+0x67a>
 8006c8c:	f240 110f 	movw	r1, #271	; 0x10f
 8006c90:	4853      	ldr	r0, [pc, #332]	; (8006de0 <HAL_RCCEx_PeriphCLKConfig+0x7c4>)
 8006c92:	f7fb ff7a 	bl	8002b8a <assert_failed>

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006c96:	4b51      	ldr	r3, [pc, #324]	; (8006ddc <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8006c98:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006c9c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006ca4:	494d      	ldr	r1, [pc, #308]	; (8006ddc <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8006ca6:	4313      	orrs	r3, r2
 8006ca8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	d01d      	beq.n	8006cf4 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	d00e      	beq.n	8006cde <HAL_RCCEx_PeriphCLKConfig+0x6c2>
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006cc4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006cc8:	d009      	beq.n	8006cde <HAL_RCCEx_PeriphCLKConfig+0x6c2>
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006cce:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006cd2:	d004      	beq.n	8006cde <HAL_RCCEx_PeriphCLKConfig+0x6c2>
 8006cd4:	f240 1119 	movw	r1, #281	; 0x119
 8006cd8:	4841      	ldr	r0, [pc, #260]	; (8006de0 <HAL_RCCEx_PeriphCLKConfig+0x7c4>)
 8006cda:	f7fb ff56 	bl	8002b8a <assert_failed>

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006cde:	4b3f      	ldr	r3, [pc, #252]	; (8006ddc <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8006ce0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006ce4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006cec:	493b      	ldr	r1, [pc, #236]	; (8006ddc <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8006cee:	4313      	orrs	r3, r2
 8006cf0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d01f      	beq.n	8006d40 <HAL_RCCEx_PeriphCLKConfig+0x724>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d010      	beq.n	8006d2a <HAL_RCCEx_PeriphCLKConfig+0x70e>
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d0c:	2b01      	cmp	r3, #1
 8006d0e:	d00c      	beq.n	8006d2a <HAL_RCCEx_PeriphCLKConfig+0x70e>
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d14:	2b03      	cmp	r3, #3
 8006d16:	d008      	beq.n	8006d2a <HAL_RCCEx_PeriphCLKConfig+0x70e>
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d1c:	2b02      	cmp	r3, #2
 8006d1e:	d004      	beq.n	8006d2a <HAL_RCCEx_PeriphCLKConfig+0x70e>
 8006d20:	f240 1123 	movw	r1, #291	; 0x123
 8006d24:	482e      	ldr	r0, [pc, #184]	; (8006de0 <HAL_RCCEx_PeriphCLKConfig+0x7c4>)
 8006d26:	f7fb ff30 	bl	8002b8a <assert_failed>

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006d2a:	4b2c      	ldr	r3, [pc, #176]	; (8006ddc <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8006d2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d30:	f023 0203 	bic.w	r2, r3, #3
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d38:	4928      	ldr	r1, [pc, #160]	; (8006ddc <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8006d3a:	4313      	orrs	r3, r2
 8006d3c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d01f      	beq.n	8006d8c <HAL_RCCEx_PeriphCLKConfig+0x770>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d010      	beq.n	8006d76 <HAL_RCCEx_PeriphCLKConfig+0x75a>
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006d58:	2b04      	cmp	r3, #4
 8006d5a:	d00c      	beq.n	8006d76 <HAL_RCCEx_PeriphCLKConfig+0x75a>
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006d60:	2b0c      	cmp	r3, #12
 8006d62:	d008      	beq.n	8006d76 <HAL_RCCEx_PeriphCLKConfig+0x75a>
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006d68:	2b08      	cmp	r3, #8
 8006d6a:	d004      	beq.n	8006d76 <HAL_RCCEx_PeriphCLKConfig+0x75a>
 8006d6c:	f240 112d 	movw	r1, #301	; 0x12d
 8006d70:	481b      	ldr	r0, [pc, #108]	; (8006de0 <HAL_RCCEx_PeriphCLKConfig+0x7c4>)
 8006d72:	f7fb ff0a 	bl	8002b8a <assert_failed>

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006d76:	4b19      	ldr	r3, [pc, #100]	; (8006ddc <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8006d78:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d7c:	f023 020c 	bic.w	r2, r3, #12
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006d84:	4915      	ldr	r1, [pc, #84]	; (8006ddc <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8006d86:	4313      	orrs	r3, r2
 8006d88:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	d025      	beq.n	8006de4 <HAL_RCCEx_PeriphCLKConfig+0x7c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	d010      	beq.n	8006dc2 <HAL_RCCEx_PeriphCLKConfig+0x7a6>
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006da4:	2b10      	cmp	r3, #16
 8006da6:	d00c      	beq.n	8006dc2 <HAL_RCCEx_PeriphCLKConfig+0x7a6>
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006dac:	2b30      	cmp	r3, #48	; 0x30
 8006dae:	d008      	beq.n	8006dc2 <HAL_RCCEx_PeriphCLKConfig+0x7a6>
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006db4:	2b20      	cmp	r3, #32
 8006db6:	d004      	beq.n	8006dc2 <HAL_RCCEx_PeriphCLKConfig+0x7a6>
 8006db8:	f240 1137 	movw	r1, #311	; 0x137
 8006dbc:	4808      	ldr	r0, [pc, #32]	; (8006de0 <HAL_RCCEx_PeriphCLKConfig+0x7c4>)
 8006dbe:	f7fb fee4 	bl	8002b8a <assert_failed>

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8006dc2:	4b06      	ldr	r3, [pc, #24]	; (8006ddc <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8006dc4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006dc8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006dd0:	4902      	ldr	r1, [pc, #8]	; (8006ddc <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8006dd2:	4313      	orrs	r3, r2
 8006dd4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8006dd8:	e004      	b.n	8006de4 <HAL_RCCEx_PeriphCLKConfig+0x7c8>
 8006dda:	bf00      	nop
 8006ddc:	40023800 	.word	0x40023800
 8006de0:	080157f0 	.word	0x080157f0
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	d01f      	beq.n	8006e30 <HAL_RCCEx_PeriphCLKConfig+0x814>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	d010      	beq.n	8006e1a <HAL_RCCEx_PeriphCLKConfig+0x7fe>
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006dfc:	2b40      	cmp	r3, #64	; 0x40
 8006dfe:	d00c      	beq.n	8006e1a <HAL_RCCEx_PeriphCLKConfig+0x7fe>
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006e04:	2bc0      	cmp	r3, #192	; 0xc0
 8006e06:	d008      	beq.n	8006e1a <HAL_RCCEx_PeriphCLKConfig+0x7fe>
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006e0c:	2b80      	cmp	r3, #128	; 0x80
 8006e0e:	d004      	beq.n	8006e1a <HAL_RCCEx_PeriphCLKConfig+0x7fe>
 8006e10:	f240 1141 	movw	r1, #321	; 0x141
 8006e14:	48a0      	ldr	r0, [pc, #640]	; (8007098 <HAL_RCCEx_PeriphCLKConfig+0xa7c>)
 8006e16:	f7fb feb8 	bl	8002b8a <assert_failed>

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8006e1a:	4ba0      	ldr	r3, [pc, #640]	; (800709c <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 8006e1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006e20:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006e28:	499c      	ldr	r1, [pc, #624]	; (800709c <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 8006e2a:	4313      	orrs	r3, r2
 8006e2c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	d022      	beq.n	8006e82 <HAL_RCCEx_PeriphCLKConfig+0x866>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	d013      	beq.n	8006e6c <HAL_RCCEx_PeriphCLKConfig+0x850>
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e48:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006e4c:	d00e      	beq.n	8006e6c <HAL_RCCEx_PeriphCLKConfig+0x850>
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e52:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006e56:	d009      	beq.n	8006e6c <HAL_RCCEx_PeriphCLKConfig+0x850>
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e5c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006e60:	d004      	beq.n	8006e6c <HAL_RCCEx_PeriphCLKConfig+0x850>
 8006e62:	f240 114b 	movw	r1, #331	; 0x14b
 8006e66:	488c      	ldr	r0, [pc, #560]	; (8007098 <HAL_RCCEx_PeriphCLKConfig+0xa7c>)
 8006e68:	f7fb fe8f 	bl	8002b8a <assert_failed>

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8006e6c:	4b8b      	ldr	r3, [pc, #556]	; (800709c <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 8006e6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006e72:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e7a:	4988      	ldr	r1, [pc, #544]	; (800709c <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 8006e7c:	4313      	orrs	r3, r2
 8006e7e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d022      	beq.n	8006ed4 <HAL_RCCEx_PeriphCLKConfig+0x8b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d013      	beq.n	8006ebe <HAL_RCCEx_PeriphCLKConfig+0x8a2>
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006e9a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006e9e:	d00e      	beq.n	8006ebe <HAL_RCCEx_PeriphCLKConfig+0x8a2>
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006ea4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006ea8:	d009      	beq.n	8006ebe <HAL_RCCEx_PeriphCLKConfig+0x8a2>
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006eae:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006eb2:	d004      	beq.n	8006ebe <HAL_RCCEx_PeriphCLKConfig+0x8a2>
 8006eb4:	f240 1155 	movw	r1, #341	; 0x155
 8006eb8:	4877      	ldr	r0, [pc, #476]	; (8007098 <HAL_RCCEx_PeriphCLKConfig+0xa7c>)
 8006eba:	f7fb fe66 	bl	8002b8a <assert_failed>

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8006ebe:	4b77      	ldr	r3, [pc, #476]	; (800709c <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 8006ec0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006ec4:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006ecc:	4973      	ldr	r1, [pc, #460]	; (800709c <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 8006ece:	4313      	orrs	r3, r2
 8006ed0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d022      	beq.n	8006f26 <HAL_RCCEx_PeriphCLKConfig+0x90a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d013      	beq.n	8006f10 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006eec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006ef0:	d00e      	beq.n	8006f10 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006ef6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006efa:	d009      	beq.n	8006f10 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006f00:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006f04:	d004      	beq.n	8006f10 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
 8006f06:	f240 115f 	movw	r1, #351	; 0x15f
 8006f0a:	4863      	ldr	r0, [pc, #396]	; (8007098 <HAL_RCCEx_PeriphCLKConfig+0xa7c>)
 8006f0c:	f7fb fe3d 	bl	8002b8a <assert_failed>

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8006f10:	4b62      	ldr	r3, [pc, #392]	; (800709c <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 8006f12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006f16:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006f1e:	495f      	ldr	r1, [pc, #380]	; (800709c <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 8006f20:	4313      	orrs	r3, r2
 8006f22:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d022      	beq.n	8006f78 <HAL_RCCEx_PeriphCLKConfig+0x95c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d013      	beq.n	8006f62 <HAL_RCCEx_PeriphCLKConfig+0x946>
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006f3e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006f42:	d00e      	beq.n	8006f62 <HAL_RCCEx_PeriphCLKConfig+0x946>
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006f48:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8006f4c:	d009      	beq.n	8006f62 <HAL_RCCEx_PeriphCLKConfig+0x946>
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006f52:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006f56:	d004      	beq.n	8006f62 <HAL_RCCEx_PeriphCLKConfig+0x946>
 8006f58:	f240 1169 	movw	r1, #361	; 0x169
 8006f5c:	484e      	ldr	r0, [pc, #312]	; (8007098 <HAL_RCCEx_PeriphCLKConfig+0xa7c>)
 8006f5e:	f7fb fe14 	bl	8002b8a <assert_failed>

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8006f62:	4b4e      	ldr	r3, [pc, #312]	; (800709c <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 8006f64:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006f68:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006f70:	494a      	ldr	r1, [pc, #296]	; (800709c <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 8006f72:	4313      	orrs	r3, r2
 8006f74:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	d018      	beq.n	8006fb6 <HAL_RCCEx_PeriphCLKConfig+0x99a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006f88:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006f8c:	d008      	beq.n	8006fa0 <HAL_RCCEx_PeriphCLKConfig+0x984>
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d004      	beq.n	8006fa0 <HAL_RCCEx_PeriphCLKConfig+0x984>
 8006f96:	f240 1173 	movw	r1, #371	; 0x173
 8006f9a:	483f      	ldr	r0, [pc, #252]	; (8007098 <HAL_RCCEx_PeriphCLKConfig+0xa7c>)
 8006f9c:	f7fb fdf5 	bl	8002b8a <assert_failed>

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8006fa0:	4b3e      	ldr	r3, [pc, #248]	; (800709c <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 8006fa2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006fa6:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006fae:	493b      	ldr	r1, [pc, #236]	; (800709c <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 8006fb0:	4313      	orrs	r3, r2
 8006fb2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d01f      	beq.n	8007002 <HAL_RCCEx_PeriphCLKConfig+0x9e6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006fc6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006fca:	d008      	beq.n	8006fde <HAL_RCCEx_PeriphCLKConfig+0x9c2>
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	d004      	beq.n	8006fde <HAL_RCCEx_PeriphCLKConfig+0x9c2>
 8006fd4:	f240 117d 	movw	r1, #381	; 0x17d
 8006fd8:	482f      	ldr	r0, [pc, #188]	; (8007098 <HAL_RCCEx_PeriphCLKConfig+0xa7c>)
 8006fda:	f7fb fdd6 	bl	8002b8a <assert_failed>

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8006fde:	4b2f      	ldr	r3, [pc, #188]	; (800709c <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 8006fe0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006fe4:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006fec:	492b      	ldr	r1, [pc, #172]	; (800709c <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 8006fee:	4313      	orrs	r3, r2
 8006ff0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006ff8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006ffc:	d101      	bne.n	8007002 <HAL_RCCEx_PeriphCLKConfig+0x9e6>
    {
      pllsaiused = 1;
 8006ffe:	2301      	movs	r3, #1
 8007000:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	f003 0308 	and.w	r3, r3, #8
 800700a:	2b00      	cmp	r3, #0
 800700c:	d001      	beq.n	8007012 <HAL_RCCEx_PeriphCLKConfig+0x9f6>
  {
    pllsaiused = 1;
 800700e:	2301      	movs	r3, #1
 8007010:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800701a:	2b00      	cmp	r3, #0
 800701c:	d022      	beq.n	8007064 <HAL_RCCEx_PeriphCLKConfig+0xa48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007022:	2b00      	cmp	r3, #0
 8007024:	d013      	beq.n	800704e <HAL_RCCEx_PeriphCLKConfig+0xa32>
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800702a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800702e:	d00e      	beq.n	800704e <HAL_RCCEx_PeriphCLKConfig+0xa32>
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007034:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007038:	d009      	beq.n	800704e <HAL_RCCEx_PeriphCLKConfig+0xa32>
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800703e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8007042:	d004      	beq.n	800704e <HAL_RCCEx_PeriphCLKConfig+0xa32>
 8007044:	f240 1195 	movw	r1, #405	; 0x195
 8007048:	4813      	ldr	r0, [pc, #76]	; (8007098 <HAL_RCCEx_PeriphCLKConfig+0xa7c>)
 800704a:	f7fb fd9e 	bl	8002b8a <assert_failed>

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800704e:	4b13      	ldr	r3, [pc, #76]	; (800709c <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 8007050:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007054:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800705c:	490f      	ldr	r1, [pc, #60]	; (800709c <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 800705e:	4313      	orrs	r3, r2
 8007060:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800706c:	2b00      	cmp	r3, #0
 800706e:	d020      	beq.n	80070b2 <HAL_RCCEx_PeriphCLKConfig+0xa96>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007076:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800707a:	d009      	beq.n	8007090 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007082:	2b00      	cmp	r3, #0
 8007084:	d004      	beq.n	8007090 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8007086:	f240 119f 	movw	r1, #415	; 0x19f
 800708a:	4803      	ldr	r0, [pc, #12]	; (8007098 <HAL_RCCEx_PeriphCLKConfig+0xa7c>)
 800708c:	f7fb fd7d 	bl	8002b8a <assert_failed>

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8007090:	4b02      	ldr	r3, [pc, #8]	; (800709c <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 8007092:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007096:	e003      	b.n	80070a0 <HAL_RCCEx_PeriphCLKConfig+0xa84>
 8007098:	080157f0 	.word	0x080157f0
 800709c:	40023800 	.word	0x40023800
 80070a0:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80070aa:	4910      	ldr	r1, [pc, #64]	; (80070ec <HAL_RCCEx_PeriphCLKConfig+0xad0>)
 80070ac:	4313      	orrs	r3, r2
 80070ae:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80070b2:	69fb      	ldr	r3, [r7, #28]
 80070b4:	2b01      	cmp	r3, #1
 80070b6:	d006      	beq.n	80070c6 <HAL_RCCEx_PeriphCLKConfig+0xaaa>
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	f000 8155 	beq.w	8007370 <HAL_RCCEx_PeriphCLKConfig+0xd54>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80070c6:	4b09      	ldr	r3, [pc, #36]	; (80070ec <HAL_RCCEx_PeriphCLKConfig+0xad0>)
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	4a08      	ldr	r2, [pc, #32]	; (80070ec <HAL_RCCEx_PeriphCLKConfig+0xad0>)
 80070cc:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80070d0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80070d2:	f7fc fa53 	bl	800357c <HAL_GetTick>
 80070d6:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80070d8:	e00a      	b.n	80070f0 <HAL_RCCEx_PeriphCLKConfig+0xad4>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80070da:	f7fc fa4f 	bl	800357c <HAL_GetTick>
 80070de:	4602      	mov	r2, r0
 80070e0:	697b      	ldr	r3, [r7, #20]
 80070e2:	1ad3      	subs	r3, r2, r3
 80070e4:	2b64      	cmp	r3, #100	; 0x64
 80070e6:	d903      	bls.n	80070f0 <HAL_RCCEx_PeriphCLKConfig+0xad4>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80070e8:	2303      	movs	r3, #3
 80070ea:	e273      	b.n	80075d4 <HAL_RCCEx_PeriphCLKConfig+0xfb8>
 80070ec:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80070f0:	4b9a      	ldr	r3, [pc, #616]	; (800735c <HAL_RCCEx_PeriphCLKConfig+0xd40>)
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	d1ee      	bne.n	80070da <HAL_RCCEx_PeriphCLKConfig+0xabe>
      }
    }

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	685b      	ldr	r3, [r3, #4]
 8007100:	2b31      	cmp	r3, #49	; 0x31
 8007102:	d904      	bls.n	800710e <HAL_RCCEx_PeriphCLKConfig+0xaf2>
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	685b      	ldr	r3, [r3, #4]
 8007108:	f5b3 7fd8 	cmp.w	r3, #432	; 0x1b0
 800710c:	d904      	bls.n	8007118 <HAL_RCCEx_PeriphCLKConfig+0xafc>
 800710e:	f44f 71ed 	mov.w	r1, #474	; 0x1da
 8007112:	4893      	ldr	r0, [pc, #588]	; (8007360 <HAL_RCCEx_PeriphCLKConfig+0xd44>)
 8007114:	f7fb fd39 	bl	8002b8a <assert_failed>

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	f003 0301 	and.w	r3, r3, #1
 8007120:	2b00      	cmp	r3, #0
 8007122:	d02e      	beq.n	8007182 <HAL_RCCEx_PeriphCLKConfig+0xb66>
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007128:	2b00      	cmp	r3, #0
 800712a:	d12a      	bne.n	8007182 <HAL_RCCEx_PeriphCLKConfig+0xb66>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	689b      	ldr	r3, [r3, #8]
 8007130:	2b01      	cmp	r3, #1
 8007132:	d903      	bls.n	800713c <HAL_RCCEx_PeriphCLKConfig+0xb20>
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	689b      	ldr	r3, [r3, #8]
 8007138:	2b07      	cmp	r3, #7
 800713a:	d904      	bls.n	8007146 <HAL_RCCEx_PeriphCLKConfig+0xb2a>
 800713c:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 8007140:	4887      	ldr	r0, [pc, #540]	; (8007360 <HAL_RCCEx_PeriphCLKConfig+0xd44>)
 8007142:	f7fb fd22 	bl	8002b8a <assert_failed>

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8007146:	4b85      	ldr	r3, [pc, #532]	; (800735c <HAL_RCCEx_PeriphCLKConfig+0xd40>)
 8007148:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800714c:	0c1b      	lsrs	r3, r3, #16
 800714e:	f003 0303 	and.w	r3, r3, #3
 8007152:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8007154:	4b81      	ldr	r3, [pc, #516]	; (800735c <HAL_RCCEx_PeriphCLKConfig+0xd40>)
 8007156:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800715a:	0e1b      	lsrs	r3, r3, #24
 800715c:	f003 030f 	and.w	r3, r3, #15
 8007160:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	685b      	ldr	r3, [r3, #4]
 8007166:	019a      	lsls	r2, r3, #6
 8007168:	693b      	ldr	r3, [r7, #16]
 800716a:	041b      	lsls	r3, r3, #16
 800716c:	431a      	orrs	r2, r3
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	061b      	lsls	r3, r3, #24
 8007172:	431a      	orrs	r2, r3
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	689b      	ldr	r3, [r3, #8]
 8007178:	071b      	lsls	r3, r3, #28
 800717a:	4978      	ldr	r1, [pc, #480]	; (800735c <HAL_RCCEx_PeriphCLKConfig+0xd40>)
 800717c:	4313      	orrs	r3, r2
 800717e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800718a:	2b00      	cmp	r3, #0
 800718c:	d004      	beq.n	8007198 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007192:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007196:	d00a      	beq.n	80071ae <HAL_RCCEx_PeriphCLKConfig+0xb92>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	d048      	beq.n	8007236 <HAL_RCCEx_PeriphCLKConfig+0xc1a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071a8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80071ac:	d143      	bne.n	8007236 <HAL_RCCEx_PeriphCLKConfig+0xc1a>
    {
      /* Check for PLLI2S Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	68db      	ldr	r3, [r3, #12]
 80071b2:	2b01      	cmp	r3, #1
 80071b4:	d903      	bls.n	80071be <HAL_RCCEx_PeriphCLKConfig+0xba2>
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	68db      	ldr	r3, [r3, #12]
 80071ba:	2b0f      	cmp	r3, #15
 80071bc:	d904      	bls.n	80071c8 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 80071be:	f44f 71f8 	mov.w	r1, #496	; 0x1f0
 80071c2:	4867      	ldr	r0, [pc, #412]	; (8007360 <HAL_RCCEx_PeriphCLKConfig+0xd44>)
 80071c4:	f7fb fce1 	bl	8002b8a <assert_failed>
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	d003      	beq.n	80071d8 <HAL_RCCEx_PeriphCLKConfig+0xbbc>
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071d4:	2b20      	cmp	r3, #32
 80071d6:	d904      	bls.n	80071e2 <HAL_RCCEx_PeriphCLKConfig+0xbc6>
 80071d8:	f44f 71f9 	mov.w	r1, #498	; 0x1f2
 80071dc:	4860      	ldr	r0, [pc, #384]	; (8007360 <HAL_RCCEx_PeriphCLKConfig+0xd44>)
 80071de:	f7fb fcd4 	bl	8002b8a <assert_failed>

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80071e2:	4b5e      	ldr	r3, [pc, #376]	; (800735c <HAL_RCCEx_PeriphCLKConfig+0xd40>)
 80071e4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80071e8:	0c1b      	lsrs	r3, r3, #16
 80071ea:	f003 0303 	and.w	r3, r3, #3
 80071ee:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80071f0:	4b5a      	ldr	r3, [pc, #360]	; (800735c <HAL_RCCEx_PeriphCLKConfig+0xd40>)
 80071f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80071f6:	0f1b      	lsrs	r3, r3, #28
 80071f8:	f003 0307 	and.w	r3, r3, #7
 80071fc:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	685b      	ldr	r3, [r3, #4]
 8007202:	019a      	lsls	r2, r3, #6
 8007204:	693b      	ldr	r3, [r7, #16]
 8007206:	041b      	lsls	r3, r3, #16
 8007208:	431a      	orrs	r2, r3
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	68db      	ldr	r3, [r3, #12]
 800720e:	061b      	lsls	r3, r3, #24
 8007210:	431a      	orrs	r2, r3
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	071b      	lsls	r3, r3, #28
 8007216:	4951      	ldr	r1, [pc, #324]	; (800735c <HAL_RCCEx_PeriphCLKConfig+0xd40>)
 8007218:	4313      	orrs	r3, r2
 800721a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800721e:	4b4f      	ldr	r3, [pc, #316]	; (800735c <HAL_RCCEx_PeriphCLKConfig+0xd40>)
 8007220:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007224:	f023 021f 	bic.w	r2, r3, #31
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800722c:	3b01      	subs	r3, #1
 800722e:	494b      	ldr	r1, [pc, #300]	; (800735c <HAL_RCCEx_PeriphCLKConfig+0xd40>)
 8007230:	4313      	orrs	r3, r2
 8007232:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800723e:	2b00      	cmp	r3, #0
 8007240:	d032      	beq.n	80072a8 <HAL_RCCEx_PeriphCLKConfig+0xc8c>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	691b      	ldr	r3, [r3, #16]
 8007246:	2b00      	cmp	r3, #0
 8007248:	d010      	beq.n	800726c <HAL_RCCEx_PeriphCLKConfig+0xc50>
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	691b      	ldr	r3, [r3, #16]
 800724e:	2b01      	cmp	r3, #1
 8007250:	d00c      	beq.n	800726c <HAL_RCCEx_PeriphCLKConfig+0xc50>
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	691b      	ldr	r3, [r3, #16]
 8007256:	2b02      	cmp	r3, #2
 8007258:	d008      	beq.n	800726c <HAL_RCCEx_PeriphCLKConfig+0xc50>
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	691b      	ldr	r3, [r3, #16]
 800725e:	2b03      	cmp	r3, #3
 8007260:	d004      	beq.n	800726c <HAL_RCCEx_PeriphCLKConfig+0xc50>
 8007262:	f240 2105 	movw	r1, #517	; 0x205
 8007266:	483e      	ldr	r0, [pc, #248]	; (8007360 <HAL_RCCEx_PeriphCLKConfig+0xd44>)
 8007268:	f7fb fc8f 	bl	8002b8a <assert_failed>

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800726c:	4b3b      	ldr	r3, [pc, #236]	; (800735c <HAL_RCCEx_PeriphCLKConfig+0xd40>)
 800726e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007272:	0e1b      	lsrs	r3, r3, #24
 8007274:	f003 030f 	and.w	r3, r3, #15
 8007278:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800727a:	4b38      	ldr	r3, [pc, #224]	; (800735c <HAL_RCCEx_PeriphCLKConfig+0xd40>)
 800727c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007280:	0f1b      	lsrs	r3, r3, #28
 8007282:	f003 0307 	and.w	r3, r3, #7
 8007286:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	685b      	ldr	r3, [r3, #4]
 800728c:	019a      	lsls	r2, r3, #6
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	691b      	ldr	r3, [r3, #16]
 8007292:	041b      	lsls	r3, r3, #16
 8007294:	431a      	orrs	r2, r3
 8007296:	693b      	ldr	r3, [r7, #16]
 8007298:	061b      	lsls	r3, r3, #24
 800729a:	431a      	orrs	r2, r3
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	071b      	lsls	r3, r3, #28
 80072a0:	492e      	ldr	r1, [pc, #184]	; (800735c <HAL_RCCEx_PeriphCLKConfig+0xd40>)
 80072a2:	4313      	orrs	r3, r2
 80072a4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	d040      	beq.n	8007336 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    {
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	691b      	ldr	r3, [r3, #16]
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	d010      	beq.n	80072de <HAL_RCCEx_PeriphCLKConfig+0xcc2>
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	691b      	ldr	r3, [r3, #16]
 80072c0:	2b01      	cmp	r3, #1
 80072c2:	d00c      	beq.n	80072de <HAL_RCCEx_PeriphCLKConfig+0xcc2>
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	691b      	ldr	r3, [r3, #16]
 80072c8:	2b02      	cmp	r3, #2
 80072ca:	d008      	beq.n	80072de <HAL_RCCEx_PeriphCLKConfig+0xcc2>
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	691b      	ldr	r3, [r3, #16]
 80072d0:	2b03      	cmp	r3, #3
 80072d2:	d004      	beq.n	80072de <HAL_RCCEx_PeriphCLKConfig+0xcc2>
 80072d4:	f44f 7105 	mov.w	r1, #532	; 0x214
 80072d8:	4821      	ldr	r0, [pc, #132]	; (8007360 <HAL_RCCEx_PeriphCLKConfig+0xd44>)
 80072da:	f7fb fc56 	bl	8002b8a <assert_failed>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	689b      	ldr	r3, [r3, #8]
 80072e2:	2b01      	cmp	r3, #1
 80072e4:	d903      	bls.n	80072ee <HAL_RCCEx_PeriphCLKConfig+0xcd2>
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	689b      	ldr	r3, [r3, #8]
 80072ea:	2b07      	cmp	r3, #7
 80072ec:	d904      	bls.n	80072f8 <HAL_RCCEx_PeriphCLKConfig+0xcdc>
 80072ee:	f240 2115 	movw	r1, #533	; 0x215
 80072f2:	481b      	ldr	r0, [pc, #108]	; (8007360 <HAL_RCCEx_PeriphCLKConfig+0xd44>)
 80072f4:	f7fb fc49 	bl	8002b8a <assert_failed>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	68db      	ldr	r3, [r3, #12]
 80072fc:	2b01      	cmp	r3, #1
 80072fe:	d903      	bls.n	8007308 <HAL_RCCEx_PeriphCLKConfig+0xcec>
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	68db      	ldr	r3, [r3, #12]
 8007304:	2b0f      	cmp	r3, #15
 8007306:	d904      	bls.n	8007312 <HAL_RCCEx_PeriphCLKConfig+0xcf6>
 8007308:	f240 2116 	movw	r1, #534	; 0x216
 800730c:	4814      	ldr	r0, [pc, #80]	; (8007360 <HAL_RCCEx_PeriphCLKConfig+0xd44>)
 800730e:	f7fb fc3c 	bl	8002b8a <assert_failed>

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	685b      	ldr	r3, [r3, #4]
 8007316:	019a      	lsls	r2, r3, #6
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	691b      	ldr	r3, [r3, #16]
 800731c:	041b      	lsls	r3, r3, #16
 800731e:	431a      	orrs	r2, r3
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	68db      	ldr	r3, [r3, #12]
 8007324:	061b      	lsls	r3, r3, #24
 8007326:	431a      	orrs	r2, r3
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	689b      	ldr	r3, [r3, #8]
 800732c:	071b      	lsls	r3, r3, #28
 800732e:	490b      	ldr	r1, [pc, #44]	; (800735c <HAL_RCCEx_PeriphCLKConfig+0xd40>)
 8007330:	4313      	orrs	r3, r2
 8007332:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8007336:	4b09      	ldr	r3, [pc, #36]	; (800735c <HAL_RCCEx_PeriphCLKConfig+0xd40>)
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	4a08      	ldr	r2, [pc, #32]	; (800735c <HAL_RCCEx_PeriphCLKConfig+0xd40>)
 800733c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007340:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007342:	f7fc f91b 	bl	800357c <HAL_GetTick>
 8007346:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007348:	e00c      	b.n	8007364 <HAL_RCCEx_PeriphCLKConfig+0xd48>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800734a:	f7fc f917 	bl	800357c <HAL_GetTick>
 800734e:	4602      	mov	r2, r0
 8007350:	697b      	ldr	r3, [r7, #20]
 8007352:	1ad3      	subs	r3, r2, r3
 8007354:	2b64      	cmp	r3, #100	; 0x64
 8007356:	d905      	bls.n	8007364 <HAL_RCCEx_PeriphCLKConfig+0xd48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007358:	2303      	movs	r3, #3
 800735a:	e13b      	b.n	80075d4 <HAL_RCCEx_PeriphCLKConfig+0xfb8>
 800735c:	40023800 	.word	0x40023800
 8007360:	080157f0 	.word	0x080157f0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007364:	4b9d      	ldr	r3, [pc, #628]	; (80075dc <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800736c:	2b00      	cmp	r3, #0
 800736e:	d0ec      	beq.n	800734a <HAL_RCCEx_PeriphCLKConfig+0xd2e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8007370:	69bb      	ldr	r3, [r7, #24]
 8007372:	2b01      	cmp	r3, #1
 8007374:	f040 812d 	bne.w	80075d2 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8007378:	4b98      	ldr	r3, [pc, #608]	; (80075dc <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	4a97      	ldr	r2, [pc, #604]	; (80075dc <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 800737e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007382:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007384:	f7fc f8fa 	bl	800357c <HAL_GetTick>
 8007388:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800738a:	e008      	b.n	800739e <HAL_RCCEx_PeriphCLKConfig+0xd82>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800738c:	f7fc f8f6 	bl	800357c <HAL_GetTick>
 8007390:	4602      	mov	r2, r0
 8007392:	697b      	ldr	r3, [r7, #20]
 8007394:	1ad3      	subs	r3, r2, r3
 8007396:	2b64      	cmp	r3, #100	; 0x64
 8007398:	d901      	bls.n	800739e <HAL_RCCEx_PeriphCLKConfig+0xd82>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800739a:	2303      	movs	r3, #3
 800739c:	e11a      	b.n	80075d4 <HAL_RCCEx_PeriphCLKConfig+0xfb8>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800739e:	4b8f      	ldr	r3, [pc, #572]	; (80075dc <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80073a6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80073aa:	d0ef      	beq.n	800738c <HAL_RCCEx_PeriphCLKConfig+0xd70>
      }
    }

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	695b      	ldr	r3, [r3, #20]
 80073b0:	2b31      	cmp	r3, #49	; 0x31
 80073b2:	d904      	bls.n	80073be <HAL_RCCEx_PeriphCLKConfig+0xda2>
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	695b      	ldr	r3, [r3, #20]
 80073b8:	f5b3 7fd8 	cmp.w	r3, #432	; 0x1b0
 80073bc:	d904      	bls.n	80073c8 <HAL_RCCEx_PeriphCLKConfig+0xdac>
 80073be:	f44f 7111 	mov.w	r1, #580	; 0x244
 80073c2:	4887      	ldr	r0, [pc, #540]	; (80075e0 <HAL_RCCEx_PeriphCLKConfig+0xfc4>)
 80073c4:	f7fb fbe1 	bl	8002b8a <assert_failed>

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	d003      	beq.n	80073dc <HAL_RCCEx_PeriphCLKConfig+0xdc0>
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80073d8:	2b00      	cmp	r3, #0
 80073da:	d009      	beq.n	80073f0 <HAL_RCCEx_PeriphCLKConfig+0xdd4>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	d048      	beq.n	800747a <HAL_RCCEx_PeriphCLKConfig+0xe5e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	d144      	bne.n	800747a <HAL_RCCEx_PeriphCLKConfig+0xe5e>
    {
      /* check for PLLSAIQ Parameter */
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	699b      	ldr	r3, [r3, #24]
 80073f4:	2b01      	cmp	r3, #1
 80073f6:	d903      	bls.n	8007400 <HAL_RCCEx_PeriphCLKConfig+0xde4>
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	699b      	ldr	r3, [r3, #24]
 80073fc:	2b0f      	cmp	r3, #15
 80073fe:	d904      	bls.n	800740a <HAL_RCCEx_PeriphCLKConfig+0xdee>
 8007400:	f240 214b 	movw	r1, #587	; 0x24b
 8007404:	4876      	ldr	r0, [pc, #472]	; (80075e0 <HAL_RCCEx_PeriphCLKConfig+0xfc4>)
 8007406:	f7fb fbc0 	bl	8002b8a <assert_failed>
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800740e:	2b00      	cmp	r3, #0
 8007410:	d003      	beq.n	800741a <HAL_RCCEx_PeriphCLKConfig+0xdfe>
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007416:	2b20      	cmp	r3, #32
 8007418:	d904      	bls.n	8007424 <HAL_RCCEx_PeriphCLKConfig+0xe08>
 800741a:	f240 214d 	movw	r1, #589	; 0x24d
 800741e:	4870      	ldr	r0, [pc, #448]	; (80075e0 <HAL_RCCEx_PeriphCLKConfig+0xfc4>)
 8007420:	f7fb fbb3 	bl	8002b8a <assert_failed>

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8007424:	4b6d      	ldr	r3, [pc, #436]	; (80075dc <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 8007426:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800742a:	0c1b      	lsrs	r3, r3, #16
 800742c:	f003 0303 	and.w	r3, r3, #3
 8007430:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8007432:	4b6a      	ldr	r3, [pc, #424]	; (80075dc <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 8007434:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007438:	0f1b      	lsrs	r3, r3, #28
 800743a:	f003 0307 	and.w	r3, r3, #7
 800743e:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	695b      	ldr	r3, [r3, #20]
 8007444:	019a      	lsls	r2, r3, #6
 8007446:	693b      	ldr	r3, [r7, #16]
 8007448:	041b      	lsls	r3, r3, #16
 800744a:	431a      	orrs	r2, r3
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	699b      	ldr	r3, [r3, #24]
 8007450:	061b      	lsls	r3, r3, #24
 8007452:	431a      	orrs	r2, r3
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	071b      	lsls	r3, r3, #28
 8007458:	4960      	ldr	r1, [pc, #384]	; (80075dc <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 800745a:	4313      	orrs	r3, r2
 800745c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8007460:	4b5e      	ldr	r3, [pc, #376]	; (80075dc <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 8007462:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007466:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800746e:	3b01      	subs	r3, #1
 8007470:	021b      	lsls	r3, r3, #8
 8007472:	495a      	ldr	r1, [pc, #360]	; (80075dc <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 8007474:	4313      	orrs	r3, r2
 8007476:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007482:	2b00      	cmp	r3, #0
 8007484:	d037      	beq.n	80074f6 <HAL_RCCEx_PeriphCLKConfig+0xeda>
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800748a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800748e:	d132      	bne.n	80074f6 <HAL_RCCEx_PeriphCLKConfig+0xeda>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	6a1b      	ldr	r3, [r3, #32]
 8007494:	2b00      	cmp	r3, #0
 8007496:	d010      	beq.n	80074ba <HAL_RCCEx_PeriphCLKConfig+0xe9e>
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	6a1b      	ldr	r3, [r3, #32]
 800749c:	2b01      	cmp	r3, #1
 800749e:	d00c      	beq.n	80074ba <HAL_RCCEx_PeriphCLKConfig+0xe9e>
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	6a1b      	ldr	r3, [r3, #32]
 80074a4:	2b02      	cmp	r3, #2
 80074a6:	d008      	beq.n	80074ba <HAL_RCCEx_PeriphCLKConfig+0xe9e>
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	6a1b      	ldr	r3, [r3, #32]
 80074ac:	2b03      	cmp	r3, #3
 80074ae:	d004      	beq.n	80074ba <HAL_RCCEx_PeriphCLKConfig+0xe9e>
 80074b0:	f44f 7118 	mov.w	r1, #608	; 0x260
 80074b4:	484a      	ldr	r0, [pc, #296]	; (80075e0 <HAL_RCCEx_PeriphCLKConfig+0xfc4>)
 80074b6:	f7fb fb68 	bl	8002b8a <assert_failed>
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80074ba:	4b48      	ldr	r3, [pc, #288]	; (80075dc <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 80074bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80074c0:	0e1b      	lsrs	r3, r3, #24
 80074c2:	f003 030f 	and.w	r3, r3, #15
 80074c6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80074c8:	4b44      	ldr	r3, [pc, #272]	; (80075dc <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 80074ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80074ce:	0f1b      	lsrs	r3, r3, #28
 80074d0:	f003 0307 	and.w	r3, r3, #7
 80074d4:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	695b      	ldr	r3, [r3, #20]
 80074da:	019a      	lsls	r2, r3, #6
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	6a1b      	ldr	r3, [r3, #32]
 80074e0:	041b      	lsls	r3, r3, #16
 80074e2:	431a      	orrs	r2, r3
 80074e4:	693b      	ldr	r3, [r7, #16]
 80074e6:	061b      	lsls	r3, r3, #24
 80074e8:	431a      	orrs	r2, r3
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	071b      	lsls	r3, r3, #28
 80074ee:	493b      	ldr	r1, [pc, #236]	; (80075dc <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 80074f0:	4313      	orrs	r3, r2
 80074f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	f003 0308 	and.w	r3, r3, #8
 80074fe:	2b00      	cmp	r3, #0
 8007500:	d04d      	beq.n	800759e <HAL_RCCEx_PeriphCLKConfig+0xf82>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	69db      	ldr	r3, [r3, #28]
 8007506:	2b01      	cmp	r3, #1
 8007508:	d903      	bls.n	8007512 <HAL_RCCEx_PeriphCLKConfig+0xef6>
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	69db      	ldr	r3, [r3, #28]
 800750e:	2b07      	cmp	r3, #7
 8007510:	d904      	bls.n	800751c <HAL_RCCEx_PeriphCLKConfig+0xf00>
 8007512:	f240 216f 	movw	r1, #623	; 0x26f
 8007516:	4832      	ldr	r0, [pc, #200]	; (80075e0 <HAL_RCCEx_PeriphCLKConfig+0xfc4>)
 8007518:	f7fb fb37 	bl	8002b8a <assert_failed>
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007520:	2b00      	cmp	r3, #0
 8007522:	d013      	beq.n	800754c <HAL_RCCEx_PeriphCLKConfig+0xf30>
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007528:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800752c:	d00e      	beq.n	800754c <HAL_RCCEx_PeriphCLKConfig+0xf30>
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007532:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007536:	d009      	beq.n	800754c <HAL_RCCEx_PeriphCLKConfig+0xf30>
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800753c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007540:	d004      	beq.n	800754c <HAL_RCCEx_PeriphCLKConfig+0xf30>
 8007542:	f44f 711c 	mov.w	r1, #624	; 0x270
 8007546:	4826      	ldr	r0, [pc, #152]	; (80075e0 <HAL_RCCEx_PeriphCLKConfig+0xfc4>)
 8007548:	f7fb fb1f 	bl	8002b8a <assert_failed>

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800754c:	4b23      	ldr	r3, [pc, #140]	; (80075dc <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 800754e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007552:	0e1b      	lsrs	r3, r3, #24
 8007554:	f003 030f 	and.w	r3, r3, #15
 8007558:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800755a:	4b20      	ldr	r3, [pc, #128]	; (80075dc <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 800755c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007560:	0c1b      	lsrs	r3, r3, #16
 8007562:	f003 0303 	and.w	r3, r3, #3
 8007566:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	695b      	ldr	r3, [r3, #20]
 800756c:	019a      	lsls	r2, r3, #6
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	041b      	lsls	r3, r3, #16
 8007572:	431a      	orrs	r2, r3
 8007574:	693b      	ldr	r3, [r7, #16]
 8007576:	061b      	lsls	r3, r3, #24
 8007578:	431a      	orrs	r2, r3
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	69db      	ldr	r3, [r3, #28]
 800757e:	071b      	lsls	r3, r3, #28
 8007580:	4916      	ldr	r1, [pc, #88]	; (80075dc <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 8007582:	4313      	orrs	r3, r2
 8007584:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8007588:	4b14      	ldr	r3, [pc, #80]	; (80075dc <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 800758a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800758e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007596:	4911      	ldr	r1, [pc, #68]	; (80075dc <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 8007598:	4313      	orrs	r3, r2
 800759a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800759e:	4b0f      	ldr	r3, [pc, #60]	; (80075dc <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	4a0e      	ldr	r2, [pc, #56]	; (80075dc <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 80075a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80075a8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80075aa:	f7fb ffe7 	bl	800357c <HAL_GetTick>
 80075ae:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80075b0:	e008      	b.n	80075c4 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80075b2:	f7fb ffe3 	bl	800357c <HAL_GetTick>
 80075b6:	4602      	mov	r2, r0
 80075b8:	697b      	ldr	r3, [r7, #20]
 80075ba:	1ad3      	subs	r3, r2, r3
 80075bc:	2b64      	cmp	r3, #100	; 0x64
 80075be:	d901      	bls.n	80075c4 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80075c0:	2303      	movs	r3, #3
 80075c2:	e007      	b.n	80075d4 <HAL_RCCEx_PeriphCLKConfig+0xfb8>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80075c4:	4b05      	ldr	r3, [pc, #20]	; (80075dc <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80075cc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80075d0:	d1ef      	bne.n	80075b2 <HAL_RCCEx_PeriphCLKConfig+0xf96>
      }
    }
  }
  return HAL_OK;
 80075d2:	2300      	movs	r3, #0
}
 80075d4:	4618      	mov	r0, r3
 80075d6:	3720      	adds	r7, #32
 80075d8:	46bd      	mov	sp, r7
 80075da:	bd80      	pop	{r7, pc}
 80075dc:	40023800 	.word	0x40023800
 80075e0:	080157f0 	.word	0x080157f0

080075e4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80075e4:	b580      	push	{r7, lr}
 80075e6:	b082      	sub	sp, #8
 80075e8:	af00      	add	r7, sp, #0
 80075ea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	d101      	bne.n	80075f6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80075f2:	2301      	movs	r3, #1
 80075f4:	e0f5      	b.n	80077e2 <HAL_TIM_Base_Init+0x1fe>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	4a7c      	ldr	r2, [pc, #496]	; (80077ec <HAL_TIM_Base_Init+0x208>)
 80075fc:	4293      	cmp	r3, r2
 80075fe:	d045      	beq.n	800768c <HAL_TIM_Base_Init+0xa8>
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007608:	d040      	beq.n	800768c <HAL_TIM_Base_Init+0xa8>
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	4a78      	ldr	r2, [pc, #480]	; (80077f0 <HAL_TIM_Base_Init+0x20c>)
 8007610:	4293      	cmp	r3, r2
 8007612:	d03b      	beq.n	800768c <HAL_TIM_Base_Init+0xa8>
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	4a76      	ldr	r2, [pc, #472]	; (80077f4 <HAL_TIM_Base_Init+0x210>)
 800761a:	4293      	cmp	r3, r2
 800761c:	d036      	beq.n	800768c <HAL_TIM_Base_Init+0xa8>
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	4a75      	ldr	r2, [pc, #468]	; (80077f8 <HAL_TIM_Base_Init+0x214>)
 8007624:	4293      	cmp	r3, r2
 8007626:	d031      	beq.n	800768c <HAL_TIM_Base_Init+0xa8>
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	4a73      	ldr	r2, [pc, #460]	; (80077fc <HAL_TIM_Base_Init+0x218>)
 800762e:	4293      	cmp	r3, r2
 8007630:	d02c      	beq.n	800768c <HAL_TIM_Base_Init+0xa8>
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	4a72      	ldr	r2, [pc, #456]	; (8007800 <HAL_TIM_Base_Init+0x21c>)
 8007638:	4293      	cmp	r3, r2
 800763a:	d027      	beq.n	800768c <HAL_TIM_Base_Init+0xa8>
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	4a70      	ldr	r2, [pc, #448]	; (8007804 <HAL_TIM_Base_Init+0x220>)
 8007642:	4293      	cmp	r3, r2
 8007644:	d022      	beq.n	800768c <HAL_TIM_Base_Init+0xa8>
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	4a6f      	ldr	r2, [pc, #444]	; (8007808 <HAL_TIM_Base_Init+0x224>)
 800764c:	4293      	cmp	r3, r2
 800764e:	d01d      	beq.n	800768c <HAL_TIM_Base_Init+0xa8>
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	4a6d      	ldr	r2, [pc, #436]	; (800780c <HAL_TIM_Base_Init+0x228>)
 8007656:	4293      	cmp	r3, r2
 8007658:	d018      	beq.n	800768c <HAL_TIM_Base_Init+0xa8>
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	4a6c      	ldr	r2, [pc, #432]	; (8007810 <HAL_TIM_Base_Init+0x22c>)
 8007660:	4293      	cmp	r3, r2
 8007662:	d013      	beq.n	800768c <HAL_TIM_Base_Init+0xa8>
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	4a6a      	ldr	r2, [pc, #424]	; (8007814 <HAL_TIM_Base_Init+0x230>)
 800766a:	4293      	cmp	r3, r2
 800766c:	d00e      	beq.n	800768c <HAL_TIM_Base_Init+0xa8>
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	4a69      	ldr	r2, [pc, #420]	; (8007818 <HAL_TIM_Base_Init+0x234>)
 8007674:	4293      	cmp	r3, r2
 8007676:	d009      	beq.n	800768c <HAL_TIM_Base_Init+0xa8>
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	4a67      	ldr	r2, [pc, #412]	; (800781c <HAL_TIM_Base_Init+0x238>)
 800767e:	4293      	cmp	r3, r2
 8007680:	d004      	beq.n	800768c <HAL_TIM_Base_Init+0xa8>
 8007682:	f44f 718b 	mov.w	r1, #278	; 0x116
 8007686:	4866      	ldr	r0, [pc, #408]	; (8007820 <HAL_TIM_Base_Init+0x23c>)
 8007688:	f7fb fa7f 	bl	8002b8a <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	689b      	ldr	r3, [r3, #8]
 8007690:	2b00      	cmp	r3, #0
 8007692:	d014      	beq.n	80076be <HAL_TIM_Base_Init+0xda>
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	689b      	ldr	r3, [r3, #8]
 8007698:	2b10      	cmp	r3, #16
 800769a:	d010      	beq.n	80076be <HAL_TIM_Base_Init+0xda>
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	689b      	ldr	r3, [r3, #8]
 80076a0:	2b20      	cmp	r3, #32
 80076a2:	d00c      	beq.n	80076be <HAL_TIM_Base_Init+0xda>
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	689b      	ldr	r3, [r3, #8]
 80076a8:	2b40      	cmp	r3, #64	; 0x40
 80076aa:	d008      	beq.n	80076be <HAL_TIM_Base_Init+0xda>
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	689b      	ldr	r3, [r3, #8]
 80076b0:	2b60      	cmp	r3, #96	; 0x60
 80076b2:	d004      	beq.n	80076be <HAL_TIM_Base_Init+0xda>
 80076b4:	f240 1117 	movw	r1, #279	; 0x117
 80076b8:	4859      	ldr	r0, [pc, #356]	; (8007820 <HAL_TIM_Base_Init+0x23c>)
 80076ba:	f7fb fa66 	bl	8002b8a <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	691b      	ldr	r3, [r3, #16]
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	d00e      	beq.n	80076e4 <HAL_TIM_Base_Init+0x100>
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	691b      	ldr	r3, [r3, #16]
 80076ca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80076ce:	d009      	beq.n	80076e4 <HAL_TIM_Base_Init+0x100>
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	691b      	ldr	r3, [r3, #16]
 80076d4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80076d8:	d004      	beq.n	80076e4 <HAL_TIM_Base_Init+0x100>
 80076da:	f44f 718c 	mov.w	r1, #280	; 0x118
 80076de:	4850      	ldr	r0, [pc, #320]	; (8007820 <HAL_TIM_Base_Init+0x23c>)
 80076e0:	f7fb fa53 	bl	8002b8a <assert_failed>
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80076ec:	d004      	beq.n	80076f8 <HAL_TIM_Base_Init+0x114>
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	4a41      	ldr	r2, [pc, #260]	; (80077f8 <HAL_TIM_Base_Init+0x214>)
 80076f4:	4293      	cmp	r3, r2
 80076f6:	d107      	bne.n	8007708 <HAL_TIM_Base_Init+0x124>
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	68db      	ldr	r3, [r3, #12]
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	bf14      	ite	ne
 8007700:	2301      	movne	r3, #1
 8007702:	2300      	moveq	r3, #0
 8007704:	b2db      	uxtb	r3, r3
 8007706:	e00e      	b.n	8007726 <HAL_TIM_Base_Init+0x142>
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	68db      	ldr	r3, [r3, #12]
 800770c:	2b00      	cmp	r3, #0
 800770e:	d006      	beq.n	800771e <HAL_TIM_Base_Init+0x13a>
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	68db      	ldr	r3, [r3, #12]
 8007714:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007718:	d201      	bcs.n	800771e <HAL_TIM_Base_Init+0x13a>
 800771a:	2301      	movs	r3, #1
 800771c:	e000      	b.n	8007720 <HAL_TIM_Base_Init+0x13c>
 800771e:	2300      	movs	r3, #0
 8007720:	f003 0301 	and.w	r3, r3, #1
 8007724:	b2db      	uxtb	r3, r3
 8007726:	2b00      	cmp	r3, #0
 8007728:	d104      	bne.n	8007734 <HAL_TIM_Base_Init+0x150>
 800772a:	f240 1119 	movw	r1, #281	; 0x119
 800772e:	483c      	ldr	r0, [pc, #240]	; (8007820 <HAL_TIM_Base_Init+0x23c>)
 8007730:	f7fb fa2b 	bl	8002b8a <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	699b      	ldr	r3, [r3, #24]
 8007738:	2b00      	cmp	r3, #0
 800773a:	d008      	beq.n	800774e <HAL_TIM_Base_Init+0x16a>
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	699b      	ldr	r3, [r3, #24]
 8007740:	2b80      	cmp	r3, #128	; 0x80
 8007742:	d004      	beq.n	800774e <HAL_TIM_Base_Init+0x16a>
 8007744:	f44f 718d 	mov.w	r1, #282	; 0x11a
 8007748:	4835      	ldr	r0, [pc, #212]	; (8007820 <HAL_TIM_Base_Init+0x23c>)
 800774a:	f7fb fa1e 	bl	8002b8a <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007754:	b2db      	uxtb	r3, r3
 8007756:	2b00      	cmp	r3, #0
 8007758:	d106      	bne.n	8007768 <HAL_TIM_Base_Init+0x184>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	2200      	movs	r2, #0
 800775e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007762:	6878      	ldr	r0, [r7, #4]
 8007764:	f7fb fd76 	bl	8003254 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	2202      	movs	r2, #2
 800776c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	681a      	ldr	r2, [r3, #0]
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	3304      	adds	r3, #4
 8007778:	4619      	mov	r1, r3
 800777a:	4610      	mov	r0, r2
 800777c:	f001 fa52 	bl	8008c24 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	2201      	movs	r2, #1
 8007784:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	2201      	movs	r2, #1
 800778c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	2201      	movs	r2, #1
 8007794:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	2201      	movs	r2, #1
 800779c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	2201      	movs	r2, #1
 80077a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	2201      	movs	r2, #1
 80077ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	2201      	movs	r2, #1
 80077b4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	2201      	movs	r2, #1
 80077bc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	2201      	movs	r2, #1
 80077c4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	2201      	movs	r2, #1
 80077cc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	2201      	movs	r2, #1
 80077d4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	2201      	movs	r2, #1
 80077dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80077e0:	2300      	movs	r3, #0
}
 80077e2:	4618      	mov	r0, r3
 80077e4:	3708      	adds	r7, #8
 80077e6:	46bd      	mov	sp, r7
 80077e8:	bd80      	pop	{r7, pc}
 80077ea:	bf00      	nop
 80077ec:	40010000 	.word	0x40010000
 80077f0:	40000400 	.word	0x40000400
 80077f4:	40000800 	.word	0x40000800
 80077f8:	40000c00 	.word	0x40000c00
 80077fc:	40001000 	.word	0x40001000
 8007800:	40001400 	.word	0x40001400
 8007804:	40010400 	.word	0x40010400
 8007808:	40014000 	.word	0x40014000
 800780c:	40014400 	.word	0x40014400
 8007810:	40014800 	.word	0x40014800
 8007814:	40001800 	.word	0x40001800
 8007818:	40001c00 	.word	0x40001c00
 800781c:	40002000 	.word	0x40002000
 8007820:	0801582c 	.word	0x0801582c

08007824 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007824:	b580      	push	{r7, lr}
 8007826:	b082      	sub	sp, #8
 8007828:	af00      	add	r7, sp, #0
 800782a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	2b00      	cmp	r3, #0
 8007830:	d101      	bne.n	8007836 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007832:	2301      	movs	r3, #1
 8007834:	e0f5      	b.n	8007a22 <HAL_TIM_PWM_Init+0x1fe>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	4a7c      	ldr	r2, [pc, #496]	; (8007a2c <HAL_TIM_PWM_Init+0x208>)
 800783c:	4293      	cmp	r3, r2
 800783e:	d045      	beq.n	80078cc <HAL_TIM_PWM_Init+0xa8>
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007848:	d040      	beq.n	80078cc <HAL_TIM_PWM_Init+0xa8>
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	4a78      	ldr	r2, [pc, #480]	; (8007a30 <HAL_TIM_PWM_Init+0x20c>)
 8007850:	4293      	cmp	r3, r2
 8007852:	d03b      	beq.n	80078cc <HAL_TIM_PWM_Init+0xa8>
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	4a76      	ldr	r2, [pc, #472]	; (8007a34 <HAL_TIM_PWM_Init+0x210>)
 800785a:	4293      	cmp	r3, r2
 800785c:	d036      	beq.n	80078cc <HAL_TIM_PWM_Init+0xa8>
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	4a75      	ldr	r2, [pc, #468]	; (8007a38 <HAL_TIM_PWM_Init+0x214>)
 8007864:	4293      	cmp	r3, r2
 8007866:	d031      	beq.n	80078cc <HAL_TIM_PWM_Init+0xa8>
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	4a73      	ldr	r2, [pc, #460]	; (8007a3c <HAL_TIM_PWM_Init+0x218>)
 800786e:	4293      	cmp	r3, r2
 8007870:	d02c      	beq.n	80078cc <HAL_TIM_PWM_Init+0xa8>
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	4a72      	ldr	r2, [pc, #456]	; (8007a40 <HAL_TIM_PWM_Init+0x21c>)
 8007878:	4293      	cmp	r3, r2
 800787a:	d027      	beq.n	80078cc <HAL_TIM_PWM_Init+0xa8>
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	4a70      	ldr	r2, [pc, #448]	; (8007a44 <HAL_TIM_PWM_Init+0x220>)
 8007882:	4293      	cmp	r3, r2
 8007884:	d022      	beq.n	80078cc <HAL_TIM_PWM_Init+0xa8>
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	4a6f      	ldr	r2, [pc, #444]	; (8007a48 <HAL_TIM_PWM_Init+0x224>)
 800788c:	4293      	cmp	r3, r2
 800788e:	d01d      	beq.n	80078cc <HAL_TIM_PWM_Init+0xa8>
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	4a6d      	ldr	r2, [pc, #436]	; (8007a4c <HAL_TIM_PWM_Init+0x228>)
 8007896:	4293      	cmp	r3, r2
 8007898:	d018      	beq.n	80078cc <HAL_TIM_PWM_Init+0xa8>
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	4a6c      	ldr	r2, [pc, #432]	; (8007a50 <HAL_TIM_PWM_Init+0x22c>)
 80078a0:	4293      	cmp	r3, r2
 80078a2:	d013      	beq.n	80078cc <HAL_TIM_PWM_Init+0xa8>
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	4a6a      	ldr	r2, [pc, #424]	; (8007a54 <HAL_TIM_PWM_Init+0x230>)
 80078aa:	4293      	cmp	r3, r2
 80078ac:	d00e      	beq.n	80078cc <HAL_TIM_PWM_Init+0xa8>
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	4a69      	ldr	r2, [pc, #420]	; (8007a58 <HAL_TIM_PWM_Init+0x234>)
 80078b4:	4293      	cmp	r3, r2
 80078b6:	d009      	beq.n	80078cc <HAL_TIM_PWM_Init+0xa8>
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	4a67      	ldr	r2, [pc, #412]	; (8007a5c <HAL_TIM_PWM_Init+0x238>)
 80078be:	4293      	cmp	r3, r2
 80078c0:	d004      	beq.n	80078cc <HAL_TIM_PWM_Init+0xa8>
 80078c2:	f240 5133 	movw	r1, #1331	; 0x533
 80078c6:	4866      	ldr	r0, [pc, #408]	; (8007a60 <HAL_TIM_PWM_Init+0x23c>)
 80078c8:	f7fb f95f 	bl	8002b8a <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	689b      	ldr	r3, [r3, #8]
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	d014      	beq.n	80078fe <HAL_TIM_PWM_Init+0xda>
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	689b      	ldr	r3, [r3, #8]
 80078d8:	2b10      	cmp	r3, #16
 80078da:	d010      	beq.n	80078fe <HAL_TIM_PWM_Init+0xda>
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	689b      	ldr	r3, [r3, #8]
 80078e0:	2b20      	cmp	r3, #32
 80078e2:	d00c      	beq.n	80078fe <HAL_TIM_PWM_Init+0xda>
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	689b      	ldr	r3, [r3, #8]
 80078e8:	2b40      	cmp	r3, #64	; 0x40
 80078ea:	d008      	beq.n	80078fe <HAL_TIM_PWM_Init+0xda>
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	689b      	ldr	r3, [r3, #8]
 80078f0:	2b60      	cmp	r3, #96	; 0x60
 80078f2:	d004      	beq.n	80078fe <HAL_TIM_PWM_Init+0xda>
 80078f4:	f240 5134 	movw	r1, #1332	; 0x534
 80078f8:	4859      	ldr	r0, [pc, #356]	; (8007a60 <HAL_TIM_PWM_Init+0x23c>)
 80078fa:	f7fb f946 	bl	8002b8a <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	691b      	ldr	r3, [r3, #16]
 8007902:	2b00      	cmp	r3, #0
 8007904:	d00e      	beq.n	8007924 <HAL_TIM_PWM_Init+0x100>
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	691b      	ldr	r3, [r3, #16]
 800790a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800790e:	d009      	beq.n	8007924 <HAL_TIM_PWM_Init+0x100>
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	691b      	ldr	r3, [r3, #16]
 8007914:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007918:	d004      	beq.n	8007924 <HAL_TIM_PWM_Init+0x100>
 800791a:	f240 5135 	movw	r1, #1333	; 0x535
 800791e:	4850      	ldr	r0, [pc, #320]	; (8007a60 <HAL_TIM_PWM_Init+0x23c>)
 8007920:	f7fb f933 	bl	8002b8a <assert_failed>
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800792c:	d004      	beq.n	8007938 <HAL_TIM_PWM_Init+0x114>
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	4a41      	ldr	r2, [pc, #260]	; (8007a38 <HAL_TIM_PWM_Init+0x214>)
 8007934:	4293      	cmp	r3, r2
 8007936:	d107      	bne.n	8007948 <HAL_TIM_PWM_Init+0x124>
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	68db      	ldr	r3, [r3, #12]
 800793c:	2b00      	cmp	r3, #0
 800793e:	bf14      	ite	ne
 8007940:	2301      	movne	r3, #1
 8007942:	2300      	moveq	r3, #0
 8007944:	b2db      	uxtb	r3, r3
 8007946:	e00e      	b.n	8007966 <HAL_TIM_PWM_Init+0x142>
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	68db      	ldr	r3, [r3, #12]
 800794c:	2b00      	cmp	r3, #0
 800794e:	d006      	beq.n	800795e <HAL_TIM_PWM_Init+0x13a>
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	68db      	ldr	r3, [r3, #12]
 8007954:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007958:	d201      	bcs.n	800795e <HAL_TIM_PWM_Init+0x13a>
 800795a:	2301      	movs	r3, #1
 800795c:	e000      	b.n	8007960 <HAL_TIM_PWM_Init+0x13c>
 800795e:	2300      	movs	r3, #0
 8007960:	f003 0301 	and.w	r3, r3, #1
 8007964:	b2db      	uxtb	r3, r3
 8007966:	2b00      	cmp	r3, #0
 8007968:	d104      	bne.n	8007974 <HAL_TIM_PWM_Init+0x150>
 800796a:	f240 5136 	movw	r1, #1334	; 0x536
 800796e:	483c      	ldr	r0, [pc, #240]	; (8007a60 <HAL_TIM_PWM_Init+0x23c>)
 8007970:	f7fb f90b 	bl	8002b8a <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	699b      	ldr	r3, [r3, #24]
 8007978:	2b00      	cmp	r3, #0
 800797a:	d008      	beq.n	800798e <HAL_TIM_PWM_Init+0x16a>
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	699b      	ldr	r3, [r3, #24]
 8007980:	2b80      	cmp	r3, #128	; 0x80
 8007982:	d004      	beq.n	800798e <HAL_TIM_PWM_Init+0x16a>
 8007984:	f240 5137 	movw	r1, #1335	; 0x537
 8007988:	4835      	ldr	r0, [pc, #212]	; (8007a60 <HAL_TIM_PWM_Init+0x23c>)
 800798a:	f7fb f8fe 	bl	8002b8a <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007994:	b2db      	uxtb	r3, r3
 8007996:	2b00      	cmp	r3, #0
 8007998:	d106      	bne.n	80079a8 <HAL_TIM_PWM_Init+0x184>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	2200      	movs	r2, #0
 800799e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80079a2:	6878      	ldr	r0, [r7, #4]
 80079a4:	f000 f85e 	bl	8007a64 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	2202      	movs	r2, #2
 80079ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	681a      	ldr	r2, [r3, #0]
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	3304      	adds	r3, #4
 80079b8:	4619      	mov	r1, r3
 80079ba:	4610      	mov	r0, r2
 80079bc:	f001 f932 	bl	8008c24 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	2201      	movs	r2, #1
 80079c4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	2201      	movs	r2, #1
 80079cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	2201      	movs	r2, #1
 80079d4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	2201      	movs	r2, #1
 80079dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	2201      	movs	r2, #1
 80079e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	2201      	movs	r2, #1
 80079ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	2201      	movs	r2, #1
 80079f4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	2201      	movs	r2, #1
 80079fc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	2201      	movs	r2, #1
 8007a04:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	2201      	movs	r2, #1
 8007a0c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	2201      	movs	r2, #1
 8007a14:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	2201      	movs	r2, #1
 8007a1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007a20:	2300      	movs	r3, #0
}
 8007a22:	4618      	mov	r0, r3
 8007a24:	3708      	adds	r7, #8
 8007a26:	46bd      	mov	sp, r7
 8007a28:	bd80      	pop	{r7, pc}
 8007a2a:	bf00      	nop
 8007a2c:	40010000 	.word	0x40010000
 8007a30:	40000400 	.word	0x40000400
 8007a34:	40000800 	.word	0x40000800
 8007a38:	40000c00 	.word	0x40000c00
 8007a3c:	40001000 	.word	0x40001000
 8007a40:	40001400 	.word	0x40001400
 8007a44:	40010400 	.word	0x40010400
 8007a48:	40014000 	.word	0x40014000
 8007a4c:	40014400 	.word	0x40014400
 8007a50:	40014800 	.word	0x40014800
 8007a54:	40001800 	.word	0x40001800
 8007a58:	40001c00 	.word	0x40001c00
 8007a5c:	40002000 	.word	0x40002000
 8007a60:	0801582c 	.word	0x0801582c

08007a64 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8007a64:	b480      	push	{r7}
 8007a66:	b083      	sub	sp, #12
 8007a68:	af00      	add	r7, sp, #0
 8007a6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8007a6c:	bf00      	nop
 8007a6e:	370c      	adds	r7, #12
 8007a70:	46bd      	mov	sp, r7
 8007a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a76:	4770      	bx	lr

08007a78 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007a78:	b580      	push	{r7, lr}
 8007a7a:	b084      	sub	sp, #16
 8007a7c:	af00      	add	r7, sp, #0
 8007a7e:	6078      	str	r0, [r7, #4]
 8007a80:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	4a89      	ldr	r2, [pc, #548]	; (8007cac <HAL_TIM_PWM_Start+0x234>)
 8007a88:	4293      	cmp	r3, r2
 8007a8a:	d117      	bne.n	8007abc <HAL_TIM_PWM_Start+0x44>
 8007a8c:	683b      	ldr	r3, [r7, #0]
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	f000 80ae 	beq.w	8007bf0 <HAL_TIM_PWM_Start+0x178>
 8007a94:	683b      	ldr	r3, [r7, #0]
 8007a96:	2b04      	cmp	r3, #4
 8007a98:	f000 80aa 	beq.w	8007bf0 <HAL_TIM_PWM_Start+0x178>
 8007a9c:	683b      	ldr	r3, [r7, #0]
 8007a9e:	2b08      	cmp	r3, #8
 8007aa0:	f000 80a6 	beq.w	8007bf0 <HAL_TIM_PWM_Start+0x178>
 8007aa4:	683b      	ldr	r3, [r7, #0]
 8007aa6:	2b0c      	cmp	r3, #12
 8007aa8:	f000 80a2 	beq.w	8007bf0 <HAL_TIM_PWM_Start+0x178>
 8007aac:	683b      	ldr	r3, [r7, #0]
 8007aae:	2b10      	cmp	r3, #16
 8007ab0:	f000 809e 	beq.w	8007bf0 <HAL_TIM_PWM_Start+0x178>
 8007ab4:	683b      	ldr	r3, [r7, #0]
 8007ab6:	2b14      	cmp	r3, #20
 8007ab8:	f000 809a 	beq.w	8007bf0 <HAL_TIM_PWM_Start+0x178>
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007ac4:	d10f      	bne.n	8007ae6 <HAL_TIM_PWM_Start+0x6e>
 8007ac6:	683b      	ldr	r3, [r7, #0]
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	f000 8091 	beq.w	8007bf0 <HAL_TIM_PWM_Start+0x178>
 8007ace:	683b      	ldr	r3, [r7, #0]
 8007ad0:	2b04      	cmp	r3, #4
 8007ad2:	f000 808d 	beq.w	8007bf0 <HAL_TIM_PWM_Start+0x178>
 8007ad6:	683b      	ldr	r3, [r7, #0]
 8007ad8:	2b08      	cmp	r3, #8
 8007ada:	f000 8089 	beq.w	8007bf0 <HAL_TIM_PWM_Start+0x178>
 8007ade:	683b      	ldr	r3, [r7, #0]
 8007ae0:	2b0c      	cmp	r3, #12
 8007ae2:	f000 8085 	beq.w	8007bf0 <HAL_TIM_PWM_Start+0x178>
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	4a71      	ldr	r2, [pc, #452]	; (8007cb0 <HAL_TIM_PWM_Start+0x238>)
 8007aec:	4293      	cmp	r3, r2
 8007aee:	d10b      	bne.n	8007b08 <HAL_TIM_PWM_Start+0x90>
 8007af0:	683b      	ldr	r3, [r7, #0]
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	d07c      	beq.n	8007bf0 <HAL_TIM_PWM_Start+0x178>
 8007af6:	683b      	ldr	r3, [r7, #0]
 8007af8:	2b04      	cmp	r3, #4
 8007afa:	d079      	beq.n	8007bf0 <HAL_TIM_PWM_Start+0x178>
 8007afc:	683b      	ldr	r3, [r7, #0]
 8007afe:	2b08      	cmp	r3, #8
 8007b00:	d076      	beq.n	8007bf0 <HAL_TIM_PWM_Start+0x178>
 8007b02:	683b      	ldr	r3, [r7, #0]
 8007b04:	2b0c      	cmp	r3, #12
 8007b06:	d073      	beq.n	8007bf0 <HAL_TIM_PWM_Start+0x178>
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	4a69      	ldr	r2, [pc, #420]	; (8007cb4 <HAL_TIM_PWM_Start+0x23c>)
 8007b0e:	4293      	cmp	r3, r2
 8007b10:	d10b      	bne.n	8007b2a <HAL_TIM_PWM_Start+0xb2>
 8007b12:	683b      	ldr	r3, [r7, #0]
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	d06b      	beq.n	8007bf0 <HAL_TIM_PWM_Start+0x178>
 8007b18:	683b      	ldr	r3, [r7, #0]
 8007b1a:	2b04      	cmp	r3, #4
 8007b1c:	d068      	beq.n	8007bf0 <HAL_TIM_PWM_Start+0x178>
 8007b1e:	683b      	ldr	r3, [r7, #0]
 8007b20:	2b08      	cmp	r3, #8
 8007b22:	d065      	beq.n	8007bf0 <HAL_TIM_PWM_Start+0x178>
 8007b24:	683b      	ldr	r3, [r7, #0]
 8007b26:	2b0c      	cmp	r3, #12
 8007b28:	d062      	beq.n	8007bf0 <HAL_TIM_PWM_Start+0x178>
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	4a62      	ldr	r2, [pc, #392]	; (8007cb8 <HAL_TIM_PWM_Start+0x240>)
 8007b30:	4293      	cmp	r3, r2
 8007b32:	d10b      	bne.n	8007b4c <HAL_TIM_PWM_Start+0xd4>
 8007b34:	683b      	ldr	r3, [r7, #0]
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	d05a      	beq.n	8007bf0 <HAL_TIM_PWM_Start+0x178>
 8007b3a:	683b      	ldr	r3, [r7, #0]
 8007b3c:	2b04      	cmp	r3, #4
 8007b3e:	d057      	beq.n	8007bf0 <HAL_TIM_PWM_Start+0x178>
 8007b40:	683b      	ldr	r3, [r7, #0]
 8007b42:	2b08      	cmp	r3, #8
 8007b44:	d054      	beq.n	8007bf0 <HAL_TIM_PWM_Start+0x178>
 8007b46:	683b      	ldr	r3, [r7, #0]
 8007b48:	2b0c      	cmp	r3, #12
 8007b4a:	d051      	beq.n	8007bf0 <HAL_TIM_PWM_Start+0x178>
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	4a5a      	ldr	r2, [pc, #360]	; (8007cbc <HAL_TIM_PWM_Start+0x244>)
 8007b52:	4293      	cmp	r3, r2
 8007b54:	d111      	bne.n	8007b7a <HAL_TIM_PWM_Start+0x102>
 8007b56:	683b      	ldr	r3, [r7, #0]
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	d049      	beq.n	8007bf0 <HAL_TIM_PWM_Start+0x178>
 8007b5c:	683b      	ldr	r3, [r7, #0]
 8007b5e:	2b04      	cmp	r3, #4
 8007b60:	d046      	beq.n	8007bf0 <HAL_TIM_PWM_Start+0x178>
 8007b62:	683b      	ldr	r3, [r7, #0]
 8007b64:	2b08      	cmp	r3, #8
 8007b66:	d043      	beq.n	8007bf0 <HAL_TIM_PWM_Start+0x178>
 8007b68:	683b      	ldr	r3, [r7, #0]
 8007b6a:	2b0c      	cmp	r3, #12
 8007b6c:	d040      	beq.n	8007bf0 <HAL_TIM_PWM_Start+0x178>
 8007b6e:	683b      	ldr	r3, [r7, #0]
 8007b70:	2b10      	cmp	r3, #16
 8007b72:	d03d      	beq.n	8007bf0 <HAL_TIM_PWM_Start+0x178>
 8007b74:	683b      	ldr	r3, [r7, #0]
 8007b76:	2b14      	cmp	r3, #20
 8007b78:	d03a      	beq.n	8007bf0 <HAL_TIM_PWM_Start+0x178>
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	4a50      	ldr	r2, [pc, #320]	; (8007cc0 <HAL_TIM_PWM_Start+0x248>)
 8007b80:	4293      	cmp	r3, r2
 8007b82:	d105      	bne.n	8007b90 <HAL_TIM_PWM_Start+0x118>
 8007b84:	683b      	ldr	r3, [r7, #0]
 8007b86:	2b00      	cmp	r3, #0
 8007b88:	d032      	beq.n	8007bf0 <HAL_TIM_PWM_Start+0x178>
 8007b8a:	683b      	ldr	r3, [r7, #0]
 8007b8c:	2b04      	cmp	r3, #4
 8007b8e:	d02f      	beq.n	8007bf0 <HAL_TIM_PWM_Start+0x178>
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	4a4b      	ldr	r2, [pc, #300]	; (8007cc4 <HAL_TIM_PWM_Start+0x24c>)
 8007b96:	4293      	cmp	r3, r2
 8007b98:	d102      	bne.n	8007ba0 <HAL_TIM_PWM_Start+0x128>
 8007b9a:	683b      	ldr	r3, [r7, #0]
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	d027      	beq.n	8007bf0 <HAL_TIM_PWM_Start+0x178>
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	4a48      	ldr	r2, [pc, #288]	; (8007cc8 <HAL_TIM_PWM_Start+0x250>)
 8007ba6:	4293      	cmp	r3, r2
 8007ba8:	d102      	bne.n	8007bb0 <HAL_TIM_PWM_Start+0x138>
 8007baa:	683b      	ldr	r3, [r7, #0]
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	d01f      	beq.n	8007bf0 <HAL_TIM_PWM_Start+0x178>
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	4a45      	ldr	r2, [pc, #276]	; (8007ccc <HAL_TIM_PWM_Start+0x254>)
 8007bb6:	4293      	cmp	r3, r2
 8007bb8:	d105      	bne.n	8007bc6 <HAL_TIM_PWM_Start+0x14e>
 8007bba:	683b      	ldr	r3, [r7, #0]
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	d017      	beq.n	8007bf0 <HAL_TIM_PWM_Start+0x178>
 8007bc0:	683b      	ldr	r3, [r7, #0]
 8007bc2:	2b04      	cmp	r3, #4
 8007bc4:	d014      	beq.n	8007bf0 <HAL_TIM_PWM_Start+0x178>
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	4a41      	ldr	r2, [pc, #260]	; (8007cd0 <HAL_TIM_PWM_Start+0x258>)
 8007bcc:	4293      	cmp	r3, r2
 8007bce:	d102      	bne.n	8007bd6 <HAL_TIM_PWM_Start+0x15e>
 8007bd0:	683b      	ldr	r3, [r7, #0]
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	d00c      	beq.n	8007bf0 <HAL_TIM_PWM_Start+0x178>
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	4a3e      	ldr	r2, [pc, #248]	; (8007cd4 <HAL_TIM_PWM_Start+0x25c>)
 8007bdc:	4293      	cmp	r3, r2
 8007bde:	d102      	bne.n	8007be6 <HAL_TIM_PWM_Start+0x16e>
 8007be0:	683b      	ldr	r3, [r7, #0]
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	d004      	beq.n	8007bf0 <HAL_TIM_PWM_Start+0x178>
 8007be6:	f240 51bc 	movw	r1, #1468	; 0x5bc
 8007bea:	483b      	ldr	r0, [pc, #236]	; (8007cd8 <HAL_TIM_PWM_Start+0x260>)
 8007bec:	f7fa ffcd 	bl	8002b8a <assert_failed>

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007bf0:	683b      	ldr	r3, [r7, #0]
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	d109      	bne.n	8007c0a <HAL_TIM_PWM_Start+0x192>
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007bfc:	b2db      	uxtb	r3, r3
 8007bfe:	2b01      	cmp	r3, #1
 8007c00:	bf14      	ite	ne
 8007c02:	2301      	movne	r3, #1
 8007c04:	2300      	moveq	r3, #0
 8007c06:	b2db      	uxtb	r3, r3
 8007c08:	e03c      	b.n	8007c84 <HAL_TIM_PWM_Start+0x20c>
 8007c0a:	683b      	ldr	r3, [r7, #0]
 8007c0c:	2b04      	cmp	r3, #4
 8007c0e:	d109      	bne.n	8007c24 <HAL_TIM_PWM_Start+0x1ac>
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8007c16:	b2db      	uxtb	r3, r3
 8007c18:	2b01      	cmp	r3, #1
 8007c1a:	bf14      	ite	ne
 8007c1c:	2301      	movne	r3, #1
 8007c1e:	2300      	moveq	r3, #0
 8007c20:	b2db      	uxtb	r3, r3
 8007c22:	e02f      	b.n	8007c84 <HAL_TIM_PWM_Start+0x20c>
 8007c24:	683b      	ldr	r3, [r7, #0]
 8007c26:	2b08      	cmp	r3, #8
 8007c28:	d109      	bne.n	8007c3e <HAL_TIM_PWM_Start+0x1c6>
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007c30:	b2db      	uxtb	r3, r3
 8007c32:	2b01      	cmp	r3, #1
 8007c34:	bf14      	ite	ne
 8007c36:	2301      	movne	r3, #1
 8007c38:	2300      	moveq	r3, #0
 8007c3a:	b2db      	uxtb	r3, r3
 8007c3c:	e022      	b.n	8007c84 <HAL_TIM_PWM_Start+0x20c>
 8007c3e:	683b      	ldr	r3, [r7, #0]
 8007c40:	2b0c      	cmp	r3, #12
 8007c42:	d109      	bne.n	8007c58 <HAL_TIM_PWM_Start+0x1e0>
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007c4a:	b2db      	uxtb	r3, r3
 8007c4c:	2b01      	cmp	r3, #1
 8007c4e:	bf14      	ite	ne
 8007c50:	2301      	movne	r3, #1
 8007c52:	2300      	moveq	r3, #0
 8007c54:	b2db      	uxtb	r3, r3
 8007c56:	e015      	b.n	8007c84 <HAL_TIM_PWM_Start+0x20c>
 8007c58:	683b      	ldr	r3, [r7, #0]
 8007c5a:	2b10      	cmp	r3, #16
 8007c5c:	d109      	bne.n	8007c72 <HAL_TIM_PWM_Start+0x1fa>
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007c64:	b2db      	uxtb	r3, r3
 8007c66:	2b01      	cmp	r3, #1
 8007c68:	bf14      	ite	ne
 8007c6a:	2301      	movne	r3, #1
 8007c6c:	2300      	moveq	r3, #0
 8007c6e:	b2db      	uxtb	r3, r3
 8007c70:	e008      	b.n	8007c84 <HAL_TIM_PWM_Start+0x20c>
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8007c78:	b2db      	uxtb	r3, r3
 8007c7a:	2b01      	cmp	r3, #1
 8007c7c:	bf14      	ite	ne
 8007c7e:	2301      	movne	r3, #1
 8007c80:	2300      	moveq	r3, #0
 8007c82:	b2db      	uxtb	r3, r3
 8007c84:	2b00      	cmp	r3, #0
 8007c86:	d001      	beq.n	8007c8c <HAL_TIM_PWM_Start+0x214>
  {
    return HAL_ERROR;
 8007c88:	2301      	movs	r3, #1
 8007c8a:	e0aa      	b.n	8007de2 <HAL_TIM_PWM_Start+0x36a>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007c8c:	683b      	ldr	r3, [r7, #0]
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	d104      	bne.n	8007c9c <HAL_TIM_PWM_Start+0x224>
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	2202      	movs	r2, #2
 8007c96:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007c9a:	e03b      	b.n	8007d14 <HAL_TIM_PWM_Start+0x29c>
 8007c9c:	683b      	ldr	r3, [r7, #0]
 8007c9e:	2b04      	cmp	r3, #4
 8007ca0:	d11c      	bne.n	8007cdc <HAL_TIM_PWM_Start+0x264>
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	2202      	movs	r2, #2
 8007ca6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007caa:	e033      	b.n	8007d14 <HAL_TIM_PWM_Start+0x29c>
 8007cac:	40010000 	.word	0x40010000
 8007cb0:	40000400 	.word	0x40000400
 8007cb4:	40000800 	.word	0x40000800
 8007cb8:	40000c00 	.word	0x40000c00
 8007cbc:	40010400 	.word	0x40010400
 8007cc0:	40014000 	.word	0x40014000
 8007cc4:	40014400 	.word	0x40014400
 8007cc8:	40014800 	.word	0x40014800
 8007ccc:	40001800 	.word	0x40001800
 8007cd0:	40001c00 	.word	0x40001c00
 8007cd4:	40002000 	.word	0x40002000
 8007cd8:	0801582c 	.word	0x0801582c
 8007cdc:	683b      	ldr	r3, [r7, #0]
 8007cde:	2b08      	cmp	r3, #8
 8007ce0:	d104      	bne.n	8007cec <HAL_TIM_PWM_Start+0x274>
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	2202      	movs	r2, #2
 8007ce6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007cea:	e013      	b.n	8007d14 <HAL_TIM_PWM_Start+0x29c>
 8007cec:	683b      	ldr	r3, [r7, #0]
 8007cee:	2b0c      	cmp	r3, #12
 8007cf0:	d104      	bne.n	8007cfc <HAL_TIM_PWM_Start+0x284>
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	2202      	movs	r2, #2
 8007cf6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007cfa:	e00b      	b.n	8007d14 <HAL_TIM_PWM_Start+0x29c>
 8007cfc:	683b      	ldr	r3, [r7, #0]
 8007cfe:	2b10      	cmp	r3, #16
 8007d00:	d104      	bne.n	8007d0c <HAL_TIM_PWM_Start+0x294>
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	2202      	movs	r2, #2
 8007d06:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007d0a:	e003      	b.n	8007d14 <HAL_TIM_PWM_Start+0x29c>
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	2202      	movs	r2, #2
 8007d10:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	2201      	movs	r2, #1
 8007d1a:	6839      	ldr	r1, [r7, #0]
 8007d1c:	4618      	mov	r0, r3
 8007d1e:	f001 fba3 	bl	8009468 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	4a31      	ldr	r2, [pc, #196]	; (8007dec <HAL_TIM_PWM_Start+0x374>)
 8007d28:	4293      	cmp	r3, r2
 8007d2a:	d004      	beq.n	8007d36 <HAL_TIM_PWM_Start+0x2be>
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	4a2f      	ldr	r2, [pc, #188]	; (8007df0 <HAL_TIM_PWM_Start+0x378>)
 8007d32:	4293      	cmp	r3, r2
 8007d34:	d101      	bne.n	8007d3a <HAL_TIM_PWM_Start+0x2c2>
 8007d36:	2301      	movs	r3, #1
 8007d38:	e000      	b.n	8007d3c <HAL_TIM_PWM_Start+0x2c4>
 8007d3a:	2300      	movs	r3, #0
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	d007      	beq.n	8007d50 <HAL_TIM_PWM_Start+0x2d8>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007d4e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	4a25      	ldr	r2, [pc, #148]	; (8007dec <HAL_TIM_PWM_Start+0x374>)
 8007d56:	4293      	cmp	r3, r2
 8007d58:	d022      	beq.n	8007da0 <HAL_TIM_PWM_Start+0x328>
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007d62:	d01d      	beq.n	8007da0 <HAL_TIM_PWM_Start+0x328>
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	4a22      	ldr	r2, [pc, #136]	; (8007df4 <HAL_TIM_PWM_Start+0x37c>)
 8007d6a:	4293      	cmp	r3, r2
 8007d6c:	d018      	beq.n	8007da0 <HAL_TIM_PWM_Start+0x328>
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	4a21      	ldr	r2, [pc, #132]	; (8007df8 <HAL_TIM_PWM_Start+0x380>)
 8007d74:	4293      	cmp	r3, r2
 8007d76:	d013      	beq.n	8007da0 <HAL_TIM_PWM_Start+0x328>
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	4a1f      	ldr	r2, [pc, #124]	; (8007dfc <HAL_TIM_PWM_Start+0x384>)
 8007d7e:	4293      	cmp	r3, r2
 8007d80:	d00e      	beq.n	8007da0 <HAL_TIM_PWM_Start+0x328>
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	4a1a      	ldr	r2, [pc, #104]	; (8007df0 <HAL_TIM_PWM_Start+0x378>)
 8007d88:	4293      	cmp	r3, r2
 8007d8a:	d009      	beq.n	8007da0 <HAL_TIM_PWM_Start+0x328>
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	4a1b      	ldr	r2, [pc, #108]	; (8007e00 <HAL_TIM_PWM_Start+0x388>)
 8007d92:	4293      	cmp	r3, r2
 8007d94:	d004      	beq.n	8007da0 <HAL_TIM_PWM_Start+0x328>
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	4a1a      	ldr	r2, [pc, #104]	; (8007e04 <HAL_TIM_PWM_Start+0x38c>)
 8007d9c:	4293      	cmp	r3, r2
 8007d9e:	d115      	bne.n	8007dcc <HAL_TIM_PWM_Start+0x354>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	689a      	ldr	r2, [r3, #8]
 8007da6:	4b18      	ldr	r3, [pc, #96]	; (8007e08 <HAL_TIM_PWM_Start+0x390>)
 8007da8:	4013      	ands	r3, r2
 8007daa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007dac:	68fb      	ldr	r3, [r7, #12]
 8007dae:	2b06      	cmp	r3, #6
 8007db0:	d015      	beq.n	8007dde <HAL_TIM_PWM_Start+0x366>
 8007db2:	68fb      	ldr	r3, [r7, #12]
 8007db4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007db8:	d011      	beq.n	8007dde <HAL_TIM_PWM_Start+0x366>
    {
      __HAL_TIM_ENABLE(htim);
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	681a      	ldr	r2, [r3, #0]
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	f042 0201 	orr.w	r2, r2, #1
 8007dc8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007dca:	e008      	b.n	8007dde <HAL_TIM_PWM_Start+0x366>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	681a      	ldr	r2, [r3, #0]
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	f042 0201 	orr.w	r2, r2, #1
 8007dda:	601a      	str	r2, [r3, #0]
 8007ddc:	e000      	b.n	8007de0 <HAL_TIM_PWM_Start+0x368>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007dde:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007de0:	2300      	movs	r3, #0
}
 8007de2:	4618      	mov	r0, r3
 8007de4:	3710      	adds	r7, #16
 8007de6:	46bd      	mov	sp, r7
 8007de8:	bd80      	pop	{r7, pc}
 8007dea:	bf00      	nop
 8007dec:	40010000 	.word	0x40010000
 8007df0:	40010400 	.word	0x40010400
 8007df4:	40000400 	.word	0x40000400
 8007df8:	40000800 	.word	0x40000800
 8007dfc:	40000c00 	.word	0x40000c00
 8007e00:	40014000 	.word	0x40014000
 8007e04:	40001800 	.word	0x40001800
 8007e08:	00010007 	.word	0x00010007

08007e0c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007e0c:	b580      	push	{r7, lr}
 8007e0e:	b082      	sub	sp, #8
 8007e10:	af00      	add	r7, sp, #0
 8007e12:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	691b      	ldr	r3, [r3, #16]
 8007e1a:	f003 0302 	and.w	r3, r3, #2
 8007e1e:	2b02      	cmp	r3, #2
 8007e20:	d122      	bne.n	8007e68 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	68db      	ldr	r3, [r3, #12]
 8007e28:	f003 0302 	and.w	r3, r3, #2
 8007e2c:	2b02      	cmp	r3, #2
 8007e2e:	d11b      	bne.n	8007e68 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	f06f 0202 	mvn.w	r2, #2
 8007e38:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	2201      	movs	r2, #1
 8007e3e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	699b      	ldr	r3, [r3, #24]
 8007e46:	f003 0303 	and.w	r3, r3, #3
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	d003      	beq.n	8007e56 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007e4e:	6878      	ldr	r0, [r7, #4]
 8007e50:	f000 feca 	bl	8008be8 <HAL_TIM_IC_CaptureCallback>
 8007e54:	e005      	b.n	8007e62 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007e56:	6878      	ldr	r0, [r7, #4]
 8007e58:	f000 febc 	bl	8008bd4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007e5c:	6878      	ldr	r0, [r7, #4]
 8007e5e:	f000 fecd 	bl	8008bfc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	2200      	movs	r2, #0
 8007e66:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	691b      	ldr	r3, [r3, #16]
 8007e6e:	f003 0304 	and.w	r3, r3, #4
 8007e72:	2b04      	cmp	r3, #4
 8007e74:	d122      	bne.n	8007ebc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	68db      	ldr	r3, [r3, #12]
 8007e7c:	f003 0304 	and.w	r3, r3, #4
 8007e80:	2b04      	cmp	r3, #4
 8007e82:	d11b      	bne.n	8007ebc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	f06f 0204 	mvn.w	r2, #4
 8007e8c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	2202      	movs	r2, #2
 8007e92:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	699b      	ldr	r3, [r3, #24]
 8007e9a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	d003      	beq.n	8007eaa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007ea2:	6878      	ldr	r0, [r7, #4]
 8007ea4:	f000 fea0 	bl	8008be8 <HAL_TIM_IC_CaptureCallback>
 8007ea8:	e005      	b.n	8007eb6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007eaa:	6878      	ldr	r0, [r7, #4]
 8007eac:	f000 fe92 	bl	8008bd4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007eb0:	6878      	ldr	r0, [r7, #4]
 8007eb2:	f000 fea3 	bl	8008bfc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	2200      	movs	r2, #0
 8007eba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	691b      	ldr	r3, [r3, #16]
 8007ec2:	f003 0308 	and.w	r3, r3, #8
 8007ec6:	2b08      	cmp	r3, #8
 8007ec8:	d122      	bne.n	8007f10 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	68db      	ldr	r3, [r3, #12]
 8007ed0:	f003 0308 	and.w	r3, r3, #8
 8007ed4:	2b08      	cmp	r3, #8
 8007ed6:	d11b      	bne.n	8007f10 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	f06f 0208 	mvn.w	r2, #8
 8007ee0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	2204      	movs	r2, #4
 8007ee6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	69db      	ldr	r3, [r3, #28]
 8007eee:	f003 0303 	and.w	r3, r3, #3
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	d003      	beq.n	8007efe <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007ef6:	6878      	ldr	r0, [r7, #4]
 8007ef8:	f000 fe76 	bl	8008be8 <HAL_TIM_IC_CaptureCallback>
 8007efc:	e005      	b.n	8007f0a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007efe:	6878      	ldr	r0, [r7, #4]
 8007f00:	f000 fe68 	bl	8008bd4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007f04:	6878      	ldr	r0, [r7, #4]
 8007f06:	f000 fe79 	bl	8008bfc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	2200      	movs	r2, #0
 8007f0e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	691b      	ldr	r3, [r3, #16]
 8007f16:	f003 0310 	and.w	r3, r3, #16
 8007f1a:	2b10      	cmp	r3, #16
 8007f1c:	d122      	bne.n	8007f64 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	68db      	ldr	r3, [r3, #12]
 8007f24:	f003 0310 	and.w	r3, r3, #16
 8007f28:	2b10      	cmp	r3, #16
 8007f2a:	d11b      	bne.n	8007f64 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	f06f 0210 	mvn.w	r2, #16
 8007f34:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	2208      	movs	r2, #8
 8007f3a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	69db      	ldr	r3, [r3, #28]
 8007f42:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	d003      	beq.n	8007f52 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007f4a:	6878      	ldr	r0, [r7, #4]
 8007f4c:	f000 fe4c 	bl	8008be8 <HAL_TIM_IC_CaptureCallback>
 8007f50:	e005      	b.n	8007f5e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007f52:	6878      	ldr	r0, [r7, #4]
 8007f54:	f000 fe3e 	bl	8008bd4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007f58:	6878      	ldr	r0, [r7, #4]
 8007f5a:	f000 fe4f 	bl	8008bfc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	2200      	movs	r2, #0
 8007f62:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	691b      	ldr	r3, [r3, #16]
 8007f6a:	f003 0301 	and.w	r3, r3, #1
 8007f6e:	2b01      	cmp	r3, #1
 8007f70:	d10e      	bne.n	8007f90 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	68db      	ldr	r3, [r3, #12]
 8007f78:	f003 0301 	and.w	r3, r3, #1
 8007f7c:	2b01      	cmp	r3, #1
 8007f7e:	d107      	bne.n	8007f90 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	f06f 0201 	mvn.w	r2, #1
 8007f88:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007f8a:	6878      	ldr	r0, [r7, #4]
 8007f8c:	f000 fe18 	bl	8008bc0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	691b      	ldr	r3, [r3, #16]
 8007f96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007f9a:	2b80      	cmp	r3, #128	; 0x80
 8007f9c:	d10e      	bne.n	8007fbc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	68db      	ldr	r3, [r3, #12]
 8007fa4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007fa8:	2b80      	cmp	r3, #128	; 0x80
 8007faa:	d107      	bne.n	8007fbc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007fb4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007fb6:	6878      	ldr	r0, [r7, #4]
 8007fb8:	f001 fc42 	bl	8009840 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	691b      	ldr	r3, [r3, #16]
 8007fc2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007fc6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007fca:	d10e      	bne.n	8007fea <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	68db      	ldr	r3, [r3, #12]
 8007fd2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007fd6:	2b80      	cmp	r3, #128	; 0x80
 8007fd8:	d107      	bne.n	8007fea <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8007fe2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8007fe4:	6878      	ldr	r0, [r7, #4]
 8007fe6:	f001 fc35 	bl	8009854 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	691b      	ldr	r3, [r3, #16]
 8007ff0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ff4:	2b40      	cmp	r3, #64	; 0x40
 8007ff6:	d10e      	bne.n	8008016 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	68db      	ldr	r3, [r3, #12]
 8007ffe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008002:	2b40      	cmp	r3, #64	; 0x40
 8008004:	d107      	bne.n	8008016 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800800e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008010:	6878      	ldr	r0, [r7, #4]
 8008012:	f000 fdfd 	bl	8008c10 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	691b      	ldr	r3, [r3, #16]
 800801c:	f003 0320 	and.w	r3, r3, #32
 8008020:	2b20      	cmp	r3, #32
 8008022:	d10e      	bne.n	8008042 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	68db      	ldr	r3, [r3, #12]
 800802a:	f003 0320 	and.w	r3, r3, #32
 800802e:	2b20      	cmp	r3, #32
 8008030:	d107      	bne.n	8008042 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	f06f 0220 	mvn.w	r2, #32
 800803a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800803c:	6878      	ldr	r0, [r7, #4]
 800803e:	f001 fbf5 	bl	800982c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008042:	bf00      	nop
 8008044:	3708      	adds	r7, #8
 8008046:	46bd      	mov	sp, r7
 8008048:	bd80      	pop	{r7, pc}
	...

0800804c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800804c:	b580      	push	{r7, lr}
 800804e:	b086      	sub	sp, #24
 8008050:	af00      	add	r7, sp, #0
 8008052:	60f8      	str	r0, [r7, #12]
 8008054:	60b9      	str	r1, [r7, #8]
 8008056:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008058:	2300      	movs	r3, #0
 800805a:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CHANNELS(Channel));
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	2b00      	cmp	r3, #0
 8008060:	d016      	beq.n	8008090 <HAL_TIM_PWM_ConfigChannel+0x44>
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	2b04      	cmp	r3, #4
 8008066:	d013      	beq.n	8008090 <HAL_TIM_PWM_ConfigChannel+0x44>
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	2b08      	cmp	r3, #8
 800806c:	d010      	beq.n	8008090 <HAL_TIM_PWM_ConfigChannel+0x44>
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	2b0c      	cmp	r3, #12
 8008072:	d00d      	beq.n	8008090 <HAL_TIM_PWM_ConfigChannel+0x44>
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	2b10      	cmp	r3, #16
 8008078:	d00a      	beq.n	8008090 <HAL_TIM_PWM_ConfigChannel+0x44>
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	2b14      	cmp	r3, #20
 800807e:	d007      	beq.n	8008090 <HAL_TIM_PWM_ConfigChannel+0x44>
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	2b3c      	cmp	r3, #60	; 0x3c
 8008084:	d004      	beq.n	8008090 <HAL_TIM_PWM_ConfigChannel+0x44>
 8008086:	f241 01af 	movw	r1, #4271	; 0x10af
 800808a:	4895      	ldr	r0, [pc, #596]	; (80082e0 <HAL_TIM_PWM_ConfigChannel+0x294>)
 800808c:	f7fa fd7d 	bl	8002b8a <assert_failed>
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
 8008090:	68bb      	ldr	r3, [r7, #8]
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	2b60      	cmp	r3, #96	; 0x60
 8008096:	d01c      	beq.n	80080d2 <HAL_TIM_PWM_ConfigChannel+0x86>
 8008098:	68bb      	ldr	r3, [r7, #8]
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	2b70      	cmp	r3, #112	; 0x70
 800809e:	d018      	beq.n	80080d2 <HAL_TIM_PWM_ConfigChannel+0x86>
 80080a0:	68bb      	ldr	r3, [r7, #8]
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	4a8f      	ldr	r2, [pc, #572]	; (80082e4 <HAL_TIM_PWM_ConfigChannel+0x298>)
 80080a6:	4293      	cmp	r3, r2
 80080a8:	d013      	beq.n	80080d2 <HAL_TIM_PWM_ConfigChannel+0x86>
 80080aa:	68bb      	ldr	r3, [r7, #8]
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	4a8e      	ldr	r2, [pc, #568]	; (80082e8 <HAL_TIM_PWM_ConfigChannel+0x29c>)
 80080b0:	4293      	cmp	r3, r2
 80080b2:	d00e      	beq.n	80080d2 <HAL_TIM_PWM_ConfigChannel+0x86>
 80080b4:	68bb      	ldr	r3, [r7, #8]
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	4a8c      	ldr	r2, [pc, #560]	; (80082ec <HAL_TIM_PWM_ConfigChannel+0x2a0>)
 80080ba:	4293      	cmp	r3, r2
 80080bc:	d009      	beq.n	80080d2 <HAL_TIM_PWM_ConfigChannel+0x86>
 80080be:	68bb      	ldr	r3, [r7, #8]
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	4a8b      	ldr	r2, [pc, #556]	; (80082f0 <HAL_TIM_PWM_ConfigChannel+0x2a4>)
 80080c4:	4293      	cmp	r3, r2
 80080c6:	d004      	beq.n	80080d2 <HAL_TIM_PWM_ConfigChannel+0x86>
 80080c8:	f241 01b0 	movw	r1, #4272	; 0x10b0
 80080cc:	4884      	ldr	r0, [pc, #528]	; (80082e0 <HAL_TIM_PWM_ConfigChannel+0x294>)
 80080ce:	f7fa fd5c 	bl	8002b8a <assert_failed>
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
 80080d2:	68bb      	ldr	r3, [r7, #8]
 80080d4:	689b      	ldr	r3, [r3, #8]
 80080d6:	2b00      	cmp	r3, #0
 80080d8:	d008      	beq.n	80080ec <HAL_TIM_PWM_ConfigChannel+0xa0>
 80080da:	68bb      	ldr	r3, [r7, #8]
 80080dc:	689b      	ldr	r3, [r3, #8]
 80080de:	2b02      	cmp	r3, #2
 80080e0:	d004      	beq.n	80080ec <HAL_TIM_PWM_ConfigChannel+0xa0>
 80080e2:	f241 01b1 	movw	r1, #4273	; 0x10b1
 80080e6:	487e      	ldr	r0, [pc, #504]	; (80082e0 <HAL_TIM_PWM_ConfigChannel+0x294>)
 80080e8:	f7fa fd4f 	bl	8002b8a <assert_failed>
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));
 80080ec:	68bb      	ldr	r3, [r7, #8]
 80080ee:	691b      	ldr	r3, [r3, #16]
 80080f0:	2b00      	cmp	r3, #0
 80080f2:	d008      	beq.n	8008106 <HAL_TIM_PWM_ConfigChannel+0xba>
 80080f4:	68bb      	ldr	r3, [r7, #8]
 80080f6:	691b      	ldr	r3, [r3, #16]
 80080f8:	2b04      	cmp	r3, #4
 80080fa:	d004      	beq.n	8008106 <HAL_TIM_PWM_ConfigChannel+0xba>
 80080fc:	f241 01b2 	movw	r1, #4274	; 0x10b2
 8008100:	4877      	ldr	r0, [pc, #476]	; (80082e0 <HAL_TIM_PWM_ConfigChannel+0x294>)
 8008102:	f7fa fd42 	bl	8002b8a <assert_failed>

  /* Process Locked */
  __HAL_LOCK(htim);
 8008106:	68fb      	ldr	r3, [r7, #12]
 8008108:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800810c:	2b01      	cmp	r3, #1
 800810e:	d101      	bne.n	8008114 <HAL_TIM_PWM_ConfigChannel+0xc8>
 8008110:	2302      	movs	r3, #2
 8008112:	e1f3      	b.n	80084fc <HAL_TIM_PWM_ConfigChannel+0x4b0>
 8008114:	68fb      	ldr	r3, [r7, #12]
 8008116:	2201      	movs	r2, #1
 8008118:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	2b14      	cmp	r3, #20
 8008120:	f200 81e4 	bhi.w	80084ec <HAL_TIM_PWM_ConfigChannel+0x4a0>
 8008124:	a201      	add	r2, pc, #4	; (adr r2, 800812c <HAL_TIM_PWM_ConfigChannel+0xe0>)
 8008126:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800812a:	bf00      	nop
 800812c:	08008181 	.word	0x08008181
 8008130:	080084ed 	.word	0x080084ed
 8008134:	080084ed 	.word	0x080084ed
 8008138:	080084ed 	.word	0x080084ed
 800813c:	08008243 	.word	0x08008243
 8008140:	080084ed 	.word	0x080084ed
 8008144:	080084ed 	.word	0x080084ed
 8008148:	080084ed 	.word	0x080084ed
 800814c:	08008321 	.word	0x08008321
 8008150:	080084ed 	.word	0x080084ed
 8008154:	080084ed 	.word	0x080084ed
 8008158:	080084ed 	.word	0x080084ed
 800815c:	080083a7 	.word	0x080083a7
 8008160:	080084ed 	.word	0x080084ed
 8008164:	080084ed 	.word	0x080084ed
 8008168:	080084ed 	.word	0x080084ed
 800816c:	0800842f 	.word	0x0800842f
 8008170:	080084ed 	.word	0x080084ed
 8008174:	080084ed 	.word	0x080084ed
 8008178:	080084ed 	.word	0x080084ed
 800817c:	0800848d 	.word	0x0800848d
  {
    case TIM_CHANNEL_1:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 8008180:	68fb      	ldr	r3, [r7, #12]
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	4a5b      	ldr	r2, [pc, #364]	; (80082f4 <HAL_TIM_PWM_ConfigChannel+0x2a8>)
 8008186:	4293      	cmp	r3, r2
 8008188:	d03b      	beq.n	8008202 <HAL_TIM_PWM_ConfigChannel+0x1b6>
 800818a:	68fb      	ldr	r3, [r7, #12]
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008192:	d036      	beq.n	8008202 <HAL_TIM_PWM_ConfigChannel+0x1b6>
 8008194:	68fb      	ldr	r3, [r7, #12]
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	4a57      	ldr	r2, [pc, #348]	; (80082f8 <HAL_TIM_PWM_ConfigChannel+0x2ac>)
 800819a:	4293      	cmp	r3, r2
 800819c:	d031      	beq.n	8008202 <HAL_TIM_PWM_ConfigChannel+0x1b6>
 800819e:	68fb      	ldr	r3, [r7, #12]
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	4a56      	ldr	r2, [pc, #344]	; (80082fc <HAL_TIM_PWM_ConfigChannel+0x2b0>)
 80081a4:	4293      	cmp	r3, r2
 80081a6:	d02c      	beq.n	8008202 <HAL_TIM_PWM_ConfigChannel+0x1b6>
 80081a8:	68fb      	ldr	r3, [r7, #12]
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	4a54      	ldr	r2, [pc, #336]	; (8008300 <HAL_TIM_PWM_ConfigChannel+0x2b4>)
 80081ae:	4293      	cmp	r3, r2
 80081b0:	d027      	beq.n	8008202 <HAL_TIM_PWM_ConfigChannel+0x1b6>
 80081b2:	68fb      	ldr	r3, [r7, #12]
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	4a53      	ldr	r2, [pc, #332]	; (8008304 <HAL_TIM_PWM_ConfigChannel+0x2b8>)
 80081b8:	4293      	cmp	r3, r2
 80081ba:	d022      	beq.n	8008202 <HAL_TIM_PWM_ConfigChannel+0x1b6>
 80081bc:	68fb      	ldr	r3, [r7, #12]
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	4a51      	ldr	r2, [pc, #324]	; (8008308 <HAL_TIM_PWM_ConfigChannel+0x2bc>)
 80081c2:	4293      	cmp	r3, r2
 80081c4:	d01d      	beq.n	8008202 <HAL_TIM_PWM_ConfigChannel+0x1b6>
 80081c6:	68fb      	ldr	r3, [r7, #12]
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	4a50      	ldr	r2, [pc, #320]	; (800830c <HAL_TIM_PWM_ConfigChannel+0x2c0>)
 80081cc:	4293      	cmp	r3, r2
 80081ce:	d018      	beq.n	8008202 <HAL_TIM_PWM_ConfigChannel+0x1b6>
 80081d0:	68fb      	ldr	r3, [r7, #12]
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	4a4e      	ldr	r2, [pc, #312]	; (8008310 <HAL_TIM_PWM_ConfigChannel+0x2c4>)
 80081d6:	4293      	cmp	r3, r2
 80081d8:	d013      	beq.n	8008202 <HAL_TIM_PWM_ConfigChannel+0x1b6>
 80081da:	68fb      	ldr	r3, [r7, #12]
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	4a4d      	ldr	r2, [pc, #308]	; (8008314 <HAL_TIM_PWM_ConfigChannel+0x2c8>)
 80081e0:	4293      	cmp	r3, r2
 80081e2:	d00e      	beq.n	8008202 <HAL_TIM_PWM_ConfigChannel+0x1b6>
 80081e4:	68fb      	ldr	r3, [r7, #12]
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	4a4b      	ldr	r2, [pc, #300]	; (8008318 <HAL_TIM_PWM_ConfigChannel+0x2cc>)
 80081ea:	4293      	cmp	r3, r2
 80081ec:	d009      	beq.n	8008202 <HAL_TIM_PWM_ConfigChannel+0x1b6>
 80081ee:	68fb      	ldr	r3, [r7, #12]
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	4a4a      	ldr	r2, [pc, #296]	; (800831c <HAL_TIM_PWM_ConfigChannel+0x2d0>)
 80081f4:	4293      	cmp	r3, r2
 80081f6:	d004      	beq.n	8008202 <HAL_TIM_PWM_ConfigChannel+0x1b6>
 80081f8:	f241 01bc 	movw	r1, #4284	; 0x10bc
 80081fc:	4838      	ldr	r0, [pc, #224]	; (80082e0 <HAL_TIM_PWM_ConfigChannel+0x294>)
 80081fe:	f7fa fcc4 	bl	8002b8a <assert_failed>

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008202:	68fb      	ldr	r3, [r7, #12]
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	68b9      	ldr	r1, [r7, #8]
 8008208:	4618      	mov	r0, r3
 800820a:	f000 fdab 	bl	8008d64 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800820e:	68fb      	ldr	r3, [r7, #12]
 8008210:	681b      	ldr	r3, [r3, #0]
 8008212:	699a      	ldr	r2, [r3, #24]
 8008214:	68fb      	ldr	r3, [r7, #12]
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	f042 0208 	orr.w	r2, r2, #8
 800821c:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800821e:	68fb      	ldr	r3, [r7, #12]
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	699a      	ldr	r2, [r3, #24]
 8008224:	68fb      	ldr	r3, [r7, #12]
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	f022 0204 	bic.w	r2, r2, #4
 800822c:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800822e:	68fb      	ldr	r3, [r7, #12]
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	6999      	ldr	r1, [r3, #24]
 8008234:	68bb      	ldr	r3, [r7, #8]
 8008236:	691a      	ldr	r2, [r3, #16]
 8008238:	68fb      	ldr	r3, [r7, #12]
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	430a      	orrs	r2, r1
 800823e:	619a      	str	r2, [r3, #24]
      break;
 8008240:	e157      	b.n	80084f2 <HAL_TIM_PWM_ConfigChannel+0x4a6>
    }

    case TIM_CHANNEL_2:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 8008242:	68fb      	ldr	r3, [r7, #12]
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	4a2b      	ldr	r2, [pc, #172]	; (80082f4 <HAL_TIM_PWM_ConfigChannel+0x2a8>)
 8008248:	4293      	cmp	r3, r2
 800824a:	d027      	beq.n	800829c <HAL_TIM_PWM_ConfigChannel+0x250>
 800824c:	68fb      	ldr	r3, [r7, #12]
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008254:	d022      	beq.n	800829c <HAL_TIM_PWM_ConfigChannel+0x250>
 8008256:	68fb      	ldr	r3, [r7, #12]
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	4a27      	ldr	r2, [pc, #156]	; (80082f8 <HAL_TIM_PWM_ConfigChannel+0x2ac>)
 800825c:	4293      	cmp	r3, r2
 800825e:	d01d      	beq.n	800829c <HAL_TIM_PWM_ConfigChannel+0x250>
 8008260:	68fb      	ldr	r3, [r7, #12]
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	4a25      	ldr	r2, [pc, #148]	; (80082fc <HAL_TIM_PWM_ConfigChannel+0x2b0>)
 8008266:	4293      	cmp	r3, r2
 8008268:	d018      	beq.n	800829c <HAL_TIM_PWM_ConfigChannel+0x250>
 800826a:	68fb      	ldr	r3, [r7, #12]
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	4a24      	ldr	r2, [pc, #144]	; (8008300 <HAL_TIM_PWM_ConfigChannel+0x2b4>)
 8008270:	4293      	cmp	r3, r2
 8008272:	d013      	beq.n	800829c <HAL_TIM_PWM_ConfigChannel+0x250>
 8008274:	68fb      	ldr	r3, [r7, #12]
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	4a22      	ldr	r2, [pc, #136]	; (8008304 <HAL_TIM_PWM_ConfigChannel+0x2b8>)
 800827a:	4293      	cmp	r3, r2
 800827c:	d00e      	beq.n	800829c <HAL_TIM_PWM_ConfigChannel+0x250>
 800827e:	68fb      	ldr	r3, [r7, #12]
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	4a21      	ldr	r2, [pc, #132]	; (8008308 <HAL_TIM_PWM_ConfigChannel+0x2bc>)
 8008284:	4293      	cmp	r3, r2
 8008286:	d009      	beq.n	800829c <HAL_TIM_PWM_ConfigChannel+0x250>
 8008288:	68fb      	ldr	r3, [r7, #12]
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	4a21      	ldr	r2, [pc, #132]	; (8008314 <HAL_TIM_PWM_ConfigChannel+0x2c8>)
 800828e:	4293      	cmp	r3, r2
 8008290:	d004      	beq.n	800829c <HAL_TIM_PWM_ConfigChannel+0x250>
 8008292:	f241 01cd 	movw	r1, #4301	; 0x10cd
 8008296:	4812      	ldr	r0, [pc, #72]	; (80082e0 <HAL_TIM_PWM_ConfigChannel+0x294>)
 8008298:	f7fa fc77 	bl	8002b8a <assert_failed>

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800829c:	68fb      	ldr	r3, [r7, #12]
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	68b9      	ldr	r1, [r7, #8]
 80082a2:	4618      	mov	r0, r3
 80082a4:	f000 fdfa 	bl	8008e9c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80082a8:	68fb      	ldr	r3, [r7, #12]
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	699a      	ldr	r2, [r3, #24]
 80082ae:	68fb      	ldr	r3, [r7, #12]
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80082b6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80082b8:	68fb      	ldr	r3, [r7, #12]
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	699a      	ldr	r2, [r3, #24]
 80082be:	68fb      	ldr	r3, [r7, #12]
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80082c6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80082c8:	68fb      	ldr	r3, [r7, #12]
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	6999      	ldr	r1, [r3, #24]
 80082ce:	68bb      	ldr	r3, [r7, #8]
 80082d0:	691b      	ldr	r3, [r3, #16]
 80082d2:	021a      	lsls	r2, r3, #8
 80082d4:	68fb      	ldr	r3, [r7, #12]
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	430a      	orrs	r2, r1
 80082da:	619a      	str	r2, [r3, #24]
      break;
 80082dc:	e109      	b.n	80084f2 <HAL_TIM_PWM_ConfigChannel+0x4a6>
 80082de:	bf00      	nop
 80082e0:	0801582c 	.word	0x0801582c
 80082e4:	00010040 	.word	0x00010040
 80082e8:	00010050 	.word	0x00010050
 80082ec:	00010060 	.word	0x00010060
 80082f0:	00010070 	.word	0x00010070
 80082f4:	40010000 	.word	0x40010000
 80082f8:	40000400 	.word	0x40000400
 80082fc:	40000800 	.word	0x40000800
 8008300:	40000c00 	.word	0x40000c00
 8008304:	40010400 	.word	0x40010400
 8008308:	40014000 	.word	0x40014000
 800830c:	40014400 	.word	0x40014400
 8008310:	40014800 	.word	0x40014800
 8008314:	40001800 	.word	0x40001800
 8008318:	40001c00 	.word	0x40001c00
 800831c:	40002000 	.word	0x40002000
    }

    case TIM_CHANNEL_3:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
 8008320:	68fb      	ldr	r3, [r7, #12]
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	4a77      	ldr	r2, [pc, #476]	; (8008504 <HAL_TIM_PWM_ConfigChannel+0x4b8>)
 8008326:	4293      	cmp	r3, r2
 8008328:	d01d      	beq.n	8008366 <HAL_TIM_PWM_ConfigChannel+0x31a>
 800832a:	68fb      	ldr	r3, [r7, #12]
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008332:	d018      	beq.n	8008366 <HAL_TIM_PWM_ConfigChannel+0x31a>
 8008334:	68fb      	ldr	r3, [r7, #12]
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	4a73      	ldr	r2, [pc, #460]	; (8008508 <HAL_TIM_PWM_ConfigChannel+0x4bc>)
 800833a:	4293      	cmp	r3, r2
 800833c:	d013      	beq.n	8008366 <HAL_TIM_PWM_ConfigChannel+0x31a>
 800833e:	68fb      	ldr	r3, [r7, #12]
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	4a72      	ldr	r2, [pc, #456]	; (800850c <HAL_TIM_PWM_ConfigChannel+0x4c0>)
 8008344:	4293      	cmp	r3, r2
 8008346:	d00e      	beq.n	8008366 <HAL_TIM_PWM_ConfigChannel+0x31a>
 8008348:	68fb      	ldr	r3, [r7, #12]
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	4a70      	ldr	r2, [pc, #448]	; (8008510 <HAL_TIM_PWM_ConfigChannel+0x4c4>)
 800834e:	4293      	cmp	r3, r2
 8008350:	d009      	beq.n	8008366 <HAL_TIM_PWM_ConfigChannel+0x31a>
 8008352:	68fb      	ldr	r3, [r7, #12]
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	4a6f      	ldr	r2, [pc, #444]	; (8008514 <HAL_TIM_PWM_ConfigChannel+0x4c8>)
 8008358:	4293      	cmp	r3, r2
 800835a:	d004      	beq.n	8008366 <HAL_TIM_PWM_ConfigChannel+0x31a>
 800835c:	f241 01de 	movw	r1, #4318	; 0x10de
 8008360:	486d      	ldr	r0, [pc, #436]	; (8008518 <HAL_TIM_PWM_ConfigChannel+0x4cc>)
 8008362:	f7fa fc12 	bl	8002b8a <assert_failed>

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008366:	68fb      	ldr	r3, [r7, #12]
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	68b9      	ldr	r1, [r7, #8]
 800836c:	4618      	mov	r0, r3
 800836e:	f000 fe35 	bl	8008fdc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8008372:	68fb      	ldr	r3, [r7, #12]
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	69da      	ldr	r2, [r3, #28]
 8008378:	68fb      	ldr	r3, [r7, #12]
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	f042 0208 	orr.w	r2, r2, #8
 8008380:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8008382:	68fb      	ldr	r3, [r7, #12]
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	69da      	ldr	r2, [r3, #28]
 8008388:	68fb      	ldr	r3, [r7, #12]
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	f022 0204 	bic.w	r2, r2, #4
 8008390:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8008392:	68fb      	ldr	r3, [r7, #12]
 8008394:	681b      	ldr	r3, [r3, #0]
 8008396:	69d9      	ldr	r1, [r3, #28]
 8008398:	68bb      	ldr	r3, [r7, #8]
 800839a:	691a      	ldr	r2, [r3, #16]
 800839c:	68fb      	ldr	r3, [r7, #12]
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	430a      	orrs	r2, r1
 80083a2:	61da      	str	r2, [r3, #28]
      break;
 80083a4:	e0a5      	b.n	80084f2 <HAL_TIM_PWM_ConfigChannel+0x4a6>
    }

    case TIM_CHANNEL_4:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
 80083a6:	68fb      	ldr	r3, [r7, #12]
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	4a56      	ldr	r2, [pc, #344]	; (8008504 <HAL_TIM_PWM_ConfigChannel+0x4b8>)
 80083ac:	4293      	cmp	r3, r2
 80083ae:	d01d      	beq.n	80083ec <HAL_TIM_PWM_ConfigChannel+0x3a0>
 80083b0:	68fb      	ldr	r3, [r7, #12]
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80083b8:	d018      	beq.n	80083ec <HAL_TIM_PWM_ConfigChannel+0x3a0>
 80083ba:	68fb      	ldr	r3, [r7, #12]
 80083bc:	681b      	ldr	r3, [r3, #0]
 80083be:	4a52      	ldr	r2, [pc, #328]	; (8008508 <HAL_TIM_PWM_ConfigChannel+0x4bc>)
 80083c0:	4293      	cmp	r3, r2
 80083c2:	d013      	beq.n	80083ec <HAL_TIM_PWM_ConfigChannel+0x3a0>
 80083c4:	68fb      	ldr	r3, [r7, #12]
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	4a50      	ldr	r2, [pc, #320]	; (800850c <HAL_TIM_PWM_ConfigChannel+0x4c0>)
 80083ca:	4293      	cmp	r3, r2
 80083cc:	d00e      	beq.n	80083ec <HAL_TIM_PWM_ConfigChannel+0x3a0>
 80083ce:	68fb      	ldr	r3, [r7, #12]
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	4a4f      	ldr	r2, [pc, #316]	; (8008510 <HAL_TIM_PWM_ConfigChannel+0x4c4>)
 80083d4:	4293      	cmp	r3, r2
 80083d6:	d009      	beq.n	80083ec <HAL_TIM_PWM_ConfigChannel+0x3a0>
 80083d8:	68fb      	ldr	r3, [r7, #12]
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	4a4d      	ldr	r2, [pc, #308]	; (8008514 <HAL_TIM_PWM_ConfigChannel+0x4c8>)
 80083de:	4293      	cmp	r3, r2
 80083e0:	d004      	beq.n	80083ec <HAL_TIM_PWM_ConfigChannel+0x3a0>
 80083e2:	f241 01ef 	movw	r1, #4335	; 0x10ef
 80083e6:	484c      	ldr	r0, [pc, #304]	; (8008518 <HAL_TIM_PWM_ConfigChannel+0x4cc>)
 80083e8:	f7fa fbcf 	bl	8002b8a <assert_failed>

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80083ec:	68fb      	ldr	r3, [r7, #12]
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	68b9      	ldr	r1, [r7, #8]
 80083f2:	4618      	mov	r0, r3
 80083f4:	f000 fe92 	bl	800911c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80083f8:	68fb      	ldr	r3, [r7, #12]
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	69da      	ldr	r2, [r3, #28]
 80083fe:	68fb      	ldr	r3, [r7, #12]
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008406:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008408:	68fb      	ldr	r3, [r7, #12]
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	69da      	ldr	r2, [r3, #28]
 800840e:	68fb      	ldr	r3, [r7, #12]
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008416:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008418:	68fb      	ldr	r3, [r7, #12]
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	69d9      	ldr	r1, [r3, #28]
 800841e:	68bb      	ldr	r3, [r7, #8]
 8008420:	691b      	ldr	r3, [r3, #16]
 8008422:	021a      	lsls	r2, r3, #8
 8008424:	68fb      	ldr	r3, [r7, #12]
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	430a      	orrs	r2, r1
 800842a:	61da      	str	r2, [r3, #28]
      break;
 800842c:	e061      	b.n	80084f2 <HAL_TIM_PWM_ConfigChannel+0x4a6>
    }

    case TIM_CHANNEL_5:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));
 800842e:	68fb      	ldr	r3, [r7, #12]
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	4a34      	ldr	r2, [pc, #208]	; (8008504 <HAL_TIM_PWM_ConfigChannel+0x4b8>)
 8008434:	4293      	cmp	r3, r2
 8008436:	d009      	beq.n	800844c <HAL_TIM_PWM_ConfigChannel+0x400>
 8008438:	68fb      	ldr	r3, [r7, #12]
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	4a35      	ldr	r2, [pc, #212]	; (8008514 <HAL_TIM_PWM_ConfigChannel+0x4c8>)
 800843e:	4293      	cmp	r3, r2
 8008440:	d004      	beq.n	800844c <HAL_TIM_PWM_ConfigChannel+0x400>
 8008442:	f44f 5188 	mov.w	r1, #4352	; 0x1100
 8008446:	4834      	ldr	r0, [pc, #208]	; (8008518 <HAL_TIM_PWM_ConfigChannel+0x4cc>)
 8008448:	f7fa fb9f 	bl	8002b8a <assert_failed>

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800844c:	68fb      	ldr	r3, [r7, #12]
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	68b9      	ldr	r1, [r7, #8]
 8008452:	4618      	mov	r0, r3
 8008454:	f000 fec8 	bl	80091e8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8008458:	68fb      	ldr	r3, [r7, #12]
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800845e:	68fb      	ldr	r3, [r7, #12]
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	f042 0208 	orr.w	r2, r2, #8
 8008466:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8008468:	68fb      	ldr	r3, [r7, #12]
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800846e:	68fb      	ldr	r3, [r7, #12]
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	f022 0204 	bic.w	r2, r2, #4
 8008476:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8008478:	68fb      	ldr	r3, [r7, #12]
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800847e:	68bb      	ldr	r3, [r7, #8]
 8008480:	691a      	ldr	r2, [r3, #16]
 8008482:	68fb      	ldr	r3, [r7, #12]
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	430a      	orrs	r2, r1
 8008488:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800848a:	e032      	b.n	80084f2 <HAL_TIM_PWM_ConfigChannel+0x4a6>
    }

    case TIM_CHANNEL_6:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));
 800848c:	68fb      	ldr	r3, [r7, #12]
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	4a1c      	ldr	r2, [pc, #112]	; (8008504 <HAL_TIM_PWM_ConfigChannel+0x4b8>)
 8008492:	4293      	cmp	r3, r2
 8008494:	d009      	beq.n	80084aa <HAL_TIM_PWM_ConfigChannel+0x45e>
 8008496:	68fb      	ldr	r3, [r7, #12]
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	4a1e      	ldr	r2, [pc, #120]	; (8008514 <HAL_TIM_PWM_ConfigChannel+0x4c8>)
 800849c:	4293      	cmp	r3, r2
 800849e:	d004      	beq.n	80084aa <HAL_TIM_PWM_ConfigChannel+0x45e>
 80084a0:	f241 1111 	movw	r1, #4369	; 0x1111
 80084a4:	481c      	ldr	r0, [pc, #112]	; (8008518 <HAL_TIM_PWM_ConfigChannel+0x4cc>)
 80084a6:	f7fa fb70 	bl	8002b8a <assert_failed>

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80084aa:	68fb      	ldr	r3, [r7, #12]
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	68b9      	ldr	r1, [r7, #8]
 80084b0:	4618      	mov	r0, r3
 80084b2:	f000 feeb 	bl	800928c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80084b6:	68fb      	ldr	r3, [r7, #12]
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80084bc:	68fb      	ldr	r3, [r7, #12]
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80084c4:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80084c6:	68fb      	ldr	r3, [r7, #12]
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80084cc:	68fb      	ldr	r3, [r7, #12]
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80084d4:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80084d6:	68fb      	ldr	r3, [r7, #12]
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80084dc:	68bb      	ldr	r3, [r7, #8]
 80084de:	691b      	ldr	r3, [r3, #16]
 80084e0:	021a      	lsls	r2, r3, #8
 80084e2:	68fb      	ldr	r3, [r7, #12]
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	430a      	orrs	r2, r1
 80084e8:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80084ea:	e002      	b.n	80084f2 <HAL_TIM_PWM_ConfigChannel+0x4a6>
    }

    default:
      status = HAL_ERROR;
 80084ec:	2301      	movs	r3, #1
 80084ee:	75fb      	strb	r3, [r7, #23]
      break;
 80084f0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80084f2:	68fb      	ldr	r3, [r7, #12]
 80084f4:	2200      	movs	r2, #0
 80084f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80084fa:	7dfb      	ldrb	r3, [r7, #23]
}
 80084fc:	4618      	mov	r0, r3
 80084fe:	3718      	adds	r7, #24
 8008500:	46bd      	mov	sp, r7
 8008502:	bd80      	pop	{r7, pc}
 8008504:	40010000 	.word	0x40010000
 8008508:	40000400 	.word	0x40000400
 800850c:	40000800 	.word	0x40000800
 8008510:	40000c00 	.word	0x40000c00
 8008514:	40010400 	.word	0x40010400
 8008518:	0801582c 	.word	0x0801582c

0800851c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800851c:	b580      	push	{r7, lr}
 800851e:	b084      	sub	sp, #16
 8008520:	af00      	add	r7, sp, #0
 8008522:	6078      	str	r0, [r7, #4]
 8008524:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008526:	2300      	movs	r3, #0
 8008528:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008530:	2b01      	cmp	r3, #1
 8008532:	d101      	bne.n	8008538 <HAL_TIM_ConfigClockSource+0x1c>
 8008534:	2302      	movs	r3, #2
 8008536:	e332      	b.n	8008b9e <HAL_TIM_ConfigClockSource+0x682>
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	2201      	movs	r2, #1
 800853c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	2202      	movs	r2, #2
 8008544:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));
 8008548:	683b      	ldr	r3, [r7, #0]
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008550:	d029      	beq.n	80085a6 <HAL_TIM_ConfigClockSource+0x8a>
 8008552:	683b      	ldr	r3, [r7, #0]
 8008554:	681b      	ldr	r3, [r3, #0]
 8008556:	2b70      	cmp	r3, #112	; 0x70
 8008558:	d025      	beq.n	80085a6 <HAL_TIM_ConfigClockSource+0x8a>
 800855a:	683b      	ldr	r3, [r7, #0]
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008562:	d020      	beq.n	80085a6 <HAL_TIM_ConfigClockSource+0x8a>
 8008564:	683b      	ldr	r3, [r7, #0]
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	2b40      	cmp	r3, #64	; 0x40
 800856a:	d01c      	beq.n	80085a6 <HAL_TIM_ConfigClockSource+0x8a>
 800856c:	683b      	ldr	r3, [r7, #0]
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	2b50      	cmp	r3, #80	; 0x50
 8008572:	d018      	beq.n	80085a6 <HAL_TIM_ConfigClockSource+0x8a>
 8008574:	683b      	ldr	r3, [r7, #0]
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	2b60      	cmp	r3, #96	; 0x60
 800857a:	d014      	beq.n	80085a6 <HAL_TIM_ConfigClockSource+0x8a>
 800857c:	683b      	ldr	r3, [r7, #0]
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	2b00      	cmp	r3, #0
 8008582:	d010      	beq.n	80085a6 <HAL_TIM_ConfigClockSource+0x8a>
 8008584:	683b      	ldr	r3, [r7, #0]
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	2b10      	cmp	r3, #16
 800858a:	d00c      	beq.n	80085a6 <HAL_TIM_ConfigClockSource+0x8a>
 800858c:	683b      	ldr	r3, [r7, #0]
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	2b20      	cmp	r3, #32
 8008592:	d008      	beq.n	80085a6 <HAL_TIM_ConfigClockSource+0x8a>
 8008594:	683b      	ldr	r3, [r7, #0]
 8008596:	681b      	ldr	r3, [r3, #0]
 8008598:	2b30      	cmp	r3, #48	; 0x30
 800859a:	d004      	beq.n	80085a6 <HAL_TIM_ConfigClockSource+0x8a>
 800859c:	f241 514c 	movw	r1, #5452	; 0x154c
 80085a0:	4893      	ldr	r0, [pc, #588]	; (80087f0 <HAL_TIM_ConfigClockSource+0x2d4>)
 80085a2:	f7fa faf2 	bl	8002b8a <assert_failed>

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	689b      	ldr	r3, [r3, #8]
 80085ac:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80085ae:	68ba      	ldr	r2, [r7, #8]
 80085b0:	4b90      	ldr	r3, [pc, #576]	; (80087f4 <HAL_TIM_ConfigClockSource+0x2d8>)
 80085b2:	4013      	ands	r3, r2
 80085b4:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80085b6:	68bb      	ldr	r3, [r7, #8]
 80085b8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80085bc:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	68ba      	ldr	r2, [r7, #8]
 80085c4:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80085c6:	683b      	ldr	r3, [r7, #0]
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80085ce:	f000 812d 	beq.w	800882c <HAL_TIM_ConfigClockSource+0x310>
 80085d2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80085d6:	f200 82d5 	bhi.w	8008b84 <HAL_TIM_ConfigClockSource+0x668>
 80085da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80085de:	d02e      	beq.n	800863e <HAL_TIM_ConfigClockSource+0x122>
 80085e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80085e4:	f200 82ce 	bhi.w	8008b84 <HAL_TIM_ConfigClockSource+0x668>
 80085e8:	2b70      	cmp	r3, #112	; 0x70
 80085ea:	f000 8082 	beq.w	80086f2 <HAL_TIM_ConfigClockSource+0x1d6>
 80085ee:	2b70      	cmp	r3, #112	; 0x70
 80085f0:	f200 82c8 	bhi.w	8008b84 <HAL_TIM_ConfigClockSource+0x668>
 80085f4:	2b60      	cmp	r3, #96	; 0x60
 80085f6:	f000 81e0 	beq.w	80089ba <HAL_TIM_ConfigClockSource+0x49e>
 80085fa:	2b60      	cmp	r3, #96	; 0x60
 80085fc:	f200 82c2 	bhi.w	8008b84 <HAL_TIM_ConfigClockSource+0x668>
 8008600:	2b50      	cmp	r3, #80	; 0x50
 8008602:	f000 8184 	beq.w	800890e <HAL_TIM_ConfigClockSource+0x3f2>
 8008606:	2b50      	cmp	r3, #80	; 0x50
 8008608:	f200 82bc 	bhi.w	8008b84 <HAL_TIM_ConfigClockSource+0x668>
 800860c:	2b40      	cmp	r3, #64	; 0x40
 800860e:	f000 8237 	beq.w	8008a80 <HAL_TIM_ConfigClockSource+0x564>
 8008612:	2b40      	cmp	r3, #64	; 0x40
 8008614:	f200 82b6 	bhi.w	8008b84 <HAL_TIM_ConfigClockSource+0x668>
 8008618:	2b30      	cmp	r3, #48	; 0x30
 800861a:	f000 8287 	beq.w	8008b2c <HAL_TIM_ConfigClockSource+0x610>
 800861e:	2b30      	cmp	r3, #48	; 0x30
 8008620:	f200 82b0 	bhi.w	8008b84 <HAL_TIM_ConfigClockSource+0x668>
 8008624:	2b20      	cmp	r3, #32
 8008626:	f000 8281 	beq.w	8008b2c <HAL_TIM_ConfigClockSource+0x610>
 800862a:	2b20      	cmp	r3, #32
 800862c:	f200 82aa 	bhi.w	8008b84 <HAL_TIM_ConfigClockSource+0x668>
 8008630:	2b00      	cmp	r3, #0
 8008632:	f000 827b 	beq.w	8008b2c <HAL_TIM_ConfigClockSource+0x610>
 8008636:	2b10      	cmp	r3, #16
 8008638:	f000 8278 	beq.w	8008b2c <HAL_TIM_ConfigClockSource+0x610>
 800863c:	e2a2      	b.n	8008b84 <HAL_TIM_ConfigClockSource+0x668>
  {
    case TIM_CLOCKSOURCE_INTERNAL:
    {
      assert_param(IS_TIM_INSTANCE(htim->Instance));
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	681b      	ldr	r3, [r3, #0]
 8008642:	4a6d      	ldr	r2, [pc, #436]	; (80087f8 <HAL_TIM_ConfigClockSource+0x2dc>)
 8008644:	4293      	cmp	r3, r2
 8008646:	f000 82a0 	beq.w	8008b8a <HAL_TIM_ConfigClockSource+0x66e>
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	681b      	ldr	r3, [r3, #0]
 800864e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008652:	f000 829a 	beq.w	8008b8a <HAL_TIM_ConfigClockSource+0x66e>
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	4a68      	ldr	r2, [pc, #416]	; (80087fc <HAL_TIM_ConfigClockSource+0x2e0>)
 800865c:	4293      	cmp	r3, r2
 800865e:	f000 8294 	beq.w	8008b8a <HAL_TIM_ConfigClockSource+0x66e>
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	4a66      	ldr	r2, [pc, #408]	; (8008800 <HAL_TIM_ConfigClockSource+0x2e4>)
 8008668:	4293      	cmp	r3, r2
 800866a:	f000 828e 	beq.w	8008b8a <HAL_TIM_ConfigClockSource+0x66e>
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	4a64      	ldr	r2, [pc, #400]	; (8008804 <HAL_TIM_ConfigClockSource+0x2e8>)
 8008674:	4293      	cmp	r3, r2
 8008676:	f000 8288 	beq.w	8008b8a <HAL_TIM_ConfigClockSource+0x66e>
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	4a62      	ldr	r2, [pc, #392]	; (8008808 <HAL_TIM_ConfigClockSource+0x2ec>)
 8008680:	4293      	cmp	r3, r2
 8008682:	f000 8282 	beq.w	8008b8a <HAL_TIM_ConfigClockSource+0x66e>
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	4a60      	ldr	r2, [pc, #384]	; (800880c <HAL_TIM_ConfigClockSource+0x2f0>)
 800868c:	4293      	cmp	r3, r2
 800868e:	f000 827c 	beq.w	8008b8a <HAL_TIM_ConfigClockSource+0x66e>
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	4a5e      	ldr	r2, [pc, #376]	; (8008810 <HAL_TIM_ConfigClockSource+0x2f4>)
 8008698:	4293      	cmp	r3, r2
 800869a:	f000 8276 	beq.w	8008b8a <HAL_TIM_ConfigClockSource+0x66e>
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	681b      	ldr	r3, [r3, #0]
 80086a2:	4a5c      	ldr	r2, [pc, #368]	; (8008814 <HAL_TIM_ConfigClockSource+0x2f8>)
 80086a4:	4293      	cmp	r3, r2
 80086a6:	f000 8270 	beq.w	8008b8a <HAL_TIM_ConfigClockSource+0x66e>
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	4a5a      	ldr	r2, [pc, #360]	; (8008818 <HAL_TIM_ConfigClockSource+0x2fc>)
 80086b0:	4293      	cmp	r3, r2
 80086b2:	f000 826a 	beq.w	8008b8a <HAL_TIM_ConfigClockSource+0x66e>
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	4a58      	ldr	r2, [pc, #352]	; (800881c <HAL_TIM_ConfigClockSource+0x300>)
 80086bc:	4293      	cmp	r3, r2
 80086be:	f000 8264 	beq.w	8008b8a <HAL_TIM_ConfigClockSource+0x66e>
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	4a56      	ldr	r2, [pc, #344]	; (8008820 <HAL_TIM_ConfigClockSource+0x304>)
 80086c8:	4293      	cmp	r3, r2
 80086ca:	f000 825e 	beq.w	8008b8a <HAL_TIM_ConfigClockSource+0x66e>
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	4a54      	ldr	r2, [pc, #336]	; (8008824 <HAL_TIM_ConfigClockSource+0x308>)
 80086d4:	4293      	cmp	r3, r2
 80086d6:	f000 8258 	beq.w	8008b8a <HAL_TIM_ConfigClockSource+0x66e>
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	681b      	ldr	r3, [r3, #0]
 80086de:	4a52      	ldr	r2, [pc, #328]	; (8008828 <HAL_TIM_ConfigClockSource+0x30c>)
 80086e0:	4293      	cmp	r3, r2
 80086e2:	f000 8252 	beq.w	8008b8a <HAL_TIM_ConfigClockSource+0x66e>
 80086e6:	f241 5158 	movw	r1, #5464	; 0x1558
 80086ea:	4841      	ldr	r0, [pc, #260]	; (80087f0 <HAL_TIM_ConfigClockSource+0x2d4>)
 80086ec:	f7fa fa4d 	bl	8002b8a <assert_failed>
      break;
 80086f0:	e24b      	b.n	8008b8a <HAL_TIM_ConfigClockSource+0x66e>
    }

    case TIM_CLOCKSOURCE_ETRMODE1:
    {
      /* Check whether or not the timer instance supports external trigger input mode 1 (ETRF)*/
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	681b      	ldr	r3, [r3, #0]
 80086f6:	4a40      	ldr	r2, [pc, #256]	; (80087f8 <HAL_TIM_ConfigClockSource+0x2dc>)
 80086f8:	4293      	cmp	r3, r2
 80086fa:	d027      	beq.n	800874c <HAL_TIM_ConfigClockSource+0x230>
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	681b      	ldr	r3, [r3, #0]
 8008700:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008704:	d022      	beq.n	800874c <HAL_TIM_ConfigClockSource+0x230>
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	681b      	ldr	r3, [r3, #0]
 800870a:	4a3c      	ldr	r2, [pc, #240]	; (80087fc <HAL_TIM_ConfigClockSource+0x2e0>)
 800870c:	4293      	cmp	r3, r2
 800870e:	d01d      	beq.n	800874c <HAL_TIM_ConfigClockSource+0x230>
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	4a3a      	ldr	r2, [pc, #232]	; (8008800 <HAL_TIM_ConfigClockSource+0x2e4>)
 8008716:	4293      	cmp	r3, r2
 8008718:	d018      	beq.n	800874c <HAL_TIM_ConfigClockSource+0x230>
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	681b      	ldr	r3, [r3, #0]
 800871e:	4a39      	ldr	r2, [pc, #228]	; (8008804 <HAL_TIM_ConfigClockSource+0x2e8>)
 8008720:	4293      	cmp	r3, r2
 8008722:	d013      	beq.n	800874c <HAL_TIM_ConfigClockSource+0x230>
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	4a39      	ldr	r2, [pc, #228]	; (8008810 <HAL_TIM_ConfigClockSource+0x2f4>)
 800872a:	4293      	cmp	r3, r2
 800872c:	d00e      	beq.n	800874c <HAL_TIM_ConfigClockSource+0x230>
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	4a38      	ldr	r2, [pc, #224]	; (8008814 <HAL_TIM_ConfigClockSource+0x2f8>)
 8008734:	4293      	cmp	r3, r2
 8008736:	d009      	beq.n	800874c <HAL_TIM_ConfigClockSource+0x230>
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	4a38      	ldr	r2, [pc, #224]	; (8008820 <HAL_TIM_ConfigClockSource+0x304>)
 800873e:	4293      	cmp	r3, r2
 8008740:	d004      	beq.n	800874c <HAL_TIM_ConfigClockSource+0x230>
 8008742:	f241 515f 	movw	r1, #5471	; 0x155f
 8008746:	482a      	ldr	r0, [pc, #168]	; (80087f0 <HAL_TIM_ConfigClockSource+0x2d4>)
 8008748:	f7fa fa1f 	bl	8002b8a <assert_failed>

      /* Check ETR input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 800874c:	683b      	ldr	r3, [r7, #0]
 800874e:	689b      	ldr	r3, [r3, #8]
 8008750:	2b00      	cmp	r3, #0
 8008752:	d013      	beq.n	800877c <HAL_TIM_ConfigClockSource+0x260>
 8008754:	683b      	ldr	r3, [r7, #0]
 8008756:	689b      	ldr	r3, [r3, #8]
 8008758:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800875c:	d00e      	beq.n	800877c <HAL_TIM_ConfigClockSource+0x260>
 800875e:	683b      	ldr	r3, [r7, #0]
 8008760:	689b      	ldr	r3, [r3, #8]
 8008762:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008766:	d009      	beq.n	800877c <HAL_TIM_ConfigClockSource+0x260>
 8008768:	683b      	ldr	r3, [r7, #0]
 800876a:	689b      	ldr	r3, [r3, #8]
 800876c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008770:	d004      	beq.n	800877c <HAL_TIM_ConfigClockSource+0x260>
 8008772:	f241 5162 	movw	r1, #5474	; 0x1562
 8008776:	481e      	ldr	r0, [pc, #120]	; (80087f0 <HAL_TIM_ConfigClockSource+0x2d4>)
 8008778:	f7fa fa07 	bl	8002b8a <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800877c:	683b      	ldr	r3, [r7, #0]
 800877e:	685b      	ldr	r3, [r3, #4]
 8008780:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008784:	d014      	beq.n	80087b0 <HAL_TIM_ConfigClockSource+0x294>
 8008786:	683b      	ldr	r3, [r7, #0]
 8008788:	685b      	ldr	r3, [r3, #4]
 800878a:	2b00      	cmp	r3, #0
 800878c:	d010      	beq.n	80087b0 <HAL_TIM_ConfigClockSource+0x294>
 800878e:	683b      	ldr	r3, [r7, #0]
 8008790:	685b      	ldr	r3, [r3, #4]
 8008792:	2b00      	cmp	r3, #0
 8008794:	d00c      	beq.n	80087b0 <HAL_TIM_ConfigClockSource+0x294>
 8008796:	683b      	ldr	r3, [r7, #0]
 8008798:	685b      	ldr	r3, [r3, #4]
 800879a:	2b02      	cmp	r3, #2
 800879c:	d008      	beq.n	80087b0 <HAL_TIM_ConfigClockSource+0x294>
 800879e:	683b      	ldr	r3, [r7, #0]
 80087a0:	685b      	ldr	r3, [r3, #4]
 80087a2:	2b0a      	cmp	r3, #10
 80087a4:	d004      	beq.n	80087b0 <HAL_TIM_ConfigClockSource+0x294>
 80087a6:	f241 5163 	movw	r1, #5475	; 0x1563
 80087aa:	4811      	ldr	r0, [pc, #68]	; (80087f0 <HAL_TIM_ConfigClockSource+0x2d4>)
 80087ac:	f7fa f9ed 	bl	8002b8a <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 80087b0:	683b      	ldr	r3, [r7, #0]
 80087b2:	68db      	ldr	r3, [r3, #12]
 80087b4:	2b0f      	cmp	r3, #15
 80087b6:	d904      	bls.n	80087c2 <HAL_TIM_ConfigClockSource+0x2a6>
 80087b8:	f241 5164 	movw	r1, #5476	; 0x1564
 80087bc:	480c      	ldr	r0, [pc, #48]	; (80087f0 <HAL_TIM_ConfigClockSource+0x2d4>)
 80087be:	f7fa f9e4 	bl	8002b8a <assert_failed>

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	6818      	ldr	r0, [r3, #0]
 80087c6:	683b      	ldr	r3, [r7, #0]
 80087c8:	6899      	ldr	r1, [r3, #8]
 80087ca:	683b      	ldr	r3, [r7, #0]
 80087cc:	685a      	ldr	r2, [r3, #4]
 80087ce:	683b      	ldr	r3, [r7, #0]
 80087d0:	68db      	ldr	r3, [r3, #12]
 80087d2:	f000 fe29 	bl	8009428 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	681b      	ldr	r3, [r3, #0]
 80087da:	689b      	ldr	r3, [r3, #8]
 80087dc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80087de:	68bb      	ldr	r3, [r7, #8]
 80087e0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80087e4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	681b      	ldr	r3, [r3, #0]
 80087ea:	68ba      	ldr	r2, [r7, #8]
 80087ec:	609a      	str	r2, [r3, #8]
      break;
 80087ee:	e1cd      	b.n	8008b8c <HAL_TIM_ConfigClockSource+0x670>
 80087f0:	0801582c 	.word	0x0801582c
 80087f4:	fffeff88 	.word	0xfffeff88
 80087f8:	40010000 	.word	0x40010000
 80087fc:	40000400 	.word	0x40000400
 8008800:	40000800 	.word	0x40000800
 8008804:	40000c00 	.word	0x40000c00
 8008808:	40001000 	.word	0x40001000
 800880c:	40001400 	.word	0x40001400
 8008810:	40010400 	.word	0x40010400
 8008814:	40014000 	.word	0x40014000
 8008818:	40014400 	.word	0x40014400
 800881c:	40014800 	.word	0x40014800
 8008820:	40001800 	.word	0x40001800
 8008824:	40001c00 	.word	0x40001c00
 8008828:	40002000 	.word	0x40002000
    }

    case TIM_CLOCKSOURCE_ETRMODE2:
    {
      /* Check whether or not the timer instance supports external trigger input mode 2 (ETRF)*/
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE2_INSTANCE(htim->Instance));
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	4a8d      	ldr	r2, [pc, #564]	; (8008a68 <HAL_TIM_ConfigClockSource+0x54c>)
 8008832:	4293      	cmp	r3, r2
 8008834:	d01d      	beq.n	8008872 <HAL_TIM_ConfigClockSource+0x356>
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800883e:	d018      	beq.n	8008872 <HAL_TIM_ConfigClockSource+0x356>
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	4a89      	ldr	r2, [pc, #548]	; (8008a6c <HAL_TIM_ConfigClockSource+0x550>)
 8008846:	4293      	cmp	r3, r2
 8008848:	d013      	beq.n	8008872 <HAL_TIM_ConfigClockSource+0x356>
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	4a88      	ldr	r2, [pc, #544]	; (8008a70 <HAL_TIM_ConfigClockSource+0x554>)
 8008850:	4293      	cmp	r3, r2
 8008852:	d00e      	beq.n	8008872 <HAL_TIM_ConfigClockSource+0x356>
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	4a86      	ldr	r2, [pc, #536]	; (8008a74 <HAL_TIM_ConfigClockSource+0x558>)
 800885a:	4293      	cmp	r3, r2
 800885c:	d009      	beq.n	8008872 <HAL_TIM_ConfigClockSource+0x356>
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	4a85      	ldr	r2, [pc, #532]	; (8008a78 <HAL_TIM_ConfigClockSource+0x55c>)
 8008864:	4293      	cmp	r3, r2
 8008866:	d004      	beq.n	8008872 <HAL_TIM_ConfigClockSource+0x356>
 8008868:	f241 5177 	movw	r1, #5495	; 0x1577
 800886c:	4883      	ldr	r0, [pc, #524]	; (8008a7c <HAL_TIM_ConfigClockSource+0x560>)
 800886e:	f7fa f98c 	bl	8002b8a <assert_failed>

      /* Check ETR input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 8008872:	683b      	ldr	r3, [r7, #0]
 8008874:	689b      	ldr	r3, [r3, #8]
 8008876:	2b00      	cmp	r3, #0
 8008878:	d013      	beq.n	80088a2 <HAL_TIM_ConfigClockSource+0x386>
 800887a:	683b      	ldr	r3, [r7, #0]
 800887c:	689b      	ldr	r3, [r3, #8]
 800887e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008882:	d00e      	beq.n	80088a2 <HAL_TIM_ConfigClockSource+0x386>
 8008884:	683b      	ldr	r3, [r7, #0]
 8008886:	689b      	ldr	r3, [r3, #8]
 8008888:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800888c:	d009      	beq.n	80088a2 <HAL_TIM_ConfigClockSource+0x386>
 800888e:	683b      	ldr	r3, [r7, #0]
 8008890:	689b      	ldr	r3, [r3, #8]
 8008892:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008896:	d004      	beq.n	80088a2 <HAL_TIM_ConfigClockSource+0x386>
 8008898:	f241 517a 	movw	r1, #5498	; 0x157a
 800889c:	4877      	ldr	r0, [pc, #476]	; (8008a7c <HAL_TIM_ConfigClockSource+0x560>)
 800889e:	f7fa f974 	bl	8002b8a <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 80088a2:	683b      	ldr	r3, [r7, #0]
 80088a4:	685b      	ldr	r3, [r3, #4]
 80088a6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80088aa:	d014      	beq.n	80088d6 <HAL_TIM_ConfigClockSource+0x3ba>
 80088ac:	683b      	ldr	r3, [r7, #0]
 80088ae:	685b      	ldr	r3, [r3, #4]
 80088b0:	2b00      	cmp	r3, #0
 80088b2:	d010      	beq.n	80088d6 <HAL_TIM_ConfigClockSource+0x3ba>
 80088b4:	683b      	ldr	r3, [r7, #0]
 80088b6:	685b      	ldr	r3, [r3, #4]
 80088b8:	2b00      	cmp	r3, #0
 80088ba:	d00c      	beq.n	80088d6 <HAL_TIM_ConfigClockSource+0x3ba>
 80088bc:	683b      	ldr	r3, [r7, #0]
 80088be:	685b      	ldr	r3, [r3, #4]
 80088c0:	2b02      	cmp	r3, #2
 80088c2:	d008      	beq.n	80088d6 <HAL_TIM_ConfigClockSource+0x3ba>
 80088c4:	683b      	ldr	r3, [r7, #0]
 80088c6:	685b      	ldr	r3, [r3, #4]
 80088c8:	2b0a      	cmp	r3, #10
 80088ca:	d004      	beq.n	80088d6 <HAL_TIM_ConfigClockSource+0x3ba>
 80088cc:	f241 517b 	movw	r1, #5499	; 0x157b
 80088d0:	486a      	ldr	r0, [pc, #424]	; (8008a7c <HAL_TIM_ConfigClockSource+0x560>)
 80088d2:	f7fa f95a 	bl	8002b8a <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 80088d6:	683b      	ldr	r3, [r7, #0]
 80088d8:	68db      	ldr	r3, [r3, #12]
 80088da:	2b0f      	cmp	r3, #15
 80088dc:	d904      	bls.n	80088e8 <HAL_TIM_ConfigClockSource+0x3cc>
 80088de:	f241 517c 	movw	r1, #5500	; 0x157c
 80088e2:	4866      	ldr	r0, [pc, #408]	; (8008a7c <HAL_TIM_ConfigClockSource+0x560>)
 80088e4:	f7fa f951 	bl	8002b8a <assert_failed>

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	6818      	ldr	r0, [r3, #0]
 80088ec:	683b      	ldr	r3, [r7, #0]
 80088ee:	6899      	ldr	r1, [r3, #8]
 80088f0:	683b      	ldr	r3, [r7, #0]
 80088f2:	685a      	ldr	r2, [r3, #4]
 80088f4:	683b      	ldr	r3, [r7, #0]
 80088f6:	68db      	ldr	r3, [r3, #12]
 80088f8:	f000 fd96 	bl	8009428 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	689a      	ldr	r2, [r3, #8]
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	681b      	ldr	r3, [r3, #0]
 8008906:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800890a:	609a      	str	r2, [r3, #8]
      break;
 800890c:	e13e      	b.n	8008b8c <HAL_TIM_ConfigClockSource+0x670>
    }

    case TIM_CLOCKSOURCE_TI1:
    {
      /* Check whether or not the timer instance supports external clock mode 1 */
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	4a55      	ldr	r2, [pc, #340]	; (8008a68 <HAL_TIM_ConfigClockSource+0x54c>)
 8008914:	4293      	cmp	r3, r2
 8008916:	d01d      	beq.n	8008954 <HAL_TIM_ConfigClockSource+0x438>
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	681b      	ldr	r3, [r3, #0]
 800891c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008920:	d018      	beq.n	8008954 <HAL_TIM_ConfigClockSource+0x438>
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	681b      	ldr	r3, [r3, #0]
 8008926:	4a51      	ldr	r2, [pc, #324]	; (8008a6c <HAL_TIM_ConfigClockSource+0x550>)
 8008928:	4293      	cmp	r3, r2
 800892a:	d013      	beq.n	8008954 <HAL_TIM_ConfigClockSource+0x438>
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	681b      	ldr	r3, [r3, #0]
 8008930:	4a4f      	ldr	r2, [pc, #316]	; (8008a70 <HAL_TIM_ConfigClockSource+0x554>)
 8008932:	4293      	cmp	r3, r2
 8008934:	d00e      	beq.n	8008954 <HAL_TIM_ConfigClockSource+0x438>
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	4a4e      	ldr	r2, [pc, #312]	; (8008a74 <HAL_TIM_ConfigClockSource+0x558>)
 800893c:	4293      	cmp	r3, r2
 800893e:	d009      	beq.n	8008954 <HAL_TIM_ConfigClockSource+0x438>
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	4a4c      	ldr	r2, [pc, #304]	; (8008a78 <HAL_TIM_ConfigClockSource+0x55c>)
 8008946:	4293      	cmp	r3, r2
 8008948:	d004      	beq.n	8008954 <HAL_TIM_ConfigClockSource+0x438>
 800894a:	f241 518b 	movw	r1, #5515	; 0x158b
 800894e:	484b      	ldr	r0, [pc, #300]	; (8008a7c <HAL_TIM_ConfigClockSource+0x560>)
 8008950:	f7fa f91b 	bl	8002b8a <assert_failed>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8008954:	683b      	ldr	r3, [r7, #0]
 8008956:	685b      	ldr	r3, [r3, #4]
 8008958:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800895c:	d014      	beq.n	8008988 <HAL_TIM_ConfigClockSource+0x46c>
 800895e:	683b      	ldr	r3, [r7, #0]
 8008960:	685b      	ldr	r3, [r3, #4]
 8008962:	2b00      	cmp	r3, #0
 8008964:	d010      	beq.n	8008988 <HAL_TIM_ConfigClockSource+0x46c>
 8008966:	683b      	ldr	r3, [r7, #0]
 8008968:	685b      	ldr	r3, [r3, #4]
 800896a:	2b00      	cmp	r3, #0
 800896c:	d00c      	beq.n	8008988 <HAL_TIM_ConfigClockSource+0x46c>
 800896e:	683b      	ldr	r3, [r7, #0]
 8008970:	685b      	ldr	r3, [r3, #4]
 8008972:	2b02      	cmp	r3, #2
 8008974:	d008      	beq.n	8008988 <HAL_TIM_ConfigClockSource+0x46c>
 8008976:	683b      	ldr	r3, [r7, #0]
 8008978:	685b      	ldr	r3, [r3, #4]
 800897a:	2b0a      	cmp	r3, #10
 800897c:	d004      	beq.n	8008988 <HAL_TIM_ConfigClockSource+0x46c>
 800897e:	f241 518e 	movw	r1, #5518	; 0x158e
 8008982:	483e      	ldr	r0, [pc, #248]	; (8008a7c <HAL_TIM_ConfigClockSource+0x560>)
 8008984:	f7fa f901 	bl	8002b8a <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8008988:	683b      	ldr	r3, [r7, #0]
 800898a:	68db      	ldr	r3, [r3, #12]
 800898c:	2b0f      	cmp	r3, #15
 800898e:	d904      	bls.n	800899a <HAL_TIM_ConfigClockSource+0x47e>
 8008990:	f241 518f 	movw	r1, #5519	; 0x158f
 8008994:	4839      	ldr	r0, [pc, #228]	; (8008a7c <HAL_TIM_ConfigClockSource+0x560>)
 8008996:	f7fa f8f8 	bl	8002b8a <assert_failed>

      TIM_TI1_ConfigInputStage(htim->Instance,
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	6818      	ldr	r0, [r3, #0]
 800899e:	683b      	ldr	r3, [r7, #0]
 80089a0:	6859      	ldr	r1, [r3, #4]
 80089a2:	683b      	ldr	r3, [r7, #0]
 80089a4:	68db      	ldr	r3, [r3, #12]
 80089a6:	461a      	mov	r2, r3
 80089a8:	f000 fcc4 	bl	8009334 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	2150      	movs	r1, #80	; 0x50
 80089b2:	4618      	mov	r0, r3
 80089b4:	f000 fd1d 	bl	80093f2 <TIM_ITRx_SetConfig>
      break;
 80089b8:	e0e8      	b.n	8008b8c <HAL_TIM_ConfigClockSource+0x670>
    }

    case TIM_CLOCKSOURCE_TI2:
    {
      /* Check whether or not the timer instance supports external clock mode 1 (ETRF)*/
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	681b      	ldr	r3, [r3, #0]
 80089be:	4a2a      	ldr	r2, [pc, #168]	; (8008a68 <HAL_TIM_ConfigClockSource+0x54c>)
 80089c0:	4293      	cmp	r3, r2
 80089c2:	d01d      	beq.n	8008a00 <HAL_TIM_ConfigClockSource+0x4e4>
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	681b      	ldr	r3, [r3, #0]
 80089c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80089cc:	d018      	beq.n	8008a00 <HAL_TIM_ConfigClockSource+0x4e4>
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	681b      	ldr	r3, [r3, #0]
 80089d2:	4a26      	ldr	r2, [pc, #152]	; (8008a6c <HAL_TIM_ConfigClockSource+0x550>)
 80089d4:	4293      	cmp	r3, r2
 80089d6:	d013      	beq.n	8008a00 <HAL_TIM_ConfigClockSource+0x4e4>
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	4a24      	ldr	r2, [pc, #144]	; (8008a70 <HAL_TIM_ConfigClockSource+0x554>)
 80089de:	4293      	cmp	r3, r2
 80089e0:	d00e      	beq.n	8008a00 <HAL_TIM_ConfigClockSource+0x4e4>
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	681b      	ldr	r3, [r3, #0]
 80089e6:	4a23      	ldr	r2, [pc, #140]	; (8008a74 <HAL_TIM_ConfigClockSource+0x558>)
 80089e8:	4293      	cmp	r3, r2
 80089ea:	d009      	beq.n	8008a00 <HAL_TIM_ConfigClockSource+0x4e4>
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	681b      	ldr	r3, [r3, #0]
 80089f0:	4a21      	ldr	r2, [pc, #132]	; (8008a78 <HAL_TIM_ConfigClockSource+0x55c>)
 80089f2:	4293      	cmp	r3, r2
 80089f4:	d004      	beq.n	8008a00 <HAL_TIM_ConfigClockSource+0x4e4>
 80089f6:	f241 519b 	movw	r1, #5531	; 0x159b
 80089fa:	4820      	ldr	r0, [pc, #128]	; (8008a7c <HAL_TIM_ConfigClockSource+0x560>)
 80089fc:	f7fa f8c5 	bl	8002b8a <assert_failed>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8008a00:	683b      	ldr	r3, [r7, #0]
 8008a02:	685b      	ldr	r3, [r3, #4]
 8008a04:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008a08:	d014      	beq.n	8008a34 <HAL_TIM_ConfigClockSource+0x518>
 8008a0a:	683b      	ldr	r3, [r7, #0]
 8008a0c:	685b      	ldr	r3, [r3, #4]
 8008a0e:	2b00      	cmp	r3, #0
 8008a10:	d010      	beq.n	8008a34 <HAL_TIM_ConfigClockSource+0x518>
 8008a12:	683b      	ldr	r3, [r7, #0]
 8008a14:	685b      	ldr	r3, [r3, #4]
 8008a16:	2b00      	cmp	r3, #0
 8008a18:	d00c      	beq.n	8008a34 <HAL_TIM_ConfigClockSource+0x518>
 8008a1a:	683b      	ldr	r3, [r7, #0]
 8008a1c:	685b      	ldr	r3, [r3, #4]
 8008a1e:	2b02      	cmp	r3, #2
 8008a20:	d008      	beq.n	8008a34 <HAL_TIM_ConfigClockSource+0x518>
 8008a22:	683b      	ldr	r3, [r7, #0]
 8008a24:	685b      	ldr	r3, [r3, #4]
 8008a26:	2b0a      	cmp	r3, #10
 8008a28:	d004      	beq.n	8008a34 <HAL_TIM_ConfigClockSource+0x518>
 8008a2a:	f241 519e 	movw	r1, #5534	; 0x159e
 8008a2e:	4813      	ldr	r0, [pc, #76]	; (8008a7c <HAL_TIM_ConfigClockSource+0x560>)
 8008a30:	f7fa f8ab 	bl	8002b8a <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8008a34:	683b      	ldr	r3, [r7, #0]
 8008a36:	68db      	ldr	r3, [r3, #12]
 8008a38:	2b0f      	cmp	r3, #15
 8008a3a:	d904      	bls.n	8008a46 <HAL_TIM_ConfigClockSource+0x52a>
 8008a3c:	f241 519f 	movw	r1, #5535	; 0x159f
 8008a40:	480e      	ldr	r0, [pc, #56]	; (8008a7c <HAL_TIM_ConfigClockSource+0x560>)
 8008a42:	f7fa f8a2 	bl	8002b8a <assert_failed>

      TIM_TI2_ConfigInputStage(htim->Instance,
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	6818      	ldr	r0, [r3, #0]
 8008a4a:	683b      	ldr	r3, [r7, #0]
 8008a4c:	6859      	ldr	r1, [r3, #4]
 8008a4e:	683b      	ldr	r3, [r7, #0]
 8008a50:	68db      	ldr	r3, [r3, #12]
 8008a52:	461a      	mov	r2, r3
 8008a54:	f000 fc9d 	bl	8009392 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	681b      	ldr	r3, [r3, #0]
 8008a5c:	2160      	movs	r1, #96	; 0x60
 8008a5e:	4618      	mov	r0, r3
 8008a60:	f000 fcc7 	bl	80093f2 <TIM_ITRx_SetConfig>
      break;
 8008a64:	e092      	b.n	8008b8c <HAL_TIM_ConfigClockSource+0x670>
 8008a66:	bf00      	nop
 8008a68:	40010000 	.word	0x40010000
 8008a6c:	40000400 	.word	0x40000400
 8008a70:	40000800 	.word	0x40000800
 8008a74:	40000c00 	.word	0x40000c00
 8008a78:	40010400 	.word	0x40010400
 8008a7c:	0801582c 	.word	0x0801582c
    }

    case TIM_CLOCKSOURCE_TI1ED:
    {
      /* Check whether or not the timer instance supports external clock mode 1 */
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	681b      	ldr	r3, [r3, #0]
 8008a84:	4a48      	ldr	r2, [pc, #288]	; (8008ba8 <HAL_TIM_ConfigClockSource+0x68c>)
 8008a86:	4293      	cmp	r3, r2
 8008a88:	d01d      	beq.n	8008ac6 <HAL_TIM_ConfigClockSource+0x5aa>
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	681b      	ldr	r3, [r3, #0]
 8008a8e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008a92:	d018      	beq.n	8008ac6 <HAL_TIM_ConfigClockSource+0x5aa>
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	681b      	ldr	r3, [r3, #0]
 8008a98:	4a44      	ldr	r2, [pc, #272]	; (8008bac <HAL_TIM_ConfigClockSource+0x690>)
 8008a9a:	4293      	cmp	r3, r2
 8008a9c:	d013      	beq.n	8008ac6 <HAL_TIM_ConfigClockSource+0x5aa>
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	681b      	ldr	r3, [r3, #0]
 8008aa2:	4a43      	ldr	r2, [pc, #268]	; (8008bb0 <HAL_TIM_ConfigClockSource+0x694>)
 8008aa4:	4293      	cmp	r3, r2
 8008aa6:	d00e      	beq.n	8008ac6 <HAL_TIM_ConfigClockSource+0x5aa>
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	681b      	ldr	r3, [r3, #0]
 8008aac:	4a41      	ldr	r2, [pc, #260]	; (8008bb4 <HAL_TIM_ConfigClockSource+0x698>)
 8008aae:	4293      	cmp	r3, r2
 8008ab0:	d009      	beq.n	8008ac6 <HAL_TIM_ConfigClockSource+0x5aa>
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	681b      	ldr	r3, [r3, #0]
 8008ab6:	4a40      	ldr	r2, [pc, #256]	; (8008bb8 <HAL_TIM_ConfigClockSource+0x69c>)
 8008ab8:	4293      	cmp	r3, r2
 8008aba:	d004      	beq.n	8008ac6 <HAL_TIM_ConfigClockSource+0x5aa>
 8008abc:	f241 51ab 	movw	r1, #5547	; 0x15ab
 8008ac0:	483e      	ldr	r0, [pc, #248]	; (8008bbc <HAL_TIM_ConfigClockSource+0x6a0>)
 8008ac2:	f7fa f862 	bl	8002b8a <assert_failed>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8008ac6:	683b      	ldr	r3, [r7, #0]
 8008ac8:	685b      	ldr	r3, [r3, #4]
 8008aca:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008ace:	d014      	beq.n	8008afa <HAL_TIM_ConfigClockSource+0x5de>
 8008ad0:	683b      	ldr	r3, [r7, #0]
 8008ad2:	685b      	ldr	r3, [r3, #4]
 8008ad4:	2b00      	cmp	r3, #0
 8008ad6:	d010      	beq.n	8008afa <HAL_TIM_ConfigClockSource+0x5de>
 8008ad8:	683b      	ldr	r3, [r7, #0]
 8008ada:	685b      	ldr	r3, [r3, #4]
 8008adc:	2b00      	cmp	r3, #0
 8008ade:	d00c      	beq.n	8008afa <HAL_TIM_ConfigClockSource+0x5de>
 8008ae0:	683b      	ldr	r3, [r7, #0]
 8008ae2:	685b      	ldr	r3, [r3, #4]
 8008ae4:	2b02      	cmp	r3, #2
 8008ae6:	d008      	beq.n	8008afa <HAL_TIM_ConfigClockSource+0x5de>
 8008ae8:	683b      	ldr	r3, [r7, #0]
 8008aea:	685b      	ldr	r3, [r3, #4]
 8008aec:	2b0a      	cmp	r3, #10
 8008aee:	d004      	beq.n	8008afa <HAL_TIM_ConfigClockSource+0x5de>
 8008af0:	f241 51ae 	movw	r1, #5550	; 0x15ae
 8008af4:	4831      	ldr	r0, [pc, #196]	; (8008bbc <HAL_TIM_ConfigClockSource+0x6a0>)
 8008af6:	f7fa f848 	bl	8002b8a <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8008afa:	683b      	ldr	r3, [r7, #0]
 8008afc:	68db      	ldr	r3, [r3, #12]
 8008afe:	2b0f      	cmp	r3, #15
 8008b00:	d904      	bls.n	8008b0c <HAL_TIM_ConfigClockSource+0x5f0>
 8008b02:	f241 51af 	movw	r1, #5551	; 0x15af
 8008b06:	482d      	ldr	r0, [pc, #180]	; (8008bbc <HAL_TIM_ConfigClockSource+0x6a0>)
 8008b08:	f7fa f83f 	bl	8002b8a <assert_failed>

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	6818      	ldr	r0, [r3, #0]
 8008b10:	683b      	ldr	r3, [r7, #0]
 8008b12:	6859      	ldr	r1, [r3, #4]
 8008b14:	683b      	ldr	r3, [r7, #0]
 8008b16:	68db      	ldr	r3, [r3, #12]
 8008b18:	461a      	mov	r2, r3
 8008b1a:	f000 fc0b 	bl	8009334 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	681b      	ldr	r3, [r3, #0]
 8008b22:	2140      	movs	r1, #64	; 0x40
 8008b24:	4618      	mov	r0, r3
 8008b26:	f000 fc64 	bl	80093f2 <TIM_ITRx_SetConfig>
      break;
 8008b2a:	e02f      	b.n	8008b8c <HAL_TIM_ConfigClockSource+0x670>
    case TIM_CLOCKSOURCE_ITR1:
    case TIM_CLOCKSOURCE_ITR2:
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	4a1d      	ldr	r2, [pc, #116]	; (8008ba8 <HAL_TIM_ConfigClockSource+0x68c>)
 8008b32:	4293      	cmp	r3, r2
 8008b34:	d01d      	beq.n	8008b72 <HAL_TIM_ConfigClockSource+0x656>
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	681b      	ldr	r3, [r3, #0]
 8008b3a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008b3e:	d018      	beq.n	8008b72 <HAL_TIM_ConfigClockSource+0x656>
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	681b      	ldr	r3, [r3, #0]
 8008b44:	4a19      	ldr	r2, [pc, #100]	; (8008bac <HAL_TIM_ConfigClockSource+0x690>)
 8008b46:	4293      	cmp	r3, r2
 8008b48:	d013      	beq.n	8008b72 <HAL_TIM_ConfigClockSource+0x656>
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	681b      	ldr	r3, [r3, #0]
 8008b4e:	4a18      	ldr	r2, [pc, #96]	; (8008bb0 <HAL_TIM_ConfigClockSource+0x694>)
 8008b50:	4293      	cmp	r3, r2
 8008b52:	d00e      	beq.n	8008b72 <HAL_TIM_ConfigClockSource+0x656>
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	681b      	ldr	r3, [r3, #0]
 8008b58:	4a16      	ldr	r2, [pc, #88]	; (8008bb4 <HAL_TIM_ConfigClockSource+0x698>)
 8008b5a:	4293      	cmp	r3, r2
 8008b5c:	d009      	beq.n	8008b72 <HAL_TIM_ConfigClockSource+0x656>
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	681b      	ldr	r3, [r3, #0]
 8008b62:	4a15      	ldr	r2, [pc, #84]	; (8008bb8 <HAL_TIM_ConfigClockSource+0x69c>)
 8008b64:	4293      	cmp	r3, r2
 8008b66:	d004      	beq.n	8008b72 <HAL_TIM_ConfigClockSource+0x656>
 8008b68:	f241 51be 	movw	r1, #5566	; 0x15be
 8008b6c:	4813      	ldr	r0, [pc, #76]	; (8008bbc <HAL_TIM_ConfigClockSource+0x6a0>)
 8008b6e:	f7fa f80c 	bl	8002b8a <assert_failed>

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	681a      	ldr	r2, [r3, #0]
 8008b76:	683b      	ldr	r3, [r7, #0]
 8008b78:	681b      	ldr	r3, [r3, #0]
 8008b7a:	4619      	mov	r1, r3
 8008b7c:	4610      	mov	r0, r2
 8008b7e:	f000 fc38 	bl	80093f2 <TIM_ITRx_SetConfig>
      break;
 8008b82:	e003      	b.n	8008b8c <HAL_TIM_ConfigClockSource+0x670>
    }

    default:
      status = HAL_ERROR;
 8008b84:	2301      	movs	r3, #1
 8008b86:	73fb      	strb	r3, [r7, #15]
      break;
 8008b88:	e000      	b.n	8008b8c <HAL_TIM_ConfigClockSource+0x670>
      break;
 8008b8a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	2201      	movs	r2, #1
 8008b90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	2200      	movs	r2, #0
 8008b98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008b9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b9e:	4618      	mov	r0, r3
 8008ba0:	3710      	adds	r7, #16
 8008ba2:	46bd      	mov	sp, r7
 8008ba4:	bd80      	pop	{r7, pc}
 8008ba6:	bf00      	nop
 8008ba8:	40010000 	.word	0x40010000
 8008bac:	40000400 	.word	0x40000400
 8008bb0:	40000800 	.word	0x40000800
 8008bb4:	40000c00 	.word	0x40000c00
 8008bb8:	40010400 	.word	0x40010400
 8008bbc:	0801582c 	.word	0x0801582c

08008bc0 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008bc0:	b480      	push	{r7}
 8008bc2:	b083      	sub	sp, #12
 8008bc4:	af00      	add	r7, sp, #0
 8008bc6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8008bc8:	bf00      	nop
 8008bca:	370c      	adds	r7, #12
 8008bcc:	46bd      	mov	sp, r7
 8008bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bd2:	4770      	bx	lr

08008bd4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008bd4:	b480      	push	{r7}
 8008bd6:	b083      	sub	sp, #12
 8008bd8:	af00      	add	r7, sp, #0
 8008bda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008bdc:	bf00      	nop
 8008bde:	370c      	adds	r7, #12
 8008be0:	46bd      	mov	sp, r7
 8008be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008be6:	4770      	bx	lr

08008be8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008be8:	b480      	push	{r7}
 8008bea:	b083      	sub	sp, #12
 8008bec:	af00      	add	r7, sp, #0
 8008bee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008bf0:	bf00      	nop
 8008bf2:	370c      	adds	r7, #12
 8008bf4:	46bd      	mov	sp, r7
 8008bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bfa:	4770      	bx	lr

08008bfc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008bfc:	b480      	push	{r7}
 8008bfe:	b083      	sub	sp, #12
 8008c00:	af00      	add	r7, sp, #0
 8008c02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008c04:	bf00      	nop
 8008c06:	370c      	adds	r7, #12
 8008c08:	46bd      	mov	sp, r7
 8008c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c0e:	4770      	bx	lr

08008c10 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008c10:	b480      	push	{r7}
 8008c12:	b083      	sub	sp, #12
 8008c14:	af00      	add	r7, sp, #0
 8008c16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008c18:	bf00      	nop
 8008c1a:	370c      	adds	r7, #12
 8008c1c:	46bd      	mov	sp, r7
 8008c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c22:	4770      	bx	lr

08008c24 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008c24:	b480      	push	{r7}
 8008c26:	b085      	sub	sp, #20
 8008c28:	af00      	add	r7, sp, #0
 8008c2a:	6078      	str	r0, [r7, #4]
 8008c2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	681b      	ldr	r3, [r3, #0]
 8008c32:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	4a40      	ldr	r2, [pc, #256]	; (8008d38 <TIM_Base_SetConfig+0x114>)
 8008c38:	4293      	cmp	r3, r2
 8008c3a:	d013      	beq.n	8008c64 <TIM_Base_SetConfig+0x40>
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008c42:	d00f      	beq.n	8008c64 <TIM_Base_SetConfig+0x40>
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	4a3d      	ldr	r2, [pc, #244]	; (8008d3c <TIM_Base_SetConfig+0x118>)
 8008c48:	4293      	cmp	r3, r2
 8008c4a:	d00b      	beq.n	8008c64 <TIM_Base_SetConfig+0x40>
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	4a3c      	ldr	r2, [pc, #240]	; (8008d40 <TIM_Base_SetConfig+0x11c>)
 8008c50:	4293      	cmp	r3, r2
 8008c52:	d007      	beq.n	8008c64 <TIM_Base_SetConfig+0x40>
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	4a3b      	ldr	r2, [pc, #236]	; (8008d44 <TIM_Base_SetConfig+0x120>)
 8008c58:	4293      	cmp	r3, r2
 8008c5a:	d003      	beq.n	8008c64 <TIM_Base_SetConfig+0x40>
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	4a3a      	ldr	r2, [pc, #232]	; (8008d48 <TIM_Base_SetConfig+0x124>)
 8008c60:	4293      	cmp	r3, r2
 8008c62:	d108      	bne.n	8008c76 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008c64:	68fb      	ldr	r3, [r7, #12]
 8008c66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008c6a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008c6c:	683b      	ldr	r3, [r7, #0]
 8008c6e:	685b      	ldr	r3, [r3, #4]
 8008c70:	68fa      	ldr	r2, [r7, #12]
 8008c72:	4313      	orrs	r3, r2
 8008c74:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	4a2f      	ldr	r2, [pc, #188]	; (8008d38 <TIM_Base_SetConfig+0x114>)
 8008c7a:	4293      	cmp	r3, r2
 8008c7c:	d02b      	beq.n	8008cd6 <TIM_Base_SetConfig+0xb2>
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008c84:	d027      	beq.n	8008cd6 <TIM_Base_SetConfig+0xb2>
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	4a2c      	ldr	r2, [pc, #176]	; (8008d3c <TIM_Base_SetConfig+0x118>)
 8008c8a:	4293      	cmp	r3, r2
 8008c8c:	d023      	beq.n	8008cd6 <TIM_Base_SetConfig+0xb2>
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	4a2b      	ldr	r2, [pc, #172]	; (8008d40 <TIM_Base_SetConfig+0x11c>)
 8008c92:	4293      	cmp	r3, r2
 8008c94:	d01f      	beq.n	8008cd6 <TIM_Base_SetConfig+0xb2>
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	4a2a      	ldr	r2, [pc, #168]	; (8008d44 <TIM_Base_SetConfig+0x120>)
 8008c9a:	4293      	cmp	r3, r2
 8008c9c:	d01b      	beq.n	8008cd6 <TIM_Base_SetConfig+0xb2>
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	4a29      	ldr	r2, [pc, #164]	; (8008d48 <TIM_Base_SetConfig+0x124>)
 8008ca2:	4293      	cmp	r3, r2
 8008ca4:	d017      	beq.n	8008cd6 <TIM_Base_SetConfig+0xb2>
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	4a28      	ldr	r2, [pc, #160]	; (8008d4c <TIM_Base_SetConfig+0x128>)
 8008caa:	4293      	cmp	r3, r2
 8008cac:	d013      	beq.n	8008cd6 <TIM_Base_SetConfig+0xb2>
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	4a27      	ldr	r2, [pc, #156]	; (8008d50 <TIM_Base_SetConfig+0x12c>)
 8008cb2:	4293      	cmp	r3, r2
 8008cb4:	d00f      	beq.n	8008cd6 <TIM_Base_SetConfig+0xb2>
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	4a26      	ldr	r2, [pc, #152]	; (8008d54 <TIM_Base_SetConfig+0x130>)
 8008cba:	4293      	cmp	r3, r2
 8008cbc:	d00b      	beq.n	8008cd6 <TIM_Base_SetConfig+0xb2>
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	4a25      	ldr	r2, [pc, #148]	; (8008d58 <TIM_Base_SetConfig+0x134>)
 8008cc2:	4293      	cmp	r3, r2
 8008cc4:	d007      	beq.n	8008cd6 <TIM_Base_SetConfig+0xb2>
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	4a24      	ldr	r2, [pc, #144]	; (8008d5c <TIM_Base_SetConfig+0x138>)
 8008cca:	4293      	cmp	r3, r2
 8008ccc:	d003      	beq.n	8008cd6 <TIM_Base_SetConfig+0xb2>
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	4a23      	ldr	r2, [pc, #140]	; (8008d60 <TIM_Base_SetConfig+0x13c>)
 8008cd2:	4293      	cmp	r3, r2
 8008cd4:	d108      	bne.n	8008ce8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008cd6:	68fb      	ldr	r3, [r7, #12]
 8008cd8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008cdc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008cde:	683b      	ldr	r3, [r7, #0]
 8008ce0:	68db      	ldr	r3, [r3, #12]
 8008ce2:	68fa      	ldr	r2, [r7, #12]
 8008ce4:	4313      	orrs	r3, r2
 8008ce6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008ce8:	68fb      	ldr	r3, [r7, #12]
 8008cea:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008cee:	683b      	ldr	r3, [r7, #0]
 8008cf0:	695b      	ldr	r3, [r3, #20]
 8008cf2:	4313      	orrs	r3, r2
 8008cf4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	68fa      	ldr	r2, [r7, #12]
 8008cfa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008cfc:	683b      	ldr	r3, [r7, #0]
 8008cfe:	689a      	ldr	r2, [r3, #8]
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008d04:	683b      	ldr	r3, [r7, #0]
 8008d06:	681a      	ldr	r2, [r3, #0]
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	4a0a      	ldr	r2, [pc, #40]	; (8008d38 <TIM_Base_SetConfig+0x114>)
 8008d10:	4293      	cmp	r3, r2
 8008d12:	d003      	beq.n	8008d1c <TIM_Base_SetConfig+0xf8>
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	4a0c      	ldr	r2, [pc, #48]	; (8008d48 <TIM_Base_SetConfig+0x124>)
 8008d18:	4293      	cmp	r3, r2
 8008d1a:	d103      	bne.n	8008d24 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008d1c:	683b      	ldr	r3, [r7, #0]
 8008d1e:	691a      	ldr	r2, [r3, #16]
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	2201      	movs	r2, #1
 8008d28:	615a      	str	r2, [r3, #20]
}
 8008d2a:	bf00      	nop
 8008d2c:	3714      	adds	r7, #20
 8008d2e:	46bd      	mov	sp, r7
 8008d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d34:	4770      	bx	lr
 8008d36:	bf00      	nop
 8008d38:	40010000 	.word	0x40010000
 8008d3c:	40000400 	.word	0x40000400
 8008d40:	40000800 	.word	0x40000800
 8008d44:	40000c00 	.word	0x40000c00
 8008d48:	40010400 	.word	0x40010400
 8008d4c:	40014000 	.word	0x40014000
 8008d50:	40014400 	.word	0x40014400
 8008d54:	40014800 	.word	0x40014800
 8008d58:	40001800 	.word	0x40001800
 8008d5c:	40001c00 	.word	0x40001c00
 8008d60:	40002000 	.word	0x40002000

08008d64 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008d64:	b580      	push	{r7, lr}
 8008d66:	b086      	sub	sp, #24
 8008d68:	af00      	add	r7, sp, #0
 8008d6a:	6078      	str	r0, [r7, #4]
 8008d6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	6a1b      	ldr	r3, [r3, #32]
 8008d72:	f023 0201 	bic.w	r2, r3, #1
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	6a1b      	ldr	r3, [r3, #32]
 8008d7e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	685b      	ldr	r3, [r3, #4]
 8008d84:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	699b      	ldr	r3, [r3, #24]
 8008d8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008d8c:	68fa      	ldr	r2, [r7, #12]
 8008d8e:	4b3f      	ldr	r3, [pc, #252]	; (8008e8c <TIM_OC1_SetConfig+0x128>)
 8008d90:	4013      	ands	r3, r2
 8008d92:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008d94:	68fb      	ldr	r3, [r7, #12]
 8008d96:	f023 0303 	bic.w	r3, r3, #3
 8008d9a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008d9c:	683b      	ldr	r3, [r7, #0]
 8008d9e:	681b      	ldr	r3, [r3, #0]
 8008da0:	68fa      	ldr	r2, [r7, #12]
 8008da2:	4313      	orrs	r3, r2
 8008da4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008da6:	697b      	ldr	r3, [r7, #20]
 8008da8:	f023 0302 	bic.w	r3, r3, #2
 8008dac:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008dae:	683b      	ldr	r3, [r7, #0]
 8008db0:	689b      	ldr	r3, [r3, #8]
 8008db2:	697a      	ldr	r2, [r7, #20]
 8008db4:	4313      	orrs	r3, r2
 8008db6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	4a35      	ldr	r2, [pc, #212]	; (8008e90 <TIM_OC1_SetConfig+0x12c>)
 8008dbc:	4293      	cmp	r3, r2
 8008dbe:	d003      	beq.n	8008dc8 <TIM_OC1_SetConfig+0x64>
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	4a34      	ldr	r2, [pc, #208]	; (8008e94 <TIM_OC1_SetConfig+0x130>)
 8008dc4:	4293      	cmp	r3, r2
 8008dc6:	d119      	bne.n	8008dfc <TIM_OC1_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 8008dc8:	683b      	ldr	r3, [r7, #0]
 8008dca:	68db      	ldr	r3, [r3, #12]
 8008dcc:	2b00      	cmp	r3, #0
 8008dce:	d008      	beq.n	8008de2 <TIM_OC1_SetConfig+0x7e>
 8008dd0:	683b      	ldr	r3, [r7, #0]
 8008dd2:	68db      	ldr	r3, [r3, #12]
 8008dd4:	2b08      	cmp	r3, #8
 8008dd6:	d004      	beq.n	8008de2 <TIM_OC1_SetConfig+0x7e>
 8008dd8:	f641 3167 	movw	r1, #7015	; 0x1b67
 8008ddc:	482e      	ldr	r0, [pc, #184]	; (8008e98 <TIM_OC1_SetConfig+0x134>)
 8008dde:	f7f9 fed4 	bl	8002b8a <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008de2:	697b      	ldr	r3, [r7, #20]
 8008de4:	f023 0308 	bic.w	r3, r3, #8
 8008de8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008dea:	683b      	ldr	r3, [r7, #0]
 8008dec:	68db      	ldr	r3, [r3, #12]
 8008dee:	697a      	ldr	r2, [r7, #20]
 8008df0:	4313      	orrs	r3, r2
 8008df2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008df4:	697b      	ldr	r3, [r7, #20]
 8008df6:	f023 0304 	bic.w	r3, r3, #4
 8008dfa:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	4a24      	ldr	r2, [pc, #144]	; (8008e90 <TIM_OC1_SetConfig+0x12c>)
 8008e00:	4293      	cmp	r3, r2
 8008e02:	d003      	beq.n	8008e0c <TIM_OC1_SetConfig+0xa8>
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	4a23      	ldr	r2, [pc, #140]	; (8008e94 <TIM_OC1_SetConfig+0x130>)
 8008e08:	4293      	cmp	r3, r2
 8008e0a:	d12d      	bne.n	8008e68 <TIM_OC1_SetConfig+0x104>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 8008e0c:	683b      	ldr	r3, [r7, #0]
 8008e0e:	699b      	ldr	r3, [r3, #24]
 8008e10:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008e14:	d008      	beq.n	8008e28 <TIM_OC1_SetConfig+0xc4>
 8008e16:	683b      	ldr	r3, [r7, #0]
 8008e18:	699b      	ldr	r3, [r3, #24]
 8008e1a:	2b00      	cmp	r3, #0
 8008e1c:	d004      	beq.n	8008e28 <TIM_OC1_SetConfig+0xc4>
 8008e1e:	f641 3174 	movw	r1, #7028	; 0x1b74
 8008e22:	481d      	ldr	r0, [pc, #116]	; (8008e98 <TIM_OC1_SetConfig+0x134>)
 8008e24:	f7f9 feb1 	bl	8002b8a <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 8008e28:	683b      	ldr	r3, [r7, #0]
 8008e2a:	695b      	ldr	r3, [r3, #20]
 8008e2c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008e30:	d008      	beq.n	8008e44 <TIM_OC1_SetConfig+0xe0>
 8008e32:	683b      	ldr	r3, [r7, #0]
 8008e34:	695b      	ldr	r3, [r3, #20]
 8008e36:	2b00      	cmp	r3, #0
 8008e38:	d004      	beq.n	8008e44 <TIM_OC1_SetConfig+0xe0>
 8008e3a:	f641 3175 	movw	r1, #7029	; 0x1b75
 8008e3e:	4816      	ldr	r0, [pc, #88]	; (8008e98 <TIM_OC1_SetConfig+0x134>)
 8008e40:	f7f9 fea3 	bl	8002b8a <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008e44:	693b      	ldr	r3, [r7, #16]
 8008e46:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008e4a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008e4c:	693b      	ldr	r3, [r7, #16]
 8008e4e:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008e52:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008e54:	683b      	ldr	r3, [r7, #0]
 8008e56:	695b      	ldr	r3, [r3, #20]
 8008e58:	693a      	ldr	r2, [r7, #16]
 8008e5a:	4313      	orrs	r3, r2
 8008e5c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008e5e:	683b      	ldr	r3, [r7, #0]
 8008e60:	699b      	ldr	r3, [r3, #24]
 8008e62:	693a      	ldr	r2, [r7, #16]
 8008e64:	4313      	orrs	r3, r2
 8008e66:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	693a      	ldr	r2, [r7, #16]
 8008e6c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	68fa      	ldr	r2, [r7, #12]
 8008e72:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008e74:	683b      	ldr	r3, [r7, #0]
 8008e76:	685a      	ldr	r2, [r3, #4]
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	697a      	ldr	r2, [r7, #20]
 8008e80:	621a      	str	r2, [r3, #32]
}
 8008e82:	bf00      	nop
 8008e84:	3718      	adds	r7, #24
 8008e86:	46bd      	mov	sp, r7
 8008e88:	bd80      	pop	{r7, pc}
 8008e8a:	bf00      	nop
 8008e8c:	fffeff8f 	.word	0xfffeff8f
 8008e90:	40010000 	.word	0x40010000
 8008e94:	40010400 	.word	0x40010400
 8008e98:	0801582c 	.word	0x0801582c

08008e9c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008e9c:	b580      	push	{r7, lr}
 8008e9e:	b086      	sub	sp, #24
 8008ea0:	af00      	add	r7, sp, #0
 8008ea2:	6078      	str	r0, [r7, #4]
 8008ea4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	6a1b      	ldr	r3, [r3, #32]
 8008eaa:	f023 0210 	bic.w	r2, r3, #16
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	6a1b      	ldr	r3, [r3, #32]
 8008eb6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	685b      	ldr	r3, [r3, #4]
 8008ebc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	699b      	ldr	r3, [r3, #24]
 8008ec2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008ec4:	68fa      	ldr	r2, [r7, #12]
 8008ec6:	4b41      	ldr	r3, [pc, #260]	; (8008fcc <TIM_OC2_SetConfig+0x130>)
 8008ec8:	4013      	ands	r3, r2
 8008eca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008ecc:	68fb      	ldr	r3, [r7, #12]
 8008ece:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008ed2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008ed4:	683b      	ldr	r3, [r7, #0]
 8008ed6:	681b      	ldr	r3, [r3, #0]
 8008ed8:	021b      	lsls	r3, r3, #8
 8008eda:	68fa      	ldr	r2, [r7, #12]
 8008edc:	4313      	orrs	r3, r2
 8008ede:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008ee0:	697b      	ldr	r3, [r7, #20]
 8008ee2:	f023 0320 	bic.w	r3, r3, #32
 8008ee6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008ee8:	683b      	ldr	r3, [r7, #0]
 8008eea:	689b      	ldr	r3, [r3, #8]
 8008eec:	011b      	lsls	r3, r3, #4
 8008eee:	697a      	ldr	r2, [r7, #20]
 8008ef0:	4313      	orrs	r3, r2
 8008ef2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	4a36      	ldr	r2, [pc, #216]	; (8008fd0 <TIM_OC2_SetConfig+0x134>)
 8008ef8:	4293      	cmp	r3, r2
 8008efa:	d003      	beq.n	8008f04 <TIM_OC2_SetConfig+0x68>
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	4a35      	ldr	r2, [pc, #212]	; (8008fd4 <TIM_OC2_SetConfig+0x138>)
 8008f00:	4293      	cmp	r3, r2
 8008f02:	d11a      	bne.n	8008f3a <TIM_OC2_SetConfig+0x9e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 8008f04:	683b      	ldr	r3, [r7, #0]
 8008f06:	68db      	ldr	r3, [r3, #12]
 8008f08:	2b00      	cmp	r3, #0
 8008f0a:	d008      	beq.n	8008f1e <TIM_OC2_SetConfig+0x82>
 8008f0c:	683b      	ldr	r3, [r7, #0]
 8008f0e:	68db      	ldr	r3, [r3, #12]
 8008f10:	2b08      	cmp	r3, #8
 8008f12:	d004      	beq.n	8008f1e <TIM_OC2_SetConfig+0x82>
 8008f14:	f641 31b2 	movw	r1, #7090	; 0x1bb2
 8008f18:	482f      	ldr	r0, [pc, #188]	; (8008fd8 <TIM_OC2_SetConfig+0x13c>)
 8008f1a:	f7f9 fe36 	bl	8002b8a <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008f1e:	697b      	ldr	r3, [r7, #20]
 8008f20:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008f24:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008f26:	683b      	ldr	r3, [r7, #0]
 8008f28:	68db      	ldr	r3, [r3, #12]
 8008f2a:	011b      	lsls	r3, r3, #4
 8008f2c:	697a      	ldr	r2, [r7, #20]
 8008f2e:	4313      	orrs	r3, r2
 8008f30:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008f32:	697b      	ldr	r3, [r7, #20]
 8008f34:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008f38:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	4a24      	ldr	r2, [pc, #144]	; (8008fd0 <TIM_OC2_SetConfig+0x134>)
 8008f3e:	4293      	cmp	r3, r2
 8008f40:	d003      	beq.n	8008f4a <TIM_OC2_SetConfig+0xae>
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	4a23      	ldr	r2, [pc, #140]	; (8008fd4 <TIM_OC2_SetConfig+0x138>)
 8008f46:	4293      	cmp	r3, r2
 8008f48:	d12f      	bne.n	8008faa <TIM_OC2_SetConfig+0x10e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 8008f4a:	683b      	ldr	r3, [r7, #0]
 8008f4c:	699b      	ldr	r3, [r3, #24]
 8008f4e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008f52:	d008      	beq.n	8008f66 <TIM_OC2_SetConfig+0xca>
 8008f54:	683b      	ldr	r3, [r7, #0]
 8008f56:	699b      	ldr	r3, [r3, #24]
 8008f58:	2b00      	cmp	r3, #0
 8008f5a:	d004      	beq.n	8008f66 <TIM_OC2_SetConfig+0xca>
 8008f5c:	f44f 51de 	mov.w	r1, #7104	; 0x1bc0
 8008f60:	481d      	ldr	r0, [pc, #116]	; (8008fd8 <TIM_OC2_SetConfig+0x13c>)
 8008f62:	f7f9 fe12 	bl	8002b8a <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 8008f66:	683b      	ldr	r3, [r7, #0]
 8008f68:	695b      	ldr	r3, [r3, #20]
 8008f6a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008f6e:	d008      	beq.n	8008f82 <TIM_OC2_SetConfig+0xe6>
 8008f70:	683b      	ldr	r3, [r7, #0]
 8008f72:	695b      	ldr	r3, [r3, #20]
 8008f74:	2b00      	cmp	r3, #0
 8008f76:	d004      	beq.n	8008f82 <TIM_OC2_SetConfig+0xe6>
 8008f78:	f641 31c1 	movw	r1, #7105	; 0x1bc1
 8008f7c:	4816      	ldr	r0, [pc, #88]	; (8008fd8 <TIM_OC2_SetConfig+0x13c>)
 8008f7e:	f7f9 fe04 	bl	8002b8a <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008f82:	693b      	ldr	r3, [r7, #16]
 8008f84:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008f88:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008f8a:	693b      	ldr	r3, [r7, #16]
 8008f8c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008f90:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008f92:	683b      	ldr	r3, [r7, #0]
 8008f94:	695b      	ldr	r3, [r3, #20]
 8008f96:	009b      	lsls	r3, r3, #2
 8008f98:	693a      	ldr	r2, [r7, #16]
 8008f9a:	4313      	orrs	r3, r2
 8008f9c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008f9e:	683b      	ldr	r3, [r7, #0]
 8008fa0:	699b      	ldr	r3, [r3, #24]
 8008fa2:	009b      	lsls	r3, r3, #2
 8008fa4:	693a      	ldr	r2, [r7, #16]
 8008fa6:	4313      	orrs	r3, r2
 8008fa8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	693a      	ldr	r2, [r7, #16]
 8008fae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	68fa      	ldr	r2, [r7, #12]
 8008fb4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008fb6:	683b      	ldr	r3, [r7, #0]
 8008fb8:	685a      	ldr	r2, [r3, #4]
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	697a      	ldr	r2, [r7, #20]
 8008fc2:	621a      	str	r2, [r3, #32]
}
 8008fc4:	bf00      	nop
 8008fc6:	3718      	adds	r7, #24
 8008fc8:	46bd      	mov	sp, r7
 8008fca:	bd80      	pop	{r7, pc}
 8008fcc:	feff8fff 	.word	0xfeff8fff
 8008fd0:	40010000 	.word	0x40010000
 8008fd4:	40010400 	.word	0x40010400
 8008fd8:	0801582c 	.word	0x0801582c

08008fdc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008fdc:	b580      	push	{r7, lr}
 8008fde:	b086      	sub	sp, #24
 8008fe0:	af00      	add	r7, sp, #0
 8008fe2:	6078      	str	r0, [r7, #4]
 8008fe4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	6a1b      	ldr	r3, [r3, #32]
 8008fea:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	6a1b      	ldr	r3, [r3, #32]
 8008ff6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	685b      	ldr	r3, [r3, #4]
 8008ffc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	69db      	ldr	r3, [r3, #28]
 8009002:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8009004:	68fa      	ldr	r2, [r7, #12]
 8009006:	4b41      	ldr	r3, [pc, #260]	; (800910c <TIM_OC3_SetConfig+0x130>)
 8009008:	4013      	ands	r3, r2
 800900a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800900c:	68fb      	ldr	r3, [r7, #12]
 800900e:	f023 0303 	bic.w	r3, r3, #3
 8009012:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009014:	683b      	ldr	r3, [r7, #0]
 8009016:	681b      	ldr	r3, [r3, #0]
 8009018:	68fa      	ldr	r2, [r7, #12]
 800901a:	4313      	orrs	r3, r2
 800901c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800901e:	697b      	ldr	r3, [r7, #20]
 8009020:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009024:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8009026:	683b      	ldr	r3, [r7, #0]
 8009028:	689b      	ldr	r3, [r3, #8]
 800902a:	021b      	lsls	r3, r3, #8
 800902c:	697a      	ldr	r2, [r7, #20]
 800902e:	4313      	orrs	r3, r2
 8009030:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	4a36      	ldr	r2, [pc, #216]	; (8009110 <TIM_OC3_SetConfig+0x134>)
 8009036:	4293      	cmp	r3, r2
 8009038:	d003      	beq.n	8009042 <TIM_OC3_SetConfig+0x66>
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	4a35      	ldr	r2, [pc, #212]	; (8009114 <TIM_OC3_SetConfig+0x138>)
 800903e:	4293      	cmp	r3, r2
 8009040:	d11a      	bne.n	8009078 <TIM_OC3_SetConfig+0x9c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 8009042:	683b      	ldr	r3, [r7, #0]
 8009044:	68db      	ldr	r3, [r3, #12]
 8009046:	2b00      	cmp	r3, #0
 8009048:	d008      	beq.n	800905c <TIM_OC3_SetConfig+0x80>
 800904a:	683b      	ldr	r3, [r7, #0]
 800904c:	68db      	ldr	r3, [r3, #12]
 800904e:	2b08      	cmp	r3, #8
 8009050:	d004      	beq.n	800905c <TIM_OC3_SetConfig+0x80>
 8009052:	f641 31fd 	movw	r1, #7165	; 0x1bfd
 8009056:	4830      	ldr	r0, [pc, #192]	; (8009118 <TIM_OC3_SetConfig+0x13c>)
 8009058:	f7f9 fd97 	bl	8002b8a <assert_failed>

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800905c:	697b      	ldr	r3, [r7, #20]
 800905e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009062:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8009064:	683b      	ldr	r3, [r7, #0]
 8009066:	68db      	ldr	r3, [r3, #12]
 8009068:	021b      	lsls	r3, r3, #8
 800906a:	697a      	ldr	r2, [r7, #20]
 800906c:	4313      	orrs	r3, r2
 800906e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8009070:	697b      	ldr	r3, [r7, #20]
 8009072:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009076:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	4a25      	ldr	r2, [pc, #148]	; (8009110 <TIM_OC3_SetConfig+0x134>)
 800907c:	4293      	cmp	r3, r2
 800907e:	d003      	beq.n	8009088 <TIM_OC3_SetConfig+0xac>
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	4a24      	ldr	r2, [pc, #144]	; (8009114 <TIM_OC3_SetConfig+0x138>)
 8009084:	4293      	cmp	r3, r2
 8009086:	d12f      	bne.n	80090e8 <TIM_OC3_SetConfig+0x10c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 8009088:	683b      	ldr	r3, [r7, #0]
 800908a:	699b      	ldr	r3, [r3, #24]
 800908c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009090:	d008      	beq.n	80090a4 <TIM_OC3_SetConfig+0xc8>
 8009092:	683b      	ldr	r3, [r7, #0]
 8009094:	699b      	ldr	r3, [r3, #24]
 8009096:	2b00      	cmp	r3, #0
 8009098:	d004      	beq.n	80090a4 <TIM_OC3_SetConfig+0xc8>
 800909a:	f641 410a 	movw	r1, #7178	; 0x1c0a
 800909e:	481e      	ldr	r0, [pc, #120]	; (8009118 <TIM_OC3_SetConfig+0x13c>)
 80090a0:	f7f9 fd73 	bl	8002b8a <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 80090a4:	683b      	ldr	r3, [r7, #0]
 80090a6:	695b      	ldr	r3, [r3, #20]
 80090a8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80090ac:	d008      	beq.n	80090c0 <TIM_OC3_SetConfig+0xe4>
 80090ae:	683b      	ldr	r3, [r7, #0]
 80090b0:	695b      	ldr	r3, [r3, #20]
 80090b2:	2b00      	cmp	r3, #0
 80090b4:	d004      	beq.n	80090c0 <TIM_OC3_SetConfig+0xe4>
 80090b6:	f641 410b 	movw	r1, #7179	; 0x1c0b
 80090ba:	4817      	ldr	r0, [pc, #92]	; (8009118 <TIM_OC3_SetConfig+0x13c>)
 80090bc:	f7f9 fd65 	bl	8002b8a <assert_failed>

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80090c0:	693b      	ldr	r3, [r7, #16]
 80090c2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80090c6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80090c8:	693b      	ldr	r3, [r7, #16]
 80090ca:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80090ce:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80090d0:	683b      	ldr	r3, [r7, #0]
 80090d2:	695b      	ldr	r3, [r3, #20]
 80090d4:	011b      	lsls	r3, r3, #4
 80090d6:	693a      	ldr	r2, [r7, #16]
 80090d8:	4313      	orrs	r3, r2
 80090da:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80090dc:	683b      	ldr	r3, [r7, #0]
 80090de:	699b      	ldr	r3, [r3, #24]
 80090e0:	011b      	lsls	r3, r3, #4
 80090e2:	693a      	ldr	r2, [r7, #16]
 80090e4:	4313      	orrs	r3, r2
 80090e6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	693a      	ldr	r2, [r7, #16]
 80090ec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	68fa      	ldr	r2, [r7, #12]
 80090f2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80090f4:	683b      	ldr	r3, [r7, #0]
 80090f6:	685a      	ldr	r2, [r3, #4]
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	697a      	ldr	r2, [r7, #20]
 8009100:	621a      	str	r2, [r3, #32]
}
 8009102:	bf00      	nop
 8009104:	3718      	adds	r7, #24
 8009106:	46bd      	mov	sp, r7
 8009108:	bd80      	pop	{r7, pc}
 800910a:	bf00      	nop
 800910c:	fffeff8f 	.word	0xfffeff8f
 8009110:	40010000 	.word	0x40010000
 8009114:	40010400 	.word	0x40010400
 8009118:	0801582c 	.word	0x0801582c

0800911c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800911c:	b580      	push	{r7, lr}
 800911e:	b086      	sub	sp, #24
 8009120:	af00      	add	r7, sp, #0
 8009122:	6078      	str	r0, [r7, #4]
 8009124:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	6a1b      	ldr	r3, [r3, #32]
 800912a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	6a1b      	ldr	r3, [r3, #32]
 8009136:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	685b      	ldr	r3, [r3, #4]
 800913c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	69db      	ldr	r3, [r3, #28]
 8009142:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8009144:	68fa      	ldr	r2, [r7, #12]
 8009146:	4b24      	ldr	r3, [pc, #144]	; (80091d8 <TIM_OC4_SetConfig+0xbc>)
 8009148:	4013      	ands	r3, r2
 800914a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800914c:	68fb      	ldr	r3, [r7, #12]
 800914e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009152:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009154:	683b      	ldr	r3, [r7, #0]
 8009156:	681b      	ldr	r3, [r3, #0]
 8009158:	021b      	lsls	r3, r3, #8
 800915a:	68fa      	ldr	r2, [r7, #12]
 800915c:	4313      	orrs	r3, r2
 800915e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8009160:	693b      	ldr	r3, [r7, #16]
 8009162:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009166:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009168:	683b      	ldr	r3, [r7, #0]
 800916a:	689b      	ldr	r3, [r3, #8]
 800916c:	031b      	lsls	r3, r3, #12
 800916e:	693a      	ldr	r2, [r7, #16]
 8009170:	4313      	orrs	r3, r2
 8009172:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	4a19      	ldr	r2, [pc, #100]	; (80091dc <TIM_OC4_SetConfig+0xc0>)
 8009178:	4293      	cmp	r3, r2
 800917a:	d003      	beq.n	8009184 <TIM_OC4_SetConfig+0x68>
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	4a18      	ldr	r2, [pc, #96]	; (80091e0 <TIM_OC4_SetConfig+0xc4>)
 8009180:	4293      	cmp	r3, r2
 8009182:	d117      	bne.n	80091b4 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 8009184:	683b      	ldr	r3, [r7, #0]
 8009186:	695b      	ldr	r3, [r3, #20]
 8009188:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800918c:	d008      	beq.n	80091a0 <TIM_OC4_SetConfig+0x84>
 800918e:	683b      	ldr	r3, [r7, #0]
 8009190:	695b      	ldr	r3, [r3, #20]
 8009192:	2b00      	cmp	r3, #0
 8009194:	d004      	beq.n	80091a0 <TIM_OC4_SetConfig+0x84>
 8009196:	f641 4149 	movw	r1, #7241	; 0x1c49
 800919a:	4812      	ldr	r0, [pc, #72]	; (80091e4 <TIM_OC4_SetConfig+0xc8>)
 800919c:	f7f9 fcf5 	bl	8002b8a <assert_failed>

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80091a0:	697b      	ldr	r3, [r7, #20]
 80091a2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80091a6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80091a8:	683b      	ldr	r3, [r7, #0]
 80091aa:	695b      	ldr	r3, [r3, #20]
 80091ac:	019b      	lsls	r3, r3, #6
 80091ae:	697a      	ldr	r2, [r7, #20]
 80091b0:	4313      	orrs	r3, r2
 80091b2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	697a      	ldr	r2, [r7, #20]
 80091b8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	68fa      	ldr	r2, [r7, #12]
 80091be:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80091c0:	683b      	ldr	r3, [r7, #0]
 80091c2:	685a      	ldr	r2, [r3, #4]
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	693a      	ldr	r2, [r7, #16]
 80091cc:	621a      	str	r2, [r3, #32]
}
 80091ce:	bf00      	nop
 80091d0:	3718      	adds	r7, #24
 80091d2:	46bd      	mov	sp, r7
 80091d4:	bd80      	pop	{r7, pc}
 80091d6:	bf00      	nop
 80091d8:	feff8fff 	.word	0xfeff8fff
 80091dc:	40010000 	.word	0x40010000
 80091e0:	40010400 	.word	0x40010400
 80091e4:	0801582c 	.word	0x0801582c

080091e8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80091e8:	b480      	push	{r7}
 80091ea:	b087      	sub	sp, #28
 80091ec:	af00      	add	r7, sp, #0
 80091ee:	6078      	str	r0, [r7, #4]
 80091f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	6a1b      	ldr	r3, [r3, #32]
 80091f6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	6a1b      	ldr	r3, [r3, #32]
 8009202:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	685b      	ldr	r3, [r3, #4]
 8009208:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800920e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8009210:	68fa      	ldr	r2, [r7, #12]
 8009212:	4b1b      	ldr	r3, [pc, #108]	; (8009280 <TIM_OC5_SetConfig+0x98>)
 8009214:	4013      	ands	r3, r2
 8009216:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009218:	683b      	ldr	r3, [r7, #0]
 800921a:	681b      	ldr	r3, [r3, #0]
 800921c:	68fa      	ldr	r2, [r7, #12]
 800921e:	4313      	orrs	r3, r2
 8009220:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8009222:	693b      	ldr	r3, [r7, #16]
 8009224:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8009228:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800922a:	683b      	ldr	r3, [r7, #0]
 800922c:	689b      	ldr	r3, [r3, #8]
 800922e:	041b      	lsls	r3, r3, #16
 8009230:	693a      	ldr	r2, [r7, #16]
 8009232:	4313      	orrs	r3, r2
 8009234:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	4a12      	ldr	r2, [pc, #72]	; (8009284 <TIM_OC5_SetConfig+0x9c>)
 800923a:	4293      	cmp	r3, r2
 800923c:	d003      	beq.n	8009246 <TIM_OC5_SetConfig+0x5e>
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	4a11      	ldr	r2, [pc, #68]	; (8009288 <TIM_OC5_SetConfig+0xa0>)
 8009242:	4293      	cmp	r3, r2
 8009244:	d109      	bne.n	800925a <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8009246:	697b      	ldr	r3, [r7, #20]
 8009248:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800924c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800924e:	683b      	ldr	r3, [r7, #0]
 8009250:	695b      	ldr	r3, [r3, #20]
 8009252:	021b      	lsls	r3, r3, #8
 8009254:	697a      	ldr	r2, [r7, #20]
 8009256:	4313      	orrs	r3, r2
 8009258:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	697a      	ldr	r2, [r7, #20]
 800925e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	68fa      	ldr	r2, [r7, #12]
 8009264:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8009266:	683b      	ldr	r3, [r7, #0]
 8009268:	685a      	ldr	r2, [r3, #4]
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	693a      	ldr	r2, [r7, #16]
 8009272:	621a      	str	r2, [r3, #32]
}
 8009274:	bf00      	nop
 8009276:	371c      	adds	r7, #28
 8009278:	46bd      	mov	sp, r7
 800927a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800927e:	4770      	bx	lr
 8009280:	fffeff8f 	.word	0xfffeff8f
 8009284:	40010000 	.word	0x40010000
 8009288:	40010400 	.word	0x40010400

0800928c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800928c:	b480      	push	{r7}
 800928e:	b087      	sub	sp, #28
 8009290:	af00      	add	r7, sp, #0
 8009292:	6078      	str	r0, [r7, #4]
 8009294:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	6a1b      	ldr	r3, [r3, #32]
 800929a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	6a1b      	ldr	r3, [r3, #32]
 80092a6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	685b      	ldr	r3, [r3, #4]
 80092ac:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80092b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80092b4:	68fa      	ldr	r2, [r7, #12]
 80092b6:	4b1c      	ldr	r3, [pc, #112]	; (8009328 <TIM_OC6_SetConfig+0x9c>)
 80092b8:	4013      	ands	r3, r2
 80092ba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80092bc:	683b      	ldr	r3, [r7, #0]
 80092be:	681b      	ldr	r3, [r3, #0]
 80092c0:	021b      	lsls	r3, r3, #8
 80092c2:	68fa      	ldr	r2, [r7, #12]
 80092c4:	4313      	orrs	r3, r2
 80092c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80092c8:	693b      	ldr	r3, [r7, #16]
 80092ca:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80092ce:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80092d0:	683b      	ldr	r3, [r7, #0]
 80092d2:	689b      	ldr	r3, [r3, #8]
 80092d4:	051b      	lsls	r3, r3, #20
 80092d6:	693a      	ldr	r2, [r7, #16]
 80092d8:	4313      	orrs	r3, r2
 80092da:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	4a13      	ldr	r2, [pc, #76]	; (800932c <TIM_OC6_SetConfig+0xa0>)
 80092e0:	4293      	cmp	r3, r2
 80092e2:	d003      	beq.n	80092ec <TIM_OC6_SetConfig+0x60>
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	4a12      	ldr	r2, [pc, #72]	; (8009330 <TIM_OC6_SetConfig+0xa4>)
 80092e8:	4293      	cmp	r3, r2
 80092ea:	d109      	bne.n	8009300 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80092ec:	697b      	ldr	r3, [r7, #20]
 80092ee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80092f2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80092f4:	683b      	ldr	r3, [r7, #0]
 80092f6:	695b      	ldr	r3, [r3, #20]
 80092f8:	029b      	lsls	r3, r3, #10
 80092fa:	697a      	ldr	r2, [r7, #20]
 80092fc:	4313      	orrs	r3, r2
 80092fe:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	697a      	ldr	r2, [r7, #20]
 8009304:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	68fa      	ldr	r2, [r7, #12]
 800930a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800930c:	683b      	ldr	r3, [r7, #0]
 800930e:	685a      	ldr	r2, [r3, #4]
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	693a      	ldr	r2, [r7, #16]
 8009318:	621a      	str	r2, [r3, #32]
}
 800931a:	bf00      	nop
 800931c:	371c      	adds	r7, #28
 800931e:	46bd      	mov	sp, r7
 8009320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009324:	4770      	bx	lr
 8009326:	bf00      	nop
 8009328:	feff8fff 	.word	0xfeff8fff
 800932c:	40010000 	.word	0x40010000
 8009330:	40010400 	.word	0x40010400

08009334 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009334:	b480      	push	{r7}
 8009336:	b087      	sub	sp, #28
 8009338:	af00      	add	r7, sp, #0
 800933a:	60f8      	str	r0, [r7, #12]
 800933c:	60b9      	str	r1, [r7, #8]
 800933e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009340:	68fb      	ldr	r3, [r7, #12]
 8009342:	6a1b      	ldr	r3, [r3, #32]
 8009344:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009346:	68fb      	ldr	r3, [r7, #12]
 8009348:	6a1b      	ldr	r3, [r3, #32]
 800934a:	f023 0201 	bic.w	r2, r3, #1
 800934e:	68fb      	ldr	r3, [r7, #12]
 8009350:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009352:	68fb      	ldr	r3, [r7, #12]
 8009354:	699b      	ldr	r3, [r3, #24]
 8009356:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009358:	693b      	ldr	r3, [r7, #16]
 800935a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800935e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	011b      	lsls	r3, r3, #4
 8009364:	693a      	ldr	r2, [r7, #16]
 8009366:	4313      	orrs	r3, r2
 8009368:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800936a:	697b      	ldr	r3, [r7, #20]
 800936c:	f023 030a 	bic.w	r3, r3, #10
 8009370:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8009372:	697a      	ldr	r2, [r7, #20]
 8009374:	68bb      	ldr	r3, [r7, #8]
 8009376:	4313      	orrs	r3, r2
 8009378:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800937a:	68fb      	ldr	r3, [r7, #12]
 800937c:	693a      	ldr	r2, [r7, #16]
 800937e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009380:	68fb      	ldr	r3, [r7, #12]
 8009382:	697a      	ldr	r2, [r7, #20]
 8009384:	621a      	str	r2, [r3, #32]
}
 8009386:	bf00      	nop
 8009388:	371c      	adds	r7, #28
 800938a:	46bd      	mov	sp, r7
 800938c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009390:	4770      	bx	lr

08009392 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009392:	b480      	push	{r7}
 8009394:	b087      	sub	sp, #28
 8009396:	af00      	add	r7, sp, #0
 8009398:	60f8      	str	r0, [r7, #12]
 800939a:	60b9      	str	r1, [r7, #8]
 800939c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800939e:	68fb      	ldr	r3, [r7, #12]
 80093a0:	6a1b      	ldr	r3, [r3, #32]
 80093a2:	f023 0210 	bic.w	r2, r3, #16
 80093a6:	68fb      	ldr	r3, [r7, #12]
 80093a8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80093aa:	68fb      	ldr	r3, [r7, #12]
 80093ac:	699b      	ldr	r3, [r3, #24]
 80093ae:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80093b0:	68fb      	ldr	r3, [r7, #12]
 80093b2:	6a1b      	ldr	r3, [r3, #32]
 80093b4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80093b6:	697b      	ldr	r3, [r7, #20]
 80093b8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80093bc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	031b      	lsls	r3, r3, #12
 80093c2:	697a      	ldr	r2, [r7, #20]
 80093c4:	4313      	orrs	r3, r2
 80093c6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80093c8:	693b      	ldr	r3, [r7, #16]
 80093ca:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80093ce:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80093d0:	68bb      	ldr	r3, [r7, #8]
 80093d2:	011b      	lsls	r3, r3, #4
 80093d4:	693a      	ldr	r2, [r7, #16]
 80093d6:	4313      	orrs	r3, r2
 80093d8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80093da:	68fb      	ldr	r3, [r7, #12]
 80093dc:	697a      	ldr	r2, [r7, #20]
 80093de:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80093e0:	68fb      	ldr	r3, [r7, #12]
 80093e2:	693a      	ldr	r2, [r7, #16]
 80093e4:	621a      	str	r2, [r3, #32]
}
 80093e6:	bf00      	nop
 80093e8:	371c      	adds	r7, #28
 80093ea:	46bd      	mov	sp, r7
 80093ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093f0:	4770      	bx	lr

080093f2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80093f2:	b480      	push	{r7}
 80093f4:	b085      	sub	sp, #20
 80093f6:	af00      	add	r7, sp, #0
 80093f8:	6078      	str	r0, [r7, #4]
 80093fa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	689b      	ldr	r3, [r3, #8]
 8009400:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009402:	68fb      	ldr	r3, [r7, #12]
 8009404:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009408:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800940a:	683a      	ldr	r2, [r7, #0]
 800940c:	68fb      	ldr	r3, [r7, #12]
 800940e:	4313      	orrs	r3, r2
 8009410:	f043 0307 	orr.w	r3, r3, #7
 8009414:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	68fa      	ldr	r2, [r7, #12]
 800941a:	609a      	str	r2, [r3, #8]
}
 800941c:	bf00      	nop
 800941e:	3714      	adds	r7, #20
 8009420:	46bd      	mov	sp, r7
 8009422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009426:	4770      	bx	lr

08009428 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009428:	b480      	push	{r7}
 800942a:	b087      	sub	sp, #28
 800942c:	af00      	add	r7, sp, #0
 800942e:	60f8      	str	r0, [r7, #12]
 8009430:	60b9      	str	r1, [r7, #8]
 8009432:	607a      	str	r2, [r7, #4]
 8009434:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009436:	68fb      	ldr	r3, [r7, #12]
 8009438:	689b      	ldr	r3, [r3, #8]
 800943a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800943c:	697b      	ldr	r3, [r7, #20]
 800943e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009442:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009444:	683b      	ldr	r3, [r7, #0]
 8009446:	021a      	lsls	r2, r3, #8
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	431a      	orrs	r2, r3
 800944c:	68bb      	ldr	r3, [r7, #8]
 800944e:	4313      	orrs	r3, r2
 8009450:	697a      	ldr	r2, [r7, #20]
 8009452:	4313      	orrs	r3, r2
 8009454:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009456:	68fb      	ldr	r3, [r7, #12]
 8009458:	697a      	ldr	r2, [r7, #20]
 800945a:	609a      	str	r2, [r3, #8]
}
 800945c:	bf00      	nop
 800945e:	371c      	adds	r7, #28
 8009460:	46bd      	mov	sp, r7
 8009462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009466:	4770      	bx	lr

08009468 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8009468:	b580      	push	{r7, lr}
 800946a:	b086      	sub	sp, #24
 800946c:	af00      	add	r7, sp, #0
 800946e:	60f8      	str	r0, [r7, #12]
 8009470:	60b9      	str	r1, [r7, #8]
 8009472:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
 8009474:	68fb      	ldr	r3, [r7, #12]
 8009476:	4a35      	ldr	r2, [pc, #212]	; (800954c <TIM_CCxChannelCmd+0xe4>)
 8009478:	4293      	cmp	r3, r2
 800947a:	d030      	beq.n	80094de <TIM_CCxChannelCmd+0x76>
 800947c:	68fb      	ldr	r3, [r7, #12]
 800947e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009482:	d02c      	beq.n	80094de <TIM_CCxChannelCmd+0x76>
 8009484:	68fb      	ldr	r3, [r7, #12]
 8009486:	4a32      	ldr	r2, [pc, #200]	; (8009550 <TIM_CCxChannelCmd+0xe8>)
 8009488:	4293      	cmp	r3, r2
 800948a:	d028      	beq.n	80094de <TIM_CCxChannelCmd+0x76>
 800948c:	68fb      	ldr	r3, [r7, #12]
 800948e:	4a31      	ldr	r2, [pc, #196]	; (8009554 <TIM_CCxChannelCmd+0xec>)
 8009490:	4293      	cmp	r3, r2
 8009492:	d024      	beq.n	80094de <TIM_CCxChannelCmd+0x76>
 8009494:	68fb      	ldr	r3, [r7, #12]
 8009496:	4a30      	ldr	r2, [pc, #192]	; (8009558 <TIM_CCxChannelCmd+0xf0>)
 8009498:	4293      	cmp	r3, r2
 800949a:	d020      	beq.n	80094de <TIM_CCxChannelCmd+0x76>
 800949c:	68fb      	ldr	r3, [r7, #12]
 800949e:	4a2f      	ldr	r2, [pc, #188]	; (800955c <TIM_CCxChannelCmd+0xf4>)
 80094a0:	4293      	cmp	r3, r2
 80094a2:	d01c      	beq.n	80094de <TIM_CCxChannelCmd+0x76>
 80094a4:	68fb      	ldr	r3, [r7, #12]
 80094a6:	4a2e      	ldr	r2, [pc, #184]	; (8009560 <TIM_CCxChannelCmd+0xf8>)
 80094a8:	4293      	cmp	r3, r2
 80094aa:	d018      	beq.n	80094de <TIM_CCxChannelCmd+0x76>
 80094ac:	68fb      	ldr	r3, [r7, #12]
 80094ae:	4a2d      	ldr	r2, [pc, #180]	; (8009564 <TIM_CCxChannelCmd+0xfc>)
 80094b0:	4293      	cmp	r3, r2
 80094b2:	d014      	beq.n	80094de <TIM_CCxChannelCmd+0x76>
 80094b4:	68fb      	ldr	r3, [r7, #12]
 80094b6:	4a2c      	ldr	r2, [pc, #176]	; (8009568 <TIM_CCxChannelCmd+0x100>)
 80094b8:	4293      	cmp	r3, r2
 80094ba:	d010      	beq.n	80094de <TIM_CCxChannelCmd+0x76>
 80094bc:	68fb      	ldr	r3, [r7, #12]
 80094be:	4a2b      	ldr	r2, [pc, #172]	; (800956c <TIM_CCxChannelCmd+0x104>)
 80094c0:	4293      	cmp	r3, r2
 80094c2:	d00c      	beq.n	80094de <TIM_CCxChannelCmd+0x76>
 80094c4:	68fb      	ldr	r3, [r7, #12]
 80094c6:	4a2a      	ldr	r2, [pc, #168]	; (8009570 <TIM_CCxChannelCmd+0x108>)
 80094c8:	4293      	cmp	r3, r2
 80094ca:	d008      	beq.n	80094de <TIM_CCxChannelCmd+0x76>
 80094cc:	68fb      	ldr	r3, [r7, #12]
 80094ce:	4a29      	ldr	r2, [pc, #164]	; (8009574 <TIM_CCxChannelCmd+0x10c>)
 80094d0:	4293      	cmp	r3, r2
 80094d2:	d004      	beq.n	80094de <TIM_CCxChannelCmd+0x76>
 80094d4:	f641 61a1 	movw	r1, #7841	; 0x1ea1
 80094d8:	4827      	ldr	r0, [pc, #156]	; (8009578 <TIM_CCxChannelCmd+0x110>)
 80094da:	f7f9 fb56 	bl	8002b8a <assert_failed>
  assert_param(IS_TIM_CHANNELS(Channel));
 80094de:	68bb      	ldr	r3, [r7, #8]
 80094e0:	2b00      	cmp	r3, #0
 80094e2:	d016      	beq.n	8009512 <TIM_CCxChannelCmd+0xaa>
 80094e4:	68bb      	ldr	r3, [r7, #8]
 80094e6:	2b04      	cmp	r3, #4
 80094e8:	d013      	beq.n	8009512 <TIM_CCxChannelCmd+0xaa>
 80094ea:	68bb      	ldr	r3, [r7, #8]
 80094ec:	2b08      	cmp	r3, #8
 80094ee:	d010      	beq.n	8009512 <TIM_CCxChannelCmd+0xaa>
 80094f0:	68bb      	ldr	r3, [r7, #8]
 80094f2:	2b0c      	cmp	r3, #12
 80094f4:	d00d      	beq.n	8009512 <TIM_CCxChannelCmd+0xaa>
 80094f6:	68bb      	ldr	r3, [r7, #8]
 80094f8:	2b10      	cmp	r3, #16
 80094fa:	d00a      	beq.n	8009512 <TIM_CCxChannelCmd+0xaa>
 80094fc:	68bb      	ldr	r3, [r7, #8]
 80094fe:	2b14      	cmp	r3, #20
 8009500:	d007      	beq.n	8009512 <TIM_CCxChannelCmd+0xaa>
 8009502:	68bb      	ldr	r3, [r7, #8]
 8009504:	2b3c      	cmp	r3, #60	; 0x3c
 8009506:	d004      	beq.n	8009512 <TIM_CCxChannelCmd+0xaa>
 8009508:	f641 61a2 	movw	r1, #7842	; 0x1ea2
 800950c:	481a      	ldr	r0, [pc, #104]	; (8009578 <TIM_CCxChannelCmd+0x110>)
 800950e:	f7f9 fb3c 	bl	8002b8a <assert_failed>

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8009512:	68bb      	ldr	r3, [r7, #8]
 8009514:	f003 031f 	and.w	r3, r3, #31
 8009518:	2201      	movs	r2, #1
 800951a:	fa02 f303 	lsl.w	r3, r2, r3
 800951e:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8009520:	68fb      	ldr	r3, [r7, #12]
 8009522:	6a1a      	ldr	r2, [r3, #32]
 8009524:	697b      	ldr	r3, [r7, #20]
 8009526:	43db      	mvns	r3, r3
 8009528:	401a      	ands	r2, r3
 800952a:	68fb      	ldr	r3, [r7, #12]
 800952c:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800952e:	68fb      	ldr	r3, [r7, #12]
 8009530:	6a1a      	ldr	r2, [r3, #32]
 8009532:	68bb      	ldr	r3, [r7, #8]
 8009534:	f003 031f 	and.w	r3, r3, #31
 8009538:	6879      	ldr	r1, [r7, #4]
 800953a:	fa01 f303 	lsl.w	r3, r1, r3
 800953e:	431a      	orrs	r2, r3
 8009540:	68fb      	ldr	r3, [r7, #12]
 8009542:	621a      	str	r2, [r3, #32]
}
 8009544:	bf00      	nop
 8009546:	3718      	adds	r7, #24
 8009548:	46bd      	mov	sp, r7
 800954a:	bd80      	pop	{r7, pc}
 800954c:	40010000 	.word	0x40010000
 8009550:	40000400 	.word	0x40000400
 8009554:	40000800 	.word	0x40000800
 8009558:	40000c00 	.word	0x40000c00
 800955c:	40010400 	.word	0x40010400
 8009560:	40014000 	.word	0x40014000
 8009564:	40014400 	.word	0x40014400
 8009568:	40014800 	.word	0x40014800
 800956c:	40001800 	.word	0x40001800
 8009570:	40001c00 	.word	0x40001c00
 8009574:	40002000 	.word	0x40002000
 8009578:	0801582c 	.word	0x0801582c

0800957c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800957c:	b580      	push	{r7, lr}
 800957e:	b084      	sub	sp, #16
 8009580:	af00      	add	r7, sp, #0
 8009582:	6078      	str	r0, [r7, #4]
 8009584:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr2;
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	681b      	ldr	r3, [r3, #0]
 800958a:	4a32      	ldr	r2, [pc, #200]	; (8009654 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800958c:	4293      	cmp	r3, r2
 800958e:	d027      	beq.n	80095e0 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	681b      	ldr	r3, [r3, #0]
 8009594:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009598:	d022      	beq.n	80095e0 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	681b      	ldr	r3, [r3, #0]
 800959e:	4a2e      	ldr	r2, [pc, #184]	; (8009658 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80095a0:	4293      	cmp	r3, r2
 80095a2:	d01d      	beq.n	80095e0 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	681b      	ldr	r3, [r3, #0]
 80095a8:	4a2c      	ldr	r2, [pc, #176]	; (800965c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80095aa:	4293      	cmp	r3, r2
 80095ac:	d018      	beq.n	80095e0 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	681b      	ldr	r3, [r3, #0]
 80095b2:	4a2b      	ldr	r2, [pc, #172]	; (8009660 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80095b4:	4293      	cmp	r3, r2
 80095b6:	d013      	beq.n	80095e0 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	681b      	ldr	r3, [r3, #0]
 80095bc:	4a29      	ldr	r2, [pc, #164]	; (8009664 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80095be:	4293      	cmp	r3, r2
 80095c0:	d00e      	beq.n	80095e0 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	681b      	ldr	r3, [r3, #0]
 80095c6:	4a28      	ldr	r2, [pc, #160]	; (8009668 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80095c8:	4293      	cmp	r3, r2
 80095ca:	d009      	beq.n	80095e0 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	681b      	ldr	r3, [r3, #0]
 80095d0:	4a26      	ldr	r2, [pc, #152]	; (800966c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80095d2:	4293      	cmp	r3, r2
 80095d4:	d004      	beq.n	80095e0 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 80095d6:	f240 71b6 	movw	r1, #1974	; 0x7b6
 80095da:	4825      	ldr	r0, [pc, #148]	; (8009670 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80095dc:	f7f9 fad5 	bl	8002b8a <assert_failed>
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
 80095e0:	683b      	ldr	r3, [r7, #0]
 80095e2:	681b      	ldr	r3, [r3, #0]
 80095e4:	2b00      	cmp	r3, #0
 80095e6:	d020      	beq.n	800962a <HAL_TIMEx_MasterConfigSynchronization+0xae>
 80095e8:	683b      	ldr	r3, [r7, #0]
 80095ea:	681b      	ldr	r3, [r3, #0]
 80095ec:	2b10      	cmp	r3, #16
 80095ee:	d01c      	beq.n	800962a <HAL_TIMEx_MasterConfigSynchronization+0xae>
 80095f0:	683b      	ldr	r3, [r7, #0]
 80095f2:	681b      	ldr	r3, [r3, #0]
 80095f4:	2b20      	cmp	r3, #32
 80095f6:	d018      	beq.n	800962a <HAL_TIMEx_MasterConfigSynchronization+0xae>
 80095f8:	683b      	ldr	r3, [r7, #0]
 80095fa:	681b      	ldr	r3, [r3, #0]
 80095fc:	2b30      	cmp	r3, #48	; 0x30
 80095fe:	d014      	beq.n	800962a <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8009600:	683b      	ldr	r3, [r7, #0]
 8009602:	681b      	ldr	r3, [r3, #0]
 8009604:	2b40      	cmp	r3, #64	; 0x40
 8009606:	d010      	beq.n	800962a <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8009608:	683b      	ldr	r3, [r7, #0]
 800960a:	681b      	ldr	r3, [r3, #0]
 800960c:	2b50      	cmp	r3, #80	; 0x50
 800960e:	d00c      	beq.n	800962a <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8009610:	683b      	ldr	r3, [r7, #0]
 8009612:	681b      	ldr	r3, [r3, #0]
 8009614:	2b60      	cmp	r3, #96	; 0x60
 8009616:	d008      	beq.n	800962a <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8009618:	683b      	ldr	r3, [r7, #0]
 800961a:	681b      	ldr	r3, [r3, #0]
 800961c:	2b70      	cmp	r3, #112	; 0x70
 800961e:	d004      	beq.n	800962a <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8009620:	f240 71b7 	movw	r1, #1975	; 0x7b7
 8009624:	4812      	ldr	r0, [pc, #72]	; (8009670 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8009626:	f7f9 fab0 	bl	8002b8a <assert_failed>
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
 800962a:	683b      	ldr	r3, [r7, #0]
 800962c:	689b      	ldr	r3, [r3, #8]
 800962e:	2b80      	cmp	r3, #128	; 0x80
 8009630:	d008      	beq.n	8009644 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009632:	683b      	ldr	r3, [r7, #0]
 8009634:	689b      	ldr	r3, [r3, #8]
 8009636:	2b00      	cmp	r3, #0
 8009638:	d004      	beq.n	8009644 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800963a:	f44f 61f7 	mov.w	r1, #1976	; 0x7b8
 800963e:	480c      	ldr	r0, [pc, #48]	; (8009670 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8009640:	f7f9 faa3 	bl	8002b8a <assert_failed>

  /* Check input state */
  __HAL_LOCK(htim);
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800964a:	2b01      	cmp	r3, #1
 800964c:	d112      	bne.n	8009674 <HAL_TIMEx_MasterConfigSynchronization+0xf8>
 800964e:	2302      	movs	r3, #2
 8009650:	e0d7      	b.n	8009802 <HAL_TIMEx_MasterConfigSynchronization+0x286>
 8009652:	bf00      	nop
 8009654:	40010000 	.word	0x40010000
 8009658:	40000400 	.word	0x40000400
 800965c:	40000800 	.word	0x40000800
 8009660:	40000c00 	.word	0x40000c00
 8009664:	40001000 	.word	0x40001000
 8009668:	40001400 	.word	0x40001400
 800966c:	40010400 	.word	0x40010400
 8009670:	08015864 	.word	0x08015864
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	2201      	movs	r2, #1
 8009678:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	2202      	movs	r2, #2
 8009680:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	681b      	ldr	r3, [r3, #0]
 8009688:	685b      	ldr	r3, [r3, #4]
 800968a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	681b      	ldr	r3, [r3, #0]
 8009690:	689b      	ldr	r3, [r3, #8]
 8009692:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	681b      	ldr	r3, [r3, #0]
 8009698:	4a5c      	ldr	r2, [pc, #368]	; (800980c <HAL_TIMEx_MasterConfigSynchronization+0x290>)
 800969a:	4293      	cmp	r3, r2
 800969c:	d004      	beq.n	80096a8 <HAL_TIMEx_MasterConfigSynchronization+0x12c>
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	681b      	ldr	r3, [r3, #0]
 80096a2:	4a5b      	ldr	r2, [pc, #364]	; (8009810 <HAL_TIMEx_MasterConfigSynchronization+0x294>)
 80096a4:	4293      	cmp	r3, r2
 80096a6:	d161      	bne.n	800976c <HAL_TIMEx_MasterConfigSynchronization+0x1f0>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));
 80096a8:	683b      	ldr	r3, [r7, #0]
 80096aa:	685b      	ldr	r3, [r3, #4]
 80096ac:	2b00      	cmp	r3, #0
 80096ae:	d054      	beq.n	800975a <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 80096b0:	683b      	ldr	r3, [r7, #0]
 80096b2:	685b      	ldr	r3, [r3, #4]
 80096b4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80096b8:	d04f      	beq.n	800975a <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 80096ba:	683b      	ldr	r3, [r7, #0]
 80096bc:	685b      	ldr	r3, [r3, #4]
 80096be:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80096c2:	d04a      	beq.n	800975a <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 80096c4:	683b      	ldr	r3, [r7, #0]
 80096c6:	685b      	ldr	r3, [r3, #4]
 80096c8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80096cc:	d045      	beq.n	800975a <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 80096ce:	683b      	ldr	r3, [r7, #0]
 80096d0:	685b      	ldr	r3, [r3, #4]
 80096d2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80096d6:	d040      	beq.n	800975a <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 80096d8:	683b      	ldr	r3, [r7, #0]
 80096da:	685b      	ldr	r3, [r3, #4]
 80096dc:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
 80096e0:	d03b      	beq.n	800975a <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 80096e2:	683b      	ldr	r3, [r7, #0]
 80096e4:	685b      	ldr	r3, [r3, #4]
 80096e6:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80096ea:	d036      	beq.n	800975a <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 80096ec:	683b      	ldr	r3, [r7, #0]
 80096ee:	685b      	ldr	r3, [r3, #4]
 80096f0:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80096f4:	d031      	beq.n	800975a <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 80096f6:	683b      	ldr	r3, [r7, #0]
 80096f8:	685b      	ldr	r3, [r3, #4]
 80096fa:	f5b3 0fe0 	cmp.w	r3, #7340032	; 0x700000
 80096fe:	d02c      	beq.n	800975a <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 8009700:	683b      	ldr	r3, [r7, #0]
 8009702:	685b      	ldr	r3, [r3, #4]
 8009704:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8009708:	d027      	beq.n	800975a <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 800970a:	683b      	ldr	r3, [r7, #0]
 800970c:	685b      	ldr	r3, [r3, #4]
 800970e:	f5b3 0f10 	cmp.w	r3, #9437184	; 0x900000
 8009712:	d022      	beq.n	800975a <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 8009714:	683b      	ldr	r3, [r7, #0]
 8009716:	685b      	ldr	r3, [r3, #4]
 8009718:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 800971c:	d01d      	beq.n	800975a <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 800971e:	683b      	ldr	r3, [r7, #0]
 8009720:	685b      	ldr	r3, [r3, #4]
 8009722:	f5b3 0f30 	cmp.w	r3, #11534336	; 0xb00000
 8009726:	d018      	beq.n	800975a <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 8009728:	683b      	ldr	r3, [r7, #0]
 800972a:	685b      	ldr	r3, [r3, #4]
 800972c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8009730:	d013      	beq.n	800975a <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 8009732:	683b      	ldr	r3, [r7, #0]
 8009734:	685b      	ldr	r3, [r3, #4]
 8009736:	f5b3 0f50 	cmp.w	r3, #13631488	; 0xd00000
 800973a:	d00e      	beq.n	800975a <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 800973c:	683b      	ldr	r3, [r7, #0]
 800973e:	685b      	ldr	r3, [r3, #4]
 8009740:	f5b3 0f60 	cmp.w	r3, #14680064	; 0xe00000
 8009744:	d009      	beq.n	800975a <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 8009746:	683b      	ldr	r3, [r7, #0]
 8009748:	685b      	ldr	r3, [r3, #4]
 800974a:	f5b3 0f70 	cmp.w	r3, #15728640	; 0xf00000
 800974e:	d004      	beq.n	800975a <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 8009750:	f240 71ca 	movw	r1, #1994	; 0x7ca
 8009754:	482f      	ldr	r0, [pc, #188]	; (8009814 <HAL_TIMEx_MasterConfigSynchronization+0x298>)
 8009756:	f7f9 fa18 	bl	8002b8a <assert_failed>

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800975a:	68fb      	ldr	r3, [r7, #12]
 800975c:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8009760:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8009762:	683b      	ldr	r3, [r7, #0]
 8009764:	685b      	ldr	r3, [r3, #4]
 8009766:	68fa      	ldr	r2, [r7, #12]
 8009768:	4313      	orrs	r3, r2
 800976a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800976c:	68fb      	ldr	r3, [r7, #12]
 800976e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009772:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009774:	683b      	ldr	r3, [r7, #0]
 8009776:	681b      	ldr	r3, [r3, #0]
 8009778:	68fa      	ldr	r2, [r7, #12]
 800977a:	4313      	orrs	r3, r2
 800977c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	681b      	ldr	r3, [r3, #0]
 8009782:	68fa      	ldr	r2, [r7, #12]
 8009784:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	681b      	ldr	r3, [r3, #0]
 800978a:	4a20      	ldr	r2, [pc, #128]	; (800980c <HAL_TIMEx_MasterConfigSynchronization+0x290>)
 800978c:	4293      	cmp	r3, r2
 800978e:	d022      	beq.n	80097d6 <HAL_TIMEx_MasterConfigSynchronization+0x25a>
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	681b      	ldr	r3, [r3, #0]
 8009794:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009798:	d01d      	beq.n	80097d6 <HAL_TIMEx_MasterConfigSynchronization+0x25a>
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	681b      	ldr	r3, [r3, #0]
 800979e:	4a1e      	ldr	r2, [pc, #120]	; (8009818 <HAL_TIMEx_MasterConfigSynchronization+0x29c>)
 80097a0:	4293      	cmp	r3, r2
 80097a2:	d018      	beq.n	80097d6 <HAL_TIMEx_MasterConfigSynchronization+0x25a>
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	681b      	ldr	r3, [r3, #0]
 80097a8:	4a1c      	ldr	r2, [pc, #112]	; (800981c <HAL_TIMEx_MasterConfigSynchronization+0x2a0>)
 80097aa:	4293      	cmp	r3, r2
 80097ac:	d013      	beq.n	80097d6 <HAL_TIMEx_MasterConfigSynchronization+0x25a>
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	681b      	ldr	r3, [r3, #0]
 80097b2:	4a1b      	ldr	r2, [pc, #108]	; (8009820 <HAL_TIMEx_MasterConfigSynchronization+0x2a4>)
 80097b4:	4293      	cmp	r3, r2
 80097b6:	d00e      	beq.n	80097d6 <HAL_TIMEx_MasterConfigSynchronization+0x25a>
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	681b      	ldr	r3, [r3, #0]
 80097bc:	4a14      	ldr	r2, [pc, #80]	; (8009810 <HAL_TIMEx_MasterConfigSynchronization+0x294>)
 80097be:	4293      	cmp	r3, r2
 80097c0:	d009      	beq.n	80097d6 <HAL_TIMEx_MasterConfigSynchronization+0x25a>
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	681b      	ldr	r3, [r3, #0]
 80097c6:	4a17      	ldr	r2, [pc, #92]	; (8009824 <HAL_TIMEx_MasterConfigSynchronization+0x2a8>)
 80097c8:	4293      	cmp	r3, r2
 80097ca:	d004      	beq.n	80097d6 <HAL_TIMEx_MasterConfigSynchronization+0x25a>
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	681b      	ldr	r3, [r3, #0]
 80097d0:	4a15      	ldr	r2, [pc, #84]	; (8009828 <HAL_TIMEx_MasterConfigSynchronization+0x2ac>)
 80097d2:	4293      	cmp	r3, r2
 80097d4:	d10c      	bne.n	80097f0 <HAL_TIMEx_MasterConfigSynchronization+0x274>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80097d6:	68bb      	ldr	r3, [r7, #8]
 80097d8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80097dc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80097de:	683b      	ldr	r3, [r7, #0]
 80097e0:	689b      	ldr	r3, [r3, #8]
 80097e2:	68ba      	ldr	r2, [r7, #8]
 80097e4:	4313      	orrs	r3, r2
 80097e6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	681b      	ldr	r3, [r3, #0]
 80097ec:	68ba      	ldr	r2, [r7, #8]
 80097ee:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	2201      	movs	r2, #1
 80097f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	2200      	movs	r2, #0
 80097fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009800:	2300      	movs	r3, #0
}
 8009802:	4618      	mov	r0, r3
 8009804:	3710      	adds	r7, #16
 8009806:	46bd      	mov	sp, r7
 8009808:	bd80      	pop	{r7, pc}
 800980a:	bf00      	nop
 800980c:	40010000 	.word	0x40010000
 8009810:	40010400 	.word	0x40010400
 8009814:	08015864 	.word	0x08015864
 8009818:	40000400 	.word	0x40000400
 800981c:	40000800 	.word	0x40000800
 8009820:	40000c00 	.word	0x40000c00
 8009824:	40014000 	.word	0x40014000
 8009828:	40001800 	.word	0x40001800

0800982c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800982c:	b480      	push	{r7}
 800982e:	b083      	sub	sp, #12
 8009830:	af00      	add	r7, sp, #0
 8009832:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009834:	bf00      	nop
 8009836:	370c      	adds	r7, #12
 8009838:	46bd      	mov	sp, r7
 800983a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800983e:	4770      	bx	lr

08009840 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009840:	b480      	push	{r7}
 8009842:	b083      	sub	sp, #12
 8009844:	af00      	add	r7, sp, #0
 8009846:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009848:	bf00      	nop
 800984a:	370c      	adds	r7, #12
 800984c:	46bd      	mov	sp, r7
 800984e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009852:	4770      	bx	lr

08009854 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8009854:	b480      	push	{r7}
 8009856:	b083      	sub	sp, #12
 8009858:	af00      	add	r7, sp, #0
 800985a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800985c:	bf00      	nop
 800985e:	370c      	adds	r7, #12
 8009860:	46bd      	mov	sp, r7
 8009862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009866:	4770      	bx	lr

08009868 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009868:	b580      	push	{r7, lr}
 800986a:	b082      	sub	sp, #8
 800986c:	af00      	add	r7, sp, #0
 800986e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	2b00      	cmp	r3, #0
 8009874:	d101      	bne.n	800987a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009876:	2301      	movs	r3, #1
 8009878:	e09f      	b.n	80099ba <HAL_UART_Init+0x152>
  }

  if (huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	699b      	ldr	r3, [r3, #24]
 800987e:	2b00      	cmp	r3, #0
 8009880:	d02d      	beq.n	80098de <HAL_UART_Init+0x76>
  {
    /* Check the parameters */
    assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	681b      	ldr	r3, [r3, #0]
 8009886:	4a4f      	ldr	r2, [pc, #316]	; (80099c4 <HAL_UART_Init+0x15c>)
 8009888:	4293      	cmp	r3, r2
 800988a:	d055      	beq.n	8009938 <HAL_UART_Init+0xd0>
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	681b      	ldr	r3, [r3, #0]
 8009890:	4a4d      	ldr	r2, [pc, #308]	; (80099c8 <HAL_UART_Init+0x160>)
 8009892:	4293      	cmp	r3, r2
 8009894:	d050      	beq.n	8009938 <HAL_UART_Init+0xd0>
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	681b      	ldr	r3, [r3, #0]
 800989a:	4a4c      	ldr	r2, [pc, #304]	; (80099cc <HAL_UART_Init+0x164>)
 800989c:	4293      	cmp	r3, r2
 800989e:	d04b      	beq.n	8009938 <HAL_UART_Init+0xd0>
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	681b      	ldr	r3, [r3, #0]
 80098a4:	4a4a      	ldr	r2, [pc, #296]	; (80099d0 <HAL_UART_Init+0x168>)
 80098a6:	4293      	cmp	r3, r2
 80098a8:	d046      	beq.n	8009938 <HAL_UART_Init+0xd0>
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	681b      	ldr	r3, [r3, #0]
 80098ae:	4a49      	ldr	r2, [pc, #292]	; (80099d4 <HAL_UART_Init+0x16c>)
 80098b0:	4293      	cmp	r3, r2
 80098b2:	d041      	beq.n	8009938 <HAL_UART_Init+0xd0>
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	681b      	ldr	r3, [r3, #0]
 80098b8:	4a47      	ldr	r2, [pc, #284]	; (80099d8 <HAL_UART_Init+0x170>)
 80098ba:	4293      	cmp	r3, r2
 80098bc:	d03c      	beq.n	8009938 <HAL_UART_Init+0xd0>
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	681b      	ldr	r3, [r3, #0]
 80098c2:	4a46      	ldr	r2, [pc, #280]	; (80099dc <HAL_UART_Init+0x174>)
 80098c4:	4293      	cmp	r3, r2
 80098c6:	d037      	beq.n	8009938 <HAL_UART_Init+0xd0>
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	681b      	ldr	r3, [r3, #0]
 80098cc:	4a44      	ldr	r2, [pc, #272]	; (80099e0 <HAL_UART_Init+0x178>)
 80098ce:	4293      	cmp	r3, r2
 80098d0:	d032      	beq.n	8009938 <HAL_UART_Init+0xd0>
 80098d2:	f44f 7196 	mov.w	r1, #300	; 0x12c
 80098d6:	4843      	ldr	r0, [pc, #268]	; (80099e4 <HAL_UART_Init+0x17c>)
 80098d8:	f7f9 f957 	bl	8002b8a <assert_failed>
 80098dc:	e02c      	b.n	8009938 <HAL_UART_Init+0xd0>
  }
  else
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	681b      	ldr	r3, [r3, #0]
 80098e2:	4a38      	ldr	r2, [pc, #224]	; (80099c4 <HAL_UART_Init+0x15c>)
 80098e4:	4293      	cmp	r3, r2
 80098e6:	d027      	beq.n	8009938 <HAL_UART_Init+0xd0>
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	681b      	ldr	r3, [r3, #0]
 80098ec:	4a36      	ldr	r2, [pc, #216]	; (80099c8 <HAL_UART_Init+0x160>)
 80098ee:	4293      	cmp	r3, r2
 80098f0:	d022      	beq.n	8009938 <HAL_UART_Init+0xd0>
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	681b      	ldr	r3, [r3, #0]
 80098f6:	4a35      	ldr	r2, [pc, #212]	; (80099cc <HAL_UART_Init+0x164>)
 80098f8:	4293      	cmp	r3, r2
 80098fa:	d01d      	beq.n	8009938 <HAL_UART_Init+0xd0>
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	681b      	ldr	r3, [r3, #0]
 8009900:	4a33      	ldr	r2, [pc, #204]	; (80099d0 <HAL_UART_Init+0x168>)
 8009902:	4293      	cmp	r3, r2
 8009904:	d018      	beq.n	8009938 <HAL_UART_Init+0xd0>
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	681b      	ldr	r3, [r3, #0]
 800990a:	4a32      	ldr	r2, [pc, #200]	; (80099d4 <HAL_UART_Init+0x16c>)
 800990c:	4293      	cmp	r3, r2
 800990e:	d013      	beq.n	8009938 <HAL_UART_Init+0xd0>
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	681b      	ldr	r3, [r3, #0]
 8009914:	4a30      	ldr	r2, [pc, #192]	; (80099d8 <HAL_UART_Init+0x170>)
 8009916:	4293      	cmp	r3, r2
 8009918:	d00e      	beq.n	8009938 <HAL_UART_Init+0xd0>
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	681b      	ldr	r3, [r3, #0]
 800991e:	4a2f      	ldr	r2, [pc, #188]	; (80099dc <HAL_UART_Init+0x174>)
 8009920:	4293      	cmp	r3, r2
 8009922:	d009      	beq.n	8009938 <HAL_UART_Init+0xd0>
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	681b      	ldr	r3, [r3, #0]
 8009928:	4a2d      	ldr	r2, [pc, #180]	; (80099e0 <HAL_UART_Init+0x178>)
 800992a:	4293      	cmp	r3, r2
 800992c:	d004      	beq.n	8009938 <HAL_UART_Init+0xd0>
 800992e:	f240 1131 	movw	r1, #305	; 0x131
 8009932:	482c      	ldr	r0, [pc, #176]	; (80099e4 <HAL_UART_Init+0x17c>)
 8009934:	f7f9 f929 	bl	8002b8a <assert_failed>
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800993c:	2b00      	cmp	r3, #0
 800993e:	d106      	bne.n	800994e <HAL_UART_Init+0xe6>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	2200      	movs	r2, #0
 8009944:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009948:	6878      	ldr	r0, [r7, #4]
 800994a:	f7f9 fd1b 	bl	8003384 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	2224      	movs	r2, #36	; 0x24
 8009952:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	681b      	ldr	r3, [r3, #0]
 8009958:	681a      	ldr	r2, [r3, #0]
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	681b      	ldr	r3, [r3, #0]
 800995e:	f022 0201 	bic.w	r2, r2, #1
 8009962:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009964:	6878      	ldr	r0, [r7, #4]
 8009966:	f000 fbf9 	bl	800a15c <UART_SetConfig>
 800996a:	4603      	mov	r3, r0
 800996c:	2b01      	cmp	r3, #1
 800996e:	d101      	bne.n	8009974 <HAL_UART_Init+0x10c>
  {
    return HAL_ERROR;
 8009970:	2301      	movs	r3, #1
 8009972:	e022      	b.n	80099ba <HAL_UART_Init+0x152>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009978:	2b00      	cmp	r3, #0
 800997a:	d002      	beq.n	8009982 <HAL_UART_Init+0x11a>
  {
    UART_AdvFeatureConfig(huart);
 800997c:	6878      	ldr	r0, [r7, #4]
 800997e:	f000 fee3 	bl	800a748 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	681b      	ldr	r3, [r3, #0]
 8009986:	685a      	ldr	r2, [r3, #4]
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	681b      	ldr	r3, [r3, #0]
 800998c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009990:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	681b      	ldr	r3, [r3, #0]
 8009996:	689a      	ldr	r2, [r3, #8]
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	681b      	ldr	r3, [r3, #0]
 800999c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80099a0:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	681b      	ldr	r3, [r3, #0]
 80099a6:	681a      	ldr	r2, [r3, #0]
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	681b      	ldr	r3, [r3, #0]
 80099ac:	f042 0201 	orr.w	r2, r2, #1
 80099b0:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80099b2:	6878      	ldr	r0, [r7, #4]
 80099b4:	f001 f820 	bl	800a9f8 <UART_CheckIdleState>
 80099b8:	4603      	mov	r3, r0
}
 80099ba:	4618      	mov	r0, r3
 80099bc:	3708      	adds	r7, #8
 80099be:	46bd      	mov	sp, r7
 80099c0:	bd80      	pop	{r7, pc}
 80099c2:	bf00      	nop
 80099c4:	40011000 	.word	0x40011000
 80099c8:	40004400 	.word	0x40004400
 80099cc:	40004800 	.word	0x40004800
 80099d0:	40004c00 	.word	0x40004c00
 80099d4:	40005000 	.word	0x40005000
 80099d8:	40011400 	.word	0x40011400
 80099dc:	40007800 	.word	0x40007800
 80099e0:	40007c00 	.word	0x40007c00
 80099e4:	080158a0 	.word	0x080158a0

080099e8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80099e8:	b580      	push	{r7, lr}
 80099ea:	b08a      	sub	sp, #40	; 0x28
 80099ec:	af02      	add	r7, sp, #8
 80099ee:	60f8      	str	r0, [r7, #12]
 80099f0:	60b9      	str	r1, [r7, #8]
 80099f2:	603b      	str	r3, [r7, #0]
 80099f4:	4613      	mov	r3, r2
 80099f6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80099f8:	68fb      	ldr	r3, [r7, #12]
 80099fa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80099fc:	2b20      	cmp	r3, #32
 80099fe:	d171      	bne.n	8009ae4 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8009a00:	68bb      	ldr	r3, [r7, #8]
 8009a02:	2b00      	cmp	r3, #0
 8009a04:	d002      	beq.n	8009a0c <HAL_UART_Transmit+0x24>
 8009a06:	88fb      	ldrh	r3, [r7, #6]
 8009a08:	2b00      	cmp	r3, #0
 8009a0a:	d101      	bne.n	8009a10 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8009a0c:	2301      	movs	r3, #1
 8009a0e:	e06a      	b.n	8009ae6 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009a10:	68fb      	ldr	r3, [r7, #12]
 8009a12:	2200      	movs	r2, #0
 8009a14:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009a18:	68fb      	ldr	r3, [r7, #12]
 8009a1a:	2221      	movs	r2, #33	; 0x21
 8009a1c:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8009a1e:	f7f9 fdad 	bl	800357c <HAL_GetTick>
 8009a22:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8009a24:	68fb      	ldr	r3, [r7, #12]
 8009a26:	88fa      	ldrh	r2, [r7, #6]
 8009a28:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8009a2c:	68fb      	ldr	r3, [r7, #12]
 8009a2e:	88fa      	ldrh	r2, [r7, #6]
 8009a30:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009a34:	68fb      	ldr	r3, [r7, #12]
 8009a36:	689b      	ldr	r3, [r3, #8]
 8009a38:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009a3c:	d108      	bne.n	8009a50 <HAL_UART_Transmit+0x68>
 8009a3e:	68fb      	ldr	r3, [r7, #12]
 8009a40:	691b      	ldr	r3, [r3, #16]
 8009a42:	2b00      	cmp	r3, #0
 8009a44:	d104      	bne.n	8009a50 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8009a46:	2300      	movs	r3, #0
 8009a48:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8009a4a:	68bb      	ldr	r3, [r7, #8]
 8009a4c:	61bb      	str	r3, [r7, #24]
 8009a4e:	e003      	b.n	8009a58 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8009a50:	68bb      	ldr	r3, [r7, #8]
 8009a52:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009a54:	2300      	movs	r3, #0
 8009a56:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8009a58:	e02c      	b.n	8009ab4 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8009a5a:	683b      	ldr	r3, [r7, #0]
 8009a5c:	9300      	str	r3, [sp, #0]
 8009a5e:	697b      	ldr	r3, [r7, #20]
 8009a60:	2200      	movs	r2, #0
 8009a62:	2180      	movs	r1, #128	; 0x80
 8009a64:	68f8      	ldr	r0, [r7, #12]
 8009a66:	f000 fffe 	bl	800aa66 <UART_WaitOnFlagUntilTimeout>
 8009a6a:	4603      	mov	r3, r0
 8009a6c:	2b00      	cmp	r3, #0
 8009a6e:	d001      	beq.n	8009a74 <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 8009a70:	2303      	movs	r3, #3
 8009a72:	e038      	b.n	8009ae6 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8009a74:	69fb      	ldr	r3, [r7, #28]
 8009a76:	2b00      	cmp	r3, #0
 8009a78:	d10b      	bne.n	8009a92 <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8009a7a:	69bb      	ldr	r3, [r7, #24]
 8009a7c:	881b      	ldrh	r3, [r3, #0]
 8009a7e:	461a      	mov	r2, r3
 8009a80:	68fb      	ldr	r3, [r7, #12]
 8009a82:	681b      	ldr	r3, [r3, #0]
 8009a84:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009a88:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8009a8a:	69bb      	ldr	r3, [r7, #24]
 8009a8c:	3302      	adds	r3, #2
 8009a8e:	61bb      	str	r3, [r7, #24]
 8009a90:	e007      	b.n	8009aa2 <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8009a92:	69fb      	ldr	r3, [r7, #28]
 8009a94:	781a      	ldrb	r2, [r3, #0]
 8009a96:	68fb      	ldr	r3, [r7, #12]
 8009a98:	681b      	ldr	r3, [r3, #0]
 8009a9a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8009a9c:	69fb      	ldr	r3, [r7, #28]
 8009a9e:	3301      	adds	r3, #1
 8009aa0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8009aa2:	68fb      	ldr	r3, [r7, #12]
 8009aa4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8009aa8:	b29b      	uxth	r3, r3
 8009aaa:	3b01      	subs	r3, #1
 8009aac:	b29a      	uxth	r2, r3
 8009aae:	68fb      	ldr	r3, [r7, #12]
 8009ab0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8009ab4:	68fb      	ldr	r3, [r7, #12]
 8009ab6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8009aba:	b29b      	uxth	r3, r3
 8009abc:	2b00      	cmp	r3, #0
 8009abe:	d1cc      	bne.n	8009a5a <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8009ac0:	683b      	ldr	r3, [r7, #0]
 8009ac2:	9300      	str	r3, [sp, #0]
 8009ac4:	697b      	ldr	r3, [r7, #20]
 8009ac6:	2200      	movs	r2, #0
 8009ac8:	2140      	movs	r1, #64	; 0x40
 8009aca:	68f8      	ldr	r0, [r7, #12]
 8009acc:	f000 ffcb 	bl	800aa66 <UART_WaitOnFlagUntilTimeout>
 8009ad0:	4603      	mov	r3, r0
 8009ad2:	2b00      	cmp	r3, #0
 8009ad4:	d001      	beq.n	8009ada <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 8009ad6:	2303      	movs	r3, #3
 8009ad8:	e005      	b.n	8009ae6 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8009ada:	68fb      	ldr	r3, [r7, #12]
 8009adc:	2220      	movs	r2, #32
 8009ade:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8009ae0:	2300      	movs	r3, #0
 8009ae2:	e000      	b.n	8009ae6 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8009ae4:	2302      	movs	r3, #2
  }
}
 8009ae6:	4618      	mov	r0, r3
 8009ae8:	3720      	adds	r7, #32
 8009aea:	46bd      	mov	sp, r7
 8009aec:	bd80      	pop	{r7, pc}

08009aee <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009aee:	b580      	push	{r7, lr}
 8009af0:	b08a      	sub	sp, #40	; 0x28
 8009af2:	af00      	add	r7, sp, #0
 8009af4:	60f8      	str	r0, [r7, #12]
 8009af6:	60b9      	str	r1, [r7, #8]
 8009af8:	4613      	mov	r3, r2
 8009afa:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8009afc:	68fb      	ldr	r3, [r7, #12]
 8009afe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009b02:	2b20      	cmp	r3, #32
 8009b04:	d132      	bne.n	8009b6c <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 8009b06:	68bb      	ldr	r3, [r7, #8]
 8009b08:	2b00      	cmp	r3, #0
 8009b0a:	d002      	beq.n	8009b12 <HAL_UART_Receive_IT+0x24>
 8009b0c:	88fb      	ldrh	r3, [r7, #6]
 8009b0e:	2b00      	cmp	r3, #0
 8009b10:	d101      	bne.n	8009b16 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8009b12:	2301      	movs	r3, #1
 8009b14:	e02b      	b.n	8009b6e <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009b16:	68fb      	ldr	r3, [r7, #12]
 8009b18:	2200      	movs	r2, #0
 8009b1a:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009b1c:	68fb      	ldr	r3, [r7, #12]
 8009b1e:	681b      	ldr	r3, [r3, #0]
 8009b20:	685b      	ldr	r3, [r3, #4]
 8009b22:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009b26:	2b00      	cmp	r3, #0
 8009b28:	d018      	beq.n	8009b5c <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8009b2a:	68fb      	ldr	r3, [r7, #12]
 8009b2c:	681b      	ldr	r3, [r3, #0]
 8009b2e:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b30:	697b      	ldr	r3, [r7, #20]
 8009b32:	e853 3f00 	ldrex	r3, [r3]
 8009b36:	613b      	str	r3, [r7, #16]
   return(result);
 8009b38:	693b      	ldr	r3, [r7, #16]
 8009b3a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8009b3e:	627b      	str	r3, [r7, #36]	; 0x24
 8009b40:	68fb      	ldr	r3, [r7, #12]
 8009b42:	681b      	ldr	r3, [r3, #0]
 8009b44:	461a      	mov	r2, r3
 8009b46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b48:	623b      	str	r3, [r7, #32]
 8009b4a:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b4c:	69f9      	ldr	r1, [r7, #28]
 8009b4e:	6a3a      	ldr	r2, [r7, #32]
 8009b50:	e841 2300 	strex	r3, r2, [r1]
 8009b54:	61bb      	str	r3, [r7, #24]
   return(result);
 8009b56:	69bb      	ldr	r3, [r7, #24]
 8009b58:	2b00      	cmp	r3, #0
 8009b5a:	d1e6      	bne.n	8009b2a <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8009b5c:	88fb      	ldrh	r3, [r7, #6]
 8009b5e:	461a      	mov	r2, r3
 8009b60:	68b9      	ldr	r1, [r7, #8]
 8009b62:	68f8      	ldr	r0, [r7, #12]
 8009b64:	f001 f846 	bl	800abf4 <UART_Start_Receive_IT>
 8009b68:	4603      	mov	r3, r0
 8009b6a:	e000      	b.n	8009b6e <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 8009b6c:	2302      	movs	r3, #2
  }
}
 8009b6e:	4618      	mov	r0, r3
 8009b70:	3728      	adds	r7, #40	; 0x28
 8009b72:	46bd      	mov	sp, r7
 8009b74:	bd80      	pop	{r7, pc}
	...

08009b78 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009b78:	b580      	push	{r7, lr}
 8009b7a:	b0ba      	sub	sp, #232	; 0xe8
 8009b7c:	af00      	add	r7, sp, #0
 8009b7e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	681b      	ldr	r3, [r3, #0]
 8009b84:	69db      	ldr	r3, [r3, #28]
 8009b86:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	681b      	ldr	r3, [r3, #0]
 8009b8e:	681b      	ldr	r3, [r3, #0]
 8009b90:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	681b      	ldr	r3, [r3, #0]
 8009b98:	689b      	ldr	r3, [r3, #8]
 8009b9a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8009b9e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8009ba2:	f640 030f 	movw	r3, #2063	; 0x80f
 8009ba6:	4013      	ands	r3, r2
 8009ba8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8009bac:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009bb0:	2b00      	cmp	r3, #0
 8009bb2:	d115      	bne.n	8009be0 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8009bb4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009bb8:	f003 0320 	and.w	r3, r3, #32
 8009bbc:	2b00      	cmp	r3, #0
 8009bbe:	d00f      	beq.n	8009be0 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8009bc0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009bc4:	f003 0320 	and.w	r3, r3, #32
 8009bc8:	2b00      	cmp	r3, #0
 8009bca:	d009      	beq.n	8009be0 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009bd0:	2b00      	cmp	r3, #0
 8009bd2:	f000 8297 	beq.w	800a104 <HAL_UART_IRQHandler+0x58c>
      {
        huart->RxISR(huart);
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009bda:	6878      	ldr	r0, [r7, #4]
 8009bdc:	4798      	blx	r3
      }
      return;
 8009bde:	e291      	b.n	800a104 <HAL_UART_IRQHandler+0x58c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8009be0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009be4:	2b00      	cmp	r3, #0
 8009be6:	f000 8117 	beq.w	8009e18 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8009bea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009bee:	f003 0301 	and.w	r3, r3, #1
 8009bf2:	2b00      	cmp	r3, #0
 8009bf4:	d106      	bne.n	8009c04 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8009bf6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8009bfa:	4b85      	ldr	r3, [pc, #532]	; (8009e10 <HAL_UART_IRQHandler+0x298>)
 8009bfc:	4013      	ands	r3, r2
 8009bfe:	2b00      	cmp	r3, #0
 8009c00:	f000 810a 	beq.w	8009e18 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009c04:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009c08:	f003 0301 	and.w	r3, r3, #1
 8009c0c:	2b00      	cmp	r3, #0
 8009c0e:	d011      	beq.n	8009c34 <HAL_UART_IRQHandler+0xbc>
 8009c10:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009c14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009c18:	2b00      	cmp	r3, #0
 8009c1a:	d00b      	beq.n	8009c34 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	681b      	ldr	r3, [r3, #0]
 8009c20:	2201      	movs	r2, #1
 8009c22:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009c2a:	f043 0201 	orr.w	r2, r3, #1
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009c34:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009c38:	f003 0302 	and.w	r3, r3, #2
 8009c3c:	2b00      	cmp	r3, #0
 8009c3e:	d011      	beq.n	8009c64 <HAL_UART_IRQHandler+0xec>
 8009c40:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009c44:	f003 0301 	and.w	r3, r3, #1
 8009c48:	2b00      	cmp	r3, #0
 8009c4a:	d00b      	beq.n	8009c64 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	681b      	ldr	r3, [r3, #0]
 8009c50:	2202      	movs	r2, #2
 8009c52:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009c5a:	f043 0204 	orr.w	r2, r3, #4
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009c64:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009c68:	f003 0304 	and.w	r3, r3, #4
 8009c6c:	2b00      	cmp	r3, #0
 8009c6e:	d011      	beq.n	8009c94 <HAL_UART_IRQHandler+0x11c>
 8009c70:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009c74:	f003 0301 	and.w	r3, r3, #1
 8009c78:	2b00      	cmp	r3, #0
 8009c7a:	d00b      	beq.n	8009c94 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	681b      	ldr	r3, [r3, #0]
 8009c80:	2204      	movs	r2, #4
 8009c82:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009c8a:	f043 0202 	orr.w	r2, r3, #2
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8009c94:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009c98:	f003 0308 	and.w	r3, r3, #8
 8009c9c:	2b00      	cmp	r3, #0
 8009c9e:	d017      	beq.n	8009cd0 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8009ca0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009ca4:	f003 0320 	and.w	r3, r3, #32
 8009ca8:	2b00      	cmp	r3, #0
 8009caa:	d105      	bne.n	8009cb8 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8009cac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009cb0:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8009cb4:	2b00      	cmp	r3, #0
 8009cb6:	d00b      	beq.n	8009cd0 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	681b      	ldr	r3, [r3, #0]
 8009cbc:	2208      	movs	r2, #8
 8009cbe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009cc6:	f043 0208 	orr.w	r2, r3, #8
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8009cd0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009cd4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009cd8:	2b00      	cmp	r3, #0
 8009cda:	d012      	beq.n	8009d02 <HAL_UART_IRQHandler+0x18a>
 8009cdc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009ce0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8009ce4:	2b00      	cmp	r3, #0
 8009ce6:	d00c      	beq.n	8009d02 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	681b      	ldr	r3, [r3, #0]
 8009cec:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009cf0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009cf8:	f043 0220 	orr.w	r2, r3, #32
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009d08:	2b00      	cmp	r3, #0
 8009d0a:	f000 81fd 	beq.w	800a108 <HAL_UART_IRQHandler+0x590>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8009d0e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009d12:	f003 0320 	and.w	r3, r3, #32
 8009d16:	2b00      	cmp	r3, #0
 8009d18:	d00d      	beq.n	8009d36 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8009d1a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009d1e:	f003 0320 	and.w	r3, r3, #32
 8009d22:	2b00      	cmp	r3, #0
 8009d24:	d007      	beq.n	8009d36 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009d2a:	2b00      	cmp	r3, #0
 8009d2c:	d003      	beq.n	8009d36 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009d32:	6878      	ldr	r0, [r7, #4]
 8009d34:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009d3c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	681b      	ldr	r3, [r3, #0]
 8009d44:	689b      	ldr	r3, [r3, #8]
 8009d46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009d4a:	2b40      	cmp	r3, #64	; 0x40
 8009d4c:	d005      	beq.n	8009d5a <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8009d4e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8009d52:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009d56:	2b00      	cmp	r3, #0
 8009d58:	d04f      	beq.n	8009dfa <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8009d5a:	6878      	ldr	r0, [r7, #4]
 8009d5c:	f001 f810 	bl	800ad80 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	681b      	ldr	r3, [r3, #0]
 8009d64:	689b      	ldr	r3, [r3, #8]
 8009d66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009d6a:	2b40      	cmp	r3, #64	; 0x40
 8009d6c:	d141      	bne.n	8009df2 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	681b      	ldr	r3, [r3, #0]
 8009d72:	3308      	adds	r3, #8
 8009d74:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d78:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009d7c:	e853 3f00 	ldrex	r3, [r3]
 8009d80:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8009d84:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009d88:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009d8c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	681b      	ldr	r3, [r3, #0]
 8009d94:	3308      	adds	r3, #8
 8009d96:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8009d9a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8009d9e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009da2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8009da6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8009daa:	e841 2300 	strex	r3, r2, [r1]
 8009dae:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8009db2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8009db6:	2b00      	cmp	r3, #0
 8009db8:	d1d9      	bne.n	8009d6e <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009dbe:	2b00      	cmp	r3, #0
 8009dc0:	d013      	beq.n	8009dea <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009dc6:	4a13      	ldr	r2, [pc, #76]	; (8009e14 <HAL_UART_IRQHandler+0x29c>)
 8009dc8:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009dce:	4618      	mov	r0, r3
 8009dd0:	f7f9 fdb4 	bl	800393c <HAL_DMA_Abort_IT>
 8009dd4:	4603      	mov	r3, r0
 8009dd6:	2b00      	cmp	r3, #0
 8009dd8:	d017      	beq.n	8009e0a <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009dde:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009de0:	687a      	ldr	r2, [r7, #4]
 8009de2:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8009de4:	4610      	mov	r0, r2
 8009de6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009de8:	e00f      	b.n	8009e0a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8009dea:	6878      	ldr	r0, [r7, #4]
 8009dec:	f000 f9a0 	bl	800a130 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009df0:	e00b      	b.n	8009e0a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009df2:	6878      	ldr	r0, [r7, #4]
 8009df4:	f000 f99c 	bl	800a130 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009df8:	e007      	b.n	8009e0a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8009dfa:	6878      	ldr	r0, [r7, #4]
 8009dfc:	f000 f998 	bl	800a130 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	2200      	movs	r2, #0
 8009e04:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8009e08:	e17e      	b.n	800a108 <HAL_UART_IRQHandler+0x590>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009e0a:	bf00      	nop
    return;
 8009e0c:	e17c      	b.n	800a108 <HAL_UART_IRQHandler+0x590>
 8009e0e:	bf00      	nop
 8009e10:	04000120 	.word	0x04000120
 8009e14:	0800ae49 	.word	0x0800ae49

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009e1c:	2b01      	cmp	r3, #1
 8009e1e:	f040 814c 	bne.w	800a0ba <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8009e22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009e26:	f003 0310 	and.w	r3, r3, #16
 8009e2a:	2b00      	cmp	r3, #0
 8009e2c:	f000 8145 	beq.w	800a0ba <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8009e30:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009e34:	f003 0310 	and.w	r3, r3, #16
 8009e38:	2b00      	cmp	r3, #0
 8009e3a:	f000 813e 	beq.w	800a0ba <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	681b      	ldr	r3, [r3, #0]
 8009e42:	2210      	movs	r2, #16
 8009e44:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	681b      	ldr	r3, [r3, #0]
 8009e4a:	689b      	ldr	r3, [r3, #8]
 8009e4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009e50:	2b40      	cmp	r3, #64	; 0x40
 8009e52:	f040 80b6 	bne.w	8009fc2 <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009e5a:	681b      	ldr	r3, [r3, #0]
 8009e5c:	685b      	ldr	r3, [r3, #4]
 8009e5e:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8009e62:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8009e66:	2b00      	cmp	r3, #0
 8009e68:	f000 8150 	beq.w	800a10c <HAL_UART_IRQHandler+0x594>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8009e72:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8009e76:	429a      	cmp	r2, r3
 8009e78:	f080 8148 	bcs.w	800a10c <HAL_UART_IRQHandler+0x594>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8009e82:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009e8a:	69db      	ldr	r3, [r3, #28]
 8009e8c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009e90:	f000 8086 	beq.w	8009fa0 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	681b      	ldr	r3, [r3, #0]
 8009e98:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e9c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009ea0:	e853 3f00 	ldrex	r3, [r3]
 8009ea4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8009ea8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009eac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009eb0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	681b      	ldr	r3, [r3, #0]
 8009eb8:	461a      	mov	r2, r3
 8009eba:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8009ebe:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8009ec2:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ec6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8009eca:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8009ece:	e841 2300 	strex	r3, r2, [r1]
 8009ed2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8009ed6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009eda:	2b00      	cmp	r3, #0
 8009edc:	d1da      	bne.n	8009e94 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	681b      	ldr	r3, [r3, #0]
 8009ee2:	3308      	adds	r3, #8
 8009ee4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ee6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009ee8:	e853 3f00 	ldrex	r3, [r3]
 8009eec:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8009eee:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009ef0:	f023 0301 	bic.w	r3, r3, #1
 8009ef4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	681b      	ldr	r3, [r3, #0]
 8009efc:	3308      	adds	r3, #8
 8009efe:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8009f02:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8009f06:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f08:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8009f0a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8009f0e:	e841 2300 	strex	r3, r2, [r1]
 8009f12:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8009f14:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009f16:	2b00      	cmp	r3, #0
 8009f18:	d1e1      	bne.n	8009ede <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	681b      	ldr	r3, [r3, #0]
 8009f1e:	3308      	adds	r3, #8
 8009f20:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f22:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009f24:	e853 3f00 	ldrex	r3, [r3]
 8009f28:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8009f2a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009f2c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009f30:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	681b      	ldr	r3, [r3, #0]
 8009f38:	3308      	adds	r3, #8
 8009f3a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8009f3e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8009f40:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f42:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8009f44:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8009f46:	e841 2300 	strex	r3, r2, [r1]
 8009f4a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8009f4c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009f4e:	2b00      	cmp	r3, #0
 8009f50:	d1e3      	bne.n	8009f1a <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	2220      	movs	r2, #32
 8009f56:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	2200      	movs	r2, #0
 8009f5e:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	681b      	ldr	r3, [r3, #0]
 8009f64:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f66:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009f68:	e853 3f00 	ldrex	r3, [r3]
 8009f6c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8009f6e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009f70:	f023 0310 	bic.w	r3, r3, #16
 8009f74:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	681b      	ldr	r3, [r3, #0]
 8009f7c:	461a      	mov	r2, r3
 8009f7e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009f82:	65bb      	str	r3, [r7, #88]	; 0x58
 8009f84:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f86:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8009f88:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009f8a:	e841 2300 	strex	r3, r2, [r1]
 8009f8e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8009f90:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009f92:	2b00      	cmp	r3, #0
 8009f94:	d1e4      	bne.n	8009f60 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009f9a:	4618      	mov	r0, r3
 8009f9c:	f7f9 fc5e 	bl	800385c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	2202      	movs	r2, #2
 8009fa4:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8009fb2:	b29b      	uxth	r3, r3
 8009fb4:	1ad3      	subs	r3, r2, r3
 8009fb6:	b29b      	uxth	r3, r3
 8009fb8:	4619      	mov	r1, r3
 8009fba:	6878      	ldr	r0, [r7, #4]
 8009fbc:	f000 f8c2 	bl	800a144 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8009fc0:	e0a4      	b.n	800a10c <HAL_UART_IRQHandler+0x594>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8009fce:	b29b      	uxth	r3, r3
 8009fd0:	1ad3      	subs	r3, r2, r3
 8009fd2:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8009fdc:	b29b      	uxth	r3, r3
 8009fde:	2b00      	cmp	r3, #0
 8009fe0:	f000 8096 	beq.w	800a110 <HAL_UART_IRQHandler+0x598>
          && (nb_rx_data > 0U))
 8009fe4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8009fe8:	2b00      	cmp	r3, #0
 8009fea:	f000 8091 	beq.w	800a110 <HAL_UART_IRQHandler+0x598>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	681b      	ldr	r3, [r3, #0]
 8009ff2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ff4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ff6:	e853 3f00 	ldrex	r3, [r3]
 8009ffa:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009ffc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009ffe:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a002:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	681b      	ldr	r3, [r3, #0]
 800a00a:	461a      	mov	r2, r3
 800a00c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800a010:	647b      	str	r3, [r7, #68]	; 0x44
 800a012:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a014:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800a016:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a018:	e841 2300 	strex	r3, r2, [r1]
 800a01c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800a01e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a020:	2b00      	cmp	r3, #0
 800a022:	d1e4      	bne.n	8009fee <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	681b      	ldr	r3, [r3, #0]
 800a028:	3308      	adds	r3, #8
 800a02a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a02c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a02e:	e853 3f00 	ldrex	r3, [r3]
 800a032:	623b      	str	r3, [r7, #32]
   return(result);
 800a034:	6a3b      	ldr	r3, [r7, #32]
 800a036:	f023 0301 	bic.w	r3, r3, #1
 800a03a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	681b      	ldr	r3, [r3, #0]
 800a042:	3308      	adds	r3, #8
 800a044:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800a048:	633a      	str	r2, [r7, #48]	; 0x30
 800a04a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a04c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a04e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a050:	e841 2300 	strex	r3, r2, [r1]
 800a054:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a056:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a058:	2b00      	cmp	r3, #0
 800a05a:	d1e3      	bne.n	800a024 <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	2220      	movs	r2, #32
 800a060:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	2200      	movs	r2, #0
 800a068:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	2200      	movs	r2, #0
 800a06e:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	681b      	ldr	r3, [r3, #0]
 800a074:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a076:	693b      	ldr	r3, [r7, #16]
 800a078:	e853 3f00 	ldrex	r3, [r3]
 800a07c:	60fb      	str	r3, [r7, #12]
   return(result);
 800a07e:	68fb      	ldr	r3, [r7, #12]
 800a080:	f023 0310 	bic.w	r3, r3, #16
 800a084:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	681b      	ldr	r3, [r3, #0]
 800a08c:	461a      	mov	r2, r3
 800a08e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800a092:	61fb      	str	r3, [r7, #28]
 800a094:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a096:	69b9      	ldr	r1, [r7, #24]
 800a098:	69fa      	ldr	r2, [r7, #28]
 800a09a:	e841 2300 	strex	r3, r2, [r1]
 800a09e:	617b      	str	r3, [r7, #20]
   return(result);
 800a0a0:	697b      	ldr	r3, [r7, #20]
 800a0a2:	2b00      	cmp	r3, #0
 800a0a4:	d1e4      	bne.n	800a070 <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	2202      	movs	r2, #2
 800a0aa:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800a0ac:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800a0b0:	4619      	mov	r1, r3
 800a0b2:	6878      	ldr	r0, [r7, #4]
 800a0b4:	f000 f846 	bl	800a144 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800a0b8:	e02a      	b.n	800a110 <HAL_UART_IRQHandler+0x598>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800a0ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a0be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a0c2:	2b00      	cmp	r3, #0
 800a0c4:	d00e      	beq.n	800a0e4 <HAL_UART_IRQHandler+0x56c>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800a0c6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a0ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a0ce:	2b00      	cmp	r3, #0
 800a0d0:	d008      	beq.n	800a0e4 <HAL_UART_IRQHandler+0x56c>
  {
    if (huart->TxISR != NULL)
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a0d6:	2b00      	cmp	r3, #0
 800a0d8:	d01c      	beq.n	800a114 <HAL_UART_IRQHandler+0x59c>
    {
      huart->TxISR(huart);
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a0de:	6878      	ldr	r0, [r7, #4]
 800a0e0:	4798      	blx	r3
    }
    return;
 800a0e2:	e017      	b.n	800a114 <HAL_UART_IRQHandler+0x59c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800a0e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a0e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a0ec:	2b00      	cmp	r3, #0
 800a0ee:	d012      	beq.n	800a116 <HAL_UART_IRQHandler+0x59e>
 800a0f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a0f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a0f8:	2b00      	cmp	r3, #0
 800a0fa:	d00c      	beq.n	800a116 <HAL_UART_IRQHandler+0x59e>
  {
    UART_EndTransmit_IT(huart);
 800a0fc:	6878      	ldr	r0, [r7, #4]
 800a0fe:	f000 feb9 	bl	800ae74 <UART_EndTransmit_IT>
    return;
 800a102:	e008      	b.n	800a116 <HAL_UART_IRQHandler+0x59e>
      return;
 800a104:	bf00      	nop
 800a106:	e006      	b.n	800a116 <HAL_UART_IRQHandler+0x59e>
    return;
 800a108:	bf00      	nop
 800a10a:	e004      	b.n	800a116 <HAL_UART_IRQHandler+0x59e>
      return;
 800a10c:	bf00      	nop
 800a10e:	e002      	b.n	800a116 <HAL_UART_IRQHandler+0x59e>
      return;
 800a110:	bf00      	nop
 800a112:	e000      	b.n	800a116 <HAL_UART_IRQHandler+0x59e>
    return;
 800a114:	bf00      	nop
  }

}
 800a116:	37e8      	adds	r7, #232	; 0xe8
 800a118:	46bd      	mov	sp, r7
 800a11a:	bd80      	pop	{r7, pc}

0800a11c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800a11c:	b480      	push	{r7}
 800a11e:	b083      	sub	sp, #12
 800a120:	af00      	add	r7, sp, #0
 800a122:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800a124:	bf00      	nop
 800a126:	370c      	adds	r7, #12
 800a128:	46bd      	mov	sp, r7
 800a12a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a12e:	4770      	bx	lr

0800a130 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800a130:	b480      	push	{r7}
 800a132:	b083      	sub	sp, #12
 800a134:	af00      	add	r7, sp, #0
 800a136:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800a138:	bf00      	nop
 800a13a:	370c      	adds	r7, #12
 800a13c:	46bd      	mov	sp, r7
 800a13e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a142:	4770      	bx	lr

0800a144 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800a144:	b480      	push	{r7}
 800a146:	b083      	sub	sp, #12
 800a148:	af00      	add	r7, sp, #0
 800a14a:	6078      	str	r0, [r7, #4]
 800a14c:	460b      	mov	r3, r1
 800a14e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800a150:	bf00      	nop
 800a152:	370c      	adds	r7, #12
 800a154:	46bd      	mov	sp, r7
 800a156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a15a:	4770      	bx	lr

0800a15c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a15c:	b580      	push	{r7, lr}
 800a15e:	b088      	sub	sp, #32
 800a160:	af00      	add	r7, sp, #0
 800a162:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800a164:	2300      	movs	r3, #0
 800a166:	77bb      	strb	r3, [r7, #30]
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	685b      	ldr	r3, [r3, #4]
 800a16c:	4aa0      	ldr	r2, [pc, #640]	; (800a3f0 <UART_SetConfig+0x294>)
 800a16e:	4293      	cmp	r3, r2
 800a170:	d904      	bls.n	800a17c <UART_SetConfig+0x20>
 800a172:	f640 315d 	movw	r1, #2909	; 0xb5d
 800a176:	489f      	ldr	r0, [pc, #636]	; (800a3f4 <UART_SetConfig+0x298>)
 800a178:	f7f8 fd07 	bl	8002b8a <assert_failed>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	689b      	ldr	r3, [r3, #8]
 800a180:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a184:	d00d      	beq.n	800a1a2 <UART_SetConfig+0x46>
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	689b      	ldr	r3, [r3, #8]
 800a18a:	2b00      	cmp	r3, #0
 800a18c:	d009      	beq.n	800a1a2 <UART_SetConfig+0x46>
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	689b      	ldr	r3, [r3, #8]
 800a192:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a196:	d004      	beq.n	800a1a2 <UART_SetConfig+0x46>
 800a198:	f640 315e 	movw	r1, #2910	; 0xb5e
 800a19c:	4895      	ldr	r0, [pc, #596]	; (800a3f4 <UART_SetConfig+0x298>)
 800a19e:	f7f8 fcf4 	bl	8002b8a <assert_failed>
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	68db      	ldr	r3, [r3, #12]
 800a1a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a1aa:	d012      	beq.n	800a1d2 <UART_SetConfig+0x76>
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	68db      	ldr	r3, [r3, #12]
 800a1b0:	2b00      	cmp	r3, #0
 800a1b2:	d00e      	beq.n	800a1d2 <UART_SetConfig+0x76>
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	68db      	ldr	r3, [r3, #12]
 800a1b8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800a1bc:	d009      	beq.n	800a1d2 <UART_SetConfig+0x76>
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	68db      	ldr	r3, [r3, #12]
 800a1c2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a1c6:	d004      	beq.n	800a1d2 <UART_SetConfig+0x76>
 800a1c8:	f640 315f 	movw	r1, #2911	; 0xb5f
 800a1cc:	4889      	ldr	r0, [pc, #548]	; (800a3f4 <UART_SetConfig+0x298>)
 800a1ce:	f7f8 fcdc 	bl	8002b8a <assert_failed>
  assert_param(IS_UART_ONE_BIT_SAMPLE(huart->Init.OneBitSampling));
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	6a1b      	ldr	r3, [r3, #32]
 800a1d6:	2b00      	cmp	r3, #0
 800a1d8:	d009      	beq.n	800a1ee <UART_SetConfig+0x92>
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	6a1b      	ldr	r3, [r3, #32]
 800a1de:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a1e2:	d004      	beq.n	800a1ee <UART_SetConfig+0x92>
 800a1e4:	f44f 6136 	mov.w	r1, #2912	; 0xb60
 800a1e8:	4882      	ldr	r0, [pc, #520]	; (800a3f4 <UART_SetConfig+0x298>)
 800a1ea:	f7f8 fcce 	bl	8002b8a <assert_failed>

  assert_param(IS_UART_PARITY(huart->Init.Parity));
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	691b      	ldr	r3, [r3, #16]
 800a1f2:	2b00      	cmp	r3, #0
 800a1f4:	d00e      	beq.n	800a214 <UART_SetConfig+0xb8>
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	691b      	ldr	r3, [r3, #16]
 800a1fa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a1fe:	d009      	beq.n	800a214 <UART_SetConfig+0xb8>
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	691b      	ldr	r3, [r3, #16]
 800a204:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800a208:	d004      	beq.n	800a214 <UART_SetConfig+0xb8>
 800a20a:	f640 3162 	movw	r1, #2914	; 0xb62
 800a20e:	4879      	ldr	r0, [pc, #484]	; (800a3f4 <UART_SetConfig+0x298>)
 800a210:	f7f8 fcbb 	bl	8002b8a <assert_failed>
  assert_param(IS_UART_MODE(huart->Init.Mode));
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	695b      	ldr	r3, [r3, #20]
 800a218:	f023 030c 	bic.w	r3, r3, #12
 800a21c:	2b00      	cmp	r3, #0
 800a21e:	d103      	bne.n	800a228 <UART_SetConfig+0xcc>
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	695b      	ldr	r3, [r3, #20]
 800a224:	2b00      	cmp	r3, #0
 800a226:	d104      	bne.n	800a232 <UART_SetConfig+0xd6>
 800a228:	f640 3163 	movw	r1, #2915	; 0xb63
 800a22c:	4871      	ldr	r0, [pc, #452]	; (800a3f4 <UART_SetConfig+0x298>)
 800a22e:	f7f8 fcac 	bl	8002b8a <assert_failed>
  assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	699b      	ldr	r3, [r3, #24]
 800a236:	2b00      	cmp	r3, #0
 800a238:	d013      	beq.n	800a262 <UART_SetConfig+0x106>
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	699b      	ldr	r3, [r3, #24]
 800a23e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a242:	d00e      	beq.n	800a262 <UART_SetConfig+0x106>
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	699b      	ldr	r3, [r3, #24]
 800a248:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a24c:	d009      	beq.n	800a262 <UART_SetConfig+0x106>
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	699b      	ldr	r3, [r3, #24]
 800a252:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a256:	d004      	beq.n	800a262 <UART_SetConfig+0x106>
 800a258:	f640 3164 	movw	r1, #2916	; 0xb64
 800a25c:	4865      	ldr	r0, [pc, #404]	; (800a3f4 <UART_SetConfig+0x298>)
 800a25e:	f7f8 fc94 	bl	8002b8a <assert_failed>
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	69db      	ldr	r3, [r3, #28]
 800a266:	2b00      	cmp	r3, #0
 800a268:	d009      	beq.n	800a27e <UART_SetConfig+0x122>
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	69db      	ldr	r3, [r3, #28]
 800a26e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a272:	d004      	beq.n	800a27e <UART_SetConfig+0x122>
 800a274:	f640 3165 	movw	r1, #2917	; 0xb65
 800a278:	485e      	ldr	r0, [pc, #376]	; (800a3f4 <UART_SetConfig+0x298>)
 800a27a:	f7f8 fc86 	bl	8002b8a <assert_failed>
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	689a      	ldr	r2, [r3, #8]
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	691b      	ldr	r3, [r3, #16]
 800a286:	431a      	orrs	r2, r3
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	695b      	ldr	r3, [r3, #20]
 800a28c:	431a      	orrs	r2, r3
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	69db      	ldr	r3, [r3, #28]
 800a292:	4313      	orrs	r3, r2
 800a294:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	681b      	ldr	r3, [r3, #0]
 800a29a:	681a      	ldr	r2, [r3, #0]
 800a29c:	4b56      	ldr	r3, [pc, #344]	; (800a3f8 <UART_SetConfig+0x29c>)
 800a29e:	4013      	ands	r3, r2
 800a2a0:	687a      	ldr	r2, [r7, #4]
 800a2a2:	6812      	ldr	r2, [r2, #0]
 800a2a4:	6979      	ldr	r1, [r7, #20]
 800a2a6:	430b      	orrs	r3, r1
 800a2a8:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	681b      	ldr	r3, [r3, #0]
 800a2ae:	685b      	ldr	r3, [r3, #4]
 800a2b0:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	68da      	ldr	r2, [r3, #12]
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	681b      	ldr	r3, [r3, #0]
 800a2bc:	430a      	orrs	r2, r1
 800a2be:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	699b      	ldr	r3, [r3, #24]
 800a2c4:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	6a1b      	ldr	r3, [r3, #32]
 800a2ca:	697a      	ldr	r2, [r7, #20]
 800a2cc:	4313      	orrs	r3, r2
 800a2ce:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	681b      	ldr	r3, [r3, #0]
 800a2d4:	689b      	ldr	r3, [r3, #8]
 800a2d6:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	681b      	ldr	r3, [r3, #0]
 800a2de:	697a      	ldr	r2, [r7, #20]
 800a2e0:	430a      	orrs	r2, r1
 800a2e2:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	681b      	ldr	r3, [r3, #0]
 800a2e8:	4a44      	ldr	r2, [pc, #272]	; (800a3fc <UART_SetConfig+0x2a0>)
 800a2ea:	4293      	cmp	r3, r2
 800a2ec:	d121      	bne.n	800a332 <UART_SetConfig+0x1d6>
 800a2ee:	4b44      	ldr	r3, [pc, #272]	; (800a400 <UART_SetConfig+0x2a4>)
 800a2f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a2f4:	f003 0303 	and.w	r3, r3, #3
 800a2f8:	2b03      	cmp	r3, #3
 800a2fa:	d817      	bhi.n	800a32c <UART_SetConfig+0x1d0>
 800a2fc:	a201      	add	r2, pc, #4	; (adr r2, 800a304 <UART_SetConfig+0x1a8>)
 800a2fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a302:	bf00      	nop
 800a304:	0800a315 	.word	0x0800a315
 800a308:	0800a321 	.word	0x0800a321
 800a30c:	0800a31b 	.word	0x0800a31b
 800a310:	0800a327 	.word	0x0800a327
 800a314:	2301      	movs	r3, #1
 800a316:	77fb      	strb	r3, [r7, #31]
 800a318:	e14c      	b.n	800a5b4 <UART_SetConfig+0x458>
 800a31a:	2302      	movs	r3, #2
 800a31c:	77fb      	strb	r3, [r7, #31]
 800a31e:	e149      	b.n	800a5b4 <UART_SetConfig+0x458>
 800a320:	2304      	movs	r3, #4
 800a322:	77fb      	strb	r3, [r7, #31]
 800a324:	e146      	b.n	800a5b4 <UART_SetConfig+0x458>
 800a326:	2308      	movs	r3, #8
 800a328:	77fb      	strb	r3, [r7, #31]
 800a32a:	e143      	b.n	800a5b4 <UART_SetConfig+0x458>
 800a32c:	2310      	movs	r3, #16
 800a32e:	77fb      	strb	r3, [r7, #31]
 800a330:	e140      	b.n	800a5b4 <UART_SetConfig+0x458>
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	681b      	ldr	r3, [r3, #0]
 800a336:	4a33      	ldr	r2, [pc, #204]	; (800a404 <UART_SetConfig+0x2a8>)
 800a338:	4293      	cmp	r3, r2
 800a33a:	d132      	bne.n	800a3a2 <UART_SetConfig+0x246>
 800a33c:	4b30      	ldr	r3, [pc, #192]	; (800a400 <UART_SetConfig+0x2a4>)
 800a33e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a342:	f003 030c 	and.w	r3, r3, #12
 800a346:	2b0c      	cmp	r3, #12
 800a348:	d828      	bhi.n	800a39c <UART_SetConfig+0x240>
 800a34a:	a201      	add	r2, pc, #4	; (adr r2, 800a350 <UART_SetConfig+0x1f4>)
 800a34c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a350:	0800a385 	.word	0x0800a385
 800a354:	0800a39d 	.word	0x0800a39d
 800a358:	0800a39d 	.word	0x0800a39d
 800a35c:	0800a39d 	.word	0x0800a39d
 800a360:	0800a391 	.word	0x0800a391
 800a364:	0800a39d 	.word	0x0800a39d
 800a368:	0800a39d 	.word	0x0800a39d
 800a36c:	0800a39d 	.word	0x0800a39d
 800a370:	0800a38b 	.word	0x0800a38b
 800a374:	0800a39d 	.word	0x0800a39d
 800a378:	0800a39d 	.word	0x0800a39d
 800a37c:	0800a39d 	.word	0x0800a39d
 800a380:	0800a397 	.word	0x0800a397
 800a384:	2300      	movs	r3, #0
 800a386:	77fb      	strb	r3, [r7, #31]
 800a388:	e114      	b.n	800a5b4 <UART_SetConfig+0x458>
 800a38a:	2302      	movs	r3, #2
 800a38c:	77fb      	strb	r3, [r7, #31]
 800a38e:	e111      	b.n	800a5b4 <UART_SetConfig+0x458>
 800a390:	2304      	movs	r3, #4
 800a392:	77fb      	strb	r3, [r7, #31]
 800a394:	e10e      	b.n	800a5b4 <UART_SetConfig+0x458>
 800a396:	2308      	movs	r3, #8
 800a398:	77fb      	strb	r3, [r7, #31]
 800a39a:	e10b      	b.n	800a5b4 <UART_SetConfig+0x458>
 800a39c:	2310      	movs	r3, #16
 800a39e:	77fb      	strb	r3, [r7, #31]
 800a3a0:	e108      	b.n	800a5b4 <UART_SetConfig+0x458>
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	681b      	ldr	r3, [r3, #0]
 800a3a6:	4a18      	ldr	r2, [pc, #96]	; (800a408 <UART_SetConfig+0x2ac>)
 800a3a8:	4293      	cmp	r3, r2
 800a3aa:	d12f      	bne.n	800a40c <UART_SetConfig+0x2b0>
 800a3ac:	4b14      	ldr	r3, [pc, #80]	; (800a400 <UART_SetConfig+0x2a4>)
 800a3ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a3b2:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800a3b6:	2b30      	cmp	r3, #48	; 0x30
 800a3b8:	d013      	beq.n	800a3e2 <UART_SetConfig+0x286>
 800a3ba:	2b30      	cmp	r3, #48	; 0x30
 800a3bc:	d814      	bhi.n	800a3e8 <UART_SetConfig+0x28c>
 800a3be:	2b20      	cmp	r3, #32
 800a3c0:	d009      	beq.n	800a3d6 <UART_SetConfig+0x27a>
 800a3c2:	2b20      	cmp	r3, #32
 800a3c4:	d810      	bhi.n	800a3e8 <UART_SetConfig+0x28c>
 800a3c6:	2b00      	cmp	r3, #0
 800a3c8:	d002      	beq.n	800a3d0 <UART_SetConfig+0x274>
 800a3ca:	2b10      	cmp	r3, #16
 800a3cc:	d006      	beq.n	800a3dc <UART_SetConfig+0x280>
 800a3ce:	e00b      	b.n	800a3e8 <UART_SetConfig+0x28c>
 800a3d0:	2300      	movs	r3, #0
 800a3d2:	77fb      	strb	r3, [r7, #31]
 800a3d4:	e0ee      	b.n	800a5b4 <UART_SetConfig+0x458>
 800a3d6:	2302      	movs	r3, #2
 800a3d8:	77fb      	strb	r3, [r7, #31]
 800a3da:	e0eb      	b.n	800a5b4 <UART_SetConfig+0x458>
 800a3dc:	2304      	movs	r3, #4
 800a3de:	77fb      	strb	r3, [r7, #31]
 800a3e0:	e0e8      	b.n	800a5b4 <UART_SetConfig+0x458>
 800a3e2:	2308      	movs	r3, #8
 800a3e4:	77fb      	strb	r3, [r7, #31]
 800a3e6:	e0e5      	b.n	800a5b4 <UART_SetConfig+0x458>
 800a3e8:	2310      	movs	r3, #16
 800a3ea:	77fb      	strb	r3, [r7, #31]
 800a3ec:	e0e2      	b.n	800a5b4 <UART_SetConfig+0x458>
 800a3ee:	bf00      	nop
 800a3f0:	019bfcc0 	.word	0x019bfcc0
 800a3f4:	080158a0 	.word	0x080158a0
 800a3f8:	efff69f3 	.word	0xefff69f3
 800a3fc:	40011000 	.word	0x40011000
 800a400:	40023800 	.word	0x40023800
 800a404:	40004400 	.word	0x40004400
 800a408:	40004800 	.word	0x40004800
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	681b      	ldr	r3, [r3, #0]
 800a410:	4aa5      	ldr	r2, [pc, #660]	; (800a6a8 <UART_SetConfig+0x54c>)
 800a412:	4293      	cmp	r3, r2
 800a414:	d120      	bne.n	800a458 <UART_SetConfig+0x2fc>
 800a416:	4ba5      	ldr	r3, [pc, #660]	; (800a6ac <UART_SetConfig+0x550>)
 800a418:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a41c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800a420:	2bc0      	cmp	r3, #192	; 0xc0
 800a422:	d013      	beq.n	800a44c <UART_SetConfig+0x2f0>
 800a424:	2bc0      	cmp	r3, #192	; 0xc0
 800a426:	d814      	bhi.n	800a452 <UART_SetConfig+0x2f6>
 800a428:	2b80      	cmp	r3, #128	; 0x80
 800a42a:	d009      	beq.n	800a440 <UART_SetConfig+0x2e4>
 800a42c:	2b80      	cmp	r3, #128	; 0x80
 800a42e:	d810      	bhi.n	800a452 <UART_SetConfig+0x2f6>
 800a430:	2b00      	cmp	r3, #0
 800a432:	d002      	beq.n	800a43a <UART_SetConfig+0x2de>
 800a434:	2b40      	cmp	r3, #64	; 0x40
 800a436:	d006      	beq.n	800a446 <UART_SetConfig+0x2ea>
 800a438:	e00b      	b.n	800a452 <UART_SetConfig+0x2f6>
 800a43a:	2300      	movs	r3, #0
 800a43c:	77fb      	strb	r3, [r7, #31]
 800a43e:	e0b9      	b.n	800a5b4 <UART_SetConfig+0x458>
 800a440:	2302      	movs	r3, #2
 800a442:	77fb      	strb	r3, [r7, #31]
 800a444:	e0b6      	b.n	800a5b4 <UART_SetConfig+0x458>
 800a446:	2304      	movs	r3, #4
 800a448:	77fb      	strb	r3, [r7, #31]
 800a44a:	e0b3      	b.n	800a5b4 <UART_SetConfig+0x458>
 800a44c:	2308      	movs	r3, #8
 800a44e:	77fb      	strb	r3, [r7, #31]
 800a450:	e0b0      	b.n	800a5b4 <UART_SetConfig+0x458>
 800a452:	2310      	movs	r3, #16
 800a454:	77fb      	strb	r3, [r7, #31]
 800a456:	e0ad      	b.n	800a5b4 <UART_SetConfig+0x458>
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	681b      	ldr	r3, [r3, #0]
 800a45c:	4a94      	ldr	r2, [pc, #592]	; (800a6b0 <UART_SetConfig+0x554>)
 800a45e:	4293      	cmp	r3, r2
 800a460:	d125      	bne.n	800a4ae <UART_SetConfig+0x352>
 800a462:	4b92      	ldr	r3, [pc, #584]	; (800a6ac <UART_SetConfig+0x550>)
 800a464:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a468:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a46c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a470:	d017      	beq.n	800a4a2 <UART_SetConfig+0x346>
 800a472:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a476:	d817      	bhi.n	800a4a8 <UART_SetConfig+0x34c>
 800a478:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a47c:	d00b      	beq.n	800a496 <UART_SetConfig+0x33a>
 800a47e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a482:	d811      	bhi.n	800a4a8 <UART_SetConfig+0x34c>
 800a484:	2b00      	cmp	r3, #0
 800a486:	d003      	beq.n	800a490 <UART_SetConfig+0x334>
 800a488:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a48c:	d006      	beq.n	800a49c <UART_SetConfig+0x340>
 800a48e:	e00b      	b.n	800a4a8 <UART_SetConfig+0x34c>
 800a490:	2300      	movs	r3, #0
 800a492:	77fb      	strb	r3, [r7, #31]
 800a494:	e08e      	b.n	800a5b4 <UART_SetConfig+0x458>
 800a496:	2302      	movs	r3, #2
 800a498:	77fb      	strb	r3, [r7, #31]
 800a49a:	e08b      	b.n	800a5b4 <UART_SetConfig+0x458>
 800a49c:	2304      	movs	r3, #4
 800a49e:	77fb      	strb	r3, [r7, #31]
 800a4a0:	e088      	b.n	800a5b4 <UART_SetConfig+0x458>
 800a4a2:	2308      	movs	r3, #8
 800a4a4:	77fb      	strb	r3, [r7, #31]
 800a4a6:	e085      	b.n	800a5b4 <UART_SetConfig+0x458>
 800a4a8:	2310      	movs	r3, #16
 800a4aa:	77fb      	strb	r3, [r7, #31]
 800a4ac:	e082      	b.n	800a5b4 <UART_SetConfig+0x458>
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	681b      	ldr	r3, [r3, #0]
 800a4b2:	4a80      	ldr	r2, [pc, #512]	; (800a6b4 <UART_SetConfig+0x558>)
 800a4b4:	4293      	cmp	r3, r2
 800a4b6:	d125      	bne.n	800a504 <UART_SetConfig+0x3a8>
 800a4b8:	4b7c      	ldr	r3, [pc, #496]	; (800a6ac <UART_SetConfig+0x550>)
 800a4ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a4be:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800a4c2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a4c6:	d017      	beq.n	800a4f8 <UART_SetConfig+0x39c>
 800a4c8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a4cc:	d817      	bhi.n	800a4fe <UART_SetConfig+0x3a2>
 800a4ce:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a4d2:	d00b      	beq.n	800a4ec <UART_SetConfig+0x390>
 800a4d4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a4d8:	d811      	bhi.n	800a4fe <UART_SetConfig+0x3a2>
 800a4da:	2b00      	cmp	r3, #0
 800a4dc:	d003      	beq.n	800a4e6 <UART_SetConfig+0x38a>
 800a4de:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a4e2:	d006      	beq.n	800a4f2 <UART_SetConfig+0x396>
 800a4e4:	e00b      	b.n	800a4fe <UART_SetConfig+0x3a2>
 800a4e6:	2301      	movs	r3, #1
 800a4e8:	77fb      	strb	r3, [r7, #31]
 800a4ea:	e063      	b.n	800a5b4 <UART_SetConfig+0x458>
 800a4ec:	2302      	movs	r3, #2
 800a4ee:	77fb      	strb	r3, [r7, #31]
 800a4f0:	e060      	b.n	800a5b4 <UART_SetConfig+0x458>
 800a4f2:	2304      	movs	r3, #4
 800a4f4:	77fb      	strb	r3, [r7, #31]
 800a4f6:	e05d      	b.n	800a5b4 <UART_SetConfig+0x458>
 800a4f8:	2308      	movs	r3, #8
 800a4fa:	77fb      	strb	r3, [r7, #31]
 800a4fc:	e05a      	b.n	800a5b4 <UART_SetConfig+0x458>
 800a4fe:	2310      	movs	r3, #16
 800a500:	77fb      	strb	r3, [r7, #31]
 800a502:	e057      	b.n	800a5b4 <UART_SetConfig+0x458>
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	681b      	ldr	r3, [r3, #0]
 800a508:	4a6b      	ldr	r2, [pc, #428]	; (800a6b8 <UART_SetConfig+0x55c>)
 800a50a:	4293      	cmp	r3, r2
 800a50c:	d125      	bne.n	800a55a <UART_SetConfig+0x3fe>
 800a50e:	4b67      	ldr	r3, [pc, #412]	; (800a6ac <UART_SetConfig+0x550>)
 800a510:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a514:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800a518:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800a51c:	d017      	beq.n	800a54e <UART_SetConfig+0x3f2>
 800a51e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800a522:	d817      	bhi.n	800a554 <UART_SetConfig+0x3f8>
 800a524:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a528:	d00b      	beq.n	800a542 <UART_SetConfig+0x3e6>
 800a52a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a52e:	d811      	bhi.n	800a554 <UART_SetConfig+0x3f8>
 800a530:	2b00      	cmp	r3, #0
 800a532:	d003      	beq.n	800a53c <UART_SetConfig+0x3e0>
 800a534:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a538:	d006      	beq.n	800a548 <UART_SetConfig+0x3ec>
 800a53a:	e00b      	b.n	800a554 <UART_SetConfig+0x3f8>
 800a53c:	2300      	movs	r3, #0
 800a53e:	77fb      	strb	r3, [r7, #31]
 800a540:	e038      	b.n	800a5b4 <UART_SetConfig+0x458>
 800a542:	2302      	movs	r3, #2
 800a544:	77fb      	strb	r3, [r7, #31]
 800a546:	e035      	b.n	800a5b4 <UART_SetConfig+0x458>
 800a548:	2304      	movs	r3, #4
 800a54a:	77fb      	strb	r3, [r7, #31]
 800a54c:	e032      	b.n	800a5b4 <UART_SetConfig+0x458>
 800a54e:	2308      	movs	r3, #8
 800a550:	77fb      	strb	r3, [r7, #31]
 800a552:	e02f      	b.n	800a5b4 <UART_SetConfig+0x458>
 800a554:	2310      	movs	r3, #16
 800a556:	77fb      	strb	r3, [r7, #31]
 800a558:	e02c      	b.n	800a5b4 <UART_SetConfig+0x458>
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	681b      	ldr	r3, [r3, #0]
 800a55e:	4a57      	ldr	r2, [pc, #348]	; (800a6bc <UART_SetConfig+0x560>)
 800a560:	4293      	cmp	r3, r2
 800a562:	d125      	bne.n	800a5b0 <UART_SetConfig+0x454>
 800a564:	4b51      	ldr	r3, [pc, #324]	; (800a6ac <UART_SetConfig+0x550>)
 800a566:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a56a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800a56e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800a572:	d017      	beq.n	800a5a4 <UART_SetConfig+0x448>
 800a574:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800a578:	d817      	bhi.n	800a5aa <UART_SetConfig+0x44e>
 800a57a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a57e:	d00b      	beq.n	800a598 <UART_SetConfig+0x43c>
 800a580:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a584:	d811      	bhi.n	800a5aa <UART_SetConfig+0x44e>
 800a586:	2b00      	cmp	r3, #0
 800a588:	d003      	beq.n	800a592 <UART_SetConfig+0x436>
 800a58a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a58e:	d006      	beq.n	800a59e <UART_SetConfig+0x442>
 800a590:	e00b      	b.n	800a5aa <UART_SetConfig+0x44e>
 800a592:	2300      	movs	r3, #0
 800a594:	77fb      	strb	r3, [r7, #31]
 800a596:	e00d      	b.n	800a5b4 <UART_SetConfig+0x458>
 800a598:	2302      	movs	r3, #2
 800a59a:	77fb      	strb	r3, [r7, #31]
 800a59c:	e00a      	b.n	800a5b4 <UART_SetConfig+0x458>
 800a59e:	2304      	movs	r3, #4
 800a5a0:	77fb      	strb	r3, [r7, #31]
 800a5a2:	e007      	b.n	800a5b4 <UART_SetConfig+0x458>
 800a5a4:	2308      	movs	r3, #8
 800a5a6:	77fb      	strb	r3, [r7, #31]
 800a5a8:	e004      	b.n	800a5b4 <UART_SetConfig+0x458>
 800a5aa:	2310      	movs	r3, #16
 800a5ac:	77fb      	strb	r3, [r7, #31]
 800a5ae:	e001      	b.n	800a5b4 <UART_SetConfig+0x458>
 800a5b0:	2310      	movs	r3, #16
 800a5b2:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	69db      	ldr	r3, [r3, #28]
 800a5b8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a5bc:	d15c      	bne.n	800a678 <UART_SetConfig+0x51c>
  {
    switch (clocksource)
 800a5be:	7ffb      	ldrb	r3, [r7, #31]
 800a5c0:	2b08      	cmp	r3, #8
 800a5c2:	d828      	bhi.n	800a616 <UART_SetConfig+0x4ba>
 800a5c4:	a201      	add	r2, pc, #4	; (adr r2, 800a5cc <UART_SetConfig+0x470>)
 800a5c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a5ca:	bf00      	nop
 800a5cc:	0800a5f1 	.word	0x0800a5f1
 800a5d0:	0800a5f9 	.word	0x0800a5f9
 800a5d4:	0800a601 	.word	0x0800a601
 800a5d8:	0800a617 	.word	0x0800a617
 800a5dc:	0800a607 	.word	0x0800a607
 800a5e0:	0800a617 	.word	0x0800a617
 800a5e4:	0800a617 	.word	0x0800a617
 800a5e8:	0800a617 	.word	0x0800a617
 800a5ec:	0800a60f 	.word	0x0800a60f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a5f0:	f7fb ffec 	bl	80065cc <HAL_RCC_GetPCLK1Freq>
 800a5f4:	61b8      	str	r0, [r7, #24]
        break;
 800a5f6:	e013      	b.n	800a620 <UART_SetConfig+0x4c4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a5f8:	f7fb fffc 	bl	80065f4 <HAL_RCC_GetPCLK2Freq>
 800a5fc:	61b8      	str	r0, [r7, #24]
        break;
 800a5fe:	e00f      	b.n	800a620 <UART_SetConfig+0x4c4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a600:	4b2f      	ldr	r3, [pc, #188]	; (800a6c0 <UART_SetConfig+0x564>)
 800a602:	61bb      	str	r3, [r7, #24]
        break;
 800a604:	e00c      	b.n	800a620 <UART_SetConfig+0x4c4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a606:	f7fb ff0f 	bl	8006428 <HAL_RCC_GetSysClockFreq>
 800a60a:	61b8      	str	r0, [r7, #24]
        break;
 800a60c:	e008      	b.n	800a620 <UART_SetConfig+0x4c4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a60e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a612:	61bb      	str	r3, [r7, #24]
        break;
 800a614:	e004      	b.n	800a620 <UART_SetConfig+0x4c4>
      default:
        pclk = 0U;
 800a616:	2300      	movs	r3, #0
 800a618:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800a61a:	2301      	movs	r3, #1
 800a61c:	77bb      	strb	r3, [r7, #30]
        break;
 800a61e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800a620:	69bb      	ldr	r3, [r7, #24]
 800a622:	2b00      	cmp	r3, #0
 800a624:	f000 8082 	beq.w	800a72c <UART_SetConfig+0x5d0>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800a628:	69bb      	ldr	r3, [r7, #24]
 800a62a:	005a      	lsls	r2, r3, #1
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	685b      	ldr	r3, [r3, #4]
 800a630:	085b      	lsrs	r3, r3, #1
 800a632:	441a      	add	r2, r3
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	685b      	ldr	r3, [r3, #4]
 800a638:	fbb2 f3f3 	udiv	r3, r2, r3
 800a63c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a63e:	693b      	ldr	r3, [r7, #16]
 800a640:	2b0f      	cmp	r3, #15
 800a642:	d916      	bls.n	800a672 <UART_SetConfig+0x516>
 800a644:	693b      	ldr	r3, [r7, #16]
 800a646:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a64a:	d212      	bcs.n	800a672 <UART_SetConfig+0x516>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a64c:	693b      	ldr	r3, [r7, #16]
 800a64e:	b29b      	uxth	r3, r3
 800a650:	f023 030f 	bic.w	r3, r3, #15
 800a654:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a656:	693b      	ldr	r3, [r7, #16]
 800a658:	085b      	lsrs	r3, r3, #1
 800a65a:	b29b      	uxth	r3, r3
 800a65c:	f003 0307 	and.w	r3, r3, #7
 800a660:	b29a      	uxth	r2, r3
 800a662:	89fb      	ldrh	r3, [r7, #14]
 800a664:	4313      	orrs	r3, r2
 800a666:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	681b      	ldr	r3, [r3, #0]
 800a66c:	89fa      	ldrh	r2, [r7, #14]
 800a66e:	60da      	str	r2, [r3, #12]
 800a670:	e05c      	b.n	800a72c <UART_SetConfig+0x5d0>
      }
      else
      {
        ret = HAL_ERROR;
 800a672:	2301      	movs	r3, #1
 800a674:	77bb      	strb	r3, [r7, #30]
 800a676:	e059      	b.n	800a72c <UART_SetConfig+0x5d0>
      }
    }
  }
  else
  {
    switch (clocksource)
 800a678:	7ffb      	ldrb	r3, [r7, #31]
 800a67a:	2b08      	cmp	r3, #8
 800a67c:	d835      	bhi.n	800a6ea <UART_SetConfig+0x58e>
 800a67e:	a201      	add	r2, pc, #4	; (adr r2, 800a684 <UART_SetConfig+0x528>)
 800a680:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a684:	0800a6c5 	.word	0x0800a6c5
 800a688:	0800a6cd 	.word	0x0800a6cd
 800a68c:	0800a6d5 	.word	0x0800a6d5
 800a690:	0800a6eb 	.word	0x0800a6eb
 800a694:	0800a6db 	.word	0x0800a6db
 800a698:	0800a6eb 	.word	0x0800a6eb
 800a69c:	0800a6eb 	.word	0x0800a6eb
 800a6a0:	0800a6eb 	.word	0x0800a6eb
 800a6a4:	0800a6e3 	.word	0x0800a6e3
 800a6a8:	40004c00 	.word	0x40004c00
 800a6ac:	40023800 	.word	0x40023800
 800a6b0:	40005000 	.word	0x40005000
 800a6b4:	40011400 	.word	0x40011400
 800a6b8:	40007800 	.word	0x40007800
 800a6bc:	40007c00 	.word	0x40007c00
 800a6c0:	00f42400 	.word	0x00f42400
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a6c4:	f7fb ff82 	bl	80065cc <HAL_RCC_GetPCLK1Freq>
 800a6c8:	61b8      	str	r0, [r7, #24]
        break;
 800a6ca:	e013      	b.n	800a6f4 <UART_SetConfig+0x598>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a6cc:	f7fb ff92 	bl	80065f4 <HAL_RCC_GetPCLK2Freq>
 800a6d0:	61b8      	str	r0, [r7, #24]
        break;
 800a6d2:	e00f      	b.n	800a6f4 <UART_SetConfig+0x598>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a6d4:	4b1b      	ldr	r3, [pc, #108]	; (800a744 <UART_SetConfig+0x5e8>)
 800a6d6:	61bb      	str	r3, [r7, #24]
        break;
 800a6d8:	e00c      	b.n	800a6f4 <UART_SetConfig+0x598>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a6da:	f7fb fea5 	bl	8006428 <HAL_RCC_GetSysClockFreq>
 800a6de:	61b8      	str	r0, [r7, #24]
        break;
 800a6e0:	e008      	b.n	800a6f4 <UART_SetConfig+0x598>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a6e2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a6e6:	61bb      	str	r3, [r7, #24]
        break;
 800a6e8:	e004      	b.n	800a6f4 <UART_SetConfig+0x598>
      default:
        pclk = 0U;
 800a6ea:	2300      	movs	r3, #0
 800a6ec:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800a6ee:	2301      	movs	r3, #1
 800a6f0:	77bb      	strb	r3, [r7, #30]
        break;
 800a6f2:	bf00      	nop
    }

    if (pclk != 0U)
 800a6f4:	69bb      	ldr	r3, [r7, #24]
 800a6f6:	2b00      	cmp	r3, #0
 800a6f8:	d018      	beq.n	800a72c <UART_SetConfig+0x5d0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	685b      	ldr	r3, [r3, #4]
 800a6fe:	085a      	lsrs	r2, r3, #1
 800a700:	69bb      	ldr	r3, [r7, #24]
 800a702:	441a      	add	r2, r3
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	685b      	ldr	r3, [r3, #4]
 800a708:	fbb2 f3f3 	udiv	r3, r2, r3
 800a70c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a70e:	693b      	ldr	r3, [r7, #16]
 800a710:	2b0f      	cmp	r3, #15
 800a712:	d909      	bls.n	800a728 <UART_SetConfig+0x5cc>
 800a714:	693b      	ldr	r3, [r7, #16]
 800a716:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a71a:	d205      	bcs.n	800a728 <UART_SetConfig+0x5cc>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800a71c:	693b      	ldr	r3, [r7, #16]
 800a71e:	b29a      	uxth	r2, r3
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	681b      	ldr	r3, [r3, #0]
 800a724:	60da      	str	r2, [r3, #12]
 800a726:	e001      	b.n	800a72c <UART_SetConfig+0x5d0>
      }
      else
      {
        ret = HAL_ERROR;
 800a728:	2301      	movs	r3, #1
 800a72a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	2200      	movs	r2, #0
 800a730:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800a732:	687b      	ldr	r3, [r7, #4]
 800a734:	2200      	movs	r2, #0
 800a736:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 800a738:	7fbb      	ldrb	r3, [r7, #30]
}
 800a73a:	4618      	mov	r0, r3
 800a73c:	3720      	adds	r7, #32
 800a73e:	46bd      	mov	sp, r7
 800a740:	bd80      	pop	{r7, pc}
 800a742:	bf00      	nop
 800a744:	00f42400 	.word	0x00f42400

0800a748 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a748:	b580      	push	{r7, lr}
 800a74a:	b082      	sub	sp, #8
 800a74c:	af00      	add	r7, sp, #0
 800a74e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a754:	2bff      	cmp	r3, #255	; 0xff
 800a756:	d904      	bls.n	800a762 <UART_AdvFeatureConfig+0x1a>
 800a758:	f640 31e6 	movw	r1, #3046	; 0xbe6
 800a75c:	488e      	ldr	r0, [pc, #568]	; (800a998 <UART_AdvFeatureConfig+0x250>)
 800a75e:	f7f8 fa14 	bl	8002b8a <assert_failed>

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a766:	f003 0301 	and.w	r3, r3, #1
 800a76a:	2b00      	cmp	r3, #0
 800a76c:	d018      	beq.n	800a7a0 <UART_AdvFeatureConfig+0x58>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
 800a76e:	687b      	ldr	r3, [r7, #4]
 800a770:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a772:	2b00      	cmp	r3, #0
 800a774:	d009      	beq.n	800a78a <UART_AdvFeatureConfig+0x42>
 800a776:	687b      	ldr	r3, [r7, #4]
 800a778:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a77a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a77e:	d004      	beq.n	800a78a <UART_AdvFeatureConfig+0x42>
 800a780:	f640 31eb 	movw	r1, #3051	; 0xbeb
 800a784:	4884      	ldr	r0, [pc, #528]	; (800a998 <UART_AdvFeatureConfig+0x250>)
 800a786:	f7f8 fa00 	bl	8002b8a <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	681b      	ldr	r3, [r3, #0]
 800a78e:	685b      	ldr	r3, [r3, #4]
 800a790:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	681b      	ldr	r3, [r3, #0]
 800a79c:	430a      	orrs	r2, r1
 800a79e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a7a4:	f003 0302 	and.w	r3, r3, #2
 800a7a8:	2b00      	cmp	r3, #0
 800a7aa:	d018      	beq.n	800a7de <UART_AdvFeatureConfig+0x96>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a7b0:	2b00      	cmp	r3, #0
 800a7b2:	d009      	beq.n	800a7c8 <UART_AdvFeatureConfig+0x80>
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a7b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a7bc:	d004      	beq.n	800a7c8 <UART_AdvFeatureConfig+0x80>
 800a7be:	f640 31f2 	movw	r1, #3058	; 0xbf2
 800a7c2:	4875      	ldr	r0, [pc, #468]	; (800a998 <UART_AdvFeatureConfig+0x250>)
 800a7c4:	f7f8 f9e1 	bl	8002b8a <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	681b      	ldr	r3, [r3, #0]
 800a7cc:	685b      	ldr	r3, [r3, #4]
 800a7ce:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a7d6:	687b      	ldr	r3, [r7, #4]
 800a7d8:	681b      	ldr	r3, [r3, #0]
 800a7da:	430a      	orrs	r2, r1
 800a7dc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a7e2:	f003 0304 	and.w	r3, r3, #4
 800a7e6:	2b00      	cmp	r3, #0
 800a7e8:	d018      	beq.n	800a81c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a7ee:	2b00      	cmp	r3, #0
 800a7f0:	d009      	beq.n	800a806 <UART_AdvFeatureConfig+0xbe>
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a7f6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800a7fa:	d004      	beq.n	800a806 <UART_AdvFeatureConfig+0xbe>
 800a7fc:	f640 31f9 	movw	r1, #3065	; 0xbf9
 800a800:	4865      	ldr	r0, [pc, #404]	; (800a998 <UART_AdvFeatureConfig+0x250>)
 800a802:	f7f8 f9c2 	bl	8002b8a <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	681b      	ldr	r3, [r3, #0]
 800a80a:	685b      	ldr	r3, [r3, #4]
 800a80c:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	681b      	ldr	r3, [r3, #0]
 800a818:	430a      	orrs	r2, r1
 800a81a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a81c:	687b      	ldr	r3, [r7, #4]
 800a81e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a820:	f003 0308 	and.w	r3, r3, #8
 800a824:	2b00      	cmp	r3, #0
 800a826:	d018      	beq.n	800a85a <UART_AdvFeatureConfig+0x112>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a82c:	2b00      	cmp	r3, #0
 800a82e:	d009      	beq.n	800a844 <UART_AdvFeatureConfig+0xfc>
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a834:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a838:	d004      	beq.n	800a844 <UART_AdvFeatureConfig+0xfc>
 800a83a:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 800a83e:	4856      	ldr	r0, [pc, #344]	; (800a998 <UART_AdvFeatureConfig+0x250>)
 800a840:	f7f8 f9a3 	bl	8002b8a <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	681b      	ldr	r3, [r3, #0]
 800a848:	685b      	ldr	r3, [r3, #4]
 800a84a:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	681b      	ldr	r3, [r3, #0]
 800a856:	430a      	orrs	r2, r1
 800a858:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a85e:	f003 0310 	and.w	r3, r3, #16
 800a862:	2b00      	cmp	r3, #0
 800a864:	d018      	beq.n	800a898 <UART_AdvFeatureConfig+0x150>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a86a:	2b00      	cmp	r3, #0
 800a86c:	d009      	beq.n	800a882 <UART_AdvFeatureConfig+0x13a>
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a872:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a876:	d004      	beq.n	800a882 <UART_AdvFeatureConfig+0x13a>
 800a878:	f640 4107 	movw	r1, #3079	; 0xc07
 800a87c:	4846      	ldr	r0, [pc, #280]	; (800a998 <UART_AdvFeatureConfig+0x250>)
 800a87e:	f7f8 f984 	bl	8002b8a <assert_failed>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	681b      	ldr	r3, [r3, #0]
 800a886:	689b      	ldr	r3, [r3, #8]
 800a888:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	681b      	ldr	r3, [r3, #0]
 800a894:	430a      	orrs	r2, r1
 800a896:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a89c:	f003 0320 	and.w	r3, r3, #32
 800a8a0:	2b00      	cmp	r3, #0
 800a8a2:	d018      	beq.n	800a8d6 <UART_AdvFeatureConfig+0x18e>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a8a8:	2b00      	cmp	r3, #0
 800a8aa:	d009      	beq.n	800a8c0 <UART_AdvFeatureConfig+0x178>
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a8b0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a8b4:	d004      	beq.n	800a8c0 <UART_AdvFeatureConfig+0x178>
 800a8b6:	f640 410e 	movw	r1, #3086	; 0xc0e
 800a8ba:	4837      	ldr	r0, [pc, #220]	; (800a998 <UART_AdvFeatureConfig+0x250>)
 800a8bc:	f7f8 f965 	bl	8002b8a <assert_failed>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	681b      	ldr	r3, [r3, #0]
 800a8c4:	689b      	ldr	r3, [r3, #8]
 800a8c6:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800a8ca:	687b      	ldr	r3, [r7, #4]
 800a8cc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a8ce:	687b      	ldr	r3, [r7, #4]
 800a8d0:	681b      	ldr	r3, [r3, #0]
 800a8d2:	430a      	orrs	r2, r1
 800a8d4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a8d6:	687b      	ldr	r3, [r7, #4]
 800a8d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a8de:	2b00      	cmp	r3, #0
 800a8e0:	d064      	beq.n	800a9ac <UART_AdvFeatureConfig+0x264>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	681b      	ldr	r3, [r3, #0]
 800a8e6:	4a2d      	ldr	r2, [pc, #180]	; (800a99c <UART_AdvFeatureConfig+0x254>)
 800a8e8:	4293      	cmp	r3, r2
 800a8ea:	d013      	beq.n	800a914 <UART_AdvFeatureConfig+0x1cc>
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	681b      	ldr	r3, [r3, #0]
 800a8f0:	4a2b      	ldr	r2, [pc, #172]	; (800a9a0 <UART_AdvFeatureConfig+0x258>)
 800a8f2:	4293      	cmp	r3, r2
 800a8f4:	d00e      	beq.n	800a914 <UART_AdvFeatureConfig+0x1cc>
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	681b      	ldr	r3, [r3, #0]
 800a8fa:	4a2a      	ldr	r2, [pc, #168]	; (800a9a4 <UART_AdvFeatureConfig+0x25c>)
 800a8fc:	4293      	cmp	r3, r2
 800a8fe:	d009      	beq.n	800a914 <UART_AdvFeatureConfig+0x1cc>
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	681b      	ldr	r3, [r3, #0]
 800a904:	4a28      	ldr	r2, [pc, #160]	; (800a9a8 <UART_AdvFeatureConfig+0x260>)
 800a906:	4293      	cmp	r3, r2
 800a908:	d004      	beq.n	800a914 <UART_AdvFeatureConfig+0x1cc>
 800a90a:	f640 4115 	movw	r1, #3093	; 0xc15
 800a90e:	4822      	ldr	r0, [pc, #136]	; (800a998 <UART_AdvFeatureConfig+0x250>)
 800a910:	f7f8 f93b 	bl	8002b8a <assert_failed>
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a918:	2b00      	cmp	r3, #0
 800a91a:	d009      	beq.n	800a930 <UART_AdvFeatureConfig+0x1e8>
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a920:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a924:	d004      	beq.n	800a930 <UART_AdvFeatureConfig+0x1e8>
 800a926:	f640 4116 	movw	r1, #3094	; 0xc16
 800a92a:	481b      	ldr	r0, [pc, #108]	; (800a998 <UART_AdvFeatureConfig+0x250>)
 800a92c:	f7f8 f92d 	bl	8002b8a <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	681b      	ldr	r3, [r3, #0]
 800a934:	685b      	ldr	r3, [r3, #4]
 800a936:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	681b      	ldr	r3, [r3, #0]
 800a942:	430a      	orrs	r2, r1
 800a944:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a94a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a94e:	d12d      	bne.n	800a9ac <UART_AdvFeatureConfig+0x264>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a954:	2b00      	cmp	r3, #0
 800a956:	d013      	beq.n	800a980 <UART_AdvFeatureConfig+0x238>
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a95c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a960:	d00e      	beq.n	800a980 <UART_AdvFeatureConfig+0x238>
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a966:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a96a:	d009      	beq.n	800a980 <UART_AdvFeatureConfig+0x238>
 800a96c:	687b      	ldr	r3, [r7, #4]
 800a96e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a970:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800a974:	d004      	beq.n	800a980 <UART_AdvFeatureConfig+0x238>
 800a976:	f640 411b 	movw	r1, #3099	; 0xc1b
 800a97a:	4807      	ldr	r0, [pc, #28]	; (800a998 <UART_AdvFeatureConfig+0x250>)
 800a97c:	f7f8 f905 	bl	8002b8a <assert_failed>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a980:	687b      	ldr	r3, [r7, #4]
 800a982:	681b      	ldr	r3, [r3, #0]
 800a984:	685b      	ldr	r3, [r3, #4]
 800a986:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a98e:	687b      	ldr	r3, [r7, #4]
 800a990:	681b      	ldr	r3, [r3, #0]
 800a992:	430a      	orrs	r2, r1
 800a994:	605a      	str	r2, [r3, #4]
 800a996:	e009      	b.n	800a9ac <UART_AdvFeatureConfig+0x264>
 800a998:	080158a0 	.word	0x080158a0
 800a99c:	40011000 	.word	0x40011000
 800a9a0:	40004400 	.word	0x40004400
 800a9a4:	40004800 	.word	0x40004800
 800a9a8:	40011400 	.word	0x40011400
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a9b4:	2b00      	cmp	r3, #0
 800a9b6:	d018      	beq.n	800a9ea <UART_AdvFeatureConfig+0x2a2>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a9bc:	2b00      	cmp	r3, #0
 800a9be:	d009      	beq.n	800a9d4 <UART_AdvFeatureConfig+0x28c>
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a9c4:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800a9c8:	d004      	beq.n	800a9d4 <UART_AdvFeatureConfig+0x28c>
 800a9ca:	f640 4123 	movw	r1, #3107	; 0xc23
 800a9ce:	4809      	ldr	r0, [pc, #36]	; (800a9f4 <UART_AdvFeatureConfig+0x2ac>)
 800a9d0:	f7f8 f8db 	bl	8002b8a <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	681b      	ldr	r3, [r3, #0]
 800a9d8:	685b      	ldr	r3, [r3, #4]
 800a9da:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800a9de:	687b      	ldr	r3, [r7, #4]
 800a9e0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a9e2:	687b      	ldr	r3, [r7, #4]
 800a9e4:	681b      	ldr	r3, [r3, #0]
 800a9e6:	430a      	orrs	r2, r1
 800a9e8:	605a      	str	r2, [r3, #4]
  }
}
 800a9ea:	bf00      	nop
 800a9ec:	3708      	adds	r7, #8
 800a9ee:	46bd      	mov	sp, r7
 800a9f0:	bd80      	pop	{r7, pc}
 800a9f2:	bf00      	nop
 800a9f4:	080158a0 	.word	0x080158a0

0800a9f8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a9f8:	b580      	push	{r7, lr}
 800a9fa:	b086      	sub	sp, #24
 800a9fc:	af02      	add	r7, sp, #8
 800a9fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	2200      	movs	r2, #0
 800aa04:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800aa08:	f7f8 fdb8 	bl	800357c <HAL_GetTick>
 800aa0c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	681b      	ldr	r3, [r3, #0]
 800aa12:	681b      	ldr	r3, [r3, #0]
 800aa14:	f003 0308 	and.w	r3, r3, #8
 800aa18:	2b08      	cmp	r3, #8
 800aa1a:	d10e      	bne.n	800aa3a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800aa1c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800aa20:	9300      	str	r3, [sp, #0]
 800aa22:	68fb      	ldr	r3, [r7, #12]
 800aa24:	2200      	movs	r2, #0
 800aa26:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800aa2a:	6878      	ldr	r0, [r7, #4]
 800aa2c:	f000 f81b 	bl	800aa66 <UART_WaitOnFlagUntilTimeout>
 800aa30:	4603      	mov	r3, r0
 800aa32:	2b00      	cmp	r3, #0
 800aa34:	d001      	beq.n	800aa3a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800aa36:	2303      	movs	r3, #3
 800aa38:	e011      	b.n	800aa5e <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800aa3a:	687b      	ldr	r3, [r7, #4]
 800aa3c:	2220      	movs	r2, #32
 800aa3e:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	2220      	movs	r2, #32
 800aa44:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	2200      	movs	r2, #0
 800aa4c:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	2200      	movs	r2, #0
 800aa52:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	2200      	movs	r2, #0
 800aa58:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 800aa5c:	2300      	movs	r3, #0
}
 800aa5e:	4618      	mov	r0, r3
 800aa60:	3710      	adds	r7, #16
 800aa62:	46bd      	mov	sp, r7
 800aa64:	bd80      	pop	{r7, pc}

0800aa66 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800aa66:	b580      	push	{r7, lr}
 800aa68:	b09c      	sub	sp, #112	; 0x70
 800aa6a:	af00      	add	r7, sp, #0
 800aa6c:	60f8      	str	r0, [r7, #12]
 800aa6e:	60b9      	str	r1, [r7, #8]
 800aa70:	603b      	str	r3, [r7, #0]
 800aa72:	4613      	mov	r3, r2
 800aa74:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800aa76:	e0a7      	b.n	800abc8 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800aa78:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800aa7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aa7e:	f000 80a3 	beq.w	800abc8 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800aa82:	f7f8 fd7b 	bl	800357c <HAL_GetTick>
 800aa86:	4602      	mov	r2, r0
 800aa88:	683b      	ldr	r3, [r7, #0]
 800aa8a:	1ad3      	subs	r3, r2, r3
 800aa8c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800aa8e:	429a      	cmp	r2, r3
 800aa90:	d302      	bcc.n	800aa98 <UART_WaitOnFlagUntilTimeout+0x32>
 800aa92:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800aa94:	2b00      	cmp	r3, #0
 800aa96:	d13f      	bne.n	800ab18 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800aa98:	68fb      	ldr	r3, [r7, #12]
 800aa9a:	681b      	ldr	r3, [r3, #0]
 800aa9c:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa9e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800aaa0:	e853 3f00 	ldrex	r3, [r3]
 800aaa4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800aaa6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800aaa8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800aaac:	667b      	str	r3, [r7, #100]	; 0x64
 800aaae:	68fb      	ldr	r3, [r7, #12]
 800aab0:	681b      	ldr	r3, [r3, #0]
 800aab2:	461a      	mov	r2, r3
 800aab4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800aab6:	65fb      	str	r3, [r7, #92]	; 0x5c
 800aab8:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aaba:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800aabc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800aabe:	e841 2300 	strex	r3, r2, [r1]
 800aac2:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800aac4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800aac6:	2b00      	cmp	r3, #0
 800aac8:	d1e6      	bne.n	800aa98 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800aaca:	68fb      	ldr	r3, [r7, #12]
 800aacc:	681b      	ldr	r3, [r3, #0]
 800aace:	3308      	adds	r3, #8
 800aad0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aad2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aad4:	e853 3f00 	ldrex	r3, [r3]
 800aad8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800aada:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aadc:	f023 0301 	bic.w	r3, r3, #1
 800aae0:	663b      	str	r3, [r7, #96]	; 0x60
 800aae2:	68fb      	ldr	r3, [r7, #12]
 800aae4:	681b      	ldr	r3, [r3, #0]
 800aae6:	3308      	adds	r3, #8
 800aae8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800aaea:	64ba      	str	r2, [r7, #72]	; 0x48
 800aaec:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aaee:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800aaf0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800aaf2:	e841 2300 	strex	r3, r2, [r1]
 800aaf6:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800aaf8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800aafa:	2b00      	cmp	r3, #0
 800aafc:	d1e5      	bne.n	800aaca <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800aafe:	68fb      	ldr	r3, [r7, #12]
 800ab00:	2220      	movs	r2, #32
 800ab02:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 800ab04:	68fb      	ldr	r3, [r7, #12]
 800ab06:	2220      	movs	r2, #32
 800ab08:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 800ab0c:	68fb      	ldr	r3, [r7, #12]
 800ab0e:	2200      	movs	r2, #0
 800ab10:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 800ab14:	2303      	movs	r3, #3
 800ab16:	e068      	b.n	800abea <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800ab18:	68fb      	ldr	r3, [r7, #12]
 800ab1a:	681b      	ldr	r3, [r3, #0]
 800ab1c:	681b      	ldr	r3, [r3, #0]
 800ab1e:	f003 0304 	and.w	r3, r3, #4
 800ab22:	2b00      	cmp	r3, #0
 800ab24:	d050      	beq.n	800abc8 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800ab26:	68fb      	ldr	r3, [r7, #12]
 800ab28:	681b      	ldr	r3, [r3, #0]
 800ab2a:	69db      	ldr	r3, [r3, #28]
 800ab2c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ab30:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ab34:	d148      	bne.n	800abc8 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800ab36:	68fb      	ldr	r3, [r7, #12]
 800ab38:	681b      	ldr	r3, [r3, #0]
 800ab3a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800ab3e:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800ab40:	68fb      	ldr	r3, [r7, #12]
 800ab42:	681b      	ldr	r3, [r3, #0]
 800ab44:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab48:	e853 3f00 	ldrex	r3, [r3]
 800ab4c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800ab4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab50:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800ab54:	66fb      	str	r3, [r7, #108]	; 0x6c
 800ab56:	68fb      	ldr	r3, [r7, #12]
 800ab58:	681b      	ldr	r3, [r3, #0]
 800ab5a:	461a      	mov	r2, r3
 800ab5c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ab5e:	637b      	str	r3, [r7, #52]	; 0x34
 800ab60:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab62:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800ab64:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ab66:	e841 2300 	strex	r3, r2, [r1]
 800ab6a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800ab6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab6e:	2b00      	cmp	r3, #0
 800ab70:	d1e6      	bne.n	800ab40 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ab72:	68fb      	ldr	r3, [r7, #12]
 800ab74:	681b      	ldr	r3, [r3, #0]
 800ab76:	3308      	adds	r3, #8
 800ab78:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab7a:	697b      	ldr	r3, [r7, #20]
 800ab7c:	e853 3f00 	ldrex	r3, [r3]
 800ab80:	613b      	str	r3, [r7, #16]
   return(result);
 800ab82:	693b      	ldr	r3, [r7, #16]
 800ab84:	f023 0301 	bic.w	r3, r3, #1
 800ab88:	66bb      	str	r3, [r7, #104]	; 0x68
 800ab8a:	68fb      	ldr	r3, [r7, #12]
 800ab8c:	681b      	ldr	r3, [r3, #0]
 800ab8e:	3308      	adds	r3, #8
 800ab90:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800ab92:	623a      	str	r2, [r7, #32]
 800ab94:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab96:	69f9      	ldr	r1, [r7, #28]
 800ab98:	6a3a      	ldr	r2, [r7, #32]
 800ab9a:	e841 2300 	strex	r3, r2, [r1]
 800ab9e:	61bb      	str	r3, [r7, #24]
   return(result);
 800aba0:	69bb      	ldr	r3, [r7, #24]
 800aba2:	2b00      	cmp	r3, #0
 800aba4:	d1e5      	bne.n	800ab72 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 800aba6:	68fb      	ldr	r3, [r7, #12]
 800aba8:	2220      	movs	r2, #32
 800abaa:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 800abac:	68fb      	ldr	r3, [r7, #12]
 800abae:	2220      	movs	r2, #32
 800abb0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800abb4:	68fb      	ldr	r3, [r7, #12]
 800abb6:	2220      	movs	r2, #32
 800abb8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800abbc:	68fb      	ldr	r3, [r7, #12]
 800abbe:	2200      	movs	r2, #0
 800abc0:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 800abc4:	2303      	movs	r3, #3
 800abc6:	e010      	b.n	800abea <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800abc8:	68fb      	ldr	r3, [r7, #12]
 800abca:	681b      	ldr	r3, [r3, #0]
 800abcc:	69da      	ldr	r2, [r3, #28]
 800abce:	68bb      	ldr	r3, [r7, #8]
 800abd0:	4013      	ands	r3, r2
 800abd2:	68ba      	ldr	r2, [r7, #8]
 800abd4:	429a      	cmp	r2, r3
 800abd6:	bf0c      	ite	eq
 800abd8:	2301      	moveq	r3, #1
 800abda:	2300      	movne	r3, #0
 800abdc:	b2db      	uxtb	r3, r3
 800abde:	461a      	mov	r2, r3
 800abe0:	79fb      	ldrb	r3, [r7, #7]
 800abe2:	429a      	cmp	r2, r3
 800abe4:	f43f af48 	beq.w	800aa78 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800abe8:	2300      	movs	r3, #0
}
 800abea:	4618      	mov	r0, r3
 800abec:	3770      	adds	r7, #112	; 0x70
 800abee:	46bd      	mov	sp, r7
 800abf0:	bd80      	pop	{r7, pc}
	...

0800abf4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800abf4:	b480      	push	{r7}
 800abf6:	b097      	sub	sp, #92	; 0x5c
 800abf8:	af00      	add	r7, sp, #0
 800abfa:	60f8      	str	r0, [r7, #12]
 800abfc:	60b9      	str	r1, [r7, #8]
 800abfe:	4613      	mov	r3, r2
 800ac00:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800ac02:	68fb      	ldr	r3, [r7, #12]
 800ac04:	68ba      	ldr	r2, [r7, #8]
 800ac06:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 800ac08:	68fb      	ldr	r3, [r7, #12]
 800ac0a:	88fa      	ldrh	r2, [r7, #6]
 800ac0c:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 800ac10:	68fb      	ldr	r3, [r7, #12]
 800ac12:	88fa      	ldrh	r2, [r7, #6]
 800ac14:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 800ac18:	68fb      	ldr	r3, [r7, #12]
 800ac1a:	2200      	movs	r2, #0
 800ac1c:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800ac1e:	68fb      	ldr	r3, [r7, #12]
 800ac20:	689b      	ldr	r3, [r3, #8]
 800ac22:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ac26:	d10e      	bne.n	800ac46 <UART_Start_Receive_IT+0x52>
 800ac28:	68fb      	ldr	r3, [r7, #12]
 800ac2a:	691b      	ldr	r3, [r3, #16]
 800ac2c:	2b00      	cmp	r3, #0
 800ac2e:	d105      	bne.n	800ac3c <UART_Start_Receive_IT+0x48>
 800ac30:	68fb      	ldr	r3, [r7, #12]
 800ac32:	f240 12ff 	movw	r2, #511	; 0x1ff
 800ac36:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800ac3a:	e02d      	b.n	800ac98 <UART_Start_Receive_IT+0xa4>
 800ac3c:	68fb      	ldr	r3, [r7, #12]
 800ac3e:	22ff      	movs	r2, #255	; 0xff
 800ac40:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800ac44:	e028      	b.n	800ac98 <UART_Start_Receive_IT+0xa4>
 800ac46:	68fb      	ldr	r3, [r7, #12]
 800ac48:	689b      	ldr	r3, [r3, #8]
 800ac4a:	2b00      	cmp	r3, #0
 800ac4c:	d10d      	bne.n	800ac6a <UART_Start_Receive_IT+0x76>
 800ac4e:	68fb      	ldr	r3, [r7, #12]
 800ac50:	691b      	ldr	r3, [r3, #16]
 800ac52:	2b00      	cmp	r3, #0
 800ac54:	d104      	bne.n	800ac60 <UART_Start_Receive_IT+0x6c>
 800ac56:	68fb      	ldr	r3, [r7, #12]
 800ac58:	22ff      	movs	r2, #255	; 0xff
 800ac5a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800ac5e:	e01b      	b.n	800ac98 <UART_Start_Receive_IT+0xa4>
 800ac60:	68fb      	ldr	r3, [r7, #12]
 800ac62:	227f      	movs	r2, #127	; 0x7f
 800ac64:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800ac68:	e016      	b.n	800ac98 <UART_Start_Receive_IT+0xa4>
 800ac6a:	68fb      	ldr	r3, [r7, #12]
 800ac6c:	689b      	ldr	r3, [r3, #8]
 800ac6e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800ac72:	d10d      	bne.n	800ac90 <UART_Start_Receive_IT+0x9c>
 800ac74:	68fb      	ldr	r3, [r7, #12]
 800ac76:	691b      	ldr	r3, [r3, #16]
 800ac78:	2b00      	cmp	r3, #0
 800ac7a:	d104      	bne.n	800ac86 <UART_Start_Receive_IT+0x92>
 800ac7c:	68fb      	ldr	r3, [r7, #12]
 800ac7e:	227f      	movs	r2, #127	; 0x7f
 800ac80:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800ac84:	e008      	b.n	800ac98 <UART_Start_Receive_IT+0xa4>
 800ac86:	68fb      	ldr	r3, [r7, #12]
 800ac88:	223f      	movs	r2, #63	; 0x3f
 800ac8a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800ac8e:	e003      	b.n	800ac98 <UART_Start_Receive_IT+0xa4>
 800ac90:	68fb      	ldr	r3, [r7, #12]
 800ac92:	2200      	movs	r2, #0
 800ac94:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ac98:	68fb      	ldr	r3, [r7, #12]
 800ac9a:	2200      	movs	r2, #0
 800ac9c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800aca0:	68fb      	ldr	r3, [r7, #12]
 800aca2:	2222      	movs	r2, #34	; 0x22
 800aca4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800aca8:	68fb      	ldr	r3, [r7, #12]
 800acaa:	681b      	ldr	r3, [r3, #0]
 800acac:	3308      	adds	r3, #8
 800acae:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800acb0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800acb2:	e853 3f00 	ldrex	r3, [r3]
 800acb6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800acb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800acba:	f043 0301 	orr.w	r3, r3, #1
 800acbe:	657b      	str	r3, [r7, #84]	; 0x54
 800acc0:	68fb      	ldr	r3, [r7, #12]
 800acc2:	681b      	ldr	r3, [r3, #0]
 800acc4:	3308      	adds	r3, #8
 800acc6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800acc8:	64ba      	str	r2, [r7, #72]	; 0x48
 800acca:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800accc:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800acce:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800acd0:	e841 2300 	strex	r3, r2, [r1]
 800acd4:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800acd6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800acd8:	2b00      	cmp	r3, #0
 800acda:	d1e5      	bne.n	800aca8 <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800acdc:	68fb      	ldr	r3, [r7, #12]
 800acde:	689b      	ldr	r3, [r3, #8]
 800ace0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ace4:	d107      	bne.n	800acf6 <UART_Start_Receive_IT+0x102>
 800ace6:	68fb      	ldr	r3, [r7, #12]
 800ace8:	691b      	ldr	r3, [r3, #16]
 800acea:	2b00      	cmp	r3, #0
 800acec:	d103      	bne.n	800acf6 <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 800acee:	68fb      	ldr	r3, [r7, #12]
 800acf0:	4a21      	ldr	r2, [pc, #132]	; (800ad78 <UART_Start_Receive_IT+0x184>)
 800acf2:	669a      	str	r2, [r3, #104]	; 0x68
 800acf4:	e002      	b.n	800acfc <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 800acf6:	68fb      	ldr	r3, [r7, #12]
 800acf8:	4a20      	ldr	r2, [pc, #128]	; (800ad7c <UART_Start_Receive_IT+0x188>)
 800acfa:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800acfc:	68fb      	ldr	r3, [r7, #12]
 800acfe:	691b      	ldr	r3, [r3, #16]
 800ad00:	2b00      	cmp	r3, #0
 800ad02:	d019      	beq.n	800ad38 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800ad04:	68fb      	ldr	r3, [r7, #12]
 800ad06:	681b      	ldr	r3, [r3, #0]
 800ad08:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad0c:	e853 3f00 	ldrex	r3, [r3]
 800ad10:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800ad12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad14:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800ad18:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ad1a:	68fb      	ldr	r3, [r7, #12]
 800ad1c:	681b      	ldr	r3, [r3, #0]
 800ad1e:	461a      	mov	r2, r3
 800ad20:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ad22:	637b      	str	r3, [r7, #52]	; 0x34
 800ad24:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad26:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800ad28:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ad2a:	e841 2300 	strex	r3, r2, [r1]
 800ad2e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800ad30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad32:	2b00      	cmp	r3, #0
 800ad34:	d1e6      	bne.n	800ad04 <UART_Start_Receive_IT+0x110>
 800ad36:	e018      	b.n	800ad6a <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 800ad38:	68fb      	ldr	r3, [r7, #12]
 800ad3a:	681b      	ldr	r3, [r3, #0]
 800ad3c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad3e:	697b      	ldr	r3, [r7, #20]
 800ad40:	e853 3f00 	ldrex	r3, [r3]
 800ad44:	613b      	str	r3, [r7, #16]
   return(result);
 800ad46:	693b      	ldr	r3, [r7, #16]
 800ad48:	f043 0320 	orr.w	r3, r3, #32
 800ad4c:	653b      	str	r3, [r7, #80]	; 0x50
 800ad4e:	68fb      	ldr	r3, [r7, #12]
 800ad50:	681b      	ldr	r3, [r3, #0]
 800ad52:	461a      	mov	r2, r3
 800ad54:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ad56:	623b      	str	r3, [r7, #32]
 800ad58:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad5a:	69f9      	ldr	r1, [r7, #28]
 800ad5c:	6a3a      	ldr	r2, [r7, #32]
 800ad5e:	e841 2300 	strex	r3, r2, [r1]
 800ad62:	61bb      	str	r3, [r7, #24]
   return(result);
 800ad64:	69bb      	ldr	r3, [r7, #24]
 800ad66:	2b00      	cmp	r3, #0
 800ad68:	d1e6      	bne.n	800ad38 <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 800ad6a:	2300      	movs	r3, #0
}
 800ad6c:	4618      	mov	r0, r3
 800ad6e:	375c      	adds	r7, #92	; 0x5c
 800ad70:	46bd      	mov	sp, r7
 800ad72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad76:	4770      	bx	lr
 800ad78:	0800b02f 	.word	0x0800b02f
 800ad7c:	0800aec9 	.word	0x0800aec9

0800ad80 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800ad80:	b480      	push	{r7}
 800ad82:	b095      	sub	sp, #84	; 0x54
 800ad84:	af00      	add	r7, sp, #0
 800ad86:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800ad88:	687b      	ldr	r3, [r7, #4]
 800ad8a:	681b      	ldr	r3, [r3, #0]
 800ad8c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ad90:	e853 3f00 	ldrex	r3, [r3]
 800ad94:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800ad96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad98:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800ad9c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ad9e:	687b      	ldr	r3, [r7, #4]
 800ada0:	681b      	ldr	r3, [r3, #0]
 800ada2:	461a      	mov	r2, r3
 800ada4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ada6:	643b      	str	r3, [r7, #64]	; 0x40
 800ada8:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800adaa:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800adac:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800adae:	e841 2300 	strex	r3, r2, [r1]
 800adb2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800adb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800adb6:	2b00      	cmp	r3, #0
 800adb8:	d1e6      	bne.n	800ad88 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800adba:	687b      	ldr	r3, [r7, #4]
 800adbc:	681b      	ldr	r3, [r3, #0]
 800adbe:	3308      	adds	r3, #8
 800adc0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800adc2:	6a3b      	ldr	r3, [r7, #32]
 800adc4:	e853 3f00 	ldrex	r3, [r3]
 800adc8:	61fb      	str	r3, [r7, #28]
   return(result);
 800adca:	69fb      	ldr	r3, [r7, #28]
 800adcc:	f023 0301 	bic.w	r3, r3, #1
 800add0:	64bb      	str	r3, [r7, #72]	; 0x48
 800add2:	687b      	ldr	r3, [r7, #4]
 800add4:	681b      	ldr	r3, [r3, #0]
 800add6:	3308      	adds	r3, #8
 800add8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800adda:	62fa      	str	r2, [r7, #44]	; 0x2c
 800addc:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800adde:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ade0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ade2:	e841 2300 	strex	r3, r2, [r1]
 800ade6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800ade8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800adea:	2b00      	cmp	r3, #0
 800adec:	d1e5      	bne.n	800adba <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800adee:	687b      	ldr	r3, [r7, #4]
 800adf0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800adf2:	2b01      	cmp	r3, #1
 800adf4:	d118      	bne.n	800ae28 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800adf6:	687b      	ldr	r3, [r7, #4]
 800adf8:	681b      	ldr	r3, [r3, #0]
 800adfa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800adfc:	68fb      	ldr	r3, [r7, #12]
 800adfe:	e853 3f00 	ldrex	r3, [r3]
 800ae02:	60bb      	str	r3, [r7, #8]
   return(result);
 800ae04:	68bb      	ldr	r3, [r7, #8]
 800ae06:	f023 0310 	bic.w	r3, r3, #16
 800ae0a:	647b      	str	r3, [r7, #68]	; 0x44
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	681b      	ldr	r3, [r3, #0]
 800ae10:	461a      	mov	r2, r3
 800ae12:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ae14:	61bb      	str	r3, [r7, #24]
 800ae16:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae18:	6979      	ldr	r1, [r7, #20]
 800ae1a:	69ba      	ldr	r2, [r7, #24]
 800ae1c:	e841 2300 	strex	r3, r2, [r1]
 800ae20:	613b      	str	r3, [r7, #16]
   return(result);
 800ae22:	693b      	ldr	r3, [r7, #16]
 800ae24:	2b00      	cmp	r3, #0
 800ae26:	d1e6      	bne.n	800adf6 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	2220      	movs	r2, #32
 800ae2c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	2200      	movs	r2, #0
 800ae34:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800ae36:	687b      	ldr	r3, [r7, #4]
 800ae38:	2200      	movs	r2, #0
 800ae3a:	669a      	str	r2, [r3, #104]	; 0x68
}
 800ae3c:	bf00      	nop
 800ae3e:	3754      	adds	r7, #84	; 0x54
 800ae40:	46bd      	mov	sp, r7
 800ae42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae46:	4770      	bx	lr

0800ae48 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800ae48:	b580      	push	{r7, lr}
 800ae4a:	b084      	sub	sp, #16
 800ae4c:	af00      	add	r7, sp, #0
 800ae4e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ae54:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800ae56:	68fb      	ldr	r3, [r7, #12]
 800ae58:	2200      	movs	r2, #0
 800ae5a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800ae5e:	68fb      	ldr	r3, [r7, #12]
 800ae60:	2200      	movs	r2, #0
 800ae62:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800ae66:	68f8      	ldr	r0, [r7, #12]
 800ae68:	f7ff f962 	bl	800a130 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ae6c:	bf00      	nop
 800ae6e:	3710      	adds	r7, #16
 800ae70:	46bd      	mov	sp, r7
 800ae72:	bd80      	pop	{r7, pc}

0800ae74 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800ae74:	b580      	push	{r7, lr}
 800ae76:	b088      	sub	sp, #32
 800ae78:	af00      	add	r7, sp, #0
 800ae7a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800ae7c:	687b      	ldr	r3, [r7, #4]
 800ae7e:	681b      	ldr	r3, [r3, #0]
 800ae80:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae82:	68fb      	ldr	r3, [r7, #12]
 800ae84:	e853 3f00 	ldrex	r3, [r3]
 800ae88:	60bb      	str	r3, [r7, #8]
   return(result);
 800ae8a:	68bb      	ldr	r3, [r7, #8]
 800ae8c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ae90:	61fb      	str	r3, [r7, #28]
 800ae92:	687b      	ldr	r3, [r7, #4]
 800ae94:	681b      	ldr	r3, [r3, #0]
 800ae96:	461a      	mov	r2, r3
 800ae98:	69fb      	ldr	r3, [r7, #28]
 800ae9a:	61bb      	str	r3, [r7, #24]
 800ae9c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae9e:	6979      	ldr	r1, [r7, #20]
 800aea0:	69ba      	ldr	r2, [r7, #24]
 800aea2:	e841 2300 	strex	r3, r2, [r1]
 800aea6:	613b      	str	r3, [r7, #16]
   return(result);
 800aea8:	693b      	ldr	r3, [r7, #16]
 800aeaa:	2b00      	cmp	r3, #0
 800aeac:	d1e6      	bne.n	800ae7c <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800aeae:	687b      	ldr	r3, [r7, #4]
 800aeb0:	2220      	movs	r2, #32
 800aeb2:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	2200      	movs	r2, #0
 800aeb8:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800aeba:	6878      	ldr	r0, [r7, #4]
 800aebc:	f7ff f92e 	bl	800a11c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800aec0:	bf00      	nop
 800aec2:	3720      	adds	r7, #32
 800aec4:	46bd      	mov	sp, r7
 800aec6:	bd80      	pop	{r7, pc}

0800aec8 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800aec8:	b580      	push	{r7, lr}
 800aeca:	b096      	sub	sp, #88	; 0x58
 800aecc:	af00      	add	r7, sp, #0
 800aece:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800aed0:	687b      	ldr	r3, [r7, #4]
 800aed2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800aed6:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800aeda:	687b      	ldr	r3, [r7, #4]
 800aedc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800aee0:	2b22      	cmp	r3, #34	; 0x22
 800aee2:	f040 8098 	bne.w	800b016 <UART_RxISR_8BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800aee6:	687b      	ldr	r3, [r7, #4]
 800aee8:	681b      	ldr	r3, [r3, #0]
 800aeea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aeec:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800aef0:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 800aef4:	b2d9      	uxtb	r1, r3
 800aef6:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800aefa:	b2da      	uxtb	r2, r3
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800af00:	400a      	ands	r2, r1
 800af02:	b2d2      	uxtb	r2, r2
 800af04:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800af06:	687b      	ldr	r3, [r7, #4]
 800af08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800af0a:	1c5a      	adds	r2, r3, #1
 800af0c:	687b      	ldr	r3, [r7, #4]
 800af0e:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800af16:	b29b      	uxth	r3, r3
 800af18:	3b01      	subs	r3, #1
 800af1a:	b29a      	uxth	r2, r3
 800af1c:	687b      	ldr	r3, [r7, #4]
 800af1e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800af22:	687b      	ldr	r3, [r7, #4]
 800af24:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800af28:	b29b      	uxth	r3, r3
 800af2a:	2b00      	cmp	r3, #0
 800af2c:	d17b      	bne.n	800b026 <UART_RxISR_8BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800af2e:	687b      	ldr	r3, [r7, #4]
 800af30:	681b      	ldr	r3, [r3, #0]
 800af32:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af36:	e853 3f00 	ldrex	r3, [r3]
 800af3a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800af3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800af3e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800af42:	653b      	str	r3, [r7, #80]	; 0x50
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	681b      	ldr	r3, [r3, #0]
 800af48:	461a      	mov	r2, r3
 800af4a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800af4c:	647b      	str	r3, [r7, #68]	; 0x44
 800af4e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800af50:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800af52:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800af54:	e841 2300 	strex	r3, r2, [r1]
 800af58:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800af5a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800af5c:	2b00      	cmp	r3, #0
 800af5e:	d1e6      	bne.n	800af2e <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800af60:	687b      	ldr	r3, [r7, #4]
 800af62:	681b      	ldr	r3, [r3, #0]
 800af64:	3308      	adds	r3, #8
 800af66:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af6a:	e853 3f00 	ldrex	r3, [r3]
 800af6e:	623b      	str	r3, [r7, #32]
   return(result);
 800af70:	6a3b      	ldr	r3, [r7, #32]
 800af72:	f023 0301 	bic.w	r3, r3, #1
 800af76:	64fb      	str	r3, [r7, #76]	; 0x4c
 800af78:	687b      	ldr	r3, [r7, #4]
 800af7a:	681b      	ldr	r3, [r3, #0]
 800af7c:	3308      	adds	r3, #8
 800af7e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800af80:	633a      	str	r2, [r7, #48]	; 0x30
 800af82:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800af84:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800af86:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800af88:	e841 2300 	strex	r3, r2, [r1]
 800af8c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800af8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af90:	2b00      	cmp	r3, #0
 800af92:	d1e5      	bne.n	800af60 <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800af94:	687b      	ldr	r3, [r7, #4]
 800af96:	2220      	movs	r2, #32
 800af98:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800af9c:	687b      	ldr	r3, [r7, #4]
 800af9e:	2200      	movs	r2, #0
 800afa0:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800afa2:	687b      	ldr	r3, [r7, #4]
 800afa4:	2200      	movs	r2, #0
 800afa6:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800afa8:	687b      	ldr	r3, [r7, #4]
 800afaa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800afac:	2b01      	cmp	r3, #1
 800afae:	d12e      	bne.n	800b00e <UART_RxISR_8BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800afb0:	687b      	ldr	r3, [r7, #4]
 800afb2:	2200      	movs	r2, #0
 800afb4:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800afb6:	687b      	ldr	r3, [r7, #4]
 800afb8:	681b      	ldr	r3, [r3, #0]
 800afba:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800afbc:	693b      	ldr	r3, [r7, #16]
 800afbe:	e853 3f00 	ldrex	r3, [r3]
 800afc2:	60fb      	str	r3, [r7, #12]
   return(result);
 800afc4:	68fb      	ldr	r3, [r7, #12]
 800afc6:	f023 0310 	bic.w	r3, r3, #16
 800afca:	64bb      	str	r3, [r7, #72]	; 0x48
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	681b      	ldr	r3, [r3, #0]
 800afd0:	461a      	mov	r2, r3
 800afd2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800afd4:	61fb      	str	r3, [r7, #28]
 800afd6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800afd8:	69b9      	ldr	r1, [r7, #24]
 800afda:	69fa      	ldr	r2, [r7, #28]
 800afdc:	e841 2300 	strex	r3, r2, [r1]
 800afe0:	617b      	str	r3, [r7, #20]
   return(result);
 800afe2:	697b      	ldr	r3, [r7, #20]
 800afe4:	2b00      	cmp	r3, #0
 800afe6:	d1e6      	bne.n	800afb6 <UART_RxISR_8BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	681b      	ldr	r3, [r3, #0]
 800afec:	69db      	ldr	r3, [r3, #28]
 800afee:	f003 0310 	and.w	r3, r3, #16
 800aff2:	2b10      	cmp	r3, #16
 800aff4:	d103      	bne.n	800affe <UART_RxISR_8BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800aff6:	687b      	ldr	r3, [r7, #4]
 800aff8:	681b      	ldr	r3, [r3, #0]
 800affa:	2210      	movs	r2, #16
 800affc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800affe:	687b      	ldr	r3, [r7, #4]
 800b000:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800b004:	4619      	mov	r1, r3
 800b006:	6878      	ldr	r0, [r7, #4]
 800b008:	f7ff f89c 	bl	800a144 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800b00c:	e00b      	b.n	800b026 <UART_RxISR_8BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 800b00e:	6878      	ldr	r0, [r7, #4]
 800b010:	f7f7 fd3a 	bl	8002a88 <HAL_UART_RxCpltCallback>
}
 800b014:	e007      	b.n	800b026 <UART_RxISR_8BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800b016:	687b      	ldr	r3, [r7, #4]
 800b018:	681b      	ldr	r3, [r3, #0]
 800b01a:	699a      	ldr	r2, [r3, #24]
 800b01c:	687b      	ldr	r3, [r7, #4]
 800b01e:	681b      	ldr	r3, [r3, #0]
 800b020:	f042 0208 	orr.w	r2, r2, #8
 800b024:	619a      	str	r2, [r3, #24]
}
 800b026:	bf00      	nop
 800b028:	3758      	adds	r7, #88	; 0x58
 800b02a:	46bd      	mov	sp, r7
 800b02c:	bd80      	pop	{r7, pc}

0800b02e <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800b02e:	b580      	push	{r7, lr}
 800b030:	b096      	sub	sp, #88	; 0x58
 800b032:	af00      	add	r7, sp, #0
 800b034:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800b036:	687b      	ldr	r3, [r7, #4]
 800b038:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800b03c:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800b040:	687b      	ldr	r3, [r7, #4]
 800b042:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b046:	2b22      	cmp	r3, #34	; 0x22
 800b048:	f040 8098 	bne.w	800b17c <UART_RxISR_16BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800b04c:	687b      	ldr	r3, [r7, #4]
 800b04e:	681b      	ldr	r3, [r3, #0]
 800b050:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b052:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800b056:	687b      	ldr	r3, [r7, #4]
 800b058:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b05a:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 800b05c:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 800b060:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800b064:	4013      	ands	r3, r2
 800b066:	b29a      	uxth	r2, r3
 800b068:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b06a:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800b06c:	687b      	ldr	r3, [r7, #4]
 800b06e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b070:	1c9a      	adds	r2, r3, #2
 800b072:	687b      	ldr	r3, [r7, #4]
 800b074:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800b076:	687b      	ldr	r3, [r7, #4]
 800b078:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800b07c:	b29b      	uxth	r3, r3
 800b07e:	3b01      	subs	r3, #1
 800b080:	b29a      	uxth	r2, r3
 800b082:	687b      	ldr	r3, [r7, #4]
 800b084:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800b088:	687b      	ldr	r3, [r7, #4]
 800b08a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800b08e:	b29b      	uxth	r3, r3
 800b090:	2b00      	cmp	r3, #0
 800b092:	d17b      	bne.n	800b18c <UART_RxISR_16BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b094:	687b      	ldr	r3, [r7, #4]
 800b096:	681b      	ldr	r3, [r3, #0]
 800b098:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b09a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b09c:	e853 3f00 	ldrex	r3, [r3]
 800b0a0:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800b0a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0a4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b0a8:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b0aa:	687b      	ldr	r3, [r7, #4]
 800b0ac:	681b      	ldr	r3, [r3, #0]
 800b0ae:	461a      	mov	r2, r3
 800b0b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b0b2:	643b      	str	r3, [r7, #64]	; 0x40
 800b0b4:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b0b6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800b0b8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b0ba:	e841 2300 	strex	r3, r2, [r1]
 800b0be:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800b0c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b0c2:	2b00      	cmp	r3, #0
 800b0c4:	d1e6      	bne.n	800b094 <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b0c6:	687b      	ldr	r3, [r7, #4]
 800b0c8:	681b      	ldr	r3, [r3, #0]
 800b0ca:	3308      	adds	r3, #8
 800b0cc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b0ce:	6a3b      	ldr	r3, [r7, #32]
 800b0d0:	e853 3f00 	ldrex	r3, [r3]
 800b0d4:	61fb      	str	r3, [r7, #28]
   return(result);
 800b0d6:	69fb      	ldr	r3, [r7, #28]
 800b0d8:	f023 0301 	bic.w	r3, r3, #1
 800b0dc:	64bb      	str	r3, [r7, #72]	; 0x48
 800b0de:	687b      	ldr	r3, [r7, #4]
 800b0e0:	681b      	ldr	r3, [r3, #0]
 800b0e2:	3308      	adds	r3, #8
 800b0e4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b0e6:	62fa      	str	r2, [r7, #44]	; 0x2c
 800b0e8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b0ea:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b0ec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b0ee:	e841 2300 	strex	r3, r2, [r1]
 800b0f2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b0f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0f6:	2b00      	cmp	r3, #0
 800b0f8:	d1e5      	bne.n	800b0c6 <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800b0fa:	687b      	ldr	r3, [r7, #4]
 800b0fc:	2220      	movs	r2, #32
 800b0fe:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800b102:	687b      	ldr	r3, [r7, #4]
 800b104:	2200      	movs	r2, #0
 800b106:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b108:	687b      	ldr	r3, [r7, #4]
 800b10a:	2200      	movs	r2, #0
 800b10c:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b10e:	687b      	ldr	r3, [r7, #4]
 800b110:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b112:	2b01      	cmp	r3, #1
 800b114:	d12e      	bne.n	800b174 <UART_RxISR_16BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b116:	687b      	ldr	r3, [r7, #4]
 800b118:	2200      	movs	r2, #0
 800b11a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b11c:	687b      	ldr	r3, [r7, #4]
 800b11e:	681b      	ldr	r3, [r3, #0]
 800b120:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b122:	68fb      	ldr	r3, [r7, #12]
 800b124:	e853 3f00 	ldrex	r3, [r3]
 800b128:	60bb      	str	r3, [r7, #8]
   return(result);
 800b12a:	68bb      	ldr	r3, [r7, #8]
 800b12c:	f023 0310 	bic.w	r3, r3, #16
 800b130:	647b      	str	r3, [r7, #68]	; 0x44
 800b132:	687b      	ldr	r3, [r7, #4]
 800b134:	681b      	ldr	r3, [r3, #0]
 800b136:	461a      	mov	r2, r3
 800b138:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b13a:	61bb      	str	r3, [r7, #24]
 800b13c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b13e:	6979      	ldr	r1, [r7, #20]
 800b140:	69ba      	ldr	r2, [r7, #24]
 800b142:	e841 2300 	strex	r3, r2, [r1]
 800b146:	613b      	str	r3, [r7, #16]
   return(result);
 800b148:	693b      	ldr	r3, [r7, #16]
 800b14a:	2b00      	cmp	r3, #0
 800b14c:	d1e6      	bne.n	800b11c <UART_RxISR_16BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800b14e:	687b      	ldr	r3, [r7, #4]
 800b150:	681b      	ldr	r3, [r3, #0]
 800b152:	69db      	ldr	r3, [r3, #28]
 800b154:	f003 0310 	and.w	r3, r3, #16
 800b158:	2b10      	cmp	r3, #16
 800b15a:	d103      	bne.n	800b164 <UART_RxISR_16BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800b15c:	687b      	ldr	r3, [r7, #4]
 800b15e:	681b      	ldr	r3, [r3, #0]
 800b160:	2210      	movs	r2, #16
 800b162:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b164:	687b      	ldr	r3, [r7, #4]
 800b166:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800b16a:	4619      	mov	r1, r3
 800b16c:	6878      	ldr	r0, [r7, #4]
 800b16e:	f7fe ffe9 	bl	800a144 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800b172:	e00b      	b.n	800b18c <UART_RxISR_16BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 800b174:	6878      	ldr	r0, [r7, #4]
 800b176:	f7f7 fc87 	bl	8002a88 <HAL_UART_RxCpltCallback>
}
 800b17a:	e007      	b.n	800b18c <UART_RxISR_16BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800b17c:	687b      	ldr	r3, [r7, #4]
 800b17e:	681b      	ldr	r3, [r3, #0]
 800b180:	699a      	ldr	r2, [r3, #24]
 800b182:	687b      	ldr	r3, [r7, #4]
 800b184:	681b      	ldr	r3, [r3, #0]
 800b186:	f042 0208 	orr.w	r2, r2, #8
 800b18a:	619a      	str	r2, [r3, #24]
}
 800b18c:	bf00      	nop
 800b18e:	3758      	adds	r7, #88	; 0x58
 800b190:	46bd      	mov	sp, r7
 800b192:	bd80      	pop	{r7, pc}

0800b194 <VL53L0X_GetOffsetCalibrationDataMicroMeter>:
	return Status;
}

VL53L0X_Error VL53L0X_GetOffsetCalibrationDataMicroMeter(VL53L0X_DEV Dev,
	int32_t *pOffsetCalibrationDataMicroMeter)
{
 800b194:	b580      	push	{r7, lr}
 800b196:	b084      	sub	sp, #16
 800b198:	af00      	add	r7, sp, #0
 800b19a:	6078      	str	r0, [r7, #4]
 800b19c:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b19e:	2300      	movs	r3, #0
 800b1a0:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_offset_calibration_data_micro_meter(Dev,
 800b1a2:	6839      	ldr	r1, [r7, #0]
 800b1a4:	6878      	ldr	r0, [r7, #4]
 800b1a6:	f001 fce2 	bl	800cb6e <VL53L0X_get_offset_calibration_data_micro_meter>
 800b1aa:	4603      	mov	r3, r0
 800b1ac:	73fb      	strb	r3, [r7, #15]
		pOffsetCalibrationDataMicroMeter);

	LOG_FUNCTION_END(Status);
	return Status;
 800b1ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b1b2:	4618      	mov	r0, r3
 800b1b4:	3710      	adds	r7, #16
 800b1b6:	46bd      	mov	sp, r7
 800b1b8:	bd80      	pop	{r7, pc}
	...

0800b1bc <VL53L0X_DataInit>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_DataInit(VL53L0X_DEV Dev)
{
 800b1bc:	b5b0      	push	{r4, r5, r7, lr}
 800b1be:	b096      	sub	sp, #88	; 0x58
 800b1c0:	af00      	add	r7, sp, #0
 800b1c2:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b1c4:	2300      	movs	r3, #0
 800b1c6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		0xFE,
		0x01);
#endif

	/* Set I2C standard mode */
	if (Status == VL53L0X_ERROR_NONE)
 800b1ca:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800b1ce:	2b00      	cmp	r3, #0
 800b1d0:	d107      	bne.n	800b1e2 <VL53L0X_DataInit+0x26>
		Status = VL53L0X_WrByte(Dev, 0x88, 0x00);
 800b1d2:	2200      	movs	r2, #0
 800b1d4:	2188      	movs	r1, #136	; 0x88
 800b1d6:	6878      	ldr	r0, [r7, #4]
 800b1d8:	f004 feda 	bl	800ff90 <VL53L0X_WrByte>
 800b1dc:	4603      	mov	r3, r0
 800b1de:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, ReadDataFromDeviceDone, 0);
 800b1e2:	687b      	ldr	r3, [r7, #4]
 800b1e4:	2200      	movs	r2, #0
 800b1e6:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
	if (Status == VL53L0X_ERROR_NONE)
		Status = VL53L0X_apply_offset_adjustment(Dev);
#endif

	/* Default value is 1000 for Linearity Corrective Gain */
	PALDevDataSet(Dev, LinearityCorrectiveGain, 1000);
 800b1ea:	687b      	ldr	r3, [r7, #4]
 800b1ec:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800b1f0:	f8a3 2152 	strh.w	r2, [r3, #338]	; 0x152

	/* Dmax default Parameter */
	PALDevDataSet(Dev, DmaxCalRangeMilliMeter, 400);
 800b1f4:	687b      	ldr	r3, [r7, #4]
 800b1f6:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800b1fa:	f8a3 2154 	strh.w	r2, [r3, #340]	; 0x154
	PALDevDataSet(Dev, DmaxCalSignalRateRtnMegaCps,
 800b1fe:	687b      	ldr	r3, [r7, #4]
 800b200:	4a9e      	ldr	r2, [pc, #632]	; (800b47c <VL53L0X_DataInit+0x2c0>)
 800b202:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
		(FixPoint1616_t)((0x00016B85))); /* 1.42 No Cover Glass*/

	/* Set Default static parameters
	 *set first temporary values 9.44MHz * 65536 = 618660 */
	VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, OscFrequencyMHz, 618660);
 800b206:	687b      	ldr	r3, [r7, #4]
 800b208:	4a9d      	ldr	r2, [pc, #628]	; (800b480 <VL53L0X_DataInit+0x2c4>)
 800b20a:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4

	/* Set Default XTalkCompensationRateMegaCps to 0  */
	VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationRateMegaCps, 0);
 800b20e:	687b      	ldr	r3, [r7, #4]
 800b210:	2200      	movs	r2, #0
 800b212:	621a      	str	r2, [r3, #32]

	/* Get default parameters */
	Status = VL53L0X_GetDeviceParameters(Dev, &CurrentParameters);
 800b214:	f107 0310 	add.w	r3, r7, #16
 800b218:	4619      	mov	r1, r3
 800b21a:	6878      	ldr	r0, [r7, #4]
 800b21c:	f000 fac2 	bl	800b7a4 <VL53L0X_GetDeviceParameters>
 800b220:	4603      	mov	r3, r0
 800b222:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (Status == VL53L0X_ERROR_NONE) {
 800b226:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800b22a:	2b00      	cmp	r3, #0
 800b22c:	d112      	bne.n	800b254 <VL53L0X_DataInit+0x98>
		/* initialize PAL values */
		CurrentParameters.DeviceMode = VL53L0X_DEVICEMODE_SINGLE_RANGING;
 800b22e:	2300      	movs	r3, #0
 800b230:	743b      	strb	r3, [r7, #16]
		CurrentParameters.HistogramMode = VL53L0X_HISTOGRAMMODE_DISABLED;
 800b232:	2300      	movs	r3, #0
 800b234:	747b      	strb	r3, [r7, #17]
		PALDevDataSet(Dev, CurrentParameters, CurrentParameters);
 800b236:	687b      	ldr	r3, [r7, #4]
 800b238:	f103 0410 	add.w	r4, r3, #16
 800b23c:	f107 0510 	add.w	r5, r7, #16
 800b240:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b242:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b244:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b246:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b248:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b24a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b24c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800b250:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	}

	/* Sigma estimator variable */
	PALDevDataSet(Dev, SigmaEstRefArray, 100);
 800b254:	687b      	ldr	r3, [r7, #4]
 800b256:	2264      	movs	r2, #100	; 0x64
 800b258:	f8a3 2134 	strh.w	r2, [r3, #308]	; 0x134
	PALDevDataSet(Dev, SigmaEstEffPulseWidth, 900);
 800b25c:	687b      	ldr	r3, [r7, #4]
 800b25e:	f44f 7261 	mov.w	r2, #900	; 0x384
 800b262:	f8a3 2136 	strh.w	r2, [r3, #310]	; 0x136
	PALDevDataSet(Dev, SigmaEstEffAmbWidth, 500);
 800b266:	687b      	ldr	r3, [r7, #4]
 800b268:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800b26c:	f8a3 2138 	strh.w	r2, [r3, #312]	; 0x138
	PALDevDataSet(Dev, targetRefRate, 0x0A00); /* 20 MCPS in 9:7 format */
 800b270:	687b      	ldr	r3, [r7, #4]
 800b272:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 800b276:	f8a3 213c 	strh.w	r2, [r3, #316]	; 0x13c

	/* Use internal default settings */
	PALDevDataSet(Dev, UseInternalTuningSettings, 1);
 800b27a:	687b      	ldr	r3, [r7, #4]
 800b27c:	2201      	movs	r2, #1
 800b27e:	f883 2150 	strb.w	r2, [r3, #336]	; 0x150

	Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 800b282:	2201      	movs	r2, #1
 800b284:	2180      	movs	r1, #128	; 0x80
 800b286:	6878      	ldr	r0, [r7, #4]
 800b288:	f004 fe82 	bl	800ff90 <VL53L0X_WrByte>
 800b28c:	4603      	mov	r3, r0
 800b28e:	461a      	mov	r2, r3
 800b290:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b294:	4313      	orrs	r3, r2
 800b296:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800b29a:	2201      	movs	r2, #1
 800b29c:	21ff      	movs	r1, #255	; 0xff
 800b29e:	6878      	ldr	r0, [r7, #4]
 800b2a0:	f004 fe76 	bl	800ff90 <VL53L0X_WrByte>
 800b2a4:	4603      	mov	r3, r0
 800b2a6:	461a      	mov	r2, r3
 800b2a8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b2ac:	4313      	orrs	r3, r2
 800b2ae:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 800b2b2:	2200      	movs	r2, #0
 800b2b4:	2100      	movs	r1, #0
 800b2b6:	6878      	ldr	r0, [r7, #4]
 800b2b8:	f004 fe6a 	bl	800ff90 <VL53L0X_WrByte>
 800b2bc:	4603      	mov	r3, r0
 800b2be:	461a      	mov	r2, r3
 800b2c0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b2c4:	4313      	orrs	r3, r2
 800b2c6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_RdByte(Dev, 0x91, &StopVariable);
 800b2ca:	f107 030f 	add.w	r3, r7, #15
 800b2ce:	461a      	mov	r2, r3
 800b2d0:	2191      	movs	r1, #145	; 0x91
 800b2d2:	6878      	ldr	r0, [r7, #4]
 800b2d4:	f004 fede 	bl	8010094 <VL53L0X_RdByte>
 800b2d8:	4603      	mov	r3, r0
 800b2da:	461a      	mov	r2, r3
 800b2dc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b2e0:	4313      	orrs	r3, r2
 800b2e2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	PALDevDataSet(Dev, StopVariable, StopVariable);
 800b2e6:	7bfa      	ldrb	r2, [r7, #15]
 800b2e8:	687b      	ldr	r3, [r7, #4]
 800b2ea:	f883 213a 	strb.w	r2, [r3, #314]	; 0x13a
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 800b2ee:	2201      	movs	r2, #1
 800b2f0:	2100      	movs	r1, #0
 800b2f2:	6878      	ldr	r0, [r7, #4]
 800b2f4:	f004 fe4c 	bl	800ff90 <VL53L0X_WrByte>
 800b2f8:	4603      	mov	r3, r0
 800b2fa:	461a      	mov	r2, r3
 800b2fc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b300:	4313      	orrs	r3, r2
 800b302:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800b306:	2200      	movs	r2, #0
 800b308:	21ff      	movs	r1, #255	; 0xff
 800b30a:	6878      	ldr	r0, [r7, #4]
 800b30c:	f004 fe40 	bl	800ff90 <VL53L0X_WrByte>
 800b310:	4603      	mov	r3, r0
 800b312:	461a      	mov	r2, r3
 800b314:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b318:	4313      	orrs	r3, r2
 800b31a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 800b31e:	2200      	movs	r2, #0
 800b320:	2180      	movs	r1, #128	; 0x80
 800b322:	6878      	ldr	r0, [r7, #4]
 800b324:	f004 fe34 	bl	800ff90 <VL53L0X_WrByte>
 800b328:	4603      	mov	r3, r0
 800b32a:	461a      	mov	r2, r3
 800b32c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b330:	4313      	orrs	r3, r2
 800b332:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	/* Enable all check */
	for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 800b336:	2300      	movs	r3, #0
 800b338:	653b      	str	r3, [r7, #80]	; 0x50
 800b33a:	e014      	b.n	800b366 <VL53L0X_DataInit+0x1aa>
		if (Status == VL53L0X_ERROR_NONE)
 800b33c:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800b340:	2b00      	cmp	r3, #0
 800b342:	d114      	bne.n	800b36e <VL53L0X_DataInit+0x1b2>
			Status |= VL53L0X_SetLimitCheckEnable(Dev, i, 1);
 800b344:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b346:	b29b      	uxth	r3, r3
 800b348:	2201      	movs	r2, #1
 800b34a:	4619      	mov	r1, r3
 800b34c:	6878      	ldr	r0, [r7, #4]
 800b34e:	f000 fd35 	bl	800bdbc <VL53L0X_SetLimitCheckEnable>
 800b352:	4603      	mov	r3, r0
 800b354:	461a      	mov	r2, r3
 800b356:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b35a:	4313      	orrs	r3, r2
 800b35c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 800b360:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b362:	3301      	adds	r3, #1
 800b364:	653b      	str	r3, [r7, #80]	; 0x50
 800b366:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b368:	2b05      	cmp	r3, #5
 800b36a:	dde7      	ble.n	800b33c <VL53L0X_DataInit+0x180>
 800b36c:	e000      	b.n	800b370 <VL53L0X_DataInit+0x1b4>
		else
			break;
 800b36e:	bf00      	nop

	}

	/* Disable the following checks */
	if (Status == VL53L0X_ERROR_NONE)
 800b370:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800b374:	2b00      	cmp	r3, #0
 800b376:	d107      	bne.n	800b388 <VL53L0X_DataInit+0x1cc>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 800b378:	2200      	movs	r2, #0
 800b37a:	2102      	movs	r1, #2
 800b37c:	6878      	ldr	r0, [r7, #4]
 800b37e:	f000 fd1d 	bl	800bdbc <VL53L0X_SetLimitCheckEnable>
 800b382:	4603      	mov	r3, r0
 800b384:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, 0);

	if (Status == VL53L0X_ERROR_NONE)
 800b388:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800b38c:	2b00      	cmp	r3, #0
 800b38e:	d107      	bne.n	800b3a0 <VL53L0X_DataInit+0x1e4>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 800b390:	2200      	movs	r2, #0
 800b392:	2103      	movs	r1, #3
 800b394:	6878      	ldr	r0, [r7, #4]
 800b396:	f000 fd11 	bl	800bdbc <VL53L0X_SetLimitCheckEnable>
 800b39a:	4603      	mov	r3, r0
 800b39c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD, 0);

	if (Status == VL53L0X_ERROR_NONE)
 800b3a0:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800b3a4:	2b00      	cmp	r3, #0
 800b3a6:	d107      	bne.n	800b3b8 <VL53L0X_DataInit+0x1fc>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 800b3a8:	2200      	movs	r2, #0
 800b3aa:	2104      	movs	r1, #4
 800b3ac:	6878      	ldr	r0, [r7, #4]
 800b3ae:	f000 fd05 	bl	800bdbc <VL53L0X_SetLimitCheckEnable>
 800b3b2:	4603      	mov	r3, r0
 800b3b4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC, 0);

	if (Status == VL53L0X_ERROR_NONE)
 800b3b8:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800b3bc:	2b00      	cmp	r3, #0
 800b3be:	d107      	bne.n	800b3d0 <VL53L0X_DataInit+0x214>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 800b3c0:	2200      	movs	r2, #0
 800b3c2:	2105      	movs	r1, #5
 800b3c4:	6878      	ldr	r0, [r7, #4]
 800b3c6:	f000 fcf9 	bl	800bdbc <VL53L0X_SetLimitCheckEnable>
 800b3ca:	4603      	mov	r3, r0
 800b3cc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE, 0);

	/* Limit default values */
	if (Status == VL53L0X_ERROR_NONE) {
 800b3d0:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800b3d4:	2b00      	cmp	r3, #0
 800b3d6:	d108      	bne.n	800b3ea <VL53L0X_DataInit+0x22e>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 800b3d8:	f44f 1290 	mov.w	r2, #1179648	; 0x120000
 800b3dc:	2100      	movs	r1, #0
 800b3de:	6878      	ldr	r0, [r7, #4]
 800b3e0:	f000 fd9c 	bl	800bf1c <VL53L0X_SetLimitCheckValue>
 800b3e4:	4603      	mov	r3, r0
 800b3e6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				(FixPoint1616_t)(18 * 65536));
	}
	if (Status == VL53L0X_ERROR_NONE) {
 800b3ea:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800b3ee:	2b00      	cmp	r3, #0
 800b3f0:	d108      	bne.n	800b404 <VL53L0X_DataInit+0x248>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 800b3f2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800b3f6:	2101      	movs	r1, #1
 800b3f8:	6878      	ldr	r0, [r7, #4]
 800b3fa:	f000 fd8f 	bl	800bf1c <VL53L0X_SetLimitCheckValue>
 800b3fe:	4603      	mov	r3, r0
 800b400:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
				(FixPoint1616_t)(25 * 65536 / 100));
				/* 0.25 * 65536 */
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800b404:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800b408:	2b00      	cmp	r3, #0
 800b40a:	d108      	bne.n	800b41e <VL53L0X_DataInit+0x262>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 800b40c:	f44f 120c 	mov.w	r2, #2293760	; 0x230000
 800b410:	2102      	movs	r1, #2
 800b412:	6878      	ldr	r0, [r7, #4]
 800b414:	f000 fd82 	bl	800bf1c <VL53L0X_SetLimitCheckValue>
 800b418:	4603      	mov	r3, r0
 800b41a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				(FixPoint1616_t)(35 * 65536));
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800b41e:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800b422:	2b00      	cmp	r3, #0
 800b424:	d107      	bne.n	800b436 <VL53L0X_DataInit+0x27a>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 800b426:	2200      	movs	r2, #0
 800b428:	2103      	movs	r1, #3
 800b42a:	6878      	ldr	r0, [r7, #4]
 800b42c:	f000 fd76 	bl	800bf1c <VL53L0X_SetLimitCheckValue>
 800b430:	4603      	mov	r3, r0
 800b432:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				(FixPoint1616_t)(0 * 65536));
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800b436:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800b43a:	2b00      	cmp	r3, #0
 800b43c:	d10f      	bne.n	800b45e <VL53L0X_DataInit+0x2a2>

		PALDevDataSet(Dev, SequenceConfig, 0xFF);
 800b43e:	687b      	ldr	r3, [r7, #4]
 800b440:	22ff      	movs	r2, #255	; 0xff
 800b442:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 800b446:	22ff      	movs	r2, #255	; 0xff
 800b448:	2101      	movs	r1, #1
 800b44a:	6878      	ldr	r0, [r7, #4]
 800b44c:	f004 fda0 	bl	800ff90 <VL53L0X_WrByte>
 800b450:	4603      	mov	r3, r0
 800b452:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			0xFF);

		/* Set PAL state to tell that we are waiting for call to
		 * VL53L0X_StaticInit */
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_WAIT_STATICINIT);
 800b456:	687b      	ldr	r3, [r7, #4]
 800b458:	2201      	movs	r2, #1
 800b45a:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
	}

	if (Status == VL53L0X_ERROR_NONE)
 800b45e:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800b462:	2b00      	cmp	r3, #0
 800b464:	d103      	bne.n	800b46e <VL53L0X_DataInit+0x2b2>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 0);
 800b466:	687b      	ldr	r3, [r7, #4]
 800b468:	2200      	movs	r2, #0
 800b46a:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115


	LOG_FUNCTION_END(Status);
	return Status;
 800b46e:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
}
 800b472:	4618      	mov	r0, r3
 800b474:	3758      	adds	r7, #88	; 0x58
 800b476:	46bd      	mov	sp, r7
 800b478:	bdb0      	pop	{r4, r5, r7, pc}
 800b47a:	bf00      	nop
 800b47c:	00016b85 	.word	0x00016b85
 800b480:	000970a4 	.word	0x000970a4

0800b484 <VL53L0X_StaticInit>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_StaticInit(VL53L0X_DEV Dev)
{
 800b484:	b5b0      	push	{r4, r5, r7, lr}
 800b486:	b09e      	sub	sp, #120	; 0x78
 800b488:	af02      	add	r7, sp, #8
 800b48a:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b48c:	2300      	movs	r3, #0
 800b48e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	VL53L0X_DeviceParameters_t CurrentParameters = {0};
 800b492:	f107 031c 	add.w	r3, r7, #28
 800b496:	2240      	movs	r2, #64	; 0x40
 800b498:	2100      	movs	r1, #0
 800b49a:	4618      	mov	r0, r3
 800b49c:	f004 fee0 	bl	8010260 <memset>
	uint8_t *pTuningSettingBuffer;
	uint16_t tempword = 0;
 800b4a0:	2300      	movs	r3, #0
 800b4a2:	837b      	strh	r3, [r7, #26]
	uint8_t tempbyte = 0;
 800b4a4:	2300      	movs	r3, #0
 800b4a6:	767b      	strb	r3, [r7, #25]
	uint8_t UseInternalTuningSettings = 0;
 800b4a8:	2300      	movs	r3, #0
 800b4aa:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	uint32_t count = 0;
 800b4ae:	2300      	movs	r3, #0
 800b4b0:	663b      	str	r3, [r7, #96]	; 0x60
	uint8_t isApertureSpads = 0;
 800b4b2:	2300      	movs	r3, #0
 800b4b4:	763b      	strb	r3, [r7, #24]
	uint32_t refSpadCount = 0;
 800b4b6:	2300      	movs	r3, #0
 800b4b8:	617b      	str	r3, [r7, #20]
	uint8_t ApertureSpads = 0;
 800b4ba:	2300      	movs	r3, #0
 800b4bc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	uint8_t vcselPulsePeriodPCLK;
	uint32_t seqTimeoutMicroSecs;

	LOG_FUNCTION_START("");

	Status = VL53L0X_get_info_from_device(Dev, 1);
 800b4c0:	2101      	movs	r1, #1
 800b4c2:	6878      	ldr	r0, [r7, #4]
 800b4c4:	f002 faa9 	bl	800da1a <VL53L0X_get_info_from_device>
 800b4c8:	4603      	mov	r3, r0
 800b4ca:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f

	/* set the ref spad from NVM */
	count	= (uint32_t)VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 800b4ce:	687b      	ldr	r3, [r7, #4]
 800b4d0:	f893 3113 	ldrb.w	r3, [r3, #275]	; 0x113
 800b4d4:	663b      	str	r3, [r7, #96]	; 0x60
		ReferenceSpadCount);
	ApertureSpads = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 800b4d6:	687b      	ldr	r3, [r7, #4]
 800b4d8:	f893 3114 	ldrb.w	r3, [r3, #276]	; 0x114
 800b4dc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		ReferenceSpadType);

	/* NVM value invalid */
	if ((ApertureSpads > 1) ||
 800b4e0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b4e4:	2b01      	cmp	r3, #1
 800b4e6:	d80d      	bhi.n	800b504 <VL53L0X_StaticInit+0x80>
 800b4e8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b4ec:	2b01      	cmp	r3, #1
 800b4ee:	d102      	bne.n	800b4f6 <VL53L0X_StaticInit+0x72>
		((ApertureSpads == 1) && (count > 32)) ||
 800b4f0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b4f2:	2b20      	cmp	r3, #32
 800b4f4:	d806      	bhi.n	800b504 <VL53L0X_StaticInit+0x80>
 800b4f6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b4fa:	2b00      	cmp	r3, #0
 800b4fc:	d10e      	bne.n	800b51c <VL53L0X_StaticInit+0x98>
		((ApertureSpads == 0) && (count > 12)))
 800b4fe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b500:	2b0c      	cmp	r3, #12
 800b502:	d90b      	bls.n	800b51c <VL53L0X_StaticInit+0x98>
		Status = VL53L0X_perform_ref_spad_management(Dev, &refSpadCount,
 800b504:	f107 0218 	add.w	r2, r7, #24
 800b508:	f107 0314 	add.w	r3, r7, #20
 800b50c:	4619      	mov	r1, r3
 800b50e:	6878      	ldr	r0, [r7, #4]
 800b510:	f001 fd28 	bl	800cf64 <VL53L0X_perform_ref_spad_management>
 800b514:	4603      	mov	r3, r0
 800b516:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 800b51a:	e009      	b.n	800b530 <VL53L0X_StaticInit+0xac>
			&isApertureSpads);
	else
		Status = VL53L0X_set_reference_spads(Dev, count, ApertureSpads);
 800b51c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800b520:	461a      	mov	r2, r3
 800b522:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800b524:	6878      	ldr	r0, [r7, #4]
 800b526:	f001 ff29 	bl	800d37c <VL53L0X_set_reference_spads>
 800b52a:	4603      	mov	r3, r0
 800b52c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f


	/* Initialize tuning settings buffer to prevent compiler warning. */
	pTuningSettingBuffer = DefaultTuningSettings;
 800b530:	4b94      	ldr	r3, [pc, #592]	; (800b784 <VL53L0X_StaticInit+0x300>)
 800b532:	66bb      	str	r3, [r7, #104]	; 0x68

	if (Status == VL53L0X_ERROR_NONE) {
 800b534:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800b538:	2b00      	cmp	r3, #0
 800b53a:	d10f      	bne.n	800b55c <VL53L0X_StaticInit+0xd8>
		UseInternalTuningSettings = PALDevDataGet(Dev,
 800b53c:	687b      	ldr	r3, [r7, #4]
 800b53e:	f893 3150 	ldrb.w	r3, [r3, #336]	; 0x150
 800b542:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			UseInternalTuningSettings);

		if (UseInternalTuningSettings == 0)
 800b546:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800b54a:	2b00      	cmp	r3, #0
 800b54c:	d104      	bne.n	800b558 <VL53L0X_StaticInit+0xd4>
			pTuningSettingBuffer = PALDevDataGet(Dev,
 800b54e:	687b      	ldr	r3, [r7, #4]
 800b550:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 800b554:	66bb      	str	r3, [r7, #104]	; 0x68
 800b556:	e001      	b.n	800b55c <VL53L0X_StaticInit+0xd8>
				pTuningSettingsPointer);
		else
			pTuningSettingBuffer = DefaultTuningSettings;
 800b558:	4b8a      	ldr	r3, [pc, #552]	; (800b784 <VL53L0X_StaticInit+0x300>)
 800b55a:	66bb      	str	r3, [r7, #104]	; 0x68

	}

	if (Status == VL53L0X_ERROR_NONE)
 800b55c:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800b560:	2b00      	cmp	r3, #0
 800b562:	d106      	bne.n	800b572 <VL53L0X_StaticInit+0xee>
		Status = VL53L0X_load_tuning_settings(Dev, pTuningSettingBuffer);
 800b564:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800b566:	6878      	ldr	r0, [r7, #4]
 800b568:	f003 fdfc 	bl	800f164 <VL53L0X_load_tuning_settings>
 800b56c:	4603      	mov	r3, r0
 800b56e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f


	/* Set interrupt config to new sample ready */
	if (Status == VL53L0X_ERROR_NONE) {
 800b572:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800b576:	2b00      	cmp	r3, #0
 800b578:	d10a      	bne.n	800b590 <VL53L0X_StaticInit+0x10c>
		Status = VL53L0X_SetGpioConfig(Dev, 0, 0,
 800b57a:	2300      	movs	r3, #0
 800b57c:	9300      	str	r3, [sp, #0]
 800b57e:	2304      	movs	r3, #4
 800b580:	2200      	movs	r2, #0
 800b582:	2100      	movs	r1, #0
 800b584:	6878      	ldr	r0, [r7, #4]
 800b586:	f001 f8f1 	bl	800c76c <VL53L0X_SetGpioConfig>
 800b58a:	4603      	mov	r3, r0
 800b58c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY,
		VL53L0X_INTERRUPTPOLARITY_LOW);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800b590:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800b594:	2b00      	cmp	r3, #0
 800b596:	d121      	bne.n	800b5dc <VL53L0X_StaticInit+0x158>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800b598:	2201      	movs	r2, #1
 800b59a:	21ff      	movs	r1, #255	; 0xff
 800b59c:	6878      	ldr	r0, [r7, #4]
 800b59e:	f004 fcf7 	bl	800ff90 <VL53L0X_WrByte>
 800b5a2:	4603      	mov	r3, r0
 800b5a4:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		Status |= VL53L0X_RdWord(Dev, 0x84, &tempword);
 800b5a8:	f107 031a 	add.w	r3, r7, #26
 800b5ac:	461a      	mov	r2, r3
 800b5ae:	2184      	movs	r1, #132	; 0x84
 800b5b0:	6878      	ldr	r0, [r7, #4]
 800b5b2:	f004 fd99 	bl	80100e8 <VL53L0X_RdWord>
 800b5b6:	4603      	mov	r3, r0
 800b5b8:	461a      	mov	r2, r3
 800b5ba:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800b5be:	4313      	orrs	r3, r2
 800b5c0:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800b5c4:	2200      	movs	r2, #0
 800b5c6:	21ff      	movs	r1, #255	; 0xff
 800b5c8:	6878      	ldr	r0, [r7, #4]
 800b5ca:	f004 fce1 	bl	800ff90 <VL53L0X_WrByte>
 800b5ce:	4603      	mov	r3, r0
 800b5d0:	461a      	mov	r2, r3
 800b5d2:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800b5d6:	4313      	orrs	r3, r2
 800b5d8:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800b5dc:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800b5e0:	2b00      	cmp	r3, #0
 800b5e2:	d105      	bne.n	800b5f0 <VL53L0X_StaticInit+0x16c>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, OscFrequencyMHz,
 800b5e4:	8b7b      	ldrh	r3, [r7, #26]
 800b5e6:	011b      	lsls	r3, r3, #4
 800b5e8:	461a      	mov	r2, r3
 800b5ea:	687b      	ldr	r3, [r7, #4]
 800b5ec:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
			VL53L0X_FIXPOINT412TOFIXPOINT1616(tempword));
	}

	/* After static init, some device parameters may be changed,
	 * so update them */
	if (Status == VL53L0X_ERROR_NONE)
 800b5f0:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800b5f4:	2b00      	cmp	r3, #0
 800b5f6:	d108      	bne.n	800b60a <VL53L0X_StaticInit+0x186>
		Status = VL53L0X_GetDeviceParameters(Dev, &CurrentParameters);
 800b5f8:	f107 031c 	add.w	r3, r7, #28
 800b5fc:	4619      	mov	r1, r3
 800b5fe:	6878      	ldr	r0, [r7, #4]
 800b600:	f000 f8d0 	bl	800b7a4 <VL53L0X_GetDeviceParameters>
 800b604:	4603      	mov	r3, r0
 800b606:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f


	if (Status == VL53L0X_ERROR_NONE) {
 800b60a:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800b60e:	2b00      	cmp	r3, #0
 800b610:	d110      	bne.n	800b634 <VL53L0X_StaticInit+0x1b0>
		Status = VL53L0X_GetFractionEnable(Dev, &tempbyte);
 800b612:	f107 0319 	add.w	r3, r7, #25
 800b616:	4619      	mov	r1, r3
 800b618:	6878      	ldr	r0, [r7, #4]
 800b61a:	f000 f992 	bl	800b942 <VL53L0X_GetFractionEnable>
 800b61e:	4603      	mov	r3, r0
 800b620:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		if (Status == VL53L0X_ERROR_NONE)
 800b624:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800b628:	2b00      	cmp	r3, #0
 800b62a:	d103      	bne.n	800b634 <VL53L0X_StaticInit+0x1b0>
			PALDevDataSet(Dev, RangeFractionalEnable, tempbyte);
 800b62c:	7e7a      	ldrb	r2, [r7, #25]
 800b62e:	687b      	ldr	r3, [r7, #4]
 800b630:	f883 2131 	strb.w	r2, [r3, #305]	; 0x131

	}

	if (Status == VL53L0X_ERROR_NONE)
 800b634:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800b638:	2b00      	cmp	r3, #0
 800b63a:	d10e      	bne.n	800b65a <VL53L0X_StaticInit+0x1d6>
		PALDevDataSet(Dev, CurrentParameters, CurrentParameters);
 800b63c:	687b      	ldr	r3, [r7, #4]
 800b63e:	f103 0410 	add.w	r4, r3, #16
 800b642:	f107 051c 	add.w	r5, r7, #28
 800b646:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b648:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b64a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b64c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b64e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b650:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b652:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800b656:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}


	/* read the sequence config and save it */
	if (Status == VL53L0X_ERROR_NONE) {
 800b65a:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800b65e:	2b00      	cmp	r3, #0
 800b660:	d111      	bne.n	800b686 <VL53L0X_StaticInit+0x202>
		Status = VL53L0X_RdByte(Dev,
 800b662:	f107 0319 	add.w	r3, r7, #25
 800b666:	461a      	mov	r2, r3
 800b668:	2101      	movs	r1, #1
 800b66a:	6878      	ldr	r0, [r7, #4]
 800b66c:	f004 fd12 	bl	8010094 <VL53L0X_RdByte>
 800b670:	4603      	mov	r3, r0
 800b672:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, &tempbyte);
		if (Status == VL53L0X_ERROR_NONE)
 800b676:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800b67a:	2b00      	cmp	r3, #0
 800b67c:	d103      	bne.n	800b686 <VL53L0X_StaticInit+0x202>
			PALDevDataSet(Dev, SequenceConfig, tempbyte);
 800b67e:	7e7a      	ldrb	r2, [r7, #25]
 800b680:	687b      	ldr	r3, [r7, #4]
 800b682:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	/* Disable MSRC and TCC by default */
	if (Status == VL53L0X_ERROR_NONE)
 800b686:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800b68a:	2b00      	cmp	r3, #0
 800b68c:	d107      	bne.n	800b69e <VL53L0X_StaticInit+0x21a>
		Status = VL53L0X_SetSequenceStepEnable(Dev,
 800b68e:	2200      	movs	r2, #0
 800b690:	2100      	movs	r1, #0
 800b692:	6878      	ldr	r0, [r7, #4]
 800b694:	f000 f9ca 	bl	800ba2c <VL53L0X_SetSequenceStepEnable>
 800b698:	4603      	mov	r3, r0
 800b69a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
					VL53L0X_SEQUENCESTEP_TCC, 0);


	if (Status == VL53L0X_ERROR_NONE)
 800b69e:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800b6a2:	2b00      	cmp	r3, #0
 800b6a4:	d107      	bne.n	800b6b6 <VL53L0X_StaticInit+0x232>
		Status = VL53L0X_SetSequenceStepEnable(Dev,
 800b6a6:	2200      	movs	r2, #0
 800b6a8:	2102      	movs	r1, #2
 800b6aa:	6878      	ldr	r0, [r7, #4]
 800b6ac:	f000 f9be 	bl	800ba2c <VL53L0X_SetSequenceStepEnable>
 800b6b0:	4603      	mov	r3, r0
 800b6b2:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		VL53L0X_SEQUENCESTEP_MSRC, 0);


	/* Set PAL State to standby */
	if (Status == VL53L0X_ERROR_NONE)
 800b6b6:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800b6ba:	2b00      	cmp	r3, #0
 800b6bc:	d103      	bne.n	800b6c6 <VL53L0X_StaticInit+0x242>
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_IDLE);
 800b6be:	687b      	ldr	r3, [r7, #4]
 800b6c0:	2203      	movs	r2, #3
 800b6c2:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132



	/* Store pre-range vcsel period */
	if (Status == VL53L0X_ERROR_NONE) {
 800b6c6:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800b6ca:	2b00      	cmp	r3, #0
 800b6cc:	d109      	bne.n	800b6e2 <VL53L0X_StaticInit+0x25e>
		Status = VL53L0X_GetVcselPulsePeriod(
 800b6ce:	f107 0313 	add.w	r3, r7, #19
 800b6d2:	461a      	mov	r2, r3
 800b6d4:	2100      	movs	r1, #0
 800b6d6:	6878      	ldr	r0, [r7, #4]
 800b6d8:	f000 f990 	bl	800b9fc <VL53L0X_GetVcselPulsePeriod>
 800b6dc:	4603      	mov	r3, r0
 800b6de:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_VCSEL_PERIOD_PRE_RANGE,
			&vcselPulsePeriodPCLK);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800b6e2:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800b6e6:	2b00      	cmp	r3, #0
 800b6e8:	d103      	bne.n	800b6f2 <VL53L0X_StaticInit+0x26e>
			VL53L0X_SETDEVICESPECIFICPARAMETER(
 800b6ea:	7cfa      	ldrb	r2, [r7, #19]
 800b6ec:	687b      	ldr	r3, [r7, #4]
 800b6ee:	f883 20e8 	strb.w	r2, [r3, #232]	; 0xe8
				PreRangeVcselPulsePeriod,
				vcselPulsePeriodPCLK);
	}

	/* Store final-range vcsel period */
	if (Status == VL53L0X_ERROR_NONE) {
 800b6f2:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800b6f6:	2b00      	cmp	r3, #0
 800b6f8:	d109      	bne.n	800b70e <VL53L0X_StaticInit+0x28a>
		Status = VL53L0X_GetVcselPulsePeriod(
 800b6fa:	f107 0313 	add.w	r3, r7, #19
 800b6fe:	461a      	mov	r2, r3
 800b700:	2101      	movs	r1, #1
 800b702:	6878      	ldr	r0, [r7, #4]
 800b704:	f000 f97a 	bl	800b9fc <VL53L0X_GetVcselPulsePeriod>
 800b708:	4603      	mov	r3, r0
 800b70a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
			&vcselPulsePeriodPCLK);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800b70e:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800b712:	2b00      	cmp	r3, #0
 800b714:	d103      	bne.n	800b71e <VL53L0X_StaticInit+0x29a>
			VL53L0X_SETDEVICESPECIFICPARAMETER(
 800b716:	7cfa      	ldrb	r2, [r7, #19]
 800b718:	687b      	ldr	r3, [r7, #4]
 800b71a:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
				FinalRangeVcselPulsePeriod,
				vcselPulsePeriodPCLK);
	}

	/* Store pre-range timeout */
	if (Status == VL53L0X_ERROR_NONE) {
 800b71e:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800b722:	2b00      	cmp	r3, #0
 800b724:	d109      	bne.n	800b73a <VL53L0X_StaticInit+0x2b6>
		Status = get_sequence_step_timeout(
 800b726:	f107 030c 	add.w	r3, r7, #12
 800b72a:	461a      	mov	r2, r3
 800b72c:	2103      	movs	r1, #3
 800b72e:	6878      	ldr	r0, [r7, #4]
 800b730:	f002 fef4 	bl	800e51c <get_sequence_step_timeout>
 800b734:	4603      	mov	r3, r0
 800b736:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_SEQUENCESTEP_PRE_RANGE,
			&seqTimeoutMicroSecs);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800b73a:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800b73e:	2b00      	cmp	r3, #0
 800b740:	d103      	bne.n	800b74a <VL53L0X_StaticInit+0x2c6>
		VL53L0X_SETDEVICESPECIFICPARAMETER(
 800b742:	68fa      	ldr	r2, [r7, #12]
 800b744:	687b      	ldr	r3, [r7, #4]
 800b746:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
			PreRangeTimeoutMicroSecs,
			seqTimeoutMicroSecs);
	}

	/* Store final-range timeout */
	if (Status == VL53L0X_ERROR_NONE) {
 800b74a:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800b74e:	2b00      	cmp	r3, #0
 800b750:	d109      	bne.n	800b766 <VL53L0X_StaticInit+0x2e2>
		Status = get_sequence_step_timeout(
 800b752:	f107 030c 	add.w	r3, r7, #12
 800b756:	461a      	mov	r2, r3
 800b758:	2104      	movs	r1, #4
 800b75a:	6878      	ldr	r0, [r7, #4]
 800b75c:	f002 fede 	bl	800e51c <get_sequence_step_timeout>
 800b760:	4603      	mov	r3, r0
 800b762:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_SEQUENCESTEP_FINAL_RANGE,
			&seqTimeoutMicroSecs);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800b766:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800b76a:	2b00      	cmp	r3, #0
 800b76c:	d103      	bne.n	800b776 <VL53L0X_StaticInit+0x2f2>
		VL53L0X_SETDEVICESPECIFICPARAMETER(
 800b76e:	68fa      	ldr	r2, [r7, #12]
 800b770:	687b      	ldr	r3, [r7, #4]
 800b772:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
			FinalRangeTimeoutMicroSecs,
			seqTimeoutMicroSecs);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800b776:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
}
 800b77a:	4618      	mov	r0, r3
 800b77c:	3770      	adds	r7, #112	; 0x70
 800b77e:	46bd      	mov	sp, r7
 800b780:	bdb0      	pop	{r4, r5, r7, pc}
 800b782:	bf00      	nop
 800b784:	2000000c 	.word	0x2000000c

0800b788 <VL53L0X_WaitDeviceBooted>:

VL53L0X_Error VL53L0X_WaitDeviceBooted(VL53L0X_DEV Dev)
{
 800b788:	b480      	push	{r7}
 800b78a:	b085      	sub	sp, #20
 800b78c:	af00      	add	r7, sp, #0
 800b78e:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NOT_IMPLEMENTED;
 800b790:	239d      	movs	r3, #157	; 0x9d
 800b792:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	/* not implemented on VL53L0X */

	LOG_FUNCTION_END(Status);
	return Status;
 800b794:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b798:	4618      	mov	r0, r3
 800b79a:	3714      	adds	r7, #20
 800b79c:	46bd      	mov	sp, r7
 800b79e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7a2:	4770      	bx	lr

0800b7a4 <VL53L0X_GetDeviceParameters>:
	return Status;
}

VL53L0X_Error VL53L0X_GetDeviceParameters(VL53L0X_DEV Dev,
	VL53L0X_DeviceParameters_t *pDeviceParameters)
{
 800b7a4:	b580      	push	{r7, lr}
 800b7a6:	b084      	sub	sp, #16
 800b7a8:	af00      	add	r7, sp, #0
 800b7aa:	6078      	str	r0, [r7, #4]
 800b7ac:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b7ae:	2300      	movs	r3, #0
 800b7b0:	73fb      	strb	r3, [r7, #15]
	int i;

	LOG_FUNCTION_START("");

	Status = VL53L0X_GetDeviceMode(Dev, &(pDeviceParameters->DeviceMode));
 800b7b2:	683b      	ldr	r3, [r7, #0]
 800b7b4:	4619      	mov	r1, r3
 800b7b6:	6878      	ldr	r0, [r7, #4]
 800b7b8:	f000 f8b0 	bl	800b91c <VL53L0X_GetDeviceMode>
 800b7bc:	4603      	mov	r3, r0
 800b7be:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 800b7c0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b7c4:	2b00      	cmp	r3, #0
 800b7c6:	d107      	bne.n	800b7d8 <VL53L0X_GetDeviceParameters+0x34>
		Status = VL53L0X_GetInterMeasurementPeriodMilliSeconds(Dev,
 800b7c8:	683b      	ldr	r3, [r7, #0]
 800b7ca:	3308      	adds	r3, #8
 800b7cc:	4619      	mov	r1, r3
 800b7ce:	6878      	ldr	r0, [r7, #4]
 800b7d0:	f000 fa78 	bl	800bcc4 <VL53L0X_GetInterMeasurementPeriodMilliSeconds>
 800b7d4:	4603      	mov	r3, r0
 800b7d6:	73fb      	strb	r3, [r7, #15]
		&(pDeviceParameters->InterMeasurementPeriodMilliSeconds));


	if (Status == VL53L0X_ERROR_NONE)
 800b7d8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b7dc:	2b00      	cmp	r3, #0
 800b7de:	d102      	bne.n	800b7e6 <VL53L0X_GetDeviceParameters+0x42>
		pDeviceParameters->XTalkCompensationEnable = 0;
 800b7e0:	683b      	ldr	r3, [r7, #0]
 800b7e2:	2200      	movs	r2, #0
 800b7e4:	731a      	strb	r2, [r3, #12]

	if (Status == VL53L0X_ERROR_NONE)
 800b7e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b7ea:	2b00      	cmp	r3, #0
 800b7ec:	d107      	bne.n	800b7fe <VL53L0X_GetDeviceParameters+0x5a>
		Status = VL53L0X_GetXTalkCompensationRateMegaCps(Dev,
 800b7ee:	683b      	ldr	r3, [r7, #0]
 800b7f0:	3310      	adds	r3, #16
 800b7f2:	4619      	mov	r1, r3
 800b7f4:	6878      	ldr	r0, [r7, #4]
 800b7f6:	f000 faae 	bl	800bd56 <VL53L0X_GetXTalkCompensationRateMegaCps>
 800b7fa:	4603      	mov	r3, r0
 800b7fc:	73fb      	strb	r3, [r7, #15]
			&(pDeviceParameters->XTalkCompensationRateMegaCps));


	if (Status == VL53L0X_ERROR_NONE)
 800b7fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b802:	2b00      	cmp	r3, #0
 800b804:	d107      	bne.n	800b816 <VL53L0X_GetDeviceParameters+0x72>
		Status = VL53L0X_GetOffsetCalibrationDataMicroMeter(Dev,
 800b806:	683b      	ldr	r3, [r7, #0]
 800b808:	3314      	adds	r3, #20
 800b80a:	4619      	mov	r1, r3
 800b80c:	6878      	ldr	r0, [r7, #4]
 800b80e:	f7ff fcc1 	bl	800b194 <VL53L0X_GetOffsetCalibrationDataMicroMeter>
 800b812:	4603      	mov	r3, r0
 800b814:	73fb      	strb	r3, [r7, #15]
			&(pDeviceParameters->RangeOffsetMicroMeters));


	if (Status == VL53L0X_ERROR_NONE) {
 800b816:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b81a:	2b00      	cmp	r3, #0
 800b81c:	d134      	bne.n	800b888 <VL53L0X_GetDeviceParameters+0xe4>
		for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 800b81e:	2300      	movs	r3, #0
 800b820:	60bb      	str	r3, [r7, #8]
 800b822:	e02a      	b.n	800b87a <VL53L0X_GetDeviceParameters+0xd6>
			/* get first the values, then the enables.
			 * VL53L0X_GetLimitCheckValue will modify the enable
			 * flags
			 */
			if (Status == VL53L0X_ERROR_NONE) {
 800b824:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b828:	2b00      	cmp	r3, #0
 800b82a:	d12a      	bne.n	800b882 <VL53L0X_GetDeviceParameters+0xde>
				Status |= VL53L0X_GetLimitCheckValue(Dev, i,
 800b82c:	68bb      	ldr	r3, [r7, #8]
 800b82e:	b299      	uxth	r1, r3
 800b830:	68bb      	ldr	r3, [r7, #8]
 800b832:	3308      	adds	r3, #8
 800b834:	009b      	lsls	r3, r3, #2
 800b836:	683a      	ldr	r2, [r7, #0]
 800b838:	4413      	add	r3, r2
 800b83a:	3304      	adds	r3, #4
 800b83c:	461a      	mov	r2, r3
 800b83e:	6878      	ldr	r0, [r7, #4]
 800b840:	f000 fbce 	bl	800bfe0 <VL53L0X_GetLimitCheckValue>
 800b844:	4603      	mov	r3, r0
 800b846:	461a      	mov	r2, r3
 800b848:	7bfb      	ldrb	r3, [r7, #15]
 800b84a:	4313      	orrs	r3, r2
 800b84c:	73fb      	strb	r3, [r7, #15]
				&(pDeviceParameters->LimitChecksValue[i]));
			} else {
				break;
			}
			if (Status == VL53L0X_ERROR_NONE) {
 800b84e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b852:	2b00      	cmp	r3, #0
 800b854:	d117      	bne.n	800b886 <VL53L0X_GetDeviceParameters+0xe2>
				Status |= VL53L0X_GetLimitCheckEnable(Dev, i,
 800b856:	68bb      	ldr	r3, [r7, #8]
 800b858:	b299      	uxth	r1, r3
 800b85a:	68bb      	ldr	r3, [r7, #8]
 800b85c:	3318      	adds	r3, #24
 800b85e:	683a      	ldr	r2, [r7, #0]
 800b860:	4413      	add	r3, r2
 800b862:	461a      	mov	r2, r3
 800b864:	6878      	ldr	r0, [r7, #4]
 800b866:	f000 fb35 	bl	800bed4 <VL53L0X_GetLimitCheckEnable>
 800b86a:	4603      	mov	r3, r0
 800b86c:	461a      	mov	r2, r3
 800b86e:	7bfb      	ldrb	r3, [r7, #15]
 800b870:	4313      	orrs	r3, r2
 800b872:	73fb      	strb	r3, [r7, #15]
		for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 800b874:	68bb      	ldr	r3, [r7, #8]
 800b876:	3301      	adds	r3, #1
 800b878:	60bb      	str	r3, [r7, #8]
 800b87a:	68bb      	ldr	r3, [r7, #8]
 800b87c:	2b05      	cmp	r3, #5
 800b87e:	ddd1      	ble.n	800b824 <VL53L0X_GetDeviceParameters+0x80>
 800b880:	e002      	b.n	800b888 <VL53L0X_GetDeviceParameters+0xe4>
				break;
 800b882:	bf00      	nop
 800b884:	e000      	b.n	800b888 <VL53L0X_GetDeviceParameters+0xe4>
				&(pDeviceParameters->LimitChecksEnable[i]));
			} else {
				break;
 800b886:	bf00      	nop
			}
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800b888:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b88c:	2b00      	cmp	r3, #0
 800b88e:	d107      	bne.n	800b8a0 <VL53L0X_GetDeviceParameters+0xfc>
		Status = VL53L0X_GetWrapAroundCheckEnable(Dev,
 800b890:	683b      	ldr	r3, [r7, #0]
 800b892:	333c      	adds	r3, #60	; 0x3c
 800b894:	4619      	mov	r1, r3
 800b896:	6878      	ldr	r0, [r7, #4]
 800b898:	f000 fc30 	bl	800c0fc <VL53L0X_GetWrapAroundCheckEnable>
 800b89c:	4603      	mov	r3, r0
 800b89e:	73fb      	strb	r3, [r7, #15]
			&(pDeviceParameters->WrapAroundCheckEnable));
	}

	/* Need to be done at the end as it uses VCSELPulsePeriod */
	if (Status == VL53L0X_ERROR_NONE) {
 800b8a0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b8a4:	2b00      	cmp	r3, #0
 800b8a6:	d107      	bne.n	800b8b8 <VL53L0X_GetDeviceParameters+0x114>
		Status = VL53L0X_GetMeasurementTimingBudgetMicroSeconds(Dev,
 800b8a8:	683b      	ldr	r3, [r7, #0]
 800b8aa:	3304      	adds	r3, #4
 800b8ac:	4619      	mov	r1, r3
 800b8ae:	6878      	ldr	r0, [r7, #4]
 800b8b0:	f000 f879 	bl	800b9a6 <VL53L0X_GetMeasurementTimingBudgetMicroSeconds>
 800b8b4:	4603      	mov	r3, r0
 800b8b6:	73fb      	strb	r3, [r7, #15]
		&(pDeviceParameters->MeasurementTimingBudgetMicroSeconds));
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800b8b8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b8bc:	4618      	mov	r0, r3
 800b8be:	3710      	adds	r7, #16
 800b8c0:	46bd      	mov	sp, r7
 800b8c2:	bd80      	pop	{r7, pc}

0800b8c4 <VL53L0X_SetDeviceMode>:

VL53L0X_Error VL53L0X_SetDeviceMode(VL53L0X_DEV Dev, VL53L0X_DeviceModes DeviceMode)
{
 800b8c4:	b480      	push	{r7}
 800b8c6:	b085      	sub	sp, #20
 800b8c8:	af00      	add	r7, sp, #0
 800b8ca:	6078      	str	r0, [r7, #4]
 800b8cc:	460b      	mov	r3, r1
 800b8ce:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b8d0:	2300      	movs	r3, #0
 800b8d2:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("%d", (int)DeviceMode);

	switch (DeviceMode) {
 800b8d4:	78fb      	ldrb	r3, [r7, #3]
 800b8d6:	2b15      	cmp	r3, #21
 800b8d8:	bf8c      	ite	hi
 800b8da:	2201      	movhi	r2, #1
 800b8dc:	2200      	movls	r2, #0
 800b8de:	b2d2      	uxtb	r2, r2
 800b8e0:	2a00      	cmp	r2, #0
 800b8e2:	d10e      	bne.n	800b902 <VL53L0X_SetDeviceMode+0x3e>
 800b8e4:	2201      	movs	r2, #1
 800b8e6:	409a      	lsls	r2, r3
 800b8e8:	4b0b      	ldr	r3, [pc, #44]	; (800b918 <VL53L0X_SetDeviceMode+0x54>)
 800b8ea:	4013      	ands	r3, r2
 800b8ec:	2b00      	cmp	r3, #0
 800b8ee:	bf14      	ite	ne
 800b8f0:	2301      	movne	r3, #1
 800b8f2:	2300      	moveq	r3, #0
 800b8f4:	b2db      	uxtb	r3, r3
 800b8f6:	2b00      	cmp	r3, #0
 800b8f8:	d003      	beq.n	800b902 <VL53L0X_SetDeviceMode+0x3e>
	case VL53L0X_DEVICEMODE_CONTINUOUS_RANGING:
	case VL53L0X_DEVICEMODE_CONTINUOUS_TIMED_RANGING:
	case VL53L0X_DEVICEMODE_GPIO_DRIVE:
	case VL53L0X_DEVICEMODE_GPIO_OSC:
		/* Supported modes */
		VL53L0X_SETPARAMETERFIELD(Dev, DeviceMode, DeviceMode);
 800b8fa:	687b      	ldr	r3, [r7, #4]
 800b8fc:	78fa      	ldrb	r2, [r7, #3]
 800b8fe:	741a      	strb	r2, [r3, #16]
		break;
 800b900:	e001      	b.n	800b906 <VL53L0X_SetDeviceMode+0x42>
	default:
		/* Unsupported mode */
		Status = VL53L0X_ERROR_MODE_NOT_SUPPORTED;
 800b902:	23f8      	movs	r3, #248	; 0xf8
 800b904:	73fb      	strb	r3, [r7, #15]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800b906:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b90a:	4618      	mov	r0, r3
 800b90c:	3714      	adds	r7, #20
 800b90e:	46bd      	mov	sp, r7
 800b910:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b914:	4770      	bx	lr
 800b916:	bf00      	nop
 800b918:	0030000b 	.word	0x0030000b

0800b91c <VL53L0X_GetDeviceMode>:

VL53L0X_Error VL53L0X_GetDeviceMode(VL53L0X_DEV Dev,
	VL53L0X_DeviceModes *pDeviceMode)
{
 800b91c:	b480      	push	{r7}
 800b91e:	b085      	sub	sp, #20
 800b920:	af00      	add	r7, sp, #0
 800b922:	6078      	str	r0, [r7, #4]
 800b924:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b926:	2300      	movs	r3, #0
 800b928:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, DeviceMode, *pDeviceMode);
 800b92a:	687b      	ldr	r3, [r7, #4]
 800b92c:	7c1a      	ldrb	r2, [r3, #16]
 800b92e:	683b      	ldr	r3, [r7, #0]
 800b930:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 800b932:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b936:	4618      	mov	r0, r3
 800b938:	3714      	adds	r7, #20
 800b93a:	46bd      	mov	sp, r7
 800b93c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b940:	4770      	bx	lr

0800b942 <VL53L0X_GetFractionEnable>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_GetFractionEnable(VL53L0X_DEV Dev, uint8_t *pEnabled)
{
 800b942:	b580      	push	{r7, lr}
 800b944:	b084      	sub	sp, #16
 800b946:	af00      	add	r7, sp, #0
 800b948:	6078      	str	r0, [r7, #4]
 800b94a:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b94c:	2300      	movs	r3, #0
 800b94e:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_RANGE_CONFIG, pEnabled);
 800b950:	683a      	ldr	r2, [r7, #0]
 800b952:	2109      	movs	r1, #9
 800b954:	6878      	ldr	r0, [r7, #4]
 800b956:	f004 fb9d 	bl	8010094 <VL53L0X_RdByte>
 800b95a:	4603      	mov	r3, r0
 800b95c:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 800b95e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b962:	2b00      	cmp	r3, #0
 800b964:	d106      	bne.n	800b974 <VL53L0X_GetFractionEnable+0x32>
		*pEnabled = (*pEnabled & 1);
 800b966:	683b      	ldr	r3, [r7, #0]
 800b968:	781b      	ldrb	r3, [r3, #0]
 800b96a:	f003 0301 	and.w	r3, r3, #1
 800b96e:	b2da      	uxtb	r2, r3
 800b970:	683b      	ldr	r3, [r7, #0]
 800b972:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 800b974:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b978:	4618      	mov	r0, r3
 800b97a:	3710      	adds	r7, #16
 800b97c:	46bd      	mov	sp, r7
 800b97e:	bd80      	pop	{r7, pc}

0800b980 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>:
	return Status;
}

VL53L0X_Error VL53L0X_SetMeasurementTimingBudgetMicroSeconds(VL53L0X_DEV Dev,
	uint32_t MeasurementTimingBudgetMicroSeconds)
{
 800b980:	b580      	push	{r7, lr}
 800b982:	b084      	sub	sp, #16
 800b984:	af00      	add	r7, sp, #0
 800b986:	6078      	str	r0, [r7, #4]
 800b988:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b98a:	2300      	movs	r3, #0
 800b98c:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_set_measurement_timing_budget_micro_seconds(Dev,
 800b98e:	6839      	ldr	r1, [r7, #0]
 800b990:	6878      	ldr	r0, [r7, #4]
 800b992:	f003 fa56 	bl	800ee42 <VL53L0X_set_measurement_timing_budget_micro_seconds>
 800b996:	4603      	mov	r3, r0
 800b998:	73fb      	strb	r3, [r7, #15]
		MeasurementTimingBudgetMicroSeconds);

	LOG_FUNCTION_END(Status);

	return Status;
 800b99a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b99e:	4618      	mov	r0, r3
 800b9a0:	3710      	adds	r7, #16
 800b9a2:	46bd      	mov	sp, r7
 800b9a4:	bd80      	pop	{r7, pc}

0800b9a6 <VL53L0X_GetMeasurementTimingBudgetMicroSeconds>:

VL53L0X_Error VL53L0X_GetMeasurementTimingBudgetMicroSeconds(VL53L0X_DEV Dev,
	uint32_t *pMeasurementTimingBudgetMicroSeconds)
{
 800b9a6:	b580      	push	{r7, lr}
 800b9a8:	b084      	sub	sp, #16
 800b9aa:	af00      	add	r7, sp, #0
 800b9ac:	6078      	str	r0, [r7, #4]
 800b9ae:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b9b0:	2300      	movs	r3, #0
 800b9b2:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_measurement_timing_budget_micro_seconds(Dev,
 800b9b4:	6839      	ldr	r1, [r7, #0]
 800b9b6:	6878      	ldr	r0, [r7, #4]
 800b9b8:	f003 fb23 	bl	800f002 <VL53L0X_get_measurement_timing_budget_micro_seconds>
 800b9bc:	4603      	mov	r3, r0
 800b9be:	73fb      	strb	r3, [r7, #15]
		pMeasurementTimingBudgetMicroSeconds);

	LOG_FUNCTION_END(Status);
	return Status;
 800b9c0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b9c4:	4618      	mov	r0, r3
 800b9c6:	3710      	adds	r7, #16
 800b9c8:	46bd      	mov	sp, r7
 800b9ca:	bd80      	pop	{r7, pc}

0800b9cc <VL53L0X_SetVcselPulsePeriod>:

VL53L0X_Error VL53L0X_SetVcselPulsePeriod(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t VCSELPulsePeriodPCLK)
{
 800b9cc:	b580      	push	{r7, lr}
 800b9ce:	b084      	sub	sp, #16
 800b9d0:	af00      	add	r7, sp, #0
 800b9d2:	6078      	str	r0, [r7, #4]
 800b9d4:	460b      	mov	r3, r1
 800b9d6:	70fb      	strb	r3, [r7, #3]
 800b9d8:	4613      	mov	r3, r2
 800b9da:	70bb      	strb	r3, [r7, #2]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b9dc:	2300      	movs	r3, #0
 800b9de:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_set_vcsel_pulse_period(Dev, VcselPeriodType,
 800b9e0:	78ba      	ldrb	r2, [r7, #2]
 800b9e2:	78fb      	ldrb	r3, [r7, #3]
 800b9e4:	4619      	mov	r1, r3
 800b9e6:	6878      	ldr	r0, [r7, #4]
 800b9e8:	f002 ff6b 	bl	800e8c2 <VL53L0X_set_vcsel_pulse_period>
 800b9ec:	4603      	mov	r3, r0
 800b9ee:	73fb      	strb	r3, [r7, #15]
		VCSELPulsePeriodPCLK);

	LOG_FUNCTION_END(Status);
	return Status;
 800b9f0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b9f4:	4618      	mov	r0, r3
 800b9f6:	3710      	adds	r7, #16
 800b9f8:	46bd      	mov	sp, r7
 800b9fa:	bd80      	pop	{r7, pc}

0800b9fc <VL53L0X_GetVcselPulsePeriod>:

VL53L0X_Error VL53L0X_GetVcselPulsePeriod(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t *pVCSELPulsePeriodPCLK)
{
 800b9fc:	b580      	push	{r7, lr}
 800b9fe:	b086      	sub	sp, #24
 800ba00:	af00      	add	r7, sp, #0
 800ba02:	60f8      	str	r0, [r7, #12]
 800ba04:	460b      	mov	r3, r1
 800ba06:	607a      	str	r2, [r7, #4]
 800ba08:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800ba0a:	2300      	movs	r3, #0
 800ba0c:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_vcsel_pulse_period(Dev, VcselPeriodType,
 800ba0e:	7afb      	ldrb	r3, [r7, #11]
 800ba10:	687a      	ldr	r2, [r7, #4]
 800ba12:	4619      	mov	r1, r3
 800ba14:	68f8      	ldr	r0, [r7, #12]
 800ba16:	f003 f9dd 	bl	800edd4 <VL53L0X_get_vcsel_pulse_period>
 800ba1a:	4603      	mov	r3, r0
 800ba1c:	75fb      	strb	r3, [r7, #23]
		pVCSELPulsePeriodPCLK);

	LOG_FUNCTION_END(Status);
	return Status;
 800ba1e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800ba22:	4618      	mov	r0, r3
 800ba24:	3718      	adds	r7, #24
 800ba26:	46bd      	mov	sp, r7
 800ba28:	bd80      	pop	{r7, pc}
	...

0800ba2c <VL53L0X_SetSequenceStepEnable>:

VL53L0X_Error VL53L0X_SetSequenceStepEnable(VL53L0X_DEV Dev,
	VL53L0X_SequenceStepId SequenceStepId, uint8_t SequenceStepEnabled)
{
 800ba2c:	b580      	push	{r7, lr}
 800ba2e:	b086      	sub	sp, #24
 800ba30:	af00      	add	r7, sp, #0
 800ba32:	6078      	str	r0, [r7, #4]
 800ba34:	460b      	mov	r3, r1
 800ba36:	70fb      	strb	r3, [r7, #3]
 800ba38:	4613      	mov	r3, r2
 800ba3a:	70bb      	strb	r3, [r7, #2]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800ba3c:	2300      	movs	r3, #0
 800ba3e:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 800ba40:	2300      	movs	r3, #0
 800ba42:	73fb      	strb	r3, [r7, #15]
	uint8_t SequenceConfigNew = 0;
 800ba44:	2300      	movs	r3, #0
 800ba46:	75bb      	strb	r3, [r7, #22]
	uint32_t MeasurementTimingBudgetMicroSeconds;
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 800ba48:	f107 030f 	add.w	r3, r7, #15
 800ba4c:	461a      	mov	r2, r3
 800ba4e:	2101      	movs	r1, #1
 800ba50:	6878      	ldr	r0, [r7, #4]
 800ba52:	f004 fb1f 	bl	8010094 <VL53L0X_RdByte>
 800ba56:	4603      	mov	r3, r0
 800ba58:	75fb      	strb	r3, [r7, #23]
		&SequenceConfig);

	SequenceConfigNew = SequenceConfig;
 800ba5a:	7bfb      	ldrb	r3, [r7, #15]
 800ba5c:	75bb      	strb	r3, [r7, #22]

	if (Status == VL53L0X_ERROR_NONE) {
 800ba5e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800ba62:	2b00      	cmp	r3, #0
 800ba64:	d15a      	bne.n	800bb1c <VL53L0X_SetSequenceStepEnable+0xf0>
		if (SequenceStepEnabled == 1) {
 800ba66:	78bb      	ldrb	r3, [r7, #2]
 800ba68:	2b01      	cmp	r3, #1
 800ba6a:	d12b      	bne.n	800bac4 <VL53L0X_SetSequenceStepEnable+0x98>

			/* Enable requested sequence step
			 */
			switch (SequenceStepId) {
 800ba6c:	78fb      	ldrb	r3, [r7, #3]
 800ba6e:	2b04      	cmp	r3, #4
 800ba70:	d825      	bhi.n	800babe <VL53L0X_SetSequenceStepEnable+0x92>
 800ba72:	a201      	add	r2, pc, #4	; (adr r2, 800ba78 <VL53L0X_SetSequenceStepEnable+0x4c>)
 800ba74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ba78:	0800ba8d 	.word	0x0800ba8d
 800ba7c:	0800ba97 	.word	0x0800ba97
 800ba80:	0800baa1 	.word	0x0800baa1
 800ba84:	0800baab 	.word	0x0800baab
 800ba88:	0800bab5 	.word	0x0800bab5
			case VL53L0X_SEQUENCESTEP_TCC:
				SequenceConfigNew |= 0x10;
 800ba8c:	7dbb      	ldrb	r3, [r7, #22]
 800ba8e:	f043 0310 	orr.w	r3, r3, #16
 800ba92:	75bb      	strb	r3, [r7, #22]
				break;
 800ba94:	e043      	b.n	800bb1e <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_DSS:
				SequenceConfigNew |= 0x28;
 800ba96:	7dbb      	ldrb	r3, [r7, #22]
 800ba98:	f043 0328 	orr.w	r3, r3, #40	; 0x28
 800ba9c:	75bb      	strb	r3, [r7, #22]
				break;
 800ba9e:	e03e      	b.n	800bb1e <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_MSRC:
				SequenceConfigNew |= 0x04;
 800baa0:	7dbb      	ldrb	r3, [r7, #22]
 800baa2:	f043 0304 	orr.w	r3, r3, #4
 800baa6:	75bb      	strb	r3, [r7, #22]
				break;
 800baa8:	e039      	b.n	800bb1e <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_PRE_RANGE:
				SequenceConfigNew |= 0x40;
 800baaa:	7dbb      	ldrb	r3, [r7, #22]
 800baac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bab0:	75bb      	strb	r3, [r7, #22]
				break;
 800bab2:	e034      	b.n	800bb1e <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
				SequenceConfigNew |= 0x80;
 800bab4:	7dbb      	ldrb	r3, [r7, #22]
 800bab6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800baba:	75bb      	strb	r3, [r7, #22]
				break;
 800babc:	e02f      	b.n	800bb1e <VL53L0X_SetSequenceStepEnable+0xf2>
			default:
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 800babe:	23fc      	movs	r3, #252	; 0xfc
 800bac0:	75fb      	strb	r3, [r7, #23]
 800bac2:	e02c      	b.n	800bb1e <VL53L0X_SetSequenceStepEnable+0xf2>
			}
		} else {
			/* Disable requested sequence step
			 */
			switch (SequenceStepId) {
 800bac4:	78fb      	ldrb	r3, [r7, #3]
 800bac6:	2b04      	cmp	r3, #4
 800bac8:	d825      	bhi.n	800bb16 <VL53L0X_SetSequenceStepEnable+0xea>
 800baca:	a201      	add	r2, pc, #4	; (adr r2, 800bad0 <VL53L0X_SetSequenceStepEnable+0xa4>)
 800bacc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bad0:	0800bae5 	.word	0x0800bae5
 800bad4:	0800baef 	.word	0x0800baef
 800bad8:	0800baf9 	.word	0x0800baf9
 800badc:	0800bb03 	.word	0x0800bb03
 800bae0:	0800bb0d 	.word	0x0800bb0d
			case VL53L0X_SEQUENCESTEP_TCC:
				SequenceConfigNew &= 0xef;
 800bae4:	7dbb      	ldrb	r3, [r7, #22]
 800bae6:	f023 0310 	bic.w	r3, r3, #16
 800baea:	75bb      	strb	r3, [r7, #22]
				break;
 800baec:	e017      	b.n	800bb1e <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_DSS:
				SequenceConfigNew &= 0xd7;
 800baee:	7dbb      	ldrb	r3, [r7, #22]
 800baf0:	f023 0328 	bic.w	r3, r3, #40	; 0x28
 800baf4:	75bb      	strb	r3, [r7, #22]
				break;
 800baf6:	e012      	b.n	800bb1e <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_MSRC:
				SequenceConfigNew &= 0xfb;
 800baf8:	7dbb      	ldrb	r3, [r7, #22]
 800bafa:	f023 0304 	bic.w	r3, r3, #4
 800bafe:	75bb      	strb	r3, [r7, #22]
				break;
 800bb00:	e00d      	b.n	800bb1e <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_PRE_RANGE:
				SequenceConfigNew &= 0xbf;
 800bb02:	7dbb      	ldrb	r3, [r7, #22]
 800bb04:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bb08:	75bb      	strb	r3, [r7, #22]
				break;
 800bb0a:	e008      	b.n	800bb1e <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
				SequenceConfigNew &= 0x7f;
 800bb0c:	7dbb      	ldrb	r3, [r7, #22]
 800bb0e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bb12:	75bb      	strb	r3, [r7, #22]
				break;
 800bb14:	e003      	b.n	800bb1e <VL53L0X_SetSequenceStepEnable+0xf2>
			default:
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 800bb16:	23fc      	movs	r3, #252	; 0xfc
 800bb18:	75fb      	strb	r3, [r7, #23]
 800bb1a:	e000      	b.n	800bb1e <VL53L0X_SetSequenceStepEnable+0xf2>
			}
		}
 800bb1c:	bf00      	nop
	}

	if (SequenceConfigNew != SequenceConfig) {
 800bb1e:	7bfb      	ldrb	r3, [r7, #15]
 800bb20:	7dba      	ldrb	r2, [r7, #22]
 800bb22:	429a      	cmp	r2, r3
 800bb24:	d01e      	beq.n	800bb64 <VL53L0X_SetSequenceStepEnable+0x138>
		/* Apply New Setting */
		if (Status == VL53L0X_ERROR_NONE) {
 800bb26:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800bb2a:	2b00      	cmp	r3, #0
 800bb2c:	d107      	bne.n	800bb3e <VL53L0X_SetSequenceStepEnable+0x112>
			Status = VL53L0X_WrByte(Dev,
 800bb2e:	7dbb      	ldrb	r3, [r7, #22]
 800bb30:	461a      	mov	r2, r3
 800bb32:	2101      	movs	r1, #1
 800bb34:	6878      	ldr	r0, [r7, #4]
 800bb36:	f004 fa2b 	bl	800ff90 <VL53L0X_WrByte>
 800bb3a:	4603      	mov	r3, r0
 800bb3c:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, SequenceConfigNew);
		}
		if (Status == VL53L0X_ERROR_NONE)
 800bb3e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800bb42:	2b00      	cmp	r3, #0
 800bb44:	d103      	bne.n	800bb4e <VL53L0X_SetSequenceStepEnable+0x122>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfigNew);
 800bb46:	687b      	ldr	r3, [r7, #4]
 800bb48:	7dba      	ldrb	r2, [r7, #22]
 800bb4a:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130


		/* Recalculate timing budget */
		if (Status == VL53L0X_ERROR_NONE) {
 800bb4e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800bb52:	2b00      	cmp	r3, #0
 800bb54:	d106      	bne.n	800bb64 <VL53L0X_SetSequenceStepEnable+0x138>
			VL53L0X_GETPARAMETERFIELD(Dev,
 800bb56:	687b      	ldr	r3, [r7, #4]
 800bb58:	695b      	ldr	r3, [r3, #20]
 800bb5a:	613b      	str	r3, [r7, #16]
				MeasurementTimingBudgetMicroSeconds,
				MeasurementTimingBudgetMicroSeconds);

			VL53L0X_SetMeasurementTimingBudgetMicroSeconds(Dev,
 800bb5c:	6939      	ldr	r1, [r7, #16]
 800bb5e:	6878      	ldr	r0, [r7, #4]
 800bb60:	f7ff ff0e 	bl	800b980 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>
		}
	}

	LOG_FUNCTION_END(Status);

	return Status;
 800bb64:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800bb68:	4618      	mov	r0, r3
 800bb6a:	3718      	adds	r7, #24
 800bb6c:	46bd      	mov	sp, r7
 800bb6e:	bd80      	pop	{r7, pc}

0800bb70 <sequence_step_enabled>:

VL53L0X_Error sequence_step_enabled(VL53L0X_DEV Dev,
	VL53L0X_SequenceStepId SequenceStepId, uint8_t SequenceConfig,
	uint8_t *pSequenceStepEnabled)
{
 800bb70:	b480      	push	{r7}
 800bb72:	b087      	sub	sp, #28
 800bb74:	af00      	add	r7, sp, #0
 800bb76:	60f8      	str	r0, [r7, #12]
 800bb78:	607b      	str	r3, [r7, #4]
 800bb7a:	460b      	mov	r3, r1
 800bb7c:	72fb      	strb	r3, [r7, #11]
 800bb7e:	4613      	mov	r3, r2
 800bb80:	72bb      	strb	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800bb82:	2300      	movs	r3, #0
 800bb84:	75fb      	strb	r3, [r7, #23]
	*pSequenceStepEnabled = 0;
 800bb86:	687b      	ldr	r3, [r7, #4]
 800bb88:	2200      	movs	r2, #0
 800bb8a:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_START("");

	switch (SequenceStepId) {
 800bb8c:	7afb      	ldrb	r3, [r7, #11]
 800bb8e:	2b04      	cmp	r3, #4
 800bb90:	d836      	bhi.n	800bc00 <sequence_step_enabled+0x90>
 800bb92:	a201      	add	r2, pc, #4	; (adr r2, 800bb98 <sequence_step_enabled+0x28>)
 800bb94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bb98:	0800bbad 	.word	0x0800bbad
 800bb9c:	0800bbbf 	.word	0x0800bbbf
 800bba0:	0800bbd1 	.word	0x0800bbd1
 800bba4:	0800bbe3 	.word	0x0800bbe3
 800bba8:	0800bbf5 	.word	0x0800bbf5
	case VL53L0X_SEQUENCESTEP_TCC:
		*pSequenceStepEnabled = (SequenceConfig & 0x10) >> 4;
 800bbac:	7abb      	ldrb	r3, [r7, #10]
 800bbae:	111b      	asrs	r3, r3, #4
 800bbb0:	b2db      	uxtb	r3, r3
 800bbb2:	f003 0301 	and.w	r3, r3, #1
 800bbb6:	b2da      	uxtb	r2, r3
 800bbb8:	687b      	ldr	r3, [r7, #4]
 800bbba:	701a      	strb	r2, [r3, #0]
		break;
 800bbbc:	e022      	b.n	800bc04 <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_DSS:
		*pSequenceStepEnabled = (SequenceConfig & 0x08) >> 3;
 800bbbe:	7abb      	ldrb	r3, [r7, #10]
 800bbc0:	10db      	asrs	r3, r3, #3
 800bbc2:	b2db      	uxtb	r3, r3
 800bbc4:	f003 0301 	and.w	r3, r3, #1
 800bbc8:	b2da      	uxtb	r2, r3
 800bbca:	687b      	ldr	r3, [r7, #4]
 800bbcc:	701a      	strb	r2, [r3, #0]
		break;
 800bbce:	e019      	b.n	800bc04 <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_MSRC:
		*pSequenceStepEnabled = (SequenceConfig & 0x04) >> 2;
 800bbd0:	7abb      	ldrb	r3, [r7, #10]
 800bbd2:	109b      	asrs	r3, r3, #2
 800bbd4:	b2db      	uxtb	r3, r3
 800bbd6:	f003 0301 	and.w	r3, r3, #1
 800bbda:	b2da      	uxtb	r2, r3
 800bbdc:	687b      	ldr	r3, [r7, #4]
 800bbde:	701a      	strb	r2, [r3, #0]
		break;
 800bbe0:	e010      	b.n	800bc04 <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_PRE_RANGE:
		*pSequenceStepEnabled = (SequenceConfig & 0x40) >> 6;
 800bbe2:	7abb      	ldrb	r3, [r7, #10]
 800bbe4:	119b      	asrs	r3, r3, #6
 800bbe6:	b2db      	uxtb	r3, r3
 800bbe8:	f003 0301 	and.w	r3, r3, #1
 800bbec:	b2da      	uxtb	r2, r3
 800bbee:	687b      	ldr	r3, [r7, #4]
 800bbf0:	701a      	strb	r2, [r3, #0]
		break;
 800bbf2:	e007      	b.n	800bc04 <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
		*pSequenceStepEnabled = (SequenceConfig & 0x80) >> 7;
 800bbf4:	7abb      	ldrb	r3, [r7, #10]
 800bbf6:	09db      	lsrs	r3, r3, #7
 800bbf8:	b2da      	uxtb	r2, r3
 800bbfa:	687b      	ldr	r3, [r7, #4]
 800bbfc:	701a      	strb	r2, [r3, #0]
		break;
 800bbfe:	e001      	b.n	800bc04 <sequence_step_enabled+0x94>
	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800bc00:	23fc      	movs	r3, #252	; 0xfc
 800bc02:	75fb      	strb	r3, [r7, #23]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800bc04:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800bc08:	4618      	mov	r0, r3
 800bc0a:	371c      	adds	r7, #28
 800bc0c:	46bd      	mov	sp, r7
 800bc0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc12:	4770      	bx	lr

0800bc14 <VL53L0X_GetSequenceStepEnables>:
	return Status;
}

VL53L0X_Error VL53L0X_GetSequenceStepEnables(VL53L0X_DEV Dev,
	VL53L0X_SchedulerSequenceSteps_t *pSchedulerSequenceSteps)
{
 800bc14:	b580      	push	{r7, lr}
 800bc16:	b084      	sub	sp, #16
 800bc18:	af00      	add	r7, sp, #0
 800bc1a:	6078      	str	r0, [r7, #4]
 800bc1c:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800bc1e:	2300      	movs	r3, #0
 800bc20:	73fb      	strb	r3, [r7, #15]
	uint8_t SequenceConfig = 0;
 800bc22:	2300      	movs	r3, #0
 800bc24:	73bb      	strb	r3, [r7, #14]
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 800bc26:	f107 030e 	add.w	r3, r7, #14
 800bc2a:	461a      	mov	r2, r3
 800bc2c:	2101      	movs	r1, #1
 800bc2e:	6878      	ldr	r0, [r7, #4]
 800bc30:	f004 fa30 	bl	8010094 <VL53L0X_RdByte>
 800bc34:	4603      	mov	r3, r0
 800bc36:	73fb      	strb	r3, [r7, #15]
		&SequenceConfig);

	if (Status == VL53L0X_ERROR_NONE) {
 800bc38:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bc3c:	2b00      	cmp	r3, #0
 800bc3e:	d107      	bne.n	800bc50 <VL53L0X_GetSequenceStepEnables+0x3c>
		Status = sequence_step_enabled(Dev,
 800bc40:	7bba      	ldrb	r2, [r7, #14]
 800bc42:	683b      	ldr	r3, [r7, #0]
 800bc44:	2100      	movs	r1, #0
 800bc46:	6878      	ldr	r0, [r7, #4]
 800bc48:	f7ff ff92 	bl	800bb70 <sequence_step_enabled>
 800bc4c:	4603      	mov	r3, r0
 800bc4e:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_TCC, SequenceConfig,
			&pSchedulerSequenceSteps->TccOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 800bc50:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bc54:	2b00      	cmp	r3, #0
 800bc56:	d108      	bne.n	800bc6a <VL53L0X_GetSequenceStepEnables+0x56>
		Status = sequence_step_enabled(Dev,
 800bc58:	7bba      	ldrb	r2, [r7, #14]
 800bc5a:	683b      	ldr	r3, [r7, #0]
 800bc5c:	3302      	adds	r3, #2
 800bc5e:	2101      	movs	r1, #1
 800bc60:	6878      	ldr	r0, [r7, #4]
 800bc62:	f7ff ff85 	bl	800bb70 <sequence_step_enabled>
 800bc66:	4603      	mov	r3, r0
 800bc68:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_DSS, SequenceConfig,
			&pSchedulerSequenceSteps->DssOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 800bc6a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bc6e:	2b00      	cmp	r3, #0
 800bc70:	d108      	bne.n	800bc84 <VL53L0X_GetSequenceStepEnables+0x70>
		Status = sequence_step_enabled(Dev,
 800bc72:	7bba      	ldrb	r2, [r7, #14]
 800bc74:	683b      	ldr	r3, [r7, #0]
 800bc76:	3301      	adds	r3, #1
 800bc78:	2102      	movs	r1, #2
 800bc7a:	6878      	ldr	r0, [r7, #4]
 800bc7c:	f7ff ff78 	bl	800bb70 <sequence_step_enabled>
 800bc80:	4603      	mov	r3, r0
 800bc82:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_MSRC, SequenceConfig,
			&pSchedulerSequenceSteps->MsrcOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 800bc84:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bc88:	2b00      	cmp	r3, #0
 800bc8a:	d108      	bne.n	800bc9e <VL53L0X_GetSequenceStepEnables+0x8a>
		Status = sequence_step_enabled(Dev,
 800bc8c:	7bba      	ldrb	r2, [r7, #14]
 800bc8e:	683b      	ldr	r3, [r7, #0]
 800bc90:	3303      	adds	r3, #3
 800bc92:	2103      	movs	r1, #3
 800bc94:	6878      	ldr	r0, [r7, #4]
 800bc96:	f7ff ff6b 	bl	800bb70 <sequence_step_enabled>
 800bc9a:	4603      	mov	r3, r0
 800bc9c:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_PRE_RANGE, SequenceConfig,
			&pSchedulerSequenceSteps->PreRangeOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 800bc9e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bca2:	2b00      	cmp	r3, #0
 800bca4:	d108      	bne.n	800bcb8 <VL53L0X_GetSequenceStepEnables+0xa4>
		Status = sequence_step_enabled(Dev,
 800bca6:	7bba      	ldrb	r2, [r7, #14]
 800bca8:	683b      	ldr	r3, [r7, #0]
 800bcaa:	3304      	adds	r3, #4
 800bcac:	2104      	movs	r1, #4
 800bcae:	6878      	ldr	r0, [r7, #4]
 800bcb0:	f7ff ff5e 	bl	800bb70 <sequence_step_enabled>
 800bcb4:	4603      	mov	r3, r0
 800bcb6:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_FINAL_RANGE, SequenceConfig,
			&pSchedulerSequenceSteps->FinalRangeOn);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800bcb8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800bcbc:	4618      	mov	r0, r3
 800bcbe:	3710      	adds	r7, #16
 800bcc0:	46bd      	mov	sp, r7
 800bcc2:	bd80      	pop	{r7, pc}

0800bcc4 <VL53L0X_GetInterMeasurementPeriodMilliSeconds>:
	return Status;
}

VL53L0X_Error VL53L0X_GetInterMeasurementPeriodMilliSeconds(VL53L0X_DEV Dev,
	uint32_t *pInterMeasurementPeriodMilliSeconds)
{
 800bcc4:	b580      	push	{r7, lr}
 800bcc6:	b084      	sub	sp, #16
 800bcc8:	af00      	add	r7, sp, #0
 800bcca:	6078      	str	r0, [r7, #4]
 800bccc:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800bcce:	2300      	movs	r3, #0
 800bcd0:	73fb      	strb	r3, [r7, #15]
	uint16_t osc_calibrate_val;
	uint32_t IMPeriodMilliSeconds;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdWord(Dev, VL53L0X_REG_OSC_CALIBRATE_VAL,
 800bcd2:	f107 030c 	add.w	r3, r7, #12
 800bcd6:	461a      	mov	r2, r3
 800bcd8:	21f8      	movs	r1, #248	; 0xf8
 800bcda:	6878      	ldr	r0, [r7, #4]
 800bcdc:	f004 fa04 	bl	80100e8 <VL53L0X_RdWord>
 800bce0:	4603      	mov	r3, r0
 800bce2:	73fb      	strb	r3, [r7, #15]
		&osc_calibrate_val);

	if (Status == VL53L0X_ERROR_NONE) {
 800bce4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bce8:	2b00      	cmp	r3, #0
 800bcea:	d108      	bne.n	800bcfe <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x3a>
		Status = VL53L0X_RdDWord(Dev,
 800bcec:	f107 0308 	add.w	r3, r7, #8
 800bcf0:	461a      	mov	r2, r3
 800bcf2:	2104      	movs	r1, #4
 800bcf4:	6878      	ldr	r0, [r7, #4]
 800bcf6:	f004 fa2f 	bl	8010158 <VL53L0X_RdDWord>
 800bcfa:	4603      	mov	r3, r0
 800bcfc:	73fb      	strb	r3, [r7, #15]
		VL53L0X_REG_SYSTEM_INTERMEASUREMENT_PERIOD,
			&IMPeriodMilliSeconds);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800bcfe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bd02:	2b00      	cmp	r3, #0
 800bd04:	d10c      	bne.n	800bd20 <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x5c>
		if (osc_calibrate_val != 0) {
 800bd06:	89bb      	ldrh	r3, [r7, #12]
 800bd08:	2b00      	cmp	r3, #0
 800bd0a:	d005      	beq.n	800bd18 <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x54>
			*pInterMeasurementPeriodMilliSeconds =
				IMPeriodMilliSeconds / osc_calibrate_val;
 800bd0c:	68bb      	ldr	r3, [r7, #8]
 800bd0e:	89ba      	ldrh	r2, [r7, #12]
 800bd10:	fbb3 f2f2 	udiv	r2, r3, r2
			*pInterMeasurementPeriodMilliSeconds =
 800bd14:	683b      	ldr	r3, [r7, #0]
 800bd16:	601a      	str	r2, [r3, #0]
		}
		VL53L0X_SETPARAMETERFIELD(Dev,
 800bd18:	683b      	ldr	r3, [r7, #0]
 800bd1a:	681a      	ldr	r2, [r3, #0]
 800bd1c:	687b      	ldr	r3, [r7, #4]
 800bd1e:	619a      	str	r2, [r3, #24]
			InterMeasurementPeriodMilliSeconds,
			*pInterMeasurementPeriodMilliSeconds);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800bd20:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800bd24:	4618      	mov	r0, r3
 800bd26:	3710      	adds	r7, #16
 800bd28:	46bd      	mov	sp, r7
 800bd2a:	bd80      	pop	{r7, pc}

0800bd2c <VL53L0X_GetXTalkCompensationEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_GetXTalkCompensationEnable(VL53L0X_DEV Dev,
	uint8_t *pXTalkCompensationEnable)
{
 800bd2c:	b480      	push	{r7}
 800bd2e:	b085      	sub	sp, #20
 800bd30:	af00      	add	r7, sp, #0
 800bd32:	6078      	str	r0, [r7, #4]
 800bd34:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800bd36:	2300      	movs	r3, #0
 800bd38:	73fb      	strb	r3, [r7, #15]
	uint8_t Temp8;
	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationEnable, Temp8);
 800bd3a:	687b      	ldr	r3, [r7, #4]
 800bd3c:	7f1b      	ldrb	r3, [r3, #28]
 800bd3e:	73bb      	strb	r3, [r7, #14]
	*pXTalkCompensationEnable = Temp8;
 800bd40:	683b      	ldr	r3, [r7, #0]
 800bd42:	7bba      	ldrb	r2, [r7, #14]
 800bd44:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 800bd46:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800bd4a:	4618      	mov	r0, r3
 800bd4c:	3714      	adds	r7, #20
 800bd4e:	46bd      	mov	sp, r7
 800bd50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd54:	4770      	bx	lr

0800bd56 <VL53L0X_GetXTalkCompensationRateMegaCps>:
	return Status;
}

VL53L0X_Error VL53L0X_GetXTalkCompensationRateMegaCps(VL53L0X_DEV Dev,
	FixPoint1616_t *pXTalkCompensationRateMegaCps)
{
 800bd56:	b580      	push	{r7, lr}
 800bd58:	b086      	sub	sp, #24
 800bd5a:	af00      	add	r7, sp, #0
 800bd5c:	6078      	str	r0, [r7, #4]
 800bd5e:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800bd60:	2300      	movs	r3, #0
 800bd62:	75fb      	strb	r3, [r7, #23]
	uint16_t Value;
	FixPoint1616_t TempFix1616;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdWord(Dev,
 800bd64:	f107 030e 	add.w	r3, r7, #14
 800bd68:	461a      	mov	r2, r3
 800bd6a:	2120      	movs	r1, #32
 800bd6c:	6878      	ldr	r0, [r7, #4]
 800bd6e:	f004 f9bb 	bl	80100e8 <VL53L0X_RdWord>
 800bd72:	4603      	mov	r3, r0
 800bd74:	75fb      	strb	r3, [r7, #23]
	VL53L0X_REG_CROSSTALK_COMPENSATION_PEAK_RATE_MCPS, (uint16_t *)&Value);
	if (Status == VL53L0X_ERROR_NONE) {
 800bd76:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800bd7a:	2b00      	cmp	r3, #0
 800bd7c:	d118      	bne.n	800bdb0 <VL53L0X_GetXTalkCompensationRateMegaCps+0x5a>
		if (Value == 0) {
 800bd7e:	89fb      	ldrh	r3, [r7, #14]
 800bd80:	2b00      	cmp	r3, #0
 800bd82:	d109      	bne.n	800bd98 <VL53L0X_GetXTalkCompensationRateMegaCps+0x42>
			/* the Xtalk is disabled return value from memory */
			VL53L0X_GETPARAMETERFIELD(Dev,
 800bd84:	687b      	ldr	r3, [r7, #4]
 800bd86:	6a1b      	ldr	r3, [r3, #32]
 800bd88:	613b      	str	r3, [r7, #16]
				XTalkCompensationRateMegaCps, TempFix1616);
			*pXTalkCompensationRateMegaCps = TempFix1616;
 800bd8a:	683b      	ldr	r3, [r7, #0]
 800bd8c:	693a      	ldr	r2, [r7, #16]
 800bd8e:	601a      	str	r2, [r3, #0]
			VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 800bd90:	687b      	ldr	r3, [r7, #4]
 800bd92:	2200      	movs	r2, #0
 800bd94:	771a      	strb	r2, [r3, #28]
 800bd96:	e00b      	b.n	800bdb0 <VL53L0X_GetXTalkCompensationRateMegaCps+0x5a>
				0);
		} else {
			TempFix1616 = VL53L0X_FIXPOINT313TOFIXPOINT1616(Value);
 800bd98:	89fb      	ldrh	r3, [r7, #14]
 800bd9a:	00db      	lsls	r3, r3, #3
 800bd9c:	613b      	str	r3, [r7, #16]
			*pXTalkCompensationRateMegaCps = TempFix1616;
 800bd9e:	683b      	ldr	r3, [r7, #0]
 800bda0:	693a      	ldr	r2, [r7, #16]
 800bda2:	601a      	str	r2, [r3, #0]
			VL53L0X_SETPARAMETERFIELD(Dev,
 800bda4:	687b      	ldr	r3, [r7, #4]
 800bda6:	693a      	ldr	r2, [r7, #16]
 800bda8:	621a      	str	r2, [r3, #32]
				XTalkCompensationRateMegaCps, TempFix1616);
			VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 800bdaa:	687b      	ldr	r3, [r7, #4]
 800bdac:	2201      	movs	r2, #1
 800bdae:	771a      	strb	r2, [r3, #28]
				1);
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800bdb0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800bdb4:	4618      	mov	r0, r3
 800bdb6:	3718      	adds	r7, #24
 800bdb8:	46bd      	mov	sp, r7
 800bdba:	bd80      	pop	{r7, pc}

0800bdbc <VL53L0X_SetLimitCheckEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_SetLimitCheckEnable(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	uint8_t LimitCheckEnable)
{
 800bdbc:	b580      	push	{r7, lr}
 800bdbe:	b086      	sub	sp, #24
 800bdc0:	af00      	add	r7, sp, #0
 800bdc2:	6078      	str	r0, [r7, #4]
 800bdc4:	460b      	mov	r3, r1
 800bdc6:	807b      	strh	r3, [r7, #2]
 800bdc8:	4613      	mov	r3, r2
 800bdca:	707b      	strb	r3, [r7, #1]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800bdcc:	2300      	movs	r3, #0
 800bdce:	75fb      	strb	r3, [r7, #23]
	FixPoint1616_t TempFix1616 = 0;
 800bdd0:	2300      	movs	r3, #0
 800bdd2:	613b      	str	r3, [r7, #16]
	uint8_t LimitCheckEnableInt = 0;
 800bdd4:	2300      	movs	r3, #0
 800bdd6:	73fb      	strb	r3, [r7, #15]
	uint8_t LimitCheckDisable = 0;
 800bdd8:	2300      	movs	r3, #0
 800bdda:	73bb      	strb	r3, [r7, #14]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	if (LimitCheckId >= VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS) {
 800bddc:	887b      	ldrh	r3, [r7, #2]
 800bdde:	2b05      	cmp	r3, #5
 800bde0:	d902      	bls.n	800bde8 <VL53L0X_SetLimitCheckEnable+0x2c>
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800bde2:	23fc      	movs	r3, #252	; 0xfc
 800bde4:	75fb      	strb	r3, [r7, #23]
 800bde6:	e05b      	b.n	800bea0 <VL53L0X_SetLimitCheckEnable+0xe4>
	} else {
		if (LimitCheckEnable == 0) {
 800bde8:	787b      	ldrb	r3, [r7, #1]
 800bdea:	2b00      	cmp	r3, #0
 800bdec:	d106      	bne.n	800bdfc <VL53L0X_SetLimitCheckEnable+0x40>
			TempFix1616 = 0;
 800bdee:	2300      	movs	r3, #0
 800bdf0:	613b      	str	r3, [r7, #16]
			LimitCheckEnableInt = 0;
 800bdf2:	2300      	movs	r3, #0
 800bdf4:	73fb      	strb	r3, [r7, #15]
			LimitCheckDisable = 1;
 800bdf6:	2301      	movs	r3, #1
 800bdf8:	73bb      	strb	r3, [r7, #14]
 800bdfa:	e00a      	b.n	800be12 <VL53L0X_SetLimitCheckEnable+0x56>

		} else {
			VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 800bdfc:	887b      	ldrh	r3, [r7, #2]
 800bdfe:	687a      	ldr	r2, [r7, #4]
 800be00:	330c      	adds	r3, #12
 800be02:	009b      	lsls	r3, r3, #2
 800be04:	4413      	add	r3, r2
 800be06:	685b      	ldr	r3, [r3, #4]
 800be08:	613b      	str	r3, [r7, #16]
				LimitCheckId, TempFix1616);
			LimitCheckDisable = 0;
 800be0a:	2300      	movs	r3, #0
 800be0c:	73bb      	strb	r3, [r7, #14]
			/* this to be sure to have either 0 or 1 */
			LimitCheckEnableInt = 1;
 800be0e:	2301      	movs	r3, #1
 800be10:	73fb      	strb	r3, [r7, #15]
		}

		switch (LimitCheckId) {
 800be12:	887b      	ldrh	r3, [r7, #2]
 800be14:	2b05      	cmp	r3, #5
 800be16:	d841      	bhi.n	800be9c <VL53L0X_SetLimitCheckEnable+0xe0>
 800be18:	a201      	add	r2, pc, #4	; (adr r2, 800be20 <VL53L0X_SetLimitCheckEnable+0x64>)
 800be1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800be1e:	bf00      	nop
 800be20:	0800be39 	.word	0x0800be39
 800be24:	0800be43 	.word	0x0800be43
 800be28:	0800be59 	.word	0x0800be59
 800be2c:	0800be63 	.word	0x0800be63
 800be30:	0800be6d 	.word	0x0800be6d
 800be34:	0800be85 	.word	0x0800be85

		case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 800be38:	687b      	ldr	r3, [r7, #4]
 800be3a:	7bfa      	ldrb	r2, [r7, #15]
 800be3c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				LimitCheckEnableInt);

			break;
 800be40:	e02e      	b.n	800bea0 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:

			Status = VL53L0X_WrWord(Dev,
			VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(TempFix1616));
 800be42:	693b      	ldr	r3, [r7, #16]
 800be44:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 800be46:	b29b      	uxth	r3, r3
 800be48:	461a      	mov	r2, r3
 800be4a:	2144      	movs	r1, #68	; 0x44
 800be4c:	6878      	ldr	r0, [r7, #4]
 800be4e:	f004 f8c3 	bl	800ffd8 <VL53L0X_WrWord>
 800be52:	4603      	mov	r3, r0
 800be54:	75fb      	strb	r3, [r7, #23]

			break;
 800be56:	e023      	b.n	800bea0 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 800be58:	687b      	ldr	r3, [r7, #4]
 800be5a:	7bfa      	ldrb	r2, [r7, #15]
 800be5c:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				LimitCheckEnableInt);

			break;
 800be60:	e01e      	b.n	800bea0 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 800be62:	687b      	ldr	r3, [r7, #4]
 800be64:	7bfa      	ldrb	r2, [r7, #15]
 800be66:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				LimitCheckEnableInt);

			break;
 800be6a:	e019      	b.n	800bea0 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:

			Temp8 = (uint8_t)(LimitCheckDisable << 1);
 800be6c:	7bbb      	ldrb	r3, [r7, #14]
 800be6e:	005b      	lsls	r3, r3, #1
 800be70:	737b      	strb	r3, [r7, #13]
			Status = VL53L0X_UpdateByte(Dev,
 800be72:	7b7b      	ldrb	r3, [r7, #13]
 800be74:	22fe      	movs	r2, #254	; 0xfe
 800be76:	2160      	movs	r1, #96	; 0x60
 800be78:	6878      	ldr	r0, [r7, #4]
 800be7a:	f004 f8d7 	bl	801002c <VL53L0X_UpdateByte>
 800be7e:	4603      	mov	r3, r0
 800be80:	75fb      	strb	r3, [r7, #23]
				VL53L0X_REG_MSRC_CONFIG_CONTROL,
				0xFE, Temp8);

			break;
 800be82:	e00d      	b.n	800bea0 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:

			Temp8 = (uint8_t)(LimitCheckDisable << 4);
 800be84:	7bbb      	ldrb	r3, [r7, #14]
 800be86:	011b      	lsls	r3, r3, #4
 800be88:	737b      	strb	r3, [r7, #13]
			Status = VL53L0X_UpdateByte(Dev,
 800be8a:	7b7b      	ldrb	r3, [r7, #13]
 800be8c:	22ef      	movs	r2, #239	; 0xef
 800be8e:	2160      	movs	r1, #96	; 0x60
 800be90:	6878      	ldr	r0, [r7, #4]
 800be92:	f004 f8cb 	bl	801002c <VL53L0X_UpdateByte>
 800be96:	4603      	mov	r3, r0
 800be98:	75fb      	strb	r3, [r7, #23]
				VL53L0X_REG_MSRC_CONFIG_CONTROL,
				0xEF, Temp8);

			break;
 800be9a:	e001      	b.n	800bea0 <VL53L0X_SetLimitCheckEnable+0xe4>


		default:
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 800be9c:	23fc      	movs	r3, #252	; 0xfc
 800be9e:	75fb      	strb	r3, [r7, #23]

		}

	}

	if (Status == VL53L0X_ERROR_NONE) {
 800bea0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800bea4:	2b00      	cmp	r3, #0
 800bea6:	d10f      	bne.n	800bec8 <VL53L0X_SetLimitCheckEnable+0x10c>
		if (LimitCheckEnable == 0) {
 800bea8:	787b      	ldrb	r3, [r7, #1]
 800beaa:	2b00      	cmp	r3, #0
 800beac:	d106      	bne.n	800bebc <VL53L0X_SetLimitCheckEnable+0x100>
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 800beae:	887b      	ldrh	r3, [r7, #2]
 800beb0:	687a      	ldr	r2, [r7, #4]
 800beb2:	4413      	add	r3, r2
 800beb4:	2200      	movs	r2, #0
 800beb6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 800beba:	e005      	b.n	800bec8 <VL53L0X_SetLimitCheckEnable+0x10c>
				LimitCheckId, 0);
		} else {
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 800bebc:	887b      	ldrh	r3, [r7, #2]
 800bebe:	687a      	ldr	r2, [r7, #4]
 800bec0:	4413      	add	r3, r2
 800bec2:	2201      	movs	r2, #1
 800bec4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
				LimitCheckId, 1);
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800bec8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800becc:	4618      	mov	r0, r3
 800bece:	3718      	adds	r7, #24
 800bed0:	46bd      	mov	sp, r7
 800bed2:	bd80      	pop	{r7, pc}

0800bed4 <VL53L0X_GetLimitCheckEnable>:

VL53L0X_Error VL53L0X_GetLimitCheckEnable(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	uint8_t *pLimitCheckEnable)
{
 800bed4:	b480      	push	{r7}
 800bed6:	b087      	sub	sp, #28
 800bed8:	af00      	add	r7, sp, #0
 800beda:	60f8      	str	r0, [r7, #12]
 800bedc:	460b      	mov	r3, r1
 800bede:	607a      	str	r2, [r7, #4]
 800bee0:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800bee2:	2300      	movs	r3, #0
 800bee4:	75fb      	strb	r3, [r7, #23]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	if (LimitCheckId >= VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS) {
 800bee6:	897b      	ldrh	r3, [r7, #10]
 800bee8:	2b05      	cmp	r3, #5
 800beea:	d905      	bls.n	800bef8 <VL53L0X_GetLimitCheckEnable+0x24>
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800beec:	23fc      	movs	r3, #252	; 0xfc
 800beee:	75fb      	strb	r3, [r7, #23]
		*pLimitCheckEnable = 0;
 800bef0:	687b      	ldr	r3, [r7, #4]
 800bef2:	2200      	movs	r2, #0
 800bef4:	701a      	strb	r2, [r3, #0]
 800bef6:	e008      	b.n	800bf0a <VL53L0X_GetLimitCheckEnable+0x36>
	} else {
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 800bef8:	897b      	ldrh	r3, [r7, #10]
 800befa:	68fa      	ldr	r2, [r7, #12]
 800befc:	4413      	add	r3, r2
 800befe:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bf02:	75bb      	strb	r3, [r7, #22]
			LimitCheckId, Temp8);
		*pLimitCheckEnable = Temp8;
 800bf04:	687b      	ldr	r3, [r7, #4]
 800bf06:	7dba      	ldrb	r2, [r7, #22]
 800bf08:	701a      	strb	r2, [r3, #0]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800bf0a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800bf0e:	4618      	mov	r0, r3
 800bf10:	371c      	adds	r7, #28
 800bf12:	46bd      	mov	sp, r7
 800bf14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf18:	4770      	bx	lr
	...

0800bf1c <VL53L0X_SetLimitCheckValue>:

VL53L0X_Error VL53L0X_SetLimitCheckValue(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	FixPoint1616_t LimitCheckValue)
{
 800bf1c:	b580      	push	{r7, lr}
 800bf1e:	b086      	sub	sp, #24
 800bf20:	af00      	add	r7, sp, #0
 800bf22:	60f8      	str	r0, [r7, #12]
 800bf24:	460b      	mov	r3, r1
 800bf26:	607a      	str	r2, [r7, #4]
 800bf28:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800bf2a:	2300      	movs	r3, #0
 800bf2c:	75fb      	strb	r3, [r7, #23]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksEnable, LimitCheckId,
 800bf2e:	897b      	ldrh	r3, [r7, #10]
 800bf30:	68fa      	ldr	r2, [r7, #12]
 800bf32:	4413      	add	r3, r2
 800bf34:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bf38:	75bb      	strb	r3, [r7, #22]
		Temp8);

	if (Temp8 == 0) { /* disabled write only internal value */
 800bf3a:	7dbb      	ldrb	r3, [r7, #22]
 800bf3c:	2b00      	cmp	r3, #0
 800bf3e:	d107      	bne.n	800bf50 <VL53L0X_SetLimitCheckValue+0x34>
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 800bf40:	897b      	ldrh	r3, [r7, #10]
 800bf42:	68fa      	ldr	r2, [r7, #12]
 800bf44:	330c      	adds	r3, #12
 800bf46:	009b      	lsls	r3, r3, #2
 800bf48:	4413      	add	r3, r2
 800bf4a:	687a      	ldr	r2, [r7, #4]
 800bf4c:	605a      	str	r2, [r3, #4]
 800bf4e:	e040      	b.n	800bfd2 <VL53L0X_SetLimitCheckValue+0xb6>
			LimitCheckId, LimitCheckValue);
	} else {

		switch (LimitCheckId) {
 800bf50:	897b      	ldrh	r3, [r7, #10]
 800bf52:	2b05      	cmp	r3, #5
 800bf54:	d830      	bhi.n	800bfb8 <VL53L0X_SetLimitCheckValue+0x9c>
 800bf56:	a201      	add	r2, pc, #4	; (adr r2, 800bf5c <VL53L0X_SetLimitCheckValue+0x40>)
 800bf58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bf5c:	0800bf75 	.word	0x0800bf75
 800bf60:	0800bf7d 	.word	0x0800bf7d
 800bf64:	0800bf93 	.word	0x0800bf93
 800bf68:	0800bf9b 	.word	0x0800bf9b
 800bf6c:	0800bfa3 	.word	0x0800bfa3
 800bf70:	0800bfa3 	.word	0x0800bfa3

		case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 800bf74:	68fb      	ldr	r3, [r7, #12]
 800bf76:	687a      	ldr	r2, [r7, #4]
 800bf78:	635a      	str	r2, [r3, #52]	; 0x34
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				LimitCheckValue);
			break;
 800bf7a:	e01f      	b.n	800bfbc <VL53L0X_SetLimitCheckValue+0xa0>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:

			Status = VL53L0X_WrWord(Dev,
			VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(
 800bf7c:	687b      	ldr	r3, [r7, #4]
 800bf7e:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 800bf80:	b29b      	uxth	r3, r3
 800bf82:	461a      	mov	r2, r3
 800bf84:	2144      	movs	r1, #68	; 0x44
 800bf86:	68f8      	ldr	r0, [r7, #12]
 800bf88:	f004 f826 	bl	800ffd8 <VL53L0X_WrWord>
 800bf8c:	4603      	mov	r3, r0
 800bf8e:	75fb      	strb	r3, [r7, #23]
					LimitCheckValue));

			break;
 800bf90:	e014      	b.n	800bfbc <VL53L0X_SetLimitCheckValue+0xa0>

		case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 800bf92:	68fb      	ldr	r3, [r7, #12]
 800bf94:	687a      	ldr	r2, [r7, #4]
 800bf96:	63da      	str	r2, [r3, #60]	; 0x3c
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				LimitCheckValue);

			break;
 800bf98:	e010      	b.n	800bfbc <VL53L0X_SetLimitCheckValue+0xa0>

		case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 800bf9a:	68fb      	ldr	r3, [r7, #12]
 800bf9c:	687a      	ldr	r2, [r7, #4]
 800bf9e:	641a      	str	r2, [r3, #64]	; 0x40
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				LimitCheckValue);

			break;
 800bfa0:	e00c      	b.n	800bfbc <VL53L0X_SetLimitCheckValue+0xa0>
		case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:
		case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:

			Status = VL53L0X_WrWord(Dev,
				VL53L0X_REG_PRE_RANGE_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(
 800bfa2:	687b      	ldr	r3, [r7, #4]
 800bfa4:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 800bfa6:	b29b      	uxth	r3, r3
 800bfa8:	461a      	mov	r2, r3
 800bfaa:	2164      	movs	r1, #100	; 0x64
 800bfac:	68f8      	ldr	r0, [r7, #12]
 800bfae:	f004 f813 	bl	800ffd8 <VL53L0X_WrWord>
 800bfb2:	4603      	mov	r3, r0
 800bfb4:	75fb      	strb	r3, [r7, #23]
					LimitCheckValue));

			break;
 800bfb6:	e001      	b.n	800bfbc <VL53L0X_SetLimitCheckValue+0xa0>

		default:
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 800bfb8:	23fc      	movs	r3, #252	; 0xfc
 800bfba:	75fb      	strb	r3, [r7, #23]

		}

		if (Status == VL53L0X_ERROR_NONE) {
 800bfbc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800bfc0:	2b00      	cmp	r3, #0
 800bfc2:	d106      	bne.n	800bfd2 <VL53L0X_SetLimitCheckValue+0xb6>
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 800bfc4:	897b      	ldrh	r3, [r7, #10]
 800bfc6:	68fa      	ldr	r2, [r7, #12]
 800bfc8:	330c      	adds	r3, #12
 800bfca:	009b      	lsls	r3, r3, #2
 800bfcc:	4413      	add	r3, r2
 800bfce:	687a      	ldr	r2, [r7, #4]
 800bfd0:	605a      	str	r2, [r3, #4]
				LimitCheckId, LimitCheckValue);
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800bfd2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800bfd6:	4618      	mov	r0, r3
 800bfd8:	3718      	adds	r7, #24
 800bfda:	46bd      	mov	sp, r7
 800bfdc:	bd80      	pop	{r7, pc}
 800bfde:	bf00      	nop

0800bfe0 <VL53L0X_GetLimitCheckValue>:

VL53L0X_Error VL53L0X_GetLimitCheckValue(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	FixPoint1616_t *pLimitCheckValue)
{
 800bfe0:	b580      	push	{r7, lr}
 800bfe2:	b088      	sub	sp, #32
 800bfe4:	af00      	add	r7, sp, #0
 800bfe6:	60f8      	str	r0, [r7, #12]
 800bfe8:	460b      	mov	r3, r1
 800bfea:	607a      	str	r2, [r7, #4]
 800bfec:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800bfee:	2300      	movs	r3, #0
 800bff0:	77fb      	strb	r3, [r7, #31]
	uint8_t EnableZeroValue = 0;
 800bff2:	2300      	movs	r3, #0
 800bff4:	77bb      	strb	r3, [r7, #30]
	uint16_t Temp16;
	FixPoint1616_t TempFix1616;

	LOG_FUNCTION_START("");

	switch (LimitCheckId) {
 800bff6:	897b      	ldrh	r3, [r7, #10]
 800bff8:	2b05      	cmp	r3, #5
 800bffa:	d847      	bhi.n	800c08c <VL53L0X_GetLimitCheckValue+0xac>
 800bffc:	a201      	add	r2, pc, #4	; (adr r2, 800c004 <VL53L0X_GetLimitCheckValue+0x24>)
 800bffe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c002:	bf00      	nop
 800c004:	0800c01d 	.word	0x0800c01d
 800c008:	0800c029 	.word	0x0800c029
 800c00c:	0800c04f 	.word	0x0800c04f
 800c010:	0800c05b 	.word	0x0800c05b
 800c014:	0800c067 	.word	0x0800c067
 800c018:	0800c067 	.word	0x0800c067

	case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 800c01c:	68fb      	ldr	r3, [r7, #12]
 800c01e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c020:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, TempFix1616);
		EnableZeroValue = 0;
 800c022:	2300      	movs	r3, #0
 800c024:	77bb      	strb	r3, [r7, #30]
		break;
 800c026:	e033      	b.n	800c090 <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:
		Status = VL53L0X_RdWord(Dev,
 800c028:	f107 0316 	add.w	r3, r7, #22
 800c02c:	461a      	mov	r2, r3
 800c02e:	2144      	movs	r1, #68	; 0x44
 800c030:	68f8      	ldr	r0, [r7, #12]
 800c032:	f004 f859 	bl	80100e8 <VL53L0X_RdWord>
 800c036:	4603      	mov	r3, r0
 800c038:	77fb      	strb	r3, [r7, #31]
		VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
			&Temp16);
		if (Status == VL53L0X_ERROR_NONE)
 800c03a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800c03e:	2b00      	cmp	r3, #0
 800c040:	d102      	bne.n	800c048 <VL53L0X_GetLimitCheckValue+0x68>
			TempFix1616 = VL53L0X_FIXPOINT97TOFIXPOINT1616(Temp16);
 800c042:	8afb      	ldrh	r3, [r7, #22]
 800c044:	025b      	lsls	r3, r3, #9
 800c046:	61bb      	str	r3, [r7, #24]


		EnableZeroValue = 1;
 800c048:	2301      	movs	r3, #1
 800c04a:	77bb      	strb	r3, [r7, #30]
		break;
 800c04c:	e020      	b.n	800c090 <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 800c04e:	68fb      	ldr	r3, [r7, #12]
 800c050:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c052:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, TempFix1616);
		EnableZeroValue = 0;
 800c054:	2300      	movs	r3, #0
 800c056:	77bb      	strb	r3, [r7, #30]
		break;
 800c058:	e01a      	b.n	800c090 <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 800c05a:	68fb      	ldr	r3, [r7, #12]
 800c05c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c05e:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD, TempFix1616);
		EnableZeroValue = 0;
 800c060:	2300      	movs	r3, #0
 800c062:	77bb      	strb	r3, [r7, #30]
		break;
 800c064:	e014      	b.n	800c090 <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:
	case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:
		Status = VL53L0X_RdWord(Dev,
 800c066:	f107 0316 	add.w	r3, r7, #22
 800c06a:	461a      	mov	r2, r3
 800c06c:	2164      	movs	r1, #100	; 0x64
 800c06e:	68f8      	ldr	r0, [r7, #12]
 800c070:	f004 f83a 	bl	80100e8 <VL53L0X_RdWord>
 800c074:	4603      	mov	r3, r0
 800c076:	77fb      	strb	r3, [r7, #31]
			VL53L0X_REG_PRE_RANGE_MIN_COUNT_RATE_RTN_LIMIT,
			&Temp16);
		if (Status == VL53L0X_ERROR_NONE)
 800c078:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800c07c:	2b00      	cmp	r3, #0
 800c07e:	d102      	bne.n	800c086 <VL53L0X_GetLimitCheckValue+0xa6>
			TempFix1616 = VL53L0X_FIXPOINT97TOFIXPOINT1616(Temp16);
 800c080:	8afb      	ldrh	r3, [r7, #22]
 800c082:	025b      	lsls	r3, r3, #9
 800c084:	61bb      	str	r3, [r7, #24]


		EnableZeroValue = 0;
 800c086:	2300      	movs	r3, #0
 800c088:	77bb      	strb	r3, [r7, #30]
		break;
 800c08a:	e001      	b.n	800c090 <VL53L0X_GetLimitCheckValue+0xb0>

	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800c08c:	23fc      	movs	r3, #252	; 0xfc
 800c08e:	77fb      	strb	r3, [r7, #31]

	}

	if (Status == VL53L0X_ERROR_NONE) {
 800c090:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800c094:	2b00      	cmp	r3, #0
 800c096:	d12a      	bne.n	800c0ee <VL53L0X_GetLimitCheckValue+0x10e>

		if (EnableZeroValue == 1) {
 800c098:	7fbb      	ldrb	r3, [r7, #30]
 800c09a:	2b01      	cmp	r3, #1
 800c09c:	d124      	bne.n	800c0e8 <VL53L0X_GetLimitCheckValue+0x108>

			if (TempFix1616 == 0) {
 800c09e:	69bb      	ldr	r3, [r7, #24]
 800c0a0:	2b00      	cmp	r3, #0
 800c0a2:	d110      	bne.n	800c0c6 <VL53L0X_GetLimitCheckValue+0xe6>
				/* disabled: return value from memory */
				VL53L0X_GETARRAYPARAMETERFIELD(Dev,
 800c0a4:	897b      	ldrh	r3, [r7, #10]
 800c0a6:	68fa      	ldr	r2, [r7, #12]
 800c0a8:	330c      	adds	r3, #12
 800c0aa:	009b      	lsls	r3, r3, #2
 800c0ac:	4413      	add	r3, r2
 800c0ae:	685b      	ldr	r3, [r3, #4]
 800c0b0:	61bb      	str	r3, [r7, #24]
					LimitChecksValue, LimitCheckId,
					TempFix1616);
				*pLimitCheckValue = TempFix1616;
 800c0b2:	687b      	ldr	r3, [r7, #4]
 800c0b4:	69ba      	ldr	r2, [r7, #24]
 800c0b6:	601a      	str	r2, [r3, #0]
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 800c0b8:	897b      	ldrh	r3, [r7, #10]
 800c0ba:	68fa      	ldr	r2, [r7, #12]
 800c0bc:	4413      	add	r3, r2
 800c0be:	2200      	movs	r2, #0
 800c0c0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 800c0c4:	e013      	b.n	800c0ee <VL53L0X_GetLimitCheckValue+0x10e>
					LimitChecksEnable, LimitCheckId, 0);
			} else {
				*pLimitCheckValue = TempFix1616;
 800c0c6:	687b      	ldr	r3, [r7, #4]
 800c0c8:	69ba      	ldr	r2, [r7, #24]
 800c0ca:	601a      	str	r2, [r3, #0]
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 800c0cc:	897b      	ldrh	r3, [r7, #10]
 800c0ce:	68fa      	ldr	r2, [r7, #12]
 800c0d0:	330c      	adds	r3, #12
 800c0d2:	009b      	lsls	r3, r3, #2
 800c0d4:	4413      	add	r3, r2
 800c0d6:	69ba      	ldr	r2, [r7, #24]
 800c0d8:	605a      	str	r2, [r3, #4]
					LimitChecksValue, LimitCheckId,
					TempFix1616);
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 800c0da:	897b      	ldrh	r3, [r7, #10]
 800c0dc:	68fa      	ldr	r2, [r7, #12]
 800c0de:	4413      	add	r3, r2
 800c0e0:	2201      	movs	r2, #1
 800c0e2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 800c0e6:	e002      	b.n	800c0ee <VL53L0X_GetLimitCheckValue+0x10e>
					LimitChecksEnable, LimitCheckId, 1);
			}
		} else {
			*pLimitCheckValue = TempFix1616;
 800c0e8:	687b      	ldr	r3, [r7, #4]
 800c0ea:	69ba      	ldr	r2, [r7, #24]
 800c0ec:	601a      	str	r2, [r3, #0]
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800c0ee:	f997 301f 	ldrsb.w	r3, [r7, #31]

}
 800c0f2:	4618      	mov	r0, r3
 800c0f4:	3720      	adds	r7, #32
 800c0f6:	46bd      	mov	sp, r7
 800c0f8:	bd80      	pop	{r7, pc}
 800c0fa:	bf00      	nop

0800c0fc <VL53L0X_GetWrapAroundCheckEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_GetWrapAroundCheckEnable(VL53L0X_DEV Dev,
	uint8_t *pWrapAroundCheckEnable)
{
 800c0fc:	b580      	push	{r7, lr}
 800c0fe:	b084      	sub	sp, #16
 800c100:	af00      	add	r7, sp, #0
 800c102:	6078      	str	r0, [r7, #4]
 800c104:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800c106:	2300      	movs	r3, #0
 800c108:	73fb      	strb	r3, [r7, #15]
	uint8_t data;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, &data);
 800c10a:	f107 030e 	add.w	r3, r7, #14
 800c10e:	461a      	mov	r2, r3
 800c110:	2101      	movs	r1, #1
 800c112:	6878      	ldr	r0, [r7, #4]
 800c114:	f003 ffbe 	bl	8010094 <VL53L0X_RdByte>
 800c118:	4603      	mov	r3, r0
 800c11a:	73fb      	strb	r3, [r7, #15]
	if (Status == VL53L0X_ERROR_NONE) {
 800c11c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c120:	2b00      	cmp	r3, #0
 800c122:	d10e      	bne.n	800c142 <VL53L0X_GetWrapAroundCheckEnable+0x46>
		PALDevDataSet(Dev, SequenceConfig, data);
 800c124:	7bba      	ldrb	r2, [r7, #14]
 800c126:	687b      	ldr	r3, [r7, #4]
 800c128:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
		if (data & (0x01 << 7))
 800c12c:	7bbb      	ldrb	r3, [r7, #14]
 800c12e:	b25b      	sxtb	r3, r3
 800c130:	2b00      	cmp	r3, #0
 800c132:	da03      	bge.n	800c13c <VL53L0X_GetWrapAroundCheckEnable+0x40>
			*pWrapAroundCheckEnable = 0x01;
 800c134:	683b      	ldr	r3, [r7, #0]
 800c136:	2201      	movs	r2, #1
 800c138:	701a      	strb	r2, [r3, #0]
 800c13a:	e002      	b.n	800c142 <VL53L0X_GetWrapAroundCheckEnable+0x46>
		else
			*pWrapAroundCheckEnable = 0x00;
 800c13c:	683b      	ldr	r3, [r7, #0]
 800c13e:	2200      	movs	r2, #0
 800c140:	701a      	strb	r2, [r3, #0]
	}
	if (Status == VL53L0X_ERROR_NONE) {
 800c142:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c146:	2b00      	cmp	r3, #0
 800c148:	d104      	bne.n	800c154 <VL53L0X_GetWrapAroundCheckEnable+0x58>
		VL53L0X_SETPARAMETERFIELD(Dev, WrapAroundCheckEnable,
 800c14a:	683b      	ldr	r3, [r7, #0]
 800c14c:	781a      	ldrb	r2, [r3, #0]
 800c14e:	687b      	ldr	r3, [r7, #4]
 800c150:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
			*pWrapAroundCheckEnable);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800c154:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800c158:	4618      	mov	r0, r3
 800c15a:	3710      	adds	r7, #16
 800c15c:	46bd      	mov	sp, r7
 800c15e:	bd80      	pop	{r7, pc}

0800c160 <VL53L0X_PerformSingleMeasurement>:

/* End Group PAL Parameters Functions */

/* Group PAL Measurement Functions */
VL53L0X_Error VL53L0X_PerformSingleMeasurement(VL53L0X_DEV Dev)
{
 800c160:	b580      	push	{r7, lr}
 800c162:	b084      	sub	sp, #16
 800c164:	af00      	add	r7, sp, #0
 800c166:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800c168:	2300      	movs	r3, #0
 800c16a:	73fb      	strb	r3, [r7, #15]
	VL53L0X_DeviceModes DeviceMode;

	LOG_FUNCTION_START("");

	/* Get Current DeviceMode */
	Status = VL53L0X_GetDeviceMode(Dev, &DeviceMode);
 800c16c:	f107 030e 	add.w	r3, r7, #14
 800c170:	4619      	mov	r1, r3
 800c172:	6878      	ldr	r0, [r7, #4]
 800c174:	f7ff fbd2 	bl	800b91c <VL53L0X_GetDeviceMode>
 800c178:	4603      	mov	r3, r0
 800c17a:	73fb      	strb	r3, [r7, #15]

	/* Start immediately to run a single ranging measurement in case of
	 * single ranging or single histogram */
	if (Status == VL53L0X_ERROR_NONE
 800c17c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c180:	2b00      	cmp	r3, #0
 800c182:	d107      	bne.n	800c194 <VL53L0X_PerformSingleMeasurement+0x34>
		&& DeviceMode == VL53L0X_DEVICEMODE_SINGLE_RANGING)
 800c184:	7bbb      	ldrb	r3, [r7, #14]
 800c186:	2b00      	cmp	r3, #0
 800c188:	d104      	bne.n	800c194 <VL53L0X_PerformSingleMeasurement+0x34>
		Status = VL53L0X_StartMeasurement(Dev);
 800c18a:	6878      	ldr	r0, [r7, #4]
 800c18c:	f000 f898 	bl	800c2c0 <VL53L0X_StartMeasurement>
 800c190:	4603      	mov	r3, r0
 800c192:	73fb      	strb	r3, [r7, #15]


	if (Status == VL53L0X_ERROR_NONE)
 800c194:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c198:	2b00      	cmp	r3, #0
 800c19a:	d104      	bne.n	800c1a6 <VL53L0X_PerformSingleMeasurement+0x46>
		Status = VL53L0X_measurement_poll_for_completion(Dev);
 800c19c:	6878      	ldr	r0, [r7, #4]
 800c19e:	f001 fb6f 	bl	800d880 <VL53L0X_measurement_poll_for_completion>
 800c1a2:	4603      	mov	r3, r0
 800c1a4:	73fb      	strb	r3, [r7, #15]


	/* Change PAL State in case of single ranging or single histogram */
	if (Status == VL53L0X_ERROR_NONE
 800c1a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c1aa:	2b00      	cmp	r3, #0
 800c1ac:	d106      	bne.n	800c1bc <VL53L0X_PerformSingleMeasurement+0x5c>
		&& DeviceMode == VL53L0X_DEVICEMODE_SINGLE_RANGING)
 800c1ae:	7bbb      	ldrb	r3, [r7, #14]
 800c1b0:	2b00      	cmp	r3, #0
 800c1b2:	d103      	bne.n	800c1bc <VL53L0X_PerformSingleMeasurement+0x5c>
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_IDLE);
 800c1b4:	687b      	ldr	r3, [r7, #4]
 800c1b6:	2203      	movs	r2, #3
 800c1b8:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132


	LOG_FUNCTION_END(Status);
	return Status;
 800c1bc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800c1c0:	4618      	mov	r0, r3
 800c1c2:	3710      	adds	r7, #16
 800c1c4:	46bd      	mov	sp, r7
 800c1c6:	bd80      	pop	{r7, pc}

0800c1c8 <VL53L0X_PerformRefCalibration>:
	return Status;
}

VL53L0X_Error VL53L0X_PerformRefCalibration(VL53L0X_DEV Dev, uint8_t *pVhvSettings,
	uint8_t *pPhaseCal)
{
 800c1c8:	b580      	push	{r7, lr}
 800c1ca:	b086      	sub	sp, #24
 800c1cc:	af00      	add	r7, sp, #0
 800c1ce:	60f8      	str	r0, [r7, #12]
 800c1d0:	60b9      	str	r1, [r7, #8]
 800c1d2:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800c1d4:	2300      	movs	r3, #0
 800c1d6:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");

	Status = VL53L0X_perform_ref_calibration(Dev, pVhvSettings,
 800c1d8:	2301      	movs	r3, #1
 800c1da:	687a      	ldr	r2, [r7, #4]
 800c1dc:	68b9      	ldr	r1, [r7, #8]
 800c1de:	68f8      	ldr	r0, [r7, #12]
 800c1e0:	f001 fb11 	bl	800d806 <VL53L0X_perform_ref_calibration>
 800c1e4:	4603      	mov	r3, r0
 800c1e6:	75fb      	strb	r3, [r7, #23]
		pPhaseCal, 1);

	LOG_FUNCTION_END(Status);
	return Status;
 800c1e8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800c1ec:	4618      	mov	r0, r3
 800c1ee:	3718      	adds	r7, #24
 800c1f0:	46bd      	mov	sp, r7
 800c1f2:	bd80      	pop	{r7, pc}

0800c1f4 <VL53L0X_CheckAndLoadInterruptSettings>:
	return Status;
}

VL53L0X_Error VL53L0X_CheckAndLoadInterruptSettings(VL53L0X_DEV Dev,
	uint8_t StartNotStopFlag)
{
 800c1f4:	b580      	push	{r7, lr}
 800c1f6:	b086      	sub	sp, #24
 800c1f8:	af00      	add	r7, sp, #0
 800c1fa:	6078      	str	r0, [r7, #4]
 800c1fc:	460b      	mov	r3, r1
 800c1fe:	70fb      	strb	r3, [r7, #3]
	uint8_t InterruptConfig;
	FixPoint1616_t ThresholdLow;
	FixPoint1616_t ThresholdHigh;
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800c200:	2300      	movs	r3, #0
 800c202:	75fb      	strb	r3, [r7, #23]

	InterruptConfig = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 800c204:	687b      	ldr	r3, [r7, #4]
 800c206:	f893 30da 	ldrb.w	r3, [r3, #218]	; 0xda
 800c20a:	75bb      	strb	r3, [r7, #22]
		Pin0GpioFunctionality);

	if ((InterruptConfig ==
 800c20c:	7dbb      	ldrb	r3, [r7, #22]
 800c20e:	2b01      	cmp	r3, #1
 800c210:	d005      	beq.n	800c21e <VL53L0X_CheckAndLoadInterruptSettings+0x2a>
		VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_LOW) ||
 800c212:	7dbb      	ldrb	r3, [r7, #22]
 800c214:	2b02      	cmp	r3, #2
 800c216:	d002      	beq.n	800c21e <VL53L0X_CheckAndLoadInterruptSettings+0x2a>
		(InterruptConfig ==
		VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_HIGH) ||
 800c218:	7dbb      	ldrb	r3, [r7, #22]
 800c21a:	2b03      	cmp	r3, #3
 800c21c:	d147      	bne.n	800c2ae <VL53L0X_CheckAndLoadInterruptSettings+0xba>
		(InterruptConfig ==
		VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_OUT)) {

		Status = VL53L0X_GetInterruptThresholds(Dev,
 800c21e:	f107 030c 	add.w	r3, r7, #12
 800c222:	f107 0210 	add.w	r2, r7, #16
 800c226:	2101      	movs	r1, #1
 800c228:	6878      	ldr	r0, [r7, #4]
 800c22a:	f000 fbc3 	bl	800c9b4 <VL53L0X_GetInterruptThresholds>
 800c22e:	4603      	mov	r3, r0
 800c230:	75fb      	strb	r3, [r7, #23]
			VL53L0X_DEVICEMODE_CONTINUOUS_RANGING,
			&ThresholdLow, &ThresholdHigh);

		if (((ThresholdLow > 255*65536) ||
 800c232:	693b      	ldr	r3, [r7, #16]
 800c234:	f5b3 0f7f 	cmp.w	r3, #16711680	; 0xff0000
 800c238:	d803      	bhi.n	800c242 <VL53L0X_CheckAndLoadInterruptSettings+0x4e>
			(ThresholdHigh > 255*65536)) &&
 800c23a:	68fb      	ldr	r3, [r7, #12]
		if (((ThresholdLow > 255*65536) ||
 800c23c:	f5b3 0f7f 	cmp.w	r3, #16711680	; 0xff0000
 800c240:	d935      	bls.n	800c2ae <VL53L0X_CheckAndLoadInterruptSettings+0xba>
			(ThresholdHigh > 255*65536)) &&
 800c242:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c246:	2b00      	cmp	r3, #0
 800c248:	d131      	bne.n	800c2ae <VL53L0X_CheckAndLoadInterruptSettings+0xba>
			(Status == VL53L0X_ERROR_NONE)) {

			if (StartNotStopFlag != 0) {
 800c24a:	78fb      	ldrb	r3, [r7, #3]
 800c24c:	2b00      	cmp	r3, #0
 800c24e:	d006      	beq.n	800c25e <VL53L0X_CheckAndLoadInterruptSettings+0x6a>
				Status = VL53L0X_load_tuning_settings(Dev,
 800c250:	491a      	ldr	r1, [pc, #104]	; (800c2bc <VL53L0X_CheckAndLoadInterruptSettings+0xc8>)
 800c252:	6878      	ldr	r0, [r7, #4]
 800c254:	f002 ff86 	bl	800f164 <VL53L0X_load_tuning_settings>
 800c258:	4603      	mov	r3, r0
 800c25a:	75fb      	strb	r3, [r7, #23]
 800c25c:	e027      	b.n	800c2ae <VL53L0X_CheckAndLoadInterruptSettings+0xba>
					InterruptThresholdSettings);
			} else {
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x04);
 800c25e:	2204      	movs	r2, #4
 800c260:	21ff      	movs	r1, #255	; 0xff
 800c262:	6878      	ldr	r0, [r7, #4]
 800c264:	f003 fe94 	bl	800ff90 <VL53L0X_WrByte>
 800c268:	4603      	mov	r3, r0
 800c26a:	461a      	mov	r2, r3
 800c26c:	7dfb      	ldrb	r3, [r7, #23]
 800c26e:	4313      	orrs	r3, r2
 800c270:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0x70, 0x00);
 800c272:	2200      	movs	r2, #0
 800c274:	2170      	movs	r1, #112	; 0x70
 800c276:	6878      	ldr	r0, [r7, #4]
 800c278:	f003 fe8a 	bl	800ff90 <VL53L0X_WrByte>
 800c27c:	4603      	mov	r3, r0
 800c27e:	461a      	mov	r2, r3
 800c280:	7dfb      	ldrb	r3, [r7, #23]
 800c282:	4313      	orrs	r3, r2
 800c284:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800c286:	2200      	movs	r2, #0
 800c288:	21ff      	movs	r1, #255	; 0xff
 800c28a:	6878      	ldr	r0, [r7, #4]
 800c28c:	f003 fe80 	bl	800ff90 <VL53L0X_WrByte>
 800c290:	4603      	mov	r3, r0
 800c292:	461a      	mov	r2, r3
 800c294:	7dfb      	ldrb	r3, [r7, #23]
 800c296:	4313      	orrs	r3, r2
 800c298:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 800c29a:	2200      	movs	r2, #0
 800c29c:	2180      	movs	r1, #128	; 0x80
 800c29e:	6878      	ldr	r0, [r7, #4]
 800c2a0:	f003 fe76 	bl	800ff90 <VL53L0X_WrByte>
 800c2a4:	4603      	mov	r3, r0
 800c2a6:	461a      	mov	r2, r3
 800c2a8:	7dfb      	ldrb	r3, [r7, #23]
 800c2aa:	4313      	orrs	r3, r2
 800c2ac:	75fb      	strb	r3, [r7, #23]
		}


	}

	return Status;
 800c2ae:	f997 3017 	ldrsb.w	r3, [r7, #23]

}
 800c2b2:	4618      	mov	r0, r3
 800c2b4:	3718      	adds	r7, #24
 800c2b6:	46bd      	mov	sp, r7
 800c2b8:	bd80      	pop	{r7, pc}
 800c2ba:	bf00      	nop
 800c2bc:	20000100 	.word	0x20000100

0800c2c0 <VL53L0X_StartMeasurement>:


VL53L0X_Error VL53L0X_StartMeasurement(VL53L0X_DEV Dev)
{
 800c2c0:	b580      	push	{r7, lr}
 800c2c2:	b086      	sub	sp, #24
 800c2c4:	af00      	add	r7, sp, #0
 800c2c6:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800c2c8:	2300      	movs	r3, #0
 800c2ca:	75fb      	strb	r3, [r7, #23]
	VL53L0X_DeviceModes DeviceMode;
	uint8_t Byte;
	uint8_t StartStopByte = VL53L0X_REG_SYSRANGE_MODE_START_STOP;
 800c2cc:	2301      	movs	r3, #1
 800c2ce:	73fb      	strb	r3, [r7, #15]
	uint32_t LoopNb;
	LOG_FUNCTION_START("");

	/* Get Current DeviceMode */
	VL53L0X_GetDeviceMode(Dev, &DeviceMode);
 800c2d0:	f107 030e 	add.w	r3, r7, #14
 800c2d4:	4619      	mov	r1, r3
 800c2d6:	6878      	ldr	r0, [r7, #4]
 800c2d8:	f7ff fb20 	bl	800b91c <VL53L0X_GetDeviceMode>

	Status = VL53L0X_WrByte(Dev, 0x80, 0x01);
 800c2dc:	2201      	movs	r2, #1
 800c2de:	2180      	movs	r1, #128	; 0x80
 800c2e0:	6878      	ldr	r0, [r7, #4]
 800c2e2:	f003 fe55 	bl	800ff90 <VL53L0X_WrByte>
 800c2e6:	4603      	mov	r3, r0
 800c2e8:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800c2ea:	2201      	movs	r2, #1
 800c2ec:	21ff      	movs	r1, #255	; 0xff
 800c2ee:	6878      	ldr	r0, [r7, #4]
 800c2f0:	f003 fe4e 	bl	800ff90 <VL53L0X_WrByte>
 800c2f4:	4603      	mov	r3, r0
 800c2f6:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x00, 0x00);
 800c2f8:	2200      	movs	r2, #0
 800c2fa:	2100      	movs	r1, #0
 800c2fc:	6878      	ldr	r0, [r7, #4]
 800c2fe:	f003 fe47 	bl	800ff90 <VL53L0X_WrByte>
 800c302:	4603      	mov	r3, r0
 800c304:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x91, PALDevDataGet(Dev, StopVariable));
 800c306:	687b      	ldr	r3, [r7, #4]
 800c308:	f893 313a 	ldrb.w	r3, [r3, #314]	; 0x13a
 800c30c:	461a      	mov	r2, r3
 800c30e:	2191      	movs	r1, #145	; 0x91
 800c310:	6878      	ldr	r0, [r7, #4]
 800c312:	f003 fe3d 	bl	800ff90 <VL53L0X_WrByte>
 800c316:	4603      	mov	r3, r0
 800c318:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x00, 0x01);
 800c31a:	2201      	movs	r2, #1
 800c31c:	2100      	movs	r1, #0
 800c31e:	6878      	ldr	r0, [r7, #4]
 800c320:	f003 fe36 	bl	800ff90 <VL53L0X_WrByte>
 800c324:	4603      	mov	r3, r0
 800c326:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800c328:	2200      	movs	r2, #0
 800c32a:	21ff      	movs	r1, #255	; 0xff
 800c32c:	6878      	ldr	r0, [r7, #4]
 800c32e:	f003 fe2f 	bl	800ff90 <VL53L0X_WrByte>
 800c332:	4603      	mov	r3, r0
 800c334:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x80, 0x00);
 800c336:	2200      	movs	r2, #0
 800c338:	2180      	movs	r1, #128	; 0x80
 800c33a:	6878      	ldr	r0, [r7, #4]
 800c33c:	f003 fe28 	bl	800ff90 <VL53L0X_WrByte>
 800c340:	4603      	mov	r3, r0
 800c342:	75fb      	strb	r3, [r7, #23]

	switch (DeviceMode) {
 800c344:	7bbb      	ldrb	r3, [r7, #14]
 800c346:	2b03      	cmp	r3, #3
 800c348:	d054      	beq.n	800c3f4 <VL53L0X_StartMeasurement+0x134>
 800c34a:	2b03      	cmp	r3, #3
 800c34c:	dc6c      	bgt.n	800c428 <VL53L0X_StartMeasurement+0x168>
 800c34e:	2b00      	cmp	r3, #0
 800c350:	d002      	beq.n	800c358 <VL53L0X_StartMeasurement+0x98>
 800c352:	2b01      	cmp	r3, #1
 800c354:	d034      	beq.n	800c3c0 <VL53L0X_StartMeasurement+0x100>
 800c356:	e067      	b.n	800c428 <VL53L0X_StartMeasurement+0x168>
	case VL53L0X_DEVICEMODE_SINGLE_RANGING:
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START, 0x01);
 800c358:	2201      	movs	r2, #1
 800c35a:	2100      	movs	r1, #0
 800c35c:	6878      	ldr	r0, [r7, #4]
 800c35e:	f003 fe17 	bl	800ff90 <VL53L0X_WrByte>
 800c362:	4603      	mov	r3, r0
 800c364:	75fb      	strb	r3, [r7, #23]

		Byte = StartStopByte;
 800c366:	7bfb      	ldrb	r3, [r7, #15]
 800c368:	737b      	strb	r3, [r7, #13]
		if (Status == VL53L0X_ERROR_NONE) {
 800c36a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c36e:	2b00      	cmp	r3, #0
 800c370:	d15d      	bne.n	800c42e <VL53L0X_StartMeasurement+0x16e>
			/* Wait until start bit has been cleared */
			LoopNb = 0;
 800c372:	2300      	movs	r3, #0
 800c374:	613b      	str	r3, [r7, #16]
			do {
				if (LoopNb > 0)
 800c376:	693b      	ldr	r3, [r7, #16]
 800c378:	2b00      	cmp	r3, #0
 800c37a:	d008      	beq.n	800c38e <VL53L0X_StartMeasurement+0xce>
					Status = VL53L0X_RdByte(Dev,
 800c37c:	f107 030d 	add.w	r3, r7, #13
 800c380:	461a      	mov	r2, r3
 800c382:	2100      	movs	r1, #0
 800c384:	6878      	ldr	r0, [r7, #4]
 800c386:	f003 fe85 	bl	8010094 <VL53L0X_RdByte>
 800c38a:	4603      	mov	r3, r0
 800c38c:	75fb      	strb	r3, [r7, #23]
					VL53L0X_REG_SYSRANGE_START, &Byte);
				LoopNb = LoopNb + 1;
 800c38e:	693b      	ldr	r3, [r7, #16]
 800c390:	3301      	adds	r3, #1
 800c392:	613b      	str	r3, [r7, #16]
			} while (((Byte & StartStopByte) == StartStopByte)
 800c394:	7b7a      	ldrb	r2, [r7, #13]
 800c396:	7bfb      	ldrb	r3, [r7, #15]
 800c398:	4013      	ands	r3, r2
 800c39a:	b2db      	uxtb	r3, r3
				&& (Status == VL53L0X_ERROR_NONE)
				&& (LoopNb < VL53L0X_DEFAULT_MAX_LOOP));
 800c39c:	7bfa      	ldrb	r2, [r7, #15]
 800c39e:	429a      	cmp	r2, r3
 800c3a0:	d107      	bne.n	800c3b2 <VL53L0X_StartMeasurement+0xf2>
				&& (Status == VL53L0X_ERROR_NONE)
 800c3a2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c3a6:	2b00      	cmp	r3, #0
 800c3a8:	d103      	bne.n	800c3b2 <VL53L0X_StartMeasurement+0xf2>
				&& (LoopNb < VL53L0X_DEFAULT_MAX_LOOP));
 800c3aa:	693b      	ldr	r3, [r7, #16]
 800c3ac:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800c3b0:	d3e1      	bcc.n	800c376 <VL53L0X_StartMeasurement+0xb6>

			if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP)
 800c3b2:	693b      	ldr	r3, [r7, #16]
 800c3b4:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800c3b8:	d339      	bcc.n	800c42e <VL53L0X_StartMeasurement+0x16e>
				Status = VL53L0X_ERROR_TIME_OUT;
 800c3ba:	23f9      	movs	r3, #249	; 0xf9
 800c3bc:	75fb      	strb	r3, [r7, #23]

		}

		break;
 800c3be:	e036      	b.n	800c42e <VL53L0X_StartMeasurement+0x16e>
	case VL53L0X_DEVICEMODE_CONTINUOUS_RANGING:
		/* Back-to-back mode */

		/* Check if need to apply interrupt settings */
		if (Status == VL53L0X_ERROR_NONE)
 800c3c0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c3c4:	2b00      	cmp	r3, #0
 800c3c6:	d105      	bne.n	800c3d4 <VL53L0X_StartMeasurement+0x114>
			Status = VL53L0X_CheckAndLoadInterruptSettings(Dev, 1);
 800c3c8:	2101      	movs	r1, #1
 800c3ca:	6878      	ldr	r0, [r7, #4]
 800c3cc:	f7ff ff12 	bl	800c1f4 <VL53L0X_CheckAndLoadInterruptSettings>
 800c3d0:	4603      	mov	r3, r0
 800c3d2:	75fb      	strb	r3, [r7, #23]

		Status = VL53L0X_WrByte(Dev,
 800c3d4:	2202      	movs	r2, #2
 800c3d6:	2100      	movs	r1, #0
 800c3d8:	6878      	ldr	r0, [r7, #4]
 800c3da:	f003 fdd9 	bl	800ff90 <VL53L0X_WrByte>
 800c3de:	4603      	mov	r3, r0
 800c3e0:	75fb      	strb	r3, [r7, #23]
		VL53L0X_REG_SYSRANGE_START,
		VL53L0X_REG_SYSRANGE_MODE_BACKTOBACK);
		if (Status == VL53L0X_ERROR_NONE) {
 800c3e2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c3e6:	2b00      	cmp	r3, #0
 800c3e8:	d123      	bne.n	800c432 <VL53L0X_StartMeasurement+0x172>
			/* Set PAL State to Running */
			PALDevDataSet(Dev, PalState, VL53L0X_STATE_RUNNING);
 800c3ea:	687b      	ldr	r3, [r7, #4]
 800c3ec:	2204      	movs	r2, #4
 800c3ee:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
		}
		break;
 800c3f2:	e01e      	b.n	800c432 <VL53L0X_StartMeasurement+0x172>
	case VL53L0X_DEVICEMODE_CONTINUOUS_TIMED_RANGING:
		/* Continuous mode */
		/* Check if need to apply interrupt settings */
		if (Status == VL53L0X_ERROR_NONE)
 800c3f4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c3f8:	2b00      	cmp	r3, #0
 800c3fa:	d105      	bne.n	800c408 <VL53L0X_StartMeasurement+0x148>
			Status = VL53L0X_CheckAndLoadInterruptSettings(Dev, 1);
 800c3fc:	2101      	movs	r1, #1
 800c3fe:	6878      	ldr	r0, [r7, #4]
 800c400:	f7ff fef8 	bl	800c1f4 <VL53L0X_CheckAndLoadInterruptSettings>
 800c404:	4603      	mov	r3, r0
 800c406:	75fb      	strb	r3, [r7, #23]

		Status = VL53L0X_WrByte(Dev,
 800c408:	2204      	movs	r2, #4
 800c40a:	2100      	movs	r1, #0
 800c40c:	6878      	ldr	r0, [r7, #4]
 800c40e:	f003 fdbf 	bl	800ff90 <VL53L0X_WrByte>
 800c412:	4603      	mov	r3, r0
 800c414:	75fb      	strb	r3, [r7, #23]
		VL53L0X_REG_SYSRANGE_START,
		VL53L0X_REG_SYSRANGE_MODE_TIMED);

		if (Status == VL53L0X_ERROR_NONE) {
 800c416:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c41a:	2b00      	cmp	r3, #0
 800c41c:	d10b      	bne.n	800c436 <VL53L0X_StartMeasurement+0x176>
			/* Set PAL State to Running */
			PALDevDataSet(Dev, PalState, VL53L0X_STATE_RUNNING);
 800c41e:	687b      	ldr	r3, [r7, #4]
 800c420:	2204      	movs	r2, #4
 800c422:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
		}
		break;
 800c426:	e006      	b.n	800c436 <VL53L0X_StartMeasurement+0x176>
	default:
		/* Selected mode not supported */
		Status = VL53L0X_ERROR_MODE_NOT_SUPPORTED;
 800c428:	23f8      	movs	r3, #248	; 0xf8
 800c42a:	75fb      	strb	r3, [r7, #23]
 800c42c:	e004      	b.n	800c438 <VL53L0X_StartMeasurement+0x178>
		break;
 800c42e:	bf00      	nop
 800c430:	e002      	b.n	800c438 <VL53L0X_StartMeasurement+0x178>
		break;
 800c432:	bf00      	nop
 800c434:	e000      	b.n	800c438 <VL53L0X_StartMeasurement+0x178>
		break;
 800c436:	bf00      	nop
	}


	LOG_FUNCTION_END(Status);
	return Status;
 800c438:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800c43c:	4618      	mov	r0, r3
 800c43e:	3718      	adds	r7, #24
 800c440:	46bd      	mov	sp, r7
 800c442:	bd80      	pop	{r7, pc}

0800c444 <VL53L0X_GetMeasurementDataReady>:
	return Status;
}

VL53L0X_Error VL53L0X_GetMeasurementDataReady(VL53L0X_DEV Dev,
	uint8_t *pMeasurementDataReady)
{
 800c444:	b580      	push	{r7, lr}
 800c446:	b084      	sub	sp, #16
 800c448:	af00      	add	r7, sp, #0
 800c44a:	6078      	str	r0, [r7, #4]
 800c44c:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800c44e:	2300      	movs	r3, #0
 800c450:	73fb      	strb	r3, [r7, #15]
	uint8_t SysRangeStatusRegister;
	uint8_t InterruptConfig;
	uint32_t InterruptMask;
	LOG_FUNCTION_START("");

	InterruptConfig = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 800c452:	687b      	ldr	r3, [r7, #4]
 800c454:	f893 30da 	ldrb.w	r3, [r3, #218]	; 0xda
 800c458:	73bb      	strb	r3, [r7, #14]
		Pin0GpioFunctionality);

	if (InterruptConfig ==
 800c45a:	7bbb      	ldrb	r3, [r7, #14]
 800c45c:	2b04      	cmp	r3, #4
 800c45e:	d112      	bne.n	800c486 <VL53L0X_GetMeasurementDataReady+0x42>
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY) {
		Status = VL53L0X_GetInterruptMaskStatus(Dev, &InterruptMask);
 800c460:	f107 0308 	add.w	r3, r7, #8
 800c464:	4619      	mov	r1, r3
 800c466:	6878      	ldr	r0, [r7, #4]
 800c468:	f000 fb1a 	bl	800caa0 <VL53L0X_GetInterruptMaskStatus>
 800c46c:	4603      	mov	r3, r0
 800c46e:	73fb      	strb	r3, [r7, #15]
		if (InterruptMask ==
 800c470:	68bb      	ldr	r3, [r7, #8]
 800c472:	2b04      	cmp	r3, #4
 800c474:	d103      	bne.n	800c47e <VL53L0X_GetMeasurementDataReady+0x3a>
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY)
			*pMeasurementDataReady = 1;
 800c476:	683b      	ldr	r3, [r7, #0]
 800c478:	2201      	movs	r2, #1
 800c47a:	701a      	strb	r2, [r3, #0]
 800c47c:	e01c      	b.n	800c4b8 <VL53L0X_GetMeasurementDataReady+0x74>
		else
			*pMeasurementDataReady = 0;
 800c47e:	683b      	ldr	r3, [r7, #0]
 800c480:	2200      	movs	r2, #0
 800c482:	701a      	strb	r2, [r3, #0]
 800c484:	e018      	b.n	800c4b8 <VL53L0X_GetMeasurementDataReady+0x74>
	} else {
		Status = VL53L0X_RdByte(Dev, VL53L0X_REG_RESULT_RANGE_STATUS,
 800c486:	f107 030d 	add.w	r3, r7, #13
 800c48a:	461a      	mov	r2, r3
 800c48c:	2114      	movs	r1, #20
 800c48e:	6878      	ldr	r0, [r7, #4]
 800c490:	f003 fe00 	bl	8010094 <VL53L0X_RdByte>
 800c494:	4603      	mov	r3, r0
 800c496:	73fb      	strb	r3, [r7, #15]
			&SysRangeStatusRegister);
		if (Status == VL53L0X_ERROR_NONE) {
 800c498:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c49c:	2b00      	cmp	r3, #0
 800c49e:	d10b      	bne.n	800c4b8 <VL53L0X_GetMeasurementDataReady+0x74>
			if (SysRangeStatusRegister & 0x01)
 800c4a0:	7b7b      	ldrb	r3, [r7, #13]
 800c4a2:	f003 0301 	and.w	r3, r3, #1
 800c4a6:	2b00      	cmp	r3, #0
 800c4a8:	d003      	beq.n	800c4b2 <VL53L0X_GetMeasurementDataReady+0x6e>
				*pMeasurementDataReady = 1;
 800c4aa:	683b      	ldr	r3, [r7, #0]
 800c4ac:	2201      	movs	r2, #1
 800c4ae:	701a      	strb	r2, [r3, #0]
 800c4b0:	e002      	b.n	800c4b8 <VL53L0X_GetMeasurementDataReady+0x74>
			else
				*pMeasurementDataReady = 0;
 800c4b2:	683b      	ldr	r3, [r7, #0]
 800c4b4:	2200      	movs	r2, #0
 800c4b6:	701a      	strb	r2, [r3, #0]
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800c4b8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800c4bc:	4618      	mov	r0, r3
 800c4be:	3710      	adds	r7, #16
 800c4c0:	46bd      	mov	sp, r7
 800c4c2:	bd80      	pop	{r7, pc}

0800c4c4 <VL53L0X_GetRangingMeasurementData>:
}


VL53L0X_Error VL53L0X_GetRangingMeasurementData(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData)
{
 800c4c4:	b5b0      	push	{r4, r5, r7, lr}
 800c4c6:	b096      	sub	sp, #88	; 0x58
 800c4c8:	af02      	add	r7, sp, #8
 800c4ca:	6078      	str	r0, [r7, #4]
 800c4cc:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800c4ce:	2300      	movs	r3, #0
 800c4d0:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	 * use multi read even if some registers are not useful, result will
	 * be more efficient
	 * start reading at 0x14 dec20
	 * end reading at 0x21 dec33 total 14 bytes to read
	 */
	Status = VL53L0X_ReadMulti(Dev, 0x14, localBuffer, 12);
 800c4d4:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800c4d8:	230c      	movs	r3, #12
 800c4da:	2114      	movs	r1, #20
 800c4dc:	6878      	ldr	r0, [r7, #4]
 800c4de:	f003 fd2b 	bl	800ff38 <VL53L0X_ReadMulti>
 800c4e2:	4603      	mov	r3, r0
 800c4e4:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

	if (Status == VL53L0X_ERROR_NONE) {
 800c4e8:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 800c4ec:	2b00      	cmp	r3, #0
 800c4ee:	f040 80d1 	bne.w	800c694 <VL53L0X_GetRangingMeasurementData+0x1d0>

		pRangingMeasurementData->ZoneId = 0; /* Only one zone */
 800c4f2:	683b      	ldr	r3, [r7, #0]
 800c4f4:	2200      	movs	r2, #0
 800c4f6:	759a      	strb	r2, [r3, #22]
		pRangingMeasurementData->TimeStamp = 0; /* Not Implemented */
 800c4f8:	683b      	ldr	r3, [r7, #0]
 800c4fa:	2200      	movs	r2, #0
 800c4fc:	601a      	str	r2, [r3, #0]

		tmpuint16 = VL53L0X_MAKEUINT16(localBuffer[11], localBuffer[10]);
 800c4fe:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800c502:	b29b      	uxth	r3, r3
 800c504:	021b      	lsls	r3, r3, #8
 800c506:	b29a      	uxth	r2, r3
 800c508:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800c50c:	b29b      	uxth	r3, r3
 800c50e:	4413      	add	r3, r2
 800c510:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
		/* cut1.1 if SYSTEM__RANGE_CONFIG if 1 range is 2bits fractional
		 *(format 11.2) else no fractional
		 */

		pRangingMeasurementData->MeasurementTimeUsec = 0;
 800c514:	683b      	ldr	r3, [r7, #0]
 800c516:	2200      	movs	r2, #0
 800c518:	605a      	str	r2, [r3, #4]

		SignalRate = VL53L0X_FIXPOINT97TOFIXPOINT1616(
 800c51a:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800c51e:	b29b      	uxth	r3, r3
 800c520:	021b      	lsls	r3, r3, #8
 800c522:	b29a      	uxth	r2, r3
 800c524:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c528:	b29b      	uxth	r3, r3
 800c52a:	4413      	add	r3, r2
 800c52c:	b29b      	uxth	r3, r3
 800c52e:	025b      	lsls	r3, r3, #9
 800c530:	647b      	str	r3, [r7, #68]	; 0x44
			VL53L0X_MAKEUINT16(localBuffer[7], localBuffer[6]));
		/* peak_signal_count_rate_rtn_mcps */
		pRangingMeasurementData->SignalRateRtnMegaCps = SignalRate;
 800c532:	683b      	ldr	r3, [r7, #0]
 800c534:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c536:	60da      	str	r2, [r3, #12]

		AmbientRate = VL53L0X_MAKEUINT16(localBuffer[9], localBuffer[8]);
 800c538:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800c53c:	b29b      	uxth	r3, r3
 800c53e:	021b      	lsls	r3, r3, #8
 800c540:	b29a      	uxth	r2, r3
 800c542:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 800c546:	b29b      	uxth	r3, r3
 800c548:	4413      	add	r3, r2
 800c54a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
		pRangingMeasurementData->AmbientRateRtnMegaCps =
			VL53L0X_FIXPOINT97TOFIXPOINT1616(AmbientRate);
 800c54e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800c552:	025b      	lsls	r3, r3, #9
 800c554:	461a      	mov	r2, r3
		pRangingMeasurementData->AmbientRateRtnMegaCps =
 800c556:	683b      	ldr	r3, [r7, #0]
 800c558:	611a      	str	r2, [r3, #16]

		EffectiveSpadRtnCount = VL53L0X_MAKEUINT16(localBuffer[3],
 800c55a:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 800c55e:	b29b      	uxth	r3, r3
 800c560:	021b      	lsls	r3, r3, #8
 800c562:	b29a      	uxth	r2, r3
 800c564:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800c568:	b29b      	uxth	r3, r3
 800c56a:	4413      	add	r3, r2
 800c56c:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
			localBuffer[2]);
		/* EffectiveSpadRtnCount is 8.8 format */
		pRangingMeasurementData->EffectiveSpadRtnCount =
 800c570:	683b      	ldr	r3, [r7, #0]
 800c572:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 800c576:	829a      	strh	r2, [r3, #20]
			EffectiveSpadRtnCount;

		DeviceRangeStatus = localBuffer[0];
 800c578:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800c57c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

		/* Get Linearity Corrective Gain */
		LinearityCorrectiveGain = PALDevDataGet(Dev,
 800c580:	687b      	ldr	r3, [r7, #4]
 800c582:	f8b3 3152 	ldrh.w	r3, [r3, #338]	; 0x152
 800c586:	87bb      	strh	r3, [r7, #60]	; 0x3c
			LinearityCorrectiveGain);

		/* Get ranging configuration */
		RangeFractionalEnable = PALDevDataGet(Dev,
 800c588:	687b      	ldr	r3, [r7, #4]
 800c58a:	f893 3131 	ldrb.w	r3, [r3, #305]	; 0x131
 800c58e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
			RangeFractionalEnable);

		if (LinearityCorrectiveGain != 1000) {
 800c592:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800c594:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800c598:	d046      	beq.n	800c628 <VL53L0X_GetRangingMeasurementData+0x164>

			tmpuint16 = (uint16_t)((LinearityCorrectiveGain
				* tmpuint16 + 500) / 1000);
 800c59a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800c59c:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 800c5a0:	fb02 f303 	mul.w	r3, r2, r3
 800c5a4:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800c5a8:	4a57      	ldr	r2, [pc, #348]	; (800c708 <VL53L0X_GetRangingMeasurementData+0x244>)
 800c5aa:	fb82 1203 	smull	r1, r2, r2, r3
 800c5ae:	1192      	asrs	r2, r2, #6
 800c5b0:	17db      	asrs	r3, r3, #31
 800c5b2:	1ad3      	subs	r3, r2, r3
			tmpuint16 = (uint16_t)((LinearityCorrectiveGain
 800c5b4:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

			/* Implement Xtalk */
			VL53L0X_GETPARAMETERFIELD(Dev,
 800c5b8:	687b      	ldr	r3, [r7, #4]
 800c5ba:	6a1b      	ldr	r3, [r3, #32]
 800c5bc:	873b      	strh	r3, [r7, #56]	; 0x38
				XTalkCompensationRateMegaCps,
				XTalkCompensationRateMegaCps);
			VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 800c5be:	687b      	ldr	r3, [r7, #4]
 800c5c0:	7f1b      	ldrb	r3, [r3, #28]
 800c5c2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
				XTalkCompensationEnable);

			if (XTalkCompensationEnable) {
 800c5c6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800c5ca:	2b00      	cmp	r3, #0
 800c5cc:	d02c      	beq.n	800c628 <VL53L0X_GetRangingMeasurementData+0x164>

				if ((SignalRate
					- ((XTalkCompensationRateMegaCps
					* EffectiveSpadRtnCount) >> 8))
 800c5ce:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800c5d0:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 800c5d4:	fb02 f303 	mul.w	r3, r2, r3
 800c5d8:	121a      	asrs	r2, r3, #8
					<= 0) {
 800c5da:	6c7b      	ldr	r3, [r7, #68]	; 0x44
				if ((SignalRate
 800c5dc:	429a      	cmp	r2, r3
 800c5de:	d10d      	bne.n	800c5fc <VL53L0X_GetRangingMeasurementData+0x138>
					if (RangeFractionalEnable)
 800c5e0:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800c5e4:	2b00      	cmp	r3, #0
 800c5e6:	d004      	beq.n	800c5f2 <VL53L0X_GetRangingMeasurementData+0x12e>
						XtalkRangeMilliMeter = 8888;
 800c5e8:	f242 23b8 	movw	r3, #8888	; 0x22b8
 800c5ec:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 800c5f0:	e016      	b.n	800c620 <VL53L0X_GetRangingMeasurementData+0x15c>
					else
						XtalkRangeMilliMeter = 8888
 800c5f2:	f648 23e0 	movw	r3, #35552	; 0x8ae0
 800c5f6:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 800c5fa:	e011      	b.n	800c620 <VL53L0X_GetRangingMeasurementData+0x15c>
							<< 2;
				} else {
					XtalkRangeMilliMeter =
					(tmpuint16 * SignalRate)
 800c5fc:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800c600:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c602:	fb03 f202 	mul.w	r2, r3, r2
						/ (SignalRate
						- ((XTalkCompensationRateMegaCps
						* EffectiveSpadRtnCount)
 800c606:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800c608:	f8b7 1040 	ldrh.w	r1, [r7, #64]	; 0x40
 800c60c:	fb01 f303 	mul.w	r3, r1, r3
						>> 8));
 800c610:	121b      	asrs	r3, r3, #8
 800c612:	4619      	mov	r1, r3
						- ((XTalkCompensationRateMegaCps
 800c614:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c616:	1a5b      	subs	r3, r3, r1
						/ (SignalRate
 800c618:	fbb2 f3f3 	udiv	r3, r2, r3
					XtalkRangeMilliMeter =
 800c61c:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
				}

				tmpuint16 = XtalkRangeMilliMeter;
 800c620:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800c624:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
			}

		}

		if (RangeFractionalEnable) {
 800c628:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800c62c:	2b00      	cmp	r3, #0
 800c62e:	d00d      	beq.n	800c64c <VL53L0X_GetRangingMeasurementData+0x188>
			pRangingMeasurementData->RangeMilliMeter =
				(uint16_t)((tmpuint16) >> 2);
 800c630:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800c634:	089b      	lsrs	r3, r3, #2
 800c636:	b29a      	uxth	r2, r3
			pRangingMeasurementData->RangeMilliMeter =
 800c638:	683b      	ldr	r3, [r7, #0]
 800c63a:	811a      	strh	r2, [r3, #8]
			pRangingMeasurementData->RangeFractionalPart =
				(uint8_t)((tmpuint16 & 0x03) << 6);
 800c63c:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800c640:	b2db      	uxtb	r3, r3
 800c642:	019b      	lsls	r3, r3, #6
 800c644:	b2da      	uxtb	r2, r3
			pRangingMeasurementData->RangeFractionalPart =
 800c646:	683b      	ldr	r3, [r7, #0]
 800c648:	75da      	strb	r2, [r3, #23]
 800c64a:	e006      	b.n	800c65a <VL53L0X_GetRangingMeasurementData+0x196>
		} else {
			pRangingMeasurementData->RangeMilliMeter = tmpuint16;
 800c64c:	683b      	ldr	r3, [r7, #0]
 800c64e:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 800c652:	811a      	strh	r2, [r3, #8]
			pRangingMeasurementData->RangeFractionalPart = 0;
 800c654:	683b      	ldr	r3, [r7, #0]
 800c656:	2200      	movs	r2, #0
 800c658:	75da      	strb	r2, [r3, #23]
		 * For a standard definition of RangeStatus, this should
		 * return 0 in case of good result after a ranging
		 * The range status depends on the device so call a device
		 * specific function to obtain the right Status.
		 */
		Status |= VL53L0X_get_pal_range_status(Dev, DeviceRangeStatus,
 800c65a:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 800c65e:	f897 103f 	ldrb.w	r1, [r7, #63]	; 0x3f
 800c662:	f107 0336 	add.w	r3, r7, #54	; 0x36
 800c666:	9301      	str	r3, [sp, #4]
 800c668:	683b      	ldr	r3, [r7, #0]
 800c66a:	9300      	str	r3, [sp, #0]
 800c66c:	4613      	mov	r3, r2
 800c66e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c670:	6878      	ldr	r0, [r7, #4]
 800c672:	f003 fa15 	bl	800faa0 <VL53L0X_get_pal_range_status>
 800c676:	4603      	mov	r3, r0
 800c678:	461a      	mov	r2, r3
 800c67a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800c67e:	4313      	orrs	r3, r2
 800c680:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
			SignalRate, EffectiveSpadRtnCount,
			pRangingMeasurementData, &PalRangeStatus);

		if (Status == VL53L0X_ERROR_NONE)
 800c684:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 800c688:	2b00      	cmp	r3, #0
 800c68a:	d103      	bne.n	800c694 <VL53L0X_GetRangingMeasurementData+0x1d0>
			pRangingMeasurementData->RangeStatus = PalRangeStatus;
 800c68c:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 800c690:	683b      	ldr	r3, [r7, #0]
 800c692:	761a      	strb	r2, [r3, #24]

	}

	if (Status == VL53L0X_ERROR_NONE) {
 800c694:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 800c698:	2b00      	cmp	r3, #0
 800c69a:	d12f      	bne.n	800c6fc <VL53L0X_GetRangingMeasurementData+0x238>
		/* Copy last read data into Dev buffer */
		LastRangeDataBuffer = PALDevDataGet(Dev, LastRangeMeasure);
 800c69c:	687b      	ldr	r3, [r7, #4]
 800c69e:	f107 040c 	add.w	r4, r7, #12
 800c6a2:	f103 0550 	add.w	r5, r3, #80	; 0x50
 800c6a6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800c6a8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800c6aa:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800c6ae:	e884 0007 	stmia.w	r4, {r0, r1, r2}

		LastRangeDataBuffer.RangeMilliMeter =
			pRangingMeasurementData->RangeMilliMeter;
 800c6b2:	683b      	ldr	r3, [r7, #0]
 800c6b4:	891b      	ldrh	r3, [r3, #8]
		LastRangeDataBuffer.RangeMilliMeter =
 800c6b6:	82bb      	strh	r3, [r7, #20]
		LastRangeDataBuffer.RangeFractionalPart =
			pRangingMeasurementData->RangeFractionalPart;
 800c6b8:	683b      	ldr	r3, [r7, #0]
 800c6ba:	7ddb      	ldrb	r3, [r3, #23]
		LastRangeDataBuffer.RangeFractionalPart =
 800c6bc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
		LastRangeDataBuffer.RangeDMaxMilliMeter =
			pRangingMeasurementData->RangeDMaxMilliMeter;
 800c6c0:	683b      	ldr	r3, [r7, #0]
 800c6c2:	895b      	ldrh	r3, [r3, #10]
		LastRangeDataBuffer.RangeDMaxMilliMeter =
 800c6c4:	82fb      	strh	r3, [r7, #22]
		LastRangeDataBuffer.MeasurementTimeUsec =
			pRangingMeasurementData->MeasurementTimeUsec;
 800c6c6:	683b      	ldr	r3, [r7, #0]
 800c6c8:	685b      	ldr	r3, [r3, #4]
		LastRangeDataBuffer.MeasurementTimeUsec =
 800c6ca:	613b      	str	r3, [r7, #16]
		LastRangeDataBuffer.SignalRateRtnMegaCps =
			pRangingMeasurementData->SignalRateRtnMegaCps;
 800c6cc:	683b      	ldr	r3, [r7, #0]
 800c6ce:	68db      	ldr	r3, [r3, #12]
		LastRangeDataBuffer.SignalRateRtnMegaCps =
 800c6d0:	61bb      	str	r3, [r7, #24]
		LastRangeDataBuffer.AmbientRateRtnMegaCps =
			pRangingMeasurementData->AmbientRateRtnMegaCps;
 800c6d2:	683b      	ldr	r3, [r7, #0]
 800c6d4:	691b      	ldr	r3, [r3, #16]
		LastRangeDataBuffer.AmbientRateRtnMegaCps =
 800c6d6:	61fb      	str	r3, [r7, #28]
		LastRangeDataBuffer.EffectiveSpadRtnCount =
			pRangingMeasurementData->EffectiveSpadRtnCount;
 800c6d8:	683b      	ldr	r3, [r7, #0]
 800c6da:	8a9b      	ldrh	r3, [r3, #20]
		LastRangeDataBuffer.EffectiveSpadRtnCount =
 800c6dc:	843b      	strh	r3, [r7, #32]
		LastRangeDataBuffer.RangeStatus =
			pRangingMeasurementData->RangeStatus;
 800c6de:	683b      	ldr	r3, [r7, #0]
 800c6e0:	7e1b      	ldrb	r3, [r3, #24]
		LastRangeDataBuffer.RangeStatus =
 800c6e2:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24

		PALDevDataSet(Dev, LastRangeMeasure, LastRangeDataBuffer);
 800c6e6:	687b      	ldr	r3, [r7, #4]
 800c6e8:	f103 0450 	add.w	r4, r3, #80	; 0x50
 800c6ec:	f107 050c 	add.w	r5, r7, #12
 800c6f0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800c6f2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800c6f4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800c6f8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800c6fc:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
}
 800c700:	4618      	mov	r0, r3
 800c702:	3750      	adds	r7, #80	; 0x50
 800c704:	46bd      	mov	sp, r7
 800c706:	bdb0      	pop	{r4, r5, r7, pc}
 800c708:	10624dd3 	.word	0x10624dd3

0800c70c <VL53L0X_PerformSingleRangingMeasurement>:
	return Status;
}

VL53L0X_Error VL53L0X_PerformSingleRangingMeasurement(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData)
{
 800c70c:	b580      	push	{r7, lr}
 800c70e:	b084      	sub	sp, #16
 800c710:	af00      	add	r7, sp, #0
 800c712:	6078      	str	r0, [r7, #4]
 800c714:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800c716:	2300      	movs	r3, #0
 800c718:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	/* This function will do a complete single ranging
	 * Here we fix the mode! */
	Status = VL53L0X_SetDeviceMode(Dev, VL53L0X_DEVICEMODE_SINGLE_RANGING);
 800c71a:	2100      	movs	r1, #0
 800c71c:	6878      	ldr	r0, [r7, #4]
 800c71e:	f7ff f8d1 	bl	800b8c4 <VL53L0X_SetDeviceMode>
 800c722:	4603      	mov	r3, r0
 800c724:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 800c726:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c72a:	2b00      	cmp	r3, #0
 800c72c:	d104      	bne.n	800c738 <VL53L0X_PerformSingleRangingMeasurement+0x2c>
		Status = VL53L0X_PerformSingleMeasurement(Dev);
 800c72e:	6878      	ldr	r0, [r7, #4]
 800c730:	f7ff fd16 	bl	800c160 <VL53L0X_PerformSingleMeasurement>
 800c734:	4603      	mov	r3, r0
 800c736:	73fb      	strb	r3, [r7, #15]


	if (Status == VL53L0X_ERROR_NONE)
 800c738:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c73c:	2b00      	cmp	r3, #0
 800c73e:	d105      	bne.n	800c74c <VL53L0X_PerformSingleRangingMeasurement+0x40>
		Status = VL53L0X_GetRangingMeasurementData(Dev,
 800c740:	6839      	ldr	r1, [r7, #0]
 800c742:	6878      	ldr	r0, [r7, #4]
 800c744:	f7ff febe 	bl	800c4c4 <VL53L0X_GetRangingMeasurementData>
 800c748:	4603      	mov	r3, r0
 800c74a:	73fb      	strb	r3, [r7, #15]
			pRangingMeasurementData);


	if (Status == VL53L0X_ERROR_NONE)
 800c74c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c750:	2b00      	cmp	r3, #0
 800c752:	d105      	bne.n	800c760 <VL53L0X_PerformSingleRangingMeasurement+0x54>
		Status = VL53L0X_ClearInterruptMask(Dev, 0);
 800c754:	2100      	movs	r1, #0
 800c756:	6878      	ldr	r0, [r7, #4]
 800c758:	f000 f962 	bl	800ca20 <VL53L0X_ClearInterruptMask>
 800c75c:	4603      	mov	r3, r0
 800c75e:	73fb      	strb	r3, [r7, #15]


	LOG_FUNCTION_END(Status);
	return Status;
 800c760:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800c764:	4618      	mov	r0, r3
 800c766:	3710      	adds	r7, #16
 800c768:	46bd      	mov	sp, r7
 800c76a:	bd80      	pop	{r7, pc}

0800c76c <VL53L0X_SetGpioConfig>:
/* End Group PAL Measurement Functions */

VL53L0X_Error VL53L0X_SetGpioConfig(VL53L0X_DEV Dev, uint8_t Pin,
	VL53L0X_DeviceModes DeviceMode, VL53L0X_GpioFunctionality Functionality,
	VL53L0X_InterruptPolarity Polarity)
{
 800c76c:	b580      	push	{r7, lr}
 800c76e:	b084      	sub	sp, #16
 800c770:	af00      	add	r7, sp, #0
 800c772:	6078      	str	r0, [r7, #4]
 800c774:	4608      	mov	r0, r1
 800c776:	4611      	mov	r1, r2
 800c778:	461a      	mov	r2, r3
 800c77a:	4603      	mov	r3, r0
 800c77c:	70fb      	strb	r3, [r7, #3]
 800c77e:	460b      	mov	r3, r1
 800c780:	70bb      	strb	r3, [r7, #2]
 800c782:	4613      	mov	r3, r2
 800c784:	707b      	strb	r3, [r7, #1]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800c786:	2300      	movs	r3, #0
 800c788:	73fb      	strb	r3, [r7, #15]
	uint8_t data;

	LOG_FUNCTION_START("");

	if (Pin != 0) {
 800c78a:	78fb      	ldrb	r3, [r7, #3]
 800c78c:	2b00      	cmp	r3, #0
 800c78e:	d002      	beq.n	800c796 <VL53L0X_SetGpioConfig+0x2a>
		Status = VL53L0X_ERROR_GPIO_NOT_EXISTING;
 800c790:	23f6      	movs	r3, #246	; 0xf6
 800c792:	73fb      	strb	r3, [r7, #15]
 800c794:	e107      	b.n	800c9a6 <VL53L0X_SetGpioConfig+0x23a>
	} else if (DeviceMode == VL53L0X_DEVICEMODE_GPIO_DRIVE) {
 800c796:	78bb      	ldrb	r3, [r7, #2]
 800c798:	2b14      	cmp	r3, #20
 800c79a:	d110      	bne.n	800c7be <VL53L0X_SetGpioConfig+0x52>
		if (Polarity == VL53L0X_INTERRUPTPOLARITY_LOW)
 800c79c:	7e3b      	ldrb	r3, [r7, #24]
 800c79e:	2b00      	cmp	r3, #0
 800c7a0:	d102      	bne.n	800c7a8 <VL53L0X_SetGpioConfig+0x3c>
			data = 0x10;
 800c7a2:	2310      	movs	r3, #16
 800c7a4:	73bb      	strb	r3, [r7, #14]
 800c7a6:	e001      	b.n	800c7ac <VL53L0X_SetGpioConfig+0x40>
		else
			data = 1;
 800c7a8:	2301      	movs	r3, #1
 800c7aa:	73bb      	strb	r3, [r7, #14]

		Status = VL53L0X_WrByte(Dev,
 800c7ac:	7bbb      	ldrb	r3, [r7, #14]
 800c7ae:	461a      	mov	r2, r3
 800c7b0:	2184      	movs	r1, #132	; 0x84
 800c7b2:	6878      	ldr	r0, [r7, #4]
 800c7b4:	f003 fbec 	bl	800ff90 <VL53L0X_WrByte>
 800c7b8:	4603      	mov	r3, r0
 800c7ba:	73fb      	strb	r3, [r7, #15]
 800c7bc:	e0f3      	b.n	800c9a6 <VL53L0X_SetGpioConfig+0x23a>
		VL53L0X_REG_GPIO_HV_MUX_ACTIVE_HIGH, data);

	} else if (DeviceMode == VL53L0X_DEVICEMODE_GPIO_OSC) {
 800c7be:	78bb      	ldrb	r3, [r7, #2]
 800c7c0:	2b15      	cmp	r3, #21
 800c7c2:	f040 8097 	bne.w	800c8f4 <VL53L0X_SetGpioConfig+0x188>

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 800c7c6:	2201      	movs	r2, #1
 800c7c8:	21ff      	movs	r1, #255	; 0xff
 800c7ca:	6878      	ldr	r0, [r7, #4]
 800c7cc:	f003 fbe0 	bl	800ff90 <VL53L0X_WrByte>
 800c7d0:	4603      	mov	r3, r0
 800c7d2:	461a      	mov	r2, r3
 800c7d4:	7bfb      	ldrb	r3, [r7, #15]
 800c7d6:	4313      	orrs	r3, r2
 800c7d8:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 800c7da:	2200      	movs	r2, #0
 800c7dc:	2100      	movs	r1, #0
 800c7de:	6878      	ldr	r0, [r7, #4]
 800c7e0:	f003 fbd6 	bl	800ff90 <VL53L0X_WrByte>
 800c7e4:	4603      	mov	r3, r0
 800c7e6:	461a      	mov	r2, r3
 800c7e8:	7bfb      	ldrb	r3, [r7, #15]
 800c7ea:	4313      	orrs	r3, r2
 800c7ec:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 800c7ee:	2200      	movs	r2, #0
 800c7f0:	21ff      	movs	r1, #255	; 0xff
 800c7f2:	6878      	ldr	r0, [r7, #4]
 800c7f4:	f003 fbcc 	bl	800ff90 <VL53L0X_WrByte>
 800c7f8:	4603      	mov	r3, r0
 800c7fa:	461a      	mov	r2, r3
 800c7fc:	7bfb      	ldrb	r3, [r7, #15]
 800c7fe:	4313      	orrs	r3, r2
 800c800:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 800c802:	2201      	movs	r2, #1
 800c804:	2180      	movs	r1, #128	; 0x80
 800c806:	6878      	ldr	r0, [r7, #4]
 800c808:	f003 fbc2 	bl	800ff90 <VL53L0X_WrByte>
 800c80c:	4603      	mov	r3, r0
 800c80e:	461a      	mov	r2, r3
 800c810:	7bfb      	ldrb	r3, [r7, #15]
 800c812:	4313      	orrs	r3, r2
 800c814:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x85, 0x02);
 800c816:	2202      	movs	r2, #2
 800c818:	2185      	movs	r1, #133	; 0x85
 800c81a:	6878      	ldr	r0, [r7, #4]
 800c81c:	f003 fbb8 	bl	800ff90 <VL53L0X_WrByte>
 800c820:	4603      	mov	r3, r0
 800c822:	461a      	mov	r2, r3
 800c824:	7bfb      	ldrb	r3, [r7, #15]
 800c826:	4313      	orrs	r3, r2
 800c828:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x04);
 800c82a:	2204      	movs	r2, #4
 800c82c:	21ff      	movs	r1, #255	; 0xff
 800c82e:	6878      	ldr	r0, [r7, #4]
 800c830:	f003 fbae 	bl	800ff90 <VL53L0X_WrByte>
 800c834:	4603      	mov	r3, r0
 800c836:	461a      	mov	r2, r3
 800c838:	7bfb      	ldrb	r3, [r7, #15]
 800c83a:	4313      	orrs	r3, r2
 800c83c:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xcd, 0x00);
 800c83e:	2200      	movs	r2, #0
 800c840:	21cd      	movs	r1, #205	; 0xcd
 800c842:	6878      	ldr	r0, [r7, #4]
 800c844:	f003 fba4 	bl	800ff90 <VL53L0X_WrByte>
 800c848:	4603      	mov	r3, r0
 800c84a:	461a      	mov	r2, r3
 800c84c:	7bfb      	ldrb	r3, [r7, #15]
 800c84e:	4313      	orrs	r3, r2
 800c850:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xcc, 0x11);
 800c852:	2211      	movs	r2, #17
 800c854:	21cc      	movs	r1, #204	; 0xcc
 800c856:	6878      	ldr	r0, [r7, #4]
 800c858:	f003 fb9a 	bl	800ff90 <VL53L0X_WrByte>
 800c85c:	4603      	mov	r3, r0
 800c85e:	461a      	mov	r2, r3
 800c860:	7bfb      	ldrb	r3, [r7, #15]
 800c862:	4313      	orrs	r3, r2
 800c864:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x07);
 800c866:	2207      	movs	r2, #7
 800c868:	21ff      	movs	r1, #255	; 0xff
 800c86a:	6878      	ldr	r0, [r7, #4]
 800c86c:	f003 fb90 	bl	800ff90 <VL53L0X_WrByte>
 800c870:	4603      	mov	r3, r0
 800c872:	461a      	mov	r2, r3
 800c874:	7bfb      	ldrb	r3, [r7, #15]
 800c876:	4313      	orrs	r3, r2
 800c878:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xbe, 0x00);
 800c87a:	2200      	movs	r2, #0
 800c87c:	21be      	movs	r1, #190	; 0xbe
 800c87e:	6878      	ldr	r0, [r7, #4]
 800c880:	f003 fb86 	bl	800ff90 <VL53L0X_WrByte>
 800c884:	4603      	mov	r3, r0
 800c886:	461a      	mov	r2, r3
 800c888:	7bfb      	ldrb	r3, [r7, #15]
 800c88a:	4313      	orrs	r3, r2
 800c88c:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x06);
 800c88e:	2206      	movs	r2, #6
 800c890:	21ff      	movs	r1, #255	; 0xff
 800c892:	6878      	ldr	r0, [r7, #4]
 800c894:	f003 fb7c 	bl	800ff90 <VL53L0X_WrByte>
 800c898:	4603      	mov	r3, r0
 800c89a:	461a      	mov	r2, r3
 800c89c:	7bfb      	ldrb	r3, [r7, #15]
 800c89e:	4313      	orrs	r3, r2
 800c8a0:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xcc, 0x09);
 800c8a2:	2209      	movs	r2, #9
 800c8a4:	21cc      	movs	r1, #204	; 0xcc
 800c8a6:	6878      	ldr	r0, [r7, #4]
 800c8a8:	f003 fb72 	bl	800ff90 <VL53L0X_WrByte>
 800c8ac:	4603      	mov	r3, r0
 800c8ae:	461a      	mov	r2, r3
 800c8b0:	7bfb      	ldrb	r3, [r7, #15]
 800c8b2:	4313      	orrs	r3, r2
 800c8b4:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 800c8b6:	2200      	movs	r2, #0
 800c8b8:	21ff      	movs	r1, #255	; 0xff
 800c8ba:	6878      	ldr	r0, [r7, #4]
 800c8bc:	f003 fb68 	bl	800ff90 <VL53L0X_WrByte>
 800c8c0:	4603      	mov	r3, r0
 800c8c2:	461a      	mov	r2, r3
 800c8c4:	7bfb      	ldrb	r3, [r7, #15]
 800c8c6:	4313      	orrs	r3, r2
 800c8c8:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 800c8ca:	2201      	movs	r2, #1
 800c8cc:	21ff      	movs	r1, #255	; 0xff
 800c8ce:	6878      	ldr	r0, [r7, #4]
 800c8d0:	f003 fb5e 	bl	800ff90 <VL53L0X_WrByte>
 800c8d4:	4603      	mov	r3, r0
 800c8d6:	461a      	mov	r2, r3
 800c8d8:	7bfb      	ldrb	r3, [r7, #15]
 800c8da:	4313      	orrs	r3, r2
 800c8dc:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 800c8de:	2200      	movs	r2, #0
 800c8e0:	2100      	movs	r1, #0
 800c8e2:	6878      	ldr	r0, [r7, #4]
 800c8e4:	f003 fb54 	bl	800ff90 <VL53L0X_WrByte>
 800c8e8:	4603      	mov	r3, r0
 800c8ea:	461a      	mov	r2, r3
 800c8ec:	7bfb      	ldrb	r3, [r7, #15]
 800c8ee:	4313      	orrs	r3, r2
 800c8f0:	73fb      	strb	r3, [r7, #15]
 800c8f2:	e058      	b.n	800c9a6 <VL53L0X_SetGpioConfig+0x23a>

	} else {

		if (Status == VL53L0X_ERROR_NONE) {
 800c8f4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c8f8:	2b00      	cmp	r3, #0
 800c8fa:	d121      	bne.n	800c940 <VL53L0X_SetGpioConfig+0x1d4>
			switch (Functionality) {
 800c8fc:	787b      	ldrb	r3, [r7, #1]
 800c8fe:	2b04      	cmp	r3, #4
 800c900:	d81b      	bhi.n	800c93a <VL53L0X_SetGpioConfig+0x1ce>
 800c902:	a201      	add	r2, pc, #4	; (adr r2, 800c908 <VL53L0X_SetGpioConfig+0x19c>)
 800c904:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c908:	0800c91d 	.word	0x0800c91d
 800c90c:	0800c923 	.word	0x0800c923
 800c910:	0800c929 	.word	0x0800c929
 800c914:	0800c92f 	.word	0x0800c92f
 800c918:	0800c935 	.word	0x0800c935
			case VL53L0X_GPIOFUNCTIONALITY_OFF:
				data = 0x00;
 800c91c:	2300      	movs	r3, #0
 800c91e:	73bb      	strb	r3, [r7, #14]
				break;
 800c920:	e00f      	b.n	800c942 <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_LOW:
				data = 0x01;
 800c922:	2301      	movs	r3, #1
 800c924:	73bb      	strb	r3, [r7, #14]
				break;
 800c926:	e00c      	b.n	800c942 <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_HIGH:
				data = 0x02;
 800c928:	2302      	movs	r3, #2
 800c92a:	73bb      	strb	r3, [r7, #14]
				break;
 800c92c:	e009      	b.n	800c942 <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_OUT:
				data = 0x03;
 800c92e:	2303      	movs	r3, #3
 800c930:	73bb      	strb	r3, [r7, #14]
				break;
 800c932:	e006      	b.n	800c942 <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_NEW_MEASURE_READY:
				data = 0x04;
 800c934:	2304      	movs	r3, #4
 800c936:	73bb      	strb	r3, [r7, #14]
				break;
 800c938:	e003      	b.n	800c942 <VL53L0X_SetGpioConfig+0x1d6>
			default:
				Status =
 800c93a:	23f5      	movs	r3, #245	; 0xf5
 800c93c:	73fb      	strb	r3, [r7, #15]
 800c93e:	e000      	b.n	800c942 <VL53L0X_SetGpioConfig+0x1d6>
				VL53L0X_ERROR_GPIO_FUNCTIONALITY_NOT_SUPPORTED;
			}
		}
 800c940:	bf00      	nop

		if (Status == VL53L0X_ERROR_NONE)
 800c942:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c946:	2b00      	cmp	r3, #0
 800c948:	d107      	bne.n	800c95a <VL53L0X_SetGpioConfig+0x1ee>
			Status = VL53L0X_WrByte(Dev,
 800c94a:	7bbb      	ldrb	r3, [r7, #14]
 800c94c:	461a      	mov	r2, r3
 800c94e:	210a      	movs	r1, #10
 800c950:	6878      	ldr	r0, [r7, #4]
 800c952:	f003 fb1d 	bl	800ff90 <VL53L0X_WrByte>
 800c956:	4603      	mov	r3, r0
 800c958:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_SYSTEM_INTERRUPT_CONFIG_GPIO, data);

		if (Status == VL53L0X_ERROR_NONE) {
 800c95a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c95e:	2b00      	cmp	r3, #0
 800c960:	d10f      	bne.n	800c982 <VL53L0X_SetGpioConfig+0x216>
			if (Polarity == VL53L0X_INTERRUPTPOLARITY_LOW)
 800c962:	7e3b      	ldrb	r3, [r7, #24]
 800c964:	2b00      	cmp	r3, #0
 800c966:	d102      	bne.n	800c96e <VL53L0X_SetGpioConfig+0x202>
				data = 0;
 800c968:	2300      	movs	r3, #0
 800c96a:	73bb      	strb	r3, [r7, #14]
 800c96c:	e001      	b.n	800c972 <VL53L0X_SetGpioConfig+0x206>
			else
				data = (uint8_t)(1 << 4);
 800c96e:	2310      	movs	r3, #16
 800c970:	73bb      	strb	r3, [r7, #14]

			Status = VL53L0X_UpdateByte(Dev,
 800c972:	7bbb      	ldrb	r3, [r7, #14]
 800c974:	22ef      	movs	r2, #239	; 0xef
 800c976:	2184      	movs	r1, #132	; 0x84
 800c978:	6878      	ldr	r0, [r7, #4]
 800c97a:	f003 fb57 	bl	801002c <VL53L0X_UpdateByte>
 800c97e:	4603      	mov	r3, r0
 800c980:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_GPIO_HV_MUX_ACTIVE_HIGH, 0xEF, data);
		}

		if (Status == VL53L0X_ERROR_NONE)
 800c982:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c986:	2b00      	cmp	r3, #0
 800c988:	d103      	bne.n	800c992 <VL53L0X_SetGpioConfig+0x226>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800c98a:	687b      	ldr	r3, [r7, #4]
 800c98c:	787a      	ldrb	r2, [r7, #1]
 800c98e:	f883 20da 	strb.w	r2, [r3, #218]	; 0xda
				Pin0GpioFunctionality, Functionality);

		if (Status == VL53L0X_ERROR_NONE)
 800c992:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c996:	2b00      	cmp	r3, #0
 800c998:	d105      	bne.n	800c9a6 <VL53L0X_SetGpioConfig+0x23a>
			Status = VL53L0X_ClearInterruptMask(Dev, 0);
 800c99a:	2100      	movs	r1, #0
 800c99c:	6878      	ldr	r0, [r7, #4]
 800c99e:	f000 f83f 	bl	800ca20 <VL53L0X_ClearInterruptMask>
 800c9a2:	4603      	mov	r3, r0
 800c9a4:	73fb      	strb	r3, [r7, #15]

	}

	LOG_FUNCTION_END(Status);
	return Status;
 800c9a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800c9aa:	4618      	mov	r0, r3
 800c9ac:	3710      	adds	r7, #16
 800c9ae:	46bd      	mov	sp, r7
 800c9b0:	bd80      	pop	{r7, pc}
 800c9b2:	bf00      	nop

0800c9b4 <VL53L0X_GetInterruptThresholds>:
}

VL53L0X_Error VL53L0X_GetInterruptThresholds(VL53L0X_DEV Dev,
	VL53L0X_DeviceModes DeviceMode, FixPoint1616_t *pThresholdLow,
	FixPoint1616_t *pThresholdHigh)
{
 800c9b4:	b580      	push	{r7, lr}
 800c9b6:	b086      	sub	sp, #24
 800c9b8:	af00      	add	r7, sp, #0
 800c9ba:	60f8      	str	r0, [r7, #12]
 800c9bc:	607a      	str	r2, [r7, #4]
 800c9be:	603b      	str	r3, [r7, #0]
 800c9c0:	460b      	mov	r3, r1
 800c9c2:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800c9c4:	2300      	movs	r3, #0
 800c9c6:	75fb      	strb	r3, [r7, #23]
	uint16_t Threshold16;
	LOG_FUNCTION_START("");

	/* no dependency on DeviceMode for Ewok */

	Status = VL53L0X_RdWord(Dev, VL53L0X_REG_SYSTEM_THRESH_LOW, &Threshold16);
 800c9c8:	f107 0314 	add.w	r3, r7, #20
 800c9cc:	461a      	mov	r2, r3
 800c9ce:	210e      	movs	r1, #14
 800c9d0:	68f8      	ldr	r0, [r7, #12]
 800c9d2:	f003 fb89 	bl	80100e8 <VL53L0X_RdWord>
 800c9d6:	4603      	mov	r3, r0
 800c9d8:	75fb      	strb	r3, [r7, #23]
	/* Need to multiply by 2 because the FW will apply a x2 */
	*pThresholdLow = (FixPoint1616_t)((0x00fff & Threshold16) << 17);
 800c9da:	8abb      	ldrh	r3, [r7, #20]
 800c9dc:	045b      	lsls	r3, r3, #17
 800c9de:	461a      	mov	r2, r3
 800c9e0:	4b0e      	ldr	r3, [pc, #56]	; (800ca1c <VL53L0X_GetInterruptThresholds+0x68>)
 800c9e2:	4013      	ands	r3, r2
 800c9e4:	687a      	ldr	r2, [r7, #4]
 800c9e6:	6013      	str	r3, [r2, #0]

	if (Status == VL53L0X_ERROR_NONE) {
 800c9e8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c9ec:	2b00      	cmp	r3, #0
 800c9ee:	d10f      	bne.n	800ca10 <VL53L0X_GetInterruptThresholds+0x5c>
		Status = VL53L0X_RdWord(Dev, VL53L0X_REG_SYSTEM_THRESH_HIGH,
 800c9f0:	f107 0314 	add.w	r3, r7, #20
 800c9f4:	461a      	mov	r2, r3
 800c9f6:	210c      	movs	r1, #12
 800c9f8:	68f8      	ldr	r0, [r7, #12]
 800c9fa:	f003 fb75 	bl	80100e8 <VL53L0X_RdWord>
 800c9fe:	4603      	mov	r3, r0
 800ca00:	75fb      	strb	r3, [r7, #23]
			&Threshold16);
		/* Need to multiply by 2 because the FW will apply a x2 */
		*pThresholdHigh =
			(FixPoint1616_t)((0x00fff & Threshold16) << 17);
 800ca02:	8abb      	ldrh	r3, [r7, #20]
 800ca04:	045b      	lsls	r3, r3, #17
 800ca06:	461a      	mov	r2, r3
 800ca08:	4b04      	ldr	r3, [pc, #16]	; (800ca1c <VL53L0X_GetInterruptThresholds+0x68>)
 800ca0a:	4013      	ands	r3, r2
		*pThresholdHigh =
 800ca0c:	683a      	ldr	r2, [r7, #0]
 800ca0e:	6013      	str	r3, [r2, #0]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800ca10:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800ca14:	4618      	mov	r0, r3
 800ca16:	3718      	adds	r7, #24
 800ca18:	46bd      	mov	sp, r7
 800ca1a:	bd80      	pop	{r7, pc}
 800ca1c:	1ffe0000 	.word	0x1ffe0000

0800ca20 <VL53L0X_ClearInterruptMask>:
	return Status;
}

/* Group PAL Interrupt Functions */
VL53L0X_Error VL53L0X_ClearInterruptMask(VL53L0X_DEV Dev, uint32_t InterruptMask)
{
 800ca20:	b580      	push	{r7, lr}
 800ca22:	b084      	sub	sp, #16
 800ca24:	af00      	add	r7, sp, #0
 800ca26:	6078      	str	r0, [r7, #4]
 800ca28:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800ca2a:	2300      	movs	r3, #0
 800ca2c:	73fb      	strb	r3, [r7, #15]
	uint8_t LoopCount;
	uint8_t Byte;
	LOG_FUNCTION_START("");

	/* clear bit 0 range interrupt, bit 1 error interrupt */
	LoopCount = 0;
 800ca2e:	2300      	movs	r3, #0
 800ca30:	73bb      	strb	r3, [r7, #14]
	do {
		Status = VL53L0X_WrByte(Dev,
 800ca32:	2201      	movs	r2, #1
 800ca34:	210b      	movs	r1, #11
 800ca36:	6878      	ldr	r0, [r7, #4]
 800ca38:	f003 faaa 	bl	800ff90 <VL53L0X_WrByte>
 800ca3c:	4603      	mov	r3, r0
 800ca3e:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_SYSTEM_INTERRUPT_CLEAR, 0x01);
		Status |= VL53L0X_WrByte(Dev,
 800ca40:	2200      	movs	r2, #0
 800ca42:	210b      	movs	r1, #11
 800ca44:	6878      	ldr	r0, [r7, #4]
 800ca46:	f003 faa3 	bl	800ff90 <VL53L0X_WrByte>
 800ca4a:	4603      	mov	r3, r0
 800ca4c:	461a      	mov	r2, r3
 800ca4e:	7bfb      	ldrb	r3, [r7, #15]
 800ca50:	4313      	orrs	r3, r2
 800ca52:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_SYSTEM_INTERRUPT_CLEAR, 0x00);
		Status |= VL53L0X_RdByte(Dev,
 800ca54:	f107 030d 	add.w	r3, r7, #13
 800ca58:	461a      	mov	r2, r3
 800ca5a:	2113      	movs	r1, #19
 800ca5c:	6878      	ldr	r0, [r7, #4]
 800ca5e:	f003 fb19 	bl	8010094 <VL53L0X_RdByte>
 800ca62:	4603      	mov	r3, r0
 800ca64:	461a      	mov	r2, r3
 800ca66:	7bfb      	ldrb	r3, [r7, #15]
 800ca68:	4313      	orrs	r3, r2
 800ca6a:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_RESULT_INTERRUPT_STATUS, &Byte);
		LoopCount++;
 800ca6c:	7bbb      	ldrb	r3, [r7, #14]
 800ca6e:	3301      	adds	r3, #1
 800ca70:	73bb      	strb	r3, [r7, #14]
	} while (((Byte & 0x07) != 0x00)
 800ca72:	7b7b      	ldrb	r3, [r7, #13]
 800ca74:	f003 0307 	and.w	r3, r3, #7
			&& (LoopCount < 3)
			&& (Status == VL53L0X_ERROR_NONE));
 800ca78:	2b00      	cmp	r3, #0
 800ca7a:	d006      	beq.n	800ca8a <VL53L0X_ClearInterruptMask+0x6a>
			&& (LoopCount < 3)
 800ca7c:	7bbb      	ldrb	r3, [r7, #14]
 800ca7e:	2b02      	cmp	r3, #2
 800ca80:	d803      	bhi.n	800ca8a <VL53L0X_ClearInterruptMask+0x6a>
			&& (Status == VL53L0X_ERROR_NONE));
 800ca82:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ca86:	2b00      	cmp	r3, #0
 800ca88:	d0d3      	beq.n	800ca32 <VL53L0X_ClearInterruptMask+0x12>


	if (LoopCount >= 3)
 800ca8a:	7bbb      	ldrb	r3, [r7, #14]
 800ca8c:	2b02      	cmp	r3, #2
 800ca8e:	d901      	bls.n	800ca94 <VL53L0X_ClearInterruptMask+0x74>
		Status = VL53L0X_ERROR_INTERRUPT_NOT_CLEARED;
 800ca90:	23f4      	movs	r3, #244	; 0xf4
 800ca92:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(Status);
	return Status;
 800ca94:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800ca98:	4618      	mov	r0, r3
 800ca9a:	3710      	adds	r7, #16
 800ca9c:	46bd      	mov	sp, r7
 800ca9e:	bd80      	pop	{r7, pc}

0800caa0 <VL53L0X_GetInterruptMaskStatus>:

VL53L0X_Error VL53L0X_GetInterruptMaskStatus(VL53L0X_DEV Dev,
	uint32_t *pInterruptMaskStatus)
{
 800caa0:	b580      	push	{r7, lr}
 800caa2:	b084      	sub	sp, #16
 800caa4:	af00      	add	r7, sp, #0
 800caa6:	6078      	str	r0, [r7, #4]
 800caa8:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800caaa:	2300      	movs	r3, #0
 800caac:	73fb      	strb	r3, [r7, #15]
	uint8_t Byte;
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_RESULT_INTERRUPT_STATUS, &Byte);
 800caae:	f107 030e 	add.w	r3, r7, #14
 800cab2:	461a      	mov	r2, r3
 800cab4:	2113      	movs	r1, #19
 800cab6:	6878      	ldr	r0, [r7, #4]
 800cab8:	f003 faec 	bl	8010094 <VL53L0X_RdByte>
 800cabc:	4603      	mov	r3, r0
 800cabe:	73fb      	strb	r3, [r7, #15]
	*pInterruptMaskStatus = Byte & 0x07;
 800cac0:	7bbb      	ldrb	r3, [r7, #14]
 800cac2:	f003 0207 	and.w	r2, r3, #7
 800cac6:	683b      	ldr	r3, [r7, #0]
 800cac8:	601a      	str	r2, [r3, #0]

	if (Byte & 0x18)
 800caca:	7bbb      	ldrb	r3, [r7, #14]
 800cacc:	f003 0318 	and.w	r3, r3, #24
 800cad0:	2b00      	cmp	r3, #0
 800cad2:	d001      	beq.n	800cad8 <VL53L0X_GetInterruptMaskStatus+0x38>
		Status = VL53L0X_ERROR_RANGE_ERROR;
 800cad4:	23fa      	movs	r3, #250	; 0xfa
 800cad6:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(Status);
	return Status;
 800cad8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800cadc:	4618      	mov	r0, r3
 800cade:	3710      	adds	r7, #16
 800cae0:	46bd      	mov	sp, r7
 800cae2:	bd80      	pop	{r7, pc}

0800cae4 <VL53L0X_PerformRefSpadManagement>:
	return Status;
}

VL53L0X_Error VL53L0X_PerformRefSpadManagement(VL53L0X_DEV Dev,
	uint32_t *refSpadCount, uint8_t *isApertureSpads)
{
 800cae4:	b580      	push	{r7, lr}
 800cae6:	b086      	sub	sp, #24
 800cae8:	af00      	add	r7, sp, #0
 800caea:	60f8      	str	r0, [r7, #12]
 800caec:	60b9      	str	r1, [r7, #8]
 800caee:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800caf0:	2300      	movs	r3, #0
 800caf2:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");

	Status = VL53L0X_perform_ref_spad_management(Dev, refSpadCount,
 800caf4:	687a      	ldr	r2, [r7, #4]
 800caf6:	68b9      	ldr	r1, [r7, #8]
 800caf8:	68f8      	ldr	r0, [r7, #12]
 800cafa:	f000 fa33 	bl	800cf64 <VL53L0X_perform_ref_spad_management>
 800cafe:	4603      	mov	r3, r0
 800cb00:	75fb      	strb	r3, [r7, #23]
		isApertureSpads);

	LOG_FUNCTION_END(Status);

	return Status;
 800cb02:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800cb06:	4618      	mov	r0, r3
 800cb08:	3718      	adds	r7, #24
 800cb0a:	46bd      	mov	sp, r7
 800cb0c:	bd80      	pop	{r7, pc}

0800cb0e <VL53L0X_PerformContinuousRangingMeasurement>:


VL53L0X_Error VL53L0X_PerformContinuousRangingMeasurement(VL53L0X_Dev_t *device, VL53L0X_RangingMeasurementData_t *ranging_data) {
 800cb0e:	b580      	push	{r7, lr}
 800cb10:	b084      	sub	sp, #16
 800cb12:	af00      	add	r7, sp, #0
 800cb14:	6078      	str	r0, [r7, #4]
 800cb16:	6039      	str	r1, [r7, #0]
    VL53L0X_Error status;

    // Set the device to high accuracy mode
    status = VL53L0X_SetDeviceMode(device, VL53L0X_DEVICEMODE_CONTINUOUS_RANGING);
 800cb18:	2101      	movs	r1, #1
 800cb1a:	6878      	ldr	r0, [r7, #4]
 800cb1c:	f7fe fed2 	bl	800b8c4 <VL53L0X_SetDeviceMode>
 800cb20:	4603      	mov	r3, r0
 800cb22:	73fb      	strb	r3, [r7, #15]
    if (status != VL53L0X_ERROR_NONE) {
 800cb24:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cb28:	2b00      	cmp	r3, #0
 800cb2a:	d002      	beq.n	800cb32 <VL53L0X_PerformContinuousRangingMeasurement+0x24>
        return status;
 800cb2c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cb30:	e019      	b.n	800cb66 <VL53L0X_PerformContinuousRangingMeasurement+0x58>
    }

    // Start continuous ranging measurement
    status = VL53L0X_StartMeasurement(device);
 800cb32:	6878      	ldr	r0, [r7, #4]
 800cb34:	f7ff fbc4 	bl	800c2c0 <VL53L0X_StartMeasurement>
 800cb38:	4603      	mov	r3, r0
 800cb3a:	73fb      	strb	r3, [r7, #15]
    if (status != VL53L0X_ERROR_NONE) {
 800cb3c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cb40:	2b00      	cmp	r3, #0
 800cb42:	d002      	beq.n	800cb4a <VL53L0X_PerformContinuousRangingMeasurement+0x3c>
        return status;
 800cb44:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cb48:	e00d      	b.n	800cb66 <VL53L0X_PerformContinuousRangingMeasurement+0x58>
    }

    // Get ranging measurement data
    status = VL53L0X_GetRangingMeasurementData(device, ranging_data);
 800cb4a:	6839      	ldr	r1, [r7, #0]
 800cb4c:	6878      	ldr	r0, [r7, #4]
 800cb4e:	f7ff fcb9 	bl	800c4c4 <VL53L0X_GetRangingMeasurementData>
 800cb52:	4603      	mov	r3, r0
 800cb54:	73fb      	strb	r3, [r7, #15]
    if (status != VL53L0X_ERROR_NONE) {
 800cb56:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cb5a:	2b00      	cmp	r3, #0
 800cb5c:	d002      	beq.n	800cb64 <VL53L0X_PerformContinuousRangingMeasurement+0x56>
        return status;
 800cb5e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cb62:	e000      	b.n	800cb66 <VL53L0X_PerformContinuousRangingMeasurement+0x58>
    }

    return VL53L0X_ERROR_NONE;
 800cb64:	2300      	movs	r3, #0
}
 800cb66:	4618      	mov	r0, r3
 800cb68:	3710      	adds	r7, #16
 800cb6a:	46bd      	mov	sp, r7
 800cb6c:	bd80      	pop	{r7, pc}

0800cb6e <VL53L0X_get_offset_calibration_data_micro_meter>:
	return Status;
}

VL53L0X_Error VL53L0X_get_offset_calibration_data_micro_meter(VL53L0X_DEV Dev,
		int32_t *pOffsetCalibrationDataMicroMeter)
{
 800cb6e:	b580      	push	{r7, lr}
 800cb70:	b084      	sub	sp, #16
 800cb72:	af00      	add	r7, sp, #0
 800cb74:	6078      	str	r0, [r7, #4]
 800cb76:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800cb78:	2300      	movs	r3, #0
 800cb7a:	73fb      	strb	r3, [r7, #15]
	uint16_t RangeOffsetRegister;
	int16_t cMaxOffset = 2047;
 800cb7c:	f240 73ff 	movw	r3, #2047	; 0x7ff
 800cb80:	81bb      	strh	r3, [r7, #12]
	int16_t cOffsetRange = 4096;
 800cb82:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800cb86:	817b      	strh	r3, [r7, #10]

	/* Note that offset has 10.2 format */

	Status = VL53L0X_RdWord(Dev,
 800cb88:	f107 0308 	add.w	r3, r7, #8
 800cb8c:	461a      	mov	r2, r3
 800cb8e:	2128      	movs	r1, #40	; 0x28
 800cb90:	6878      	ldr	r0, [r7, #4]
 800cb92:	f003 faa9 	bl	80100e8 <VL53L0X_RdWord>
 800cb96:	4603      	mov	r3, r0
 800cb98:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_ALGO_PART_TO_PART_RANGE_OFFSET_MM,
				&RangeOffsetRegister);

	if (Status == VL53L0X_ERROR_NONE) {
 800cb9a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cb9e:	2b00      	cmp	r3, #0
 800cba0:	d11e      	bne.n	800cbe0 <VL53L0X_get_offset_calibration_data_micro_meter+0x72>
		RangeOffsetRegister = (RangeOffsetRegister & 0x0fff);
 800cba2:	893b      	ldrh	r3, [r7, #8]
 800cba4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800cba8:	b29b      	uxth	r3, r3
 800cbaa:	813b      	strh	r3, [r7, #8]

		/* Apply 12 bit 2's compliment conversion */
		if (RangeOffsetRegister > cMaxOffset)
 800cbac:	893b      	ldrh	r3, [r7, #8]
 800cbae:	461a      	mov	r2, r3
 800cbb0:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800cbb4:	429a      	cmp	r2, r3
 800cbb6:	dd0b      	ble.n	800cbd0 <VL53L0X_get_offset_calibration_data_micro_meter+0x62>
			*pOffsetCalibrationDataMicroMeter =
				(int16_t)(RangeOffsetRegister - cOffsetRange)
 800cbb8:	893a      	ldrh	r2, [r7, #8]
 800cbba:	897b      	ldrh	r3, [r7, #10]
 800cbbc:	1ad3      	subs	r3, r2, r3
 800cbbe:	b29b      	uxth	r3, r3
 800cbc0:	b21b      	sxth	r3, r3
 800cbc2:	461a      	mov	r2, r3
					* 250;
 800cbc4:	23fa      	movs	r3, #250	; 0xfa
 800cbc6:	fb03 f202 	mul.w	r2, r3, r2
			*pOffsetCalibrationDataMicroMeter =
 800cbca:	683b      	ldr	r3, [r7, #0]
 800cbcc:	601a      	str	r2, [r3, #0]
 800cbce:	e007      	b.n	800cbe0 <VL53L0X_get_offset_calibration_data_micro_meter+0x72>
		else
			*pOffsetCalibrationDataMicroMeter =
				(int16_t)RangeOffsetRegister * 250;
 800cbd0:	893b      	ldrh	r3, [r7, #8]
 800cbd2:	b21b      	sxth	r3, r3
 800cbd4:	461a      	mov	r2, r3
 800cbd6:	23fa      	movs	r3, #250	; 0xfa
 800cbd8:	fb03 f202 	mul.w	r2, r3, r2
			*pOffsetCalibrationDataMicroMeter =
 800cbdc:	683b      	ldr	r3, [r7, #0]
 800cbde:	601a      	str	r2, [r3, #0]

	}

	return Status;
 800cbe0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800cbe4:	4618      	mov	r0, r3
 800cbe6:	3710      	adds	r7, #16
 800cbe8:	46bd      	mov	sp, r7
 800cbea:	bd80      	pop	{r7, pc}

0800cbec <get_next_good_spad>:
	return Status;
}

void get_next_good_spad(uint8_t goodSpadArray[], uint32_t size,
			uint32_t curr, int32_t *next)
{
 800cbec:	b480      	push	{r7}
 800cbee:	b08b      	sub	sp, #44	; 0x2c
 800cbf0:	af00      	add	r7, sp, #0
 800cbf2:	60f8      	str	r0, [r7, #12]
 800cbf4:	60b9      	str	r1, [r7, #8]
 800cbf6:	607a      	str	r2, [r7, #4]
 800cbf8:	603b      	str	r3, [r7, #0]
	uint32_t startIndex;
	uint32_t fineOffset;
	uint32_t cSpadsPerByte = 8;
 800cbfa:	2308      	movs	r3, #8
 800cbfc:	61bb      	str	r3, [r7, #24]
	uint32_t coarseIndex;
	uint32_t fineIndex;
	uint8_t dataByte;
	uint8_t success = 0;
 800cbfe:	2300      	movs	r3, #0
 800cc00:	77bb      	strb	r3, [r7, #30]
	 *
	 * The coarse index is the byte index of the array and the fine index is
	 * the index of the bit within each byte.
	 */

	*next = -1;
 800cc02:	683b      	ldr	r3, [r7, #0]
 800cc04:	f04f 32ff 	mov.w	r2, #4294967295
 800cc08:	601a      	str	r2, [r3, #0]

	startIndex = curr / cSpadsPerByte;
 800cc0a:	687a      	ldr	r2, [r7, #4]
 800cc0c:	69bb      	ldr	r3, [r7, #24]
 800cc0e:	fbb2 f3f3 	udiv	r3, r2, r3
 800cc12:	617b      	str	r3, [r7, #20]
	fineOffset = curr % cSpadsPerByte;
 800cc14:	687b      	ldr	r3, [r7, #4]
 800cc16:	69ba      	ldr	r2, [r7, #24]
 800cc18:	fbb3 f2f2 	udiv	r2, r3, r2
 800cc1c:	69b9      	ldr	r1, [r7, #24]
 800cc1e:	fb01 f202 	mul.w	r2, r1, r2
 800cc22:	1a9b      	subs	r3, r3, r2
 800cc24:	613b      	str	r3, [r7, #16]

	for (coarseIndex = startIndex; ((coarseIndex < size) && !success);
 800cc26:	697b      	ldr	r3, [r7, #20]
 800cc28:	627b      	str	r3, [r7, #36]	; 0x24
 800cc2a:	e030      	b.n	800cc8e <get_next_good_spad+0xa2>
				coarseIndex++) {
		fineIndex = 0;
 800cc2c:	2300      	movs	r3, #0
 800cc2e:	623b      	str	r3, [r7, #32]
		dataByte = goodSpadArray[coarseIndex];
 800cc30:	68fa      	ldr	r2, [r7, #12]
 800cc32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc34:	4413      	add	r3, r2
 800cc36:	781b      	ldrb	r3, [r3, #0]
 800cc38:	77fb      	strb	r3, [r7, #31]

		if (coarseIndex == startIndex) {
 800cc3a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cc3c:	697b      	ldr	r3, [r7, #20]
 800cc3e:	429a      	cmp	r2, r3
 800cc40:	d11e      	bne.n	800cc80 <get_next_good_spad+0x94>
			/* locate the bit position of the provided current
			 * spad bit before iterating */
			dataByte >>= fineOffset;
 800cc42:	7ffa      	ldrb	r2, [r7, #31]
 800cc44:	693b      	ldr	r3, [r7, #16]
 800cc46:	fa42 f303 	asr.w	r3, r2, r3
 800cc4a:	77fb      	strb	r3, [r7, #31]
			fineIndex = fineOffset;
 800cc4c:	693b      	ldr	r3, [r7, #16]
 800cc4e:	623b      	str	r3, [r7, #32]
		}

		while (fineIndex < cSpadsPerByte) {
 800cc50:	e016      	b.n	800cc80 <get_next_good_spad+0x94>
			if ((dataByte & 0x1) == 1) {
 800cc52:	7ffb      	ldrb	r3, [r7, #31]
 800cc54:	f003 0301 	and.w	r3, r3, #1
 800cc58:	2b00      	cmp	r3, #0
 800cc5a:	d00b      	beq.n	800cc74 <get_next_good_spad+0x88>
				success = 1;
 800cc5c:	2301      	movs	r3, #1
 800cc5e:	77bb      	strb	r3, [r7, #30]
				*next = coarseIndex * cSpadsPerByte + fineIndex;
 800cc60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc62:	69ba      	ldr	r2, [r7, #24]
 800cc64:	fb03 f202 	mul.w	r2, r3, r2
 800cc68:	6a3b      	ldr	r3, [r7, #32]
 800cc6a:	4413      	add	r3, r2
 800cc6c:	461a      	mov	r2, r3
 800cc6e:	683b      	ldr	r3, [r7, #0]
 800cc70:	601a      	str	r2, [r3, #0]
				break;
 800cc72:	e009      	b.n	800cc88 <get_next_good_spad+0x9c>
			}
			dataByte >>= 1;
 800cc74:	7ffb      	ldrb	r3, [r7, #31]
 800cc76:	085b      	lsrs	r3, r3, #1
 800cc78:	77fb      	strb	r3, [r7, #31]
			fineIndex++;
 800cc7a:	6a3b      	ldr	r3, [r7, #32]
 800cc7c:	3301      	adds	r3, #1
 800cc7e:	623b      	str	r3, [r7, #32]
		while (fineIndex < cSpadsPerByte) {
 800cc80:	6a3a      	ldr	r2, [r7, #32]
 800cc82:	69bb      	ldr	r3, [r7, #24]
 800cc84:	429a      	cmp	r2, r3
 800cc86:	d3e4      	bcc.n	800cc52 <get_next_good_spad+0x66>
				coarseIndex++) {
 800cc88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc8a:	3301      	adds	r3, #1
 800cc8c:	627b      	str	r3, [r7, #36]	; 0x24
	for (coarseIndex = startIndex; ((coarseIndex < size) && !success);
 800cc8e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cc90:	68bb      	ldr	r3, [r7, #8]
 800cc92:	429a      	cmp	r2, r3
 800cc94:	d202      	bcs.n	800cc9c <get_next_good_spad+0xb0>
 800cc96:	7fbb      	ldrb	r3, [r7, #30]
 800cc98:	2b00      	cmp	r3, #0
 800cc9a:	d0c7      	beq.n	800cc2c <get_next_good_spad+0x40>
		}
	}
}
 800cc9c:	bf00      	nop
 800cc9e:	372c      	adds	r7, #44	; 0x2c
 800cca0:	46bd      	mov	sp, r7
 800cca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cca6:	4770      	bx	lr

0800cca8 <is_aperture>:


uint8_t is_aperture(uint32_t spadIndex)
{
 800cca8:	b480      	push	{r7}
 800ccaa:	b085      	sub	sp, #20
 800ccac:	af00      	add	r7, sp, #0
 800ccae:	6078      	str	r0, [r7, #4]
	/*
	 * This function reports if a given spad index is an aperture SPAD by
	 * deriving the quadrant.
	 */
	uint32_t quadrant;
	uint8_t isAperture = 1;
 800ccb0:	2301      	movs	r3, #1
 800ccb2:	73fb      	strb	r3, [r7, #15]
	quadrant = spadIndex >> 6;
 800ccb4:	687b      	ldr	r3, [r7, #4]
 800ccb6:	099b      	lsrs	r3, r3, #6
 800ccb8:	60bb      	str	r3, [r7, #8]
	if (refArrayQuadrants[quadrant] == REF_ARRAY_SPAD_0)
 800ccba:	4a07      	ldr	r2, [pc, #28]	; (800ccd8 <is_aperture+0x30>)
 800ccbc:	68bb      	ldr	r3, [r7, #8]
 800ccbe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ccc2:	2b00      	cmp	r3, #0
 800ccc4:	d101      	bne.n	800ccca <is_aperture+0x22>
		isAperture = 0;
 800ccc6:	2300      	movs	r3, #0
 800ccc8:	73fb      	strb	r3, [r7, #15]

	return isAperture;
 800ccca:	7bfb      	ldrb	r3, [r7, #15]
}
 800cccc:	4618      	mov	r0, r3
 800ccce:	3714      	adds	r7, #20
 800ccd0:	46bd      	mov	sp, r7
 800ccd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccd6:	4770      	bx	lr
 800ccd8:	200002b8 	.word	0x200002b8

0800ccdc <enable_spad_bit>:


VL53L0X_Error enable_spad_bit(uint8_t spadArray[], uint32_t size,
	uint32_t spadIndex)
{
 800ccdc:	b480      	push	{r7}
 800ccde:	b089      	sub	sp, #36	; 0x24
 800cce0:	af00      	add	r7, sp, #0
 800cce2:	60f8      	str	r0, [r7, #12]
 800cce4:	60b9      	str	r1, [r7, #8]
 800cce6:	607a      	str	r2, [r7, #4]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 800cce8:	2300      	movs	r3, #0
 800ccea:	77fb      	strb	r3, [r7, #31]
	uint32_t cSpadsPerByte = 8;
 800ccec:	2308      	movs	r3, #8
 800ccee:	61bb      	str	r3, [r7, #24]
	uint32_t coarseIndex;
	uint32_t fineIndex;

	coarseIndex = spadIndex / cSpadsPerByte;
 800ccf0:	687a      	ldr	r2, [r7, #4]
 800ccf2:	69bb      	ldr	r3, [r7, #24]
 800ccf4:	fbb2 f3f3 	udiv	r3, r2, r3
 800ccf8:	617b      	str	r3, [r7, #20]
	fineIndex = spadIndex % cSpadsPerByte;
 800ccfa:	687b      	ldr	r3, [r7, #4]
 800ccfc:	69ba      	ldr	r2, [r7, #24]
 800ccfe:	fbb3 f2f2 	udiv	r2, r3, r2
 800cd02:	69b9      	ldr	r1, [r7, #24]
 800cd04:	fb01 f202 	mul.w	r2, r1, r2
 800cd08:	1a9b      	subs	r3, r3, r2
 800cd0a:	613b      	str	r3, [r7, #16]
	if (coarseIndex >= size)
 800cd0c:	697a      	ldr	r2, [r7, #20]
 800cd0e:	68bb      	ldr	r3, [r7, #8]
 800cd10:	429a      	cmp	r2, r3
 800cd12:	d302      	bcc.n	800cd1a <enable_spad_bit+0x3e>
		status = VL53L0X_ERROR_REF_SPAD_INIT;
 800cd14:	23ce      	movs	r3, #206	; 0xce
 800cd16:	77fb      	strb	r3, [r7, #31]
 800cd18:	e010      	b.n	800cd3c <enable_spad_bit+0x60>
	else
		spadArray[coarseIndex] |= (1 << fineIndex);
 800cd1a:	68fa      	ldr	r2, [r7, #12]
 800cd1c:	697b      	ldr	r3, [r7, #20]
 800cd1e:	4413      	add	r3, r2
 800cd20:	781b      	ldrb	r3, [r3, #0]
 800cd22:	b25a      	sxtb	r2, r3
 800cd24:	2101      	movs	r1, #1
 800cd26:	693b      	ldr	r3, [r7, #16]
 800cd28:	fa01 f303 	lsl.w	r3, r1, r3
 800cd2c:	b25b      	sxtb	r3, r3
 800cd2e:	4313      	orrs	r3, r2
 800cd30:	b259      	sxtb	r1, r3
 800cd32:	68fa      	ldr	r2, [r7, #12]
 800cd34:	697b      	ldr	r3, [r7, #20]
 800cd36:	4413      	add	r3, r2
 800cd38:	b2ca      	uxtb	r2, r1
 800cd3a:	701a      	strb	r2, [r3, #0]

	return status;
 800cd3c:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800cd40:	4618      	mov	r0, r3
 800cd42:	3724      	adds	r7, #36	; 0x24
 800cd44:	46bd      	mov	sp, r7
 800cd46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd4a:	4770      	bx	lr

0800cd4c <set_ref_spad_map>:

	return status;
}

VL53L0X_Error set_ref_spad_map(VL53L0X_DEV Dev, uint8_t *refSpadArray)
{
 800cd4c:	b580      	push	{r7, lr}
 800cd4e:	b084      	sub	sp, #16
 800cd50:	af00      	add	r7, sp, #0
 800cd52:	6078      	str	r0, [r7, #4]
 800cd54:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_WriteMulti(Dev,
 800cd56:	2306      	movs	r3, #6
 800cd58:	683a      	ldr	r2, [r7, #0]
 800cd5a:	21b0      	movs	r1, #176	; 0xb0
 800cd5c:	6878      	ldr	r0, [r7, #4]
 800cd5e:	f003 f8bb 	bl	800fed8 <VL53L0X_WriteMulti>
 800cd62:	4603      	mov	r3, r0
 800cd64:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_GLOBAL_CONFIG_SPAD_ENABLES_REF_0,
				refSpadArray, 6);
	return status;
 800cd66:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800cd6a:	4618      	mov	r0, r3
 800cd6c:	3710      	adds	r7, #16
 800cd6e:	46bd      	mov	sp, r7
 800cd70:	bd80      	pop	{r7, pc}

0800cd72 <get_ref_spad_map>:

VL53L0X_Error get_ref_spad_map(VL53L0X_DEV Dev, uint8_t *refSpadArray)
{
 800cd72:	b580      	push	{r7, lr}
 800cd74:	b084      	sub	sp, #16
 800cd76:	af00      	add	r7, sp, #0
 800cd78:	6078      	str	r0, [r7, #4]
 800cd7a:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_ReadMulti(Dev,
 800cd7c:	2306      	movs	r3, #6
 800cd7e:	683a      	ldr	r2, [r7, #0]
 800cd80:	21b0      	movs	r1, #176	; 0xb0
 800cd82:	6878      	ldr	r0, [r7, #4]
 800cd84:	f003 f8d8 	bl	800ff38 <VL53L0X_ReadMulti>
 800cd88:	4603      	mov	r3, r0
 800cd8a:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_GLOBAL_CONFIG_SPAD_ENABLES_REF_0,
				refSpadArray,
				6);
	return status;
 800cd8c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800cd90:	4618      	mov	r0, r3
 800cd92:	3710      	adds	r7, #16
 800cd94:	46bd      	mov	sp, r7
 800cd96:	bd80      	pop	{r7, pc}

0800cd98 <enable_ref_spads>:
				uint32_t size,
				uint32_t start,
				uint32_t offset,
				uint32_t spadCount,
				uint32_t *lastSpad)
{
 800cd98:	b580      	push	{r7, lr}
 800cd9a:	b08c      	sub	sp, #48	; 0x30
 800cd9c:	af00      	add	r7, sp, #0
 800cd9e:	60f8      	str	r0, [r7, #12]
 800cda0:	607a      	str	r2, [r7, #4]
 800cda2:	603b      	str	r3, [r7, #0]
 800cda4:	460b      	mov	r3, r1
 800cda6:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 800cda8:	2300      	movs	r3, #0
 800cdaa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint32_t index;
	uint32_t i;
	int32_t nextGoodSpad = offset;
 800cdae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cdb0:	61fb      	str	r3, [r7, #28]
	 *
	 * This function applies to only aperture or only non-aperture spads.
	 * Checks are performed to ensure this.
	 */

	currentSpad = offset;
 800cdb2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cdb4:	623b      	str	r3, [r7, #32]
	for (index = 0; index < spadCount; index++) {
 800cdb6:	2300      	movs	r3, #0
 800cdb8:	62bb      	str	r3, [r7, #40]	; 0x28
 800cdba:	e02b      	b.n	800ce14 <enable_ref_spads+0x7c>
		get_next_good_spad(goodSpadArray, size, currentSpad,
 800cdbc:	f107 031c 	add.w	r3, r7, #28
 800cdc0:	6a3a      	ldr	r2, [r7, #32]
 800cdc2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800cdc4:	6878      	ldr	r0, [r7, #4]
 800cdc6:	f7ff ff11 	bl	800cbec <get_next_good_spad>
			&nextGoodSpad);

		if (nextGoodSpad == -1) {
 800cdca:	69fb      	ldr	r3, [r7, #28]
 800cdcc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cdd0:	d103      	bne.n	800cdda <enable_ref_spads+0x42>
			status = VL53L0X_ERROR_REF_SPAD_INIT;
 800cdd2:	23ce      	movs	r3, #206	; 0xce
 800cdd4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			break;
 800cdd8:	e020      	b.n	800ce1c <enable_ref_spads+0x84>
		}

		/* Confirm that the next good SPAD is non-aperture */
		if (is_aperture(start + nextGoodSpad) != apertureSpads) {
 800cdda:	69fb      	ldr	r3, [r7, #28]
 800cddc:	461a      	mov	r2, r3
 800cdde:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cde0:	4413      	add	r3, r2
 800cde2:	4618      	mov	r0, r3
 800cde4:	f7ff ff60 	bl	800cca8 <is_aperture>
 800cde8:	4603      	mov	r3, r0
 800cdea:	461a      	mov	r2, r3
 800cdec:	7afb      	ldrb	r3, [r7, #11]
 800cdee:	4293      	cmp	r3, r2
 800cdf0:	d003      	beq.n	800cdfa <enable_ref_spads+0x62>
			/* if we can't get the required number of good aperture
			 * spads from the current quadrant then this is an error
			 */
			status = VL53L0X_ERROR_REF_SPAD_INIT;
 800cdf2:	23ce      	movs	r3, #206	; 0xce
 800cdf4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			break;
 800cdf8:	e010      	b.n	800ce1c <enable_ref_spads+0x84>
		}
		currentSpad = (uint32_t)nextGoodSpad;
 800cdfa:	69fb      	ldr	r3, [r7, #28]
 800cdfc:	623b      	str	r3, [r7, #32]
		enable_spad_bit(spadArray, size, currentSpad);
 800cdfe:	6a3a      	ldr	r2, [r7, #32]
 800ce00:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800ce02:	6838      	ldr	r0, [r7, #0]
 800ce04:	f7ff ff6a 	bl	800ccdc <enable_spad_bit>
		currentSpad++;
 800ce08:	6a3b      	ldr	r3, [r7, #32]
 800ce0a:	3301      	adds	r3, #1
 800ce0c:	623b      	str	r3, [r7, #32]
	for (index = 0; index < spadCount; index++) {
 800ce0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce10:	3301      	adds	r3, #1
 800ce12:	62bb      	str	r3, [r7, #40]	; 0x28
 800ce14:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ce16:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ce18:	429a      	cmp	r2, r3
 800ce1a:	d3cf      	bcc.n	800cdbc <enable_ref_spads+0x24>
	}
	*lastSpad = currentSpad;
 800ce1c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ce1e:	6a3a      	ldr	r2, [r7, #32]
 800ce20:	601a      	str	r2, [r3, #0]

	if (status == VL53L0X_ERROR_NONE)
 800ce22:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800ce26:	2b00      	cmp	r3, #0
 800ce28:	d106      	bne.n	800ce38 <enable_ref_spads+0xa0>
		status = set_ref_spad_map(Dev, spadArray);
 800ce2a:	6839      	ldr	r1, [r7, #0]
 800ce2c:	68f8      	ldr	r0, [r7, #12]
 800ce2e:	f7ff ff8d 	bl	800cd4c <set_ref_spad_map>
 800ce32:	4603      	mov	r3, r0
 800ce34:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f


	if (status == VL53L0X_ERROR_NONE) {
 800ce38:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800ce3c:	2b00      	cmp	r3, #0
 800ce3e:	d121      	bne.n	800ce84 <enable_ref_spads+0xec>
		status = get_ref_spad_map(Dev, checkSpadArray);
 800ce40:	f107 0314 	add.w	r3, r7, #20
 800ce44:	4619      	mov	r1, r3
 800ce46:	68f8      	ldr	r0, [r7, #12]
 800ce48:	f7ff ff93 	bl	800cd72 <get_ref_spad_map>
 800ce4c:	4603      	mov	r3, r0
 800ce4e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

		i = 0;
 800ce52:	2300      	movs	r3, #0
 800ce54:	627b      	str	r3, [r7, #36]	; 0x24

		/* Compare spad maps. If not equal report error. */
		while (i < size) {
 800ce56:	e011      	b.n	800ce7c <enable_ref_spads+0xe4>
			if (spadArray[i] != checkSpadArray[i]) {
 800ce58:	683a      	ldr	r2, [r7, #0]
 800ce5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce5c:	4413      	add	r3, r2
 800ce5e:	781a      	ldrb	r2, [r3, #0]
 800ce60:	f107 0114 	add.w	r1, r7, #20
 800ce64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce66:	440b      	add	r3, r1
 800ce68:	781b      	ldrb	r3, [r3, #0]
 800ce6a:	429a      	cmp	r2, r3
 800ce6c:	d003      	beq.n	800ce76 <enable_ref_spads+0xde>
				status = VL53L0X_ERROR_REF_SPAD_INIT;
 800ce6e:	23ce      	movs	r3, #206	; 0xce
 800ce70:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				break;
 800ce74:	e006      	b.n	800ce84 <enable_ref_spads+0xec>
			}
			i++;
 800ce76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce78:	3301      	adds	r3, #1
 800ce7a:	627b      	str	r3, [r7, #36]	; 0x24
		while (i < size) {
 800ce7c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ce7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce80:	429a      	cmp	r2, r3
 800ce82:	d3e9      	bcc.n	800ce58 <enable_ref_spads+0xc0>
		}
	}
	return status;
 800ce84:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 800ce88:	4618      	mov	r0, r3
 800ce8a:	3730      	adds	r7, #48	; 0x30
 800ce8c:	46bd      	mov	sp, r7
 800ce8e:	bd80      	pop	{r7, pc}

0800ce90 <perform_ref_signal_measurement>:


VL53L0X_Error perform_ref_signal_measurement(VL53L0X_DEV Dev,
		uint16_t *refSignalRate)
{
 800ce90:	b580      	push	{r7, lr}
 800ce92:	b08a      	sub	sp, #40	; 0x28
 800ce94:	af00      	add	r7, sp, #0
 800ce96:	6078      	str	r0, [r7, #4]
 800ce98:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 800ce9a:	2300      	movs	r3, #0
 800ce9c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	VL53L0X_RangingMeasurementData_t rangingMeasurementData;

	uint8_t SequenceConfig = 0;
 800cea0:	2300      	movs	r3, #0
 800cea2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 800cea6:	687b      	ldr	r3, [r7, #4]
 800cea8:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 800ceac:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	/*
	 * This function performs a reference signal rate measurement.
	 */
	if (status == VL53L0X_ERROR_NONE)
 800ceb0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800ceb4:	2b00      	cmp	r3, #0
 800ceb6:	d107      	bne.n	800cec8 <perform_ref_signal_measurement+0x38>
		status = VL53L0X_WrByte(Dev,
 800ceb8:	22c0      	movs	r2, #192	; 0xc0
 800ceba:	2101      	movs	r1, #1
 800cebc:	6878      	ldr	r0, [r7, #4]
 800cebe:	f003 f867 	bl	800ff90 <VL53L0X_WrByte>
 800cec2:	4603      	mov	r3, r0
 800cec4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0xC0);

	if (status == VL53L0X_ERROR_NONE)
 800cec8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800cecc:	2b00      	cmp	r3, #0
 800cece:	d108      	bne.n	800cee2 <perform_ref_signal_measurement+0x52>
		status = VL53L0X_PerformSingleRangingMeasurement(Dev,
 800ced0:	f107 0308 	add.w	r3, r7, #8
 800ced4:	4619      	mov	r1, r3
 800ced6:	6878      	ldr	r0, [r7, #4]
 800ced8:	f7ff fc18 	bl	800c70c <VL53L0X_PerformSingleRangingMeasurement>
 800cedc:	4603      	mov	r3, r0
 800cede:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				&rangingMeasurementData);

	if (status == VL53L0X_ERROR_NONE)
 800cee2:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800cee6:	2b00      	cmp	r3, #0
 800cee8:	d107      	bne.n	800cefa <perform_ref_signal_measurement+0x6a>
		status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800ceea:	2201      	movs	r2, #1
 800ceec:	21ff      	movs	r1, #255	; 0xff
 800ceee:	6878      	ldr	r0, [r7, #4]
 800cef0:	f003 f84e 	bl	800ff90 <VL53L0X_WrByte>
 800cef4:	4603      	mov	r3, r0
 800cef6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (status == VL53L0X_ERROR_NONE)
 800cefa:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800cefe:	2b00      	cmp	r3, #0
 800cf00:	d107      	bne.n	800cf12 <perform_ref_signal_measurement+0x82>
		status = VL53L0X_RdWord(Dev,
 800cf02:	683a      	ldr	r2, [r7, #0]
 800cf04:	21b6      	movs	r1, #182	; 0xb6
 800cf06:	6878      	ldr	r0, [r7, #4]
 800cf08:	f003 f8ee 	bl	80100e8 <VL53L0X_RdWord>
 800cf0c:	4603      	mov	r3, r0
 800cf0e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			VL53L0X_REG_RESULT_PEAK_SIGNAL_RATE_REF,
			refSignalRate);

	if (status == VL53L0X_ERROR_NONE)
 800cf12:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800cf16:	2b00      	cmp	r3, #0
 800cf18:	d107      	bne.n	800cf2a <perform_ref_signal_measurement+0x9a>
		status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800cf1a:	2200      	movs	r2, #0
 800cf1c:	21ff      	movs	r1, #255	; 0xff
 800cf1e:	6878      	ldr	r0, [r7, #4]
 800cf20:	f003 f836 	bl	800ff90 <VL53L0X_WrByte>
 800cf24:	4603      	mov	r3, r0
 800cf26:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (status == VL53L0X_ERROR_NONE) {
 800cf2a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800cf2e:	2b00      	cmp	r3, #0
 800cf30:	d112      	bne.n	800cf58 <perform_ref_signal_measurement+0xc8>
		/* restore the previous Sequence Config */
		status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 800cf32:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800cf36:	461a      	mov	r2, r3
 800cf38:	2101      	movs	r1, #1
 800cf3a:	6878      	ldr	r0, [r7, #4]
 800cf3c:	f003 f828 	bl	800ff90 <VL53L0X_WrByte>
 800cf40:	4603      	mov	r3, r0
 800cf42:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				SequenceConfig);
		if (status == VL53L0X_ERROR_NONE)
 800cf46:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800cf4a:	2b00      	cmp	r3, #0
 800cf4c:	d104      	bne.n	800cf58 <perform_ref_signal_measurement+0xc8>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 800cf4e:	687b      	ldr	r3, [r7, #4]
 800cf50:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800cf54:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
	}

	return status;
 800cf58:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800cf5c:	4618      	mov	r0, r3
 800cf5e:	3728      	adds	r7, #40	; 0x28
 800cf60:	46bd      	mov	sp, r7
 800cf62:	bd80      	pop	{r7, pc}

0800cf64 <VL53L0X_perform_ref_spad_management>:

VL53L0X_Error VL53L0X_perform_ref_spad_management(VL53L0X_DEV Dev,
				uint32_t *refSpadCount,
				uint8_t *isApertureSpads)
{
 800cf64:	b590      	push	{r4, r7, lr}
 800cf66:	b09d      	sub	sp, #116	; 0x74
 800cf68:	af06      	add	r7, sp, #24
 800cf6a:	60f8      	str	r0, [r7, #12]
 800cf6c:	60b9      	str	r1, [r7, #8]
 800cf6e:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800cf70:	2300      	movs	r3, #0
 800cf72:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	uint8_t lastSpadArray[6];
	uint8_t startSelect = 0xB4;
 800cf76:	23b4      	movs	r3, #180	; 0xb4
 800cf78:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
	uint32_t minimumSpadCount = 3;
 800cf7c:	2303      	movs	r3, #3
 800cf7e:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t maxSpadCount = 44;
 800cf80:	232c      	movs	r3, #44	; 0x2c
 800cf82:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t currentSpadIndex = 0;
 800cf84:	2300      	movs	r3, #0
 800cf86:	653b      	str	r3, [r7, #80]	; 0x50
	uint32_t lastSpadIndex = 0;
 800cf88:	2300      	movs	r3, #0
 800cf8a:	61bb      	str	r3, [r7, #24]
	int32_t nextGoodSpad = 0;
 800cf8c:	2300      	movs	r3, #0
 800cf8e:	617b      	str	r3, [r7, #20]
	uint16_t targetRefRate = 0x0A00; /* 20 MCPS in 9:7 format */
 800cf90:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 800cf94:	85fb      	strh	r3, [r7, #46]	; 0x2e
	uint16_t peakSignalRateRef;
	uint32_t needAptSpads = 0;
 800cf96:	2300      	movs	r3, #0
 800cf98:	64fb      	str	r3, [r7, #76]	; 0x4c
	uint32_t index = 0;
 800cf9a:	2300      	movs	r3, #0
 800cf9c:	64bb      	str	r3, [r7, #72]	; 0x48
	uint32_t spadArraySize = 6;
 800cf9e:	2306      	movs	r3, #6
 800cfa0:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t signalRateDiff = 0;
 800cfa2:	2300      	movs	r3, #0
 800cfa4:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t lastSignalRateDiff = 0;
 800cfa6:	2300      	movs	r3, #0
 800cfa8:	647b      	str	r3, [r7, #68]	; 0x44
	uint8_t complete = 0;
 800cfaa:	2300      	movs	r3, #0
 800cfac:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
	uint8_t VhvSettings = 0;
 800cfb0:	2300      	movs	r3, #0
 800cfb2:	747b      	strb	r3, [r7, #17]
	uint8_t PhaseCal = 0;
 800cfb4:	2300      	movs	r3, #0
 800cfb6:	743b      	strb	r3, [r7, #16]
	uint32_t refSpadCount_int = 0;
 800cfb8:	2300      	movs	r3, #0
 800cfba:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint8_t	 isApertureSpads_int = 0;
 800cfbc:	2300      	movs	r3, #0
 800cfbe:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	 * of the non-aperture quadrant and runs in to the adjacent aperture
	 * quadrant.
	 */


	targetRefRate = PALDevDataGet(Dev, targetRefRate);
 800cfc2:	68fb      	ldr	r3, [r7, #12]
 800cfc4:	f8b3 313c 	ldrh.w	r3, [r3, #316]	; 0x13c
 800cfc8:	85fb      	strh	r3, [r7, #46]	; 0x2e
	 * This is a short term implementation. The good spad map will be
	 * provided as an input.
	 * Note that there are 6 bytes. Only the first 44 bits will be used to
	 * represent spads.
	 */
	for (index = 0; index < spadArraySize; index++)
 800cfca:	2300      	movs	r3, #0
 800cfcc:	64bb      	str	r3, [r7, #72]	; 0x48
 800cfce:	e009      	b.n	800cfe4 <VL53L0X_perform_ref_spad_management+0x80>
		Dev->Data.SpadData.RefSpadEnables[index] = 0;
 800cfd0:	68fa      	ldr	r2, [r7, #12]
 800cfd2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800cfd4:	4413      	add	r3, r2
 800cfd6:	f503 7392 	add.w	r3, r3, #292	; 0x124
 800cfda:	2200      	movs	r2, #0
 800cfdc:	701a      	strb	r2, [r3, #0]
	for (index = 0; index < spadArraySize; index++)
 800cfde:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800cfe0:	3301      	adds	r3, #1
 800cfe2:	64bb      	str	r3, [r7, #72]	; 0x48
 800cfe4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800cfe6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cfe8:	429a      	cmp	r2, r3
 800cfea:	d3f1      	bcc.n	800cfd0 <VL53L0X_perform_ref_spad_management+0x6c>


	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800cfec:	2201      	movs	r2, #1
 800cfee:	21ff      	movs	r1, #255	; 0xff
 800cff0:	68f8      	ldr	r0, [r7, #12]
 800cff2:	f002 ffcd 	bl	800ff90 <VL53L0X_WrByte>
 800cff6:	4603      	mov	r3, r0
 800cff8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	if (Status == VL53L0X_ERROR_NONE)
 800cffc:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800d000:	2b00      	cmp	r3, #0
 800d002:	d107      	bne.n	800d014 <VL53L0X_perform_ref_spad_management+0xb0>
		Status = VL53L0X_WrByte(Dev,
 800d004:	2200      	movs	r2, #0
 800d006:	214f      	movs	r1, #79	; 0x4f
 800d008:	68f8      	ldr	r0, [r7, #12]
 800d00a:	f002 ffc1 	bl	800ff90 <VL53L0X_WrByte>
 800d00e:	4603      	mov	r3, r0
 800d010:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_REG_DYNAMIC_SPAD_REF_EN_START_OFFSET, 0x00);

	if (Status == VL53L0X_ERROR_NONE)
 800d014:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800d018:	2b00      	cmp	r3, #0
 800d01a:	d107      	bne.n	800d02c <VL53L0X_perform_ref_spad_management+0xc8>
		Status = VL53L0X_WrByte(Dev,
 800d01c:	222c      	movs	r2, #44	; 0x2c
 800d01e:	214e      	movs	r1, #78	; 0x4e
 800d020:	68f8      	ldr	r0, [r7, #12]
 800d022:	f002 ffb5 	bl	800ff90 <VL53L0X_WrByte>
 800d026:	4603      	mov	r3, r0
 800d028:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_REG_DYNAMIC_SPAD_NUM_REQUESTED_REF_SPAD, 0x2C);

	if (Status == VL53L0X_ERROR_NONE)
 800d02c:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800d030:	2b00      	cmp	r3, #0
 800d032:	d107      	bne.n	800d044 <VL53L0X_perform_ref_spad_management+0xe0>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800d034:	2200      	movs	r2, #0
 800d036:	21ff      	movs	r1, #255	; 0xff
 800d038:	68f8      	ldr	r0, [r7, #12]
 800d03a:	f002 ffa9 	bl	800ff90 <VL53L0X_WrByte>
 800d03e:	4603      	mov	r3, r0
 800d040:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	if (Status == VL53L0X_ERROR_NONE)
 800d044:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800d048:	2b00      	cmp	r3, #0
 800d04a:	d109      	bne.n	800d060 <VL53L0X_perform_ref_spad_management+0xfc>
		Status = VL53L0X_WrByte(Dev,
 800d04c:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 800d050:	461a      	mov	r2, r3
 800d052:	21b6      	movs	r1, #182	; 0xb6
 800d054:	68f8      	ldr	r0, [r7, #12]
 800d056:	f002 ff9b 	bl	800ff90 <VL53L0X_WrByte>
 800d05a:	4603      	mov	r3, r0
 800d05c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_REG_GLOBAL_CONFIG_REF_EN_START_SELECT,
			startSelect);


	if (Status == VL53L0X_ERROR_NONE)
 800d060:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800d064:	2b00      	cmp	r3, #0
 800d066:	d107      	bne.n	800d078 <VL53L0X_perform_ref_spad_management+0x114>
		Status = VL53L0X_WrByte(Dev,
 800d068:	2200      	movs	r2, #0
 800d06a:	2180      	movs	r1, #128	; 0x80
 800d06c:	68f8      	ldr	r0, [r7, #12]
 800d06e:	f002 ff8f 	bl	800ff90 <VL53L0X_WrByte>
 800d072:	4603      	mov	r3, r0
 800d074:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
				VL53L0X_REG_POWER_MANAGEMENT_GO1_POWER_FORCE, 0);

	/* Perform ref calibration */
	if (Status == VL53L0X_ERROR_NONE)
 800d078:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800d07c:	2b00      	cmp	r3, #0
 800d07e:	d10a      	bne.n	800d096 <VL53L0X_perform_ref_spad_management+0x132>
		Status = VL53L0X_perform_ref_calibration(Dev, &VhvSettings,
 800d080:	f107 0210 	add.w	r2, r7, #16
 800d084:	f107 0111 	add.w	r1, r7, #17
 800d088:	2300      	movs	r3, #0
 800d08a:	68f8      	ldr	r0, [r7, #12]
 800d08c:	f000 fbbb 	bl	800d806 <VL53L0X_perform_ref_calibration>
 800d090:	4603      	mov	r3, r0
 800d092:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			&PhaseCal, 0);

	if (Status == VL53L0X_ERROR_NONE) {
 800d096:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800d09a:	2b00      	cmp	r3, #0
 800d09c:	d121      	bne.n	800d0e2 <VL53L0X_perform_ref_spad_management+0x17e>
		/* Enable Minimum NON-APERTURE Spads */
		currentSpadIndex = 0;
 800d09e:	2300      	movs	r3, #0
 800d0a0:	653b      	str	r3, [r7, #80]	; 0x50
		lastSpadIndex = currentSpadIndex;
 800d0a2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d0a4:	61bb      	str	r3, [r7, #24]
		needAptSpads = 0;
 800d0a6:	2300      	movs	r3, #0
 800d0a8:	64fb      	str	r3, [r7, #76]	; 0x4c
		Status = enable_ref_spads(Dev,
 800d0aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d0ac:	b2d9      	uxtb	r1, r3
					needAptSpads,
					Dev->Data.SpadData.RefGoodSpadMap,
 800d0ae:	68fb      	ldr	r3, [r7, #12]
 800d0b0:	f503 7095 	add.w	r0, r3, #298	; 0x12a
					Dev->Data.SpadData.RefSpadEnables,
 800d0b4:	68fb      	ldr	r3, [r7, #12]
 800d0b6:	f503 7492 	add.w	r4, r3, #292	; 0x124
		Status = enable_ref_spads(Dev,
 800d0ba:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 800d0be:	f107 0218 	add.w	r2, r7, #24
 800d0c2:	9204      	str	r2, [sp, #16]
 800d0c4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d0c6:	9203      	str	r2, [sp, #12]
 800d0c8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800d0ca:	9202      	str	r2, [sp, #8]
 800d0cc:	9301      	str	r3, [sp, #4]
 800d0ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d0d0:	9300      	str	r3, [sp, #0]
 800d0d2:	4623      	mov	r3, r4
 800d0d4:	4602      	mov	r2, r0
 800d0d6:	68f8      	ldr	r0, [r7, #12]
 800d0d8:	f7ff fe5e 	bl	800cd98 <enable_ref_spads>
 800d0dc:	4603      	mov	r3, r0
 800d0de:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					currentSpadIndex,
					minimumSpadCount,
					&lastSpadIndex);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800d0e2:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800d0e6:	2b00      	cmp	r3, #0
 800d0e8:	d174      	bne.n	800d1d4 <VL53L0X_perform_ref_spad_management+0x270>
		currentSpadIndex = lastSpadIndex;
 800d0ea:	69bb      	ldr	r3, [r7, #24]
 800d0ec:	653b      	str	r3, [r7, #80]	; 0x50

		Status = perform_ref_signal_measurement(Dev,
 800d0ee:	f107 0312 	add.w	r3, r7, #18
 800d0f2:	4619      	mov	r1, r3
 800d0f4:	68f8      	ldr	r0, [r7, #12]
 800d0f6:	f7ff fecb 	bl	800ce90 <perform_ref_signal_measurement>
 800d0fa:	4603      	mov	r3, r0
 800d0fc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			&peakSignalRateRef);
		if ((Status == VL53L0X_ERROR_NONE) &&
 800d100:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800d104:	2b00      	cmp	r3, #0
 800d106:	d161      	bne.n	800d1cc <VL53L0X_perform_ref_spad_management+0x268>
			(peakSignalRateRef > targetRefRate)) {
 800d108:	8a7b      	ldrh	r3, [r7, #18]
		if ((Status == VL53L0X_ERROR_NONE) &&
 800d10a:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800d10c:	429a      	cmp	r2, r3
 800d10e:	d25d      	bcs.n	800d1cc <VL53L0X_perform_ref_spad_management+0x268>
			/* Signal rate measurement too high,
			 * switch to APERTURE SPADs */

			for (index = 0; index < spadArraySize; index++)
 800d110:	2300      	movs	r3, #0
 800d112:	64bb      	str	r3, [r7, #72]	; 0x48
 800d114:	e009      	b.n	800d12a <VL53L0X_perform_ref_spad_management+0x1c6>
				Dev->Data.SpadData.RefSpadEnables[index] = 0;
 800d116:	68fa      	ldr	r2, [r7, #12]
 800d118:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d11a:	4413      	add	r3, r2
 800d11c:	f503 7392 	add.w	r3, r3, #292	; 0x124
 800d120:	2200      	movs	r2, #0
 800d122:	701a      	strb	r2, [r3, #0]
			for (index = 0; index < spadArraySize; index++)
 800d124:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d126:	3301      	adds	r3, #1
 800d128:	64bb      	str	r3, [r7, #72]	; 0x48
 800d12a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d12c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d12e:	429a      	cmp	r2, r3
 800d130:	d3f1      	bcc.n	800d116 <VL53L0X_perform_ref_spad_management+0x1b2>


			/* Increment to the first APERTURE spad */
			while ((is_aperture(startSelect + currentSpadIndex)
 800d132:	e002      	b.n	800d13a <VL53L0X_perform_ref_spad_management+0x1d6>
				== 0) && (currentSpadIndex < maxSpadCount)) {
				currentSpadIndex++;
 800d134:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d136:	3301      	adds	r3, #1
 800d138:	653b      	str	r3, [r7, #80]	; 0x50
			while ((is_aperture(startSelect + currentSpadIndex)
 800d13a:	f897 203a 	ldrb.w	r2, [r7, #58]	; 0x3a
 800d13e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d140:	4413      	add	r3, r2
 800d142:	4618      	mov	r0, r3
 800d144:	f7ff fdb0 	bl	800cca8 <is_aperture>
 800d148:	4603      	mov	r3, r0
 800d14a:	2b00      	cmp	r3, #0
 800d14c:	d103      	bne.n	800d156 <VL53L0X_perform_ref_spad_management+0x1f2>
				== 0) && (currentSpadIndex < maxSpadCount)) {
 800d14e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800d150:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d152:	429a      	cmp	r2, r3
 800d154:	d3ee      	bcc.n	800d134 <VL53L0X_perform_ref_spad_management+0x1d0>
			}

			needAptSpads = 1;
 800d156:	2301      	movs	r3, #1
 800d158:	64fb      	str	r3, [r7, #76]	; 0x4c

			Status = enable_ref_spads(Dev,
 800d15a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d15c:	b2d9      	uxtb	r1, r3
					needAptSpads,
					Dev->Data.SpadData.RefGoodSpadMap,
 800d15e:	68fb      	ldr	r3, [r7, #12]
 800d160:	f503 7095 	add.w	r0, r3, #298	; 0x12a
					Dev->Data.SpadData.RefSpadEnables,
 800d164:	68fb      	ldr	r3, [r7, #12]
 800d166:	f503 7492 	add.w	r4, r3, #292	; 0x124
			Status = enable_ref_spads(Dev,
 800d16a:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 800d16e:	f107 0218 	add.w	r2, r7, #24
 800d172:	9204      	str	r2, [sp, #16]
 800d174:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d176:	9203      	str	r2, [sp, #12]
 800d178:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800d17a:	9202      	str	r2, [sp, #8]
 800d17c:	9301      	str	r3, [sp, #4]
 800d17e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d180:	9300      	str	r3, [sp, #0]
 800d182:	4623      	mov	r3, r4
 800d184:	4602      	mov	r2, r0
 800d186:	68f8      	ldr	r0, [r7, #12]
 800d188:	f7ff fe06 	bl	800cd98 <enable_ref_spads>
 800d18c:	4603      	mov	r3, r0
 800d18e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					startSelect,
					currentSpadIndex,
					minimumSpadCount,
					&lastSpadIndex);

			if (Status == VL53L0X_ERROR_NONE) {
 800d192:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800d196:	2b00      	cmp	r3, #0
 800d198:	d11b      	bne.n	800d1d2 <VL53L0X_perform_ref_spad_management+0x26e>
				currentSpadIndex = lastSpadIndex;
 800d19a:	69bb      	ldr	r3, [r7, #24]
 800d19c:	653b      	str	r3, [r7, #80]	; 0x50
				Status = perform_ref_signal_measurement(Dev,
 800d19e:	f107 0312 	add.w	r3, r7, #18
 800d1a2:	4619      	mov	r1, r3
 800d1a4:	68f8      	ldr	r0, [r7, #12]
 800d1a6:	f7ff fe73 	bl	800ce90 <perform_ref_signal_measurement>
 800d1aa:	4603      	mov	r3, r0
 800d1ac:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
						&peakSignalRateRef);

				if ((Status == VL53L0X_ERROR_NONE) &&
 800d1b0:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800d1b4:	2b00      	cmp	r3, #0
 800d1b6:	d10c      	bne.n	800d1d2 <VL53L0X_perform_ref_spad_management+0x26e>
					(peakSignalRateRef > targetRefRate)) {
 800d1b8:	8a7b      	ldrh	r3, [r7, #18]
				if ((Status == VL53L0X_ERROR_NONE) &&
 800d1ba:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800d1bc:	429a      	cmp	r2, r3
 800d1be:	d208      	bcs.n	800d1d2 <VL53L0X_perform_ref_spad_management+0x26e>
					 * setting the minimum number of
					 * APERTURE spads. Can do no more
					 * therefore set the min number of
					 * aperture spads as the result.
					 */
					isApertureSpads_int = 1;
 800d1c0:	2301      	movs	r3, #1
 800d1c2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
					refSpadCount_int = minimumSpadCount;
 800d1c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d1c8:	63fb      	str	r3, [r7, #60]	; 0x3c
			if (Status == VL53L0X_ERROR_NONE) {
 800d1ca:	e002      	b.n	800d1d2 <VL53L0X_perform_ref_spad_management+0x26e>
				}
			}
		} else {
			needAptSpads = 0;
 800d1cc:	2300      	movs	r3, #0
 800d1ce:	64fb      	str	r3, [r7, #76]	; 0x4c
 800d1d0:	e000      	b.n	800d1d4 <VL53L0X_perform_ref_spad_management+0x270>
			if (Status == VL53L0X_ERROR_NONE) {
 800d1d2:	bf00      	nop
		}
	}

	if ((Status == VL53L0X_ERROR_NONE) &&
 800d1d4:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800d1d8:	2b00      	cmp	r3, #0
 800d1da:	f040 80af 	bne.w	800d33c <VL53L0X_perform_ref_spad_management+0x3d8>
		(peakSignalRateRef < targetRefRate)) {
 800d1de:	8a7b      	ldrh	r3, [r7, #18]
	if ((Status == VL53L0X_ERROR_NONE) &&
 800d1e0:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800d1e2:	429a      	cmp	r2, r3
 800d1e4:	f240 80aa 	bls.w	800d33c <VL53L0X_perform_ref_spad_management+0x3d8>
		/* At this point, the minimum number of either aperture
		 * or non-aperture spads have been set. Proceed to add
		 * spads and perform measurements until the target
		 * reference is reached.
		 */
		isApertureSpads_int = needAptSpads;
 800d1e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d1ea:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
		refSpadCount_int	= minimumSpadCount;
 800d1ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d1f0:	63fb      	str	r3, [r7, #60]	; 0x3c

		memcpy(lastSpadArray, Dev->Data.SpadData.RefSpadEnables,
 800d1f2:	68fb      	ldr	r3, [r7, #12]
 800d1f4:	f503 7192 	add.w	r1, r3, #292	; 0x124
 800d1f8:	f107 031c 	add.w	r3, r7, #28
 800d1fc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d1fe:	4618      	mov	r0, r3
 800d200:	f003 f820 	bl	8010244 <memcpy>
				spadArraySize);
		lastSignalRateDiff = abs(peakSignalRateRef -
 800d204:	8a7b      	ldrh	r3, [r7, #18]
 800d206:	461a      	mov	r2, r3
 800d208:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800d20a:	1ad3      	subs	r3, r2, r3
 800d20c:	2b00      	cmp	r3, #0
 800d20e:	bfb8      	it	lt
 800d210:	425b      	neglt	r3, r3
 800d212:	647b      	str	r3, [r7, #68]	; 0x44
			targetRefRate);
		complete = 0;
 800d214:	2300      	movs	r3, #0
 800d216:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

		while (!complete) {
 800d21a:	e086      	b.n	800d32a <VL53L0X_perform_ref_spad_management+0x3c6>
			get_next_good_spad(
				Dev->Data.SpadData.RefGoodSpadMap,
 800d21c:	68fb      	ldr	r3, [r7, #12]
 800d21e:	f503 7095 	add.w	r0, r3, #298	; 0x12a
			get_next_good_spad(
 800d222:	f107 0314 	add.w	r3, r7, #20
 800d226:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800d228:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d22a:	f7ff fcdf 	bl	800cbec <get_next_good_spad>
				spadArraySize, currentSpadIndex,
				&nextGoodSpad);

			if (nextGoodSpad == -1) {
 800d22e:	697b      	ldr	r3, [r7, #20]
 800d230:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d234:	d103      	bne.n	800d23e <VL53L0X_perform_ref_spad_management+0x2da>
				Status = VL53L0X_ERROR_REF_SPAD_INIT;
 800d236:	23ce      	movs	r3, #206	; 0xce
 800d238:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
				break;
 800d23c:	e07e      	b.n	800d33c <VL53L0X_perform_ref_spad_management+0x3d8>
			}

			/* Cannot combine Aperture and Non-Aperture spads, so
			 * ensure the current spad is of the correct type.
			 */
			if (is_aperture((uint32_t)startSelect + nextGoodSpad) !=
 800d23e:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 800d242:	697a      	ldr	r2, [r7, #20]
 800d244:	4413      	add	r3, r2
 800d246:	4618      	mov	r0, r3
 800d248:	f7ff fd2e 	bl	800cca8 <is_aperture>
 800d24c:	4603      	mov	r3, r0
 800d24e:	461a      	mov	r2, r3
 800d250:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d252:	4293      	cmp	r3, r2
 800d254:	d003      	beq.n	800d25e <VL53L0X_perform_ref_spad_management+0x2fa>
					needAptSpads) {
				/* At this point we have enabled the maximum
				 * number of Aperture spads.
				 */
				complete = 1;
 800d256:	2301      	movs	r3, #1
 800d258:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
				break;
 800d25c:	e06e      	b.n	800d33c <VL53L0X_perform_ref_spad_management+0x3d8>
			}

			(refSpadCount_int)++;
 800d25e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d260:	3301      	adds	r3, #1
 800d262:	63fb      	str	r3, [r7, #60]	; 0x3c

			currentSpadIndex = nextGoodSpad;
 800d264:	697b      	ldr	r3, [r7, #20]
 800d266:	653b      	str	r3, [r7, #80]	; 0x50
			Status = enable_spad_bit(
					Dev->Data.SpadData.RefSpadEnables,
 800d268:	68fb      	ldr	r3, [r7, #12]
 800d26a:	f503 7392 	add.w	r3, r3, #292	; 0x124
			Status = enable_spad_bit(
 800d26e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800d270:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d272:	4618      	mov	r0, r3
 800d274:	f7ff fd32 	bl	800ccdc <enable_spad_bit>
 800d278:	4603      	mov	r3, r0
 800d27a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					spadArraySize, currentSpadIndex);

			if (Status == VL53L0X_ERROR_NONE) {
 800d27e:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800d282:	2b00      	cmp	r3, #0
 800d284:	d10c      	bne.n	800d2a0 <VL53L0X_perform_ref_spad_management+0x33c>
				currentSpadIndex++;
 800d286:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d288:	3301      	adds	r3, #1
 800d28a:	653b      	str	r3, [r7, #80]	; 0x50
				/* Proceed to apply the additional spad and
				 * perform measurement. */
				Status = set_ref_spad_map(Dev,
					Dev->Data.SpadData.RefSpadEnables);
 800d28c:	68fb      	ldr	r3, [r7, #12]
 800d28e:	f503 7392 	add.w	r3, r3, #292	; 0x124
				Status = set_ref_spad_map(Dev,
 800d292:	4619      	mov	r1, r3
 800d294:	68f8      	ldr	r0, [r7, #12]
 800d296:	f7ff fd59 	bl	800cd4c <set_ref_spad_map>
 800d29a:	4603      	mov	r3, r0
 800d29c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			}

			if (Status != VL53L0X_ERROR_NONE)
 800d2a0:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800d2a4:	2b00      	cmp	r3, #0
 800d2a6:	d146      	bne.n	800d336 <VL53L0X_perform_ref_spad_management+0x3d2>
				break;

			Status = perform_ref_signal_measurement(Dev,
 800d2a8:	f107 0312 	add.w	r3, r7, #18
 800d2ac:	4619      	mov	r1, r3
 800d2ae:	68f8      	ldr	r0, [r7, #12]
 800d2b0:	f7ff fdee 	bl	800ce90 <perform_ref_signal_measurement>
 800d2b4:	4603      	mov	r3, r0
 800d2b6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					&peakSignalRateRef);

			if (Status != VL53L0X_ERROR_NONE)
 800d2ba:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800d2be:	2b00      	cmp	r3, #0
 800d2c0:	d13b      	bne.n	800d33a <VL53L0X_perform_ref_spad_management+0x3d6>
				break;

			signalRateDiff = abs(peakSignalRateRef - targetRefRate);
 800d2c2:	8a7b      	ldrh	r3, [r7, #18]
 800d2c4:	461a      	mov	r2, r3
 800d2c6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800d2c8:	1ad3      	subs	r3, r2, r3
 800d2ca:	2b00      	cmp	r3, #0
 800d2cc:	bfb8      	it	lt
 800d2ce:	425b      	neglt	r3, r3
 800d2d0:	627b      	str	r3, [r7, #36]	; 0x24

			if (peakSignalRateRef > targetRefRate) {
 800d2d2:	8a7b      	ldrh	r3, [r7, #18]
 800d2d4:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800d2d6:	429a      	cmp	r2, r3
 800d2d8:	d21c      	bcs.n	800d314 <VL53L0X_perform_ref_spad_management+0x3b0>
				/* Select the spad map that provides the
				 * measurement closest to the target rate,
				 * either above or below it.
				 */
				if (signalRateDiff > lastSignalRateDiff) {
 800d2da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d2dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d2de:	429a      	cmp	r2, r3
 800d2e0:	d914      	bls.n	800d30c <VL53L0X_perform_ref_spad_management+0x3a8>
					/* Previous spad map produced a closer
					 * measurement, so choose this. */
					Status = set_ref_spad_map(Dev,
 800d2e2:	f107 031c 	add.w	r3, r7, #28
 800d2e6:	4619      	mov	r1, r3
 800d2e8:	68f8      	ldr	r0, [r7, #12]
 800d2ea:	f7ff fd2f 	bl	800cd4c <set_ref_spad_map>
 800d2ee:	4603      	mov	r3, r0
 800d2f0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
							lastSpadArray);
					memcpy(
					Dev->Data.SpadData.RefSpadEnables,
 800d2f4:	68fb      	ldr	r3, [r7, #12]
 800d2f6:	f503 7392 	add.w	r3, r3, #292	; 0x124
					memcpy(
 800d2fa:	f107 011c 	add.w	r1, r7, #28
 800d2fe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d300:	4618      	mov	r0, r3
 800d302:	f002 ff9f 	bl	8010244 <memcpy>
					lastSpadArray, spadArraySize);

					(refSpadCount_int)--;
 800d306:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d308:	3b01      	subs	r3, #1
 800d30a:	63fb      	str	r3, [r7, #60]	; 0x3c
				}
				complete = 1;
 800d30c:	2301      	movs	r3, #1
 800d30e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d312:	e00a      	b.n	800d32a <VL53L0X_perform_ref_spad_management+0x3c6>
			} else {
				/* Continue to add spads */
				lastSignalRateDiff = signalRateDiff;
 800d314:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d316:	647b      	str	r3, [r7, #68]	; 0x44
				memcpy(lastSpadArray,
					Dev->Data.SpadData.RefSpadEnables,
 800d318:	68fb      	ldr	r3, [r7, #12]
 800d31a:	f503 7192 	add.w	r1, r3, #292	; 0x124
				memcpy(lastSpadArray,
 800d31e:	f107 031c 	add.w	r3, r7, #28
 800d322:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d324:	4618      	mov	r0, r3
 800d326:	f002 ff8d 	bl	8010244 <memcpy>
		while (!complete) {
 800d32a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800d32e:	2b00      	cmp	r3, #0
 800d330:	f43f af74 	beq.w	800d21c <VL53L0X_perform_ref_spad_management+0x2b8>
 800d334:	e002      	b.n	800d33c <VL53L0X_perform_ref_spad_management+0x3d8>
				break;
 800d336:	bf00      	nop
 800d338:	e000      	b.n	800d33c <VL53L0X_perform_ref_spad_management+0x3d8>
				break;
 800d33a:	bf00      	nop
			}

		} /* while */
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800d33c:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800d340:	2b00      	cmp	r3, #0
 800d342:	d115      	bne.n	800d370 <VL53L0X_perform_ref_spad_management+0x40c>
		*refSpadCount = refSpadCount_int;
 800d344:	68bb      	ldr	r3, [r7, #8]
 800d346:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800d348:	601a      	str	r2, [r3, #0]
		*isApertureSpads = isApertureSpads_int;
 800d34a:	687b      	ldr	r3, [r7, #4]
 800d34c:	f897 203b 	ldrb.w	r2, [r7, #59]	; 0x3b
 800d350:	701a      	strb	r2, [r3, #0]

		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 1);
 800d352:	68fb      	ldr	r3, [r7, #12]
 800d354:	2201      	movs	r2, #1
 800d356:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800d35a:	68bb      	ldr	r3, [r7, #8]
 800d35c:	681b      	ldr	r3, [r3, #0]
 800d35e:	b2da      	uxtb	r2, r3
 800d360:	68fb      	ldr	r3, [r7, #12]
 800d362:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
			ReferenceSpadCount, (uint8_t)(*refSpadCount));
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800d366:	687b      	ldr	r3, [r7, #4]
 800d368:	781a      	ldrb	r2, [r3, #0]
 800d36a:	68fb      	ldr	r3, [r7, #12]
 800d36c:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
			ReferenceSpadType, *isApertureSpads);
	}

	return Status;
 800d370:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
}
 800d374:	4618      	mov	r0, r3
 800d376:	375c      	adds	r7, #92	; 0x5c
 800d378:	46bd      	mov	sp, r7
 800d37a:	bd90      	pop	{r4, r7, pc}

0800d37c <VL53L0X_set_reference_spads>:

VL53L0X_Error VL53L0X_set_reference_spads(VL53L0X_DEV Dev,
				 uint32_t count, uint8_t isApertureSpads)
{
 800d37c:	b590      	push	{r4, r7, lr}
 800d37e:	b093      	sub	sp, #76	; 0x4c
 800d380:	af06      	add	r7, sp, #24
 800d382:	60f8      	str	r0, [r7, #12]
 800d384:	60b9      	str	r1, [r7, #8]
 800d386:	4613      	mov	r3, r2
 800d388:	71fb      	strb	r3, [r7, #7]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800d38a:	2300      	movs	r3, #0
 800d38c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint32_t currentSpadIndex = 0;
 800d390:	2300      	movs	r3, #0
 800d392:	62bb      	str	r3, [r7, #40]	; 0x28
	uint8_t startSelect = 0xB4;
 800d394:	23b4      	movs	r3, #180	; 0xb4
 800d396:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	uint32_t spadArraySize = 6;
 800d39a:	2306      	movs	r3, #6
 800d39c:	61fb      	str	r3, [r7, #28]
	uint32_t maxSpadCount = 44;
 800d39e:	232c      	movs	r3, #44	; 0x2c
 800d3a0:	61bb      	str	r3, [r7, #24]
	 * aperture or
	 * non-aperture, as requested.
	 * The good spad map will be applied.
	 */

	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800d3a2:	2201      	movs	r2, #1
 800d3a4:	21ff      	movs	r1, #255	; 0xff
 800d3a6:	68f8      	ldr	r0, [r7, #12]
 800d3a8:	f002 fdf2 	bl	800ff90 <VL53L0X_WrByte>
 800d3ac:	4603      	mov	r3, r0
 800d3ae:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	if (Status == VL53L0X_ERROR_NONE)
 800d3b2:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800d3b6:	2b00      	cmp	r3, #0
 800d3b8:	d107      	bne.n	800d3ca <VL53L0X_set_reference_spads+0x4e>
		Status = VL53L0X_WrByte(Dev,
 800d3ba:	2200      	movs	r2, #0
 800d3bc:	214f      	movs	r1, #79	; 0x4f
 800d3be:	68f8      	ldr	r0, [r7, #12]
 800d3c0:	f002 fde6 	bl	800ff90 <VL53L0X_WrByte>
 800d3c4:	4603      	mov	r3, r0
 800d3c6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L0X_REG_DYNAMIC_SPAD_REF_EN_START_OFFSET, 0x00);

	if (Status == VL53L0X_ERROR_NONE)
 800d3ca:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800d3ce:	2b00      	cmp	r3, #0
 800d3d0:	d107      	bne.n	800d3e2 <VL53L0X_set_reference_spads+0x66>
		Status = VL53L0X_WrByte(Dev,
 800d3d2:	222c      	movs	r2, #44	; 0x2c
 800d3d4:	214e      	movs	r1, #78	; 0x4e
 800d3d6:	68f8      	ldr	r0, [r7, #12]
 800d3d8:	f002 fdda 	bl	800ff90 <VL53L0X_WrByte>
 800d3dc:	4603      	mov	r3, r0
 800d3de:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L0X_REG_DYNAMIC_SPAD_NUM_REQUESTED_REF_SPAD, 0x2C);

	if (Status == VL53L0X_ERROR_NONE)
 800d3e2:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800d3e6:	2b00      	cmp	r3, #0
 800d3e8:	d107      	bne.n	800d3fa <VL53L0X_set_reference_spads+0x7e>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800d3ea:	2200      	movs	r2, #0
 800d3ec:	21ff      	movs	r1, #255	; 0xff
 800d3ee:	68f8      	ldr	r0, [r7, #12]
 800d3f0:	f002 fdce 	bl	800ff90 <VL53L0X_WrByte>
 800d3f4:	4603      	mov	r3, r0
 800d3f6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	if (Status == VL53L0X_ERROR_NONE)
 800d3fa:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800d3fe:	2b00      	cmp	r3, #0
 800d400:	d109      	bne.n	800d416 <VL53L0X_set_reference_spads+0x9a>
		Status = VL53L0X_WrByte(Dev,
 800d402:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800d406:	461a      	mov	r2, r3
 800d408:	21b6      	movs	r1, #182	; 0xb6
 800d40a:	68f8      	ldr	r0, [r7, #12]
 800d40c:	f002 fdc0 	bl	800ff90 <VL53L0X_WrByte>
 800d410:	4603      	mov	r3, r0
 800d412:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L0X_REG_GLOBAL_CONFIG_REF_EN_START_SELECT,
			startSelect);

	for (index = 0; index < spadArraySize; index++)
 800d416:	2300      	movs	r3, #0
 800d418:	627b      	str	r3, [r7, #36]	; 0x24
 800d41a:	e009      	b.n	800d430 <VL53L0X_set_reference_spads+0xb4>
		Dev->Data.SpadData.RefSpadEnables[index] = 0;
 800d41c:	68fa      	ldr	r2, [r7, #12]
 800d41e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d420:	4413      	add	r3, r2
 800d422:	f503 7392 	add.w	r3, r3, #292	; 0x124
 800d426:	2200      	movs	r2, #0
 800d428:	701a      	strb	r2, [r3, #0]
	for (index = 0; index < spadArraySize; index++)
 800d42a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d42c:	3301      	adds	r3, #1
 800d42e:	627b      	str	r3, [r7, #36]	; 0x24
 800d430:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d432:	69fb      	ldr	r3, [r7, #28]
 800d434:	429a      	cmp	r2, r3
 800d436:	d3f1      	bcc.n	800d41c <VL53L0X_set_reference_spads+0xa0>

	if (isApertureSpads) {
 800d438:	79fb      	ldrb	r3, [r7, #7]
 800d43a:	2b00      	cmp	r3, #0
 800d43c:	d011      	beq.n	800d462 <VL53L0X_set_reference_spads+0xe6>
		/* Increment to the first APERTURE spad */
		while ((is_aperture(startSelect + currentSpadIndex) == 0) &&
 800d43e:	e002      	b.n	800d446 <VL53L0X_set_reference_spads+0xca>
			  (currentSpadIndex < maxSpadCount)) {
			currentSpadIndex++;
 800d440:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d442:	3301      	adds	r3, #1
 800d444:	62bb      	str	r3, [r7, #40]	; 0x28
		while ((is_aperture(startSelect + currentSpadIndex) == 0) &&
 800d446:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 800d44a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d44c:	4413      	add	r3, r2
 800d44e:	4618      	mov	r0, r3
 800d450:	f7ff fc2a 	bl	800cca8 <is_aperture>
 800d454:	4603      	mov	r3, r0
 800d456:	2b00      	cmp	r3, #0
 800d458:	d103      	bne.n	800d462 <VL53L0X_set_reference_spads+0xe6>
 800d45a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d45c:	69bb      	ldr	r3, [r7, #24]
 800d45e:	429a      	cmp	r2, r3
 800d460:	d3ee      	bcc.n	800d440 <VL53L0X_set_reference_spads+0xc4>
		}
	}
	Status = enable_ref_spads(Dev,
				isApertureSpads,
				Dev->Data.SpadData.RefGoodSpadMap,
 800d462:	68fb      	ldr	r3, [r7, #12]
 800d464:	f503 7095 	add.w	r0, r3, #298	; 0x12a
				Dev->Data.SpadData.RefSpadEnables,
 800d468:	68fb      	ldr	r3, [r7, #12]
 800d46a:	f503 7492 	add.w	r4, r3, #292	; 0x124
	Status = enable_ref_spads(Dev,
 800d46e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800d472:	79f9      	ldrb	r1, [r7, #7]
 800d474:	f107 0214 	add.w	r2, r7, #20
 800d478:	9204      	str	r2, [sp, #16]
 800d47a:	68ba      	ldr	r2, [r7, #8]
 800d47c:	9203      	str	r2, [sp, #12]
 800d47e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d480:	9202      	str	r2, [sp, #8]
 800d482:	9301      	str	r3, [sp, #4]
 800d484:	69fb      	ldr	r3, [r7, #28]
 800d486:	9300      	str	r3, [sp, #0]
 800d488:	4623      	mov	r3, r4
 800d48a:	4602      	mov	r2, r0
 800d48c:	68f8      	ldr	r0, [r7, #12]
 800d48e:	f7ff fc83 	bl	800cd98 <enable_ref_spads>
 800d492:	4603      	mov	r3, r0
 800d494:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				startSelect,
				currentSpadIndex,
				count,
				&lastSpadIndex);

	if (Status == VL53L0X_ERROR_NONE) {
 800d498:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800d49c:	2b00      	cmp	r3, #0
 800d49e:	d10c      	bne.n	800d4ba <VL53L0X_set_reference_spads+0x13e>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 1);
 800d4a0:	68fb      	ldr	r3, [r7, #12]
 800d4a2:	2201      	movs	r2, #1
 800d4a4:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800d4a8:	68bb      	ldr	r3, [r7, #8]
 800d4aa:	b2da      	uxtb	r2, r3
 800d4ac:	68fb      	ldr	r3, [r7, #12]
 800d4ae:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
			ReferenceSpadCount, (uint8_t)(count));
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800d4b2:	68fb      	ldr	r3, [r7, #12]
 800d4b4:	79fa      	ldrb	r2, [r7, #7]
 800d4b6:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
			ReferenceSpadType, isApertureSpads);
	}

	return Status;
 800d4ba:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 800d4be:	4618      	mov	r0, r3
 800d4c0:	3734      	adds	r7, #52	; 0x34
 800d4c2:	46bd      	mov	sp, r7
 800d4c4:	bd90      	pop	{r4, r7, pc}

0800d4c6 <VL53L0X_perform_single_ref_calibration>:
}


VL53L0X_Error VL53L0X_perform_single_ref_calibration(VL53L0X_DEV Dev,
		uint8_t vhv_init_byte)
{
 800d4c6:	b580      	push	{r7, lr}
 800d4c8:	b084      	sub	sp, #16
 800d4ca:	af00      	add	r7, sp, #0
 800d4cc:	6078      	str	r0, [r7, #4]
 800d4ce:	460b      	mov	r3, r1
 800d4d0:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800d4d2:	2300      	movs	r3, #0
 800d4d4:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 800d4d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d4da:	2b00      	cmp	r3, #0
 800d4dc:	d10a      	bne.n	800d4f4 <VL53L0X_perform_single_ref_calibration+0x2e>
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START,
 800d4de:	78fb      	ldrb	r3, [r7, #3]
 800d4e0:	f043 0301 	orr.w	r3, r3, #1
 800d4e4:	b2db      	uxtb	r3, r3
 800d4e6:	461a      	mov	r2, r3
 800d4e8:	2100      	movs	r1, #0
 800d4ea:	6878      	ldr	r0, [r7, #4]
 800d4ec:	f002 fd50 	bl	800ff90 <VL53L0X_WrByte>
 800d4f0:	4603      	mov	r3, r0
 800d4f2:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_SYSRANGE_MODE_START_STOP |
				vhv_init_byte);

	if (Status == VL53L0X_ERROR_NONE)
 800d4f4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d4f8:	2b00      	cmp	r3, #0
 800d4fa:	d104      	bne.n	800d506 <VL53L0X_perform_single_ref_calibration+0x40>
		Status = VL53L0X_measurement_poll_for_completion(Dev);
 800d4fc:	6878      	ldr	r0, [r7, #4]
 800d4fe:	f000 f9bf 	bl	800d880 <VL53L0X_measurement_poll_for_completion>
 800d502:	4603      	mov	r3, r0
 800d504:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 800d506:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d50a:	2b00      	cmp	r3, #0
 800d50c:	d105      	bne.n	800d51a <VL53L0X_perform_single_ref_calibration+0x54>
		Status = VL53L0X_ClearInterruptMask(Dev, 0);
 800d50e:	2100      	movs	r1, #0
 800d510:	6878      	ldr	r0, [r7, #4]
 800d512:	f7ff fa85 	bl	800ca20 <VL53L0X_ClearInterruptMask>
 800d516:	4603      	mov	r3, r0
 800d518:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 800d51a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d51e:	2b00      	cmp	r3, #0
 800d520:	d106      	bne.n	800d530 <VL53L0X_perform_single_ref_calibration+0x6a>
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START, 0x00);
 800d522:	2200      	movs	r2, #0
 800d524:	2100      	movs	r1, #0
 800d526:	6878      	ldr	r0, [r7, #4]
 800d528:	f002 fd32 	bl	800ff90 <VL53L0X_WrByte>
 800d52c:	4603      	mov	r3, r0
 800d52e:	73fb      	strb	r3, [r7, #15]

	return Status;
 800d530:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800d534:	4618      	mov	r0, r3
 800d536:	3710      	adds	r7, #16
 800d538:	46bd      	mov	sp, r7
 800d53a:	bd80      	pop	{r7, pc}

0800d53c <VL53L0X_ref_calibration_io>:

VL53L0X_Error VL53L0X_ref_calibration_io(VL53L0X_DEV Dev, uint8_t read_not_write,
	uint8_t VhvSettings, uint8_t PhaseCal,
	uint8_t *pVhvSettings, uint8_t *pPhaseCal,
	const uint8_t vhv_enable, const uint8_t phase_enable)
{
 800d53c:	b580      	push	{r7, lr}
 800d53e:	b084      	sub	sp, #16
 800d540:	af00      	add	r7, sp, #0
 800d542:	6078      	str	r0, [r7, #4]
 800d544:	4608      	mov	r0, r1
 800d546:	4611      	mov	r1, r2
 800d548:	461a      	mov	r2, r3
 800d54a:	4603      	mov	r3, r0
 800d54c:	70fb      	strb	r3, [r7, #3]
 800d54e:	460b      	mov	r3, r1
 800d550:	70bb      	strb	r3, [r7, #2]
 800d552:	4613      	mov	r3, r2
 800d554:	707b      	strb	r3, [r7, #1]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800d556:	2300      	movs	r3, #0
 800d558:	73fb      	strb	r3, [r7, #15]
	uint8_t PhaseCalint = 0;
 800d55a:	2300      	movs	r3, #0
 800d55c:	73bb      	strb	r3, [r7, #14]

	/* Read VHV from device */
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800d55e:	2201      	movs	r2, #1
 800d560:	21ff      	movs	r1, #255	; 0xff
 800d562:	6878      	ldr	r0, [r7, #4]
 800d564:	f002 fd14 	bl	800ff90 <VL53L0X_WrByte>
 800d568:	4603      	mov	r3, r0
 800d56a:	461a      	mov	r2, r3
 800d56c:	7bfb      	ldrb	r3, [r7, #15]
 800d56e:	4313      	orrs	r3, r2
 800d570:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 800d572:	2200      	movs	r2, #0
 800d574:	2100      	movs	r1, #0
 800d576:	6878      	ldr	r0, [r7, #4]
 800d578:	f002 fd0a 	bl	800ff90 <VL53L0X_WrByte>
 800d57c:	4603      	mov	r3, r0
 800d57e:	461a      	mov	r2, r3
 800d580:	7bfb      	ldrb	r3, [r7, #15]
 800d582:	4313      	orrs	r3, r2
 800d584:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800d586:	2200      	movs	r2, #0
 800d588:	21ff      	movs	r1, #255	; 0xff
 800d58a:	6878      	ldr	r0, [r7, #4]
 800d58c:	f002 fd00 	bl	800ff90 <VL53L0X_WrByte>
 800d590:	4603      	mov	r3, r0
 800d592:	461a      	mov	r2, r3
 800d594:	7bfb      	ldrb	r3, [r7, #15]
 800d596:	4313      	orrs	r3, r2
 800d598:	73fb      	strb	r3, [r7, #15]

	if (read_not_write) {
 800d59a:	78fb      	ldrb	r3, [r7, #3]
 800d59c:	2b00      	cmp	r3, #0
 800d59e:	d01e      	beq.n	800d5de <VL53L0X_ref_calibration_io+0xa2>
		if (vhv_enable)
 800d5a0:	f897 3020 	ldrb.w	r3, [r7, #32]
 800d5a4:	2b00      	cmp	r3, #0
 800d5a6:	d009      	beq.n	800d5bc <VL53L0X_ref_calibration_io+0x80>
			Status |= VL53L0X_RdByte(Dev, 0xCB, pVhvSettings);
 800d5a8:	69ba      	ldr	r2, [r7, #24]
 800d5aa:	21cb      	movs	r1, #203	; 0xcb
 800d5ac:	6878      	ldr	r0, [r7, #4]
 800d5ae:	f002 fd71 	bl	8010094 <VL53L0X_RdByte>
 800d5b2:	4603      	mov	r3, r0
 800d5b4:	461a      	mov	r2, r3
 800d5b6:	7bfb      	ldrb	r3, [r7, #15]
 800d5b8:	4313      	orrs	r3, r2
 800d5ba:	73fb      	strb	r3, [r7, #15]
		if (phase_enable)
 800d5bc:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800d5c0:	2b00      	cmp	r3, #0
 800d5c2:	d02a      	beq.n	800d61a <VL53L0X_ref_calibration_io+0xde>
			Status |= VL53L0X_RdByte(Dev, 0xEE, &PhaseCalint);
 800d5c4:	f107 030e 	add.w	r3, r7, #14
 800d5c8:	461a      	mov	r2, r3
 800d5ca:	21ee      	movs	r1, #238	; 0xee
 800d5cc:	6878      	ldr	r0, [r7, #4]
 800d5ce:	f002 fd61 	bl	8010094 <VL53L0X_RdByte>
 800d5d2:	4603      	mov	r3, r0
 800d5d4:	461a      	mov	r2, r3
 800d5d6:	7bfb      	ldrb	r3, [r7, #15]
 800d5d8:	4313      	orrs	r3, r2
 800d5da:	73fb      	strb	r3, [r7, #15]
 800d5dc:	e01d      	b.n	800d61a <VL53L0X_ref_calibration_io+0xde>
	} else {
		if (vhv_enable)
 800d5de:	f897 3020 	ldrb.w	r3, [r7, #32]
 800d5e2:	2b00      	cmp	r3, #0
 800d5e4:	d00a      	beq.n	800d5fc <VL53L0X_ref_calibration_io+0xc0>
			Status |= VL53L0X_WrByte(Dev, 0xCB, VhvSettings);
 800d5e6:	78bb      	ldrb	r3, [r7, #2]
 800d5e8:	461a      	mov	r2, r3
 800d5ea:	21cb      	movs	r1, #203	; 0xcb
 800d5ec:	6878      	ldr	r0, [r7, #4]
 800d5ee:	f002 fccf 	bl	800ff90 <VL53L0X_WrByte>
 800d5f2:	4603      	mov	r3, r0
 800d5f4:	461a      	mov	r2, r3
 800d5f6:	7bfb      	ldrb	r3, [r7, #15]
 800d5f8:	4313      	orrs	r3, r2
 800d5fa:	73fb      	strb	r3, [r7, #15]
		if (phase_enable)
 800d5fc:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800d600:	2b00      	cmp	r3, #0
 800d602:	d00a      	beq.n	800d61a <VL53L0X_ref_calibration_io+0xde>
			Status |= VL53L0X_UpdateByte(Dev, 0xEE, 0x80, PhaseCal);
 800d604:	787b      	ldrb	r3, [r7, #1]
 800d606:	2280      	movs	r2, #128	; 0x80
 800d608:	21ee      	movs	r1, #238	; 0xee
 800d60a:	6878      	ldr	r0, [r7, #4]
 800d60c:	f002 fd0e 	bl	801002c <VL53L0X_UpdateByte>
 800d610:	4603      	mov	r3, r0
 800d612:	461a      	mov	r2, r3
 800d614:	7bfb      	ldrb	r3, [r7, #15]
 800d616:	4313      	orrs	r3, r2
 800d618:	73fb      	strb	r3, [r7, #15]
	}

	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800d61a:	2201      	movs	r2, #1
 800d61c:	21ff      	movs	r1, #255	; 0xff
 800d61e:	6878      	ldr	r0, [r7, #4]
 800d620:	f002 fcb6 	bl	800ff90 <VL53L0X_WrByte>
 800d624:	4603      	mov	r3, r0
 800d626:	461a      	mov	r2, r3
 800d628:	7bfb      	ldrb	r3, [r7, #15]
 800d62a:	4313      	orrs	r3, r2
 800d62c:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 800d62e:	2201      	movs	r2, #1
 800d630:	2100      	movs	r1, #0
 800d632:	6878      	ldr	r0, [r7, #4]
 800d634:	f002 fcac 	bl	800ff90 <VL53L0X_WrByte>
 800d638:	4603      	mov	r3, r0
 800d63a:	461a      	mov	r2, r3
 800d63c:	7bfb      	ldrb	r3, [r7, #15]
 800d63e:	4313      	orrs	r3, r2
 800d640:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800d642:	2200      	movs	r2, #0
 800d644:	21ff      	movs	r1, #255	; 0xff
 800d646:	6878      	ldr	r0, [r7, #4]
 800d648:	f002 fca2 	bl	800ff90 <VL53L0X_WrByte>
 800d64c:	4603      	mov	r3, r0
 800d64e:	461a      	mov	r2, r3
 800d650:	7bfb      	ldrb	r3, [r7, #15]
 800d652:	4313      	orrs	r3, r2
 800d654:	73fb      	strb	r3, [r7, #15]

	*pPhaseCal = (uint8_t)(PhaseCalint&0xEF);
 800d656:	7bbb      	ldrb	r3, [r7, #14]
 800d658:	f023 0310 	bic.w	r3, r3, #16
 800d65c:	b2da      	uxtb	r2, r3
 800d65e:	69fb      	ldr	r3, [r7, #28]
 800d660:	701a      	strb	r2, [r3, #0]

	return Status;
 800d662:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800d666:	4618      	mov	r0, r3
 800d668:	3710      	adds	r7, #16
 800d66a:	46bd      	mov	sp, r7
 800d66c:	bd80      	pop	{r7, pc}

0800d66e <VL53L0X_perform_vhv_calibration>:


VL53L0X_Error VL53L0X_perform_vhv_calibration(VL53L0X_DEV Dev,
	uint8_t *pVhvSettings, const uint8_t get_data_enable,
	const uint8_t restore_config)
{
 800d66e:	b580      	push	{r7, lr}
 800d670:	b08a      	sub	sp, #40	; 0x28
 800d672:	af04      	add	r7, sp, #16
 800d674:	60f8      	str	r0, [r7, #12]
 800d676:	60b9      	str	r1, [r7, #8]
 800d678:	4611      	mov	r1, r2
 800d67a:	461a      	mov	r2, r3
 800d67c:	460b      	mov	r3, r1
 800d67e:	71fb      	strb	r3, [r7, #7]
 800d680:	4613      	mov	r3, r2
 800d682:	71bb      	strb	r3, [r7, #6]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800d684:	2300      	movs	r3, #0
 800d686:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 800d688:	2300      	movs	r3, #0
 800d68a:	75bb      	strb	r3, [r7, #22]
	uint8_t VhvSettings = 0;
 800d68c:	2300      	movs	r3, #0
 800d68e:	757b      	strb	r3, [r7, #21]
	uint8_t PhaseCal = 0;
 800d690:	2300      	movs	r3, #0
 800d692:	753b      	strb	r3, [r7, #20]
	uint8_t PhaseCalInt = 0;
 800d694:	2300      	movs	r3, #0
 800d696:	74fb      	strb	r3, [r7, #19]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	if (restore_config)
 800d698:	79bb      	ldrb	r3, [r7, #6]
 800d69a:	2b00      	cmp	r3, #0
 800d69c:	d003      	beq.n	800d6a6 <VL53L0X_perform_vhv_calibration+0x38>
		SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 800d69e:	68fb      	ldr	r3, [r7, #12]
 800d6a0:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 800d6a4:	75bb      	strb	r3, [r7, #22]

	/* Run VHV */
	Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0x01);
 800d6a6:	2201      	movs	r2, #1
 800d6a8:	2101      	movs	r1, #1
 800d6aa:	68f8      	ldr	r0, [r7, #12]
 800d6ac:	f002 fc70 	bl	800ff90 <VL53L0X_WrByte>
 800d6b0:	4603      	mov	r3, r0
 800d6b2:	75fb      	strb	r3, [r7, #23]

	if (Status == VL53L0X_ERROR_NONE)
 800d6b4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800d6b8:	2b00      	cmp	r3, #0
 800d6ba:	d105      	bne.n	800d6c8 <VL53L0X_perform_vhv_calibration+0x5a>
		Status = VL53L0X_perform_single_ref_calibration(Dev, 0x40);
 800d6bc:	2140      	movs	r1, #64	; 0x40
 800d6be:	68f8      	ldr	r0, [r7, #12]
 800d6c0:	f7ff ff01 	bl	800d4c6 <VL53L0X_perform_single_ref_calibration>
 800d6c4:	4603      	mov	r3, r0
 800d6c6:	75fb      	strb	r3, [r7, #23]

	/* Read VHV from device */
	if ((Status == VL53L0X_ERROR_NONE) && (get_data_enable == 1)) {
 800d6c8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800d6cc:	2b00      	cmp	r3, #0
 800d6ce:	d115      	bne.n	800d6fc <VL53L0X_perform_vhv_calibration+0x8e>
 800d6d0:	79fb      	ldrb	r3, [r7, #7]
 800d6d2:	2b01      	cmp	r3, #1
 800d6d4:	d112      	bne.n	800d6fc <VL53L0X_perform_vhv_calibration+0x8e>
		Status = VL53L0X_ref_calibration_io(Dev, 1,
 800d6d6:	7d39      	ldrb	r1, [r7, #20]
 800d6d8:	7d7a      	ldrb	r2, [r7, #21]
 800d6da:	2300      	movs	r3, #0
 800d6dc:	9303      	str	r3, [sp, #12]
 800d6de:	2301      	movs	r3, #1
 800d6e0:	9302      	str	r3, [sp, #8]
 800d6e2:	f107 0313 	add.w	r3, r7, #19
 800d6e6:	9301      	str	r3, [sp, #4]
 800d6e8:	68bb      	ldr	r3, [r7, #8]
 800d6ea:	9300      	str	r3, [sp, #0]
 800d6ec:	460b      	mov	r3, r1
 800d6ee:	2101      	movs	r1, #1
 800d6f0:	68f8      	ldr	r0, [r7, #12]
 800d6f2:	f7ff ff23 	bl	800d53c <VL53L0X_ref_calibration_io>
 800d6f6:	4603      	mov	r3, r0
 800d6f8:	75fb      	strb	r3, [r7, #23]
 800d6fa:	e002      	b.n	800d702 <VL53L0X_perform_vhv_calibration+0x94>
			VhvSettings, PhaseCal, /* Not used here */
			pVhvSettings, &PhaseCalInt,
			1, 0);
	} else
		*pVhvSettings = 0;
 800d6fc:	68bb      	ldr	r3, [r7, #8]
 800d6fe:	2200      	movs	r2, #0
 800d700:	701a      	strb	r2, [r3, #0]


	if ((Status == VL53L0X_ERROR_NONE) && restore_config) {
 800d702:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800d706:	2b00      	cmp	r3, #0
 800d708:	d112      	bne.n	800d730 <VL53L0X_perform_vhv_calibration+0xc2>
 800d70a:	79bb      	ldrb	r3, [r7, #6]
 800d70c:	2b00      	cmp	r3, #0
 800d70e:	d00f      	beq.n	800d730 <VL53L0X_perform_vhv_calibration+0xc2>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 800d710:	7dbb      	ldrb	r3, [r7, #22]
 800d712:	461a      	mov	r2, r3
 800d714:	2101      	movs	r1, #1
 800d716:	68f8      	ldr	r0, [r7, #12]
 800d718:	f002 fc3a 	bl	800ff90 <VL53L0X_WrByte>
 800d71c:	4603      	mov	r3, r0
 800d71e:	75fb      	strb	r3, [r7, #23]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 800d720:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800d724:	2b00      	cmp	r3, #0
 800d726:	d103      	bne.n	800d730 <VL53L0X_perform_vhv_calibration+0xc2>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 800d728:	68fb      	ldr	r3, [r7, #12]
 800d72a:	7dba      	ldrb	r2, [r7, #22]
 800d72c:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	return Status;
 800d730:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800d734:	4618      	mov	r0, r3
 800d736:	3718      	adds	r7, #24
 800d738:	46bd      	mov	sp, r7
 800d73a:	bd80      	pop	{r7, pc}

0800d73c <VL53L0X_perform_phase_calibration>:

VL53L0X_Error VL53L0X_perform_phase_calibration(VL53L0X_DEV Dev,
	uint8_t *pPhaseCal, const uint8_t get_data_enable,
	const uint8_t restore_config)
{
 800d73c:	b580      	push	{r7, lr}
 800d73e:	b08a      	sub	sp, #40	; 0x28
 800d740:	af04      	add	r7, sp, #16
 800d742:	60f8      	str	r0, [r7, #12]
 800d744:	60b9      	str	r1, [r7, #8]
 800d746:	4611      	mov	r1, r2
 800d748:	461a      	mov	r2, r3
 800d74a:	460b      	mov	r3, r1
 800d74c:	71fb      	strb	r3, [r7, #7]
 800d74e:	4613      	mov	r3, r2
 800d750:	71bb      	strb	r3, [r7, #6]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800d752:	2300      	movs	r3, #0
 800d754:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 800d756:	2300      	movs	r3, #0
 800d758:	75bb      	strb	r3, [r7, #22]
	uint8_t VhvSettings = 0;
 800d75a:	2300      	movs	r3, #0
 800d75c:	757b      	strb	r3, [r7, #21]
	uint8_t PhaseCal = 0;
 800d75e:	2300      	movs	r3, #0
 800d760:	753b      	strb	r3, [r7, #20]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	if (restore_config)
 800d762:	79bb      	ldrb	r3, [r7, #6]
 800d764:	2b00      	cmp	r3, #0
 800d766:	d003      	beq.n	800d770 <VL53L0X_perform_phase_calibration+0x34>
		SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 800d768:	68fb      	ldr	r3, [r7, #12]
 800d76a:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 800d76e:	75bb      	strb	r3, [r7, #22]

	/* Run PhaseCal */
	Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0x02);
 800d770:	2202      	movs	r2, #2
 800d772:	2101      	movs	r1, #1
 800d774:	68f8      	ldr	r0, [r7, #12]
 800d776:	f002 fc0b 	bl	800ff90 <VL53L0X_WrByte>
 800d77a:	4603      	mov	r3, r0
 800d77c:	75fb      	strb	r3, [r7, #23]

	if (Status == VL53L0X_ERROR_NONE)
 800d77e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800d782:	2b00      	cmp	r3, #0
 800d784:	d105      	bne.n	800d792 <VL53L0X_perform_phase_calibration+0x56>
		Status = VL53L0X_perform_single_ref_calibration(Dev, 0x0);
 800d786:	2100      	movs	r1, #0
 800d788:	68f8      	ldr	r0, [r7, #12]
 800d78a:	f7ff fe9c 	bl	800d4c6 <VL53L0X_perform_single_ref_calibration>
 800d78e:	4603      	mov	r3, r0
 800d790:	75fb      	strb	r3, [r7, #23]

	/* Read PhaseCal from device */
	if ((Status == VL53L0X_ERROR_NONE) && (get_data_enable == 1)) {
 800d792:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800d796:	2b00      	cmp	r3, #0
 800d798:	d115      	bne.n	800d7c6 <VL53L0X_perform_phase_calibration+0x8a>
 800d79a:	79fb      	ldrb	r3, [r7, #7]
 800d79c:	2b01      	cmp	r3, #1
 800d79e:	d112      	bne.n	800d7c6 <VL53L0X_perform_phase_calibration+0x8a>
		Status = VL53L0X_ref_calibration_io(Dev, 1,
 800d7a0:	7d39      	ldrb	r1, [r7, #20]
 800d7a2:	7d7a      	ldrb	r2, [r7, #21]
 800d7a4:	2301      	movs	r3, #1
 800d7a6:	9303      	str	r3, [sp, #12]
 800d7a8:	2300      	movs	r3, #0
 800d7aa:	9302      	str	r3, [sp, #8]
 800d7ac:	68bb      	ldr	r3, [r7, #8]
 800d7ae:	9301      	str	r3, [sp, #4]
 800d7b0:	f107 0313 	add.w	r3, r7, #19
 800d7b4:	9300      	str	r3, [sp, #0]
 800d7b6:	460b      	mov	r3, r1
 800d7b8:	2101      	movs	r1, #1
 800d7ba:	68f8      	ldr	r0, [r7, #12]
 800d7bc:	f7ff febe 	bl	800d53c <VL53L0X_ref_calibration_io>
 800d7c0:	4603      	mov	r3, r0
 800d7c2:	75fb      	strb	r3, [r7, #23]
 800d7c4:	e002      	b.n	800d7cc <VL53L0X_perform_phase_calibration+0x90>
			VhvSettings, PhaseCal, /* Not used here */
			&VhvSettingsint, pPhaseCal,
			0, 1);
	} else
		*pPhaseCal = 0;
 800d7c6:	68bb      	ldr	r3, [r7, #8]
 800d7c8:	2200      	movs	r2, #0
 800d7ca:	701a      	strb	r2, [r3, #0]


	if ((Status == VL53L0X_ERROR_NONE) && restore_config) {
 800d7cc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800d7d0:	2b00      	cmp	r3, #0
 800d7d2:	d112      	bne.n	800d7fa <VL53L0X_perform_phase_calibration+0xbe>
 800d7d4:	79bb      	ldrb	r3, [r7, #6]
 800d7d6:	2b00      	cmp	r3, #0
 800d7d8:	d00f      	beq.n	800d7fa <VL53L0X_perform_phase_calibration+0xbe>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 800d7da:	7dbb      	ldrb	r3, [r7, #22]
 800d7dc:	461a      	mov	r2, r3
 800d7de:	2101      	movs	r1, #1
 800d7e0:	68f8      	ldr	r0, [r7, #12]
 800d7e2:	f002 fbd5 	bl	800ff90 <VL53L0X_WrByte>
 800d7e6:	4603      	mov	r3, r0
 800d7e8:	75fb      	strb	r3, [r7, #23]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 800d7ea:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800d7ee:	2b00      	cmp	r3, #0
 800d7f0:	d103      	bne.n	800d7fa <VL53L0X_perform_phase_calibration+0xbe>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 800d7f2:	68fb      	ldr	r3, [r7, #12]
 800d7f4:	7dba      	ldrb	r2, [r7, #22]
 800d7f6:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	return Status;
 800d7fa:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800d7fe:	4618      	mov	r0, r3
 800d800:	3718      	adds	r7, #24
 800d802:	46bd      	mov	sp, r7
 800d804:	bd80      	pop	{r7, pc}

0800d806 <VL53L0X_perform_ref_calibration>:

VL53L0X_Error VL53L0X_perform_ref_calibration(VL53L0X_DEV Dev,
	uint8_t *pVhvSettings, uint8_t *pPhaseCal, uint8_t get_data_enable)
{
 800d806:	b580      	push	{r7, lr}
 800d808:	b086      	sub	sp, #24
 800d80a:	af00      	add	r7, sp, #0
 800d80c:	60f8      	str	r0, [r7, #12]
 800d80e:	60b9      	str	r1, [r7, #8]
 800d810:	607a      	str	r2, [r7, #4]
 800d812:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800d814:	2300      	movs	r3, #0
 800d816:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 800d818:	2300      	movs	r3, #0
 800d81a:	75bb      	strb	r3, [r7, #22]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 800d81c:	68fb      	ldr	r3, [r7, #12]
 800d81e:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 800d822:	75bb      	strb	r3, [r7, #22]

	/* In the following function we don't save the config to optimize
	 * writes on device. Config is saved and restored only once. */
	Status = VL53L0X_perform_vhv_calibration(
 800d824:	78fa      	ldrb	r2, [r7, #3]
 800d826:	2300      	movs	r3, #0
 800d828:	68b9      	ldr	r1, [r7, #8]
 800d82a:	68f8      	ldr	r0, [r7, #12]
 800d82c:	f7ff ff1f 	bl	800d66e <VL53L0X_perform_vhv_calibration>
 800d830:	4603      	mov	r3, r0
 800d832:	75fb      	strb	r3, [r7, #23]
			Dev, pVhvSettings, get_data_enable, 0);


	if (Status == VL53L0X_ERROR_NONE)
 800d834:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800d838:	2b00      	cmp	r3, #0
 800d83a:	d107      	bne.n	800d84c <VL53L0X_perform_ref_calibration+0x46>
		Status = VL53L0X_perform_phase_calibration(
 800d83c:	78fa      	ldrb	r2, [r7, #3]
 800d83e:	2300      	movs	r3, #0
 800d840:	6879      	ldr	r1, [r7, #4]
 800d842:	68f8      	ldr	r0, [r7, #12]
 800d844:	f7ff ff7a 	bl	800d73c <VL53L0X_perform_phase_calibration>
 800d848:	4603      	mov	r3, r0
 800d84a:	75fb      	strb	r3, [r7, #23]
			Dev, pPhaseCal, get_data_enable, 0);


	if (Status == VL53L0X_ERROR_NONE) {
 800d84c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800d850:	2b00      	cmp	r3, #0
 800d852:	d10f      	bne.n	800d874 <VL53L0X_perform_ref_calibration+0x6e>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 800d854:	7dbb      	ldrb	r3, [r7, #22]
 800d856:	461a      	mov	r2, r3
 800d858:	2101      	movs	r1, #1
 800d85a:	68f8      	ldr	r0, [r7, #12]
 800d85c:	f002 fb98 	bl	800ff90 <VL53L0X_WrByte>
 800d860:	4603      	mov	r3, r0
 800d862:	75fb      	strb	r3, [r7, #23]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 800d864:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800d868:	2b00      	cmp	r3, #0
 800d86a:	d103      	bne.n	800d874 <VL53L0X_perform_ref_calibration+0x6e>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 800d86c:	68fb      	ldr	r3, [r7, #12]
 800d86e:	7dba      	ldrb	r2, [r7, #22]
 800d870:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	return Status;
 800d874:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800d878:	4618      	mov	r0, r3
 800d87a:	3718      	adds	r7, #24
 800d87c:	46bd      	mov	sp, r7
 800d87e:	bd80      	pop	{r7, pc}

0800d880 <VL53L0X_measurement_poll_for_completion>:
	}
	return Status;
}

VL53L0X_Error VL53L0X_measurement_poll_for_completion(VL53L0X_DEV Dev)
{
 800d880:	b580      	push	{r7, lr}
 800d882:	b086      	sub	sp, #24
 800d884:	af00      	add	r7, sp, #0
 800d886:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800d888:	2300      	movs	r3, #0
 800d88a:	75fb      	strb	r3, [r7, #23]
	uint8_t NewDataReady = 0;
 800d88c:	2300      	movs	r3, #0
 800d88e:	73fb      	strb	r3, [r7, #15]
	uint32_t LoopNb;

	LOG_FUNCTION_START("");

	LoopNb = 0;
 800d890:	2300      	movs	r3, #0
 800d892:	613b      	str	r3, [r7, #16]

	do {
		Status = VL53L0X_GetMeasurementDataReady(Dev, &NewDataReady);
 800d894:	f107 030f 	add.w	r3, r7, #15
 800d898:	4619      	mov	r1, r3
 800d89a:	6878      	ldr	r0, [r7, #4]
 800d89c:	f7fe fdd2 	bl	800c444 <VL53L0X_GetMeasurementDataReady>
 800d8a0:	4603      	mov	r3, r0
 800d8a2:	75fb      	strb	r3, [r7, #23]
		if (Status != 0)
 800d8a4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800d8a8:	2b00      	cmp	r3, #0
 800d8aa:	d110      	bne.n	800d8ce <VL53L0X_measurement_poll_for_completion+0x4e>
			break; /* the error is set */

		if (NewDataReady == 1)
 800d8ac:	7bfb      	ldrb	r3, [r7, #15]
 800d8ae:	2b01      	cmp	r3, #1
 800d8b0:	d00f      	beq.n	800d8d2 <VL53L0X_measurement_poll_for_completion+0x52>
			break; /* done note that status == 0 */

		LoopNb++;
 800d8b2:	693b      	ldr	r3, [r7, #16]
 800d8b4:	3301      	adds	r3, #1
 800d8b6:	613b      	str	r3, [r7, #16]
		if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP) {
 800d8b8:	693b      	ldr	r3, [r7, #16]
 800d8ba:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800d8be:	d302      	bcc.n	800d8c6 <VL53L0X_measurement_poll_for_completion+0x46>
			Status = VL53L0X_ERROR_TIME_OUT;
 800d8c0:	23f9      	movs	r3, #249	; 0xf9
 800d8c2:	75fb      	strb	r3, [r7, #23]
			break;
 800d8c4:	e006      	b.n	800d8d4 <VL53L0X_measurement_poll_for_completion+0x54>
		}

		VL53L0X_PollingDelay(Dev);
 800d8c6:	6878      	ldr	r0, [r7, #4]
 800d8c8:	f002 fc82 	bl	80101d0 <VL53L0X_PollingDelay>
		Status = VL53L0X_GetMeasurementDataReady(Dev, &NewDataReady);
 800d8cc:	e7e2      	b.n	800d894 <VL53L0X_measurement_poll_for_completion+0x14>
			break; /* the error is set */
 800d8ce:	bf00      	nop
 800d8d0:	e000      	b.n	800d8d4 <VL53L0X_measurement_poll_for_completion+0x54>
			break; /* done note that status == 0 */
 800d8d2:	bf00      	nop
	} while (1);

	LOG_FUNCTION_END(Status);

	return Status;
 800d8d4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800d8d8:	4618      	mov	r0, r3
 800d8da:	3718      	adds	r7, #24
 800d8dc:	46bd      	mov	sp, r7
 800d8de:	bd80      	pop	{r7, pc}

0800d8e0 <VL53L0X_decode_vcsel_period>:


uint8_t VL53L0X_decode_vcsel_period(uint8_t vcsel_period_reg)
{
 800d8e0:	b480      	push	{r7}
 800d8e2:	b085      	sub	sp, #20
 800d8e4:	af00      	add	r7, sp, #0
 800d8e6:	4603      	mov	r3, r0
 800d8e8:	71fb      	strb	r3, [r7, #7]
	/*!
	 * Converts the encoded VCSEL period register value into the real
	 * period in PLL clocks
	 */

	uint8_t vcsel_period_pclks = 0;
 800d8ea:	2300      	movs	r3, #0
 800d8ec:	73fb      	strb	r3, [r7, #15]

	vcsel_period_pclks = (vcsel_period_reg + 1) << 1;
 800d8ee:	79fb      	ldrb	r3, [r7, #7]
 800d8f0:	3301      	adds	r3, #1
 800d8f2:	b2db      	uxtb	r3, r3
 800d8f4:	005b      	lsls	r3, r3, #1
 800d8f6:	73fb      	strb	r3, [r7, #15]

	return vcsel_period_pclks;
 800d8f8:	7bfb      	ldrb	r3, [r7, #15]
}
 800d8fa:	4618      	mov	r0, r3
 800d8fc:	3714      	adds	r7, #20
 800d8fe:	46bd      	mov	sp, r7
 800d900:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d904:	4770      	bx	lr

0800d906 <VL53L0X_encode_vcsel_period>:

uint8_t VL53L0X_encode_vcsel_period(uint8_t vcsel_period_pclks)
{
 800d906:	b480      	push	{r7}
 800d908:	b085      	sub	sp, #20
 800d90a:	af00      	add	r7, sp, #0
 800d90c:	4603      	mov	r3, r0
 800d90e:	71fb      	strb	r3, [r7, #7]
	/*!
	 * Converts the encoded VCSEL period register value into the real period
	 * in PLL clocks
	 */

	uint8_t vcsel_period_reg = 0;
 800d910:	2300      	movs	r3, #0
 800d912:	73fb      	strb	r3, [r7, #15]

	vcsel_period_reg = (vcsel_period_pclks >> 1) - 1;
 800d914:	79fb      	ldrb	r3, [r7, #7]
 800d916:	085b      	lsrs	r3, r3, #1
 800d918:	b2db      	uxtb	r3, r3
 800d91a:	3b01      	subs	r3, #1
 800d91c:	73fb      	strb	r3, [r7, #15]

	return vcsel_period_reg;
 800d91e:	7bfb      	ldrb	r3, [r7, #15]
}
 800d920:	4618      	mov	r0, r3
 800d922:	3714      	adds	r7, #20
 800d924:	46bd      	mov	sp, r7
 800d926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d92a:	4770      	bx	lr

0800d92c <VL53L0X_isqrt>:


uint32_t VL53L0X_isqrt(uint32_t num)
{
 800d92c:	b480      	push	{r7}
 800d92e:	b085      	sub	sp, #20
 800d930:	af00      	add	r7, sp, #0
 800d932:	6078      	str	r0, [r7, #4]
	 * Implements an integer square root
	 *
	 * From: http://en.wikipedia.org/wiki/Methods_of_computing_square_roots
	 */

	uint32_t  res = 0;
 800d934:	2300      	movs	r3, #0
 800d936:	60fb      	str	r3, [r7, #12]
	uint32_t  bit = 1 << 30;
 800d938:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800d93c:	60bb      	str	r3, [r7, #8]
	/* The second-to-top bit is set:
	 *	1 << 14 for 16-bits, 1 << 30 for 32 bits */

	 /* "bit" starts at the highest power of four <= the argument. */
	while (bit > num)
 800d93e:	e002      	b.n	800d946 <VL53L0X_isqrt+0x1a>
		bit >>= 2;
 800d940:	68bb      	ldr	r3, [r7, #8]
 800d942:	089b      	lsrs	r3, r3, #2
 800d944:	60bb      	str	r3, [r7, #8]
	while (bit > num)
 800d946:	68ba      	ldr	r2, [r7, #8]
 800d948:	687b      	ldr	r3, [r7, #4]
 800d94a:	429a      	cmp	r2, r3
 800d94c:	d8f8      	bhi.n	800d940 <VL53L0X_isqrt+0x14>


	while (bit != 0) {
 800d94e:	e017      	b.n	800d980 <VL53L0X_isqrt+0x54>
		if (num >= res + bit) {
 800d950:	68fa      	ldr	r2, [r7, #12]
 800d952:	68bb      	ldr	r3, [r7, #8]
 800d954:	4413      	add	r3, r2
 800d956:	687a      	ldr	r2, [r7, #4]
 800d958:	429a      	cmp	r2, r3
 800d95a:	d30b      	bcc.n	800d974 <VL53L0X_isqrt+0x48>
			num -= res + bit;
 800d95c:	68fa      	ldr	r2, [r7, #12]
 800d95e:	68bb      	ldr	r3, [r7, #8]
 800d960:	4413      	add	r3, r2
 800d962:	687a      	ldr	r2, [r7, #4]
 800d964:	1ad3      	subs	r3, r2, r3
 800d966:	607b      	str	r3, [r7, #4]
			res = (res >> 1) + bit;
 800d968:	68fb      	ldr	r3, [r7, #12]
 800d96a:	085b      	lsrs	r3, r3, #1
 800d96c:	68ba      	ldr	r2, [r7, #8]
 800d96e:	4413      	add	r3, r2
 800d970:	60fb      	str	r3, [r7, #12]
 800d972:	e002      	b.n	800d97a <VL53L0X_isqrt+0x4e>
		} else
			res >>= 1;
 800d974:	68fb      	ldr	r3, [r7, #12]
 800d976:	085b      	lsrs	r3, r3, #1
 800d978:	60fb      	str	r3, [r7, #12]

		bit >>= 2;
 800d97a:	68bb      	ldr	r3, [r7, #8]
 800d97c:	089b      	lsrs	r3, r3, #2
 800d97e:	60bb      	str	r3, [r7, #8]
	while (bit != 0) {
 800d980:	68bb      	ldr	r3, [r7, #8]
 800d982:	2b00      	cmp	r3, #0
 800d984:	d1e4      	bne.n	800d950 <VL53L0X_isqrt+0x24>
	}

	return res;
 800d986:	68fb      	ldr	r3, [r7, #12]
}
 800d988:	4618      	mov	r0, r3
 800d98a:	3714      	adds	r7, #20
 800d98c:	46bd      	mov	sp, r7
 800d98e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d992:	4770      	bx	lr

0800d994 <VL53L0X_device_read_strobe>:
	return res;
}


VL53L0X_Error VL53L0X_device_read_strobe(VL53L0X_DEV Dev)
{
 800d994:	b580      	push	{r7, lr}
 800d996:	b086      	sub	sp, #24
 800d998:	af00      	add	r7, sp, #0
 800d99a:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800d99c:	2300      	movs	r3, #0
 800d99e:	75fb      	strb	r3, [r7, #23]
	uint8_t strobe;
	uint32_t LoopNb;
	LOG_FUNCTION_START("");

	Status |= VL53L0X_WrByte(Dev, 0x83, 0x00);
 800d9a0:	2200      	movs	r2, #0
 800d9a2:	2183      	movs	r1, #131	; 0x83
 800d9a4:	6878      	ldr	r0, [r7, #4]
 800d9a6:	f002 faf3 	bl	800ff90 <VL53L0X_WrByte>
 800d9aa:	4603      	mov	r3, r0
 800d9ac:	461a      	mov	r2, r3
 800d9ae:	7dfb      	ldrb	r3, [r7, #23]
 800d9b0:	4313      	orrs	r3, r2
 800d9b2:	75fb      	strb	r3, [r7, #23]

	/* polling
	 * use timeout to avoid deadlock*/
	if (Status == VL53L0X_ERROR_NONE) {
 800d9b4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800d9b8:	2b00      	cmp	r3, #0
 800d9ba:	d11e      	bne.n	800d9fa <VL53L0X_device_read_strobe+0x66>
		LoopNb = 0;
 800d9bc:	2300      	movs	r3, #0
 800d9be:	613b      	str	r3, [r7, #16]
		do {
			Status = VL53L0X_RdByte(Dev, 0x83, &strobe);
 800d9c0:	f107 030f 	add.w	r3, r7, #15
 800d9c4:	461a      	mov	r2, r3
 800d9c6:	2183      	movs	r1, #131	; 0x83
 800d9c8:	6878      	ldr	r0, [r7, #4]
 800d9ca:	f002 fb63 	bl	8010094 <VL53L0X_RdByte>
 800d9ce:	4603      	mov	r3, r0
 800d9d0:	75fb      	strb	r3, [r7, #23]
			if ((strobe != 0x00) || Status != VL53L0X_ERROR_NONE)
 800d9d2:	7bfb      	ldrb	r3, [r7, #15]
 800d9d4:	2b00      	cmp	r3, #0
 800d9d6:	d10a      	bne.n	800d9ee <VL53L0X_device_read_strobe+0x5a>
 800d9d8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800d9dc:	2b00      	cmp	r3, #0
 800d9de:	d106      	bne.n	800d9ee <VL53L0X_device_read_strobe+0x5a>
					break;

			LoopNb = LoopNb + 1;
 800d9e0:	693b      	ldr	r3, [r7, #16]
 800d9e2:	3301      	adds	r3, #1
 800d9e4:	613b      	str	r3, [r7, #16]
		} while (LoopNb < VL53L0X_DEFAULT_MAX_LOOP);
 800d9e6:	693b      	ldr	r3, [r7, #16]
 800d9e8:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800d9ec:	d3e8      	bcc.n	800d9c0 <VL53L0X_device_read_strobe+0x2c>

		if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP)
 800d9ee:	693b      	ldr	r3, [r7, #16]
 800d9f0:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800d9f4:	d301      	bcc.n	800d9fa <VL53L0X_device_read_strobe+0x66>
			Status = VL53L0X_ERROR_TIME_OUT;
 800d9f6:	23f9      	movs	r3, #249	; 0xf9
 800d9f8:	75fb      	strb	r3, [r7, #23]

	}

	Status |= VL53L0X_WrByte(Dev, 0x83, 0x01);
 800d9fa:	2201      	movs	r2, #1
 800d9fc:	2183      	movs	r1, #131	; 0x83
 800d9fe:	6878      	ldr	r0, [r7, #4]
 800da00:	f002 fac6 	bl	800ff90 <VL53L0X_WrByte>
 800da04:	4603      	mov	r3, r0
 800da06:	461a      	mov	r2, r3
 800da08:	7dfb      	ldrb	r3, [r7, #23]
 800da0a:	4313      	orrs	r3, r2
 800da0c:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_END(Status);
	return Status;
 800da0e:	f997 3017 	ldrsb.w	r3, [r7, #23]

}
 800da12:	4618      	mov	r0, r3
 800da14:	3718      	adds	r7, #24
 800da16:	46bd      	mov	sp, r7
 800da18:	bd80      	pop	{r7, pc}

0800da1a <VL53L0X_get_info_from_device>:

VL53L0X_Error VL53L0X_get_info_from_device(VL53L0X_DEV Dev, uint8_t option)
{
 800da1a:	b580      	push	{r7, lr}
 800da1c:	b098      	sub	sp, #96	; 0x60
 800da1e:	af00      	add	r7, sp, #0
 800da20:	6078      	str	r0, [r7, #4]
 800da22:	460b      	mov	r3, r1
 800da24:	70fb      	strb	r3, [r7, #3]

	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800da26:	2300      	movs	r3, #0
 800da28:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	uint8_t byte;
	uint32_t TmpDWord;
	uint8_t ModuleId;
	uint8_t Revision;
	uint8_t ReferenceSpadCount = 0;
 800da2c:	2300      	movs	r3, #0
 800da2e:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
	uint8_t ReferenceSpadType = 0;
 800da32:	2300      	movs	r3, #0
 800da34:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
	uint32_t PartUIDUpper = 0;
 800da38:	2300      	movs	r3, #0
 800da3a:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t PartUIDLower = 0;
 800da3c:	2300      	movs	r3, #0
 800da3e:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t OffsetFixed1104_mm = 0;
 800da40:	2300      	movs	r3, #0
 800da42:	64bb      	str	r3, [r7, #72]	; 0x48
	int16_t OffsetMicroMeters = 0;
 800da44:	2300      	movs	r3, #0
 800da46:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
	uint32_t DistMeasTgtFixed1104_mm = 400 << 4;
 800da4a:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 800da4e:	647b      	str	r3, [r7, #68]	; 0x44
	uint32_t DistMeasFixed1104_400_mm = 0;
 800da50:	2300      	movs	r3, #0
 800da52:	657b      	str	r3, [r7, #84]	; 0x54
	uint32_t SignalRateMeasFixed1104_400_mm = 0;
 800da54:	2300      	movs	r3, #0
 800da56:	653b      	str	r3, [r7, #80]	; 0x50
	char ProductId[19];
	char *ProductId_tmp;
	uint8_t ReadDataFromDeviceDone;
	FixPoint1616_t SignalRateMeasFixed400mmFix = 0;
 800da58:	2300      	movs	r3, #0
 800da5a:	643b      	str	r3, [r7, #64]	; 0x40
	int i;


	LOG_FUNCTION_START("");

	ReadDataFromDeviceDone = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 800da5c:	687b      	ldr	r3, [r7, #4]
 800da5e:	f893 30f0 	ldrb.w	r3, [r3, #240]	; 0xf0
 800da62:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			ReadDataFromDeviceDone);

	/* This access is done only once after that a GetDeviceInfo or
	 * datainit is done*/
	if (ReadDataFromDeviceDone != 7) {
 800da66:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800da6a:	2b07      	cmp	r3, #7
 800da6c:	f000 8408 	beq.w	800e280 <VL53L0X_get_info_from_device+0x866>

		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 800da70:	2201      	movs	r2, #1
 800da72:	2180      	movs	r1, #128	; 0x80
 800da74:	6878      	ldr	r0, [r7, #4]
 800da76:	f002 fa8b 	bl	800ff90 <VL53L0X_WrByte>
 800da7a:	4603      	mov	r3, r0
 800da7c:	461a      	mov	r2, r3
 800da7e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800da82:	4313      	orrs	r3, r2
 800da84:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800da88:	2201      	movs	r2, #1
 800da8a:	21ff      	movs	r1, #255	; 0xff
 800da8c:	6878      	ldr	r0, [r7, #4]
 800da8e:	f002 fa7f 	bl	800ff90 <VL53L0X_WrByte>
 800da92:	4603      	mov	r3, r0
 800da94:	461a      	mov	r2, r3
 800da96:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800da9a:	4313      	orrs	r3, r2
 800da9c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 800daa0:	2200      	movs	r2, #0
 800daa2:	2100      	movs	r1, #0
 800daa4:	6878      	ldr	r0, [r7, #4]
 800daa6:	f002 fa73 	bl	800ff90 <VL53L0X_WrByte>
 800daaa:	4603      	mov	r3, r0
 800daac:	461a      	mov	r2, r3
 800daae:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800dab2:	4313      	orrs	r3, r2
 800dab4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x06);
 800dab8:	2206      	movs	r2, #6
 800daba:	21ff      	movs	r1, #255	; 0xff
 800dabc:	6878      	ldr	r0, [r7, #4]
 800dabe:	f002 fa67 	bl	800ff90 <VL53L0X_WrByte>
 800dac2:	4603      	mov	r3, r0
 800dac4:	461a      	mov	r2, r3
 800dac6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800daca:	4313      	orrs	r3, r2
 800dacc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_RdByte(Dev, 0x83, &byte);
 800dad0:	f107 0337 	add.w	r3, r7, #55	; 0x37
 800dad4:	461a      	mov	r2, r3
 800dad6:	2183      	movs	r1, #131	; 0x83
 800dad8:	6878      	ldr	r0, [r7, #4]
 800dada:	f002 fadb 	bl	8010094 <VL53L0X_RdByte>
 800dade:	4603      	mov	r3, r0
 800dae0:	461a      	mov	r2, r3
 800dae2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800dae6:	4313      	orrs	r3, r2
 800dae8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x83, byte|4);
 800daec:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800daf0:	f043 0304 	orr.w	r3, r3, #4
 800daf4:	b2db      	uxtb	r3, r3
 800daf6:	461a      	mov	r2, r3
 800daf8:	2183      	movs	r1, #131	; 0x83
 800dafa:	6878      	ldr	r0, [r7, #4]
 800dafc:	f002 fa48 	bl	800ff90 <VL53L0X_WrByte>
 800db00:	4603      	mov	r3, r0
 800db02:	461a      	mov	r2, r3
 800db04:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800db08:	4313      	orrs	r3, r2
 800db0a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x07);
 800db0e:	2207      	movs	r2, #7
 800db10:	21ff      	movs	r1, #255	; 0xff
 800db12:	6878      	ldr	r0, [r7, #4]
 800db14:	f002 fa3c 	bl	800ff90 <VL53L0X_WrByte>
 800db18:	4603      	mov	r3, r0
 800db1a:	461a      	mov	r2, r3
 800db1c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800db20:	4313      	orrs	r3, r2
 800db22:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x81, 0x01);
 800db26:	2201      	movs	r2, #1
 800db28:	2181      	movs	r1, #129	; 0x81
 800db2a:	6878      	ldr	r0, [r7, #4]
 800db2c:	f002 fa30 	bl	800ff90 <VL53L0X_WrByte>
 800db30:	4603      	mov	r3, r0
 800db32:	461a      	mov	r2, r3
 800db34:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800db38:	4313      	orrs	r3, r2
 800db3a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_PollingDelay(Dev);
 800db3e:	6878      	ldr	r0, [r7, #4]
 800db40:	f002 fb46 	bl	80101d0 <VL53L0X_PollingDelay>
 800db44:	4603      	mov	r3, r0
 800db46:	461a      	mov	r2, r3
 800db48:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800db4c:	4313      	orrs	r3, r2
 800db4e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 800db52:	2201      	movs	r2, #1
 800db54:	2180      	movs	r1, #128	; 0x80
 800db56:	6878      	ldr	r0, [r7, #4]
 800db58:	f002 fa1a 	bl	800ff90 <VL53L0X_WrByte>
 800db5c:	4603      	mov	r3, r0
 800db5e:	461a      	mov	r2, r3
 800db60:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800db64:	4313      	orrs	r3, r2
 800db66:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		if (((option & 1) == 1) &&
 800db6a:	78fb      	ldrb	r3, [r7, #3]
 800db6c:	f003 0301 	and.w	r3, r3, #1
 800db70:	2b00      	cmp	r3, #0
 800db72:	f000 8098 	beq.w	800dca6 <VL53L0X_get_info_from_device+0x28c>
			((ReadDataFromDeviceDone & 1) == 0)) {
 800db76:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800db7a:	f003 0301 	and.w	r3, r3, #1
		if (((option & 1) == 1) &&
 800db7e:	2b00      	cmp	r3, #0
 800db80:	f040 8091 	bne.w	800dca6 <VL53L0X_get_info_from_device+0x28c>
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x6b);
 800db84:	226b      	movs	r2, #107	; 0x6b
 800db86:	2194      	movs	r1, #148	; 0x94
 800db88:	6878      	ldr	r0, [r7, #4]
 800db8a:	f002 fa01 	bl	800ff90 <VL53L0X_WrByte>
 800db8e:	4603      	mov	r3, r0
 800db90:	461a      	mov	r2, r3
 800db92:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800db96:	4313      	orrs	r3, r2
 800db98:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800db9c:	6878      	ldr	r0, [r7, #4]
 800db9e:	f7ff fef9 	bl	800d994 <VL53L0X_device_read_strobe>
 800dba2:	4603      	mov	r3, r0
 800dba4:	461a      	mov	r2, r3
 800dba6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800dbaa:	4313      	orrs	r3, r2
 800dbac:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800dbb0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800dbb4:	461a      	mov	r2, r3
 800dbb6:	2190      	movs	r1, #144	; 0x90
 800dbb8:	6878      	ldr	r0, [r7, #4]
 800dbba:	f002 facd 	bl	8010158 <VL53L0X_RdDWord>
 800dbbe:	4603      	mov	r3, r0
 800dbc0:	461a      	mov	r2, r3
 800dbc2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800dbc6:	4313      	orrs	r3, r2
 800dbc8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ReferenceSpadCount = (uint8_t)((TmpDWord >> 8) & 0x07f);
 800dbcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dbce:	0a1b      	lsrs	r3, r3, #8
 800dbd0:	b2db      	uxtb	r3, r3
 800dbd2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800dbd6:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
			ReferenceSpadType  = (uint8_t)((TmpDWord >> 15) & 0x01);
 800dbda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dbdc:	0bdb      	lsrs	r3, r3, #15
 800dbde:	b2db      	uxtb	r3, r3
 800dbe0:	f003 0301 	and.w	r3, r3, #1
 800dbe4:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x24);
 800dbe8:	2224      	movs	r2, #36	; 0x24
 800dbea:	2194      	movs	r1, #148	; 0x94
 800dbec:	6878      	ldr	r0, [r7, #4]
 800dbee:	f002 f9cf 	bl	800ff90 <VL53L0X_WrByte>
 800dbf2:	4603      	mov	r3, r0
 800dbf4:	461a      	mov	r2, r3
 800dbf6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800dbfa:	4313      	orrs	r3, r2
 800dbfc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800dc00:	6878      	ldr	r0, [r7, #4]
 800dc02:	f7ff fec7 	bl	800d994 <VL53L0X_device_read_strobe>
 800dc06:	4603      	mov	r3, r0
 800dc08:	461a      	mov	r2, r3
 800dc0a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800dc0e:	4313      	orrs	r3, r2
 800dc10:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800dc14:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800dc18:	461a      	mov	r2, r3
 800dc1a:	2190      	movs	r1, #144	; 0x90
 800dc1c:	6878      	ldr	r0, [r7, #4]
 800dc1e:	f002 fa9b 	bl	8010158 <VL53L0X_RdDWord>
 800dc22:	4603      	mov	r3, r0
 800dc24:	461a      	mov	r2, r3
 800dc26:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800dc2a:	4313      	orrs	r3, r2
 800dc2c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f


			NvmRefGoodSpadMap[0] = (uint8_t)((TmpDWord >> 24)
 800dc30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc32:	0e1b      	lsrs	r3, r3, #24
 800dc34:	b2db      	uxtb	r3, r3
 800dc36:	723b      	strb	r3, [r7, #8]
				& 0xff);
			NvmRefGoodSpadMap[1] = (uint8_t)((TmpDWord >> 16)
 800dc38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc3a:	0c1b      	lsrs	r3, r3, #16
 800dc3c:	b2db      	uxtb	r3, r3
 800dc3e:	727b      	strb	r3, [r7, #9]
				& 0xff);
			NvmRefGoodSpadMap[2] = (uint8_t)((TmpDWord >> 8)
 800dc40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc42:	0a1b      	lsrs	r3, r3, #8
 800dc44:	b2db      	uxtb	r3, r3
 800dc46:	72bb      	strb	r3, [r7, #10]
				& 0xff);
			NvmRefGoodSpadMap[3] = (uint8_t)(TmpDWord & 0xff);
 800dc48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc4a:	b2db      	uxtb	r3, r3
 800dc4c:	72fb      	strb	r3, [r7, #11]

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x25);
 800dc4e:	2225      	movs	r2, #37	; 0x25
 800dc50:	2194      	movs	r1, #148	; 0x94
 800dc52:	6878      	ldr	r0, [r7, #4]
 800dc54:	f002 f99c 	bl	800ff90 <VL53L0X_WrByte>
 800dc58:	4603      	mov	r3, r0
 800dc5a:	461a      	mov	r2, r3
 800dc5c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800dc60:	4313      	orrs	r3, r2
 800dc62:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800dc66:	6878      	ldr	r0, [r7, #4]
 800dc68:	f7ff fe94 	bl	800d994 <VL53L0X_device_read_strobe>
 800dc6c:	4603      	mov	r3, r0
 800dc6e:	461a      	mov	r2, r3
 800dc70:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800dc74:	4313      	orrs	r3, r2
 800dc76:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800dc7a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800dc7e:	461a      	mov	r2, r3
 800dc80:	2190      	movs	r1, #144	; 0x90
 800dc82:	6878      	ldr	r0, [r7, #4]
 800dc84:	f002 fa68 	bl	8010158 <VL53L0X_RdDWord>
 800dc88:	4603      	mov	r3, r0
 800dc8a:	461a      	mov	r2, r3
 800dc8c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800dc90:	4313      	orrs	r3, r2
 800dc92:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			NvmRefGoodSpadMap[4] = (uint8_t)((TmpDWord >> 24)
 800dc96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc98:	0e1b      	lsrs	r3, r3, #24
 800dc9a:	b2db      	uxtb	r3, r3
 800dc9c:	733b      	strb	r3, [r7, #12]
				& 0xff);
			NvmRefGoodSpadMap[5] = (uint8_t)((TmpDWord >> 16)
 800dc9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dca0:	0c1b      	lsrs	r3, r3, #16
 800dca2:	b2db      	uxtb	r3, r3
 800dca4:	737b      	strb	r3, [r7, #13]
				& 0xff);
		}

		if (((option & 2) == 2) &&
 800dca6:	78fb      	ldrb	r3, [r7, #3]
 800dca8:	f003 0302 	and.w	r3, r3, #2
 800dcac:	2b00      	cmp	r3, #0
 800dcae:	f000 8189 	beq.w	800dfc4 <VL53L0X_get_info_from_device+0x5aa>
			((ReadDataFromDeviceDone & 2) == 0)) {
 800dcb2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800dcb6:	f003 0302 	and.w	r3, r3, #2
		if (((option & 2) == 2) &&
 800dcba:	2b00      	cmp	r3, #0
 800dcbc:	f040 8182 	bne.w	800dfc4 <VL53L0X_get_info_from_device+0x5aa>

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x02);
 800dcc0:	2202      	movs	r2, #2
 800dcc2:	2194      	movs	r1, #148	; 0x94
 800dcc4:	6878      	ldr	r0, [r7, #4]
 800dcc6:	f002 f963 	bl	800ff90 <VL53L0X_WrByte>
 800dcca:	4603      	mov	r3, r0
 800dccc:	461a      	mov	r2, r3
 800dcce:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800dcd2:	4313      	orrs	r3, r2
 800dcd4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800dcd8:	6878      	ldr	r0, [r7, #4]
 800dcda:	f7ff fe5b 	bl	800d994 <VL53L0X_device_read_strobe>
 800dcde:	4603      	mov	r3, r0
 800dce0:	461a      	mov	r2, r3
 800dce2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800dce6:	4313      	orrs	r3, r2
 800dce8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdByte(Dev, 0x90, &ModuleId);
 800dcec:	f107 032f 	add.w	r3, r7, #47	; 0x2f
 800dcf0:	461a      	mov	r2, r3
 800dcf2:	2190      	movs	r1, #144	; 0x90
 800dcf4:	6878      	ldr	r0, [r7, #4]
 800dcf6:	f002 f9cd 	bl	8010094 <VL53L0X_RdByte>
 800dcfa:	4603      	mov	r3, r0
 800dcfc:	461a      	mov	r2, r3
 800dcfe:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800dd02:	4313      	orrs	r3, r2
 800dd04:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7B);
 800dd08:	227b      	movs	r2, #123	; 0x7b
 800dd0a:	2194      	movs	r1, #148	; 0x94
 800dd0c:	6878      	ldr	r0, [r7, #4]
 800dd0e:	f002 f93f 	bl	800ff90 <VL53L0X_WrByte>
 800dd12:	4603      	mov	r3, r0
 800dd14:	461a      	mov	r2, r3
 800dd16:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800dd1a:	4313      	orrs	r3, r2
 800dd1c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800dd20:	6878      	ldr	r0, [r7, #4]
 800dd22:	f7ff fe37 	bl	800d994 <VL53L0X_device_read_strobe>
 800dd26:	4603      	mov	r3, r0
 800dd28:	461a      	mov	r2, r3
 800dd2a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800dd2e:	4313      	orrs	r3, r2
 800dd30:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdByte(Dev, 0x90, &Revision);
 800dd34:	f107 032e 	add.w	r3, r7, #46	; 0x2e
 800dd38:	461a      	mov	r2, r3
 800dd3a:	2190      	movs	r1, #144	; 0x90
 800dd3c:	6878      	ldr	r0, [r7, #4]
 800dd3e:	f002 f9a9 	bl	8010094 <VL53L0X_RdByte>
 800dd42:	4603      	mov	r3, r0
 800dd44:	461a      	mov	r2, r3
 800dd46:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800dd4a:	4313      	orrs	r3, r2
 800dd4c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x77);
 800dd50:	2277      	movs	r2, #119	; 0x77
 800dd52:	2194      	movs	r1, #148	; 0x94
 800dd54:	6878      	ldr	r0, [r7, #4]
 800dd56:	f002 f91b 	bl	800ff90 <VL53L0X_WrByte>
 800dd5a:	4603      	mov	r3, r0
 800dd5c:	461a      	mov	r2, r3
 800dd5e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800dd62:	4313      	orrs	r3, r2
 800dd64:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800dd68:	6878      	ldr	r0, [r7, #4]
 800dd6a:	f7ff fe13 	bl	800d994 <VL53L0X_device_read_strobe>
 800dd6e:	4603      	mov	r3, r0
 800dd70:	461a      	mov	r2, r3
 800dd72:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800dd76:	4313      	orrs	r3, r2
 800dd78:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800dd7c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800dd80:	461a      	mov	r2, r3
 800dd82:	2190      	movs	r1, #144	; 0x90
 800dd84:	6878      	ldr	r0, [r7, #4]
 800dd86:	f002 f9e7 	bl	8010158 <VL53L0X_RdDWord>
 800dd8a:	4603      	mov	r3, r0
 800dd8c:	461a      	mov	r2, r3
 800dd8e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800dd92:	4313      	orrs	r3, r2
 800dd94:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[0] = (char)((TmpDWord >> 25) & 0x07f);
 800dd98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dd9a:	0e5b      	lsrs	r3, r3, #25
 800dd9c:	b2db      	uxtb	r3, r3
 800dd9e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800dda2:	b2db      	uxtb	r3, r3
 800dda4:	743b      	strb	r3, [r7, #16]
			ProductId[1] = (char)((TmpDWord >> 18) & 0x07f);
 800dda6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dda8:	0c9b      	lsrs	r3, r3, #18
 800ddaa:	b2db      	uxtb	r3, r3
 800ddac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ddb0:	b2db      	uxtb	r3, r3
 800ddb2:	747b      	strb	r3, [r7, #17]
			ProductId[2] = (char)((TmpDWord >> 11) & 0x07f);
 800ddb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ddb6:	0adb      	lsrs	r3, r3, #11
 800ddb8:	b2db      	uxtb	r3, r3
 800ddba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ddbe:	b2db      	uxtb	r3, r3
 800ddc0:	74bb      	strb	r3, [r7, #18]
			ProductId[3] = (char)((TmpDWord >> 4) & 0x07f);
 800ddc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ddc4:	091b      	lsrs	r3, r3, #4
 800ddc6:	b2db      	uxtb	r3, r3
 800ddc8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ddcc:	b2db      	uxtb	r3, r3
 800ddce:	74fb      	strb	r3, [r7, #19]

			byte = (uint8_t)((TmpDWord & 0x00f) << 3);
 800ddd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ddd2:	b2db      	uxtb	r3, r3
 800ddd4:	00db      	lsls	r3, r3, #3
 800ddd6:	b2db      	uxtb	r3, r3
 800ddd8:	f003 0378 	and.w	r3, r3, #120	; 0x78
 800dddc:	b2db      	uxtb	r3, r3
 800ddde:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x78);
 800dde2:	2278      	movs	r2, #120	; 0x78
 800dde4:	2194      	movs	r1, #148	; 0x94
 800dde6:	6878      	ldr	r0, [r7, #4]
 800dde8:	f002 f8d2 	bl	800ff90 <VL53L0X_WrByte>
 800ddec:	4603      	mov	r3, r0
 800ddee:	461a      	mov	r2, r3
 800ddf0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ddf4:	4313      	orrs	r3, r2
 800ddf6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800ddfa:	6878      	ldr	r0, [r7, #4]
 800ddfc:	f7ff fdca 	bl	800d994 <VL53L0X_device_read_strobe>
 800de00:	4603      	mov	r3, r0
 800de02:	461a      	mov	r2, r3
 800de04:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800de08:	4313      	orrs	r3, r2
 800de0a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800de0e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800de12:	461a      	mov	r2, r3
 800de14:	2190      	movs	r1, #144	; 0x90
 800de16:	6878      	ldr	r0, [r7, #4]
 800de18:	f002 f99e 	bl	8010158 <VL53L0X_RdDWord>
 800de1c:	4603      	mov	r3, r0
 800de1e:	461a      	mov	r2, r3
 800de20:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800de24:	4313      	orrs	r3, r2
 800de26:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[4] = (char)(byte +
					((TmpDWord >> 29) & 0x07f));
 800de2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800de2c:	0f5b      	lsrs	r3, r3, #29
 800de2e:	b2db      	uxtb	r3, r3
 800de30:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800de34:	b2da      	uxtb	r2, r3
			ProductId[4] = (char)(byte +
 800de36:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800de3a:	4413      	add	r3, r2
 800de3c:	b2db      	uxtb	r3, r3
 800de3e:	753b      	strb	r3, [r7, #20]
			ProductId[5] = (char)((TmpDWord >> 22) & 0x07f);
 800de40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800de42:	0d9b      	lsrs	r3, r3, #22
 800de44:	b2db      	uxtb	r3, r3
 800de46:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800de4a:	b2db      	uxtb	r3, r3
 800de4c:	757b      	strb	r3, [r7, #21]
			ProductId[6] = (char)((TmpDWord >> 15) & 0x07f);
 800de4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800de50:	0bdb      	lsrs	r3, r3, #15
 800de52:	b2db      	uxtb	r3, r3
 800de54:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800de58:	b2db      	uxtb	r3, r3
 800de5a:	75bb      	strb	r3, [r7, #22]
			ProductId[7] = (char)((TmpDWord >> 8) & 0x07f);
 800de5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800de5e:	0a1b      	lsrs	r3, r3, #8
 800de60:	b2db      	uxtb	r3, r3
 800de62:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800de66:	b2db      	uxtb	r3, r3
 800de68:	75fb      	strb	r3, [r7, #23]
			ProductId[8] = (char)((TmpDWord >> 1) & 0x07f);
 800de6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800de6c:	085b      	lsrs	r3, r3, #1
 800de6e:	b2db      	uxtb	r3, r3
 800de70:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800de74:	b2db      	uxtb	r3, r3
 800de76:	763b      	strb	r3, [r7, #24]

			byte = (uint8_t)((TmpDWord & 0x001) << 6);
 800de78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800de7a:	b2db      	uxtb	r3, r3
 800de7c:	019b      	lsls	r3, r3, #6
 800de7e:	b2db      	uxtb	r3, r3
 800de80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800de84:	b2db      	uxtb	r3, r3
 800de86:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x79);
 800de8a:	2279      	movs	r2, #121	; 0x79
 800de8c:	2194      	movs	r1, #148	; 0x94
 800de8e:	6878      	ldr	r0, [r7, #4]
 800de90:	f002 f87e 	bl	800ff90 <VL53L0X_WrByte>
 800de94:	4603      	mov	r3, r0
 800de96:	461a      	mov	r2, r3
 800de98:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800de9c:	4313      	orrs	r3, r2
 800de9e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_device_read_strobe(Dev);
 800dea2:	6878      	ldr	r0, [r7, #4]
 800dea4:	f7ff fd76 	bl	800d994 <VL53L0X_device_read_strobe>
 800dea8:	4603      	mov	r3, r0
 800deaa:	461a      	mov	r2, r3
 800deac:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800deb0:	4313      	orrs	r3, r2
 800deb2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800deb6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800deba:	461a      	mov	r2, r3
 800debc:	2190      	movs	r1, #144	; 0x90
 800debe:	6878      	ldr	r0, [r7, #4]
 800dec0:	f002 f94a 	bl	8010158 <VL53L0X_RdDWord>
 800dec4:	4603      	mov	r3, r0
 800dec6:	461a      	mov	r2, r3
 800dec8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800decc:	4313      	orrs	r3, r2
 800dece:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[9] = (char)(byte +
					((TmpDWord >> 26) & 0x07f));
 800ded2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ded4:	0e9b      	lsrs	r3, r3, #26
 800ded6:	b2db      	uxtb	r3, r3
 800ded8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800dedc:	b2da      	uxtb	r2, r3
			ProductId[9] = (char)(byte +
 800dede:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800dee2:	4413      	add	r3, r2
 800dee4:	b2db      	uxtb	r3, r3
 800dee6:	767b      	strb	r3, [r7, #25]
			ProductId[10] = (char)((TmpDWord >> 19) & 0x07f);
 800dee8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800deea:	0cdb      	lsrs	r3, r3, #19
 800deec:	b2db      	uxtb	r3, r3
 800deee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800def2:	b2db      	uxtb	r3, r3
 800def4:	76bb      	strb	r3, [r7, #26]
			ProductId[11] = (char)((TmpDWord >> 12) & 0x07f);
 800def6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800def8:	0b1b      	lsrs	r3, r3, #12
 800defa:	b2db      	uxtb	r3, r3
 800defc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800df00:	b2db      	uxtb	r3, r3
 800df02:	76fb      	strb	r3, [r7, #27]
			ProductId[12] = (char)((TmpDWord >> 5) & 0x07f);
 800df04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800df06:	095b      	lsrs	r3, r3, #5
 800df08:	b2db      	uxtb	r3, r3
 800df0a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800df0e:	b2db      	uxtb	r3, r3
 800df10:	773b      	strb	r3, [r7, #28]

			byte = (uint8_t)((TmpDWord & 0x01f) << 2);
 800df12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800df14:	b2db      	uxtb	r3, r3
 800df16:	009b      	lsls	r3, r3, #2
 800df18:	b2db      	uxtb	r3, r3
 800df1a:	f003 037c 	and.w	r3, r3, #124	; 0x7c
 800df1e:	b2db      	uxtb	r3, r3
 800df20:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7A);
 800df24:	227a      	movs	r2, #122	; 0x7a
 800df26:	2194      	movs	r1, #148	; 0x94
 800df28:	6878      	ldr	r0, [r7, #4]
 800df2a:	f002 f831 	bl	800ff90 <VL53L0X_WrByte>
 800df2e:	4603      	mov	r3, r0
 800df30:	461a      	mov	r2, r3
 800df32:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800df36:	4313      	orrs	r3, r2
 800df38:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_device_read_strobe(Dev);
 800df3c:	6878      	ldr	r0, [r7, #4]
 800df3e:	f7ff fd29 	bl	800d994 <VL53L0X_device_read_strobe>
 800df42:	4603      	mov	r3, r0
 800df44:	461a      	mov	r2, r3
 800df46:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800df4a:	4313      	orrs	r3, r2
 800df4c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800df50:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800df54:	461a      	mov	r2, r3
 800df56:	2190      	movs	r1, #144	; 0x90
 800df58:	6878      	ldr	r0, [r7, #4]
 800df5a:	f002 f8fd 	bl	8010158 <VL53L0X_RdDWord>
 800df5e:	4603      	mov	r3, r0
 800df60:	461a      	mov	r2, r3
 800df62:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800df66:	4313      	orrs	r3, r2
 800df68:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[13] = (char)(byte +
					((TmpDWord >> 30) & 0x07f));
 800df6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800df6e:	0f9b      	lsrs	r3, r3, #30
 800df70:	b2db      	uxtb	r3, r3
 800df72:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800df76:	b2da      	uxtb	r2, r3
			ProductId[13] = (char)(byte +
 800df78:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800df7c:	4413      	add	r3, r2
 800df7e:	b2db      	uxtb	r3, r3
 800df80:	777b      	strb	r3, [r7, #29]
			ProductId[14] = (char)((TmpDWord >> 23) & 0x07f);
 800df82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800df84:	0ddb      	lsrs	r3, r3, #23
 800df86:	b2db      	uxtb	r3, r3
 800df88:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800df8c:	b2db      	uxtb	r3, r3
 800df8e:	77bb      	strb	r3, [r7, #30]
			ProductId[15] = (char)((TmpDWord >> 16) & 0x07f);
 800df90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800df92:	0c1b      	lsrs	r3, r3, #16
 800df94:	b2db      	uxtb	r3, r3
 800df96:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800df9a:	b2db      	uxtb	r3, r3
 800df9c:	77fb      	strb	r3, [r7, #31]
			ProductId[16] = (char)((TmpDWord >> 9) & 0x07f);
 800df9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dfa0:	0a5b      	lsrs	r3, r3, #9
 800dfa2:	b2db      	uxtb	r3, r3
 800dfa4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800dfa8:	b2db      	uxtb	r3, r3
 800dfaa:	f887 3020 	strb.w	r3, [r7, #32]
			ProductId[17] = (char)((TmpDWord >> 2) & 0x07f);
 800dfae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dfb0:	089b      	lsrs	r3, r3, #2
 800dfb2:	b2db      	uxtb	r3, r3
 800dfb4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800dfb8:	b2db      	uxtb	r3, r3
 800dfba:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
			ProductId[18] = '\0';
 800dfbe:	2300      	movs	r3, #0
 800dfc0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

		}

		if (((option & 4) == 4) &&
 800dfc4:	78fb      	ldrb	r3, [r7, #3]
 800dfc6:	f003 0304 	and.w	r3, r3, #4
 800dfca:	2b00      	cmp	r3, #0
 800dfcc:	f000 80f1 	beq.w	800e1b2 <VL53L0X_get_info_from_device+0x798>
			((ReadDataFromDeviceDone & 4) == 0)) {
 800dfd0:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800dfd4:	f003 0304 	and.w	r3, r3, #4
		if (((option & 4) == 4) &&
 800dfd8:	2b00      	cmp	r3, #0
 800dfda:	f040 80ea 	bne.w	800e1b2 <VL53L0X_get_info_from_device+0x798>

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7B);
 800dfde:	227b      	movs	r2, #123	; 0x7b
 800dfe0:	2194      	movs	r1, #148	; 0x94
 800dfe2:	6878      	ldr	r0, [r7, #4]
 800dfe4:	f001 ffd4 	bl	800ff90 <VL53L0X_WrByte>
 800dfe8:	4603      	mov	r3, r0
 800dfea:	461a      	mov	r2, r3
 800dfec:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800dff0:	4313      	orrs	r3, r2
 800dff2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800dff6:	6878      	ldr	r0, [r7, #4]
 800dff8:	f7ff fccc 	bl	800d994 <VL53L0X_device_read_strobe>
 800dffc:	4603      	mov	r3, r0
 800dffe:	461a      	mov	r2, r3
 800e000:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800e004:	4313      	orrs	r3, r2
 800e006:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &PartUIDUpper);
 800e00a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800e00e:	461a      	mov	r2, r3
 800e010:	2190      	movs	r1, #144	; 0x90
 800e012:	6878      	ldr	r0, [r7, #4]
 800e014:	f002 f8a0 	bl	8010158 <VL53L0X_RdDWord>
 800e018:	4603      	mov	r3, r0
 800e01a:	461a      	mov	r2, r3
 800e01c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800e020:	4313      	orrs	r3, r2
 800e022:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7C);
 800e026:	227c      	movs	r2, #124	; 0x7c
 800e028:	2194      	movs	r1, #148	; 0x94
 800e02a:	6878      	ldr	r0, [r7, #4]
 800e02c:	f001 ffb0 	bl	800ff90 <VL53L0X_WrByte>
 800e030:	4603      	mov	r3, r0
 800e032:	461a      	mov	r2, r3
 800e034:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800e038:	4313      	orrs	r3, r2
 800e03a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800e03e:	6878      	ldr	r0, [r7, #4]
 800e040:	f7ff fca8 	bl	800d994 <VL53L0X_device_read_strobe>
 800e044:	4603      	mov	r3, r0
 800e046:	461a      	mov	r2, r3
 800e048:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800e04c:	4313      	orrs	r3, r2
 800e04e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &PartUIDLower);
 800e052:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800e056:	461a      	mov	r2, r3
 800e058:	2190      	movs	r1, #144	; 0x90
 800e05a:	6878      	ldr	r0, [r7, #4]
 800e05c:	f002 f87c 	bl	8010158 <VL53L0X_RdDWord>
 800e060:	4603      	mov	r3, r0
 800e062:	461a      	mov	r2, r3
 800e064:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800e068:	4313      	orrs	r3, r2
 800e06a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x73);
 800e06e:	2273      	movs	r2, #115	; 0x73
 800e070:	2194      	movs	r1, #148	; 0x94
 800e072:	6878      	ldr	r0, [r7, #4]
 800e074:	f001 ff8c 	bl	800ff90 <VL53L0X_WrByte>
 800e078:	4603      	mov	r3, r0
 800e07a:	461a      	mov	r2, r3
 800e07c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800e080:	4313      	orrs	r3, r2
 800e082:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800e086:	6878      	ldr	r0, [r7, #4]
 800e088:	f7ff fc84 	bl	800d994 <VL53L0X_device_read_strobe>
 800e08c:	4603      	mov	r3, r0
 800e08e:	461a      	mov	r2, r3
 800e090:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800e094:	4313      	orrs	r3, r2
 800e096:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800e09a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800e09e:	461a      	mov	r2, r3
 800e0a0:	2190      	movs	r1, #144	; 0x90
 800e0a2:	6878      	ldr	r0, [r7, #4]
 800e0a4:	f002 f858 	bl	8010158 <VL53L0X_RdDWord>
 800e0a8:	4603      	mov	r3, r0
 800e0aa:	461a      	mov	r2, r3
 800e0ac:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800e0b0:	4313      	orrs	r3, r2
 800e0b2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			SignalRateMeasFixed1104_400_mm = (TmpDWord &
				0x0000000ff) << 8;
 800e0b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e0b8:	021b      	lsls	r3, r3, #8
			SignalRateMeasFixed1104_400_mm = (TmpDWord &
 800e0ba:	b29b      	uxth	r3, r3
 800e0bc:	653b      	str	r3, [r7, #80]	; 0x50

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x74);
 800e0be:	2274      	movs	r2, #116	; 0x74
 800e0c0:	2194      	movs	r1, #148	; 0x94
 800e0c2:	6878      	ldr	r0, [r7, #4]
 800e0c4:	f001 ff64 	bl	800ff90 <VL53L0X_WrByte>
 800e0c8:	4603      	mov	r3, r0
 800e0ca:	461a      	mov	r2, r3
 800e0cc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800e0d0:	4313      	orrs	r3, r2
 800e0d2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800e0d6:	6878      	ldr	r0, [r7, #4]
 800e0d8:	f7ff fc5c 	bl	800d994 <VL53L0X_device_read_strobe>
 800e0dc:	4603      	mov	r3, r0
 800e0de:	461a      	mov	r2, r3
 800e0e0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800e0e4:	4313      	orrs	r3, r2
 800e0e6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800e0ea:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800e0ee:	461a      	mov	r2, r3
 800e0f0:	2190      	movs	r1, #144	; 0x90
 800e0f2:	6878      	ldr	r0, [r7, #4]
 800e0f4:	f002 f830 	bl	8010158 <VL53L0X_RdDWord>
 800e0f8:	4603      	mov	r3, r0
 800e0fa:	461a      	mov	r2, r3
 800e0fc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800e100:	4313      	orrs	r3, r2
 800e102:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			SignalRateMeasFixed1104_400_mm |= ((TmpDWord &
				0xff000000) >> 24);
 800e106:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e108:	0e1b      	lsrs	r3, r3, #24
			SignalRateMeasFixed1104_400_mm |= ((TmpDWord &
 800e10a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800e10c:	4313      	orrs	r3, r2
 800e10e:	653b      	str	r3, [r7, #80]	; 0x50

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x75);
 800e110:	2275      	movs	r2, #117	; 0x75
 800e112:	2194      	movs	r1, #148	; 0x94
 800e114:	6878      	ldr	r0, [r7, #4]
 800e116:	f001 ff3b 	bl	800ff90 <VL53L0X_WrByte>
 800e11a:	4603      	mov	r3, r0
 800e11c:	461a      	mov	r2, r3
 800e11e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800e122:	4313      	orrs	r3, r2
 800e124:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800e128:	6878      	ldr	r0, [r7, #4]
 800e12a:	f7ff fc33 	bl	800d994 <VL53L0X_device_read_strobe>
 800e12e:	4603      	mov	r3, r0
 800e130:	461a      	mov	r2, r3
 800e132:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800e136:	4313      	orrs	r3, r2
 800e138:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800e13c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800e140:	461a      	mov	r2, r3
 800e142:	2190      	movs	r1, #144	; 0x90
 800e144:	6878      	ldr	r0, [r7, #4]
 800e146:	f002 f807 	bl	8010158 <VL53L0X_RdDWord>
 800e14a:	4603      	mov	r3, r0
 800e14c:	461a      	mov	r2, r3
 800e14e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800e152:	4313      	orrs	r3, r2
 800e154:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			DistMeasFixed1104_400_mm = (TmpDWord & 0x0000000ff)
							<< 8;
 800e158:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e15a:	021b      	lsls	r3, r3, #8
			DistMeasFixed1104_400_mm = (TmpDWord & 0x0000000ff)
 800e15c:	b29b      	uxth	r3, r3
 800e15e:	657b      	str	r3, [r7, #84]	; 0x54

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x76);
 800e160:	2276      	movs	r2, #118	; 0x76
 800e162:	2194      	movs	r1, #148	; 0x94
 800e164:	6878      	ldr	r0, [r7, #4]
 800e166:	f001 ff13 	bl	800ff90 <VL53L0X_WrByte>
 800e16a:	4603      	mov	r3, r0
 800e16c:	461a      	mov	r2, r3
 800e16e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800e172:	4313      	orrs	r3, r2
 800e174:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800e178:	6878      	ldr	r0, [r7, #4]
 800e17a:	f7ff fc0b 	bl	800d994 <VL53L0X_device_read_strobe>
 800e17e:	4603      	mov	r3, r0
 800e180:	461a      	mov	r2, r3
 800e182:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800e186:	4313      	orrs	r3, r2
 800e188:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800e18c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800e190:	461a      	mov	r2, r3
 800e192:	2190      	movs	r1, #144	; 0x90
 800e194:	6878      	ldr	r0, [r7, #4]
 800e196:	f001 ffdf 	bl	8010158 <VL53L0X_RdDWord>
 800e19a:	4603      	mov	r3, r0
 800e19c:	461a      	mov	r2, r3
 800e19e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800e1a2:	4313      	orrs	r3, r2
 800e1a4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			DistMeasFixed1104_400_mm |= ((TmpDWord & 0xff000000)
							>> 24);
 800e1a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e1aa:	0e1b      	lsrs	r3, r3, #24
			DistMeasFixed1104_400_mm |= ((TmpDWord & 0xff000000)
 800e1ac:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800e1ae:	4313      	orrs	r3, r2
 800e1b0:	657b      	str	r3, [r7, #84]	; 0x54
		}

		Status |= VL53L0X_WrByte(Dev, 0x81, 0x00);
 800e1b2:	2200      	movs	r2, #0
 800e1b4:	2181      	movs	r1, #129	; 0x81
 800e1b6:	6878      	ldr	r0, [r7, #4]
 800e1b8:	f001 feea 	bl	800ff90 <VL53L0X_WrByte>
 800e1bc:	4603      	mov	r3, r0
 800e1be:	461a      	mov	r2, r3
 800e1c0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800e1c4:	4313      	orrs	r3, r2
 800e1c6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x06);
 800e1ca:	2206      	movs	r2, #6
 800e1cc:	21ff      	movs	r1, #255	; 0xff
 800e1ce:	6878      	ldr	r0, [r7, #4]
 800e1d0:	f001 fede 	bl	800ff90 <VL53L0X_WrByte>
 800e1d4:	4603      	mov	r3, r0
 800e1d6:	461a      	mov	r2, r3
 800e1d8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800e1dc:	4313      	orrs	r3, r2
 800e1de:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_RdByte(Dev, 0x83, &byte);
 800e1e2:	f107 0337 	add.w	r3, r7, #55	; 0x37
 800e1e6:	461a      	mov	r2, r3
 800e1e8:	2183      	movs	r1, #131	; 0x83
 800e1ea:	6878      	ldr	r0, [r7, #4]
 800e1ec:	f001 ff52 	bl	8010094 <VL53L0X_RdByte>
 800e1f0:	4603      	mov	r3, r0
 800e1f2:	461a      	mov	r2, r3
 800e1f4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800e1f8:	4313      	orrs	r3, r2
 800e1fa:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x83, byte&0xfb);
 800e1fe:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800e202:	f023 0304 	bic.w	r3, r3, #4
 800e206:	b2db      	uxtb	r3, r3
 800e208:	461a      	mov	r2, r3
 800e20a:	2183      	movs	r1, #131	; 0x83
 800e20c:	6878      	ldr	r0, [r7, #4]
 800e20e:	f001 febf 	bl	800ff90 <VL53L0X_WrByte>
 800e212:	4603      	mov	r3, r0
 800e214:	461a      	mov	r2, r3
 800e216:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800e21a:	4313      	orrs	r3, r2
 800e21c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800e220:	2201      	movs	r2, #1
 800e222:	21ff      	movs	r1, #255	; 0xff
 800e224:	6878      	ldr	r0, [r7, #4]
 800e226:	f001 feb3 	bl	800ff90 <VL53L0X_WrByte>
 800e22a:	4603      	mov	r3, r0
 800e22c:	461a      	mov	r2, r3
 800e22e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800e232:	4313      	orrs	r3, r2
 800e234:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 800e238:	2201      	movs	r2, #1
 800e23a:	2100      	movs	r1, #0
 800e23c:	6878      	ldr	r0, [r7, #4]
 800e23e:	f001 fea7 	bl	800ff90 <VL53L0X_WrByte>
 800e242:	4603      	mov	r3, r0
 800e244:	461a      	mov	r2, r3
 800e246:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800e24a:	4313      	orrs	r3, r2
 800e24c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800e250:	2200      	movs	r2, #0
 800e252:	21ff      	movs	r1, #255	; 0xff
 800e254:	6878      	ldr	r0, [r7, #4]
 800e256:	f001 fe9b 	bl	800ff90 <VL53L0X_WrByte>
 800e25a:	4603      	mov	r3, r0
 800e25c:	461a      	mov	r2, r3
 800e25e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800e262:	4313      	orrs	r3, r2
 800e264:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 800e268:	2200      	movs	r2, #0
 800e26a:	2180      	movs	r1, #128	; 0x80
 800e26c:	6878      	ldr	r0, [r7, #4]
 800e26e:	f001 fe8f 	bl	800ff90 <VL53L0X_WrByte>
 800e272:	4603      	mov	r3, r0
 800e274:	461a      	mov	r2, r3
 800e276:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800e27a:	4313      	orrs	r3, r2
 800e27c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	}

	if ((Status == VL53L0X_ERROR_NONE) &&
 800e280:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
 800e284:	2b00      	cmp	r3, #0
 800e286:	f040 808f 	bne.w	800e3a8 <VL53L0X_get_info_from_device+0x98e>
 800e28a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800e28e:	2b07      	cmp	r3, #7
 800e290:	f000 808a 	beq.w	800e3a8 <VL53L0X_get_info_from_device+0x98e>
		(ReadDataFromDeviceDone != 7)) {
		/* Assign to variable if status is ok */
		if (((option & 1) == 1) &&
 800e294:	78fb      	ldrb	r3, [r7, #3]
 800e296:	f003 0301 	and.w	r3, r3, #1
 800e29a:	2b00      	cmp	r3, #0
 800e29c:	d024      	beq.n	800e2e8 <VL53L0X_get_info_from_device+0x8ce>
			((ReadDataFromDeviceDone & 1) == 0)) {
 800e29e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800e2a2:	f003 0301 	and.w	r3, r3, #1
		if (((option & 1) == 1) &&
 800e2a6:	2b00      	cmp	r3, #0
 800e2a8:	d11e      	bne.n	800e2e8 <VL53L0X_get_info_from_device+0x8ce>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800e2aa:	687b      	ldr	r3, [r7, #4]
 800e2ac:	f897 205e 	ldrb.w	r2, [r7, #94]	; 0x5e
 800e2b0:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
				ReferenceSpadCount, ReferenceSpadCount);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800e2b4:	687b      	ldr	r3, [r7, #4]
 800e2b6:	f897 205d 	ldrb.w	r2, [r7, #93]	; 0x5d
 800e2ba:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
				ReferenceSpadType, ReferenceSpadType);

			for (i = 0; i < VL53L0X_REF_SPAD_BUFFER_SIZE; i++) {
 800e2be:	2300      	movs	r3, #0
 800e2c0:	64fb      	str	r3, [r7, #76]	; 0x4c
 800e2c2:	e00e      	b.n	800e2e2 <VL53L0X_get_info_from_device+0x8c8>
				Dev->Data.SpadData.RefGoodSpadMap[i] =
					NvmRefGoodSpadMap[i];
 800e2c4:	f107 0208 	add.w	r2, r7, #8
 800e2c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e2ca:	4413      	add	r3, r2
 800e2cc:	7819      	ldrb	r1, [r3, #0]
				Dev->Data.SpadData.RefGoodSpadMap[i] =
 800e2ce:	687a      	ldr	r2, [r7, #4]
 800e2d0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e2d2:	4413      	add	r3, r2
 800e2d4:	f503 7395 	add.w	r3, r3, #298	; 0x12a
 800e2d8:	460a      	mov	r2, r1
 800e2da:	701a      	strb	r2, [r3, #0]
			for (i = 0; i < VL53L0X_REF_SPAD_BUFFER_SIZE; i++) {
 800e2dc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e2de:	3301      	adds	r3, #1
 800e2e0:	64fb      	str	r3, [r7, #76]	; 0x4c
 800e2e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e2e4:	2b05      	cmp	r3, #5
 800e2e6:	dded      	ble.n	800e2c4 <VL53L0X_get_info_from_device+0x8aa>
			}
		}

		if (((option & 2) == 2) &&
 800e2e8:	78fb      	ldrb	r3, [r7, #3]
 800e2ea:	f003 0302 	and.w	r3, r3, #2
 800e2ee:	2b00      	cmp	r3, #0
 800e2f0:	d018      	beq.n	800e324 <VL53L0X_get_info_from_device+0x90a>
			((ReadDataFromDeviceDone & 2) == 0)) {
 800e2f2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800e2f6:	f003 0302 	and.w	r3, r3, #2
		if (((option & 2) == 2) &&
 800e2fa:	2b00      	cmp	r3, #0
 800e2fc:	d112      	bne.n	800e324 <VL53L0X_get_info_from_device+0x90a>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800e2fe:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800e302:	687b      	ldr	r3, [r7, #4]
 800e304:	f883 20f1 	strb.w	r2, [r3, #241]	; 0xf1
					ModuleId, ModuleId);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800e308:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 800e30c:	687b      	ldr	r3, [r7, #4]
 800e30e:	f883 20f2 	strb.w	r2, [r3, #242]	; 0xf2
					Revision, Revision);

			ProductId_tmp = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 800e312:	687b      	ldr	r3, [r7, #4]
 800e314:	33f3      	adds	r3, #243	; 0xf3
 800e316:	63bb      	str	r3, [r7, #56]	; 0x38
					ProductId);
			VL53L0X_COPYSTRING(ProductId_tmp, ProductId);
 800e318:	f107 0310 	add.w	r3, r7, #16
 800e31c:	4619      	mov	r1, r3
 800e31e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800e320:	f002 feb7 	bl	8011092 <strcpy>

		}

		if (((option & 4) == 4) &&
 800e324:	78fb      	ldrb	r3, [r7, #3]
 800e326:	f003 0304 	and.w	r3, r3, #4
 800e32a:	2b00      	cmp	r3, #0
 800e32c:	d030      	beq.n	800e390 <VL53L0X_get_info_from_device+0x976>
			((ReadDataFromDeviceDone & 4) == 0)) {
 800e32e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800e332:	f003 0304 	and.w	r3, r3, #4
		if (((option & 4) == 4) &&
 800e336:	2b00      	cmp	r3, #0
 800e338:	d12a      	bne.n	800e390 <VL53L0X_get_info_from_device+0x976>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800e33a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e33c:	687b      	ldr	r3, [r7, #4]
 800e33e:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
						PartUIDUpper, PartUIDUpper);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800e342:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e344:	687b      	ldr	r3, [r7, #4]
 800e346:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
						PartUIDLower, PartUIDLower);

			SignalRateMeasFixed400mmFix =
 800e34a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e34c:	025b      	lsls	r3, r3, #9
 800e34e:	643b      	str	r3, [r7, #64]	; 0x40
				VL53L0X_FIXPOINT97TOFIXPOINT1616(
					SignalRateMeasFixed1104_400_mm);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800e350:	687b      	ldr	r3, [r7, #4]
 800e352:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800e354:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
				SignalRateMeasFixed400mm,
				SignalRateMeasFixed400mmFix);

			OffsetMicroMeters = 0;
 800e358:	2300      	movs	r3, #0
 800e35a:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
			if (DistMeasFixed1104_400_mm != 0) {
 800e35e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e360:	2b00      	cmp	r3, #0
 800e362:	d011      	beq.n	800e388 <VL53L0X_get_info_from_device+0x96e>
					OffsetFixed1104_mm =
 800e364:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800e366:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e368:	1ad3      	subs	r3, r2, r3
 800e36a:	64bb      	str	r3, [r7, #72]	; 0x48
						DistMeasFixed1104_400_mm -
						DistMeasTgtFixed1104_mm;
					OffsetMicroMeters = (OffsetFixed1104_mm
						* 1000) >> 4;
 800e36c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e36e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800e372:	fb02 f303 	mul.w	r3, r2, r3
 800e376:	091b      	lsrs	r3, r3, #4
					OffsetMicroMeters = (OffsetFixed1104_mm
 800e378:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
					OffsetMicroMeters *= -1;
 800e37c:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 800e380:	425b      	negs	r3, r3
 800e382:	b29b      	uxth	r3, r3
 800e384:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
			}

			PALDevDataSet(Dev,
 800e388:	f9b7 205a 	ldrsh.w	r2, [r7, #90]	; 0x5a
 800e38c:	687b      	ldr	r3, [r7, #4]
 800e38e:	60da      	str	r2, [r3, #12]
				Part2PartOffsetAdjustmentNVMMicroMeter,
				OffsetMicroMeters);
		}
		byte = (uint8_t)(ReadDataFromDeviceDone|option);
 800e390:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 800e394:	78fb      	ldrb	r3, [r7, #3]
 800e396:	4313      	orrs	r3, r2
 800e398:	b2db      	uxtb	r3, r3
 800e39a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, ReadDataFromDeviceDone,
 800e39e:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800e3a2:	687b      	ldr	r3, [r7, #4]
 800e3a4:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
				byte);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800e3a8:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
}
 800e3ac:	4618      	mov	r0, r3
 800e3ae:	3760      	adds	r7, #96	; 0x60
 800e3b0:	46bd      	mov	sp, r7
 800e3b2:	bd80      	pop	{r7, pc}

0800e3b4 <VL53L0X_calc_macro_period_ps>:


uint32_t VL53L0X_calc_macro_period_ps(VL53L0X_DEV Dev, uint8_t vcsel_period_pclks)
{
 800e3b4:	b480      	push	{r7}
 800e3b6:	b087      	sub	sp, #28
 800e3b8:	af00      	add	r7, sp, #0
 800e3ba:	6078      	str	r0, [r7, #4]
 800e3bc:	460b      	mov	r3, r1
 800e3be:	70fb      	strb	r3, [r7, #3]
	LOG_FUNCTION_START("");

	/* The above calculation will produce rounding errors,
	   therefore set fixed value
	*/
	PLL_period_ps = 1655;
 800e3c0:	f240 6277 	movw	r2, #1655	; 0x677
 800e3c4:	f04f 0300 	mov.w	r3, #0
 800e3c8:	e9c7 2304 	strd	r2, r3, [r7, #16]

	macro_period_vclks = 2304;
 800e3cc:	f44f 6310 	mov.w	r3, #2304	; 0x900
 800e3d0:	60fb      	str	r3, [r7, #12]
	macro_period_ps = (uint32_t)(macro_period_vclks
			* vcsel_period_pclks * PLL_period_ps);
 800e3d2:	78fb      	ldrb	r3, [r7, #3]
 800e3d4:	68fa      	ldr	r2, [r7, #12]
 800e3d6:	fb02 f303 	mul.w	r3, r2, r3
	macro_period_ps = (uint32_t)(macro_period_vclks
 800e3da:	693a      	ldr	r2, [r7, #16]
 800e3dc:	fb02 f303 	mul.w	r3, r2, r3
 800e3e0:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_END("");
	return macro_period_ps;
 800e3e2:	68bb      	ldr	r3, [r7, #8]
}
 800e3e4:	4618      	mov	r0, r3
 800e3e6:	371c      	adds	r7, #28
 800e3e8:	46bd      	mov	sp, r7
 800e3ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3ee:	4770      	bx	lr

0800e3f0 <VL53L0X_encode_timeout>:

uint16_t VL53L0X_encode_timeout(uint32_t timeout_macro_clks)
{
 800e3f0:	b480      	push	{r7}
 800e3f2:	b087      	sub	sp, #28
 800e3f4:	af00      	add	r7, sp, #0
 800e3f6:	6078      	str	r0, [r7, #4]
	/*!
	 * Encode timeout in macro periods in (LSByte * 2^MSByte) + 1 format
	 */

	uint16_t encoded_timeout = 0;
 800e3f8:	2300      	movs	r3, #0
 800e3fa:	82fb      	strh	r3, [r7, #22]
	uint32_t ls_byte = 0;
 800e3fc:	2300      	movs	r3, #0
 800e3fe:	613b      	str	r3, [r7, #16]
	uint16_t ms_byte = 0;
 800e400:	2300      	movs	r3, #0
 800e402:	81fb      	strh	r3, [r7, #14]

	if (timeout_macro_clks > 0) {
 800e404:	687b      	ldr	r3, [r7, #4]
 800e406:	2b00      	cmp	r3, #0
 800e408:	d017      	beq.n	800e43a <VL53L0X_encode_timeout+0x4a>
		ls_byte = timeout_macro_clks - 1;
 800e40a:	687b      	ldr	r3, [r7, #4]
 800e40c:	3b01      	subs	r3, #1
 800e40e:	613b      	str	r3, [r7, #16]

		while ((ls_byte & 0xFFFFFF00) > 0) {
 800e410:	e005      	b.n	800e41e <VL53L0X_encode_timeout+0x2e>
			ls_byte = ls_byte >> 1;
 800e412:	693b      	ldr	r3, [r7, #16]
 800e414:	085b      	lsrs	r3, r3, #1
 800e416:	613b      	str	r3, [r7, #16]
			ms_byte++;
 800e418:	89fb      	ldrh	r3, [r7, #14]
 800e41a:	3301      	adds	r3, #1
 800e41c:	81fb      	strh	r3, [r7, #14]
		while ((ls_byte & 0xFFFFFF00) > 0) {
 800e41e:	693b      	ldr	r3, [r7, #16]
 800e420:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800e424:	2b00      	cmp	r3, #0
 800e426:	d1f4      	bne.n	800e412 <VL53L0X_encode_timeout+0x22>
		}

		encoded_timeout = (ms_byte << 8)
 800e428:	89fb      	ldrh	r3, [r7, #14]
 800e42a:	021b      	lsls	r3, r3, #8
 800e42c:	b29a      	uxth	r2, r3
				+ (uint16_t) (ls_byte & 0x000000FF);
 800e42e:	693b      	ldr	r3, [r7, #16]
 800e430:	b29b      	uxth	r3, r3
 800e432:	b2db      	uxtb	r3, r3
 800e434:	b29b      	uxth	r3, r3
		encoded_timeout = (ms_byte << 8)
 800e436:	4413      	add	r3, r2
 800e438:	82fb      	strh	r3, [r7, #22]
	}

	return encoded_timeout;
 800e43a:	8afb      	ldrh	r3, [r7, #22]

}
 800e43c:	4618      	mov	r0, r3
 800e43e:	371c      	adds	r7, #28
 800e440:	46bd      	mov	sp, r7
 800e442:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e446:	4770      	bx	lr

0800e448 <VL53L0X_decode_timeout>:

uint32_t VL53L0X_decode_timeout(uint16_t encoded_timeout)
{
 800e448:	b480      	push	{r7}
 800e44a:	b085      	sub	sp, #20
 800e44c:	af00      	add	r7, sp, #0
 800e44e:	4603      	mov	r3, r0
 800e450:	80fb      	strh	r3, [r7, #6]
	/*!
	 * Decode 16-bit timeout register value - format (LSByte * 2^MSByte) + 1
	 */

	uint32_t timeout_macro_clks = 0;
 800e452:	2300      	movs	r3, #0
 800e454:	60fb      	str	r3, [r7, #12]

	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 800e456:	88fb      	ldrh	r3, [r7, #6]
 800e458:	b2db      	uxtb	r3, r3
			<< (uint32_t) ((encoded_timeout & 0xFF00) >> 8)) + 1;
 800e45a:	88fa      	ldrh	r2, [r7, #6]
 800e45c:	0a12      	lsrs	r2, r2, #8
 800e45e:	b292      	uxth	r2, r2
 800e460:	4093      	lsls	r3, r2
	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 800e462:	3301      	adds	r3, #1
 800e464:	60fb      	str	r3, [r7, #12]

	return timeout_macro_clks;
 800e466:	68fb      	ldr	r3, [r7, #12]
}
 800e468:	4618      	mov	r0, r3
 800e46a:	3714      	adds	r7, #20
 800e46c:	46bd      	mov	sp, r7
 800e46e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e472:	4770      	bx	lr

0800e474 <VL53L0X_calc_timeout_mclks>:

/* To convert ms into register value */
uint32_t VL53L0X_calc_timeout_mclks(VL53L0X_DEV Dev,
		uint32_t timeout_period_us,
		uint8_t vcsel_period_pclks)
{
 800e474:	b580      	push	{r7, lr}
 800e476:	b088      	sub	sp, #32
 800e478:	af00      	add	r7, sp, #0
 800e47a:	60f8      	str	r0, [r7, #12]
 800e47c:	60b9      	str	r1, [r7, #8]
 800e47e:	4613      	mov	r3, r2
 800e480:	71fb      	strb	r3, [r7, #7]
	uint32_t macro_period_ps;
	uint32_t macro_period_ns;
	uint32_t timeout_period_mclks = 0;
 800e482:	2300      	movs	r3, #0
 800e484:	61fb      	str	r3, [r7, #28]

	macro_period_ps = VL53L0X_calc_macro_period_ps(Dev, vcsel_period_pclks);
 800e486:	79fb      	ldrb	r3, [r7, #7]
 800e488:	4619      	mov	r1, r3
 800e48a:	68f8      	ldr	r0, [r7, #12]
 800e48c:	f7ff ff92 	bl	800e3b4 <VL53L0X_calc_macro_period_ps>
 800e490:	61b8      	str	r0, [r7, #24]
	macro_period_ns = (macro_period_ps + 500) / 1000;
 800e492:	69bb      	ldr	r3, [r7, #24]
 800e494:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800e498:	4a0a      	ldr	r2, [pc, #40]	; (800e4c4 <VL53L0X_calc_timeout_mclks+0x50>)
 800e49a:	fba2 2303 	umull	r2, r3, r2, r3
 800e49e:	099b      	lsrs	r3, r3, #6
 800e4a0:	617b      	str	r3, [r7, #20]

	timeout_period_mclks =
		(uint32_t) (((timeout_period_us * 1000)
 800e4a2:	68bb      	ldr	r3, [r7, #8]
 800e4a4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800e4a8:	fb03 f202 	mul.w	r2, r3, r2
		+ (macro_period_ns / 2)) / macro_period_ns);
 800e4ac:	697b      	ldr	r3, [r7, #20]
 800e4ae:	085b      	lsrs	r3, r3, #1
 800e4b0:	441a      	add	r2, r3
	timeout_period_mclks =
 800e4b2:	697b      	ldr	r3, [r7, #20]
 800e4b4:	fbb2 f3f3 	udiv	r3, r2, r3
 800e4b8:	61fb      	str	r3, [r7, #28]

    return timeout_period_mclks;
 800e4ba:	69fb      	ldr	r3, [r7, #28]
}
 800e4bc:	4618      	mov	r0, r3
 800e4be:	3720      	adds	r7, #32
 800e4c0:	46bd      	mov	sp, r7
 800e4c2:	bd80      	pop	{r7, pc}
 800e4c4:	10624dd3 	.word	0x10624dd3

0800e4c8 <VL53L0X_calc_timeout_us>:

/* To convert register value into us */
uint32_t VL53L0X_calc_timeout_us(VL53L0X_DEV Dev,
		uint16_t timeout_period_mclks,
		uint8_t vcsel_period_pclks)
{
 800e4c8:	b580      	push	{r7, lr}
 800e4ca:	b086      	sub	sp, #24
 800e4cc:	af00      	add	r7, sp, #0
 800e4ce:	6078      	str	r0, [r7, #4]
 800e4d0:	460b      	mov	r3, r1
 800e4d2:	807b      	strh	r3, [r7, #2]
 800e4d4:	4613      	mov	r3, r2
 800e4d6:	707b      	strb	r3, [r7, #1]
	uint32_t macro_period_ps;
	uint32_t macro_period_ns;
	uint32_t actual_timeout_period_us = 0;
 800e4d8:	2300      	movs	r3, #0
 800e4da:	617b      	str	r3, [r7, #20]

	macro_period_ps = VL53L0X_calc_macro_period_ps(Dev, vcsel_period_pclks);
 800e4dc:	787b      	ldrb	r3, [r7, #1]
 800e4de:	4619      	mov	r1, r3
 800e4e0:	6878      	ldr	r0, [r7, #4]
 800e4e2:	f7ff ff67 	bl	800e3b4 <VL53L0X_calc_macro_period_ps>
 800e4e6:	6138      	str	r0, [r7, #16]
	macro_period_ns = (macro_period_ps + 500) / 1000;
 800e4e8:	693b      	ldr	r3, [r7, #16]
 800e4ea:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800e4ee:	4a0a      	ldr	r2, [pc, #40]	; (800e518 <VL53L0X_calc_timeout_us+0x50>)
 800e4f0:	fba2 2303 	umull	r2, r3, r2, r3
 800e4f4:	099b      	lsrs	r3, r3, #6
 800e4f6:	60fb      	str	r3, [r7, #12]

	actual_timeout_period_us =
		((timeout_period_mclks * macro_period_ns) + 500) / 1000;
 800e4f8:	887b      	ldrh	r3, [r7, #2]
 800e4fa:	68fa      	ldr	r2, [r7, #12]
 800e4fc:	fb02 f303 	mul.w	r3, r2, r3
 800e500:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
	actual_timeout_period_us =
 800e504:	4a04      	ldr	r2, [pc, #16]	; (800e518 <VL53L0X_calc_timeout_us+0x50>)
 800e506:	fba2 2303 	umull	r2, r3, r2, r3
 800e50a:	099b      	lsrs	r3, r3, #6
 800e50c:	617b      	str	r3, [r7, #20]

	return actual_timeout_period_us;
 800e50e:	697b      	ldr	r3, [r7, #20]
}
 800e510:	4618      	mov	r0, r3
 800e512:	3718      	adds	r7, #24
 800e514:	46bd      	mov	sp, r7
 800e516:	bd80      	pop	{r7, pc}
 800e518:	10624dd3 	.word	0x10624dd3

0800e51c <get_sequence_step_timeout>:


VL53L0X_Error get_sequence_step_timeout(VL53L0X_DEV Dev,
				VL53L0X_SequenceStepId SequenceStepId,
				uint32_t *pTimeOutMicroSecs)
{
 800e51c:	b580      	push	{r7, lr}
 800e51e:	b08c      	sub	sp, #48	; 0x30
 800e520:	af00      	add	r7, sp, #0
 800e522:	60f8      	str	r0, [r7, #12]
 800e524:	460b      	mov	r3, r1
 800e526:	607a      	str	r2, [r7, #4]
 800e528:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800e52a:	2300      	movs	r3, #0
 800e52c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint8_t CurrentVCSELPulsePeriodPClk;
	uint8_t EncodedTimeOutByte = 0;
 800e530:	2300      	movs	r3, #0
 800e532:	f887 3020 	strb.w	r3, [r7, #32]
	uint32_t TimeoutMicroSeconds = 0;
 800e536:	2300      	movs	r3, #0
 800e538:	62bb      	str	r3, [r7, #40]	; 0x28
	uint16_t PreRangeEncodedTimeOut = 0;
 800e53a:	2300      	movs	r3, #0
 800e53c:	83fb      	strh	r3, [r7, #30]
	uint16_t MsrcTimeOutMClks;
	uint16_t PreRangeTimeOutMClks;
	uint16_t FinalRangeTimeOutMClks = 0;
 800e53e:	2300      	movs	r3, #0
 800e540:	84bb      	strh	r3, [r7, #36]	; 0x24
	uint16_t FinalRangeEncodedTimeOut;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;

	if ((SequenceStepId == VL53L0X_SEQUENCESTEP_TCC)	 ||
 800e542:	7afb      	ldrb	r3, [r7, #11]
 800e544:	2b00      	cmp	r3, #0
 800e546:	d005      	beq.n	800e554 <get_sequence_step_timeout+0x38>
 800e548:	7afb      	ldrb	r3, [r7, #11]
 800e54a:	2b01      	cmp	r3, #1
 800e54c:	d002      	beq.n	800e554 <get_sequence_step_timeout+0x38>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_DSS)	 ||
 800e54e:	7afb      	ldrb	r3, [r7, #11]
 800e550:	2b02      	cmp	r3, #2
 800e552:	d128      	bne.n	800e5a6 <get_sequence_step_timeout+0x8a>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_MSRC)) {

		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800e554:	f107 0321 	add.w	r3, r7, #33	; 0x21
 800e558:	461a      	mov	r2, r3
 800e55a:	2100      	movs	r1, #0
 800e55c:	68f8      	ldr	r0, [r7, #12]
 800e55e:	f7fd fa4d 	bl	800b9fc <VL53L0X_GetVcselPulsePeriod>
 800e562:	4603      	mov	r3, r0
 800e564:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);
		if (Status == VL53L0X_ERROR_NONE) {
 800e568:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800e56c:	2b00      	cmp	r3, #0
 800e56e:	d109      	bne.n	800e584 <get_sequence_step_timeout+0x68>
			Status = VL53L0X_RdByte(Dev,
 800e570:	f107 0320 	add.w	r3, r7, #32
 800e574:	461a      	mov	r2, r3
 800e576:	2146      	movs	r1, #70	; 0x46
 800e578:	68f8      	ldr	r0, [r7, #12]
 800e57a:	f001 fd8b 	bl	8010094 <VL53L0X_RdByte>
 800e57e:	4603      	mov	r3, r0
 800e580:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_REG_MSRC_CONFIG_TIMEOUT_MACROP,
					&EncodedTimeOutByte);
		}
		MsrcTimeOutMClks = VL53L0X_decode_timeout(EncodedTimeOutByte);
 800e584:	f897 3020 	ldrb.w	r3, [r7, #32]
 800e588:	b29b      	uxth	r3, r3
 800e58a:	4618      	mov	r0, r3
 800e58c:	f7ff ff5c 	bl	800e448 <VL53L0X_decode_timeout>
 800e590:	4603      	mov	r3, r0
 800e592:	847b      	strh	r3, [r7, #34]	; 0x22

		TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 800e594:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 800e598:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e59a:	4619      	mov	r1, r3
 800e59c:	68f8      	ldr	r0, [r7, #12]
 800e59e:	f7ff ff93 	bl	800e4c8 <VL53L0X_calc_timeout_us>
 800e5a2:	62b8      	str	r0, [r7, #40]	; 0x28
 800e5a4:	e092      	b.n	800e6cc <get_sequence_step_timeout+0x1b0>
						MsrcTimeOutMClks,
						CurrentVCSELPulsePeriodPClk);
	} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_PRE_RANGE) {
 800e5a6:	7afb      	ldrb	r3, [r7, #11]
 800e5a8:	2b03      	cmp	r3, #3
 800e5aa:	d135      	bne.n	800e618 <get_sequence_step_timeout+0xfc>
		/* Retrieve PRE-RANGE VCSEL Period */
		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800e5ac:	f107 0321 	add.w	r3, r7, #33	; 0x21
 800e5b0:	461a      	mov	r2, r3
 800e5b2:	2100      	movs	r1, #0
 800e5b4:	68f8      	ldr	r0, [r7, #12]
 800e5b6:	f7fd fa21 	bl	800b9fc <VL53L0X_GetVcselPulsePeriod>
 800e5ba:	4603      	mov	r3, r0
 800e5bc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
						VL53L0X_VCSEL_PERIOD_PRE_RANGE,
						&CurrentVCSELPulsePeriodPClk);

		/* Retrieve PRE-RANGE Timeout in Macro periods (MCLKS) */
		if (Status == VL53L0X_ERROR_NONE) {
 800e5c0:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800e5c4:	2b00      	cmp	r3, #0
 800e5c6:	f040 8081 	bne.w	800e6cc <get_sequence_step_timeout+0x1b0>

			/* Retrieve PRE-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800e5ca:	f107 0321 	add.w	r3, r7, #33	; 0x21
 800e5ce:	461a      	mov	r2, r3
 800e5d0:	2100      	movs	r1, #0
 800e5d2:	68f8      	ldr	r0, [r7, #12]
 800e5d4:	f7fd fa12 	bl	800b9fc <VL53L0X_GetVcselPulsePeriod>
 800e5d8:	4603      	mov	r3, r0
 800e5da:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

			if (Status == VL53L0X_ERROR_NONE) {
 800e5de:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800e5e2:	2b00      	cmp	r3, #0
 800e5e4:	d109      	bne.n	800e5fa <get_sequence_step_timeout+0xde>
				Status = VL53L0X_RdWord(Dev,
 800e5e6:	f107 031e 	add.w	r3, r7, #30
 800e5ea:	461a      	mov	r2, r3
 800e5ec:	2151      	movs	r1, #81	; 0x51
 800e5ee:	68f8      	ldr	r0, [r7, #12]
 800e5f0:	f001 fd7a 	bl	80100e8 <VL53L0X_RdWord>
 800e5f4:	4603      	mov	r3, r0
 800e5f6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&PreRangeEncodedTimeOut);
			}

			PreRangeTimeOutMClks = VL53L0X_decode_timeout(
 800e5fa:	8bfb      	ldrh	r3, [r7, #30]
 800e5fc:	4618      	mov	r0, r3
 800e5fe:	f7ff ff23 	bl	800e448 <VL53L0X_decode_timeout>
 800e602:	4603      	mov	r3, r0
 800e604:	84fb      	strh	r3, [r7, #38]	; 0x26
					PreRangeEncodedTimeOut);

			TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 800e606:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 800e60a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800e60c:	4619      	mov	r1, r3
 800e60e:	68f8      	ldr	r0, [r7, #12]
 800e610:	f7ff ff5a 	bl	800e4c8 <VL53L0X_calc_timeout_us>
 800e614:	62b8      	str	r0, [r7, #40]	; 0x28
 800e616:	e059      	b.n	800e6cc <get_sequence_step_timeout+0x1b0>
					PreRangeTimeOutMClks,
					CurrentVCSELPulsePeriodPClk);
		}
	} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_FINAL_RANGE) {
 800e618:	7afb      	ldrb	r3, [r7, #11]
 800e61a:	2b04      	cmp	r3, #4
 800e61c:	d156      	bne.n	800e6cc <get_sequence_step_timeout+0x1b0>

		VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 800e61e:	f107 0314 	add.w	r3, r7, #20
 800e622:	4619      	mov	r1, r3
 800e624:	68f8      	ldr	r0, [r7, #12]
 800e626:	f7fd faf5 	bl	800bc14 <VL53L0X_GetSequenceStepEnables>
		PreRangeTimeOutMClks = 0;
 800e62a:	2300      	movs	r3, #0
 800e62c:	84fb      	strh	r3, [r7, #38]	; 0x26

		if (SchedulerSequenceSteps.PreRangeOn) {
 800e62e:	7dfb      	ldrb	r3, [r7, #23]
 800e630:	2b00      	cmp	r3, #0
 800e632:	d01d      	beq.n	800e670 <get_sequence_step_timeout+0x154>
			/* Retrieve PRE-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800e634:	f107 0321 	add.w	r3, r7, #33	; 0x21
 800e638:	461a      	mov	r2, r3
 800e63a:	2100      	movs	r1, #0
 800e63c:	68f8      	ldr	r0, [r7, #12]
 800e63e:	f7fd f9dd 	bl	800b9fc <VL53L0X_GetVcselPulsePeriod>
 800e642:	4603      	mov	r3, r0
 800e644:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_VCSEL_PERIOD_PRE_RANGE,
				&CurrentVCSELPulsePeriodPClk);

			/* Retrieve PRE-RANGE Timeout in Macro periods
			 * (MCLKS) */
			if (Status == VL53L0X_ERROR_NONE) {
 800e648:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800e64c:	2b00      	cmp	r3, #0
 800e64e:	d10f      	bne.n	800e670 <get_sequence_step_timeout+0x154>
				Status = VL53L0X_RdWord(Dev,
 800e650:	f107 031e 	add.w	r3, r7, #30
 800e654:	461a      	mov	r2, r3
 800e656:	2151      	movs	r1, #81	; 0x51
 800e658:	68f8      	ldr	r0, [r7, #12]
 800e65a:	f001 fd45 	bl	80100e8 <VL53L0X_RdWord>
 800e65e:	4603      	mov	r3, r0
 800e660:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&PreRangeEncodedTimeOut);
				PreRangeTimeOutMClks = VL53L0X_decode_timeout(
 800e664:	8bfb      	ldrh	r3, [r7, #30]
 800e666:	4618      	mov	r0, r3
 800e668:	f7ff feee 	bl	800e448 <VL53L0X_decode_timeout>
 800e66c:	4603      	mov	r3, r0
 800e66e:	84fb      	strh	r3, [r7, #38]	; 0x26
						PreRangeEncodedTimeOut);
			}
		}

		if (Status == VL53L0X_ERROR_NONE) {
 800e670:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800e674:	2b00      	cmp	r3, #0
 800e676:	d109      	bne.n	800e68c <get_sequence_step_timeout+0x170>
			/* Retrieve FINAL-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800e678:	f107 0321 	add.w	r3, r7, #33	; 0x21
 800e67c:	461a      	mov	r2, r3
 800e67e:	2101      	movs	r1, #1
 800e680:	68f8      	ldr	r0, [r7, #12]
 800e682:	f7fd f9bb 	bl	800b9fc <VL53L0X_GetVcselPulsePeriod>
 800e686:	4603      	mov	r3, r0
 800e688:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
					&CurrentVCSELPulsePeriodPClk);
		}

		/* Retrieve FINAL-RANGE Timeout in Macro periods (MCLKS) */
		if (Status == VL53L0X_ERROR_NONE) {
 800e68c:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800e690:	2b00      	cmp	r3, #0
 800e692:	d10f      	bne.n	800e6b4 <get_sequence_step_timeout+0x198>
			Status = VL53L0X_RdWord(Dev,
 800e694:	f107 031c 	add.w	r3, r7, #28
 800e698:	461a      	mov	r2, r3
 800e69a:	2171      	movs	r1, #113	; 0x71
 800e69c:	68f8      	ldr	r0, [r7, #12]
 800e69e:	f001 fd23 	bl	80100e8 <VL53L0X_RdWord>
 800e6a2:	4603      	mov	r3, r0
 800e6a4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_REG_FINAL_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&FinalRangeEncodedTimeOut);
			FinalRangeTimeOutMClks = VL53L0X_decode_timeout(
 800e6a8:	8bbb      	ldrh	r3, [r7, #28]
 800e6aa:	4618      	mov	r0, r3
 800e6ac:	f7ff fecc 	bl	800e448 <VL53L0X_decode_timeout>
 800e6b0:	4603      	mov	r3, r0
 800e6b2:	84bb      	strh	r3, [r7, #36]	; 0x24
					FinalRangeEncodedTimeOut);
		}

		FinalRangeTimeOutMClks -= PreRangeTimeOutMClks;
 800e6b4:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800e6b6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800e6b8:	1ad3      	subs	r3, r2, r3
 800e6ba:	84bb      	strh	r3, [r7, #36]	; 0x24
		TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 800e6bc:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 800e6c0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e6c2:	4619      	mov	r1, r3
 800e6c4:	68f8      	ldr	r0, [r7, #12]
 800e6c6:	f7ff feff 	bl	800e4c8 <VL53L0X_calc_timeout_us>
 800e6ca:	62b8      	str	r0, [r7, #40]	; 0x28
						FinalRangeTimeOutMClks,
						CurrentVCSELPulsePeriodPClk);
	}

	*pTimeOutMicroSecs = TimeoutMicroSeconds;
 800e6cc:	687b      	ldr	r3, [r7, #4]
 800e6ce:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e6d0:	601a      	str	r2, [r3, #0]

	return Status;
 800e6d2:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 800e6d6:	4618      	mov	r0, r3
 800e6d8:	3730      	adds	r7, #48	; 0x30
 800e6da:	46bd      	mov	sp, r7
 800e6dc:	bd80      	pop	{r7, pc}

0800e6de <set_sequence_step_timeout>:


VL53L0X_Error set_sequence_step_timeout(VL53L0X_DEV Dev,
					VL53L0X_SequenceStepId SequenceStepId,
					uint32_t TimeOutMicroSecs)
{
 800e6de:	b580      	push	{r7, lr}
 800e6e0:	b08a      	sub	sp, #40	; 0x28
 800e6e2:	af00      	add	r7, sp, #0
 800e6e4:	60f8      	str	r0, [r7, #12]
 800e6e6:	460b      	mov	r3, r1
 800e6e8:	607a      	str	r2, [r7, #4]
 800e6ea:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800e6ec:	2300      	movs	r3, #0
 800e6ee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint16_t MsrcRangeTimeOutMClks;
	uint32_t FinalRangeTimeOutMClks;
	uint16_t FinalRangeEncodedTimeOut;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;

	if ((SequenceStepId == VL53L0X_SEQUENCESTEP_TCC)	 ||
 800e6f2:	7afb      	ldrb	r3, [r7, #11]
 800e6f4:	2b00      	cmp	r3, #0
 800e6f6:	d005      	beq.n	800e704 <set_sequence_step_timeout+0x26>
 800e6f8:	7afb      	ldrb	r3, [r7, #11]
 800e6fa:	2b01      	cmp	r3, #1
 800e6fc:	d002      	beq.n	800e704 <set_sequence_step_timeout+0x26>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_DSS)	 ||
 800e6fe:	7afb      	ldrb	r3, [r7, #11]
 800e700:	2b02      	cmp	r3, #2
 800e702:	d138      	bne.n	800e776 <set_sequence_step_timeout+0x98>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_MSRC)) {

		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800e704:	f107 031b 	add.w	r3, r7, #27
 800e708:	461a      	mov	r2, r3
 800e70a:	2100      	movs	r1, #0
 800e70c:	68f8      	ldr	r0, [r7, #12]
 800e70e:	f7fd f975 	bl	800b9fc <VL53L0X_GetVcselPulsePeriod>
 800e712:	4603      	mov	r3, r0
 800e714:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

		if (Status == VL53L0X_ERROR_NONE) {
 800e718:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800e71c:	2b00      	cmp	r3, #0
 800e71e:	d11a      	bne.n	800e756 <set_sequence_step_timeout+0x78>
			MsrcRangeTimeOutMClks = VL53L0X_calc_timeout_mclks(Dev,
 800e720:	7efb      	ldrb	r3, [r7, #27]
 800e722:	461a      	mov	r2, r3
 800e724:	6879      	ldr	r1, [r7, #4]
 800e726:	68f8      	ldr	r0, [r7, #12]
 800e728:	f7ff fea4 	bl	800e474 <VL53L0X_calc_timeout_mclks>
 800e72c:	4603      	mov	r3, r0
 800e72e:	83bb      	strh	r3, [r7, #28]
					TimeOutMicroSecs,
					(uint8_t)CurrentVCSELPulsePeriodPClk);

			if (MsrcRangeTimeOutMClks > 256)
 800e730:	8bbb      	ldrh	r3, [r7, #28]
 800e732:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e736:	d903      	bls.n	800e740 <set_sequence_step_timeout+0x62>
				MsrcEncodedTimeOut = 255;
 800e738:	23ff      	movs	r3, #255	; 0xff
 800e73a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800e73e:	e004      	b.n	800e74a <set_sequence_step_timeout+0x6c>
			else
				MsrcEncodedTimeOut =
					(uint8_t)MsrcRangeTimeOutMClks - 1;
 800e740:	8bbb      	ldrh	r3, [r7, #28]
 800e742:	b2db      	uxtb	r3, r3
				MsrcEncodedTimeOut =
 800e744:	3b01      	subs	r3, #1
 800e746:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800e74a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e74e:	b29a      	uxth	r2, r3
 800e750:	68fb      	ldr	r3, [r7, #12]
 800e752:	f8a3 20d8 	strh.w	r2, [r3, #216]	; 0xd8
				LastEncodedTimeout,
				MsrcEncodedTimeOut);
		}

		if (Status == VL53L0X_ERROR_NONE) {
 800e756:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800e75a:	2b00      	cmp	r3, #0
 800e75c:	f040 80ab 	bne.w	800e8b6 <set_sequence_step_timeout+0x1d8>
			Status = VL53L0X_WrByte(Dev,
 800e760:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e764:	461a      	mov	r2, r3
 800e766:	2146      	movs	r1, #70	; 0x46
 800e768:	68f8      	ldr	r0, [r7, #12]
 800e76a:	f001 fc11 	bl	800ff90 <VL53L0X_WrByte>
 800e76e:	4603      	mov	r3, r0
 800e770:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if (Status == VL53L0X_ERROR_NONE) {
 800e774:	e09f      	b.n	800e8b6 <set_sequence_step_timeout+0x1d8>
				VL53L0X_REG_MSRC_CONFIG_TIMEOUT_MACROP,
				MsrcEncodedTimeOut);
		}
	} else {

		if (SequenceStepId == VL53L0X_SEQUENCESTEP_PRE_RANGE) {
 800e776:	7afb      	ldrb	r3, [r7, #11]
 800e778:	2b03      	cmp	r3, #3
 800e77a:	d135      	bne.n	800e7e8 <set_sequence_step_timeout+0x10a>

			if (Status == VL53L0X_ERROR_NONE) {
 800e77c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800e780:	2b00      	cmp	r3, #0
 800e782:	d11b      	bne.n	800e7bc <set_sequence_step_timeout+0xde>
				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800e784:	f107 031b 	add.w	r3, r7, #27
 800e788:	461a      	mov	r2, r3
 800e78a:	2100      	movs	r1, #0
 800e78c:	68f8      	ldr	r0, [r7, #12]
 800e78e:	f7fd f935 	bl	800b9fc <VL53L0X_GetVcselPulsePeriod>
 800e792:	4603      	mov	r3, r0
 800e794:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						VL53L0X_VCSEL_PERIOD_PRE_RANGE,
						&CurrentVCSELPulsePeriodPClk);
				PreRangeTimeOutMClks =
					VL53L0X_calc_timeout_mclks(Dev,
 800e798:	7efb      	ldrb	r3, [r7, #27]
 800e79a:	461a      	mov	r2, r3
 800e79c:	6879      	ldr	r1, [r7, #4]
 800e79e:	68f8      	ldr	r0, [r7, #12]
 800e7a0:	f7ff fe68 	bl	800e474 <VL53L0X_calc_timeout_mclks>
 800e7a4:	4603      	mov	r3, r0
				PreRangeTimeOutMClks =
 800e7a6:	84bb      	strh	r3, [r7, #36]	; 0x24
					TimeOutMicroSecs,
					(uint8_t)CurrentVCSELPulsePeriodPClk);
				PreRangeEncodedTimeOut = VL53L0X_encode_timeout(
 800e7a8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e7aa:	4618      	mov	r0, r3
 800e7ac:	f7ff fe20 	bl	800e3f0 <VL53L0X_encode_timeout>
 800e7b0:	4603      	mov	r3, r0
 800e7b2:	833b      	strh	r3, [r7, #24]
					PreRangeTimeOutMClks);

				VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800e7b4:	8b3a      	ldrh	r2, [r7, #24]
 800e7b6:	68fb      	ldr	r3, [r7, #12]
 800e7b8:	f8a3 20d8 	strh.w	r2, [r3, #216]	; 0xd8
					LastEncodedTimeout,
					PreRangeEncodedTimeOut);
			}

			if (Status == VL53L0X_ERROR_NONE) {
 800e7bc:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800e7c0:	2b00      	cmp	r3, #0
 800e7c2:	d108      	bne.n	800e7d6 <set_sequence_step_timeout+0xf8>
				Status = VL53L0X_WrWord(Dev,
 800e7c4:	8b3b      	ldrh	r3, [r7, #24]
 800e7c6:	461a      	mov	r2, r3
 800e7c8:	2151      	movs	r1, #81	; 0x51
 800e7ca:	68f8      	ldr	r0, [r7, #12]
 800e7cc:	f001 fc04 	bl	800ffd8 <VL53L0X_WrWord>
 800e7d0:	4603      	mov	r3, r0
 800e7d2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				PreRangeEncodedTimeOut);
			}

			if (Status == VL53L0X_ERROR_NONE) {
 800e7d6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800e7da:	2b00      	cmp	r3, #0
 800e7dc:	d16b      	bne.n	800e8b6 <set_sequence_step_timeout+0x1d8>
				VL53L0X_SETDEVICESPECIFICPARAMETER(
 800e7de:	68fb      	ldr	r3, [r7, #12]
 800e7e0:	687a      	ldr	r2, [r7, #4]
 800e7e2:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
 800e7e6:	e066      	b.n	800e8b6 <set_sequence_step_timeout+0x1d8>
					Dev,
					PreRangeTimeoutMicroSecs,
					TimeOutMicroSecs);
			}
		} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_FINAL_RANGE) {
 800e7e8:	7afb      	ldrb	r3, [r7, #11]
 800e7ea:	2b04      	cmp	r3, #4
 800e7ec:	d160      	bne.n	800e8b0 <set_sequence_step_timeout+0x1d2>
			 * must be added. To do this both final and pre-range
			 * timeouts must be expressed in macro periods MClks
			 * because they have different vcsel periods.
			 */

			VL53L0X_GetSequenceStepEnables(Dev,
 800e7ee:	f107 0310 	add.w	r3, r7, #16
 800e7f2:	4619      	mov	r1, r3
 800e7f4:	68f8      	ldr	r0, [r7, #12]
 800e7f6:	f7fd fa0d 	bl	800bc14 <VL53L0X_GetSequenceStepEnables>
					&SchedulerSequenceSteps);
			PreRangeTimeOutMClks = 0;
 800e7fa:	2300      	movs	r3, #0
 800e7fc:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (SchedulerSequenceSteps.PreRangeOn) {
 800e7fe:	7cfb      	ldrb	r3, [r7, #19]
 800e800:	2b00      	cmp	r3, #0
 800e802:	d01d      	beq.n	800e840 <set_sequence_step_timeout+0x162>

				/* Retrieve PRE-RANGE VCSEL Period */
				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800e804:	f107 031b 	add.w	r3, r7, #27
 800e808:	461a      	mov	r2, r3
 800e80a:	2100      	movs	r1, #0
 800e80c:	68f8      	ldr	r0, [r7, #12]
 800e80e:	f7fd f8f5 	bl	800b9fc <VL53L0X_GetVcselPulsePeriod>
 800e812:	4603      	mov	r3, r0
 800e814:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

				/* Retrieve PRE-RANGE Timeout in Macro periods
				 * (MCLKS) */
				if (Status == VL53L0X_ERROR_NONE) {
 800e818:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800e81c:	2b00      	cmp	r3, #0
 800e81e:	d10f      	bne.n	800e840 <set_sequence_step_timeout+0x162>
					Status = VL53L0X_RdWord(Dev, 0x51,
 800e820:	f107 0318 	add.w	r3, r7, #24
 800e824:	461a      	mov	r2, r3
 800e826:	2151      	movs	r1, #81	; 0x51
 800e828:	68f8      	ldr	r0, [r7, #12]
 800e82a:	f001 fc5d 	bl	80100e8 <VL53L0X_RdWord>
 800e82e:	4603      	mov	r3, r0
 800e830:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						&PreRangeEncodedTimeOut);
					PreRangeTimeOutMClks =
						VL53L0X_decode_timeout(
 800e834:	8b3b      	ldrh	r3, [r7, #24]
 800e836:	4618      	mov	r0, r3
 800e838:	f7ff fe06 	bl	800e448 <VL53L0X_decode_timeout>
 800e83c:	4603      	mov	r3, r0
					PreRangeTimeOutMClks =
 800e83e:	84bb      	strh	r3, [r7, #36]	; 0x24
			}

			/* Calculate FINAL RANGE Timeout in Macro Periods
			 * (MCLKS) and add PRE-RANGE value
			 */
			if (Status == VL53L0X_ERROR_NONE) {
 800e840:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800e844:	2b00      	cmp	r3, #0
 800e846:	d109      	bne.n	800e85c <set_sequence_step_timeout+0x17e>

				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800e848:	f107 031b 	add.w	r3, r7, #27
 800e84c:	461a      	mov	r2, r3
 800e84e:	2101      	movs	r1, #1
 800e850:	68f8      	ldr	r0, [r7, #12]
 800e852:	f7fd f8d3 	bl	800b9fc <VL53L0X_GetVcselPulsePeriod>
 800e856:	4603      	mov	r3, r0
 800e858:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
						&CurrentVCSELPulsePeriodPClk);
			}
			if (Status == VL53L0X_ERROR_NONE) {
 800e85c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800e860:	2b00      	cmp	r3, #0
 800e862:	d128      	bne.n	800e8b6 <set_sequence_step_timeout+0x1d8>

				FinalRangeTimeOutMClks =
					VL53L0X_calc_timeout_mclks(Dev,
 800e864:	7efb      	ldrb	r3, [r7, #27]
 800e866:	461a      	mov	r2, r3
 800e868:	6879      	ldr	r1, [r7, #4]
 800e86a:	68f8      	ldr	r0, [r7, #12]
 800e86c:	f7ff fe02 	bl	800e474 <VL53L0X_calc_timeout_mclks>
 800e870:	6238      	str	r0, [r7, #32]
					TimeOutMicroSecs,
					(uint8_t) CurrentVCSELPulsePeriodPClk);

				FinalRangeTimeOutMClks += PreRangeTimeOutMClks;
 800e872:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e874:	6a3a      	ldr	r2, [r7, #32]
 800e876:	4413      	add	r3, r2
 800e878:	623b      	str	r3, [r7, #32]

				FinalRangeEncodedTimeOut =
				VL53L0X_encode_timeout(FinalRangeTimeOutMClks);
 800e87a:	6a38      	ldr	r0, [r7, #32]
 800e87c:	f7ff fdb8 	bl	800e3f0 <VL53L0X_encode_timeout>
 800e880:	4603      	mov	r3, r0
 800e882:	83fb      	strh	r3, [r7, #30]

				if (Status == VL53L0X_ERROR_NONE) {
 800e884:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800e888:	2b00      	cmp	r3, #0
 800e88a:	d108      	bne.n	800e89e <set_sequence_step_timeout+0x1c0>
					Status = VL53L0X_WrWord(Dev, 0x71,
 800e88c:	8bfb      	ldrh	r3, [r7, #30]
 800e88e:	461a      	mov	r2, r3
 800e890:	2171      	movs	r1, #113	; 0x71
 800e892:	68f8      	ldr	r0, [r7, #12]
 800e894:	f001 fba0 	bl	800ffd8 <VL53L0X_WrWord>
 800e898:	4603      	mov	r3, r0
 800e89a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					FinalRangeEncodedTimeOut);
				}

				if (Status == VL53L0X_ERROR_NONE) {
 800e89e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800e8a2:	2b00      	cmp	r3, #0
 800e8a4:	d107      	bne.n	800e8b6 <set_sequence_step_timeout+0x1d8>
					VL53L0X_SETDEVICESPECIFICPARAMETER(
 800e8a6:	68fb      	ldr	r3, [r7, #12]
 800e8a8:	687a      	ldr	r2, [r7, #4]
 800e8aa:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
 800e8ae:	e002      	b.n	800e8b6 <set_sequence_step_timeout+0x1d8>
						FinalRangeTimeoutMicroSecs,
						TimeOutMicroSecs);
				}
			}
		} else
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 800e8b0:	23fc      	movs	r3, #252	; 0xfc
 800e8b2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	}
	return Status;
 800e8b6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800e8ba:	4618      	mov	r0, r3
 800e8bc:	3728      	adds	r7, #40	; 0x28
 800e8be:	46bd      	mov	sp, r7
 800e8c0:	bd80      	pop	{r7, pc}

0800e8c2 <VL53L0X_set_vcsel_pulse_period>:

VL53L0X_Error VL53L0X_set_vcsel_pulse_period(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t VCSELPulsePeriodPCLK)
{
 800e8c2:	b580      	push	{r7, lr}
 800e8c4:	b08a      	sub	sp, #40	; 0x28
 800e8c6:	af00      	add	r7, sp, #0
 800e8c8:	6078      	str	r0, [r7, #4]
 800e8ca:	460b      	mov	r3, r1
 800e8cc:	70fb      	strb	r3, [r7, #3]
 800e8ce:	4613      	mov	r3, r2
 800e8d0:	70bb      	strb	r3, [r7, #2]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800e8d2:	2300      	movs	r3, #0
 800e8d4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint8_t vcsel_period_reg;
	uint8_t MinPreVcselPeriodPCLK = 12;
 800e8d8:	230c      	movs	r3, #12
 800e8da:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	uint8_t MaxPreVcselPeriodPCLK = 18;
 800e8de:	2312      	movs	r3, #18
 800e8e0:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	uint8_t MinFinalVcselPeriodPCLK = 8;
 800e8e4:	2308      	movs	r3, #8
 800e8e6:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	uint8_t MaxFinalVcselPeriodPCLK = 14;
 800e8ea:	230e      	movs	r3, #14
 800e8ec:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	uint32_t MeasurementTimingBudgetMicroSeconds;
	uint32_t FinalRangeTimeoutMicroSeconds;
	uint32_t PreRangeTimeoutMicroSeconds;
	uint32_t MsrcTimeoutMicroSeconds;
	uint8_t PhaseCalInt = 0;
 800e8f0:	2300      	movs	r3, #0
 800e8f2:	73fb      	strb	r3, [r7, #15]

	/* Check if valid clock period requested */

	if ((VCSELPulsePeriodPCLK % 2) != 0) {
 800e8f4:	78bb      	ldrb	r3, [r7, #2]
 800e8f6:	f003 0301 	and.w	r3, r3, #1
 800e8fa:	b2db      	uxtb	r3, r3
 800e8fc:	2b00      	cmp	r3, #0
 800e8fe:	d003      	beq.n	800e908 <VL53L0X_set_vcsel_pulse_period+0x46>
		/* Value must be an even number */
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800e900:	23fc      	movs	r3, #252	; 0xfc
 800e902:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800e906:	e020      	b.n	800e94a <VL53L0X_set_vcsel_pulse_period+0x88>
	} else if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_PRE_RANGE &&
 800e908:	78fb      	ldrb	r3, [r7, #3]
 800e90a:	2b00      	cmp	r3, #0
 800e90c:	d10d      	bne.n	800e92a <VL53L0X_set_vcsel_pulse_period+0x68>
 800e90e:	78ba      	ldrb	r2, [r7, #2]
 800e910:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e914:	429a      	cmp	r2, r3
 800e916:	d304      	bcc.n	800e922 <VL53L0X_set_vcsel_pulse_period+0x60>
		(VCSELPulsePeriodPCLK < MinPreVcselPeriodPCLK ||
 800e918:	78ba      	ldrb	r2, [r7, #2]
 800e91a:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800e91e:	429a      	cmp	r2, r3
 800e920:	d903      	bls.n	800e92a <VL53L0X_set_vcsel_pulse_period+0x68>
		VCSELPulsePeriodPCLK > MaxPreVcselPeriodPCLK)) {
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800e922:	23fc      	movs	r3, #252	; 0xfc
 800e924:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800e928:	e00f      	b.n	800e94a <VL53L0X_set_vcsel_pulse_period+0x88>
	} else if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_FINAL_RANGE &&
 800e92a:	78fb      	ldrb	r3, [r7, #3]
 800e92c:	2b01      	cmp	r3, #1
 800e92e:	d10c      	bne.n	800e94a <VL53L0X_set_vcsel_pulse_period+0x88>
 800e930:	78ba      	ldrb	r2, [r7, #2]
 800e932:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800e936:	429a      	cmp	r2, r3
 800e938:	d304      	bcc.n	800e944 <VL53L0X_set_vcsel_pulse_period+0x82>
		(VCSELPulsePeriodPCLK < MinFinalVcselPeriodPCLK ||
 800e93a:	78ba      	ldrb	r2, [r7, #2]
 800e93c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800e940:	429a      	cmp	r2, r3
 800e942:	d902      	bls.n	800e94a <VL53L0X_set_vcsel_pulse_period+0x88>
		 VCSELPulsePeriodPCLK > MaxFinalVcselPeriodPCLK)) {

		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800e944:	23fc      	movs	r3, #252	; 0xfc
 800e946:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	/* Apply specific settings for the requested clock period */

	if (Status != VL53L0X_ERROR_NONE)
 800e94a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800e94e:	2b00      	cmp	r3, #0
 800e950:	d002      	beq.n	800e958 <VL53L0X_set_vcsel_pulse_period+0x96>
		return Status;
 800e952:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800e956:	e239      	b.n	800edcc <VL53L0X_set_vcsel_pulse_period+0x50a>


	if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_PRE_RANGE) {
 800e958:	78fb      	ldrb	r3, [r7, #3]
 800e95a:	2b00      	cmp	r3, #0
 800e95c:	d150      	bne.n	800ea00 <VL53L0X_set_vcsel_pulse_period+0x13e>

		/* Set phase check limits */
		if (VCSELPulsePeriodPCLK == 12) {
 800e95e:	78bb      	ldrb	r3, [r7, #2]
 800e960:	2b0c      	cmp	r3, #12
 800e962:	d110      	bne.n	800e986 <VL53L0X_set_vcsel_pulse_period+0xc4>

			Status = VL53L0X_WrByte(Dev,
 800e964:	2218      	movs	r2, #24
 800e966:	2157      	movs	r1, #87	; 0x57
 800e968:	6878      	ldr	r0, [r7, #4]
 800e96a:	f001 fb11 	bl	800ff90 <VL53L0X_WrByte>
 800e96e:	4603      	mov	r3, r0
 800e970:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x18);
			Status = VL53L0X_WrByte(Dev,
 800e974:	2208      	movs	r2, #8
 800e976:	2156      	movs	r1, #86	; 0x56
 800e978:	6878      	ldr	r0, [r7, #4]
 800e97a:	f001 fb09 	bl	800ff90 <VL53L0X_WrByte>
 800e97e:	4603      	mov	r3, r0
 800e980:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800e984:	e17f      	b.n	800ec86 <VL53L0X_set_vcsel_pulse_period+0x3c4>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		} else if (VCSELPulsePeriodPCLK == 14) {
 800e986:	78bb      	ldrb	r3, [r7, #2]
 800e988:	2b0e      	cmp	r3, #14
 800e98a:	d110      	bne.n	800e9ae <VL53L0X_set_vcsel_pulse_period+0xec>

			Status = VL53L0X_WrByte(Dev,
 800e98c:	2230      	movs	r2, #48	; 0x30
 800e98e:	2157      	movs	r1, #87	; 0x57
 800e990:	6878      	ldr	r0, [r7, #4]
 800e992:	f001 fafd 	bl	800ff90 <VL53L0X_WrByte>
 800e996:	4603      	mov	r3, r0
 800e998:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x30);
			Status = VL53L0X_WrByte(Dev,
 800e99c:	2208      	movs	r2, #8
 800e99e:	2156      	movs	r1, #86	; 0x56
 800e9a0:	6878      	ldr	r0, [r7, #4]
 800e9a2:	f001 faf5 	bl	800ff90 <VL53L0X_WrByte>
 800e9a6:	4603      	mov	r3, r0
 800e9a8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800e9ac:	e16b      	b.n	800ec86 <VL53L0X_set_vcsel_pulse_period+0x3c4>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		} else if (VCSELPulsePeriodPCLK == 16) {
 800e9ae:	78bb      	ldrb	r3, [r7, #2]
 800e9b0:	2b10      	cmp	r3, #16
 800e9b2:	d110      	bne.n	800e9d6 <VL53L0X_set_vcsel_pulse_period+0x114>

			Status = VL53L0X_WrByte(Dev,
 800e9b4:	2240      	movs	r2, #64	; 0x40
 800e9b6:	2157      	movs	r1, #87	; 0x57
 800e9b8:	6878      	ldr	r0, [r7, #4]
 800e9ba:	f001 fae9 	bl	800ff90 <VL53L0X_WrByte>
 800e9be:	4603      	mov	r3, r0
 800e9c0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x40);
			Status = VL53L0X_WrByte(Dev,
 800e9c4:	2208      	movs	r2, #8
 800e9c6:	2156      	movs	r1, #86	; 0x56
 800e9c8:	6878      	ldr	r0, [r7, #4]
 800e9ca:	f001 fae1 	bl	800ff90 <VL53L0X_WrByte>
 800e9ce:	4603      	mov	r3, r0
 800e9d0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800e9d4:	e157      	b.n	800ec86 <VL53L0X_set_vcsel_pulse_period+0x3c4>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		} else if (VCSELPulsePeriodPCLK == 18) {
 800e9d6:	78bb      	ldrb	r3, [r7, #2]
 800e9d8:	2b12      	cmp	r3, #18
 800e9da:	f040 8154 	bne.w	800ec86 <VL53L0X_set_vcsel_pulse_period+0x3c4>

			Status = VL53L0X_WrByte(Dev,
 800e9de:	2250      	movs	r2, #80	; 0x50
 800e9e0:	2157      	movs	r1, #87	; 0x57
 800e9e2:	6878      	ldr	r0, [r7, #4]
 800e9e4:	f001 fad4 	bl	800ff90 <VL53L0X_WrByte>
 800e9e8:	4603      	mov	r3, r0
 800e9ea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x50);
			Status = VL53L0X_WrByte(Dev,
 800e9ee:	2208      	movs	r2, #8
 800e9f0:	2156      	movs	r1, #86	; 0x56
 800e9f2:	6878      	ldr	r0, [r7, #4]
 800e9f4:	f001 facc 	bl	800ff90 <VL53L0X_WrByte>
 800e9f8:	4603      	mov	r3, r0
 800e9fa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800e9fe:	e142      	b.n	800ec86 <VL53L0X_set_vcsel_pulse_period+0x3c4>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		}
	} else if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_FINAL_RANGE) {
 800ea00:	78fb      	ldrb	r3, [r7, #3]
 800ea02:	2b01      	cmp	r3, #1
 800ea04:	f040 813f 	bne.w	800ec86 <VL53L0X_set_vcsel_pulse_period+0x3c4>

		if (VCSELPulsePeriodPCLK == 8) {
 800ea08:	78bb      	ldrb	r3, [r7, #2]
 800ea0a:	2b08      	cmp	r3, #8
 800ea0c:	d14c      	bne.n	800eaa8 <VL53L0X_set_vcsel_pulse_period+0x1e6>

			Status = VL53L0X_WrByte(Dev,
 800ea0e:	2210      	movs	r2, #16
 800ea10:	2148      	movs	r1, #72	; 0x48
 800ea12:	6878      	ldr	r0, [r7, #4]
 800ea14:	f001 fabc 	bl	800ff90 <VL53L0X_WrByte>
 800ea18:	4603      	mov	r3, r0
 800ea1a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x10);
			Status = VL53L0X_WrByte(Dev,
 800ea1e:	2208      	movs	r2, #8
 800ea20:	2147      	movs	r1, #71	; 0x47
 800ea22:	6878      	ldr	r0, [r7, #4]
 800ea24:	f001 fab4 	bl	800ff90 <VL53L0X_WrByte>
 800ea28:	4603      	mov	r3, r0
 800ea2a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);

			Status |= VL53L0X_WrByte(Dev,
 800ea2e:	2202      	movs	r2, #2
 800ea30:	2132      	movs	r1, #50	; 0x32
 800ea32:	6878      	ldr	r0, [r7, #4]
 800ea34:	f001 faac 	bl	800ff90 <VL53L0X_WrByte>
 800ea38:	4603      	mov	r3, r0
 800ea3a:	461a      	mov	r2, r3
 800ea3c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ea40:	4313      	orrs	r3, r2
 800ea42:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x02);
			Status |= VL53L0X_WrByte(Dev,
 800ea46:	220c      	movs	r2, #12
 800ea48:	2130      	movs	r1, #48	; 0x30
 800ea4a:	6878      	ldr	r0, [r7, #4]
 800ea4c:	f001 faa0 	bl	800ff90 <VL53L0X_WrByte>
 800ea50:	4603      	mov	r3, r0
 800ea52:	461a      	mov	r2, r3
 800ea54:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ea58:	4313      	orrs	r3, r2
 800ea5a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x0C);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 800ea5e:	2201      	movs	r2, #1
 800ea60:	21ff      	movs	r1, #255	; 0xff
 800ea62:	6878      	ldr	r0, [r7, #4]
 800ea64:	f001 fa94 	bl	800ff90 <VL53L0X_WrByte>
 800ea68:	4603      	mov	r3, r0
 800ea6a:	461a      	mov	r2, r3
 800ea6c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ea70:	4313      	orrs	r3, r2
 800ea72:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Status |= VL53L0X_WrByte(Dev,
 800ea76:	2230      	movs	r2, #48	; 0x30
 800ea78:	2130      	movs	r1, #48	; 0x30
 800ea7a:	6878      	ldr	r0, [r7, #4]
 800ea7c:	f001 fa88 	bl	800ff90 <VL53L0X_WrByte>
 800ea80:	4603      	mov	r3, r0
 800ea82:	461a      	mov	r2, r3
 800ea84:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ea88:	4313      	orrs	r3, r2
 800ea8a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x30);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 800ea8e:	2200      	movs	r2, #0
 800ea90:	21ff      	movs	r1, #255	; 0xff
 800ea92:	6878      	ldr	r0, [r7, #4]
 800ea94:	f001 fa7c 	bl	800ff90 <VL53L0X_WrByte>
 800ea98:	4603      	mov	r3, r0
 800ea9a:	461a      	mov	r2, r3
 800ea9c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800eaa0:	4313      	orrs	r3, r2
 800eaa2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800eaa6:	e0ee      	b.n	800ec86 <VL53L0X_set_vcsel_pulse_period+0x3c4>
		} else if (VCSELPulsePeriodPCLK == 10) {
 800eaa8:	78bb      	ldrb	r3, [r7, #2]
 800eaaa:	2b0a      	cmp	r3, #10
 800eaac:	d14c      	bne.n	800eb48 <VL53L0X_set_vcsel_pulse_period+0x286>

			Status = VL53L0X_WrByte(Dev,
 800eaae:	2228      	movs	r2, #40	; 0x28
 800eab0:	2148      	movs	r1, #72	; 0x48
 800eab2:	6878      	ldr	r0, [r7, #4]
 800eab4:	f001 fa6c 	bl	800ff90 <VL53L0X_WrByte>
 800eab8:	4603      	mov	r3, r0
 800eaba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x28);
			Status = VL53L0X_WrByte(Dev,
 800eabe:	2208      	movs	r2, #8
 800eac0:	2147      	movs	r1, #71	; 0x47
 800eac2:	6878      	ldr	r0, [r7, #4]
 800eac4:	f001 fa64 	bl	800ff90 <VL53L0X_WrByte>
 800eac8:	4603      	mov	r3, r0
 800eaca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);

			Status |= VL53L0X_WrByte(Dev,
 800eace:	2203      	movs	r2, #3
 800ead0:	2132      	movs	r1, #50	; 0x32
 800ead2:	6878      	ldr	r0, [r7, #4]
 800ead4:	f001 fa5c 	bl	800ff90 <VL53L0X_WrByte>
 800ead8:	4603      	mov	r3, r0
 800eada:	461a      	mov	r2, r3
 800eadc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800eae0:	4313      	orrs	r3, r2
 800eae2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x03);
			Status |= VL53L0X_WrByte(Dev,
 800eae6:	2209      	movs	r2, #9
 800eae8:	2130      	movs	r1, #48	; 0x30
 800eaea:	6878      	ldr	r0, [r7, #4]
 800eaec:	f001 fa50 	bl	800ff90 <VL53L0X_WrByte>
 800eaf0:	4603      	mov	r3, r0
 800eaf2:	461a      	mov	r2, r3
 800eaf4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800eaf8:	4313      	orrs	r3, r2
 800eafa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x09);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 800eafe:	2201      	movs	r2, #1
 800eb00:	21ff      	movs	r1, #255	; 0xff
 800eb02:	6878      	ldr	r0, [r7, #4]
 800eb04:	f001 fa44 	bl	800ff90 <VL53L0X_WrByte>
 800eb08:	4603      	mov	r3, r0
 800eb0a:	461a      	mov	r2, r3
 800eb0c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800eb10:	4313      	orrs	r3, r2
 800eb12:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Status |= VL53L0X_WrByte(Dev,
 800eb16:	2220      	movs	r2, #32
 800eb18:	2130      	movs	r1, #48	; 0x30
 800eb1a:	6878      	ldr	r0, [r7, #4]
 800eb1c:	f001 fa38 	bl	800ff90 <VL53L0X_WrByte>
 800eb20:	4603      	mov	r3, r0
 800eb22:	461a      	mov	r2, r3
 800eb24:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800eb28:	4313      	orrs	r3, r2
 800eb2a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x20);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 800eb2e:	2200      	movs	r2, #0
 800eb30:	21ff      	movs	r1, #255	; 0xff
 800eb32:	6878      	ldr	r0, [r7, #4]
 800eb34:	f001 fa2c 	bl	800ff90 <VL53L0X_WrByte>
 800eb38:	4603      	mov	r3, r0
 800eb3a:	461a      	mov	r2, r3
 800eb3c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800eb40:	4313      	orrs	r3, r2
 800eb42:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800eb46:	e09e      	b.n	800ec86 <VL53L0X_set_vcsel_pulse_period+0x3c4>
		} else if (VCSELPulsePeriodPCLK == 12) {
 800eb48:	78bb      	ldrb	r3, [r7, #2]
 800eb4a:	2b0c      	cmp	r3, #12
 800eb4c:	d14c      	bne.n	800ebe8 <VL53L0X_set_vcsel_pulse_period+0x326>

			Status = VL53L0X_WrByte(Dev,
 800eb4e:	2238      	movs	r2, #56	; 0x38
 800eb50:	2148      	movs	r1, #72	; 0x48
 800eb52:	6878      	ldr	r0, [r7, #4]
 800eb54:	f001 fa1c 	bl	800ff90 <VL53L0X_WrByte>
 800eb58:	4603      	mov	r3, r0
 800eb5a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x38);
			Status = VL53L0X_WrByte(Dev,
 800eb5e:	2208      	movs	r2, #8
 800eb60:	2147      	movs	r1, #71	; 0x47
 800eb62:	6878      	ldr	r0, [r7, #4]
 800eb64:	f001 fa14 	bl	800ff90 <VL53L0X_WrByte>
 800eb68:	4603      	mov	r3, r0
 800eb6a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);

			Status |= VL53L0X_WrByte(Dev,
 800eb6e:	2203      	movs	r2, #3
 800eb70:	2132      	movs	r1, #50	; 0x32
 800eb72:	6878      	ldr	r0, [r7, #4]
 800eb74:	f001 fa0c 	bl	800ff90 <VL53L0X_WrByte>
 800eb78:	4603      	mov	r3, r0
 800eb7a:	461a      	mov	r2, r3
 800eb7c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800eb80:	4313      	orrs	r3, r2
 800eb82:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x03);
			Status |= VL53L0X_WrByte(Dev,
 800eb86:	2208      	movs	r2, #8
 800eb88:	2130      	movs	r1, #48	; 0x30
 800eb8a:	6878      	ldr	r0, [r7, #4]
 800eb8c:	f001 fa00 	bl	800ff90 <VL53L0X_WrByte>
 800eb90:	4603      	mov	r3, r0
 800eb92:	461a      	mov	r2, r3
 800eb94:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800eb98:	4313      	orrs	r3, r2
 800eb9a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x08);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 800eb9e:	2201      	movs	r2, #1
 800eba0:	21ff      	movs	r1, #255	; 0xff
 800eba2:	6878      	ldr	r0, [r7, #4]
 800eba4:	f001 f9f4 	bl	800ff90 <VL53L0X_WrByte>
 800eba8:	4603      	mov	r3, r0
 800ebaa:	461a      	mov	r2, r3
 800ebac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ebb0:	4313      	orrs	r3, r2
 800ebb2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Status |= VL53L0X_WrByte(Dev,
 800ebb6:	2220      	movs	r2, #32
 800ebb8:	2130      	movs	r1, #48	; 0x30
 800ebba:	6878      	ldr	r0, [r7, #4]
 800ebbc:	f001 f9e8 	bl	800ff90 <VL53L0X_WrByte>
 800ebc0:	4603      	mov	r3, r0
 800ebc2:	461a      	mov	r2, r3
 800ebc4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ebc8:	4313      	orrs	r3, r2
 800ebca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x20);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 800ebce:	2200      	movs	r2, #0
 800ebd0:	21ff      	movs	r1, #255	; 0xff
 800ebd2:	6878      	ldr	r0, [r7, #4]
 800ebd4:	f001 f9dc 	bl	800ff90 <VL53L0X_WrByte>
 800ebd8:	4603      	mov	r3, r0
 800ebda:	461a      	mov	r2, r3
 800ebdc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ebe0:	4313      	orrs	r3, r2
 800ebe2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800ebe6:	e04e      	b.n	800ec86 <VL53L0X_set_vcsel_pulse_period+0x3c4>
		} else if (VCSELPulsePeriodPCLK == 14) {
 800ebe8:	78bb      	ldrb	r3, [r7, #2]
 800ebea:	2b0e      	cmp	r3, #14
 800ebec:	d14b      	bne.n	800ec86 <VL53L0X_set_vcsel_pulse_period+0x3c4>

			Status = VL53L0X_WrByte(Dev,
 800ebee:	2248      	movs	r2, #72	; 0x48
 800ebf0:	2148      	movs	r1, #72	; 0x48
 800ebf2:	6878      	ldr	r0, [r7, #4]
 800ebf4:	f001 f9cc 	bl	800ff90 <VL53L0X_WrByte>
 800ebf8:	4603      	mov	r3, r0
 800ebfa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x048);
			Status = VL53L0X_WrByte(Dev,
 800ebfe:	2208      	movs	r2, #8
 800ec00:	2147      	movs	r1, #71	; 0x47
 800ec02:	6878      	ldr	r0, [r7, #4]
 800ec04:	f001 f9c4 	bl	800ff90 <VL53L0X_WrByte>
 800ec08:	4603      	mov	r3, r0
 800ec0a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);

			Status |= VL53L0X_WrByte(Dev,
 800ec0e:	2203      	movs	r2, #3
 800ec10:	2132      	movs	r1, #50	; 0x32
 800ec12:	6878      	ldr	r0, [r7, #4]
 800ec14:	f001 f9bc 	bl	800ff90 <VL53L0X_WrByte>
 800ec18:	4603      	mov	r3, r0
 800ec1a:	461a      	mov	r2, r3
 800ec1c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ec20:	4313      	orrs	r3, r2
 800ec22:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x03);
			Status |= VL53L0X_WrByte(Dev,
 800ec26:	2207      	movs	r2, #7
 800ec28:	2130      	movs	r1, #48	; 0x30
 800ec2a:	6878      	ldr	r0, [r7, #4]
 800ec2c:	f001 f9b0 	bl	800ff90 <VL53L0X_WrByte>
 800ec30:	4603      	mov	r3, r0
 800ec32:	461a      	mov	r2, r3
 800ec34:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ec38:	4313      	orrs	r3, r2
 800ec3a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x07);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 800ec3e:	2201      	movs	r2, #1
 800ec40:	21ff      	movs	r1, #255	; 0xff
 800ec42:	6878      	ldr	r0, [r7, #4]
 800ec44:	f001 f9a4 	bl	800ff90 <VL53L0X_WrByte>
 800ec48:	4603      	mov	r3, r0
 800ec4a:	461a      	mov	r2, r3
 800ec4c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ec50:	4313      	orrs	r3, r2
 800ec52:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Status |= VL53L0X_WrByte(Dev,
 800ec56:	2220      	movs	r2, #32
 800ec58:	2130      	movs	r1, #48	; 0x30
 800ec5a:	6878      	ldr	r0, [r7, #4]
 800ec5c:	f001 f998 	bl	800ff90 <VL53L0X_WrByte>
 800ec60:	4603      	mov	r3, r0
 800ec62:	461a      	mov	r2, r3
 800ec64:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ec68:	4313      	orrs	r3, r2
 800ec6a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x20);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 800ec6e:	2200      	movs	r2, #0
 800ec70:	21ff      	movs	r1, #255	; 0xff
 800ec72:	6878      	ldr	r0, [r7, #4]
 800ec74:	f001 f98c 	bl	800ff90 <VL53L0X_WrByte>
 800ec78:	4603      	mov	r3, r0
 800ec7a:	461a      	mov	r2, r3
 800ec7c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ec80:	4313      	orrs	r3, r2
 800ec82:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}


	/* Re-calculate and apply timeouts, in macro periods */

	if (Status == VL53L0X_ERROR_NONE) {
 800ec86:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800ec8a:	2b00      	cmp	r3, #0
 800ec8c:	d17f      	bne.n	800ed8e <VL53L0X_set_vcsel_pulse_period+0x4cc>
		vcsel_period_reg = VL53L0X_encode_vcsel_period((uint8_t)
 800ec8e:	78bb      	ldrb	r3, [r7, #2]
 800ec90:	4618      	mov	r0, r3
 800ec92:	f7fe fe38 	bl	800d906 <VL53L0X_encode_vcsel_period>
 800ec96:	4603      	mov	r3, r0
 800ec98:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
		* using the new VCSEL period.
		*
		* For the MSRC timeout, the same applies - this timeout being
		* dependant on the pre-range vcsel period.
		*/
		switch (VcselPeriodType) {
 800ec9c:	78fb      	ldrb	r3, [r7, #3]
 800ec9e:	2b00      	cmp	r3, #0
 800eca0:	d002      	beq.n	800eca8 <VL53L0X_set_vcsel_pulse_period+0x3e6>
 800eca2:	2b01      	cmp	r3, #1
 800eca4:	d045      	beq.n	800ed32 <VL53L0X_set_vcsel_pulse_period+0x470>
 800eca6:	e06e      	b.n	800ed86 <VL53L0X_set_vcsel_pulse_period+0x4c4>
		case VL53L0X_VCSEL_PERIOD_PRE_RANGE:
			Status = get_sequence_step_timeout(Dev,
 800eca8:	f107 0314 	add.w	r3, r7, #20
 800ecac:	461a      	mov	r2, r3
 800ecae:	2103      	movs	r1, #3
 800ecb0:	6878      	ldr	r0, [r7, #4]
 800ecb2:	f7ff fc33 	bl	800e51c <get_sequence_step_timeout>
 800ecb6:	4603      	mov	r3, r0
 800ecb8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_SEQUENCESTEP_PRE_RANGE,
				&PreRangeTimeoutMicroSeconds);

			if (Status == VL53L0X_ERROR_NONE)
 800ecbc:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800ecc0:	2b00      	cmp	r3, #0
 800ecc2:	d109      	bne.n	800ecd8 <VL53L0X_set_vcsel_pulse_period+0x416>
				Status = get_sequence_step_timeout(Dev,
 800ecc4:	f107 0310 	add.w	r3, r7, #16
 800ecc8:	461a      	mov	r2, r3
 800ecca:	2102      	movs	r1, #2
 800eccc:	6878      	ldr	r0, [r7, #4]
 800ecce:	f7ff fc25 	bl	800e51c <get_sequence_step_timeout>
 800ecd2:	4603      	mov	r3, r0
 800ecd4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_SEQUENCESTEP_MSRC,
					&MsrcTimeoutMicroSeconds);

			if (Status == VL53L0X_ERROR_NONE)
 800ecd8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800ecdc:	2b00      	cmp	r3, #0
 800ecde:	d109      	bne.n	800ecf4 <VL53L0X_set_vcsel_pulse_period+0x432>
				Status = VL53L0X_WrByte(Dev,
 800ece0:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800ece4:	461a      	mov	r2, r3
 800ece6:	2150      	movs	r1, #80	; 0x50
 800ece8:	6878      	ldr	r0, [r7, #4]
 800ecea:	f001 f951 	bl	800ff90 <VL53L0X_WrByte>
 800ecee:	4603      	mov	r3, r0
 800ecf0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VCSEL_PERIOD,
					vcsel_period_reg);


			if (Status == VL53L0X_ERROR_NONE)
 800ecf4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800ecf8:	2b00      	cmp	r3, #0
 800ecfa:	d108      	bne.n	800ed0e <VL53L0X_set_vcsel_pulse_period+0x44c>
				Status = set_sequence_step_timeout(Dev,
 800ecfc:	697b      	ldr	r3, [r7, #20]
 800ecfe:	461a      	mov	r2, r3
 800ed00:	2103      	movs	r1, #3
 800ed02:	6878      	ldr	r0, [r7, #4]
 800ed04:	f7ff fceb 	bl	800e6de <set_sequence_step_timeout>
 800ed08:	4603      	mov	r3, r0
 800ed0a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_SEQUENCESTEP_PRE_RANGE,
					PreRangeTimeoutMicroSeconds);


			if (Status == VL53L0X_ERROR_NONE)
 800ed0e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800ed12:	2b00      	cmp	r3, #0
 800ed14:	d108      	bne.n	800ed28 <VL53L0X_set_vcsel_pulse_period+0x466>
				Status = set_sequence_step_timeout(Dev,
 800ed16:	693b      	ldr	r3, [r7, #16]
 800ed18:	461a      	mov	r2, r3
 800ed1a:	2102      	movs	r1, #2
 800ed1c:	6878      	ldr	r0, [r7, #4]
 800ed1e:	f7ff fcde 	bl	800e6de <set_sequence_step_timeout>
 800ed22:	4603      	mov	r3, r0
 800ed24:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_SEQUENCESTEP_MSRC,
					MsrcTimeoutMicroSeconds);

			VL53L0X_SETDEVICESPECIFICPARAMETER(
 800ed28:	687b      	ldr	r3, [r7, #4]
 800ed2a:	78ba      	ldrb	r2, [r7, #2]
 800ed2c:	f883 20e8 	strb.w	r2, [r3, #232]	; 0xe8
				Dev,
				PreRangeVcselPulsePeriod,
				VCSELPulsePeriodPCLK);
			break;
 800ed30:	e02e      	b.n	800ed90 <VL53L0X_set_vcsel_pulse_period+0x4ce>
		case VL53L0X_VCSEL_PERIOD_FINAL_RANGE:
			Status = get_sequence_step_timeout(Dev,
 800ed32:	f107 0318 	add.w	r3, r7, #24
 800ed36:	461a      	mov	r2, r3
 800ed38:	2104      	movs	r1, #4
 800ed3a:	6878      	ldr	r0, [r7, #4]
 800ed3c:	f7ff fbee 	bl	800e51c <get_sequence_step_timeout>
 800ed40:	4603      	mov	r3, r0
 800ed42:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_SEQUENCESTEP_FINAL_RANGE,
				&FinalRangeTimeoutMicroSeconds);

			if (Status == VL53L0X_ERROR_NONE)
 800ed46:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800ed4a:	2b00      	cmp	r3, #0
 800ed4c:	d109      	bne.n	800ed62 <VL53L0X_set_vcsel_pulse_period+0x4a0>
				Status = VL53L0X_WrByte(Dev,
 800ed4e:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800ed52:	461a      	mov	r2, r3
 800ed54:	2170      	movs	r1, #112	; 0x70
 800ed56:	6878      	ldr	r0, [r7, #4]
 800ed58:	f001 f91a 	bl	800ff90 <VL53L0X_WrByte>
 800ed5c:	4603      	mov	r3, r0
 800ed5e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VCSEL_PERIOD,
					vcsel_period_reg);


			if (Status == VL53L0X_ERROR_NONE)
 800ed62:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800ed66:	2b00      	cmp	r3, #0
 800ed68:	d108      	bne.n	800ed7c <VL53L0X_set_vcsel_pulse_period+0x4ba>
				Status = set_sequence_step_timeout(Dev,
 800ed6a:	69bb      	ldr	r3, [r7, #24]
 800ed6c:	461a      	mov	r2, r3
 800ed6e:	2104      	movs	r1, #4
 800ed70:	6878      	ldr	r0, [r7, #4]
 800ed72:	f7ff fcb4 	bl	800e6de <set_sequence_step_timeout>
 800ed76:	4603      	mov	r3, r0
 800ed78:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_SEQUENCESTEP_FINAL_RANGE,
					FinalRangeTimeoutMicroSeconds);

			VL53L0X_SETDEVICESPECIFICPARAMETER(
 800ed7c:	687b      	ldr	r3, [r7, #4]
 800ed7e:	78ba      	ldrb	r2, [r7, #2]
 800ed80:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
				Dev,
				FinalRangeVcselPulsePeriod,
				VCSELPulsePeriodPCLK);
			break;
 800ed84:	e004      	b.n	800ed90 <VL53L0X_set_vcsel_pulse_period+0x4ce>
		default:
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 800ed86:	23fc      	movs	r3, #252	; 0xfc
 800ed88:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800ed8c:	e000      	b.n	800ed90 <VL53L0X_set_vcsel_pulse_period+0x4ce>
		}
	}
 800ed8e:	bf00      	nop

	/* Finally, the timing budget must be re-applied */
	if (Status == VL53L0X_ERROR_NONE) {
 800ed90:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800ed94:	2b00      	cmp	r3, #0
 800ed96:	d109      	bne.n	800edac <VL53L0X_set_vcsel_pulse_period+0x4ea>
		VL53L0X_GETPARAMETERFIELD(Dev,
 800ed98:	687b      	ldr	r3, [r7, #4]
 800ed9a:	695b      	ldr	r3, [r3, #20]
 800ed9c:	61fb      	str	r3, [r7, #28]
			MeasurementTimingBudgetMicroSeconds,
			MeasurementTimingBudgetMicroSeconds);

		Status = VL53L0X_SetMeasurementTimingBudgetMicroSeconds(Dev,
 800ed9e:	69f9      	ldr	r1, [r7, #28]
 800eda0:	6878      	ldr	r0, [r7, #4]
 800eda2:	f7fc fded 	bl	800b980 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>
 800eda6:	4603      	mov	r3, r0
 800eda8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	/* Perform the phase calibration. This is needed after changing on
	 * vcsel period.
	 * get_data_enable = 0, restore_config = 1 */
	if (Status == VL53L0X_ERROR_NONE)
 800edac:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800edb0:	2b00      	cmp	r3, #0
 800edb2:	d109      	bne.n	800edc8 <VL53L0X_set_vcsel_pulse_period+0x506>
		Status = VL53L0X_perform_phase_calibration(
 800edb4:	f107 010f 	add.w	r1, r7, #15
 800edb8:	2301      	movs	r3, #1
 800edba:	2200      	movs	r2, #0
 800edbc:	6878      	ldr	r0, [r7, #4]
 800edbe:	f7fe fcbd 	bl	800d73c <VL53L0X_perform_phase_calibration>
 800edc2:	4603      	mov	r3, r0
 800edc4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Dev, &PhaseCalInt, 0, 1);

	return Status;
 800edc8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800edcc:	4618      	mov	r0, r3
 800edce:	3728      	adds	r7, #40	; 0x28
 800edd0:	46bd      	mov	sp, r7
 800edd2:	bd80      	pop	{r7, pc}

0800edd4 <VL53L0X_get_vcsel_pulse_period>:

VL53L0X_Error VL53L0X_get_vcsel_pulse_period(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t *pVCSELPulsePeriodPCLK)
{
 800edd4:	b580      	push	{r7, lr}
 800edd6:	b086      	sub	sp, #24
 800edd8:	af00      	add	r7, sp, #0
 800edda:	60f8      	str	r0, [r7, #12]
 800eddc:	460b      	mov	r3, r1
 800edde:	607a      	str	r2, [r7, #4]
 800ede0:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800ede2:	2300      	movs	r3, #0
 800ede4:	75fb      	strb	r3, [r7, #23]
	uint8_t vcsel_period_reg;

	switch (VcselPeriodType) {
 800ede6:	7afb      	ldrb	r3, [r7, #11]
 800ede8:	2b00      	cmp	r3, #0
 800edea:	d002      	beq.n	800edf2 <VL53L0X_get_vcsel_pulse_period+0x1e>
 800edec:	2b01      	cmp	r3, #1
 800edee:	d00a      	beq.n	800ee06 <VL53L0X_get_vcsel_pulse_period+0x32>
 800edf0:	e013      	b.n	800ee1a <VL53L0X_get_vcsel_pulse_period+0x46>
	case VL53L0X_VCSEL_PERIOD_PRE_RANGE:
		Status = VL53L0X_RdByte(Dev,
 800edf2:	f107 0316 	add.w	r3, r7, #22
 800edf6:	461a      	mov	r2, r3
 800edf8:	2150      	movs	r1, #80	; 0x50
 800edfa:	68f8      	ldr	r0, [r7, #12]
 800edfc:	f001 f94a 	bl	8010094 <VL53L0X_RdByte>
 800ee00:	4603      	mov	r3, r0
 800ee02:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_PRE_RANGE_CONFIG_VCSEL_PERIOD,
			&vcsel_period_reg);
	break;
 800ee04:	e00b      	b.n	800ee1e <VL53L0X_get_vcsel_pulse_period+0x4a>
	case VL53L0X_VCSEL_PERIOD_FINAL_RANGE:
		Status = VL53L0X_RdByte(Dev,
 800ee06:	f107 0316 	add.w	r3, r7, #22
 800ee0a:	461a      	mov	r2, r3
 800ee0c:	2170      	movs	r1, #112	; 0x70
 800ee0e:	68f8      	ldr	r0, [r7, #12]
 800ee10:	f001 f940 	bl	8010094 <VL53L0X_RdByte>
 800ee14:	4603      	mov	r3, r0
 800ee16:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_FINAL_RANGE_CONFIG_VCSEL_PERIOD,
			&vcsel_period_reg);
	break;
 800ee18:	e001      	b.n	800ee1e <VL53L0X_get_vcsel_pulse_period+0x4a>
	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800ee1a:	23fc      	movs	r3, #252	; 0xfc
 800ee1c:	75fb      	strb	r3, [r7, #23]
	}

	if (Status == VL53L0X_ERROR_NONE)
 800ee1e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800ee22:	2b00      	cmp	r3, #0
 800ee24:	d107      	bne.n	800ee36 <VL53L0X_get_vcsel_pulse_period+0x62>
		*pVCSELPulsePeriodPCLK =
			VL53L0X_decode_vcsel_period(vcsel_period_reg);
 800ee26:	7dbb      	ldrb	r3, [r7, #22]
 800ee28:	4618      	mov	r0, r3
 800ee2a:	f7fe fd59 	bl	800d8e0 <VL53L0X_decode_vcsel_period>
 800ee2e:	4603      	mov	r3, r0
 800ee30:	461a      	mov	r2, r3
		*pVCSELPulsePeriodPCLK =
 800ee32:	687b      	ldr	r3, [r7, #4]
 800ee34:	701a      	strb	r2, [r3, #0]

	return Status;
 800ee36:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800ee3a:	4618      	mov	r0, r3
 800ee3c:	3718      	adds	r7, #24
 800ee3e:	46bd      	mov	sp, r7
 800ee40:	bd80      	pop	{r7, pc}

0800ee42 <VL53L0X_set_measurement_timing_budget_micro_seconds>:



VL53L0X_Error VL53L0X_set_measurement_timing_budget_micro_seconds(VL53L0X_DEV Dev,
		uint32_t MeasurementTimingBudgetMicroSeconds)
{
 800ee42:	b580      	push	{r7, lr}
 800ee44:	b092      	sub	sp, #72	; 0x48
 800ee46:	af00      	add	r7, sp, #0
 800ee48:	6078      	str	r0, [r7, #4]
 800ee4a:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800ee4c:	2300      	movs	r3, #0
 800ee4e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	uint32_t FinalRangeTimingBudgetMicroSeconds;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;
	uint32_t MsrcDccTccTimeoutMicroSeconds	= 2000;
 800ee52:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800ee56:	613b      	str	r3, [r7, #16]
	uint32_t StartOverheadMicroSeconds		= 1910;
 800ee58:	f240 7376 	movw	r3, #1910	; 0x776
 800ee5c:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint32_t EndOverheadMicroSeconds		= 960;
 800ee5e:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 800ee62:	63bb      	str	r3, [r7, #56]	; 0x38
	uint32_t MsrcOverheadMicroSeconds		= 660;
 800ee64:	f44f 7325 	mov.w	r3, #660	; 0x294
 800ee68:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t TccOverheadMicroSeconds		= 590;
 800ee6a:	f240 234e 	movw	r3, #590	; 0x24e
 800ee6e:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t DssOverheadMicroSeconds		= 690;
 800ee70:	f240 23b2 	movw	r3, #690	; 0x2b2
 800ee74:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t PreRangeOverheadMicroSeconds	= 660;
 800ee76:	f44f 7325 	mov.w	r3, #660	; 0x294
 800ee7a:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t FinalRangeOverheadMicroSeconds = 550;
 800ee7c:	f240 2326 	movw	r3, #550	; 0x226
 800ee80:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t PreRangeTimeoutMicroSeconds	= 0;
 800ee82:	2300      	movs	r3, #0
 800ee84:	60fb      	str	r3, [r7, #12]
	uint32_t cMinTimingBudgetMicroSeconds	= 20000;
 800ee86:	f644 6320 	movw	r3, #20000	; 0x4e20
 800ee8a:	623b      	str	r3, [r7, #32]
	uint32_t SubTimeout = 0;
 800ee8c:	2300      	movs	r3, #0
 800ee8e:	61fb      	str	r3, [r7, #28]

	LOG_FUNCTION_START("");

	if (MeasurementTimingBudgetMicroSeconds
 800ee90:	683a      	ldr	r2, [r7, #0]
 800ee92:	6a3b      	ldr	r3, [r7, #32]
 800ee94:	429a      	cmp	r2, r3
 800ee96:	d205      	bcs.n	800eea4 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x62>
			< cMinTimingBudgetMicroSeconds) {
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800ee98:	23fc      	movs	r3, #252	; 0xfc
 800ee9a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		return Status;
 800ee9e:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800eea2:	e0aa      	b.n	800effa <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>
	}

	FinalRangeTimingBudgetMicroSeconds =
		MeasurementTimingBudgetMicroSeconds -
		(StartOverheadMicroSeconds + EndOverheadMicroSeconds);
 800eea4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800eea6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eea8:	4413      	add	r3, r2
	FinalRangeTimingBudgetMicroSeconds =
 800eeaa:	683a      	ldr	r2, [r7, #0]
 800eeac:	1ad3      	subs	r3, r2, r3
 800eeae:	643b      	str	r3, [r7, #64]	; 0x40

	Status = VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 800eeb0:	f107 0314 	add.w	r3, r7, #20
 800eeb4:	4619      	mov	r1, r3
 800eeb6:	6878      	ldr	r0, [r7, #4]
 800eeb8:	f7fc feac 	bl	800bc14 <VL53L0X_GetSequenceStepEnables>
 800eebc:	4603      	mov	r3, r0
 800eebe:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

	if (Status == VL53L0X_ERROR_NONE &&
 800eec2:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800eec6:	2b00      	cmp	r3, #0
 800eec8:	d15b      	bne.n	800ef82 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
		(SchedulerSequenceSteps.TccOn  ||
 800eeca:	7d3b      	ldrb	r3, [r7, #20]
	if (Status == VL53L0X_ERROR_NONE &&
 800eecc:	2b00      	cmp	r3, #0
 800eece:	d105      	bne.n	800eedc <VL53L0X_set_measurement_timing_budget_micro_seconds+0x9a>
		SchedulerSequenceSteps.MsrcOn ||
 800eed0:	7d7b      	ldrb	r3, [r7, #21]
		(SchedulerSequenceSteps.TccOn  ||
 800eed2:	2b00      	cmp	r3, #0
 800eed4:	d102      	bne.n	800eedc <VL53L0X_set_measurement_timing_budget_micro_seconds+0x9a>
		SchedulerSequenceSteps.DssOn)) {
 800eed6:	7dbb      	ldrb	r3, [r7, #22]
		SchedulerSequenceSteps.MsrcOn ||
 800eed8:	2b00      	cmp	r3, #0
 800eeda:	d052      	beq.n	800ef82 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>

		/* TCC, MSRC and DSS all share the same timeout */
		Status = get_sequence_step_timeout(Dev,
 800eedc:	f107 0310 	add.w	r3, r7, #16
 800eee0:	461a      	mov	r2, r3
 800eee2:	2102      	movs	r1, #2
 800eee4:	6878      	ldr	r0, [r7, #4]
 800eee6:	f7ff fb19 	bl	800e51c <get_sequence_step_timeout>
 800eeea:	4603      	mov	r3, r0
 800eeec:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					&MsrcDccTccTimeoutMicroSeconds);

		/* Subtract the TCC, MSRC and DSS timeouts if they are
		 * enabled. */

		if (Status != VL53L0X_ERROR_NONE)
 800eef0:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800eef4:	2b00      	cmp	r3, #0
 800eef6:	d002      	beq.n	800eefe <VL53L0X_set_measurement_timing_budget_micro_seconds+0xbc>
			return Status;
 800eef8:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800eefc:	e07d      	b.n	800effa <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>

		/* TCC */
		if (SchedulerSequenceSteps.TccOn) {
 800eefe:	7d3b      	ldrb	r3, [r7, #20]
 800ef00:	2b00      	cmp	r3, #0
 800ef02:	d00f      	beq.n	800ef24 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xe2>

			SubTimeout = MsrcDccTccTimeoutMicroSeconds
				+ TccOverheadMicroSeconds;
 800ef04:	693b      	ldr	r3, [r7, #16]
			SubTimeout = MsrcDccTccTimeoutMicroSeconds
 800ef06:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ef08:	4413      	add	r3, r2
 800ef0a:	61fb      	str	r3, [r7, #28]

			if (SubTimeout <
 800ef0c:	69fa      	ldr	r2, [r7, #28]
 800ef0e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ef10:	429a      	cmp	r2, r3
 800ef12:	d204      	bcs.n	800ef1e <VL53L0X_set_measurement_timing_budget_micro_seconds+0xdc>
				FinalRangeTimingBudgetMicroSeconds) {
				FinalRangeTimingBudgetMicroSeconds -=
 800ef14:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800ef16:	69fb      	ldr	r3, [r7, #28]
 800ef18:	1ad3      	subs	r3, r2, r3
 800ef1a:	643b      	str	r3, [r7, #64]	; 0x40
 800ef1c:	e002      	b.n	800ef24 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xe2>
							SubTimeout;
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 800ef1e:	23fc      	movs	r3, #252	; 0xfc
 800ef20:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			}
		}

		if (Status != VL53L0X_ERROR_NONE) {
 800ef24:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800ef28:	2b00      	cmp	r3, #0
 800ef2a:	d002      	beq.n	800ef32 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xf0>
			LOG_FUNCTION_END(Status);
			return Status;
 800ef2c:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800ef30:	e063      	b.n	800effa <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>
		}

		/* DSS */
		if (SchedulerSequenceSteps.DssOn) {
 800ef32:	7dbb      	ldrb	r3, [r7, #22]
 800ef34:	2b00      	cmp	r3, #0
 800ef36:	d011      	beq.n	800ef5c <VL53L0X_set_measurement_timing_budget_micro_seconds+0x11a>

			SubTimeout = 2 * (MsrcDccTccTimeoutMicroSeconds +
 800ef38:	693a      	ldr	r2, [r7, #16]
 800ef3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ef3c:	4413      	add	r3, r2
 800ef3e:	005b      	lsls	r3, r3, #1
 800ef40:	61fb      	str	r3, [r7, #28]
				DssOverheadMicroSeconds);

			if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 800ef42:	69fa      	ldr	r2, [r7, #28]
 800ef44:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ef46:	429a      	cmp	r2, r3
 800ef48:	d204      	bcs.n	800ef54 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x112>
				FinalRangeTimingBudgetMicroSeconds
							-= SubTimeout;
 800ef4a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800ef4c:	69fb      	ldr	r3, [r7, #28]
 800ef4e:	1ad3      	subs	r3, r2, r3
 800ef50:	643b      	str	r3, [r7, #64]	; 0x40
 800ef52:	e016      	b.n	800ef82 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 800ef54:	23fc      	movs	r3, #252	; 0xfc
 800ef56:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800ef5a:	e012      	b.n	800ef82 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			}
		} else if (SchedulerSequenceSteps.MsrcOn) {
 800ef5c:	7d7b      	ldrb	r3, [r7, #21]
 800ef5e:	2b00      	cmp	r3, #0
 800ef60:	d00f      	beq.n	800ef82 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			/* MSRC */
			SubTimeout = MsrcDccTccTimeoutMicroSeconds +
 800ef62:	693b      	ldr	r3, [r7, #16]
 800ef64:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ef66:	4413      	add	r3, r2
 800ef68:	61fb      	str	r3, [r7, #28]
						MsrcOverheadMicroSeconds;

			if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 800ef6a:	69fa      	ldr	r2, [r7, #28]
 800ef6c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ef6e:	429a      	cmp	r2, r3
 800ef70:	d204      	bcs.n	800ef7c <VL53L0X_set_measurement_timing_budget_micro_seconds+0x13a>
				FinalRangeTimingBudgetMicroSeconds
							-= SubTimeout;
 800ef72:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800ef74:	69fb      	ldr	r3, [r7, #28]
 800ef76:	1ad3      	subs	r3, r2, r3
 800ef78:	643b      	str	r3, [r7, #64]	; 0x40
 800ef7a:	e002      	b.n	800ef82 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 800ef7c:	23fc      	movs	r3, #252	; 0xfc
 800ef7e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			}
		}

	}

	if (Status != VL53L0X_ERROR_NONE) {
 800ef82:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800ef86:	2b00      	cmp	r3, #0
 800ef88:	d002      	beq.n	800ef90 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x14e>
		LOG_FUNCTION_END(Status);
		return Status;
 800ef8a:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800ef8e:	e034      	b.n	800effa <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>
	}

	if (SchedulerSequenceSteps.PreRangeOn) {
 800ef90:	7dfb      	ldrb	r3, [r7, #23]
 800ef92:	2b00      	cmp	r3, #0
 800ef94:	d019      	beq.n	800efca <VL53L0X_set_measurement_timing_budget_micro_seconds+0x188>

		/* Subtract the Pre-range timeout if enabled. */

		Status = get_sequence_step_timeout(Dev,
 800ef96:	f107 030c 	add.w	r3, r7, #12
 800ef9a:	461a      	mov	r2, r3
 800ef9c:	2103      	movs	r1, #3
 800ef9e:	6878      	ldr	r0, [r7, #4]
 800efa0:	f7ff fabc 	bl	800e51c <get_sequence_step_timeout>
 800efa4:	4603      	mov	r3, r0
 800efa6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
				VL53L0X_SEQUENCESTEP_PRE_RANGE,
				&PreRangeTimeoutMicroSeconds);

		SubTimeout = PreRangeTimeoutMicroSeconds +
 800efaa:	68fb      	ldr	r3, [r7, #12]
 800efac:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800efae:	4413      	add	r3, r2
 800efb0:	61fb      	str	r3, [r7, #28]
				PreRangeOverheadMicroSeconds;

		if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 800efb2:	69fa      	ldr	r2, [r7, #28]
 800efb4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800efb6:	429a      	cmp	r2, r3
 800efb8:	d204      	bcs.n	800efc4 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x182>
			FinalRangeTimingBudgetMicroSeconds -= SubTimeout;
 800efba:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800efbc:	69fb      	ldr	r3, [r7, #28]
 800efbe:	1ad3      	subs	r3, r2, r3
 800efc0:	643b      	str	r3, [r7, #64]	; 0x40
 800efc2:	e002      	b.n	800efca <VL53L0X_set_measurement_timing_budget_micro_seconds+0x188>
		} else {
			/* Requested timeout too big. */
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 800efc4:	23fc      	movs	r3, #252	; 0xfc
 800efc6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		}
	}


	if (Status == VL53L0X_ERROR_NONE &&
 800efca:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800efce:	2b00      	cmp	r3, #0
 800efd0:	d111      	bne.n	800eff6 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b4>
		SchedulerSequenceSteps.FinalRangeOn) {
 800efd2:	7e3b      	ldrb	r3, [r7, #24]
	if (Status == VL53L0X_ERROR_NONE &&
 800efd4:	2b00      	cmp	r3, #0
 800efd6:	d00e      	beq.n	800eff6 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b4>

		FinalRangeTimingBudgetMicroSeconds -=
 800efd8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800efda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800efdc:	1ad3      	subs	r3, r2, r3
 800efde:	643b      	str	r3, [r7, #64]	; 0x40
		 * budget and the sum of all other timeouts within the sequence.
		 * If there is no room for the final range timeout, then an error
		 * will be set. Otherwise the remaining time will be applied to
		 * the final range.
		 */
		Status = set_sequence_step_timeout(Dev,
 800efe0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800efe2:	2104      	movs	r1, #4
 800efe4:	6878      	ldr	r0, [r7, #4]
 800efe6:	f7ff fb7a 	bl	800e6de <set_sequence_step_timeout>
 800efea:	4603      	mov	r3, r0
 800efec:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			VL53L0X_SEQUENCESTEP_FINAL_RANGE,
			FinalRangeTimingBudgetMicroSeconds);

		VL53L0X_SETPARAMETERFIELD(Dev,
 800eff0:	687b      	ldr	r3, [r7, #4]
 800eff2:	683a      	ldr	r2, [r7, #0]
 800eff4:	615a      	str	r2, [r3, #20]
			MeasurementTimingBudgetMicroSeconds);
	}

	LOG_FUNCTION_END(Status);

	return Status;
 800eff6:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
}
 800effa:	4618      	mov	r0, r3
 800effc:	3748      	adds	r7, #72	; 0x48
 800effe:	46bd      	mov	sp, r7
 800f000:	bd80      	pop	{r7, pc}

0800f002 <VL53L0X_get_measurement_timing_budget_micro_seconds>:

VL53L0X_Error VL53L0X_get_measurement_timing_budget_micro_seconds(VL53L0X_DEV Dev,
		uint32_t *pMeasurementTimingBudgetMicroSeconds)
{
 800f002:	b580      	push	{r7, lr}
 800f004:	b090      	sub	sp, #64	; 0x40
 800f006:	af00      	add	r7, sp, #0
 800f008:	6078      	str	r0, [r7, #4]
 800f00a:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800f00c:	2300      	movs	r3, #0
 800f00e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;
	uint32_t FinalRangeTimeoutMicroSeconds;
	uint32_t MsrcDccTccTimeoutMicroSeconds	= 2000;
 800f012:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800f016:	613b      	str	r3, [r7, #16]
	uint32_t StartOverheadMicroSeconds		= 1910;
 800f018:	f240 7376 	movw	r3, #1910	; 0x776
 800f01c:	63bb      	str	r3, [r7, #56]	; 0x38
	uint32_t EndOverheadMicroSeconds		= 960;
 800f01e:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 800f022:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t MsrcOverheadMicroSeconds		= 660;
 800f024:	f44f 7325 	mov.w	r3, #660	; 0x294
 800f028:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t TccOverheadMicroSeconds		= 590;
 800f02a:	f240 234e 	movw	r3, #590	; 0x24e
 800f02e:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t DssOverheadMicroSeconds		= 690;
 800f030:	f240 23b2 	movw	r3, #690	; 0x2b2
 800f034:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t PreRangeOverheadMicroSeconds	= 660;
 800f036:	f44f 7325 	mov.w	r3, #660	; 0x294
 800f03a:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t FinalRangeOverheadMicroSeconds = 550;
 800f03c:	f240 2326 	movw	r3, #550	; 0x226
 800f040:	623b      	str	r3, [r7, #32]
	uint32_t PreRangeTimeoutMicroSeconds	= 0;
 800f042:	2300      	movs	r3, #0
 800f044:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");

	/* Start and end overhead times always present */
	*pMeasurementTimingBudgetMicroSeconds
		= StartOverheadMicroSeconds + EndOverheadMicroSeconds;
 800f046:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f048:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f04a:	441a      	add	r2, r3
 800f04c:	683b      	ldr	r3, [r7, #0]
 800f04e:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 800f050:	f107 0318 	add.w	r3, r7, #24
 800f054:	4619      	mov	r1, r3
 800f056:	6878      	ldr	r0, [r7, #4]
 800f058:	f7fc fddc 	bl	800bc14 <VL53L0X_GetSequenceStepEnables>
 800f05c:	4603      	mov	r3, r0
 800f05e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

	if (Status != VL53L0X_ERROR_NONE) {
 800f062:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800f066:	2b00      	cmp	r3, #0
 800f068:	d002      	beq.n	800f070 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x6e>
		LOG_FUNCTION_END(Status);
		return Status;
 800f06a:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800f06e:	e075      	b.n	800f15c <VL53L0X_get_measurement_timing_budget_micro_seconds+0x15a>
	}


	if (SchedulerSequenceSteps.TccOn  ||
 800f070:	7e3b      	ldrb	r3, [r7, #24]
 800f072:	2b00      	cmp	r3, #0
 800f074:	d105      	bne.n	800f082 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x80>
		SchedulerSequenceSteps.MsrcOn ||
 800f076:	7e7b      	ldrb	r3, [r7, #25]
	if (SchedulerSequenceSteps.TccOn  ||
 800f078:	2b00      	cmp	r3, #0
 800f07a:	d102      	bne.n	800f082 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x80>
		SchedulerSequenceSteps.DssOn) {
 800f07c:	7ebb      	ldrb	r3, [r7, #26]
		SchedulerSequenceSteps.MsrcOn ||
 800f07e:	2b00      	cmp	r3, #0
 800f080:	d030      	beq.n	800f0e4 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>

		Status = get_sequence_step_timeout(Dev,
 800f082:	f107 0310 	add.w	r3, r7, #16
 800f086:	461a      	mov	r2, r3
 800f088:	2102      	movs	r1, #2
 800f08a:	6878      	ldr	r0, [r7, #4]
 800f08c:	f7ff fa46 	bl	800e51c <get_sequence_step_timeout>
 800f090:	4603      	mov	r3, r0
 800f092:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_SEQUENCESTEP_MSRC,
				&MsrcDccTccTimeoutMicroSeconds);

		if (Status == VL53L0X_ERROR_NONE) {
 800f096:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800f09a:	2b00      	cmp	r3, #0
 800f09c:	d122      	bne.n	800f0e4 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
			if (SchedulerSequenceSteps.TccOn) {
 800f09e:	7e3b      	ldrb	r3, [r7, #24]
 800f0a0:	2b00      	cmp	r3, #0
 800f0a2:	d007      	beq.n	800f0b4 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xb2>
				*pMeasurementTimingBudgetMicroSeconds +=
 800f0a4:	683b      	ldr	r3, [r7, #0]
 800f0a6:	681a      	ldr	r2, [r3, #0]
					MsrcDccTccTimeoutMicroSeconds +
 800f0a8:	6939      	ldr	r1, [r7, #16]
 800f0aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f0ac:	440b      	add	r3, r1
				*pMeasurementTimingBudgetMicroSeconds +=
 800f0ae:	441a      	add	r2, r3
 800f0b0:	683b      	ldr	r3, [r7, #0]
 800f0b2:	601a      	str	r2, [r3, #0]
					TccOverheadMicroSeconds;
			}

			if (SchedulerSequenceSteps.DssOn) {
 800f0b4:	7ebb      	ldrb	r3, [r7, #26]
 800f0b6:	2b00      	cmp	r3, #0
 800f0b8:	d009      	beq.n	800f0ce <VL53L0X_get_measurement_timing_budget_micro_seconds+0xcc>
				*pMeasurementTimingBudgetMicroSeconds +=
 800f0ba:	683b      	ldr	r3, [r7, #0]
 800f0bc:	681a      	ldr	r2, [r3, #0]
				2 * (MsrcDccTccTimeoutMicroSeconds +
 800f0be:	6939      	ldr	r1, [r7, #16]
 800f0c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f0c2:	440b      	add	r3, r1
 800f0c4:	005b      	lsls	r3, r3, #1
				*pMeasurementTimingBudgetMicroSeconds +=
 800f0c6:	441a      	add	r2, r3
 800f0c8:	683b      	ldr	r3, [r7, #0]
 800f0ca:	601a      	str	r2, [r3, #0]
 800f0cc:	e00a      	b.n	800f0e4 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
					DssOverheadMicroSeconds);
			} else if (SchedulerSequenceSteps.MsrcOn) {
 800f0ce:	7e7b      	ldrb	r3, [r7, #25]
 800f0d0:	2b00      	cmp	r3, #0
 800f0d2:	d007      	beq.n	800f0e4 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
				*pMeasurementTimingBudgetMicroSeconds +=
 800f0d4:	683b      	ldr	r3, [r7, #0]
 800f0d6:	681a      	ldr	r2, [r3, #0]
					MsrcDccTccTimeoutMicroSeconds +
 800f0d8:	6939      	ldr	r1, [r7, #16]
 800f0da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f0dc:	440b      	add	r3, r1
				*pMeasurementTimingBudgetMicroSeconds +=
 800f0de:	441a      	add	r2, r3
 800f0e0:	683b      	ldr	r3, [r7, #0]
 800f0e2:	601a      	str	r2, [r3, #0]
					MsrcOverheadMicroSeconds;
			}
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800f0e4:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800f0e8:	2b00      	cmp	r3, #0
 800f0ea:	d114      	bne.n	800f116 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x114>
		if (SchedulerSequenceSteps.PreRangeOn) {
 800f0ec:	7efb      	ldrb	r3, [r7, #27]
 800f0ee:	2b00      	cmp	r3, #0
 800f0f0:	d011      	beq.n	800f116 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x114>
			Status = get_sequence_step_timeout(Dev,
 800f0f2:	f107 030c 	add.w	r3, r7, #12
 800f0f6:	461a      	mov	r2, r3
 800f0f8:	2103      	movs	r1, #3
 800f0fa:	6878      	ldr	r0, [r7, #4]
 800f0fc:	f7ff fa0e 	bl	800e51c <get_sequence_step_timeout>
 800f100:	4603      	mov	r3, r0
 800f102:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_SEQUENCESTEP_PRE_RANGE,
				&PreRangeTimeoutMicroSeconds);
			*pMeasurementTimingBudgetMicroSeconds +=
 800f106:	683b      	ldr	r3, [r7, #0]
 800f108:	681a      	ldr	r2, [r3, #0]
				PreRangeTimeoutMicroSeconds +
 800f10a:	68f9      	ldr	r1, [r7, #12]
 800f10c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f10e:	440b      	add	r3, r1
			*pMeasurementTimingBudgetMicroSeconds +=
 800f110:	441a      	add	r2, r3
 800f112:	683b      	ldr	r3, [r7, #0]
 800f114:	601a      	str	r2, [r3, #0]
				PreRangeOverheadMicroSeconds;
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800f116:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800f11a:	2b00      	cmp	r3, #0
 800f11c:	d114      	bne.n	800f148 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x146>
		if (SchedulerSequenceSteps.FinalRangeOn) {
 800f11e:	7f3b      	ldrb	r3, [r7, #28]
 800f120:	2b00      	cmp	r3, #0
 800f122:	d011      	beq.n	800f148 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x146>
			Status = get_sequence_step_timeout(Dev,
 800f124:	f107 0314 	add.w	r3, r7, #20
 800f128:	461a      	mov	r2, r3
 800f12a:	2104      	movs	r1, #4
 800f12c:	6878      	ldr	r0, [r7, #4]
 800f12e:	f7ff f9f5 	bl	800e51c <get_sequence_step_timeout>
 800f132:	4603      	mov	r3, r0
 800f134:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
					VL53L0X_SEQUENCESTEP_FINAL_RANGE,
					&FinalRangeTimeoutMicroSeconds);
			*pMeasurementTimingBudgetMicroSeconds +=
 800f138:	683b      	ldr	r3, [r7, #0]
 800f13a:	681a      	ldr	r2, [r3, #0]
				(FinalRangeTimeoutMicroSeconds +
 800f13c:	6979      	ldr	r1, [r7, #20]
 800f13e:	6a3b      	ldr	r3, [r7, #32]
 800f140:	440b      	add	r3, r1
			*pMeasurementTimingBudgetMicroSeconds +=
 800f142:	441a      	add	r2, r3
 800f144:	683b      	ldr	r3, [r7, #0]
 800f146:	601a      	str	r2, [r3, #0]
				FinalRangeOverheadMicroSeconds);
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800f148:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800f14c:	2b00      	cmp	r3, #0
 800f14e:	d103      	bne.n	800f158 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x156>
		VL53L0X_SETPARAMETERFIELD(Dev,
 800f150:	683b      	ldr	r3, [r7, #0]
 800f152:	681a      	ldr	r2, [r3, #0]
 800f154:	687b      	ldr	r3, [r7, #4]
 800f156:	615a      	str	r2, [r3, #20]
			MeasurementTimingBudgetMicroSeconds,
			*pMeasurementTimingBudgetMicroSeconds);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800f158:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 800f15c:	4618      	mov	r0, r3
 800f15e:	3740      	adds	r7, #64	; 0x40
 800f160:	46bd      	mov	sp, r7
 800f162:	bd80      	pop	{r7, pc}

0800f164 <VL53L0X_load_tuning_settings>:



VL53L0X_Error VL53L0X_load_tuning_settings(VL53L0X_DEV Dev,
		uint8_t *pTuningSettingBuffer)
{
 800f164:	b580      	push	{r7, lr}
 800f166:	b088      	sub	sp, #32
 800f168:	af00      	add	r7, sp, #0
 800f16a:	6078      	str	r0, [r7, #4]
 800f16c:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800f16e:	2300      	movs	r3, #0
 800f170:	77fb      	strb	r3, [r7, #31]
	uint8_t localBuffer[4]; /* max */
	uint16_t Temp16;

	LOG_FUNCTION_START("");

	Index = 0;
 800f172:	2300      	movs	r3, #0
 800f174:	617b      	str	r3, [r7, #20]

	while ((*(pTuningSettingBuffer + Index) != 0) &&
 800f176:	e0c6      	b.n	800f306 <VL53L0X_load_tuning_settings+0x1a2>
			(Status == VL53L0X_ERROR_NONE)) {
		NumberOfWrites = *(pTuningSettingBuffer + Index);
 800f178:	697b      	ldr	r3, [r7, #20]
 800f17a:	683a      	ldr	r2, [r7, #0]
 800f17c:	4413      	add	r3, r2
 800f17e:	781b      	ldrb	r3, [r3, #0]
 800f180:	74fb      	strb	r3, [r7, #19]
		Index++;
 800f182:	697b      	ldr	r3, [r7, #20]
 800f184:	3301      	adds	r3, #1
 800f186:	617b      	str	r3, [r7, #20]
		if (NumberOfWrites == 0xFF) {
 800f188:	7cfb      	ldrb	r3, [r7, #19]
 800f18a:	2bff      	cmp	r3, #255	; 0xff
 800f18c:	f040 808d 	bne.w	800f2aa <VL53L0X_load_tuning_settings+0x146>
			/* internal parameters */
			SelectParam = *(pTuningSettingBuffer + Index);
 800f190:	697b      	ldr	r3, [r7, #20]
 800f192:	683a      	ldr	r2, [r7, #0]
 800f194:	4413      	add	r3, r2
 800f196:	781b      	ldrb	r3, [r3, #0]
 800f198:	747b      	strb	r3, [r7, #17]
			Index++;
 800f19a:	697b      	ldr	r3, [r7, #20]
 800f19c:	3301      	adds	r3, #1
 800f19e:	617b      	str	r3, [r7, #20]
			switch (SelectParam) {
 800f1a0:	7c7b      	ldrb	r3, [r7, #17]
 800f1a2:	2b03      	cmp	r3, #3
 800f1a4:	d87e      	bhi.n	800f2a4 <VL53L0X_load_tuning_settings+0x140>
 800f1a6:	a201      	add	r2, pc, #4	; (adr r2, 800f1ac <VL53L0X_load_tuning_settings+0x48>)
 800f1a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f1ac:	0800f1bd 	.word	0x0800f1bd
 800f1b0:	0800f1f7 	.word	0x0800f1f7
 800f1b4:	0800f231 	.word	0x0800f231
 800f1b8:	0800f26b 	.word	0x0800f26b
			case 0: /* uint16_t SigmaEstRefArray -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 800f1bc:	697b      	ldr	r3, [r7, #20]
 800f1be:	683a      	ldr	r2, [r7, #0]
 800f1c0:	4413      	add	r3, r2
 800f1c2:	781b      	ldrb	r3, [r3, #0]
 800f1c4:	743b      	strb	r3, [r7, #16]
				Index++;
 800f1c6:	697b      	ldr	r3, [r7, #20]
 800f1c8:	3301      	adds	r3, #1
 800f1ca:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 800f1cc:	697b      	ldr	r3, [r7, #20]
 800f1ce:	683a      	ldr	r2, [r7, #0]
 800f1d0:	4413      	add	r3, r2
 800f1d2:	781b      	ldrb	r3, [r3, #0]
 800f1d4:	73fb      	strb	r3, [r7, #15]
				Index++;
 800f1d6:	697b      	ldr	r3, [r7, #20]
 800f1d8:	3301      	adds	r3, #1
 800f1da:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 800f1dc:	7c3b      	ldrb	r3, [r7, #16]
 800f1de:	b29b      	uxth	r3, r3
 800f1e0:	021b      	lsls	r3, r3, #8
 800f1e2:	b29a      	uxth	r2, r3
 800f1e4:	7bfb      	ldrb	r3, [r7, #15]
 800f1e6:	b29b      	uxth	r3, r3
 800f1e8:	4413      	add	r3, r2
 800f1ea:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, SigmaEstRefArray, Temp16);
 800f1ec:	687b      	ldr	r3, [r7, #4]
 800f1ee:	89ba      	ldrh	r2, [r7, #12]
 800f1f0:	f8a3 2134 	strh.w	r2, [r3, #308]	; 0x134
				break;
 800f1f4:	e087      	b.n	800f306 <VL53L0X_load_tuning_settings+0x1a2>
			case 1: /* uint16_t SigmaEstEffPulseWidth -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 800f1f6:	697b      	ldr	r3, [r7, #20]
 800f1f8:	683a      	ldr	r2, [r7, #0]
 800f1fa:	4413      	add	r3, r2
 800f1fc:	781b      	ldrb	r3, [r3, #0]
 800f1fe:	743b      	strb	r3, [r7, #16]
				Index++;
 800f200:	697b      	ldr	r3, [r7, #20]
 800f202:	3301      	adds	r3, #1
 800f204:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 800f206:	697b      	ldr	r3, [r7, #20]
 800f208:	683a      	ldr	r2, [r7, #0]
 800f20a:	4413      	add	r3, r2
 800f20c:	781b      	ldrb	r3, [r3, #0]
 800f20e:	73fb      	strb	r3, [r7, #15]
				Index++;
 800f210:	697b      	ldr	r3, [r7, #20]
 800f212:	3301      	adds	r3, #1
 800f214:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 800f216:	7c3b      	ldrb	r3, [r7, #16]
 800f218:	b29b      	uxth	r3, r3
 800f21a:	021b      	lsls	r3, r3, #8
 800f21c:	b29a      	uxth	r2, r3
 800f21e:	7bfb      	ldrb	r3, [r7, #15]
 800f220:	b29b      	uxth	r3, r3
 800f222:	4413      	add	r3, r2
 800f224:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, SigmaEstEffPulseWidth,
 800f226:	687b      	ldr	r3, [r7, #4]
 800f228:	89ba      	ldrh	r2, [r7, #12]
 800f22a:	f8a3 2136 	strh.w	r2, [r3, #310]	; 0x136
					Temp16);
				break;
 800f22e:	e06a      	b.n	800f306 <VL53L0X_load_tuning_settings+0x1a2>
			case 2: /* uint16_t SigmaEstEffAmbWidth -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 800f230:	697b      	ldr	r3, [r7, #20]
 800f232:	683a      	ldr	r2, [r7, #0]
 800f234:	4413      	add	r3, r2
 800f236:	781b      	ldrb	r3, [r3, #0]
 800f238:	743b      	strb	r3, [r7, #16]
				Index++;
 800f23a:	697b      	ldr	r3, [r7, #20]
 800f23c:	3301      	adds	r3, #1
 800f23e:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 800f240:	697b      	ldr	r3, [r7, #20]
 800f242:	683a      	ldr	r2, [r7, #0]
 800f244:	4413      	add	r3, r2
 800f246:	781b      	ldrb	r3, [r3, #0]
 800f248:	73fb      	strb	r3, [r7, #15]
				Index++;
 800f24a:	697b      	ldr	r3, [r7, #20]
 800f24c:	3301      	adds	r3, #1
 800f24e:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 800f250:	7c3b      	ldrb	r3, [r7, #16]
 800f252:	b29b      	uxth	r3, r3
 800f254:	021b      	lsls	r3, r3, #8
 800f256:	b29a      	uxth	r2, r3
 800f258:	7bfb      	ldrb	r3, [r7, #15]
 800f25a:	b29b      	uxth	r3, r3
 800f25c:	4413      	add	r3, r2
 800f25e:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, SigmaEstEffAmbWidth, Temp16);
 800f260:	687b      	ldr	r3, [r7, #4]
 800f262:	89ba      	ldrh	r2, [r7, #12]
 800f264:	f8a3 2138 	strh.w	r2, [r3, #312]	; 0x138
				break;
 800f268:	e04d      	b.n	800f306 <VL53L0X_load_tuning_settings+0x1a2>
			case 3: /* uint16_t targetRefRate -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 800f26a:	697b      	ldr	r3, [r7, #20]
 800f26c:	683a      	ldr	r2, [r7, #0]
 800f26e:	4413      	add	r3, r2
 800f270:	781b      	ldrb	r3, [r3, #0]
 800f272:	743b      	strb	r3, [r7, #16]
				Index++;
 800f274:	697b      	ldr	r3, [r7, #20]
 800f276:	3301      	adds	r3, #1
 800f278:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 800f27a:	697b      	ldr	r3, [r7, #20]
 800f27c:	683a      	ldr	r2, [r7, #0]
 800f27e:	4413      	add	r3, r2
 800f280:	781b      	ldrb	r3, [r3, #0]
 800f282:	73fb      	strb	r3, [r7, #15]
				Index++;
 800f284:	697b      	ldr	r3, [r7, #20]
 800f286:	3301      	adds	r3, #1
 800f288:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 800f28a:	7c3b      	ldrb	r3, [r7, #16]
 800f28c:	b29b      	uxth	r3, r3
 800f28e:	021b      	lsls	r3, r3, #8
 800f290:	b29a      	uxth	r2, r3
 800f292:	7bfb      	ldrb	r3, [r7, #15]
 800f294:	b29b      	uxth	r3, r3
 800f296:	4413      	add	r3, r2
 800f298:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, targetRefRate, Temp16);
 800f29a:	687b      	ldr	r3, [r7, #4]
 800f29c:	89ba      	ldrh	r2, [r7, #12]
 800f29e:	f8a3 213c 	strh.w	r2, [r3, #316]	; 0x13c
				break;
 800f2a2:	e030      	b.n	800f306 <VL53L0X_load_tuning_settings+0x1a2>
			default: /* invalid parameter */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 800f2a4:	23fc      	movs	r3, #252	; 0xfc
 800f2a6:	77fb      	strb	r3, [r7, #31]
 800f2a8:	e02d      	b.n	800f306 <VL53L0X_load_tuning_settings+0x1a2>
			}

		} else if (NumberOfWrites <= 4) {
 800f2aa:	7cfb      	ldrb	r3, [r7, #19]
 800f2ac:	2b04      	cmp	r3, #4
 800f2ae:	d828      	bhi.n	800f302 <VL53L0X_load_tuning_settings+0x19e>
			Address = *(pTuningSettingBuffer + Index);
 800f2b0:	697b      	ldr	r3, [r7, #20]
 800f2b2:	683a      	ldr	r2, [r7, #0]
 800f2b4:	4413      	add	r3, r2
 800f2b6:	781b      	ldrb	r3, [r3, #0]
 800f2b8:	74bb      	strb	r3, [r7, #18]
			Index++;
 800f2ba:	697b      	ldr	r3, [r7, #20]
 800f2bc:	3301      	adds	r3, #1
 800f2be:	617b      	str	r3, [r7, #20]

			for (i = 0; i < NumberOfWrites; i++) {
 800f2c0:	2300      	movs	r3, #0
 800f2c2:	61bb      	str	r3, [r7, #24]
 800f2c4:	e00f      	b.n	800f2e6 <VL53L0X_load_tuning_settings+0x182>
				localBuffer[i] = *(pTuningSettingBuffer +
 800f2c6:	697b      	ldr	r3, [r7, #20]
 800f2c8:	683a      	ldr	r2, [r7, #0]
 800f2ca:	4413      	add	r3, r2
 800f2cc:	7819      	ldrb	r1, [r3, #0]
 800f2ce:	f107 0208 	add.w	r2, r7, #8
 800f2d2:	69bb      	ldr	r3, [r7, #24]
 800f2d4:	4413      	add	r3, r2
 800f2d6:	460a      	mov	r2, r1
 800f2d8:	701a      	strb	r2, [r3, #0]
							Index);
				Index++;
 800f2da:	697b      	ldr	r3, [r7, #20]
 800f2dc:	3301      	adds	r3, #1
 800f2de:	617b      	str	r3, [r7, #20]
			for (i = 0; i < NumberOfWrites; i++) {
 800f2e0:	69bb      	ldr	r3, [r7, #24]
 800f2e2:	3301      	adds	r3, #1
 800f2e4:	61bb      	str	r3, [r7, #24]
 800f2e6:	7cfb      	ldrb	r3, [r7, #19]
 800f2e8:	69ba      	ldr	r2, [r7, #24]
 800f2ea:	429a      	cmp	r2, r3
 800f2ec:	dbeb      	blt.n	800f2c6 <VL53L0X_load_tuning_settings+0x162>
			}

			Status = VL53L0X_WriteMulti(Dev, Address, localBuffer,
 800f2ee:	7cfb      	ldrb	r3, [r7, #19]
 800f2f0:	f107 0208 	add.w	r2, r7, #8
 800f2f4:	7cb9      	ldrb	r1, [r7, #18]
 800f2f6:	6878      	ldr	r0, [r7, #4]
 800f2f8:	f000 fdee 	bl	800fed8 <VL53L0X_WriteMulti>
 800f2fc:	4603      	mov	r3, r0
 800f2fe:	77fb      	strb	r3, [r7, #31]
 800f300:	e001      	b.n	800f306 <VL53L0X_load_tuning_settings+0x1a2>
					NumberOfWrites);

		} else {
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 800f302:	23fc      	movs	r3, #252	; 0xfc
 800f304:	77fb      	strb	r3, [r7, #31]
	while ((*(pTuningSettingBuffer + Index) != 0) &&
 800f306:	697b      	ldr	r3, [r7, #20]
 800f308:	683a      	ldr	r2, [r7, #0]
 800f30a:	4413      	add	r3, r2
 800f30c:	781b      	ldrb	r3, [r3, #0]
 800f30e:	2b00      	cmp	r3, #0
 800f310:	d004      	beq.n	800f31c <VL53L0X_load_tuning_settings+0x1b8>
 800f312:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800f316:	2b00      	cmp	r3, #0
 800f318:	f43f af2e 	beq.w	800f178 <VL53L0X_load_tuning_settings+0x14>
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800f31c:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800f320:	4618      	mov	r0, r3
 800f322:	3720      	adds	r7, #32
 800f324:	46bd      	mov	sp, r7
 800f326:	bd80      	pop	{r7, pc}

0800f328 <VL53L0X_get_total_xtalk_rate>:

VL53L0X_Error VL53L0X_get_total_xtalk_rate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *ptotal_xtalk_rate_mcps)
{
 800f328:	b580      	push	{r7, lr}
 800f32a:	b088      	sub	sp, #32
 800f32c:	af00      	add	r7, sp, #0
 800f32e:	60f8      	str	r0, [r7, #12]
 800f330:	60b9      	str	r1, [r7, #8]
 800f332:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800f334:	2300      	movs	r3, #0
 800f336:	77fb      	strb	r3, [r7, #31]

	uint8_t xtalkCompEnable;
	FixPoint1616_t totalXtalkMegaCps;
	FixPoint1616_t xtalkPerSpadMegaCps;

	*ptotal_xtalk_rate_mcps = 0;
 800f338:	687b      	ldr	r3, [r7, #4]
 800f33a:	2200      	movs	r2, #0
 800f33c:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_GetXTalkCompensationEnable(Dev, &xtalkCompEnable);
 800f33e:	f107 0313 	add.w	r3, r7, #19
 800f342:	4619      	mov	r1, r3
 800f344:	68f8      	ldr	r0, [r7, #12]
 800f346:	f7fc fcf1 	bl	800bd2c <VL53L0X_GetXTalkCompensationEnable>
 800f34a:	4603      	mov	r3, r0
 800f34c:	77fb      	strb	r3, [r7, #31]
	if (Status == VL53L0X_ERROR_NONE) {
 800f34e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800f352:	2b00      	cmp	r3, #0
 800f354:	d111      	bne.n	800f37a <VL53L0X_get_total_xtalk_rate+0x52>

		if (xtalkCompEnable) {
 800f356:	7cfb      	ldrb	r3, [r7, #19]
 800f358:	2b00      	cmp	r3, #0
 800f35a:	d00e      	beq.n	800f37a <VL53L0X_get_total_xtalk_rate+0x52>

			VL53L0X_GETPARAMETERFIELD(
 800f35c:	68fb      	ldr	r3, [r7, #12]
 800f35e:	6a1b      	ldr	r3, [r3, #32]
 800f360:	61bb      	str	r3, [r7, #24]
				XTalkCompensationRateMegaCps,
				xtalkPerSpadMegaCps);

			/* FixPoint1616 * FixPoint 8:8 = FixPoint0824 */
			totalXtalkMegaCps =
				pRangingMeasurementData->EffectiveSpadRtnCount *
 800f362:	68bb      	ldr	r3, [r7, #8]
 800f364:	8a9b      	ldrh	r3, [r3, #20]
 800f366:	461a      	mov	r2, r3
			totalXtalkMegaCps =
 800f368:	69bb      	ldr	r3, [r7, #24]
 800f36a:	fb02 f303 	mul.w	r3, r2, r3
 800f36e:	617b      	str	r3, [r7, #20]
				xtalkPerSpadMegaCps;

			/* FixPoint0824 >> 8 = FixPoint1616 */
			*ptotal_xtalk_rate_mcps =
				(totalXtalkMegaCps + 0x80) >> 8;
 800f370:	697b      	ldr	r3, [r7, #20]
 800f372:	3380      	adds	r3, #128	; 0x80
 800f374:	0a1a      	lsrs	r2, r3, #8
			*ptotal_xtalk_rate_mcps =
 800f376:	687b      	ldr	r3, [r7, #4]
 800f378:	601a      	str	r2, [r3, #0]
		}
	}

	return Status;
 800f37a:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800f37e:	4618      	mov	r0, r3
 800f380:	3720      	adds	r7, #32
 800f382:	46bd      	mov	sp, r7
 800f384:	bd80      	pop	{r7, pc}

0800f386 <VL53L0X_get_total_signal_rate>:

VL53L0X_Error VL53L0X_get_total_signal_rate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *ptotal_signal_rate_mcps)
{
 800f386:	b580      	push	{r7, lr}
 800f388:	b086      	sub	sp, #24
 800f38a:	af00      	add	r7, sp, #0
 800f38c:	60f8      	str	r0, [r7, #12]
 800f38e:	60b9      	str	r1, [r7, #8]
 800f390:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800f392:	2300      	movs	r3, #0
 800f394:	75fb      	strb	r3, [r7, #23]
	FixPoint1616_t totalXtalkMegaCps;

	LOG_FUNCTION_START("");

	*ptotal_signal_rate_mcps =
		pRangingMeasurementData->SignalRateRtnMegaCps;
 800f396:	68bb      	ldr	r3, [r7, #8]
 800f398:	68da      	ldr	r2, [r3, #12]
	*ptotal_signal_rate_mcps =
 800f39a:	687b      	ldr	r3, [r7, #4]
 800f39c:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_get_total_xtalk_rate(
 800f39e:	f107 0310 	add.w	r3, r7, #16
 800f3a2:	461a      	mov	r2, r3
 800f3a4:	68b9      	ldr	r1, [r7, #8]
 800f3a6:	68f8      	ldr	r0, [r7, #12]
 800f3a8:	f7ff ffbe 	bl	800f328 <VL53L0X_get_total_xtalk_rate>
 800f3ac:	4603      	mov	r3, r0
 800f3ae:	75fb      	strb	r3, [r7, #23]
		Dev, pRangingMeasurementData, &totalXtalkMegaCps);

	if (Status == VL53L0X_ERROR_NONE)
 800f3b0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800f3b4:	2b00      	cmp	r3, #0
 800f3b6:	d105      	bne.n	800f3c4 <VL53L0X_get_total_signal_rate+0x3e>
		*ptotal_signal_rate_mcps += totalXtalkMegaCps;
 800f3b8:	687b      	ldr	r3, [r7, #4]
 800f3ba:	681a      	ldr	r2, [r3, #0]
 800f3bc:	693b      	ldr	r3, [r7, #16]
 800f3be:	441a      	add	r2, r3
 800f3c0:	687b      	ldr	r3, [r7, #4]
 800f3c2:	601a      	str	r2, [r3, #0]

	return Status;
 800f3c4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800f3c8:	4618      	mov	r0, r3
 800f3ca:	3718      	adds	r7, #24
 800f3cc:	46bd      	mov	sp, r7
 800f3ce:	bd80      	pop	{r7, pc}

0800f3d0 <VL53L0X_calc_dmax>:
	FixPoint1616_t pwMult,
	uint32_t sigmaEstimateP1,
	FixPoint1616_t sigmaEstimateP2,
	uint32_t peakVcselDuration_us,
	uint32_t *pdmax_mm)
{
 800f3d0:	b580      	push	{r7, lr}
 800f3d2:	b09a      	sub	sp, #104	; 0x68
 800f3d4:	af00      	add	r7, sp, #0
 800f3d6:	60f8      	str	r0, [r7, #12]
 800f3d8:	60b9      	str	r1, [r7, #8]
 800f3da:	607a      	str	r2, [r7, #4]
 800f3dc:	603b      	str	r3, [r7, #0]
	const uint32_t cSigmaLimit		= 18;
 800f3de:	2312      	movs	r3, #18
 800f3e0:	657b      	str	r3, [r7, #84]	; 0x54
	const FixPoint1616_t cSignalLimit	= 0x4000; /* 0.25 */
 800f3e2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800f3e6:	653b      	str	r3, [r7, #80]	; 0x50
	const FixPoint1616_t cSigmaEstRef	= 0x00000042; /* 0.001 */
 800f3e8:	2342      	movs	r3, #66	; 0x42
 800f3ea:	64fb      	str	r3, [r7, #76]	; 0x4c
	const uint32_t cAmbEffWidthSigmaEst_ns = 6;
 800f3ec:	2306      	movs	r3, #6
 800f3ee:	64bb      	str	r3, [r7, #72]	; 0x48
	const uint32_t cAmbEffWidthDMax_ns	   = 7;
 800f3f0:	2307      	movs	r3, #7
 800f3f2:	647b      	str	r3, [r7, #68]	; 0x44
	FixPoint1616_t dmaxAmbient;
	FixPoint1616_t dmaxDarkTmp;
	FixPoint1616_t sigmaEstP2Tmp;
	uint32_t signalRateTemp_mcps;

	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800f3f4:	2300      	movs	r3, #0
 800f3f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

	LOG_FUNCTION_START("");

	dmaxCalRange_mm =
		PALDevDataGet(Dev, DmaxCalRangeMilliMeter);
 800f3fa:	68fb      	ldr	r3, [r7, #12]
 800f3fc:	f8b3 3154 	ldrh.w	r3, [r3, #340]	; 0x154
	dmaxCalRange_mm =
 800f400:	63fb      	str	r3, [r7, #60]	; 0x3c

	dmaxCalSignalRateRtn_mcps =
 800f402:	68fb      	ldr	r3, [r7, #12]
 800f404:	f8d3 3158 	ldr.w	r3, [r3, #344]	; 0x158
 800f408:	63bb      	str	r3, [r7, #56]	; 0x38
		PALDevDataGet(Dev, DmaxCalSignalRateRtnMegaCps);

	/* uint32 * FixPoint1616 = FixPoint1616 */
	SignalAt0mm = dmaxCalRange_mm * dmaxCalSignalRateRtn_mcps;
 800f40a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f40c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f40e:	fb02 f303 	mul.w	r3, r2, r3
 800f412:	637b      	str	r3, [r7, #52]	; 0x34

	/* FixPoint1616 >> 8 = FixPoint2408 */
	SignalAt0mm = (SignalAt0mm + 0x80) >> 8;
 800f414:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f416:	3380      	adds	r3, #128	; 0x80
 800f418:	0a1b      	lsrs	r3, r3, #8
 800f41a:	637b      	str	r3, [r7, #52]	; 0x34
	SignalAt0mm *= dmaxCalRange_mm;
 800f41c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f41e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800f420:	fb02 f303 	mul.w	r3, r2, r3
 800f424:	637b      	str	r3, [r7, #52]	; 0x34

	minSignalNeeded_p1 = 0;
 800f426:	2300      	movs	r3, #0
 800f428:	667b      	str	r3, [r7, #100]	; 0x64
	if (totalCorrSignalRate_mcps > 0) {
 800f42a:	687b      	ldr	r3, [r7, #4]
 800f42c:	2b00      	cmp	r3, #0
 800f42e:	d01a      	beq.n	800f466 <VL53L0X_calc_dmax+0x96>

		/* Shift by 10 bits to increase resolution prior to the
		 * division */
		signalRateTemp_mcps = totalSignalRate_mcps << 10;
 800f430:	68bb      	ldr	r3, [r7, #8]
 800f432:	029b      	lsls	r3, r3, #10
 800f434:	633b      	str	r3, [r7, #48]	; 0x30

		/* Add rounding value prior to division */
		minSignalNeeded_p1 = signalRateTemp_mcps +
			(totalCorrSignalRate_mcps/2);
 800f436:	687b      	ldr	r3, [r7, #4]
 800f438:	085b      	lsrs	r3, r3, #1
		minSignalNeeded_p1 = signalRateTemp_mcps +
 800f43a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f43c:	4413      	add	r3, r2
 800f43e:	667b      	str	r3, [r7, #100]	; 0x64

		/* FixPoint0626/FixPoint1616 = FixPoint2210 */
		minSignalNeeded_p1 /= totalCorrSignalRate_mcps;
 800f440:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800f442:	687b      	ldr	r3, [r7, #4]
 800f444:	fbb2 f3f3 	udiv	r3, r2, r3
 800f448:	667b      	str	r3, [r7, #100]	; 0x64

		/* Apply a factored version of the speed of light.
		 Correction to be applied at the end */
		minSignalNeeded_p1 *= 3;
 800f44a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800f44c:	4613      	mov	r3, r2
 800f44e:	005b      	lsls	r3, r3, #1
 800f450:	4413      	add	r3, r2
 800f452:	667b      	str	r3, [r7, #100]	; 0x64

		/* FixPoint2210 * FixPoint2210 = FixPoint1220 */
		minSignalNeeded_p1 *= minSignalNeeded_p1;
 800f454:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800f456:	fb03 f303 	mul.w	r3, r3, r3
 800f45a:	667b      	str	r3, [r7, #100]	; 0x64

		/* FixPoint1220 >> 16 = FixPoint2804 */
		minSignalNeeded_p1 = (minSignalNeeded_p1 + 0x8000) >> 16;
 800f45c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800f45e:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800f462:	0c1b      	lsrs	r3, r3, #16
 800f464:	667b      	str	r3, [r7, #100]	; 0x64
	}

	minSignalNeeded_p2 = pwMult * sigmaEstimateP1;
 800f466:	683b      	ldr	r3, [r7, #0]
 800f468:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800f46a:	fb02 f303 	mul.w	r3, r2, r3
 800f46e:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* FixPoint1616 >> 16 =	 uint32 */
	minSignalNeeded_p2 = (minSignalNeeded_p2 + 0x8000) >> 16;
 800f470:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f472:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800f476:	0c1b      	lsrs	r3, r3, #16
 800f478:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* uint32 * uint32	=  uint32 */
	minSignalNeeded_p2 *= minSignalNeeded_p2;
 800f47a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f47c:	fb03 f303 	mul.w	r3, r3, r3
 800f480:	62fb      	str	r3, [r7, #44]	; 0x2c
	/* Check sigmaEstimateP2
	 * If this value is too high there is not enough signal rate
	 * to calculate dmax value so set a suitable value to ensure
	 * a very small dmax.
	 */
	sigmaEstP2Tmp = (sigmaEstimateP2 + 0x8000) >> 16;
 800f482:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800f484:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800f488:	0c1b      	lsrs	r3, r3, #16
 800f48a:	62bb      	str	r3, [r7, #40]	; 0x28
	sigmaEstP2Tmp = (sigmaEstP2Tmp + cAmbEffWidthSigmaEst_ns/2)/
 800f48c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f48e:	085a      	lsrs	r2, r3, #1
 800f490:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f492:	441a      	add	r2, r3
 800f494:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f496:	fbb2 f3f3 	udiv	r3, r2, r3
 800f49a:	62bb      	str	r3, [r7, #40]	; 0x28
		cAmbEffWidthSigmaEst_ns;
	sigmaEstP2Tmp *= cAmbEffWidthDMax_ns;
 800f49c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f49e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f4a0:	fb02 f303 	mul.w	r3, r2, r3
 800f4a4:	62bb      	str	r3, [r7, #40]	; 0x28

	if (sigmaEstP2Tmp > 0xffff) {
 800f4a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f4a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f4ac:	d302      	bcc.n	800f4b4 <VL53L0X_calc_dmax+0xe4>
		minSignalNeeded_p3 = 0xfff00000;
 800f4ae:	4b54      	ldr	r3, [pc, #336]	; (800f600 <VL53L0X_calc_dmax+0x230>)
 800f4b0:	663b      	str	r3, [r7, #96]	; 0x60
 800f4b2:	e015      	b.n	800f4e0 <VL53L0X_calc_dmax+0x110>

		/* DMAX uses a different ambient width from sigma, so apply
		 * correction.
		 * Perform division before multiplication to prevent overflow.
		 */
		sigmaEstimateP2 = (sigmaEstimateP2 + cAmbEffWidthSigmaEst_ns/2)/
 800f4b4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f4b6:	085a      	lsrs	r2, r3, #1
 800f4b8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800f4ba:	441a      	add	r2, r3
 800f4bc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f4be:	fbb2 f3f3 	udiv	r3, r2, r3
 800f4c2:	677b      	str	r3, [r7, #116]	; 0x74
			cAmbEffWidthSigmaEst_ns;
		sigmaEstimateP2 *= cAmbEffWidthDMax_ns;
 800f4c4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800f4c6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f4c8:	fb02 f303 	mul.w	r3, r2, r3
 800f4cc:	677b      	str	r3, [r7, #116]	; 0x74

		/* FixPoint1616 >> 16 = uint32 */
		minSignalNeeded_p3 = (sigmaEstimateP2 + 0x8000) >> 16;
 800f4ce:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800f4d0:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800f4d4:	0c1b      	lsrs	r3, r3, #16
 800f4d6:	663b      	str	r3, [r7, #96]	; 0x60

		minSignalNeeded_p3 *= minSignalNeeded_p3;
 800f4d8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800f4da:	fb03 f303 	mul.w	r3, r3, r3
 800f4de:	663b      	str	r3, [r7, #96]	; 0x60

	}

	/* FixPoint1814 / uint32 = FixPoint1814 */
	sigmaLimitTmp = ((cSigmaLimit << 14) + 500) / 1000;
 800f4e0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f4e2:	039b      	lsls	r3, r3, #14
 800f4e4:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800f4e8:	4a46      	ldr	r2, [pc, #280]	; (800f604 <VL53L0X_calc_dmax+0x234>)
 800f4ea:	fba2 2303 	umull	r2, r3, r2, r3
 800f4ee:	099b      	lsrs	r3, r3, #6
 800f4f0:	627b      	str	r3, [r7, #36]	; 0x24

	/* FixPoint1814 * FixPoint1814 = FixPoint3628 := FixPoint0428 */
	sigmaLimitTmp *= sigmaLimitTmp;
 800f4f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f4f4:	fb03 f303 	mul.w	r3, r3, r3
 800f4f8:	627b      	str	r3, [r7, #36]	; 0x24

	/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
	sigmaEstSqTmp = cSigmaEstRef * cSigmaEstRef;
 800f4fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f4fc:	fb03 f303 	mul.w	r3, r3, r3
 800f500:	623b      	str	r3, [r7, #32]

	/* FixPoint3232 >> 4 = FixPoint0428 */
	sigmaEstSqTmp = (sigmaEstSqTmp + 0x08) >> 4;
 800f502:	6a3b      	ldr	r3, [r7, #32]
 800f504:	3308      	adds	r3, #8
 800f506:	091b      	lsrs	r3, r3, #4
 800f508:	623b      	str	r3, [r7, #32]

	/* FixPoint0428 - FixPoint0428	= FixPoint0428 */
	sigmaLimitTmp -=  sigmaEstSqTmp;
 800f50a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f50c:	6a3b      	ldr	r3, [r7, #32]
 800f50e:	1ad3      	subs	r3, r2, r3
 800f510:	627b      	str	r3, [r7, #36]	; 0x24

	/* uint32_t * FixPoint0428 = FixPoint0428 */
	minSignalNeeded_p4 = 4 * 12 * sigmaLimitTmp;
 800f512:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f514:	4613      	mov	r3, r2
 800f516:	005b      	lsls	r3, r3, #1
 800f518:	4413      	add	r3, r2
 800f51a:	011b      	lsls	r3, r3, #4
 800f51c:	61fb      	str	r3, [r7, #28]

	/* FixPoint0428 >> 14 = FixPoint1814 */
	minSignalNeeded_p4 = (minSignalNeeded_p4 + 0x2000) >> 14;
 800f51e:	69fb      	ldr	r3, [r7, #28]
 800f520:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800f524:	0b9b      	lsrs	r3, r3, #14
 800f526:	61fb      	str	r3, [r7, #28]

	/* uint32 + uint32 = uint32 */
	minSignalNeeded = (minSignalNeeded_p2 + minSignalNeeded_p3);
 800f528:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f52a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800f52c:	4413      	add	r3, r2
 800f52e:	61bb      	str	r3, [r7, #24]

	/* uint32 / uint32 = uint32 */
	minSignalNeeded += (peakVcselDuration_us/2);
 800f530:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800f532:	085b      	lsrs	r3, r3, #1
 800f534:	69ba      	ldr	r2, [r7, #24]
 800f536:	4413      	add	r3, r2
 800f538:	61bb      	str	r3, [r7, #24]
	minSignalNeeded /= peakVcselDuration_us;
 800f53a:	69ba      	ldr	r2, [r7, #24]
 800f53c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800f53e:	fbb2 f3f3 	udiv	r3, r2, r3
 800f542:	61bb      	str	r3, [r7, #24]

	/* uint32 << 14 = FixPoint1814 */
	minSignalNeeded <<= 14;
 800f544:	69bb      	ldr	r3, [r7, #24]
 800f546:	039b      	lsls	r3, r3, #14
 800f548:	61bb      	str	r3, [r7, #24]

	/* FixPoint1814 / FixPoint1814 = uint32 */
	minSignalNeeded += (minSignalNeeded_p4/2);
 800f54a:	69fb      	ldr	r3, [r7, #28]
 800f54c:	085b      	lsrs	r3, r3, #1
 800f54e:	69ba      	ldr	r2, [r7, #24]
 800f550:	4413      	add	r3, r2
 800f552:	61bb      	str	r3, [r7, #24]
	minSignalNeeded /= minSignalNeeded_p4;
 800f554:	69ba      	ldr	r2, [r7, #24]
 800f556:	69fb      	ldr	r3, [r7, #28]
 800f558:	fbb2 f3f3 	udiv	r3, r2, r3
 800f55c:	61bb      	str	r3, [r7, #24]

	/* FixPoint3200 * FixPoint2804 := FixPoint2804*/
	minSignalNeeded *= minSignalNeeded_p1;
 800f55e:	69bb      	ldr	r3, [r7, #24]
 800f560:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800f562:	fb02 f303 	mul.w	r3, r2, r3
 800f566:	61bb      	str	r3, [r7, #24]
	 * and 10E-22 on the denominator.
	 * We do this because 32bit fix point calculation can't
	 * handle the larger and smaller elements of this equation,
	 * i.e. speed of light and pulse widths.
	 */
	minSignalNeeded = (minSignalNeeded + 500) / 1000;
 800f568:	69bb      	ldr	r3, [r7, #24]
 800f56a:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800f56e:	4a25      	ldr	r2, [pc, #148]	; (800f604 <VL53L0X_calc_dmax+0x234>)
 800f570:	fba2 2303 	umull	r2, r3, r2, r3
 800f574:	099b      	lsrs	r3, r3, #6
 800f576:	61bb      	str	r3, [r7, #24]
	minSignalNeeded <<= 4;
 800f578:	69bb      	ldr	r3, [r7, #24]
 800f57a:	011b      	lsls	r3, r3, #4
 800f57c:	61bb      	str	r3, [r7, #24]

	minSignalNeeded = (minSignalNeeded + 500) / 1000;
 800f57e:	69bb      	ldr	r3, [r7, #24]
 800f580:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800f584:	4a1f      	ldr	r2, [pc, #124]	; (800f604 <VL53L0X_calc_dmax+0x234>)
 800f586:	fba2 2303 	umull	r2, r3, r2, r3
 800f58a:	099b      	lsrs	r3, r3, #6
 800f58c:	61bb      	str	r3, [r7, #24]

	/* FixPoint1616 >> 8 = FixPoint2408 */
	signalLimitTmp = (cSignalLimit + 0x80) >> 8;
 800f58e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f590:	3380      	adds	r3, #128	; 0x80
 800f592:	0a1b      	lsrs	r3, r3, #8
 800f594:	617b      	str	r3, [r7, #20]

	/* FixPoint2408/FixPoint2408 = uint32 */
	if (signalLimitTmp != 0)
 800f596:	697b      	ldr	r3, [r7, #20]
 800f598:	2b00      	cmp	r3, #0
 800f59a:	d008      	beq.n	800f5ae <VL53L0X_calc_dmax+0x1de>
		dmaxDarkTmp = (SignalAt0mm + (signalLimitTmp / 2))
 800f59c:	697b      	ldr	r3, [r7, #20]
 800f59e:	085a      	lsrs	r2, r3, #1
 800f5a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f5a2:	441a      	add	r2, r3
 800f5a4:	697b      	ldr	r3, [r7, #20]
 800f5a6:	fbb2 f3f3 	udiv	r3, r2, r3
 800f5aa:	65bb      	str	r3, [r7, #88]	; 0x58
 800f5ac:	e001      	b.n	800f5b2 <VL53L0X_calc_dmax+0x1e2>
			/ signalLimitTmp;
	else
		dmaxDarkTmp = 0;
 800f5ae:	2300      	movs	r3, #0
 800f5b0:	65bb      	str	r3, [r7, #88]	; 0x58

	dmaxDark = VL53L0X_isqrt(dmaxDarkTmp);
 800f5b2:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800f5b4:	f7fe f9ba 	bl	800d92c <VL53L0X_isqrt>
 800f5b8:	6138      	str	r0, [r7, #16]

	/* FixPoint2408/FixPoint2408 = uint32 */
	if (minSignalNeeded != 0)
 800f5ba:	69bb      	ldr	r3, [r7, #24]
 800f5bc:	2b00      	cmp	r3, #0
 800f5be:	d008      	beq.n	800f5d2 <VL53L0X_calc_dmax+0x202>
		dmaxAmbient = (SignalAt0mm + minSignalNeeded/2)
 800f5c0:	69bb      	ldr	r3, [r7, #24]
 800f5c2:	085a      	lsrs	r2, r3, #1
 800f5c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f5c6:	441a      	add	r2, r3
 800f5c8:	69bb      	ldr	r3, [r7, #24]
 800f5ca:	fbb2 f3f3 	udiv	r3, r2, r3
 800f5ce:	65fb      	str	r3, [r7, #92]	; 0x5c
 800f5d0:	e001      	b.n	800f5d6 <VL53L0X_calc_dmax+0x206>
			/ minSignalNeeded;
	else
		dmaxAmbient = 0;
 800f5d2:	2300      	movs	r3, #0
 800f5d4:	65fb      	str	r3, [r7, #92]	; 0x5c

	dmaxAmbient = VL53L0X_isqrt(dmaxAmbient);
 800f5d6:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 800f5d8:	f7fe f9a8 	bl	800d92c <VL53L0X_isqrt>
 800f5dc:	65f8      	str	r0, [r7, #92]	; 0x5c

	*pdmax_mm = dmaxDark;
 800f5de:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800f5e0:	693a      	ldr	r2, [r7, #16]
 800f5e2:	601a      	str	r2, [r3, #0]
	if (dmaxDark > dmaxAmbient)
 800f5e4:	693a      	ldr	r2, [r7, #16]
 800f5e6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f5e8:	429a      	cmp	r2, r3
 800f5ea:	d902      	bls.n	800f5f2 <VL53L0X_calc_dmax+0x222>
		*pdmax_mm = dmaxAmbient;
 800f5ec:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800f5ee:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800f5f0:	601a      	str	r2, [r3, #0]

	LOG_FUNCTION_END(Status);

	return Status;
 800f5f2:	f997 3043 	ldrsb.w	r3, [r7, #67]	; 0x43
}
 800f5f6:	4618      	mov	r0, r3
 800f5f8:	3768      	adds	r7, #104	; 0x68
 800f5fa:	46bd      	mov	sp, r7
 800f5fc:	bd80      	pop	{r7, pc}
 800f5fe:	bf00      	nop
 800f600:	fff00000 	.word	0xfff00000
 800f604:	10624dd3 	.word	0x10624dd3

0800f608 <VL53L0X_calc_sigma_estimate>:

VL53L0X_Error VL53L0X_calc_sigma_estimate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *pSigmaEstimate,
	uint32_t *pDmax_mm)
{
 800f608:	b580      	push	{r7, lr}
 800f60a:	b0b4      	sub	sp, #208	; 0xd0
 800f60c:	af04      	add	r7, sp, #16
 800f60e:	60f8      	str	r0, [r7, #12]
 800f610:	60b9      	str	r1, [r7, #8]
 800f612:	607a      	str	r2, [r7, #4]
 800f614:	603b      	str	r3, [r7, #0]
	/* Expressed in 100ths of a ns, i.e. centi-ns */
	const uint32_t cPulseEffectiveWidth_centi_ns   = 800;
 800f616:	f44f 7348 	mov.w	r3, #800	; 0x320
 800f61a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
	/* Expressed in 100ths of a ns, i.e. centi-ns */
	const uint32_t cAmbientEffectiveWidth_centi_ns = 600;
 800f61e:	f44f 7316 	mov.w	r3, #600	; 0x258
 800f622:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	const FixPoint1616_t cDfltFinalRangeIntegrationTimeMilliSecs	= 0x00190000; /* 25ms */
 800f626:	f44f 13c8 	mov.w	r3, #1638400	; 0x190000
 800f62a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
	const uint32_t cVcselPulseWidth_ps	= 4700; /* pico secs */
 800f62e:	f241 235c 	movw	r3, #4700	; 0x125c
 800f632:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	const FixPoint1616_t cSigmaEstMax	= 0x028F87AE;
 800f636:	4b9e      	ldr	r3, [pc, #632]	; (800f8b0 <VL53L0X_calc_sigma_estimate+0x2a8>)
 800f638:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
	const FixPoint1616_t cSigmaEstRtnMax	= 0xF000;
 800f63c:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 800f640:	67fb      	str	r3, [r7, #124]	; 0x7c
	const FixPoint1616_t cAmbToSignalRatioMax = 0xF0000000/
 800f642:	f04f 4270 	mov.w	r2, #4026531840	; 0xf0000000
 800f646:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800f64a:	fbb2 f3f3 	udiv	r3, r2, r3
 800f64e:	67bb      	str	r3, [r7, #120]	; 0x78
		cAmbientEffectiveWidth_centi_ns;
	/* Time Of Flight per mm (6.6 pico secs) */
	const FixPoint1616_t cTOF_per_mm_ps		= 0x0006999A;
 800f650:	4b98      	ldr	r3, [pc, #608]	; (800f8b4 <VL53L0X_calc_sigma_estimate+0x2ac>)
 800f652:	677b      	str	r3, [r7, #116]	; 0x74
	const uint32_t c16BitRoundingParam		= 0x00008000;
 800f654:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800f658:	673b      	str	r3, [r7, #112]	; 0x70
	const FixPoint1616_t cMaxXTalk_kcps		= 0x00320000;
 800f65a:	f44f 1348 	mov.w	r3, #3276800	; 0x320000
 800f65e:	66fb      	str	r3, [r7, #108]	; 0x6c
	const uint32_t cPllPeriod_ps			= 1655;
 800f660:	f240 6377 	movw	r3, #1655	; 0x677
 800f664:	66bb      	str	r3, [r7, #104]	; 0x68
	FixPoint1616_t xTalkCorrection;
	FixPoint1616_t ambientRate_kcps;
	FixPoint1616_t peakSignalRate_kcps;
	FixPoint1616_t xTalkCompRate_mcps;
	uint32_t xTalkCompRate_kcps;
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800f666:	2300      	movs	r3, #0
 800f668:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
	 * Estimates the range sigma
	 */

	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationRateMegaCps,
 800f66c:	68fb      	ldr	r3, [r7, #12]
 800f66e:	6a1b      	ldr	r3, [r3, #32]
 800f670:	617b      	str	r3, [r7, #20]
	 * We work in kcps rather than mcps as this helps keep within the
	 * confines of the 32 Fix1616 type.
	 */

	ambientRate_kcps =
		(pRangingMeasurementData->AmbientRateRtnMegaCps * 1000) >> 16;
 800f672:	68bb      	ldr	r3, [r7, #8]
 800f674:	691b      	ldr	r3, [r3, #16]
 800f676:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800f67a:	fb02 f303 	mul.w	r3, r2, r3
	ambientRate_kcps =
 800f67e:	0c1b      	lsrs	r3, r3, #16
 800f680:	667b      	str	r3, [r7, #100]	; 0x64

	correctedSignalRate_mcps =
 800f682:	68bb      	ldr	r3, [r7, #8]
 800f684:	68db      	ldr	r3, [r3, #12]
 800f686:	663b      	str	r3, [r7, #96]	; 0x60
		pRangingMeasurementData->SignalRateRtnMegaCps;


	Status = VL53L0X_get_total_signal_rate(
 800f688:	f107 0310 	add.w	r3, r7, #16
 800f68c:	461a      	mov	r2, r3
 800f68e:	68b9      	ldr	r1, [r7, #8]
 800f690:	68f8      	ldr	r0, [r7, #12]
 800f692:	f7ff fe78 	bl	800f386 <VL53L0X_get_total_signal_rate>
 800f696:	4603      	mov	r3, r0
 800f698:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
		Dev, pRangingMeasurementData, &totalSignalRate_mcps);
	Status = VL53L0X_get_total_xtalk_rate(
 800f69c:	f107 0314 	add.w	r3, r7, #20
 800f6a0:	461a      	mov	r2, r3
 800f6a2:	68b9      	ldr	r1, [r7, #8]
 800f6a4:	68f8      	ldr	r0, [r7, #12]
 800f6a6:	f7ff fe3f 	bl	800f328 <VL53L0X_get_total_xtalk_rate>
 800f6aa:	4603      	mov	r3, r0
 800f6ac:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f


	/* Signal rate measurement provided by device is the
	 * peak signal rate, not average.
	 */
	peakSignalRate_kcps = (totalSignalRate_mcps * 1000);
 800f6b0:	693b      	ldr	r3, [r7, #16]
 800f6b2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800f6b6:	fb02 f303 	mul.w	r3, r2, r3
 800f6ba:	65fb      	str	r3, [r7, #92]	; 0x5c
	peakSignalRate_kcps = (peakSignalRate_kcps + 0x8000) >> 16;
 800f6bc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f6be:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800f6c2:	0c1b      	lsrs	r3, r3, #16
 800f6c4:	65fb      	str	r3, [r7, #92]	; 0x5c

	xTalkCompRate_kcps = xTalkCompRate_mcps * 1000;
 800f6c6:	697b      	ldr	r3, [r7, #20]
 800f6c8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800f6cc:	fb02 f303 	mul.w	r3, r2, r3
 800f6d0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

	if (xTalkCompRate_kcps > cMaxXTalk_kcps)
 800f6d4:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 800f6d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f6da:	429a      	cmp	r2, r3
 800f6dc:	d902      	bls.n	800f6e4 <VL53L0X_calc_sigma_estimate+0xdc>
		xTalkCompRate_kcps = cMaxXTalk_kcps;
 800f6de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f6e0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

	if (Status == VL53L0X_ERROR_NONE) {
 800f6e4:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
 800f6e8:	2b00      	cmp	r3, #0
 800f6ea:	d168      	bne.n	800f7be <VL53L0X_calc_sigma_estimate+0x1b6>

		/* Calculate final range macro periods */
		finalRangeTimeoutMicroSecs = VL53L0X_GETDEVICESPECIFICPARAMETER(
 800f6ec:	68fb      	ldr	r3, [r7, #12]
 800f6ee:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800f6f2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
			Dev, FinalRangeTimeoutMicroSecs);

		finalRangeVcselPCLKS = VL53L0X_GETDEVICESPECIFICPARAMETER(
 800f6f6:	68fb      	ldr	r3, [r7, #12]
 800f6f8:	f893 30e0 	ldrb.w	r3, [r3, #224]	; 0xe0
 800f6fc:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
			Dev, FinalRangeVcselPulsePeriod);

		finalRangeMacroPCLKS = VL53L0X_calc_timeout_mclks(
 800f700:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 800f704:	461a      	mov	r2, r3
 800f706:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
 800f70a:	68f8      	ldr	r0, [r7, #12]
 800f70c:	f7fe feb2 	bl	800e474 <VL53L0X_calc_timeout_mclks>
 800f710:	6578      	str	r0, [r7, #84]	; 0x54
			Dev, finalRangeTimeoutMicroSecs, finalRangeVcselPCLKS);

		/* Calculate pre-range macro periods */
		preRangeTimeoutMicroSecs = VL53L0X_GETDEVICESPECIFICPARAMETER(
 800f712:	68fb      	ldr	r3, [r7, #12]
 800f714:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800f718:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
			Dev, PreRangeTimeoutMicroSecs);

		preRangeVcselPCLKS = VL53L0X_GETDEVICESPECIFICPARAMETER(
 800f71c:	68fb      	ldr	r3, [r7, #12]
 800f71e:	f893 30e8 	ldrb.w	r3, [r3, #232]	; 0xe8
 800f722:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
			Dev, PreRangeVcselPulsePeriod);

		preRangeMacroPCLKS = VL53L0X_calc_timeout_mclks(
 800f726:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 800f72a:	461a      	mov	r2, r3
 800f72c:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
 800f730:	68f8      	ldr	r0, [r7, #12]
 800f732:	f7fe fe9f 	bl	800e474 <VL53L0X_calc_timeout_mclks>
 800f736:	64f8      	str	r0, [r7, #76]	; 0x4c
			Dev, preRangeTimeoutMicroSecs, preRangeVcselPCLKS);

		vcselWidth = 3;
 800f738:	2303      	movs	r3, #3
 800f73a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
		if (finalRangeVcselPCLKS == 8)
 800f73e:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 800f742:	2b08      	cmp	r3, #8
 800f744:	d102      	bne.n	800f74c <VL53L0X_calc_sigma_estimate+0x144>
			vcselWidth = 2;
 800f746:	2302      	movs	r3, #2
 800f748:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98


		peakVcselDuration_us = vcselWidth * 2048 *
			(preRangeMacroPCLKS + finalRangeMacroPCLKS);
 800f74c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800f74e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f750:	4413      	add	r3, r2
		peakVcselDuration_us = vcselWidth * 2048 *
 800f752:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800f756:	fb02 f303 	mul.w	r3, r2, r3
 800f75a:	02db      	lsls	r3, r3, #11
 800f75c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
		peakVcselDuration_us = (peakVcselDuration_us + 500)/1000;
 800f760:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800f764:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800f768:	4a53      	ldr	r2, [pc, #332]	; (800f8b8 <VL53L0X_calc_sigma_estimate+0x2b0>)
 800f76a:	fba2 2303 	umull	r2, r3, r2, r3
 800f76e:	099b      	lsrs	r3, r3, #6
 800f770:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
		peakVcselDuration_us *= cPllPeriod_ps;
 800f774:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800f778:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800f77a:	fb02 f303 	mul.w	r3, r2, r3
 800f77e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
		peakVcselDuration_us = (peakVcselDuration_us + 500)/1000;
 800f782:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800f786:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800f78a:	4a4b      	ldr	r2, [pc, #300]	; (800f8b8 <VL53L0X_calc_sigma_estimate+0x2b0>)
 800f78c:	fba2 2303 	umull	r2, r3, r2, r3
 800f790:	099b      	lsrs	r3, r3, #6
 800f792:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

		/* Fix1616 >> 8 = Fix2408 */
		totalSignalRate_mcps = (totalSignalRate_mcps + 0x80) >> 8;
 800f796:	693b      	ldr	r3, [r7, #16]
 800f798:	3380      	adds	r3, #128	; 0x80
 800f79a:	0a1b      	lsrs	r3, r3, #8
 800f79c:	613b      	str	r3, [r7, #16]

		/* Fix2408 * uint32 = Fix2408 */
		vcselTotalEventsRtn = totalSignalRate_mcps *
 800f79e:	693a      	ldr	r2, [r7, #16]
 800f7a0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800f7a4:	fb02 f303 	mul.w	r3, r2, r3
 800f7a8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
			peakVcselDuration_us;

		/* Fix2408 >> 8 = uint32 */
		vcselTotalEventsRtn = (vcselTotalEventsRtn + 0x80) >> 8;
 800f7ac:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800f7b0:	3380      	adds	r3, #128	; 0x80
 800f7b2:	0a1b      	lsrs	r3, r3, #8
 800f7b4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

		/* Fix2408 << 8 = Fix1616 = */
		totalSignalRate_mcps <<= 8;
 800f7b8:	693b      	ldr	r3, [r7, #16]
 800f7ba:	021b      	lsls	r3, r3, #8
 800f7bc:	613b      	str	r3, [r7, #16]
	}

	if (Status != VL53L0X_ERROR_NONE) {
 800f7be:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
 800f7c2:	2b00      	cmp	r3, #0
 800f7c4:	d002      	beq.n	800f7cc <VL53L0X_calc_sigma_estimate+0x1c4>
		LOG_FUNCTION_END(Status);
		return Status;
 800f7c6:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
 800f7ca:	e15e      	b.n	800fa8a <VL53L0X_calc_sigma_estimate+0x482>
	}

	if (peakSignalRate_kcps == 0) {
 800f7cc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f7ce:	2b00      	cmp	r3, #0
 800f7d0:	d10c      	bne.n	800f7ec <VL53L0X_calc_sigma_estimate+0x1e4>
		*pSigmaEstimate = cSigmaEstMax;
 800f7d2:	687b      	ldr	r3, [r7, #4]
 800f7d4:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800f7d8:	601a      	str	r2, [r3, #0]
		PALDevDataSet(Dev, SigmaEstimate, cSigmaEstMax);
 800f7da:	68fb      	ldr	r3, [r7, #12]
 800f7dc:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800f7e0:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
		*pDmax_mm = 0;
 800f7e4:	683b      	ldr	r3, [r7, #0]
 800f7e6:	2200      	movs	r2, #0
 800f7e8:	601a      	str	r2, [r3, #0]
 800f7ea:	e14c      	b.n	800fa86 <VL53L0X_calc_sigma_estimate+0x47e>
	} else {
		if (vcselTotalEventsRtn < 1)
 800f7ec:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800f7f0:	2b00      	cmp	r3, #0
 800f7f2:	d102      	bne.n	800f7fa <VL53L0X_calc_sigma_estimate+0x1f2>
			vcselTotalEventsRtn = 1;
 800f7f4:	2301      	movs	r3, #1
 800f7f6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

		sigmaEstimateP1 = cPulseEffectiveWidth_centi_ns;
 800f7fa:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800f7fe:	64bb      	str	r3, [r7, #72]	; 0x48

		/* ((FixPoint1616 << 16)* uint32)/uint32 = FixPoint1616 */
		sigmaEstimateP2 = (ambientRate_kcps << 16)/peakSignalRate_kcps;
 800f800:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800f802:	041a      	lsls	r2, r3, #16
 800f804:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f806:	fbb2 f3f3 	udiv	r3, r2, r3
 800f80a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
		if (sigmaEstimateP2 > cAmbToSignalRatioMax) {
 800f80e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800f812:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800f814:	429a      	cmp	r2, r3
 800f816:	d902      	bls.n	800f81e <VL53L0X_calc_sigma_estimate+0x216>
			/* Clip to prevent overflow. Will ensure safe
			 * max result. */
			sigmaEstimateP2 = cAmbToSignalRatioMax;
 800f818:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800f81a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
		}
		sigmaEstimateP2 *= cAmbientEffectiveWidth_centi_ns;
 800f81e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800f822:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800f826:	fb02 f303 	mul.w	r3, r2, r3
 800f82a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

		sigmaEstimateP3 = 2 * VL53L0X_isqrt(vcselTotalEventsRtn * 12);
 800f82e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800f832:	4613      	mov	r3, r2
 800f834:	005b      	lsls	r3, r3, #1
 800f836:	4413      	add	r3, r2
 800f838:	009b      	lsls	r3, r3, #2
 800f83a:	4618      	mov	r0, r3
 800f83c:	f7fe f876 	bl	800d92c <VL53L0X_isqrt>
 800f840:	4603      	mov	r3, r0
 800f842:	005b      	lsls	r3, r3, #1
 800f844:	647b      	str	r3, [r7, #68]	; 0x44

		/* uint32 * FixPoint1616 = FixPoint1616 */
		deltaT_ps = pRangingMeasurementData->RangeMilliMeter *
 800f846:	68bb      	ldr	r3, [r7, #8]
 800f848:	891b      	ldrh	r3, [r3, #8]
 800f84a:	461a      	mov	r2, r3
 800f84c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800f84e:	fb02 f303 	mul.w	r3, r2, r3
 800f852:	643b      	str	r3, [r7, #64]	; 0x40
		 * (uint32 << 16) - FixPoint1616 = FixPoint1616.
		 * Divide result by 1000 to convert to mcps.
		 * 500 is added to ensure rounding when integer division
		 * truncates.
		 */
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 800f854:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f856:	041a      	lsls	r2, r3, #16
			2 * xTalkCompRate_kcps) + 500)/1000;
 800f858:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800f85c:	005b      	lsls	r3, r3, #1
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 800f85e:	1ad3      	subs	r3, r2, r3
			2 * xTalkCompRate_kcps) + 500)/1000;
 800f860:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 800f864:	4a14      	ldr	r2, [pc, #80]	; (800f8b8 <VL53L0X_calc_sigma_estimate+0x2b0>)
 800f866:	fba2 2303 	umull	r2, r3, r2, r3
 800f86a:	099b      	lsrs	r3, r3, #6
 800f86c:	63fb      	str	r3, [r7, #60]	; 0x3c

		/* vcselRate + xtalkCompRate */
		diff2_mcps = ((peakSignalRate_kcps << 16) + 500)/1000;
 800f86e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f870:	041b      	lsls	r3, r3, #16
 800f872:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800f876:	4a10      	ldr	r2, [pc, #64]	; (800f8b8 <VL53L0X_calc_sigma_estimate+0x2b0>)
 800f878:	fba2 2303 	umull	r2, r3, r2, r3
 800f87c:	099b      	lsrs	r3, r3, #6
 800f87e:	63bb      	str	r3, [r7, #56]	; 0x38

		/* Shift by 8 bits to increase resolution prior to the
		 * division */
		diff1_mcps <<= 8;
 800f880:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f882:	021b      	lsls	r3, r3, #8
 800f884:	63fb      	str	r3, [r7, #60]	; 0x3c

		/* FixPoint0824/FixPoint1616 = FixPoint2408 */
		xTalkCorrection	 = abs(diff1_mcps/diff2_mcps);
 800f886:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800f888:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f88a:	fbb2 f3f3 	udiv	r3, r2, r3
 800f88e:	2b00      	cmp	r3, #0
 800f890:	bfb8      	it	lt
 800f892:	425b      	neglt	r3, r3
 800f894:	637b      	str	r3, [r7, #52]	; 0x34

		/* FixPoint2408 << 8 = FixPoint1616 */
		xTalkCorrection <<= 8;
 800f896:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f898:	021b      	lsls	r3, r3, #8
 800f89a:	637b      	str	r3, [r7, #52]	; 0x34

		if(pRangingMeasurementData->RangeStatus != 0){
 800f89c:	68bb      	ldr	r3, [r7, #8]
 800f89e:	7e1b      	ldrb	r3, [r3, #24]
 800f8a0:	2b00      	cmp	r3, #0
 800f8a2:	d00b      	beq.n	800f8bc <VL53L0X_calc_sigma_estimate+0x2b4>
			pwMult = 1 << 16;
 800f8a4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800f8a8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800f8ac:	e033      	b.n	800f916 <VL53L0X_calc_sigma_estimate+0x30e>
 800f8ae:	bf00      	nop
 800f8b0:	028f87ae 	.word	0x028f87ae
 800f8b4:	0006999a 	.word	0x0006999a
 800f8b8:	10624dd3 	.word	0x10624dd3
		} else {
			/* FixPoint1616/uint32 = FixPoint1616 */
			pwMult = deltaT_ps/cVcselPulseWidth_ps; /* smaller than 1.0f */
 800f8bc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800f8be:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800f8c2:	fbb2 f3f3 	udiv	r3, r2, r3
 800f8c6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			/*
			 * FixPoint1616 * FixPoint1616 = FixPoint3232, however both
			 * values are small enough such that32 bits will not be
			 * exceeded.
			 */
			pwMult *= ((1 << 16) - xTalkCorrection);
 800f8ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f8cc:	f5c3 3280 	rsb	r2, r3, #65536	; 0x10000
 800f8d0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800f8d4:	fb02 f303 	mul.w	r3, r2, r3
 800f8d8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

			/* (FixPoint3232 >> 16) = FixPoint1616 */
			pwMult =  (pwMult + c16BitRoundingParam) >> 16;
 800f8dc:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800f8e0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800f8e2:	4413      	add	r3, r2
 800f8e4:	0c1b      	lsrs	r3, r3, #16
 800f8e6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

			/* FixPoint1616 + FixPoint1616 = FixPoint1616 */
			pwMult += (1 << 16);
 800f8ea:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800f8ee:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 800f8f2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			/*
			 * At this point the value will be 1.xx, therefore if we square
			 * the value this will exceed 32 bits. To address this perform
			 * a single shift to the right before the multiplication.
			 */
			pwMult >>= 1;
 800f8f6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800f8fa:	085b      	lsrs	r3, r3, #1
 800f8fc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			/* FixPoint1715 * FixPoint1715 = FixPoint3430 */
			pwMult = pwMult * pwMult;
 800f900:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800f904:	fb03 f303 	mul.w	r3, r3, r3
 800f908:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

			/* (FixPoint3430 >> 14) = Fix1616 */
			pwMult >>= 14;
 800f90c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800f910:	0b9b      	lsrs	r3, r3, #14
 800f912:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
		}

		/* FixPoint1616 * uint32 = FixPoint1616 */
		sqr1 = pwMult * sigmaEstimateP1;
 800f916:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800f91a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800f91c:	fb02 f303 	mul.w	r3, r2, r3
 800f920:	633b      	str	r3, [r7, #48]	; 0x30

		/* (FixPoint1616 >> 16) = FixPoint3200 */
		sqr1 = (sqr1 + 0x8000) >> 16;
 800f922:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f924:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800f928:	0c1b      	lsrs	r3, r3, #16
 800f92a:	633b      	str	r3, [r7, #48]	; 0x30

		/* FixPoint3200 * FixPoint3200 = FixPoint6400 */
		sqr1 *= sqr1;
 800f92c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f92e:	fb03 f303 	mul.w	r3, r3, r3
 800f932:	633b      	str	r3, [r7, #48]	; 0x30

		sqr2 = sigmaEstimateP2;
 800f934:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800f938:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* (FixPoint1616 >> 16) = FixPoint3200 */
		sqr2 = (sqr2 + 0x8000) >> 16;
 800f93a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f93c:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800f940:	0c1b      	lsrs	r3, r3, #16
 800f942:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* FixPoint3200 * FixPoint3200 = FixPoint6400 */
		sqr2 *= sqr2;
 800f944:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f946:	fb03 f303 	mul.w	r3, r3, r3
 800f94a:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* FixPoint64000 + FixPoint6400 = FixPoint6400 */
		sqrSum = sqr1 + sqr2;
 800f94c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f94e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f950:	4413      	add	r3, r2
 800f952:	62bb      	str	r3, [r7, #40]	; 0x28

		/* SQRT(FixPoin6400) = FixPoint3200 */
		sqrtResult_centi_ns = VL53L0X_isqrt(sqrSum);
 800f954:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f956:	f7fd ffe9 	bl	800d92c <VL53L0X_isqrt>
 800f95a:	6278      	str	r0, [r7, #36]	; 0x24

		/* (FixPoint3200 << 16) = FixPoint1616 */
		sqrtResult_centi_ns <<= 16;
 800f95c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f95e:	041b      	lsls	r3, r3, #16
 800f960:	627b      	str	r3, [r7, #36]	; 0x24
		/*
		 * Note that the Speed Of Light is expressed in um per 1E-10
		 * seconds (2997) Therefore to get mm/ns we have to divide by
		 * 10000
		 */
		sigmaEstRtn = (((sqrtResult_centi_ns+50)/100) /
 800f962:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f964:	3332      	adds	r3, #50	; 0x32
 800f966:	4a4b      	ldr	r2, [pc, #300]	; (800fa94 <VL53L0X_calc_sigma_estimate+0x48c>)
 800f968:	fba2 2303 	umull	r2, r3, r2, r3
 800f96c:	095a      	lsrs	r2, r3, #5
 800f96e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f970:	fbb2 f3f3 	udiv	r3, r2, r3
 800f974:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
				sigmaEstimateP3);
		sigmaEstRtn		 *= VL53L0X_SPEED_OF_LIGHT_IN_AIR;
 800f978:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800f97c:	f640 32b5 	movw	r2, #2997	; 0xbb5
 800f980:	fb02 f303 	mul.w	r3, r2, r3
 800f984:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

		/* Add 5000 before dividing by 10000 to ensure rounding. */
		sigmaEstRtn		 += 5000;
 800f988:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800f98c:	f241 3388 	movw	r3, #5000	; 0x1388
 800f990:	4413      	add	r3, r2
 800f992:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
		sigmaEstRtn		 /= 10000;
 800f996:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800f99a:	4a3f      	ldr	r2, [pc, #252]	; (800fa98 <VL53L0X_calc_sigma_estimate+0x490>)
 800f99c:	fba2 2303 	umull	r2, r3, r2, r3
 800f9a0:	0b5b      	lsrs	r3, r3, #13
 800f9a2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

		if (sigmaEstRtn > cSigmaEstRtnMax) {
 800f9a6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800f9aa:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800f9ac:	429a      	cmp	r2, r3
 800f9ae:	d902      	bls.n	800f9b6 <VL53L0X_calc_sigma_estimate+0x3ae>
			/* Clip to prevent overflow. Will ensure safe
			 * max result. */
			sigmaEstRtn = cSigmaEstRtnMax;
 800f9b0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800f9b2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
		}
		finalRangeIntegrationTimeMilliSecs =
			(finalRangeTimeoutMicroSecs + preRangeTimeoutMicroSecs + 500)/1000;
 800f9b6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800f9ba:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800f9be:	4413      	add	r3, r2
 800f9c0:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
		finalRangeIntegrationTimeMilliSecs =
 800f9c4:	4a35      	ldr	r2, [pc, #212]	; (800fa9c <VL53L0X_calc_sigma_estimate+0x494>)
 800f9c6:	fba2 2303 	umull	r2, r3, r2, r3
 800f9ca:	099b      	lsrs	r3, r3, #6
 800f9cc:	623b      	str	r3, [r7, #32]
		/* sigmaEstRef = 1mm * 25ms/final range integration time (inc pre-range)
		 * sqrt(FixPoint1616/int) = FixPoint2408)
		 */
		sigmaEstRef =
			VL53L0X_isqrt((cDfltFinalRangeIntegrationTimeMilliSecs +
				finalRangeIntegrationTimeMilliSecs/2)/
 800f9ce:	6a3b      	ldr	r3, [r7, #32]
 800f9d0:	085a      	lsrs	r2, r3, #1
			VL53L0X_isqrt((cDfltFinalRangeIntegrationTimeMilliSecs +
 800f9d2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800f9d6:	441a      	add	r2, r3
 800f9d8:	6a3b      	ldr	r3, [r7, #32]
 800f9da:	fbb2 f3f3 	udiv	r3, r2, r3
 800f9de:	4618      	mov	r0, r3
 800f9e0:	f7fd ffa4 	bl	800d92c <VL53L0X_isqrt>
 800f9e4:	61f8      	str	r0, [r7, #28]
				finalRangeIntegrationTimeMilliSecs);

		/* FixPoint2408 << 8 = FixPoint1616 */
		sigmaEstRef <<= 8;
 800f9e6:	69fb      	ldr	r3, [r7, #28]
 800f9e8:	021b      	lsls	r3, r3, #8
 800f9ea:	61fb      	str	r3, [r7, #28]
		sigmaEstRef = (sigmaEstRef + 500)/1000;
 800f9ec:	69fb      	ldr	r3, [r7, #28]
 800f9ee:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800f9f2:	4a2a      	ldr	r2, [pc, #168]	; (800fa9c <VL53L0X_calc_sigma_estimate+0x494>)
 800f9f4:	fba2 2303 	umull	r2, r3, r2, r3
 800f9f8:	099b      	lsrs	r3, r3, #6
 800f9fa:	61fb      	str	r3, [r7, #28]

		/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
		sqr1 = sigmaEstRtn * sigmaEstRtn;
 800f9fc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800fa00:	fb03 f303 	mul.w	r3, r3, r3
 800fa04:	633b      	str	r3, [r7, #48]	; 0x30
		/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
		sqr2 = sigmaEstRef * sigmaEstRef;
 800fa06:	69fb      	ldr	r3, [r7, #28]
 800fa08:	fb03 f303 	mul.w	r3, r3, r3
 800fa0c:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* sqrt(FixPoint3232) = FixPoint1616 */
		sqrtResult = VL53L0X_isqrt((sqr1 + sqr2));
 800fa0e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800fa10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fa12:	4413      	add	r3, r2
 800fa14:	4618      	mov	r0, r3
 800fa16:	f7fd ff89 	bl	800d92c <VL53L0X_isqrt>
 800fa1a:	61b8      	str	r0, [r7, #24]
		 * Note that the Shift by 4 bits increases resolution prior to
		 * the sqrt, therefore the result must be shifted by 2 bits to
		 * the right to revert back to the FixPoint1616 format.
		 */

		sigmaEstimate	 = 1000 * sqrtResult;
 800fa1c:	69bb      	ldr	r3, [r7, #24]
 800fa1e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800fa22:	fb02 f303 	mul.w	r3, r2, r3
 800fa26:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

		if ((peakSignalRate_kcps < 1) || (vcselTotalEventsRtn < 1) ||
 800fa2a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800fa2c:	2b00      	cmp	r3, #0
 800fa2e:	d009      	beq.n	800fa44 <VL53L0X_calc_sigma_estimate+0x43c>
 800fa30:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800fa34:	2b00      	cmp	r3, #0
 800fa36:	d005      	beq.n	800fa44 <VL53L0X_calc_sigma_estimate+0x43c>
 800fa38:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 800fa3c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800fa40:	429a      	cmp	r2, r3
 800fa42:	d903      	bls.n	800fa4c <VL53L0X_calc_sigma_estimate+0x444>
				(sigmaEstimate > cSigmaEstMax)) {
				sigmaEstimate = cSigmaEstMax;
 800fa44:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800fa48:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
		}

		*pSigmaEstimate = (uint32_t)(sigmaEstimate);
 800fa4c:	687b      	ldr	r3, [r7, #4]
 800fa4e:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 800fa52:	601a      	str	r2, [r3, #0]
		PALDevDataSet(Dev, SigmaEstimate, *pSigmaEstimate);
 800fa54:	687b      	ldr	r3, [r7, #4]
 800fa56:	681a      	ldr	r2, [r3, #0]
 800fa58:	68fb      	ldr	r3, [r7, #12]
 800fa5a:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
		Status = VL53L0X_calc_dmax(
 800fa5e:	6939      	ldr	r1, [r7, #16]
 800fa60:	683b      	ldr	r3, [r7, #0]
 800fa62:	9303      	str	r3, [sp, #12]
 800fa64:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800fa68:	9302      	str	r3, [sp, #8]
 800fa6a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800fa6e:	9301      	str	r3, [sp, #4]
 800fa70:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fa72:	9300      	str	r3, [sp, #0]
 800fa74:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800fa78:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800fa7a:	68f8      	ldr	r0, [r7, #12]
 800fa7c:	f7ff fca8 	bl	800f3d0 <VL53L0X_calc_dmax>
 800fa80:	4603      	mov	r3, r0
 800fa82:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
			peakVcselDuration_us,
			pDmax_mm);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800fa86:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
}
 800fa8a:	4618      	mov	r0, r3
 800fa8c:	37c0      	adds	r7, #192	; 0xc0
 800fa8e:	46bd      	mov	sp, r7
 800fa90:	bd80      	pop	{r7, pc}
 800fa92:	bf00      	nop
 800fa94:	51eb851f 	.word	0x51eb851f
 800fa98:	d1b71759 	.word	0xd1b71759
 800fa9c:	10624dd3 	.word	0x10624dd3

0800faa0 <VL53L0X_get_pal_range_status>:
		uint8_t DeviceRangeStatus,
		FixPoint1616_t SignalRate,
		uint16_t EffectiveSpadRtnCount,
		VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
		uint8_t *pPalRangeStatus)
{
 800faa0:	b580      	push	{r7, lr}
 800faa2:	b090      	sub	sp, #64	; 0x40
 800faa4:	af00      	add	r7, sp, #0
 800faa6:	60f8      	str	r0, [r7, #12]
 800faa8:	607a      	str	r2, [r7, #4]
 800faaa:	461a      	mov	r2, r3
 800faac:	460b      	mov	r3, r1
 800faae:	72fb      	strb	r3, [r7, #11]
 800fab0:	4613      	mov	r3, r2
 800fab2:	813b      	strh	r3, [r7, #8]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800fab4:	2300      	movs	r3, #0
 800fab6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	uint8_t NoneFlag;
	uint8_t SigmaLimitflag = 0;
 800faba:	2300      	movs	r3, #0
 800fabc:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
	uint8_t SignalRefClipflag = 0;
 800fac0:	2300      	movs	r3, #0
 800fac2:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
	uint8_t RangeIgnoreThresholdflag = 0;
 800fac6:	2300      	movs	r3, #0
 800fac8:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	uint8_t SigmaLimitCheckEnable = 0;
 800facc:	2300      	movs	r3, #0
 800face:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	uint8_t SignalRateFinalRangeLimitCheckEnable = 0;
 800fad2:	2300      	movs	r3, #0
 800fad4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
	uint8_t SignalRefClipLimitCheckEnable = 0;
 800fad8:	2300      	movs	r3, #0
 800fada:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
	uint8_t RangeIgnoreThresholdLimitCheckEnable = 0;
 800fade:	2300      	movs	r3, #0
 800fae0:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	FixPoint1616_t SigmaEstimate;
	FixPoint1616_t SigmaLimitValue;
	FixPoint1616_t SignalRefClipValue;
	FixPoint1616_t RangeIgnoreThresholdValue;
	FixPoint1616_t SignalRatePerSpad;
	uint8_t DeviceRangeStatusInternal = 0;
 800fae4:	2300      	movs	r3, #0
 800fae6:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
	uint16_t tmpWord = 0;
 800faea:	2300      	movs	r3, #0
 800faec:	82fb      	strh	r3, [r7, #22]
	uint8_t Temp8;
	uint32_t Dmax_mm = 0;
 800faee:	2300      	movs	r3, #0
 800faf0:	613b      	str	r3, [r7, #16]
	 * the value 11 in the DeviceRangeStatus.
	 * In addition, the SigmaEstimator is not included in the VL53L0X
	 * DeviceRangeStatus, this will be added in the PalRangeStatus.
	 */

	DeviceRangeStatusInternal = ((DeviceRangeStatus & 0x78) >> 3);
 800faf2:	7afb      	ldrb	r3, [r7, #11]
 800faf4:	10db      	asrs	r3, r3, #3
 800faf6:	b2db      	uxtb	r3, r3
 800faf8:	f003 030f 	and.w	r3, r3, #15
 800fafc:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32

	if (DeviceRangeStatusInternal == 0 ||
 800fb00:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800fb04:	2b00      	cmp	r3, #0
 800fb06:	d017      	beq.n	800fb38 <VL53L0X_get_pal_range_status+0x98>
 800fb08:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800fb0c:	2b05      	cmp	r3, #5
 800fb0e:	d013      	beq.n	800fb38 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 5 ||
 800fb10:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800fb14:	2b07      	cmp	r3, #7
 800fb16:	d00f      	beq.n	800fb38 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 7 ||
 800fb18:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800fb1c:	2b0c      	cmp	r3, #12
 800fb1e:	d00b      	beq.n	800fb38 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 12 ||
 800fb20:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800fb24:	2b0d      	cmp	r3, #13
 800fb26:	d007      	beq.n	800fb38 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 13 ||
 800fb28:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800fb2c:	2b0e      	cmp	r3, #14
 800fb2e:	d003      	beq.n	800fb38 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 14 ||
 800fb30:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800fb34:	2b0f      	cmp	r3, #15
 800fb36:	d103      	bne.n	800fb40 <VL53L0X_get_pal_range_status+0xa0>
		DeviceRangeStatusInternal == 15
			) {
		NoneFlag = 1;
 800fb38:	2301      	movs	r3, #1
 800fb3a:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 800fb3e:	e002      	b.n	800fb46 <VL53L0X_get_pal_range_status+0xa6>
	} else {
		NoneFlag = 0;
 800fb40:	2300      	movs	r3, #0
 800fb42:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e

	/*
	 * Check if Sigma limit is enabled, if yes then do comparison with limit
	 * value and put the result back into pPalRangeStatus.
	 */
	if (Status == VL53L0X_ERROR_NONE)
 800fb46:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800fb4a:	2b00      	cmp	r3, #0
 800fb4c:	d109      	bne.n	800fb62 <VL53L0X_get_pal_range_status+0xc2>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 800fb4e:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 800fb52:	461a      	mov	r2, r3
 800fb54:	2100      	movs	r1, #0
 800fb56:	68f8      	ldr	r0, [r7, #12]
 800fb58:	f7fc f9bc 	bl	800bed4 <VL53L0X_GetLimitCheckEnable>
 800fb5c:	4603      	mov	r3, r0
 800fb5e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
			&SigmaLimitCheckEnable);

	if ((SigmaLimitCheckEnable != 0) && (Status == VL53L0X_ERROR_NONE)) {
 800fb62:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800fb66:	2b00      	cmp	r3, #0
 800fb68:	d02e      	beq.n	800fbc8 <VL53L0X_get_pal_range_status+0x128>
 800fb6a:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800fb6e:	2b00      	cmp	r3, #0
 800fb70:	d12a      	bne.n	800fbc8 <VL53L0X_get_pal_range_status+0x128>
		/*
		* compute the Sigma and check with limit
		*/
		Status = VL53L0X_calc_sigma_estimate(
 800fb72:	f107 0310 	add.w	r3, r7, #16
 800fb76:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800fb7a:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800fb7c:	68f8      	ldr	r0, [r7, #12]
 800fb7e:	f7ff fd43 	bl	800f608 <VL53L0X_calc_sigma_estimate>
 800fb82:	4603      	mov	r3, r0
 800fb84:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			Dev,
			pRangingMeasurementData,
			&SigmaEstimate,
			&Dmax_mm);
		if (Status == VL53L0X_ERROR_NONE)
 800fb88:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800fb8c:	2b00      	cmp	r3, #0
 800fb8e:	d103      	bne.n	800fb98 <VL53L0X_get_pal_range_status+0xf8>
			pRangingMeasurementData->RangeDMaxMilliMeter = Dmax_mm;
 800fb90:	693b      	ldr	r3, [r7, #16]
 800fb92:	b29a      	uxth	r2, r3
 800fb94:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fb96:	815a      	strh	r2, [r3, #10]

		if (Status == VL53L0X_ERROR_NONE) {
 800fb98:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800fb9c:	2b00      	cmp	r3, #0
 800fb9e:	d113      	bne.n	800fbc8 <VL53L0X_get_pal_range_status+0x128>
			Status = VL53L0X_GetLimitCheckValue(Dev,
 800fba0:	f107 0320 	add.w	r3, r7, #32
 800fba4:	461a      	mov	r2, r3
 800fba6:	2100      	movs	r1, #0
 800fba8:	68f8      	ldr	r0, [r7, #12]
 800fbaa:	f7fc fa19 	bl	800bfe0 <VL53L0X_GetLimitCheckValue>
 800fbae:	4603      	mov	r3, r0
 800fbb0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				&SigmaLimitValue);

			if ((SigmaLimitValue > 0) &&
 800fbb4:	6a3b      	ldr	r3, [r7, #32]
 800fbb6:	2b00      	cmp	r3, #0
 800fbb8:	d006      	beq.n	800fbc8 <VL53L0X_get_pal_range_status+0x128>
				(SigmaEstimate > SigmaLimitValue))
 800fbba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fbbc:	6a3b      	ldr	r3, [r7, #32]
			if ((SigmaLimitValue > 0) &&
 800fbbe:	429a      	cmp	r2, r3
 800fbc0:	d902      	bls.n	800fbc8 <VL53L0X_get_pal_range_status+0x128>
					/* Limit Fail */
					SigmaLimitflag = 1;
 800fbc2:	2301      	movs	r3, #1
 800fbc4:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d

	/*
	 * Check if Signal ref clip limit is enabled, if yes then do comparison
	 * with limit value and put the result back into pPalRangeStatus.
	 */
	if (Status == VL53L0X_ERROR_NONE)
 800fbc8:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800fbcc:	2b00      	cmp	r3, #0
 800fbce:	d109      	bne.n	800fbe4 <VL53L0X_get_pal_range_status+0x144>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 800fbd0:	f107 0329 	add.w	r3, r7, #41	; 0x29
 800fbd4:	461a      	mov	r2, r3
 800fbd6:	2102      	movs	r1, #2
 800fbd8:	68f8      	ldr	r0, [r7, #12]
 800fbda:	f7fc f97b 	bl	800bed4 <VL53L0X_GetLimitCheckEnable>
 800fbde:	4603      	mov	r3, r0
 800fbe0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				&SignalRefClipLimitCheckEnable);

	if ((SignalRefClipLimitCheckEnable != 0) &&
 800fbe4:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 800fbe8:	2b00      	cmp	r3, #0
 800fbea:	d044      	beq.n	800fc76 <VL53L0X_get_pal_range_status+0x1d6>
 800fbec:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800fbf0:	2b00      	cmp	r3, #0
 800fbf2:	d140      	bne.n	800fc76 <VL53L0X_get_pal_range_status+0x1d6>
			(Status == VL53L0X_ERROR_NONE)) {

		Status = VL53L0X_GetLimitCheckValue(Dev,
 800fbf4:	f107 031c 	add.w	r3, r7, #28
 800fbf8:	461a      	mov	r2, r3
 800fbfa:	2102      	movs	r1, #2
 800fbfc:	68f8      	ldr	r0, [r7, #12]
 800fbfe:	f7fc f9ef 	bl	800bfe0 <VL53L0X_GetLimitCheckValue>
 800fc02:	4603      	mov	r3, r0
 800fc04:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				&SignalRefClipValue);

		/* Read LastSignalRefMcps from device */
		if (Status == VL53L0X_ERROR_NONE)
 800fc08:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800fc0c:	2b00      	cmp	r3, #0
 800fc0e:	d107      	bne.n	800fc20 <VL53L0X_get_pal_range_status+0x180>
			Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800fc10:	2201      	movs	r2, #1
 800fc12:	21ff      	movs	r1, #255	; 0xff
 800fc14:	68f8      	ldr	r0, [r7, #12]
 800fc16:	f000 f9bb 	bl	800ff90 <VL53L0X_WrByte>
 800fc1a:	4603      	mov	r3, r0
 800fc1c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

		if (Status == VL53L0X_ERROR_NONE)
 800fc20:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800fc24:	2b00      	cmp	r3, #0
 800fc26:	d109      	bne.n	800fc3c <VL53L0X_get_pal_range_status+0x19c>
			Status = VL53L0X_RdWord(Dev,
 800fc28:	f107 0316 	add.w	r3, r7, #22
 800fc2c:	461a      	mov	r2, r3
 800fc2e:	21b6      	movs	r1, #182	; 0xb6
 800fc30:	68f8      	ldr	r0, [r7, #12]
 800fc32:	f000 fa59 	bl	80100e8 <VL53L0X_RdWord>
 800fc36:	4603      	mov	r3, r0
 800fc38:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_REG_RESULT_PEAK_SIGNAL_RATE_REF,
				&tmpWord);

		if (Status == VL53L0X_ERROR_NONE)
 800fc3c:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800fc40:	2b00      	cmp	r3, #0
 800fc42:	d107      	bne.n	800fc54 <VL53L0X_get_pal_range_status+0x1b4>
			Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800fc44:	2200      	movs	r2, #0
 800fc46:	21ff      	movs	r1, #255	; 0xff
 800fc48:	68f8      	ldr	r0, [r7, #12]
 800fc4a:	f000 f9a1 	bl	800ff90 <VL53L0X_WrByte>
 800fc4e:	4603      	mov	r3, r0
 800fc50:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

		LastSignalRefMcps = VL53L0X_FIXPOINT97TOFIXPOINT1616(tmpWord);
 800fc54:	8afb      	ldrh	r3, [r7, #22]
 800fc56:	025b      	lsls	r3, r3, #9
 800fc58:	62fb      	str	r3, [r7, #44]	; 0x2c
		PALDevDataSet(Dev, LastSignalRefMcps, LastSignalRefMcps);
 800fc5a:	68fb      	ldr	r3, [r7, #12]
 800fc5c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800fc5e:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148

		if ((SignalRefClipValue > 0) &&
 800fc62:	69fb      	ldr	r3, [r7, #28]
 800fc64:	2b00      	cmp	r3, #0
 800fc66:	d006      	beq.n	800fc76 <VL53L0X_get_pal_range_status+0x1d6>
				(LastSignalRefMcps > SignalRefClipValue)) {
 800fc68:	69fb      	ldr	r3, [r7, #28]
		if ((SignalRefClipValue > 0) &&
 800fc6a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800fc6c:	429a      	cmp	r2, r3
 800fc6e:	d902      	bls.n	800fc76 <VL53L0X_get_pal_range_status+0x1d6>
			/* Limit Fail */
			SignalRefClipflag = 1;
 800fc70:	2301      	movs	r3, #1
 800fc72:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
	 * Check if Signal ref clip limit is enabled, if yes then do comparison
	 * with limit value and put the result back into pPalRangeStatus.
	 * EffectiveSpadRtnCount has a format 8.8
	 * If (Return signal rate < (1.5 x Xtalk x number of Spads)) : FAIL
	 */
	if (Status == VL53L0X_ERROR_NONE)
 800fc76:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800fc7a:	2b00      	cmp	r3, #0
 800fc7c:	d109      	bne.n	800fc92 <VL53L0X_get_pal_range_status+0x1f2>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 800fc7e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800fc82:	461a      	mov	r2, r3
 800fc84:	2103      	movs	r1, #3
 800fc86:	68f8      	ldr	r0, [r7, #12]
 800fc88:	f7fc f924 	bl	800bed4 <VL53L0X_GetLimitCheckEnable>
 800fc8c:	4603      	mov	r3, r0
 800fc8e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				&RangeIgnoreThresholdLimitCheckEnable);

	if ((RangeIgnoreThresholdLimitCheckEnable != 0) &&
 800fc92:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800fc96:	2b00      	cmp	r3, #0
 800fc98:	d023      	beq.n	800fce2 <VL53L0X_get_pal_range_status+0x242>
 800fc9a:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800fc9e:	2b00      	cmp	r3, #0
 800fca0:	d11f      	bne.n	800fce2 <VL53L0X_get_pal_range_status+0x242>
			(Status == VL53L0X_ERROR_NONE)) {

		/* Compute the signal rate per spad */
		if (EffectiveSpadRtnCount == 0) {
 800fca2:	893b      	ldrh	r3, [r7, #8]
 800fca4:	2b00      	cmp	r3, #0
 800fca6:	d102      	bne.n	800fcae <VL53L0X_get_pal_range_status+0x20e>
			SignalRatePerSpad = 0;
 800fca8:	2300      	movs	r3, #0
 800fcaa:	637b      	str	r3, [r7, #52]	; 0x34
 800fcac:	e005      	b.n	800fcba <VL53L0X_get_pal_range_status+0x21a>
		} else {
			SignalRatePerSpad = (FixPoint1616_t)((256 * SignalRate)
 800fcae:	687b      	ldr	r3, [r7, #4]
 800fcb0:	021a      	lsls	r2, r3, #8
 800fcb2:	893b      	ldrh	r3, [r7, #8]
 800fcb4:	fbb2 f3f3 	udiv	r3, r2, r3
 800fcb8:	637b      	str	r3, [r7, #52]	; 0x34
				/ EffectiveSpadRtnCount);
		}

		Status = VL53L0X_GetLimitCheckValue(Dev,
 800fcba:	f107 0318 	add.w	r3, r7, #24
 800fcbe:	461a      	mov	r2, r3
 800fcc0:	2103      	movs	r1, #3
 800fcc2:	68f8      	ldr	r0, [r7, #12]
 800fcc4:	f7fc f98c 	bl	800bfe0 <VL53L0X_GetLimitCheckValue>
 800fcc8:	4603      	mov	r3, r0
 800fcca:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				&RangeIgnoreThresholdValue);

		if ((RangeIgnoreThresholdValue > 0) &&
 800fcce:	69bb      	ldr	r3, [r7, #24]
 800fcd0:	2b00      	cmp	r3, #0
 800fcd2:	d006      	beq.n	800fce2 <VL53L0X_get_pal_range_status+0x242>
			(SignalRatePerSpad < RangeIgnoreThresholdValue)) {
 800fcd4:	69bb      	ldr	r3, [r7, #24]
		if ((RangeIgnoreThresholdValue > 0) &&
 800fcd6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800fcd8:	429a      	cmp	r2, r3
 800fcda:	d202      	bcs.n	800fce2 <VL53L0X_get_pal_range_status+0x242>
			/* Limit Fail add 2^6 to range status */
			RangeIgnoreThresholdflag = 1;
 800fcdc:	2301      	movs	r3, #1
 800fcde:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800fce2:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800fce6:	2b00      	cmp	r3, #0
 800fce8:	d14a      	bne.n	800fd80 <VL53L0X_get_pal_range_status+0x2e0>
		if (NoneFlag == 1) {
 800fcea:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800fcee:	2b01      	cmp	r3, #1
 800fcf0:	d103      	bne.n	800fcfa <VL53L0X_get_pal_range_status+0x25a>
			*pPalRangeStatus = 255;	 /* NONE */
 800fcf2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fcf4:	22ff      	movs	r2, #255	; 0xff
 800fcf6:	701a      	strb	r2, [r3, #0]
 800fcf8:	e042      	b.n	800fd80 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 1 ||
 800fcfa:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800fcfe:	2b01      	cmp	r3, #1
 800fd00:	d007      	beq.n	800fd12 <VL53L0X_get_pal_range_status+0x272>
 800fd02:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800fd06:	2b02      	cmp	r3, #2
 800fd08:	d003      	beq.n	800fd12 <VL53L0X_get_pal_range_status+0x272>
					DeviceRangeStatusInternal == 2 ||
 800fd0a:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800fd0e:	2b03      	cmp	r3, #3
 800fd10:	d103      	bne.n	800fd1a <VL53L0X_get_pal_range_status+0x27a>
					DeviceRangeStatusInternal == 3) {
			*pPalRangeStatus = 5; /* HW fail */
 800fd12:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fd14:	2205      	movs	r2, #5
 800fd16:	701a      	strb	r2, [r3, #0]
 800fd18:	e032      	b.n	800fd80 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 6 ||
 800fd1a:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800fd1e:	2b06      	cmp	r3, #6
 800fd20:	d003      	beq.n	800fd2a <VL53L0X_get_pal_range_status+0x28a>
 800fd22:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800fd26:	2b09      	cmp	r3, #9
 800fd28:	d103      	bne.n	800fd32 <VL53L0X_get_pal_range_status+0x292>
					DeviceRangeStatusInternal == 9) {
			*pPalRangeStatus = 4;  /* Phase fail */
 800fd2a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fd2c:	2204      	movs	r2, #4
 800fd2e:	701a      	strb	r2, [r3, #0]
 800fd30:	e026      	b.n	800fd80 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 8 ||
 800fd32:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800fd36:	2b08      	cmp	r3, #8
 800fd38:	d007      	beq.n	800fd4a <VL53L0X_get_pal_range_status+0x2aa>
 800fd3a:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800fd3e:	2b0a      	cmp	r3, #10
 800fd40:	d003      	beq.n	800fd4a <VL53L0X_get_pal_range_status+0x2aa>
					DeviceRangeStatusInternal == 10 ||
 800fd42:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800fd46:	2b01      	cmp	r3, #1
 800fd48:	d103      	bne.n	800fd52 <VL53L0X_get_pal_range_status+0x2b2>
					SignalRefClipflag == 1) {
			*pPalRangeStatus = 3;  /* Min range */
 800fd4a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fd4c:	2203      	movs	r2, #3
 800fd4e:	701a      	strb	r2, [r3, #0]
 800fd50:	e016      	b.n	800fd80 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 4 ||
 800fd52:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800fd56:	2b04      	cmp	r3, #4
 800fd58:	d003      	beq.n	800fd62 <VL53L0X_get_pal_range_status+0x2c2>
 800fd5a:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800fd5e:	2b01      	cmp	r3, #1
 800fd60:	d103      	bne.n	800fd6a <VL53L0X_get_pal_range_status+0x2ca>
					RangeIgnoreThresholdflag == 1) {
			*pPalRangeStatus = 2;  /* Signal Fail */
 800fd62:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fd64:	2202      	movs	r2, #2
 800fd66:	701a      	strb	r2, [r3, #0]
 800fd68:	e00a      	b.n	800fd80 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (SigmaLimitflag == 1) {
 800fd6a:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 800fd6e:	2b01      	cmp	r3, #1
 800fd70:	d103      	bne.n	800fd7a <VL53L0X_get_pal_range_status+0x2da>
			*pPalRangeStatus = 1;  /* Sigma	 Fail */
 800fd72:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fd74:	2201      	movs	r2, #1
 800fd76:	701a      	strb	r2, [r3, #0]
 800fd78:	e002      	b.n	800fd80 <VL53L0X_get_pal_range_status+0x2e0>
		} else {
			*pPalRangeStatus = 0; /* Range Valid */
 800fd7a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fd7c:	2200      	movs	r2, #0
 800fd7e:	701a      	strb	r2, [r3, #0]
		}
	}

	/* DMAX only relevant during range error */
	if (*pPalRangeStatus == 0)
 800fd80:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fd82:	781b      	ldrb	r3, [r3, #0]
 800fd84:	2b00      	cmp	r3, #0
 800fd86:	d102      	bne.n	800fd8e <VL53L0X_get_pal_range_status+0x2ee>
		pRangingMeasurementData->RangeDMaxMilliMeter = 0;
 800fd88:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fd8a:	2200      	movs	r2, #0
 800fd8c:	815a      	strh	r2, [r3, #10]

	/* fill the Limit Check Status */

	Status =  VL53L0X_GetLimitCheckEnable(Dev,
 800fd8e:	f107 032a 	add.w	r3, r7, #42	; 0x2a
 800fd92:	461a      	mov	r2, r3
 800fd94:	2101      	movs	r1, #1
 800fd96:	68f8      	ldr	r0, [r7, #12]
 800fd98:	f7fc f89c 	bl	800bed4 <VL53L0X_GetLimitCheckEnable>
 800fd9c:	4603      	mov	r3, r0
 800fd9e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
			&SignalRateFinalRangeLimitCheckEnable);

	if (Status == VL53L0X_ERROR_NONE) {
 800fda2:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800fda6:	2b00      	cmp	r3, #0
 800fda8:	d14f      	bne.n	800fe4a <VL53L0X_get_pal_range_status+0x3aa>
		if ((SigmaLimitCheckEnable == 0) || (SigmaLimitflag == 1))
 800fdaa:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800fdae:	2b00      	cmp	r3, #0
 800fdb0:	d003      	beq.n	800fdba <VL53L0X_get_pal_range_status+0x31a>
 800fdb2:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 800fdb6:	2b01      	cmp	r3, #1
 800fdb8:	d103      	bne.n	800fdc2 <VL53L0X_get_pal_range_status+0x322>
			Temp8 = 1;
 800fdba:	2301      	movs	r3, #1
 800fdbc:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800fdc0:	e002      	b.n	800fdc8 <VL53L0X_get_pal_range_status+0x328>
		else
			Temp8 = 0;
 800fdc2:	2300      	movs	r3, #0
 800fdc4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 800fdc8:	68fb      	ldr	r3, [r7, #12]
 800fdca:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 800fdce:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, Temp8);

		if ((DeviceRangeStatusInternal == 4) ||
 800fdd2:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800fdd6:	2b04      	cmp	r3, #4
 800fdd8:	d003      	beq.n	800fde2 <VL53L0X_get_pal_range_status+0x342>
				(SignalRateFinalRangeLimitCheckEnable == 0))
 800fdda:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
		if ((DeviceRangeStatusInternal == 4) ||
 800fdde:	2b00      	cmp	r3, #0
 800fde0:	d103      	bne.n	800fdea <VL53L0X_get_pal_range_status+0x34a>
			Temp8 = 1;
 800fde2:	2301      	movs	r3, #1
 800fde4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800fde8:	e002      	b.n	800fdf0 <VL53L0X_get_pal_range_status+0x350>
		else
			Temp8 = 0;
 800fdea:	2300      	movs	r3, #0
 800fdec:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 800fdf0:	68fb      	ldr	r3, [r7, #12]
 800fdf2:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 800fdf6:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
				VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
				Temp8);

		if ((SignalRefClipLimitCheckEnable == 0) ||
 800fdfa:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 800fdfe:	2b00      	cmp	r3, #0
 800fe00:	d003      	beq.n	800fe0a <VL53L0X_get_pal_range_status+0x36a>
 800fe02:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800fe06:	2b01      	cmp	r3, #1
 800fe08:	d103      	bne.n	800fe12 <VL53L0X_get_pal_range_status+0x372>
					(SignalRefClipflag == 1))
			Temp8 = 1;
 800fe0a:	2301      	movs	r3, #1
 800fe0c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800fe10:	e002      	b.n	800fe18 <VL53L0X_get_pal_range_status+0x378>
		else
			Temp8 = 0;
 800fe12:	2300      	movs	r3, #0
 800fe14:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 800fe18:	68fb      	ldr	r3, [r7, #12]
 800fe1a:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 800fe1e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, Temp8);

		if ((RangeIgnoreThresholdLimitCheckEnable == 0) ||
 800fe22:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800fe26:	2b00      	cmp	r3, #0
 800fe28:	d003      	beq.n	800fe32 <VL53L0X_get_pal_range_status+0x392>
 800fe2a:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800fe2e:	2b01      	cmp	r3, #1
 800fe30:	d103      	bne.n	800fe3a <VL53L0X_get_pal_range_status+0x39a>
				(RangeIgnoreThresholdflag == 1))
			Temp8 = 1;
 800fe32:	2301      	movs	r3, #1
 800fe34:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800fe38:	e002      	b.n	800fe40 <VL53L0X_get_pal_range_status+0x3a0>
		else
			Temp8 = 0;
 800fe3a:	2300      	movs	r3, #0
 800fe3c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 800fe40:	68fb      	ldr	r3, [r7, #12]
 800fe42:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 800fe46:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				Temp8);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800fe4a:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f

}
 800fe4e:	4618      	mov	r0, r3
 800fe50:	3740      	adds	r7, #64	; 0x40
 800fe52:	46bd      	mov	sp, r7
 800fe54:	bd80      	pop	{r7, pc}

0800fe56 <_I2CWrite>:
#endif


uint8_t _I2CBuffer[64];

int _I2CWrite(VL53L0X_DEV Dev, uint8_t *pdata, uint32_t count) {
 800fe56:	b580      	push	{r7, lr}
 800fe58:	b088      	sub	sp, #32
 800fe5a:	af02      	add	r7, sp, #8
 800fe5c:	60f8      	str	r0, [r7, #12]
 800fe5e:	60b9      	str	r1, [r7, #8]
 800fe60:	607a      	str	r2, [r7, #4]
    int status;
    int i2c_time_out = I2C_TIME_OUT_BASE+ count* I2C_TIME_OUT_BYTE;
 800fe62:	687b      	ldr	r3, [r7, #4]
 800fe64:	330a      	adds	r3, #10
 800fe66:	617b      	str	r3, [r7, #20]

    status = HAL_I2C_Master_Transmit(Dev->I2cHandle, Dev->I2cDevAddr, pdata, count, i2c_time_out);
 800fe68:	68fb      	ldr	r3, [r7, #12]
 800fe6a:	f8d3 015c 	ldr.w	r0, [r3, #348]	; 0x15c
 800fe6e:	68fb      	ldr	r3, [r7, #12]
 800fe70:	f893 3160 	ldrb.w	r3, [r3, #352]	; 0x160
 800fe74:	b299      	uxth	r1, r3
 800fe76:	687b      	ldr	r3, [r7, #4]
 800fe78:	b29a      	uxth	r2, r3
 800fe7a:	697b      	ldr	r3, [r7, #20]
 800fe7c:	9300      	str	r3, [sp, #0]
 800fe7e:	4613      	mov	r3, r2
 800fe80:	68ba      	ldr	r2, [r7, #8]
 800fe82:	f7f4 fa81 	bl	8004388 <HAL_I2C_Master_Transmit>
 800fe86:	4603      	mov	r3, r0
 800fe88:	613b      	str	r3, [r7, #16]
    if (status) {
        //VL6180x_ErrLog("I2C error 0x%x %d len", dev->I2cAddr, len);
        //XNUCLEO6180XA1_I2C1_Init(&hi2c1);
    }
    return status;
 800fe8a:	693b      	ldr	r3, [r7, #16]
}
 800fe8c:	4618      	mov	r0, r3
 800fe8e:	3718      	adds	r7, #24
 800fe90:	46bd      	mov	sp, r7
 800fe92:	bd80      	pop	{r7, pc}

0800fe94 <_I2CRead>:

int _I2CRead(VL53L0X_DEV Dev, uint8_t *pdata, uint32_t count) {
 800fe94:	b580      	push	{r7, lr}
 800fe96:	b088      	sub	sp, #32
 800fe98:	af02      	add	r7, sp, #8
 800fe9a:	60f8      	str	r0, [r7, #12]
 800fe9c:	60b9      	str	r1, [r7, #8]
 800fe9e:	607a      	str	r2, [r7, #4]
    int status;
    int i2c_time_out = I2C_TIME_OUT_BASE+ count* I2C_TIME_OUT_BYTE;
 800fea0:	687b      	ldr	r3, [r7, #4]
 800fea2:	330a      	adds	r3, #10
 800fea4:	617b      	str	r3, [r7, #20]

    status = HAL_I2C_Master_Receive(Dev->I2cHandle, Dev->I2cDevAddr|1, pdata, count, i2c_time_out);
 800fea6:	68fb      	ldr	r3, [r7, #12]
 800fea8:	f8d3 015c 	ldr.w	r0, [r3, #348]	; 0x15c
 800feac:	68fb      	ldr	r3, [r7, #12]
 800feae:	f893 3160 	ldrb.w	r3, [r3, #352]	; 0x160
 800feb2:	f043 0301 	orr.w	r3, r3, #1
 800feb6:	b2db      	uxtb	r3, r3
 800feb8:	b299      	uxth	r1, r3
 800feba:	687b      	ldr	r3, [r7, #4]
 800febc:	b29a      	uxth	r2, r3
 800febe:	697b      	ldr	r3, [r7, #20]
 800fec0:	9300      	str	r3, [sp, #0]
 800fec2:	4613      	mov	r3, r2
 800fec4:	68ba      	ldr	r2, [r7, #8]
 800fec6:	f7f4 fb53 	bl	8004570 <HAL_I2C_Master_Receive>
 800feca:	4603      	mov	r3, r0
 800fecc:	613b      	str	r3, [r7, #16]
    if (status) {
        //VL6180x_ErrLog("I2C error 0x%x %d len", dev->I2cAddr, len);
        //XNUCLEO6180XA1_I2C1_Init(&hi2c1);
    }
    return status;
 800fece:	693b      	ldr	r3, [r7, #16]
}
 800fed0:	4618      	mov	r0, r3
 800fed2:	3718      	adds	r7, #24
 800fed4:	46bd      	mov	sp, r7
 800fed6:	bd80      	pop	{r7, pc}

0800fed8 <VL53L0X_WriteMulti>:

// the ranging_sensor_comms.dll will take care of the page selection
VL53L0X_Error VL53L0X_WriteMulti(VL53L0X_DEV Dev, uint8_t index, uint8_t *pdata, uint32_t count) {
 800fed8:	b580      	push	{r7, lr}
 800feda:	b086      	sub	sp, #24
 800fedc:	af00      	add	r7, sp, #0
 800fede:	60f8      	str	r0, [r7, #12]
 800fee0:	607a      	str	r2, [r7, #4]
 800fee2:	603b      	str	r3, [r7, #0]
 800fee4:	460b      	mov	r3, r1
 800fee6:	72fb      	strb	r3, [r7, #11]
    int status_int;
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800fee8:	2300      	movs	r3, #0
 800feea:	75fb      	strb	r3, [r7, #23]
    if (count > sizeof(_I2CBuffer) - 1) {
 800feec:	683b      	ldr	r3, [r7, #0]
 800feee:	2b3f      	cmp	r3, #63	; 0x3f
 800fef0:	d902      	bls.n	800fef8 <VL53L0X_WriteMulti+0x20>
        return VL53L0X_ERROR_INVALID_PARAMS;
 800fef2:	f06f 0303 	mvn.w	r3, #3
 800fef6:	e016      	b.n	800ff26 <VL53L0X_WriteMulti+0x4e>
    }
    _I2CBuffer[0] = index;
 800fef8:	4a0d      	ldr	r2, [pc, #52]	; (800ff30 <VL53L0X_WriteMulti+0x58>)
 800fefa:	7afb      	ldrb	r3, [r7, #11]
 800fefc:	7013      	strb	r3, [r2, #0]
    memcpy(&_I2CBuffer[1], pdata, count);
 800fefe:	683a      	ldr	r2, [r7, #0]
 800ff00:	6879      	ldr	r1, [r7, #4]
 800ff02:	480c      	ldr	r0, [pc, #48]	; (800ff34 <VL53L0X_WriteMulti+0x5c>)
 800ff04:	f000 f99e 	bl	8010244 <memcpy>
    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, count + 1);
 800ff08:	683b      	ldr	r3, [r7, #0]
 800ff0a:	3301      	adds	r3, #1
 800ff0c:	461a      	mov	r2, r3
 800ff0e:	4908      	ldr	r1, [pc, #32]	; (800ff30 <VL53L0X_WriteMulti+0x58>)
 800ff10:	68f8      	ldr	r0, [r7, #12]
 800ff12:	f7ff ffa0 	bl	800fe56 <_I2CWrite>
 800ff16:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800ff18:	693b      	ldr	r3, [r7, #16]
 800ff1a:	2b00      	cmp	r3, #0
 800ff1c:	d001      	beq.n	800ff22 <VL53L0X_WriteMulti+0x4a>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800ff1e:	23ec      	movs	r3, #236	; 0xec
 800ff20:	75fb      	strb	r3, [r7, #23]
    }
    VL53L0X_PutI2cBus();
    return Status;
 800ff22:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800ff26:	4618      	mov	r0, r3
 800ff28:	3718      	adds	r7, #24
 800ff2a:	46bd      	mov	sp, r7
 800ff2c:	bd80      	pop	{r7, pc}
 800ff2e:	bf00      	nop
 800ff30:	20000728 	.word	0x20000728
 800ff34:	20000729 	.word	0x20000729

0800ff38 <VL53L0X_ReadMulti>:

// the ranging_sensor_comms.dll will take care of the page selection
VL53L0X_Error VL53L0X_ReadMulti(VL53L0X_DEV Dev, uint8_t index, uint8_t *pdata, uint32_t count) {
 800ff38:	b580      	push	{r7, lr}
 800ff3a:	b086      	sub	sp, #24
 800ff3c:	af00      	add	r7, sp, #0
 800ff3e:	60f8      	str	r0, [r7, #12]
 800ff40:	607a      	str	r2, [r7, #4]
 800ff42:	603b      	str	r3, [r7, #0]
 800ff44:	460b      	mov	r3, r1
 800ff46:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800ff48:	2300      	movs	r3, #0
 800ff4a:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;
    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 800ff4c:	f107 030b 	add.w	r3, r7, #11
 800ff50:	2201      	movs	r2, #1
 800ff52:	4619      	mov	r1, r3
 800ff54:	68f8      	ldr	r0, [r7, #12]
 800ff56:	f7ff ff7e 	bl	800fe56 <_I2CWrite>
 800ff5a:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800ff5c:	693b      	ldr	r3, [r7, #16]
 800ff5e:	2b00      	cmp	r3, #0
 800ff60:	d002      	beq.n	800ff68 <VL53L0X_ReadMulti+0x30>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800ff62:	23ec      	movs	r3, #236	; 0xec
 800ff64:	75fb      	strb	r3, [r7, #23]
        goto done;
 800ff66:	e00c      	b.n	800ff82 <VL53L0X_ReadMulti+0x4a>
    }
    status_int = _I2CRead(Dev, pdata, count);
 800ff68:	683a      	ldr	r2, [r7, #0]
 800ff6a:	6879      	ldr	r1, [r7, #4]
 800ff6c:	68f8      	ldr	r0, [r7, #12]
 800ff6e:	f7ff ff91 	bl	800fe94 <_I2CRead>
 800ff72:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800ff74:	693b      	ldr	r3, [r7, #16]
 800ff76:	2b00      	cmp	r3, #0
 800ff78:	d002      	beq.n	800ff80 <VL53L0X_ReadMulti+0x48>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800ff7a:	23ec      	movs	r3, #236	; 0xec
 800ff7c:	75fb      	strb	r3, [r7, #23]
 800ff7e:	e000      	b.n	800ff82 <VL53L0X_ReadMulti+0x4a>
    }
done:
 800ff80:	bf00      	nop
    VL53L0X_PutI2cBus();
    return Status;
 800ff82:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800ff86:	4618      	mov	r0, r3
 800ff88:	3718      	adds	r7, #24
 800ff8a:	46bd      	mov	sp, r7
 800ff8c:	bd80      	pop	{r7, pc}
	...

0800ff90 <VL53L0X_WrByte>:

VL53L0X_Error VL53L0X_WrByte(VL53L0X_DEV Dev, uint8_t index, uint8_t data) {
 800ff90:	b580      	push	{r7, lr}
 800ff92:	b084      	sub	sp, #16
 800ff94:	af00      	add	r7, sp, #0
 800ff96:	6078      	str	r0, [r7, #4]
 800ff98:	460b      	mov	r3, r1
 800ff9a:	70fb      	strb	r3, [r7, #3]
 800ff9c:	4613      	mov	r3, r2
 800ff9e:	70bb      	strb	r3, [r7, #2]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800ffa0:	2300      	movs	r3, #0
 800ffa2:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;

    _I2CBuffer[0] = index;
 800ffa4:	4a0b      	ldr	r2, [pc, #44]	; (800ffd4 <VL53L0X_WrByte+0x44>)
 800ffa6:	78fb      	ldrb	r3, [r7, #3]
 800ffa8:	7013      	strb	r3, [r2, #0]
    _I2CBuffer[1] = data;
 800ffaa:	4a0a      	ldr	r2, [pc, #40]	; (800ffd4 <VL53L0X_WrByte+0x44>)
 800ffac:	78bb      	ldrb	r3, [r7, #2]
 800ffae:	7053      	strb	r3, [r2, #1]

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 2);
 800ffb0:	2202      	movs	r2, #2
 800ffb2:	4908      	ldr	r1, [pc, #32]	; (800ffd4 <VL53L0X_WrByte+0x44>)
 800ffb4:	6878      	ldr	r0, [r7, #4]
 800ffb6:	f7ff ff4e 	bl	800fe56 <_I2CWrite>
 800ffba:	60b8      	str	r0, [r7, #8]
    if (status_int != 0) {
 800ffbc:	68bb      	ldr	r3, [r7, #8]
 800ffbe:	2b00      	cmp	r3, #0
 800ffc0:	d001      	beq.n	800ffc6 <VL53L0X_WrByte+0x36>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800ffc2:	23ec      	movs	r3, #236	; 0xec
 800ffc4:	73fb      	strb	r3, [r7, #15]
    }
    VL53L0X_PutI2cBus();
    return Status;
 800ffc6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800ffca:	4618      	mov	r0, r3
 800ffcc:	3710      	adds	r7, #16
 800ffce:	46bd      	mov	sp, r7
 800ffd0:	bd80      	pop	{r7, pc}
 800ffd2:	bf00      	nop
 800ffd4:	20000728 	.word	0x20000728

0800ffd8 <VL53L0X_WrWord>:

VL53L0X_Error VL53L0X_WrWord(VL53L0X_DEV Dev, uint8_t index, uint16_t data) {
 800ffd8:	b580      	push	{r7, lr}
 800ffda:	b084      	sub	sp, #16
 800ffdc:	af00      	add	r7, sp, #0
 800ffde:	6078      	str	r0, [r7, #4]
 800ffe0:	460b      	mov	r3, r1
 800ffe2:	70fb      	strb	r3, [r7, #3]
 800ffe4:	4613      	mov	r3, r2
 800ffe6:	803b      	strh	r3, [r7, #0]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800ffe8:	2300      	movs	r3, #0
 800ffea:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;

    _I2CBuffer[0] = index;
 800ffec:	4a0e      	ldr	r2, [pc, #56]	; (8010028 <VL53L0X_WrWord+0x50>)
 800ffee:	78fb      	ldrb	r3, [r7, #3]
 800fff0:	7013      	strb	r3, [r2, #0]
    _I2CBuffer[1] = data >> 8;
 800fff2:	883b      	ldrh	r3, [r7, #0]
 800fff4:	0a1b      	lsrs	r3, r3, #8
 800fff6:	b29b      	uxth	r3, r3
 800fff8:	b2da      	uxtb	r2, r3
 800fffa:	4b0b      	ldr	r3, [pc, #44]	; (8010028 <VL53L0X_WrWord+0x50>)
 800fffc:	705a      	strb	r2, [r3, #1]
    _I2CBuffer[2] = data & 0x00FF;
 800fffe:	883b      	ldrh	r3, [r7, #0]
 8010000:	b2da      	uxtb	r2, r3
 8010002:	4b09      	ldr	r3, [pc, #36]	; (8010028 <VL53L0X_WrWord+0x50>)
 8010004:	709a      	strb	r2, [r3, #2]

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 3);
 8010006:	2203      	movs	r2, #3
 8010008:	4907      	ldr	r1, [pc, #28]	; (8010028 <VL53L0X_WrWord+0x50>)
 801000a:	6878      	ldr	r0, [r7, #4]
 801000c:	f7ff ff23 	bl	800fe56 <_I2CWrite>
 8010010:	60b8      	str	r0, [r7, #8]
    if (status_int != 0) {
 8010012:	68bb      	ldr	r3, [r7, #8]
 8010014:	2b00      	cmp	r3, #0
 8010016:	d001      	beq.n	801001c <VL53L0X_WrWord+0x44>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8010018:	23ec      	movs	r3, #236	; 0xec
 801001a:	73fb      	strb	r3, [r7, #15]
    }
    VL53L0X_PutI2cBus();
    return Status;
 801001c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8010020:	4618      	mov	r0, r3
 8010022:	3710      	adds	r7, #16
 8010024:	46bd      	mov	sp, r7
 8010026:	bd80      	pop	{r7, pc}
 8010028:	20000728 	.word	0x20000728

0801002c <VL53L0X_UpdateByte>:
    }
    VL53L0X_PutI2cBus();
    return Status;
}

VL53L0X_Error VL53L0X_UpdateByte(VL53L0X_DEV Dev, uint8_t index, uint8_t AndData, uint8_t OrData) {
 801002c:	b580      	push	{r7, lr}
 801002e:	b084      	sub	sp, #16
 8010030:	af00      	add	r7, sp, #0
 8010032:	6078      	str	r0, [r7, #4]
 8010034:	4608      	mov	r0, r1
 8010036:	4611      	mov	r1, r2
 8010038:	461a      	mov	r2, r3
 801003a:	4603      	mov	r3, r0
 801003c:	70fb      	strb	r3, [r7, #3]
 801003e:	460b      	mov	r3, r1
 8010040:	70bb      	strb	r3, [r7, #2]
 8010042:	4613      	mov	r3, r2
 8010044:	707b      	strb	r3, [r7, #1]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8010046:	2300      	movs	r3, #0
 8010048:	73fb      	strb	r3, [r7, #15]
    uint8_t data;

    Status = VL53L0X_RdByte(Dev, index, &data);
 801004a:	f107 020e 	add.w	r2, r7, #14
 801004e:	78fb      	ldrb	r3, [r7, #3]
 8010050:	4619      	mov	r1, r3
 8010052:	6878      	ldr	r0, [r7, #4]
 8010054:	f000 f81e 	bl	8010094 <VL53L0X_RdByte>
 8010058:	4603      	mov	r3, r0
 801005a:	73fb      	strb	r3, [r7, #15]
    if (Status) {
 801005c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010060:	2b00      	cmp	r3, #0
 8010062:	d110      	bne.n	8010086 <VL53L0X_UpdateByte+0x5a>
        goto done;
    }
    data = (data & AndData) | OrData;
 8010064:	7bba      	ldrb	r2, [r7, #14]
 8010066:	78bb      	ldrb	r3, [r7, #2]
 8010068:	4013      	ands	r3, r2
 801006a:	b2da      	uxtb	r2, r3
 801006c:	787b      	ldrb	r3, [r7, #1]
 801006e:	4313      	orrs	r3, r2
 8010070:	b2db      	uxtb	r3, r3
 8010072:	73bb      	strb	r3, [r7, #14]
    Status = VL53L0X_WrByte(Dev, index, data);
 8010074:	7bba      	ldrb	r2, [r7, #14]
 8010076:	78fb      	ldrb	r3, [r7, #3]
 8010078:	4619      	mov	r1, r3
 801007a:	6878      	ldr	r0, [r7, #4]
 801007c:	f7ff ff88 	bl	800ff90 <VL53L0X_WrByte>
 8010080:	4603      	mov	r3, r0
 8010082:	73fb      	strb	r3, [r7, #15]
 8010084:	e000      	b.n	8010088 <VL53L0X_UpdateByte+0x5c>
        goto done;
 8010086:	bf00      	nop
done:
    return Status;
 8010088:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801008c:	4618      	mov	r0, r3
 801008e:	3710      	adds	r7, #16
 8010090:	46bd      	mov	sp, r7
 8010092:	bd80      	pop	{r7, pc}

08010094 <VL53L0X_RdByte>:

VL53L0X_Error VL53L0X_RdByte(VL53L0X_DEV Dev, uint8_t index, uint8_t *data) {
 8010094:	b580      	push	{r7, lr}
 8010096:	b086      	sub	sp, #24
 8010098:	af00      	add	r7, sp, #0
 801009a:	60f8      	str	r0, [r7, #12]
 801009c:	460b      	mov	r3, r1
 801009e:	607a      	str	r2, [r7, #4]
 80100a0:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80100a2:	2300      	movs	r3, #0
 80100a4:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 80100a6:	f107 030b 	add.w	r3, r7, #11
 80100aa:	2201      	movs	r2, #1
 80100ac:	4619      	mov	r1, r3
 80100ae:	68f8      	ldr	r0, [r7, #12]
 80100b0:	f7ff fed1 	bl	800fe56 <_I2CWrite>
 80100b4:	6138      	str	r0, [r7, #16]
    if( status_int ){
 80100b6:	693b      	ldr	r3, [r7, #16]
 80100b8:	2b00      	cmp	r3, #0
 80100ba:	d002      	beq.n	80100c2 <VL53L0X_RdByte+0x2e>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 80100bc:	23ec      	movs	r3, #236	; 0xec
 80100be:	75fb      	strb	r3, [r7, #23]
        goto done;
 80100c0:	e00c      	b.n	80100dc <VL53L0X_RdByte+0x48>
    }
    status_int = _I2CRead(Dev, data, 1);
 80100c2:	2201      	movs	r2, #1
 80100c4:	6879      	ldr	r1, [r7, #4]
 80100c6:	68f8      	ldr	r0, [r7, #12]
 80100c8:	f7ff fee4 	bl	800fe94 <_I2CRead>
 80100cc:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 80100ce:	693b      	ldr	r3, [r7, #16]
 80100d0:	2b00      	cmp	r3, #0
 80100d2:	d002      	beq.n	80100da <VL53L0X_RdByte+0x46>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 80100d4:	23ec      	movs	r3, #236	; 0xec
 80100d6:	75fb      	strb	r3, [r7, #23]
 80100d8:	e000      	b.n	80100dc <VL53L0X_RdByte+0x48>
    }
done:
 80100da:	bf00      	nop
    VL53L0X_PutI2cBus();
    return Status;
 80100dc:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80100e0:	4618      	mov	r0, r3
 80100e2:	3718      	adds	r7, #24
 80100e4:	46bd      	mov	sp, r7
 80100e6:	bd80      	pop	{r7, pc}

080100e8 <VL53L0X_RdWord>:

VL53L0X_Error VL53L0X_RdWord(VL53L0X_DEV Dev, uint8_t index, uint16_t *data) {
 80100e8:	b580      	push	{r7, lr}
 80100ea:	b086      	sub	sp, #24
 80100ec:	af00      	add	r7, sp, #0
 80100ee:	60f8      	str	r0, [r7, #12]
 80100f0:	460b      	mov	r3, r1
 80100f2:	607a      	str	r2, [r7, #4]
 80100f4:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80100f6:	2300      	movs	r3, #0
 80100f8:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 80100fa:	f107 030b 	add.w	r3, r7, #11
 80100fe:	2201      	movs	r2, #1
 8010100:	4619      	mov	r1, r3
 8010102:	68f8      	ldr	r0, [r7, #12]
 8010104:	f7ff fea7 	bl	800fe56 <_I2CWrite>
 8010108:	6138      	str	r0, [r7, #16]

    if( status_int ){
 801010a:	693b      	ldr	r3, [r7, #16]
 801010c:	2b00      	cmp	r3, #0
 801010e:	d002      	beq.n	8010116 <VL53L0X_RdWord+0x2e>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8010110:	23ec      	movs	r3, #236	; 0xec
 8010112:	75fb      	strb	r3, [r7, #23]
        goto done;
 8010114:	e017      	b.n	8010146 <VL53L0X_RdWord+0x5e>
    }
    status_int = _I2CRead(Dev, _I2CBuffer, 2);
 8010116:	2202      	movs	r2, #2
 8010118:	490e      	ldr	r1, [pc, #56]	; (8010154 <VL53L0X_RdWord+0x6c>)
 801011a:	68f8      	ldr	r0, [r7, #12]
 801011c:	f7ff feba 	bl	800fe94 <_I2CRead>
 8010120:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 8010122:	693b      	ldr	r3, [r7, #16]
 8010124:	2b00      	cmp	r3, #0
 8010126:	d002      	beq.n	801012e <VL53L0X_RdWord+0x46>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8010128:	23ec      	movs	r3, #236	; 0xec
 801012a:	75fb      	strb	r3, [r7, #23]
        goto done;
 801012c:	e00b      	b.n	8010146 <VL53L0X_RdWord+0x5e>
    }

    *data = ((uint16_t)_I2CBuffer[0]<<8) + (uint16_t)_I2CBuffer[1];
 801012e:	4b09      	ldr	r3, [pc, #36]	; (8010154 <VL53L0X_RdWord+0x6c>)
 8010130:	781b      	ldrb	r3, [r3, #0]
 8010132:	b29b      	uxth	r3, r3
 8010134:	021b      	lsls	r3, r3, #8
 8010136:	b29a      	uxth	r2, r3
 8010138:	4b06      	ldr	r3, [pc, #24]	; (8010154 <VL53L0X_RdWord+0x6c>)
 801013a:	785b      	ldrb	r3, [r3, #1]
 801013c:	b29b      	uxth	r3, r3
 801013e:	4413      	add	r3, r2
 8010140:	b29a      	uxth	r2, r3
 8010142:	687b      	ldr	r3, [r7, #4]
 8010144:	801a      	strh	r2, [r3, #0]
done:
    VL53L0X_PutI2cBus();
    return Status;
 8010146:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801014a:	4618      	mov	r0, r3
 801014c:	3718      	adds	r7, #24
 801014e:	46bd      	mov	sp, r7
 8010150:	bd80      	pop	{r7, pc}
 8010152:	bf00      	nop
 8010154:	20000728 	.word	0x20000728

08010158 <VL53L0X_RdDWord>:

VL53L0X_Error VL53L0X_RdDWord(VL53L0X_DEV Dev, uint8_t index, uint32_t *data) {
 8010158:	b580      	push	{r7, lr}
 801015a:	b086      	sub	sp, #24
 801015c:	af00      	add	r7, sp, #0
 801015e:	60f8      	str	r0, [r7, #12]
 8010160:	460b      	mov	r3, r1
 8010162:	607a      	str	r2, [r7, #4]
 8010164:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8010166:	2300      	movs	r3, #0
 8010168:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 801016a:	f107 030b 	add.w	r3, r7, #11
 801016e:	2201      	movs	r2, #1
 8010170:	4619      	mov	r1, r3
 8010172:	68f8      	ldr	r0, [r7, #12]
 8010174:	f7ff fe6f 	bl	800fe56 <_I2CWrite>
 8010178:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 801017a:	693b      	ldr	r3, [r7, #16]
 801017c:	2b00      	cmp	r3, #0
 801017e:	d002      	beq.n	8010186 <VL53L0X_RdDWord+0x2e>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8010180:	23ec      	movs	r3, #236	; 0xec
 8010182:	75fb      	strb	r3, [r7, #23]
        goto done;
 8010184:	e01b      	b.n	80101be <VL53L0X_RdDWord+0x66>
    }
    status_int = _I2CRead(Dev, _I2CBuffer, 4);
 8010186:	2204      	movs	r2, #4
 8010188:	4910      	ldr	r1, [pc, #64]	; (80101cc <VL53L0X_RdDWord+0x74>)
 801018a:	68f8      	ldr	r0, [r7, #12]
 801018c:	f7ff fe82 	bl	800fe94 <_I2CRead>
 8010190:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 8010192:	693b      	ldr	r3, [r7, #16]
 8010194:	2b00      	cmp	r3, #0
 8010196:	d002      	beq.n	801019e <VL53L0X_RdDWord+0x46>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8010198:	23ec      	movs	r3, #236	; 0xec
 801019a:	75fb      	strb	r3, [r7, #23]
        goto done;
 801019c:	e00f      	b.n	80101be <VL53L0X_RdDWord+0x66>
    }

    *data = ((uint32_t)_I2CBuffer[0]<<24) + ((uint32_t)_I2CBuffer[1]<<16) + ((uint32_t)_I2CBuffer[2]<<8) + (uint32_t)_I2CBuffer[3];
 801019e:	4b0b      	ldr	r3, [pc, #44]	; (80101cc <VL53L0X_RdDWord+0x74>)
 80101a0:	781b      	ldrb	r3, [r3, #0]
 80101a2:	061a      	lsls	r2, r3, #24
 80101a4:	4b09      	ldr	r3, [pc, #36]	; (80101cc <VL53L0X_RdDWord+0x74>)
 80101a6:	785b      	ldrb	r3, [r3, #1]
 80101a8:	041b      	lsls	r3, r3, #16
 80101aa:	441a      	add	r2, r3
 80101ac:	4b07      	ldr	r3, [pc, #28]	; (80101cc <VL53L0X_RdDWord+0x74>)
 80101ae:	789b      	ldrb	r3, [r3, #2]
 80101b0:	021b      	lsls	r3, r3, #8
 80101b2:	4413      	add	r3, r2
 80101b4:	4a05      	ldr	r2, [pc, #20]	; (80101cc <VL53L0X_RdDWord+0x74>)
 80101b6:	78d2      	ldrb	r2, [r2, #3]
 80101b8:	441a      	add	r2, r3
 80101ba:	687b      	ldr	r3, [r7, #4]
 80101bc:	601a      	str	r2, [r3, #0]

done:
    VL53L0X_PutI2cBus();
    return Status;
 80101be:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80101c2:	4618      	mov	r0, r3
 80101c4:	3718      	adds	r7, #24
 80101c6:	46bd      	mov	sp, r7
 80101c8:	bd80      	pop	{r7, pc}
 80101ca:	bf00      	nop
 80101cc:	20000728 	.word	0x20000728

080101d0 <VL53L0X_PollingDelay>:

VL53L0X_Error VL53L0X_PollingDelay(VL53L0X_DEV Dev) {
 80101d0:	b580      	push	{r7, lr}
 80101d2:	b084      	sub	sp, #16
 80101d4:	af00      	add	r7, sp, #0
 80101d6:	6078      	str	r0, [r7, #4]
    VL53L0X_Error status = VL53L0X_ERROR_NONE;
 80101d8:	2300      	movs	r3, #0
 80101da:	73fb      	strb	r3, [r7, #15]

    // do nothing
    VL53L0X_OsDelay();
 80101dc:	2002      	movs	r0, #2
 80101de:	f7f3 f9d9 	bl	8003594 <HAL_Delay>
    return status;
 80101e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80101e6:	4618      	mov	r0, r3
 80101e8:	3710      	adds	r7, #16
 80101ea:	46bd      	mov	sp, r7
 80101ec:	bd80      	pop	{r7, pc}
	...

080101f0 <__errno>:
 80101f0:	4b01      	ldr	r3, [pc, #4]	; (80101f8 <__errno+0x8>)
 80101f2:	6818      	ldr	r0, [r3, #0]
 80101f4:	4770      	bx	lr
 80101f6:	bf00      	nop
 80101f8:	200002c8 	.word	0x200002c8

080101fc <__libc_init_array>:
 80101fc:	b570      	push	{r4, r5, r6, lr}
 80101fe:	4d0d      	ldr	r5, [pc, #52]	; (8010234 <__libc_init_array+0x38>)
 8010200:	4c0d      	ldr	r4, [pc, #52]	; (8010238 <__libc_init_array+0x3c>)
 8010202:	1b64      	subs	r4, r4, r5
 8010204:	10a4      	asrs	r4, r4, #2
 8010206:	2600      	movs	r6, #0
 8010208:	42a6      	cmp	r6, r4
 801020a:	d109      	bne.n	8010220 <__libc_init_array+0x24>
 801020c:	4d0b      	ldr	r5, [pc, #44]	; (801023c <__libc_init_array+0x40>)
 801020e:	4c0c      	ldr	r4, [pc, #48]	; (8010240 <__libc_init_array+0x44>)
 8010210:	f005 f8d0 	bl	80153b4 <_init>
 8010214:	1b64      	subs	r4, r4, r5
 8010216:	10a4      	asrs	r4, r4, #2
 8010218:	2600      	movs	r6, #0
 801021a:	42a6      	cmp	r6, r4
 801021c:	d105      	bne.n	801022a <__libc_init_array+0x2e>
 801021e:	bd70      	pop	{r4, r5, r6, pc}
 8010220:	f855 3b04 	ldr.w	r3, [r5], #4
 8010224:	4798      	blx	r3
 8010226:	3601      	adds	r6, #1
 8010228:	e7ee      	b.n	8010208 <__libc_init_array+0xc>
 801022a:	f855 3b04 	ldr.w	r3, [r5], #4
 801022e:	4798      	blx	r3
 8010230:	3601      	adds	r6, #1
 8010232:	e7f2      	b.n	801021a <__libc_init_array+0x1e>
 8010234:	08015dc4 	.word	0x08015dc4
 8010238:	08015dc4 	.word	0x08015dc4
 801023c:	08015dc4 	.word	0x08015dc4
 8010240:	08015dc8 	.word	0x08015dc8

08010244 <memcpy>:
 8010244:	440a      	add	r2, r1
 8010246:	4291      	cmp	r1, r2
 8010248:	f100 33ff 	add.w	r3, r0, #4294967295
 801024c:	d100      	bne.n	8010250 <memcpy+0xc>
 801024e:	4770      	bx	lr
 8010250:	b510      	push	{r4, lr}
 8010252:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010256:	f803 4f01 	strb.w	r4, [r3, #1]!
 801025a:	4291      	cmp	r1, r2
 801025c:	d1f9      	bne.n	8010252 <memcpy+0xe>
 801025e:	bd10      	pop	{r4, pc}

08010260 <memset>:
 8010260:	4402      	add	r2, r0
 8010262:	4603      	mov	r3, r0
 8010264:	4293      	cmp	r3, r2
 8010266:	d100      	bne.n	801026a <memset+0xa>
 8010268:	4770      	bx	lr
 801026a:	f803 1b01 	strb.w	r1, [r3], #1
 801026e:	e7f9      	b.n	8010264 <memset+0x4>

08010270 <__cvt>:
 8010270:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8010274:	ec55 4b10 	vmov	r4, r5, d0
 8010278:	2d00      	cmp	r5, #0
 801027a:	460e      	mov	r6, r1
 801027c:	4619      	mov	r1, r3
 801027e:	462b      	mov	r3, r5
 8010280:	bfbb      	ittet	lt
 8010282:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8010286:	461d      	movlt	r5, r3
 8010288:	2300      	movge	r3, #0
 801028a:	232d      	movlt	r3, #45	; 0x2d
 801028c:	700b      	strb	r3, [r1, #0]
 801028e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010290:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8010294:	4691      	mov	r9, r2
 8010296:	f023 0820 	bic.w	r8, r3, #32
 801029a:	bfbc      	itt	lt
 801029c:	4622      	movlt	r2, r4
 801029e:	4614      	movlt	r4, r2
 80102a0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80102a4:	d005      	beq.n	80102b2 <__cvt+0x42>
 80102a6:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80102aa:	d100      	bne.n	80102ae <__cvt+0x3e>
 80102ac:	3601      	adds	r6, #1
 80102ae:	2102      	movs	r1, #2
 80102b0:	e000      	b.n	80102b4 <__cvt+0x44>
 80102b2:	2103      	movs	r1, #3
 80102b4:	ab03      	add	r3, sp, #12
 80102b6:	9301      	str	r3, [sp, #4]
 80102b8:	ab02      	add	r3, sp, #8
 80102ba:	9300      	str	r3, [sp, #0]
 80102bc:	ec45 4b10 	vmov	d0, r4, r5
 80102c0:	4653      	mov	r3, sl
 80102c2:	4632      	mov	r2, r6
 80102c4:	f001 fe60 	bl	8011f88 <_dtoa_r>
 80102c8:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80102cc:	4607      	mov	r7, r0
 80102ce:	d102      	bne.n	80102d6 <__cvt+0x66>
 80102d0:	f019 0f01 	tst.w	r9, #1
 80102d4:	d022      	beq.n	801031c <__cvt+0xac>
 80102d6:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80102da:	eb07 0906 	add.w	r9, r7, r6
 80102de:	d110      	bne.n	8010302 <__cvt+0x92>
 80102e0:	783b      	ldrb	r3, [r7, #0]
 80102e2:	2b30      	cmp	r3, #48	; 0x30
 80102e4:	d10a      	bne.n	80102fc <__cvt+0x8c>
 80102e6:	2200      	movs	r2, #0
 80102e8:	2300      	movs	r3, #0
 80102ea:	4620      	mov	r0, r4
 80102ec:	4629      	mov	r1, r5
 80102ee:	f7f0 fc0b 	bl	8000b08 <__aeabi_dcmpeq>
 80102f2:	b918      	cbnz	r0, 80102fc <__cvt+0x8c>
 80102f4:	f1c6 0601 	rsb	r6, r6, #1
 80102f8:	f8ca 6000 	str.w	r6, [sl]
 80102fc:	f8da 3000 	ldr.w	r3, [sl]
 8010300:	4499      	add	r9, r3
 8010302:	2200      	movs	r2, #0
 8010304:	2300      	movs	r3, #0
 8010306:	4620      	mov	r0, r4
 8010308:	4629      	mov	r1, r5
 801030a:	f7f0 fbfd 	bl	8000b08 <__aeabi_dcmpeq>
 801030e:	b108      	cbz	r0, 8010314 <__cvt+0xa4>
 8010310:	f8cd 900c 	str.w	r9, [sp, #12]
 8010314:	2230      	movs	r2, #48	; 0x30
 8010316:	9b03      	ldr	r3, [sp, #12]
 8010318:	454b      	cmp	r3, r9
 801031a:	d307      	bcc.n	801032c <__cvt+0xbc>
 801031c:	9b03      	ldr	r3, [sp, #12]
 801031e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8010320:	1bdb      	subs	r3, r3, r7
 8010322:	4638      	mov	r0, r7
 8010324:	6013      	str	r3, [r2, #0]
 8010326:	b004      	add	sp, #16
 8010328:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801032c:	1c59      	adds	r1, r3, #1
 801032e:	9103      	str	r1, [sp, #12]
 8010330:	701a      	strb	r2, [r3, #0]
 8010332:	e7f0      	b.n	8010316 <__cvt+0xa6>

08010334 <__exponent>:
 8010334:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8010336:	4603      	mov	r3, r0
 8010338:	2900      	cmp	r1, #0
 801033a:	bfb8      	it	lt
 801033c:	4249      	neglt	r1, r1
 801033e:	f803 2b02 	strb.w	r2, [r3], #2
 8010342:	bfb4      	ite	lt
 8010344:	222d      	movlt	r2, #45	; 0x2d
 8010346:	222b      	movge	r2, #43	; 0x2b
 8010348:	2909      	cmp	r1, #9
 801034a:	7042      	strb	r2, [r0, #1]
 801034c:	dd2a      	ble.n	80103a4 <__exponent+0x70>
 801034e:	f10d 0407 	add.w	r4, sp, #7
 8010352:	46a4      	mov	ip, r4
 8010354:	270a      	movs	r7, #10
 8010356:	46a6      	mov	lr, r4
 8010358:	460a      	mov	r2, r1
 801035a:	fb91 f6f7 	sdiv	r6, r1, r7
 801035e:	fb07 1516 	mls	r5, r7, r6, r1
 8010362:	3530      	adds	r5, #48	; 0x30
 8010364:	2a63      	cmp	r2, #99	; 0x63
 8010366:	f104 34ff 	add.w	r4, r4, #4294967295
 801036a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 801036e:	4631      	mov	r1, r6
 8010370:	dcf1      	bgt.n	8010356 <__exponent+0x22>
 8010372:	3130      	adds	r1, #48	; 0x30
 8010374:	f1ae 0502 	sub.w	r5, lr, #2
 8010378:	f804 1c01 	strb.w	r1, [r4, #-1]
 801037c:	1c44      	adds	r4, r0, #1
 801037e:	4629      	mov	r1, r5
 8010380:	4561      	cmp	r1, ip
 8010382:	d30a      	bcc.n	801039a <__exponent+0x66>
 8010384:	f10d 0209 	add.w	r2, sp, #9
 8010388:	eba2 020e 	sub.w	r2, r2, lr
 801038c:	4565      	cmp	r5, ip
 801038e:	bf88      	it	hi
 8010390:	2200      	movhi	r2, #0
 8010392:	4413      	add	r3, r2
 8010394:	1a18      	subs	r0, r3, r0
 8010396:	b003      	add	sp, #12
 8010398:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801039a:	f811 2b01 	ldrb.w	r2, [r1], #1
 801039e:	f804 2f01 	strb.w	r2, [r4, #1]!
 80103a2:	e7ed      	b.n	8010380 <__exponent+0x4c>
 80103a4:	2330      	movs	r3, #48	; 0x30
 80103a6:	3130      	adds	r1, #48	; 0x30
 80103a8:	7083      	strb	r3, [r0, #2]
 80103aa:	70c1      	strb	r1, [r0, #3]
 80103ac:	1d03      	adds	r3, r0, #4
 80103ae:	e7f1      	b.n	8010394 <__exponent+0x60>

080103b0 <_printf_float>:
 80103b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80103b4:	ed2d 8b02 	vpush	{d8}
 80103b8:	b08d      	sub	sp, #52	; 0x34
 80103ba:	460c      	mov	r4, r1
 80103bc:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80103c0:	4616      	mov	r6, r2
 80103c2:	461f      	mov	r7, r3
 80103c4:	4605      	mov	r5, r0
 80103c6:	f002 ff3d 	bl	8013244 <_localeconv_r>
 80103ca:	f8d0 a000 	ldr.w	sl, [r0]
 80103ce:	4650      	mov	r0, sl
 80103d0:	f7ef ff1e 	bl	8000210 <strlen>
 80103d4:	2300      	movs	r3, #0
 80103d6:	930a      	str	r3, [sp, #40]	; 0x28
 80103d8:	6823      	ldr	r3, [r4, #0]
 80103da:	9305      	str	r3, [sp, #20]
 80103dc:	f8d8 3000 	ldr.w	r3, [r8]
 80103e0:	f894 b018 	ldrb.w	fp, [r4, #24]
 80103e4:	3307      	adds	r3, #7
 80103e6:	f023 0307 	bic.w	r3, r3, #7
 80103ea:	f103 0208 	add.w	r2, r3, #8
 80103ee:	f8c8 2000 	str.w	r2, [r8]
 80103f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80103f6:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80103fa:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80103fe:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8010402:	9307      	str	r3, [sp, #28]
 8010404:	f8cd 8018 	str.w	r8, [sp, #24]
 8010408:	ee08 0a10 	vmov	s16, r0
 801040c:	4b9f      	ldr	r3, [pc, #636]	; (801068c <_printf_float+0x2dc>)
 801040e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8010412:	f04f 32ff 	mov.w	r2, #4294967295
 8010416:	f7f0 fba9 	bl	8000b6c <__aeabi_dcmpun>
 801041a:	bb88      	cbnz	r0, 8010480 <_printf_float+0xd0>
 801041c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8010420:	4b9a      	ldr	r3, [pc, #616]	; (801068c <_printf_float+0x2dc>)
 8010422:	f04f 32ff 	mov.w	r2, #4294967295
 8010426:	f7f0 fb83 	bl	8000b30 <__aeabi_dcmple>
 801042a:	bb48      	cbnz	r0, 8010480 <_printf_float+0xd0>
 801042c:	2200      	movs	r2, #0
 801042e:	2300      	movs	r3, #0
 8010430:	4640      	mov	r0, r8
 8010432:	4649      	mov	r1, r9
 8010434:	f7f0 fb72 	bl	8000b1c <__aeabi_dcmplt>
 8010438:	b110      	cbz	r0, 8010440 <_printf_float+0x90>
 801043a:	232d      	movs	r3, #45	; 0x2d
 801043c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010440:	4b93      	ldr	r3, [pc, #588]	; (8010690 <_printf_float+0x2e0>)
 8010442:	4894      	ldr	r0, [pc, #592]	; (8010694 <_printf_float+0x2e4>)
 8010444:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8010448:	bf94      	ite	ls
 801044a:	4698      	movls	r8, r3
 801044c:	4680      	movhi	r8, r0
 801044e:	2303      	movs	r3, #3
 8010450:	6123      	str	r3, [r4, #16]
 8010452:	9b05      	ldr	r3, [sp, #20]
 8010454:	f023 0204 	bic.w	r2, r3, #4
 8010458:	6022      	str	r2, [r4, #0]
 801045a:	f04f 0900 	mov.w	r9, #0
 801045e:	9700      	str	r7, [sp, #0]
 8010460:	4633      	mov	r3, r6
 8010462:	aa0b      	add	r2, sp, #44	; 0x2c
 8010464:	4621      	mov	r1, r4
 8010466:	4628      	mov	r0, r5
 8010468:	f000 f9d8 	bl	801081c <_printf_common>
 801046c:	3001      	adds	r0, #1
 801046e:	f040 8090 	bne.w	8010592 <_printf_float+0x1e2>
 8010472:	f04f 30ff 	mov.w	r0, #4294967295
 8010476:	b00d      	add	sp, #52	; 0x34
 8010478:	ecbd 8b02 	vpop	{d8}
 801047c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010480:	4642      	mov	r2, r8
 8010482:	464b      	mov	r3, r9
 8010484:	4640      	mov	r0, r8
 8010486:	4649      	mov	r1, r9
 8010488:	f7f0 fb70 	bl	8000b6c <__aeabi_dcmpun>
 801048c:	b140      	cbz	r0, 80104a0 <_printf_float+0xf0>
 801048e:	464b      	mov	r3, r9
 8010490:	2b00      	cmp	r3, #0
 8010492:	bfbc      	itt	lt
 8010494:	232d      	movlt	r3, #45	; 0x2d
 8010496:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 801049a:	487f      	ldr	r0, [pc, #508]	; (8010698 <_printf_float+0x2e8>)
 801049c:	4b7f      	ldr	r3, [pc, #508]	; (801069c <_printf_float+0x2ec>)
 801049e:	e7d1      	b.n	8010444 <_printf_float+0x94>
 80104a0:	6863      	ldr	r3, [r4, #4]
 80104a2:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80104a6:	9206      	str	r2, [sp, #24]
 80104a8:	1c5a      	adds	r2, r3, #1
 80104aa:	d13f      	bne.n	801052c <_printf_float+0x17c>
 80104ac:	2306      	movs	r3, #6
 80104ae:	6063      	str	r3, [r4, #4]
 80104b0:	9b05      	ldr	r3, [sp, #20]
 80104b2:	6861      	ldr	r1, [r4, #4]
 80104b4:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80104b8:	2300      	movs	r3, #0
 80104ba:	9303      	str	r3, [sp, #12]
 80104bc:	ab0a      	add	r3, sp, #40	; 0x28
 80104be:	e9cd b301 	strd	fp, r3, [sp, #4]
 80104c2:	ab09      	add	r3, sp, #36	; 0x24
 80104c4:	ec49 8b10 	vmov	d0, r8, r9
 80104c8:	9300      	str	r3, [sp, #0]
 80104ca:	6022      	str	r2, [r4, #0]
 80104cc:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80104d0:	4628      	mov	r0, r5
 80104d2:	f7ff fecd 	bl	8010270 <__cvt>
 80104d6:	9b06      	ldr	r3, [sp, #24]
 80104d8:	9909      	ldr	r1, [sp, #36]	; 0x24
 80104da:	2b47      	cmp	r3, #71	; 0x47
 80104dc:	4680      	mov	r8, r0
 80104de:	d108      	bne.n	80104f2 <_printf_float+0x142>
 80104e0:	1cc8      	adds	r0, r1, #3
 80104e2:	db02      	blt.n	80104ea <_printf_float+0x13a>
 80104e4:	6863      	ldr	r3, [r4, #4]
 80104e6:	4299      	cmp	r1, r3
 80104e8:	dd41      	ble.n	801056e <_printf_float+0x1be>
 80104ea:	f1ab 0b02 	sub.w	fp, fp, #2
 80104ee:	fa5f fb8b 	uxtb.w	fp, fp
 80104f2:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80104f6:	d820      	bhi.n	801053a <_printf_float+0x18a>
 80104f8:	3901      	subs	r1, #1
 80104fa:	465a      	mov	r2, fp
 80104fc:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8010500:	9109      	str	r1, [sp, #36]	; 0x24
 8010502:	f7ff ff17 	bl	8010334 <__exponent>
 8010506:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010508:	1813      	adds	r3, r2, r0
 801050a:	2a01      	cmp	r2, #1
 801050c:	4681      	mov	r9, r0
 801050e:	6123      	str	r3, [r4, #16]
 8010510:	dc02      	bgt.n	8010518 <_printf_float+0x168>
 8010512:	6822      	ldr	r2, [r4, #0]
 8010514:	07d2      	lsls	r2, r2, #31
 8010516:	d501      	bpl.n	801051c <_printf_float+0x16c>
 8010518:	3301      	adds	r3, #1
 801051a:	6123      	str	r3, [r4, #16]
 801051c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8010520:	2b00      	cmp	r3, #0
 8010522:	d09c      	beq.n	801045e <_printf_float+0xae>
 8010524:	232d      	movs	r3, #45	; 0x2d
 8010526:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801052a:	e798      	b.n	801045e <_printf_float+0xae>
 801052c:	9a06      	ldr	r2, [sp, #24]
 801052e:	2a47      	cmp	r2, #71	; 0x47
 8010530:	d1be      	bne.n	80104b0 <_printf_float+0x100>
 8010532:	2b00      	cmp	r3, #0
 8010534:	d1bc      	bne.n	80104b0 <_printf_float+0x100>
 8010536:	2301      	movs	r3, #1
 8010538:	e7b9      	b.n	80104ae <_printf_float+0xfe>
 801053a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 801053e:	d118      	bne.n	8010572 <_printf_float+0x1c2>
 8010540:	2900      	cmp	r1, #0
 8010542:	6863      	ldr	r3, [r4, #4]
 8010544:	dd0b      	ble.n	801055e <_printf_float+0x1ae>
 8010546:	6121      	str	r1, [r4, #16]
 8010548:	b913      	cbnz	r3, 8010550 <_printf_float+0x1a0>
 801054a:	6822      	ldr	r2, [r4, #0]
 801054c:	07d0      	lsls	r0, r2, #31
 801054e:	d502      	bpl.n	8010556 <_printf_float+0x1a6>
 8010550:	3301      	adds	r3, #1
 8010552:	440b      	add	r3, r1
 8010554:	6123      	str	r3, [r4, #16]
 8010556:	65a1      	str	r1, [r4, #88]	; 0x58
 8010558:	f04f 0900 	mov.w	r9, #0
 801055c:	e7de      	b.n	801051c <_printf_float+0x16c>
 801055e:	b913      	cbnz	r3, 8010566 <_printf_float+0x1b6>
 8010560:	6822      	ldr	r2, [r4, #0]
 8010562:	07d2      	lsls	r2, r2, #31
 8010564:	d501      	bpl.n	801056a <_printf_float+0x1ba>
 8010566:	3302      	adds	r3, #2
 8010568:	e7f4      	b.n	8010554 <_printf_float+0x1a4>
 801056a:	2301      	movs	r3, #1
 801056c:	e7f2      	b.n	8010554 <_printf_float+0x1a4>
 801056e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8010572:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010574:	4299      	cmp	r1, r3
 8010576:	db05      	blt.n	8010584 <_printf_float+0x1d4>
 8010578:	6823      	ldr	r3, [r4, #0]
 801057a:	6121      	str	r1, [r4, #16]
 801057c:	07d8      	lsls	r0, r3, #31
 801057e:	d5ea      	bpl.n	8010556 <_printf_float+0x1a6>
 8010580:	1c4b      	adds	r3, r1, #1
 8010582:	e7e7      	b.n	8010554 <_printf_float+0x1a4>
 8010584:	2900      	cmp	r1, #0
 8010586:	bfd4      	ite	le
 8010588:	f1c1 0202 	rsble	r2, r1, #2
 801058c:	2201      	movgt	r2, #1
 801058e:	4413      	add	r3, r2
 8010590:	e7e0      	b.n	8010554 <_printf_float+0x1a4>
 8010592:	6823      	ldr	r3, [r4, #0]
 8010594:	055a      	lsls	r2, r3, #21
 8010596:	d407      	bmi.n	80105a8 <_printf_float+0x1f8>
 8010598:	6923      	ldr	r3, [r4, #16]
 801059a:	4642      	mov	r2, r8
 801059c:	4631      	mov	r1, r6
 801059e:	4628      	mov	r0, r5
 80105a0:	47b8      	blx	r7
 80105a2:	3001      	adds	r0, #1
 80105a4:	d12c      	bne.n	8010600 <_printf_float+0x250>
 80105a6:	e764      	b.n	8010472 <_printf_float+0xc2>
 80105a8:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80105ac:	f240 80e0 	bls.w	8010770 <_printf_float+0x3c0>
 80105b0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80105b4:	2200      	movs	r2, #0
 80105b6:	2300      	movs	r3, #0
 80105b8:	f7f0 faa6 	bl	8000b08 <__aeabi_dcmpeq>
 80105bc:	2800      	cmp	r0, #0
 80105be:	d034      	beq.n	801062a <_printf_float+0x27a>
 80105c0:	4a37      	ldr	r2, [pc, #220]	; (80106a0 <_printf_float+0x2f0>)
 80105c2:	2301      	movs	r3, #1
 80105c4:	4631      	mov	r1, r6
 80105c6:	4628      	mov	r0, r5
 80105c8:	47b8      	blx	r7
 80105ca:	3001      	adds	r0, #1
 80105cc:	f43f af51 	beq.w	8010472 <_printf_float+0xc2>
 80105d0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80105d4:	429a      	cmp	r2, r3
 80105d6:	db02      	blt.n	80105de <_printf_float+0x22e>
 80105d8:	6823      	ldr	r3, [r4, #0]
 80105da:	07d8      	lsls	r0, r3, #31
 80105dc:	d510      	bpl.n	8010600 <_printf_float+0x250>
 80105de:	ee18 3a10 	vmov	r3, s16
 80105e2:	4652      	mov	r2, sl
 80105e4:	4631      	mov	r1, r6
 80105e6:	4628      	mov	r0, r5
 80105e8:	47b8      	blx	r7
 80105ea:	3001      	adds	r0, #1
 80105ec:	f43f af41 	beq.w	8010472 <_printf_float+0xc2>
 80105f0:	f04f 0800 	mov.w	r8, #0
 80105f4:	f104 091a 	add.w	r9, r4, #26
 80105f8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80105fa:	3b01      	subs	r3, #1
 80105fc:	4543      	cmp	r3, r8
 80105fe:	dc09      	bgt.n	8010614 <_printf_float+0x264>
 8010600:	6823      	ldr	r3, [r4, #0]
 8010602:	079b      	lsls	r3, r3, #30
 8010604:	f100 8105 	bmi.w	8010812 <_printf_float+0x462>
 8010608:	68e0      	ldr	r0, [r4, #12]
 801060a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801060c:	4298      	cmp	r0, r3
 801060e:	bfb8      	it	lt
 8010610:	4618      	movlt	r0, r3
 8010612:	e730      	b.n	8010476 <_printf_float+0xc6>
 8010614:	2301      	movs	r3, #1
 8010616:	464a      	mov	r2, r9
 8010618:	4631      	mov	r1, r6
 801061a:	4628      	mov	r0, r5
 801061c:	47b8      	blx	r7
 801061e:	3001      	adds	r0, #1
 8010620:	f43f af27 	beq.w	8010472 <_printf_float+0xc2>
 8010624:	f108 0801 	add.w	r8, r8, #1
 8010628:	e7e6      	b.n	80105f8 <_printf_float+0x248>
 801062a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801062c:	2b00      	cmp	r3, #0
 801062e:	dc39      	bgt.n	80106a4 <_printf_float+0x2f4>
 8010630:	4a1b      	ldr	r2, [pc, #108]	; (80106a0 <_printf_float+0x2f0>)
 8010632:	2301      	movs	r3, #1
 8010634:	4631      	mov	r1, r6
 8010636:	4628      	mov	r0, r5
 8010638:	47b8      	blx	r7
 801063a:	3001      	adds	r0, #1
 801063c:	f43f af19 	beq.w	8010472 <_printf_float+0xc2>
 8010640:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8010644:	4313      	orrs	r3, r2
 8010646:	d102      	bne.n	801064e <_printf_float+0x29e>
 8010648:	6823      	ldr	r3, [r4, #0]
 801064a:	07d9      	lsls	r1, r3, #31
 801064c:	d5d8      	bpl.n	8010600 <_printf_float+0x250>
 801064e:	ee18 3a10 	vmov	r3, s16
 8010652:	4652      	mov	r2, sl
 8010654:	4631      	mov	r1, r6
 8010656:	4628      	mov	r0, r5
 8010658:	47b8      	blx	r7
 801065a:	3001      	adds	r0, #1
 801065c:	f43f af09 	beq.w	8010472 <_printf_float+0xc2>
 8010660:	f04f 0900 	mov.w	r9, #0
 8010664:	f104 0a1a 	add.w	sl, r4, #26
 8010668:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801066a:	425b      	negs	r3, r3
 801066c:	454b      	cmp	r3, r9
 801066e:	dc01      	bgt.n	8010674 <_printf_float+0x2c4>
 8010670:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010672:	e792      	b.n	801059a <_printf_float+0x1ea>
 8010674:	2301      	movs	r3, #1
 8010676:	4652      	mov	r2, sl
 8010678:	4631      	mov	r1, r6
 801067a:	4628      	mov	r0, r5
 801067c:	47b8      	blx	r7
 801067e:	3001      	adds	r0, #1
 8010680:	f43f aef7 	beq.w	8010472 <_printf_float+0xc2>
 8010684:	f109 0901 	add.w	r9, r9, #1
 8010688:	e7ee      	b.n	8010668 <_printf_float+0x2b8>
 801068a:	bf00      	nop
 801068c:	7fefffff 	.word	0x7fefffff
 8010690:	08015904 	.word	0x08015904
 8010694:	08015908 	.word	0x08015908
 8010698:	08015910 	.word	0x08015910
 801069c:	0801590c 	.word	0x0801590c
 80106a0:	08015d09 	.word	0x08015d09
 80106a4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80106a6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80106a8:	429a      	cmp	r2, r3
 80106aa:	bfa8      	it	ge
 80106ac:	461a      	movge	r2, r3
 80106ae:	2a00      	cmp	r2, #0
 80106b0:	4691      	mov	r9, r2
 80106b2:	dc37      	bgt.n	8010724 <_printf_float+0x374>
 80106b4:	f04f 0b00 	mov.w	fp, #0
 80106b8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80106bc:	f104 021a 	add.w	r2, r4, #26
 80106c0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80106c2:	9305      	str	r3, [sp, #20]
 80106c4:	eba3 0309 	sub.w	r3, r3, r9
 80106c8:	455b      	cmp	r3, fp
 80106ca:	dc33      	bgt.n	8010734 <_printf_float+0x384>
 80106cc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80106d0:	429a      	cmp	r2, r3
 80106d2:	db3b      	blt.n	801074c <_printf_float+0x39c>
 80106d4:	6823      	ldr	r3, [r4, #0]
 80106d6:	07da      	lsls	r2, r3, #31
 80106d8:	d438      	bmi.n	801074c <_printf_float+0x39c>
 80106da:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80106dc:	9a05      	ldr	r2, [sp, #20]
 80106de:	9909      	ldr	r1, [sp, #36]	; 0x24
 80106e0:	1a9a      	subs	r2, r3, r2
 80106e2:	eba3 0901 	sub.w	r9, r3, r1
 80106e6:	4591      	cmp	r9, r2
 80106e8:	bfa8      	it	ge
 80106ea:	4691      	movge	r9, r2
 80106ec:	f1b9 0f00 	cmp.w	r9, #0
 80106f0:	dc35      	bgt.n	801075e <_printf_float+0x3ae>
 80106f2:	f04f 0800 	mov.w	r8, #0
 80106f6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80106fa:	f104 0a1a 	add.w	sl, r4, #26
 80106fe:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8010702:	1a9b      	subs	r3, r3, r2
 8010704:	eba3 0309 	sub.w	r3, r3, r9
 8010708:	4543      	cmp	r3, r8
 801070a:	f77f af79 	ble.w	8010600 <_printf_float+0x250>
 801070e:	2301      	movs	r3, #1
 8010710:	4652      	mov	r2, sl
 8010712:	4631      	mov	r1, r6
 8010714:	4628      	mov	r0, r5
 8010716:	47b8      	blx	r7
 8010718:	3001      	adds	r0, #1
 801071a:	f43f aeaa 	beq.w	8010472 <_printf_float+0xc2>
 801071e:	f108 0801 	add.w	r8, r8, #1
 8010722:	e7ec      	b.n	80106fe <_printf_float+0x34e>
 8010724:	4613      	mov	r3, r2
 8010726:	4631      	mov	r1, r6
 8010728:	4642      	mov	r2, r8
 801072a:	4628      	mov	r0, r5
 801072c:	47b8      	blx	r7
 801072e:	3001      	adds	r0, #1
 8010730:	d1c0      	bne.n	80106b4 <_printf_float+0x304>
 8010732:	e69e      	b.n	8010472 <_printf_float+0xc2>
 8010734:	2301      	movs	r3, #1
 8010736:	4631      	mov	r1, r6
 8010738:	4628      	mov	r0, r5
 801073a:	9205      	str	r2, [sp, #20]
 801073c:	47b8      	blx	r7
 801073e:	3001      	adds	r0, #1
 8010740:	f43f ae97 	beq.w	8010472 <_printf_float+0xc2>
 8010744:	9a05      	ldr	r2, [sp, #20]
 8010746:	f10b 0b01 	add.w	fp, fp, #1
 801074a:	e7b9      	b.n	80106c0 <_printf_float+0x310>
 801074c:	ee18 3a10 	vmov	r3, s16
 8010750:	4652      	mov	r2, sl
 8010752:	4631      	mov	r1, r6
 8010754:	4628      	mov	r0, r5
 8010756:	47b8      	blx	r7
 8010758:	3001      	adds	r0, #1
 801075a:	d1be      	bne.n	80106da <_printf_float+0x32a>
 801075c:	e689      	b.n	8010472 <_printf_float+0xc2>
 801075e:	9a05      	ldr	r2, [sp, #20]
 8010760:	464b      	mov	r3, r9
 8010762:	4442      	add	r2, r8
 8010764:	4631      	mov	r1, r6
 8010766:	4628      	mov	r0, r5
 8010768:	47b8      	blx	r7
 801076a:	3001      	adds	r0, #1
 801076c:	d1c1      	bne.n	80106f2 <_printf_float+0x342>
 801076e:	e680      	b.n	8010472 <_printf_float+0xc2>
 8010770:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8010772:	2a01      	cmp	r2, #1
 8010774:	dc01      	bgt.n	801077a <_printf_float+0x3ca>
 8010776:	07db      	lsls	r3, r3, #31
 8010778:	d538      	bpl.n	80107ec <_printf_float+0x43c>
 801077a:	2301      	movs	r3, #1
 801077c:	4642      	mov	r2, r8
 801077e:	4631      	mov	r1, r6
 8010780:	4628      	mov	r0, r5
 8010782:	47b8      	blx	r7
 8010784:	3001      	adds	r0, #1
 8010786:	f43f ae74 	beq.w	8010472 <_printf_float+0xc2>
 801078a:	ee18 3a10 	vmov	r3, s16
 801078e:	4652      	mov	r2, sl
 8010790:	4631      	mov	r1, r6
 8010792:	4628      	mov	r0, r5
 8010794:	47b8      	blx	r7
 8010796:	3001      	adds	r0, #1
 8010798:	f43f ae6b 	beq.w	8010472 <_printf_float+0xc2>
 801079c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80107a0:	2200      	movs	r2, #0
 80107a2:	2300      	movs	r3, #0
 80107a4:	f7f0 f9b0 	bl	8000b08 <__aeabi_dcmpeq>
 80107a8:	b9d8      	cbnz	r0, 80107e2 <_printf_float+0x432>
 80107aa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80107ac:	f108 0201 	add.w	r2, r8, #1
 80107b0:	3b01      	subs	r3, #1
 80107b2:	4631      	mov	r1, r6
 80107b4:	4628      	mov	r0, r5
 80107b6:	47b8      	blx	r7
 80107b8:	3001      	adds	r0, #1
 80107ba:	d10e      	bne.n	80107da <_printf_float+0x42a>
 80107bc:	e659      	b.n	8010472 <_printf_float+0xc2>
 80107be:	2301      	movs	r3, #1
 80107c0:	4652      	mov	r2, sl
 80107c2:	4631      	mov	r1, r6
 80107c4:	4628      	mov	r0, r5
 80107c6:	47b8      	blx	r7
 80107c8:	3001      	adds	r0, #1
 80107ca:	f43f ae52 	beq.w	8010472 <_printf_float+0xc2>
 80107ce:	f108 0801 	add.w	r8, r8, #1
 80107d2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80107d4:	3b01      	subs	r3, #1
 80107d6:	4543      	cmp	r3, r8
 80107d8:	dcf1      	bgt.n	80107be <_printf_float+0x40e>
 80107da:	464b      	mov	r3, r9
 80107dc:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80107e0:	e6dc      	b.n	801059c <_printf_float+0x1ec>
 80107e2:	f04f 0800 	mov.w	r8, #0
 80107e6:	f104 0a1a 	add.w	sl, r4, #26
 80107ea:	e7f2      	b.n	80107d2 <_printf_float+0x422>
 80107ec:	2301      	movs	r3, #1
 80107ee:	4642      	mov	r2, r8
 80107f0:	e7df      	b.n	80107b2 <_printf_float+0x402>
 80107f2:	2301      	movs	r3, #1
 80107f4:	464a      	mov	r2, r9
 80107f6:	4631      	mov	r1, r6
 80107f8:	4628      	mov	r0, r5
 80107fa:	47b8      	blx	r7
 80107fc:	3001      	adds	r0, #1
 80107fe:	f43f ae38 	beq.w	8010472 <_printf_float+0xc2>
 8010802:	f108 0801 	add.w	r8, r8, #1
 8010806:	68e3      	ldr	r3, [r4, #12]
 8010808:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801080a:	1a5b      	subs	r3, r3, r1
 801080c:	4543      	cmp	r3, r8
 801080e:	dcf0      	bgt.n	80107f2 <_printf_float+0x442>
 8010810:	e6fa      	b.n	8010608 <_printf_float+0x258>
 8010812:	f04f 0800 	mov.w	r8, #0
 8010816:	f104 0919 	add.w	r9, r4, #25
 801081a:	e7f4      	b.n	8010806 <_printf_float+0x456>

0801081c <_printf_common>:
 801081c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010820:	4616      	mov	r6, r2
 8010822:	4699      	mov	r9, r3
 8010824:	688a      	ldr	r2, [r1, #8]
 8010826:	690b      	ldr	r3, [r1, #16]
 8010828:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801082c:	4293      	cmp	r3, r2
 801082e:	bfb8      	it	lt
 8010830:	4613      	movlt	r3, r2
 8010832:	6033      	str	r3, [r6, #0]
 8010834:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8010838:	4607      	mov	r7, r0
 801083a:	460c      	mov	r4, r1
 801083c:	b10a      	cbz	r2, 8010842 <_printf_common+0x26>
 801083e:	3301      	adds	r3, #1
 8010840:	6033      	str	r3, [r6, #0]
 8010842:	6823      	ldr	r3, [r4, #0]
 8010844:	0699      	lsls	r1, r3, #26
 8010846:	bf42      	ittt	mi
 8010848:	6833      	ldrmi	r3, [r6, #0]
 801084a:	3302      	addmi	r3, #2
 801084c:	6033      	strmi	r3, [r6, #0]
 801084e:	6825      	ldr	r5, [r4, #0]
 8010850:	f015 0506 	ands.w	r5, r5, #6
 8010854:	d106      	bne.n	8010864 <_printf_common+0x48>
 8010856:	f104 0a19 	add.w	sl, r4, #25
 801085a:	68e3      	ldr	r3, [r4, #12]
 801085c:	6832      	ldr	r2, [r6, #0]
 801085e:	1a9b      	subs	r3, r3, r2
 8010860:	42ab      	cmp	r3, r5
 8010862:	dc26      	bgt.n	80108b2 <_printf_common+0x96>
 8010864:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8010868:	1e13      	subs	r3, r2, #0
 801086a:	6822      	ldr	r2, [r4, #0]
 801086c:	bf18      	it	ne
 801086e:	2301      	movne	r3, #1
 8010870:	0692      	lsls	r2, r2, #26
 8010872:	d42b      	bmi.n	80108cc <_printf_common+0xb0>
 8010874:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8010878:	4649      	mov	r1, r9
 801087a:	4638      	mov	r0, r7
 801087c:	47c0      	blx	r8
 801087e:	3001      	adds	r0, #1
 8010880:	d01e      	beq.n	80108c0 <_printf_common+0xa4>
 8010882:	6823      	ldr	r3, [r4, #0]
 8010884:	68e5      	ldr	r5, [r4, #12]
 8010886:	6832      	ldr	r2, [r6, #0]
 8010888:	f003 0306 	and.w	r3, r3, #6
 801088c:	2b04      	cmp	r3, #4
 801088e:	bf08      	it	eq
 8010890:	1aad      	subeq	r5, r5, r2
 8010892:	68a3      	ldr	r3, [r4, #8]
 8010894:	6922      	ldr	r2, [r4, #16]
 8010896:	bf0c      	ite	eq
 8010898:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801089c:	2500      	movne	r5, #0
 801089e:	4293      	cmp	r3, r2
 80108a0:	bfc4      	itt	gt
 80108a2:	1a9b      	subgt	r3, r3, r2
 80108a4:	18ed      	addgt	r5, r5, r3
 80108a6:	2600      	movs	r6, #0
 80108a8:	341a      	adds	r4, #26
 80108aa:	42b5      	cmp	r5, r6
 80108ac:	d11a      	bne.n	80108e4 <_printf_common+0xc8>
 80108ae:	2000      	movs	r0, #0
 80108b0:	e008      	b.n	80108c4 <_printf_common+0xa8>
 80108b2:	2301      	movs	r3, #1
 80108b4:	4652      	mov	r2, sl
 80108b6:	4649      	mov	r1, r9
 80108b8:	4638      	mov	r0, r7
 80108ba:	47c0      	blx	r8
 80108bc:	3001      	adds	r0, #1
 80108be:	d103      	bne.n	80108c8 <_printf_common+0xac>
 80108c0:	f04f 30ff 	mov.w	r0, #4294967295
 80108c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80108c8:	3501      	adds	r5, #1
 80108ca:	e7c6      	b.n	801085a <_printf_common+0x3e>
 80108cc:	18e1      	adds	r1, r4, r3
 80108ce:	1c5a      	adds	r2, r3, #1
 80108d0:	2030      	movs	r0, #48	; 0x30
 80108d2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80108d6:	4422      	add	r2, r4
 80108d8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80108dc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80108e0:	3302      	adds	r3, #2
 80108e2:	e7c7      	b.n	8010874 <_printf_common+0x58>
 80108e4:	2301      	movs	r3, #1
 80108e6:	4622      	mov	r2, r4
 80108e8:	4649      	mov	r1, r9
 80108ea:	4638      	mov	r0, r7
 80108ec:	47c0      	blx	r8
 80108ee:	3001      	adds	r0, #1
 80108f0:	d0e6      	beq.n	80108c0 <_printf_common+0xa4>
 80108f2:	3601      	adds	r6, #1
 80108f4:	e7d9      	b.n	80108aa <_printf_common+0x8e>
	...

080108f8 <_printf_i>:
 80108f8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80108fc:	7e0f      	ldrb	r7, [r1, #24]
 80108fe:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8010900:	2f78      	cmp	r7, #120	; 0x78
 8010902:	4691      	mov	r9, r2
 8010904:	4680      	mov	r8, r0
 8010906:	460c      	mov	r4, r1
 8010908:	469a      	mov	sl, r3
 801090a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 801090e:	d807      	bhi.n	8010920 <_printf_i+0x28>
 8010910:	2f62      	cmp	r7, #98	; 0x62
 8010912:	d80a      	bhi.n	801092a <_printf_i+0x32>
 8010914:	2f00      	cmp	r7, #0
 8010916:	f000 80d8 	beq.w	8010aca <_printf_i+0x1d2>
 801091a:	2f58      	cmp	r7, #88	; 0x58
 801091c:	f000 80a3 	beq.w	8010a66 <_printf_i+0x16e>
 8010920:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8010924:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8010928:	e03a      	b.n	80109a0 <_printf_i+0xa8>
 801092a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801092e:	2b15      	cmp	r3, #21
 8010930:	d8f6      	bhi.n	8010920 <_printf_i+0x28>
 8010932:	a101      	add	r1, pc, #4	; (adr r1, 8010938 <_printf_i+0x40>)
 8010934:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8010938:	08010991 	.word	0x08010991
 801093c:	080109a5 	.word	0x080109a5
 8010940:	08010921 	.word	0x08010921
 8010944:	08010921 	.word	0x08010921
 8010948:	08010921 	.word	0x08010921
 801094c:	08010921 	.word	0x08010921
 8010950:	080109a5 	.word	0x080109a5
 8010954:	08010921 	.word	0x08010921
 8010958:	08010921 	.word	0x08010921
 801095c:	08010921 	.word	0x08010921
 8010960:	08010921 	.word	0x08010921
 8010964:	08010ab1 	.word	0x08010ab1
 8010968:	080109d5 	.word	0x080109d5
 801096c:	08010a93 	.word	0x08010a93
 8010970:	08010921 	.word	0x08010921
 8010974:	08010921 	.word	0x08010921
 8010978:	08010ad3 	.word	0x08010ad3
 801097c:	08010921 	.word	0x08010921
 8010980:	080109d5 	.word	0x080109d5
 8010984:	08010921 	.word	0x08010921
 8010988:	08010921 	.word	0x08010921
 801098c:	08010a9b 	.word	0x08010a9b
 8010990:	682b      	ldr	r3, [r5, #0]
 8010992:	1d1a      	adds	r2, r3, #4
 8010994:	681b      	ldr	r3, [r3, #0]
 8010996:	602a      	str	r2, [r5, #0]
 8010998:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801099c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80109a0:	2301      	movs	r3, #1
 80109a2:	e0a3      	b.n	8010aec <_printf_i+0x1f4>
 80109a4:	6820      	ldr	r0, [r4, #0]
 80109a6:	6829      	ldr	r1, [r5, #0]
 80109a8:	0606      	lsls	r6, r0, #24
 80109aa:	f101 0304 	add.w	r3, r1, #4
 80109ae:	d50a      	bpl.n	80109c6 <_printf_i+0xce>
 80109b0:	680e      	ldr	r6, [r1, #0]
 80109b2:	602b      	str	r3, [r5, #0]
 80109b4:	2e00      	cmp	r6, #0
 80109b6:	da03      	bge.n	80109c0 <_printf_i+0xc8>
 80109b8:	232d      	movs	r3, #45	; 0x2d
 80109ba:	4276      	negs	r6, r6
 80109bc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80109c0:	485e      	ldr	r0, [pc, #376]	; (8010b3c <_printf_i+0x244>)
 80109c2:	230a      	movs	r3, #10
 80109c4:	e019      	b.n	80109fa <_printf_i+0x102>
 80109c6:	680e      	ldr	r6, [r1, #0]
 80109c8:	602b      	str	r3, [r5, #0]
 80109ca:	f010 0f40 	tst.w	r0, #64	; 0x40
 80109ce:	bf18      	it	ne
 80109d0:	b236      	sxthne	r6, r6
 80109d2:	e7ef      	b.n	80109b4 <_printf_i+0xbc>
 80109d4:	682b      	ldr	r3, [r5, #0]
 80109d6:	6820      	ldr	r0, [r4, #0]
 80109d8:	1d19      	adds	r1, r3, #4
 80109da:	6029      	str	r1, [r5, #0]
 80109dc:	0601      	lsls	r1, r0, #24
 80109de:	d501      	bpl.n	80109e4 <_printf_i+0xec>
 80109e0:	681e      	ldr	r6, [r3, #0]
 80109e2:	e002      	b.n	80109ea <_printf_i+0xf2>
 80109e4:	0646      	lsls	r6, r0, #25
 80109e6:	d5fb      	bpl.n	80109e0 <_printf_i+0xe8>
 80109e8:	881e      	ldrh	r6, [r3, #0]
 80109ea:	4854      	ldr	r0, [pc, #336]	; (8010b3c <_printf_i+0x244>)
 80109ec:	2f6f      	cmp	r7, #111	; 0x6f
 80109ee:	bf0c      	ite	eq
 80109f0:	2308      	moveq	r3, #8
 80109f2:	230a      	movne	r3, #10
 80109f4:	2100      	movs	r1, #0
 80109f6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80109fa:	6865      	ldr	r5, [r4, #4]
 80109fc:	60a5      	str	r5, [r4, #8]
 80109fe:	2d00      	cmp	r5, #0
 8010a00:	bfa2      	ittt	ge
 8010a02:	6821      	ldrge	r1, [r4, #0]
 8010a04:	f021 0104 	bicge.w	r1, r1, #4
 8010a08:	6021      	strge	r1, [r4, #0]
 8010a0a:	b90e      	cbnz	r6, 8010a10 <_printf_i+0x118>
 8010a0c:	2d00      	cmp	r5, #0
 8010a0e:	d04d      	beq.n	8010aac <_printf_i+0x1b4>
 8010a10:	4615      	mov	r5, r2
 8010a12:	fbb6 f1f3 	udiv	r1, r6, r3
 8010a16:	fb03 6711 	mls	r7, r3, r1, r6
 8010a1a:	5dc7      	ldrb	r7, [r0, r7]
 8010a1c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8010a20:	4637      	mov	r7, r6
 8010a22:	42bb      	cmp	r3, r7
 8010a24:	460e      	mov	r6, r1
 8010a26:	d9f4      	bls.n	8010a12 <_printf_i+0x11a>
 8010a28:	2b08      	cmp	r3, #8
 8010a2a:	d10b      	bne.n	8010a44 <_printf_i+0x14c>
 8010a2c:	6823      	ldr	r3, [r4, #0]
 8010a2e:	07de      	lsls	r6, r3, #31
 8010a30:	d508      	bpl.n	8010a44 <_printf_i+0x14c>
 8010a32:	6923      	ldr	r3, [r4, #16]
 8010a34:	6861      	ldr	r1, [r4, #4]
 8010a36:	4299      	cmp	r1, r3
 8010a38:	bfde      	ittt	le
 8010a3a:	2330      	movle	r3, #48	; 0x30
 8010a3c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8010a40:	f105 35ff 	addle.w	r5, r5, #4294967295
 8010a44:	1b52      	subs	r2, r2, r5
 8010a46:	6122      	str	r2, [r4, #16]
 8010a48:	f8cd a000 	str.w	sl, [sp]
 8010a4c:	464b      	mov	r3, r9
 8010a4e:	aa03      	add	r2, sp, #12
 8010a50:	4621      	mov	r1, r4
 8010a52:	4640      	mov	r0, r8
 8010a54:	f7ff fee2 	bl	801081c <_printf_common>
 8010a58:	3001      	adds	r0, #1
 8010a5a:	d14c      	bne.n	8010af6 <_printf_i+0x1fe>
 8010a5c:	f04f 30ff 	mov.w	r0, #4294967295
 8010a60:	b004      	add	sp, #16
 8010a62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010a66:	4835      	ldr	r0, [pc, #212]	; (8010b3c <_printf_i+0x244>)
 8010a68:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8010a6c:	6829      	ldr	r1, [r5, #0]
 8010a6e:	6823      	ldr	r3, [r4, #0]
 8010a70:	f851 6b04 	ldr.w	r6, [r1], #4
 8010a74:	6029      	str	r1, [r5, #0]
 8010a76:	061d      	lsls	r5, r3, #24
 8010a78:	d514      	bpl.n	8010aa4 <_printf_i+0x1ac>
 8010a7a:	07df      	lsls	r7, r3, #31
 8010a7c:	bf44      	itt	mi
 8010a7e:	f043 0320 	orrmi.w	r3, r3, #32
 8010a82:	6023      	strmi	r3, [r4, #0]
 8010a84:	b91e      	cbnz	r6, 8010a8e <_printf_i+0x196>
 8010a86:	6823      	ldr	r3, [r4, #0]
 8010a88:	f023 0320 	bic.w	r3, r3, #32
 8010a8c:	6023      	str	r3, [r4, #0]
 8010a8e:	2310      	movs	r3, #16
 8010a90:	e7b0      	b.n	80109f4 <_printf_i+0xfc>
 8010a92:	6823      	ldr	r3, [r4, #0]
 8010a94:	f043 0320 	orr.w	r3, r3, #32
 8010a98:	6023      	str	r3, [r4, #0]
 8010a9a:	2378      	movs	r3, #120	; 0x78
 8010a9c:	4828      	ldr	r0, [pc, #160]	; (8010b40 <_printf_i+0x248>)
 8010a9e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8010aa2:	e7e3      	b.n	8010a6c <_printf_i+0x174>
 8010aa4:	0659      	lsls	r1, r3, #25
 8010aa6:	bf48      	it	mi
 8010aa8:	b2b6      	uxthmi	r6, r6
 8010aaa:	e7e6      	b.n	8010a7a <_printf_i+0x182>
 8010aac:	4615      	mov	r5, r2
 8010aae:	e7bb      	b.n	8010a28 <_printf_i+0x130>
 8010ab0:	682b      	ldr	r3, [r5, #0]
 8010ab2:	6826      	ldr	r6, [r4, #0]
 8010ab4:	6961      	ldr	r1, [r4, #20]
 8010ab6:	1d18      	adds	r0, r3, #4
 8010ab8:	6028      	str	r0, [r5, #0]
 8010aba:	0635      	lsls	r5, r6, #24
 8010abc:	681b      	ldr	r3, [r3, #0]
 8010abe:	d501      	bpl.n	8010ac4 <_printf_i+0x1cc>
 8010ac0:	6019      	str	r1, [r3, #0]
 8010ac2:	e002      	b.n	8010aca <_printf_i+0x1d2>
 8010ac4:	0670      	lsls	r0, r6, #25
 8010ac6:	d5fb      	bpl.n	8010ac0 <_printf_i+0x1c8>
 8010ac8:	8019      	strh	r1, [r3, #0]
 8010aca:	2300      	movs	r3, #0
 8010acc:	6123      	str	r3, [r4, #16]
 8010ace:	4615      	mov	r5, r2
 8010ad0:	e7ba      	b.n	8010a48 <_printf_i+0x150>
 8010ad2:	682b      	ldr	r3, [r5, #0]
 8010ad4:	1d1a      	adds	r2, r3, #4
 8010ad6:	602a      	str	r2, [r5, #0]
 8010ad8:	681d      	ldr	r5, [r3, #0]
 8010ada:	6862      	ldr	r2, [r4, #4]
 8010adc:	2100      	movs	r1, #0
 8010ade:	4628      	mov	r0, r5
 8010ae0:	f7ef fb9e 	bl	8000220 <memchr>
 8010ae4:	b108      	cbz	r0, 8010aea <_printf_i+0x1f2>
 8010ae6:	1b40      	subs	r0, r0, r5
 8010ae8:	6060      	str	r0, [r4, #4]
 8010aea:	6863      	ldr	r3, [r4, #4]
 8010aec:	6123      	str	r3, [r4, #16]
 8010aee:	2300      	movs	r3, #0
 8010af0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010af4:	e7a8      	b.n	8010a48 <_printf_i+0x150>
 8010af6:	6923      	ldr	r3, [r4, #16]
 8010af8:	462a      	mov	r2, r5
 8010afa:	4649      	mov	r1, r9
 8010afc:	4640      	mov	r0, r8
 8010afe:	47d0      	blx	sl
 8010b00:	3001      	adds	r0, #1
 8010b02:	d0ab      	beq.n	8010a5c <_printf_i+0x164>
 8010b04:	6823      	ldr	r3, [r4, #0]
 8010b06:	079b      	lsls	r3, r3, #30
 8010b08:	d413      	bmi.n	8010b32 <_printf_i+0x23a>
 8010b0a:	68e0      	ldr	r0, [r4, #12]
 8010b0c:	9b03      	ldr	r3, [sp, #12]
 8010b0e:	4298      	cmp	r0, r3
 8010b10:	bfb8      	it	lt
 8010b12:	4618      	movlt	r0, r3
 8010b14:	e7a4      	b.n	8010a60 <_printf_i+0x168>
 8010b16:	2301      	movs	r3, #1
 8010b18:	4632      	mov	r2, r6
 8010b1a:	4649      	mov	r1, r9
 8010b1c:	4640      	mov	r0, r8
 8010b1e:	47d0      	blx	sl
 8010b20:	3001      	adds	r0, #1
 8010b22:	d09b      	beq.n	8010a5c <_printf_i+0x164>
 8010b24:	3501      	adds	r5, #1
 8010b26:	68e3      	ldr	r3, [r4, #12]
 8010b28:	9903      	ldr	r1, [sp, #12]
 8010b2a:	1a5b      	subs	r3, r3, r1
 8010b2c:	42ab      	cmp	r3, r5
 8010b2e:	dcf2      	bgt.n	8010b16 <_printf_i+0x21e>
 8010b30:	e7eb      	b.n	8010b0a <_printf_i+0x212>
 8010b32:	2500      	movs	r5, #0
 8010b34:	f104 0619 	add.w	r6, r4, #25
 8010b38:	e7f5      	b.n	8010b26 <_printf_i+0x22e>
 8010b3a:	bf00      	nop
 8010b3c:	08015914 	.word	0x08015914
 8010b40:	08015925 	.word	0x08015925

08010b44 <_scanf_float>:
 8010b44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010b48:	b087      	sub	sp, #28
 8010b4a:	4617      	mov	r7, r2
 8010b4c:	9303      	str	r3, [sp, #12]
 8010b4e:	688b      	ldr	r3, [r1, #8]
 8010b50:	1e5a      	subs	r2, r3, #1
 8010b52:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8010b56:	bf83      	ittte	hi
 8010b58:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8010b5c:	195b      	addhi	r3, r3, r5
 8010b5e:	9302      	strhi	r3, [sp, #8]
 8010b60:	2300      	movls	r3, #0
 8010b62:	bf86      	itte	hi
 8010b64:	f240 135d 	movwhi	r3, #349	; 0x15d
 8010b68:	608b      	strhi	r3, [r1, #8]
 8010b6a:	9302      	strls	r3, [sp, #8]
 8010b6c:	680b      	ldr	r3, [r1, #0]
 8010b6e:	468b      	mov	fp, r1
 8010b70:	2500      	movs	r5, #0
 8010b72:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8010b76:	f84b 3b1c 	str.w	r3, [fp], #28
 8010b7a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8010b7e:	4680      	mov	r8, r0
 8010b80:	460c      	mov	r4, r1
 8010b82:	465e      	mov	r6, fp
 8010b84:	46aa      	mov	sl, r5
 8010b86:	46a9      	mov	r9, r5
 8010b88:	9501      	str	r5, [sp, #4]
 8010b8a:	68a2      	ldr	r2, [r4, #8]
 8010b8c:	b152      	cbz	r2, 8010ba4 <_scanf_float+0x60>
 8010b8e:	683b      	ldr	r3, [r7, #0]
 8010b90:	781b      	ldrb	r3, [r3, #0]
 8010b92:	2b4e      	cmp	r3, #78	; 0x4e
 8010b94:	d864      	bhi.n	8010c60 <_scanf_float+0x11c>
 8010b96:	2b40      	cmp	r3, #64	; 0x40
 8010b98:	d83c      	bhi.n	8010c14 <_scanf_float+0xd0>
 8010b9a:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8010b9e:	b2c8      	uxtb	r0, r1
 8010ba0:	280e      	cmp	r0, #14
 8010ba2:	d93a      	bls.n	8010c1a <_scanf_float+0xd6>
 8010ba4:	f1b9 0f00 	cmp.w	r9, #0
 8010ba8:	d003      	beq.n	8010bb2 <_scanf_float+0x6e>
 8010baa:	6823      	ldr	r3, [r4, #0]
 8010bac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8010bb0:	6023      	str	r3, [r4, #0]
 8010bb2:	f10a 3aff 	add.w	sl, sl, #4294967295
 8010bb6:	f1ba 0f01 	cmp.w	sl, #1
 8010bba:	f200 8113 	bhi.w	8010de4 <_scanf_float+0x2a0>
 8010bbe:	455e      	cmp	r6, fp
 8010bc0:	f200 8105 	bhi.w	8010dce <_scanf_float+0x28a>
 8010bc4:	2501      	movs	r5, #1
 8010bc6:	4628      	mov	r0, r5
 8010bc8:	b007      	add	sp, #28
 8010bca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010bce:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8010bd2:	2a0d      	cmp	r2, #13
 8010bd4:	d8e6      	bhi.n	8010ba4 <_scanf_float+0x60>
 8010bd6:	a101      	add	r1, pc, #4	; (adr r1, 8010bdc <_scanf_float+0x98>)
 8010bd8:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8010bdc:	08010d1b 	.word	0x08010d1b
 8010be0:	08010ba5 	.word	0x08010ba5
 8010be4:	08010ba5 	.word	0x08010ba5
 8010be8:	08010ba5 	.word	0x08010ba5
 8010bec:	08010d7b 	.word	0x08010d7b
 8010bf0:	08010d53 	.word	0x08010d53
 8010bf4:	08010ba5 	.word	0x08010ba5
 8010bf8:	08010ba5 	.word	0x08010ba5
 8010bfc:	08010d29 	.word	0x08010d29
 8010c00:	08010ba5 	.word	0x08010ba5
 8010c04:	08010ba5 	.word	0x08010ba5
 8010c08:	08010ba5 	.word	0x08010ba5
 8010c0c:	08010ba5 	.word	0x08010ba5
 8010c10:	08010ce1 	.word	0x08010ce1
 8010c14:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8010c18:	e7db      	b.n	8010bd2 <_scanf_float+0x8e>
 8010c1a:	290e      	cmp	r1, #14
 8010c1c:	d8c2      	bhi.n	8010ba4 <_scanf_float+0x60>
 8010c1e:	a001      	add	r0, pc, #4	; (adr r0, 8010c24 <_scanf_float+0xe0>)
 8010c20:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8010c24:	08010cd3 	.word	0x08010cd3
 8010c28:	08010ba5 	.word	0x08010ba5
 8010c2c:	08010cd3 	.word	0x08010cd3
 8010c30:	08010d67 	.word	0x08010d67
 8010c34:	08010ba5 	.word	0x08010ba5
 8010c38:	08010c81 	.word	0x08010c81
 8010c3c:	08010cbd 	.word	0x08010cbd
 8010c40:	08010cbd 	.word	0x08010cbd
 8010c44:	08010cbd 	.word	0x08010cbd
 8010c48:	08010cbd 	.word	0x08010cbd
 8010c4c:	08010cbd 	.word	0x08010cbd
 8010c50:	08010cbd 	.word	0x08010cbd
 8010c54:	08010cbd 	.word	0x08010cbd
 8010c58:	08010cbd 	.word	0x08010cbd
 8010c5c:	08010cbd 	.word	0x08010cbd
 8010c60:	2b6e      	cmp	r3, #110	; 0x6e
 8010c62:	d809      	bhi.n	8010c78 <_scanf_float+0x134>
 8010c64:	2b60      	cmp	r3, #96	; 0x60
 8010c66:	d8b2      	bhi.n	8010bce <_scanf_float+0x8a>
 8010c68:	2b54      	cmp	r3, #84	; 0x54
 8010c6a:	d077      	beq.n	8010d5c <_scanf_float+0x218>
 8010c6c:	2b59      	cmp	r3, #89	; 0x59
 8010c6e:	d199      	bne.n	8010ba4 <_scanf_float+0x60>
 8010c70:	2d07      	cmp	r5, #7
 8010c72:	d197      	bne.n	8010ba4 <_scanf_float+0x60>
 8010c74:	2508      	movs	r5, #8
 8010c76:	e029      	b.n	8010ccc <_scanf_float+0x188>
 8010c78:	2b74      	cmp	r3, #116	; 0x74
 8010c7a:	d06f      	beq.n	8010d5c <_scanf_float+0x218>
 8010c7c:	2b79      	cmp	r3, #121	; 0x79
 8010c7e:	e7f6      	b.n	8010c6e <_scanf_float+0x12a>
 8010c80:	6821      	ldr	r1, [r4, #0]
 8010c82:	05c8      	lsls	r0, r1, #23
 8010c84:	d51a      	bpl.n	8010cbc <_scanf_float+0x178>
 8010c86:	9b02      	ldr	r3, [sp, #8]
 8010c88:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8010c8c:	6021      	str	r1, [r4, #0]
 8010c8e:	f109 0901 	add.w	r9, r9, #1
 8010c92:	b11b      	cbz	r3, 8010c9c <_scanf_float+0x158>
 8010c94:	3b01      	subs	r3, #1
 8010c96:	3201      	adds	r2, #1
 8010c98:	9302      	str	r3, [sp, #8]
 8010c9a:	60a2      	str	r2, [r4, #8]
 8010c9c:	68a3      	ldr	r3, [r4, #8]
 8010c9e:	3b01      	subs	r3, #1
 8010ca0:	60a3      	str	r3, [r4, #8]
 8010ca2:	6923      	ldr	r3, [r4, #16]
 8010ca4:	3301      	adds	r3, #1
 8010ca6:	6123      	str	r3, [r4, #16]
 8010ca8:	687b      	ldr	r3, [r7, #4]
 8010caa:	3b01      	subs	r3, #1
 8010cac:	2b00      	cmp	r3, #0
 8010cae:	607b      	str	r3, [r7, #4]
 8010cb0:	f340 8084 	ble.w	8010dbc <_scanf_float+0x278>
 8010cb4:	683b      	ldr	r3, [r7, #0]
 8010cb6:	3301      	adds	r3, #1
 8010cb8:	603b      	str	r3, [r7, #0]
 8010cba:	e766      	b.n	8010b8a <_scanf_float+0x46>
 8010cbc:	eb1a 0f05 	cmn.w	sl, r5
 8010cc0:	f47f af70 	bne.w	8010ba4 <_scanf_float+0x60>
 8010cc4:	6822      	ldr	r2, [r4, #0]
 8010cc6:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8010cca:	6022      	str	r2, [r4, #0]
 8010ccc:	f806 3b01 	strb.w	r3, [r6], #1
 8010cd0:	e7e4      	b.n	8010c9c <_scanf_float+0x158>
 8010cd2:	6822      	ldr	r2, [r4, #0]
 8010cd4:	0610      	lsls	r0, r2, #24
 8010cd6:	f57f af65 	bpl.w	8010ba4 <_scanf_float+0x60>
 8010cda:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8010cde:	e7f4      	b.n	8010cca <_scanf_float+0x186>
 8010ce0:	f1ba 0f00 	cmp.w	sl, #0
 8010ce4:	d10e      	bne.n	8010d04 <_scanf_float+0x1c0>
 8010ce6:	f1b9 0f00 	cmp.w	r9, #0
 8010cea:	d10e      	bne.n	8010d0a <_scanf_float+0x1c6>
 8010cec:	6822      	ldr	r2, [r4, #0]
 8010cee:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8010cf2:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8010cf6:	d108      	bne.n	8010d0a <_scanf_float+0x1c6>
 8010cf8:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8010cfc:	6022      	str	r2, [r4, #0]
 8010cfe:	f04f 0a01 	mov.w	sl, #1
 8010d02:	e7e3      	b.n	8010ccc <_scanf_float+0x188>
 8010d04:	f1ba 0f02 	cmp.w	sl, #2
 8010d08:	d055      	beq.n	8010db6 <_scanf_float+0x272>
 8010d0a:	2d01      	cmp	r5, #1
 8010d0c:	d002      	beq.n	8010d14 <_scanf_float+0x1d0>
 8010d0e:	2d04      	cmp	r5, #4
 8010d10:	f47f af48 	bne.w	8010ba4 <_scanf_float+0x60>
 8010d14:	3501      	adds	r5, #1
 8010d16:	b2ed      	uxtb	r5, r5
 8010d18:	e7d8      	b.n	8010ccc <_scanf_float+0x188>
 8010d1a:	f1ba 0f01 	cmp.w	sl, #1
 8010d1e:	f47f af41 	bne.w	8010ba4 <_scanf_float+0x60>
 8010d22:	f04f 0a02 	mov.w	sl, #2
 8010d26:	e7d1      	b.n	8010ccc <_scanf_float+0x188>
 8010d28:	b97d      	cbnz	r5, 8010d4a <_scanf_float+0x206>
 8010d2a:	f1b9 0f00 	cmp.w	r9, #0
 8010d2e:	f47f af3c 	bne.w	8010baa <_scanf_float+0x66>
 8010d32:	6822      	ldr	r2, [r4, #0]
 8010d34:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8010d38:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8010d3c:	f47f af39 	bne.w	8010bb2 <_scanf_float+0x6e>
 8010d40:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8010d44:	6022      	str	r2, [r4, #0]
 8010d46:	2501      	movs	r5, #1
 8010d48:	e7c0      	b.n	8010ccc <_scanf_float+0x188>
 8010d4a:	2d03      	cmp	r5, #3
 8010d4c:	d0e2      	beq.n	8010d14 <_scanf_float+0x1d0>
 8010d4e:	2d05      	cmp	r5, #5
 8010d50:	e7de      	b.n	8010d10 <_scanf_float+0x1cc>
 8010d52:	2d02      	cmp	r5, #2
 8010d54:	f47f af26 	bne.w	8010ba4 <_scanf_float+0x60>
 8010d58:	2503      	movs	r5, #3
 8010d5a:	e7b7      	b.n	8010ccc <_scanf_float+0x188>
 8010d5c:	2d06      	cmp	r5, #6
 8010d5e:	f47f af21 	bne.w	8010ba4 <_scanf_float+0x60>
 8010d62:	2507      	movs	r5, #7
 8010d64:	e7b2      	b.n	8010ccc <_scanf_float+0x188>
 8010d66:	6822      	ldr	r2, [r4, #0]
 8010d68:	0591      	lsls	r1, r2, #22
 8010d6a:	f57f af1b 	bpl.w	8010ba4 <_scanf_float+0x60>
 8010d6e:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8010d72:	6022      	str	r2, [r4, #0]
 8010d74:	f8cd 9004 	str.w	r9, [sp, #4]
 8010d78:	e7a8      	b.n	8010ccc <_scanf_float+0x188>
 8010d7a:	6822      	ldr	r2, [r4, #0]
 8010d7c:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8010d80:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8010d84:	d006      	beq.n	8010d94 <_scanf_float+0x250>
 8010d86:	0550      	lsls	r0, r2, #21
 8010d88:	f57f af0c 	bpl.w	8010ba4 <_scanf_float+0x60>
 8010d8c:	f1b9 0f00 	cmp.w	r9, #0
 8010d90:	f43f af0f 	beq.w	8010bb2 <_scanf_float+0x6e>
 8010d94:	0591      	lsls	r1, r2, #22
 8010d96:	bf58      	it	pl
 8010d98:	9901      	ldrpl	r1, [sp, #4]
 8010d9a:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8010d9e:	bf58      	it	pl
 8010da0:	eba9 0101 	subpl.w	r1, r9, r1
 8010da4:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8010da8:	bf58      	it	pl
 8010daa:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8010dae:	6022      	str	r2, [r4, #0]
 8010db0:	f04f 0900 	mov.w	r9, #0
 8010db4:	e78a      	b.n	8010ccc <_scanf_float+0x188>
 8010db6:	f04f 0a03 	mov.w	sl, #3
 8010dba:	e787      	b.n	8010ccc <_scanf_float+0x188>
 8010dbc:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8010dc0:	4639      	mov	r1, r7
 8010dc2:	4640      	mov	r0, r8
 8010dc4:	4798      	blx	r3
 8010dc6:	2800      	cmp	r0, #0
 8010dc8:	f43f aedf 	beq.w	8010b8a <_scanf_float+0x46>
 8010dcc:	e6ea      	b.n	8010ba4 <_scanf_float+0x60>
 8010dce:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8010dd2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8010dd6:	463a      	mov	r2, r7
 8010dd8:	4640      	mov	r0, r8
 8010dda:	4798      	blx	r3
 8010ddc:	6923      	ldr	r3, [r4, #16]
 8010dde:	3b01      	subs	r3, #1
 8010de0:	6123      	str	r3, [r4, #16]
 8010de2:	e6ec      	b.n	8010bbe <_scanf_float+0x7a>
 8010de4:	1e6b      	subs	r3, r5, #1
 8010de6:	2b06      	cmp	r3, #6
 8010de8:	d825      	bhi.n	8010e36 <_scanf_float+0x2f2>
 8010dea:	2d02      	cmp	r5, #2
 8010dec:	d836      	bhi.n	8010e5c <_scanf_float+0x318>
 8010dee:	455e      	cmp	r6, fp
 8010df0:	f67f aee8 	bls.w	8010bc4 <_scanf_float+0x80>
 8010df4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8010df8:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8010dfc:	463a      	mov	r2, r7
 8010dfe:	4640      	mov	r0, r8
 8010e00:	4798      	blx	r3
 8010e02:	6923      	ldr	r3, [r4, #16]
 8010e04:	3b01      	subs	r3, #1
 8010e06:	6123      	str	r3, [r4, #16]
 8010e08:	e7f1      	b.n	8010dee <_scanf_float+0x2aa>
 8010e0a:	9802      	ldr	r0, [sp, #8]
 8010e0c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8010e10:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8010e14:	9002      	str	r0, [sp, #8]
 8010e16:	463a      	mov	r2, r7
 8010e18:	4640      	mov	r0, r8
 8010e1a:	4798      	blx	r3
 8010e1c:	6923      	ldr	r3, [r4, #16]
 8010e1e:	3b01      	subs	r3, #1
 8010e20:	6123      	str	r3, [r4, #16]
 8010e22:	f10a 3aff 	add.w	sl, sl, #4294967295
 8010e26:	fa5f fa8a 	uxtb.w	sl, sl
 8010e2a:	f1ba 0f02 	cmp.w	sl, #2
 8010e2e:	d1ec      	bne.n	8010e0a <_scanf_float+0x2c6>
 8010e30:	3d03      	subs	r5, #3
 8010e32:	b2ed      	uxtb	r5, r5
 8010e34:	1b76      	subs	r6, r6, r5
 8010e36:	6823      	ldr	r3, [r4, #0]
 8010e38:	05da      	lsls	r2, r3, #23
 8010e3a:	d52f      	bpl.n	8010e9c <_scanf_float+0x358>
 8010e3c:	055b      	lsls	r3, r3, #21
 8010e3e:	d510      	bpl.n	8010e62 <_scanf_float+0x31e>
 8010e40:	455e      	cmp	r6, fp
 8010e42:	f67f aebf 	bls.w	8010bc4 <_scanf_float+0x80>
 8010e46:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8010e4a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8010e4e:	463a      	mov	r2, r7
 8010e50:	4640      	mov	r0, r8
 8010e52:	4798      	blx	r3
 8010e54:	6923      	ldr	r3, [r4, #16]
 8010e56:	3b01      	subs	r3, #1
 8010e58:	6123      	str	r3, [r4, #16]
 8010e5a:	e7f1      	b.n	8010e40 <_scanf_float+0x2fc>
 8010e5c:	46aa      	mov	sl, r5
 8010e5e:	9602      	str	r6, [sp, #8]
 8010e60:	e7df      	b.n	8010e22 <_scanf_float+0x2de>
 8010e62:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8010e66:	6923      	ldr	r3, [r4, #16]
 8010e68:	2965      	cmp	r1, #101	; 0x65
 8010e6a:	f103 33ff 	add.w	r3, r3, #4294967295
 8010e6e:	f106 35ff 	add.w	r5, r6, #4294967295
 8010e72:	6123      	str	r3, [r4, #16]
 8010e74:	d00c      	beq.n	8010e90 <_scanf_float+0x34c>
 8010e76:	2945      	cmp	r1, #69	; 0x45
 8010e78:	d00a      	beq.n	8010e90 <_scanf_float+0x34c>
 8010e7a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8010e7e:	463a      	mov	r2, r7
 8010e80:	4640      	mov	r0, r8
 8010e82:	4798      	blx	r3
 8010e84:	6923      	ldr	r3, [r4, #16]
 8010e86:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8010e8a:	3b01      	subs	r3, #1
 8010e8c:	1eb5      	subs	r5, r6, #2
 8010e8e:	6123      	str	r3, [r4, #16]
 8010e90:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8010e94:	463a      	mov	r2, r7
 8010e96:	4640      	mov	r0, r8
 8010e98:	4798      	blx	r3
 8010e9a:	462e      	mov	r6, r5
 8010e9c:	6825      	ldr	r5, [r4, #0]
 8010e9e:	f015 0510 	ands.w	r5, r5, #16
 8010ea2:	d159      	bne.n	8010f58 <_scanf_float+0x414>
 8010ea4:	7035      	strb	r5, [r6, #0]
 8010ea6:	6823      	ldr	r3, [r4, #0]
 8010ea8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8010eac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8010eb0:	d11b      	bne.n	8010eea <_scanf_float+0x3a6>
 8010eb2:	9b01      	ldr	r3, [sp, #4]
 8010eb4:	454b      	cmp	r3, r9
 8010eb6:	eba3 0209 	sub.w	r2, r3, r9
 8010eba:	d123      	bne.n	8010f04 <_scanf_float+0x3c0>
 8010ebc:	2200      	movs	r2, #0
 8010ebe:	4659      	mov	r1, fp
 8010ec0:	4640      	mov	r0, r8
 8010ec2:	f000 ff27 	bl	8011d14 <_strtod_r>
 8010ec6:	6822      	ldr	r2, [r4, #0]
 8010ec8:	9b03      	ldr	r3, [sp, #12]
 8010eca:	f012 0f02 	tst.w	r2, #2
 8010ece:	ec57 6b10 	vmov	r6, r7, d0
 8010ed2:	681b      	ldr	r3, [r3, #0]
 8010ed4:	d021      	beq.n	8010f1a <_scanf_float+0x3d6>
 8010ed6:	9903      	ldr	r1, [sp, #12]
 8010ed8:	1d1a      	adds	r2, r3, #4
 8010eda:	600a      	str	r2, [r1, #0]
 8010edc:	681b      	ldr	r3, [r3, #0]
 8010ede:	e9c3 6700 	strd	r6, r7, [r3]
 8010ee2:	68e3      	ldr	r3, [r4, #12]
 8010ee4:	3301      	adds	r3, #1
 8010ee6:	60e3      	str	r3, [r4, #12]
 8010ee8:	e66d      	b.n	8010bc6 <_scanf_float+0x82>
 8010eea:	9b04      	ldr	r3, [sp, #16]
 8010eec:	2b00      	cmp	r3, #0
 8010eee:	d0e5      	beq.n	8010ebc <_scanf_float+0x378>
 8010ef0:	9905      	ldr	r1, [sp, #20]
 8010ef2:	230a      	movs	r3, #10
 8010ef4:	462a      	mov	r2, r5
 8010ef6:	3101      	adds	r1, #1
 8010ef8:	4640      	mov	r0, r8
 8010efa:	f000 ff93 	bl	8011e24 <_strtol_r>
 8010efe:	9b04      	ldr	r3, [sp, #16]
 8010f00:	9e05      	ldr	r6, [sp, #20]
 8010f02:	1ac2      	subs	r2, r0, r3
 8010f04:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8010f08:	429e      	cmp	r6, r3
 8010f0a:	bf28      	it	cs
 8010f0c:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8010f10:	4912      	ldr	r1, [pc, #72]	; (8010f5c <_scanf_float+0x418>)
 8010f12:	4630      	mov	r0, r6
 8010f14:	f000 f82c 	bl	8010f70 <siprintf>
 8010f18:	e7d0      	b.n	8010ebc <_scanf_float+0x378>
 8010f1a:	9903      	ldr	r1, [sp, #12]
 8010f1c:	f012 0f04 	tst.w	r2, #4
 8010f20:	f103 0204 	add.w	r2, r3, #4
 8010f24:	600a      	str	r2, [r1, #0]
 8010f26:	d1d9      	bne.n	8010edc <_scanf_float+0x398>
 8010f28:	f8d3 8000 	ldr.w	r8, [r3]
 8010f2c:	ee10 2a10 	vmov	r2, s0
 8010f30:	ee10 0a10 	vmov	r0, s0
 8010f34:	463b      	mov	r3, r7
 8010f36:	4639      	mov	r1, r7
 8010f38:	f7ef fe18 	bl	8000b6c <__aeabi_dcmpun>
 8010f3c:	b128      	cbz	r0, 8010f4a <_scanf_float+0x406>
 8010f3e:	4808      	ldr	r0, [pc, #32]	; (8010f60 <_scanf_float+0x41c>)
 8010f40:	f000 f810 	bl	8010f64 <nanf>
 8010f44:	ed88 0a00 	vstr	s0, [r8]
 8010f48:	e7cb      	b.n	8010ee2 <_scanf_float+0x39e>
 8010f4a:	4630      	mov	r0, r6
 8010f4c:	4639      	mov	r1, r7
 8010f4e:	f7ef fe6b 	bl	8000c28 <__aeabi_d2f>
 8010f52:	f8c8 0000 	str.w	r0, [r8]
 8010f56:	e7c4      	b.n	8010ee2 <_scanf_float+0x39e>
 8010f58:	2500      	movs	r5, #0
 8010f5a:	e634      	b.n	8010bc6 <_scanf_float+0x82>
 8010f5c:	08015936 	.word	0x08015936
 8010f60:	08015d5b 	.word	0x08015d5b

08010f64 <nanf>:
 8010f64:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8010f6c <nanf+0x8>
 8010f68:	4770      	bx	lr
 8010f6a:	bf00      	nop
 8010f6c:	7fc00000 	.word	0x7fc00000

08010f70 <siprintf>:
 8010f70:	b40e      	push	{r1, r2, r3}
 8010f72:	b500      	push	{lr}
 8010f74:	b09c      	sub	sp, #112	; 0x70
 8010f76:	ab1d      	add	r3, sp, #116	; 0x74
 8010f78:	9002      	str	r0, [sp, #8]
 8010f7a:	9006      	str	r0, [sp, #24]
 8010f7c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8010f80:	4809      	ldr	r0, [pc, #36]	; (8010fa8 <siprintf+0x38>)
 8010f82:	9107      	str	r1, [sp, #28]
 8010f84:	9104      	str	r1, [sp, #16]
 8010f86:	4909      	ldr	r1, [pc, #36]	; (8010fac <siprintf+0x3c>)
 8010f88:	f853 2b04 	ldr.w	r2, [r3], #4
 8010f8c:	9105      	str	r1, [sp, #20]
 8010f8e:	6800      	ldr	r0, [r0, #0]
 8010f90:	9301      	str	r3, [sp, #4]
 8010f92:	a902      	add	r1, sp, #8
 8010f94:	f002 ff9a 	bl	8013ecc <_svfiprintf_r>
 8010f98:	9b02      	ldr	r3, [sp, #8]
 8010f9a:	2200      	movs	r2, #0
 8010f9c:	701a      	strb	r2, [r3, #0]
 8010f9e:	b01c      	add	sp, #112	; 0x70
 8010fa0:	f85d eb04 	ldr.w	lr, [sp], #4
 8010fa4:	b003      	add	sp, #12
 8010fa6:	4770      	bx	lr
 8010fa8:	200002c8 	.word	0x200002c8
 8010fac:	ffff0208 	.word	0xffff0208

08010fb0 <siscanf>:
 8010fb0:	b40e      	push	{r1, r2, r3}
 8010fb2:	b510      	push	{r4, lr}
 8010fb4:	b09f      	sub	sp, #124	; 0x7c
 8010fb6:	ac21      	add	r4, sp, #132	; 0x84
 8010fb8:	f44f 7101 	mov.w	r1, #516	; 0x204
 8010fbc:	f854 2b04 	ldr.w	r2, [r4], #4
 8010fc0:	9201      	str	r2, [sp, #4]
 8010fc2:	f8ad 101c 	strh.w	r1, [sp, #28]
 8010fc6:	9004      	str	r0, [sp, #16]
 8010fc8:	9008      	str	r0, [sp, #32]
 8010fca:	f7ef f921 	bl	8000210 <strlen>
 8010fce:	4b0c      	ldr	r3, [pc, #48]	; (8011000 <siscanf+0x50>)
 8010fd0:	9005      	str	r0, [sp, #20]
 8010fd2:	9009      	str	r0, [sp, #36]	; 0x24
 8010fd4:	930d      	str	r3, [sp, #52]	; 0x34
 8010fd6:	480b      	ldr	r0, [pc, #44]	; (8011004 <siscanf+0x54>)
 8010fd8:	9a01      	ldr	r2, [sp, #4]
 8010fda:	6800      	ldr	r0, [r0, #0]
 8010fdc:	9403      	str	r4, [sp, #12]
 8010fde:	2300      	movs	r3, #0
 8010fe0:	9311      	str	r3, [sp, #68]	; 0x44
 8010fe2:	9316      	str	r3, [sp, #88]	; 0x58
 8010fe4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8010fe8:	f8ad 301e 	strh.w	r3, [sp, #30]
 8010fec:	a904      	add	r1, sp, #16
 8010fee:	4623      	mov	r3, r4
 8010ff0:	f003 f8c6 	bl	8014180 <__ssvfiscanf_r>
 8010ff4:	b01f      	add	sp, #124	; 0x7c
 8010ff6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010ffa:	b003      	add	sp, #12
 8010ffc:	4770      	bx	lr
 8010ffe:	bf00      	nop
 8011000:	0801102b 	.word	0x0801102b
 8011004:	200002c8 	.word	0x200002c8

08011008 <__sread>:
 8011008:	b510      	push	{r4, lr}
 801100a:	460c      	mov	r4, r1
 801100c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011010:	f003 fb80 	bl	8014714 <_read_r>
 8011014:	2800      	cmp	r0, #0
 8011016:	bfab      	itete	ge
 8011018:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801101a:	89a3      	ldrhlt	r3, [r4, #12]
 801101c:	181b      	addge	r3, r3, r0
 801101e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8011022:	bfac      	ite	ge
 8011024:	6563      	strge	r3, [r4, #84]	; 0x54
 8011026:	81a3      	strhlt	r3, [r4, #12]
 8011028:	bd10      	pop	{r4, pc}

0801102a <__seofread>:
 801102a:	2000      	movs	r0, #0
 801102c:	4770      	bx	lr

0801102e <__swrite>:
 801102e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011032:	461f      	mov	r7, r3
 8011034:	898b      	ldrh	r3, [r1, #12]
 8011036:	05db      	lsls	r3, r3, #23
 8011038:	4605      	mov	r5, r0
 801103a:	460c      	mov	r4, r1
 801103c:	4616      	mov	r6, r2
 801103e:	d505      	bpl.n	801104c <__swrite+0x1e>
 8011040:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011044:	2302      	movs	r3, #2
 8011046:	2200      	movs	r2, #0
 8011048:	f002 f900 	bl	801324c <_lseek_r>
 801104c:	89a3      	ldrh	r3, [r4, #12]
 801104e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011052:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8011056:	81a3      	strh	r3, [r4, #12]
 8011058:	4632      	mov	r2, r6
 801105a:	463b      	mov	r3, r7
 801105c:	4628      	mov	r0, r5
 801105e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011062:	f000 bee1 	b.w	8011e28 <_write_r>

08011066 <__sseek>:
 8011066:	b510      	push	{r4, lr}
 8011068:	460c      	mov	r4, r1
 801106a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801106e:	f002 f8ed 	bl	801324c <_lseek_r>
 8011072:	1c43      	adds	r3, r0, #1
 8011074:	89a3      	ldrh	r3, [r4, #12]
 8011076:	bf15      	itete	ne
 8011078:	6560      	strne	r0, [r4, #84]	; 0x54
 801107a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801107e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8011082:	81a3      	strheq	r3, [r4, #12]
 8011084:	bf18      	it	ne
 8011086:	81a3      	strhne	r3, [r4, #12]
 8011088:	bd10      	pop	{r4, pc}

0801108a <__sclose>:
 801108a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801108e:	f000 bedd 	b.w	8011e4c <_close_r>

08011092 <strcpy>:
 8011092:	4603      	mov	r3, r0
 8011094:	f811 2b01 	ldrb.w	r2, [r1], #1
 8011098:	f803 2b01 	strb.w	r2, [r3], #1
 801109c:	2a00      	cmp	r2, #0
 801109e:	d1f9      	bne.n	8011094 <strcpy+0x2>
 80110a0:	4770      	bx	lr

080110a2 <strncmp>:
 80110a2:	b510      	push	{r4, lr}
 80110a4:	b17a      	cbz	r2, 80110c6 <strncmp+0x24>
 80110a6:	4603      	mov	r3, r0
 80110a8:	3901      	subs	r1, #1
 80110aa:	1884      	adds	r4, r0, r2
 80110ac:	f813 0b01 	ldrb.w	r0, [r3], #1
 80110b0:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80110b4:	4290      	cmp	r0, r2
 80110b6:	d101      	bne.n	80110bc <strncmp+0x1a>
 80110b8:	42a3      	cmp	r3, r4
 80110ba:	d101      	bne.n	80110c0 <strncmp+0x1e>
 80110bc:	1a80      	subs	r0, r0, r2
 80110be:	bd10      	pop	{r4, pc}
 80110c0:	2800      	cmp	r0, #0
 80110c2:	d1f3      	bne.n	80110ac <strncmp+0xa>
 80110c4:	e7fa      	b.n	80110bc <strncmp+0x1a>
 80110c6:	4610      	mov	r0, r2
 80110c8:	e7f9      	b.n	80110be <strncmp+0x1c>

080110ca <sulp>:
 80110ca:	b570      	push	{r4, r5, r6, lr}
 80110cc:	4604      	mov	r4, r0
 80110ce:	460d      	mov	r5, r1
 80110d0:	ec45 4b10 	vmov	d0, r4, r5
 80110d4:	4616      	mov	r6, r2
 80110d6:	f002 fc57 	bl	8013988 <__ulp>
 80110da:	ec51 0b10 	vmov	r0, r1, d0
 80110de:	b17e      	cbz	r6, 8011100 <sulp+0x36>
 80110e0:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80110e4:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80110e8:	2b00      	cmp	r3, #0
 80110ea:	dd09      	ble.n	8011100 <sulp+0x36>
 80110ec:	051b      	lsls	r3, r3, #20
 80110ee:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 80110f2:	2400      	movs	r4, #0
 80110f4:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 80110f8:	4622      	mov	r2, r4
 80110fa:	462b      	mov	r3, r5
 80110fc:	f7ef fa9c 	bl	8000638 <__aeabi_dmul>
 8011100:	bd70      	pop	{r4, r5, r6, pc}
 8011102:	0000      	movs	r0, r0
 8011104:	0000      	movs	r0, r0
	...

08011108 <_strtod_l>:
 8011108:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801110c:	ed2d 8b02 	vpush	{d8}
 8011110:	b09d      	sub	sp, #116	; 0x74
 8011112:	461f      	mov	r7, r3
 8011114:	2300      	movs	r3, #0
 8011116:	9318      	str	r3, [sp, #96]	; 0x60
 8011118:	4ba2      	ldr	r3, [pc, #648]	; (80113a4 <_strtod_l+0x29c>)
 801111a:	9213      	str	r2, [sp, #76]	; 0x4c
 801111c:	681b      	ldr	r3, [r3, #0]
 801111e:	9305      	str	r3, [sp, #20]
 8011120:	4604      	mov	r4, r0
 8011122:	4618      	mov	r0, r3
 8011124:	4688      	mov	r8, r1
 8011126:	f7ef f873 	bl	8000210 <strlen>
 801112a:	f04f 0a00 	mov.w	sl, #0
 801112e:	4605      	mov	r5, r0
 8011130:	f04f 0b00 	mov.w	fp, #0
 8011134:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8011138:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801113a:	781a      	ldrb	r2, [r3, #0]
 801113c:	2a2b      	cmp	r2, #43	; 0x2b
 801113e:	d04e      	beq.n	80111de <_strtod_l+0xd6>
 8011140:	d83b      	bhi.n	80111ba <_strtod_l+0xb2>
 8011142:	2a0d      	cmp	r2, #13
 8011144:	d834      	bhi.n	80111b0 <_strtod_l+0xa8>
 8011146:	2a08      	cmp	r2, #8
 8011148:	d834      	bhi.n	80111b4 <_strtod_l+0xac>
 801114a:	2a00      	cmp	r2, #0
 801114c:	d03e      	beq.n	80111cc <_strtod_l+0xc4>
 801114e:	2300      	movs	r3, #0
 8011150:	930a      	str	r3, [sp, #40]	; 0x28
 8011152:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8011154:	7833      	ldrb	r3, [r6, #0]
 8011156:	2b30      	cmp	r3, #48	; 0x30
 8011158:	f040 80b0 	bne.w	80112bc <_strtod_l+0x1b4>
 801115c:	7873      	ldrb	r3, [r6, #1]
 801115e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8011162:	2b58      	cmp	r3, #88	; 0x58
 8011164:	d168      	bne.n	8011238 <_strtod_l+0x130>
 8011166:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011168:	9301      	str	r3, [sp, #4]
 801116a:	ab18      	add	r3, sp, #96	; 0x60
 801116c:	9702      	str	r7, [sp, #8]
 801116e:	9300      	str	r3, [sp, #0]
 8011170:	4a8d      	ldr	r2, [pc, #564]	; (80113a8 <_strtod_l+0x2a0>)
 8011172:	ab19      	add	r3, sp, #100	; 0x64
 8011174:	a917      	add	r1, sp, #92	; 0x5c
 8011176:	4620      	mov	r0, r4
 8011178:	f001 fd5c 	bl	8012c34 <__gethex>
 801117c:	f010 0707 	ands.w	r7, r0, #7
 8011180:	4605      	mov	r5, r0
 8011182:	d005      	beq.n	8011190 <_strtod_l+0x88>
 8011184:	2f06      	cmp	r7, #6
 8011186:	d12c      	bne.n	80111e2 <_strtod_l+0xda>
 8011188:	3601      	adds	r6, #1
 801118a:	2300      	movs	r3, #0
 801118c:	9617      	str	r6, [sp, #92]	; 0x5c
 801118e:	930a      	str	r3, [sp, #40]	; 0x28
 8011190:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8011192:	2b00      	cmp	r3, #0
 8011194:	f040 8590 	bne.w	8011cb8 <_strtod_l+0xbb0>
 8011198:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801119a:	b1eb      	cbz	r3, 80111d8 <_strtod_l+0xd0>
 801119c:	4652      	mov	r2, sl
 801119e:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80111a2:	ec43 2b10 	vmov	d0, r2, r3
 80111a6:	b01d      	add	sp, #116	; 0x74
 80111a8:	ecbd 8b02 	vpop	{d8}
 80111ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80111b0:	2a20      	cmp	r2, #32
 80111b2:	d1cc      	bne.n	801114e <_strtod_l+0x46>
 80111b4:	3301      	adds	r3, #1
 80111b6:	9317      	str	r3, [sp, #92]	; 0x5c
 80111b8:	e7be      	b.n	8011138 <_strtod_l+0x30>
 80111ba:	2a2d      	cmp	r2, #45	; 0x2d
 80111bc:	d1c7      	bne.n	801114e <_strtod_l+0x46>
 80111be:	2201      	movs	r2, #1
 80111c0:	920a      	str	r2, [sp, #40]	; 0x28
 80111c2:	1c5a      	adds	r2, r3, #1
 80111c4:	9217      	str	r2, [sp, #92]	; 0x5c
 80111c6:	785b      	ldrb	r3, [r3, #1]
 80111c8:	2b00      	cmp	r3, #0
 80111ca:	d1c2      	bne.n	8011152 <_strtod_l+0x4a>
 80111cc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80111ce:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 80111d2:	2b00      	cmp	r3, #0
 80111d4:	f040 856e 	bne.w	8011cb4 <_strtod_l+0xbac>
 80111d8:	4652      	mov	r2, sl
 80111da:	465b      	mov	r3, fp
 80111dc:	e7e1      	b.n	80111a2 <_strtod_l+0x9a>
 80111de:	2200      	movs	r2, #0
 80111e0:	e7ee      	b.n	80111c0 <_strtod_l+0xb8>
 80111e2:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80111e4:	b13a      	cbz	r2, 80111f6 <_strtod_l+0xee>
 80111e6:	2135      	movs	r1, #53	; 0x35
 80111e8:	a81a      	add	r0, sp, #104	; 0x68
 80111ea:	f002 fcd8 	bl	8013b9e <__copybits>
 80111ee:	9918      	ldr	r1, [sp, #96]	; 0x60
 80111f0:	4620      	mov	r0, r4
 80111f2:	f002 f897 	bl	8013324 <_Bfree>
 80111f6:	3f01      	subs	r7, #1
 80111f8:	2f04      	cmp	r7, #4
 80111fa:	d806      	bhi.n	801120a <_strtod_l+0x102>
 80111fc:	e8df f007 	tbb	[pc, r7]
 8011200:	1714030a 	.word	0x1714030a
 8011204:	0a          	.byte	0x0a
 8011205:	00          	.byte	0x00
 8011206:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 801120a:	0728      	lsls	r0, r5, #28
 801120c:	d5c0      	bpl.n	8011190 <_strtod_l+0x88>
 801120e:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8011212:	e7bd      	b.n	8011190 <_strtod_l+0x88>
 8011214:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 8011218:	9a19      	ldr	r2, [sp, #100]	; 0x64
 801121a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 801121e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8011222:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8011226:	e7f0      	b.n	801120a <_strtod_l+0x102>
 8011228:	f8df b180 	ldr.w	fp, [pc, #384]	; 80113ac <_strtod_l+0x2a4>
 801122c:	e7ed      	b.n	801120a <_strtod_l+0x102>
 801122e:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8011232:	f04f 3aff 	mov.w	sl, #4294967295
 8011236:	e7e8      	b.n	801120a <_strtod_l+0x102>
 8011238:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801123a:	1c5a      	adds	r2, r3, #1
 801123c:	9217      	str	r2, [sp, #92]	; 0x5c
 801123e:	785b      	ldrb	r3, [r3, #1]
 8011240:	2b30      	cmp	r3, #48	; 0x30
 8011242:	d0f9      	beq.n	8011238 <_strtod_l+0x130>
 8011244:	2b00      	cmp	r3, #0
 8011246:	d0a3      	beq.n	8011190 <_strtod_l+0x88>
 8011248:	2301      	movs	r3, #1
 801124a:	f04f 0900 	mov.w	r9, #0
 801124e:	9304      	str	r3, [sp, #16]
 8011250:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8011252:	9308      	str	r3, [sp, #32]
 8011254:	f8cd 901c 	str.w	r9, [sp, #28]
 8011258:	464f      	mov	r7, r9
 801125a:	220a      	movs	r2, #10
 801125c:	9817      	ldr	r0, [sp, #92]	; 0x5c
 801125e:	7806      	ldrb	r6, [r0, #0]
 8011260:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8011264:	b2d9      	uxtb	r1, r3
 8011266:	2909      	cmp	r1, #9
 8011268:	d92a      	bls.n	80112c0 <_strtod_l+0x1b8>
 801126a:	9905      	ldr	r1, [sp, #20]
 801126c:	462a      	mov	r2, r5
 801126e:	f7ff ff18 	bl	80110a2 <strncmp>
 8011272:	b398      	cbz	r0, 80112dc <_strtod_l+0x1d4>
 8011274:	2000      	movs	r0, #0
 8011276:	4632      	mov	r2, r6
 8011278:	463d      	mov	r5, r7
 801127a:	9005      	str	r0, [sp, #20]
 801127c:	4603      	mov	r3, r0
 801127e:	2a65      	cmp	r2, #101	; 0x65
 8011280:	d001      	beq.n	8011286 <_strtod_l+0x17e>
 8011282:	2a45      	cmp	r2, #69	; 0x45
 8011284:	d118      	bne.n	80112b8 <_strtod_l+0x1b0>
 8011286:	b91d      	cbnz	r5, 8011290 <_strtod_l+0x188>
 8011288:	9a04      	ldr	r2, [sp, #16]
 801128a:	4302      	orrs	r2, r0
 801128c:	d09e      	beq.n	80111cc <_strtod_l+0xc4>
 801128e:	2500      	movs	r5, #0
 8011290:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 8011294:	f108 0201 	add.w	r2, r8, #1
 8011298:	9217      	str	r2, [sp, #92]	; 0x5c
 801129a:	f898 2001 	ldrb.w	r2, [r8, #1]
 801129e:	2a2b      	cmp	r2, #43	; 0x2b
 80112a0:	d075      	beq.n	801138e <_strtod_l+0x286>
 80112a2:	2a2d      	cmp	r2, #45	; 0x2d
 80112a4:	d07b      	beq.n	801139e <_strtod_l+0x296>
 80112a6:	f04f 0c00 	mov.w	ip, #0
 80112aa:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 80112ae:	2909      	cmp	r1, #9
 80112b0:	f240 8082 	bls.w	80113b8 <_strtod_l+0x2b0>
 80112b4:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 80112b8:	2600      	movs	r6, #0
 80112ba:	e09d      	b.n	80113f8 <_strtod_l+0x2f0>
 80112bc:	2300      	movs	r3, #0
 80112be:	e7c4      	b.n	801124a <_strtod_l+0x142>
 80112c0:	2f08      	cmp	r7, #8
 80112c2:	bfd8      	it	le
 80112c4:	9907      	ldrle	r1, [sp, #28]
 80112c6:	f100 0001 	add.w	r0, r0, #1
 80112ca:	bfda      	itte	le
 80112cc:	fb02 3301 	mlale	r3, r2, r1, r3
 80112d0:	9307      	strle	r3, [sp, #28]
 80112d2:	fb02 3909 	mlagt	r9, r2, r9, r3
 80112d6:	3701      	adds	r7, #1
 80112d8:	9017      	str	r0, [sp, #92]	; 0x5c
 80112da:	e7bf      	b.n	801125c <_strtod_l+0x154>
 80112dc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80112de:	195a      	adds	r2, r3, r5
 80112e0:	9217      	str	r2, [sp, #92]	; 0x5c
 80112e2:	5d5a      	ldrb	r2, [r3, r5]
 80112e4:	2f00      	cmp	r7, #0
 80112e6:	d037      	beq.n	8011358 <_strtod_l+0x250>
 80112e8:	9005      	str	r0, [sp, #20]
 80112ea:	463d      	mov	r5, r7
 80112ec:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 80112f0:	2b09      	cmp	r3, #9
 80112f2:	d912      	bls.n	801131a <_strtod_l+0x212>
 80112f4:	2301      	movs	r3, #1
 80112f6:	e7c2      	b.n	801127e <_strtod_l+0x176>
 80112f8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80112fa:	1c5a      	adds	r2, r3, #1
 80112fc:	9217      	str	r2, [sp, #92]	; 0x5c
 80112fe:	785a      	ldrb	r2, [r3, #1]
 8011300:	3001      	adds	r0, #1
 8011302:	2a30      	cmp	r2, #48	; 0x30
 8011304:	d0f8      	beq.n	80112f8 <_strtod_l+0x1f0>
 8011306:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 801130a:	2b08      	cmp	r3, #8
 801130c:	f200 84d9 	bhi.w	8011cc2 <_strtod_l+0xbba>
 8011310:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8011312:	9005      	str	r0, [sp, #20]
 8011314:	2000      	movs	r0, #0
 8011316:	9308      	str	r3, [sp, #32]
 8011318:	4605      	mov	r5, r0
 801131a:	3a30      	subs	r2, #48	; 0x30
 801131c:	f100 0301 	add.w	r3, r0, #1
 8011320:	d014      	beq.n	801134c <_strtod_l+0x244>
 8011322:	9905      	ldr	r1, [sp, #20]
 8011324:	4419      	add	r1, r3
 8011326:	9105      	str	r1, [sp, #20]
 8011328:	462b      	mov	r3, r5
 801132a:	eb00 0e05 	add.w	lr, r0, r5
 801132e:	210a      	movs	r1, #10
 8011330:	4573      	cmp	r3, lr
 8011332:	d113      	bne.n	801135c <_strtod_l+0x254>
 8011334:	182b      	adds	r3, r5, r0
 8011336:	2b08      	cmp	r3, #8
 8011338:	f105 0501 	add.w	r5, r5, #1
 801133c:	4405      	add	r5, r0
 801133e:	dc1c      	bgt.n	801137a <_strtod_l+0x272>
 8011340:	9907      	ldr	r1, [sp, #28]
 8011342:	230a      	movs	r3, #10
 8011344:	fb03 2301 	mla	r3, r3, r1, r2
 8011348:	9307      	str	r3, [sp, #28]
 801134a:	2300      	movs	r3, #0
 801134c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 801134e:	1c51      	adds	r1, r2, #1
 8011350:	9117      	str	r1, [sp, #92]	; 0x5c
 8011352:	7852      	ldrb	r2, [r2, #1]
 8011354:	4618      	mov	r0, r3
 8011356:	e7c9      	b.n	80112ec <_strtod_l+0x1e4>
 8011358:	4638      	mov	r0, r7
 801135a:	e7d2      	b.n	8011302 <_strtod_l+0x1fa>
 801135c:	2b08      	cmp	r3, #8
 801135e:	dc04      	bgt.n	801136a <_strtod_l+0x262>
 8011360:	9e07      	ldr	r6, [sp, #28]
 8011362:	434e      	muls	r6, r1
 8011364:	9607      	str	r6, [sp, #28]
 8011366:	3301      	adds	r3, #1
 8011368:	e7e2      	b.n	8011330 <_strtod_l+0x228>
 801136a:	f103 0c01 	add.w	ip, r3, #1
 801136e:	f1bc 0f10 	cmp.w	ip, #16
 8011372:	bfd8      	it	le
 8011374:	fb01 f909 	mulle.w	r9, r1, r9
 8011378:	e7f5      	b.n	8011366 <_strtod_l+0x25e>
 801137a:	2d10      	cmp	r5, #16
 801137c:	bfdc      	itt	le
 801137e:	230a      	movle	r3, #10
 8011380:	fb03 2909 	mlale	r9, r3, r9, r2
 8011384:	e7e1      	b.n	801134a <_strtod_l+0x242>
 8011386:	2300      	movs	r3, #0
 8011388:	9305      	str	r3, [sp, #20]
 801138a:	2301      	movs	r3, #1
 801138c:	e77c      	b.n	8011288 <_strtod_l+0x180>
 801138e:	f04f 0c00 	mov.w	ip, #0
 8011392:	f108 0202 	add.w	r2, r8, #2
 8011396:	9217      	str	r2, [sp, #92]	; 0x5c
 8011398:	f898 2002 	ldrb.w	r2, [r8, #2]
 801139c:	e785      	b.n	80112aa <_strtod_l+0x1a2>
 801139e:	f04f 0c01 	mov.w	ip, #1
 80113a2:	e7f6      	b.n	8011392 <_strtod_l+0x28a>
 80113a4:	08015b88 	.word	0x08015b88
 80113a8:	0801593c 	.word	0x0801593c
 80113ac:	7ff00000 	.word	0x7ff00000
 80113b0:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80113b2:	1c51      	adds	r1, r2, #1
 80113b4:	9117      	str	r1, [sp, #92]	; 0x5c
 80113b6:	7852      	ldrb	r2, [r2, #1]
 80113b8:	2a30      	cmp	r2, #48	; 0x30
 80113ba:	d0f9      	beq.n	80113b0 <_strtod_l+0x2a8>
 80113bc:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 80113c0:	2908      	cmp	r1, #8
 80113c2:	f63f af79 	bhi.w	80112b8 <_strtod_l+0x1b0>
 80113c6:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 80113ca:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80113cc:	9206      	str	r2, [sp, #24]
 80113ce:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80113d0:	1c51      	adds	r1, r2, #1
 80113d2:	9117      	str	r1, [sp, #92]	; 0x5c
 80113d4:	7852      	ldrb	r2, [r2, #1]
 80113d6:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 80113da:	2e09      	cmp	r6, #9
 80113dc:	d937      	bls.n	801144e <_strtod_l+0x346>
 80113de:	9e06      	ldr	r6, [sp, #24]
 80113e0:	1b89      	subs	r1, r1, r6
 80113e2:	2908      	cmp	r1, #8
 80113e4:	f644 661f 	movw	r6, #19999	; 0x4e1f
 80113e8:	dc02      	bgt.n	80113f0 <_strtod_l+0x2e8>
 80113ea:	4576      	cmp	r6, lr
 80113ec:	bfa8      	it	ge
 80113ee:	4676      	movge	r6, lr
 80113f0:	f1bc 0f00 	cmp.w	ip, #0
 80113f4:	d000      	beq.n	80113f8 <_strtod_l+0x2f0>
 80113f6:	4276      	negs	r6, r6
 80113f8:	2d00      	cmp	r5, #0
 80113fa:	d14d      	bne.n	8011498 <_strtod_l+0x390>
 80113fc:	9904      	ldr	r1, [sp, #16]
 80113fe:	4301      	orrs	r1, r0
 8011400:	f47f aec6 	bne.w	8011190 <_strtod_l+0x88>
 8011404:	2b00      	cmp	r3, #0
 8011406:	f47f aee1 	bne.w	80111cc <_strtod_l+0xc4>
 801140a:	2a69      	cmp	r2, #105	; 0x69
 801140c:	d027      	beq.n	801145e <_strtod_l+0x356>
 801140e:	dc24      	bgt.n	801145a <_strtod_l+0x352>
 8011410:	2a49      	cmp	r2, #73	; 0x49
 8011412:	d024      	beq.n	801145e <_strtod_l+0x356>
 8011414:	2a4e      	cmp	r2, #78	; 0x4e
 8011416:	f47f aed9 	bne.w	80111cc <_strtod_l+0xc4>
 801141a:	499f      	ldr	r1, [pc, #636]	; (8011698 <_strtod_l+0x590>)
 801141c:	a817      	add	r0, sp, #92	; 0x5c
 801141e:	f001 fe61 	bl	80130e4 <__match>
 8011422:	2800      	cmp	r0, #0
 8011424:	f43f aed2 	beq.w	80111cc <_strtod_l+0xc4>
 8011428:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801142a:	781b      	ldrb	r3, [r3, #0]
 801142c:	2b28      	cmp	r3, #40	; 0x28
 801142e:	d12d      	bne.n	801148c <_strtod_l+0x384>
 8011430:	499a      	ldr	r1, [pc, #616]	; (801169c <_strtod_l+0x594>)
 8011432:	aa1a      	add	r2, sp, #104	; 0x68
 8011434:	a817      	add	r0, sp, #92	; 0x5c
 8011436:	f001 fe69 	bl	801310c <__hexnan>
 801143a:	2805      	cmp	r0, #5
 801143c:	d126      	bne.n	801148c <_strtod_l+0x384>
 801143e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8011440:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 8011444:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8011448:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 801144c:	e6a0      	b.n	8011190 <_strtod_l+0x88>
 801144e:	210a      	movs	r1, #10
 8011450:	fb01 2e0e 	mla	lr, r1, lr, r2
 8011454:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8011458:	e7b9      	b.n	80113ce <_strtod_l+0x2c6>
 801145a:	2a6e      	cmp	r2, #110	; 0x6e
 801145c:	e7db      	b.n	8011416 <_strtod_l+0x30e>
 801145e:	4990      	ldr	r1, [pc, #576]	; (80116a0 <_strtod_l+0x598>)
 8011460:	a817      	add	r0, sp, #92	; 0x5c
 8011462:	f001 fe3f 	bl	80130e4 <__match>
 8011466:	2800      	cmp	r0, #0
 8011468:	f43f aeb0 	beq.w	80111cc <_strtod_l+0xc4>
 801146c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801146e:	498d      	ldr	r1, [pc, #564]	; (80116a4 <_strtod_l+0x59c>)
 8011470:	3b01      	subs	r3, #1
 8011472:	a817      	add	r0, sp, #92	; 0x5c
 8011474:	9317      	str	r3, [sp, #92]	; 0x5c
 8011476:	f001 fe35 	bl	80130e4 <__match>
 801147a:	b910      	cbnz	r0, 8011482 <_strtod_l+0x37a>
 801147c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801147e:	3301      	adds	r3, #1
 8011480:	9317      	str	r3, [sp, #92]	; 0x5c
 8011482:	f8df b230 	ldr.w	fp, [pc, #560]	; 80116b4 <_strtod_l+0x5ac>
 8011486:	f04f 0a00 	mov.w	sl, #0
 801148a:	e681      	b.n	8011190 <_strtod_l+0x88>
 801148c:	4886      	ldr	r0, [pc, #536]	; (80116a8 <_strtod_l+0x5a0>)
 801148e:	f003 f953 	bl	8014738 <nan>
 8011492:	ec5b ab10 	vmov	sl, fp, d0
 8011496:	e67b      	b.n	8011190 <_strtod_l+0x88>
 8011498:	9b05      	ldr	r3, [sp, #20]
 801149a:	9807      	ldr	r0, [sp, #28]
 801149c:	1af3      	subs	r3, r6, r3
 801149e:	2f00      	cmp	r7, #0
 80114a0:	bf08      	it	eq
 80114a2:	462f      	moveq	r7, r5
 80114a4:	2d10      	cmp	r5, #16
 80114a6:	9306      	str	r3, [sp, #24]
 80114a8:	46a8      	mov	r8, r5
 80114aa:	bfa8      	it	ge
 80114ac:	f04f 0810 	movge.w	r8, #16
 80114b0:	f7ef f848 	bl	8000544 <__aeabi_ui2d>
 80114b4:	2d09      	cmp	r5, #9
 80114b6:	4682      	mov	sl, r0
 80114b8:	468b      	mov	fp, r1
 80114ba:	dd13      	ble.n	80114e4 <_strtod_l+0x3dc>
 80114bc:	4b7b      	ldr	r3, [pc, #492]	; (80116ac <_strtod_l+0x5a4>)
 80114be:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 80114c2:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 80114c6:	f7ef f8b7 	bl	8000638 <__aeabi_dmul>
 80114ca:	4682      	mov	sl, r0
 80114cc:	4648      	mov	r0, r9
 80114ce:	468b      	mov	fp, r1
 80114d0:	f7ef f838 	bl	8000544 <__aeabi_ui2d>
 80114d4:	4602      	mov	r2, r0
 80114d6:	460b      	mov	r3, r1
 80114d8:	4650      	mov	r0, sl
 80114da:	4659      	mov	r1, fp
 80114dc:	f7ee fef6 	bl	80002cc <__adddf3>
 80114e0:	4682      	mov	sl, r0
 80114e2:	468b      	mov	fp, r1
 80114e4:	2d0f      	cmp	r5, #15
 80114e6:	dc38      	bgt.n	801155a <_strtod_l+0x452>
 80114e8:	9b06      	ldr	r3, [sp, #24]
 80114ea:	2b00      	cmp	r3, #0
 80114ec:	f43f ae50 	beq.w	8011190 <_strtod_l+0x88>
 80114f0:	dd24      	ble.n	801153c <_strtod_l+0x434>
 80114f2:	2b16      	cmp	r3, #22
 80114f4:	dc0b      	bgt.n	801150e <_strtod_l+0x406>
 80114f6:	496d      	ldr	r1, [pc, #436]	; (80116ac <_strtod_l+0x5a4>)
 80114f8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80114fc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011500:	4652      	mov	r2, sl
 8011502:	465b      	mov	r3, fp
 8011504:	f7ef f898 	bl	8000638 <__aeabi_dmul>
 8011508:	4682      	mov	sl, r0
 801150a:	468b      	mov	fp, r1
 801150c:	e640      	b.n	8011190 <_strtod_l+0x88>
 801150e:	9a06      	ldr	r2, [sp, #24]
 8011510:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 8011514:	4293      	cmp	r3, r2
 8011516:	db20      	blt.n	801155a <_strtod_l+0x452>
 8011518:	4c64      	ldr	r4, [pc, #400]	; (80116ac <_strtod_l+0x5a4>)
 801151a:	f1c5 050f 	rsb	r5, r5, #15
 801151e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8011522:	4652      	mov	r2, sl
 8011524:	465b      	mov	r3, fp
 8011526:	e9d1 0100 	ldrd	r0, r1, [r1]
 801152a:	f7ef f885 	bl	8000638 <__aeabi_dmul>
 801152e:	9b06      	ldr	r3, [sp, #24]
 8011530:	1b5d      	subs	r5, r3, r5
 8011532:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8011536:	e9d4 2300 	ldrd	r2, r3, [r4]
 801153a:	e7e3      	b.n	8011504 <_strtod_l+0x3fc>
 801153c:	9b06      	ldr	r3, [sp, #24]
 801153e:	3316      	adds	r3, #22
 8011540:	db0b      	blt.n	801155a <_strtod_l+0x452>
 8011542:	9b05      	ldr	r3, [sp, #20]
 8011544:	1b9e      	subs	r6, r3, r6
 8011546:	4b59      	ldr	r3, [pc, #356]	; (80116ac <_strtod_l+0x5a4>)
 8011548:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 801154c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8011550:	4650      	mov	r0, sl
 8011552:	4659      	mov	r1, fp
 8011554:	f7ef f99a 	bl	800088c <__aeabi_ddiv>
 8011558:	e7d6      	b.n	8011508 <_strtod_l+0x400>
 801155a:	9b06      	ldr	r3, [sp, #24]
 801155c:	eba5 0808 	sub.w	r8, r5, r8
 8011560:	4498      	add	r8, r3
 8011562:	f1b8 0f00 	cmp.w	r8, #0
 8011566:	dd74      	ble.n	8011652 <_strtod_l+0x54a>
 8011568:	f018 030f 	ands.w	r3, r8, #15
 801156c:	d00a      	beq.n	8011584 <_strtod_l+0x47c>
 801156e:	494f      	ldr	r1, [pc, #316]	; (80116ac <_strtod_l+0x5a4>)
 8011570:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8011574:	4652      	mov	r2, sl
 8011576:	465b      	mov	r3, fp
 8011578:	e9d1 0100 	ldrd	r0, r1, [r1]
 801157c:	f7ef f85c 	bl	8000638 <__aeabi_dmul>
 8011580:	4682      	mov	sl, r0
 8011582:	468b      	mov	fp, r1
 8011584:	f038 080f 	bics.w	r8, r8, #15
 8011588:	d04f      	beq.n	801162a <_strtod_l+0x522>
 801158a:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 801158e:	dd22      	ble.n	80115d6 <_strtod_l+0x4ce>
 8011590:	2500      	movs	r5, #0
 8011592:	462e      	mov	r6, r5
 8011594:	9507      	str	r5, [sp, #28]
 8011596:	9505      	str	r5, [sp, #20]
 8011598:	2322      	movs	r3, #34	; 0x22
 801159a:	f8df b118 	ldr.w	fp, [pc, #280]	; 80116b4 <_strtod_l+0x5ac>
 801159e:	6023      	str	r3, [r4, #0]
 80115a0:	f04f 0a00 	mov.w	sl, #0
 80115a4:	9b07      	ldr	r3, [sp, #28]
 80115a6:	2b00      	cmp	r3, #0
 80115a8:	f43f adf2 	beq.w	8011190 <_strtod_l+0x88>
 80115ac:	9918      	ldr	r1, [sp, #96]	; 0x60
 80115ae:	4620      	mov	r0, r4
 80115b0:	f001 feb8 	bl	8013324 <_Bfree>
 80115b4:	9905      	ldr	r1, [sp, #20]
 80115b6:	4620      	mov	r0, r4
 80115b8:	f001 feb4 	bl	8013324 <_Bfree>
 80115bc:	4631      	mov	r1, r6
 80115be:	4620      	mov	r0, r4
 80115c0:	f001 feb0 	bl	8013324 <_Bfree>
 80115c4:	9907      	ldr	r1, [sp, #28]
 80115c6:	4620      	mov	r0, r4
 80115c8:	f001 feac 	bl	8013324 <_Bfree>
 80115cc:	4629      	mov	r1, r5
 80115ce:	4620      	mov	r0, r4
 80115d0:	f001 fea8 	bl	8013324 <_Bfree>
 80115d4:	e5dc      	b.n	8011190 <_strtod_l+0x88>
 80115d6:	4b36      	ldr	r3, [pc, #216]	; (80116b0 <_strtod_l+0x5a8>)
 80115d8:	9304      	str	r3, [sp, #16]
 80115da:	2300      	movs	r3, #0
 80115dc:	ea4f 1828 	mov.w	r8, r8, asr #4
 80115e0:	4650      	mov	r0, sl
 80115e2:	4659      	mov	r1, fp
 80115e4:	4699      	mov	r9, r3
 80115e6:	f1b8 0f01 	cmp.w	r8, #1
 80115ea:	dc21      	bgt.n	8011630 <_strtod_l+0x528>
 80115ec:	b10b      	cbz	r3, 80115f2 <_strtod_l+0x4ea>
 80115ee:	4682      	mov	sl, r0
 80115f0:	468b      	mov	fp, r1
 80115f2:	4b2f      	ldr	r3, [pc, #188]	; (80116b0 <_strtod_l+0x5a8>)
 80115f4:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 80115f8:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 80115fc:	4652      	mov	r2, sl
 80115fe:	465b      	mov	r3, fp
 8011600:	e9d9 0100 	ldrd	r0, r1, [r9]
 8011604:	f7ef f818 	bl	8000638 <__aeabi_dmul>
 8011608:	4b2a      	ldr	r3, [pc, #168]	; (80116b4 <_strtod_l+0x5ac>)
 801160a:	460a      	mov	r2, r1
 801160c:	400b      	ands	r3, r1
 801160e:	492a      	ldr	r1, [pc, #168]	; (80116b8 <_strtod_l+0x5b0>)
 8011610:	428b      	cmp	r3, r1
 8011612:	4682      	mov	sl, r0
 8011614:	d8bc      	bhi.n	8011590 <_strtod_l+0x488>
 8011616:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 801161a:	428b      	cmp	r3, r1
 801161c:	bf86      	itte	hi
 801161e:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 80116bc <_strtod_l+0x5b4>
 8011622:	f04f 3aff 	movhi.w	sl, #4294967295
 8011626:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 801162a:	2300      	movs	r3, #0
 801162c:	9304      	str	r3, [sp, #16]
 801162e:	e084      	b.n	801173a <_strtod_l+0x632>
 8011630:	f018 0f01 	tst.w	r8, #1
 8011634:	d005      	beq.n	8011642 <_strtod_l+0x53a>
 8011636:	9b04      	ldr	r3, [sp, #16]
 8011638:	e9d3 2300 	ldrd	r2, r3, [r3]
 801163c:	f7ee fffc 	bl	8000638 <__aeabi_dmul>
 8011640:	2301      	movs	r3, #1
 8011642:	9a04      	ldr	r2, [sp, #16]
 8011644:	3208      	adds	r2, #8
 8011646:	f109 0901 	add.w	r9, r9, #1
 801164a:	ea4f 0868 	mov.w	r8, r8, asr #1
 801164e:	9204      	str	r2, [sp, #16]
 8011650:	e7c9      	b.n	80115e6 <_strtod_l+0x4de>
 8011652:	d0ea      	beq.n	801162a <_strtod_l+0x522>
 8011654:	f1c8 0800 	rsb	r8, r8, #0
 8011658:	f018 020f 	ands.w	r2, r8, #15
 801165c:	d00a      	beq.n	8011674 <_strtod_l+0x56c>
 801165e:	4b13      	ldr	r3, [pc, #76]	; (80116ac <_strtod_l+0x5a4>)
 8011660:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8011664:	4650      	mov	r0, sl
 8011666:	4659      	mov	r1, fp
 8011668:	e9d3 2300 	ldrd	r2, r3, [r3]
 801166c:	f7ef f90e 	bl	800088c <__aeabi_ddiv>
 8011670:	4682      	mov	sl, r0
 8011672:	468b      	mov	fp, r1
 8011674:	ea5f 1828 	movs.w	r8, r8, asr #4
 8011678:	d0d7      	beq.n	801162a <_strtod_l+0x522>
 801167a:	f1b8 0f1f 	cmp.w	r8, #31
 801167e:	dd1f      	ble.n	80116c0 <_strtod_l+0x5b8>
 8011680:	2500      	movs	r5, #0
 8011682:	462e      	mov	r6, r5
 8011684:	9507      	str	r5, [sp, #28]
 8011686:	9505      	str	r5, [sp, #20]
 8011688:	2322      	movs	r3, #34	; 0x22
 801168a:	f04f 0a00 	mov.w	sl, #0
 801168e:	f04f 0b00 	mov.w	fp, #0
 8011692:	6023      	str	r3, [r4, #0]
 8011694:	e786      	b.n	80115a4 <_strtod_l+0x49c>
 8011696:	bf00      	nop
 8011698:	08015911 	.word	0x08015911
 801169c:	08015950 	.word	0x08015950
 80116a0:	08015909 	.word	0x08015909
 80116a4:	08015a94 	.word	0x08015a94
 80116a8:	08015d5b 	.word	0x08015d5b
 80116ac:	08015c20 	.word	0x08015c20
 80116b0:	08015bf8 	.word	0x08015bf8
 80116b4:	7ff00000 	.word	0x7ff00000
 80116b8:	7ca00000 	.word	0x7ca00000
 80116bc:	7fefffff 	.word	0x7fefffff
 80116c0:	f018 0310 	ands.w	r3, r8, #16
 80116c4:	bf18      	it	ne
 80116c6:	236a      	movne	r3, #106	; 0x6a
 80116c8:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 8011a78 <_strtod_l+0x970>
 80116cc:	9304      	str	r3, [sp, #16]
 80116ce:	4650      	mov	r0, sl
 80116d0:	4659      	mov	r1, fp
 80116d2:	2300      	movs	r3, #0
 80116d4:	f018 0f01 	tst.w	r8, #1
 80116d8:	d004      	beq.n	80116e4 <_strtod_l+0x5dc>
 80116da:	e9d9 2300 	ldrd	r2, r3, [r9]
 80116de:	f7ee ffab 	bl	8000638 <__aeabi_dmul>
 80116e2:	2301      	movs	r3, #1
 80116e4:	ea5f 0868 	movs.w	r8, r8, asr #1
 80116e8:	f109 0908 	add.w	r9, r9, #8
 80116ec:	d1f2      	bne.n	80116d4 <_strtod_l+0x5cc>
 80116ee:	b10b      	cbz	r3, 80116f4 <_strtod_l+0x5ec>
 80116f0:	4682      	mov	sl, r0
 80116f2:	468b      	mov	fp, r1
 80116f4:	9b04      	ldr	r3, [sp, #16]
 80116f6:	b1c3      	cbz	r3, 801172a <_strtod_l+0x622>
 80116f8:	f3cb 520a 	ubfx	r2, fp, #20, #11
 80116fc:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8011700:	2b00      	cmp	r3, #0
 8011702:	4659      	mov	r1, fp
 8011704:	dd11      	ble.n	801172a <_strtod_l+0x622>
 8011706:	2b1f      	cmp	r3, #31
 8011708:	f340 8124 	ble.w	8011954 <_strtod_l+0x84c>
 801170c:	2b34      	cmp	r3, #52	; 0x34
 801170e:	bfde      	ittt	le
 8011710:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8011714:	f04f 33ff 	movle.w	r3, #4294967295
 8011718:	fa03 f202 	lslle.w	r2, r3, r2
 801171c:	f04f 0a00 	mov.w	sl, #0
 8011720:	bfcc      	ite	gt
 8011722:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8011726:	ea02 0b01 	andle.w	fp, r2, r1
 801172a:	2200      	movs	r2, #0
 801172c:	2300      	movs	r3, #0
 801172e:	4650      	mov	r0, sl
 8011730:	4659      	mov	r1, fp
 8011732:	f7ef f9e9 	bl	8000b08 <__aeabi_dcmpeq>
 8011736:	2800      	cmp	r0, #0
 8011738:	d1a2      	bne.n	8011680 <_strtod_l+0x578>
 801173a:	9b07      	ldr	r3, [sp, #28]
 801173c:	9300      	str	r3, [sp, #0]
 801173e:	9908      	ldr	r1, [sp, #32]
 8011740:	462b      	mov	r3, r5
 8011742:	463a      	mov	r2, r7
 8011744:	4620      	mov	r0, r4
 8011746:	f001 fe55 	bl	80133f4 <__s2b>
 801174a:	9007      	str	r0, [sp, #28]
 801174c:	2800      	cmp	r0, #0
 801174e:	f43f af1f 	beq.w	8011590 <_strtod_l+0x488>
 8011752:	9b05      	ldr	r3, [sp, #20]
 8011754:	1b9e      	subs	r6, r3, r6
 8011756:	9b06      	ldr	r3, [sp, #24]
 8011758:	2b00      	cmp	r3, #0
 801175a:	bfb4      	ite	lt
 801175c:	4633      	movlt	r3, r6
 801175e:	2300      	movge	r3, #0
 8011760:	930c      	str	r3, [sp, #48]	; 0x30
 8011762:	9b06      	ldr	r3, [sp, #24]
 8011764:	2500      	movs	r5, #0
 8011766:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801176a:	9312      	str	r3, [sp, #72]	; 0x48
 801176c:	462e      	mov	r6, r5
 801176e:	9b07      	ldr	r3, [sp, #28]
 8011770:	4620      	mov	r0, r4
 8011772:	6859      	ldr	r1, [r3, #4]
 8011774:	f001 fd96 	bl	80132a4 <_Balloc>
 8011778:	9005      	str	r0, [sp, #20]
 801177a:	2800      	cmp	r0, #0
 801177c:	f43f af0c 	beq.w	8011598 <_strtod_l+0x490>
 8011780:	9b07      	ldr	r3, [sp, #28]
 8011782:	691a      	ldr	r2, [r3, #16]
 8011784:	3202      	adds	r2, #2
 8011786:	f103 010c 	add.w	r1, r3, #12
 801178a:	0092      	lsls	r2, r2, #2
 801178c:	300c      	adds	r0, #12
 801178e:	f7fe fd59 	bl	8010244 <memcpy>
 8011792:	ec4b ab10 	vmov	d0, sl, fp
 8011796:	aa1a      	add	r2, sp, #104	; 0x68
 8011798:	a919      	add	r1, sp, #100	; 0x64
 801179a:	4620      	mov	r0, r4
 801179c:	f002 f970 	bl	8013a80 <__d2b>
 80117a0:	ec4b ab18 	vmov	d8, sl, fp
 80117a4:	9018      	str	r0, [sp, #96]	; 0x60
 80117a6:	2800      	cmp	r0, #0
 80117a8:	f43f aef6 	beq.w	8011598 <_strtod_l+0x490>
 80117ac:	2101      	movs	r1, #1
 80117ae:	4620      	mov	r0, r4
 80117b0:	f001 feba 	bl	8013528 <__i2b>
 80117b4:	4606      	mov	r6, r0
 80117b6:	2800      	cmp	r0, #0
 80117b8:	f43f aeee 	beq.w	8011598 <_strtod_l+0x490>
 80117bc:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80117be:	9904      	ldr	r1, [sp, #16]
 80117c0:	2b00      	cmp	r3, #0
 80117c2:	bfab      	itete	ge
 80117c4:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 80117c6:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 80117c8:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 80117ca:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 80117ce:	bfac      	ite	ge
 80117d0:	eb03 0902 	addge.w	r9, r3, r2
 80117d4:	1ad7      	sublt	r7, r2, r3
 80117d6:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80117d8:	eba3 0801 	sub.w	r8, r3, r1
 80117dc:	4490      	add	r8, r2
 80117de:	4ba1      	ldr	r3, [pc, #644]	; (8011a64 <_strtod_l+0x95c>)
 80117e0:	f108 38ff 	add.w	r8, r8, #4294967295
 80117e4:	4598      	cmp	r8, r3
 80117e6:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80117ea:	f280 80c7 	bge.w	801197c <_strtod_l+0x874>
 80117ee:	eba3 0308 	sub.w	r3, r3, r8
 80117f2:	2b1f      	cmp	r3, #31
 80117f4:	eba2 0203 	sub.w	r2, r2, r3
 80117f8:	f04f 0101 	mov.w	r1, #1
 80117fc:	f300 80b1 	bgt.w	8011962 <_strtod_l+0x85a>
 8011800:	fa01 f303 	lsl.w	r3, r1, r3
 8011804:	930d      	str	r3, [sp, #52]	; 0x34
 8011806:	2300      	movs	r3, #0
 8011808:	9308      	str	r3, [sp, #32]
 801180a:	eb09 0802 	add.w	r8, r9, r2
 801180e:	9b04      	ldr	r3, [sp, #16]
 8011810:	45c1      	cmp	r9, r8
 8011812:	4417      	add	r7, r2
 8011814:	441f      	add	r7, r3
 8011816:	464b      	mov	r3, r9
 8011818:	bfa8      	it	ge
 801181a:	4643      	movge	r3, r8
 801181c:	42bb      	cmp	r3, r7
 801181e:	bfa8      	it	ge
 8011820:	463b      	movge	r3, r7
 8011822:	2b00      	cmp	r3, #0
 8011824:	bfc2      	ittt	gt
 8011826:	eba8 0803 	subgt.w	r8, r8, r3
 801182a:	1aff      	subgt	r7, r7, r3
 801182c:	eba9 0903 	subgt.w	r9, r9, r3
 8011830:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8011832:	2b00      	cmp	r3, #0
 8011834:	dd17      	ble.n	8011866 <_strtod_l+0x75e>
 8011836:	4631      	mov	r1, r6
 8011838:	461a      	mov	r2, r3
 801183a:	4620      	mov	r0, r4
 801183c:	f001 ff34 	bl	80136a8 <__pow5mult>
 8011840:	4606      	mov	r6, r0
 8011842:	2800      	cmp	r0, #0
 8011844:	f43f aea8 	beq.w	8011598 <_strtod_l+0x490>
 8011848:	4601      	mov	r1, r0
 801184a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801184c:	4620      	mov	r0, r4
 801184e:	f001 fe81 	bl	8013554 <__multiply>
 8011852:	900b      	str	r0, [sp, #44]	; 0x2c
 8011854:	2800      	cmp	r0, #0
 8011856:	f43f ae9f 	beq.w	8011598 <_strtod_l+0x490>
 801185a:	9918      	ldr	r1, [sp, #96]	; 0x60
 801185c:	4620      	mov	r0, r4
 801185e:	f001 fd61 	bl	8013324 <_Bfree>
 8011862:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011864:	9318      	str	r3, [sp, #96]	; 0x60
 8011866:	f1b8 0f00 	cmp.w	r8, #0
 801186a:	f300 808c 	bgt.w	8011986 <_strtod_l+0x87e>
 801186e:	9b06      	ldr	r3, [sp, #24]
 8011870:	2b00      	cmp	r3, #0
 8011872:	dd08      	ble.n	8011886 <_strtod_l+0x77e>
 8011874:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8011876:	9905      	ldr	r1, [sp, #20]
 8011878:	4620      	mov	r0, r4
 801187a:	f001 ff15 	bl	80136a8 <__pow5mult>
 801187e:	9005      	str	r0, [sp, #20]
 8011880:	2800      	cmp	r0, #0
 8011882:	f43f ae89 	beq.w	8011598 <_strtod_l+0x490>
 8011886:	2f00      	cmp	r7, #0
 8011888:	dd08      	ble.n	801189c <_strtod_l+0x794>
 801188a:	9905      	ldr	r1, [sp, #20]
 801188c:	463a      	mov	r2, r7
 801188e:	4620      	mov	r0, r4
 8011890:	f001 ff64 	bl	801375c <__lshift>
 8011894:	9005      	str	r0, [sp, #20]
 8011896:	2800      	cmp	r0, #0
 8011898:	f43f ae7e 	beq.w	8011598 <_strtod_l+0x490>
 801189c:	f1b9 0f00 	cmp.w	r9, #0
 80118a0:	dd08      	ble.n	80118b4 <_strtod_l+0x7ac>
 80118a2:	4631      	mov	r1, r6
 80118a4:	464a      	mov	r2, r9
 80118a6:	4620      	mov	r0, r4
 80118a8:	f001 ff58 	bl	801375c <__lshift>
 80118ac:	4606      	mov	r6, r0
 80118ae:	2800      	cmp	r0, #0
 80118b0:	f43f ae72 	beq.w	8011598 <_strtod_l+0x490>
 80118b4:	9a05      	ldr	r2, [sp, #20]
 80118b6:	9918      	ldr	r1, [sp, #96]	; 0x60
 80118b8:	4620      	mov	r0, r4
 80118ba:	f001 ffdb 	bl	8013874 <__mdiff>
 80118be:	4605      	mov	r5, r0
 80118c0:	2800      	cmp	r0, #0
 80118c2:	f43f ae69 	beq.w	8011598 <_strtod_l+0x490>
 80118c6:	68c3      	ldr	r3, [r0, #12]
 80118c8:	930b      	str	r3, [sp, #44]	; 0x2c
 80118ca:	2300      	movs	r3, #0
 80118cc:	60c3      	str	r3, [r0, #12]
 80118ce:	4631      	mov	r1, r6
 80118d0:	f001 ffb4 	bl	801383c <__mcmp>
 80118d4:	2800      	cmp	r0, #0
 80118d6:	da60      	bge.n	801199a <_strtod_l+0x892>
 80118d8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80118da:	ea53 030a 	orrs.w	r3, r3, sl
 80118de:	f040 8082 	bne.w	80119e6 <_strtod_l+0x8de>
 80118e2:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80118e6:	2b00      	cmp	r3, #0
 80118e8:	d17d      	bne.n	80119e6 <_strtod_l+0x8de>
 80118ea:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80118ee:	0d1b      	lsrs	r3, r3, #20
 80118f0:	051b      	lsls	r3, r3, #20
 80118f2:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80118f6:	d976      	bls.n	80119e6 <_strtod_l+0x8de>
 80118f8:	696b      	ldr	r3, [r5, #20]
 80118fa:	b913      	cbnz	r3, 8011902 <_strtod_l+0x7fa>
 80118fc:	692b      	ldr	r3, [r5, #16]
 80118fe:	2b01      	cmp	r3, #1
 8011900:	dd71      	ble.n	80119e6 <_strtod_l+0x8de>
 8011902:	4629      	mov	r1, r5
 8011904:	2201      	movs	r2, #1
 8011906:	4620      	mov	r0, r4
 8011908:	f001 ff28 	bl	801375c <__lshift>
 801190c:	4631      	mov	r1, r6
 801190e:	4605      	mov	r5, r0
 8011910:	f001 ff94 	bl	801383c <__mcmp>
 8011914:	2800      	cmp	r0, #0
 8011916:	dd66      	ble.n	80119e6 <_strtod_l+0x8de>
 8011918:	9904      	ldr	r1, [sp, #16]
 801191a:	4a53      	ldr	r2, [pc, #332]	; (8011a68 <_strtod_l+0x960>)
 801191c:	465b      	mov	r3, fp
 801191e:	2900      	cmp	r1, #0
 8011920:	f000 8081 	beq.w	8011a26 <_strtod_l+0x91e>
 8011924:	ea02 010b 	and.w	r1, r2, fp
 8011928:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 801192c:	dc7b      	bgt.n	8011a26 <_strtod_l+0x91e>
 801192e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8011932:	f77f aea9 	ble.w	8011688 <_strtod_l+0x580>
 8011936:	4b4d      	ldr	r3, [pc, #308]	; (8011a6c <_strtod_l+0x964>)
 8011938:	4650      	mov	r0, sl
 801193a:	4659      	mov	r1, fp
 801193c:	2200      	movs	r2, #0
 801193e:	f7ee fe7b 	bl	8000638 <__aeabi_dmul>
 8011942:	460b      	mov	r3, r1
 8011944:	4303      	orrs	r3, r0
 8011946:	bf08      	it	eq
 8011948:	2322      	moveq	r3, #34	; 0x22
 801194a:	4682      	mov	sl, r0
 801194c:	468b      	mov	fp, r1
 801194e:	bf08      	it	eq
 8011950:	6023      	streq	r3, [r4, #0]
 8011952:	e62b      	b.n	80115ac <_strtod_l+0x4a4>
 8011954:	f04f 32ff 	mov.w	r2, #4294967295
 8011958:	fa02 f303 	lsl.w	r3, r2, r3
 801195c:	ea03 0a0a 	and.w	sl, r3, sl
 8011960:	e6e3      	b.n	801172a <_strtod_l+0x622>
 8011962:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 8011966:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 801196a:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 801196e:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 8011972:	fa01 f308 	lsl.w	r3, r1, r8
 8011976:	9308      	str	r3, [sp, #32]
 8011978:	910d      	str	r1, [sp, #52]	; 0x34
 801197a:	e746      	b.n	801180a <_strtod_l+0x702>
 801197c:	2300      	movs	r3, #0
 801197e:	9308      	str	r3, [sp, #32]
 8011980:	2301      	movs	r3, #1
 8011982:	930d      	str	r3, [sp, #52]	; 0x34
 8011984:	e741      	b.n	801180a <_strtod_l+0x702>
 8011986:	9918      	ldr	r1, [sp, #96]	; 0x60
 8011988:	4642      	mov	r2, r8
 801198a:	4620      	mov	r0, r4
 801198c:	f001 fee6 	bl	801375c <__lshift>
 8011990:	9018      	str	r0, [sp, #96]	; 0x60
 8011992:	2800      	cmp	r0, #0
 8011994:	f47f af6b 	bne.w	801186e <_strtod_l+0x766>
 8011998:	e5fe      	b.n	8011598 <_strtod_l+0x490>
 801199a:	465f      	mov	r7, fp
 801199c:	d16e      	bne.n	8011a7c <_strtod_l+0x974>
 801199e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80119a0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80119a4:	b342      	cbz	r2, 80119f8 <_strtod_l+0x8f0>
 80119a6:	4a32      	ldr	r2, [pc, #200]	; (8011a70 <_strtod_l+0x968>)
 80119a8:	4293      	cmp	r3, r2
 80119aa:	d128      	bne.n	80119fe <_strtod_l+0x8f6>
 80119ac:	9b04      	ldr	r3, [sp, #16]
 80119ae:	4651      	mov	r1, sl
 80119b0:	b1eb      	cbz	r3, 80119ee <_strtod_l+0x8e6>
 80119b2:	4b2d      	ldr	r3, [pc, #180]	; (8011a68 <_strtod_l+0x960>)
 80119b4:	403b      	ands	r3, r7
 80119b6:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80119ba:	f04f 32ff 	mov.w	r2, #4294967295
 80119be:	d819      	bhi.n	80119f4 <_strtod_l+0x8ec>
 80119c0:	0d1b      	lsrs	r3, r3, #20
 80119c2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80119c6:	fa02 f303 	lsl.w	r3, r2, r3
 80119ca:	4299      	cmp	r1, r3
 80119cc:	d117      	bne.n	80119fe <_strtod_l+0x8f6>
 80119ce:	4b29      	ldr	r3, [pc, #164]	; (8011a74 <_strtod_l+0x96c>)
 80119d0:	429f      	cmp	r7, r3
 80119d2:	d102      	bne.n	80119da <_strtod_l+0x8d2>
 80119d4:	3101      	adds	r1, #1
 80119d6:	f43f addf 	beq.w	8011598 <_strtod_l+0x490>
 80119da:	4b23      	ldr	r3, [pc, #140]	; (8011a68 <_strtod_l+0x960>)
 80119dc:	403b      	ands	r3, r7
 80119de:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 80119e2:	f04f 0a00 	mov.w	sl, #0
 80119e6:	9b04      	ldr	r3, [sp, #16]
 80119e8:	2b00      	cmp	r3, #0
 80119ea:	d1a4      	bne.n	8011936 <_strtod_l+0x82e>
 80119ec:	e5de      	b.n	80115ac <_strtod_l+0x4a4>
 80119ee:	f04f 33ff 	mov.w	r3, #4294967295
 80119f2:	e7ea      	b.n	80119ca <_strtod_l+0x8c2>
 80119f4:	4613      	mov	r3, r2
 80119f6:	e7e8      	b.n	80119ca <_strtod_l+0x8c2>
 80119f8:	ea53 030a 	orrs.w	r3, r3, sl
 80119fc:	d08c      	beq.n	8011918 <_strtod_l+0x810>
 80119fe:	9b08      	ldr	r3, [sp, #32]
 8011a00:	b1db      	cbz	r3, 8011a3a <_strtod_l+0x932>
 8011a02:	423b      	tst	r3, r7
 8011a04:	d0ef      	beq.n	80119e6 <_strtod_l+0x8de>
 8011a06:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011a08:	9a04      	ldr	r2, [sp, #16]
 8011a0a:	4650      	mov	r0, sl
 8011a0c:	4659      	mov	r1, fp
 8011a0e:	b1c3      	cbz	r3, 8011a42 <_strtod_l+0x93a>
 8011a10:	f7ff fb5b 	bl	80110ca <sulp>
 8011a14:	4602      	mov	r2, r0
 8011a16:	460b      	mov	r3, r1
 8011a18:	ec51 0b18 	vmov	r0, r1, d8
 8011a1c:	f7ee fc56 	bl	80002cc <__adddf3>
 8011a20:	4682      	mov	sl, r0
 8011a22:	468b      	mov	fp, r1
 8011a24:	e7df      	b.n	80119e6 <_strtod_l+0x8de>
 8011a26:	4013      	ands	r3, r2
 8011a28:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8011a2c:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8011a30:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8011a34:	f04f 3aff 	mov.w	sl, #4294967295
 8011a38:	e7d5      	b.n	80119e6 <_strtod_l+0x8de>
 8011a3a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011a3c:	ea13 0f0a 	tst.w	r3, sl
 8011a40:	e7e0      	b.n	8011a04 <_strtod_l+0x8fc>
 8011a42:	f7ff fb42 	bl	80110ca <sulp>
 8011a46:	4602      	mov	r2, r0
 8011a48:	460b      	mov	r3, r1
 8011a4a:	ec51 0b18 	vmov	r0, r1, d8
 8011a4e:	f7ee fc3b 	bl	80002c8 <__aeabi_dsub>
 8011a52:	2200      	movs	r2, #0
 8011a54:	2300      	movs	r3, #0
 8011a56:	4682      	mov	sl, r0
 8011a58:	468b      	mov	fp, r1
 8011a5a:	f7ef f855 	bl	8000b08 <__aeabi_dcmpeq>
 8011a5e:	2800      	cmp	r0, #0
 8011a60:	d0c1      	beq.n	80119e6 <_strtod_l+0x8de>
 8011a62:	e611      	b.n	8011688 <_strtod_l+0x580>
 8011a64:	fffffc02 	.word	0xfffffc02
 8011a68:	7ff00000 	.word	0x7ff00000
 8011a6c:	39500000 	.word	0x39500000
 8011a70:	000fffff 	.word	0x000fffff
 8011a74:	7fefffff 	.word	0x7fefffff
 8011a78:	08015968 	.word	0x08015968
 8011a7c:	4631      	mov	r1, r6
 8011a7e:	4628      	mov	r0, r5
 8011a80:	f002 f85a 	bl	8013b38 <__ratio>
 8011a84:	ec59 8b10 	vmov	r8, r9, d0
 8011a88:	ee10 0a10 	vmov	r0, s0
 8011a8c:	2200      	movs	r2, #0
 8011a8e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8011a92:	4649      	mov	r1, r9
 8011a94:	f7ef f84c 	bl	8000b30 <__aeabi_dcmple>
 8011a98:	2800      	cmp	r0, #0
 8011a9a:	d07a      	beq.n	8011b92 <_strtod_l+0xa8a>
 8011a9c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011a9e:	2b00      	cmp	r3, #0
 8011aa0:	d04a      	beq.n	8011b38 <_strtod_l+0xa30>
 8011aa2:	4b95      	ldr	r3, [pc, #596]	; (8011cf8 <_strtod_l+0xbf0>)
 8011aa4:	2200      	movs	r2, #0
 8011aa6:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8011aaa:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8011cf8 <_strtod_l+0xbf0>
 8011aae:	f04f 0800 	mov.w	r8, #0
 8011ab2:	4b92      	ldr	r3, [pc, #584]	; (8011cfc <_strtod_l+0xbf4>)
 8011ab4:	403b      	ands	r3, r7
 8011ab6:	930d      	str	r3, [sp, #52]	; 0x34
 8011ab8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8011aba:	4b91      	ldr	r3, [pc, #580]	; (8011d00 <_strtod_l+0xbf8>)
 8011abc:	429a      	cmp	r2, r3
 8011abe:	f040 80b0 	bne.w	8011c22 <_strtod_l+0xb1a>
 8011ac2:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8011ac6:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 8011aca:	ec4b ab10 	vmov	d0, sl, fp
 8011ace:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8011ad2:	f001 ff59 	bl	8013988 <__ulp>
 8011ad6:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8011ada:	ec53 2b10 	vmov	r2, r3, d0
 8011ade:	f7ee fdab 	bl	8000638 <__aeabi_dmul>
 8011ae2:	4652      	mov	r2, sl
 8011ae4:	465b      	mov	r3, fp
 8011ae6:	f7ee fbf1 	bl	80002cc <__adddf3>
 8011aea:	460b      	mov	r3, r1
 8011aec:	4983      	ldr	r1, [pc, #524]	; (8011cfc <_strtod_l+0xbf4>)
 8011aee:	4a85      	ldr	r2, [pc, #532]	; (8011d04 <_strtod_l+0xbfc>)
 8011af0:	4019      	ands	r1, r3
 8011af2:	4291      	cmp	r1, r2
 8011af4:	4682      	mov	sl, r0
 8011af6:	d960      	bls.n	8011bba <_strtod_l+0xab2>
 8011af8:	ee18 3a90 	vmov	r3, s17
 8011afc:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8011b00:	4293      	cmp	r3, r2
 8011b02:	d104      	bne.n	8011b0e <_strtod_l+0xa06>
 8011b04:	ee18 3a10 	vmov	r3, s16
 8011b08:	3301      	adds	r3, #1
 8011b0a:	f43f ad45 	beq.w	8011598 <_strtod_l+0x490>
 8011b0e:	f8df b200 	ldr.w	fp, [pc, #512]	; 8011d10 <_strtod_l+0xc08>
 8011b12:	f04f 3aff 	mov.w	sl, #4294967295
 8011b16:	9918      	ldr	r1, [sp, #96]	; 0x60
 8011b18:	4620      	mov	r0, r4
 8011b1a:	f001 fc03 	bl	8013324 <_Bfree>
 8011b1e:	9905      	ldr	r1, [sp, #20]
 8011b20:	4620      	mov	r0, r4
 8011b22:	f001 fbff 	bl	8013324 <_Bfree>
 8011b26:	4631      	mov	r1, r6
 8011b28:	4620      	mov	r0, r4
 8011b2a:	f001 fbfb 	bl	8013324 <_Bfree>
 8011b2e:	4629      	mov	r1, r5
 8011b30:	4620      	mov	r0, r4
 8011b32:	f001 fbf7 	bl	8013324 <_Bfree>
 8011b36:	e61a      	b.n	801176e <_strtod_l+0x666>
 8011b38:	f1ba 0f00 	cmp.w	sl, #0
 8011b3c:	d11b      	bne.n	8011b76 <_strtod_l+0xa6e>
 8011b3e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8011b42:	b9f3      	cbnz	r3, 8011b82 <_strtod_l+0xa7a>
 8011b44:	4b6c      	ldr	r3, [pc, #432]	; (8011cf8 <_strtod_l+0xbf0>)
 8011b46:	2200      	movs	r2, #0
 8011b48:	4640      	mov	r0, r8
 8011b4a:	4649      	mov	r1, r9
 8011b4c:	f7ee ffe6 	bl	8000b1c <__aeabi_dcmplt>
 8011b50:	b9d0      	cbnz	r0, 8011b88 <_strtod_l+0xa80>
 8011b52:	4640      	mov	r0, r8
 8011b54:	4649      	mov	r1, r9
 8011b56:	4b6c      	ldr	r3, [pc, #432]	; (8011d08 <_strtod_l+0xc00>)
 8011b58:	2200      	movs	r2, #0
 8011b5a:	f7ee fd6d 	bl	8000638 <__aeabi_dmul>
 8011b5e:	4680      	mov	r8, r0
 8011b60:	4689      	mov	r9, r1
 8011b62:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8011b66:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 8011b6a:	9315      	str	r3, [sp, #84]	; 0x54
 8011b6c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8011b70:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8011b74:	e79d      	b.n	8011ab2 <_strtod_l+0x9aa>
 8011b76:	f1ba 0f01 	cmp.w	sl, #1
 8011b7a:	d102      	bne.n	8011b82 <_strtod_l+0xa7a>
 8011b7c:	2f00      	cmp	r7, #0
 8011b7e:	f43f ad83 	beq.w	8011688 <_strtod_l+0x580>
 8011b82:	4b62      	ldr	r3, [pc, #392]	; (8011d0c <_strtod_l+0xc04>)
 8011b84:	2200      	movs	r2, #0
 8011b86:	e78e      	b.n	8011aa6 <_strtod_l+0x99e>
 8011b88:	f8df 917c 	ldr.w	r9, [pc, #380]	; 8011d08 <_strtod_l+0xc00>
 8011b8c:	f04f 0800 	mov.w	r8, #0
 8011b90:	e7e7      	b.n	8011b62 <_strtod_l+0xa5a>
 8011b92:	4b5d      	ldr	r3, [pc, #372]	; (8011d08 <_strtod_l+0xc00>)
 8011b94:	4640      	mov	r0, r8
 8011b96:	4649      	mov	r1, r9
 8011b98:	2200      	movs	r2, #0
 8011b9a:	f7ee fd4d 	bl	8000638 <__aeabi_dmul>
 8011b9e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011ba0:	4680      	mov	r8, r0
 8011ba2:	4689      	mov	r9, r1
 8011ba4:	b933      	cbnz	r3, 8011bb4 <_strtod_l+0xaac>
 8011ba6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8011baa:	900e      	str	r0, [sp, #56]	; 0x38
 8011bac:	930f      	str	r3, [sp, #60]	; 0x3c
 8011bae:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8011bb2:	e7dd      	b.n	8011b70 <_strtod_l+0xa68>
 8011bb4:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 8011bb8:	e7f9      	b.n	8011bae <_strtod_l+0xaa6>
 8011bba:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8011bbe:	9b04      	ldr	r3, [sp, #16]
 8011bc0:	2b00      	cmp	r3, #0
 8011bc2:	d1a8      	bne.n	8011b16 <_strtod_l+0xa0e>
 8011bc4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8011bc8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8011bca:	0d1b      	lsrs	r3, r3, #20
 8011bcc:	051b      	lsls	r3, r3, #20
 8011bce:	429a      	cmp	r2, r3
 8011bd0:	d1a1      	bne.n	8011b16 <_strtod_l+0xa0e>
 8011bd2:	4640      	mov	r0, r8
 8011bd4:	4649      	mov	r1, r9
 8011bd6:	f7ef f88f 	bl	8000cf8 <__aeabi_d2lz>
 8011bda:	f7ee fcff 	bl	80005dc <__aeabi_l2d>
 8011bde:	4602      	mov	r2, r0
 8011be0:	460b      	mov	r3, r1
 8011be2:	4640      	mov	r0, r8
 8011be4:	4649      	mov	r1, r9
 8011be6:	f7ee fb6f 	bl	80002c8 <__aeabi_dsub>
 8011bea:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8011bec:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8011bf0:	ea43 030a 	orr.w	r3, r3, sl
 8011bf4:	4313      	orrs	r3, r2
 8011bf6:	4680      	mov	r8, r0
 8011bf8:	4689      	mov	r9, r1
 8011bfa:	d055      	beq.n	8011ca8 <_strtod_l+0xba0>
 8011bfc:	a336      	add	r3, pc, #216	; (adr r3, 8011cd8 <_strtod_l+0xbd0>)
 8011bfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011c02:	f7ee ff8b 	bl	8000b1c <__aeabi_dcmplt>
 8011c06:	2800      	cmp	r0, #0
 8011c08:	f47f acd0 	bne.w	80115ac <_strtod_l+0x4a4>
 8011c0c:	a334      	add	r3, pc, #208	; (adr r3, 8011ce0 <_strtod_l+0xbd8>)
 8011c0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011c12:	4640      	mov	r0, r8
 8011c14:	4649      	mov	r1, r9
 8011c16:	f7ee ff9f 	bl	8000b58 <__aeabi_dcmpgt>
 8011c1a:	2800      	cmp	r0, #0
 8011c1c:	f43f af7b 	beq.w	8011b16 <_strtod_l+0xa0e>
 8011c20:	e4c4      	b.n	80115ac <_strtod_l+0x4a4>
 8011c22:	9b04      	ldr	r3, [sp, #16]
 8011c24:	b333      	cbz	r3, 8011c74 <_strtod_l+0xb6c>
 8011c26:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011c28:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8011c2c:	d822      	bhi.n	8011c74 <_strtod_l+0xb6c>
 8011c2e:	a32e      	add	r3, pc, #184	; (adr r3, 8011ce8 <_strtod_l+0xbe0>)
 8011c30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011c34:	4640      	mov	r0, r8
 8011c36:	4649      	mov	r1, r9
 8011c38:	f7ee ff7a 	bl	8000b30 <__aeabi_dcmple>
 8011c3c:	b1a0      	cbz	r0, 8011c68 <_strtod_l+0xb60>
 8011c3e:	4649      	mov	r1, r9
 8011c40:	4640      	mov	r0, r8
 8011c42:	f7ee ffd1 	bl	8000be8 <__aeabi_d2uiz>
 8011c46:	2801      	cmp	r0, #1
 8011c48:	bf38      	it	cc
 8011c4a:	2001      	movcc	r0, #1
 8011c4c:	f7ee fc7a 	bl	8000544 <__aeabi_ui2d>
 8011c50:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011c52:	4680      	mov	r8, r0
 8011c54:	4689      	mov	r9, r1
 8011c56:	bb23      	cbnz	r3, 8011ca2 <_strtod_l+0xb9a>
 8011c58:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8011c5c:	9010      	str	r0, [sp, #64]	; 0x40
 8011c5e:	9311      	str	r3, [sp, #68]	; 0x44
 8011c60:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8011c64:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8011c68:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011c6a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8011c6c:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8011c70:	1a9b      	subs	r3, r3, r2
 8011c72:	9309      	str	r3, [sp, #36]	; 0x24
 8011c74:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8011c78:	eeb0 0a48 	vmov.f32	s0, s16
 8011c7c:	eef0 0a68 	vmov.f32	s1, s17
 8011c80:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8011c84:	f001 fe80 	bl	8013988 <__ulp>
 8011c88:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8011c8c:	ec53 2b10 	vmov	r2, r3, d0
 8011c90:	f7ee fcd2 	bl	8000638 <__aeabi_dmul>
 8011c94:	ec53 2b18 	vmov	r2, r3, d8
 8011c98:	f7ee fb18 	bl	80002cc <__adddf3>
 8011c9c:	4682      	mov	sl, r0
 8011c9e:	468b      	mov	fp, r1
 8011ca0:	e78d      	b.n	8011bbe <_strtod_l+0xab6>
 8011ca2:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 8011ca6:	e7db      	b.n	8011c60 <_strtod_l+0xb58>
 8011ca8:	a311      	add	r3, pc, #68	; (adr r3, 8011cf0 <_strtod_l+0xbe8>)
 8011caa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011cae:	f7ee ff35 	bl	8000b1c <__aeabi_dcmplt>
 8011cb2:	e7b2      	b.n	8011c1a <_strtod_l+0xb12>
 8011cb4:	2300      	movs	r3, #0
 8011cb6:	930a      	str	r3, [sp, #40]	; 0x28
 8011cb8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8011cba:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8011cbc:	6013      	str	r3, [r2, #0]
 8011cbe:	f7ff ba6b 	b.w	8011198 <_strtod_l+0x90>
 8011cc2:	2a65      	cmp	r2, #101	; 0x65
 8011cc4:	f43f ab5f 	beq.w	8011386 <_strtod_l+0x27e>
 8011cc8:	2a45      	cmp	r2, #69	; 0x45
 8011cca:	f43f ab5c 	beq.w	8011386 <_strtod_l+0x27e>
 8011cce:	2301      	movs	r3, #1
 8011cd0:	f7ff bb94 	b.w	80113fc <_strtod_l+0x2f4>
 8011cd4:	f3af 8000 	nop.w
 8011cd8:	94a03595 	.word	0x94a03595
 8011cdc:	3fdfffff 	.word	0x3fdfffff
 8011ce0:	35afe535 	.word	0x35afe535
 8011ce4:	3fe00000 	.word	0x3fe00000
 8011ce8:	ffc00000 	.word	0xffc00000
 8011cec:	41dfffff 	.word	0x41dfffff
 8011cf0:	94a03595 	.word	0x94a03595
 8011cf4:	3fcfffff 	.word	0x3fcfffff
 8011cf8:	3ff00000 	.word	0x3ff00000
 8011cfc:	7ff00000 	.word	0x7ff00000
 8011d00:	7fe00000 	.word	0x7fe00000
 8011d04:	7c9fffff 	.word	0x7c9fffff
 8011d08:	3fe00000 	.word	0x3fe00000
 8011d0c:	bff00000 	.word	0xbff00000
 8011d10:	7fefffff 	.word	0x7fefffff

08011d14 <_strtod_r>:
 8011d14:	4b01      	ldr	r3, [pc, #4]	; (8011d1c <_strtod_r+0x8>)
 8011d16:	f7ff b9f7 	b.w	8011108 <_strtod_l>
 8011d1a:	bf00      	nop
 8011d1c:	20000330 	.word	0x20000330

08011d20 <_strtol_l.constprop.0>:
 8011d20:	2b01      	cmp	r3, #1
 8011d22:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011d26:	d001      	beq.n	8011d2c <_strtol_l.constprop.0+0xc>
 8011d28:	2b24      	cmp	r3, #36	; 0x24
 8011d2a:	d906      	bls.n	8011d3a <_strtol_l.constprop.0+0x1a>
 8011d2c:	f7fe fa60 	bl	80101f0 <__errno>
 8011d30:	2316      	movs	r3, #22
 8011d32:	6003      	str	r3, [r0, #0]
 8011d34:	2000      	movs	r0, #0
 8011d36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011d3a:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8011e20 <_strtol_l.constprop.0+0x100>
 8011d3e:	460d      	mov	r5, r1
 8011d40:	462e      	mov	r6, r5
 8011d42:	f815 4b01 	ldrb.w	r4, [r5], #1
 8011d46:	f814 700c 	ldrb.w	r7, [r4, ip]
 8011d4a:	f017 0708 	ands.w	r7, r7, #8
 8011d4e:	d1f7      	bne.n	8011d40 <_strtol_l.constprop.0+0x20>
 8011d50:	2c2d      	cmp	r4, #45	; 0x2d
 8011d52:	d132      	bne.n	8011dba <_strtol_l.constprop.0+0x9a>
 8011d54:	782c      	ldrb	r4, [r5, #0]
 8011d56:	2701      	movs	r7, #1
 8011d58:	1cb5      	adds	r5, r6, #2
 8011d5a:	2b00      	cmp	r3, #0
 8011d5c:	d05b      	beq.n	8011e16 <_strtol_l.constprop.0+0xf6>
 8011d5e:	2b10      	cmp	r3, #16
 8011d60:	d109      	bne.n	8011d76 <_strtol_l.constprop.0+0x56>
 8011d62:	2c30      	cmp	r4, #48	; 0x30
 8011d64:	d107      	bne.n	8011d76 <_strtol_l.constprop.0+0x56>
 8011d66:	782c      	ldrb	r4, [r5, #0]
 8011d68:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8011d6c:	2c58      	cmp	r4, #88	; 0x58
 8011d6e:	d14d      	bne.n	8011e0c <_strtol_l.constprop.0+0xec>
 8011d70:	786c      	ldrb	r4, [r5, #1]
 8011d72:	2310      	movs	r3, #16
 8011d74:	3502      	adds	r5, #2
 8011d76:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8011d7a:	f108 38ff 	add.w	r8, r8, #4294967295
 8011d7e:	f04f 0c00 	mov.w	ip, #0
 8011d82:	fbb8 f9f3 	udiv	r9, r8, r3
 8011d86:	4666      	mov	r6, ip
 8011d88:	fb03 8a19 	mls	sl, r3, r9, r8
 8011d8c:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8011d90:	f1be 0f09 	cmp.w	lr, #9
 8011d94:	d816      	bhi.n	8011dc4 <_strtol_l.constprop.0+0xa4>
 8011d96:	4674      	mov	r4, lr
 8011d98:	42a3      	cmp	r3, r4
 8011d9a:	dd24      	ble.n	8011de6 <_strtol_l.constprop.0+0xc6>
 8011d9c:	f1bc 0f00 	cmp.w	ip, #0
 8011da0:	db1e      	blt.n	8011de0 <_strtol_l.constprop.0+0xc0>
 8011da2:	45b1      	cmp	r9, r6
 8011da4:	d31c      	bcc.n	8011de0 <_strtol_l.constprop.0+0xc0>
 8011da6:	d101      	bne.n	8011dac <_strtol_l.constprop.0+0x8c>
 8011da8:	45a2      	cmp	sl, r4
 8011daa:	db19      	blt.n	8011de0 <_strtol_l.constprop.0+0xc0>
 8011dac:	fb06 4603 	mla	r6, r6, r3, r4
 8011db0:	f04f 0c01 	mov.w	ip, #1
 8011db4:	f815 4b01 	ldrb.w	r4, [r5], #1
 8011db8:	e7e8      	b.n	8011d8c <_strtol_l.constprop.0+0x6c>
 8011dba:	2c2b      	cmp	r4, #43	; 0x2b
 8011dbc:	bf04      	itt	eq
 8011dbe:	782c      	ldrbeq	r4, [r5, #0]
 8011dc0:	1cb5      	addeq	r5, r6, #2
 8011dc2:	e7ca      	b.n	8011d5a <_strtol_l.constprop.0+0x3a>
 8011dc4:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8011dc8:	f1be 0f19 	cmp.w	lr, #25
 8011dcc:	d801      	bhi.n	8011dd2 <_strtol_l.constprop.0+0xb2>
 8011dce:	3c37      	subs	r4, #55	; 0x37
 8011dd0:	e7e2      	b.n	8011d98 <_strtol_l.constprop.0+0x78>
 8011dd2:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8011dd6:	f1be 0f19 	cmp.w	lr, #25
 8011dda:	d804      	bhi.n	8011de6 <_strtol_l.constprop.0+0xc6>
 8011ddc:	3c57      	subs	r4, #87	; 0x57
 8011dde:	e7db      	b.n	8011d98 <_strtol_l.constprop.0+0x78>
 8011de0:	f04f 3cff 	mov.w	ip, #4294967295
 8011de4:	e7e6      	b.n	8011db4 <_strtol_l.constprop.0+0x94>
 8011de6:	f1bc 0f00 	cmp.w	ip, #0
 8011dea:	da05      	bge.n	8011df8 <_strtol_l.constprop.0+0xd8>
 8011dec:	2322      	movs	r3, #34	; 0x22
 8011dee:	6003      	str	r3, [r0, #0]
 8011df0:	4646      	mov	r6, r8
 8011df2:	b942      	cbnz	r2, 8011e06 <_strtol_l.constprop.0+0xe6>
 8011df4:	4630      	mov	r0, r6
 8011df6:	e79e      	b.n	8011d36 <_strtol_l.constprop.0+0x16>
 8011df8:	b107      	cbz	r7, 8011dfc <_strtol_l.constprop.0+0xdc>
 8011dfa:	4276      	negs	r6, r6
 8011dfc:	2a00      	cmp	r2, #0
 8011dfe:	d0f9      	beq.n	8011df4 <_strtol_l.constprop.0+0xd4>
 8011e00:	f1bc 0f00 	cmp.w	ip, #0
 8011e04:	d000      	beq.n	8011e08 <_strtol_l.constprop.0+0xe8>
 8011e06:	1e69      	subs	r1, r5, #1
 8011e08:	6011      	str	r1, [r2, #0]
 8011e0a:	e7f3      	b.n	8011df4 <_strtol_l.constprop.0+0xd4>
 8011e0c:	2430      	movs	r4, #48	; 0x30
 8011e0e:	2b00      	cmp	r3, #0
 8011e10:	d1b1      	bne.n	8011d76 <_strtol_l.constprop.0+0x56>
 8011e12:	2308      	movs	r3, #8
 8011e14:	e7af      	b.n	8011d76 <_strtol_l.constprop.0+0x56>
 8011e16:	2c30      	cmp	r4, #48	; 0x30
 8011e18:	d0a5      	beq.n	8011d66 <_strtol_l.constprop.0+0x46>
 8011e1a:	230a      	movs	r3, #10
 8011e1c:	e7ab      	b.n	8011d76 <_strtol_l.constprop.0+0x56>
 8011e1e:	bf00      	nop
 8011e20:	08015991 	.word	0x08015991

08011e24 <_strtol_r>:
 8011e24:	f7ff bf7c 	b.w	8011d20 <_strtol_l.constprop.0>

08011e28 <_write_r>:
 8011e28:	b538      	push	{r3, r4, r5, lr}
 8011e2a:	4d07      	ldr	r5, [pc, #28]	; (8011e48 <_write_r+0x20>)
 8011e2c:	4604      	mov	r4, r0
 8011e2e:	4608      	mov	r0, r1
 8011e30:	4611      	mov	r1, r2
 8011e32:	2200      	movs	r2, #0
 8011e34:	602a      	str	r2, [r5, #0]
 8011e36:	461a      	mov	r2, r3
 8011e38:	f7f1 f8c7 	bl	8002fca <_write>
 8011e3c:	1c43      	adds	r3, r0, #1
 8011e3e:	d102      	bne.n	8011e46 <_write_r+0x1e>
 8011e40:	682b      	ldr	r3, [r5, #0]
 8011e42:	b103      	cbz	r3, 8011e46 <_write_r+0x1e>
 8011e44:	6023      	str	r3, [r4, #0]
 8011e46:	bd38      	pop	{r3, r4, r5, pc}
 8011e48:	20000770 	.word	0x20000770

08011e4c <_close_r>:
 8011e4c:	b538      	push	{r3, r4, r5, lr}
 8011e4e:	4d06      	ldr	r5, [pc, #24]	; (8011e68 <_close_r+0x1c>)
 8011e50:	2300      	movs	r3, #0
 8011e52:	4604      	mov	r4, r0
 8011e54:	4608      	mov	r0, r1
 8011e56:	602b      	str	r3, [r5, #0]
 8011e58:	f7f1 f8d3 	bl	8003002 <_close>
 8011e5c:	1c43      	adds	r3, r0, #1
 8011e5e:	d102      	bne.n	8011e66 <_close_r+0x1a>
 8011e60:	682b      	ldr	r3, [r5, #0]
 8011e62:	b103      	cbz	r3, 8011e66 <_close_r+0x1a>
 8011e64:	6023      	str	r3, [r4, #0]
 8011e66:	bd38      	pop	{r3, r4, r5, pc}
 8011e68:	20000770 	.word	0x20000770

08011e6c <quorem>:
 8011e6c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011e70:	6903      	ldr	r3, [r0, #16]
 8011e72:	690c      	ldr	r4, [r1, #16]
 8011e74:	42a3      	cmp	r3, r4
 8011e76:	4607      	mov	r7, r0
 8011e78:	f2c0 8081 	blt.w	8011f7e <quorem+0x112>
 8011e7c:	3c01      	subs	r4, #1
 8011e7e:	f101 0814 	add.w	r8, r1, #20
 8011e82:	f100 0514 	add.w	r5, r0, #20
 8011e86:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8011e8a:	9301      	str	r3, [sp, #4]
 8011e8c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8011e90:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8011e94:	3301      	adds	r3, #1
 8011e96:	429a      	cmp	r2, r3
 8011e98:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8011e9c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8011ea0:	fbb2 f6f3 	udiv	r6, r2, r3
 8011ea4:	d331      	bcc.n	8011f0a <quorem+0x9e>
 8011ea6:	f04f 0e00 	mov.w	lr, #0
 8011eaa:	4640      	mov	r0, r8
 8011eac:	46ac      	mov	ip, r5
 8011eae:	46f2      	mov	sl, lr
 8011eb0:	f850 2b04 	ldr.w	r2, [r0], #4
 8011eb4:	b293      	uxth	r3, r2
 8011eb6:	fb06 e303 	mla	r3, r6, r3, lr
 8011eba:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8011ebe:	b29b      	uxth	r3, r3
 8011ec0:	ebaa 0303 	sub.w	r3, sl, r3
 8011ec4:	f8dc a000 	ldr.w	sl, [ip]
 8011ec8:	0c12      	lsrs	r2, r2, #16
 8011eca:	fa13 f38a 	uxtah	r3, r3, sl
 8011ece:	fb06 e202 	mla	r2, r6, r2, lr
 8011ed2:	9300      	str	r3, [sp, #0]
 8011ed4:	9b00      	ldr	r3, [sp, #0]
 8011ed6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8011eda:	b292      	uxth	r2, r2
 8011edc:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8011ee0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8011ee4:	f8bd 3000 	ldrh.w	r3, [sp]
 8011ee8:	4581      	cmp	r9, r0
 8011eea:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8011eee:	f84c 3b04 	str.w	r3, [ip], #4
 8011ef2:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8011ef6:	d2db      	bcs.n	8011eb0 <quorem+0x44>
 8011ef8:	f855 300b 	ldr.w	r3, [r5, fp]
 8011efc:	b92b      	cbnz	r3, 8011f0a <quorem+0x9e>
 8011efe:	9b01      	ldr	r3, [sp, #4]
 8011f00:	3b04      	subs	r3, #4
 8011f02:	429d      	cmp	r5, r3
 8011f04:	461a      	mov	r2, r3
 8011f06:	d32e      	bcc.n	8011f66 <quorem+0xfa>
 8011f08:	613c      	str	r4, [r7, #16]
 8011f0a:	4638      	mov	r0, r7
 8011f0c:	f001 fc96 	bl	801383c <__mcmp>
 8011f10:	2800      	cmp	r0, #0
 8011f12:	db24      	blt.n	8011f5e <quorem+0xf2>
 8011f14:	3601      	adds	r6, #1
 8011f16:	4628      	mov	r0, r5
 8011f18:	f04f 0c00 	mov.w	ip, #0
 8011f1c:	f858 2b04 	ldr.w	r2, [r8], #4
 8011f20:	f8d0 e000 	ldr.w	lr, [r0]
 8011f24:	b293      	uxth	r3, r2
 8011f26:	ebac 0303 	sub.w	r3, ip, r3
 8011f2a:	0c12      	lsrs	r2, r2, #16
 8011f2c:	fa13 f38e 	uxtah	r3, r3, lr
 8011f30:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8011f34:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8011f38:	b29b      	uxth	r3, r3
 8011f3a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8011f3e:	45c1      	cmp	r9, r8
 8011f40:	f840 3b04 	str.w	r3, [r0], #4
 8011f44:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8011f48:	d2e8      	bcs.n	8011f1c <quorem+0xb0>
 8011f4a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8011f4e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8011f52:	b922      	cbnz	r2, 8011f5e <quorem+0xf2>
 8011f54:	3b04      	subs	r3, #4
 8011f56:	429d      	cmp	r5, r3
 8011f58:	461a      	mov	r2, r3
 8011f5a:	d30a      	bcc.n	8011f72 <quorem+0x106>
 8011f5c:	613c      	str	r4, [r7, #16]
 8011f5e:	4630      	mov	r0, r6
 8011f60:	b003      	add	sp, #12
 8011f62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011f66:	6812      	ldr	r2, [r2, #0]
 8011f68:	3b04      	subs	r3, #4
 8011f6a:	2a00      	cmp	r2, #0
 8011f6c:	d1cc      	bne.n	8011f08 <quorem+0x9c>
 8011f6e:	3c01      	subs	r4, #1
 8011f70:	e7c7      	b.n	8011f02 <quorem+0x96>
 8011f72:	6812      	ldr	r2, [r2, #0]
 8011f74:	3b04      	subs	r3, #4
 8011f76:	2a00      	cmp	r2, #0
 8011f78:	d1f0      	bne.n	8011f5c <quorem+0xf0>
 8011f7a:	3c01      	subs	r4, #1
 8011f7c:	e7eb      	b.n	8011f56 <quorem+0xea>
 8011f7e:	2000      	movs	r0, #0
 8011f80:	e7ee      	b.n	8011f60 <quorem+0xf4>
 8011f82:	0000      	movs	r0, r0
 8011f84:	0000      	movs	r0, r0
	...

08011f88 <_dtoa_r>:
 8011f88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011f8c:	ed2d 8b04 	vpush	{d8-d9}
 8011f90:	ec57 6b10 	vmov	r6, r7, d0
 8011f94:	b093      	sub	sp, #76	; 0x4c
 8011f96:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8011f98:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8011f9c:	9106      	str	r1, [sp, #24]
 8011f9e:	ee10 aa10 	vmov	sl, s0
 8011fa2:	4604      	mov	r4, r0
 8011fa4:	9209      	str	r2, [sp, #36]	; 0x24
 8011fa6:	930c      	str	r3, [sp, #48]	; 0x30
 8011fa8:	46bb      	mov	fp, r7
 8011faa:	b975      	cbnz	r5, 8011fca <_dtoa_r+0x42>
 8011fac:	2010      	movs	r0, #16
 8011fae:	f001 f95f 	bl	8013270 <malloc>
 8011fb2:	4602      	mov	r2, r0
 8011fb4:	6260      	str	r0, [r4, #36]	; 0x24
 8011fb6:	b920      	cbnz	r0, 8011fc2 <_dtoa_r+0x3a>
 8011fb8:	4ba7      	ldr	r3, [pc, #668]	; (8012258 <_dtoa_r+0x2d0>)
 8011fba:	21ea      	movs	r1, #234	; 0xea
 8011fbc:	48a7      	ldr	r0, [pc, #668]	; (801225c <_dtoa_r+0x2d4>)
 8011fbe:	f002 fcc7 	bl	8014950 <__assert_func>
 8011fc2:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8011fc6:	6005      	str	r5, [r0, #0]
 8011fc8:	60c5      	str	r5, [r0, #12]
 8011fca:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011fcc:	6819      	ldr	r1, [r3, #0]
 8011fce:	b151      	cbz	r1, 8011fe6 <_dtoa_r+0x5e>
 8011fd0:	685a      	ldr	r2, [r3, #4]
 8011fd2:	604a      	str	r2, [r1, #4]
 8011fd4:	2301      	movs	r3, #1
 8011fd6:	4093      	lsls	r3, r2
 8011fd8:	608b      	str	r3, [r1, #8]
 8011fda:	4620      	mov	r0, r4
 8011fdc:	f001 f9a2 	bl	8013324 <_Bfree>
 8011fe0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011fe2:	2200      	movs	r2, #0
 8011fe4:	601a      	str	r2, [r3, #0]
 8011fe6:	1e3b      	subs	r3, r7, #0
 8011fe8:	bfaa      	itet	ge
 8011fea:	2300      	movge	r3, #0
 8011fec:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8011ff0:	f8c8 3000 	strge.w	r3, [r8]
 8011ff4:	4b9a      	ldr	r3, [pc, #616]	; (8012260 <_dtoa_r+0x2d8>)
 8011ff6:	bfbc      	itt	lt
 8011ff8:	2201      	movlt	r2, #1
 8011ffa:	f8c8 2000 	strlt.w	r2, [r8]
 8011ffe:	ea33 030b 	bics.w	r3, r3, fp
 8012002:	d11b      	bne.n	801203c <_dtoa_r+0xb4>
 8012004:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8012006:	f242 730f 	movw	r3, #9999	; 0x270f
 801200a:	6013      	str	r3, [r2, #0]
 801200c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8012010:	4333      	orrs	r3, r6
 8012012:	f000 8592 	beq.w	8012b3a <_dtoa_r+0xbb2>
 8012016:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8012018:	b963      	cbnz	r3, 8012034 <_dtoa_r+0xac>
 801201a:	4b92      	ldr	r3, [pc, #584]	; (8012264 <_dtoa_r+0x2dc>)
 801201c:	e022      	b.n	8012064 <_dtoa_r+0xdc>
 801201e:	4b92      	ldr	r3, [pc, #584]	; (8012268 <_dtoa_r+0x2e0>)
 8012020:	9301      	str	r3, [sp, #4]
 8012022:	3308      	adds	r3, #8
 8012024:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8012026:	6013      	str	r3, [r2, #0]
 8012028:	9801      	ldr	r0, [sp, #4]
 801202a:	b013      	add	sp, #76	; 0x4c
 801202c:	ecbd 8b04 	vpop	{d8-d9}
 8012030:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012034:	4b8b      	ldr	r3, [pc, #556]	; (8012264 <_dtoa_r+0x2dc>)
 8012036:	9301      	str	r3, [sp, #4]
 8012038:	3303      	adds	r3, #3
 801203a:	e7f3      	b.n	8012024 <_dtoa_r+0x9c>
 801203c:	2200      	movs	r2, #0
 801203e:	2300      	movs	r3, #0
 8012040:	4650      	mov	r0, sl
 8012042:	4659      	mov	r1, fp
 8012044:	f7ee fd60 	bl	8000b08 <__aeabi_dcmpeq>
 8012048:	ec4b ab19 	vmov	d9, sl, fp
 801204c:	4680      	mov	r8, r0
 801204e:	b158      	cbz	r0, 8012068 <_dtoa_r+0xe0>
 8012050:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8012052:	2301      	movs	r3, #1
 8012054:	6013      	str	r3, [r2, #0]
 8012056:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8012058:	2b00      	cmp	r3, #0
 801205a:	f000 856b 	beq.w	8012b34 <_dtoa_r+0xbac>
 801205e:	4883      	ldr	r0, [pc, #524]	; (801226c <_dtoa_r+0x2e4>)
 8012060:	6018      	str	r0, [r3, #0]
 8012062:	1e43      	subs	r3, r0, #1
 8012064:	9301      	str	r3, [sp, #4]
 8012066:	e7df      	b.n	8012028 <_dtoa_r+0xa0>
 8012068:	ec4b ab10 	vmov	d0, sl, fp
 801206c:	aa10      	add	r2, sp, #64	; 0x40
 801206e:	a911      	add	r1, sp, #68	; 0x44
 8012070:	4620      	mov	r0, r4
 8012072:	f001 fd05 	bl	8013a80 <__d2b>
 8012076:	f3cb 550a 	ubfx	r5, fp, #20, #11
 801207a:	ee08 0a10 	vmov	s16, r0
 801207e:	2d00      	cmp	r5, #0
 8012080:	f000 8084 	beq.w	801218c <_dtoa_r+0x204>
 8012084:	ee19 3a90 	vmov	r3, s19
 8012088:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801208c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8012090:	4656      	mov	r6, sl
 8012092:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8012096:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 801209a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 801209e:	4b74      	ldr	r3, [pc, #464]	; (8012270 <_dtoa_r+0x2e8>)
 80120a0:	2200      	movs	r2, #0
 80120a2:	4630      	mov	r0, r6
 80120a4:	4639      	mov	r1, r7
 80120a6:	f7ee f90f 	bl	80002c8 <__aeabi_dsub>
 80120aa:	a365      	add	r3, pc, #404	; (adr r3, 8012240 <_dtoa_r+0x2b8>)
 80120ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80120b0:	f7ee fac2 	bl	8000638 <__aeabi_dmul>
 80120b4:	a364      	add	r3, pc, #400	; (adr r3, 8012248 <_dtoa_r+0x2c0>)
 80120b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80120ba:	f7ee f907 	bl	80002cc <__adddf3>
 80120be:	4606      	mov	r6, r0
 80120c0:	4628      	mov	r0, r5
 80120c2:	460f      	mov	r7, r1
 80120c4:	f7ee fa4e 	bl	8000564 <__aeabi_i2d>
 80120c8:	a361      	add	r3, pc, #388	; (adr r3, 8012250 <_dtoa_r+0x2c8>)
 80120ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80120ce:	f7ee fab3 	bl	8000638 <__aeabi_dmul>
 80120d2:	4602      	mov	r2, r0
 80120d4:	460b      	mov	r3, r1
 80120d6:	4630      	mov	r0, r6
 80120d8:	4639      	mov	r1, r7
 80120da:	f7ee f8f7 	bl	80002cc <__adddf3>
 80120de:	4606      	mov	r6, r0
 80120e0:	460f      	mov	r7, r1
 80120e2:	f7ee fd59 	bl	8000b98 <__aeabi_d2iz>
 80120e6:	2200      	movs	r2, #0
 80120e8:	9000      	str	r0, [sp, #0]
 80120ea:	2300      	movs	r3, #0
 80120ec:	4630      	mov	r0, r6
 80120ee:	4639      	mov	r1, r7
 80120f0:	f7ee fd14 	bl	8000b1c <__aeabi_dcmplt>
 80120f4:	b150      	cbz	r0, 801210c <_dtoa_r+0x184>
 80120f6:	9800      	ldr	r0, [sp, #0]
 80120f8:	f7ee fa34 	bl	8000564 <__aeabi_i2d>
 80120fc:	4632      	mov	r2, r6
 80120fe:	463b      	mov	r3, r7
 8012100:	f7ee fd02 	bl	8000b08 <__aeabi_dcmpeq>
 8012104:	b910      	cbnz	r0, 801210c <_dtoa_r+0x184>
 8012106:	9b00      	ldr	r3, [sp, #0]
 8012108:	3b01      	subs	r3, #1
 801210a:	9300      	str	r3, [sp, #0]
 801210c:	9b00      	ldr	r3, [sp, #0]
 801210e:	2b16      	cmp	r3, #22
 8012110:	d85a      	bhi.n	80121c8 <_dtoa_r+0x240>
 8012112:	9a00      	ldr	r2, [sp, #0]
 8012114:	4b57      	ldr	r3, [pc, #348]	; (8012274 <_dtoa_r+0x2ec>)
 8012116:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801211a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801211e:	ec51 0b19 	vmov	r0, r1, d9
 8012122:	f7ee fcfb 	bl	8000b1c <__aeabi_dcmplt>
 8012126:	2800      	cmp	r0, #0
 8012128:	d050      	beq.n	80121cc <_dtoa_r+0x244>
 801212a:	9b00      	ldr	r3, [sp, #0]
 801212c:	3b01      	subs	r3, #1
 801212e:	9300      	str	r3, [sp, #0]
 8012130:	2300      	movs	r3, #0
 8012132:	930b      	str	r3, [sp, #44]	; 0x2c
 8012134:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8012136:	1b5d      	subs	r5, r3, r5
 8012138:	1e6b      	subs	r3, r5, #1
 801213a:	9305      	str	r3, [sp, #20]
 801213c:	bf45      	ittet	mi
 801213e:	f1c5 0301 	rsbmi	r3, r5, #1
 8012142:	9304      	strmi	r3, [sp, #16]
 8012144:	2300      	movpl	r3, #0
 8012146:	2300      	movmi	r3, #0
 8012148:	bf4c      	ite	mi
 801214a:	9305      	strmi	r3, [sp, #20]
 801214c:	9304      	strpl	r3, [sp, #16]
 801214e:	9b00      	ldr	r3, [sp, #0]
 8012150:	2b00      	cmp	r3, #0
 8012152:	db3d      	blt.n	80121d0 <_dtoa_r+0x248>
 8012154:	9b05      	ldr	r3, [sp, #20]
 8012156:	9a00      	ldr	r2, [sp, #0]
 8012158:	920a      	str	r2, [sp, #40]	; 0x28
 801215a:	4413      	add	r3, r2
 801215c:	9305      	str	r3, [sp, #20]
 801215e:	2300      	movs	r3, #0
 8012160:	9307      	str	r3, [sp, #28]
 8012162:	9b06      	ldr	r3, [sp, #24]
 8012164:	2b09      	cmp	r3, #9
 8012166:	f200 8089 	bhi.w	801227c <_dtoa_r+0x2f4>
 801216a:	2b05      	cmp	r3, #5
 801216c:	bfc4      	itt	gt
 801216e:	3b04      	subgt	r3, #4
 8012170:	9306      	strgt	r3, [sp, #24]
 8012172:	9b06      	ldr	r3, [sp, #24]
 8012174:	f1a3 0302 	sub.w	r3, r3, #2
 8012178:	bfcc      	ite	gt
 801217a:	2500      	movgt	r5, #0
 801217c:	2501      	movle	r5, #1
 801217e:	2b03      	cmp	r3, #3
 8012180:	f200 8087 	bhi.w	8012292 <_dtoa_r+0x30a>
 8012184:	e8df f003 	tbb	[pc, r3]
 8012188:	59383a2d 	.word	0x59383a2d
 801218c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8012190:	441d      	add	r5, r3
 8012192:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8012196:	2b20      	cmp	r3, #32
 8012198:	bfc1      	itttt	gt
 801219a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 801219e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 80121a2:	fa0b f303 	lslgt.w	r3, fp, r3
 80121a6:	fa26 f000 	lsrgt.w	r0, r6, r0
 80121aa:	bfda      	itte	le
 80121ac:	f1c3 0320 	rsble	r3, r3, #32
 80121b0:	fa06 f003 	lslle.w	r0, r6, r3
 80121b4:	4318      	orrgt	r0, r3
 80121b6:	f7ee f9c5 	bl	8000544 <__aeabi_ui2d>
 80121ba:	2301      	movs	r3, #1
 80121bc:	4606      	mov	r6, r0
 80121be:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 80121c2:	3d01      	subs	r5, #1
 80121c4:	930e      	str	r3, [sp, #56]	; 0x38
 80121c6:	e76a      	b.n	801209e <_dtoa_r+0x116>
 80121c8:	2301      	movs	r3, #1
 80121ca:	e7b2      	b.n	8012132 <_dtoa_r+0x1aa>
 80121cc:	900b      	str	r0, [sp, #44]	; 0x2c
 80121ce:	e7b1      	b.n	8012134 <_dtoa_r+0x1ac>
 80121d0:	9b04      	ldr	r3, [sp, #16]
 80121d2:	9a00      	ldr	r2, [sp, #0]
 80121d4:	1a9b      	subs	r3, r3, r2
 80121d6:	9304      	str	r3, [sp, #16]
 80121d8:	4253      	negs	r3, r2
 80121da:	9307      	str	r3, [sp, #28]
 80121dc:	2300      	movs	r3, #0
 80121de:	930a      	str	r3, [sp, #40]	; 0x28
 80121e0:	e7bf      	b.n	8012162 <_dtoa_r+0x1da>
 80121e2:	2300      	movs	r3, #0
 80121e4:	9308      	str	r3, [sp, #32]
 80121e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80121e8:	2b00      	cmp	r3, #0
 80121ea:	dc55      	bgt.n	8012298 <_dtoa_r+0x310>
 80121ec:	2301      	movs	r3, #1
 80121ee:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80121f2:	461a      	mov	r2, r3
 80121f4:	9209      	str	r2, [sp, #36]	; 0x24
 80121f6:	e00c      	b.n	8012212 <_dtoa_r+0x28a>
 80121f8:	2301      	movs	r3, #1
 80121fa:	e7f3      	b.n	80121e4 <_dtoa_r+0x25c>
 80121fc:	2300      	movs	r3, #0
 80121fe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8012200:	9308      	str	r3, [sp, #32]
 8012202:	9b00      	ldr	r3, [sp, #0]
 8012204:	4413      	add	r3, r2
 8012206:	9302      	str	r3, [sp, #8]
 8012208:	3301      	adds	r3, #1
 801220a:	2b01      	cmp	r3, #1
 801220c:	9303      	str	r3, [sp, #12]
 801220e:	bfb8      	it	lt
 8012210:	2301      	movlt	r3, #1
 8012212:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8012214:	2200      	movs	r2, #0
 8012216:	6042      	str	r2, [r0, #4]
 8012218:	2204      	movs	r2, #4
 801221a:	f102 0614 	add.w	r6, r2, #20
 801221e:	429e      	cmp	r6, r3
 8012220:	6841      	ldr	r1, [r0, #4]
 8012222:	d93d      	bls.n	80122a0 <_dtoa_r+0x318>
 8012224:	4620      	mov	r0, r4
 8012226:	f001 f83d 	bl	80132a4 <_Balloc>
 801222a:	9001      	str	r0, [sp, #4]
 801222c:	2800      	cmp	r0, #0
 801222e:	d13b      	bne.n	80122a8 <_dtoa_r+0x320>
 8012230:	4b11      	ldr	r3, [pc, #68]	; (8012278 <_dtoa_r+0x2f0>)
 8012232:	4602      	mov	r2, r0
 8012234:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8012238:	e6c0      	b.n	8011fbc <_dtoa_r+0x34>
 801223a:	2301      	movs	r3, #1
 801223c:	e7df      	b.n	80121fe <_dtoa_r+0x276>
 801223e:	bf00      	nop
 8012240:	636f4361 	.word	0x636f4361
 8012244:	3fd287a7 	.word	0x3fd287a7
 8012248:	8b60c8b3 	.word	0x8b60c8b3
 801224c:	3fc68a28 	.word	0x3fc68a28
 8012250:	509f79fb 	.word	0x509f79fb
 8012254:	3fd34413 	.word	0x3fd34413
 8012258:	08015a9e 	.word	0x08015a9e
 801225c:	08015ab5 	.word	0x08015ab5
 8012260:	7ff00000 	.word	0x7ff00000
 8012264:	08015a9a 	.word	0x08015a9a
 8012268:	08015a91 	.word	0x08015a91
 801226c:	08015d0a 	.word	0x08015d0a
 8012270:	3ff80000 	.word	0x3ff80000
 8012274:	08015c20 	.word	0x08015c20
 8012278:	08015b10 	.word	0x08015b10
 801227c:	2501      	movs	r5, #1
 801227e:	2300      	movs	r3, #0
 8012280:	9306      	str	r3, [sp, #24]
 8012282:	9508      	str	r5, [sp, #32]
 8012284:	f04f 33ff 	mov.w	r3, #4294967295
 8012288:	e9cd 3302 	strd	r3, r3, [sp, #8]
 801228c:	2200      	movs	r2, #0
 801228e:	2312      	movs	r3, #18
 8012290:	e7b0      	b.n	80121f4 <_dtoa_r+0x26c>
 8012292:	2301      	movs	r3, #1
 8012294:	9308      	str	r3, [sp, #32]
 8012296:	e7f5      	b.n	8012284 <_dtoa_r+0x2fc>
 8012298:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801229a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 801229e:	e7b8      	b.n	8012212 <_dtoa_r+0x28a>
 80122a0:	3101      	adds	r1, #1
 80122a2:	6041      	str	r1, [r0, #4]
 80122a4:	0052      	lsls	r2, r2, #1
 80122a6:	e7b8      	b.n	801221a <_dtoa_r+0x292>
 80122a8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80122aa:	9a01      	ldr	r2, [sp, #4]
 80122ac:	601a      	str	r2, [r3, #0]
 80122ae:	9b03      	ldr	r3, [sp, #12]
 80122b0:	2b0e      	cmp	r3, #14
 80122b2:	f200 809d 	bhi.w	80123f0 <_dtoa_r+0x468>
 80122b6:	2d00      	cmp	r5, #0
 80122b8:	f000 809a 	beq.w	80123f0 <_dtoa_r+0x468>
 80122bc:	9b00      	ldr	r3, [sp, #0]
 80122be:	2b00      	cmp	r3, #0
 80122c0:	dd32      	ble.n	8012328 <_dtoa_r+0x3a0>
 80122c2:	4ab7      	ldr	r2, [pc, #732]	; (80125a0 <_dtoa_r+0x618>)
 80122c4:	f003 030f 	and.w	r3, r3, #15
 80122c8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80122cc:	e9d3 8900 	ldrd	r8, r9, [r3]
 80122d0:	9b00      	ldr	r3, [sp, #0]
 80122d2:	05d8      	lsls	r0, r3, #23
 80122d4:	ea4f 1723 	mov.w	r7, r3, asr #4
 80122d8:	d516      	bpl.n	8012308 <_dtoa_r+0x380>
 80122da:	4bb2      	ldr	r3, [pc, #712]	; (80125a4 <_dtoa_r+0x61c>)
 80122dc:	ec51 0b19 	vmov	r0, r1, d9
 80122e0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80122e4:	f7ee fad2 	bl	800088c <__aeabi_ddiv>
 80122e8:	f007 070f 	and.w	r7, r7, #15
 80122ec:	4682      	mov	sl, r0
 80122ee:	468b      	mov	fp, r1
 80122f0:	2503      	movs	r5, #3
 80122f2:	4eac      	ldr	r6, [pc, #688]	; (80125a4 <_dtoa_r+0x61c>)
 80122f4:	b957      	cbnz	r7, 801230c <_dtoa_r+0x384>
 80122f6:	4642      	mov	r2, r8
 80122f8:	464b      	mov	r3, r9
 80122fa:	4650      	mov	r0, sl
 80122fc:	4659      	mov	r1, fp
 80122fe:	f7ee fac5 	bl	800088c <__aeabi_ddiv>
 8012302:	4682      	mov	sl, r0
 8012304:	468b      	mov	fp, r1
 8012306:	e028      	b.n	801235a <_dtoa_r+0x3d2>
 8012308:	2502      	movs	r5, #2
 801230a:	e7f2      	b.n	80122f2 <_dtoa_r+0x36a>
 801230c:	07f9      	lsls	r1, r7, #31
 801230e:	d508      	bpl.n	8012322 <_dtoa_r+0x39a>
 8012310:	4640      	mov	r0, r8
 8012312:	4649      	mov	r1, r9
 8012314:	e9d6 2300 	ldrd	r2, r3, [r6]
 8012318:	f7ee f98e 	bl	8000638 <__aeabi_dmul>
 801231c:	3501      	adds	r5, #1
 801231e:	4680      	mov	r8, r0
 8012320:	4689      	mov	r9, r1
 8012322:	107f      	asrs	r7, r7, #1
 8012324:	3608      	adds	r6, #8
 8012326:	e7e5      	b.n	80122f4 <_dtoa_r+0x36c>
 8012328:	f000 809b 	beq.w	8012462 <_dtoa_r+0x4da>
 801232c:	9b00      	ldr	r3, [sp, #0]
 801232e:	4f9d      	ldr	r7, [pc, #628]	; (80125a4 <_dtoa_r+0x61c>)
 8012330:	425e      	negs	r6, r3
 8012332:	4b9b      	ldr	r3, [pc, #620]	; (80125a0 <_dtoa_r+0x618>)
 8012334:	f006 020f 	and.w	r2, r6, #15
 8012338:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801233c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012340:	ec51 0b19 	vmov	r0, r1, d9
 8012344:	f7ee f978 	bl	8000638 <__aeabi_dmul>
 8012348:	1136      	asrs	r6, r6, #4
 801234a:	4682      	mov	sl, r0
 801234c:	468b      	mov	fp, r1
 801234e:	2300      	movs	r3, #0
 8012350:	2502      	movs	r5, #2
 8012352:	2e00      	cmp	r6, #0
 8012354:	d17a      	bne.n	801244c <_dtoa_r+0x4c4>
 8012356:	2b00      	cmp	r3, #0
 8012358:	d1d3      	bne.n	8012302 <_dtoa_r+0x37a>
 801235a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801235c:	2b00      	cmp	r3, #0
 801235e:	f000 8082 	beq.w	8012466 <_dtoa_r+0x4de>
 8012362:	4b91      	ldr	r3, [pc, #580]	; (80125a8 <_dtoa_r+0x620>)
 8012364:	2200      	movs	r2, #0
 8012366:	4650      	mov	r0, sl
 8012368:	4659      	mov	r1, fp
 801236a:	f7ee fbd7 	bl	8000b1c <__aeabi_dcmplt>
 801236e:	2800      	cmp	r0, #0
 8012370:	d079      	beq.n	8012466 <_dtoa_r+0x4de>
 8012372:	9b03      	ldr	r3, [sp, #12]
 8012374:	2b00      	cmp	r3, #0
 8012376:	d076      	beq.n	8012466 <_dtoa_r+0x4de>
 8012378:	9b02      	ldr	r3, [sp, #8]
 801237a:	2b00      	cmp	r3, #0
 801237c:	dd36      	ble.n	80123ec <_dtoa_r+0x464>
 801237e:	9b00      	ldr	r3, [sp, #0]
 8012380:	4650      	mov	r0, sl
 8012382:	4659      	mov	r1, fp
 8012384:	1e5f      	subs	r7, r3, #1
 8012386:	2200      	movs	r2, #0
 8012388:	4b88      	ldr	r3, [pc, #544]	; (80125ac <_dtoa_r+0x624>)
 801238a:	f7ee f955 	bl	8000638 <__aeabi_dmul>
 801238e:	9e02      	ldr	r6, [sp, #8]
 8012390:	4682      	mov	sl, r0
 8012392:	468b      	mov	fp, r1
 8012394:	3501      	adds	r5, #1
 8012396:	4628      	mov	r0, r5
 8012398:	f7ee f8e4 	bl	8000564 <__aeabi_i2d>
 801239c:	4652      	mov	r2, sl
 801239e:	465b      	mov	r3, fp
 80123a0:	f7ee f94a 	bl	8000638 <__aeabi_dmul>
 80123a4:	4b82      	ldr	r3, [pc, #520]	; (80125b0 <_dtoa_r+0x628>)
 80123a6:	2200      	movs	r2, #0
 80123a8:	f7ed ff90 	bl	80002cc <__adddf3>
 80123ac:	46d0      	mov	r8, sl
 80123ae:	46d9      	mov	r9, fp
 80123b0:	4682      	mov	sl, r0
 80123b2:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 80123b6:	2e00      	cmp	r6, #0
 80123b8:	d158      	bne.n	801246c <_dtoa_r+0x4e4>
 80123ba:	4b7e      	ldr	r3, [pc, #504]	; (80125b4 <_dtoa_r+0x62c>)
 80123bc:	2200      	movs	r2, #0
 80123be:	4640      	mov	r0, r8
 80123c0:	4649      	mov	r1, r9
 80123c2:	f7ed ff81 	bl	80002c8 <__aeabi_dsub>
 80123c6:	4652      	mov	r2, sl
 80123c8:	465b      	mov	r3, fp
 80123ca:	4680      	mov	r8, r0
 80123cc:	4689      	mov	r9, r1
 80123ce:	f7ee fbc3 	bl	8000b58 <__aeabi_dcmpgt>
 80123d2:	2800      	cmp	r0, #0
 80123d4:	f040 8295 	bne.w	8012902 <_dtoa_r+0x97a>
 80123d8:	4652      	mov	r2, sl
 80123da:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80123de:	4640      	mov	r0, r8
 80123e0:	4649      	mov	r1, r9
 80123e2:	f7ee fb9b 	bl	8000b1c <__aeabi_dcmplt>
 80123e6:	2800      	cmp	r0, #0
 80123e8:	f040 8289 	bne.w	80128fe <_dtoa_r+0x976>
 80123ec:	ec5b ab19 	vmov	sl, fp, d9
 80123f0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80123f2:	2b00      	cmp	r3, #0
 80123f4:	f2c0 8148 	blt.w	8012688 <_dtoa_r+0x700>
 80123f8:	9a00      	ldr	r2, [sp, #0]
 80123fa:	2a0e      	cmp	r2, #14
 80123fc:	f300 8144 	bgt.w	8012688 <_dtoa_r+0x700>
 8012400:	4b67      	ldr	r3, [pc, #412]	; (80125a0 <_dtoa_r+0x618>)
 8012402:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8012406:	e9d3 8900 	ldrd	r8, r9, [r3]
 801240a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801240c:	2b00      	cmp	r3, #0
 801240e:	f280 80d5 	bge.w	80125bc <_dtoa_r+0x634>
 8012412:	9b03      	ldr	r3, [sp, #12]
 8012414:	2b00      	cmp	r3, #0
 8012416:	f300 80d1 	bgt.w	80125bc <_dtoa_r+0x634>
 801241a:	f040 826f 	bne.w	80128fc <_dtoa_r+0x974>
 801241e:	4b65      	ldr	r3, [pc, #404]	; (80125b4 <_dtoa_r+0x62c>)
 8012420:	2200      	movs	r2, #0
 8012422:	4640      	mov	r0, r8
 8012424:	4649      	mov	r1, r9
 8012426:	f7ee f907 	bl	8000638 <__aeabi_dmul>
 801242a:	4652      	mov	r2, sl
 801242c:	465b      	mov	r3, fp
 801242e:	f7ee fb89 	bl	8000b44 <__aeabi_dcmpge>
 8012432:	9e03      	ldr	r6, [sp, #12]
 8012434:	4637      	mov	r7, r6
 8012436:	2800      	cmp	r0, #0
 8012438:	f040 8245 	bne.w	80128c6 <_dtoa_r+0x93e>
 801243c:	9d01      	ldr	r5, [sp, #4]
 801243e:	2331      	movs	r3, #49	; 0x31
 8012440:	f805 3b01 	strb.w	r3, [r5], #1
 8012444:	9b00      	ldr	r3, [sp, #0]
 8012446:	3301      	adds	r3, #1
 8012448:	9300      	str	r3, [sp, #0]
 801244a:	e240      	b.n	80128ce <_dtoa_r+0x946>
 801244c:	07f2      	lsls	r2, r6, #31
 801244e:	d505      	bpl.n	801245c <_dtoa_r+0x4d4>
 8012450:	e9d7 2300 	ldrd	r2, r3, [r7]
 8012454:	f7ee f8f0 	bl	8000638 <__aeabi_dmul>
 8012458:	3501      	adds	r5, #1
 801245a:	2301      	movs	r3, #1
 801245c:	1076      	asrs	r6, r6, #1
 801245e:	3708      	adds	r7, #8
 8012460:	e777      	b.n	8012352 <_dtoa_r+0x3ca>
 8012462:	2502      	movs	r5, #2
 8012464:	e779      	b.n	801235a <_dtoa_r+0x3d2>
 8012466:	9f00      	ldr	r7, [sp, #0]
 8012468:	9e03      	ldr	r6, [sp, #12]
 801246a:	e794      	b.n	8012396 <_dtoa_r+0x40e>
 801246c:	9901      	ldr	r1, [sp, #4]
 801246e:	4b4c      	ldr	r3, [pc, #304]	; (80125a0 <_dtoa_r+0x618>)
 8012470:	4431      	add	r1, r6
 8012472:	910d      	str	r1, [sp, #52]	; 0x34
 8012474:	9908      	ldr	r1, [sp, #32]
 8012476:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 801247a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 801247e:	2900      	cmp	r1, #0
 8012480:	d043      	beq.n	801250a <_dtoa_r+0x582>
 8012482:	494d      	ldr	r1, [pc, #308]	; (80125b8 <_dtoa_r+0x630>)
 8012484:	2000      	movs	r0, #0
 8012486:	f7ee fa01 	bl	800088c <__aeabi_ddiv>
 801248a:	4652      	mov	r2, sl
 801248c:	465b      	mov	r3, fp
 801248e:	f7ed ff1b 	bl	80002c8 <__aeabi_dsub>
 8012492:	9d01      	ldr	r5, [sp, #4]
 8012494:	4682      	mov	sl, r0
 8012496:	468b      	mov	fp, r1
 8012498:	4649      	mov	r1, r9
 801249a:	4640      	mov	r0, r8
 801249c:	f7ee fb7c 	bl	8000b98 <__aeabi_d2iz>
 80124a0:	4606      	mov	r6, r0
 80124a2:	f7ee f85f 	bl	8000564 <__aeabi_i2d>
 80124a6:	4602      	mov	r2, r0
 80124a8:	460b      	mov	r3, r1
 80124aa:	4640      	mov	r0, r8
 80124ac:	4649      	mov	r1, r9
 80124ae:	f7ed ff0b 	bl	80002c8 <__aeabi_dsub>
 80124b2:	3630      	adds	r6, #48	; 0x30
 80124b4:	f805 6b01 	strb.w	r6, [r5], #1
 80124b8:	4652      	mov	r2, sl
 80124ba:	465b      	mov	r3, fp
 80124bc:	4680      	mov	r8, r0
 80124be:	4689      	mov	r9, r1
 80124c0:	f7ee fb2c 	bl	8000b1c <__aeabi_dcmplt>
 80124c4:	2800      	cmp	r0, #0
 80124c6:	d163      	bne.n	8012590 <_dtoa_r+0x608>
 80124c8:	4642      	mov	r2, r8
 80124ca:	464b      	mov	r3, r9
 80124cc:	4936      	ldr	r1, [pc, #216]	; (80125a8 <_dtoa_r+0x620>)
 80124ce:	2000      	movs	r0, #0
 80124d0:	f7ed fefa 	bl	80002c8 <__aeabi_dsub>
 80124d4:	4652      	mov	r2, sl
 80124d6:	465b      	mov	r3, fp
 80124d8:	f7ee fb20 	bl	8000b1c <__aeabi_dcmplt>
 80124dc:	2800      	cmp	r0, #0
 80124de:	f040 80b5 	bne.w	801264c <_dtoa_r+0x6c4>
 80124e2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80124e4:	429d      	cmp	r5, r3
 80124e6:	d081      	beq.n	80123ec <_dtoa_r+0x464>
 80124e8:	4b30      	ldr	r3, [pc, #192]	; (80125ac <_dtoa_r+0x624>)
 80124ea:	2200      	movs	r2, #0
 80124ec:	4650      	mov	r0, sl
 80124ee:	4659      	mov	r1, fp
 80124f0:	f7ee f8a2 	bl	8000638 <__aeabi_dmul>
 80124f4:	4b2d      	ldr	r3, [pc, #180]	; (80125ac <_dtoa_r+0x624>)
 80124f6:	4682      	mov	sl, r0
 80124f8:	468b      	mov	fp, r1
 80124fa:	4640      	mov	r0, r8
 80124fc:	4649      	mov	r1, r9
 80124fe:	2200      	movs	r2, #0
 8012500:	f7ee f89a 	bl	8000638 <__aeabi_dmul>
 8012504:	4680      	mov	r8, r0
 8012506:	4689      	mov	r9, r1
 8012508:	e7c6      	b.n	8012498 <_dtoa_r+0x510>
 801250a:	4650      	mov	r0, sl
 801250c:	4659      	mov	r1, fp
 801250e:	f7ee f893 	bl	8000638 <__aeabi_dmul>
 8012512:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8012514:	9d01      	ldr	r5, [sp, #4]
 8012516:	930f      	str	r3, [sp, #60]	; 0x3c
 8012518:	4682      	mov	sl, r0
 801251a:	468b      	mov	fp, r1
 801251c:	4649      	mov	r1, r9
 801251e:	4640      	mov	r0, r8
 8012520:	f7ee fb3a 	bl	8000b98 <__aeabi_d2iz>
 8012524:	4606      	mov	r6, r0
 8012526:	f7ee f81d 	bl	8000564 <__aeabi_i2d>
 801252a:	3630      	adds	r6, #48	; 0x30
 801252c:	4602      	mov	r2, r0
 801252e:	460b      	mov	r3, r1
 8012530:	4640      	mov	r0, r8
 8012532:	4649      	mov	r1, r9
 8012534:	f7ed fec8 	bl	80002c8 <__aeabi_dsub>
 8012538:	f805 6b01 	strb.w	r6, [r5], #1
 801253c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801253e:	429d      	cmp	r5, r3
 8012540:	4680      	mov	r8, r0
 8012542:	4689      	mov	r9, r1
 8012544:	f04f 0200 	mov.w	r2, #0
 8012548:	d124      	bne.n	8012594 <_dtoa_r+0x60c>
 801254a:	4b1b      	ldr	r3, [pc, #108]	; (80125b8 <_dtoa_r+0x630>)
 801254c:	4650      	mov	r0, sl
 801254e:	4659      	mov	r1, fp
 8012550:	f7ed febc 	bl	80002cc <__adddf3>
 8012554:	4602      	mov	r2, r0
 8012556:	460b      	mov	r3, r1
 8012558:	4640      	mov	r0, r8
 801255a:	4649      	mov	r1, r9
 801255c:	f7ee fafc 	bl	8000b58 <__aeabi_dcmpgt>
 8012560:	2800      	cmp	r0, #0
 8012562:	d173      	bne.n	801264c <_dtoa_r+0x6c4>
 8012564:	4652      	mov	r2, sl
 8012566:	465b      	mov	r3, fp
 8012568:	4913      	ldr	r1, [pc, #76]	; (80125b8 <_dtoa_r+0x630>)
 801256a:	2000      	movs	r0, #0
 801256c:	f7ed feac 	bl	80002c8 <__aeabi_dsub>
 8012570:	4602      	mov	r2, r0
 8012572:	460b      	mov	r3, r1
 8012574:	4640      	mov	r0, r8
 8012576:	4649      	mov	r1, r9
 8012578:	f7ee fad0 	bl	8000b1c <__aeabi_dcmplt>
 801257c:	2800      	cmp	r0, #0
 801257e:	f43f af35 	beq.w	80123ec <_dtoa_r+0x464>
 8012582:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8012584:	1e6b      	subs	r3, r5, #1
 8012586:	930f      	str	r3, [sp, #60]	; 0x3c
 8012588:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 801258c:	2b30      	cmp	r3, #48	; 0x30
 801258e:	d0f8      	beq.n	8012582 <_dtoa_r+0x5fa>
 8012590:	9700      	str	r7, [sp, #0]
 8012592:	e049      	b.n	8012628 <_dtoa_r+0x6a0>
 8012594:	4b05      	ldr	r3, [pc, #20]	; (80125ac <_dtoa_r+0x624>)
 8012596:	f7ee f84f 	bl	8000638 <__aeabi_dmul>
 801259a:	4680      	mov	r8, r0
 801259c:	4689      	mov	r9, r1
 801259e:	e7bd      	b.n	801251c <_dtoa_r+0x594>
 80125a0:	08015c20 	.word	0x08015c20
 80125a4:	08015bf8 	.word	0x08015bf8
 80125a8:	3ff00000 	.word	0x3ff00000
 80125ac:	40240000 	.word	0x40240000
 80125b0:	401c0000 	.word	0x401c0000
 80125b4:	40140000 	.word	0x40140000
 80125b8:	3fe00000 	.word	0x3fe00000
 80125bc:	9d01      	ldr	r5, [sp, #4]
 80125be:	4656      	mov	r6, sl
 80125c0:	465f      	mov	r7, fp
 80125c2:	4642      	mov	r2, r8
 80125c4:	464b      	mov	r3, r9
 80125c6:	4630      	mov	r0, r6
 80125c8:	4639      	mov	r1, r7
 80125ca:	f7ee f95f 	bl	800088c <__aeabi_ddiv>
 80125ce:	f7ee fae3 	bl	8000b98 <__aeabi_d2iz>
 80125d2:	4682      	mov	sl, r0
 80125d4:	f7ed ffc6 	bl	8000564 <__aeabi_i2d>
 80125d8:	4642      	mov	r2, r8
 80125da:	464b      	mov	r3, r9
 80125dc:	f7ee f82c 	bl	8000638 <__aeabi_dmul>
 80125e0:	4602      	mov	r2, r0
 80125e2:	460b      	mov	r3, r1
 80125e4:	4630      	mov	r0, r6
 80125e6:	4639      	mov	r1, r7
 80125e8:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 80125ec:	f7ed fe6c 	bl	80002c8 <__aeabi_dsub>
 80125f0:	f805 6b01 	strb.w	r6, [r5], #1
 80125f4:	9e01      	ldr	r6, [sp, #4]
 80125f6:	9f03      	ldr	r7, [sp, #12]
 80125f8:	1bae      	subs	r6, r5, r6
 80125fa:	42b7      	cmp	r7, r6
 80125fc:	4602      	mov	r2, r0
 80125fe:	460b      	mov	r3, r1
 8012600:	d135      	bne.n	801266e <_dtoa_r+0x6e6>
 8012602:	f7ed fe63 	bl	80002cc <__adddf3>
 8012606:	4642      	mov	r2, r8
 8012608:	464b      	mov	r3, r9
 801260a:	4606      	mov	r6, r0
 801260c:	460f      	mov	r7, r1
 801260e:	f7ee faa3 	bl	8000b58 <__aeabi_dcmpgt>
 8012612:	b9d0      	cbnz	r0, 801264a <_dtoa_r+0x6c2>
 8012614:	4642      	mov	r2, r8
 8012616:	464b      	mov	r3, r9
 8012618:	4630      	mov	r0, r6
 801261a:	4639      	mov	r1, r7
 801261c:	f7ee fa74 	bl	8000b08 <__aeabi_dcmpeq>
 8012620:	b110      	cbz	r0, 8012628 <_dtoa_r+0x6a0>
 8012622:	f01a 0f01 	tst.w	sl, #1
 8012626:	d110      	bne.n	801264a <_dtoa_r+0x6c2>
 8012628:	4620      	mov	r0, r4
 801262a:	ee18 1a10 	vmov	r1, s16
 801262e:	f000 fe79 	bl	8013324 <_Bfree>
 8012632:	2300      	movs	r3, #0
 8012634:	9800      	ldr	r0, [sp, #0]
 8012636:	702b      	strb	r3, [r5, #0]
 8012638:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801263a:	3001      	adds	r0, #1
 801263c:	6018      	str	r0, [r3, #0]
 801263e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8012640:	2b00      	cmp	r3, #0
 8012642:	f43f acf1 	beq.w	8012028 <_dtoa_r+0xa0>
 8012646:	601d      	str	r5, [r3, #0]
 8012648:	e4ee      	b.n	8012028 <_dtoa_r+0xa0>
 801264a:	9f00      	ldr	r7, [sp, #0]
 801264c:	462b      	mov	r3, r5
 801264e:	461d      	mov	r5, r3
 8012650:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8012654:	2a39      	cmp	r2, #57	; 0x39
 8012656:	d106      	bne.n	8012666 <_dtoa_r+0x6de>
 8012658:	9a01      	ldr	r2, [sp, #4]
 801265a:	429a      	cmp	r2, r3
 801265c:	d1f7      	bne.n	801264e <_dtoa_r+0x6c6>
 801265e:	9901      	ldr	r1, [sp, #4]
 8012660:	2230      	movs	r2, #48	; 0x30
 8012662:	3701      	adds	r7, #1
 8012664:	700a      	strb	r2, [r1, #0]
 8012666:	781a      	ldrb	r2, [r3, #0]
 8012668:	3201      	adds	r2, #1
 801266a:	701a      	strb	r2, [r3, #0]
 801266c:	e790      	b.n	8012590 <_dtoa_r+0x608>
 801266e:	4ba6      	ldr	r3, [pc, #664]	; (8012908 <_dtoa_r+0x980>)
 8012670:	2200      	movs	r2, #0
 8012672:	f7ed ffe1 	bl	8000638 <__aeabi_dmul>
 8012676:	2200      	movs	r2, #0
 8012678:	2300      	movs	r3, #0
 801267a:	4606      	mov	r6, r0
 801267c:	460f      	mov	r7, r1
 801267e:	f7ee fa43 	bl	8000b08 <__aeabi_dcmpeq>
 8012682:	2800      	cmp	r0, #0
 8012684:	d09d      	beq.n	80125c2 <_dtoa_r+0x63a>
 8012686:	e7cf      	b.n	8012628 <_dtoa_r+0x6a0>
 8012688:	9a08      	ldr	r2, [sp, #32]
 801268a:	2a00      	cmp	r2, #0
 801268c:	f000 80d7 	beq.w	801283e <_dtoa_r+0x8b6>
 8012690:	9a06      	ldr	r2, [sp, #24]
 8012692:	2a01      	cmp	r2, #1
 8012694:	f300 80ba 	bgt.w	801280c <_dtoa_r+0x884>
 8012698:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801269a:	2a00      	cmp	r2, #0
 801269c:	f000 80b2 	beq.w	8012804 <_dtoa_r+0x87c>
 80126a0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80126a4:	9e07      	ldr	r6, [sp, #28]
 80126a6:	9d04      	ldr	r5, [sp, #16]
 80126a8:	9a04      	ldr	r2, [sp, #16]
 80126aa:	441a      	add	r2, r3
 80126ac:	9204      	str	r2, [sp, #16]
 80126ae:	9a05      	ldr	r2, [sp, #20]
 80126b0:	2101      	movs	r1, #1
 80126b2:	441a      	add	r2, r3
 80126b4:	4620      	mov	r0, r4
 80126b6:	9205      	str	r2, [sp, #20]
 80126b8:	f000 ff36 	bl	8013528 <__i2b>
 80126bc:	4607      	mov	r7, r0
 80126be:	2d00      	cmp	r5, #0
 80126c0:	dd0c      	ble.n	80126dc <_dtoa_r+0x754>
 80126c2:	9b05      	ldr	r3, [sp, #20]
 80126c4:	2b00      	cmp	r3, #0
 80126c6:	dd09      	ble.n	80126dc <_dtoa_r+0x754>
 80126c8:	42ab      	cmp	r3, r5
 80126ca:	9a04      	ldr	r2, [sp, #16]
 80126cc:	bfa8      	it	ge
 80126ce:	462b      	movge	r3, r5
 80126d0:	1ad2      	subs	r2, r2, r3
 80126d2:	9204      	str	r2, [sp, #16]
 80126d4:	9a05      	ldr	r2, [sp, #20]
 80126d6:	1aed      	subs	r5, r5, r3
 80126d8:	1ad3      	subs	r3, r2, r3
 80126da:	9305      	str	r3, [sp, #20]
 80126dc:	9b07      	ldr	r3, [sp, #28]
 80126de:	b31b      	cbz	r3, 8012728 <_dtoa_r+0x7a0>
 80126e0:	9b08      	ldr	r3, [sp, #32]
 80126e2:	2b00      	cmp	r3, #0
 80126e4:	f000 80af 	beq.w	8012846 <_dtoa_r+0x8be>
 80126e8:	2e00      	cmp	r6, #0
 80126ea:	dd13      	ble.n	8012714 <_dtoa_r+0x78c>
 80126ec:	4639      	mov	r1, r7
 80126ee:	4632      	mov	r2, r6
 80126f0:	4620      	mov	r0, r4
 80126f2:	f000 ffd9 	bl	80136a8 <__pow5mult>
 80126f6:	ee18 2a10 	vmov	r2, s16
 80126fa:	4601      	mov	r1, r0
 80126fc:	4607      	mov	r7, r0
 80126fe:	4620      	mov	r0, r4
 8012700:	f000 ff28 	bl	8013554 <__multiply>
 8012704:	ee18 1a10 	vmov	r1, s16
 8012708:	4680      	mov	r8, r0
 801270a:	4620      	mov	r0, r4
 801270c:	f000 fe0a 	bl	8013324 <_Bfree>
 8012710:	ee08 8a10 	vmov	s16, r8
 8012714:	9b07      	ldr	r3, [sp, #28]
 8012716:	1b9a      	subs	r2, r3, r6
 8012718:	d006      	beq.n	8012728 <_dtoa_r+0x7a0>
 801271a:	ee18 1a10 	vmov	r1, s16
 801271e:	4620      	mov	r0, r4
 8012720:	f000 ffc2 	bl	80136a8 <__pow5mult>
 8012724:	ee08 0a10 	vmov	s16, r0
 8012728:	2101      	movs	r1, #1
 801272a:	4620      	mov	r0, r4
 801272c:	f000 fefc 	bl	8013528 <__i2b>
 8012730:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012732:	2b00      	cmp	r3, #0
 8012734:	4606      	mov	r6, r0
 8012736:	f340 8088 	ble.w	801284a <_dtoa_r+0x8c2>
 801273a:	461a      	mov	r2, r3
 801273c:	4601      	mov	r1, r0
 801273e:	4620      	mov	r0, r4
 8012740:	f000 ffb2 	bl	80136a8 <__pow5mult>
 8012744:	9b06      	ldr	r3, [sp, #24]
 8012746:	2b01      	cmp	r3, #1
 8012748:	4606      	mov	r6, r0
 801274a:	f340 8081 	ble.w	8012850 <_dtoa_r+0x8c8>
 801274e:	f04f 0800 	mov.w	r8, #0
 8012752:	6933      	ldr	r3, [r6, #16]
 8012754:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8012758:	6918      	ldr	r0, [r3, #16]
 801275a:	f000 fe95 	bl	8013488 <__hi0bits>
 801275e:	f1c0 0020 	rsb	r0, r0, #32
 8012762:	9b05      	ldr	r3, [sp, #20]
 8012764:	4418      	add	r0, r3
 8012766:	f010 001f 	ands.w	r0, r0, #31
 801276a:	f000 8092 	beq.w	8012892 <_dtoa_r+0x90a>
 801276e:	f1c0 0320 	rsb	r3, r0, #32
 8012772:	2b04      	cmp	r3, #4
 8012774:	f340 808a 	ble.w	801288c <_dtoa_r+0x904>
 8012778:	f1c0 001c 	rsb	r0, r0, #28
 801277c:	9b04      	ldr	r3, [sp, #16]
 801277e:	4403      	add	r3, r0
 8012780:	9304      	str	r3, [sp, #16]
 8012782:	9b05      	ldr	r3, [sp, #20]
 8012784:	4403      	add	r3, r0
 8012786:	4405      	add	r5, r0
 8012788:	9305      	str	r3, [sp, #20]
 801278a:	9b04      	ldr	r3, [sp, #16]
 801278c:	2b00      	cmp	r3, #0
 801278e:	dd07      	ble.n	80127a0 <_dtoa_r+0x818>
 8012790:	ee18 1a10 	vmov	r1, s16
 8012794:	461a      	mov	r2, r3
 8012796:	4620      	mov	r0, r4
 8012798:	f000 ffe0 	bl	801375c <__lshift>
 801279c:	ee08 0a10 	vmov	s16, r0
 80127a0:	9b05      	ldr	r3, [sp, #20]
 80127a2:	2b00      	cmp	r3, #0
 80127a4:	dd05      	ble.n	80127b2 <_dtoa_r+0x82a>
 80127a6:	4631      	mov	r1, r6
 80127a8:	461a      	mov	r2, r3
 80127aa:	4620      	mov	r0, r4
 80127ac:	f000 ffd6 	bl	801375c <__lshift>
 80127b0:	4606      	mov	r6, r0
 80127b2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80127b4:	2b00      	cmp	r3, #0
 80127b6:	d06e      	beq.n	8012896 <_dtoa_r+0x90e>
 80127b8:	ee18 0a10 	vmov	r0, s16
 80127bc:	4631      	mov	r1, r6
 80127be:	f001 f83d 	bl	801383c <__mcmp>
 80127c2:	2800      	cmp	r0, #0
 80127c4:	da67      	bge.n	8012896 <_dtoa_r+0x90e>
 80127c6:	9b00      	ldr	r3, [sp, #0]
 80127c8:	3b01      	subs	r3, #1
 80127ca:	ee18 1a10 	vmov	r1, s16
 80127ce:	9300      	str	r3, [sp, #0]
 80127d0:	220a      	movs	r2, #10
 80127d2:	2300      	movs	r3, #0
 80127d4:	4620      	mov	r0, r4
 80127d6:	f000 fdc7 	bl	8013368 <__multadd>
 80127da:	9b08      	ldr	r3, [sp, #32]
 80127dc:	ee08 0a10 	vmov	s16, r0
 80127e0:	2b00      	cmp	r3, #0
 80127e2:	f000 81b1 	beq.w	8012b48 <_dtoa_r+0xbc0>
 80127e6:	2300      	movs	r3, #0
 80127e8:	4639      	mov	r1, r7
 80127ea:	220a      	movs	r2, #10
 80127ec:	4620      	mov	r0, r4
 80127ee:	f000 fdbb 	bl	8013368 <__multadd>
 80127f2:	9b02      	ldr	r3, [sp, #8]
 80127f4:	2b00      	cmp	r3, #0
 80127f6:	4607      	mov	r7, r0
 80127f8:	f300 808e 	bgt.w	8012918 <_dtoa_r+0x990>
 80127fc:	9b06      	ldr	r3, [sp, #24]
 80127fe:	2b02      	cmp	r3, #2
 8012800:	dc51      	bgt.n	80128a6 <_dtoa_r+0x91e>
 8012802:	e089      	b.n	8012918 <_dtoa_r+0x990>
 8012804:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8012806:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 801280a:	e74b      	b.n	80126a4 <_dtoa_r+0x71c>
 801280c:	9b03      	ldr	r3, [sp, #12]
 801280e:	1e5e      	subs	r6, r3, #1
 8012810:	9b07      	ldr	r3, [sp, #28]
 8012812:	42b3      	cmp	r3, r6
 8012814:	bfbf      	itttt	lt
 8012816:	9b07      	ldrlt	r3, [sp, #28]
 8012818:	9607      	strlt	r6, [sp, #28]
 801281a:	1af2      	sublt	r2, r6, r3
 801281c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 801281e:	bfb6      	itet	lt
 8012820:	189b      	addlt	r3, r3, r2
 8012822:	1b9e      	subge	r6, r3, r6
 8012824:	930a      	strlt	r3, [sp, #40]	; 0x28
 8012826:	9b03      	ldr	r3, [sp, #12]
 8012828:	bfb8      	it	lt
 801282a:	2600      	movlt	r6, #0
 801282c:	2b00      	cmp	r3, #0
 801282e:	bfb7      	itett	lt
 8012830:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8012834:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8012838:	1a9d      	sublt	r5, r3, r2
 801283a:	2300      	movlt	r3, #0
 801283c:	e734      	b.n	80126a8 <_dtoa_r+0x720>
 801283e:	9e07      	ldr	r6, [sp, #28]
 8012840:	9d04      	ldr	r5, [sp, #16]
 8012842:	9f08      	ldr	r7, [sp, #32]
 8012844:	e73b      	b.n	80126be <_dtoa_r+0x736>
 8012846:	9a07      	ldr	r2, [sp, #28]
 8012848:	e767      	b.n	801271a <_dtoa_r+0x792>
 801284a:	9b06      	ldr	r3, [sp, #24]
 801284c:	2b01      	cmp	r3, #1
 801284e:	dc18      	bgt.n	8012882 <_dtoa_r+0x8fa>
 8012850:	f1ba 0f00 	cmp.w	sl, #0
 8012854:	d115      	bne.n	8012882 <_dtoa_r+0x8fa>
 8012856:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801285a:	b993      	cbnz	r3, 8012882 <_dtoa_r+0x8fa>
 801285c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8012860:	0d1b      	lsrs	r3, r3, #20
 8012862:	051b      	lsls	r3, r3, #20
 8012864:	b183      	cbz	r3, 8012888 <_dtoa_r+0x900>
 8012866:	9b04      	ldr	r3, [sp, #16]
 8012868:	3301      	adds	r3, #1
 801286a:	9304      	str	r3, [sp, #16]
 801286c:	9b05      	ldr	r3, [sp, #20]
 801286e:	3301      	adds	r3, #1
 8012870:	9305      	str	r3, [sp, #20]
 8012872:	f04f 0801 	mov.w	r8, #1
 8012876:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012878:	2b00      	cmp	r3, #0
 801287a:	f47f af6a 	bne.w	8012752 <_dtoa_r+0x7ca>
 801287e:	2001      	movs	r0, #1
 8012880:	e76f      	b.n	8012762 <_dtoa_r+0x7da>
 8012882:	f04f 0800 	mov.w	r8, #0
 8012886:	e7f6      	b.n	8012876 <_dtoa_r+0x8ee>
 8012888:	4698      	mov	r8, r3
 801288a:	e7f4      	b.n	8012876 <_dtoa_r+0x8ee>
 801288c:	f43f af7d 	beq.w	801278a <_dtoa_r+0x802>
 8012890:	4618      	mov	r0, r3
 8012892:	301c      	adds	r0, #28
 8012894:	e772      	b.n	801277c <_dtoa_r+0x7f4>
 8012896:	9b03      	ldr	r3, [sp, #12]
 8012898:	2b00      	cmp	r3, #0
 801289a:	dc37      	bgt.n	801290c <_dtoa_r+0x984>
 801289c:	9b06      	ldr	r3, [sp, #24]
 801289e:	2b02      	cmp	r3, #2
 80128a0:	dd34      	ble.n	801290c <_dtoa_r+0x984>
 80128a2:	9b03      	ldr	r3, [sp, #12]
 80128a4:	9302      	str	r3, [sp, #8]
 80128a6:	9b02      	ldr	r3, [sp, #8]
 80128a8:	b96b      	cbnz	r3, 80128c6 <_dtoa_r+0x93e>
 80128aa:	4631      	mov	r1, r6
 80128ac:	2205      	movs	r2, #5
 80128ae:	4620      	mov	r0, r4
 80128b0:	f000 fd5a 	bl	8013368 <__multadd>
 80128b4:	4601      	mov	r1, r0
 80128b6:	4606      	mov	r6, r0
 80128b8:	ee18 0a10 	vmov	r0, s16
 80128bc:	f000 ffbe 	bl	801383c <__mcmp>
 80128c0:	2800      	cmp	r0, #0
 80128c2:	f73f adbb 	bgt.w	801243c <_dtoa_r+0x4b4>
 80128c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80128c8:	9d01      	ldr	r5, [sp, #4]
 80128ca:	43db      	mvns	r3, r3
 80128cc:	9300      	str	r3, [sp, #0]
 80128ce:	f04f 0800 	mov.w	r8, #0
 80128d2:	4631      	mov	r1, r6
 80128d4:	4620      	mov	r0, r4
 80128d6:	f000 fd25 	bl	8013324 <_Bfree>
 80128da:	2f00      	cmp	r7, #0
 80128dc:	f43f aea4 	beq.w	8012628 <_dtoa_r+0x6a0>
 80128e0:	f1b8 0f00 	cmp.w	r8, #0
 80128e4:	d005      	beq.n	80128f2 <_dtoa_r+0x96a>
 80128e6:	45b8      	cmp	r8, r7
 80128e8:	d003      	beq.n	80128f2 <_dtoa_r+0x96a>
 80128ea:	4641      	mov	r1, r8
 80128ec:	4620      	mov	r0, r4
 80128ee:	f000 fd19 	bl	8013324 <_Bfree>
 80128f2:	4639      	mov	r1, r7
 80128f4:	4620      	mov	r0, r4
 80128f6:	f000 fd15 	bl	8013324 <_Bfree>
 80128fa:	e695      	b.n	8012628 <_dtoa_r+0x6a0>
 80128fc:	2600      	movs	r6, #0
 80128fe:	4637      	mov	r7, r6
 8012900:	e7e1      	b.n	80128c6 <_dtoa_r+0x93e>
 8012902:	9700      	str	r7, [sp, #0]
 8012904:	4637      	mov	r7, r6
 8012906:	e599      	b.n	801243c <_dtoa_r+0x4b4>
 8012908:	40240000 	.word	0x40240000
 801290c:	9b08      	ldr	r3, [sp, #32]
 801290e:	2b00      	cmp	r3, #0
 8012910:	f000 80ca 	beq.w	8012aa8 <_dtoa_r+0xb20>
 8012914:	9b03      	ldr	r3, [sp, #12]
 8012916:	9302      	str	r3, [sp, #8]
 8012918:	2d00      	cmp	r5, #0
 801291a:	dd05      	ble.n	8012928 <_dtoa_r+0x9a0>
 801291c:	4639      	mov	r1, r7
 801291e:	462a      	mov	r2, r5
 8012920:	4620      	mov	r0, r4
 8012922:	f000 ff1b 	bl	801375c <__lshift>
 8012926:	4607      	mov	r7, r0
 8012928:	f1b8 0f00 	cmp.w	r8, #0
 801292c:	d05b      	beq.n	80129e6 <_dtoa_r+0xa5e>
 801292e:	6879      	ldr	r1, [r7, #4]
 8012930:	4620      	mov	r0, r4
 8012932:	f000 fcb7 	bl	80132a4 <_Balloc>
 8012936:	4605      	mov	r5, r0
 8012938:	b928      	cbnz	r0, 8012946 <_dtoa_r+0x9be>
 801293a:	4b87      	ldr	r3, [pc, #540]	; (8012b58 <_dtoa_r+0xbd0>)
 801293c:	4602      	mov	r2, r0
 801293e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8012942:	f7ff bb3b 	b.w	8011fbc <_dtoa_r+0x34>
 8012946:	693a      	ldr	r2, [r7, #16]
 8012948:	3202      	adds	r2, #2
 801294a:	0092      	lsls	r2, r2, #2
 801294c:	f107 010c 	add.w	r1, r7, #12
 8012950:	300c      	adds	r0, #12
 8012952:	f7fd fc77 	bl	8010244 <memcpy>
 8012956:	2201      	movs	r2, #1
 8012958:	4629      	mov	r1, r5
 801295a:	4620      	mov	r0, r4
 801295c:	f000 fefe 	bl	801375c <__lshift>
 8012960:	9b01      	ldr	r3, [sp, #4]
 8012962:	f103 0901 	add.w	r9, r3, #1
 8012966:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 801296a:	4413      	add	r3, r2
 801296c:	9305      	str	r3, [sp, #20]
 801296e:	f00a 0301 	and.w	r3, sl, #1
 8012972:	46b8      	mov	r8, r7
 8012974:	9304      	str	r3, [sp, #16]
 8012976:	4607      	mov	r7, r0
 8012978:	4631      	mov	r1, r6
 801297a:	ee18 0a10 	vmov	r0, s16
 801297e:	f7ff fa75 	bl	8011e6c <quorem>
 8012982:	4641      	mov	r1, r8
 8012984:	9002      	str	r0, [sp, #8]
 8012986:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 801298a:	ee18 0a10 	vmov	r0, s16
 801298e:	f000 ff55 	bl	801383c <__mcmp>
 8012992:	463a      	mov	r2, r7
 8012994:	9003      	str	r0, [sp, #12]
 8012996:	4631      	mov	r1, r6
 8012998:	4620      	mov	r0, r4
 801299a:	f000 ff6b 	bl	8013874 <__mdiff>
 801299e:	68c2      	ldr	r2, [r0, #12]
 80129a0:	f109 3bff 	add.w	fp, r9, #4294967295
 80129a4:	4605      	mov	r5, r0
 80129a6:	bb02      	cbnz	r2, 80129ea <_dtoa_r+0xa62>
 80129a8:	4601      	mov	r1, r0
 80129aa:	ee18 0a10 	vmov	r0, s16
 80129ae:	f000 ff45 	bl	801383c <__mcmp>
 80129b2:	4602      	mov	r2, r0
 80129b4:	4629      	mov	r1, r5
 80129b6:	4620      	mov	r0, r4
 80129b8:	9207      	str	r2, [sp, #28]
 80129ba:	f000 fcb3 	bl	8013324 <_Bfree>
 80129be:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 80129c2:	ea43 0102 	orr.w	r1, r3, r2
 80129c6:	9b04      	ldr	r3, [sp, #16]
 80129c8:	430b      	orrs	r3, r1
 80129ca:	464d      	mov	r5, r9
 80129cc:	d10f      	bne.n	80129ee <_dtoa_r+0xa66>
 80129ce:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80129d2:	d02a      	beq.n	8012a2a <_dtoa_r+0xaa2>
 80129d4:	9b03      	ldr	r3, [sp, #12]
 80129d6:	2b00      	cmp	r3, #0
 80129d8:	dd02      	ble.n	80129e0 <_dtoa_r+0xa58>
 80129da:	9b02      	ldr	r3, [sp, #8]
 80129dc:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 80129e0:	f88b a000 	strb.w	sl, [fp]
 80129e4:	e775      	b.n	80128d2 <_dtoa_r+0x94a>
 80129e6:	4638      	mov	r0, r7
 80129e8:	e7ba      	b.n	8012960 <_dtoa_r+0x9d8>
 80129ea:	2201      	movs	r2, #1
 80129ec:	e7e2      	b.n	80129b4 <_dtoa_r+0xa2c>
 80129ee:	9b03      	ldr	r3, [sp, #12]
 80129f0:	2b00      	cmp	r3, #0
 80129f2:	db04      	blt.n	80129fe <_dtoa_r+0xa76>
 80129f4:	9906      	ldr	r1, [sp, #24]
 80129f6:	430b      	orrs	r3, r1
 80129f8:	9904      	ldr	r1, [sp, #16]
 80129fa:	430b      	orrs	r3, r1
 80129fc:	d122      	bne.n	8012a44 <_dtoa_r+0xabc>
 80129fe:	2a00      	cmp	r2, #0
 8012a00:	ddee      	ble.n	80129e0 <_dtoa_r+0xa58>
 8012a02:	ee18 1a10 	vmov	r1, s16
 8012a06:	2201      	movs	r2, #1
 8012a08:	4620      	mov	r0, r4
 8012a0a:	f000 fea7 	bl	801375c <__lshift>
 8012a0e:	4631      	mov	r1, r6
 8012a10:	ee08 0a10 	vmov	s16, r0
 8012a14:	f000 ff12 	bl	801383c <__mcmp>
 8012a18:	2800      	cmp	r0, #0
 8012a1a:	dc03      	bgt.n	8012a24 <_dtoa_r+0xa9c>
 8012a1c:	d1e0      	bne.n	80129e0 <_dtoa_r+0xa58>
 8012a1e:	f01a 0f01 	tst.w	sl, #1
 8012a22:	d0dd      	beq.n	80129e0 <_dtoa_r+0xa58>
 8012a24:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8012a28:	d1d7      	bne.n	80129da <_dtoa_r+0xa52>
 8012a2a:	2339      	movs	r3, #57	; 0x39
 8012a2c:	f88b 3000 	strb.w	r3, [fp]
 8012a30:	462b      	mov	r3, r5
 8012a32:	461d      	mov	r5, r3
 8012a34:	3b01      	subs	r3, #1
 8012a36:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8012a3a:	2a39      	cmp	r2, #57	; 0x39
 8012a3c:	d071      	beq.n	8012b22 <_dtoa_r+0xb9a>
 8012a3e:	3201      	adds	r2, #1
 8012a40:	701a      	strb	r2, [r3, #0]
 8012a42:	e746      	b.n	80128d2 <_dtoa_r+0x94a>
 8012a44:	2a00      	cmp	r2, #0
 8012a46:	dd07      	ble.n	8012a58 <_dtoa_r+0xad0>
 8012a48:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8012a4c:	d0ed      	beq.n	8012a2a <_dtoa_r+0xaa2>
 8012a4e:	f10a 0301 	add.w	r3, sl, #1
 8012a52:	f88b 3000 	strb.w	r3, [fp]
 8012a56:	e73c      	b.n	80128d2 <_dtoa_r+0x94a>
 8012a58:	9b05      	ldr	r3, [sp, #20]
 8012a5a:	f809 ac01 	strb.w	sl, [r9, #-1]
 8012a5e:	4599      	cmp	r9, r3
 8012a60:	d047      	beq.n	8012af2 <_dtoa_r+0xb6a>
 8012a62:	ee18 1a10 	vmov	r1, s16
 8012a66:	2300      	movs	r3, #0
 8012a68:	220a      	movs	r2, #10
 8012a6a:	4620      	mov	r0, r4
 8012a6c:	f000 fc7c 	bl	8013368 <__multadd>
 8012a70:	45b8      	cmp	r8, r7
 8012a72:	ee08 0a10 	vmov	s16, r0
 8012a76:	f04f 0300 	mov.w	r3, #0
 8012a7a:	f04f 020a 	mov.w	r2, #10
 8012a7e:	4641      	mov	r1, r8
 8012a80:	4620      	mov	r0, r4
 8012a82:	d106      	bne.n	8012a92 <_dtoa_r+0xb0a>
 8012a84:	f000 fc70 	bl	8013368 <__multadd>
 8012a88:	4680      	mov	r8, r0
 8012a8a:	4607      	mov	r7, r0
 8012a8c:	f109 0901 	add.w	r9, r9, #1
 8012a90:	e772      	b.n	8012978 <_dtoa_r+0x9f0>
 8012a92:	f000 fc69 	bl	8013368 <__multadd>
 8012a96:	4639      	mov	r1, r7
 8012a98:	4680      	mov	r8, r0
 8012a9a:	2300      	movs	r3, #0
 8012a9c:	220a      	movs	r2, #10
 8012a9e:	4620      	mov	r0, r4
 8012aa0:	f000 fc62 	bl	8013368 <__multadd>
 8012aa4:	4607      	mov	r7, r0
 8012aa6:	e7f1      	b.n	8012a8c <_dtoa_r+0xb04>
 8012aa8:	9b03      	ldr	r3, [sp, #12]
 8012aaa:	9302      	str	r3, [sp, #8]
 8012aac:	9d01      	ldr	r5, [sp, #4]
 8012aae:	ee18 0a10 	vmov	r0, s16
 8012ab2:	4631      	mov	r1, r6
 8012ab4:	f7ff f9da 	bl	8011e6c <quorem>
 8012ab8:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8012abc:	9b01      	ldr	r3, [sp, #4]
 8012abe:	f805 ab01 	strb.w	sl, [r5], #1
 8012ac2:	1aea      	subs	r2, r5, r3
 8012ac4:	9b02      	ldr	r3, [sp, #8]
 8012ac6:	4293      	cmp	r3, r2
 8012ac8:	dd09      	ble.n	8012ade <_dtoa_r+0xb56>
 8012aca:	ee18 1a10 	vmov	r1, s16
 8012ace:	2300      	movs	r3, #0
 8012ad0:	220a      	movs	r2, #10
 8012ad2:	4620      	mov	r0, r4
 8012ad4:	f000 fc48 	bl	8013368 <__multadd>
 8012ad8:	ee08 0a10 	vmov	s16, r0
 8012adc:	e7e7      	b.n	8012aae <_dtoa_r+0xb26>
 8012ade:	9b02      	ldr	r3, [sp, #8]
 8012ae0:	2b00      	cmp	r3, #0
 8012ae2:	bfc8      	it	gt
 8012ae4:	461d      	movgt	r5, r3
 8012ae6:	9b01      	ldr	r3, [sp, #4]
 8012ae8:	bfd8      	it	le
 8012aea:	2501      	movle	r5, #1
 8012aec:	441d      	add	r5, r3
 8012aee:	f04f 0800 	mov.w	r8, #0
 8012af2:	ee18 1a10 	vmov	r1, s16
 8012af6:	2201      	movs	r2, #1
 8012af8:	4620      	mov	r0, r4
 8012afa:	f000 fe2f 	bl	801375c <__lshift>
 8012afe:	4631      	mov	r1, r6
 8012b00:	ee08 0a10 	vmov	s16, r0
 8012b04:	f000 fe9a 	bl	801383c <__mcmp>
 8012b08:	2800      	cmp	r0, #0
 8012b0a:	dc91      	bgt.n	8012a30 <_dtoa_r+0xaa8>
 8012b0c:	d102      	bne.n	8012b14 <_dtoa_r+0xb8c>
 8012b0e:	f01a 0f01 	tst.w	sl, #1
 8012b12:	d18d      	bne.n	8012a30 <_dtoa_r+0xaa8>
 8012b14:	462b      	mov	r3, r5
 8012b16:	461d      	mov	r5, r3
 8012b18:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8012b1c:	2a30      	cmp	r2, #48	; 0x30
 8012b1e:	d0fa      	beq.n	8012b16 <_dtoa_r+0xb8e>
 8012b20:	e6d7      	b.n	80128d2 <_dtoa_r+0x94a>
 8012b22:	9a01      	ldr	r2, [sp, #4]
 8012b24:	429a      	cmp	r2, r3
 8012b26:	d184      	bne.n	8012a32 <_dtoa_r+0xaaa>
 8012b28:	9b00      	ldr	r3, [sp, #0]
 8012b2a:	3301      	adds	r3, #1
 8012b2c:	9300      	str	r3, [sp, #0]
 8012b2e:	2331      	movs	r3, #49	; 0x31
 8012b30:	7013      	strb	r3, [r2, #0]
 8012b32:	e6ce      	b.n	80128d2 <_dtoa_r+0x94a>
 8012b34:	4b09      	ldr	r3, [pc, #36]	; (8012b5c <_dtoa_r+0xbd4>)
 8012b36:	f7ff ba95 	b.w	8012064 <_dtoa_r+0xdc>
 8012b3a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8012b3c:	2b00      	cmp	r3, #0
 8012b3e:	f47f aa6e 	bne.w	801201e <_dtoa_r+0x96>
 8012b42:	4b07      	ldr	r3, [pc, #28]	; (8012b60 <_dtoa_r+0xbd8>)
 8012b44:	f7ff ba8e 	b.w	8012064 <_dtoa_r+0xdc>
 8012b48:	9b02      	ldr	r3, [sp, #8]
 8012b4a:	2b00      	cmp	r3, #0
 8012b4c:	dcae      	bgt.n	8012aac <_dtoa_r+0xb24>
 8012b4e:	9b06      	ldr	r3, [sp, #24]
 8012b50:	2b02      	cmp	r3, #2
 8012b52:	f73f aea8 	bgt.w	80128a6 <_dtoa_r+0x91e>
 8012b56:	e7a9      	b.n	8012aac <_dtoa_r+0xb24>
 8012b58:	08015b10 	.word	0x08015b10
 8012b5c:	08015d09 	.word	0x08015d09
 8012b60:	08015a91 	.word	0x08015a91

08012b64 <rshift>:
 8012b64:	6903      	ldr	r3, [r0, #16]
 8012b66:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8012b6a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8012b6e:	ea4f 1261 	mov.w	r2, r1, asr #5
 8012b72:	f100 0414 	add.w	r4, r0, #20
 8012b76:	dd45      	ble.n	8012c04 <rshift+0xa0>
 8012b78:	f011 011f 	ands.w	r1, r1, #31
 8012b7c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8012b80:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8012b84:	d10c      	bne.n	8012ba0 <rshift+0x3c>
 8012b86:	f100 0710 	add.w	r7, r0, #16
 8012b8a:	4629      	mov	r1, r5
 8012b8c:	42b1      	cmp	r1, r6
 8012b8e:	d334      	bcc.n	8012bfa <rshift+0x96>
 8012b90:	1a9b      	subs	r3, r3, r2
 8012b92:	009b      	lsls	r3, r3, #2
 8012b94:	1eea      	subs	r2, r5, #3
 8012b96:	4296      	cmp	r6, r2
 8012b98:	bf38      	it	cc
 8012b9a:	2300      	movcc	r3, #0
 8012b9c:	4423      	add	r3, r4
 8012b9e:	e015      	b.n	8012bcc <rshift+0x68>
 8012ba0:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8012ba4:	f1c1 0820 	rsb	r8, r1, #32
 8012ba8:	40cf      	lsrs	r7, r1
 8012baa:	f105 0e04 	add.w	lr, r5, #4
 8012bae:	46a1      	mov	r9, r4
 8012bb0:	4576      	cmp	r6, lr
 8012bb2:	46f4      	mov	ip, lr
 8012bb4:	d815      	bhi.n	8012be2 <rshift+0x7e>
 8012bb6:	1a9a      	subs	r2, r3, r2
 8012bb8:	0092      	lsls	r2, r2, #2
 8012bba:	3a04      	subs	r2, #4
 8012bbc:	3501      	adds	r5, #1
 8012bbe:	42ae      	cmp	r6, r5
 8012bc0:	bf38      	it	cc
 8012bc2:	2200      	movcc	r2, #0
 8012bc4:	18a3      	adds	r3, r4, r2
 8012bc6:	50a7      	str	r7, [r4, r2]
 8012bc8:	b107      	cbz	r7, 8012bcc <rshift+0x68>
 8012bca:	3304      	adds	r3, #4
 8012bcc:	1b1a      	subs	r2, r3, r4
 8012bce:	42a3      	cmp	r3, r4
 8012bd0:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8012bd4:	bf08      	it	eq
 8012bd6:	2300      	moveq	r3, #0
 8012bd8:	6102      	str	r2, [r0, #16]
 8012bda:	bf08      	it	eq
 8012bdc:	6143      	streq	r3, [r0, #20]
 8012bde:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012be2:	f8dc c000 	ldr.w	ip, [ip]
 8012be6:	fa0c fc08 	lsl.w	ip, ip, r8
 8012bea:	ea4c 0707 	orr.w	r7, ip, r7
 8012bee:	f849 7b04 	str.w	r7, [r9], #4
 8012bf2:	f85e 7b04 	ldr.w	r7, [lr], #4
 8012bf6:	40cf      	lsrs	r7, r1
 8012bf8:	e7da      	b.n	8012bb0 <rshift+0x4c>
 8012bfa:	f851 cb04 	ldr.w	ip, [r1], #4
 8012bfe:	f847 cf04 	str.w	ip, [r7, #4]!
 8012c02:	e7c3      	b.n	8012b8c <rshift+0x28>
 8012c04:	4623      	mov	r3, r4
 8012c06:	e7e1      	b.n	8012bcc <rshift+0x68>

08012c08 <__hexdig_fun>:
 8012c08:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8012c0c:	2b09      	cmp	r3, #9
 8012c0e:	d802      	bhi.n	8012c16 <__hexdig_fun+0xe>
 8012c10:	3820      	subs	r0, #32
 8012c12:	b2c0      	uxtb	r0, r0
 8012c14:	4770      	bx	lr
 8012c16:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8012c1a:	2b05      	cmp	r3, #5
 8012c1c:	d801      	bhi.n	8012c22 <__hexdig_fun+0x1a>
 8012c1e:	3847      	subs	r0, #71	; 0x47
 8012c20:	e7f7      	b.n	8012c12 <__hexdig_fun+0xa>
 8012c22:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8012c26:	2b05      	cmp	r3, #5
 8012c28:	d801      	bhi.n	8012c2e <__hexdig_fun+0x26>
 8012c2a:	3827      	subs	r0, #39	; 0x27
 8012c2c:	e7f1      	b.n	8012c12 <__hexdig_fun+0xa>
 8012c2e:	2000      	movs	r0, #0
 8012c30:	4770      	bx	lr
	...

08012c34 <__gethex>:
 8012c34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012c38:	ed2d 8b02 	vpush	{d8}
 8012c3c:	b089      	sub	sp, #36	; 0x24
 8012c3e:	ee08 0a10 	vmov	s16, r0
 8012c42:	9304      	str	r3, [sp, #16]
 8012c44:	4bb4      	ldr	r3, [pc, #720]	; (8012f18 <__gethex+0x2e4>)
 8012c46:	681b      	ldr	r3, [r3, #0]
 8012c48:	9301      	str	r3, [sp, #4]
 8012c4a:	4618      	mov	r0, r3
 8012c4c:	468b      	mov	fp, r1
 8012c4e:	4690      	mov	r8, r2
 8012c50:	f7ed fade 	bl	8000210 <strlen>
 8012c54:	9b01      	ldr	r3, [sp, #4]
 8012c56:	f8db 2000 	ldr.w	r2, [fp]
 8012c5a:	4403      	add	r3, r0
 8012c5c:	4682      	mov	sl, r0
 8012c5e:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8012c62:	9305      	str	r3, [sp, #20]
 8012c64:	1c93      	adds	r3, r2, #2
 8012c66:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8012c6a:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8012c6e:	32fe      	adds	r2, #254	; 0xfe
 8012c70:	18d1      	adds	r1, r2, r3
 8012c72:	461f      	mov	r7, r3
 8012c74:	f813 0b01 	ldrb.w	r0, [r3], #1
 8012c78:	9100      	str	r1, [sp, #0]
 8012c7a:	2830      	cmp	r0, #48	; 0x30
 8012c7c:	d0f8      	beq.n	8012c70 <__gethex+0x3c>
 8012c7e:	f7ff ffc3 	bl	8012c08 <__hexdig_fun>
 8012c82:	4604      	mov	r4, r0
 8012c84:	2800      	cmp	r0, #0
 8012c86:	d13a      	bne.n	8012cfe <__gethex+0xca>
 8012c88:	9901      	ldr	r1, [sp, #4]
 8012c8a:	4652      	mov	r2, sl
 8012c8c:	4638      	mov	r0, r7
 8012c8e:	f7fe fa08 	bl	80110a2 <strncmp>
 8012c92:	4605      	mov	r5, r0
 8012c94:	2800      	cmp	r0, #0
 8012c96:	d168      	bne.n	8012d6a <__gethex+0x136>
 8012c98:	f817 000a 	ldrb.w	r0, [r7, sl]
 8012c9c:	eb07 060a 	add.w	r6, r7, sl
 8012ca0:	f7ff ffb2 	bl	8012c08 <__hexdig_fun>
 8012ca4:	2800      	cmp	r0, #0
 8012ca6:	d062      	beq.n	8012d6e <__gethex+0x13a>
 8012ca8:	4633      	mov	r3, r6
 8012caa:	7818      	ldrb	r0, [r3, #0]
 8012cac:	2830      	cmp	r0, #48	; 0x30
 8012cae:	461f      	mov	r7, r3
 8012cb0:	f103 0301 	add.w	r3, r3, #1
 8012cb4:	d0f9      	beq.n	8012caa <__gethex+0x76>
 8012cb6:	f7ff ffa7 	bl	8012c08 <__hexdig_fun>
 8012cba:	2301      	movs	r3, #1
 8012cbc:	fab0 f480 	clz	r4, r0
 8012cc0:	0964      	lsrs	r4, r4, #5
 8012cc2:	4635      	mov	r5, r6
 8012cc4:	9300      	str	r3, [sp, #0]
 8012cc6:	463a      	mov	r2, r7
 8012cc8:	4616      	mov	r6, r2
 8012cca:	3201      	adds	r2, #1
 8012ccc:	7830      	ldrb	r0, [r6, #0]
 8012cce:	f7ff ff9b 	bl	8012c08 <__hexdig_fun>
 8012cd2:	2800      	cmp	r0, #0
 8012cd4:	d1f8      	bne.n	8012cc8 <__gethex+0x94>
 8012cd6:	9901      	ldr	r1, [sp, #4]
 8012cd8:	4652      	mov	r2, sl
 8012cda:	4630      	mov	r0, r6
 8012cdc:	f7fe f9e1 	bl	80110a2 <strncmp>
 8012ce0:	b980      	cbnz	r0, 8012d04 <__gethex+0xd0>
 8012ce2:	b94d      	cbnz	r5, 8012cf8 <__gethex+0xc4>
 8012ce4:	eb06 050a 	add.w	r5, r6, sl
 8012ce8:	462a      	mov	r2, r5
 8012cea:	4616      	mov	r6, r2
 8012cec:	3201      	adds	r2, #1
 8012cee:	7830      	ldrb	r0, [r6, #0]
 8012cf0:	f7ff ff8a 	bl	8012c08 <__hexdig_fun>
 8012cf4:	2800      	cmp	r0, #0
 8012cf6:	d1f8      	bne.n	8012cea <__gethex+0xb6>
 8012cf8:	1bad      	subs	r5, r5, r6
 8012cfa:	00ad      	lsls	r5, r5, #2
 8012cfc:	e004      	b.n	8012d08 <__gethex+0xd4>
 8012cfe:	2400      	movs	r4, #0
 8012d00:	4625      	mov	r5, r4
 8012d02:	e7e0      	b.n	8012cc6 <__gethex+0x92>
 8012d04:	2d00      	cmp	r5, #0
 8012d06:	d1f7      	bne.n	8012cf8 <__gethex+0xc4>
 8012d08:	7833      	ldrb	r3, [r6, #0]
 8012d0a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8012d0e:	2b50      	cmp	r3, #80	; 0x50
 8012d10:	d13b      	bne.n	8012d8a <__gethex+0x156>
 8012d12:	7873      	ldrb	r3, [r6, #1]
 8012d14:	2b2b      	cmp	r3, #43	; 0x2b
 8012d16:	d02c      	beq.n	8012d72 <__gethex+0x13e>
 8012d18:	2b2d      	cmp	r3, #45	; 0x2d
 8012d1a:	d02e      	beq.n	8012d7a <__gethex+0x146>
 8012d1c:	1c71      	adds	r1, r6, #1
 8012d1e:	f04f 0900 	mov.w	r9, #0
 8012d22:	7808      	ldrb	r0, [r1, #0]
 8012d24:	f7ff ff70 	bl	8012c08 <__hexdig_fun>
 8012d28:	1e43      	subs	r3, r0, #1
 8012d2a:	b2db      	uxtb	r3, r3
 8012d2c:	2b18      	cmp	r3, #24
 8012d2e:	d82c      	bhi.n	8012d8a <__gethex+0x156>
 8012d30:	f1a0 0210 	sub.w	r2, r0, #16
 8012d34:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8012d38:	f7ff ff66 	bl	8012c08 <__hexdig_fun>
 8012d3c:	1e43      	subs	r3, r0, #1
 8012d3e:	b2db      	uxtb	r3, r3
 8012d40:	2b18      	cmp	r3, #24
 8012d42:	d91d      	bls.n	8012d80 <__gethex+0x14c>
 8012d44:	f1b9 0f00 	cmp.w	r9, #0
 8012d48:	d000      	beq.n	8012d4c <__gethex+0x118>
 8012d4a:	4252      	negs	r2, r2
 8012d4c:	4415      	add	r5, r2
 8012d4e:	f8cb 1000 	str.w	r1, [fp]
 8012d52:	b1e4      	cbz	r4, 8012d8e <__gethex+0x15a>
 8012d54:	9b00      	ldr	r3, [sp, #0]
 8012d56:	2b00      	cmp	r3, #0
 8012d58:	bf14      	ite	ne
 8012d5a:	2700      	movne	r7, #0
 8012d5c:	2706      	moveq	r7, #6
 8012d5e:	4638      	mov	r0, r7
 8012d60:	b009      	add	sp, #36	; 0x24
 8012d62:	ecbd 8b02 	vpop	{d8}
 8012d66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012d6a:	463e      	mov	r6, r7
 8012d6c:	4625      	mov	r5, r4
 8012d6e:	2401      	movs	r4, #1
 8012d70:	e7ca      	b.n	8012d08 <__gethex+0xd4>
 8012d72:	f04f 0900 	mov.w	r9, #0
 8012d76:	1cb1      	adds	r1, r6, #2
 8012d78:	e7d3      	b.n	8012d22 <__gethex+0xee>
 8012d7a:	f04f 0901 	mov.w	r9, #1
 8012d7e:	e7fa      	b.n	8012d76 <__gethex+0x142>
 8012d80:	230a      	movs	r3, #10
 8012d82:	fb03 0202 	mla	r2, r3, r2, r0
 8012d86:	3a10      	subs	r2, #16
 8012d88:	e7d4      	b.n	8012d34 <__gethex+0x100>
 8012d8a:	4631      	mov	r1, r6
 8012d8c:	e7df      	b.n	8012d4e <__gethex+0x11a>
 8012d8e:	1bf3      	subs	r3, r6, r7
 8012d90:	3b01      	subs	r3, #1
 8012d92:	4621      	mov	r1, r4
 8012d94:	2b07      	cmp	r3, #7
 8012d96:	dc0b      	bgt.n	8012db0 <__gethex+0x17c>
 8012d98:	ee18 0a10 	vmov	r0, s16
 8012d9c:	f000 fa82 	bl	80132a4 <_Balloc>
 8012da0:	4604      	mov	r4, r0
 8012da2:	b940      	cbnz	r0, 8012db6 <__gethex+0x182>
 8012da4:	4b5d      	ldr	r3, [pc, #372]	; (8012f1c <__gethex+0x2e8>)
 8012da6:	4602      	mov	r2, r0
 8012da8:	21de      	movs	r1, #222	; 0xde
 8012daa:	485d      	ldr	r0, [pc, #372]	; (8012f20 <__gethex+0x2ec>)
 8012dac:	f001 fdd0 	bl	8014950 <__assert_func>
 8012db0:	3101      	adds	r1, #1
 8012db2:	105b      	asrs	r3, r3, #1
 8012db4:	e7ee      	b.n	8012d94 <__gethex+0x160>
 8012db6:	f100 0914 	add.w	r9, r0, #20
 8012dba:	f04f 0b00 	mov.w	fp, #0
 8012dbe:	f1ca 0301 	rsb	r3, sl, #1
 8012dc2:	f8cd 9008 	str.w	r9, [sp, #8]
 8012dc6:	f8cd b000 	str.w	fp, [sp]
 8012dca:	9306      	str	r3, [sp, #24]
 8012dcc:	42b7      	cmp	r7, r6
 8012dce:	d340      	bcc.n	8012e52 <__gethex+0x21e>
 8012dd0:	9802      	ldr	r0, [sp, #8]
 8012dd2:	9b00      	ldr	r3, [sp, #0]
 8012dd4:	f840 3b04 	str.w	r3, [r0], #4
 8012dd8:	eba0 0009 	sub.w	r0, r0, r9
 8012ddc:	1080      	asrs	r0, r0, #2
 8012dde:	0146      	lsls	r6, r0, #5
 8012de0:	6120      	str	r0, [r4, #16]
 8012de2:	4618      	mov	r0, r3
 8012de4:	f000 fb50 	bl	8013488 <__hi0bits>
 8012de8:	1a30      	subs	r0, r6, r0
 8012dea:	f8d8 6000 	ldr.w	r6, [r8]
 8012dee:	42b0      	cmp	r0, r6
 8012df0:	dd63      	ble.n	8012eba <__gethex+0x286>
 8012df2:	1b87      	subs	r7, r0, r6
 8012df4:	4639      	mov	r1, r7
 8012df6:	4620      	mov	r0, r4
 8012df8:	f000 fef4 	bl	8013be4 <__any_on>
 8012dfc:	4682      	mov	sl, r0
 8012dfe:	b1a8      	cbz	r0, 8012e2c <__gethex+0x1f8>
 8012e00:	1e7b      	subs	r3, r7, #1
 8012e02:	1159      	asrs	r1, r3, #5
 8012e04:	f003 021f 	and.w	r2, r3, #31
 8012e08:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8012e0c:	f04f 0a01 	mov.w	sl, #1
 8012e10:	fa0a f202 	lsl.w	r2, sl, r2
 8012e14:	420a      	tst	r2, r1
 8012e16:	d009      	beq.n	8012e2c <__gethex+0x1f8>
 8012e18:	4553      	cmp	r3, sl
 8012e1a:	dd05      	ble.n	8012e28 <__gethex+0x1f4>
 8012e1c:	1eb9      	subs	r1, r7, #2
 8012e1e:	4620      	mov	r0, r4
 8012e20:	f000 fee0 	bl	8013be4 <__any_on>
 8012e24:	2800      	cmp	r0, #0
 8012e26:	d145      	bne.n	8012eb4 <__gethex+0x280>
 8012e28:	f04f 0a02 	mov.w	sl, #2
 8012e2c:	4639      	mov	r1, r7
 8012e2e:	4620      	mov	r0, r4
 8012e30:	f7ff fe98 	bl	8012b64 <rshift>
 8012e34:	443d      	add	r5, r7
 8012e36:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8012e3a:	42ab      	cmp	r3, r5
 8012e3c:	da4c      	bge.n	8012ed8 <__gethex+0x2a4>
 8012e3e:	ee18 0a10 	vmov	r0, s16
 8012e42:	4621      	mov	r1, r4
 8012e44:	f000 fa6e 	bl	8013324 <_Bfree>
 8012e48:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8012e4a:	2300      	movs	r3, #0
 8012e4c:	6013      	str	r3, [r2, #0]
 8012e4e:	27a3      	movs	r7, #163	; 0xa3
 8012e50:	e785      	b.n	8012d5e <__gethex+0x12a>
 8012e52:	1e73      	subs	r3, r6, #1
 8012e54:	9a05      	ldr	r2, [sp, #20]
 8012e56:	9303      	str	r3, [sp, #12]
 8012e58:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8012e5c:	4293      	cmp	r3, r2
 8012e5e:	d019      	beq.n	8012e94 <__gethex+0x260>
 8012e60:	f1bb 0f20 	cmp.w	fp, #32
 8012e64:	d107      	bne.n	8012e76 <__gethex+0x242>
 8012e66:	9b02      	ldr	r3, [sp, #8]
 8012e68:	9a00      	ldr	r2, [sp, #0]
 8012e6a:	f843 2b04 	str.w	r2, [r3], #4
 8012e6e:	9302      	str	r3, [sp, #8]
 8012e70:	2300      	movs	r3, #0
 8012e72:	9300      	str	r3, [sp, #0]
 8012e74:	469b      	mov	fp, r3
 8012e76:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8012e7a:	f7ff fec5 	bl	8012c08 <__hexdig_fun>
 8012e7e:	9b00      	ldr	r3, [sp, #0]
 8012e80:	f000 000f 	and.w	r0, r0, #15
 8012e84:	fa00 f00b 	lsl.w	r0, r0, fp
 8012e88:	4303      	orrs	r3, r0
 8012e8a:	9300      	str	r3, [sp, #0]
 8012e8c:	f10b 0b04 	add.w	fp, fp, #4
 8012e90:	9b03      	ldr	r3, [sp, #12]
 8012e92:	e00d      	b.n	8012eb0 <__gethex+0x27c>
 8012e94:	9b03      	ldr	r3, [sp, #12]
 8012e96:	9a06      	ldr	r2, [sp, #24]
 8012e98:	4413      	add	r3, r2
 8012e9a:	42bb      	cmp	r3, r7
 8012e9c:	d3e0      	bcc.n	8012e60 <__gethex+0x22c>
 8012e9e:	4618      	mov	r0, r3
 8012ea0:	9901      	ldr	r1, [sp, #4]
 8012ea2:	9307      	str	r3, [sp, #28]
 8012ea4:	4652      	mov	r2, sl
 8012ea6:	f7fe f8fc 	bl	80110a2 <strncmp>
 8012eaa:	9b07      	ldr	r3, [sp, #28]
 8012eac:	2800      	cmp	r0, #0
 8012eae:	d1d7      	bne.n	8012e60 <__gethex+0x22c>
 8012eb0:	461e      	mov	r6, r3
 8012eb2:	e78b      	b.n	8012dcc <__gethex+0x198>
 8012eb4:	f04f 0a03 	mov.w	sl, #3
 8012eb8:	e7b8      	b.n	8012e2c <__gethex+0x1f8>
 8012eba:	da0a      	bge.n	8012ed2 <__gethex+0x29e>
 8012ebc:	1a37      	subs	r7, r6, r0
 8012ebe:	4621      	mov	r1, r4
 8012ec0:	ee18 0a10 	vmov	r0, s16
 8012ec4:	463a      	mov	r2, r7
 8012ec6:	f000 fc49 	bl	801375c <__lshift>
 8012eca:	1bed      	subs	r5, r5, r7
 8012ecc:	4604      	mov	r4, r0
 8012ece:	f100 0914 	add.w	r9, r0, #20
 8012ed2:	f04f 0a00 	mov.w	sl, #0
 8012ed6:	e7ae      	b.n	8012e36 <__gethex+0x202>
 8012ed8:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8012edc:	42a8      	cmp	r0, r5
 8012ede:	dd72      	ble.n	8012fc6 <__gethex+0x392>
 8012ee0:	1b45      	subs	r5, r0, r5
 8012ee2:	42ae      	cmp	r6, r5
 8012ee4:	dc36      	bgt.n	8012f54 <__gethex+0x320>
 8012ee6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8012eea:	2b02      	cmp	r3, #2
 8012eec:	d02a      	beq.n	8012f44 <__gethex+0x310>
 8012eee:	2b03      	cmp	r3, #3
 8012ef0:	d02c      	beq.n	8012f4c <__gethex+0x318>
 8012ef2:	2b01      	cmp	r3, #1
 8012ef4:	d11c      	bne.n	8012f30 <__gethex+0x2fc>
 8012ef6:	42ae      	cmp	r6, r5
 8012ef8:	d11a      	bne.n	8012f30 <__gethex+0x2fc>
 8012efa:	2e01      	cmp	r6, #1
 8012efc:	d112      	bne.n	8012f24 <__gethex+0x2f0>
 8012efe:	9a04      	ldr	r2, [sp, #16]
 8012f00:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8012f04:	6013      	str	r3, [r2, #0]
 8012f06:	2301      	movs	r3, #1
 8012f08:	6123      	str	r3, [r4, #16]
 8012f0a:	f8c9 3000 	str.w	r3, [r9]
 8012f0e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8012f10:	2762      	movs	r7, #98	; 0x62
 8012f12:	601c      	str	r4, [r3, #0]
 8012f14:	e723      	b.n	8012d5e <__gethex+0x12a>
 8012f16:	bf00      	nop
 8012f18:	08015b88 	.word	0x08015b88
 8012f1c:	08015b10 	.word	0x08015b10
 8012f20:	08015b21 	.word	0x08015b21
 8012f24:	1e71      	subs	r1, r6, #1
 8012f26:	4620      	mov	r0, r4
 8012f28:	f000 fe5c 	bl	8013be4 <__any_on>
 8012f2c:	2800      	cmp	r0, #0
 8012f2e:	d1e6      	bne.n	8012efe <__gethex+0x2ca>
 8012f30:	ee18 0a10 	vmov	r0, s16
 8012f34:	4621      	mov	r1, r4
 8012f36:	f000 f9f5 	bl	8013324 <_Bfree>
 8012f3a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8012f3c:	2300      	movs	r3, #0
 8012f3e:	6013      	str	r3, [r2, #0]
 8012f40:	2750      	movs	r7, #80	; 0x50
 8012f42:	e70c      	b.n	8012d5e <__gethex+0x12a>
 8012f44:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8012f46:	2b00      	cmp	r3, #0
 8012f48:	d1f2      	bne.n	8012f30 <__gethex+0x2fc>
 8012f4a:	e7d8      	b.n	8012efe <__gethex+0x2ca>
 8012f4c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8012f4e:	2b00      	cmp	r3, #0
 8012f50:	d1d5      	bne.n	8012efe <__gethex+0x2ca>
 8012f52:	e7ed      	b.n	8012f30 <__gethex+0x2fc>
 8012f54:	1e6f      	subs	r7, r5, #1
 8012f56:	f1ba 0f00 	cmp.w	sl, #0
 8012f5a:	d131      	bne.n	8012fc0 <__gethex+0x38c>
 8012f5c:	b127      	cbz	r7, 8012f68 <__gethex+0x334>
 8012f5e:	4639      	mov	r1, r7
 8012f60:	4620      	mov	r0, r4
 8012f62:	f000 fe3f 	bl	8013be4 <__any_on>
 8012f66:	4682      	mov	sl, r0
 8012f68:	117b      	asrs	r3, r7, #5
 8012f6a:	2101      	movs	r1, #1
 8012f6c:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8012f70:	f007 071f 	and.w	r7, r7, #31
 8012f74:	fa01 f707 	lsl.w	r7, r1, r7
 8012f78:	421f      	tst	r7, r3
 8012f7a:	4629      	mov	r1, r5
 8012f7c:	4620      	mov	r0, r4
 8012f7e:	bf18      	it	ne
 8012f80:	f04a 0a02 	orrne.w	sl, sl, #2
 8012f84:	1b76      	subs	r6, r6, r5
 8012f86:	f7ff fded 	bl	8012b64 <rshift>
 8012f8a:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8012f8e:	2702      	movs	r7, #2
 8012f90:	f1ba 0f00 	cmp.w	sl, #0
 8012f94:	d048      	beq.n	8013028 <__gethex+0x3f4>
 8012f96:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8012f9a:	2b02      	cmp	r3, #2
 8012f9c:	d015      	beq.n	8012fca <__gethex+0x396>
 8012f9e:	2b03      	cmp	r3, #3
 8012fa0:	d017      	beq.n	8012fd2 <__gethex+0x39e>
 8012fa2:	2b01      	cmp	r3, #1
 8012fa4:	d109      	bne.n	8012fba <__gethex+0x386>
 8012fa6:	f01a 0f02 	tst.w	sl, #2
 8012faa:	d006      	beq.n	8012fba <__gethex+0x386>
 8012fac:	f8d9 0000 	ldr.w	r0, [r9]
 8012fb0:	ea4a 0a00 	orr.w	sl, sl, r0
 8012fb4:	f01a 0f01 	tst.w	sl, #1
 8012fb8:	d10e      	bne.n	8012fd8 <__gethex+0x3a4>
 8012fba:	f047 0710 	orr.w	r7, r7, #16
 8012fbe:	e033      	b.n	8013028 <__gethex+0x3f4>
 8012fc0:	f04f 0a01 	mov.w	sl, #1
 8012fc4:	e7d0      	b.n	8012f68 <__gethex+0x334>
 8012fc6:	2701      	movs	r7, #1
 8012fc8:	e7e2      	b.n	8012f90 <__gethex+0x35c>
 8012fca:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8012fcc:	f1c3 0301 	rsb	r3, r3, #1
 8012fd0:	9315      	str	r3, [sp, #84]	; 0x54
 8012fd2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8012fd4:	2b00      	cmp	r3, #0
 8012fd6:	d0f0      	beq.n	8012fba <__gethex+0x386>
 8012fd8:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8012fdc:	f104 0314 	add.w	r3, r4, #20
 8012fe0:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8012fe4:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8012fe8:	f04f 0c00 	mov.w	ip, #0
 8012fec:	4618      	mov	r0, r3
 8012fee:	f853 2b04 	ldr.w	r2, [r3], #4
 8012ff2:	f1b2 3fff 	cmp.w	r2, #4294967295
 8012ff6:	d01c      	beq.n	8013032 <__gethex+0x3fe>
 8012ff8:	3201      	adds	r2, #1
 8012ffa:	6002      	str	r2, [r0, #0]
 8012ffc:	2f02      	cmp	r7, #2
 8012ffe:	f104 0314 	add.w	r3, r4, #20
 8013002:	d13f      	bne.n	8013084 <__gethex+0x450>
 8013004:	f8d8 2000 	ldr.w	r2, [r8]
 8013008:	3a01      	subs	r2, #1
 801300a:	42b2      	cmp	r2, r6
 801300c:	d10a      	bne.n	8013024 <__gethex+0x3f0>
 801300e:	1171      	asrs	r1, r6, #5
 8013010:	2201      	movs	r2, #1
 8013012:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8013016:	f006 061f 	and.w	r6, r6, #31
 801301a:	fa02 f606 	lsl.w	r6, r2, r6
 801301e:	421e      	tst	r6, r3
 8013020:	bf18      	it	ne
 8013022:	4617      	movne	r7, r2
 8013024:	f047 0720 	orr.w	r7, r7, #32
 8013028:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801302a:	601c      	str	r4, [r3, #0]
 801302c:	9b04      	ldr	r3, [sp, #16]
 801302e:	601d      	str	r5, [r3, #0]
 8013030:	e695      	b.n	8012d5e <__gethex+0x12a>
 8013032:	4299      	cmp	r1, r3
 8013034:	f843 cc04 	str.w	ip, [r3, #-4]
 8013038:	d8d8      	bhi.n	8012fec <__gethex+0x3b8>
 801303a:	68a3      	ldr	r3, [r4, #8]
 801303c:	459b      	cmp	fp, r3
 801303e:	db19      	blt.n	8013074 <__gethex+0x440>
 8013040:	6861      	ldr	r1, [r4, #4]
 8013042:	ee18 0a10 	vmov	r0, s16
 8013046:	3101      	adds	r1, #1
 8013048:	f000 f92c 	bl	80132a4 <_Balloc>
 801304c:	4681      	mov	r9, r0
 801304e:	b918      	cbnz	r0, 8013058 <__gethex+0x424>
 8013050:	4b1a      	ldr	r3, [pc, #104]	; (80130bc <__gethex+0x488>)
 8013052:	4602      	mov	r2, r0
 8013054:	2184      	movs	r1, #132	; 0x84
 8013056:	e6a8      	b.n	8012daa <__gethex+0x176>
 8013058:	6922      	ldr	r2, [r4, #16]
 801305a:	3202      	adds	r2, #2
 801305c:	f104 010c 	add.w	r1, r4, #12
 8013060:	0092      	lsls	r2, r2, #2
 8013062:	300c      	adds	r0, #12
 8013064:	f7fd f8ee 	bl	8010244 <memcpy>
 8013068:	4621      	mov	r1, r4
 801306a:	ee18 0a10 	vmov	r0, s16
 801306e:	f000 f959 	bl	8013324 <_Bfree>
 8013072:	464c      	mov	r4, r9
 8013074:	6923      	ldr	r3, [r4, #16]
 8013076:	1c5a      	adds	r2, r3, #1
 8013078:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 801307c:	6122      	str	r2, [r4, #16]
 801307e:	2201      	movs	r2, #1
 8013080:	615a      	str	r2, [r3, #20]
 8013082:	e7bb      	b.n	8012ffc <__gethex+0x3c8>
 8013084:	6922      	ldr	r2, [r4, #16]
 8013086:	455a      	cmp	r2, fp
 8013088:	dd0b      	ble.n	80130a2 <__gethex+0x46e>
 801308a:	2101      	movs	r1, #1
 801308c:	4620      	mov	r0, r4
 801308e:	f7ff fd69 	bl	8012b64 <rshift>
 8013092:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8013096:	3501      	adds	r5, #1
 8013098:	42ab      	cmp	r3, r5
 801309a:	f6ff aed0 	blt.w	8012e3e <__gethex+0x20a>
 801309e:	2701      	movs	r7, #1
 80130a0:	e7c0      	b.n	8013024 <__gethex+0x3f0>
 80130a2:	f016 061f 	ands.w	r6, r6, #31
 80130a6:	d0fa      	beq.n	801309e <__gethex+0x46a>
 80130a8:	4453      	add	r3, sl
 80130aa:	f1c6 0620 	rsb	r6, r6, #32
 80130ae:	f853 0c04 	ldr.w	r0, [r3, #-4]
 80130b2:	f000 f9e9 	bl	8013488 <__hi0bits>
 80130b6:	42b0      	cmp	r0, r6
 80130b8:	dbe7      	blt.n	801308a <__gethex+0x456>
 80130ba:	e7f0      	b.n	801309e <__gethex+0x46a>
 80130bc:	08015b10 	.word	0x08015b10

080130c0 <L_shift>:
 80130c0:	f1c2 0208 	rsb	r2, r2, #8
 80130c4:	0092      	lsls	r2, r2, #2
 80130c6:	b570      	push	{r4, r5, r6, lr}
 80130c8:	f1c2 0620 	rsb	r6, r2, #32
 80130cc:	6843      	ldr	r3, [r0, #4]
 80130ce:	6804      	ldr	r4, [r0, #0]
 80130d0:	fa03 f506 	lsl.w	r5, r3, r6
 80130d4:	432c      	orrs	r4, r5
 80130d6:	40d3      	lsrs	r3, r2
 80130d8:	6004      	str	r4, [r0, #0]
 80130da:	f840 3f04 	str.w	r3, [r0, #4]!
 80130de:	4288      	cmp	r0, r1
 80130e0:	d3f4      	bcc.n	80130cc <L_shift+0xc>
 80130e2:	bd70      	pop	{r4, r5, r6, pc}

080130e4 <__match>:
 80130e4:	b530      	push	{r4, r5, lr}
 80130e6:	6803      	ldr	r3, [r0, #0]
 80130e8:	3301      	adds	r3, #1
 80130ea:	f811 4b01 	ldrb.w	r4, [r1], #1
 80130ee:	b914      	cbnz	r4, 80130f6 <__match+0x12>
 80130f0:	6003      	str	r3, [r0, #0]
 80130f2:	2001      	movs	r0, #1
 80130f4:	bd30      	pop	{r4, r5, pc}
 80130f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80130fa:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 80130fe:	2d19      	cmp	r5, #25
 8013100:	bf98      	it	ls
 8013102:	3220      	addls	r2, #32
 8013104:	42a2      	cmp	r2, r4
 8013106:	d0f0      	beq.n	80130ea <__match+0x6>
 8013108:	2000      	movs	r0, #0
 801310a:	e7f3      	b.n	80130f4 <__match+0x10>

0801310c <__hexnan>:
 801310c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013110:	680b      	ldr	r3, [r1, #0]
 8013112:	115e      	asrs	r6, r3, #5
 8013114:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8013118:	f013 031f 	ands.w	r3, r3, #31
 801311c:	b087      	sub	sp, #28
 801311e:	bf18      	it	ne
 8013120:	3604      	addne	r6, #4
 8013122:	2500      	movs	r5, #0
 8013124:	1f37      	subs	r7, r6, #4
 8013126:	4690      	mov	r8, r2
 8013128:	6802      	ldr	r2, [r0, #0]
 801312a:	9301      	str	r3, [sp, #4]
 801312c:	4682      	mov	sl, r0
 801312e:	f846 5c04 	str.w	r5, [r6, #-4]
 8013132:	46b9      	mov	r9, r7
 8013134:	463c      	mov	r4, r7
 8013136:	9502      	str	r5, [sp, #8]
 8013138:	46ab      	mov	fp, r5
 801313a:	7851      	ldrb	r1, [r2, #1]
 801313c:	1c53      	adds	r3, r2, #1
 801313e:	9303      	str	r3, [sp, #12]
 8013140:	b341      	cbz	r1, 8013194 <__hexnan+0x88>
 8013142:	4608      	mov	r0, r1
 8013144:	9205      	str	r2, [sp, #20]
 8013146:	9104      	str	r1, [sp, #16]
 8013148:	f7ff fd5e 	bl	8012c08 <__hexdig_fun>
 801314c:	2800      	cmp	r0, #0
 801314e:	d14f      	bne.n	80131f0 <__hexnan+0xe4>
 8013150:	9904      	ldr	r1, [sp, #16]
 8013152:	9a05      	ldr	r2, [sp, #20]
 8013154:	2920      	cmp	r1, #32
 8013156:	d818      	bhi.n	801318a <__hexnan+0x7e>
 8013158:	9b02      	ldr	r3, [sp, #8]
 801315a:	459b      	cmp	fp, r3
 801315c:	dd13      	ble.n	8013186 <__hexnan+0x7a>
 801315e:	454c      	cmp	r4, r9
 8013160:	d206      	bcs.n	8013170 <__hexnan+0x64>
 8013162:	2d07      	cmp	r5, #7
 8013164:	dc04      	bgt.n	8013170 <__hexnan+0x64>
 8013166:	462a      	mov	r2, r5
 8013168:	4649      	mov	r1, r9
 801316a:	4620      	mov	r0, r4
 801316c:	f7ff ffa8 	bl	80130c0 <L_shift>
 8013170:	4544      	cmp	r4, r8
 8013172:	d950      	bls.n	8013216 <__hexnan+0x10a>
 8013174:	2300      	movs	r3, #0
 8013176:	f1a4 0904 	sub.w	r9, r4, #4
 801317a:	f844 3c04 	str.w	r3, [r4, #-4]
 801317e:	f8cd b008 	str.w	fp, [sp, #8]
 8013182:	464c      	mov	r4, r9
 8013184:	461d      	mov	r5, r3
 8013186:	9a03      	ldr	r2, [sp, #12]
 8013188:	e7d7      	b.n	801313a <__hexnan+0x2e>
 801318a:	2929      	cmp	r1, #41	; 0x29
 801318c:	d156      	bne.n	801323c <__hexnan+0x130>
 801318e:	3202      	adds	r2, #2
 8013190:	f8ca 2000 	str.w	r2, [sl]
 8013194:	f1bb 0f00 	cmp.w	fp, #0
 8013198:	d050      	beq.n	801323c <__hexnan+0x130>
 801319a:	454c      	cmp	r4, r9
 801319c:	d206      	bcs.n	80131ac <__hexnan+0xa0>
 801319e:	2d07      	cmp	r5, #7
 80131a0:	dc04      	bgt.n	80131ac <__hexnan+0xa0>
 80131a2:	462a      	mov	r2, r5
 80131a4:	4649      	mov	r1, r9
 80131a6:	4620      	mov	r0, r4
 80131a8:	f7ff ff8a 	bl	80130c0 <L_shift>
 80131ac:	4544      	cmp	r4, r8
 80131ae:	d934      	bls.n	801321a <__hexnan+0x10e>
 80131b0:	f1a8 0204 	sub.w	r2, r8, #4
 80131b4:	4623      	mov	r3, r4
 80131b6:	f853 1b04 	ldr.w	r1, [r3], #4
 80131ba:	f842 1f04 	str.w	r1, [r2, #4]!
 80131be:	429f      	cmp	r7, r3
 80131c0:	d2f9      	bcs.n	80131b6 <__hexnan+0xaa>
 80131c2:	1b3b      	subs	r3, r7, r4
 80131c4:	f023 0303 	bic.w	r3, r3, #3
 80131c8:	3304      	adds	r3, #4
 80131ca:	3401      	adds	r4, #1
 80131cc:	3e03      	subs	r6, #3
 80131ce:	42b4      	cmp	r4, r6
 80131d0:	bf88      	it	hi
 80131d2:	2304      	movhi	r3, #4
 80131d4:	4443      	add	r3, r8
 80131d6:	2200      	movs	r2, #0
 80131d8:	f843 2b04 	str.w	r2, [r3], #4
 80131dc:	429f      	cmp	r7, r3
 80131de:	d2fb      	bcs.n	80131d8 <__hexnan+0xcc>
 80131e0:	683b      	ldr	r3, [r7, #0]
 80131e2:	b91b      	cbnz	r3, 80131ec <__hexnan+0xe0>
 80131e4:	4547      	cmp	r7, r8
 80131e6:	d127      	bne.n	8013238 <__hexnan+0x12c>
 80131e8:	2301      	movs	r3, #1
 80131ea:	603b      	str	r3, [r7, #0]
 80131ec:	2005      	movs	r0, #5
 80131ee:	e026      	b.n	801323e <__hexnan+0x132>
 80131f0:	3501      	adds	r5, #1
 80131f2:	2d08      	cmp	r5, #8
 80131f4:	f10b 0b01 	add.w	fp, fp, #1
 80131f8:	dd06      	ble.n	8013208 <__hexnan+0xfc>
 80131fa:	4544      	cmp	r4, r8
 80131fc:	d9c3      	bls.n	8013186 <__hexnan+0x7a>
 80131fe:	2300      	movs	r3, #0
 8013200:	f844 3c04 	str.w	r3, [r4, #-4]
 8013204:	2501      	movs	r5, #1
 8013206:	3c04      	subs	r4, #4
 8013208:	6822      	ldr	r2, [r4, #0]
 801320a:	f000 000f 	and.w	r0, r0, #15
 801320e:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8013212:	6022      	str	r2, [r4, #0]
 8013214:	e7b7      	b.n	8013186 <__hexnan+0x7a>
 8013216:	2508      	movs	r5, #8
 8013218:	e7b5      	b.n	8013186 <__hexnan+0x7a>
 801321a:	9b01      	ldr	r3, [sp, #4]
 801321c:	2b00      	cmp	r3, #0
 801321e:	d0df      	beq.n	80131e0 <__hexnan+0xd4>
 8013220:	f04f 32ff 	mov.w	r2, #4294967295
 8013224:	f1c3 0320 	rsb	r3, r3, #32
 8013228:	fa22 f303 	lsr.w	r3, r2, r3
 801322c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8013230:	401a      	ands	r2, r3
 8013232:	f846 2c04 	str.w	r2, [r6, #-4]
 8013236:	e7d3      	b.n	80131e0 <__hexnan+0xd4>
 8013238:	3f04      	subs	r7, #4
 801323a:	e7d1      	b.n	80131e0 <__hexnan+0xd4>
 801323c:	2004      	movs	r0, #4
 801323e:	b007      	add	sp, #28
 8013240:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08013244 <_localeconv_r>:
 8013244:	4800      	ldr	r0, [pc, #0]	; (8013248 <_localeconv_r+0x4>)
 8013246:	4770      	bx	lr
 8013248:	20000420 	.word	0x20000420

0801324c <_lseek_r>:
 801324c:	b538      	push	{r3, r4, r5, lr}
 801324e:	4d07      	ldr	r5, [pc, #28]	; (801326c <_lseek_r+0x20>)
 8013250:	4604      	mov	r4, r0
 8013252:	4608      	mov	r0, r1
 8013254:	4611      	mov	r1, r2
 8013256:	2200      	movs	r2, #0
 8013258:	602a      	str	r2, [r5, #0]
 801325a:	461a      	mov	r2, r3
 801325c:	f7ef fef8 	bl	8003050 <_lseek>
 8013260:	1c43      	adds	r3, r0, #1
 8013262:	d102      	bne.n	801326a <_lseek_r+0x1e>
 8013264:	682b      	ldr	r3, [r5, #0]
 8013266:	b103      	cbz	r3, 801326a <_lseek_r+0x1e>
 8013268:	6023      	str	r3, [r4, #0]
 801326a:	bd38      	pop	{r3, r4, r5, pc}
 801326c:	20000770 	.word	0x20000770

08013270 <malloc>:
 8013270:	4b02      	ldr	r3, [pc, #8]	; (801327c <malloc+0xc>)
 8013272:	4601      	mov	r1, r0
 8013274:	6818      	ldr	r0, [r3, #0]
 8013276:	f000 bd59 	b.w	8013d2c <_malloc_r>
 801327a:	bf00      	nop
 801327c:	200002c8 	.word	0x200002c8

08013280 <__ascii_mbtowc>:
 8013280:	b082      	sub	sp, #8
 8013282:	b901      	cbnz	r1, 8013286 <__ascii_mbtowc+0x6>
 8013284:	a901      	add	r1, sp, #4
 8013286:	b142      	cbz	r2, 801329a <__ascii_mbtowc+0x1a>
 8013288:	b14b      	cbz	r3, 801329e <__ascii_mbtowc+0x1e>
 801328a:	7813      	ldrb	r3, [r2, #0]
 801328c:	600b      	str	r3, [r1, #0]
 801328e:	7812      	ldrb	r2, [r2, #0]
 8013290:	1e10      	subs	r0, r2, #0
 8013292:	bf18      	it	ne
 8013294:	2001      	movne	r0, #1
 8013296:	b002      	add	sp, #8
 8013298:	4770      	bx	lr
 801329a:	4610      	mov	r0, r2
 801329c:	e7fb      	b.n	8013296 <__ascii_mbtowc+0x16>
 801329e:	f06f 0001 	mvn.w	r0, #1
 80132a2:	e7f8      	b.n	8013296 <__ascii_mbtowc+0x16>

080132a4 <_Balloc>:
 80132a4:	b570      	push	{r4, r5, r6, lr}
 80132a6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80132a8:	4604      	mov	r4, r0
 80132aa:	460d      	mov	r5, r1
 80132ac:	b976      	cbnz	r6, 80132cc <_Balloc+0x28>
 80132ae:	2010      	movs	r0, #16
 80132b0:	f7ff ffde 	bl	8013270 <malloc>
 80132b4:	4602      	mov	r2, r0
 80132b6:	6260      	str	r0, [r4, #36]	; 0x24
 80132b8:	b920      	cbnz	r0, 80132c4 <_Balloc+0x20>
 80132ba:	4b18      	ldr	r3, [pc, #96]	; (801331c <_Balloc+0x78>)
 80132bc:	4818      	ldr	r0, [pc, #96]	; (8013320 <_Balloc+0x7c>)
 80132be:	2166      	movs	r1, #102	; 0x66
 80132c0:	f001 fb46 	bl	8014950 <__assert_func>
 80132c4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80132c8:	6006      	str	r6, [r0, #0]
 80132ca:	60c6      	str	r6, [r0, #12]
 80132cc:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80132ce:	68f3      	ldr	r3, [r6, #12]
 80132d0:	b183      	cbz	r3, 80132f4 <_Balloc+0x50>
 80132d2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80132d4:	68db      	ldr	r3, [r3, #12]
 80132d6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80132da:	b9b8      	cbnz	r0, 801330c <_Balloc+0x68>
 80132dc:	2101      	movs	r1, #1
 80132de:	fa01 f605 	lsl.w	r6, r1, r5
 80132e2:	1d72      	adds	r2, r6, #5
 80132e4:	0092      	lsls	r2, r2, #2
 80132e6:	4620      	mov	r0, r4
 80132e8:	f000 fc9d 	bl	8013c26 <_calloc_r>
 80132ec:	b160      	cbz	r0, 8013308 <_Balloc+0x64>
 80132ee:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80132f2:	e00e      	b.n	8013312 <_Balloc+0x6e>
 80132f4:	2221      	movs	r2, #33	; 0x21
 80132f6:	2104      	movs	r1, #4
 80132f8:	4620      	mov	r0, r4
 80132fa:	f000 fc94 	bl	8013c26 <_calloc_r>
 80132fe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8013300:	60f0      	str	r0, [r6, #12]
 8013302:	68db      	ldr	r3, [r3, #12]
 8013304:	2b00      	cmp	r3, #0
 8013306:	d1e4      	bne.n	80132d2 <_Balloc+0x2e>
 8013308:	2000      	movs	r0, #0
 801330a:	bd70      	pop	{r4, r5, r6, pc}
 801330c:	6802      	ldr	r2, [r0, #0]
 801330e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8013312:	2300      	movs	r3, #0
 8013314:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8013318:	e7f7      	b.n	801330a <_Balloc+0x66>
 801331a:	bf00      	nop
 801331c:	08015a9e 	.word	0x08015a9e
 8013320:	08015b9c 	.word	0x08015b9c

08013324 <_Bfree>:
 8013324:	b570      	push	{r4, r5, r6, lr}
 8013326:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8013328:	4605      	mov	r5, r0
 801332a:	460c      	mov	r4, r1
 801332c:	b976      	cbnz	r6, 801334c <_Bfree+0x28>
 801332e:	2010      	movs	r0, #16
 8013330:	f7ff ff9e 	bl	8013270 <malloc>
 8013334:	4602      	mov	r2, r0
 8013336:	6268      	str	r0, [r5, #36]	; 0x24
 8013338:	b920      	cbnz	r0, 8013344 <_Bfree+0x20>
 801333a:	4b09      	ldr	r3, [pc, #36]	; (8013360 <_Bfree+0x3c>)
 801333c:	4809      	ldr	r0, [pc, #36]	; (8013364 <_Bfree+0x40>)
 801333e:	218a      	movs	r1, #138	; 0x8a
 8013340:	f001 fb06 	bl	8014950 <__assert_func>
 8013344:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8013348:	6006      	str	r6, [r0, #0]
 801334a:	60c6      	str	r6, [r0, #12]
 801334c:	b13c      	cbz	r4, 801335e <_Bfree+0x3a>
 801334e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8013350:	6862      	ldr	r2, [r4, #4]
 8013352:	68db      	ldr	r3, [r3, #12]
 8013354:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8013358:	6021      	str	r1, [r4, #0]
 801335a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801335e:	bd70      	pop	{r4, r5, r6, pc}
 8013360:	08015a9e 	.word	0x08015a9e
 8013364:	08015b9c 	.word	0x08015b9c

08013368 <__multadd>:
 8013368:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801336c:	690d      	ldr	r5, [r1, #16]
 801336e:	4607      	mov	r7, r0
 8013370:	460c      	mov	r4, r1
 8013372:	461e      	mov	r6, r3
 8013374:	f101 0c14 	add.w	ip, r1, #20
 8013378:	2000      	movs	r0, #0
 801337a:	f8dc 3000 	ldr.w	r3, [ip]
 801337e:	b299      	uxth	r1, r3
 8013380:	fb02 6101 	mla	r1, r2, r1, r6
 8013384:	0c1e      	lsrs	r6, r3, #16
 8013386:	0c0b      	lsrs	r3, r1, #16
 8013388:	fb02 3306 	mla	r3, r2, r6, r3
 801338c:	b289      	uxth	r1, r1
 801338e:	3001      	adds	r0, #1
 8013390:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8013394:	4285      	cmp	r5, r0
 8013396:	f84c 1b04 	str.w	r1, [ip], #4
 801339a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 801339e:	dcec      	bgt.n	801337a <__multadd+0x12>
 80133a0:	b30e      	cbz	r6, 80133e6 <__multadd+0x7e>
 80133a2:	68a3      	ldr	r3, [r4, #8]
 80133a4:	42ab      	cmp	r3, r5
 80133a6:	dc19      	bgt.n	80133dc <__multadd+0x74>
 80133a8:	6861      	ldr	r1, [r4, #4]
 80133aa:	4638      	mov	r0, r7
 80133ac:	3101      	adds	r1, #1
 80133ae:	f7ff ff79 	bl	80132a4 <_Balloc>
 80133b2:	4680      	mov	r8, r0
 80133b4:	b928      	cbnz	r0, 80133c2 <__multadd+0x5a>
 80133b6:	4602      	mov	r2, r0
 80133b8:	4b0c      	ldr	r3, [pc, #48]	; (80133ec <__multadd+0x84>)
 80133ba:	480d      	ldr	r0, [pc, #52]	; (80133f0 <__multadd+0x88>)
 80133bc:	21b5      	movs	r1, #181	; 0xb5
 80133be:	f001 fac7 	bl	8014950 <__assert_func>
 80133c2:	6922      	ldr	r2, [r4, #16]
 80133c4:	3202      	adds	r2, #2
 80133c6:	f104 010c 	add.w	r1, r4, #12
 80133ca:	0092      	lsls	r2, r2, #2
 80133cc:	300c      	adds	r0, #12
 80133ce:	f7fc ff39 	bl	8010244 <memcpy>
 80133d2:	4621      	mov	r1, r4
 80133d4:	4638      	mov	r0, r7
 80133d6:	f7ff ffa5 	bl	8013324 <_Bfree>
 80133da:	4644      	mov	r4, r8
 80133dc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80133e0:	3501      	adds	r5, #1
 80133e2:	615e      	str	r6, [r3, #20]
 80133e4:	6125      	str	r5, [r4, #16]
 80133e6:	4620      	mov	r0, r4
 80133e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80133ec:	08015b10 	.word	0x08015b10
 80133f0:	08015b9c 	.word	0x08015b9c

080133f4 <__s2b>:
 80133f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80133f8:	460c      	mov	r4, r1
 80133fa:	4615      	mov	r5, r2
 80133fc:	461f      	mov	r7, r3
 80133fe:	2209      	movs	r2, #9
 8013400:	3308      	adds	r3, #8
 8013402:	4606      	mov	r6, r0
 8013404:	fb93 f3f2 	sdiv	r3, r3, r2
 8013408:	2100      	movs	r1, #0
 801340a:	2201      	movs	r2, #1
 801340c:	429a      	cmp	r2, r3
 801340e:	db09      	blt.n	8013424 <__s2b+0x30>
 8013410:	4630      	mov	r0, r6
 8013412:	f7ff ff47 	bl	80132a4 <_Balloc>
 8013416:	b940      	cbnz	r0, 801342a <__s2b+0x36>
 8013418:	4602      	mov	r2, r0
 801341a:	4b19      	ldr	r3, [pc, #100]	; (8013480 <__s2b+0x8c>)
 801341c:	4819      	ldr	r0, [pc, #100]	; (8013484 <__s2b+0x90>)
 801341e:	21ce      	movs	r1, #206	; 0xce
 8013420:	f001 fa96 	bl	8014950 <__assert_func>
 8013424:	0052      	lsls	r2, r2, #1
 8013426:	3101      	adds	r1, #1
 8013428:	e7f0      	b.n	801340c <__s2b+0x18>
 801342a:	9b08      	ldr	r3, [sp, #32]
 801342c:	6143      	str	r3, [r0, #20]
 801342e:	2d09      	cmp	r5, #9
 8013430:	f04f 0301 	mov.w	r3, #1
 8013434:	6103      	str	r3, [r0, #16]
 8013436:	dd16      	ble.n	8013466 <__s2b+0x72>
 8013438:	f104 0909 	add.w	r9, r4, #9
 801343c:	46c8      	mov	r8, r9
 801343e:	442c      	add	r4, r5
 8013440:	f818 3b01 	ldrb.w	r3, [r8], #1
 8013444:	4601      	mov	r1, r0
 8013446:	3b30      	subs	r3, #48	; 0x30
 8013448:	220a      	movs	r2, #10
 801344a:	4630      	mov	r0, r6
 801344c:	f7ff ff8c 	bl	8013368 <__multadd>
 8013450:	45a0      	cmp	r8, r4
 8013452:	d1f5      	bne.n	8013440 <__s2b+0x4c>
 8013454:	f1a5 0408 	sub.w	r4, r5, #8
 8013458:	444c      	add	r4, r9
 801345a:	1b2d      	subs	r5, r5, r4
 801345c:	1963      	adds	r3, r4, r5
 801345e:	42bb      	cmp	r3, r7
 8013460:	db04      	blt.n	801346c <__s2b+0x78>
 8013462:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013466:	340a      	adds	r4, #10
 8013468:	2509      	movs	r5, #9
 801346a:	e7f6      	b.n	801345a <__s2b+0x66>
 801346c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8013470:	4601      	mov	r1, r0
 8013472:	3b30      	subs	r3, #48	; 0x30
 8013474:	220a      	movs	r2, #10
 8013476:	4630      	mov	r0, r6
 8013478:	f7ff ff76 	bl	8013368 <__multadd>
 801347c:	e7ee      	b.n	801345c <__s2b+0x68>
 801347e:	bf00      	nop
 8013480:	08015b10 	.word	0x08015b10
 8013484:	08015b9c 	.word	0x08015b9c

08013488 <__hi0bits>:
 8013488:	0c03      	lsrs	r3, r0, #16
 801348a:	041b      	lsls	r3, r3, #16
 801348c:	b9d3      	cbnz	r3, 80134c4 <__hi0bits+0x3c>
 801348e:	0400      	lsls	r0, r0, #16
 8013490:	2310      	movs	r3, #16
 8013492:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8013496:	bf04      	itt	eq
 8013498:	0200      	lsleq	r0, r0, #8
 801349a:	3308      	addeq	r3, #8
 801349c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80134a0:	bf04      	itt	eq
 80134a2:	0100      	lsleq	r0, r0, #4
 80134a4:	3304      	addeq	r3, #4
 80134a6:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80134aa:	bf04      	itt	eq
 80134ac:	0080      	lsleq	r0, r0, #2
 80134ae:	3302      	addeq	r3, #2
 80134b0:	2800      	cmp	r0, #0
 80134b2:	db05      	blt.n	80134c0 <__hi0bits+0x38>
 80134b4:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80134b8:	f103 0301 	add.w	r3, r3, #1
 80134bc:	bf08      	it	eq
 80134be:	2320      	moveq	r3, #32
 80134c0:	4618      	mov	r0, r3
 80134c2:	4770      	bx	lr
 80134c4:	2300      	movs	r3, #0
 80134c6:	e7e4      	b.n	8013492 <__hi0bits+0xa>

080134c8 <__lo0bits>:
 80134c8:	6803      	ldr	r3, [r0, #0]
 80134ca:	f013 0207 	ands.w	r2, r3, #7
 80134ce:	4601      	mov	r1, r0
 80134d0:	d00b      	beq.n	80134ea <__lo0bits+0x22>
 80134d2:	07da      	lsls	r2, r3, #31
 80134d4:	d423      	bmi.n	801351e <__lo0bits+0x56>
 80134d6:	0798      	lsls	r0, r3, #30
 80134d8:	bf49      	itett	mi
 80134da:	085b      	lsrmi	r3, r3, #1
 80134dc:	089b      	lsrpl	r3, r3, #2
 80134de:	2001      	movmi	r0, #1
 80134e0:	600b      	strmi	r3, [r1, #0]
 80134e2:	bf5c      	itt	pl
 80134e4:	600b      	strpl	r3, [r1, #0]
 80134e6:	2002      	movpl	r0, #2
 80134e8:	4770      	bx	lr
 80134ea:	b298      	uxth	r0, r3
 80134ec:	b9a8      	cbnz	r0, 801351a <__lo0bits+0x52>
 80134ee:	0c1b      	lsrs	r3, r3, #16
 80134f0:	2010      	movs	r0, #16
 80134f2:	b2da      	uxtb	r2, r3
 80134f4:	b90a      	cbnz	r2, 80134fa <__lo0bits+0x32>
 80134f6:	3008      	adds	r0, #8
 80134f8:	0a1b      	lsrs	r3, r3, #8
 80134fa:	071a      	lsls	r2, r3, #28
 80134fc:	bf04      	itt	eq
 80134fe:	091b      	lsreq	r3, r3, #4
 8013500:	3004      	addeq	r0, #4
 8013502:	079a      	lsls	r2, r3, #30
 8013504:	bf04      	itt	eq
 8013506:	089b      	lsreq	r3, r3, #2
 8013508:	3002      	addeq	r0, #2
 801350a:	07da      	lsls	r2, r3, #31
 801350c:	d403      	bmi.n	8013516 <__lo0bits+0x4e>
 801350e:	085b      	lsrs	r3, r3, #1
 8013510:	f100 0001 	add.w	r0, r0, #1
 8013514:	d005      	beq.n	8013522 <__lo0bits+0x5a>
 8013516:	600b      	str	r3, [r1, #0]
 8013518:	4770      	bx	lr
 801351a:	4610      	mov	r0, r2
 801351c:	e7e9      	b.n	80134f2 <__lo0bits+0x2a>
 801351e:	2000      	movs	r0, #0
 8013520:	4770      	bx	lr
 8013522:	2020      	movs	r0, #32
 8013524:	4770      	bx	lr
	...

08013528 <__i2b>:
 8013528:	b510      	push	{r4, lr}
 801352a:	460c      	mov	r4, r1
 801352c:	2101      	movs	r1, #1
 801352e:	f7ff feb9 	bl	80132a4 <_Balloc>
 8013532:	4602      	mov	r2, r0
 8013534:	b928      	cbnz	r0, 8013542 <__i2b+0x1a>
 8013536:	4b05      	ldr	r3, [pc, #20]	; (801354c <__i2b+0x24>)
 8013538:	4805      	ldr	r0, [pc, #20]	; (8013550 <__i2b+0x28>)
 801353a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 801353e:	f001 fa07 	bl	8014950 <__assert_func>
 8013542:	2301      	movs	r3, #1
 8013544:	6144      	str	r4, [r0, #20]
 8013546:	6103      	str	r3, [r0, #16]
 8013548:	bd10      	pop	{r4, pc}
 801354a:	bf00      	nop
 801354c:	08015b10 	.word	0x08015b10
 8013550:	08015b9c 	.word	0x08015b9c

08013554 <__multiply>:
 8013554:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013558:	4691      	mov	r9, r2
 801355a:	690a      	ldr	r2, [r1, #16]
 801355c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8013560:	429a      	cmp	r2, r3
 8013562:	bfb8      	it	lt
 8013564:	460b      	movlt	r3, r1
 8013566:	460c      	mov	r4, r1
 8013568:	bfbc      	itt	lt
 801356a:	464c      	movlt	r4, r9
 801356c:	4699      	movlt	r9, r3
 801356e:	6927      	ldr	r7, [r4, #16]
 8013570:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8013574:	68a3      	ldr	r3, [r4, #8]
 8013576:	6861      	ldr	r1, [r4, #4]
 8013578:	eb07 060a 	add.w	r6, r7, sl
 801357c:	42b3      	cmp	r3, r6
 801357e:	b085      	sub	sp, #20
 8013580:	bfb8      	it	lt
 8013582:	3101      	addlt	r1, #1
 8013584:	f7ff fe8e 	bl	80132a4 <_Balloc>
 8013588:	b930      	cbnz	r0, 8013598 <__multiply+0x44>
 801358a:	4602      	mov	r2, r0
 801358c:	4b44      	ldr	r3, [pc, #272]	; (80136a0 <__multiply+0x14c>)
 801358e:	4845      	ldr	r0, [pc, #276]	; (80136a4 <__multiply+0x150>)
 8013590:	f240 115d 	movw	r1, #349	; 0x15d
 8013594:	f001 f9dc 	bl	8014950 <__assert_func>
 8013598:	f100 0514 	add.w	r5, r0, #20
 801359c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80135a0:	462b      	mov	r3, r5
 80135a2:	2200      	movs	r2, #0
 80135a4:	4543      	cmp	r3, r8
 80135a6:	d321      	bcc.n	80135ec <__multiply+0x98>
 80135a8:	f104 0314 	add.w	r3, r4, #20
 80135ac:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80135b0:	f109 0314 	add.w	r3, r9, #20
 80135b4:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80135b8:	9202      	str	r2, [sp, #8]
 80135ba:	1b3a      	subs	r2, r7, r4
 80135bc:	3a15      	subs	r2, #21
 80135be:	f022 0203 	bic.w	r2, r2, #3
 80135c2:	3204      	adds	r2, #4
 80135c4:	f104 0115 	add.w	r1, r4, #21
 80135c8:	428f      	cmp	r7, r1
 80135ca:	bf38      	it	cc
 80135cc:	2204      	movcc	r2, #4
 80135ce:	9201      	str	r2, [sp, #4]
 80135d0:	9a02      	ldr	r2, [sp, #8]
 80135d2:	9303      	str	r3, [sp, #12]
 80135d4:	429a      	cmp	r2, r3
 80135d6:	d80c      	bhi.n	80135f2 <__multiply+0x9e>
 80135d8:	2e00      	cmp	r6, #0
 80135da:	dd03      	ble.n	80135e4 <__multiply+0x90>
 80135dc:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80135e0:	2b00      	cmp	r3, #0
 80135e2:	d05a      	beq.n	801369a <__multiply+0x146>
 80135e4:	6106      	str	r6, [r0, #16]
 80135e6:	b005      	add	sp, #20
 80135e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80135ec:	f843 2b04 	str.w	r2, [r3], #4
 80135f0:	e7d8      	b.n	80135a4 <__multiply+0x50>
 80135f2:	f8b3 a000 	ldrh.w	sl, [r3]
 80135f6:	f1ba 0f00 	cmp.w	sl, #0
 80135fa:	d024      	beq.n	8013646 <__multiply+0xf2>
 80135fc:	f104 0e14 	add.w	lr, r4, #20
 8013600:	46a9      	mov	r9, r5
 8013602:	f04f 0c00 	mov.w	ip, #0
 8013606:	f85e 2b04 	ldr.w	r2, [lr], #4
 801360a:	f8d9 1000 	ldr.w	r1, [r9]
 801360e:	fa1f fb82 	uxth.w	fp, r2
 8013612:	b289      	uxth	r1, r1
 8013614:	fb0a 110b 	mla	r1, sl, fp, r1
 8013618:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 801361c:	f8d9 2000 	ldr.w	r2, [r9]
 8013620:	4461      	add	r1, ip
 8013622:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8013626:	fb0a c20b 	mla	r2, sl, fp, ip
 801362a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 801362e:	b289      	uxth	r1, r1
 8013630:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8013634:	4577      	cmp	r7, lr
 8013636:	f849 1b04 	str.w	r1, [r9], #4
 801363a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801363e:	d8e2      	bhi.n	8013606 <__multiply+0xb2>
 8013640:	9a01      	ldr	r2, [sp, #4]
 8013642:	f845 c002 	str.w	ip, [r5, r2]
 8013646:	9a03      	ldr	r2, [sp, #12]
 8013648:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 801364c:	3304      	adds	r3, #4
 801364e:	f1b9 0f00 	cmp.w	r9, #0
 8013652:	d020      	beq.n	8013696 <__multiply+0x142>
 8013654:	6829      	ldr	r1, [r5, #0]
 8013656:	f104 0c14 	add.w	ip, r4, #20
 801365a:	46ae      	mov	lr, r5
 801365c:	f04f 0a00 	mov.w	sl, #0
 8013660:	f8bc b000 	ldrh.w	fp, [ip]
 8013664:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8013668:	fb09 220b 	mla	r2, r9, fp, r2
 801366c:	4492      	add	sl, r2
 801366e:	b289      	uxth	r1, r1
 8013670:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8013674:	f84e 1b04 	str.w	r1, [lr], #4
 8013678:	f85c 2b04 	ldr.w	r2, [ip], #4
 801367c:	f8be 1000 	ldrh.w	r1, [lr]
 8013680:	0c12      	lsrs	r2, r2, #16
 8013682:	fb09 1102 	mla	r1, r9, r2, r1
 8013686:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 801368a:	4567      	cmp	r7, ip
 801368c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8013690:	d8e6      	bhi.n	8013660 <__multiply+0x10c>
 8013692:	9a01      	ldr	r2, [sp, #4]
 8013694:	50a9      	str	r1, [r5, r2]
 8013696:	3504      	adds	r5, #4
 8013698:	e79a      	b.n	80135d0 <__multiply+0x7c>
 801369a:	3e01      	subs	r6, #1
 801369c:	e79c      	b.n	80135d8 <__multiply+0x84>
 801369e:	bf00      	nop
 80136a0:	08015b10 	.word	0x08015b10
 80136a4:	08015b9c 	.word	0x08015b9c

080136a8 <__pow5mult>:
 80136a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80136ac:	4615      	mov	r5, r2
 80136ae:	f012 0203 	ands.w	r2, r2, #3
 80136b2:	4606      	mov	r6, r0
 80136b4:	460f      	mov	r7, r1
 80136b6:	d007      	beq.n	80136c8 <__pow5mult+0x20>
 80136b8:	4c25      	ldr	r4, [pc, #148]	; (8013750 <__pow5mult+0xa8>)
 80136ba:	3a01      	subs	r2, #1
 80136bc:	2300      	movs	r3, #0
 80136be:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80136c2:	f7ff fe51 	bl	8013368 <__multadd>
 80136c6:	4607      	mov	r7, r0
 80136c8:	10ad      	asrs	r5, r5, #2
 80136ca:	d03d      	beq.n	8013748 <__pow5mult+0xa0>
 80136cc:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80136ce:	b97c      	cbnz	r4, 80136f0 <__pow5mult+0x48>
 80136d0:	2010      	movs	r0, #16
 80136d2:	f7ff fdcd 	bl	8013270 <malloc>
 80136d6:	4602      	mov	r2, r0
 80136d8:	6270      	str	r0, [r6, #36]	; 0x24
 80136da:	b928      	cbnz	r0, 80136e8 <__pow5mult+0x40>
 80136dc:	4b1d      	ldr	r3, [pc, #116]	; (8013754 <__pow5mult+0xac>)
 80136de:	481e      	ldr	r0, [pc, #120]	; (8013758 <__pow5mult+0xb0>)
 80136e0:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80136e4:	f001 f934 	bl	8014950 <__assert_func>
 80136e8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80136ec:	6004      	str	r4, [r0, #0]
 80136ee:	60c4      	str	r4, [r0, #12]
 80136f0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80136f4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80136f8:	b94c      	cbnz	r4, 801370e <__pow5mult+0x66>
 80136fa:	f240 2171 	movw	r1, #625	; 0x271
 80136fe:	4630      	mov	r0, r6
 8013700:	f7ff ff12 	bl	8013528 <__i2b>
 8013704:	2300      	movs	r3, #0
 8013706:	f8c8 0008 	str.w	r0, [r8, #8]
 801370a:	4604      	mov	r4, r0
 801370c:	6003      	str	r3, [r0, #0]
 801370e:	f04f 0900 	mov.w	r9, #0
 8013712:	07eb      	lsls	r3, r5, #31
 8013714:	d50a      	bpl.n	801372c <__pow5mult+0x84>
 8013716:	4639      	mov	r1, r7
 8013718:	4622      	mov	r2, r4
 801371a:	4630      	mov	r0, r6
 801371c:	f7ff ff1a 	bl	8013554 <__multiply>
 8013720:	4639      	mov	r1, r7
 8013722:	4680      	mov	r8, r0
 8013724:	4630      	mov	r0, r6
 8013726:	f7ff fdfd 	bl	8013324 <_Bfree>
 801372a:	4647      	mov	r7, r8
 801372c:	106d      	asrs	r5, r5, #1
 801372e:	d00b      	beq.n	8013748 <__pow5mult+0xa0>
 8013730:	6820      	ldr	r0, [r4, #0]
 8013732:	b938      	cbnz	r0, 8013744 <__pow5mult+0x9c>
 8013734:	4622      	mov	r2, r4
 8013736:	4621      	mov	r1, r4
 8013738:	4630      	mov	r0, r6
 801373a:	f7ff ff0b 	bl	8013554 <__multiply>
 801373e:	6020      	str	r0, [r4, #0]
 8013740:	f8c0 9000 	str.w	r9, [r0]
 8013744:	4604      	mov	r4, r0
 8013746:	e7e4      	b.n	8013712 <__pow5mult+0x6a>
 8013748:	4638      	mov	r0, r7
 801374a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801374e:	bf00      	nop
 8013750:	08015ce8 	.word	0x08015ce8
 8013754:	08015a9e 	.word	0x08015a9e
 8013758:	08015b9c 	.word	0x08015b9c

0801375c <__lshift>:
 801375c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013760:	460c      	mov	r4, r1
 8013762:	6849      	ldr	r1, [r1, #4]
 8013764:	6923      	ldr	r3, [r4, #16]
 8013766:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801376a:	68a3      	ldr	r3, [r4, #8]
 801376c:	4607      	mov	r7, r0
 801376e:	4691      	mov	r9, r2
 8013770:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8013774:	f108 0601 	add.w	r6, r8, #1
 8013778:	42b3      	cmp	r3, r6
 801377a:	db0b      	blt.n	8013794 <__lshift+0x38>
 801377c:	4638      	mov	r0, r7
 801377e:	f7ff fd91 	bl	80132a4 <_Balloc>
 8013782:	4605      	mov	r5, r0
 8013784:	b948      	cbnz	r0, 801379a <__lshift+0x3e>
 8013786:	4602      	mov	r2, r0
 8013788:	4b2a      	ldr	r3, [pc, #168]	; (8013834 <__lshift+0xd8>)
 801378a:	482b      	ldr	r0, [pc, #172]	; (8013838 <__lshift+0xdc>)
 801378c:	f240 11d9 	movw	r1, #473	; 0x1d9
 8013790:	f001 f8de 	bl	8014950 <__assert_func>
 8013794:	3101      	adds	r1, #1
 8013796:	005b      	lsls	r3, r3, #1
 8013798:	e7ee      	b.n	8013778 <__lshift+0x1c>
 801379a:	2300      	movs	r3, #0
 801379c:	f100 0114 	add.w	r1, r0, #20
 80137a0:	f100 0210 	add.w	r2, r0, #16
 80137a4:	4618      	mov	r0, r3
 80137a6:	4553      	cmp	r3, sl
 80137a8:	db37      	blt.n	801381a <__lshift+0xbe>
 80137aa:	6920      	ldr	r0, [r4, #16]
 80137ac:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80137b0:	f104 0314 	add.w	r3, r4, #20
 80137b4:	f019 091f 	ands.w	r9, r9, #31
 80137b8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80137bc:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80137c0:	d02f      	beq.n	8013822 <__lshift+0xc6>
 80137c2:	f1c9 0e20 	rsb	lr, r9, #32
 80137c6:	468a      	mov	sl, r1
 80137c8:	f04f 0c00 	mov.w	ip, #0
 80137cc:	681a      	ldr	r2, [r3, #0]
 80137ce:	fa02 f209 	lsl.w	r2, r2, r9
 80137d2:	ea42 020c 	orr.w	r2, r2, ip
 80137d6:	f84a 2b04 	str.w	r2, [sl], #4
 80137da:	f853 2b04 	ldr.w	r2, [r3], #4
 80137de:	4298      	cmp	r0, r3
 80137e0:	fa22 fc0e 	lsr.w	ip, r2, lr
 80137e4:	d8f2      	bhi.n	80137cc <__lshift+0x70>
 80137e6:	1b03      	subs	r3, r0, r4
 80137e8:	3b15      	subs	r3, #21
 80137ea:	f023 0303 	bic.w	r3, r3, #3
 80137ee:	3304      	adds	r3, #4
 80137f0:	f104 0215 	add.w	r2, r4, #21
 80137f4:	4290      	cmp	r0, r2
 80137f6:	bf38      	it	cc
 80137f8:	2304      	movcc	r3, #4
 80137fa:	f841 c003 	str.w	ip, [r1, r3]
 80137fe:	f1bc 0f00 	cmp.w	ip, #0
 8013802:	d001      	beq.n	8013808 <__lshift+0xac>
 8013804:	f108 0602 	add.w	r6, r8, #2
 8013808:	3e01      	subs	r6, #1
 801380a:	4638      	mov	r0, r7
 801380c:	612e      	str	r6, [r5, #16]
 801380e:	4621      	mov	r1, r4
 8013810:	f7ff fd88 	bl	8013324 <_Bfree>
 8013814:	4628      	mov	r0, r5
 8013816:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801381a:	f842 0f04 	str.w	r0, [r2, #4]!
 801381e:	3301      	adds	r3, #1
 8013820:	e7c1      	b.n	80137a6 <__lshift+0x4a>
 8013822:	3904      	subs	r1, #4
 8013824:	f853 2b04 	ldr.w	r2, [r3], #4
 8013828:	f841 2f04 	str.w	r2, [r1, #4]!
 801382c:	4298      	cmp	r0, r3
 801382e:	d8f9      	bhi.n	8013824 <__lshift+0xc8>
 8013830:	e7ea      	b.n	8013808 <__lshift+0xac>
 8013832:	bf00      	nop
 8013834:	08015b10 	.word	0x08015b10
 8013838:	08015b9c 	.word	0x08015b9c

0801383c <__mcmp>:
 801383c:	b530      	push	{r4, r5, lr}
 801383e:	6902      	ldr	r2, [r0, #16]
 8013840:	690c      	ldr	r4, [r1, #16]
 8013842:	1b12      	subs	r2, r2, r4
 8013844:	d10e      	bne.n	8013864 <__mcmp+0x28>
 8013846:	f100 0314 	add.w	r3, r0, #20
 801384a:	3114      	adds	r1, #20
 801384c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8013850:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8013854:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8013858:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 801385c:	42a5      	cmp	r5, r4
 801385e:	d003      	beq.n	8013868 <__mcmp+0x2c>
 8013860:	d305      	bcc.n	801386e <__mcmp+0x32>
 8013862:	2201      	movs	r2, #1
 8013864:	4610      	mov	r0, r2
 8013866:	bd30      	pop	{r4, r5, pc}
 8013868:	4283      	cmp	r3, r0
 801386a:	d3f3      	bcc.n	8013854 <__mcmp+0x18>
 801386c:	e7fa      	b.n	8013864 <__mcmp+0x28>
 801386e:	f04f 32ff 	mov.w	r2, #4294967295
 8013872:	e7f7      	b.n	8013864 <__mcmp+0x28>

08013874 <__mdiff>:
 8013874:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013878:	460c      	mov	r4, r1
 801387a:	4606      	mov	r6, r0
 801387c:	4611      	mov	r1, r2
 801387e:	4620      	mov	r0, r4
 8013880:	4690      	mov	r8, r2
 8013882:	f7ff ffdb 	bl	801383c <__mcmp>
 8013886:	1e05      	subs	r5, r0, #0
 8013888:	d110      	bne.n	80138ac <__mdiff+0x38>
 801388a:	4629      	mov	r1, r5
 801388c:	4630      	mov	r0, r6
 801388e:	f7ff fd09 	bl	80132a4 <_Balloc>
 8013892:	b930      	cbnz	r0, 80138a2 <__mdiff+0x2e>
 8013894:	4b3a      	ldr	r3, [pc, #232]	; (8013980 <__mdiff+0x10c>)
 8013896:	4602      	mov	r2, r0
 8013898:	f240 2132 	movw	r1, #562	; 0x232
 801389c:	4839      	ldr	r0, [pc, #228]	; (8013984 <__mdiff+0x110>)
 801389e:	f001 f857 	bl	8014950 <__assert_func>
 80138a2:	2301      	movs	r3, #1
 80138a4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80138a8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80138ac:	bfa4      	itt	ge
 80138ae:	4643      	movge	r3, r8
 80138b0:	46a0      	movge	r8, r4
 80138b2:	4630      	mov	r0, r6
 80138b4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80138b8:	bfa6      	itte	ge
 80138ba:	461c      	movge	r4, r3
 80138bc:	2500      	movge	r5, #0
 80138be:	2501      	movlt	r5, #1
 80138c0:	f7ff fcf0 	bl	80132a4 <_Balloc>
 80138c4:	b920      	cbnz	r0, 80138d0 <__mdiff+0x5c>
 80138c6:	4b2e      	ldr	r3, [pc, #184]	; (8013980 <__mdiff+0x10c>)
 80138c8:	4602      	mov	r2, r0
 80138ca:	f44f 7110 	mov.w	r1, #576	; 0x240
 80138ce:	e7e5      	b.n	801389c <__mdiff+0x28>
 80138d0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80138d4:	6926      	ldr	r6, [r4, #16]
 80138d6:	60c5      	str	r5, [r0, #12]
 80138d8:	f104 0914 	add.w	r9, r4, #20
 80138dc:	f108 0514 	add.w	r5, r8, #20
 80138e0:	f100 0e14 	add.w	lr, r0, #20
 80138e4:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 80138e8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80138ec:	f108 0210 	add.w	r2, r8, #16
 80138f0:	46f2      	mov	sl, lr
 80138f2:	2100      	movs	r1, #0
 80138f4:	f859 3b04 	ldr.w	r3, [r9], #4
 80138f8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80138fc:	fa1f f883 	uxth.w	r8, r3
 8013900:	fa11 f18b 	uxtah	r1, r1, fp
 8013904:	0c1b      	lsrs	r3, r3, #16
 8013906:	eba1 0808 	sub.w	r8, r1, r8
 801390a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 801390e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8013912:	fa1f f888 	uxth.w	r8, r8
 8013916:	1419      	asrs	r1, r3, #16
 8013918:	454e      	cmp	r6, r9
 801391a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 801391e:	f84a 3b04 	str.w	r3, [sl], #4
 8013922:	d8e7      	bhi.n	80138f4 <__mdiff+0x80>
 8013924:	1b33      	subs	r3, r6, r4
 8013926:	3b15      	subs	r3, #21
 8013928:	f023 0303 	bic.w	r3, r3, #3
 801392c:	3304      	adds	r3, #4
 801392e:	3415      	adds	r4, #21
 8013930:	42a6      	cmp	r6, r4
 8013932:	bf38      	it	cc
 8013934:	2304      	movcc	r3, #4
 8013936:	441d      	add	r5, r3
 8013938:	4473      	add	r3, lr
 801393a:	469e      	mov	lr, r3
 801393c:	462e      	mov	r6, r5
 801393e:	4566      	cmp	r6, ip
 8013940:	d30e      	bcc.n	8013960 <__mdiff+0xec>
 8013942:	f10c 0203 	add.w	r2, ip, #3
 8013946:	1b52      	subs	r2, r2, r5
 8013948:	f022 0203 	bic.w	r2, r2, #3
 801394c:	3d03      	subs	r5, #3
 801394e:	45ac      	cmp	ip, r5
 8013950:	bf38      	it	cc
 8013952:	2200      	movcc	r2, #0
 8013954:	441a      	add	r2, r3
 8013956:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 801395a:	b17b      	cbz	r3, 801397c <__mdiff+0x108>
 801395c:	6107      	str	r7, [r0, #16]
 801395e:	e7a3      	b.n	80138a8 <__mdiff+0x34>
 8013960:	f856 8b04 	ldr.w	r8, [r6], #4
 8013964:	fa11 f288 	uxtah	r2, r1, r8
 8013968:	1414      	asrs	r4, r2, #16
 801396a:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 801396e:	b292      	uxth	r2, r2
 8013970:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8013974:	f84e 2b04 	str.w	r2, [lr], #4
 8013978:	1421      	asrs	r1, r4, #16
 801397a:	e7e0      	b.n	801393e <__mdiff+0xca>
 801397c:	3f01      	subs	r7, #1
 801397e:	e7ea      	b.n	8013956 <__mdiff+0xe2>
 8013980:	08015b10 	.word	0x08015b10
 8013984:	08015b9c 	.word	0x08015b9c

08013988 <__ulp>:
 8013988:	b082      	sub	sp, #8
 801398a:	ed8d 0b00 	vstr	d0, [sp]
 801398e:	9b01      	ldr	r3, [sp, #4]
 8013990:	4912      	ldr	r1, [pc, #72]	; (80139dc <__ulp+0x54>)
 8013992:	4019      	ands	r1, r3
 8013994:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 8013998:	2900      	cmp	r1, #0
 801399a:	dd05      	ble.n	80139a8 <__ulp+0x20>
 801399c:	2200      	movs	r2, #0
 801399e:	460b      	mov	r3, r1
 80139a0:	ec43 2b10 	vmov	d0, r2, r3
 80139a4:	b002      	add	sp, #8
 80139a6:	4770      	bx	lr
 80139a8:	4249      	negs	r1, r1
 80139aa:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 80139ae:	ea4f 5021 	mov.w	r0, r1, asr #20
 80139b2:	f04f 0200 	mov.w	r2, #0
 80139b6:	f04f 0300 	mov.w	r3, #0
 80139ba:	da04      	bge.n	80139c6 <__ulp+0x3e>
 80139bc:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 80139c0:	fa41 f300 	asr.w	r3, r1, r0
 80139c4:	e7ec      	b.n	80139a0 <__ulp+0x18>
 80139c6:	f1a0 0114 	sub.w	r1, r0, #20
 80139ca:	291e      	cmp	r1, #30
 80139cc:	bfda      	itte	le
 80139ce:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 80139d2:	fa20 f101 	lsrle.w	r1, r0, r1
 80139d6:	2101      	movgt	r1, #1
 80139d8:	460a      	mov	r2, r1
 80139da:	e7e1      	b.n	80139a0 <__ulp+0x18>
 80139dc:	7ff00000 	.word	0x7ff00000

080139e0 <__b2d>:
 80139e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80139e2:	6905      	ldr	r5, [r0, #16]
 80139e4:	f100 0714 	add.w	r7, r0, #20
 80139e8:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 80139ec:	1f2e      	subs	r6, r5, #4
 80139ee:	f855 4c04 	ldr.w	r4, [r5, #-4]
 80139f2:	4620      	mov	r0, r4
 80139f4:	f7ff fd48 	bl	8013488 <__hi0bits>
 80139f8:	f1c0 0320 	rsb	r3, r0, #32
 80139fc:	280a      	cmp	r0, #10
 80139fe:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8013a7c <__b2d+0x9c>
 8013a02:	600b      	str	r3, [r1, #0]
 8013a04:	dc14      	bgt.n	8013a30 <__b2d+0x50>
 8013a06:	f1c0 0e0b 	rsb	lr, r0, #11
 8013a0a:	fa24 f10e 	lsr.w	r1, r4, lr
 8013a0e:	42b7      	cmp	r7, r6
 8013a10:	ea41 030c 	orr.w	r3, r1, ip
 8013a14:	bf34      	ite	cc
 8013a16:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8013a1a:	2100      	movcs	r1, #0
 8013a1c:	3015      	adds	r0, #21
 8013a1e:	fa04 f000 	lsl.w	r0, r4, r0
 8013a22:	fa21 f10e 	lsr.w	r1, r1, lr
 8013a26:	ea40 0201 	orr.w	r2, r0, r1
 8013a2a:	ec43 2b10 	vmov	d0, r2, r3
 8013a2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013a30:	42b7      	cmp	r7, r6
 8013a32:	bf3a      	itte	cc
 8013a34:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8013a38:	f1a5 0608 	subcc.w	r6, r5, #8
 8013a3c:	2100      	movcs	r1, #0
 8013a3e:	380b      	subs	r0, #11
 8013a40:	d017      	beq.n	8013a72 <__b2d+0x92>
 8013a42:	f1c0 0c20 	rsb	ip, r0, #32
 8013a46:	fa04 f500 	lsl.w	r5, r4, r0
 8013a4a:	42be      	cmp	r6, r7
 8013a4c:	fa21 f40c 	lsr.w	r4, r1, ip
 8013a50:	ea45 0504 	orr.w	r5, r5, r4
 8013a54:	bf8c      	ite	hi
 8013a56:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8013a5a:	2400      	movls	r4, #0
 8013a5c:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8013a60:	fa01 f000 	lsl.w	r0, r1, r0
 8013a64:	fa24 f40c 	lsr.w	r4, r4, ip
 8013a68:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8013a6c:	ea40 0204 	orr.w	r2, r0, r4
 8013a70:	e7db      	b.n	8013a2a <__b2d+0x4a>
 8013a72:	ea44 030c 	orr.w	r3, r4, ip
 8013a76:	460a      	mov	r2, r1
 8013a78:	e7d7      	b.n	8013a2a <__b2d+0x4a>
 8013a7a:	bf00      	nop
 8013a7c:	3ff00000 	.word	0x3ff00000

08013a80 <__d2b>:
 8013a80:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8013a84:	4689      	mov	r9, r1
 8013a86:	2101      	movs	r1, #1
 8013a88:	ec57 6b10 	vmov	r6, r7, d0
 8013a8c:	4690      	mov	r8, r2
 8013a8e:	f7ff fc09 	bl	80132a4 <_Balloc>
 8013a92:	4604      	mov	r4, r0
 8013a94:	b930      	cbnz	r0, 8013aa4 <__d2b+0x24>
 8013a96:	4602      	mov	r2, r0
 8013a98:	4b25      	ldr	r3, [pc, #148]	; (8013b30 <__d2b+0xb0>)
 8013a9a:	4826      	ldr	r0, [pc, #152]	; (8013b34 <__d2b+0xb4>)
 8013a9c:	f240 310a 	movw	r1, #778	; 0x30a
 8013aa0:	f000 ff56 	bl	8014950 <__assert_func>
 8013aa4:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8013aa8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8013aac:	bb35      	cbnz	r5, 8013afc <__d2b+0x7c>
 8013aae:	2e00      	cmp	r6, #0
 8013ab0:	9301      	str	r3, [sp, #4]
 8013ab2:	d028      	beq.n	8013b06 <__d2b+0x86>
 8013ab4:	4668      	mov	r0, sp
 8013ab6:	9600      	str	r6, [sp, #0]
 8013ab8:	f7ff fd06 	bl	80134c8 <__lo0bits>
 8013abc:	9900      	ldr	r1, [sp, #0]
 8013abe:	b300      	cbz	r0, 8013b02 <__d2b+0x82>
 8013ac0:	9a01      	ldr	r2, [sp, #4]
 8013ac2:	f1c0 0320 	rsb	r3, r0, #32
 8013ac6:	fa02 f303 	lsl.w	r3, r2, r3
 8013aca:	430b      	orrs	r3, r1
 8013acc:	40c2      	lsrs	r2, r0
 8013ace:	6163      	str	r3, [r4, #20]
 8013ad0:	9201      	str	r2, [sp, #4]
 8013ad2:	9b01      	ldr	r3, [sp, #4]
 8013ad4:	61a3      	str	r3, [r4, #24]
 8013ad6:	2b00      	cmp	r3, #0
 8013ad8:	bf14      	ite	ne
 8013ada:	2202      	movne	r2, #2
 8013adc:	2201      	moveq	r2, #1
 8013ade:	6122      	str	r2, [r4, #16]
 8013ae0:	b1d5      	cbz	r5, 8013b18 <__d2b+0x98>
 8013ae2:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8013ae6:	4405      	add	r5, r0
 8013ae8:	f8c9 5000 	str.w	r5, [r9]
 8013aec:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8013af0:	f8c8 0000 	str.w	r0, [r8]
 8013af4:	4620      	mov	r0, r4
 8013af6:	b003      	add	sp, #12
 8013af8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013afc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8013b00:	e7d5      	b.n	8013aae <__d2b+0x2e>
 8013b02:	6161      	str	r1, [r4, #20]
 8013b04:	e7e5      	b.n	8013ad2 <__d2b+0x52>
 8013b06:	a801      	add	r0, sp, #4
 8013b08:	f7ff fcde 	bl	80134c8 <__lo0bits>
 8013b0c:	9b01      	ldr	r3, [sp, #4]
 8013b0e:	6163      	str	r3, [r4, #20]
 8013b10:	2201      	movs	r2, #1
 8013b12:	6122      	str	r2, [r4, #16]
 8013b14:	3020      	adds	r0, #32
 8013b16:	e7e3      	b.n	8013ae0 <__d2b+0x60>
 8013b18:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8013b1c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8013b20:	f8c9 0000 	str.w	r0, [r9]
 8013b24:	6918      	ldr	r0, [r3, #16]
 8013b26:	f7ff fcaf 	bl	8013488 <__hi0bits>
 8013b2a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8013b2e:	e7df      	b.n	8013af0 <__d2b+0x70>
 8013b30:	08015b10 	.word	0x08015b10
 8013b34:	08015b9c 	.word	0x08015b9c

08013b38 <__ratio>:
 8013b38:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013b3c:	4688      	mov	r8, r1
 8013b3e:	4669      	mov	r1, sp
 8013b40:	4681      	mov	r9, r0
 8013b42:	f7ff ff4d 	bl	80139e0 <__b2d>
 8013b46:	a901      	add	r1, sp, #4
 8013b48:	4640      	mov	r0, r8
 8013b4a:	ec55 4b10 	vmov	r4, r5, d0
 8013b4e:	f7ff ff47 	bl	80139e0 <__b2d>
 8013b52:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8013b56:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8013b5a:	eba3 0c02 	sub.w	ip, r3, r2
 8013b5e:	e9dd 3200 	ldrd	r3, r2, [sp]
 8013b62:	1a9b      	subs	r3, r3, r2
 8013b64:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8013b68:	ec51 0b10 	vmov	r0, r1, d0
 8013b6c:	2b00      	cmp	r3, #0
 8013b6e:	bfd6      	itet	le
 8013b70:	460a      	movle	r2, r1
 8013b72:	462a      	movgt	r2, r5
 8013b74:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8013b78:	468b      	mov	fp, r1
 8013b7a:	462f      	mov	r7, r5
 8013b7c:	bfd4      	ite	le
 8013b7e:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8013b82:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8013b86:	4620      	mov	r0, r4
 8013b88:	ee10 2a10 	vmov	r2, s0
 8013b8c:	465b      	mov	r3, fp
 8013b8e:	4639      	mov	r1, r7
 8013b90:	f7ec fe7c 	bl	800088c <__aeabi_ddiv>
 8013b94:	ec41 0b10 	vmov	d0, r0, r1
 8013b98:	b003      	add	sp, #12
 8013b9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08013b9e <__copybits>:
 8013b9e:	3901      	subs	r1, #1
 8013ba0:	b570      	push	{r4, r5, r6, lr}
 8013ba2:	1149      	asrs	r1, r1, #5
 8013ba4:	6914      	ldr	r4, [r2, #16]
 8013ba6:	3101      	adds	r1, #1
 8013ba8:	f102 0314 	add.w	r3, r2, #20
 8013bac:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8013bb0:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8013bb4:	1f05      	subs	r5, r0, #4
 8013bb6:	42a3      	cmp	r3, r4
 8013bb8:	d30c      	bcc.n	8013bd4 <__copybits+0x36>
 8013bba:	1aa3      	subs	r3, r4, r2
 8013bbc:	3b11      	subs	r3, #17
 8013bbe:	f023 0303 	bic.w	r3, r3, #3
 8013bc2:	3211      	adds	r2, #17
 8013bc4:	42a2      	cmp	r2, r4
 8013bc6:	bf88      	it	hi
 8013bc8:	2300      	movhi	r3, #0
 8013bca:	4418      	add	r0, r3
 8013bcc:	2300      	movs	r3, #0
 8013bce:	4288      	cmp	r0, r1
 8013bd0:	d305      	bcc.n	8013bde <__copybits+0x40>
 8013bd2:	bd70      	pop	{r4, r5, r6, pc}
 8013bd4:	f853 6b04 	ldr.w	r6, [r3], #4
 8013bd8:	f845 6f04 	str.w	r6, [r5, #4]!
 8013bdc:	e7eb      	b.n	8013bb6 <__copybits+0x18>
 8013bde:	f840 3b04 	str.w	r3, [r0], #4
 8013be2:	e7f4      	b.n	8013bce <__copybits+0x30>

08013be4 <__any_on>:
 8013be4:	f100 0214 	add.w	r2, r0, #20
 8013be8:	6900      	ldr	r0, [r0, #16]
 8013bea:	114b      	asrs	r3, r1, #5
 8013bec:	4298      	cmp	r0, r3
 8013bee:	b510      	push	{r4, lr}
 8013bf0:	db11      	blt.n	8013c16 <__any_on+0x32>
 8013bf2:	dd0a      	ble.n	8013c0a <__any_on+0x26>
 8013bf4:	f011 011f 	ands.w	r1, r1, #31
 8013bf8:	d007      	beq.n	8013c0a <__any_on+0x26>
 8013bfa:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8013bfe:	fa24 f001 	lsr.w	r0, r4, r1
 8013c02:	fa00 f101 	lsl.w	r1, r0, r1
 8013c06:	428c      	cmp	r4, r1
 8013c08:	d10b      	bne.n	8013c22 <__any_on+0x3e>
 8013c0a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8013c0e:	4293      	cmp	r3, r2
 8013c10:	d803      	bhi.n	8013c1a <__any_on+0x36>
 8013c12:	2000      	movs	r0, #0
 8013c14:	bd10      	pop	{r4, pc}
 8013c16:	4603      	mov	r3, r0
 8013c18:	e7f7      	b.n	8013c0a <__any_on+0x26>
 8013c1a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8013c1e:	2900      	cmp	r1, #0
 8013c20:	d0f5      	beq.n	8013c0e <__any_on+0x2a>
 8013c22:	2001      	movs	r0, #1
 8013c24:	e7f6      	b.n	8013c14 <__any_on+0x30>

08013c26 <_calloc_r>:
 8013c26:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8013c28:	fba1 2402 	umull	r2, r4, r1, r2
 8013c2c:	b94c      	cbnz	r4, 8013c42 <_calloc_r+0x1c>
 8013c2e:	4611      	mov	r1, r2
 8013c30:	9201      	str	r2, [sp, #4]
 8013c32:	f000 f87b 	bl	8013d2c <_malloc_r>
 8013c36:	9a01      	ldr	r2, [sp, #4]
 8013c38:	4605      	mov	r5, r0
 8013c3a:	b930      	cbnz	r0, 8013c4a <_calloc_r+0x24>
 8013c3c:	4628      	mov	r0, r5
 8013c3e:	b003      	add	sp, #12
 8013c40:	bd30      	pop	{r4, r5, pc}
 8013c42:	220c      	movs	r2, #12
 8013c44:	6002      	str	r2, [r0, #0]
 8013c46:	2500      	movs	r5, #0
 8013c48:	e7f8      	b.n	8013c3c <_calloc_r+0x16>
 8013c4a:	4621      	mov	r1, r4
 8013c4c:	f7fc fb08 	bl	8010260 <memset>
 8013c50:	e7f4      	b.n	8013c3c <_calloc_r+0x16>
	...

08013c54 <_free_r>:
 8013c54:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8013c56:	2900      	cmp	r1, #0
 8013c58:	d044      	beq.n	8013ce4 <_free_r+0x90>
 8013c5a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8013c5e:	9001      	str	r0, [sp, #4]
 8013c60:	2b00      	cmp	r3, #0
 8013c62:	f1a1 0404 	sub.w	r4, r1, #4
 8013c66:	bfb8      	it	lt
 8013c68:	18e4      	addlt	r4, r4, r3
 8013c6a:	f001 f875 	bl	8014d58 <__malloc_lock>
 8013c6e:	4a1e      	ldr	r2, [pc, #120]	; (8013ce8 <_free_r+0x94>)
 8013c70:	9801      	ldr	r0, [sp, #4]
 8013c72:	6813      	ldr	r3, [r2, #0]
 8013c74:	b933      	cbnz	r3, 8013c84 <_free_r+0x30>
 8013c76:	6063      	str	r3, [r4, #4]
 8013c78:	6014      	str	r4, [r2, #0]
 8013c7a:	b003      	add	sp, #12
 8013c7c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8013c80:	f001 b870 	b.w	8014d64 <__malloc_unlock>
 8013c84:	42a3      	cmp	r3, r4
 8013c86:	d908      	bls.n	8013c9a <_free_r+0x46>
 8013c88:	6825      	ldr	r5, [r4, #0]
 8013c8a:	1961      	adds	r1, r4, r5
 8013c8c:	428b      	cmp	r3, r1
 8013c8e:	bf01      	itttt	eq
 8013c90:	6819      	ldreq	r1, [r3, #0]
 8013c92:	685b      	ldreq	r3, [r3, #4]
 8013c94:	1949      	addeq	r1, r1, r5
 8013c96:	6021      	streq	r1, [r4, #0]
 8013c98:	e7ed      	b.n	8013c76 <_free_r+0x22>
 8013c9a:	461a      	mov	r2, r3
 8013c9c:	685b      	ldr	r3, [r3, #4]
 8013c9e:	b10b      	cbz	r3, 8013ca4 <_free_r+0x50>
 8013ca0:	42a3      	cmp	r3, r4
 8013ca2:	d9fa      	bls.n	8013c9a <_free_r+0x46>
 8013ca4:	6811      	ldr	r1, [r2, #0]
 8013ca6:	1855      	adds	r5, r2, r1
 8013ca8:	42a5      	cmp	r5, r4
 8013caa:	d10b      	bne.n	8013cc4 <_free_r+0x70>
 8013cac:	6824      	ldr	r4, [r4, #0]
 8013cae:	4421      	add	r1, r4
 8013cb0:	1854      	adds	r4, r2, r1
 8013cb2:	42a3      	cmp	r3, r4
 8013cb4:	6011      	str	r1, [r2, #0]
 8013cb6:	d1e0      	bne.n	8013c7a <_free_r+0x26>
 8013cb8:	681c      	ldr	r4, [r3, #0]
 8013cba:	685b      	ldr	r3, [r3, #4]
 8013cbc:	6053      	str	r3, [r2, #4]
 8013cbe:	4421      	add	r1, r4
 8013cc0:	6011      	str	r1, [r2, #0]
 8013cc2:	e7da      	b.n	8013c7a <_free_r+0x26>
 8013cc4:	d902      	bls.n	8013ccc <_free_r+0x78>
 8013cc6:	230c      	movs	r3, #12
 8013cc8:	6003      	str	r3, [r0, #0]
 8013cca:	e7d6      	b.n	8013c7a <_free_r+0x26>
 8013ccc:	6825      	ldr	r5, [r4, #0]
 8013cce:	1961      	adds	r1, r4, r5
 8013cd0:	428b      	cmp	r3, r1
 8013cd2:	bf04      	itt	eq
 8013cd4:	6819      	ldreq	r1, [r3, #0]
 8013cd6:	685b      	ldreq	r3, [r3, #4]
 8013cd8:	6063      	str	r3, [r4, #4]
 8013cda:	bf04      	itt	eq
 8013cdc:	1949      	addeq	r1, r1, r5
 8013cde:	6021      	streq	r1, [r4, #0]
 8013ce0:	6054      	str	r4, [r2, #4]
 8013ce2:	e7ca      	b.n	8013c7a <_free_r+0x26>
 8013ce4:	b003      	add	sp, #12
 8013ce6:	bd30      	pop	{r4, r5, pc}
 8013ce8:	20000768 	.word	0x20000768

08013cec <sbrk_aligned>:
 8013cec:	b570      	push	{r4, r5, r6, lr}
 8013cee:	4e0e      	ldr	r6, [pc, #56]	; (8013d28 <sbrk_aligned+0x3c>)
 8013cf0:	460c      	mov	r4, r1
 8013cf2:	6831      	ldr	r1, [r6, #0]
 8013cf4:	4605      	mov	r5, r0
 8013cf6:	b911      	cbnz	r1, 8013cfe <sbrk_aligned+0x12>
 8013cf8:	f000 fd26 	bl	8014748 <_sbrk_r>
 8013cfc:	6030      	str	r0, [r6, #0]
 8013cfe:	4621      	mov	r1, r4
 8013d00:	4628      	mov	r0, r5
 8013d02:	f000 fd21 	bl	8014748 <_sbrk_r>
 8013d06:	1c43      	adds	r3, r0, #1
 8013d08:	d00a      	beq.n	8013d20 <sbrk_aligned+0x34>
 8013d0a:	1cc4      	adds	r4, r0, #3
 8013d0c:	f024 0403 	bic.w	r4, r4, #3
 8013d10:	42a0      	cmp	r0, r4
 8013d12:	d007      	beq.n	8013d24 <sbrk_aligned+0x38>
 8013d14:	1a21      	subs	r1, r4, r0
 8013d16:	4628      	mov	r0, r5
 8013d18:	f000 fd16 	bl	8014748 <_sbrk_r>
 8013d1c:	3001      	adds	r0, #1
 8013d1e:	d101      	bne.n	8013d24 <sbrk_aligned+0x38>
 8013d20:	f04f 34ff 	mov.w	r4, #4294967295
 8013d24:	4620      	mov	r0, r4
 8013d26:	bd70      	pop	{r4, r5, r6, pc}
 8013d28:	2000076c 	.word	0x2000076c

08013d2c <_malloc_r>:
 8013d2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013d30:	1ccd      	adds	r5, r1, #3
 8013d32:	f025 0503 	bic.w	r5, r5, #3
 8013d36:	3508      	adds	r5, #8
 8013d38:	2d0c      	cmp	r5, #12
 8013d3a:	bf38      	it	cc
 8013d3c:	250c      	movcc	r5, #12
 8013d3e:	2d00      	cmp	r5, #0
 8013d40:	4607      	mov	r7, r0
 8013d42:	db01      	blt.n	8013d48 <_malloc_r+0x1c>
 8013d44:	42a9      	cmp	r1, r5
 8013d46:	d905      	bls.n	8013d54 <_malloc_r+0x28>
 8013d48:	230c      	movs	r3, #12
 8013d4a:	603b      	str	r3, [r7, #0]
 8013d4c:	2600      	movs	r6, #0
 8013d4e:	4630      	mov	r0, r6
 8013d50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013d54:	4e2e      	ldr	r6, [pc, #184]	; (8013e10 <_malloc_r+0xe4>)
 8013d56:	f000 ffff 	bl	8014d58 <__malloc_lock>
 8013d5a:	6833      	ldr	r3, [r6, #0]
 8013d5c:	461c      	mov	r4, r3
 8013d5e:	bb34      	cbnz	r4, 8013dae <_malloc_r+0x82>
 8013d60:	4629      	mov	r1, r5
 8013d62:	4638      	mov	r0, r7
 8013d64:	f7ff ffc2 	bl	8013cec <sbrk_aligned>
 8013d68:	1c43      	adds	r3, r0, #1
 8013d6a:	4604      	mov	r4, r0
 8013d6c:	d14d      	bne.n	8013e0a <_malloc_r+0xde>
 8013d6e:	6834      	ldr	r4, [r6, #0]
 8013d70:	4626      	mov	r6, r4
 8013d72:	2e00      	cmp	r6, #0
 8013d74:	d140      	bne.n	8013df8 <_malloc_r+0xcc>
 8013d76:	6823      	ldr	r3, [r4, #0]
 8013d78:	4631      	mov	r1, r6
 8013d7a:	4638      	mov	r0, r7
 8013d7c:	eb04 0803 	add.w	r8, r4, r3
 8013d80:	f000 fce2 	bl	8014748 <_sbrk_r>
 8013d84:	4580      	cmp	r8, r0
 8013d86:	d13a      	bne.n	8013dfe <_malloc_r+0xd2>
 8013d88:	6821      	ldr	r1, [r4, #0]
 8013d8a:	3503      	adds	r5, #3
 8013d8c:	1a6d      	subs	r5, r5, r1
 8013d8e:	f025 0503 	bic.w	r5, r5, #3
 8013d92:	3508      	adds	r5, #8
 8013d94:	2d0c      	cmp	r5, #12
 8013d96:	bf38      	it	cc
 8013d98:	250c      	movcc	r5, #12
 8013d9a:	4629      	mov	r1, r5
 8013d9c:	4638      	mov	r0, r7
 8013d9e:	f7ff ffa5 	bl	8013cec <sbrk_aligned>
 8013da2:	3001      	adds	r0, #1
 8013da4:	d02b      	beq.n	8013dfe <_malloc_r+0xd2>
 8013da6:	6823      	ldr	r3, [r4, #0]
 8013da8:	442b      	add	r3, r5
 8013daa:	6023      	str	r3, [r4, #0]
 8013dac:	e00e      	b.n	8013dcc <_malloc_r+0xa0>
 8013dae:	6822      	ldr	r2, [r4, #0]
 8013db0:	1b52      	subs	r2, r2, r5
 8013db2:	d41e      	bmi.n	8013df2 <_malloc_r+0xc6>
 8013db4:	2a0b      	cmp	r2, #11
 8013db6:	d916      	bls.n	8013de6 <_malloc_r+0xba>
 8013db8:	1961      	adds	r1, r4, r5
 8013dba:	42a3      	cmp	r3, r4
 8013dbc:	6025      	str	r5, [r4, #0]
 8013dbe:	bf18      	it	ne
 8013dc0:	6059      	strne	r1, [r3, #4]
 8013dc2:	6863      	ldr	r3, [r4, #4]
 8013dc4:	bf08      	it	eq
 8013dc6:	6031      	streq	r1, [r6, #0]
 8013dc8:	5162      	str	r2, [r4, r5]
 8013dca:	604b      	str	r3, [r1, #4]
 8013dcc:	4638      	mov	r0, r7
 8013dce:	f104 060b 	add.w	r6, r4, #11
 8013dd2:	f000 ffc7 	bl	8014d64 <__malloc_unlock>
 8013dd6:	f026 0607 	bic.w	r6, r6, #7
 8013dda:	1d23      	adds	r3, r4, #4
 8013ddc:	1af2      	subs	r2, r6, r3
 8013dde:	d0b6      	beq.n	8013d4e <_malloc_r+0x22>
 8013de0:	1b9b      	subs	r3, r3, r6
 8013de2:	50a3      	str	r3, [r4, r2]
 8013de4:	e7b3      	b.n	8013d4e <_malloc_r+0x22>
 8013de6:	6862      	ldr	r2, [r4, #4]
 8013de8:	42a3      	cmp	r3, r4
 8013dea:	bf0c      	ite	eq
 8013dec:	6032      	streq	r2, [r6, #0]
 8013dee:	605a      	strne	r2, [r3, #4]
 8013df0:	e7ec      	b.n	8013dcc <_malloc_r+0xa0>
 8013df2:	4623      	mov	r3, r4
 8013df4:	6864      	ldr	r4, [r4, #4]
 8013df6:	e7b2      	b.n	8013d5e <_malloc_r+0x32>
 8013df8:	4634      	mov	r4, r6
 8013dfa:	6876      	ldr	r6, [r6, #4]
 8013dfc:	e7b9      	b.n	8013d72 <_malloc_r+0x46>
 8013dfe:	230c      	movs	r3, #12
 8013e00:	603b      	str	r3, [r7, #0]
 8013e02:	4638      	mov	r0, r7
 8013e04:	f000 ffae 	bl	8014d64 <__malloc_unlock>
 8013e08:	e7a1      	b.n	8013d4e <_malloc_r+0x22>
 8013e0a:	6025      	str	r5, [r4, #0]
 8013e0c:	e7de      	b.n	8013dcc <_malloc_r+0xa0>
 8013e0e:	bf00      	nop
 8013e10:	20000768 	.word	0x20000768

08013e14 <__ssputs_r>:
 8013e14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013e18:	688e      	ldr	r6, [r1, #8]
 8013e1a:	429e      	cmp	r6, r3
 8013e1c:	4682      	mov	sl, r0
 8013e1e:	460c      	mov	r4, r1
 8013e20:	4690      	mov	r8, r2
 8013e22:	461f      	mov	r7, r3
 8013e24:	d838      	bhi.n	8013e98 <__ssputs_r+0x84>
 8013e26:	898a      	ldrh	r2, [r1, #12]
 8013e28:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8013e2c:	d032      	beq.n	8013e94 <__ssputs_r+0x80>
 8013e2e:	6825      	ldr	r5, [r4, #0]
 8013e30:	6909      	ldr	r1, [r1, #16]
 8013e32:	eba5 0901 	sub.w	r9, r5, r1
 8013e36:	6965      	ldr	r5, [r4, #20]
 8013e38:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8013e3c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8013e40:	3301      	adds	r3, #1
 8013e42:	444b      	add	r3, r9
 8013e44:	106d      	asrs	r5, r5, #1
 8013e46:	429d      	cmp	r5, r3
 8013e48:	bf38      	it	cc
 8013e4a:	461d      	movcc	r5, r3
 8013e4c:	0553      	lsls	r3, r2, #21
 8013e4e:	d531      	bpl.n	8013eb4 <__ssputs_r+0xa0>
 8013e50:	4629      	mov	r1, r5
 8013e52:	f7ff ff6b 	bl	8013d2c <_malloc_r>
 8013e56:	4606      	mov	r6, r0
 8013e58:	b950      	cbnz	r0, 8013e70 <__ssputs_r+0x5c>
 8013e5a:	230c      	movs	r3, #12
 8013e5c:	f8ca 3000 	str.w	r3, [sl]
 8013e60:	89a3      	ldrh	r3, [r4, #12]
 8013e62:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013e66:	81a3      	strh	r3, [r4, #12]
 8013e68:	f04f 30ff 	mov.w	r0, #4294967295
 8013e6c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013e70:	6921      	ldr	r1, [r4, #16]
 8013e72:	464a      	mov	r2, r9
 8013e74:	f7fc f9e6 	bl	8010244 <memcpy>
 8013e78:	89a3      	ldrh	r3, [r4, #12]
 8013e7a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8013e7e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013e82:	81a3      	strh	r3, [r4, #12]
 8013e84:	6126      	str	r6, [r4, #16]
 8013e86:	6165      	str	r5, [r4, #20]
 8013e88:	444e      	add	r6, r9
 8013e8a:	eba5 0509 	sub.w	r5, r5, r9
 8013e8e:	6026      	str	r6, [r4, #0]
 8013e90:	60a5      	str	r5, [r4, #8]
 8013e92:	463e      	mov	r6, r7
 8013e94:	42be      	cmp	r6, r7
 8013e96:	d900      	bls.n	8013e9a <__ssputs_r+0x86>
 8013e98:	463e      	mov	r6, r7
 8013e9a:	6820      	ldr	r0, [r4, #0]
 8013e9c:	4632      	mov	r2, r6
 8013e9e:	4641      	mov	r1, r8
 8013ea0:	f000 ff40 	bl	8014d24 <memmove>
 8013ea4:	68a3      	ldr	r3, [r4, #8]
 8013ea6:	1b9b      	subs	r3, r3, r6
 8013ea8:	60a3      	str	r3, [r4, #8]
 8013eaa:	6823      	ldr	r3, [r4, #0]
 8013eac:	4433      	add	r3, r6
 8013eae:	6023      	str	r3, [r4, #0]
 8013eb0:	2000      	movs	r0, #0
 8013eb2:	e7db      	b.n	8013e6c <__ssputs_r+0x58>
 8013eb4:	462a      	mov	r2, r5
 8013eb6:	f000 ff5b 	bl	8014d70 <_realloc_r>
 8013eba:	4606      	mov	r6, r0
 8013ebc:	2800      	cmp	r0, #0
 8013ebe:	d1e1      	bne.n	8013e84 <__ssputs_r+0x70>
 8013ec0:	6921      	ldr	r1, [r4, #16]
 8013ec2:	4650      	mov	r0, sl
 8013ec4:	f7ff fec6 	bl	8013c54 <_free_r>
 8013ec8:	e7c7      	b.n	8013e5a <__ssputs_r+0x46>
	...

08013ecc <_svfiprintf_r>:
 8013ecc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013ed0:	4698      	mov	r8, r3
 8013ed2:	898b      	ldrh	r3, [r1, #12]
 8013ed4:	061b      	lsls	r3, r3, #24
 8013ed6:	b09d      	sub	sp, #116	; 0x74
 8013ed8:	4607      	mov	r7, r0
 8013eda:	460d      	mov	r5, r1
 8013edc:	4614      	mov	r4, r2
 8013ede:	d50e      	bpl.n	8013efe <_svfiprintf_r+0x32>
 8013ee0:	690b      	ldr	r3, [r1, #16]
 8013ee2:	b963      	cbnz	r3, 8013efe <_svfiprintf_r+0x32>
 8013ee4:	2140      	movs	r1, #64	; 0x40
 8013ee6:	f7ff ff21 	bl	8013d2c <_malloc_r>
 8013eea:	6028      	str	r0, [r5, #0]
 8013eec:	6128      	str	r0, [r5, #16]
 8013eee:	b920      	cbnz	r0, 8013efa <_svfiprintf_r+0x2e>
 8013ef0:	230c      	movs	r3, #12
 8013ef2:	603b      	str	r3, [r7, #0]
 8013ef4:	f04f 30ff 	mov.w	r0, #4294967295
 8013ef8:	e0d1      	b.n	801409e <_svfiprintf_r+0x1d2>
 8013efa:	2340      	movs	r3, #64	; 0x40
 8013efc:	616b      	str	r3, [r5, #20]
 8013efe:	2300      	movs	r3, #0
 8013f00:	9309      	str	r3, [sp, #36]	; 0x24
 8013f02:	2320      	movs	r3, #32
 8013f04:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8013f08:	f8cd 800c 	str.w	r8, [sp, #12]
 8013f0c:	2330      	movs	r3, #48	; 0x30
 8013f0e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80140b8 <_svfiprintf_r+0x1ec>
 8013f12:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8013f16:	f04f 0901 	mov.w	r9, #1
 8013f1a:	4623      	mov	r3, r4
 8013f1c:	469a      	mov	sl, r3
 8013f1e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8013f22:	b10a      	cbz	r2, 8013f28 <_svfiprintf_r+0x5c>
 8013f24:	2a25      	cmp	r2, #37	; 0x25
 8013f26:	d1f9      	bne.n	8013f1c <_svfiprintf_r+0x50>
 8013f28:	ebba 0b04 	subs.w	fp, sl, r4
 8013f2c:	d00b      	beq.n	8013f46 <_svfiprintf_r+0x7a>
 8013f2e:	465b      	mov	r3, fp
 8013f30:	4622      	mov	r2, r4
 8013f32:	4629      	mov	r1, r5
 8013f34:	4638      	mov	r0, r7
 8013f36:	f7ff ff6d 	bl	8013e14 <__ssputs_r>
 8013f3a:	3001      	adds	r0, #1
 8013f3c:	f000 80aa 	beq.w	8014094 <_svfiprintf_r+0x1c8>
 8013f40:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8013f42:	445a      	add	r2, fp
 8013f44:	9209      	str	r2, [sp, #36]	; 0x24
 8013f46:	f89a 3000 	ldrb.w	r3, [sl]
 8013f4a:	2b00      	cmp	r3, #0
 8013f4c:	f000 80a2 	beq.w	8014094 <_svfiprintf_r+0x1c8>
 8013f50:	2300      	movs	r3, #0
 8013f52:	f04f 32ff 	mov.w	r2, #4294967295
 8013f56:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8013f5a:	f10a 0a01 	add.w	sl, sl, #1
 8013f5e:	9304      	str	r3, [sp, #16]
 8013f60:	9307      	str	r3, [sp, #28]
 8013f62:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8013f66:	931a      	str	r3, [sp, #104]	; 0x68
 8013f68:	4654      	mov	r4, sl
 8013f6a:	2205      	movs	r2, #5
 8013f6c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013f70:	4851      	ldr	r0, [pc, #324]	; (80140b8 <_svfiprintf_r+0x1ec>)
 8013f72:	f7ec f955 	bl	8000220 <memchr>
 8013f76:	9a04      	ldr	r2, [sp, #16]
 8013f78:	b9d8      	cbnz	r0, 8013fb2 <_svfiprintf_r+0xe6>
 8013f7a:	06d0      	lsls	r0, r2, #27
 8013f7c:	bf44      	itt	mi
 8013f7e:	2320      	movmi	r3, #32
 8013f80:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8013f84:	0711      	lsls	r1, r2, #28
 8013f86:	bf44      	itt	mi
 8013f88:	232b      	movmi	r3, #43	; 0x2b
 8013f8a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8013f8e:	f89a 3000 	ldrb.w	r3, [sl]
 8013f92:	2b2a      	cmp	r3, #42	; 0x2a
 8013f94:	d015      	beq.n	8013fc2 <_svfiprintf_r+0xf6>
 8013f96:	9a07      	ldr	r2, [sp, #28]
 8013f98:	4654      	mov	r4, sl
 8013f9a:	2000      	movs	r0, #0
 8013f9c:	f04f 0c0a 	mov.w	ip, #10
 8013fa0:	4621      	mov	r1, r4
 8013fa2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8013fa6:	3b30      	subs	r3, #48	; 0x30
 8013fa8:	2b09      	cmp	r3, #9
 8013faa:	d94e      	bls.n	801404a <_svfiprintf_r+0x17e>
 8013fac:	b1b0      	cbz	r0, 8013fdc <_svfiprintf_r+0x110>
 8013fae:	9207      	str	r2, [sp, #28]
 8013fb0:	e014      	b.n	8013fdc <_svfiprintf_r+0x110>
 8013fb2:	eba0 0308 	sub.w	r3, r0, r8
 8013fb6:	fa09 f303 	lsl.w	r3, r9, r3
 8013fba:	4313      	orrs	r3, r2
 8013fbc:	9304      	str	r3, [sp, #16]
 8013fbe:	46a2      	mov	sl, r4
 8013fc0:	e7d2      	b.n	8013f68 <_svfiprintf_r+0x9c>
 8013fc2:	9b03      	ldr	r3, [sp, #12]
 8013fc4:	1d19      	adds	r1, r3, #4
 8013fc6:	681b      	ldr	r3, [r3, #0]
 8013fc8:	9103      	str	r1, [sp, #12]
 8013fca:	2b00      	cmp	r3, #0
 8013fcc:	bfbb      	ittet	lt
 8013fce:	425b      	neglt	r3, r3
 8013fd0:	f042 0202 	orrlt.w	r2, r2, #2
 8013fd4:	9307      	strge	r3, [sp, #28]
 8013fd6:	9307      	strlt	r3, [sp, #28]
 8013fd8:	bfb8      	it	lt
 8013fda:	9204      	strlt	r2, [sp, #16]
 8013fdc:	7823      	ldrb	r3, [r4, #0]
 8013fde:	2b2e      	cmp	r3, #46	; 0x2e
 8013fe0:	d10c      	bne.n	8013ffc <_svfiprintf_r+0x130>
 8013fe2:	7863      	ldrb	r3, [r4, #1]
 8013fe4:	2b2a      	cmp	r3, #42	; 0x2a
 8013fe6:	d135      	bne.n	8014054 <_svfiprintf_r+0x188>
 8013fe8:	9b03      	ldr	r3, [sp, #12]
 8013fea:	1d1a      	adds	r2, r3, #4
 8013fec:	681b      	ldr	r3, [r3, #0]
 8013fee:	9203      	str	r2, [sp, #12]
 8013ff0:	2b00      	cmp	r3, #0
 8013ff2:	bfb8      	it	lt
 8013ff4:	f04f 33ff 	movlt.w	r3, #4294967295
 8013ff8:	3402      	adds	r4, #2
 8013ffa:	9305      	str	r3, [sp, #20]
 8013ffc:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80140c8 <_svfiprintf_r+0x1fc>
 8014000:	7821      	ldrb	r1, [r4, #0]
 8014002:	2203      	movs	r2, #3
 8014004:	4650      	mov	r0, sl
 8014006:	f7ec f90b 	bl	8000220 <memchr>
 801400a:	b140      	cbz	r0, 801401e <_svfiprintf_r+0x152>
 801400c:	2340      	movs	r3, #64	; 0x40
 801400e:	eba0 000a 	sub.w	r0, r0, sl
 8014012:	fa03 f000 	lsl.w	r0, r3, r0
 8014016:	9b04      	ldr	r3, [sp, #16]
 8014018:	4303      	orrs	r3, r0
 801401a:	3401      	adds	r4, #1
 801401c:	9304      	str	r3, [sp, #16]
 801401e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014022:	4826      	ldr	r0, [pc, #152]	; (80140bc <_svfiprintf_r+0x1f0>)
 8014024:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8014028:	2206      	movs	r2, #6
 801402a:	f7ec f8f9 	bl	8000220 <memchr>
 801402e:	2800      	cmp	r0, #0
 8014030:	d038      	beq.n	80140a4 <_svfiprintf_r+0x1d8>
 8014032:	4b23      	ldr	r3, [pc, #140]	; (80140c0 <_svfiprintf_r+0x1f4>)
 8014034:	bb1b      	cbnz	r3, 801407e <_svfiprintf_r+0x1b2>
 8014036:	9b03      	ldr	r3, [sp, #12]
 8014038:	3307      	adds	r3, #7
 801403a:	f023 0307 	bic.w	r3, r3, #7
 801403e:	3308      	adds	r3, #8
 8014040:	9303      	str	r3, [sp, #12]
 8014042:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014044:	4433      	add	r3, r6
 8014046:	9309      	str	r3, [sp, #36]	; 0x24
 8014048:	e767      	b.n	8013f1a <_svfiprintf_r+0x4e>
 801404a:	fb0c 3202 	mla	r2, ip, r2, r3
 801404e:	460c      	mov	r4, r1
 8014050:	2001      	movs	r0, #1
 8014052:	e7a5      	b.n	8013fa0 <_svfiprintf_r+0xd4>
 8014054:	2300      	movs	r3, #0
 8014056:	3401      	adds	r4, #1
 8014058:	9305      	str	r3, [sp, #20]
 801405a:	4619      	mov	r1, r3
 801405c:	f04f 0c0a 	mov.w	ip, #10
 8014060:	4620      	mov	r0, r4
 8014062:	f810 2b01 	ldrb.w	r2, [r0], #1
 8014066:	3a30      	subs	r2, #48	; 0x30
 8014068:	2a09      	cmp	r2, #9
 801406a:	d903      	bls.n	8014074 <_svfiprintf_r+0x1a8>
 801406c:	2b00      	cmp	r3, #0
 801406e:	d0c5      	beq.n	8013ffc <_svfiprintf_r+0x130>
 8014070:	9105      	str	r1, [sp, #20]
 8014072:	e7c3      	b.n	8013ffc <_svfiprintf_r+0x130>
 8014074:	fb0c 2101 	mla	r1, ip, r1, r2
 8014078:	4604      	mov	r4, r0
 801407a:	2301      	movs	r3, #1
 801407c:	e7f0      	b.n	8014060 <_svfiprintf_r+0x194>
 801407e:	ab03      	add	r3, sp, #12
 8014080:	9300      	str	r3, [sp, #0]
 8014082:	462a      	mov	r2, r5
 8014084:	4b0f      	ldr	r3, [pc, #60]	; (80140c4 <_svfiprintf_r+0x1f8>)
 8014086:	a904      	add	r1, sp, #16
 8014088:	4638      	mov	r0, r7
 801408a:	f7fc f991 	bl	80103b0 <_printf_float>
 801408e:	1c42      	adds	r2, r0, #1
 8014090:	4606      	mov	r6, r0
 8014092:	d1d6      	bne.n	8014042 <_svfiprintf_r+0x176>
 8014094:	89ab      	ldrh	r3, [r5, #12]
 8014096:	065b      	lsls	r3, r3, #25
 8014098:	f53f af2c 	bmi.w	8013ef4 <_svfiprintf_r+0x28>
 801409c:	9809      	ldr	r0, [sp, #36]	; 0x24
 801409e:	b01d      	add	sp, #116	; 0x74
 80140a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80140a4:	ab03      	add	r3, sp, #12
 80140a6:	9300      	str	r3, [sp, #0]
 80140a8:	462a      	mov	r2, r5
 80140aa:	4b06      	ldr	r3, [pc, #24]	; (80140c4 <_svfiprintf_r+0x1f8>)
 80140ac:	a904      	add	r1, sp, #16
 80140ae:	4638      	mov	r0, r7
 80140b0:	f7fc fc22 	bl	80108f8 <_printf_i>
 80140b4:	e7eb      	b.n	801408e <_svfiprintf_r+0x1c2>
 80140b6:	bf00      	nop
 80140b8:	08015cf4 	.word	0x08015cf4
 80140bc:	08015cfe 	.word	0x08015cfe
 80140c0:	080103b1 	.word	0x080103b1
 80140c4:	08013e15 	.word	0x08013e15
 80140c8:	08015cfa 	.word	0x08015cfa

080140cc <_sungetc_r>:
 80140cc:	b538      	push	{r3, r4, r5, lr}
 80140ce:	1c4b      	adds	r3, r1, #1
 80140d0:	4614      	mov	r4, r2
 80140d2:	d103      	bne.n	80140dc <_sungetc_r+0x10>
 80140d4:	f04f 35ff 	mov.w	r5, #4294967295
 80140d8:	4628      	mov	r0, r5
 80140da:	bd38      	pop	{r3, r4, r5, pc}
 80140dc:	8993      	ldrh	r3, [r2, #12]
 80140de:	f023 0320 	bic.w	r3, r3, #32
 80140e2:	8193      	strh	r3, [r2, #12]
 80140e4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80140e6:	6852      	ldr	r2, [r2, #4]
 80140e8:	b2cd      	uxtb	r5, r1
 80140ea:	b18b      	cbz	r3, 8014110 <_sungetc_r+0x44>
 80140ec:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80140ee:	4293      	cmp	r3, r2
 80140f0:	dd08      	ble.n	8014104 <_sungetc_r+0x38>
 80140f2:	6823      	ldr	r3, [r4, #0]
 80140f4:	1e5a      	subs	r2, r3, #1
 80140f6:	6022      	str	r2, [r4, #0]
 80140f8:	f803 5c01 	strb.w	r5, [r3, #-1]
 80140fc:	6863      	ldr	r3, [r4, #4]
 80140fe:	3301      	adds	r3, #1
 8014100:	6063      	str	r3, [r4, #4]
 8014102:	e7e9      	b.n	80140d8 <_sungetc_r+0xc>
 8014104:	4621      	mov	r1, r4
 8014106:	f000 fbdb 	bl	80148c0 <__submore>
 801410a:	2800      	cmp	r0, #0
 801410c:	d0f1      	beq.n	80140f2 <_sungetc_r+0x26>
 801410e:	e7e1      	b.n	80140d4 <_sungetc_r+0x8>
 8014110:	6921      	ldr	r1, [r4, #16]
 8014112:	6823      	ldr	r3, [r4, #0]
 8014114:	b151      	cbz	r1, 801412c <_sungetc_r+0x60>
 8014116:	4299      	cmp	r1, r3
 8014118:	d208      	bcs.n	801412c <_sungetc_r+0x60>
 801411a:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 801411e:	42a9      	cmp	r1, r5
 8014120:	d104      	bne.n	801412c <_sungetc_r+0x60>
 8014122:	3b01      	subs	r3, #1
 8014124:	3201      	adds	r2, #1
 8014126:	6023      	str	r3, [r4, #0]
 8014128:	6062      	str	r2, [r4, #4]
 801412a:	e7d5      	b.n	80140d8 <_sungetc_r+0xc>
 801412c:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8014130:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8014134:	6363      	str	r3, [r4, #52]	; 0x34
 8014136:	2303      	movs	r3, #3
 8014138:	63a3      	str	r3, [r4, #56]	; 0x38
 801413a:	4623      	mov	r3, r4
 801413c:	f803 5f46 	strb.w	r5, [r3, #70]!
 8014140:	6023      	str	r3, [r4, #0]
 8014142:	2301      	movs	r3, #1
 8014144:	e7dc      	b.n	8014100 <_sungetc_r+0x34>

08014146 <__ssrefill_r>:
 8014146:	b510      	push	{r4, lr}
 8014148:	460c      	mov	r4, r1
 801414a:	6b49      	ldr	r1, [r1, #52]	; 0x34
 801414c:	b169      	cbz	r1, 801416a <__ssrefill_r+0x24>
 801414e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8014152:	4299      	cmp	r1, r3
 8014154:	d001      	beq.n	801415a <__ssrefill_r+0x14>
 8014156:	f7ff fd7d 	bl	8013c54 <_free_r>
 801415a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801415c:	6063      	str	r3, [r4, #4]
 801415e:	2000      	movs	r0, #0
 8014160:	6360      	str	r0, [r4, #52]	; 0x34
 8014162:	b113      	cbz	r3, 801416a <__ssrefill_r+0x24>
 8014164:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8014166:	6023      	str	r3, [r4, #0]
 8014168:	bd10      	pop	{r4, pc}
 801416a:	6923      	ldr	r3, [r4, #16]
 801416c:	6023      	str	r3, [r4, #0]
 801416e:	2300      	movs	r3, #0
 8014170:	6063      	str	r3, [r4, #4]
 8014172:	89a3      	ldrh	r3, [r4, #12]
 8014174:	f043 0320 	orr.w	r3, r3, #32
 8014178:	81a3      	strh	r3, [r4, #12]
 801417a:	f04f 30ff 	mov.w	r0, #4294967295
 801417e:	e7f3      	b.n	8014168 <__ssrefill_r+0x22>

08014180 <__ssvfiscanf_r>:
 8014180:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014184:	460c      	mov	r4, r1
 8014186:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 801418a:	2100      	movs	r1, #0
 801418c:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 8014190:	49a6      	ldr	r1, [pc, #664]	; (801442c <__ssvfiscanf_r+0x2ac>)
 8014192:	91a0      	str	r1, [sp, #640]	; 0x280
 8014194:	f10d 0804 	add.w	r8, sp, #4
 8014198:	49a5      	ldr	r1, [pc, #660]	; (8014430 <__ssvfiscanf_r+0x2b0>)
 801419a:	4fa6      	ldr	r7, [pc, #664]	; (8014434 <__ssvfiscanf_r+0x2b4>)
 801419c:	f8df 9298 	ldr.w	r9, [pc, #664]	; 8014438 <__ssvfiscanf_r+0x2b8>
 80141a0:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 80141a4:	4606      	mov	r6, r0
 80141a6:	91a1      	str	r1, [sp, #644]	; 0x284
 80141a8:	9300      	str	r3, [sp, #0]
 80141aa:	7813      	ldrb	r3, [r2, #0]
 80141ac:	2b00      	cmp	r3, #0
 80141ae:	f000 815a 	beq.w	8014466 <__ssvfiscanf_r+0x2e6>
 80141b2:	5dd9      	ldrb	r1, [r3, r7]
 80141b4:	f011 0108 	ands.w	r1, r1, #8
 80141b8:	f102 0501 	add.w	r5, r2, #1
 80141bc:	d019      	beq.n	80141f2 <__ssvfiscanf_r+0x72>
 80141be:	6863      	ldr	r3, [r4, #4]
 80141c0:	2b00      	cmp	r3, #0
 80141c2:	dd0f      	ble.n	80141e4 <__ssvfiscanf_r+0x64>
 80141c4:	6823      	ldr	r3, [r4, #0]
 80141c6:	781a      	ldrb	r2, [r3, #0]
 80141c8:	5cba      	ldrb	r2, [r7, r2]
 80141ca:	0712      	lsls	r2, r2, #28
 80141cc:	d401      	bmi.n	80141d2 <__ssvfiscanf_r+0x52>
 80141ce:	462a      	mov	r2, r5
 80141d0:	e7eb      	b.n	80141aa <__ssvfiscanf_r+0x2a>
 80141d2:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80141d4:	3201      	adds	r2, #1
 80141d6:	9245      	str	r2, [sp, #276]	; 0x114
 80141d8:	6862      	ldr	r2, [r4, #4]
 80141da:	3301      	adds	r3, #1
 80141dc:	3a01      	subs	r2, #1
 80141de:	6062      	str	r2, [r4, #4]
 80141e0:	6023      	str	r3, [r4, #0]
 80141e2:	e7ec      	b.n	80141be <__ssvfiscanf_r+0x3e>
 80141e4:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80141e6:	4621      	mov	r1, r4
 80141e8:	4630      	mov	r0, r6
 80141ea:	4798      	blx	r3
 80141ec:	2800      	cmp	r0, #0
 80141ee:	d0e9      	beq.n	80141c4 <__ssvfiscanf_r+0x44>
 80141f0:	e7ed      	b.n	80141ce <__ssvfiscanf_r+0x4e>
 80141f2:	2b25      	cmp	r3, #37	; 0x25
 80141f4:	d012      	beq.n	801421c <__ssvfiscanf_r+0x9c>
 80141f6:	469a      	mov	sl, r3
 80141f8:	6863      	ldr	r3, [r4, #4]
 80141fa:	2b00      	cmp	r3, #0
 80141fc:	f340 8091 	ble.w	8014322 <__ssvfiscanf_r+0x1a2>
 8014200:	6822      	ldr	r2, [r4, #0]
 8014202:	7813      	ldrb	r3, [r2, #0]
 8014204:	4553      	cmp	r3, sl
 8014206:	f040 812e 	bne.w	8014466 <__ssvfiscanf_r+0x2e6>
 801420a:	6863      	ldr	r3, [r4, #4]
 801420c:	3b01      	subs	r3, #1
 801420e:	6063      	str	r3, [r4, #4]
 8014210:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8014212:	3201      	adds	r2, #1
 8014214:	3301      	adds	r3, #1
 8014216:	6022      	str	r2, [r4, #0]
 8014218:	9345      	str	r3, [sp, #276]	; 0x114
 801421a:	e7d8      	b.n	80141ce <__ssvfiscanf_r+0x4e>
 801421c:	9141      	str	r1, [sp, #260]	; 0x104
 801421e:	9143      	str	r1, [sp, #268]	; 0x10c
 8014220:	7853      	ldrb	r3, [r2, #1]
 8014222:	2b2a      	cmp	r3, #42	; 0x2a
 8014224:	bf02      	ittt	eq
 8014226:	2310      	moveq	r3, #16
 8014228:	1c95      	addeq	r5, r2, #2
 801422a:	9341      	streq	r3, [sp, #260]	; 0x104
 801422c:	220a      	movs	r2, #10
 801422e:	46aa      	mov	sl, r5
 8014230:	f81a 1b01 	ldrb.w	r1, [sl], #1
 8014234:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 8014238:	2b09      	cmp	r3, #9
 801423a:	d91d      	bls.n	8014278 <__ssvfiscanf_r+0xf8>
 801423c:	487e      	ldr	r0, [pc, #504]	; (8014438 <__ssvfiscanf_r+0x2b8>)
 801423e:	2203      	movs	r2, #3
 8014240:	f7eb ffee 	bl	8000220 <memchr>
 8014244:	b140      	cbz	r0, 8014258 <__ssvfiscanf_r+0xd8>
 8014246:	2301      	movs	r3, #1
 8014248:	eba0 0009 	sub.w	r0, r0, r9
 801424c:	fa03 f000 	lsl.w	r0, r3, r0
 8014250:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8014252:	4318      	orrs	r0, r3
 8014254:	9041      	str	r0, [sp, #260]	; 0x104
 8014256:	4655      	mov	r5, sl
 8014258:	f815 3b01 	ldrb.w	r3, [r5], #1
 801425c:	2b78      	cmp	r3, #120	; 0x78
 801425e:	d806      	bhi.n	801426e <__ssvfiscanf_r+0xee>
 8014260:	2b57      	cmp	r3, #87	; 0x57
 8014262:	d810      	bhi.n	8014286 <__ssvfiscanf_r+0x106>
 8014264:	2b25      	cmp	r3, #37	; 0x25
 8014266:	d0c6      	beq.n	80141f6 <__ssvfiscanf_r+0x76>
 8014268:	d856      	bhi.n	8014318 <__ssvfiscanf_r+0x198>
 801426a:	2b00      	cmp	r3, #0
 801426c:	d064      	beq.n	8014338 <__ssvfiscanf_r+0x1b8>
 801426e:	2303      	movs	r3, #3
 8014270:	9347      	str	r3, [sp, #284]	; 0x11c
 8014272:	230a      	movs	r3, #10
 8014274:	9342      	str	r3, [sp, #264]	; 0x108
 8014276:	e071      	b.n	801435c <__ssvfiscanf_r+0x1dc>
 8014278:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 801427a:	fb02 1103 	mla	r1, r2, r3, r1
 801427e:	3930      	subs	r1, #48	; 0x30
 8014280:	9143      	str	r1, [sp, #268]	; 0x10c
 8014282:	4655      	mov	r5, sl
 8014284:	e7d3      	b.n	801422e <__ssvfiscanf_r+0xae>
 8014286:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 801428a:	2a20      	cmp	r2, #32
 801428c:	d8ef      	bhi.n	801426e <__ssvfiscanf_r+0xee>
 801428e:	a101      	add	r1, pc, #4	; (adr r1, 8014294 <__ssvfiscanf_r+0x114>)
 8014290:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8014294:	08014347 	.word	0x08014347
 8014298:	0801426f 	.word	0x0801426f
 801429c:	0801426f 	.word	0x0801426f
 80142a0:	080143a5 	.word	0x080143a5
 80142a4:	0801426f 	.word	0x0801426f
 80142a8:	0801426f 	.word	0x0801426f
 80142ac:	0801426f 	.word	0x0801426f
 80142b0:	0801426f 	.word	0x0801426f
 80142b4:	0801426f 	.word	0x0801426f
 80142b8:	0801426f 	.word	0x0801426f
 80142bc:	0801426f 	.word	0x0801426f
 80142c0:	080143bb 	.word	0x080143bb
 80142c4:	08014391 	.word	0x08014391
 80142c8:	0801431f 	.word	0x0801431f
 80142cc:	0801431f 	.word	0x0801431f
 80142d0:	0801431f 	.word	0x0801431f
 80142d4:	0801426f 	.word	0x0801426f
 80142d8:	08014395 	.word	0x08014395
 80142dc:	0801426f 	.word	0x0801426f
 80142e0:	0801426f 	.word	0x0801426f
 80142e4:	0801426f 	.word	0x0801426f
 80142e8:	0801426f 	.word	0x0801426f
 80142ec:	080143cb 	.word	0x080143cb
 80142f0:	0801439d 	.word	0x0801439d
 80142f4:	0801433f 	.word	0x0801433f
 80142f8:	0801426f 	.word	0x0801426f
 80142fc:	0801426f 	.word	0x0801426f
 8014300:	080143c7 	.word	0x080143c7
 8014304:	0801426f 	.word	0x0801426f
 8014308:	08014391 	.word	0x08014391
 801430c:	0801426f 	.word	0x0801426f
 8014310:	0801426f 	.word	0x0801426f
 8014314:	08014347 	.word	0x08014347
 8014318:	3b45      	subs	r3, #69	; 0x45
 801431a:	2b02      	cmp	r3, #2
 801431c:	d8a7      	bhi.n	801426e <__ssvfiscanf_r+0xee>
 801431e:	2305      	movs	r3, #5
 8014320:	e01b      	b.n	801435a <__ssvfiscanf_r+0x1da>
 8014322:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8014324:	4621      	mov	r1, r4
 8014326:	4630      	mov	r0, r6
 8014328:	4798      	blx	r3
 801432a:	2800      	cmp	r0, #0
 801432c:	f43f af68 	beq.w	8014200 <__ssvfiscanf_r+0x80>
 8014330:	9844      	ldr	r0, [sp, #272]	; 0x110
 8014332:	2800      	cmp	r0, #0
 8014334:	f040 808d 	bne.w	8014452 <__ssvfiscanf_r+0x2d2>
 8014338:	f04f 30ff 	mov.w	r0, #4294967295
 801433c:	e08f      	b.n	801445e <__ssvfiscanf_r+0x2de>
 801433e:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8014340:	f042 0220 	orr.w	r2, r2, #32
 8014344:	9241      	str	r2, [sp, #260]	; 0x104
 8014346:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8014348:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801434c:	9241      	str	r2, [sp, #260]	; 0x104
 801434e:	2210      	movs	r2, #16
 8014350:	2b6f      	cmp	r3, #111	; 0x6f
 8014352:	9242      	str	r2, [sp, #264]	; 0x108
 8014354:	bf34      	ite	cc
 8014356:	2303      	movcc	r3, #3
 8014358:	2304      	movcs	r3, #4
 801435a:	9347      	str	r3, [sp, #284]	; 0x11c
 801435c:	6863      	ldr	r3, [r4, #4]
 801435e:	2b00      	cmp	r3, #0
 8014360:	dd42      	ble.n	80143e8 <__ssvfiscanf_r+0x268>
 8014362:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8014364:	0659      	lsls	r1, r3, #25
 8014366:	d404      	bmi.n	8014372 <__ssvfiscanf_r+0x1f2>
 8014368:	6823      	ldr	r3, [r4, #0]
 801436a:	781a      	ldrb	r2, [r3, #0]
 801436c:	5cba      	ldrb	r2, [r7, r2]
 801436e:	0712      	lsls	r2, r2, #28
 8014370:	d441      	bmi.n	80143f6 <__ssvfiscanf_r+0x276>
 8014372:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8014374:	2b02      	cmp	r3, #2
 8014376:	dc50      	bgt.n	801441a <__ssvfiscanf_r+0x29a>
 8014378:	466b      	mov	r3, sp
 801437a:	4622      	mov	r2, r4
 801437c:	a941      	add	r1, sp, #260	; 0x104
 801437e:	4630      	mov	r0, r6
 8014380:	f000 f876 	bl	8014470 <_scanf_chars>
 8014384:	2801      	cmp	r0, #1
 8014386:	d06e      	beq.n	8014466 <__ssvfiscanf_r+0x2e6>
 8014388:	2802      	cmp	r0, #2
 801438a:	f47f af20 	bne.w	80141ce <__ssvfiscanf_r+0x4e>
 801438e:	e7cf      	b.n	8014330 <__ssvfiscanf_r+0x1b0>
 8014390:	220a      	movs	r2, #10
 8014392:	e7dd      	b.n	8014350 <__ssvfiscanf_r+0x1d0>
 8014394:	2300      	movs	r3, #0
 8014396:	9342      	str	r3, [sp, #264]	; 0x108
 8014398:	2303      	movs	r3, #3
 801439a:	e7de      	b.n	801435a <__ssvfiscanf_r+0x1da>
 801439c:	2308      	movs	r3, #8
 801439e:	9342      	str	r3, [sp, #264]	; 0x108
 80143a0:	2304      	movs	r3, #4
 80143a2:	e7da      	b.n	801435a <__ssvfiscanf_r+0x1da>
 80143a4:	4629      	mov	r1, r5
 80143a6:	4640      	mov	r0, r8
 80143a8:	f000 f9de 	bl	8014768 <__sccl>
 80143ac:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80143ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80143b2:	9341      	str	r3, [sp, #260]	; 0x104
 80143b4:	4605      	mov	r5, r0
 80143b6:	2301      	movs	r3, #1
 80143b8:	e7cf      	b.n	801435a <__ssvfiscanf_r+0x1da>
 80143ba:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80143bc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80143c0:	9341      	str	r3, [sp, #260]	; 0x104
 80143c2:	2300      	movs	r3, #0
 80143c4:	e7c9      	b.n	801435a <__ssvfiscanf_r+0x1da>
 80143c6:	2302      	movs	r3, #2
 80143c8:	e7c7      	b.n	801435a <__ssvfiscanf_r+0x1da>
 80143ca:	9841      	ldr	r0, [sp, #260]	; 0x104
 80143cc:	06c3      	lsls	r3, r0, #27
 80143ce:	f53f aefe 	bmi.w	80141ce <__ssvfiscanf_r+0x4e>
 80143d2:	9b00      	ldr	r3, [sp, #0]
 80143d4:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80143d6:	1d19      	adds	r1, r3, #4
 80143d8:	9100      	str	r1, [sp, #0]
 80143da:	681b      	ldr	r3, [r3, #0]
 80143dc:	f010 0f01 	tst.w	r0, #1
 80143e0:	bf14      	ite	ne
 80143e2:	801a      	strhne	r2, [r3, #0]
 80143e4:	601a      	streq	r2, [r3, #0]
 80143e6:	e6f2      	b.n	80141ce <__ssvfiscanf_r+0x4e>
 80143e8:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80143ea:	4621      	mov	r1, r4
 80143ec:	4630      	mov	r0, r6
 80143ee:	4798      	blx	r3
 80143f0:	2800      	cmp	r0, #0
 80143f2:	d0b6      	beq.n	8014362 <__ssvfiscanf_r+0x1e2>
 80143f4:	e79c      	b.n	8014330 <__ssvfiscanf_r+0x1b0>
 80143f6:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80143f8:	3201      	adds	r2, #1
 80143fa:	9245      	str	r2, [sp, #276]	; 0x114
 80143fc:	6862      	ldr	r2, [r4, #4]
 80143fe:	3a01      	subs	r2, #1
 8014400:	2a00      	cmp	r2, #0
 8014402:	6062      	str	r2, [r4, #4]
 8014404:	dd02      	ble.n	801440c <__ssvfiscanf_r+0x28c>
 8014406:	3301      	adds	r3, #1
 8014408:	6023      	str	r3, [r4, #0]
 801440a:	e7ad      	b.n	8014368 <__ssvfiscanf_r+0x1e8>
 801440c:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 801440e:	4621      	mov	r1, r4
 8014410:	4630      	mov	r0, r6
 8014412:	4798      	blx	r3
 8014414:	2800      	cmp	r0, #0
 8014416:	d0a7      	beq.n	8014368 <__ssvfiscanf_r+0x1e8>
 8014418:	e78a      	b.n	8014330 <__ssvfiscanf_r+0x1b0>
 801441a:	2b04      	cmp	r3, #4
 801441c:	dc0e      	bgt.n	801443c <__ssvfiscanf_r+0x2bc>
 801441e:	466b      	mov	r3, sp
 8014420:	4622      	mov	r2, r4
 8014422:	a941      	add	r1, sp, #260	; 0x104
 8014424:	4630      	mov	r0, r6
 8014426:	f000 f87d 	bl	8014524 <_scanf_i>
 801442a:	e7ab      	b.n	8014384 <__ssvfiscanf_r+0x204>
 801442c:	080140cd 	.word	0x080140cd
 8014430:	08014147 	.word	0x08014147
 8014434:	08015991 	.word	0x08015991
 8014438:	08015cfa 	.word	0x08015cfa
 801443c:	4b0b      	ldr	r3, [pc, #44]	; (801446c <__ssvfiscanf_r+0x2ec>)
 801443e:	2b00      	cmp	r3, #0
 8014440:	f43f aec5 	beq.w	80141ce <__ssvfiscanf_r+0x4e>
 8014444:	466b      	mov	r3, sp
 8014446:	4622      	mov	r2, r4
 8014448:	a941      	add	r1, sp, #260	; 0x104
 801444a:	4630      	mov	r0, r6
 801444c:	f7fc fb7a 	bl	8010b44 <_scanf_float>
 8014450:	e798      	b.n	8014384 <__ssvfiscanf_r+0x204>
 8014452:	89a3      	ldrh	r3, [r4, #12]
 8014454:	f013 0f40 	tst.w	r3, #64	; 0x40
 8014458:	bf18      	it	ne
 801445a:	f04f 30ff 	movne.w	r0, #4294967295
 801445e:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 8014462:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014466:	9844      	ldr	r0, [sp, #272]	; 0x110
 8014468:	e7f9      	b.n	801445e <__ssvfiscanf_r+0x2de>
 801446a:	bf00      	nop
 801446c:	08010b45 	.word	0x08010b45

08014470 <_scanf_chars>:
 8014470:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014474:	4615      	mov	r5, r2
 8014476:	688a      	ldr	r2, [r1, #8]
 8014478:	4680      	mov	r8, r0
 801447a:	460c      	mov	r4, r1
 801447c:	b932      	cbnz	r2, 801448c <_scanf_chars+0x1c>
 801447e:	698a      	ldr	r2, [r1, #24]
 8014480:	2a00      	cmp	r2, #0
 8014482:	bf0c      	ite	eq
 8014484:	2201      	moveq	r2, #1
 8014486:	f04f 32ff 	movne.w	r2, #4294967295
 801448a:	608a      	str	r2, [r1, #8]
 801448c:	6822      	ldr	r2, [r4, #0]
 801448e:	f8df 9090 	ldr.w	r9, [pc, #144]	; 8014520 <_scanf_chars+0xb0>
 8014492:	06d1      	lsls	r1, r2, #27
 8014494:	bf5f      	itttt	pl
 8014496:	681a      	ldrpl	r2, [r3, #0]
 8014498:	1d11      	addpl	r1, r2, #4
 801449a:	6019      	strpl	r1, [r3, #0]
 801449c:	6816      	ldrpl	r6, [r2, #0]
 801449e:	2700      	movs	r7, #0
 80144a0:	69a0      	ldr	r0, [r4, #24]
 80144a2:	b188      	cbz	r0, 80144c8 <_scanf_chars+0x58>
 80144a4:	2801      	cmp	r0, #1
 80144a6:	d107      	bne.n	80144b8 <_scanf_chars+0x48>
 80144a8:	682a      	ldr	r2, [r5, #0]
 80144aa:	7811      	ldrb	r1, [r2, #0]
 80144ac:	6962      	ldr	r2, [r4, #20]
 80144ae:	5c52      	ldrb	r2, [r2, r1]
 80144b0:	b952      	cbnz	r2, 80144c8 <_scanf_chars+0x58>
 80144b2:	2f00      	cmp	r7, #0
 80144b4:	d031      	beq.n	801451a <_scanf_chars+0xaa>
 80144b6:	e022      	b.n	80144fe <_scanf_chars+0x8e>
 80144b8:	2802      	cmp	r0, #2
 80144ba:	d120      	bne.n	80144fe <_scanf_chars+0x8e>
 80144bc:	682b      	ldr	r3, [r5, #0]
 80144be:	781b      	ldrb	r3, [r3, #0]
 80144c0:	f813 3009 	ldrb.w	r3, [r3, r9]
 80144c4:	071b      	lsls	r3, r3, #28
 80144c6:	d41a      	bmi.n	80144fe <_scanf_chars+0x8e>
 80144c8:	6823      	ldr	r3, [r4, #0]
 80144ca:	06da      	lsls	r2, r3, #27
 80144cc:	bf5e      	ittt	pl
 80144ce:	682b      	ldrpl	r3, [r5, #0]
 80144d0:	781b      	ldrbpl	r3, [r3, #0]
 80144d2:	f806 3b01 	strbpl.w	r3, [r6], #1
 80144d6:	682a      	ldr	r2, [r5, #0]
 80144d8:	686b      	ldr	r3, [r5, #4]
 80144da:	3201      	adds	r2, #1
 80144dc:	602a      	str	r2, [r5, #0]
 80144de:	68a2      	ldr	r2, [r4, #8]
 80144e0:	3b01      	subs	r3, #1
 80144e2:	3a01      	subs	r2, #1
 80144e4:	606b      	str	r3, [r5, #4]
 80144e6:	3701      	adds	r7, #1
 80144e8:	60a2      	str	r2, [r4, #8]
 80144ea:	b142      	cbz	r2, 80144fe <_scanf_chars+0x8e>
 80144ec:	2b00      	cmp	r3, #0
 80144ee:	dcd7      	bgt.n	80144a0 <_scanf_chars+0x30>
 80144f0:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80144f4:	4629      	mov	r1, r5
 80144f6:	4640      	mov	r0, r8
 80144f8:	4798      	blx	r3
 80144fa:	2800      	cmp	r0, #0
 80144fc:	d0d0      	beq.n	80144a0 <_scanf_chars+0x30>
 80144fe:	6823      	ldr	r3, [r4, #0]
 8014500:	f013 0310 	ands.w	r3, r3, #16
 8014504:	d105      	bne.n	8014512 <_scanf_chars+0xa2>
 8014506:	68e2      	ldr	r2, [r4, #12]
 8014508:	3201      	adds	r2, #1
 801450a:	60e2      	str	r2, [r4, #12]
 801450c:	69a2      	ldr	r2, [r4, #24]
 801450e:	b102      	cbz	r2, 8014512 <_scanf_chars+0xa2>
 8014510:	7033      	strb	r3, [r6, #0]
 8014512:	6923      	ldr	r3, [r4, #16]
 8014514:	443b      	add	r3, r7
 8014516:	6123      	str	r3, [r4, #16]
 8014518:	2000      	movs	r0, #0
 801451a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801451e:	bf00      	nop
 8014520:	08015991 	.word	0x08015991

08014524 <_scanf_i>:
 8014524:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014528:	4698      	mov	r8, r3
 801452a:	4b76      	ldr	r3, [pc, #472]	; (8014704 <_scanf_i+0x1e0>)
 801452c:	460c      	mov	r4, r1
 801452e:	4682      	mov	sl, r0
 8014530:	4616      	mov	r6, r2
 8014532:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8014536:	b087      	sub	sp, #28
 8014538:	ab03      	add	r3, sp, #12
 801453a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 801453e:	4b72      	ldr	r3, [pc, #456]	; (8014708 <_scanf_i+0x1e4>)
 8014540:	69a1      	ldr	r1, [r4, #24]
 8014542:	4a72      	ldr	r2, [pc, #456]	; (801470c <_scanf_i+0x1e8>)
 8014544:	2903      	cmp	r1, #3
 8014546:	bf18      	it	ne
 8014548:	461a      	movne	r2, r3
 801454a:	68a3      	ldr	r3, [r4, #8]
 801454c:	9201      	str	r2, [sp, #4]
 801454e:	1e5a      	subs	r2, r3, #1
 8014550:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8014554:	bf88      	it	hi
 8014556:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 801455a:	4627      	mov	r7, r4
 801455c:	bf82      	ittt	hi
 801455e:	eb03 0905 	addhi.w	r9, r3, r5
 8014562:	f240 135d 	movwhi	r3, #349	; 0x15d
 8014566:	60a3      	strhi	r3, [r4, #8]
 8014568:	f857 3b1c 	ldr.w	r3, [r7], #28
 801456c:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8014570:	bf98      	it	ls
 8014572:	f04f 0900 	movls.w	r9, #0
 8014576:	6023      	str	r3, [r4, #0]
 8014578:	463d      	mov	r5, r7
 801457a:	f04f 0b00 	mov.w	fp, #0
 801457e:	6831      	ldr	r1, [r6, #0]
 8014580:	ab03      	add	r3, sp, #12
 8014582:	7809      	ldrb	r1, [r1, #0]
 8014584:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8014588:	2202      	movs	r2, #2
 801458a:	f7eb fe49 	bl	8000220 <memchr>
 801458e:	b328      	cbz	r0, 80145dc <_scanf_i+0xb8>
 8014590:	f1bb 0f01 	cmp.w	fp, #1
 8014594:	d159      	bne.n	801464a <_scanf_i+0x126>
 8014596:	6862      	ldr	r2, [r4, #4]
 8014598:	b92a      	cbnz	r2, 80145a6 <_scanf_i+0x82>
 801459a:	6822      	ldr	r2, [r4, #0]
 801459c:	2308      	movs	r3, #8
 801459e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80145a2:	6063      	str	r3, [r4, #4]
 80145a4:	6022      	str	r2, [r4, #0]
 80145a6:	6822      	ldr	r2, [r4, #0]
 80145a8:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 80145ac:	6022      	str	r2, [r4, #0]
 80145ae:	68a2      	ldr	r2, [r4, #8]
 80145b0:	1e51      	subs	r1, r2, #1
 80145b2:	60a1      	str	r1, [r4, #8]
 80145b4:	b192      	cbz	r2, 80145dc <_scanf_i+0xb8>
 80145b6:	6832      	ldr	r2, [r6, #0]
 80145b8:	1c51      	adds	r1, r2, #1
 80145ba:	6031      	str	r1, [r6, #0]
 80145bc:	7812      	ldrb	r2, [r2, #0]
 80145be:	f805 2b01 	strb.w	r2, [r5], #1
 80145c2:	6872      	ldr	r2, [r6, #4]
 80145c4:	3a01      	subs	r2, #1
 80145c6:	2a00      	cmp	r2, #0
 80145c8:	6072      	str	r2, [r6, #4]
 80145ca:	dc07      	bgt.n	80145dc <_scanf_i+0xb8>
 80145cc:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 80145d0:	4631      	mov	r1, r6
 80145d2:	4650      	mov	r0, sl
 80145d4:	4790      	blx	r2
 80145d6:	2800      	cmp	r0, #0
 80145d8:	f040 8085 	bne.w	80146e6 <_scanf_i+0x1c2>
 80145dc:	f10b 0b01 	add.w	fp, fp, #1
 80145e0:	f1bb 0f03 	cmp.w	fp, #3
 80145e4:	d1cb      	bne.n	801457e <_scanf_i+0x5a>
 80145e6:	6863      	ldr	r3, [r4, #4]
 80145e8:	b90b      	cbnz	r3, 80145ee <_scanf_i+0xca>
 80145ea:	230a      	movs	r3, #10
 80145ec:	6063      	str	r3, [r4, #4]
 80145ee:	6863      	ldr	r3, [r4, #4]
 80145f0:	4947      	ldr	r1, [pc, #284]	; (8014710 <_scanf_i+0x1ec>)
 80145f2:	6960      	ldr	r0, [r4, #20]
 80145f4:	1ac9      	subs	r1, r1, r3
 80145f6:	f000 f8b7 	bl	8014768 <__sccl>
 80145fa:	f04f 0b00 	mov.w	fp, #0
 80145fe:	68a3      	ldr	r3, [r4, #8]
 8014600:	6822      	ldr	r2, [r4, #0]
 8014602:	2b00      	cmp	r3, #0
 8014604:	d03d      	beq.n	8014682 <_scanf_i+0x15e>
 8014606:	6831      	ldr	r1, [r6, #0]
 8014608:	6960      	ldr	r0, [r4, #20]
 801460a:	f891 c000 	ldrb.w	ip, [r1]
 801460e:	f810 000c 	ldrb.w	r0, [r0, ip]
 8014612:	2800      	cmp	r0, #0
 8014614:	d035      	beq.n	8014682 <_scanf_i+0x15e>
 8014616:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 801461a:	d124      	bne.n	8014666 <_scanf_i+0x142>
 801461c:	0510      	lsls	r0, r2, #20
 801461e:	d522      	bpl.n	8014666 <_scanf_i+0x142>
 8014620:	f10b 0b01 	add.w	fp, fp, #1
 8014624:	f1b9 0f00 	cmp.w	r9, #0
 8014628:	d003      	beq.n	8014632 <_scanf_i+0x10e>
 801462a:	3301      	adds	r3, #1
 801462c:	f109 39ff 	add.w	r9, r9, #4294967295
 8014630:	60a3      	str	r3, [r4, #8]
 8014632:	6873      	ldr	r3, [r6, #4]
 8014634:	3b01      	subs	r3, #1
 8014636:	2b00      	cmp	r3, #0
 8014638:	6073      	str	r3, [r6, #4]
 801463a:	dd1b      	ble.n	8014674 <_scanf_i+0x150>
 801463c:	6833      	ldr	r3, [r6, #0]
 801463e:	3301      	adds	r3, #1
 8014640:	6033      	str	r3, [r6, #0]
 8014642:	68a3      	ldr	r3, [r4, #8]
 8014644:	3b01      	subs	r3, #1
 8014646:	60a3      	str	r3, [r4, #8]
 8014648:	e7d9      	b.n	80145fe <_scanf_i+0xda>
 801464a:	f1bb 0f02 	cmp.w	fp, #2
 801464e:	d1ae      	bne.n	80145ae <_scanf_i+0x8a>
 8014650:	6822      	ldr	r2, [r4, #0]
 8014652:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8014656:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 801465a:	d1bf      	bne.n	80145dc <_scanf_i+0xb8>
 801465c:	2310      	movs	r3, #16
 801465e:	6063      	str	r3, [r4, #4]
 8014660:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8014664:	e7a2      	b.n	80145ac <_scanf_i+0x88>
 8014666:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 801466a:	6022      	str	r2, [r4, #0]
 801466c:	780b      	ldrb	r3, [r1, #0]
 801466e:	f805 3b01 	strb.w	r3, [r5], #1
 8014672:	e7de      	b.n	8014632 <_scanf_i+0x10e>
 8014674:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8014678:	4631      	mov	r1, r6
 801467a:	4650      	mov	r0, sl
 801467c:	4798      	blx	r3
 801467e:	2800      	cmp	r0, #0
 8014680:	d0df      	beq.n	8014642 <_scanf_i+0x11e>
 8014682:	6823      	ldr	r3, [r4, #0]
 8014684:	05db      	lsls	r3, r3, #23
 8014686:	d50d      	bpl.n	80146a4 <_scanf_i+0x180>
 8014688:	42bd      	cmp	r5, r7
 801468a:	d909      	bls.n	80146a0 <_scanf_i+0x17c>
 801468c:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8014690:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8014694:	4632      	mov	r2, r6
 8014696:	4650      	mov	r0, sl
 8014698:	4798      	blx	r3
 801469a:	f105 39ff 	add.w	r9, r5, #4294967295
 801469e:	464d      	mov	r5, r9
 80146a0:	42bd      	cmp	r5, r7
 80146a2:	d02d      	beq.n	8014700 <_scanf_i+0x1dc>
 80146a4:	6822      	ldr	r2, [r4, #0]
 80146a6:	f012 0210 	ands.w	r2, r2, #16
 80146aa:	d113      	bne.n	80146d4 <_scanf_i+0x1b0>
 80146ac:	702a      	strb	r2, [r5, #0]
 80146ae:	6863      	ldr	r3, [r4, #4]
 80146b0:	9e01      	ldr	r6, [sp, #4]
 80146b2:	4639      	mov	r1, r7
 80146b4:	4650      	mov	r0, sl
 80146b6:	47b0      	blx	r6
 80146b8:	6821      	ldr	r1, [r4, #0]
 80146ba:	f8d8 3000 	ldr.w	r3, [r8]
 80146be:	f011 0f20 	tst.w	r1, #32
 80146c2:	d013      	beq.n	80146ec <_scanf_i+0x1c8>
 80146c4:	1d1a      	adds	r2, r3, #4
 80146c6:	f8c8 2000 	str.w	r2, [r8]
 80146ca:	681b      	ldr	r3, [r3, #0]
 80146cc:	6018      	str	r0, [r3, #0]
 80146ce:	68e3      	ldr	r3, [r4, #12]
 80146d0:	3301      	adds	r3, #1
 80146d2:	60e3      	str	r3, [r4, #12]
 80146d4:	1bed      	subs	r5, r5, r7
 80146d6:	44ab      	add	fp, r5
 80146d8:	6925      	ldr	r5, [r4, #16]
 80146da:	445d      	add	r5, fp
 80146dc:	6125      	str	r5, [r4, #16]
 80146de:	2000      	movs	r0, #0
 80146e0:	b007      	add	sp, #28
 80146e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80146e6:	f04f 0b00 	mov.w	fp, #0
 80146ea:	e7ca      	b.n	8014682 <_scanf_i+0x15e>
 80146ec:	1d1a      	adds	r2, r3, #4
 80146ee:	f8c8 2000 	str.w	r2, [r8]
 80146f2:	681b      	ldr	r3, [r3, #0]
 80146f4:	f011 0f01 	tst.w	r1, #1
 80146f8:	bf14      	ite	ne
 80146fa:	8018      	strhne	r0, [r3, #0]
 80146fc:	6018      	streq	r0, [r3, #0]
 80146fe:	e7e6      	b.n	80146ce <_scanf_i+0x1aa>
 8014700:	2001      	movs	r0, #1
 8014702:	e7ed      	b.n	80146e0 <_scanf_i+0x1bc>
 8014704:	080158dc 	.word	0x080158dc
 8014708:	080148bd 	.word	0x080148bd
 801470c:	08011e25 	.word	0x08011e25
 8014710:	08015d1e 	.word	0x08015d1e

08014714 <_read_r>:
 8014714:	b538      	push	{r3, r4, r5, lr}
 8014716:	4d07      	ldr	r5, [pc, #28]	; (8014734 <_read_r+0x20>)
 8014718:	4604      	mov	r4, r0
 801471a:	4608      	mov	r0, r1
 801471c:	4611      	mov	r1, r2
 801471e:	2200      	movs	r2, #0
 8014720:	602a      	str	r2, [r5, #0]
 8014722:	461a      	mov	r2, r3
 8014724:	f7ee fc34 	bl	8002f90 <_read>
 8014728:	1c43      	adds	r3, r0, #1
 801472a:	d102      	bne.n	8014732 <_read_r+0x1e>
 801472c:	682b      	ldr	r3, [r5, #0]
 801472e:	b103      	cbz	r3, 8014732 <_read_r+0x1e>
 8014730:	6023      	str	r3, [r4, #0]
 8014732:	bd38      	pop	{r3, r4, r5, pc}
 8014734:	20000770 	.word	0x20000770

08014738 <nan>:
 8014738:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8014740 <nan+0x8>
 801473c:	4770      	bx	lr
 801473e:	bf00      	nop
 8014740:	00000000 	.word	0x00000000
 8014744:	7ff80000 	.word	0x7ff80000

08014748 <_sbrk_r>:
 8014748:	b538      	push	{r3, r4, r5, lr}
 801474a:	4d06      	ldr	r5, [pc, #24]	; (8014764 <_sbrk_r+0x1c>)
 801474c:	2300      	movs	r3, #0
 801474e:	4604      	mov	r4, r0
 8014750:	4608      	mov	r0, r1
 8014752:	602b      	str	r3, [r5, #0]
 8014754:	f7ee fc8a 	bl	800306c <_sbrk>
 8014758:	1c43      	adds	r3, r0, #1
 801475a:	d102      	bne.n	8014762 <_sbrk_r+0x1a>
 801475c:	682b      	ldr	r3, [r5, #0]
 801475e:	b103      	cbz	r3, 8014762 <_sbrk_r+0x1a>
 8014760:	6023      	str	r3, [r4, #0]
 8014762:	bd38      	pop	{r3, r4, r5, pc}
 8014764:	20000770 	.word	0x20000770

08014768 <__sccl>:
 8014768:	b570      	push	{r4, r5, r6, lr}
 801476a:	780b      	ldrb	r3, [r1, #0]
 801476c:	4604      	mov	r4, r0
 801476e:	2b5e      	cmp	r3, #94	; 0x5e
 8014770:	bf0b      	itete	eq
 8014772:	784b      	ldrbeq	r3, [r1, #1]
 8014774:	1c48      	addne	r0, r1, #1
 8014776:	1c88      	addeq	r0, r1, #2
 8014778:	2200      	movne	r2, #0
 801477a:	bf08      	it	eq
 801477c:	2201      	moveq	r2, #1
 801477e:	1e61      	subs	r1, r4, #1
 8014780:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 8014784:	f801 2f01 	strb.w	r2, [r1, #1]!
 8014788:	42a9      	cmp	r1, r5
 801478a:	d1fb      	bne.n	8014784 <__sccl+0x1c>
 801478c:	b90b      	cbnz	r3, 8014792 <__sccl+0x2a>
 801478e:	3801      	subs	r0, #1
 8014790:	bd70      	pop	{r4, r5, r6, pc}
 8014792:	f082 0201 	eor.w	r2, r2, #1
 8014796:	54e2      	strb	r2, [r4, r3]
 8014798:	4605      	mov	r5, r0
 801479a:	4628      	mov	r0, r5
 801479c:	f810 1b01 	ldrb.w	r1, [r0], #1
 80147a0:	292d      	cmp	r1, #45	; 0x2d
 80147a2:	d006      	beq.n	80147b2 <__sccl+0x4a>
 80147a4:	295d      	cmp	r1, #93	; 0x5d
 80147a6:	d0f3      	beq.n	8014790 <__sccl+0x28>
 80147a8:	b909      	cbnz	r1, 80147ae <__sccl+0x46>
 80147aa:	4628      	mov	r0, r5
 80147ac:	e7f0      	b.n	8014790 <__sccl+0x28>
 80147ae:	460b      	mov	r3, r1
 80147b0:	e7f1      	b.n	8014796 <__sccl+0x2e>
 80147b2:	786e      	ldrb	r6, [r5, #1]
 80147b4:	2e5d      	cmp	r6, #93	; 0x5d
 80147b6:	d0fa      	beq.n	80147ae <__sccl+0x46>
 80147b8:	42b3      	cmp	r3, r6
 80147ba:	dcf8      	bgt.n	80147ae <__sccl+0x46>
 80147bc:	3502      	adds	r5, #2
 80147be:	4619      	mov	r1, r3
 80147c0:	3101      	adds	r1, #1
 80147c2:	428e      	cmp	r6, r1
 80147c4:	5462      	strb	r2, [r4, r1]
 80147c6:	dcfb      	bgt.n	80147c0 <__sccl+0x58>
 80147c8:	1af1      	subs	r1, r6, r3
 80147ca:	3901      	subs	r1, #1
 80147cc:	1c58      	adds	r0, r3, #1
 80147ce:	42b3      	cmp	r3, r6
 80147d0:	bfa8      	it	ge
 80147d2:	2100      	movge	r1, #0
 80147d4:	1843      	adds	r3, r0, r1
 80147d6:	e7e0      	b.n	801479a <__sccl+0x32>

080147d8 <_strtoul_l.constprop.0>:
 80147d8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80147dc:	4f36      	ldr	r7, [pc, #216]	; (80148b8 <_strtoul_l.constprop.0+0xe0>)
 80147de:	4686      	mov	lr, r0
 80147e0:	460d      	mov	r5, r1
 80147e2:	4628      	mov	r0, r5
 80147e4:	f815 4b01 	ldrb.w	r4, [r5], #1
 80147e8:	5de6      	ldrb	r6, [r4, r7]
 80147ea:	f016 0608 	ands.w	r6, r6, #8
 80147ee:	d1f8      	bne.n	80147e2 <_strtoul_l.constprop.0+0xa>
 80147f0:	2c2d      	cmp	r4, #45	; 0x2d
 80147f2:	d12f      	bne.n	8014854 <_strtoul_l.constprop.0+0x7c>
 80147f4:	782c      	ldrb	r4, [r5, #0]
 80147f6:	2601      	movs	r6, #1
 80147f8:	1c85      	adds	r5, r0, #2
 80147fa:	2b00      	cmp	r3, #0
 80147fc:	d057      	beq.n	80148ae <_strtoul_l.constprop.0+0xd6>
 80147fe:	2b10      	cmp	r3, #16
 8014800:	d109      	bne.n	8014816 <_strtoul_l.constprop.0+0x3e>
 8014802:	2c30      	cmp	r4, #48	; 0x30
 8014804:	d107      	bne.n	8014816 <_strtoul_l.constprop.0+0x3e>
 8014806:	7828      	ldrb	r0, [r5, #0]
 8014808:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 801480c:	2858      	cmp	r0, #88	; 0x58
 801480e:	d149      	bne.n	80148a4 <_strtoul_l.constprop.0+0xcc>
 8014810:	786c      	ldrb	r4, [r5, #1]
 8014812:	2310      	movs	r3, #16
 8014814:	3502      	adds	r5, #2
 8014816:	f04f 38ff 	mov.w	r8, #4294967295
 801481a:	2700      	movs	r7, #0
 801481c:	fbb8 f8f3 	udiv	r8, r8, r3
 8014820:	fb03 f908 	mul.w	r9, r3, r8
 8014824:	ea6f 0909 	mvn.w	r9, r9
 8014828:	4638      	mov	r0, r7
 801482a:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 801482e:	f1bc 0f09 	cmp.w	ip, #9
 8014832:	d814      	bhi.n	801485e <_strtoul_l.constprop.0+0x86>
 8014834:	4664      	mov	r4, ip
 8014836:	42a3      	cmp	r3, r4
 8014838:	dd22      	ble.n	8014880 <_strtoul_l.constprop.0+0xa8>
 801483a:	2f00      	cmp	r7, #0
 801483c:	db1d      	blt.n	801487a <_strtoul_l.constprop.0+0xa2>
 801483e:	4580      	cmp	r8, r0
 8014840:	d31b      	bcc.n	801487a <_strtoul_l.constprop.0+0xa2>
 8014842:	d101      	bne.n	8014848 <_strtoul_l.constprop.0+0x70>
 8014844:	45a1      	cmp	r9, r4
 8014846:	db18      	blt.n	801487a <_strtoul_l.constprop.0+0xa2>
 8014848:	fb00 4003 	mla	r0, r0, r3, r4
 801484c:	2701      	movs	r7, #1
 801484e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8014852:	e7ea      	b.n	801482a <_strtoul_l.constprop.0+0x52>
 8014854:	2c2b      	cmp	r4, #43	; 0x2b
 8014856:	bf04      	itt	eq
 8014858:	782c      	ldrbeq	r4, [r5, #0]
 801485a:	1c85      	addeq	r5, r0, #2
 801485c:	e7cd      	b.n	80147fa <_strtoul_l.constprop.0+0x22>
 801485e:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8014862:	f1bc 0f19 	cmp.w	ip, #25
 8014866:	d801      	bhi.n	801486c <_strtoul_l.constprop.0+0x94>
 8014868:	3c37      	subs	r4, #55	; 0x37
 801486a:	e7e4      	b.n	8014836 <_strtoul_l.constprop.0+0x5e>
 801486c:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8014870:	f1bc 0f19 	cmp.w	ip, #25
 8014874:	d804      	bhi.n	8014880 <_strtoul_l.constprop.0+0xa8>
 8014876:	3c57      	subs	r4, #87	; 0x57
 8014878:	e7dd      	b.n	8014836 <_strtoul_l.constprop.0+0x5e>
 801487a:	f04f 37ff 	mov.w	r7, #4294967295
 801487e:	e7e6      	b.n	801484e <_strtoul_l.constprop.0+0x76>
 8014880:	2f00      	cmp	r7, #0
 8014882:	da07      	bge.n	8014894 <_strtoul_l.constprop.0+0xbc>
 8014884:	2322      	movs	r3, #34	; 0x22
 8014886:	f8ce 3000 	str.w	r3, [lr]
 801488a:	f04f 30ff 	mov.w	r0, #4294967295
 801488e:	b932      	cbnz	r2, 801489e <_strtoul_l.constprop.0+0xc6>
 8014890:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014894:	b106      	cbz	r6, 8014898 <_strtoul_l.constprop.0+0xc0>
 8014896:	4240      	negs	r0, r0
 8014898:	2a00      	cmp	r2, #0
 801489a:	d0f9      	beq.n	8014890 <_strtoul_l.constprop.0+0xb8>
 801489c:	b107      	cbz	r7, 80148a0 <_strtoul_l.constprop.0+0xc8>
 801489e:	1e69      	subs	r1, r5, #1
 80148a0:	6011      	str	r1, [r2, #0]
 80148a2:	e7f5      	b.n	8014890 <_strtoul_l.constprop.0+0xb8>
 80148a4:	2430      	movs	r4, #48	; 0x30
 80148a6:	2b00      	cmp	r3, #0
 80148a8:	d1b5      	bne.n	8014816 <_strtoul_l.constprop.0+0x3e>
 80148aa:	2308      	movs	r3, #8
 80148ac:	e7b3      	b.n	8014816 <_strtoul_l.constprop.0+0x3e>
 80148ae:	2c30      	cmp	r4, #48	; 0x30
 80148b0:	d0a9      	beq.n	8014806 <_strtoul_l.constprop.0+0x2e>
 80148b2:	230a      	movs	r3, #10
 80148b4:	e7af      	b.n	8014816 <_strtoul_l.constprop.0+0x3e>
 80148b6:	bf00      	nop
 80148b8:	08015991 	.word	0x08015991

080148bc <_strtoul_r>:
 80148bc:	f7ff bf8c 	b.w	80147d8 <_strtoul_l.constprop.0>

080148c0 <__submore>:
 80148c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80148c4:	460c      	mov	r4, r1
 80148c6:	6b49      	ldr	r1, [r1, #52]	; 0x34
 80148c8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80148cc:	4299      	cmp	r1, r3
 80148ce:	d11d      	bne.n	801490c <__submore+0x4c>
 80148d0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80148d4:	f7ff fa2a 	bl	8013d2c <_malloc_r>
 80148d8:	b918      	cbnz	r0, 80148e2 <__submore+0x22>
 80148da:	f04f 30ff 	mov.w	r0, #4294967295
 80148de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80148e2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80148e6:	63a3      	str	r3, [r4, #56]	; 0x38
 80148e8:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 80148ec:	6360      	str	r0, [r4, #52]	; 0x34
 80148ee:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 80148f2:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 80148f6:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 80148fa:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80148fe:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 8014902:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8014906:	6020      	str	r0, [r4, #0]
 8014908:	2000      	movs	r0, #0
 801490a:	e7e8      	b.n	80148de <__submore+0x1e>
 801490c:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 801490e:	0077      	lsls	r7, r6, #1
 8014910:	463a      	mov	r2, r7
 8014912:	f000 fa2d 	bl	8014d70 <_realloc_r>
 8014916:	4605      	mov	r5, r0
 8014918:	2800      	cmp	r0, #0
 801491a:	d0de      	beq.n	80148da <__submore+0x1a>
 801491c:	eb00 0806 	add.w	r8, r0, r6
 8014920:	4601      	mov	r1, r0
 8014922:	4632      	mov	r2, r6
 8014924:	4640      	mov	r0, r8
 8014926:	f7fb fc8d 	bl	8010244 <memcpy>
 801492a:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 801492e:	f8c4 8000 	str.w	r8, [r4]
 8014932:	e7e9      	b.n	8014908 <__submore+0x48>

08014934 <__ascii_wctomb>:
 8014934:	b149      	cbz	r1, 801494a <__ascii_wctomb+0x16>
 8014936:	2aff      	cmp	r2, #255	; 0xff
 8014938:	bf85      	ittet	hi
 801493a:	238a      	movhi	r3, #138	; 0x8a
 801493c:	6003      	strhi	r3, [r0, #0]
 801493e:	700a      	strbls	r2, [r1, #0]
 8014940:	f04f 30ff 	movhi.w	r0, #4294967295
 8014944:	bf98      	it	ls
 8014946:	2001      	movls	r0, #1
 8014948:	4770      	bx	lr
 801494a:	4608      	mov	r0, r1
 801494c:	4770      	bx	lr
	...

08014950 <__assert_func>:
 8014950:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8014952:	4614      	mov	r4, r2
 8014954:	461a      	mov	r2, r3
 8014956:	4b09      	ldr	r3, [pc, #36]	; (801497c <__assert_func+0x2c>)
 8014958:	681b      	ldr	r3, [r3, #0]
 801495a:	4605      	mov	r5, r0
 801495c:	68d8      	ldr	r0, [r3, #12]
 801495e:	b14c      	cbz	r4, 8014974 <__assert_func+0x24>
 8014960:	4b07      	ldr	r3, [pc, #28]	; (8014980 <__assert_func+0x30>)
 8014962:	9100      	str	r1, [sp, #0]
 8014964:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8014968:	4906      	ldr	r1, [pc, #24]	; (8014984 <__assert_func+0x34>)
 801496a:	462b      	mov	r3, r5
 801496c:	f000 f9a6 	bl	8014cbc <fiprintf>
 8014970:	f000 fc46 	bl	8015200 <abort>
 8014974:	4b04      	ldr	r3, [pc, #16]	; (8014988 <__assert_func+0x38>)
 8014976:	461c      	mov	r4, r3
 8014978:	e7f3      	b.n	8014962 <__assert_func+0x12>
 801497a:	bf00      	nop
 801497c:	200002c8 	.word	0x200002c8
 8014980:	08015d20 	.word	0x08015d20
 8014984:	08015d2d 	.word	0x08015d2d
 8014988:	08015d5b 	.word	0x08015d5b

0801498c <__sflush_r>:
 801498c:	898a      	ldrh	r2, [r1, #12]
 801498e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014992:	4605      	mov	r5, r0
 8014994:	0710      	lsls	r0, r2, #28
 8014996:	460c      	mov	r4, r1
 8014998:	d458      	bmi.n	8014a4c <__sflush_r+0xc0>
 801499a:	684b      	ldr	r3, [r1, #4]
 801499c:	2b00      	cmp	r3, #0
 801499e:	dc05      	bgt.n	80149ac <__sflush_r+0x20>
 80149a0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80149a2:	2b00      	cmp	r3, #0
 80149a4:	dc02      	bgt.n	80149ac <__sflush_r+0x20>
 80149a6:	2000      	movs	r0, #0
 80149a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80149ac:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80149ae:	2e00      	cmp	r6, #0
 80149b0:	d0f9      	beq.n	80149a6 <__sflush_r+0x1a>
 80149b2:	2300      	movs	r3, #0
 80149b4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80149b8:	682f      	ldr	r7, [r5, #0]
 80149ba:	602b      	str	r3, [r5, #0]
 80149bc:	d032      	beq.n	8014a24 <__sflush_r+0x98>
 80149be:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80149c0:	89a3      	ldrh	r3, [r4, #12]
 80149c2:	075a      	lsls	r2, r3, #29
 80149c4:	d505      	bpl.n	80149d2 <__sflush_r+0x46>
 80149c6:	6863      	ldr	r3, [r4, #4]
 80149c8:	1ac0      	subs	r0, r0, r3
 80149ca:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80149cc:	b10b      	cbz	r3, 80149d2 <__sflush_r+0x46>
 80149ce:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80149d0:	1ac0      	subs	r0, r0, r3
 80149d2:	2300      	movs	r3, #0
 80149d4:	4602      	mov	r2, r0
 80149d6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80149d8:	6a21      	ldr	r1, [r4, #32]
 80149da:	4628      	mov	r0, r5
 80149dc:	47b0      	blx	r6
 80149de:	1c43      	adds	r3, r0, #1
 80149e0:	89a3      	ldrh	r3, [r4, #12]
 80149e2:	d106      	bne.n	80149f2 <__sflush_r+0x66>
 80149e4:	6829      	ldr	r1, [r5, #0]
 80149e6:	291d      	cmp	r1, #29
 80149e8:	d82c      	bhi.n	8014a44 <__sflush_r+0xb8>
 80149ea:	4a2a      	ldr	r2, [pc, #168]	; (8014a94 <__sflush_r+0x108>)
 80149ec:	40ca      	lsrs	r2, r1
 80149ee:	07d6      	lsls	r6, r2, #31
 80149f0:	d528      	bpl.n	8014a44 <__sflush_r+0xb8>
 80149f2:	2200      	movs	r2, #0
 80149f4:	6062      	str	r2, [r4, #4]
 80149f6:	04d9      	lsls	r1, r3, #19
 80149f8:	6922      	ldr	r2, [r4, #16]
 80149fa:	6022      	str	r2, [r4, #0]
 80149fc:	d504      	bpl.n	8014a08 <__sflush_r+0x7c>
 80149fe:	1c42      	adds	r2, r0, #1
 8014a00:	d101      	bne.n	8014a06 <__sflush_r+0x7a>
 8014a02:	682b      	ldr	r3, [r5, #0]
 8014a04:	b903      	cbnz	r3, 8014a08 <__sflush_r+0x7c>
 8014a06:	6560      	str	r0, [r4, #84]	; 0x54
 8014a08:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8014a0a:	602f      	str	r7, [r5, #0]
 8014a0c:	2900      	cmp	r1, #0
 8014a0e:	d0ca      	beq.n	80149a6 <__sflush_r+0x1a>
 8014a10:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8014a14:	4299      	cmp	r1, r3
 8014a16:	d002      	beq.n	8014a1e <__sflush_r+0x92>
 8014a18:	4628      	mov	r0, r5
 8014a1a:	f7ff f91b 	bl	8013c54 <_free_r>
 8014a1e:	2000      	movs	r0, #0
 8014a20:	6360      	str	r0, [r4, #52]	; 0x34
 8014a22:	e7c1      	b.n	80149a8 <__sflush_r+0x1c>
 8014a24:	6a21      	ldr	r1, [r4, #32]
 8014a26:	2301      	movs	r3, #1
 8014a28:	4628      	mov	r0, r5
 8014a2a:	47b0      	blx	r6
 8014a2c:	1c41      	adds	r1, r0, #1
 8014a2e:	d1c7      	bne.n	80149c0 <__sflush_r+0x34>
 8014a30:	682b      	ldr	r3, [r5, #0]
 8014a32:	2b00      	cmp	r3, #0
 8014a34:	d0c4      	beq.n	80149c0 <__sflush_r+0x34>
 8014a36:	2b1d      	cmp	r3, #29
 8014a38:	d001      	beq.n	8014a3e <__sflush_r+0xb2>
 8014a3a:	2b16      	cmp	r3, #22
 8014a3c:	d101      	bne.n	8014a42 <__sflush_r+0xb6>
 8014a3e:	602f      	str	r7, [r5, #0]
 8014a40:	e7b1      	b.n	80149a6 <__sflush_r+0x1a>
 8014a42:	89a3      	ldrh	r3, [r4, #12]
 8014a44:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014a48:	81a3      	strh	r3, [r4, #12]
 8014a4a:	e7ad      	b.n	80149a8 <__sflush_r+0x1c>
 8014a4c:	690f      	ldr	r7, [r1, #16]
 8014a4e:	2f00      	cmp	r7, #0
 8014a50:	d0a9      	beq.n	80149a6 <__sflush_r+0x1a>
 8014a52:	0793      	lsls	r3, r2, #30
 8014a54:	680e      	ldr	r6, [r1, #0]
 8014a56:	bf08      	it	eq
 8014a58:	694b      	ldreq	r3, [r1, #20]
 8014a5a:	600f      	str	r7, [r1, #0]
 8014a5c:	bf18      	it	ne
 8014a5e:	2300      	movne	r3, #0
 8014a60:	eba6 0807 	sub.w	r8, r6, r7
 8014a64:	608b      	str	r3, [r1, #8]
 8014a66:	f1b8 0f00 	cmp.w	r8, #0
 8014a6a:	dd9c      	ble.n	80149a6 <__sflush_r+0x1a>
 8014a6c:	6a21      	ldr	r1, [r4, #32]
 8014a6e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8014a70:	4643      	mov	r3, r8
 8014a72:	463a      	mov	r2, r7
 8014a74:	4628      	mov	r0, r5
 8014a76:	47b0      	blx	r6
 8014a78:	2800      	cmp	r0, #0
 8014a7a:	dc06      	bgt.n	8014a8a <__sflush_r+0xfe>
 8014a7c:	89a3      	ldrh	r3, [r4, #12]
 8014a7e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014a82:	81a3      	strh	r3, [r4, #12]
 8014a84:	f04f 30ff 	mov.w	r0, #4294967295
 8014a88:	e78e      	b.n	80149a8 <__sflush_r+0x1c>
 8014a8a:	4407      	add	r7, r0
 8014a8c:	eba8 0800 	sub.w	r8, r8, r0
 8014a90:	e7e9      	b.n	8014a66 <__sflush_r+0xda>
 8014a92:	bf00      	nop
 8014a94:	20400001 	.word	0x20400001

08014a98 <_fflush_r>:
 8014a98:	b538      	push	{r3, r4, r5, lr}
 8014a9a:	690b      	ldr	r3, [r1, #16]
 8014a9c:	4605      	mov	r5, r0
 8014a9e:	460c      	mov	r4, r1
 8014aa0:	b913      	cbnz	r3, 8014aa8 <_fflush_r+0x10>
 8014aa2:	2500      	movs	r5, #0
 8014aa4:	4628      	mov	r0, r5
 8014aa6:	bd38      	pop	{r3, r4, r5, pc}
 8014aa8:	b118      	cbz	r0, 8014ab2 <_fflush_r+0x1a>
 8014aaa:	6983      	ldr	r3, [r0, #24]
 8014aac:	b90b      	cbnz	r3, 8014ab2 <_fflush_r+0x1a>
 8014aae:	f000 f887 	bl	8014bc0 <__sinit>
 8014ab2:	4b14      	ldr	r3, [pc, #80]	; (8014b04 <_fflush_r+0x6c>)
 8014ab4:	429c      	cmp	r4, r3
 8014ab6:	d11b      	bne.n	8014af0 <_fflush_r+0x58>
 8014ab8:	686c      	ldr	r4, [r5, #4]
 8014aba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014abe:	2b00      	cmp	r3, #0
 8014ac0:	d0ef      	beq.n	8014aa2 <_fflush_r+0xa>
 8014ac2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8014ac4:	07d0      	lsls	r0, r2, #31
 8014ac6:	d404      	bmi.n	8014ad2 <_fflush_r+0x3a>
 8014ac8:	0599      	lsls	r1, r3, #22
 8014aca:	d402      	bmi.n	8014ad2 <_fflush_r+0x3a>
 8014acc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8014ace:	f000 f927 	bl	8014d20 <__retarget_lock_acquire_recursive>
 8014ad2:	4628      	mov	r0, r5
 8014ad4:	4621      	mov	r1, r4
 8014ad6:	f7ff ff59 	bl	801498c <__sflush_r>
 8014ada:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8014adc:	07da      	lsls	r2, r3, #31
 8014ade:	4605      	mov	r5, r0
 8014ae0:	d4e0      	bmi.n	8014aa4 <_fflush_r+0xc>
 8014ae2:	89a3      	ldrh	r3, [r4, #12]
 8014ae4:	059b      	lsls	r3, r3, #22
 8014ae6:	d4dd      	bmi.n	8014aa4 <_fflush_r+0xc>
 8014ae8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8014aea:	f000 f91a 	bl	8014d22 <__retarget_lock_release_recursive>
 8014aee:	e7d9      	b.n	8014aa4 <_fflush_r+0xc>
 8014af0:	4b05      	ldr	r3, [pc, #20]	; (8014b08 <_fflush_r+0x70>)
 8014af2:	429c      	cmp	r4, r3
 8014af4:	d101      	bne.n	8014afa <_fflush_r+0x62>
 8014af6:	68ac      	ldr	r4, [r5, #8]
 8014af8:	e7df      	b.n	8014aba <_fflush_r+0x22>
 8014afa:	4b04      	ldr	r3, [pc, #16]	; (8014b0c <_fflush_r+0x74>)
 8014afc:	429c      	cmp	r4, r3
 8014afe:	bf08      	it	eq
 8014b00:	68ec      	ldreq	r4, [r5, #12]
 8014b02:	e7da      	b.n	8014aba <_fflush_r+0x22>
 8014b04:	08015d7c 	.word	0x08015d7c
 8014b08:	08015d9c 	.word	0x08015d9c
 8014b0c:	08015d5c 	.word	0x08015d5c

08014b10 <std>:
 8014b10:	2300      	movs	r3, #0
 8014b12:	b510      	push	{r4, lr}
 8014b14:	4604      	mov	r4, r0
 8014b16:	e9c0 3300 	strd	r3, r3, [r0]
 8014b1a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8014b1e:	6083      	str	r3, [r0, #8]
 8014b20:	8181      	strh	r1, [r0, #12]
 8014b22:	6643      	str	r3, [r0, #100]	; 0x64
 8014b24:	81c2      	strh	r2, [r0, #14]
 8014b26:	6183      	str	r3, [r0, #24]
 8014b28:	4619      	mov	r1, r3
 8014b2a:	2208      	movs	r2, #8
 8014b2c:	305c      	adds	r0, #92	; 0x5c
 8014b2e:	f7fb fb97 	bl	8010260 <memset>
 8014b32:	4b05      	ldr	r3, [pc, #20]	; (8014b48 <std+0x38>)
 8014b34:	6263      	str	r3, [r4, #36]	; 0x24
 8014b36:	4b05      	ldr	r3, [pc, #20]	; (8014b4c <std+0x3c>)
 8014b38:	62a3      	str	r3, [r4, #40]	; 0x28
 8014b3a:	4b05      	ldr	r3, [pc, #20]	; (8014b50 <std+0x40>)
 8014b3c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8014b3e:	4b05      	ldr	r3, [pc, #20]	; (8014b54 <std+0x44>)
 8014b40:	6224      	str	r4, [r4, #32]
 8014b42:	6323      	str	r3, [r4, #48]	; 0x30
 8014b44:	bd10      	pop	{r4, pc}
 8014b46:	bf00      	nop
 8014b48:	08011009 	.word	0x08011009
 8014b4c:	0801102f 	.word	0x0801102f
 8014b50:	08011067 	.word	0x08011067
 8014b54:	0801108b 	.word	0x0801108b

08014b58 <_cleanup_r>:
 8014b58:	4901      	ldr	r1, [pc, #4]	; (8014b60 <_cleanup_r+0x8>)
 8014b5a:	f000 b8c1 	b.w	8014ce0 <_fwalk_reent>
 8014b5e:	bf00      	nop
 8014b60:	08014a99 	.word	0x08014a99

08014b64 <__sfmoreglue>:
 8014b64:	b570      	push	{r4, r5, r6, lr}
 8014b66:	2268      	movs	r2, #104	; 0x68
 8014b68:	1e4d      	subs	r5, r1, #1
 8014b6a:	4355      	muls	r5, r2
 8014b6c:	460e      	mov	r6, r1
 8014b6e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8014b72:	f7ff f8db 	bl	8013d2c <_malloc_r>
 8014b76:	4604      	mov	r4, r0
 8014b78:	b140      	cbz	r0, 8014b8c <__sfmoreglue+0x28>
 8014b7a:	2100      	movs	r1, #0
 8014b7c:	e9c0 1600 	strd	r1, r6, [r0]
 8014b80:	300c      	adds	r0, #12
 8014b82:	60a0      	str	r0, [r4, #8]
 8014b84:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8014b88:	f7fb fb6a 	bl	8010260 <memset>
 8014b8c:	4620      	mov	r0, r4
 8014b8e:	bd70      	pop	{r4, r5, r6, pc}

08014b90 <__sfp_lock_acquire>:
 8014b90:	4801      	ldr	r0, [pc, #4]	; (8014b98 <__sfp_lock_acquire+0x8>)
 8014b92:	f000 b8c5 	b.w	8014d20 <__retarget_lock_acquire_recursive>
 8014b96:	bf00      	nop
 8014b98:	20000775 	.word	0x20000775

08014b9c <__sfp_lock_release>:
 8014b9c:	4801      	ldr	r0, [pc, #4]	; (8014ba4 <__sfp_lock_release+0x8>)
 8014b9e:	f000 b8c0 	b.w	8014d22 <__retarget_lock_release_recursive>
 8014ba2:	bf00      	nop
 8014ba4:	20000775 	.word	0x20000775

08014ba8 <__sinit_lock_acquire>:
 8014ba8:	4801      	ldr	r0, [pc, #4]	; (8014bb0 <__sinit_lock_acquire+0x8>)
 8014baa:	f000 b8b9 	b.w	8014d20 <__retarget_lock_acquire_recursive>
 8014bae:	bf00      	nop
 8014bb0:	20000776 	.word	0x20000776

08014bb4 <__sinit_lock_release>:
 8014bb4:	4801      	ldr	r0, [pc, #4]	; (8014bbc <__sinit_lock_release+0x8>)
 8014bb6:	f000 b8b4 	b.w	8014d22 <__retarget_lock_release_recursive>
 8014bba:	bf00      	nop
 8014bbc:	20000776 	.word	0x20000776

08014bc0 <__sinit>:
 8014bc0:	b510      	push	{r4, lr}
 8014bc2:	4604      	mov	r4, r0
 8014bc4:	f7ff fff0 	bl	8014ba8 <__sinit_lock_acquire>
 8014bc8:	69a3      	ldr	r3, [r4, #24]
 8014bca:	b11b      	cbz	r3, 8014bd4 <__sinit+0x14>
 8014bcc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014bd0:	f7ff bff0 	b.w	8014bb4 <__sinit_lock_release>
 8014bd4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8014bd8:	6523      	str	r3, [r4, #80]	; 0x50
 8014bda:	4b13      	ldr	r3, [pc, #76]	; (8014c28 <__sinit+0x68>)
 8014bdc:	4a13      	ldr	r2, [pc, #76]	; (8014c2c <__sinit+0x6c>)
 8014bde:	681b      	ldr	r3, [r3, #0]
 8014be0:	62a2      	str	r2, [r4, #40]	; 0x28
 8014be2:	42a3      	cmp	r3, r4
 8014be4:	bf04      	itt	eq
 8014be6:	2301      	moveq	r3, #1
 8014be8:	61a3      	streq	r3, [r4, #24]
 8014bea:	4620      	mov	r0, r4
 8014bec:	f000 f820 	bl	8014c30 <__sfp>
 8014bf0:	6060      	str	r0, [r4, #4]
 8014bf2:	4620      	mov	r0, r4
 8014bf4:	f000 f81c 	bl	8014c30 <__sfp>
 8014bf8:	60a0      	str	r0, [r4, #8]
 8014bfa:	4620      	mov	r0, r4
 8014bfc:	f000 f818 	bl	8014c30 <__sfp>
 8014c00:	2200      	movs	r2, #0
 8014c02:	60e0      	str	r0, [r4, #12]
 8014c04:	2104      	movs	r1, #4
 8014c06:	6860      	ldr	r0, [r4, #4]
 8014c08:	f7ff ff82 	bl	8014b10 <std>
 8014c0c:	68a0      	ldr	r0, [r4, #8]
 8014c0e:	2201      	movs	r2, #1
 8014c10:	2109      	movs	r1, #9
 8014c12:	f7ff ff7d 	bl	8014b10 <std>
 8014c16:	68e0      	ldr	r0, [r4, #12]
 8014c18:	2202      	movs	r2, #2
 8014c1a:	2112      	movs	r1, #18
 8014c1c:	f7ff ff78 	bl	8014b10 <std>
 8014c20:	2301      	movs	r3, #1
 8014c22:	61a3      	str	r3, [r4, #24]
 8014c24:	e7d2      	b.n	8014bcc <__sinit+0xc>
 8014c26:	bf00      	nop
 8014c28:	08015900 	.word	0x08015900
 8014c2c:	08014b59 	.word	0x08014b59

08014c30 <__sfp>:
 8014c30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014c32:	4607      	mov	r7, r0
 8014c34:	f7ff ffac 	bl	8014b90 <__sfp_lock_acquire>
 8014c38:	4b1e      	ldr	r3, [pc, #120]	; (8014cb4 <__sfp+0x84>)
 8014c3a:	681e      	ldr	r6, [r3, #0]
 8014c3c:	69b3      	ldr	r3, [r6, #24]
 8014c3e:	b913      	cbnz	r3, 8014c46 <__sfp+0x16>
 8014c40:	4630      	mov	r0, r6
 8014c42:	f7ff ffbd 	bl	8014bc0 <__sinit>
 8014c46:	3648      	adds	r6, #72	; 0x48
 8014c48:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8014c4c:	3b01      	subs	r3, #1
 8014c4e:	d503      	bpl.n	8014c58 <__sfp+0x28>
 8014c50:	6833      	ldr	r3, [r6, #0]
 8014c52:	b30b      	cbz	r3, 8014c98 <__sfp+0x68>
 8014c54:	6836      	ldr	r6, [r6, #0]
 8014c56:	e7f7      	b.n	8014c48 <__sfp+0x18>
 8014c58:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8014c5c:	b9d5      	cbnz	r5, 8014c94 <__sfp+0x64>
 8014c5e:	4b16      	ldr	r3, [pc, #88]	; (8014cb8 <__sfp+0x88>)
 8014c60:	60e3      	str	r3, [r4, #12]
 8014c62:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8014c66:	6665      	str	r5, [r4, #100]	; 0x64
 8014c68:	f000 f859 	bl	8014d1e <__retarget_lock_init_recursive>
 8014c6c:	f7ff ff96 	bl	8014b9c <__sfp_lock_release>
 8014c70:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8014c74:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8014c78:	6025      	str	r5, [r4, #0]
 8014c7a:	61a5      	str	r5, [r4, #24]
 8014c7c:	2208      	movs	r2, #8
 8014c7e:	4629      	mov	r1, r5
 8014c80:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8014c84:	f7fb faec 	bl	8010260 <memset>
 8014c88:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8014c8c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8014c90:	4620      	mov	r0, r4
 8014c92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014c94:	3468      	adds	r4, #104	; 0x68
 8014c96:	e7d9      	b.n	8014c4c <__sfp+0x1c>
 8014c98:	2104      	movs	r1, #4
 8014c9a:	4638      	mov	r0, r7
 8014c9c:	f7ff ff62 	bl	8014b64 <__sfmoreglue>
 8014ca0:	4604      	mov	r4, r0
 8014ca2:	6030      	str	r0, [r6, #0]
 8014ca4:	2800      	cmp	r0, #0
 8014ca6:	d1d5      	bne.n	8014c54 <__sfp+0x24>
 8014ca8:	f7ff ff78 	bl	8014b9c <__sfp_lock_release>
 8014cac:	230c      	movs	r3, #12
 8014cae:	603b      	str	r3, [r7, #0]
 8014cb0:	e7ee      	b.n	8014c90 <__sfp+0x60>
 8014cb2:	bf00      	nop
 8014cb4:	08015900 	.word	0x08015900
 8014cb8:	ffff0001 	.word	0xffff0001

08014cbc <fiprintf>:
 8014cbc:	b40e      	push	{r1, r2, r3}
 8014cbe:	b503      	push	{r0, r1, lr}
 8014cc0:	4601      	mov	r1, r0
 8014cc2:	ab03      	add	r3, sp, #12
 8014cc4:	4805      	ldr	r0, [pc, #20]	; (8014cdc <fiprintf+0x20>)
 8014cc6:	f853 2b04 	ldr.w	r2, [r3], #4
 8014cca:	6800      	ldr	r0, [r0, #0]
 8014ccc:	9301      	str	r3, [sp, #4]
 8014cce:	f000 f8a7 	bl	8014e20 <_vfiprintf_r>
 8014cd2:	b002      	add	sp, #8
 8014cd4:	f85d eb04 	ldr.w	lr, [sp], #4
 8014cd8:	b003      	add	sp, #12
 8014cda:	4770      	bx	lr
 8014cdc:	200002c8 	.word	0x200002c8

08014ce0 <_fwalk_reent>:
 8014ce0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014ce4:	4606      	mov	r6, r0
 8014ce6:	4688      	mov	r8, r1
 8014ce8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8014cec:	2700      	movs	r7, #0
 8014cee:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8014cf2:	f1b9 0901 	subs.w	r9, r9, #1
 8014cf6:	d505      	bpl.n	8014d04 <_fwalk_reent+0x24>
 8014cf8:	6824      	ldr	r4, [r4, #0]
 8014cfa:	2c00      	cmp	r4, #0
 8014cfc:	d1f7      	bne.n	8014cee <_fwalk_reent+0xe>
 8014cfe:	4638      	mov	r0, r7
 8014d00:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014d04:	89ab      	ldrh	r3, [r5, #12]
 8014d06:	2b01      	cmp	r3, #1
 8014d08:	d907      	bls.n	8014d1a <_fwalk_reent+0x3a>
 8014d0a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8014d0e:	3301      	adds	r3, #1
 8014d10:	d003      	beq.n	8014d1a <_fwalk_reent+0x3a>
 8014d12:	4629      	mov	r1, r5
 8014d14:	4630      	mov	r0, r6
 8014d16:	47c0      	blx	r8
 8014d18:	4307      	orrs	r7, r0
 8014d1a:	3568      	adds	r5, #104	; 0x68
 8014d1c:	e7e9      	b.n	8014cf2 <_fwalk_reent+0x12>

08014d1e <__retarget_lock_init_recursive>:
 8014d1e:	4770      	bx	lr

08014d20 <__retarget_lock_acquire_recursive>:
 8014d20:	4770      	bx	lr

08014d22 <__retarget_lock_release_recursive>:
 8014d22:	4770      	bx	lr

08014d24 <memmove>:
 8014d24:	4288      	cmp	r0, r1
 8014d26:	b510      	push	{r4, lr}
 8014d28:	eb01 0402 	add.w	r4, r1, r2
 8014d2c:	d902      	bls.n	8014d34 <memmove+0x10>
 8014d2e:	4284      	cmp	r4, r0
 8014d30:	4623      	mov	r3, r4
 8014d32:	d807      	bhi.n	8014d44 <memmove+0x20>
 8014d34:	1e43      	subs	r3, r0, #1
 8014d36:	42a1      	cmp	r1, r4
 8014d38:	d008      	beq.n	8014d4c <memmove+0x28>
 8014d3a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8014d3e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8014d42:	e7f8      	b.n	8014d36 <memmove+0x12>
 8014d44:	4402      	add	r2, r0
 8014d46:	4601      	mov	r1, r0
 8014d48:	428a      	cmp	r2, r1
 8014d4a:	d100      	bne.n	8014d4e <memmove+0x2a>
 8014d4c:	bd10      	pop	{r4, pc}
 8014d4e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8014d52:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8014d56:	e7f7      	b.n	8014d48 <memmove+0x24>

08014d58 <__malloc_lock>:
 8014d58:	4801      	ldr	r0, [pc, #4]	; (8014d60 <__malloc_lock+0x8>)
 8014d5a:	f7ff bfe1 	b.w	8014d20 <__retarget_lock_acquire_recursive>
 8014d5e:	bf00      	nop
 8014d60:	20000774 	.word	0x20000774

08014d64 <__malloc_unlock>:
 8014d64:	4801      	ldr	r0, [pc, #4]	; (8014d6c <__malloc_unlock+0x8>)
 8014d66:	f7ff bfdc 	b.w	8014d22 <__retarget_lock_release_recursive>
 8014d6a:	bf00      	nop
 8014d6c:	20000774 	.word	0x20000774

08014d70 <_realloc_r>:
 8014d70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014d74:	4680      	mov	r8, r0
 8014d76:	4614      	mov	r4, r2
 8014d78:	460e      	mov	r6, r1
 8014d7a:	b921      	cbnz	r1, 8014d86 <_realloc_r+0x16>
 8014d7c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8014d80:	4611      	mov	r1, r2
 8014d82:	f7fe bfd3 	b.w	8013d2c <_malloc_r>
 8014d86:	b92a      	cbnz	r2, 8014d94 <_realloc_r+0x24>
 8014d88:	f7fe ff64 	bl	8013c54 <_free_r>
 8014d8c:	4625      	mov	r5, r4
 8014d8e:	4628      	mov	r0, r5
 8014d90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014d94:	f000 faa0 	bl	80152d8 <_malloc_usable_size_r>
 8014d98:	4284      	cmp	r4, r0
 8014d9a:	4607      	mov	r7, r0
 8014d9c:	d802      	bhi.n	8014da4 <_realloc_r+0x34>
 8014d9e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8014da2:	d812      	bhi.n	8014dca <_realloc_r+0x5a>
 8014da4:	4621      	mov	r1, r4
 8014da6:	4640      	mov	r0, r8
 8014da8:	f7fe ffc0 	bl	8013d2c <_malloc_r>
 8014dac:	4605      	mov	r5, r0
 8014dae:	2800      	cmp	r0, #0
 8014db0:	d0ed      	beq.n	8014d8e <_realloc_r+0x1e>
 8014db2:	42bc      	cmp	r4, r7
 8014db4:	4622      	mov	r2, r4
 8014db6:	4631      	mov	r1, r6
 8014db8:	bf28      	it	cs
 8014dba:	463a      	movcs	r2, r7
 8014dbc:	f7fb fa42 	bl	8010244 <memcpy>
 8014dc0:	4631      	mov	r1, r6
 8014dc2:	4640      	mov	r0, r8
 8014dc4:	f7fe ff46 	bl	8013c54 <_free_r>
 8014dc8:	e7e1      	b.n	8014d8e <_realloc_r+0x1e>
 8014dca:	4635      	mov	r5, r6
 8014dcc:	e7df      	b.n	8014d8e <_realloc_r+0x1e>

08014dce <__sfputc_r>:
 8014dce:	6893      	ldr	r3, [r2, #8]
 8014dd0:	3b01      	subs	r3, #1
 8014dd2:	2b00      	cmp	r3, #0
 8014dd4:	b410      	push	{r4}
 8014dd6:	6093      	str	r3, [r2, #8]
 8014dd8:	da08      	bge.n	8014dec <__sfputc_r+0x1e>
 8014dda:	6994      	ldr	r4, [r2, #24]
 8014ddc:	42a3      	cmp	r3, r4
 8014dde:	db01      	blt.n	8014de4 <__sfputc_r+0x16>
 8014de0:	290a      	cmp	r1, #10
 8014de2:	d103      	bne.n	8014dec <__sfputc_r+0x1e>
 8014de4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014de8:	f000 b94a 	b.w	8015080 <__swbuf_r>
 8014dec:	6813      	ldr	r3, [r2, #0]
 8014dee:	1c58      	adds	r0, r3, #1
 8014df0:	6010      	str	r0, [r2, #0]
 8014df2:	7019      	strb	r1, [r3, #0]
 8014df4:	4608      	mov	r0, r1
 8014df6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014dfa:	4770      	bx	lr

08014dfc <__sfputs_r>:
 8014dfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014dfe:	4606      	mov	r6, r0
 8014e00:	460f      	mov	r7, r1
 8014e02:	4614      	mov	r4, r2
 8014e04:	18d5      	adds	r5, r2, r3
 8014e06:	42ac      	cmp	r4, r5
 8014e08:	d101      	bne.n	8014e0e <__sfputs_r+0x12>
 8014e0a:	2000      	movs	r0, #0
 8014e0c:	e007      	b.n	8014e1e <__sfputs_r+0x22>
 8014e0e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014e12:	463a      	mov	r2, r7
 8014e14:	4630      	mov	r0, r6
 8014e16:	f7ff ffda 	bl	8014dce <__sfputc_r>
 8014e1a:	1c43      	adds	r3, r0, #1
 8014e1c:	d1f3      	bne.n	8014e06 <__sfputs_r+0xa>
 8014e1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08014e20 <_vfiprintf_r>:
 8014e20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014e24:	460d      	mov	r5, r1
 8014e26:	b09d      	sub	sp, #116	; 0x74
 8014e28:	4614      	mov	r4, r2
 8014e2a:	4698      	mov	r8, r3
 8014e2c:	4606      	mov	r6, r0
 8014e2e:	b118      	cbz	r0, 8014e38 <_vfiprintf_r+0x18>
 8014e30:	6983      	ldr	r3, [r0, #24]
 8014e32:	b90b      	cbnz	r3, 8014e38 <_vfiprintf_r+0x18>
 8014e34:	f7ff fec4 	bl	8014bc0 <__sinit>
 8014e38:	4b89      	ldr	r3, [pc, #548]	; (8015060 <_vfiprintf_r+0x240>)
 8014e3a:	429d      	cmp	r5, r3
 8014e3c:	d11b      	bne.n	8014e76 <_vfiprintf_r+0x56>
 8014e3e:	6875      	ldr	r5, [r6, #4]
 8014e40:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8014e42:	07d9      	lsls	r1, r3, #31
 8014e44:	d405      	bmi.n	8014e52 <_vfiprintf_r+0x32>
 8014e46:	89ab      	ldrh	r3, [r5, #12]
 8014e48:	059a      	lsls	r2, r3, #22
 8014e4a:	d402      	bmi.n	8014e52 <_vfiprintf_r+0x32>
 8014e4c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8014e4e:	f7ff ff67 	bl	8014d20 <__retarget_lock_acquire_recursive>
 8014e52:	89ab      	ldrh	r3, [r5, #12]
 8014e54:	071b      	lsls	r3, r3, #28
 8014e56:	d501      	bpl.n	8014e5c <_vfiprintf_r+0x3c>
 8014e58:	692b      	ldr	r3, [r5, #16]
 8014e5a:	b9eb      	cbnz	r3, 8014e98 <_vfiprintf_r+0x78>
 8014e5c:	4629      	mov	r1, r5
 8014e5e:	4630      	mov	r0, r6
 8014e60:	f000 f960 	bl	8015124 <__swsetup_r>
 8014e64:	b1c0      	cbz	r0, 8014e98 <_vfiprintf_r+0x78>
 8014e66:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8014e68:	07dc      	lsls	r4, r3, #31
 8014e6a:	d50e      	bpl.n	8014e8a <_vfiprintf_r+0x6a>
 8014e6c:	f04f 30ff 	mov.w	r0, #4294967295
 8014e70:	b01d      	add	sp, #116	; 0x74
 8014e72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014e76:	4b7b      	ldr	r3, [pc, #492]	; (8015064 <_vfiprintf_r+0x244>)
 8014e78:	429d      	cmp	r5, r3
 8014e7a:	d101      	bne.n	8014e80 <_vfiprintf_r+0x60>
 8014e7c:	68b5      	ldr	r5, [r6, #8]
 8014e7e:	e7df      	b.n	8014e40 <_vfiprintf_r+0x20>
 8014e80:	4b79      	ldr	r3, [pc, #484]	; (8015068 <_vfiprintf_r+0x248>)
 8014e82:	429d      	cmp	r5, r3
 8014e84:	bf08      	it	eq
 8014e86:	68f5      	ldreq	r5, [r6, #12]
 8014e88:	e7da      	b.n	8014e40 <_vfiprintf_r+0x20>
 8014e8a:	89ab      	ldrh	r3, [r5, #12]
 8014e8c:	0598      	lsls	r0, r3, #22
 8014e8e:	d4ed      	bmi.n	8014e6c <_vfiprintf_r+0x4c>
 8014e90:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8014e92:	f7ff ff46 	bl	8014d22 <__retarget_lock_release_recursive>
 8014e96:	e7e9      	b.n	8014e6c <_vfiprintf_r+0x4c>
 8014e98:	2300      	movs	r3, #0
 8014e9a:	9309      	str	r3, [sp, #36]	; 0x24
 8014e9c:	2320      	movs	r3, #32
 8014e9e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8014ea2:	f8cd 800c 	str.w	r8, [sp, #12]
 8014ea6:	2330      	movs	r3, #48	; 0x30
 8014ea8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 801506c <_vfiprintf_r+0x24c>
 8014eac:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8014eb0:	f04f 0901 	mov.w	r9, #1
 8014eb4:	4623      	mov	r3, r4
 8014eb6:	469a      	mov	sl, r3
 8014eb8:	f813 2b01 	ldrb.w	r2, [r3], #1
 8014ebc:	b10a      	cbz	r2, 8014ec2 <_vfiprintf_r+0xa2>
 8014ebe:	2a25      	cmp	r2, #37	; 0x25
 8014ec0:	d1f9      	bne.n	8014eb6 <_vfiprintf_r+0x96>
 8014ec2:	ebba 0b04 	subs.w	fp, sl, r4
 8014ec6:	d00b      	beq.n	8014ee0 <_vfiprintf_r+0xc0>
 8014ec8:	465b      	mov	r3, fp
 8014eca:	4622      	mov	r2, r4
 8014ecc:	4629      	mov	r1, r5
 8014ece:	4630      	mov	r0, r6
 8014ed0:	f7ff ff94 	bl	8014dfc <__sfputs_r>
 8014ed4:	3001      	adds	r0, #1
 8014ed6:	f000 80aa 	beq.w	801502e <_vfiprintf_r+0x20e>
 8014eda:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8014edc:	445a      	add	r2, fp
 8014ede:	9209      	str	r2, [sp, #36]	; 0x24
 8014ee0:	f89a 3000 	ldrb.w	r3, [sl]
 8014ee4:	2b00      	cmp	r3, #0
 8014ee6:	f000 80a2 	beq.w	801502e <_vfiprintf_r+0x20e>
 8014eea:	2300      	movs	r3, #0
 8014eec:	f04f 32ff 	mov.w	r2, #4294967295
 8014ef0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8014ef4:	f10a 0a01 	add.w	sl, sl, #1
 8014ef8:	9304      	str	r3, [sp, #16]
 8014efa:	9307      	str	r3, [sp, #28]
 8014efc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8014f00:	931a      	str	r3, [sp, #104]	; 0x68
 8014f02:	4654      	mov	r4, sl
 8014f04:	2205      	movs	r2, #5
 8014f06:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014f0a:	4858      	ldr	r0, [pc, #352]	; (801506c <_vfiprintf_r+0x24c>)
 8014f0c:	f7eb f988 	bl	8000220 <memchr>
 8014f10:	9a04      	ldr	r2, [sp, #16]
 8014f12:	b9d8      	cbnz	r0, 8014f4c <_vfiprintf_r+0x12c>
 8014f14:	06d1      	lsls	r1, r2, #27
 8014f16:	bf44      	itt	mi
 8014f18:	2320      	movmi	r3, #32
 8014f1a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8014f1e:	0713      	lsls	r3, r2, #28
 8014f20:	bf44      	itt	mi
 8014f22:	232b      	movmi	r3, #43	; 0x2b
 8014f24:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8014f28:	f89a 3000 	ldrb.w	r3, [sl]
 8014f2c:	2b2a      	cmp	r3, #42	; 0x2a
 8014f2e:	d015      	beq.n	8014f5c <_vfiprintf_r+0x13c>
 8014f30:	9a07      	ldr	r2, [sp, #28]
 8014f32:	4654      	mov	r4, sl
 8014f34:	2000      	movs	r0, #0
 8014f36:	f04f 0c0a 	mov.w	ip, #10
 8014f3a:	4621      	mov	r1, r4
 8014f3c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8014f40:	3b30      	subs	r3, #48	; 0x30
 8014f42:	2b09      	cmp	r3, #9
 8014f44:	d94e      	bls.n	8014fe4 <_vfiprintf_r+0x1c4>
 8014f46:	b1b0      	cbz	r0, 8014f76 <_vfiprintf_r+0x156>
 8014f48:	9207      	str	r2, [sp, #28]
 8014f4a:	e014      	b.n	8014f76 <_vfiprintf_r+0x156>
 8014f4c:	eba0 0308 	sub.w	r3, r0, r8
 8014f50:	fa09 f303 	lsl.w	r3, r9, r3
 8014f54:	4313      	orrs	r3, r2
 8014f56:	9304      	str	r3, [sp, #16]
 8014f58:	46a2      	mov	sl, r4
 8014f5a:	e7d2      	b.n	8014f02 <_vfiprintf_r+0xe2>
 8014f5c:	9b03      	ldr	r3, [sp, #12]
 8014f5e:	1d19      	adds	r1, r3, #4
 8014f60:	681b      	ldr	r3, [r3, #0]
 8014f62:	9103      	str	r1, [sp, #12]
 8014f64:	2b00      	cmp	r3, #0
 8014f66:	bfbb      	ittet	lt
 8014f68:	425b      	neglt	r3, r3
 8014f6a:	f042 0202 	orrlt.w	r2, r2, #2
 8014f6e:	9307      	strge	r3, [sp, #28]
 8014f70:	9307      	strlt	r3, [sp, #28]
 8014f72:	bfb8      	it	lt
 8014f74:	9204      	strlt	r2, [sp, #16]
 8014f76:	7823      	ldrb	r3, [r4, #0]
 8014f78:	2b2e      	cmp	r3, #46	; 0x2e
 8014f7a:	d10c      	bne.n	8014f96 <_vfiprintf_r+0x176>
 8014f7c:	7863      	ldrb	r3, [r4, #1]
 8014f7e:	2b2a      	cmp	r3, #42	; 0x2a
 8014f80:	d135      	bne.n	8014fee <_vfiprintf_r+0x1ce>
 8014f82:	9b03      	ldr	r3, [sp, #12]
 8014f84:	1d1a      	adds	r2, r3, #4
 8014f86:	681b      	ldr	r3, [r3, #0]
 8014f88:	9203      	str	r2, [sp, #12]
 8014f8a:	2b00      	cmp	r3, #0
 8014f8c:	bfb8      	it	lt
 8014f8e:	f04f 33ff 	movlt.w	r3, #4294967295
 8014f92:	3402      	adds	r4, #2
 8014f94:	9305      	str	r3, [sp, #20]
 8014f96:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 801507c <_vfiprintf_r+0x25c>
 8014f9a:	7821      	ldrb	r1, [r4, #0]
 8014f9c:	2203      	movs	r2, #3
 8014f9e:	4650      	mov	r0, sl
 8014fa0:	f7eb f93e 	bl	8000220 <memchr>
 8014fa4:	b140      	cbz	r0, 8014fb8 <_vfiprintf_r+0x198>
 8014fa6:	2340      	movs	r3, #64	; 0x40
 8014fa8:	eba0 000a 	sub.w	r0, r0, sl
 8014fac:	fa03 f000 	lsl.w	r0, r3, r0
 8014fb0:	9b04      	ldr	r3, [sp, #16]
 8014fb2:	4303      	orrs	r3, r0
 8014fb4:	3401      	adds	r4, #1
 8014fb6:	9304      	str	r3, [sp, #16]
 8014fb8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014fbc:	482c      	ldr	r0, [pc, #176]	; (8015070 <_vfiprintf_r+0x250>)
 8014fbe:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8014fc2:	2206      	movs	r2, #6
 8014fc4:	f7eb f92c 	bl	8000220 <memchr>
 8014fc8:	2800      	cmp	r0, #0
 8014fca:	d03f      	beq.n	801504c <_vfiprintf_r+0x22c>
 8014fcc:	4b29      	ldr	r3, [pc, #164]	; (8015074 <_vfiprintf_r+0x254>)
 8014fce:	bb1b      	cbnz	r3, 8015018 <_vfiprintf_r+0x1f8>
 8014fd0:	9b03      	ldr	r3, [sp, #12]
 8014fd2:	3307      	adds	r3, #7
 8014fd4:	f023 0307 	bic.w	r3, r3, #7
 8014fd8:	3308      	adds	r3, #8
 8014fda:	9303      	str	r3, [sp, #12]
 8014fdc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014fde:	443b      	add	r3, r7
 8014fe0:	9309      	str	r3, [sp, #36]	; 0x24
 8014fe2:	e767      	b.n	8014eb4 <_vfiprintf_r+0x94>
 8014fe4:	fb0c 3202 	mla	r2, ip, r2, r3
 8014fe8:	460c      	mov	r4, r1
 8014fea:	2001      	movs	r0, #1
 8014fec:	e7a5      	b.n	8014f3a <_vfiprintf_r+0x11a>
 8014fee:	2300      	movs	r3, #0
 8014ff0:	3401      	adds	r4, #1
 8014ff2:	9305      	str	r3, [sp, #20]
 8014ff4:	4619      	mov	r1, r3
 8014ff6:	f04f 0c0a 	mov.w	ip, #10
 8014ffa:	4620      	mov	r0, r4
 8014ffc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8015000:	3a30      	subs	r2, #48	; 0x30
 8015002:	2a09      	cmp	r2, #9
 8015004:	d903      	bls.n	801500e <_vfiprintf_r+0x1ee>
 8015006:	2b00      	cmp	r3, #0
 8015008:	d0c5      	beq.n	8014f96 <_vfiprintf_r+0x176>
 801500a:	9105      	str	r1, [sp, #20]
 801500c:	e7c3      	b.n	8014f96 <_vfiprintf_r+0x176>
 801500e:	fb0c 2101 	mla	r1, ip, r1, r2
 8015012:	4604      	mov	r4, r0
 8015014:	2301      	movs	r3, #1
 8015016:	e7f0      	b.n	8014ffa <_vfiprintf_r+0x1da>
 8015018:	ab03      	add	r3, sp, #12
 801501a:	9300      	str	r3, [sp, #0]
 801501c:	462a      	mov	r2, r5
 801501e:	4b16      	ldr	r3, [pc, #88]	; (8015078 <_vfiprintf_r+0x258>)
 8015020:	a904      	add	r1, sp, #16
 8015022:	4630      	mov	r0, r6
 8015024:	f7fb f9c4 	bl	80103b0 <_printf_float>
 8015028:	4607      	mov	r7, r0
 801502a:	1c78      	adds	r0, r7, #1
 801502c:	d1d6      	bne.n	8014fdc <_vfiprintf_r+0x1bc>
 801502e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8015030:	07d9      	lsls	r1, r3, #31
 8015032:	d405      	bmi.n	8015040 <_vfiprintf_r+0x220>
 8015034:	89ab      	ldrh	r3, [r5, #12]
 8015036:	059a      	lsls	r2, r3, #22
 8015038:	d402      	bmi.n	8015040 <_vfiprintf_r+0x220>
 801503a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801503c:	f7ff fe71 	bl	8014d22 <__retarget_lock_release_recursive>
 8015040:	89ab      	ldrh	r3, [r5, #12]
 8015042:	065b      	lsls	r3, r3, #25
 8015044:	f53f af12 	bmi.w	8014e6c <_vfiprintf_r+0x4c>
 8015048:	9809      	ldr	r0, [sp, #36]	; 0x24
 801504a:	e711      	b.n	8014e70 <_vfiprintf_r+0x50>
 801504c:	ab03      	add	r3, sp, #12
 801504e:	9300      	str	r3, [sp, #0]
 8015050:	462a      	mov	r2, r5
 8015052:	4b09      	ldr	r3, [pc, #36]	; (8015078 <_vfiprintf_r+0x258>)
 8015054:	a904      	add	r1, sp, #16
 8015056:	4630      	mov	r0, r6
 8015058:	f7fb fc4e 	bl	80108f8 <_printf_i>
 801505c:	e7e4      	b.n	8015028 <_vfiprintf_r+0x208>
 801505e:	bf00      	nop
 8015060:	08015d7c 	.word	0x08015d7c
 8015064:	08015d9c 	.word	0x08015d9c
 8015068:	08015d5c 	.word	0x08015d5c
 801506c:	08015cf4 	.word	0x08015cf4
 8015070:	08015cfe 	.word	0x08015cfe
 8015074:	080103b1 	.word	0x080103b1
 8015078:	08014dfd 	.word	0x08014dfd
 801507c:	08015cfa 	.word	0x08015cfa

08015080 <__swbuf_r>:
 8015080:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015082:	460e      	mov	r6, r1
 8015084:	4614      	mov	r4, r2
 8015086:	4605      	mov	r5, r0
 8015088:	b118      	cbz	r0, 8015092 <__swbuf_r+0x12>
 801508a:	6983      	ldr	r3, [r0, #24]
 801508c:	b90b      	cbnz	r3, 8015092 <__swbuf_r+0x12>
 801508e:	f7ff fd97 	bl	8014bc0 <__sinit>
 8015092:	4b21      	ldr	r3, [pc, #132]	; (8015118 <__swbuf_r+0x98>)
 8015094:	429c      	cmp	r4, r3
 8015096:	d12b      	bne.n	80150f0 <__swbuf_r+0x70>
 8015098:	686c      	ldr	r4, [r5, #4]
 801509a:	69a3      	ldr	r3, [r4, #24]
 801509c:	60a3      	str	r3, [r4, #8]
 801509e:	89a3      	ldrh	r3, [r4, #12]
 80150a0:	071a      	lsls	r2, r3, #28
 80150a2:	d52f      	bpl.n	8015104 <__swbuf_r+0x84>
 80150a4:	6923      	ldr	r3, [r4, #16]
 80150a6:	b36b      	cbz	r3, 8015104 <__swbuf_r+0x84>
 80150a8:	6923      	ldr	r3, [r4, #16]
 80150aa:	6820      	ldr	r0, [r4, #0]
 80150ac:	1ac0      	subs	r0, r0, r3
 80150ae:	6963      	ldr	r3, [r4, #20]
 80150b0:	b2f6      	uxtb	r6, r6
 80150b2:	4283      	cmp	r3, r0
 80150b4:	4637      	mov	r7, r6
 80150b6:	dc04      	bgt.n	80150c2 <__swbuf_r+0x42>
 80150b8:	4621      	mov	r1, r4
 80150ba:	4628      	mov	r0, r5
 80150bc:	f7ff fcec 	bl	8014a98 <_fflush_r>
 80150c0:	bb30      	cbnz	r0, 8015110 <__swbuf_r+0x90>
 80150c2:	68a3      	ldr	r3, [r4, #8]
 80150c4:	3b01      	subs	r3, #1
 80150c6:	60a3      	str	r3, [r4, #8]
 80150c8:	6823      	ldr	r3, [r4, #0]
 80150ca:	1c5a      	adds	r2, r3, #1
 80150cc:	6022      	str	r2, [r4, #0]
 80150ce:	701e      	strb	r6, [r3, #0]
 80150d0:	6963      	ldr	r3, [r4, #20]
 80150d2:	3001      	adds	r0, #1
 80150d4:	4283      	cmp	r3, r0
 80150d6:	d004      	beq.n	80150e2 <__swbuf_r+0x62>
 80150d8:	89a3      	ldrh	r3, [r4, #12]
 80150da:	07db      	lsls	r3, r3, #31
 80150dc:	d506      	bpl.n	80150ec <__swbuf_r+0x6c>
 80150de:	2e0a      	cmp	r6, #10
 80150e0:	d104      	bne.n	80150ec <__swbuf_r+0x6c>
 80150e2:	4621      	mov	r1, r4
 80150e4:	4628      	mov	r0, r5
 80150e6:	f7ff fcd7 	bl	8014a98 <_fflush_r>
 80150ea:	b988      	cbnz	r0, 8015110 <__swbuf_r+0x90>
 80150ec:	4638      	mov	r0, r7
 80150ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80150f0:	4b0a      	ldr	r3, [pc, #40]	; (801511c <__swbuf_r+0x9c>)
 80150f2:	429c      	cmp	r4, r3
 80150f4:	d101      	bne.n	80150fa <__swbuf_r+0x7a>
 80150f6:	68ac      	ldr	r4, [r5, #8]
 80150f8:	e7cf      	b.n	801509a <__swbuf_r+0x1a>
 80150fa:	4b09      	ldr	r3, [pc, #36]	; (8015120 <__swbuf_r+0xa0>)
 80150fc:	429c      	cmp	r4, r3
 80150fe:	bf08      	it	eq
 8015100:	68ec      	ldreq	r4, [r5, #12]
 8015102:	e7ca      	b.n	801509a <__swbuf_r+0x1a>
 8015104:	4621      	mov	r1, r4
 8015106:	4628      	mov	r0, r5
 8015108:	f000 f80c 	bl	8015124 <__swsetup_r>
 801510c:	2800      	cmp	r0, #0
 801510e:	d0cb      	beq.n	80150a8 <__swbuf_r+0x28>
 8015110:	f04f 37ff 	mov.w	r7, #4294967295
 8015114:	e7ea      	b.n	80150ec <__swbuf_r+0x6c>
 8015116:	bf00      	nop
 8015118:	08015d7c 	.word	0x08015d7c
 801511c:	08015d9c 	.word	0x08015d9c
 8015120:	08015d5c 	.word	0x08015d5c

08015124 <__swsetup_r>:
 8015124:	4b32      	ldr	r3, [pc, #200]	; (80151f0 <__swsetup_r+0xcc>)
 8015126:	b570      	push	{r4, r5, r6, lr}
 8015128:	681d      	ldr	r5, [r3, #0]
 801512a:	4606      	mov	r6, r0
 801512c:	460c      	mov	r4, r1
 801512e:	b125      	cbz	r5, 801513a <__swsetup_r+0x16>
 8015130:	69ab      	ldr	r3, [r5, #24]
 8015132:	b913      	cbnz	r3, 801513a <__swsetup_r+0x16>
 8015134:	4628      	mov	r0, r5
 8015136:	f7ff fd43 	bl	8014bc0 <__sinit>
 801513a:	4b2e      	ldr	r3, [pc, #184]	; (80151f4 <__swsetup_r+0xd0>)
 801513c:	429c      	cmp	r4, r3
 801513e:	d10f      	bne.n	8015160 <__swsetup_r+0x3c>
 8015140:	686c      	ldr	r4, [r5, #4]
 8015142:	89a3      	ldrh	r3, [r4, #12]
 8015144:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8015148:	0719      	lsls	r1, r3, #28
 801514a:	d42c      	bmi.n	80151a6 <__swsetup_r+0x82>
 801514c:	06dd      	lsls	r5, r3, #27
 801514e:	d411      	bmi.n	8015174 <__swsetup_r+0x50>
 8015150:	2309      	movs	r3, #9
 8015152:	6033      	str	r3, [r6, #0]
 8015154:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8015158:	81a3      	strh	r3, [r4, #12]
 801515a:	f04f 30ff 	mov.w	r0, #4294967295
 801515e:	e03e      	b.n	80151de <__swsetup_r+0xba>
 8015160:	4b25      	ldr	r3, [pc, #148]	; (80151f8 <__swsetup_r+0xd4>)
 8015162:	429c      	cmp	r4, r3
 8015164:	d101      	bne.n	801516a <__swsetup_r+0x46>
 8015166:	68ac      	ldr	r4, [r5, #8]
 8015168:	e7eb      	b.n	8015142 <__swsetup_r+0x1e>
 801516a:	4b24      	ldr	r3, [pc, #144]	; (80151fc <__swsetup_r+0xd8>)
 801516c:	429c      	cmp	r4, r3
 801516e:	bf08      	it	eq
 8015170:	68ec      	ldreq	r4, [r5, #12]
 8015172:	e7e6      	b.n	8015142 <__swsetup_r+0x1e>
 8015174:	0758      	lsls	r0, r3, #29
 8015176:	d512      	bpl.n	801519e <__swsetup_r+0x7a>
 8015178:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801517a:	b141      	cbz	r1, 801518e <__swsetup_r+0x6a>
 801517c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8015180:	4299      	cmp	r1, r3
 8015182:	d002      	beq.n	801518a <__swsetup_r+0x66>
 8015184:	4630      	mov	r0, r6
 8015186:	f7fe fd65 	bl	8013c54 <_free_r>
 801518a:	2300      	movs	r3, #0
 801518c:	6363      	str	r3, [r4, #52]	; 0x34
 801518e:	89a3      	ldrh	r3, [r4, #12]
 8015190:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8015194:	81a3      	strh	r3, [r4, #12]
 8015196:	2300      	movs	r3, #0
 8015198:	6063      	str	r3, [r4, #4]
 801519a:	6923      	ldr	r3, [r4, #16]
 801519c:	6023      	str	r3, [r4, #0]
 801519e:	89a3      	ldrh	r3, [r4, #12]
 80151a0:	f043 0308 	orr.w	r3, r3, #8
 80151a4:	81a3      	strh	r3, [r4, #12]
 80151a6:	6923      	ldr	r3, [r4, #16]
 80151a8:	b94b      	cbnz	r3, 80151be <__swsetup_r+0x9a>
 80151aa:	89a3      	ldrh	r3, [r4, #12]
 80151ac:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80151b0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80151b4:	d003      	beq.n	80151be <__swsetup_r+0x9a>
 80151b6:	4621      	mov	r1, r4
 80151b8:	4630      	mov	r0, r6
 80151ba:	f000 f84d 	bl	8015258 <__smakebuf_r>
 80151be:	89a0      	ldrh	r0, [r4, #12]
 80151c0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80151c4:	f010 0301 	ands.w	r3, r0, #1
 80151c8:	d00a      	beq.n	80151e0 <__swsetup_r+0xbc>
 80151ca:	2300      	movs	r3, #0
 80151cc:	60a3      	str	r3, [r4, #8]
 80151ce:	6963      	ldr	r3, [r4, #20]
 80151d0:	425b      	negs	r3, r3
 80151d2:	61a3      	str	r3, [r4, #24]
 80151d4:	6923      	ldr	r3, [r4, #16]
 80151d6:	b943      	cbnz	r3, 80151ea <__swsetup_r+0xc6>
 80151d8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80151dc:	d1ba      	bne.n	8015154 <__swsetup_r+0x30>
 80151de:	bd70      	pop	{r4, r5, r6, pc}
 80151e0:	0781      	lsls	r1, r0, #30
 80151e2:	bf58      	it	pl
 80151e4:	6963      	ldrpl	r3, [r4, #20]
 80151e6:	60a3      	str	r3, [r4, #8]
 80151e8:	e7f4      	b.n	80151d4 <__swsetup_r+0xb0>
 80151ea:	2000      	movs	r0, #0
 80151ec:	e7f7      	b.n	80151de <__swsetup_r+0xba>
 80151ee:	bf00      	nop
 80151f0:	200002c8 	.word	0x200002c8
 80151f4:	08015d7c 	.word	0x08015d7c
 80151f8:	08015d9c 	.word	0x08015d9c
 80151fc:	08015d5c 	.word	0x08015d5c

08015200 <abort>:
 8015200:	b508      	push	{r3, lr}
 8015202:	2006      	movs	r0, #6
 8015204:	f000 f898 	bl	8015338 <raise>
 8015208:	2001      	movs	r0, #1
 801520a:	f7ed feb7 	bl	8002f7c <_exit>

0801520e <__swhatbuf_r>:
 801520e:	b570      	push	{r4, r5, r6, lr}
 8015210:	460e      	mov	r6, r1
 8015212:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015216:	2900      	cmp	r1, #0
 8015218:	b096      	sub	sp, #88	; 0x58
 801521a:	4614      	mov	r4, r2
 801521c:	461d      	mov	r5, r3
 801521e:	da08      	bge.n	8015232 <__swhatbuf_r+0x24>
 8015220:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8015224:	2200      	movs	r2, #0
 8015226:	602a      	str	r2, [r5, #0]
 8015228:	061a      	lsls	r2, r3, #24
 801522a:	d410      	bmi.n	801524e <__swhatbuf_r+0x40>
 801522c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8015230:	e00e      	b.n	8015250 <__swhatbuf_r+0x42>
 8015232:	466a      	mov	r2, sp
 8015234:	f000 f89c 	bl	8015370 <_fstat_r>
 8015238:	2800      	cmp	r0, #0
 801523a:	dbf1      	blt.n	8015220 <__swhatbuf_r+0x12>
 801523c:	9a01      	ldr	r2, [sp, #4]
 801523e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8015242:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8015246:	425a      	negs	r2, r3
 8015248:	415a      	adcs	r2, r3
 801524a:	602a      	str	r2, [r5, #0]
 801524c:	e7ee      	b.n	801522c <__swhatbuf_r+0x1e>
 801524e:	2340      	movs	r3, #64	; 0x40
 8015250:	2000      	movs	r0, #0
 8015252:	6023      	str	r3, [r4, #0]
 8015254:	b016      	add	sp, #88	; 0x58
 8015256:	bd70      	pop	{r4, r5, r6, pc}

08015258 <__smakebuf_r>:
 8015258:	898b      	ldrh	r3, [r1, #12]
 801525a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801525c:	079d      	lsls	r5, r3, #30
 801525e:	4606      	mov	r6, r0
 8015260:	460c      	mov	r4, r1
 8015262:	d507      	bpl.n	8015274 <__smakebuf_r+0x1c>
 8015264:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8015268:	6023      	str	r3, [r4, #0]
 801526a:	6123      	str	r3, [r4, #16]
 801526c:	2301      	movs	r3, #1
 801526e:	6163      	str	r3, [r4, #20]
 8015270:	b002      	add	sp, #8
 8015272:	bd70      	pop	{r4, r5, r6, pc}
 8015274:	ab01      	add	r3, sp, #4
 8015276:	466a      	mov	r2, sp
 8015278:	f7ff ffc9 	bl	801520e <__swhatbuf_r>
 801527c:	9900      	ldr	r1, [sp, #0]
 801527e:	4605      	mov	r5, r0
 8015280:	4630      	mov	r0, r6
 8015282:	f7fe fd53 	bl	8013d2c <_malloc_r>
 8015286:	b948      	cbnz	r0, 801529c <__smakebuf_r+0x44>
 8015288:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801528c:	059a      	lsls	r2, r3, #22
 801528e:	d4ef      	bmi.n	8015270 <__smakebuf_r+0x18>
 8015290:	f023 0303 	bic.w	r3, r3, #3
 8015294:	f043 0302 	orr.w	r3, r3, #2
 8015298:	81a3      	strh	r3, [r4, #12]
 801529a:	e7e3      	b.n	8015264 <__smakebuf_r+0xc>
 801529c:	4b0d      	ldr	r3, [pc, #52]	; (80152d4 <__smakebuf_r+0x7c>)
 801529e:	62b3      	str	r3, [r6, #40]	; 0x28
 80152a0:	89a3      	ldrh	r3, [r4, #12]
 80152a2:	6020      	str	r0, [r4, #0]
 80152a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80152a8:	81a3      	strh	r3, [r4, #12]
 80152aa:	9b00      	ldr	r3, [sp, #0]
 80152ac:	6163      	str	r3, [r4, #20]
 80152ae:	9b01      	ldr	r3, [sp, #4]
 80152b0:	6120      	str	r0, [r4, #16]
 80152b2:	b15b      	cbz	r3, 80152cc <__smakebuf_r+0x74>
 80152b4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80152b8:	4630      	mov	r0, r6
 80152ba:	f000 f86b 	bl	8015394 <_isatty_r>
 80152be:	b128      	cbz	r0, 80152cc <__smakebuf_r+0x74>
 80152c0:	89a3      	ldrh	r3, [r4, #12]
 80152c2:	f023 0303 	bic.w	r3, r3, #3
 80152c6:	f043 0301 	orr.w	r3, r3, #1
 80152ca:	81a3      	strh	r3, [r4, #12]
 80152cc:	89a0      	ldrh	r0, [r4, #12]
 80152ce:	4305      	orrs	r5, r0
 80152d0:	81a5      	strh	r5, [r4, #12]
 80152d2:	e7cd      	b.n	8015270 <__smakebuf_r+0x18>
 80152d4:	08014b59 	.word	0x08014b59

080152d8 <_malloc_usable_size_r>:
 80152d8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80152dc:	1f18      	subs	r0, r3, #4
 80152de:	2b00      	cmp	r3, #0
 80152e0:	bfbc      	itt	lt
 80152e2:	580b      	ldrlt	r3, [r1, r0]
 80152e4:	18c0      	addlt	r0, r0, r3
 80152e6:	4770      	bx	lr

080152e8 <_raise_r>:
 80152e8:	291f      	cmp	r1, #31
 80152ea:	b538      	push	{r3, r4, r5, lr}
 80152ec:	4604      	mov	r4, r0
 80152ee:	460d      	mov	r5, r1
 80152f0:	d904      	bls.n	80152fc <_raise_r+0x14>
 80152f2:	2316      	movs	r3, #22
 80152f4:	6003      	str	r3, [r0, #0]
 80152f6:	f04f 30ff 	mov.w	r0, #4294967295
 80152fa:	bd38      	pop	{r3, r4, r5, pc}
 80152fc:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80152fe:	b112      	cbz	r2, 8015306 <_raise_r+0x1e>
 8015300:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8015304:	b94b      	cbnz	r3, 801531a <_raise_r+0x32>
 8015306:	4620      	mov	r0, r4
 8015308:	f000 f830 	bl	801536c <_getpid_r>
 801530c:	462a      	mov	r2, r5
 801530e:	4601      	mov	r1, r0
 8015310:	4620      	mov	r0, r4
 8015312:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8015316:	f000 b817 	b.w	8015348 <_kill_r>
 801531a:	2b01      	cmp	r3, #1
 801531c:	d00a      	beq.n	8015334 <_raise_r+0x4c>
 801531e:	1c59      	adds	r1, r3, #1
 8015320:	d103      	bne.n	801532a <_raise_r+0x42>
 8015322:	2316      	movs	r3, #22
 8015324:	6003      	str	r3, [r0, #0]
 8015326:	2001      	movs	r0, #1
 8015328:	e7e7      	b.n	80152fa <_raise_r+0x12>
 801532a:	2400      	movs	r4, #0
 801532c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8015330:	4628      	mov	r0, r5
 8015332:	4798      	blx	r3
 8015334:	2000      	movs	r0, #0
 8015336:	e7e0      	b.n	80152fa <_raise_r+0x12>

08015338 <raise>:
 8015338:	4b02      	ldr	r3, [pc, #8]	; (8015344 <raise+0xc>)
 801533a:	4601      	mov	r1, r0
 801533c:	6818      	ldr	r0, [r3, #0]
 801533e:	f7ff bfd3 	b.w	80152e8 <_raise_r>
 8015342:	bf00      	nop
 8015344:	200002c8 	.word	0x200002c8

08015348 <_kill_r>:
 8015348:	b538      	push	{r3, r4, r5, lr}
 801534a:	4d07      	ldr	r5, [pc, #28]	; (8015368 <_kill_r+0x20>)
 801534c:	2300      	movs	r3, #0
 801534e:	4604      	mov	r4, r0
 8015350:	4608      	mov	r0, r1
 8015352:	4611      	mov	r1, r2
 8015354:	602b      	str	r3, [r5, #0]
 8015356:	f7ed fe01 	bl	8002f5c <_kill>
 801535a:	1c43      	adds	r3, r0, #1
 801535c:	d102      	bne.n	8015364 <_kill_r+0x1c>
 801535e:	682b      	ldr	r3, [r5, #0]
 8015360:	b103      	cbz	r3, 8015364 <_kill_r+0x1c>
 8015362:	6023      	str	r3, [r4, #0]
 8015364:	bd38      	pop	{r3, r4, r5, pc}
 8015366:	bf00      	nop
 8015368:	20000770 	.word	0x20000770

0801536c <_getpid_r>:
 801536c:	f7ed bdee 	b.w	8002f4c <_getpid>

08015370 <_fstat_r>:
 8015370:	b538      	push	{r3, r4, r5, lr}
 8015372:	4d07      	ldr	r5, [pc, #28]	; (8015390 <_fstat_r+0x20>)
 8015374:	2300      	movs	r3, #0
 8015376:	4604      	mov	r4, r0
 8015378:	4608      	mov	r0, r1
 801537a:	4611      	mov	r1, r2
 801537c:	602b      	str	r3, [r5, #0]
 801537e:	f7ed fe4c 	bl	800301a <_fstat>
 8015382:	1c43      	adds	r3, r0, #1
 8015384:	d102      	bne.n	801538c <_fstat_r+0x1c>
 8015386:	682b      	ldr	r3, [r5, #0]
 8015388:	b103      	cbz	r3, 801538c <_fstat_r+0x1c>
 801538a:	6023      	str	r3, [r4, #0]
 801538c:	bd38      	pop	{r3, r4, r5, pc}
 801538e:	bf00      	nop
 8015390:	20000770 	.word	0x20000770

08015394 <_isatty_r>:
 8015394:	b538      	push	{r3, r4, r5, lr}
 8015396:	4d06      	ldr	r5, [pc, #24]	; (80153b0 <_isatty_r+0x1c>)
 8015398:	2300      	movs	r3, #0
 801539a:	4604      	mov	r4, r0
 801539c:	4608      	mov	r0, r1
 801539e:	602b      	str	r3, [r5, #0]
 80153a0:	f7ed fe4b 	bl	800303a <_isatty>
 80153a4:	1c43      	adds	r3, r0, #1
 80153a6:	d102      	bne.n	80153ae <_isatty_r+0x1a>
 80153a8:	682b      	ldr	r3, [r5, #0]
 80153aa:	b103      	cbz	r3, 80153ae <_isatty_r+0x1a>
 80153ac:	6023      	str	r3, [r4, #0]
 80153ae:	bd38      	pop	{r3, r4, r5, pc}
 80153b0:	20000770 	.word	0x20000770

080153b4 <_init>:
 80153b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80153b6:	bf00      	nop
 80153b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80153ba:	bc08      	pop	{r3}
 80153bc:	469e      	mov	lr, r3
 80153be:	4770      	bx	lr

080153c0 <_fini>:
 80153c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80153c2:	bf00      	nop
 80153c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80153c6:	bc08      	pop	{r3}
 80153c8:	469e      	mov	lr, r3
 80153ca:	4770      	bx	lr
