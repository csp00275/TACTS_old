
test_stm32f746-disco.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e28c  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005cc  0800e460  0800e460  0001e460  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ea2c  0800ea2c  00020498  2**0
                  CONTENTS
  4 .ARM          00000008  0800ea2c  0800ea2c  0001ea2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ea34  0800ea34  00020498  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ea34  0800ea34  0001ea34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ea38  0800ea38  0001ea38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000498  20000000  0800ea3c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000210  20000498  0800eed4  00020498  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200006a8  0800eed4  000206a8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020498  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019c50  00000000  00000000  000204c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000030ce  00000000  00000000  0003a118  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001188  00000000  00000000  0003d1e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001020  00000000  00000000  0003e370  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028c5d  00000000  00000000  0003f390  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001815c  00000000  00000000  00067fed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f7e44  00000000  00000000  00080149  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00177f8d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005984  00000000  00000000  00177fe0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000498 	.word	0x20000498
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800e444 	.word	0x0800e444

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000049c 	.word	0x2000049c
 800020c:	0800e444 	.word	0x0800e444

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_uldivmod>:
 8000be8:	b953      	cbnz	r3, 8000c00 <__aeabi_uldivmod+0x18>
 8000bea:	b94a      	cbnz	r2, 8000c00 <__aeabi_uldivmod+0x18>
 8000bec:	2900      	cmp	r1, #0
 8000bee:	bf08      	it	eq
 8000bf0:	2800      	cmpeq	r0, #0
 8000bf2:	bf1c      	itt	ne
 8000bf4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bf8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bfc:	f000 b974 	b.w	8000ee8 <__aeabi_idiv0>
 8000c00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c08:	f000 f806 	bl	8000c18 <__udivmoddi4>
 8000c0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c14:	b004      	add	sp, #16
 8000c16:	4770      	bx	lr

08000c18 <__udivmoddi4>:
 8000c18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c1c:	9d08      	ldr	r5, [sp, #32]
 8000c1e:	4604      	mov	r4, r0
 8000c20:	468e      	mov	lr, r1
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d14d      	bne.n	8000cc2 <__udivmoddi4+0xaa>
 8000c26:	428a      	cmp	r2, r1
 8000c28:	4694      	mov	ip, r2
 8000c2a:	d969      	bls.n	8000d00 <__udivmoddi4+0xe8>
 8000c2c:	fab2 f282 	clz	r2, r2
 8000c30:	b152      	cbz	r2, 8000c48 <__udivmoddi4+0x30>
 8000c32:	fa01 f302 	lsl.w	r3, r1, r2
 8000c36:	f1c2 0120 	rsb	r1, r2, #32
 8000c3a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c3e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c42:	ea41 0e03 	orr.w	lr, r1, r3
 8000c46:	4094      	lsls	r4, r2
 8000c48:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c4c:	0c21      	lsrs	r1, r4, #16
 8000c4e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c52:	fa1f f78c 	uxth.w	r7, ip
 8000c56:	fb08 e316 	mls	r3, r8, r6, lr
 8000c5a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c5e:	fb06 f107 	mul.w	r1, r6, r7
 8000c62:	4299      	cmp	r1, r3
 8000c64:	d90a      	bls.n	8000c7c <__udivmoddi4+0x64>
 8000c66:	eb1c 0303 	adds.w	r3, ip, r3
 8000c6a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c6e:	f080 811f 	bcs.w	8000eb0 <__udivmoddi4+0x298>
 8000c72:	4299      	cmp	r1, r3
 8000c74:	f240 811c 	bls.w	8000eb0 <__udivmoddi4+0x298>
 8000c78:	3e02      	subs	r6, #2
 8000c7a:	4463      	add	r3, ip
 8000c7c:	1a5b      	subs	r3, r3, r1
 8000c7e:	b2a4      	uxth	r4, r4
 8000c80:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c84:	fb08 3310 	mls	r3, r8, r0, r3
 8000c88:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c8c:	fb00 f707 	mul.w	r7, r0, r7
 8000c90:	42a7      	cmp	r7, r4
 8000c92:	d90a      	bls.n	8000caa <__udivmoddi4+0x92>
 8000c94:	eb1c 0404 	adds.w	r4, ip, r4
 8000c98:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c9c:	f080 810a 	bcs.w	8000eb4 <__udivmoddi4+0x29c>
 8000ca0:	42a7      	cmp	r7, r4
 8000ca2:	f240 8107 	bls.w	8000eb4 <__udivmoddi4+0x29c>
 8000ca6:	4464      	add	r4, ip
 8000ca8:	3802      	subs	r0, #2
 8000caa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000cae:	1be4      	subs	r4, r4, r7
 8000cb0:	2600      	movs	r6, #0
 8000cb2:	b11d      	cbz	r5, 8000cbc <__udivmoddi4+0xa4>
 8000cb4:	40d4      	lsrs	r4, r2
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	e9c5 4300 	strd	r4, r3, [r5]
 8000cbc:	4631      	mov	r1, r6
 8000cbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cc2:	428b      	cmp	r3, r1
 8000cc4:	d909      	bls.n	8000cda <__udivmoddi4+0xc2>
 8000cc6:	2d00      	cmp	r5, #0
 8000cc8:	f000 80ef 	beq.w	8000eaa <__udivmoddi4+0x292>
 8000ccc:	2600      	movs	r6, #0
 8000cce:	e9c5 0100 	strd	r0, r1, [r5]
 8000cd2:	4630      	mov	r0, r6
 8000cd4:	4631      	mov	r1, r6
 8000cd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cda:	fab3 f683 	clz	r6, r3
 8000cde:	2e00      	cmp	r6, #0
 8000ce0:	d14a      	bne.n	8000d78 <__udivmoddi4+0x160>
 8000ce2:	428b      	cmp	r3, r1
 8000ce4:	d302      	bcc.n	8000cec <__udivmoddi4+0xd4>
 8000ce6:	4282      	cmp	r2, r0
 8000ce8:	f200 80f9 	bhi.w	8000ede <__udivmoddi4+0x2c6>
 8000cec:	1a84      	subs	r4, r0, r2
 8000cee:	eb61 0303 	sbc.w	r3, r1, r3
 8000cf2:	2001      	movs	r0, #1
 8000cf4:	469e      	mov	lr, r3
 8000cf6:	2d00      	cmp	r5, #0
 8000cf8:	d0e0      	beq.n	8000cbc <__udivmoddi4+0xa4>
 8000cfa:	e9c5 4e00 	strd	r4, lr, [r5]
 8000cfe:	e7dd      	b.n	8000cbc <__udivmoddi4+0xa4>
 8000d00:	b902      	cbnz	r2, 8000d04 <__udivmoddi4+0xec>
 8000d02:	deff      	udf	#255	; 0xff
 8000d04:	fab2 f282 	clz	r2, r2
 8000d08:	2a00      	cmp	r2, #0
 8000d0a:	f040 8092 	bne.w	8000e32 <__udivmoddi4+0x21a>
 8000d0e:	eba1 010c 	sub.w	r1, r1, ip
 8000d12:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d16:	fa1f fe8c 	uxth.w	lr, ip
 8000d1a:	2601      	movs	r6, #1
 8000d1c:	0c20      	lsrs	r0, r4, #16
 8000d1e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d22:	fb07 1113 	mls	r1, r7, r3, r1
 8000d26:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d2a:	fb0e f003 	mul.w	r0, lr, r3
 8000d2e:	4288      	cmp	r0, r1
 8000d30:	d908      	bls.n	8000d44 <__udivmoddi4+0x12c>
 8000d32:	eb1c 0101 	adds.w	r1, ip, r1
 8000d36:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d3a:	d202      	bcs.n	8000d42 <__udivmoddi4+0x12a>
 8000d3c:	4288      	cmp	r0, r1
 8000d3e:	f200 80cb 	bhi.w	8000ed8 <__udivmoddi4+0x2c0>
 8000d42:	4643      	mov	r3, r8
 8000d44:	1a09      	subs	r1, r1, r0
 8000d46:	b2a4      	uxth	r4, r4
 8000d48:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d4c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d50:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d54:	fb0e fe00 	mul.w	lr, lr, r0
 8000d58:	45a6      	cmp	lr, r4
 8000d5a:	d908      	bls.n	8000d6e <__udivmoddi4+0x156>
 8000d5c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d60:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d64:	d202      	bcs.n	8000d6c <__udivmoddi4+0x154>
 8000d66:	45a6      	cmp	lr, r4
 8000d68:	f200 80bb 	bhi.w	8000ee2 <__udivmoddi4+0x2ca>
 8000d6c:	4608      	mov	r0, r1
 8000d6e:	eba4 040e 	sub.w	r4, r4, lr
 8000d72:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d76:	e79c      	b.n	8000cb2 <__udivmoddi4+0x9a>
 8000d78:	f1c6 0720 	rsb	r7, r6, #32
 8000d7c:	40b3      	lsls	r3, r6
 8000d7e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d82:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d86:	fa20 f407 	lsr.w	r4, r0, r7
 8000d8a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d8e:	431c      	orrs	r4, r3
 8000d90:	40f9      	lsrs	r1, r7
 8000d92:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d96:	fa00 f306 	lsl.w	r3, r0, r6
 8000d9a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d9e:	0c20      	lsrs	r0, r4, #16
 8000da0:	fa1f fe8c 	uxth.w	lr, ip
 8000da4:	fb09 1118 	mls	r1, r9, r8, r1
 8000da8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dac:	fb08 f00e 	mul.w	r0, r8, lr
 8000db0:	4288      	cmp	r0, r1
 8000db2:	fa02 f206 	lsl.w	r2, r2, r6
 8000db6:	d90b      	bls.n	8000dd0 <__udivmoddi4+0x1b8>
 8000db8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dbc:	f108 3aff 	add.w	sl, r8, #4294967295
 8000dc0:	f080 8088 	bcs.w	8000ed4 <__udivmoddi4+0x2bc>
 8000dc4:	4288      	cmp	r0, r1
 8000dc6:	f240 8085 	bls.w	8000ed4 <__udivmoddi4+0x2bc>
 8000dca:	f1a8 0802 	sub.w	r8, r8, #2
 8000dce:	4461      	add	r1, ip
 8000dd0:	1a09      	subs	r1, r1, r0
 8000dd2:	b2a4      	uxth	r4, r4
 8000dd4:	fbb1 f0f9 	udiv	r0, r1, r9
 8000dd8:	fb09 1110 	mls	r1, r9, r0, r1
 8000ddc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000de0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000de4:	458e      	cmp	lr, r1
 8000de6:	d908      	bls.n	8000dfa <__udivmoddi4+0x1e2>
 8000de8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dec:	f100 34ff 	add.w	r4, r0, #4294967295
 8000df0:	d26c      	bcs.n	8000ecc <__udivmoddi4+0x2b4>
 8000df2:	458e      	cmp	lr, r1
 8000df4:	d96a      	bls.n	8000ecc <__udivmoddi4+0x2b4>
 8000df6:	3802      	subs	r0, #2
 8000df8:	4461      	add	r1, ip
 8000dfa:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000dfe:	fba0 9402 	umull	r9, r4, r0, r2
 8000e02:	eba1 010e 	sub.w	r1, r1, lr
 8000e06:	42a1      	cmp	r1, r4
 8000e08:	46c8      	mov	r8, r9
 8000e0a:	46a6      	mov	lr, r4
 8000e0c:	d356      	bcc.n	8000ebc <__udivmoddi4+0x2a4>
 8000e0e:	d053      	beq.n	8000eb8 <__udivmoddi4+0x2a0>
 8000e10:	b15d      	cbz	r5, 8000e2a <__udivmoddi4+0x212>
 8000e12:	ebb3 0208 	subs.w	r2, r3, r8
 8000e16:	eb61 010e 	sbc.w	r1, r1, lr
 8000e1a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e1e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e22:	40f1      	lsrs	r1, r6
 8000e24:	431f      	orrs	r7, r3
 8000e26:	e9c5 7100 	strd	r7, r1, [r5]
 8000e2a:	2600      	movs	r6, #0
 8000e2c:	4631      	mov	r1, r6
 8000e2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e32:	f1c2 0320 	rsb	r3, r2, #32
 8000e36:	40d8      	lsrs	r0, r3
 8000e38:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e3c:	fa21 f303 	lsr.w	r3, r1, r3
 8000e40:	4091      	lsls	r1, r2
 8000e42:	4301      	orrs	r1, r0
 8000e44:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e48:	fa1f fe8c 	uxth.w	lr, ip
 8000e4c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e50:	fb07 3610 	mls	r6, r7, r0, r3
 8000e54:	0c0b      	lsrs	r3, r1, #16
 8000e56:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e5a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e5e:	429e      	cmp	r6, r3
 8000e60:	fa04 f402 	lsl.w	r4, r4, r2
 8000e64:	d908      	bls.n	8000e78 <__udivmoddi4+0x260>
 8000e66:	eb1c 0303 	adds.w	r3, ip, r3
 8000e6a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e6e:	d22f      	bcs.n	8000ed0 <__udivmoddi4+0x2b8>
 8000e70:	429e      	cmp	r6, r3
 8000e72:	d92d      	bls.n	8000ed0 <__udivmoddi4+0x2b8>
 8000e74:	3802      	subs	r0, #2
 8000e76:	4463      	add	r3, ip
 8000e78:	1b9b      	subs	r3, r3, r6
 8000e7a:	b289      	uxth	r1, r1
 8000e7c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e80:	fb07 3316 	mls	r3, r7, r6, r3
 8000e84:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e88:	fb06 f30e 	mul.w	r3, r6, lr
 8000e8c:	428b      	cmp	r3, r1
 8000e8e:	d908      	bls.n	8000ea2 <__udivmoddi4+0x28a>
 8000e90:	eb1c 0101 	adds.w	r1, ip, r1
 8000e94:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e98:	d216      	bcs.n	8000ec8 <__udivmoddi4+0x2b0>
 8000e9a:	428b      	cmp	r3, r1
 8000e9c:	d914      	bls.n	8000ec8 <__udivmoddi4+0x2b0>
 8000e9e:	3e02      	subs	r6, #2
 8000ea0:	4461      	add	r1, ip
 8000ea2:	1ac9      	subs	r1, r1, r3
 8000ea4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000ea8:	e738      	b.n	8000d1c <__udivmoddi4+0x104>
 8000eaa:	462e      	mov	r6, r5
 8000eac:	4628      	mov	r0, r5
 8000eae:	e705      	b.n	8000cbc <__udivmoddi4+0xa4>
 8000eb0:	4606      	mov	r6, r0
 8000eb2:	e6e3      	b.n	8000c7c <__udivmoddi4+0x64>
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	e6f8      	b.n	8000caa <__udivmoddi4+0x92>
 8000eb8:	454b      	cmp	r3, r9
 8000eba:	d2a9      	bcs.n	8000e10 <__udivmoddi4+0x1f8>
 8000ebc:	ebb9 0802 	subs.w	r8, r9, r2
 8000ec0:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000ec4:	3801      	subs	r0, #1
 8000ec6:	e7a3      	b.n	8000e10 <__udivmoddi4+0x1f8>
 8000ec8:	4646      	mov	r6, r8
 8000eca:	e7ea      	b.n	8000ea2 <__udivmoddi4+0x28a>
 8000ecc:	4620      	mov	r0, r4
 8000ece:	e794      	b.n	8000dfa <__udivmoddi4+0x1e2>
 8000ed0:	4640      	mov	r0, r8
 8000ed2:	e7d1      	b.n	8000e78 <__udivmoddi4+0x260>
 8000ed4:	46d0      	mov	r8, sl
 8000ed6:	e77b      	b.n	8000dd0 <__udivmoddi4+0x1b8>
 8000ed8:	3b02      	subs	r3, #2
 8000eda:	4461      	add	r1, ip
 8000edc:	e732      	b.n	8000d44 <__udivmoddi4+0x12c>
 8000ede:	4630      	mov	r0, r6
 8000ee0:	e709      	b.n	8000cf6 <__udivmoddi4+0xde>
 8000ee2:	4464      	add	r4, ip
 8000ee4:	3802      	subs	r0, #2
 8000ee6:	e742      	b.n	8000d6e <__udivmoddi4+0x156>

08000ee8 <__aeabi_idiv0>:
 8000ee8:	4770      	bx	lr
 8000eea:	bf00      	nop

08000eec <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b08a      	sub	sp, #40	; 0x28
 8000ef0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ef2:	f107 0314 	add.w	r3, r7, #20
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	601a      	str	r2, [r3, #0]
 8000efa:	605a      	str	r2, [r3, #4]
 8000efc:	609a      	str	r2, [r3, #8]
 8000efe:	60da      	str	r2, [r3, #12]
 8000f00:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f02:	4b23      	ldr	r3, [pc, #140]	; (8000f90 <MX_GPIO_Init+0xa4>)
 8000f04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f06:	4a22      	ldr	r2, [pc, #136]	; (8000f90 <MX_GPIO_Init+0xa4>)
 8000f08:	f043 0302 	orr.w	r3, r3, #2
 8000f0c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f0e:	4b20      	ldr	r3, [pc, #128]	; (8000f90 <MX_GPIO_Init+0xa4>)
 8000f10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f12:	f003 0302 	and.w	r3, r3, #2
 8000f16:	613b      	str	r3, [r7, #16]
 8000f18:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000f1a:	4b1d      	ldr	r3, [pc, #116]	; (8000f90 <MX_GPIO_Init+0xa4>)
 8000f1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f1e:	4a1c      	ldr	r2, [pc, #112]	; (8000f90 <MX_GPIO_Init+0xa4>)
 8000f20:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f24:	6313      	str	r3, [r2, #48]	; 0x30
 8000f26:	4b1a      	ldr	r3, [pc, #104]	; (8000f90 <MX_GPIO_Init+0xa4>)
 8000f28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f2e:	60fb      	str	r3, [r7, #12]
 8000f30:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f32:	4b17      	ldr	r3, [pc, #92]	; (8000f90 <MX_GPIO_Init+0xa4>)
 8000f34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f36:	4a16      	ldr	r2, [pc, #88]	; (8000f90 <MX_GPIO_Init+0xa4>)
 8000f38:	f043 0301 	orr.w	r3, r3, #1
 8000f3c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f3e:	4b14      	ldr	r3, [pc, #80]	; (8000f90 <MX_GPIO_Init+0xa4>)
 8000f40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f42:	f003 0301 	and.w	r3, r3, #1
 8000f46:	60bb      	str	r3, [r7, #8]
 8000f48:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000f4a:	4b11      	ldr	r3, [pc, #68]	; (8000f90 <MX_GPIO_Init+0xa4>)
 8000f4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f4e:	4a10      	ldr	r2, [pc, #64]	; (8000f90 <MX_GPIO_Init+0xa4>)
 8000f50:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f54:	6313      	str	r3, [r2, #48]	; 0x30
 8000f56:	4b0e      	ldr	r3, [pc, #56]	; (8000f90 <MX_GPIO_Init+0xa4>)
 8000f58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f5e:	607b      	str	r3, [r7, #4]
 8000f60:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, GPIO_PIN_1, GPIO_PIN_RESET);
 8000f62:	2200      	movs	r2, #0
 8000f64:	2102      	movs	r1, #2
 8000f66:	480b      	ldr	r0, [pc, #44]	; (8000f94 <MX_GPIO_Init+0xa8>)
 8000f68:	f001 fbf4 	bl	8002754 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PI1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000f6c:	2302      	movs	r3, #2
 8000f6e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f70:	2301      	movs	r3, #1
 8000f72:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f74:	2300      	movs	r3, #0
 8000f76:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8000f78:	2301      	movs	r3, #1
 8000f7a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000f7c:	f107 0314 	add.w	r3, r7, #20
 8000f80:	4619      	mov	r1, r3
 8000f82:	4804      	ldr	r0, [pc, #16]	; (8000f94 <MX_GPIO_Init+0xa8>)
 8000f84:	f001 f876 	bl	8002074 <HAL_GPIO_Init>

}
 8000f88:	bf00      	nop
 8000f8a:	3728      	adds	r7, #40	; 0x28
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	bd80      	pop	{r7, pc}
 8000f90:	40023800 	.word	0x40023800
 8000f94:	40022000 	.word	0x40022000

08000f98 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000f9c:	4b1b      	ldr	r3, [pc, #108]	; (800100c <MX_I2C1_Init+0x74>)
 8000f9e:	4a1c      	ldr	r2, [pc, #112]	; (8001010 <MX_I2C1_Init+0x78>)
 8000fa0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x6000030D;
 8000fa2:	4b1a      	ldr	r3, [pc, #104]	; (800100c <MX_I2C1_Init+0x74>)
 8000fa4:	4a1b      	ldr	r2, [pc, #108]	; (8001014 <MX_I2C1_Init+0x7c>)
 8000fa6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000fa8:	4b18      	ldr	r3, [pc, #96]	; (800100c <MX_I2C1_Init+0x74>)
 8000faa:	2200      	movs	r2, #0
 8000fac:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000fae:	4b17      	ldr	r3, [pc, #92]	; (800100c <MX_I2C1_Init+0x74>)
 8000fb0:	2201      	movs	r2, #1
 8000fb2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000fb4:	4b15      	ldr	r3, [pc, #84]	; (800100c <MX_I2C1_Init+0x74>)
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000fba:	4b14      	ldr	r3, [pc, #80]	; (800100c <MX_I2C1_Init+0x74>)
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000fc0:	4b12      	ldr	r3, [pc, #72]	; (800100c <MX_I2C1_Init+0x74>)
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000fc6:	4b11      	ldr	r3, [pc, #68]	; (800100c <MX_I2C1_Init+0x74>)
 8000fc8:	2200      	movs	r2, #0
 8000fca:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000fcc:	4b0f      	ldr	r3, [pc, #60]	; (800100c <MX_I2C1_Init+0x74>)
 8000fce:	2200      	movs	r2, #0
 8000fd0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000fd2:	480e      	ldr	r0, [pc, #56]	; (800100c <MX_I2C1_Init+0x74>)
 8000fd4:	f001 fbea 	bl	80027ac <HAL_I2C_Init>
 8000fd8:	4603      	mov	r3, r0
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d001      	beq.n	8000fe2 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000fde:	f000 fbd3 	bl	8001788 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000fe2:	2100      	movs	r1, #0
 8000fe4:	4809      	ldr	r0, [pc, #36]	; (800100c <MX_I2C1_Init+0x74>)
 8000fe6:	f002 f9a3 	bl	8003330 <HAL_I2CEx_ConfigAnalogFilter>
 8000fea:	4603      	mov	r3, r0
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d001      	beq.n	8000ff4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000ff0:	f000 fbca 	bl	8001788 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000ff4:	2100      	movs	r1, #0
 8000ff6:	4805      	ldr	r0, [pc, #20]	; (800100c <MX_I2C1_Init+0x74>)
 8000ff8:	f002 fa10 	bl	800341c <HAL_I2CEx_ConfigDigitalFilter>
 8000ffc:	4603      	mov	r3, r0
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d001      	beq.n	8001006 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001002:	f000 fbc1 	bl	8001788 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001006:	bf00      	nop
 8001008:	bd80      	pop	{r7, pc}
 800100a:	bf00      	nop
 800100c:	20000514 	.word	0x20000514
 8001010:	40005400 	.word	0x40005400
 8001014:	6000030d 	.word	0x6000030d

08001018 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	b0aa      	sub	sp, #168	; 0xa8
 800101c:	af00      	add	r7, sp, #0
 800101e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001020:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001024:	2200      	movs	r2, #0
 8001026:	601a      	str	r2, [r3, #0]
 8001028:	605a      	str	r2, [r3, #4]
 800102a:	609a      	str	r2, [r3, #8]
 800102c:	60da      	str	r2, [r3, #12]
 800102e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001030:	f107 0310 	add.w	r3, r7, #16
 8001034:	2284      	movs	r2, #132	; 0x84
 8001036:	2100      	movs	r1, #0
 8001038:	4618      	mov	r0, r3
 800103a:	f00a fb1d 	bl	800b678 <memset>
  if(i2cHandle->Instance==I2C1)
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	4a22      	ldr	r2, [pc, #136]	; (80010cc <HAL_I2C_MspInit+0xb4>)
 8001044:	4293      	cmp	r3, r2
 8001046:	d13c      	bne.n	80010c2 <HAL_I2C_MspInit+0xaa>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001048:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800104c:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800104e:	2300      	movs	r3, #0
 8001050:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001052:	f107 0310 	add.w	r3, r7, #16
 8001056:	4618      	mov	r0, r3
 8001058:	f003 f8a0 	bl	800419c <HAL_RCCEx_PeriphCLKConfig>
 800105c:	4603      	mov	r3, r0
 800105e:	2b00      	cmp	r3, #0
 8001060:	d001      	beq.n	8001066 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8001062:	f000 fb91 	bl	8001788 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001066:	4b1a      	ldr	r3, [pc, #104]	; (80010d0 <HAL_I2C_MspInit+0xb8>)
 8001068:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800106a:	4a19      	ldr	r2, [pc, #100]	; (80010d0 <HAL_I2C_MspInit+0xb8>)
 800106c:	f043 0302 	orr.w	r3, r3, #2
 8001070:	6313      	str	r3, [r2, #48]	; 0x30
 8001072:	4b17      	ldr	r3, [pc, #92]	; (80010d0 <HAL_I2C_MspInit+0xb8>)
 8001074:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001076:	f003 0302 	and.w	r3, r3, #2
 800107a:	60fb      	str	r3, [r7, #12]
 800107c:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800107e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001082:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001086:	2312      	movs	r3, #18
 8001088:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800108c:	2300      	movs	r3, #0
 800108e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001092:	2303      	movs	r3, #3
 8001094:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001098:	2304      	movs	r3, #4
 800109a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800109e:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80010a2:	4619      	mov	r1, r3
 80010a4:	480b      	ldr	r0, [pc, #44]	; (80010d4 <HAL_I2C_MspInit+0xbc>)
 80010a6:	f000 ffe5 	bl	8002074 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80010aa:	4b09      	ldr	r3, [pc, #36]	; (80010d0 <HAL_I2C_MspInit+0xb8>)
 80010ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010ae:	4a08      	ldr	r2, [pc, #32]	; (80010d0 <HAL_I2C_MspInit+0xb8>)
 80010b0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80010b4:	6413      	str	r3, [r2, #64]	; 0x40
 80010b6:	4b06      	ldr	r3, [pc, #24]	; (80010d0 <HAL_I2C_MspInit+0xb8>)
 80010b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010ba:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80010be:	60bb      	str	r3, [r7, #8]
 80010c0:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80010c2:	bf00      	nop
 80010c4:	37a8      	adds	r7, #168	; 0xa8
 80010c6:	46bd      	mov	sp, r7
 80010c8:	bd80      	pop	{r7, pc}
 80010ca:	bf00      	nop
 80010cc:	40005400 	.word	0x40005400
 80010d0:	40023800 	.word	0x40023800
 80010d4:	40020400 	.word	0x40020400

080010d8 <KalmanFilter_Init>:
 */


#include "kalman.h"

void KalmanFilter_Init(KalmanFilter *filter, float Q, float R) {
 80010d8:	b480      	push	{r7}
 80010da:	b085      	sub	sp, #20
 80010dc:	af00      	add	r7, sp, #0
 80010de:	60f8      	str	r0, [r7, #12]
 80010e0:	ed87 0a02 	vstr	s0, [r7, #8]
 80010e4:	edc7 0a01 	vstr	s1, [r7, #4]
    filter->Q = Q;
 80010e8:	68fb      	ldr	r3, [r7, #12]
 80010ea:	68ba      	ldr	r2, [r7, #8]
 80010ec:	601a      	str	r2, [r3, #0]
    filter->R = R;
 80010ee:	68fb      	ldr	r3, [r7, #12]
 80010f0:	687a      	ldr	r2, [r7, #4]
 80010f2:	605a      	str	r2, [r3, #4]
    filter->P = 0;
 80010f4:	68fb      	ldr	r3, [r7, #12]
 80010f6:	f04f 0200 	mov.w	r2, #0
 80010fa:	609a      	str	r2, [r3, #8]
    filter->K = 0;
 80010fc:	68fb      	ldr	r3, [r7, #12]
 80010fe:	f04f 0200 	mov.w	r2, #0
 8001102:	60da      	str	r2, [r3, #12]
    filter->X = 0;
 8001104:	68fb      	ldr	r3, [r7, #12]
 8001106:	f04f 0200 	mov.w	r2, #0
 800110a:	611a      	str	r2, [r3, #16]
}
 800110c:	bf00      	nop
 800110e:	3714      	adds	r7, #20
 8001110:	46bd      	mov	sp, r7
 8001112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001116:	4770      	bx	lr

08001118 <KalmanFilter_Update>:

float KalmanFilter_Update(KalmanFilter *filter, float measurement) {
 8001118:	b480      	push	{r7}
 800111a:	b083      	sub	sp, #12
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]
 8001120:	ed87 0a00 	vstr	s0, [r7]
    filter->P += filter->Q;
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	ed93 7a02 	vldr	s14, [r3, #8]
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	edd3 7a00 	vldr	s15, [r3]
 8001130:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	edc3 7a02 	vstr	s15, [r3, #8]
    filter->K = filter->P / (filter->P + filter->R);
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	edd3 6a02 	vldr	s13, [r3, #8]
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	ed93 7a02 	vldr	s14, [r3, #8]
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	edd3 7a01 	vldr	s15, [r3, #4]
 800114c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001150:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	edc3 7a03 	vstr	s15, [r3, #12]
    filter->X += filter->K * (measurement - filter->X);
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	ed93 7a04 	vldr	s14, [r3, #16]
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	edd3 6a03 	vldr	s13, [r3, #12]
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	edd3 7a04 	vldr	s15, [r3, #16]
 800116c:	ed97 6a00 	vldr	s12, [r7]
 8001170:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001174:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001178:	ee77 7a27 	vadd.f32	s15, s14, s15
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	edc3 7a04 	vstr	s15, [r3, #16]
    filter->P *= (1.0f - filter->K);
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	ed93 7a02 	vldr	s14, [r3, #8]
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	edd3 7a03 	vldr	s15, [r3, #12]
 800118e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001192:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001196:	ee67 7a27 	vmul.f32	s15, s14, s15
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	edc3 7a02 	vstr	s15, [r3, #8]
    return filter->X;
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	691b      	ldr	r3, [r3, #16]
 80011a4:	ee07 3a90 	vmov	s15, r3
}
 80011a8:	eeb0 0a67 	vmov.f32	s0, s15
 80011ac:	370c      	adds	r7, #12
 80011ae:	46bd      	mov	sp, r7
 80011b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b4:	4770      	bx	lr
	...

080011b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	f5ad 6ddf 	sub.w	sp, sp, #1784	; 0x6f8
 80011be:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80011c0:	f000 fd05 	bl	8001bce <HAL_Init>
  /* USER CODE BEGIN Init */


	// VL53L0X initialization stuff
	//
	uint32_t refSpadCount = 0;
 80011c4:	2300      	movs	r3, #0
 80011c6:	f8c7 36bc 	str.w	r3, [r7, #1724]	; 0x6bc
	uint8_t isApertureSpads = 0;
 80011ca:	2300      	movs	r3, #0
 80011cc:	f887 36bb 	strb.w	r3, [r7, #1723]	; 0x6bb
	uint8_t VhvSettings = 0;
 80011d0:	2300      	movs	r3, #0
 80011d2:	f887 36ba 	strb.w	r3, [r7, #1722]	; 0x6ba
	uint8_t PhaseCal = 0;
 80011d6:	2300      	movs	r3, #0
 80011d8:	f887 36b9 	strb.w	r3, [r7, #1721]	; 0x6b9
	VL53L0X_Dev_t vl53l0x_s[NUM_SENSOR];
//	VL53L0X_Dev_t vl53l0x_s;

	VL53L0X_DEV Dev;
	KalmanFilter kalman_filters[NUM_SENSOR];
	uint16_t distance[NUM_SENSOR] = {0,};
 80011dc:	f507 63de 	add.w	r3, r7, #1776	; 0x6f0
 80011e0:	f5a3 63da 	sub.w	r3, r3, #1744	; 0x6d0
 80011e4:	461a      	mov	r2, r3
 80011e6:	2300      	movs	r3, #0
 80011e8:	6013      	str	r3, [r2, #0]
 80011ea:	6053      	str	r3, [r2, #4]
	float filtered_distance[NUM_SENSOR] = {0,};
 80011ec:	f507 63de 	add.w	r3, r7, #1776	; 0x6f0
 80011f0:	f5a3 63dc 	sub.w	r3, r3, #1760	; 0x6e0
 80011f4:	461a      	mov	r2, r3
 80011f6:	2300      	movs	r3, #0
 80011f8:	6013      	str	r3, [r2, #0]
 80011fa:	6053      	str	r3, [r2, #4]
 80011fc:	6093      	str	r3, [r2, #8]
 80011fe:	60d3      	str	r3, [r2, #12]



	uint8_t tca_ch[8] = {0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80}; // control register of TCA9548A
 8001200:	f507 63de 	add.w	r3, r7, #1776	; 0x6f0
 8001204:	f5a3 63dd 	sub.w	r3, r3, #1768	; 0x6e8
 8001208:	4acb      	ldr	r2, [pc, #812]	; (8001538 <main+0x380>)
 800120a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800120e:	e883 0003 	stmia.w	r3, {r0, r1}
	//uint8_t tca_ch[8] = {0b00000001, 0b00000010, 0b00000100, 0b00001000, 0b00010000, 0b00100000, 0b01000000, 0b10000000};
	uint8_t tca_ch_reset = 0x00;
 8001212:	f507 63de 	add.w	r3, r7, #1776	; 0x6f0
 8001216:	f2a3 63e9 	subw	r3, r3, #1769	; 0x6e9
 800121a:	2200      	movs	r2, #0
 800121c:	701a      	strb	r2, [r3, #0]
	//uint8_t tca_ch_reset = 0b00000000;
    uint8_t tca_addr[] = {0x70,0x71,0x72};
 800121e:	f507 63de 	add.w	r3, r7, #1776	; 0x6f0
 8001222:	f2a3 63ec 	subw	r3, r3, #1772	; 0x6ec
 8001226:	4ac5      	ldr	r2, [pc, #788]	; (800153c <main+0x384>)
 8001228:	6812      	ldr	r2, [r2, #0]
 800122a:	4611      	mov	r1, r2
 800122c:	8019      	strh	r1, [r3, #0]
 800122e:	3302      	adds	r3, #2
 8001230:	0c12      	lsrs	r2, r2, #16
 8001232:	701a      	strb	r2, [r3, #0]


  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001234:	f000 fa3a 	bl	80016ac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001238:	f7ff fe58 	bl	8000eec <MX_GPIO_Init>
  MX_I2C1_Init();
 800123c:	f7ff feac 	bl	8000f98 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8001240:	f000 fbe2 	bl	8001a08 <MX_USART1_UART_Init>




  /* UART interrupt initialization */
  MessageLen = sprintf((char*)Message, "JH VL53L0X test\n\r");
 8001244:	49be      	ldr	r1, [pc, #760]	; (8001540 <main+0x388>)
 8001246:	48bf      	ldr	r0, [pc, #764]	; (8001544 <main+0x38c>)
 8001248:	f00a fe88 	bl	800bf5c <siprintf>
 800124c:	4603      	mov	r3, r0
 800124e:	b2da      	uxtb	r2, r3
 8001250:	4bbd      	ldr	r3, [pc, #756]	; (8001548 <main+0x390>)
 8001252:	701a      	strb	r2, [r3, #0]

  HAL_UART_Transmit(&huart1, Message, MessageLen, 100);
 8001254:	4bbc      	ldr	r3, [pc, #752]	; (8001548 <main+0x390>)
 8001256:	781b      	ldrb	r3, [r3, #0]
 8001258:	b29a      	uxth	r2, r3
 800125a:	2364      	movs	r3, #100	; 0x64
 800125c:	49b9      	ldr	r1, [pc, #740]	; (8001544 <main+0x38c>)
 800125e:	48bb      	ldr	r0, [pc, #748]	; (800154c <main+0x394>)
 8001260:	f004 f840 	bl	80052e4 <HAL_UART_Transmit>



		for (int i = 0; i < sizeof(tca_addr); i++) {
 8001264:	2300      	movs	r3, #0
 8001266:	f8c7 36ec 	str.w	r3, [r7, #1772]	; 0x6ec
 800126a:	e017      	b.n	800129c <main+0xe4>
		    HAL_I2C_Master_Transmit(&hi2c1, tca_addr[i] << 1, &tca_ch_reset, 1, 1000);
 800126c:	f507 63de 	add.w	r3, r7, #1776	; 0x6f0
 8001270:	f2a3 62ec 	subw	r2, r3, #1772	; 0x6ec
 8001274:	f8d7 36ec 	ldr.w	r3, [r7, #1772]	; 0x6ec
 8001278:	4413      	add	r3, r2
 800127a:	781b      	ldrb	r3, [r3, #0]
 800127c:	b29b      	uxth	r3, r3
 800127e:	005b      	lsls	r3, r3, #1
 8001280:	b299      	uxth	r1, r3
 8001282:	1dfa      	adds	r2, r7, #7
 8001284:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001288:	9300      	str	r3, [sp, #0]
 800128a:	2301      	movs	r3, #1
 800128c:	48b0      	ldr	r0, [pc, #704]	; (8001550 <main+0x398>)
 800128e:	f001 fbaf 	bl	80029f0 <HAL_I2C_Master_Transmit>
		for (int i = 0; i < sizeof(tca_addr); i++) {
 8001292:	f8d7 36ec 	ldr.w	r3, [r7, #1772]	; 0x6ec
 8001296:	3301      	adds	r3, #1
 8001298:	f8c7 36ec 	str.w	r3, [r7, #1772]	; 0x6ec
 800129c:	f8d7 36ec 	ldr.w	r3, [r7, #1772]	; 0x6ec
 80012a0:	2b02      	cmp	r3, #2
 80012a2:	d9e3      	bls.n	800126c <main+0xb4>
		}

		for (int i = 0; i < NUM_SENSOR; i++) {
 80012a4:	2300      	movs	r3, #0
 80012a6:	f8c7 36e8 	str.w	r3, [r7, #1768]	; 0x6e8
 80012aa:	e0da      	b.n	8001462 <main+0x2aa>

			uint8_t q = i / 8;
 80012ac:	f8d7 36e8 	ldr.w	r3, [r7, #1768]	; 0x6e8
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	da00      	bge.n	80012b6 <main+0xfe>
 80012b4:	3307      	adds	r3, #7
 80012b6:	10db      	asrs	r3, r3, #3
 80012b8:	f887 36cf 	strb.w	r3, [r7, #1743]	; 0x6cf
			uint8_t r = i % 8;
 80012bc:	f8d7 36e8 	ldr.w	r3, [r7, #1768]	; 0x6e8
 80012c0:	425a      	negs	r2, r3
 80012c2:	f003 0307 	and.w	r3, r3, #7
 80012c6:	f002 0207 	and.w	r2, r2, #7
 80012ca:	bf58      	it	pl
 80012cc:	4253      	negpl	r3, r2
 80012ce:	f887 36ce 	strb.w	r3, [r7, #1742]	; 0x6ce

		    for (int j = 0; j < sizeof(tca_addr); j++) {
 80012d2:	2300      	movs	r3, #0
 80012d4:	f8c7 36e4 	str.w	r3, [r7, #1764]	; 0x6e4
 80012d8:	e027      	b.n	800132a <main+0x172>
		        uint8_t *channel = (j == q) ? &tca_ch[r] : &tca_ch_reset;
 80012da:	f897 36cf 	ldrb.w	r3, [r7, #1743]	; 0x6cf
 80012de:	f8d7 26e4 	ldr.w	r2, [r7, #1764]	; 0x6e4
 80012e2:	429a      	cmp	r2, r3
 80012e4:	d105      	bne.n	80012f2 <main+0x13a>
 80012e6:	f897 36ce 	ldrb.w	r3, [r7, #1742]	; 0x6ce
 80012ea:	f107 0208 	add.w	r2, r7, #8
 80012ee:	4413      	add	r3, r2
 80012f0:	e000      	b.n	80012f4 <main+0x13c>
 80012f2:	1dfb      	adds	r3, r7, #7
 80012f4:	f8c7 36c0 	str.w	r3, [r7, #1728]	; 0x6c0
		        HAL_I2C_Master_Transmit(&hi2c1, tca_addr[j] << 1, channel, 1, 1000);
 80012f8:	f507 63de 	add.w	r3, r7, #1776	; 0x6f0
 80012fc:	f2a3 62ec 	subw	r2, r3, #1772	; 0x6ec
 8001300:	f8d7 36e4 	ldr.w	r3, [r7, #1764]	; 0x6e4
 8001304:	4413      	add	r3, r2
 8001306:	781b      	ldrb	r3, [r3, #0]
 8001308:	b29b      	uxth	r3, r3
 800130a:	005b      	lsls	r3, r3, #1
 800130c:	b299      	uxth	r1, r3
 800130e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001312:	9300      	str	r3, [sp, #0]
 8001314:	2301      	movs	r3, #1
 8001316:	f8d7 26c0 	ldr.w	r2, [r7, #1728]	; 0x6c0
 800131a:	488d      	ldr	r0, [pc, #564]	; (8001550 <main+0x398>)
 800131c:	f001 fb68 	bl	80029f0 <HAL_I2C_Master_Transmit>
		    for (int j = 0; j < sizeof(tca_addr); j++) {
 8001320:	f8d7 36e4 	ldr.w	r3, [r7, #1764]	; 0x6e4
 8001324:	3301      	adds	r3, #1
 8001326:	f8c7 36e4 	str.w	r3, [r7, #1764]	; 0x6e4
 800132a:	f8d7 36e4 	ldr.w	r3, [r7, #1764]	; 0x6e4
 800132e:	2b02      	cmp	r3, #2
 8001330:	d9d3      	bls.n	80012da <main+0x122>
		    }

			Dev = &vl53l0x_s[i];
 8001332:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8001336:	f8d7 36e8 	ldr.w	r3, [r7, #1768]	; 0x6e8
 800133a:	f44f 71c8 	mov.w	r1, #400	; 0x190
 800133e:	fb01 f303 	mul.w	r3, r1, r3
 8001342:	4413      	add	r3, r2
 8001344:	f8c7 36d4 	str.w	r3, [r7, #1748]	; 0x6d4
			Dev->I2cHandle = &hi2c1;
 8001348:	f8d7 36d4 	ldr.w	r3, [r7, #1748]	; 0x6d4
 800134c:	4a80      	ldr	r2, [pc, #512]	; (8001550 <main+0x398>)
 800134e:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
			Dev->I2cDevAddr = VL53L0X_ADDR;
 8001352:	f8d7 36d4 	ldr.w	r3, [r7, #1748]	; 0x6d4
 8001356:	2252      	movs	r2, #82	; 0x52
 8001358:	f883 2160 	strb.w	r2, [r3, #352]	; 0x160

			VL53L0X_WaitDeviceBooted( Dev );
 800135c:	f8d7 06d4 	ldr.w	r0, [r7, #1748]	; 0x6d4
 8001360:	f005 fc1e 	bl	8006ba0 <VL53L0X_WaitDeviceBooted>
			VL53L0X_DataInit( Dev );
 8001364:	f8d7 06d4 	ldr.w	r0, [r7, #1748]	; 0x6d4
 8001368:	f005 f934 	bl	80065d4 <VL53L0X_DataInit>
			VL53L0X_StaticInit( Dev );
 800136c:	f8d7 06d4 	ldr.w	r0, [r7, #1748]	; 0x6d4
 8001370:	f005 fa94 	bl	800689c <VL53L0X_StaticInit>
			VL53L0X_SetDeviceMode(Dev, VL53L0X_DEVICEMODE_CONTINUOUS_RANGING);
 8001374:	2101      	movs	r1, #1
 8001376:	f8d7 06d4 	ldr.w	r0, [r7, #1748]	; 0x6d4
 800137a:	f005 fcaf 	bl	8006cdc <VL53L0X_SetDeviceMode>
			VL53L0X_PerformRefCalibration( Dev, &VhvSettings, &PhaseCal);
 800137e:	f207 62b9 	addw	r2, r7, #1721	; 0x6b9
 8001382:	f207 63ba 	addw	r3, r7, #1722	; 0x6ba
 8001386:	4619      	mov	r1, r3
 8001388:	f8d7 06d4 	ldr.w	r0, [r7, #1748]	; 0x6d4
 800138c:	f006 f928 	bl	80075e0 <VL53L0X_PerformRefCalibration>
			VL53L0X_PerformRefSpadManagement( Dev, &refSpadCount, &isApertureSpads);
 8001390:	f207 62bb 	addw	r2, r7, #1723	; 0x6bb
 8001394:	f207 63bc 	addw	r3, r7, #1724	; 0x6bc
 8001398:	4619      	mov	r1, r3
 800139a:	f8d7 06d4 	ldr.w	r0, [r7, #1748]	; 0x6d4
 800139e:	f006 fdad 	bl	8007efc <VL53L0X_PerformRefSpadManagement>
			VL53L0X_SetLimitCheckEnable( Dev, VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, 1);
 80013a2:	2201      	movs	r2, #1
 80013a4:	2100      	movs	r1, #0
 80013a6:	f8d7 06d4 	ldr.w	r0, [r7, #1748]	; 0x6d4
 80013aa:	f005 ff13 	bl	80071d4 <VL53L0X_SetLimitCheckEnable>
			VL53L0X_SetLimitCheckEnable( Dev, VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE, 1);
 80013ae:	2201      	movs	r2, #1
 80013b0:	2101      	movs	r1, #1
 80013b2:	f8d7 06d4 	ldr.w	r0, [r7, #1748]	; 0x6d4
 80013b6:	f005 ff0d 	bl	80071d4 <VL53L0X_SetLimitCheckEnable>
			VL53L0X_SetLimitCheckValue( Dev, VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE, (FixPoint1616_t)(0.1*65536));
 80013ba:	f641 1299 	movw	r2, #6553	; 0x1999
 80013be:	2101      	movs	r1, #1
 80013c0:	f8d7 06d4 	ldr.w	r0, [r7, #1748]	; 0x6d4
 80013c4:	f005 ffb6 	bl	8007334 <VL53L0X_SetLimitCheckValue>
			VL53L0X_SetLimitCheckValue( Dev, VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, (FixPoint1616_t)(60*65536));
 80013c8:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 80013cc:	2100      	movs	r1, #0
 80013ce:	f8d7 06d4 	ldr.w	r0, [r7, #1748]	; 0x6d4
 80013d2:	f005 ffaf 	bl	8007334 <VL53L0X_SetLimitCheckValue>
			VL53L0X_SetMeasurementTimingBudgetMicroSeconds( Dev, 33000);
 80013d6:	f248 01e8 	movw	r1, #33000	; 0x80e8
 80013da:	f8d7 06d4 	ldr.w	r0, [r7, #1748]	; 0x6d4
 80013de:	f005 fcdb 	bl	8006d98 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>
			VL53L0X_SetVcselPulsePeriod( Dev, VL53L0X_VCSEL_PERIOD_PRE_RANGE, 18);
 80013e2:	2212      	movs	r2, #18
 80013e4:	2100      	movs	r1, #0
 80013e6:	f8d7 06d4 	ldr.w	r0, [r7, #1748]	; 0x6d4
 80013ea:	f005 fcfb 	bl	8006de4 <VL53L0X_SetVcselPulsePeriod>
			VL53L0X_SetVcselPulsePeriod( Dev, VL53L0X_VCSEL_PERIOD_FINAL_RANGE, 14);
 80013ee:	220e      	movs	r2, #14
 80013f0:	2101      	movs	r1, #1
 80013f2:	f8d7 06d4 	ldr.w	r0, [r7, #1748]	; 0x6d4
 80013f6:	f005 fcf5 	bl	8006de4 <VL53L0X_SetVcselPulsePeriod>


			// KalmanFilter initializer BEGIN //
			float Q = 0.1f; // Process noise covariance
 80013fa:	4b56      	ldr	r3, [pc, #344]	; (8001554 <main+0x39c>)
 80013fc:	f507 62d9 	add.w	r2, r7, #1736	; 0x6c8
 8001400:	6013      	str	r3, [r2, #0]
			float R = 1.0f;   // Measurement noise covariance
 8001402:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001406:	f207 62c4 	addw	r2, r7, #1732	; 0x6c4
 800140a:	6013      	str	r3, [r2, #0]
			KalmanFilter_Init(&kalman_filters[i], Q, R);
 800140c:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8001410:	f8d7 26e8 	ldr.w	r2, [r7, #1768]	; 0x6e8
 8001414:	4613      	mov	r3, r2
 8001416:	009b      	lsls	r3, r3, #2
 8001418:	4413      	add	r3, r2
 800141a:	009b      	lsls	r3, r3, #2
 800141c:	440b      	add	r3, r1
 800141e:	f207 62c4 	addw	r2, r7, #1732	; 0x6c4
 8001422:	edd2 0a00 	vldr	s1, [r2]
 8001426:	f507 62d9 	add.w	r2, r7, #1736	; 0x6c8
 800142a:	ed92 0a00 	vldr	s0, [r2]
 800142e:	4618      	mov	r0, r3
 8001430:	f7ff fe52 	bl	80010d8 <KalmanFilter_Init>
			// KalmanFilter initializer END //


			MessageLen = sprintf((char*)Message, "%d complete \n\r",i);
 8001434:	f8d7 26e8 	ldr.w	r2, [r7, #1768]	; 0x6e8
 8001438:	4947      	ldr	r1, [pc, #284]	; (8001558 <main+0x3a0>)
 800143a:	4842      	ldr	r0, [pc, #264]	; (8001544 <main+0x38c>)
 800143c:	f00a fd8e 	bl	800bf5c <siprintf>
 8001440:	4603      	mov	r3, r0
 8001442:	b2da      	uxtb	r2, r3
 8001444:	4b40      	ldr	r3, [pc, #256]	; (8001548 <main+0x390>)
 8001446:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit(&huart1, Message, MessageLen, 100);
 8001448:	4b3f      	ldr	r3, [pc, #252]	; (8001548 <main+0x390>)
 800144a:	781b      	ldrb	r3, [r3, #0]
 800144c:	b29a      	uxth	r2, r3
 800144e:	2364      	movs	r3, #100	; 0x64
 8001450:	493c      	ldr	r1, [pc, #240]	; (8001544 <main+0x38c>)
 8001452:	483e      	ldr	r0, [pc, #248]	; (800154c <main+0x394>)
 8001454:	f003 ff46 	bl	80052e4 <HAL_UART_Transmit>
		for (int i = 0; i < NUM_SENSOR; i++) {
 8001458:	f8d7 36e8 	ldr.w	r3, [r7, #1768]	; 0x6e8
 800145c:	3301      	adds	r3, #1
 800145e:	f8c7 36e8 	str.w	r3, [r7, #1768]	; 0x6e8
 8001462:	f8d7 36e8 	ldr.w	r3, [r7, #1768]	; 0x6e8
 8001466:	2b03      	cmp	r3, #3
 8001468:	f77f af20 	ble.w	80012ac <main+0xf4>
  {

//  	  uint32_t start = HAL_GetTick();


		   for (int i = 0; i < NUM_SENSOR; i++) {
 800146c:	2300      	movs	r3, #0
 800146e:	f8c7 36e0 	str.w	r3, [r7, #1760]	; 0x6e0
 8001472:	e0f5      	b.n	8001660 <main+0x4a8>

				uint8_t q = i / 8;
 8001474:	f8d7 36e0 	ldr.w	r3, [r7, #1760]	; 0x6e0
 8001478:	2b00      	cmp	r3, #0
 800147a:	da00      	bge.n	800147e <main+0x2c6>
 800147c:	3307      	adds	r3, #7
 800147e:	10db      	asrs	r3, r3, #3
 8001480:	f887 36db 	strb.w	r3, [r7, #1755]	; 0x6db
				uint8_t r = i % 8;
 8001484:	f8d7 36e0 	ldr.w	r3, [r7, #1760]	; 0x6e0
 8001488:	425a      	negs	r2, r3
 800148a:	f003 0307 	and.w	r3, r3, #7
 800148e:	f002 0207 	and.w	r2, r2, #7
 8001492:	bf58      	it	pl
 8001494:	4253      	negpl	r3, r2
 8001496:	f887 36da 	strb.w	r3, [r7, #1754]	; 0x6da

			    for (int j = 0; j < sizeof(tca_addr); j++) {
 800149a:	2300      	movs	r3, #0
 800149c:	f8c7 36dc 	str.w	r3, [r7, #1756]	; 0x6dc
 80014a0:	e027      	b.n	80014f2 <main+0x33a>
			        uint8_t *channel = (j == q) ? &tca_ch[r] : &tca_ch_reset;
 80014a2:	f897 36db 	ldrb.w	r3, [r7, #1755]	; 0x6db
 80014a6:	f8d7 26dc 	ldr.w	r2, [r7, #1756]	; 0x6dc
 80014aa:	429a      	cmp	r2, r3
 80014ac:	d105      	bne.n	80014ba <main+0x302>
 80014ae:	f897 36da 	ldrb.w	r3, [r7, #1754]	; 0x6da
 80014b2:	f107 0208 	add.w	r2, r7, #8
 80014b6:	4413      	add	r3, r2
 80014b8:	e000      	b.n	80014bc <main+0x304>
 80014ba:	1dfb      	adds	r3, r7, #7
 80014bc:	f8c7 36d0 	str.w	r3, [r7, #1744]	; 0x6d0
			        HAL_I2C_Master_Transmit(&hi2c1, tca_addr[j] << 1, channel, 1, 1000);
 80014c0:	f507 63de 	add.w	r3, r7, #1776	; 0x6f0
 80014c4:	f2a3 62ec 	subw	r2, r3, #1772	; 0x6ec
 80014c8:	f8d7 36dc 	ldr.w	r3, [r7, #1756]	; 0x6dc
 80014cc:	4413      	add	r3, r2
 80014ce:	781b      	ldrb	r3, [r3, #0]
 80014d0:	b29b      	uxth	r3, r3
 80014d2:	005b      	lsls	r3, r3, #1
 80014d4:	b299      	uxth	r1, r3
 80014d6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80014da:	9300      	str	r3, [sp, #0]
 80014dc:	2301      	movs	r3, #1
 80014de:	f8d7 26d0 	ldr.w	r2, [r7, #1744]	; 0x6d0
 80014e2:	481b      	ldr	r0, [pc, #108]	; (8001550 <main+0x398>)
 80014e4:	f001 fa84 	bl	80029f0 <HAL_I2C_Master_Transmit>
			    for (int j = 0; j < sizeof(tca_addr); j++) {
 80014e8:	f8d7 36dc 	ldr.w	r3, [r7, #1756]	; 0x6dc
 80014ec:	3301      	adds	r3, #1
 80014ee:	f8c7 36dc 	str.w	r3, [r7, #1756]	; 0x6dc
 80014f2:	f8d7 36dc 	ldr.w	r3, [r7, #1756]	; 0x6dc
 80014f6:	2b02      	cmp	r3, #2
 80014f8:	d9d3      	bls.n	80014a2 <main+0x2ea>
			    }

		       Dev = &vl53l0x_s[i];
 80014fa:	f107 0278 	add.w	r2, r7, #120	; 0x78
 80014fe:	f8d7 36e0 	ldr.w	r3, [r7, #1760]	; 0x6e0
 8001502:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8001506:	fb01 f303 	mul.w	r3, r1, r3
 800150a:	4413      	add	r3, r2
 800150c:	f8c7 36d4 	str.w	r3, [r7, #1748]	; 0x6d4

		       VL53L0X_PerformContinuousRangingMeasurement(Dev, &RangingData); // 1500us
 8001510:	4912      	ldr	r1, [pc, #72]	; (800155c <main+0x3a4>)
 8001512:	f8d7 06d4 	ldr.w	r0, [r7, #1748]	; 0x6d4
 8001516:	f006 fd06 	bl	8007f26 <VL53L0X_PerformContinuousRangingMeasurement>
		       if (RangingData.RangeStatus == 0) {
 800151a:	4b10      	ldr	r3, [pc, #64]	; (800155c <main+0x3a4>)
 800151c:	7e1b      	ldrb	r3, [r3, #24]
 800151e:	2b00      	cmp	r3, #0
 8001520:	d11e      	bne.n	8001560 <main+0x3a8>
		    	   distance[i] = RangingData.RangeMilliMeter;
 8001522:	4b0e      	ldr	r3, [pc, #56]	; (800155c <main+0x3a4>)
 8001524:	8919      	ldrh	r1, [r3, #8]
 8001526:	f507 63de 	add.w	r3, r7, #1776	; 0x6f0
 800152a:	f5a3 63da 	sub.w	r3, r3, #1744	; 0x6d0
 800152e:	f8d7 26e0 	ldr.w	r2, [r7, #1760]	; 0x6e0
 8001532:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
 8001536:	e01c      	b.n	8001572 <main+0x3ba>
 8001538:	0800e494 	.word	0x0800e494
 800153c:	0800e49c 	.word	0x0800e49c
 8001540:	0800e460 	.word	0x0800e460
 8001544:	20000568 	.word	0x20000568
 8001548:	200005a8 	.word	0x200005a8
 800154c:	200005cc 	.word	0x200005cc
 8001550:	20000514 	.word	0x20000514
 8001554:	3dcccccd 	.word	0x3dcccccd
 8001558:	0800e474 	.word	0x0800e474
 800155c:	200005ac 	.word	0x200005ac
		       }else{
		    	   distance[i] = 0;
 8001560:	f507 63de 	add.w	r3, r7, #1776	; 0x6f0
 8001564:	f5a3 63da 	sub.w	r3, r3, #1744	; 0x6d0
 8001568:	f8d7 26e0 	ldr.w	r2, [r7, #1760]	; 0x6e0
 800156c:	2100      	movs	r1, #0
 800156e:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
		       }

	           MessageLen = sprintf((char*)Message, "%d ",distance[i]);
 8001572:	f507 63de 	add.w	r3, r7, #1776	; 0x6f0
 8001576:	f5a3 63da 	sub.w	r3, r3, #1744	; 0x6d0
 800157a:	f8d7 26e0 	ldr.w	r2, [r7, #1760]	; 0x6e0
 800157e:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8001582:	461a      	mov	r2, r3
 8001584:	4942      	ldr	r1, [pc, #264]	; (8001690 <main+0x4d8>)
 8001586:	4843      	ldr	r0, [pc, #268]	; (8001694 <main+0x4dc>)
 8001588:	f00a fce8 	bl	800bf5c <siprintf>
 800158c:	4603      	mov	r3, r0
 800158e:	b2da      	uxtb	r2, r3
 8001590:	4b41      	ldr	r3, [pc, #260]	; (8001698 <main+0x4e0>)
 8001592:	701a      	strb	r2, [r3, #0]
	           HAL_UART_Transmit(&huart1, Message, MessageLen, 1000);
 8001594:	4b40      	ldr	r3, [pc, #256]	; (8001698 <main+0x4e0>)
 8001596:	781b      	ldrb	r3, [r3, #0]
 8001598:	b29a      	uxth	r2, r3
 800159a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800159e:	493d      	ldr	r1, [pc, #244]	; (8001694 <main+0x4dc>)
 80015a0:	483e      	ldr	r0, [pc, #248]	; (800169c <main+0x4e4>)
 80015a2:	f003 fe9f 	bl	80052e4 <HAL_UART_Transmit>

	           filtered_distance[i] = KalmanFilter_Update(&kalman_filters[i], (float)distance[i]);
 80015a6:	f107 0128 	add.w	r1, r7, #40	; 0x28
 80015aa:	f8d7 26e0 	ldr.w	r2, [r7, #1760]	; 0x6e0
 80015ae:	4613      	mov	r3, r2
 80015b0:	009b      	lsls	r3, r3, #2
 80015b2:	4413      	add	r3, r2
 80015b4:	009b      	lsls	r3, r3, #2
 80015b6:	4419      	add	r1, r3
 80015b8:	f507 63de 	add.w	r3, r7, #1776	; 0x6f0
 80015bc:	f5a3 63da 	sub.w	r3, r3, #1744	; 0x6d0
 80015c0:	f8d7 26e0 	ldr.w	r2, [r7, #1760]	; 0x6e0
 80015c4:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80015c8:	ee07 3a90 	vmov	s15, r3
 80015cc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80015d0:	eeb0 0a67 	vmov.f32	s0, s15
 80015d4:	4608      	mov	r0, r1
 80015d6:	f7ff fd9f 	bl	8001118 <KalmanFilter_Update>
 80015da:	eef0 7a40 	vmov.f32	s15, s0
 80015de:	f507 63de 	add.w	r3, r7, #1776	; 0x6f0
 80015e2:	f5a3 62dc 	sub.w	r2, r3, #1760	; 0x6e0
 80015e6:	f8d7 36e0 	ldr.w	r3, [r7, #1760]	; 0x6e0
 80015ea:	009b      	lsls	r3, r3, #2
 80015ec:	4413      	add	r3, r2
 80015ee:	edc3 7a00 	vstr	s15, [r3]

	           MessageLen = sprintf((char*)Message, "%.3f ",filtered_distance[i]);
 80015f2:	f507 63de 	add.w	r3, r7, #1776	; 0x6f0
 80015f6:	f5a3 62dc 	sub.w	r2, r3, #1760	; 0x6e0
 80015fa:	f8d7 36e0 	ldr.w	r3, [r7, #1760]	; 0x6e0
 80015fe:	009b      	lsls	r3, r3, #2
 8001600:	4413      	add	r3, r2
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	4618      	mov	r0, r3
 8001606:	f7fe ffbf 	bl	8000588 <__aeabi_f2d>
 800160a:	4602      	mov	r2, r0
 800160c:	460b      	mov	r3, r1
 800160e:	4924      	ldr	r1, [pc, #144]	; (80016a0 <main+0x4e8>)
 8001610:	4820      	ldr	r0, [pc, #128]	; (8001694 <main+0x4dc>)
 8001612:	f00a fca3 	bl	800bf5c <siprintf>
 8001616:	4603      	mov	r3, r0
 8001618:	b2da      	uxtb	r2, r3
 800161a:	4b1f      	ldr	r3, [pc, #124]	; (8001698 <main+0x4e0>)
 800161c:	701a      	strb	r2, [r3, #0]
			   HAL_UART_Transmit(&huart1, Message, MessageLen, 1000);
 800161e:	4b1e      	ldr	r3, [pc, #120]	; (8001698 <main+0x4e0>)
 8001620:	781b      	ldrb	r3, [r3, #0]
 8001622:	b29a      	uxth	r2, r3
 8001624:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001628:	491a      	ldr	r1, [pc, #104]	; (8001694 <main+0x4dc>)
 800162a:	481c      	ldr	r0, [pc, #112]	; (800169c <main+0x4e4>)
 800162c:	f003 fe5a 	bl	80052e4 <HAL_UART_Transmit>

		       in[i][0] = distance[i];
 8001630:	f507 63de 	add.w	r3, r7, #1776	; 0x6f0
 8001634:	f5a3 63da 	sub.w	r3, r3, #1744	; 0x6d0
 8001638:	f8d7 26e0 	ldr.w	r2, [r7, #1760]	; 0x6e0
 800163c:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8001640:	ee07 3a90 	vmov	s15, r3
 8001644:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001648:	4a16      	ldr	r2, [pc, #88]	; (80016a4 <main+0x4ec>)
 800164a:	f8d7 36e0 	ldr.w	r3, [r7, #1760]	; 0x6e0
 800164e:	009b      	lsls	r3, r3, #2
 8001650:	4413      	add	r3, r2
 8001652:	edc3 7a00 	vstr	s15, [r3]
		   for (int i = 0; i < NUM_SENSOR; i++) {
 8001656:	f8d7 36e0 	ldr.w	r3, [r7, #1760]	; 0x6e0
 800165a:	3301      	adds	r3, #1
 800165c:	f8c7 36e0 	str.w	r3, [r7, #1760]	; 0x6e0
 8001660:	f8d7 36e0 	ldr.w	r3, [r7, #1760]	; 0x6e0
 8001664:	2b03      	cmp	r3, #3
 8001666:	f77f af05 	ble.w	8001474 <main+0x2bc>
//		for(int i=0; i<3; i++){
//			MessageLen = sprintf((char*)Message, "%.8f ",r5[i][0]);
//			HAL_UART_Transmit(&huart1, Message, MessageLen, 1000);
//		}

		MessageLen = sprintf((char*)Message, "\n");
 800166a:	490f      	ldr	r1, [pc, #60]	; (80016a8 <main+0x4f0>)
 800166c:	4809      	ldr	r0, [pc, #36]	; (8001694 <main+0x4dc>)
 800166e:	f00a fc75 	bl	800bf5c <siprintf>
 8001672:	4603      	mov	r3, r0
 8001674:	b2da      	uxtb	r2, r3
 8001676:	4b08      	ldr	r3, [pc, #32]	; (8001698 <main+0x4e0>)
 8001678:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit(&huart1, Message, MessageLen, 1000);
 800167a:	4b07      	ldr	r3, [pc, #28]	; (8001698 <main+0x4e0>)
 800167c:	781b      	ldrb	r3, [r3, #0]
 800167e:	b29a      	uxth	r2, r3
 8001680:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001684:	4903      	ldr	r1, [pc, #12]	; (8001694 <main+0x4dc>)
 8001686:	4805      	ldr	r0, [pc, #20]	; (800169c <main+0x4e4>)
 8001688:	f003 fe2c 	bl	80052e4 <HAL_UART_Transmit>
		   for (int i = 0; i < NUM_SENSOR; i++) {
 800168c:	e6ee      	b.n	800146c <main+0x2b4>
 800168e:	bf00      	nop
 8001690:	0800e484 	.word	0x0800e484
 8001694:	20000568 	.word	0x20000568
 8001698:	200005a8 	.word	0x200005a8
 800169c:	200005cc 	.word	0x200005cc
 80016a0:	0800e488 	.word	0x0800e488
 80016a4:	200004b4 	.word	0x200004b4
 80016a8:	0800e490 	.word	0x0800e490

080016ac <SystemClock_Config>:
  * @brief System Clock Configuration
  * @retval None
  */

void SystemClock_Config(void)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	b094      	sub	sp, #80	; 0x50
 80016b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80016b2:	f107 0320 	add.w	r3, r7, #32
 80016b6:	2230      	movs	r2, #48	; 0x30
 80016b8:	2100      	movs	r1, #0
 80016ba:	4618      	mov	r0, r3
 80016bc:	f009 ffdc 	bl	800b678 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80016c0:	f107 030c 	add.w	r3, r7, #12
 80016c4:	2200      	movs	r2, #0
 80016c6:	601a      	str	r2, [r3, #0]
 80016c8:	605a      	str	r2, [r3, #4]
 80016ca:	609a      	str	r2, [r3, #8]
 80016cc:	60da      	str	r2, [r3, #12]
 80016ce:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80016d0:	4b2b      	ldr	r3, [pc, #172]	; (8001780 <SystemClock_Config+0xd4>)
 80016d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016d4:	4a2a      	ldr	r2, [pc, #168]	; (8001780 <SystemClock_Config+0xd4>)
 80016d6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016da:	6413      	str	r3, [r2, #64]	; 0x40
 80016dc:	4b28      	ldr	r3, [pc, #160]	; (8001780 <SystemClock_Config+0xd4>)
 80016de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016e4:	60bb      	str	r3, [r7, #8]
 80016e6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80016e8:	4b26      	ldr	r3, [pc, #152]	; (8001784 <SystemClock_Config+0xd8>)
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	4a25      	ldr	r2, [pc, #148]	; (8001784 <SystemClock_Config+0xd8>)
 80016ee:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80016f2:	6013      	str	r3, [r2, #0]
 80016f4:	4b23      	ldr	r3, [pc, #140]	; (8001784 <SystemClock_Config+0xd8>)
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80016fc:	607b      	str	r3, [r7, #4]
 80016fe:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001700:	2301      	movs	r3, #1
 8001702:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001704:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001708:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800170a:	2302      	movs	r3, #2
 800170c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800170e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001712:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8001714:	2319      	movs	r3, #25
 8001716:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 432;
 8001718:	f44f 73d8 	mov.w	r3, #432	; 0x1b0
 800171c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800171e:	2302      	movs	r3, #2
 8001720:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001722:	2302      	movs	r3, #2
 8001724:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001726:	f107 0320 	add.w	r3, r7, #32
 800172a:	4618      	mov	r0, r3
 800172c:	f001 ff3a 	bl	80035a4 <HAL_RCC_OscConfig>
 8001730:	4603      	mov	r3, r0
 8001732:	2b00      	cmp	r3, #0
 8001734:	d001      	beq.n	800173a <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8001736:	f000 f827 	bl	8001788 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800173a:	f001 fee3 	bl	8003504 <HAL_PWREx_EnableOverDrive>
 800173e:	4603      	mov	r3, r0
 8001740:	2b00      	cmp	r3, #0
 8001742:	d001      	beq.n	8001748 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8001744:	f000 f820 	bl	8001788 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001748:	230f      	movs	r3, #15
 800174a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800174c:	2302      	movs	r3, #2
 800174e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001750:	2300      	movs	r3, #0
 8001752:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001754:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001758:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800175a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800175e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8001760:	f107 030c 	add.w	r3, r7, #12
 8001764:	2107      	movs	r1, #7
 8001766:	4618      	mov	r0, r3
 8001768:	f002 fa76 	bl	8003c58 <HAL_RCC_ClockConfig>
 800176c:	4603      	mov	r3, r0
 800176e:	2b00      	cmp	r3, #0
 8001770:	d001      	beq.n	8001776 <SystemClock_Config+0xca>
  {
    Error_Handler();
 8001772:	f000 f809 	bl	8001788 <Error_Handler>
  }
}
 8001776:	bf00      	nop
 8001778:	3750      	adds	r7, #80	; 0x50
 800177a:	46bd      	mov	sp, r7
 800177c:	bd80      	pop	{r7, pc}
 800177e:	bf00      	nop
 8001780:	40023800 	.word	0x40023800
 8001784:	40007000 	.word	0x40007000

08001788 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001788:	b480      	push	{r7}
 800178a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800178c:	b672      	cpsid	i
}
 800178e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001790:	e7fe      	b.n	8001790 <Error_Handler+0x8>

08001792 <assert_failed>:
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
 8001792:	b480      	push	{r7}
 8001794:	b083      	sub	sp, #12
 8001796:	af00      	add	r7, sp, #0
 8001798:	6078      	str	r0, [r7, #4]
 800179a:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
 800179c:	bf00      	nop
 800179e:	370c      	adds	r7, #12
 80017a0:	46bd      	mov	sp, r7
 80017a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a6:	4770      	bx	lr

080017a8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80017a8:	b480      	push	{r7}
 80017aa:	b083      	sub	sp, #12
 80017ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80017ae:	4b0f      	ldr	r3, [pc, #60]	; (80017ec <HAL_MspInit+0x44>)
 80017b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017b2:	4a0e      	ldr	r2, [pc, #56]	; (80017ec <HAL_MspInit+0x44>)
 80017b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017b8:	6413      	str	r3, [r2, #64]	; 0x40
 80017ba:	4b0c      	ldr	r3, [pc, #48]	; (80017ec <HAL_MspInit+0x44>)
 80017bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017c2:	607b      	str	r3, [r7, #4]
 80017c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017c6:	4b09      	ldr	r3, [pc, #36]	; (80017ec <HAL_MspInit+0x44>)
 80017c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017ca:	4a08      	ldr	r2, [pc, #32]	; (80017ec <HAL_MspInit+0x44>)
 80017cc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80017d0:	6453      	str	r3, [r2, #68]	; 0x44
 80017d2:	4b06      	ldr	r3, [pc, #24]	; (80017ec <HAL_MspInit+0x44>)
 80017d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80017da:	603b      	str	r3, [r7, #0]
 80017dc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80017de:	bf00      	nop
 80017e0:	370c      	adds	r7, #12
 80017e2:	46bd      	mov	sp, r7
 80017e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e8:	4770      	bx	lr
 80017ea:	bf00      	nop
 80017ec:	40023800 	.word	0x40023800

080017f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80017f0:	b480      	push	{r7}
 80017f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80017f4:	e7fe      	b.n	80017f4 <NMI_Handler+0x4>

080017f6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80017f6:	b480      	push	{r7}
 80017f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80017fa:	e7fe      	b.n	80017fa <HardFault_Handler+0x4>

080017fc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80017fc:	b480      	push	{r7}
 80017fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001800:	e7fe      	b.n	8001800 <MemManage_Handler+0x4>

08001802 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001802:	b480      	push	{r7}
 8001804:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001806:	e7fe      	b.n	8001806 <BusFault_Handler+0x4>

08001808 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001808:	b480      	push	{r7}
 800180a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800180c:	e7fe      	b.n	800180c <UsageFault_Handler+0x4>

0800180e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800180e:	b480      	push	{r7}
 8001810:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001812:	bf00      	nop
 8001814:	46bd      	mov	sp, r7
 8001816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181a:	4770      	bx	lr

0800181c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800181c:	b480      	push	{r7}
 800181e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001820:	bf00      	nop
 8001822:	46bd      	mov	sp, r7
 8001824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001828:	4770      	bx	lr

0800182a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800182a:	b480      	push	{r7}
 800182c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800182e:	bf00      	nop
 8001830:	46bd      	mov	sp, r7
 8001832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001836:	4770      	bx	lr

08001838 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800183c:	f000 fa04 	bl	8001c48 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001840:	bf00      	nop
 8001842:	bd80      	pop	{r7, pc}

08001844 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001848:	4802      	ldr	r0, [pc, #8]	; (8001854 <USART1_IRQHandler+0x10>)
 800184a:	f003 fdcf 	bl	80053ec <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800184e:	bf00      	nop
 8001850:	bd80      	pop	{r7, pc}
 8001852:	bf00      	nop
 8001854:	200005cc 	.word	0x200005cc

08001858 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001858:	b480      	push	{r7}
 800185a:	af00      	add	r7, sp, #0
	return 1;
 800185c:	2301      	movs	r3, #1
}
 800185e:	4618      	mov	r0, r3
 8001860:	46bd      	mov	sp, r7
 8001862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001866:	4770      	bx	lr

08001868 <_kill>:

int _kill(int pid, int sig)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	b082      	sub	sp, #8
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]
 8001870:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001872:	f009 fec9 	bl	800b608 <__errno>
 8001876:	4603      	mov	r3, r0
 8001878:	2216      	movs	r2, #22
 800187a:	601a      	str	r2, [r3, #0]
	return -1;
 800187c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001880:	4618      	mov	r0, r3
 8001882:	3708      	adds	r7, #8
 8001884:	46bd      	mov	sp, r7
 8001886:	bd80      	pop	{r7, pc}

08001888 <_exit>:

void _exit (int status)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	b082      	sub	sp, #8
 800188c:	af00      	add	r7, sp, #0
 800188e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001890:	f04f 31ff 	mov.w	r1, #4294967295
 8001894:	6878      	ldr	r0, [r7, #4]
 8001896:	f7ff ffe7 	bl	8001868 <_kill>
	while (1) {}		/* Make sure we hang here */
 800189a:	e7fe      	b.n	800189a <_exit+0x12>

0800189c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	b086      	sub	sp, #24
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	60f8      	str	r0, [r7, #12]
 80018a4:	60b9      	str	r1, [r7, #8]
 80018a6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018a8:	2300      	movs	r3, #0
 80018aa:	617b      	str	r3, [r7, #20]
 80018ac:	e00a      	b.n	80018c4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80018ae:	f3af 8000 	nop.w
 80018b2:	4601      	mov	r1, r0
 80018b4:	68bb      	ldr	r3, [r7, #8]
 80018b6:	1c5a      	adds	r2, r3, #1
 80018b8:	60ba      	str	r2, [r7, #8]
 80018ba:	b2ca      	uxtb	r2, r1
 80018bc:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018be:	697b      	ldr	r3, [r7, #20]
 80018c0:	3301      	adds	r3, #1
 80018c2:	617b      	str	r3, [r7, #20]
 80018c4:	697a      	ldr	r2, [r7, #20]
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	429a      	cmp	r2, r3
 80018ca:	dbf0      	blt.n	80018ae <_read+0x12>
	}

return len;
 80018cc:	687b      	ldr	r3, [r7, #4]
}
 80018ce:	4618      	mov	r0, r3
 80018d0:	3718      	adds	r7, #24
 80018d2:	46bd      	mov	sp, r7
 80018d4:	bd80      	pop	{r7, pc}

080018d6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80018d6:	b580      	push	{r7, lr}
 80018d8:	b086      	sub	sp, #24
 80018da:	af00      	add	r7, sp, #0
 80018dc:	60f8      	str	r0, [r7, #12]
 80018de:	60b9      	str	r1, [r7, #8]
 80018e0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018e2:	2300      	movs	r3, #0
 80018e4:	617b      	str	r3, [r7, #20]
 80018e6:	e009      	b.n	80018fc <_write+0x26>
	{
		__io_putchar(*ptr++);
 80018e8:	68bb      	ldr	r3, [r7, #8]
 80018ea:	1c5a      	adds	r2, r3, #1
 80018ec:	60ba      	str	r2, [r7, #8]
 80018ee:	781b      	ldrb	r3, [r3, #0]
 80018f0:	4618      	mov	r0, r3
 80018f2:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018f6:	697b      	ldr	r3, [r7, #20]
 80018f8:	3301      	adds	r3, #1
 80018fa:	617b      	str	r3, [r7, #20]
 80018fc:	697a      	ldr	r2, [r7, #20]
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	429a      	cmp	r2, r3
 8001902:	dbf1      	blt.n	80018e8 <_write+0x12>
	}
	return len;
 8001904:	687b      	ldr	r3, [r7, #4]
}
 8001906:	4618      	mov	r0, r3
 8001908:	3718      	adds	r7, #24
 800190a:	46bd      	mov	sp, r7
 800190c:	bd80      	pop	{r7, pc}

0800190e <_close>:

int _close(int file)
{
 800190e:	b480      	push	{r7}
 8001910:	b083      	sub	sp, #12
 8001912:	af00      	add	r7, sp, #0
 8001914:	6078      	str	r0, [r7, #4]
	return -1;
 8001916:	f04f 33ff 	mov.w	r3, #4294967295
}
 800191a:	4618      	mov	r0, r3
 800191c:	370c      	adds	r7, #12
 800191e:	46bd      	mov	sp, r7
 8001920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001924:	4770      	bx	lr

08001926 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001926:	b480      	push	{r7}
 8001928:	b083      	sub	sp, #12
 800192a:	af00      	add	r7, sp, #0
 800192c:	6078      	str	r0, [r7, #4]
 800192e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001930:	683b      	ldr	r3, [r7, #0]
 8001932:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001936:	605a      	str	r2, [r3, #4]
	return 0;
 8001938:	2300      	movs	r3, #0
}
 800193a:	4618      	mov	r0, r3
 800193c:	370c      	adds	r7, #12
 800193e:	46bd      	mov	sp, r7
 8001940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001944:	4770      	bx	lr

08001946 <_isatty>:

int _isatty(int file)
{
 8001946:	b480      	push	{r7}
 8001948:	b083      	sub	sp, #12
 800194a:	af00      	add	r7, sp, #0
 800194c:	6078      	str	r0, [r7, #4]
	return 1;
 800194e:	2301      	movs	r3, #1
}
 8001950:	4618      	mov	r0, r3
 8001952:	370c      	adds	r7, #12
 8001954:	46bd      	mov	sp, r7
 8001956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195a:	4770      	bx	lr

0800195c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800195c:	b480      	push	{r7}
 800195e:	b085      	sub	sp, #20
 8001960:	af00      	add	r7, sp, #0
 8001962:	60f8      	str	r0, [r7, #12]
 8001964:	60b9      	str	r1, [r7, #8]
 8001966:	607a      	str	r2, [r7, #4]
	return 0;
 8001968:	2300      	movs	r3, #0
}
 800196a:	4618      	mov	r0, r3
 800196c:	3714      	adds	r7, #20
 800196e:	46bd      	mov	sp, r7
 8001970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001974:	4770      	bx	lr
	...

08001978 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	b086      	sub	sp, #24
 800197c:	af00      	add	r7, sp, #0
 800197e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001980:	4a14      	ldr	r2, [pc, #80]	; (80019d4 <_sbrk+0x5c>)
 8001982:	4b15      	ldr	r3, [pc, #84]	; (80019d8 <_sbrk+0x60>)
 8001984:	1ad3      	subs	r3, r2, r3
 8001986:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001988:	697b      	ldr	r3, [r7, #20]
 800198a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800198c:	4b13      	ldr	r3, [pc, #76]	; (80019dc <_sbrk+0x64>)
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	2b00      	cmp	r3, #0
 8001992:	d102      	bne.n	800199a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001994:	4b11      	ldr	r3, [pc, #68]	; (80019dc <_sbrk+0x64>)
 8001996:	4a12      	ldr	r2, [pc, #72]	; (80019e0 <_sbrk+0x68>)
 8001998:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800199a:	4b10      	ldr	r3, [pc, #64]	; (80019dc <_sbrk+0x64>)
 800199c:	681a      	ldr	r2, [r3, #0]
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	4413      	add	r3, r2
 80019a2:	693a      	ldr	r2, [r7, #16]
 80019a4:	429a      	cmp	r2, r3
 80019a6:	d207      	bcs.n	80019b8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80019a8:	f009 fe2e 	bl	800b608 <__errno>
 80019ac:	4603      	mov	r3, r0
 80019ae:	220c      	movs	r2, #12
 80019b0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80019b2:	f04f 33ff 	mov.w	r3, #4294967295
 80019b6:	e009      	b.n	80019cc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80019b8:	4b08      	ldr	r3, [pc, #32]	; (80019dc <_sbrk+0x64>)
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80019be:	4b07      	ldr	r3, [pc, #28]	; (80019dc <_sbrk+0x64>)
 80019c0:	681a      	ldr	r2, [r3, #0]
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	4413      	add	r3, r2
 80019c6:	4a05      	ldr	r2, [pc, #20]	; (80019dc <_sbrk+0x64>)
 80019c8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80019ca:	68fb      	ldr	r3, [r7, #12]
}
 80019cc:	4618      	mov	r0, r3
 80019ce:	3718      	adds	r7, #24
 80019d0:	46bd      	mov	sp, r7
 80019d2:	bd80      	pop	{r7, pc}
 80019d4:	20050000 	.word	0x20050000
 80019d8:	00000400 	.word	0x00000400
 80019dc:	200005c8 	.word	0x200005c8
 80019e0:	200006a8 	.word	0x200006a8

080019e4 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80019e4:	b480      	push	{r7}
 80019e6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80019e8:	4b06      	ldr	r3, [pc, #24]	; (8001a04 <SystemInit+0x20>)
 80019ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80019ee:	4a05      	ldr	r2, [pc, #20]	; (8001a04 <SystemInit+0x20>)
 80019f0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80019f4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80019f8:	bf00      	nop
 80019fa:	46bd      	mov	sp, r7
 80019fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a00:	4770      	bx	lr
 8001a02:	bf00      	nop
 8001a04:	e000ed00 	.word	0xe000ed00

08001a08 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001a0c:	4b14      	ldr	r3, [pc, #80]	; (8001a60 <MX_USART1_UART_Init+0x58>)
 8001a0e:	4a15      	ldr	r2, [pc, #84]	; (8001a64 <MX_USART1_UART_Init+0x5c>)
 8001a10:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001a12:	4b13      	ldr	r3, [pc, #76]	; (8001a60 <MX_USART1_UART_Init+0x58>)
 8001a14:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001a18:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001a1a:	4b11      	ldr	r3, [pc, #68]	; (8001a60 <MX_USART1_UART_Init+0x58>)
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001a20:	4b0f      	ldr	r3, [pc, #60]	; (8001a60 <MX_USART1_UART_Init+0x58>)
 8001a22:	2200      	movs	r2, #0
 8001a24:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001a26:	4b0e      	ldr	r3, [pc, #56]	; (8001a60 <MX_USART1_UART_Init+0x58>)
 8001a28:	2200      	movs	r2, #0
 8001a2a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001a2c:	4b0c      	ldr	r3, [pc, #48]	; (8001a60 <MX_USART1_UART_Init+0x58>)
 8001a2e:	220c      	movs	r2, #12
 8001a30:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a32:	4b0b      	ldr	r3, [pc, #44]	; (8001a60 <MX_USART1_UART_Init+0x58>)
 8001a34:	2200      	movs	r2, #0
 8001a36:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a38:	4b09      	ldr	r3, [pc, #36]	; (8001a60 <MX_USART1_UART_Init+0x58>)
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001a3e:	4b08      	ldr	r3, [pc, #32]	; (8001a60 <MX_USART1_UART_Init+0x58>)
 8001a40:	2200      	movs	r2, #0
 8001a42:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001a44:	4b06      	ldr	r3, [pc, #24]	; (8001a60 <MX_USART1_UART_Init+0x58>)
 8001a46:	2200      	movs	r2, #0
 8001a48:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001a4a:	4805      	ldr	r0, [pc, #20]	; (8001a60 <MX_USART1_UART_Init+0x58>)
 8001a4c:	f003 fb8a 	bl	8005164 <HAL_UART_Init>
 8001a50:	4603      	mov	r3, r0
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d001      	beq.n	8001a5a <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8001a56:	f7ff fe97 	bl	8001788 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001a5a:	bf00      	nop
 8001a5c:	bd80      	pop	{r7, pc}
 8001a5e:	bf00      	nop
 8001a60:	200005cc 	.word	0x200005cc
 8001a64:	40011000 	.word	0x40011000

08001a68 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b0ac      	sub	sp, #176	; 0xb0
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a70:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001a74:	2200      	movs	r2, #0
 8001a76:	601a      	str	r2, [r3, #0]
 8001a78:	605a      	str	r2, [r3, #4]
 8001a7a:	609a      	str	r2, [r3, #8]
 8001a7c:	60da      	str	r2, [r3, #12]
 8001a7e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001a80:	f107 0318 	add.w	r3, r7, #24
 8001a84:	2284      	movs	r2, #132	; 0x84
 8001a86:	2100      	movs	r1, #0
 8001a88:	4618      	mov	r0, r3
 8001a8a:	f009 fdf5 	bl	800b678 <memset>
  if(uartHandle->Instance==USART1)
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	4a36      	ldr	r2, [pc, #216]	; (8001b6c <HAL_UART_MspInit+0x104>)
 8001a94:	4293      	cmp	r3, r2
 8001a96:	d164      	bne.n	8001b62 <HAL_UART_MspInit+0xfa>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001a98:	2340      	movs	r3, #64	; 0x40
 8001a9a:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001a9c:	2300      	movs	r3, #0
 8001a9e:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001aa0:	f107 0318 	add.w	r3, r7, #24
 8001aa4:	4618      	mov	r0, r3
 8001aa6:	f002 fb79 	bl	800419c <HAL_RCCEx_PeriphCLKConfig>
 8001aaa:	4603      	mov	r3, r0
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d001      	beq.n	8001ab4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001ab0:	f7ff fe6a 	bl	8001788 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001ab4:	4b2e      	ldr	r3, [pc, #184]	; (8001b70 <HAL_UART_MspInit+0x108>)
 8001ab6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ab8:	4a2d      	ldr	r2, [pc, #180]	; (8001b70 <HAL_UART_MspInit+0x108>)
 8001aba:	f043 0310 	orr.w	r3, r3, #16
 8001abe:	6453      	str	r3, [r2, #68]	; 0x44
 8001ac0:	4b2b      	ldr	r3, [pc, #172]	; (8001b70 <HAL_UART_MspInit+0x108>)
 8001ac2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ac4:	f003 0310 	and.w	r3, r3, #16
 8001ac8:	617b      	str	r3, [r7, #20]
 8001aca:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001acc:	4b28      	ldr	r3, [pc, #160]	; (8001b70 <HAL_UART_MspInit+0x108>)
 8001ace:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ad0:	4a27      	ldr	r2, [pc, #156]	; (8001b70 <HAL_UART_MspInit+0x108>)
 8001ad2:	f043 0302 	orr.w	r3, r3, #2
 8001ad6:	6313      	str	r3, [r2, #48]	; 0x30
 8001ad8:	4b25      	ldr	r3, [pc, #148]	; (8001b70 <HAL_UART_MspInit+0x108>)
 8001ada:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001adc:	f003 0302 	and.w	r3, r3, #2
 8001ae0:	613b      	str	r3, [r7, #16]
 8001ae2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ae4:	4b22      	ldr	r3, [pc, #136]	; (8001b70 <HAL_UART_MspInit+0x108>)
 8001ae6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ae8:	4a21      	ldr	r2, [pc, #132]	; (8001b70 <HAL_UART_MspInit+0x108>)
 8001aea:	f043 0301 	orr.w	r3, r3, #1
 8001aee:	6313      	str	r3, [r2, #48]	; 0x30
 8001af0:	4b1f      	ldr	r3, [pc, #124]	; (8001b70 <HAL_UART_MspInit+0x108>)
 8001af2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001af4:	f003 0301 	and.w	r3, r3, #1
 8001af8:	60fb      	str	r3, [r7, #12]
 8001afa:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001afc:	2380      	movs	r3, #128	; 0x80
 8001afe:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b02:	2302      	movs	r3, #2
 8001b04:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b08:	2300      	movs	r3, #0
 8001b0a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b0e:	2303      	movs	r3, #3
 8001b10:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001b14:	2307      	movs	r3, #7
 8001b16:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b1a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001b1e:	4619      	mov	r1, r3
 8001b20:	4814      	ldr	r0, [pc, #80]	; (8001b74 <HAL_UART_MspInit+0x10c>)
 8001b22:	f000 faa7 	bl	8002074 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001b26:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001b2a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b2e:	2302      	movs	r3, #2
 8001b30:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b34:	2300      	movs	r3, #0
 8001b36:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b3a:	2303      	movs	r3, #3
 8001b3c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001b40:	2307      	movs	r3, #7
 8001b42:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b46:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001b4a:	4619      	mov	r1, r3
 8001b4c:	480a      	ldr	r0, [pc, #40]	; (8001b78 <HAL_UART_MspInit+0x110>)
 8001b4e:	f000 fa91 	bl	8002074 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001b52:	2200      	movs	r2, #0
 8001b54:	2100      	movs	r1, #0
 8001b56:	2025      	movs	r0, #37	; 0x25
 8001b58:	f000 f9aa 	bl	8001eb0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001b5c:	2025      	movs	r0, #37	; 0x25
 8001b5e:	f000 f9d3 	bl	8001f08 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8001b62:	bf00      	nop
 8001b64:	37b0      	adds	r7, #176	; 0xb0
 8001b66:	46bd      	mov	sp, r7
 8001b68:	bd80      	pop	{r7, pc}
 8001b6a:	bf00      	nop
 8001b6c:	40011000 	.word	0x40011000
 8001b70:	40023800 	.word	0x40023800
 8001b74:	40020400 	.word	0x40020400
 8001b78:	40020000 	.word	0x40020000

08001b7c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001b7c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001bb4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001b80:	480d      	ldr	r0, [pc, #52]	; (8001bb8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001b82:	490e      	ldr	r1, [pc, #56]	; (8001bbc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001b84:	4a0e      	ldr	r2, [pc, #56]	; (8001bc0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001b86:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b88:	e002      	b.n	8001b90 <LoopCopyDataInit>

08001b8a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b8a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b8c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b8e:	3304      	adds	r3, #4

08001b90 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b90:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b92:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b94:	d3f9      	bcc.n	8001b8a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b96:	4a0b      	ldr	r2, [pc, #44]	; (8001bc4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001b98:	4c0b      	ldr	r4, [pc, #44]	; (8001bc8 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001b9a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b9c:	e001      	b.n	8001ba2 <LoopFillZerobss>

08001b9e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b9e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ba0:	3204      	adds	r2, #4

08001ba2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001ba2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ba4:	d3fb      	bcc.n	8001b9e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001ba6:	f7ff ff1d 	bl	80019e4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001baa:	f009 fd33 	bl	800b614 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001bae:	f7ff fb03 	bl	80011b8 <main>
  bx  lr    
 8001bb2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001bb4:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8001bb8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001bbc:	20000498 	.word	0x20000498
  ldr r2, =_sidata
 8001bc0:	0800ea3c 	.word	0x0800ea3c
  ldr r2, =_sbss
 8001bc4:	20000498 	.word	0x20000498
  ldr r4, =_ebss
 8001bc8:	200006a8 	.word	0x200006a8

08001bcc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001bcc:	e7fe      	b.n	8001bcc <ADC_IRQHandler>

08001bce <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001bce:	b580      	push	{r7, lr}
 8001bd0:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001bd2:	2003      	movs	r0, #3
 8001bd4:	f000 f94c 	bl	8001e70 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001bd8:	200f      	movs	r0, #15
 8001bda:	f000 f805 	bl	8001be8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001bde:	f7ff fde3 	bl	80017a8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001be2:	2300      	movs	r3, #0
}
 8001be4:	4618      	mov	r0, r3
 8001be6:	bd80      	pop	{r7, pc}

08001be8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	b082      	sub	sp, #8
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001bf0:	4b12      	ldr	r3, [pc, #72]	; (8001c3c <HAL_InitTick+0x54>)
 8001bf2:	681a      	ldr	r2, [r3, #0]
 8001bf4:	4b12      	ldr	r3, [pc, #72]	; (8001c40 <HAL_InitTick+0x58>)
 8001bf6:	781b      	ldrb	r3, [r3, #0]
 8001bf8:	4619      	mov	r1, r3
 8001bfa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001bfe:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c02:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c06:	4618      	mov	r0, r3
 8001c08:	f000 f996 	bl	8001f38 <HAL_SYSTICK_Config>
 8001c0c:	4603      	mov	r3, r0
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d001      	beq.n	8001c16 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001c12:	2301      	movs	r3, #1
 8001c14:	e00e      	b.n	8001c34 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	2b0f      	cmp	r3, #15
 8001c1a:	d80a      	bhi.n	8001c32 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	6879      	ldr	r1, [r7, #4]
 8001c20:	f04f 30ff 	mov.w	r0, #4294967295
 8001c24:	f000 f944 	bl	8001eb0 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001c28:	4a06      	ldr	r2, [pc, #24]	; (8001c44 <HAL_InitTick+0x5c>)
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001c2e:	2300      	movs	r3, #0
 8001c30:	e000      	b.n	8001c34 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001c32:	2301      	movs	r3, #1
}
 8001c34:	4618      	mov	r0, r3
 8001c36:	3708      	adds	r7, #8
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	bd80      	pop	{r7, pc}
 8001c3c:	20000000 	.word	0x20000000
 8001c40:	20000008 	.word	0x20000008
 8001c44:	20000004 	.word	0x20000004

08001c48 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c48:	b480      	push	{r7}
 8001c4a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c4c:	4b06      	ldr	r3, [pc, #24]	; (8001c68 <HAL_IncTick+0x20>)
 8001c4e:	781b      	ldrb	r3, [r3, #0]
 8001c50:	461a      	mov	r2, r3
 8001c52:	4b06      	ldr	r3, [pc, #24]	; (8001c6c <HAL_IncTick+0x24>)
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	4413      	add	r3, r2
 8001c58:	4a04      	ldr	r2, [pc, #16]	; (8001c6c <HAL_IncTick+0x24>)
 8001c5a:	6013      	str	r3, [r2, #0]
}
 8001c5c:	bf00      	nop
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c64:	4770      	bx	lr
 8001c66:	bf00      	nop
 8001c68:	20000008 	.word	0x20000008
 8001c6c:	20000654 	.word	0x20000654

08001c70 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c70:	b480      	push	{r7}
 8001c72:	af00      	add	r7, sp, #0
  return uwTick;
 8001c74:	4b03      	ldr	r3, [pc, #12]	; (8001c84 <HAL_GetTick+0x14>)
 8001c76:	681b      	ldr	r3, [r3, #0]
}
 8001c78:	4618      	mov	r0, r3
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c80:	4770      	bx	lr
 8001c82:	bf00      	nop
 8001c84:	20000654 	.word	0x20000654

08001c88 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	b084      	sub	sp, #16
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001c90:	f7ff ffee 	bl	8001c70 <HAL_GetTick>
 8001c94:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ca0:	d005      	beq.n	8001cae <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001ca2:	4b0a      	ldr	r3, [pc, #40]	; (8001ccc <HAL_Delay+0x44>)
 8001ca4:	781b      	ldrb	r3, [r3, #0]
 8001ca6:	461a      	mov	r2, r3
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	4413      	add	r3, r2
 8001cac:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001cae:	bf00      	nop
 8001cb0:	f7ff ffde 	bl	8001c70 <HAL_GetTick>
 8001cb4:	4602      	mov	r2, r0
 8001cb6:	68bb      	ldr	r3, [r7, #8]
 8001cb8:	1ad3      	subs	r3, r2, r3
 8001cba:	68fa      	ldr	r2, [r7, #12]
 8001cbc:	429a      	cmp	r2, r3
 8001cbe:	d8f7      	bhi.n	8001cb0 <HAL_Delay+0x28>
  {
  }
}
 8001cc0:	bf00      	nop
 8001cc2:	bf00      	nop
 8001cc4:	3710      	adds	r7, #16
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	bd80      	pop	{r7, pc}
 8001cca:	bf00      	nop
 8001ccc:	20000008 	.word	0x20000008

08001cd0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001cd0:	b480      	push	{r7}
 8001cd2:	b085      	sub	sp, #20
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	f003 0307 	and.w	r3, r3, #7
 8001cde:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ce0:	4b0b      	ldr	r3, [pc, #44]	; (8001d10 <__NVIC_SetPriorityGrouping+0x40>)
 8001ce2:	68db      	ldr	r3, [r3, #12]
 8001ce4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ce6:	68ba      	ldr	r2, [r7, #8]
 8001ce8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001cec:	4013      	ands	r3, r2
 8001cee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001cf4:	68bb      	ldr	r3, [r7, #8]
 8001cf6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001cf8:	4b06      	ldr	r3, [pc, #24]	; (8001d14 <__NVIC_SetPriorityGrouping+0x44>)
 8001cfa:	4313      	orrs	r3, r2
 8001cfc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001cfe:	4a04      	ldr	r2, [pc, #16]	; (8001d10 <__NVIC_SetPriorityGrouping+0x40>)
 8001d00:	68bb      	ldr	r3, [r7, #8]
 8001d02:	60d3      	str	r3, [r2, #12]
}
 8001d04:	bf00      	nop
 8001d06:	3714      	adds	r7, #20
 8001d08:	46bd      	mov	sp, r7
 8001d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0e:	4770      	bx	lr
 8001d10:	e000ed00 	.word	0xe000ed00
 8001d14:	05fa0000 	.word	0x05fa0000

08001d18 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d18:	b480      	push	{r7}
 8001d1a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d1c:	4b04      	ldr	r3, [pc, #16]	; (8001d30 <__NVIC_GetPriorityGrouping+0x18>)
 8001d1e:	68db      	ldr	r3, [r3, #12]
 8001d20:	0a1b      	lsrs	r3, r3, #8
 8001d22:	f003 0307 	and.w	r3, r3, #7
}
 8001d26:	4618      	mov	r0, r3
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2e:	4770      	bx	lr
 8001d30:	e000ed00 	.word	0xe000ed00

08001d34 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d34:	b480      	push	{r7}
 8001d36:	b083      	sub	sp, #12
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	4603      	mov	r3, r0
 8001d3c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	db0b      	blt.n	8001d5e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d46:	79fb      	ldrb	r3, [r7, #7]
 8001d48:	f003 021f 	and.w	r2, r3, #31
 8001d4c:	4907      	ldr	r1, [pc, #28]	; (8001d6c <__NVIC_EnableIRQ+0x38>)
 8001d4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d52:	095b      	lsrs	r3, r3, #5
 8001d54:	2001      	movs	r0, #1
 8001d56:	fa00 f202 	lsl.w	r2, r0, r2
 8001d5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001d5e:	bf00      	nop
 8001d60:	370c      	adds	r7, #12
 8001d62:	46bd      	mov	sp, r7
 8001d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d68:	4770      	bx	lr
 8001d6a:	bf00      	nop
 8001d6c:	e000e100 	.word	0xe000e100

08001d70 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d70:	b480      	push	{r7}
 8001d72:	b083      	sub	sp, #12
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	4603      	mov	r3, r0
 8001d78:	6039      	str	r1, [r7, #0]
 8001d7a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d7c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	db0a      	blt.n	8001d9a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d84:	683b      	ldr	r3, [r7, #0]
 8001d86:	b2da      	uxtb	r2, r3
 8001d88:	490c      	ldr	r1, [pc, #48]	; (8001dbc <__NVIC_SetPriority+0x4c>)
 8001d8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d8e:	0112      	lsls	r2, r2, #4
 8001d90:	b2d2      	uxtb	r2, r2
 8001d92:	440b      	add	r3, r1
 8001d94:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d98:	e00a      	b.n	8001db0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d9a:	683b      	ldr	r3, [r7, #0]
 8001d9c:	b2da      	uxtb	r2, r3
 8001d9e:	4908      	ldr	r1, [pc, #32]	; (8001dc0 <__NVIC_SetPriority+0x50>)
 8001da0:	79fb      	ldrb	r3, [r7, #7]
 8001da2:	f003 030f 	and.w	r3, r3, #15
 8001da6:	3b04      	subs	r3, #4
 8001da8:	0112      	lsls	r2, r2, #4
 8001daa:	b2d2      	uxtb	r2, r2
 8001dac:	440b      	add	r3, r1
 8001dae:	761a      	strb	r2, [r3, #24]
}
 8001db0:	bf00      	nop
 8001db2:	370c      	adds	r7, #12
 8001db4:	46bd      	mov	sp, r7
 8001db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dba:	4770      	bx	lr
 8001dbc:	e000e100 	.word	0xe000e100
 8001dc0:	e000ed00 	.word	0xe000ed00

08001dc4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001dc4:	b480      	push	{r7}
 8001dc6:	b089      	sub	sp, #36	; 0x24
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	60f8      	str	r0, [r7, #12]
 8001dcc:	60b9      	str	r1, [r7, #8]
 8001dce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	f003 0307 	and.w	r3, r3, #7
 8001dd6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001dd8:	69fb      	ldr	r3, [r7, #28]
 8001dda:	f1c3 0307 	rsb	r3, r3, #7
 8001dde:	2b04      	cmp	r3, #4
 8001de0:	bf28      	it	cs
 8001de2:	2304      	movcs	r3, #4
 8001de4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001de6:	69fb      	ldr	r3, [r7, #28]
 8001de8:	3304      	adds	r3, #4
 8001dea:	2b06      	cmp	r3, #6
 8001dec:	d902      	bls.n	8001df4 <NVIC_EncodePriority+0x30>
 8001dee:	69fb      	ldr	r3, [r7, #28]
 8001df0:	3b03      	subs	r3, #3
 8001df2:	e000      	b.n	8001df6 <NVIC_EncodePriority+0x32>
 8001df4:	2300      	movs	r3, #0
 8001df6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001df8:	f04f 32ff 	mov.w	r2, #4294967295
 8001dfc:	69bb      	ldr	r3, [r7, #24]
 8001dfe:	fa02 f303 	lsl.w	r3, r2, r3
 8001e02:	43da      	mvns	r2, r3
 8001e04:	68bb      	ldr	r3, [r7, #8]
 8001e06:	401a      	ands	r2, r3
 8001e08:	697b      	ldr	r3, [r7, #20]
 8001e0a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e0c:	f04f 31ff 	mov.w	r1, #4294967295
 8001e10:	697b      	ldr	r3, [r7, #20]
 8001e12:	fa01 f303 	lsl.w	r3, r1, r3
 8001e16:	43d9      	mvns	r1, r3
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e1c:	4313      	orrs	r3, r2
         );
}
 8001e1e:	4618      	mov	r0, r3
 8001e20:	3724      	adds	r7, #36	; 0x24
 8001e22:	46bd      	mov	sp, r7
 8001e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e28:	4770      	bx	lr
	...

08001e2c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	b082      	sub	sp, #8
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	3b01      	subs	r3, #1
 8001e38:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001e3c:	d301      	bcc.n	8001e42 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e3e:	2301      	movs	r3, #1
 8001e40:	e00f      	b.n	8001e62 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e42:	4a0a      	ldr	r2, [pc, #40]	; (8001e6c <SysTick_Config+0x40>)
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	3b01      	subs	r3, #1
 8001e48:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e4a:	210f      	movs	r1, #15
 8001e4c:	f04f 30ff 	mov.w	r0, #4294967295
 8001e50:	f7ff ff8e 	bl	8001d70 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e54:	4b05      	ldr	r3, [pc, #20]	; (8001e6c <SysTick_Config+0x40>)
 8001e56:	2200      	movs	r2, #0
 8001e58:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e5a:	4b04      	ldr	r3, [pc, #16]	; (8001e6c <SysTick_Config+0x40>)
 8001e5c:	2207      	movs	r2, #7
 8001e5e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e60:	2300      	movs	r3, #0
}
 8001e62:	4618      	mov	r0, r3
 8001e64:	3708      	adds	r7, #8
 8001e66:	46bd      	mov	sp, r7
 8001e68:	bd80      	pop	{r7, pc}
 8001e6a:	bf00      	nop
 8001e6c:	e000e010 	.word	0xe000e010

08001e70 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	b082      	sub	sp, #8
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	2b07      	cmp	r3, #7
 8001e7c:	d00f      	beq.n	8001e9e <HAL_NVIC_SetPriorityGrouping+0x2e>
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	2b06      	cmp	r3, #6
 8001e82:	d00c      	beq.n	8001e9e <HAL_NVIC_SetPriorityGrouping+0x2e>
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	2b05      	cmp	r3, #5
 8001e88:	d009      	beq.n	8001e9e <HAL_NVIC_SetPriorityGrouping+0x2e>
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	2b04      	cmp	r3, #4
 8001e8e:	d006      	beq.n	8001e9e <HAL_NVIC_SetPriorityGrouping+0x2e>
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	2b03      	cmp	r3, #3
 8001e94:	d003      	beq.n	8001e9e <HAL_NVIC_SetPriorityGrouping+0x2e>
 8001e96:	2191      	movs	r1, #145	; 0x91
 8001e98:	4804      	ldr	r0, [pc, #16]	; (8001eac <HAL_NVIC_SetPriorityGrouping+0x3c>)
 8001e9a:	f7ff fc7a 	bl	8001792 <assert_failed>
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e9e:	6878      	ldr	r0, [r7, #4]
 8001ea0:	f7ff ff16 	bl	8001cd0 <__NVIC_SetPriorityGrouping>
}
 8001ea4:	bf00      	nop
 8001ea6:	3708      	adds	r7, #8
 8001ea8:	46bd      	mov	sp, r7
 8001eaa:	bd80      	pop	{r7, pc}
 8001eac:	0800e4a0 	.word	0x0800e4a0

08001eb0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	b086      	sub	sp, #24
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	4603      	mov	r3, r0
 8001eb8:	60b9      	str	r1, [r7, #8]
 8001eba:	607a      	str	r2, [r7, #4]
 8001ebc:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	2b0f      	cmp	r3, #15
 8001ec6:	d903      	bls.n	8001ed0 <HAL_NVIC_SetPriority+0x20>
 8001ec8:	21a9      	movs	r1, #169	; 0xa9
 8001eca:	480e      	ldr	r0, [pc, #56]	; (8001f04 <HAL_NVIC_SetPriority+0x54>)
 8001ecc:	f7ff fc61 	bl	8001792 <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 8001ed0:	68bb      	ldr	r3, [r7, #8]
 8001ed2:	2b0f      	cmp	r3, #15
 8001ed4:	d903      	bls.n	8001ede <HAL_NVIC_SetPriority+0x2e>
 8001ed6:	21aa      	movs	r1, #170	; 0xaa
 8001ed8:	480a      	ldr	r0, [pc, #40]	; (8001f04 <HAL_NVIC_SetPriority+0x54>)
 8001eda:	f7ff fc5a 	bl	8001792 <assert_failed>
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001ede:	f7ff ff1b 	bl	8001d18 <__NVIC_GetPriorityGrouping>
 8001ee2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001ee4:	687a      	ldr	r2, [r7, #4]
 8001ee6:	68b9      	ldr	r1, [r7, #8]
 8001ee8:	6978      	ldr	r0, [r7, #20]
 8001eea:	f7ff ff6b 	bl	8001dc4 <NVIC_EncodePriority>
 8001eee:	4602      	mov	r2, r0
 8001ef0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ef4:	4611      	mov	r1, r2
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	f7ff ff3a 	bl	8001d70 <__NVIC_SetPriority>
}
 8001efc:	bf00      	nop
 8001efe:	3718      	adds	r7, #24
 8001f00:	46bd      	mov	sp, r7
 8001f02:	bd80      	pop	{r7, pc}
 8001f04:	0800e4a0 	.word	0x0800e4a0

08001f08 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	b082      	sub	sp, #8
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	4603      	mov	r3, r0
 8001f10:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 8001f12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	da03      	bge.n	8001f22 <HAL_NVIC_EnableIRQ+0x1a>
 8001f1a:	21bd      	movs	r1, #189	; 0xbd
 8001f1c:	4805      	ldr	r0, [pc, #20]	; (8001f34 <HAL_NVIC_EnableIRQ+0x2c>)
 8001f1e:	f7ff fc38 	bl	8001792 <assert_failed>
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001f22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f26:	4618      	mov	r0, r3
 8001f28:	f7ff ff04 	bl	8001d34 <__NVIC_EnableIRQ>
}
 8001f2c:	bf00      	nop
 8001f2e:	3708      	adds	r7, #8
 8001f30:	46bd      	mov	sp, r7
 8001f32:	bd80      	pop	{r7, pc}
 8001f34:	0800e4a0 	.word	0x0800e4a0

08001f38 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	b082      	sub	sp, #8
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001f40:	6878      	ldr	r0, [r7, #4]
 8001f42:	f7ff ff73 	bl	8001e2c <SysTick_Config>
 8001f46:	4603      	mov	r3, r0
}
 8001f48:	4618      	mov	r0, r3
 8001f4a:	3708      	adds	r7, #8
 8001f4c:	46bd      	mov	sp, r7
 8001f4e:	bd80      	pop	{r7, pc}

08001f50 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001f50:	b580      	push	{r7, lr}
 8001f52:	b084      	sub	sp, #16
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f5c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001f5e:	f7ff fe87 	bl	8001c70 <HAL_GetTick>
 8001f62:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001f6a:	b2db      	uxtb	r3, r3
 8001f6c:	2b02      	cmp	r3, #2
 8001f6e:	d008      	beq.n	8001f82 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	2280      	movs	r2, #128	; 0x80
 8001f74:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	2200      	movs	r2, #0
 8001f7a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001f7e:	2301      	movs	r3, #1
 8001f80:	e052      	b.n	8002028 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	681a      	ldr	r2, [r3, #0]
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	f022 0216 	bic.w	r2, r2, #22
 8001f90:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	695a      	ldr	r2, [r3, #20]
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001fa0:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d103      	bne.n	8001fb2 <HAL_DMA_Abort+0x62>
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d007      	beq.n	8001fc2 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	681a      	ldr	r2, [r3, #0]
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	f022 0208 	bic.w	r2, r2, #8
 8001fc0:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	681a      	ldr	r2, [r3, #0]
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	f022 0201 	bic.w	r2, r2, #1
 8001fd0:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001fd2:	e013      	b.n	8001ffc <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001fd4:	f7ff fe4c 	bl	8001c70 <HAL_GetTick>
 8001fd8:	4602      	mov	r2, r0
 8001fda:	68bb      	ldr	r3, [r7, #8]
 8001fdc:	1ad3      	subs	r3, r2, r3
 8001fde:	2b05      	cmp	r3, #5
 8001fe0:	d90c      	bls.n	8001ffc <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	2220      	movs	r2, #32
 8001fe6:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	2203      	movs	r2, #3
 8001fec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 8001ff8:	2303      	movs	r3, #3
 8001ffa:	e015      	b.n	8002028 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	f003 0301 	and.w	r3, r3, #1
 8002006:	2b00      	cmp	r3, #0
 8002008:	d1e4      	bne.n	8001fd4 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800200e:	223f      	movs	r2, #63	; 0x3f
 8002010:	409a      	lsls	r2, r3
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	2201      	movs	r2, #1
 800201a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	2200      	movs	r2, #0
 8002022:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 8002026:	2300      	movs	r3, #0
}
 8002028:	4618      	mov	r0, r3
 800202a:	3710      	adds	r7, #16
 800202c:	46bd      	mov	sp, r7
 800202e:	bd80      	pop	{r7, pc}

08002030 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002030:	b480      	push	{r7}
 8002032:	b083      	sub	sp, #12
 8002034:	af00      	add	r7, sp, #0
 8002036:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800203e:	b2db      	uxtb	r3, r3
 8002040:	2b02      	cmp	r3, #2
 8002042:	d004      	beq.n	800204e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	2280      	movs	r2, #128	; 0x80
 8002048:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800204a:	2301      	movs	r3, #1
 800204c:	e00c      	b.n	8002068 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	2205      	movs	r2, #5
 8002052:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	681a      	ldr	r2, [r3, #0]
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	f022 0201 	bic.w	r2, r2, #1
 8002064:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002066:	2300      	movs	r3, #0
}
 8002068:	4618      	mov	r0, r3
 800206a:	370c      	adds	r7, #12
 800206c:	46bd      	mov	sp, r7
 800206e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002072:	4770      	bx	lr

08002074 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002074:	b580      	push	{r7, lr}
 8002076:	b088      	sub	sp, #32
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]
 800207c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800207e:	2300      	movs	r3, #0
 8002080:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002082:	2300      	movs	r3, #0
 8002084:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002086:	2300      	movs	r3, #0
 8002088:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800208a:	2300      	movs	r3, #0
 800208c:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	4a3a      	ldr	r2, [pc, #232]	; (800217c <HAL_GPIO_Init+0x108>)
 8002092:	4293      	cmp	r3, r2
 8002094:	d02b      	beq.n	80020ee <HAL_GPIO_Init+0x7a>
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	4a39      	ldr	r2, [pc, #228]	; (8002180 <HAL_GPIO_Init+0x10c>)
 800209a:	4293      	cmp	r3, r2
 800209c:	d027      	beq.n	80020ee <HAL_GPIO_Init+0x7a>
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	4a38      	ldr	r2, [pc, #224]	; (8002184 <HAL_GPIO_Init+0x110>)
 80020a2:	4293      	cmp	r3, r2
 80020a4:	d023      	beq.n	80020ee <HAL_GPIO_Init+0x7a>
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	4a37      	ldr	r2, [pc, #220]	; (8002188 <HAL_GPIO_Init+0x114>)
 80020aa:	4293      	cmp	r3, r2
 80020ac:	d01f      	beq.n	80020ee <HAL_GPIO_Init+0x7a>
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	4a36      	ldr	r2, [pc, #216]	; (800218c <HAL_GPIO_Init+0x118>)
 80020b2:	4293      	cmp	r3, r2
 80020b4:	d01b      	beq.n	80020ee <HAL_GPIO_Init+0x7a>
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	4a35      	ldr	r2, [pc, #212]	; (8002190 <HAL_GPIO_Init+0x11c>)
 80020ba:	4293      	cmp	r3, r2
 80020bc:	d017      	beq.n	80020ee <HAL_GPIO_Init+0x7a>
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	4a34      	ldr	r2, [pc, #208]	; (8002194 <HAL_GPIO_Init+0x120>)
 80020c2:	4293      	cmp	r3, r2
 80020c4:	d013      	beq.n	80020ee <HAL_GPIO_Init+0x7a>
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	4a33      	ldr	r2, [pc, #204]	; (8002198 <HAL_GPIO_Init+0x124>)
 80020ca:	4293      	cmp	r3, r2
 80020cc:	d00f      	beq.n	80020ee <HAL_GPIO_Init+0x7a>
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	4a32      	ldr	r2, [pc, #200]	; (800219c <HAL_GPIO_Init+0x128>)
 80020d2:	4293      	cmp	r3, r2
 80020d4:	d00b      	beq.n	80020ee <HAL_GPIO_Init+0x7a>
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	4a31      	ldr	r2, [pc, #196]	; (80021a0 <HAL_GPIO_Init+0x12c>)
 80020da:	4293      	cmp	r3, r2
 80020dc:	d007      	beq.n	80020ee <HAL_GPIO_Init+0x7a>
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	4a30      	ldr	r2, [pc, #192]	; (80021a4 <HAL_GPIO_Init+0x130>)
 80020e2:	4293      	cmp	r3, r2
 80020e4:	d003      	beq.n	80020ee <HAL_GPIO_Init+0x7a>
 80020e6:	21aa      	movs	r1, #170	; 0xaa
 80020e8:	482f      	ldr	r0, [pc, #188]	; (80021a8 <HAL_GPIO_Init+0x134>)
 80020ea:	f7ff fb52 	bl	8001792 <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 80020ee:	683b      	ldr	r3, [r7, #0]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	b29b      	uxth	r3, r3
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d103      	bne.n	8002100 <HAL_GPIO_Init+0x8c>
 80020f8:	21ab      	movs	r1, #171	; 0xab
 80020fa:	482b      	ldr	r0, [pc, #172]	; (80021a8 <HAL_GPIO_Init+0x134>)
 80020fc:	f7ff fb49 	bl	8001792 <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 8002100:	683b      	ldr	r3, [r7, #0]
 8002102:	685b      	ldr	r3, [r3, #4]
 8002104:	2b00      	cmp	r3, #0
 8002106:	d035      	beq.n	8002174 <HAL_GPIO_Init+0x100>
 8002108:	683b      	ldr	r3, [r7, #0]
 800210a:	685b      	ldr	r3, [r3, #4]
 800210c:	2b01      	cmp	r3, #1
 800210e:	d031      	beq.n	8002174 <HAL_GPIO_Init+0x100>
 8002110:	683b      	ldr	r3, [r7, #0]
 8002112:	685b      	ldr	r3, [r3, #4]
 8002114:	2b11      	cmp	r3, #17
 8002116:	d02d      	beq.n	8002174 <HAL_GPIO_Init+0x100>
 8002118:	683b      	ldr	r3, [r7, #0]
 800211a:	685b      	ldr	r3, [r3, #4]
 800211c:	2b02      	cmp	r3, #2
 800211e:	d029      	beq.n	8002174 <HAL_GPIO_Init+0x100>
 8002120:	683b      	ldr	r3, [r7, #0]
 8002122:	685b      	ldr	r3, [r3, #4]
 8002124:	2b12      	cmp	r3, #18
 8002126:	d025      	beq.n	8002174 <HAL_GPIO_Init+0x100>
 8002128:	683b      	ldr	r3, [r7, #0]
 800212a:	685b      	ldr	r3, [r3, #4]
 800212c:	f5b3 1f88 	cmp.w	r3, #1114112	; 0x110000
 8002130:	d020      	beq.n	8002174 <HAL_GPIO_Init+0x100>
 8002132:	683b      	ldr	r3, [r7, #0]
 8002134:	685b      	ldr	r3, [r3, #4]
 8002136:	f5b3 1f04 	cmp.w	r3, #2162688	; 0x210000
 800213a:	d01b      	beq.n	8002174 <HAL_GPIO_Init+0x100>
 800213c:	683b      	ldr	r3, [r7, #0]
 800213e:	685b      	ldr	r3, [r3, #4]
 8002140:	f5b3 1f44 	cmp.w	r3, #3211264	; 0x310000
 8002144:	d016      	beq.n	8002174 <HAL_GPIO_Init+0x100>
 8002146:	683b      	ldr	r3, [r7, #0]
 8002148:	685b      	ldr	r3, [r3, #4]
 800214a:	f5b3 1f90 	cmp.w	r3, #1179648	; 0x120000
 800214e:	d011      	beq.n	8002174 <HAL_GPIO_Init+0x100>
 8002150:	683b      	ldr	r3, [r7, #0]
 8002152:	685b      	ldr	r3, [r3, #4]
 8002154:	f5b3 1f08 	cmp.w	r3, #2228224	; 0x220000
 8002158:	d00c      	beq.n	8002174 <HAL_GPIO_Init+0x100>
 800215a:	683b      	ldr	r3, [r7, #0]
 800215c:	685b      	ldr	r3, [r3, #4]
 800215e:	f5b3 1f48 	cmp.w	r3, #3276800	; 0x320000
 8002162:	d007      	beq.n	8002174 <HAL_GPIO_Init+0x100>
 8002164:	683b      	ldr	r3, [r7, #0]
 8002166:	685b      	ldr	r3, [r3, #4]
 8002168:	2b03      	cmp	r3, #3
 800216a:	d003      	beq.n	8002174 <HAL_GPIO_Init+0x100>
 800216c:	21ac      	movs	r1, #172	; 0xac
 800216e:	480e      	ldr	r0, [pc, #56]	; (80021a8 <HAL_GPIO_Init+0x134>)
 8002170:	f7ff fb0f 	bl	8001792 <assert_failed>

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8002174:	2300      	movs	r3, #0
 8002176:	61fb      	str	r3, [r7, #28]
 8002178:	e2c7      	b.n	800270a <HAL_GPIO_Init+0x696>
 800217a:	bf00      	nop
 800217c:	40020000 	.word	0x40020000
 8002180:	40020400 	.word	0x40020400
 8002184:	40020800 	.word	0x40020800
 8002188:	40020c00 	.word	0x40020c00
 800218c:	40021000 	.word	0x40021000
 8002190:	40021400 	.word	0x40021400
 8002194:	40021800 	.word	0x40021800
 8002198:	40021c00 	.word	0x40021c00
 800219c:	40022000 	.word	0x40022000
 80021a0:	40022400 	.word	0x40022400
 80021a4:	40022800 	.word	0x40022800
 80021a8:	0800e4dc 	.word	0x0800e4dc
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80021ac:	2201      	movs	r2, #1
 80021ae:	69fb      	ldr	r3, [r7, #28]
 80021b0:	fa02 f303 	lsl.w	r3, r2, r3
 80021b4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80021b6:	683b      	ldr	r3, [r7, #0]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	697a      	ldr	r2, [r7, #20]
 80021bc:	4013      	ands	r3, r2
 80021be:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80021c0:	693a      	ldr	r2, [r7, #16]
 80021c2:	697b      	ldr	r3, [r7, #20]
 80021c4:	429a      	cmp	r2, r3
 80021c6:	f040 829d 	bne.w	8002704 <HAL_GPIO_Init+0x690>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80021ca:	683b      	ldr	r3, [r7, #0]
 80021cc:	685b      	ldr	r3, [r3, #4]
 80021ce:	f003 0303 	and.w	r3, r3, #3
 80021d2:	2b01      	cmp	r3, #1
 80021d4:	d005      	beq.n	80021e2 <HAL_GPIO_Init+0x16e>
 80021d6:	683b      	ldr	r3, [r7, #0]
 80021d8:	685b      	ldr	r3, [r3, #4]
 80021da:	f003 0303 	and.w	r3, r3, #3
 80021de:	2b02      	cmp	r3, #2
 80021e0:	d144      	bne.n	800226c <HAL_GPIO_Init+0x1f8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 80021e2:	683b      	ldr	r3, [r7, #0]
 80021e4:	68db      	ldr	r3, [r3, #12]
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d00f      	beq.n	800220a <HAL_GPIO_Init+0x196>
 80021ea:	683b      	ldr	r3, [r7, #0]
 80021ec:	68db      	ldr	r3, [r3, #12]
 80021ee:	2b01      	cmp	r3, #1
 80021f0:	d00b      	beq.n	800220a <HAL_GPIO_Init+0x196>
 80021f2:	683b      	ldr	r3, [r7, #0]
 80021f4:	68db      	ldr	r3, [r3, #12]
 80021f6:	2b02      	cmp	r3, #2
 80021f8:	d007      	beq.n	800220a <HAL_GPIO_Init+0x196>
 80021fa:	683b      	ldr	r3, [r7, #0]
 80021fc:	68db      	ldr	r3, [r3, #12]
 80021fe:	2b03      	cmp	r3, #3
 8002200:	d003      	beq.n	800220a <HAL_GPIO_Init+0x196>
 8002202:	21bd      	movs	r1, #189	; 0xbd
 8002204:	4831      	ldr	r0, [pc, #196]	; (80022cc <HAL_GPIO_Init+0x258>)
 8002206:	f7ff fac4 	bl	8001792 <assert_failed>
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	689b      	ldr	r3, [r3, #8]
 800220e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002210:	69fb      	ldr	r3, [r7, #28]
 8002212:	005b      	lsls	r3, r3, #1
 8002214:	2203      	movs	r2, #3
 8002216:	fa02 f303 	lsl.w	r3, r2, r3
 800221a:	43db      	mvns	r3, r3
 800221c:	69ba      	ldr	r2, [r7, #24]
 800221e:	4013      	ands	r3, r2
 8002220:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002222:	683b      	ldr	r3, [r7, #0]
 8002224:	68da      	ldr	r2, [r3, #12]
 8002226:	69fb      	ldr	r3, [r7, #28]
 8002228:	005b      	lsls	r3, r3, #1
 800222a:	fa02 f303 	lsl.w	r3, r2, r3
 800222e:	69ba      	ldr	r2, [r7, #24]
 8002230:	4313      	orrs	r3, r2
 8002232:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	69ba      	ldr	r2, [r7, #24]
 8002238:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	685b      	ldr	r3, [r3, #4]
 800223e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002240:	2201      	movs	r2, #1
 8002242:	69fb      	ldr	r3, [r7, #28]
 8002244:	fa02 f303 	lsl.w	r3, r2, r3
 8002248:	43db      	mvns	r3, r3
 800224a:	69ba      	ldr	r2, [r7, #24]
 800224c:	4013      	ands	r3, r2
 800224e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002250:	683b      	ldr	r3, [r7, #0]
 8002252:	685b      	ldr	r3, [r3, #4]
 8002254:	091b      	lsrs	r3, r3, #4
 8002256:	f003 0201 	and.w	r2, r3, #1
 800225a:	69fb      	ldr	r3, [r7, #28]
 800225c:	fa02 f303 	lsl.w	r3, r2, r3
 8002260:	69ba      	ldr	r2, [r7, #24]
 8002262:	4313      	orrs	r3, r2
 8002264:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	69ba      	ldr	r2, [r7, #24]
 800226a:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800226c:	683b      	ldr	r3, [r7, #0]
 800226e:	685b      	ldr	r3, [r3, #4]
 8002270:	f003 0303 	and.w	r3, r3, #3
 8002274:	2b03      	cmp	r3, #3
 8002276:	d02b      	beq.n	80022d0 <HAL_GPIO_Init+0x25c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 8002278:	683b      	ldr	r3, [r7, #0]
 800227a:	689b      	ldr	r3, [r3, #8]
 800227c:	2b00      	cmp	r3, #0
 800227e:	d00b      	beq.n	8002298 <HAL_GPIO_Init+0x224>
 8002280:	683b      	ldr	r3, [r7, #0]
 8002282:	689b      	ldr	r3, [r3, #8]
 8002284:	2b01      	cmp	r3, #1
 8002286:	d007      	beq.n	8002298 <HAL_GPIO_Init+0x224>
 8002288:	683b      	ldr	r3, [r7, #0]
 800228a:	689b      	ldr	r3, [r3, #8]
 800228c:	2b02      	cmp	r3, #2
 800228e:	d003      	beq.n	8002298 <HAL_GPIO_Init+0x224>
 8002290:	21ce      	movs	r1, #206	; 0xce
 8002292:	480e      	ldr	r0, [pc, #56]	; (80022cc <HAL_GPIO_Init+0x258>)
 8002294:	f7ff fa7d 	bl	8001792 <assert_failed>

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	68db      	ldr	r3, [r3, #12]
 800229c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800229e:	69fb      	ldr	r3, [r7, #28]
 80022a0:	005b      	lsls	r3, r3, #1
 80022a2:	2203      	movs	r2, #3
 80022a4:	fa02 f303 	lsl.w	r3, r2, r3
 80022a8:	43db      	mvns	r3, r3
 80022aa:	69ba      	ldr	r2, [r7, #24]
 80022ac:	4013      	ands	r3, r2
 80022ae:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80022b0:	683b      	ldr	r3, [r7, #0]
 80022b2:	689a      	ldr	r2, [r3, #8]
 80022b4:	69fb      	ldr	r3, [r7, #28]
 80022b6:	005b      	lsls	r3, r3, #1
 80022b8:	fa02 f303 	lsl.w	r3, r2, r3
 80022bc:	69ba      	ldr	r2, [r7, #24]
 80022be:	4313      	orrs	r3, r2
 80022c0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	69ba      	ldr	r2, [r7, #24]
 80022c6:	60da      	str	r2, [r3, #12]
 80022c8:	e002      	b.n	80022d0 <HAL_GPIO_Init+0x25c>
 80022ca:	bf00      	nop
 80022cc:	0800e4dc 	.word	0x0800e4dc
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80022d0:	683b      	ldr	r3, [r7, #0]
 80022d2:	685b      	ldr	r3, [r3, #4]
 80022d4:	f003 0303 	and.w	r3, r3, #3
 80022d8:	2b02      	cmp	r3, #2
 80022da:	f040 8134 	bne.w	8002546 <HAL_GPIO_Init+0x4d2>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 80022de:	683b      	ldr	r3, [r7, #0]
 80022e0:	691b      	ldr	r3, [r3, #16]
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	f000 810b 	beq.w	80024fe <HAL_GPIO_Init+0x48a>
 80022e8:	683b      	ldr	r3, [r7, #0]
 80022ea:	691b      	ldr	r3, [r3, #16]
 80022ec:	2b01      	cmp	r3, #1
 80022ee:	f000 8106 	beq.w	80024fe <HAL_GPIO_Init+0x48a>
 80022f2:	683b      	ldr	r3, [r7, #0]
 80022f4:	691b      	ldr	r3, [r3, #16]
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	f000 8101 	beq.w	80024fe <HAL_GPIO_Init+0x48a>
 80022fc:	683b      	ldr	r3, [r7, #0]
 80022fe:	691b      	ldr	r3, [r3, #16]
 8002300:	2b00      	cmp	r3, #0
 8002302:	f000 80fc 	beq.w	80024fe <HAL_GPIO_Init+0x48a>
 8002306:	683b      	ldr	r3, [r7, #0]
 8002308:	691b      	ldr	r3, [r3, #16]
 800230a:	2b00      	cmp	r3, #0
 800230c:	f000 80f7 	beq.w	80024fe <HAL_GPIO_Init+0x48a>
 8002310:	683b      	ldr	r3, [r7, #0]
 8002312:	691b      	ldr	r3, [r3, #16]
 8002314:	2b01      	cmp	r3, #1
 8002316:	f000 80f2 	beq.w	80024fe <HAL_GPIO_Init+0x48a>
 800231a:	683b      	ldr	r3, [r7, #0]
 800231c:	691b      	ldr	r3, [r3, #16]
 800231e:	2b02      	cmp	r3, #2
 8002320:	f000 80ed 	beq.w	80024fe <HAL_GPIO_Init+0x48a>
 8002324:	683b      	ldr	r3, [r7, #0]
 8002326:	691b      	ldr	r3, [r3, #16]
 8002328:	2b02      	cmp	r3, #2
 800232a:	f000 80e8 	beq.w	80024fe <HAL_GPIO_Init+0x48a>
 800232e:	683b      	ldr	r3, [r7, #0]
 8002330:	691b      	ldr	r3, [r3, #16]
 8002332:	2b02      	cmp	r3, #2
 8002334:	f000 80e3 	beq.w	80024fe <HAL_GPIO_Init+0x48a>
 8002338:	683b      	ldr	r3, [r7, #0]
 800233a:	691b      	ldr	r3, [r3, #16]
 800233c:	2b03      	cmp	r3, #3
 800233e:	f000 80de 	beq.w	80024fe <HAL_GPIO_Init+0x48a>
 8002342:	683b      	ldr	r3, [r7, #0]
 8002344:	691b      	ldr	r3, [r3, #16]
 8002346:	2b03      	cmp	r3, #3
 8002348:	f000 80d9 	beq.w	80024fe <HAL_GPIO_Init+0x48a>
 800234c:	683b      	ldr	r3, [r7, #0]
 800234e:	691b      	ldr	r3, [r3, #16]
 8002350:	2b03      	cmp	r3, #3
 8002352:	f000 80d4 	beq.w	80024fe <HAL_GPIO_Init+0x48a>
 8002356:	683b      	ldr	r3, [r7, #0]
 8002358:	691b      	ldr	r3, [r3, #16]
 800235a:	2b03      	cmp	r3, #3
 800235c:	f000 80cf 	beq.w	80024fe <HAL_GPIO_Init+0x48a>
 8002360:	683b      	ldr	r3, [r7, #0]
 8002362:	691b      	ldr	r3, [r3, #16]
 8002364:	2b03      	cmp	r3, #3
 8002366:	f000 80ca 	beq.w	80024fe <HAL_GPIO_Init+0x48a>
 800236a:	683b      	ldr	r3, [r7, #0]
 800236c:	691b      	ldr	r3, [r3, #16]
 800236e:	2b03      	cmp	r3, #3
 8002370:	f000 80c5 	beq.w	80024fe <HAL_GPIO_Init+0x48a>
 8002374:	683b      	ldr	r3, [r7, #0]
 8002376:	691b      	ldr	r3, [r3, #16]
 8002378:	2b04      	cmp	r3, #4
 800237a:	f000 80c0 	beq.w	80024fe <HAL_GPIO_Init+0x48a>
 800237e:	683b      	ldr	r3, [r7, #0]
 8002380:	691b      	ldr	r3, [r3, #16]
 8002382:	2b04      	cmp	r3, #4
 8002384:	f000 80bb 	beq.w	80024fe <HAL_GPIO_Init+0x48a>
 8002388:	683b      	ldr	r3, [r7, #0]
 800238a:	691b      	ldr	r3, [r3, #16]
 800238c:	2b04      	cmp	r3, #4
 800238e:	f000 80b6 	beq.w	80024fe <HAL_GPIO_Init+0x48a>
 8002392:	683b      	ldr	r3, [r7, #0]
 8002394:	691b      	ldr	r3, [r3, #16]
 8002396:	2b04      	cmp	r3, #4
 8002398:	f000 80b1 	beq.w	80024fe <HAL_GPIO_Init+0x48a>
 800239c:	683b      	ldr	r3, [r7, #0]
 800239e:	691b      	ldr	r3, [r3, #16]
 80023a0:	2b04      	cmp	r3, #4
 80023a2:	f000 80ac 	beq.w	80024fe <HAL_GPIO_Init+0x48a>
 80023a6:	683b      	ldr	r3, [r7, #0]
 80023a8:	691b      	ldr	r3, [r3, #16]
 80023aa:	2b05      	cmp	r3, #5
 80023ac:	f000 80a7 	beq.w	80024fe <HAL_GPIO_Init+0x48a>
 80023b0:	683b      	ldr	r3, [r7, #0]
 80023b2:	691b      	ldr	r3, [r3, #16]
 80023b4:	2b05      	cmp	r3, #5
 80023b6:	f000 80a2 	beq.w	80024fe <HAL_GPIO_Init+0x48a>
 80023ba:	683b      	ldr	r3, [r7, #0]
 80023bc:	691b      	ldr	r3, [r3, #16]
 80023be:	2b05      	cmp	r3, #5
 80023c0:	f000 809d 	beq.w	80024fe <HAL_GPIO_Init+0x48a>
 80023c4:	683b      	ldr	r3, [r7, #0]
 80023c6:	691b      	ldr	r3, [r3, #16]
 80023c8:	2b05      	cmp	r3, #5
 80023ca:	f000 8098 	beq.w	80024fe <HAL_GPIO_Init+0x48a>
 80023ce:	683b      	ldr	r3, [r7, #0]
 80023d0:	691b      	ldr	r3, [r3, #16]
 80023d2:	2b05      	cmp	r3, #5
 80023d4:	f000 8093 	beq.w	80024fe <HAL_GPIO_Init+0x48a>
 80023d8:	683b      	ldr	r3, [r7, #0]
 80023da:	691b      	ldr	r3, [r3, #16]
 80023dc:	2b05      	cmp	r3, #5
 80023de:	f000 808e 	beq.w	80024fe <HAL_GPIO_Init+0x48a>
 80023e2:	683b      	ldr	r3, [r7, #0]
 80023e4:	691b      	ldr	r3, [r3, #16]
 80023e6:	2b06      	cmp	r3, #6
 80023e8:	f000 8089 	beq.w	80024fe <HAL_GPIO_Init+0x48a>
 80023ec:	683b      	ldr	r3, [r7, #0]
 80023ee:	691b      	ldr	r3, [r3, #16]
 80023f0:	2b06      	cmp	r3, #6
 80023f2:	f000 8084 	beq.w	80024fe <HAL_GPIO_Init+0x48a>
 80023f6:	683b      	ldr	r3, [r7, #0]
 80023f8:	691b      	ldr	r3, [r3, #16]
 80023fa:	2b07      	cmp	r3, #7
 80023fc:	d07f      	beq.n	80024fe <HAL_GPIO_Init+0x48a>
 80023fe:	683b      	ldr	r3, [r7, #0]
 8002400:	691b      	ldr	r3, [r3, #16]
 8002402:	2b07      	cmp	r3, #7
 8002404:	d07b      	beq.n	80024fe <HAL_GPIO_Init+0x48a>
 8002406:	683b      	ldr	r3, [r7, #0]
 8002408:	691b      	ldr	r3, [r3, #16]
 800240a:	2b07      	cmp	r3, #7
 800240c:	d077      	beq.n	80024fe <HAL_GPIO_Init+0x48a>
 800240e:	683b      	ldr	r3, [r7, #0]
 8002410:	691b      	ldr	r3, [r3, #16]
 8002412:	2b07      	cmp	r3, #7
 8002414:	d073      	beq.n	80024fe <HAL_GPIO_Init+0x48a>
 8002416:	683b      	ldr	r3, [r7, #0]
 8002418:	691b      	ldr	r3, [r3, #16]
 800241a:	2b07      	cmp	r3, #7
 800241c:	d06f      	beq.n	80024fe <HAL_GPIO_Init+0x48a>
 800241e:	683b      	ldr	r3, [r7, #0]
 8002420:	691b      	ldr	r3, [r3, #16]
 8002422:	2b07      	cmp	r3, #7
 8002424:	d06b      	beq.n	80024fe <HAL_GPIO_Init+0x48a>
 8002426:	683b      	ldr	r3, [r7, #0]
 8002428:	691b      	ldr	r3, [r3, #16]
 800242a:	2b07      	cmp	r3, #7
 800242c:	d067      	beq.n	80024fe <HAL_GPIO_Init+0x48a>
 800242e:	683b      	ldr	r3, [r7, #0]
 8002430:	691b      	ldr	r3, [r3, #16]
 8002432:	2b08      	cmp	r3, #8
 8002434:	d063      	beq.n	80024fe <HAL_GPIO_Init+0x48a>
 8002436:	683b      	ldr	r3, [r7, #0]
 8002438:	691b      	ldr	r3, [r3, #16]
 800243a:	2b08      	cmp	r3, #8
 800243c:	d05f      	beq.n	80024fe <HAL_GPIO_Init+0x48a>
 800243e:	683b      	ldr	r3, [r7, #0]
 8002440:	691b      	ldr	r3, [r3, #16]
 8002442:	2b08      	cmp	r3, #8
 8002444:	d05b      	beq.n	80024fe <HAL_GPIO_Init+0x48a>
 8002446:	683b      	ldr	r3, [r7, #0]
 8002448:	691b      	ldr	r3, [r3, #16]
 800244a:	2b08      	cmp	r3, #8
 800244c:	d057      	beq.n	80024fe <HAL_GPIO_Init+0x48a>
 800244e:	683b      	ldr	r3, [r7, #0]
 8002450:	691b      	ldr	r3, [r3, #16]
 8002452:	2b08      	cmp	r3, #8
 8002454:	d053      	beq.n	80024fe <HAL_GPIO_Init+0x48a>
 8002456:	683b      	ldr	r3, [r7, #0]
 8002458:	691b      	ldr	r3, [r3, #16]
 800245a:	2b08      	cmp	r3, #8
 800245c:	d04f      	beq.n	80024fe <HAL_GPIO_Init+0x48a>
 800245e:	683b      	ldr	r3, [r7, #0]
 8002460:	691b      	ldr	r3, [r3, #16]
 8002462:	2b08      	cmp	r3, #8
 8002464:	d04b      	beq.n	80024fe <HAL_GPIO_Init+0x48a>
 8002466:	683b      	ldr	r3, [r7, #0]
 8002468:	691b      	ldr	r3, [r3, #16]
 800246a:	2b09      	cmp	r3, #9
 800246c:	d047      	beq.n	80024fe <HAL_GPIO_Init+0x48a>
 800246e:	683b      	ldr	r3, [r7, #0]
 8002470:	691b      	ldr	r3, [r3, #16]
 8002472:	2b09      	cmp	r3, #9
 8002474:	d043      	beq.n	80024fe <HAL_GPIO_Init+0x48a>
 8002476:	683b      	ldr	r3, [r7, #0]
 8002478:	691b      	ldr	r3, [r3, #16]
 800247a:	2b09      	cmp	r3, #9
 800247c:	d03f      	beq.n	80024fe <HAL_GPIO_Init+0x48a>
 800247e:	683b      	ldr	r3, [r7, #0]
 8002480:	691b      	ldr	r3, [r3, #16]
 8002482:	2b09      	cmp	r3, #9
 8002484:	d03b      	beq.n	80024fe <HAL_GPIO_Init+0x48a>
 8002486:	683b      	ldr	r3, [r7, #0]
 8002488:	691b      	ldr	r3, [r3, #16]
 800248a:	2b09      	cmp	r3, #9
 800248c:	d037      	beq.n	80024fe <HAL_GPIO_Init+0x48a>
 800248e:	683b      	ldr	r3, [r7, #0]
 8002490:	691b      	ldr	r3, [r3, #16]
 8002492:	2b09      	cmp	r3, #9
 8002494:	d033      	beq.n	80024fe <HAL_GPIO_Init+0x48a>
 8002496:	683b      	ldr	r3, [r7, #0]
 8002498:	691b      	ldr	r3, [r3, #16]
 800249a:	2b09      	cmp	r3, #9
 800249c:	d02f      	beq.n	80024fe <HAL_GPIO_Init+0x48a>
 800249e:	683b      	ldr	r3, [r7, #0]
 80024a0:	691b      	ldr	r3, [r3, #16]
 80024a2:	2b0a      	cmp	r3, #10
 80024a4:	d02b      	beq.n	80024fe <HAL_GPIO_Init+0x48a>
 80024a6:	683b      	ldr	r3, [r7, #0]
 80024a8:	691b      	ldr	r3, [r3, #16]
 80024aa:	2b0a      	cmp	r3, #10
 80024ac:	d027      	beq.n	80024fe <HAL_GPIO_Init+0x48a>
 80024ae:	683b      	ldr	r3, [r7, #0]
 80024b0:	691b      	ldr	r3, [r3, #16]
 80024b2:	2b0a      	cmp	r3, #10
 80024b4:	d023      	beq.n	80024fe <HAL_GPIO_Init+0x48a>
 80024b6:	683b      	ldr	r3, [r7, #0]
 80024b8:	691b      	ldr	r3, [r3, #16]
 80024ba:	2b0a      	cmp	r3, #10
 80024bc:	d01f      	beq.n	80024fe <HAL_GPIO_Init+0x48a>
 80024be:	683b      	ldr	r3, [r7, #0]
 80024c0:	691b      	ldr	r3, [r3, #16]
 80024c2:	2b0b      	cmp	r3, #11
 80024c4:	d01b      	beq.n	80024fe <HAL_GPIO_Init+0x48a>
 80024c6:	683b      	ldr	r3, [r7, #0]
 80024c8:	691b      	ldr	r3, [r3, #16]
 80024ca:	2b0c      	cmp	r3, #12
 80024cc:	d017      	beq.n	80024fe <HAL_GPIO_Init+0x48a>
 80024ce:	683b      	ldr	r3, [r7, #0]
 80024d0:	691b      	ldr	r3, [r3, #16]
 80024d2:	2b0c      	cmp	r3, #12
 80024d4:	d013      	beq.n	80024fe <HAL_GPIO_Init+0x48a>
 80024d6:	683b      	ldr	r3, [r7, #0]
 80024d8:	691b      	ldr	r3, [r3, #16]
 80024da:	2b0c      	cmp	r3, #12
 80024dc:	d00f      	beq.n	80024fe <HAL_GPIO_Init+0x48a>
 80024de:	683b      	ldr	r3, [r7, #0]
 80024e0:	691b      	ldr	r3, [r3, #16]
 80024e2:	2b0f      	cmp	r3, #15
 80024e4:	d00b      	beq.n	80024fe <HAL_GPIO_Init+0x48a>
 80024e6:	683b      	ldr	r3, [r7, #0]
 80024e8:	691b      	ldr	r3, [r3, #16]
 80024ea:	2b0d      	cmp	r3, #13
 80024ec:	d007      	beq.n	80024fe <HAL_GPIO_Init+0x48a>
 80024ee:	683b      	ldr	r3, [r7, #0]
 80024f0:	691b      	ldr	r3, [r3, #16]
 80024f2:	2b0e      	cmp	r3, #14
 80024f4:	d003      	beq.n	80024fe <HAL_GPIO_Init+0x48a>
 80024f6:	21db      	movs	r1, #219	; 0xdb
 80024f8:	4888      	ldr	r0, [pc, #544]	; (800271c <HAL_GPIO_Init+0x6a8>)
 80024fa:	f7ff f94a 	bl	8001792 <assert_failed>

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80024fe:	69fb      	ldr	r3, [r7, #28]
 8002500:	08da      	lsrs	r2, r3, #3
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	3208      	adds	r2, #8
 8002506:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800250a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800250c:	69fb      	ldr	r3, [r7, #28]
 800250e:	f003 0307 	and.w	r3, r3, #7
 8002512:	009b      	lsls	r3, r3, #2
 8002514:	220f      	movs	r2, #15
 8002516:	fa02 f303 	lsl.w	r3, r2, r3
 800251a:	43db      	mvns	r3, r3
 800251c:	69ba      	ldr	r2, [r7, #24]
 800251e:	4013      	ands	r3, r2
 8002520:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002522:	683b      	ldr	r3, [r7, #0]
 8002524:	691a      	ldr	r2, [r3, #16]
 8002526:	69fb      	ldr	r3, [r7, #28]
 8002528:	f003 0307 	and.w	r3, r3, #7
 800252c:	009b      	lsls	r3, r3, #2
 800252e:	fa02 f303 	lsl.w	r3, r2, r3
 8002532:	69ba      	ldr	r2, [r7, #24]
 8002534:	4313      	orrs	r3, r2
 8002536:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002538:	69fb      	ldr	r3, [r7, #28]
 800253a:	08da      	lsrs	r2, r3, #3
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	3208      	adds	r2, #8
 8002540:	69b9      	ldr	r1, [r7, #24]
 8002542:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800254c:	69fb      	ldr	r3, [r7, #28]
 800254e:	005b      	lsls	r3, r3, #1
 8002550:	2203      	movs	r2, #3
 8002552:	fa02 f303 	lsl.w	r3, r2, r3
 8002556:	43db      	mvns	r3, r3
 8002558:	69ba      	ldr	r2, [r7, #24]
 800255a:	4013      	ands	r3, r2
 800255c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800255e:	683b      	ldr	r3, [r7, #0]
 8002560:	685b      	ldr	r3, [r3, #4]
 8002562:	f003 0203 	and.w	r2, r3, #3
 8002566:	69fb      	ldr	r3, [r7, #28]
 8002568:	005b      	lsls	r3, r3, #1
 800256a:	fa02 f303 	lsl.w	r3, r2, r3
 800256e:	69ba      	ldr	r2, [r7, #24]
 8002570:	4313      	orrs	r3, r2
 8002572:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	69ba      	ldr	r2, [r7, #24]
 8002578:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800257a:	683b      	ldr	r3, [r7, #0]
 800257c:	685b      	ldr	r3, [r3, #4]
 800257e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002582:	2b00      	cmp	r3, #0
 8002584:	f000 80be 	beq.w	8002704 <HAL_GPIO_Init+0x690>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002588:	4b65      	ldr	r3, [pc, #404]	; (8002720 <HAL_GPIO_Init+0x6ac>)
 800258a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800258c:	4a64      	ldr	r2, [pc, #400]	; (8002720 <HAL_GPIO_Init+0x6ac>)
 800258e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002592:	6453      	str	r3, [r2, #68]	; 0x44
 8002594:	4b62      	ldr	r3, [pc, #392]	; (8002720 <HAL_GPIO_Init+0x6ac>)
 8002596:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002598:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800259c:	60fb      	str	r3, [r7, #12]
 800259e:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80025a0:	4a60      	ldr	r2, [pc, #384]	; (8002724 <HAL_GPIO_Init+0x6b0>)
 80025a2:	69fb      	ldr	r3, [r7, #28]
 80025a4:	089b      	lsrs	r3, r3, #2
 80025a6:	3302      	adds	r3, #2
 80025a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80025ae:	69fb      	ldr	r3, [r7, #28]
 80025b0:	f003 0303 	and.w	r3, r3, #3
 80025b4:	009b      	lsls	r3, r3, #2
 80025b6:	220f      	movs	r2, #15
 80025b8:	fa02 f303 	lsl.w	r3, r2, r3
 80025bc:	43db      	mvns	r3, r3
 80025be:	69ba      	ldr	r2, [r7, #24]
 80025c0:	4013      	ands	r3, r2
 80025c2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	4a58      	ldr	r2, [pc, #352]	; (8002728 <HAL_GPIO_Init+0x6b4>)
 80025c8:	4293      	cmp	r3, r2
 80025ca:	d037      	beq.n	800263c <HAL_GPIO_Init+0x5c8>
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	4a57      	ldr	r2, [pc, #348]	; (800272c <HAL_GPIO_Init+0x6b8>)
 80025d0:	4293      	cmp	r3, r2
 80025d2:	d031      	beq.n	8002638 <HAL_GPIO_Init+0x5c4>
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	4a56      	ldr	r2, [pc, #344]	; (8002730 <HAL_GPIO_Init+0x6bc>)
 80025d8:	4293      	cmp	r3, r2
 80025da:	d02b      	beq.n	8002634 <HAL_GPIO_Init+0x5c0>
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	4a55      	ldr	r2, [pc, #340]	; (8002734 <HAL_GPIO_Init+0x6c0>)
 80025e0:	4293      	cmp	r3, r2
 80025e2:	d025      	beq.n	8002630 <HAL_GPIO_Init+0x5bc>
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	4a54      	ldr	r2, [pc, #336]	; (8002738 <HAL_GPIO_Init+0x6c4>)
 80025e8:	4293      	cmp	r3, r2
 80025ea:	d01f      	beq.n	800262c <HAL_GPIO_Init+0x5b8>
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	4a53      	ldr	r2, [pc, #332]	; (800273c <HAL_GPIO_Init+0x6c8>)
 80025f0:	4293      	cmp	r3, r2
 80025f2:	d019      	beq.n	8002628 <HAL_GPIO_Init+0x5b4>
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	4a52      	ldr	r2, [pc, #328]	; (8002740 <HAL_GPIO_Init+0x6cc>)
 80025f8:	4293      	cmp	r3, r2
 80025fa:	d013      	beq.n	8002624 <HAL_GPIO_Init+0x5b0>
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	4a51      	ldr	r2, [pc, #324]	; (8002744 <HAL_GPIO_Init+0x6d0>)
 8002600:	4293      	cmp	r3, r2
 8002602:	d00d      	beq.n	8002620 <HAL_GPIO_Init+0x5ac>
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	4a50      	ldr	r2, [pc, #320]	; (8002748 <HAL_GPIO_Init+0x6d4>)
 8002608:	4293      	cmp	r3, r2
 800260a:	d007      	beq.n	800261c <HAL_GPIO_Init+0x5a8>
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	4a4f      	ldr	r2, [pc, #316]	; (800274c <HAL_GPIO_Init+0x6d8>)
 8002610:	4293      	cmp	r3, r2
 8002612:	d101      	bne.n	8002618 <HAL_GPIO_Init+0x5a4>
 8002614:	2309      	movs	r3, #9
 8002616:	e012      	b.n	800263e <HAL_GPIO_Init+0x5ca>
 8002618:	230a      	movs	r3, #10
 800261a:	e010      	b.n	800263e <HAL_GPIO_Init+0x5ca>
 800261c:	2308      	movs	r3, #8
 800261e:	e00e      	b.n	800263e <HAL_GPIO_Init+0x5ca>
 8002620:	2307      	movs	r3, #7
 8002622:	e00c      	b.n	800263e <HAL_GPIO_Init+0x5ca>
 8002624:	2306      	movs	r3, #6
 8002626:	e00a      	b.n	800263e <HAL_GPIO_Init+0x5ca>
 8002628:	2305      	movs	r3, #5
 800262a:	e008      	b.n	800263e <HAL_GPIO_Init+0x5ca>
 800262c:	2304      	movs	r3, #4
 800262e:	e006      	b.n	800263e <HAL_GPIO_Init+0x5ca>
 8002630:	2303      	movs	r3, #3
 8002632:	e004      	b.n	800263e <HAL_GPIO_Init+0x5ca>
 8002634:	2302      	movs	r3, #2
 8002636:	e002      	b.n	800263e <HAL_GPIO_Init+0x5ca>
 8002638:	2301      	movs	r3, #1
 800263a:	e000      	b.n	800263e <HAL_GPIO_Init+0x5ca>
 800263c:	2300      	movs	r3, #0
 800263e:	69fa      	ldr	r2, [r7, #28]
 8002640:	f002 0203 	and.w	r2, r2, #3
 8002644:	0092      	lsls	r2, r2, #2
 8002646:	4093      	lsls	r3, r2
 8002648:	69ba      	ldr	r2, [r7, #24]
 800264a:	4313      	orrs	r3, r2
 800264c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 800264e:	4935      	ldr	r1, [pc, #212]	; (8002724 <HAL_GPIO_Init+0x6b0>)
 8002650:	69fb      	ldr	r3, [r7, #28]
 8002652:	089b      	lsrs	r3, r3, #2
 8002654:	3302      	adds	r3, #2
 8002656:	69ba      	ldr	r2, [r7, #24]
 8002658:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800265c:	4b3c      	ldr	r3, [pc, #240]	; (8002750 <HAL_GPIO_Init+0x6dc>)
 800265e:	689b      	ldr	r3, [r3, #8]
 8002660:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002662:	693b      	ldr	r3, [r7, #16]
 8002664:	43db      	mvns	r3, r3
 8002666:	69ba      	ldr	r2, [r7, #24]
 8002668:	4013      	ands	r3, r2
 800266a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800266c:	683b      	ldr	r3, [r7, #0]
 800266e:	685b      	ldr	r3, [r3, #4]
 8002670:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002674:	2b00      	cmp	r3, #0
 8002676:	d003      	beq.n	8002680 <HAL_GPIO_Init+0x60c>
        {
          temp |= iocurrent;
 8002678:	69ba      	ldr	r2, [r7, #24]
 800267a:	693b      	ldr	r3, [r7, #16]
 800267c:	4313      	orrs	r3, r2
 800267e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002680:	4a33      	ldr	r2, [pc, #204]	; (8002750 <HAL_GPIO_Init+0x6dc>)
 8002682:	69bb      	ldr	r3, [r7, #24]
 8002684:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002686:	4b32      	ldr	r3, [pc, #200]	; (8002750 <HAL_GPIO_Init+0x6dc>)
 8002688:	68db      	ldr	r3, [r3, #12]
 800268a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800268c:	693b      	ldr	r3, [r7, #16]
 800268e:	43db      	mvns	r3, r3
 8002690:	69ba      	ldr	r2, [r7, #24]
 8002692:	4013      	ands	r3, r2
 8002694:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002696:	683b      	ldr	r3, [r7, #0]
 8002698:	685b      	ldr	r3, [r3, #4]
 800269a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d003      	beq.n	80026aa <HAL_GPIO_Init+0x636>
        {
          temp |= iocurrent;
 80026a2:	69ba      	ldr	r2, [r7, #24]
 80026a4:	693b      	ldr	r3, [r7, #16]
 80026a6:	4313      	orrs	r3, r2
 80026a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80026aa:	4a29      	ldr	r2, [pc, #164]	; (8002750 <HAL_GPIO_Init+0x6dc>)
 80026ac:	69bb      	ldr	r3, [r7, #24]
 80026ae:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80026b0:	4b27      	ldr	r3, [pc, #156]	; (8002750 <HAL_GPIO_Init+0x6dc>)
 80026b2:	685b      	ldr	r3, [r3, #4]
 80026b4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026b6:	693b      	ldr	r3, [r7, #16]
 80026b8:	43db      	mvns	r3, r3
 80026ba:	69ba      	ldr	r2, [r7, #24]
 80026bc:	4013      	ands	r3, r2
 80026be:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80026c0:	683b      	ldr	r3, [r7, #0]
 80026c2:	685b      	ldr	r3, [r3, #4]
 80026c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d003      	beq.n	80026d4 <HAL_GPIO_Init+0x660>
        {
          temp |= iocurrent;
 80026cc:	69ba      	ldr	r2, [r7, #24]
 80026ce:	693b      	ldr	r3, [r7, #16]
 80026d0:	4313      	orrs	r3, r2
 80026d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80026d4:	4a1e      	ldr	r2, [pc, #120]	; (8002750 <HAL_GPIO_Init+0x6dc>)
 80026d6:	69bb      	ldr	r3, [r7, #24]
 80026d8:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80026da:	4b1d      	ldr	r3, [pc, #116]	; (8002750 <HAL_GPIO_Init+0x6dc>)
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026e0:	693b      	ldr	r3, [r7, #16]
 80026e2:	43db      	mvns	r3, r3
 80026e4:	69ba      	ldr	r2, [r7, #24]
 80026e6:	4013      	ands	r3, r2
 80026e8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80026ea:	683b      	ldr	r3, [r7, #0]
 80026ec:	685b      	ldr	r3, [r3, #4]
 80026ee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d003      	beq.n	80026fe <HAL_GPIO_Init+0x68a>
        {
          temp |= iocurrent;
 80026f6:	69ba      	ldr	r2, [r7, #24]
 80026f8:	693b      	ldr	r3, [r7, #16]
 80026fa:	4313      	orrs	r3, r2
 80026fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80026fe:	4a14      	ldr	r2, [pc, #80]	; (8002750 <HAL_GPIO_Init+0x6dc>)
 8002700:	69bb      	ldr	r3, [r7, #24]
 8002702:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8002704:	69fb      	ldr	r3, [r7, #28]
 8002706:	3301      	adds	r3, #1
 8002708:	61fb      	str	r3, [r7, #28]
 800270a:	69fb      	ldr	r3, [r7, #28]
 800270c:	2b0f      	cmp	r3, #15
 800270e:	f67f ad4d 	bls.w	80021ac <HAL_GPIO_Init+0x138>
      }
    }
  }
}
 8002712:	bf00      	nop
 8002714:	bf00      	nop
 8002716:	3720      	adds	r7, #32
 8002718:	46bd      	mov	sp, r7
 800271a:	bd80      	pop	{r7, pc}
 800271c:	0800e4dc 	.word	0x0800e4dc
 8002720:	40023800 	.word	0x40023800
 8002724:	40013800 	.word	0x40013800
 8002728:	40020000 	.word	0x40020000
 800272c:	40020400 	.word	0x40020400
 8002730:	40020800 	.word	0x40020800
 8002734:	40020c00 	.word	0x40020c00
 8002738:	40021000 	.word	0x40021000
 800273c:	40021400 	.word	0x40021400
 8002740:	40021800 	.word	0x40021800
 8002744:	40021c00 	.word	0x40021c00
 8002748:	40022000 	.word	0x40022000
 800274c:	40022400 	.word	0x40022400
 8002750:	40013c00 	.word	0x40013c00

08002754 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002754:	b580      	push	{r7, lr}
 8002756:	b082      	sub	sp, #8
 8002758:	af00      	add	r7, sp, #0
 800275a:	6078      	str	r0, [r7, #4]
 800275c:	460b      	mov	r3, r1
 800275e:	807b      	strh	r3, [r7, #2]
 8002760:	4613      	mov	r3, r2
 8002762:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8002764:	887b      	ldrh	r3, [r7, #2]
 8002766:	2b00      	cmp	r3, #0
 8002768:	d104      	bne.n	8002774 <HAL_GPIO_WritePin+0x20>
 800276a:	f240 1197 	movw	r1, #407	; 0x197
 800276e:	480e      	ldr	r0, [pc, #56]	; (80027a8 <HAL_GPIO_WritePin+0x54>)
 8002770:	f7ff f80f 	bl	8001792 <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 8002774:	787b      	ldrb	r3, [r7, #1]
 8002776:	2b00      	cmp	r3, #0
 8002778:	d007      	beq.n	800278a <HAL_GPIO_WritePin+0x36>
 800277a:	787b      	ldrb	r3, [r7, #1]
 800277c:	2b01      	cmp	r3, #1
 800277e:	d004      	beq.n	800278a <HAL_GPIO_WritePin+0x36>
 8002780:	f44f 71cc 	mov.w	r1, #408	; 0x198
 8002784:	4808      	ldr	r0, [pc, #32]	; (80027a8 <HAL_GPIO_WritePin+0x54>)
 8002786:	f7ff f804 	bl	8001792 <assert_failed>

  if(PinState != GPIO_PIN_RESET)
 800278a:	787b      	ldrb	r3, [r7, #1]
 800278c:	2b00      	cmp	r3, #0
 800278e:	d003      	beq.n	8002798 <HAL_GPIO_WritePin+0x44>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002790:	887a      	ldrh	r2, [r7, #2]
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002796:	e003      	b.n	80027a0 <HAL_GPIO_WritePin+0x4c>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002798:	887b      	ldrh	r3, [r7, #2]
 800279a:	041a      	lsls	r2, r3, #16
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	619a      	str	r2, [r3, #24]
}
 80027a0:	bf00      	nop
 80027a2:	3708      	adds	r7, #8
 80027a4:	46bd      	mov	sp, r7
 80027a6:	bd80      	pop	{r7, pc}
 80027a8:	0800e4dc 	.word	0x0800e4dc

080027ac <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80027ac:	b580      	push	{r7, lr}
 80027ae:	b082      	sub	sp, #8
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d101      	bne.n	80027be <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80027ba:	2301      	movs	r3, #1
 80027bc:	e107      	b.n	80029ce <HAL_I2C_Init+0x222>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	4a85      	ldr	r2, [pc, #532]	; (80029d8 <HAL_I2C_Init+0x22c>)
 80027c4:	4293      	cmp	r3, r2
 80027c6:	d013      	beq.n	80027f0 <HAL_I2C_Init+0x44>
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	4a83      	ldr	r2, [pc, #524]	; (80029dc <HAL_I2C_Init+0x230>)
 80027ce:	4293      	cmp	r3, r2
 80027d0:	d00e      	beq.n	80027f0 <HAL_I2C_Init+0x44>
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	4a82      	ldr	r2, [pc, #520]	; (80029e0 <HAL_I2C_Init+0x234>)
 80027d8:	4293      	cmp	r3, r2
 80027da:	d009      	beq.n	80027f0 <HAL_I2C_Init+0x44>
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	4a80      	ldr	r2, [pc, #512]	; (80029e4 <HAL_I2C_Init+0x238>)
 80027e2:	4293      	cmp	r3, r2
 80027e4:	d004      	beq.n	80027f0 <HAL_I2C_Init+0x44>
 80027e6:	f240 2119 	movw	r1, #537	; 0x219
 80027ea:	487f      	ldr	r0, [pc, #508]	; (80029e8 <HAL_I2C_Init+0x23c>)
 80027ec:	f7fe ffd1 	bl	8001792 <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS1(hi2c->Init.OwnAddress1));
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	689b      	ldr	r3, [r3, #8]
 80027f4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80027f8:	d304      	bcc.n	8002804 <HAL_I2C_Init+0x58>
 80027fa:	f240 211a 	movw	r1, #538	; 0x21a
 80027fe:	487a      	ldr	r0, [pc, #488]	; (80029e8 <HAL_I2C_Init+0x23c>)
 8002800:	f7fe ffc7 	bl	8001792 <assert_failed>
  assert_param(IS_I2C_ADDRESSING_MODE(hi2c->Init.AddressingMode));
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	68db      	ldr	r3, [r3, #12]
 8002808:	2b01      	cmp	r3, #1
 800280a:	d008      	beq.n	800281e <HAL_I2C_Init+0x72>
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	68db      	ldr	r3, [r3, #12]
 8002810:	2b02      	cmp	r3, #2
 8002812:	d004      	beq.n	800281e <HAL_I2C_Init+0x72>
 8002814:	f240 211b 	movw	r1, #539	; 0x21b
 8002818:	4873      	ldr	r0, [pc, #460]	; (80029e8 <HAL_I2C_Init+0x23c>)
 800281a:	f7fe ffba 	bl	8001792 <assert_failed>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	691b      	ldr	r3, [r3, #16]
 8002822:	2b00      	cmp	r3, #0
 8002824:	d009      	beq.n	800283a <HAL_I2C_Init+0x8e>
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	691b      	ldr	r3, [r3, #16]
 800282a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800282e:	d004      	beq.n	800283a <HAL_I2C_Init+0x8e>
 8002830:	f44f 7107 	mov.w	r1, #540	; 0x21c
 8002834:	486c      	ldr	r0, [pc, #432]	; (80029e8 <HAL_I2C_Init+0x23c>)
 8002836:	f7fe ffac 	bl	8001792 <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	695b      	ldr	r3, [r3, #20]
 800283e:	2bff      	cmp	r3, #255	; 0xff
 8002840:	d904      	bls.n	800284c <HAL_I2C_Init+0xa0>
 8002842:	f240 211d 	movw	r1, #541	; 0x21d
 8002846:	4868      	ldr	r0, [pc, #416]	; (80029e8 <HAL_I2C_Init+0x23c>)
 8002848:	f7fe ffa3 	bl	8001792 <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	699b      	ldr	r3, [r3, #24]
 8002850:	2b00      	cmp	r3, #0
 8002852:	d020      	beq.n	8002896 <HAL_I2C_Init+0xea>
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	699b      	ldr	r3, [r3, #24]
 8002858:	2b01      	cmp	r3, #1
 800285a:	d01c      	beq.n	8002896 <HAL_I2C_Init+0xea>
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	699b      	ldr	r3, [r3, #24]
 8002860:	2b02      	cmp	r3, #2
 8002862:	d018      	beq.n	8002896 <HAL_I2C_Init+0xea>
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	699b      	ldr	r3, [r3, #24]
 8002868:	2b03      	cmp	r3, #3
 800286a:	d014      	beq.n	8002896 <HAL_I2C_Init+0xea>
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	699b      	ldr	r3, [r3, #24]
 8002870:	2b04      	cmp	r3, #4
 8002872:	d010      	beq.n	8002896 <HAL_I2C_Init+0xea>
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	699b      	ldr	r3, [r3, #24]
 8002878:	2b05      	cmp	r3, #5
 800287a:	d00c      	beq.n	8002896 <HAL_I2C_Init+0xea>
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	699b      	ldr	r3, [r3, #24]
 8002880:	2b06      	cmp	r3, #6
 8002882:	d008      	beq.n	8002896 <HAL_I2C_Init+0xea>
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	699b      	ldr	r3, [r3, #24]
 8002888:	2b07      	cmp	r3, #7
 800288a:	d004      	beq.n	8002896 <HAL_I2C_Init+0xea>
 800288c:	f240 211e 	movw	r1, #542	; 0x21e
 8002890:	4855      	ldr	r0, [pc, #340]	; (80029e8 <HAL_I2C_Init+0x23c>)
 8002892:	f7fe ff7e 	bl	8001792 <assert_failed>
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	69db      	ldr	r3, [r3, #28]
 800289a:	2b00      	cmp	r3, #0
 800289c:	d009      	beq.n	80028b2 <HAL_I2C_Init+0x106>
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	69db      	ldr	r3, [r3, #28]
 80028a2:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80028a6:	d004      	beq.n	80028b2 <HAL_I2C_Init+0x106>
 80028a8:	f240 211f 	movw	r1, #543	; 0x21f
 80028ac:	484e      	ldr	r0, [pc, #312]	; (80029e8 <HAL_I2C_Init+0x23c>)
 80028ae:	f7fe ff70 	bl	8001792 <assert_failed>
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	6a1b      	ldr	r3, [r3, #32]
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d009      	beq.n	80028ce <HAL_I2C_Init+0x122>
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	6a1b      	ldr	r3, [r3, #32]
 80028be:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80028c2:	d004      	beq.n	80028ce <HAL_I2C_Init+0x122>
 80028c4:	f44f 7108 	mov.w	r1, #544	; 0x220
 80028c8:	4847      	ldr	r0, [pc, #284]	; (80029e8 <HAL_I2C_Init+0x23c>)
 80028ca:	f7fe ff62 	bl	8001792 <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80028d4:	b2db      	uxtb	r3, r3
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d106      	bne.n	80028e8 <HAL_I2C_Init+0x13c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	2200      	movs	r2, #0
 80028de:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80028e2:	6878      	ldr	r0, [r7, #4]
 80028e4:	f7fe fb98 	bl	8001018 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	2224      	movs	r2, #36	; 0x24
 80028ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	681a      	ldr	r2, [r3, #0]
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f022 0201 	bic.w	r2, r2, #1
 80028fe:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	685a      	ldr	r2, [r3, #4]
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800290c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	689a      	ldr	r2, [r3, #8]
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800291c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	68db      	ldr	r3, [r3, #12]
 8002922:	2b01      	cmp	r3, #1
 8002924:	d107      	bne.n	8002936 <HAL_I2C_Init+0x18a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	689a      	ldr	r2, [r3, #8]
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002932:	609a      	str	r2, [r3, #8]
 8002934:	e006      	b.n	8002944 <HAL_I2C_Init+0x198>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	689a      	ldr	r2, [r3, #8]
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002942:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	68db      	ldr	r3, [r3, #12]
 8002948:	2b02      	cmp	r3, #2
 800294a:	d104      	bne.n	8002956 <HAL_I2C_Init+0x1aa>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002954:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	6859      	ldr	r1, [r3, #4]
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681a      	ldr	r2, [r3, #0]
 8002960:	4b22      	ldr	r3, [pc, #136]	; (80029ec <HAL_I2C_Init+0x240>)
 8002962:	430b      	orrs	r3, r1
 8002964:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	68da      	ldr	r2, [r3, #12]
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002974:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	691a      	ldr	r2, [r3, #16]
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	695b      	ldr	r3, [r3, #20]
 800297e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	699b      	ldr	r3, [r3, #24]
 8002986:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	430a      	orrs	r2, r1
 800298e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	69d9      	ldr	r1, [r3, #28]
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	6a1a      	ldr	r2, [r3, #32]
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	430a      	orrs	r2, r1
 800299e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	681a      	ldr	r2, [r3, #0]
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f042 0201 	orr.w	r2, r2, #1
 80029ae:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	2200      	movs	r2, #0
 80029b4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	2220      	movs	r2, #32
 80029ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	2200      	movs	r2, #0
 80029c2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	2200      	movs	r2, #0
 80029c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80029cc:	2300      	movs	r3, #0
}
 80029ce:	4618      	mov	r0, r3
 80029d0:	3708      	adds	r7, #8
 80029d2:	46bd      	mov	sp, r7
 80029d4:	bd80      	pop	{r7, pc}
 80029d6:	bf00      	nop
 80029d8:	40005400 	.word	0x40005400
 80029dc:	40005800 	.word	0x40005800
 80029e0:	40005c00 	.word	0x40005c00
 80029e4:	40006000 	.word	0x40006000
 80029e8:	0800e518 	.word	0x0800e518
 80029ec:	02008000 	.word	0x02008000

080029f0 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80029f0:	b580      	push	{r7, lr}
 80029f2:	b088      	sub	sp, #32
 80029f4:	af02      	add	r7, sp, #8
 80029f6:	60f8      	str	r0, [r7, #12]
 80029f8:	607a      	str	r2, [r7, #4]
 80029fa:	461a      	mov	r2, r3
 80029fc:	460b      	mov	r3, r1
 80029fe:	817b      	strh	r3, [r7, #10]
 8002a00:	4613      	mov	r3, r2
 8002a02:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002a0a:	b2db      	uxtb	r3, r3
 8002a0c:	2b20      	cmp	r3, #32
 8002a0e:	f040 80da 	bne.w	8002bc6 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002a18:	2b01      	cmp	r3, #1
 8002a1a:	d101      	bne.n	8002a20 <HAL_I2C_Master_Transmit+0x30>
 8002a1c:	2302      	movs	r3, #2
 8002a1e:	e0d3      	b.n	8002bc8 <HAL_I2C_Master_Transmit+0x1d8>
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	2201      	movs	r2, #1
 8002a24:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002a28:	f7ff f922 	bl	8001c70 <HAL_GetTick>
 8002a2c:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002a2e:	697b      	ldr	r3, [r7, #20]
 8002a30:	9300      	str	r3, [sp, #0]
 8002a32:	2319      	movs	r3, #25
 8002a34:	2201      	movs	r2, #1
 8002a36:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002a3a:	68f8      	ldr	r0, [r7, #12]
 8002a3c:	f000 f9e6 	bl	8002e0c <I2C_WaitOnFlagUntilTimeout>
 8002a40:	4603      	mov	r3, r0
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d001      	beq.n	8002a4a <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8002a46:	2301      	movs	r3, #1
 8002a48:	e0be      	b.n	8002bc8 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	2221      	movs	r2, #33	; 0x21
 8002a4e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	2210      	movs	r2, #16
 8002a56:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	2200      	movs	r2, #0
 8002a5e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	687a      	ldr	r2, [r7, #4]
 8002a64:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	893a      	ldrh	r2, [r7, #8]
 8002a6a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	2200      	movs	r2, #0
 8002a70:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a76:	b29b      	uxth	r3, r3
 8002a78:	2bff      	cmp	r3, #255	; 0xff
 8002a7a:	d90e      	bls.n	8002a9a <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	22ff      	movs	r2, #255	; 0xff
 8002a80:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a86:	b2da      	uxtb	r2, r3
 8002a88:	8979      	ldrh	r1, [r7, #10]
 8002a8a:	4b51      	ldr	r3, [pc, #324]	; (8002bd0 <HAL_I2C_Master_Transmit+0x1e0>)
 8002a8c:	9300      	str	r3, [sp, #0]
 8002a8e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002a92:	68f8      	ldr	r0, [r7, #12]
 8002a94:	f000 fbd0 	bl	8003238 <I2C_TransferConfig>
 8002a98:	e06c      	b.n	8002b74 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a9e:	b29a      	uxth	r2, r3
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002aa8:	b2da      	uxtb	r2, r3
 8002aaa:	8979      	ldrh	r1, [r7, #10]
 8002aac:	4b48      	ldr	r3, [pc, #288]	; (8002bd0 <HAL_I2C_Master_Transmit+0x1e0>)
 8002aae:	9300      	str	r3, [sp, #0]
 8002ab0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002ab4:	68f8      	ldr	r0, [r7, #12]
 8002ab6:	f000 fbbf 	bl	8003238 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8002aba:	e05b      	b.n	8002b74 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002abc:	697a      	ldr	r2, [r7, #20]
 8002abe:	6a39      	ldr	r1, [r7, #32]
 8002ac0:	68f8      	ldr	r0, [r7, #12]
 8002ac2:	f000 f9e3 	bl	8002e8c <I2C_WaitOnTXISFlagUntilTimeout>
 8002ac6:	4603      	mov	r3, r0
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d001      	beq.n	8002ad0 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8002acc:	2301      	movs	r3, #1
 8002ace:	e07b      	b.n	8002bc8 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ad4:	781a      	ldrb	r2, [r3, #0]
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ae0:	1c5a      	adds	r2, r3, #1
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002aea:	b29b      	uxth	r3, r3
 8002aec:	3b01      	subs	r3, #1
 8002aee:	b29a      	uxth	r2, r3
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002af8:	3b01      	subs	r3, #1
 8002afa:	b29a      	uxth	r2, r3
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b04:	b29b      	uxth	r3, r3
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d034      	beq.n	8002b74 <HAL_I2C_Master_Transmit+0x184>
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d130      	bne.n	8002b74 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002b12:	697b      	ldr	r3, [r7, #20]
 8002b14:	9300      	str	r3, [sp, #0]
 8002b16:	6a3b      	ldr	r3, [r7, #32]
 8002b18:	2200      	movs	r2, #0
 8002b1a:	2180      	movs	r1, #128	; 0x80
 8002b1c:	68f8      	ldr	r0, [r7, #12]
 8002b1e:	f000 f975 	bl	8002e0c <I2C_WaitOnFlagUntilTimeout>
 8002b22:	4603      	mov	r3, r0
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d001      	beq.n	8002b2c <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8002b28:	2301      	movs	r3, #1
 8002b2a:	e04d      	b.n	8002bc8 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b30:	b29b      	uxth	r3, r3
 8002b32:	2bff      	cmp	r3, #255	; 0xff
 8002b34:	d90e      	bls.n	8002b54 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	22ff      	movs	r2, #255	; 0xff
 8002b3a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b40:	b2da      	uxtb	r2, r3
 8002b42:	8979      	ldrh	r1, [r7, #10]
 8002b44:	2300      	movs	r3, #0
 8002b46:	9300      	str	r3, [sp, #0]
 8002b48:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002b4c:	68f8      	ldr	r0, [r7, #12]
 8002b4e:	f000 fb73 	bl	8003238 <I2C_TransferConfig>
 8002b52:	e00f      	b.n	8002b74 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b58:	b29a      	uxth	r2, r3
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b62:	b2da      	uxtb	r2, r3
 8002b64:	8979      	ldrh	r1, [r7, #10]
 8002b66:	2300      	movs	r3, #0
 8002b68:	9300      	str	r3, [sp, #0]
 8002b6a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002b6e:	68f8      	ldr	r0, [r7, #12]
 8002b70:	f000 fb62 	bl	8003238 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b78:	b29b      	uxth	r3, r3
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d19e      	bne.n	8002abc <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002b7e:	697a      	ldr	r2, [r7, #20]
 8002b80:	6a39      	ldr	r1, [r7, #32]
 8002b82:	68f8      	ldr	r0, [r7, #12]
 8002b84:	f000 f9c2 	bl	8002f0c <I2C_WaitOnSTOPFlagUntilTimeout>
 8002b88:	4603      	mov	r3, r0
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d001      	beq.n	8002b92 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8002b8e:	2301      	movs	r3, #1
 8002b90:	e01a      	b.n	8002bc8 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	2220      	movs	r2, #32
 8002b98:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	6859      	ldr	r1, [r3, #4]
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	681a      	ldr	r2, [r3, #0]
 8002ba4:	4b0b      	ldr	r3, [pc, #44]	; (8002bd4 <HAL_I2C_Master_Transmit+0x1e4>)
 8002ba6:	400b      	ands	r3, r1
 8002ba8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	2220      	movs	r2, #32
 8002bae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	2200      	movs	r2, #0
 8002bb6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	2200      	movs	r2, #0
 8002bbe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002bc2:	2300      	movs	r3, #0
 8002bc4:	e000      	b.n	8002bc8 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8002bc6:	2302      	movs	r3, #2
  }
}
 8002bc8:	4618      	mov	r0, r3
 8002bca:	3718      	adds	r7, #24
 8002bcc:	46bd      	mov	sp, r7
 8002bce:	bd80      	pop	{r7, pc}
 8002bd0:	80002000 	.word	0x80002000
 8002bd4:	fe00e800 	.word	0xfe00e800

08002bd8 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8002bd8:	b580      	push	{r7, lr}
 8002bda:	b088      	sub	sp, #32
 8002bdc:	af02      	add	r7, sp, #8
 8002bde:	60f8      	str	r0, [r7, #12]
 8002be0:	607a      	str	r2, [r7, #4]
 8002be2:	461a      	mov	r2, r3
 8002be4:	460b      	mov	r3, r1
 8002be6:	817b      	strh	r3, [r7, #10]
 8002be8:	4613      	mov	r3, r2
 8002bea:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002bf2:	b2db      	uxtb	r3, r3
 8002bf4:	2b20      	cmp	r3, #32
 8002bf6:	f040 80db 	bne.w	8002db0 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002c00:	2b01      	cmp	r3, #1
 8002c02:	d101      	bne.n	8002c08 <HAL_I2C_Master_Receive+0x30>
 8002c04:	2302      	movs	r3, #2
 8002c06:	e0d4      	b.n	8002db2 <HAL_I2C_Master_Receive+0x1da>
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	2201      	movs	r2, #1
 8002c0c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002c10:	f7ff f82e 	bl	8001c70 <HAL_GetTick>
 8002c14:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002c16:	697b      	ldr	r3, [r7, #20]
 8002c18:	9300      	str	r3, [sp, #0]
 8002c1a:	2319      	movs	r3, #25
 8002c1c:	2201      	movs	r2, #1
 8002c1e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002c22:	68f8      	ldr	r0, [r7, #12]
 8002c24:	f000 f8f2 	bl	8002e0c <I2C_WaitOnFlagUntilTimeout>
 8002c28:	4603      	mov	r3, r0
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d001      	beq.n	8002c32 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8002c2e:	2301      	movs	r3, #1
 8002c30:	e0bf      	b.n	8002db2 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	2222      	movs	r2, #34	; 0x22
 8002c36:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	2210      	movs	r2, #16
 8002c3e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	2200      	movs	r2, #0
 8002c46:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	687a      	ldr	r2, [r7, #4]
 8002c4c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	893a      	ldrh	r2, [r7, #8]
 8002c52:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	2200      	movs	r2, #0
 8002c58:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c5e:	b29b      	uxth	r3, r3
 8002c60:	2bff      	cmp	r3, #255	; 0xff
 8002c62:	d90e      	bls.n	8002c82 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	22ff      	movs	r2, #255	; 0xff
 8002c68:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c6e:	b2da      	uxtb	r2, r3
 8002c70:	8979      	ldrh	r1, [r7, #10]
 8002c72:	4b52      	ldr	r3, [pc, #328]	; (8002dbc <HAL_I2C_Master_Receive+0x1e4>)
 8002c74:	9300      	str	r3, [sp, #0]
 8002c76:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002c7a:	68f8      	ldr	r0, [r7, #12]
 8002c7c:	f000 fadc 	bl	8003238 <I2C_TransferConfig>
 8002c80:	e06d      	b.n	8002d5e <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c86:	b29a      	uxth	r2, r3
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c90:	b2da      	uxtb	r2, r3
 8002c92:	8979      	ldrh	r1, [r7, #10]
 8002c94:	4b49      	ldr	r3, [pc, #292]	; (8002dbc <HAL_I2C_Master_Receive+0x1e4>)
 8002c96:	9300      	str	r3, [sp, #0]
 8002c98:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002c9c:	68f8      	ldr	r0, [r7, #12]
 8002c9e:	f000 facb 	bl	8003238 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8002ca2:	e05c      	b.n	8002d5e <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002ca4:	697a      	ldr	r2, [r7, #20]
 8002ca6:	6a39      	ldr	r1, [r7, #32]
 8002ca8:	68f8      	ldr	r0, [r7, #12]
 8002caa:	f000 f96b 	bl	8002f84 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002cae:	4603      	mov	r3, r0
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d001      	beq.n	8002cb8 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8002cb4:	2301      	movs	r3, #1
 8002cb6:	e07c      	b.n	8002db2 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cc2:	b2d2      	uxtb	r2, r2
 8002cc4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cca:	1c5a      	adds	r2, r3, #1
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002cd4:	3b01      	subs	r3, #1
 8002cd6:	b29a      	uxth	r2, r3
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ce0:	b29b      	uxth	r3, r3
 8002ce2:	3b01      	subs	r3, #1
 8002ce4:	b29a      	uxth	r2, r3
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cee:	b29b      	uxth	r3, r3
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d034      	beq.n	8002d5e <HAL_I2C_Master_Receive+0x186>
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d130      	bne.n	8002d5e <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002cfc:	697b      	ldr	r3, [r7, #20]
 8002cfe:	9300      	str	r3, [sp, #0]
 8002d00:	6a3b      	ldr	r3, [r7, #32]
 8002d02:	2200      	movs	r2, #0
 8002d04:	2180      	movs	r1, #128	; 0x80
 8002d06:	68f8      	ldr	r0, [r7, #12]
 8002d08:	f000 f880 	bl	8002e0c <I2C_WaitOnFlagUntilTimeout>
 8002d0c:	4603      	mov	r3, r0
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d001      	beq.n	8002d16 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8002d12:	2301      	movs	r3, #1
 8002d14:	e04d      	b.n	8002db2 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d1a:	b29b      	uxth	r3, r3
 8002d1c:	2bff      	cmp	r3, #255	; 0xff
 8002d1e:	d90e      	bls.n	8002d3e <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	22ff      	movs	r2, #255	; 0xff
 8002d24:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d2a:	b2da      	uxtb	r2, r3
 8002d2c:	8979      	ldrh	r1, [r7, #10]
 8002d2e:	2300      	movs	r3, #0
 8002d30:	9300      	str	r3, [sp, #0]
 8002d32:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002d36:	68f8      	ldr	r0, [r7, #12]
 8002d38:	f000 fa7e 	bl	8003238 <I2C_TransferConfig>
 8002d3c:	e00f      	b.n	8002d5e <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d42:	b29a      	uxth	r2, r3
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d4c:	b2da      	uxtb	r2, r3
 8002d4e:	8979      	ldrh	r1, [r7, #10]
 8002d50:	2300      	movs	r3, #0
 8002d52:	9300      	str	r3, [sp, #0]
 8002d54:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002d58:	68f8      	ldr	r0, [r7, #12]
 8002d5a:	f000 fa6d 	bl	8003238 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d62:	b29b      	uxth	r3, r3
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d19d      	bne.n	8002ca4 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002d68:	697a      	ldr	r2, [r7, #20]
 8002d6a:	6a39      	ldr	r1, [r7, #32]
 8002d6c:	68f8      	ldr	r0, [r7, #12]
 8002d6e:	f000 f8cd 	bl	8002f0c <I2C_WaitOnSTOPFlagUntilTimeout>
 8002d72:	4603      	mov	r3, r0
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d001      	beq.n	8002d7c <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8002d78:	2301      	movs	r3, #1
 8002d7a:	e01a      	b.n	8002db2 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	2220      	movs	r2, #32
 8002d82:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	6859      	ldr	r1, [r3, #4]
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	681a      	ldr	r2, [r3, #0]
 8002d8e:	4b0c      	ldr	r3, [pc, #48]	; (8002dc0 <HAL_I2C_Master_Receive+0x1e8>)
 8002d90:	400b      	ands	r3, r1
 8002d92:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	2220      	movs	r2, #32
 8002d98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	2200      	movs	r2, #0
 8002da0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	2200      	movs	r2, #0
 8002da8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002dac:	2300      	movs	r3, #0
 8002dae:	e000      	b.n	8002db2 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8002db0:	2302      	movs	r3, #2
  }
}
 8002db2:	4618      	mov	r0, r3
 8002db4:	3718      	adds	r7, #24
 8002db6:	46bd      	mov	sp, r7
 8002db8:	bd80      	pop	{r7, pc}
 8002dba:	bf00      	nop
 8002dbc:	80002400 	.word	0x80002400
 8002dc0:	fe00e800 	.word	0xfe00e800

08002dc4 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002dc4:	b480      	push	{r7}
 8002dc6:	b083      	sub	sp, #12
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	699b      	ldr	r3, [r3, #24]
 8002dd2:	f003 0302 	and.w	r3, r3, #2
 8002dd6:	2b02      	cmp	r3, #2
 8002dd8:	d103      	bne.n	8002de2 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	2200      	movs	r2, #0
 8002de0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	699b      	ldr	r3, [r3, #24]
 8002de8:	f003 0301 	and.w	r3, r3, #1
 8002dec:	2b01      	cmp	r3, #1
 8002dee:	d007      	beq.n	8002e00 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	699a      	ldr	r2, [r3, #24]
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f042 0201 	orr.w	r2, r2, #1
 8002dfe:	619a      	str	r2, [r3, #24]
  }
}
 8002e00:	bf00      	nop
 8002e02:	370c      	adds	r7, #12
 8002e04:	46bd      	mov	sp, r7
 8002e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e0a:	4770      	bx	lr

08002e0c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002e0c:	b580      	push	{r7, lr}
 8002e0e:	b084      	sub	sp, #16
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	60f8      	str	r0, [r7, #12]
 8002e14:	60b9      	str	r1, [r7, #8]
 8002e16:	603b      	str	r3, [r7, #0]
 8002e18:	4613      	mov	r3, r2
 8002e1a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002e1c:	e022      	b.n	8002e64 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e1e:	683b      	ldr	r3, [r7, #0]
 8002e20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e24:	d01e      	beq.n	8002e64 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e26:	f7fe ff23 	bl	8001c70 <HAL_GetTick>
 8002e2a:	4602      	mov	r2, r0
 8002e2c:	69bb      	ldr	r3, [r7, #24]
 8002e2e:	1ad3      	subs	r3, r2, r3
 8002e30:	683a      	ldr	r2, [r7, #0]
 8002e32:	429a      	cmp	r2, r3
 8002e34:	d302      	bcc.n	8002e3c <I2C_WaitOnFlagUntilTimeout+0x30>
 8002e36:	683b      	ldr	r3, [r7, #0]
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d113      	bne.n	8002e64 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e40:	f043 0220 	orr.w	r2, r3, #32
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	2220      	movs	r2, #32
 8002e4c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	2200      	movs	r2, #0
 8002e54:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	2200      	movs	r2, #0
 8002e5c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8002e60:	2301      	movs	r3, #1
 8002e62:	e00f      	b.n	8002e84 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	699a      	ldr	r2, [r3, #24]
 8002e6a:	68bb      	ldr	r3, [r7, #8]
 8002e6c:	4013      	ands	r3, r2
 8002e6e:	68ba      	ldr	r2, [r7, #8]
 8002e70:	429a      	cmp	r2, r3
 8002e72:	bf0c      	ite	eq
 8002e74:	2301      	moveq	r3, #1
 8002e76:	2300      	movne	r3, #0
 8002e78:	b2db      	uxtb	r3, r3
 8002e7a:	461a      	mov	r2, r3
 8002e7c:	79fb      	ldrb	r3, [r7, #7]
 8002e7e:	429a      	cmp	r2, r3
 8002e80:	d0cd      	beq.n	8002e1e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002e82:	2300      	movs	r3, #0
}
 8002e84:	4618      	mov	r0, r3
 8002e86:	3710      	adds	r7, #16
 8002e88:	46bd      	mov	sp, r7
 8002e8a:	bd80      	pop	{r7, pc}

08002e8c <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002e8c:	b580      	push	{r7, lr}
 8002e8e:	b084      	sub	sp, #16
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	60f8      	str	r0, [r7, #12]
 8002e94:	60b9      	str	r1, [r7, #8]
 8002e96:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002e98:	e02c      	b.n	8002ef4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002e9a:	687a      	ldr	r2, [r7, #4]
 8002e9c:	68b9      	ldr	r1, [r7, #8]
 8002e9e:	68f8      	ldr	r0, [r7, #12]
 8002ea0:	f000 f8ea 	bl	8003078 <I2C_IsErrorOccurred>
 8002ea4:	4603      	mov	r3, r0
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d001      	beq.n	8002eae <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002eaa:	2301      	movs	r3, #1
 8002eac:	e02a      	b.n	8002f04 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002eae:	68bb      	ldr	r3, [r7, #8]
 8002eb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002eb4:	d01e      	beq.n	8002ef4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002eb6:	f7fe fedb 	bl	8001c70 <HAL_GetTick>
 8002eba:	4602      	mov	r2, r0
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	1ad3      	subs	r3, r2, r3
 8002ec0:	68ba      	ldr	r2, [r7, #8]
 8002ec2:	429a      	cmp	r2, r3
 8002ec4:	d302      	bcc.n	8002ecc <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002ec6:	68bb      	ldr	r3, [r7, #8]
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d113      	bne.n	8002ef4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ed0:	f043 0220 	orr.w	r2, r3, #32
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	2220      	movs	r2, #32
 8002edc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	2200      	movs	r2, #0
 8002ee4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	2200      	movs	r2, #0
 8002eec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002ef0:	2301      	movs	r3, #1
 8002ef2:	e007      	b.n	8002f04 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	699b      	ldr	r3, [r3, #24]
 8002efa:	f003 0302 	and.w	r3, r3, #2
 8002efe:	2b02      	cmp	r3, #2
 8002f00:	d1cb      	bne.n	8002e9a <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002f02:	2300      	movs	r3, #0
}
 8002f04:	4618      	mov	r0, r3
 8002f06:	3710      	adds	r7, #16
 8002f08:	46bd      	mov	sp, r7
 8002f0a:	bd80      	pop	{r7, pc}

08002f0c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002f0c:	b580      	push	{r7, lr}
 8002f0e:	b084      	sub	sp, #16
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	60f8      	str	r0, [r7, #12]
 8002f14:	60b9      	str	r1, [r7, #8]
 8002f16:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002f18:	e028      	b.n	8002f6c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002f1a:	687a      	ldr	r2, [r7, #4]
 8002f1c:	68b9      	ldr	r1, [r7, #8]
 8002f1e:	68f8      	ldr	r0, [r7, #12]
 8002f20:	f000 f8aa 	bl	8003078 <I2C_IsErrorOccurred>
 8002f24:	4603      	mov	r3, r0
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d001      	beq.n	8002f2e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002f2a:	2301      	movs	r3, #1
 8002f2c:	e026      	b.n	8002f7c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f2e:	f7fe fe9f 	bl	8001c70 <HAL_GetTick>
 8002f32:	4602      	mov	r2, r0
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	1ad3      	subs	r3, r2, r3
 8002f38:	68ba      	ldr	r2, [r7, #8]
 8002f3a:	429a      	cmp	r2, r3
 8002f3c:	d302      	bcc.n	8002f44 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002f3e:	68bb      	ldr	r3, [r7, #8]
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d113      	bne.n	8002f6c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f48:	f043 0220 	orr.w	r2, r3, #32
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	2220      	movs	r2, #32
 8002f54:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	2200      	movs	r2, #0
 8002f5c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	2200      	movs	r2, #0
 8002f64:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8002f68:	2301      	movs	r3, #1
 8002f6a:	e007      	b.n	8002f7c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	699b      	ldr	r3, [r3, #24]
 8002f72:	f003 0320 	and.w	r3, r3, #32
 8002f76:	2b20      	cmp	r3, #32
 8002f78:	d1cf      	bne.n	8002f1a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002f7a:	2300      	movs	r3, #0
}
 8002f7c:	4618      	mov	r0, r3
 8002f7e:	3710      	adds	r7, #16
 8002f80:	46bd      	mov	sp, r7
 8002f82:	bd80      	pop	{r7, pc}

08002f84 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002f84:	b580      	push	{r7, lr}
 8002f86:	b084      	sub	sp, #16
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	60f8      	str	r0, [r7, #12]
 8002f8c:	60b9      	str	r1, [r7, #8]
 8002f8e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002f90:	e064      	b.n	800305c <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002f92:	687a      	ldr	r2, [r7, #4]
 8002f94:	68b9      	ldr	r1, [r7, #8]
 8002f96:	68f8      	ldr	r0, [r7, #12]
 8002f98:	f000 f86e 	bl	8003078 <I2C_IsErrorOccurred>
 8002f9c:	4603      	mov	r3, r0
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d001      	beq.n	8002fa6 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002fa2:	2301      	movs	r3, #1
 8002fa4:	e062      	b.n	800306c <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	699b      	ldr	r3, [r3, #24]
 8002fac:	f003 0320 	and.w	r3, r3, #32
 8002fb0:	2b20      	cmp	r3, #32
 8002fb2:	d138      	bne.n	8003026 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	699b      	ldr	r3, [r3, #24]
 8002fba:	f003 0304 	and.w	r3, r3, #4
 8002fbe:	2b04      	cmp	r3, #4
 8002fc0:	d105      	bne.n	8002fce <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d001      	beq.n	8002fce <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8002fca:	2300      	movs	r3, #0
 8002fcc:	e04e      	b.n	800306c <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	699b      	ldr	r3, [r3, #24]
 8002fd4:	f003 0310 	and.w	r3, r3, #16
 8002fd8:	2b10      	cmp	r3, #16
 8002fda:	d107      	bne.n	8002fec <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	2210      	movs	r2, #16
 8002fe2:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	2204      	movs	r2, #4
 8002fe8:	645a      	str	r2, [r3, #68]	; 0x44
 8002fea:	e002      	b.n	8002ff2 <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	2200      	movs	r2, #0
 8002ff0:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	2220      	movs	r2, #32
 8002ff8:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	6859      	ldr	r1, [r3, #4]
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	681a      	ldr	r2, [r3, #0]
 8003004:	4b1b      	ldr	r3, [pc, #108]	; (8003074 <I2C_WaitOnRXNEFlagUntilTimeout+0xf0>)
 8003006:	400b      	ands	r3, r1
 8003008:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	2220      	movs	r2, #32
 800300e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	2200      	movs	r2, #0
 8003016:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	2200      	movs	r2, #0
 800301e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8003022:	2301      	movs	r3, #1
 8003024:	e022      	b.n	800306c <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003026:	f7fe fe23 	bl	8001c70 <HAL_GetTick>
 800302a:	4602      	mov	r2, r0
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	1ad3      	subs	r3, r2, r3
 8003030:	68ba      	ldr	r2, [r7, #8]
 8003032:	429a      	cmp	r2, r3
 8003034:	d302      	bcc.n	800303c <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 8003036:	68bb      	ldr	r3, [r7, #8]
 8003038:	2b00      	cmp	r3, #0
 800303a:	d10f      	bne.n	800305c <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003040:	f043 0220 	orr.w	r2, r3, #32
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	2220      	movs	r2, #32
 800304c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	2200      	movs	r2, #0
 8003054:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8003058:	2301      	movs	r3, #1
 800305a:	e007      	b.n	800306c <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	699b      	ldr	r3, [r3, #24]
 8003062:	f003 0304 	and.w	r3, r3, #4
 8003066:	2b04      	cmp	r3, #4
 8003068:	d193      	bne.n	8002f92 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800306a:	2300      	movs	r3, #0
}
 800306c:	4618      	mov	r0, r3
 800306e:	3710      	adds	r7, #16
 8003070:	46bd      	mov	sp, r7
 8003072:	bd80      	pop	{r7, pc}
 8003074:	fe00e800 	.word	0xfe00e800

08003078 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003078:	b580      	push	{r7, lr}
 800307a:	b08a      	sub	sp, #40	; 0x28
 800307c:	af00      	add	r7, sp, #0
 800307e:	60f8      	str	r0, [r7, #12]
 8003080:	60b9      	str	r1, [r7, #8]
 8003082:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003084:	2300      	movs	r3, #0
 8003086:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	699b      	ldr	r3, [r3, #24]
 8003090:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8003092:	2300      	movs	r3, #0
 8003094:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800309a:	69bb      	ldr	r3, [r7, #24]
 800309c:	f003 0310 	and.w	r3, r3, #16
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d068      	beq.n	8003176 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	2210      	movs	r2, #16
 80030aa:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80030ac:	e049      	b.n	8003142 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80030ae:	68bb      	ldr	r3, [r7, #8]
 80030b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030b4:	d045      	beq.n	8003142 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80030b6:	f7fe fddb 	bl	8001c70 <HAL_GetTick>
 80030ba:	4602      	mov	r2, r0
 80030bc:	69fb      	ldr	r3, [r7, #28]
 80030be:	1ad3      	subs	r3, r2, r3
 80030c0:	68ba      	ldr	r2, [r7, #8]
 80030c2:	429a      	cmp	r2, r3
 80030c4:	d302      	bcc.n	80030cc <I2C_IsErrorOccurred+0x54>
 80030c6:	68bb      	ldr	r3, [r7, #8]
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d13a      	bne.n	8003142 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	685b      	ldr	r3, [r3, #4]
 80030d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80030d6:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80030de:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	699b      	ldr	r3, [r3, #24]
 80030e6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80030ea:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80030ee:	d121      	bne.n	8003134 <I2C_IsErrorOccurred+0xbc>
 80030f0:	697b      	ldr	r3, [r7, #20]
 80030f2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80030f6:	d01d      	beq.n	8003134 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80030f8:	7cfb      	ldrb	r3, [r7, #19]
 80030fa:	2b20      	cmp	r3, #32
 80030fc:	d01a      	beq.n	8003134 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	685a      	ldr	r2, [r3, #4]
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800310c:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800310e:	f7fe fdaf 	bl	8001c70 <HAL_GetTick>
 8003112:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003114:	e00e      	b.n	8003134 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8003116:	f7fe fdab 	bl	8001c70 <HAL_GetTick>
 800311a:	4602      	mov	r2, r0
 800311c:	69fb      	ldr	r3, [r7, #28]
 800311e:	1ad3      	subs	r3, r2, r3
 8003120:	2b19      	cmp	r3, #25
 8003122:	d907      	bls.n	8003134 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 8003124:	6a3b      	ldr	r3, [r7, #32]
 8003126:	f043 0320 	orr.w	r3, r3, #32
 800312a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 800312c:	2301      	movs	r3, #1
 800312e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8003132:	e006      	b.n	8003142 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	699b      	ldr	r3, [r3, #24]
 800313a:	f003 0320 	and.w	r3, r3, #32
 800313e:	2b20      	cmp	r3, #32
 8003140:	d1e9      	bne.n	8003116 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	699b      	ldr	r3, [r3, #24]
 8003148:	f003 0320 	and.w	r3, r3, #32
 800314c:	2b20      	cmp	r3, #32
 800314e:	d003      	beq.n	8003158 <I2C_IsErrorOccurred+0xe0>
 8003150:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003154:	2b00      	cmp	r3, #0
 8003156:	d0aa      	beq.n	80030ae <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8003158:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800315c:	2b00      	cmp	r3, #0
 800315e:	d103      	bne.n	8003168 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	2220      	movs	r2, #32
 8003166:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8003168:	6a3b      	ldr	r3, [r7, #32]
 800316a:	f043 0304 	orr.w	r3, r3, #4
 800316e:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8003170:	2301      	movs	r3, #1
 8003172:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	699b      	ldr	r3, [r3, #24]
 800317c:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800317e:	69bb      	ldr	r3, [r7, #24]
 8003180:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003184:	2b00      	cmp	r3, #0
 8003186:	d00b      	beq.n	80031a0 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8003188:	6a3b      	ldr	r3, [r7, #32]
 800318a:	f043 0301 	orr.w	r3, r3, #1
 800318e:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003198:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800319a:	2301      	movs	r3, #1
 800319c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80031a0:	69bb      	ldr	r3, [r7, #24]
 80031a2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d00b      	beq.n	80031c2 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80031aa:	6a3b      	ldr	r3, [r7, #32]
 80031ac:	f043 0308 	orr.w	r3, r3, #8
 80031b0:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80031ba:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80031bc:	2301      	movs	r3, #1
 80031be:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80031c2:	69bb      	ldr	r3, [r7, #24]
 80031c4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d00b      	beq.n	80031e4 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80031cc:	6a3b      	ldr	r3, [r7, #32]
 80031ce:	f043 0302 	orr.w	r3, r3, #2
 80031d2:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80031dc:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80031de:	2301      	movs	r3, #1
 80031e0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 80031e4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d01c      	beq.n	8003226 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80031ec:	68f8      	ldr	r0, [r7, #12]
 80031ee:	f7ff fde9 	bl	8002dc4 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	6859      	ldr	r1, [r3, #4]
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	681a      	ldr	r2, [r3, #0]
 80031fc:	4b0d      	ldr	r3, [pc, #52]	; (8003234 <I2C_IsErrorOccurred+0x1bc>)
 80031fe:	400b      	ands	r3, r1
 8003200:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003206:	6a3b      	ldr	r3, [r7, #32]
 8003208:	431a      	orrs	r2, r3
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	2220      	movs	r2, #32
 8003212:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	2200      	movs	r2, #0
 800321a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	2200      	movs	r2, #0
 8003222:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8003226:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800322a:	4618      	mov	r0, r3
 800322c:	3728      	adds	r7, #40	; 0x28
 800322e:	46bd      	mov	sp, r7
 8003230:	bd80      	pop	{r7, pc}
 8003232:	bf00      	nop
 8003234:	fe00e800 	.word	0xfe00e800

08003238 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003238:	b580      	push	{r7, lr}
 800323a:	b086      	sub	sp, #24
 800323c:	af00      	add	r7, sp, #0
 800323e:	60f8      	str	r0, [r7, #12]
 8003240:	607b      	str	r3, [r7, #4]
 8003242:	460b      	mov	r3, r1
 8003244:	817b      	strh	r3, [r7, #10]
 8003246:	4613      	mov	r3, r2
 8003248:	727b      	strb	r3, [r7, #9]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	4a2f      	ldr	r2, [pc, #188]	; (800330c <I2C_TransferConfig+0xd4>)
 8003250:	4293      	cmp	r3, r2
 8003252:	d013      	beq.n	800327c <I2C_TransferConfig+0x44>
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	4a2d      	ldr	r2, [pc, #180]	; (8003310 <I2C_TransferConfig+0xd8>)
 800325a:	4293      	cmp	r3, r2
 800325c:	d00e      	beq.n	800327c <I2C_TransferConfig+0x44>
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	4a2c      	ldr	r2, [pc, #176]	; (8003314 <I2C_TransferConfig+0xdc>)
 8003264:	4293      	cmp	r3, r2
 8003266:	d009      	beq.n	800327c <I2C_TransferConfig+0x44>
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	4a2a      	ldr	r2, [pc, #168]	; (8003318 <I2C_TransferConfig+0xe0>)
 800326e:	4293      	cmp	r3, r2
 8003270:	d004      	beq.n	800327c <I2C_TransferConfig+0x44>
 8003272:	f641 3147 	movw	r1, #6983	; 0x1b47
 8003276:	4829      	ldr	r0, [pc, #164]	; (800331c <I2C_TransferConfig+0xe4>)
 8003278:	f7fe fa8b 	bl	8001792 <assert_failed>
  assert_param(IS_TRANSFER_MODE(Mode));
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003282:	d00b      	beq.n	800329c <I2C_TransferConfig+0x64>
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800328a:	d007      	beq.n	800329c <I2C_TransferConfig+0x64>
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	2b00      	cmp	r3, #0
 8003290:	d004      	beq.n	800329c <I2C_TransferConfig+0x64>
 8003292:	f641 3148 	movw	r1, #6984	; 0x1b48
 8003296:	4821      	ldr	r0, [pc, #132]	; (800331c <I2C_TransferConfig+0xe4>)
 8003298:	f7fe fa7b 	bl	8001792 <assert_failed>
  assert_param(IS_TRANSFER_REQUEST(Request));
 800329c:	6a3b      	ldr	r3, [r7, #32]
 800329e:	4a20      	ldr	r2, [pc, #128]	; (8003320 <I2C_TransferConfig+0xe8>)
 80032a0:	4293      	cmp	r3, r2
 80032a2:	d00f      	beq.n	80032c4 <I2C_TransferConfig+0x8c>
 80032a4:	6a3b      	ldr	r3, [r7, #32]
 80032a6:	4a1f      	ldr	r2, [pc, #124]	; (8003324 <I2C_TransferConfig+0xec>)
 80032a8:	4293      	cmp	r3, r2
 80032aa:	d00b      	beq.n	80032c4 <I2C_TransferConfig+0x8c>
 80032ac:	6a3b      	ldr	r3, [r7, #32]
 80032ae:	4a1e      	ldr	r2, [pc, #120]	; (8003328 <I2C_TransferConfig+0xf0>)
 80032b0:	4293      	cmp	r3, r2
 80032b2:	d007      	beq.n	80032c4 <I2C_TransferConfig+0x8c>
 80032b4:	6a3b      	ldr	r3, [r7, #32]
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d004      	beq.n	80032c4 <I2C_TransferConfig+0x8c>
 80032ba:	f641 3149 	movw	r1, #6985	; 0x1b49
 80032be:	4817      	ldr	r0, [pc, #92]	; (800331c <I2C_TransferConfig+0xe4>)
 80032c0:	f7fe fa67 	bl	8001792 <assert_failed>

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80032c4:	897b      	ldrh	r3, [r7, #10]
 80032c6:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80032ca:	7a7b      	ldrb	r3, [r7, #9]
 80032cc:	041b      	lsls	r3, r3, #16
 80032ce:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80032d2:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80032d8:	6a3b      	ldr	r3, [r7, #32]
 80032da:	4313      	orrs	r3, r2
 80032dc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80032e0:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	685a      	ldr	r2, [r3, #4]
 80032e8:	6a3b      	ldr	r3, [r7, #32]
 80032ea:	0d5b      	lsrs	r3, r3, #21
 80032ec:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80032f0:	4b0e      	ldr	r3, [pc, #56]	; (800332c <I2C_TransferConfig+0xf4>)
 80032f2:	430b      	orrs	r3, r1
 80032f4:	43db      	mvns	r3, r3
 80032f6:	ea02 0103 	and.w	r1, r2, r3
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	697a      	ldr	r2, [r7, #20]
 8003300:	430a      	orrs	r2, r1
 8003302:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8003304:	bf00      	nop
 8003306:	3718      	adds	r7, #24
 8003308:	46bd      	mov	sp, r7
 800330a:	bd80      	pop	{r7, pc}
 800330c:	40005400 	.word	0x40005400
 8003310:	40005800 	.word	0x40005800
 8003314:	40005c00 	.word	0x40005c00
 8003318:	40006000 	.word	0x40006000
 800331c:	0800e518 	.word	0x0800e518
 8003320:	80004000 	.word	0x80004000
 8003324:	80002400 	.word	0x80002400
 8003328:	80002000 	.word	0x80002000
 800332c:	03ff63ff 	.word	0x03ff63ff

08003330 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003330:	b580      	push	{r7, lr}
 8003332:	b082      	sub	sp, #8
 8003334:	af00      	add	r7, sp, #0
 8003336:	6078      	str	r0, [r7, #4]
 8003338:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	4a32      	ldr	r2, [pc, #200]	; (8003408 <HAL_I2CEx_ConfigAnalogFilter+0xd8>)
 8003340:	4293      	cmp	r3, r2
 8003342:	d012      	beq.n	800336a <HAL_I2CEx_ConfigAnalogFilter+0x3a>
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	4a30      	ldr	r2, [pc, #192]	; (800340c <HAL_I2CEx_ConfigAnalogFilter+0xdc>)
 800334a:	4293      	cmp	r3, r2
 800334c:	d00d      	beq.n	800336a <HAL_I2CEx_ConfigAnalogFilter+0x3a>
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	4a2f      	ldr	r2, [pc, #188]	; (8003410 <HAL_I2CEx_ConfigAnalogFilter+0xe0>)
 8003354:	4293      	cmp	r3, r2
 8003356:	d008      	beq.n	800336a <HAL_I2CEx_ConfigAnalogFilter+0x3a>
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	4a2d      	ldr	r2, [pc, #180]	; (8003414 <HAL_I2CEx_ConfigAnalogFilter+0xe4>)
 800335e:	4293      	cmp	r3, r2
 8003360:	d003      	beq.n	800336a <HAL_I2CEx_ConfigAnalogFilter+0x3a>
 8003362:	215e      	movs	r1, #94	; 0x5e
 8003364:	482c      	ldr	r0, [pc, #176]	; (8003418 <HAL_I2CEx_ConfigAnalogFilter+0xe8>)
 8003366:	f7fe fa14 	bl	8001792 <assert_failed>
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));
 800336a:	683b      	ldr	r3, [r7, #0]
 800336c:	2b00      	cmp	r3, #0
 800336e:	d007      	beq.n	8003380 <HAL_I2CEx_ConfigAnalogFilter+0x50>
 8003370:	683b      	ldr	r3, [r7, #0]
 8003372:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003376:	d003      	beq.n	8003380 <HAL_I2CEx_ConfigAnalogFilter+0x50>
 8003378:	215f      	movs	r1, #95	; 0x5f
 800337a:	4827      	ldr	r0, [pc, #156]	; (8003418 <HAL_I2CEx_ConfigAnalogFilter+0xe8>)
 800337c:	f7fe fa09 	bl	8001792 <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003386:	b2db      	uxtb	r3, r3
 8003388:	2b20      	cmp	r3, #32
 800338a:	d138      	bne.n	80033fe <HAL_I2CEx_ConfigAnalogFilter+0xce>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003392:	2b01      	cmp	r3, #1
 8003394:	d101      	bne.n	800339a <HAL_I2CEx_ConfigAnalogFilter+0x6a>
 8003396:	2302      	movs	r3, #2
 8003398:	e032      	b.n	8003400 <HAL_I2CEx_ConfigAnalogFilter+0xd0>
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	2201      	movs	r2, #1
 800339e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	2224      	movs	r2, #36	; 0x24
 80033a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	681a      	ldr	r2, [r3, #0]
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	f022 0201 	bic.w	r2, r2, #1
 80033b8:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	681a      	ldr	r2, [r3, #0]
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80033c8:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	6819      	ldr	r1, [r3, #0]
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	683a      	ldr	r2, [r7, #0]
 80033d6:	430a      	orrs	r2, r1
 80033d8:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	681a      	ldr	r2, [r3, #0]
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	f042 0201 	orr.w	r2, r2, #1
 80033e8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	2220      	movs	r2, #32
 80033ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	2200      	movs	r2, #0
 80033f6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80033fa:	2300      	movs	r3, #0
 80033fc:	e000      	b.n	8003400 <HAL_I2CEx_ConfigAnalogFilter+0xd0>
  }
  else
  {
    return HAL_BUSY;
 80033fe:	2302      	movs	r3, #2
  }
}
 8003400:	4618      	mov	r0, r3
 8003402:	3708      	adds	r7, #8
 8003404:	46bd      	mov	sp, r7
 8003406:	bd80      	pop	{r7, pc}
 8003408:	40005400 	.word	0x40005400
 800340c:	40005800 	.word	0x40005800
 8003410:	40005c00 	.word	0x40005c00
 8003414:	40006000 	.word	0x40006000
 8003418:	0800e550 	.word	0x0800e550

0800341c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800341c:	b580      	push	{r7, lr}
 800341e:	b084      	sub	sp, #16
 8003420:	af00      	add	r7, sp, #0
 8003422:	6078      	str	r0, [r7, #4]
 8003424:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg;

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	4a31      	ldr	r2, [pc, #196]	; (80034f0 <HAL_I2CEx_ConfigDigitalFilter+0xd4>)
 800342c:	4293      	cmp	r3, r2
 800342e:	d012      	beq.n	8003456 <HAL_I2CEx_ConfigDigitalFilter+0x3a>
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	4a2f      	ldr	r2, [pc, #188]	; (80034f4 <HAL_I2CEx_ConfigDigitalFilter+0xd8>)
 8003436:	4293      	cmp	r3, r2
 8003438:	d00d      	beq.n	8003456 <HAL_I2CEx_ConfigDigitalFilter+0x3a>
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	4a2e      	ldr	r2, [pc, #184]	; (80034f8 <HAL_I2CEx_ConfigDigitalFilter+0xdc>)
 8003440:	4293      	cmp	r3, r2
 8003442:	d008      	beq.n	8003456 <HAL_I2CEx_ConfigDigitalFilter+0x3a>
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	4a2c      	ldr	r2, [pc, #176]	; (80034fc <HAL_I2CEx_ConfigDigitalFilter+0xe0>)
 800344a:	4293      	cmp	r3, r2
 800344c:	d003      	beq.n	8003456 <HAL_I2CEx_ConfigDigitalFilter+0x3a>
 800344e:	218c      	movs	r1, #140	; 0x8c
 8003450:	482b      	ldr	r0, [pc, #172]	; (8003500 <HAL_I2CEx_ConfigDigitalFilter+0xe4>)
 8003452:	f7fe f99e 	bl	8001792 <assert_failed>
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));
 8003456:	683b      	ldr	r3, [r7, #0]
 8003458:	2b0f      	cmp	r3, #15
 800345a:	d903      	bls.n	8003464 <HAL_I2CEx_ConfigDigitalFilter+0x48>
 800345c:	218d      	movs	r1, #141	; 0x8d
 800345e:	4828      	ldr	r0, [pc, #160]	; (8003500 <HAL_I2CEx_ConfigDigitalFilter+0xe4>)
 8003460:	f7fe f997 	bl	8001792 <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800346a:	b2db      	uxtb	r3, r3
 800346c:	2b20      	cmp	r3, #32
 800346e:	d139      	bne.n	80034e4 <HAL_I2CEx_ConfigDigitalFilter+0xc8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003476:	2b01      	cmp	r3, #1
 8003478:	d101      	bne.n	800347e <HAL_I2CEx_ConfigDigitalFilter+0x62>
 800347a:	2302      	movs	r3, #2
 800347c:	e033      	b.n	80034e6 <HAL_I2CEx_ConfigDigitalFilter+0xca>
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	2201      	movs	r2, #1
 8003482:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	2224      	movs	r2, #36	; 0x24
 800348a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	681a      	ldr	r2, [r3, #0]
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	f022 0201 	bic.w	r2, r2, #1
 800349c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80034ac:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80034ae:	683b      	ldr	r3, [r7, #0]
 80034b0:	021b      	lsls	r3, r3, #8
 80034b2:	68fa      	ldr	r2, [r7, #12]
 80034b4:	4313      	orrs	r3, r2
 80034b6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	68fa      	ldr	r2, [r7, #12]
 80034be:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	681a      	ldr	r2, [r3, #0]
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	f042 0201 	orr.w	r2, r2, #1
 80034ce:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	2220      	movs	r2, #32
 80034d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	2200      	movs	r2, #0
 80034dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80034e0:	2300      	movs	r3, #0
 80034e2:	e000      	b.n	80034e6 <HAL_I2CEx_ConfigDigitalFilter+0xca>
  }
  else
  {
    return HAL_BUSY;
 80034e4:	2302      	movs	r3, #2
  }
}
 80034e6:	4618      	mov	r0, r3
 80034e8:	3710      	adds	r7, #16
 80034ea:	46bd      	mov	sp, r7
 80034ec:	bd80      	pop	{r7, pc}
 80034ee:	bf00      	nop
 80034f0:	40005400 	.word	0x40005400
 80034f4:	40005800 	.word	0x40005800
 80034f8:	40005c00 	.word	0x40005c00
 80034fc:	40006000 	.word	0x40006000
 8003500:	0800e550 	.word	0x0800e550

08003504 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003504:	b580      	push	{r7, lr}
 8003506:	b082      	sub	sp, #8
 8003508:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800350a:	2300      	movs	r3, #0
 800350c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800350e:	4b23      	ldr	r3, [pc, #140]	; (800359c <HAL_PWREx_EnableOverDrive+0x98>)
 8003510:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003512:	4a22      	ldr	r2, [pc, #136]	; (800359c <HAL_PWREx_EnableOverDrive+0x98>)
 8003514:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003518:	6413      	str	r3, [r2, #64]	; 0x40
 800351a:	4b20      	ldr	r3, [pc, #128]	; (800359c <HAL_PWREx_EnableOverDrive+0x98>)
 800351c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800351e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003522:	603b      	str	r3, [r7, #0]
 8003524:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8003526:	4b1e      	ldr	r3, [pc, #120]	; (80035a0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	4a1d      	ldr	r2, [pc, #116]	; (80035a0 <HAL_PWREx_EnableOverDrive+0x9c>)
 800352c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003530:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003532:	f7fe fb9d 	bl	8001c70 <HAL_GetTick>
 8003536:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003538:	e009      	b.n	800354e <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800353a:	f7fe fb99 	bl	8001c70 <HAL_GetTick>
 800353e:	4602      	mov	r2, r0
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	1ad3      	subs	r3, r2, r3
 8003544:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003548:	d901      	bls.n	800354e <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800354a:	2303      	movs	r3, #3
 800354c:	e022      	b.n	8003594 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800354e:	4b14      	ldr	r3, [pc, #80]	; (80035a0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003550:	685b      	ldr	r3, [r3, #4]
 8003552:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003556:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800355a:	d1ee      	bne.n	800353a <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800355c:	4b10      	ldr	r3, [pc, #64]	; (80035a0 <HAL_PWREx_EnableOverDrive+0x9c>)
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	4a0f      	ldr	r2, [pc, #60]	; (80035a0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003562:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003566:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003568:	f7fe fb82 	bl	8001c70 <HAL_GetTick>
 800356c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800356e:	e009      	b.n	8003584 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003570:	f7fe fb7e 	bl	8001c70 <HAL_GetTick>
 8003574:	4602      	mov	r2, r0
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	1ad3      	subs	r3, r2, r3
 800357a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800357e:	d901      	bls.n	8003584 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8003580:	2303      	movs	r3, #3
 8003582:	e007      	b.n	8003594 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003584:	4b06      	ldr	r3, [pc, #24]	; (80035a0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003586:	685b      	ldr	r3, [r3, #4]
 8003588:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800358c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003590:	d1ee      	bne.n	8003570 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8003592:	2300      	movs	r3, #0
}
 8003594:	4618      	mov	r0, r3
 8003596:	3708      	adds	r7, #8
 8003598:	46bd      	mov	sp, r7
 800359a:	bd80      	pop	{r7, pc}
 800359c:	40023800 	.word	0x40023800
 80035a0:	40007000 	.word	0x40007000

080035a4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80035a4:	b580      	push	{r7, lr}
 80035a6:	b086      	sub	sp, #24
 80035a8:	af00      	add	r7, sp, #0
 80035aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80035ac:	2300      	movs	r3, #0
 80035ae:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d101      	bne.n	80035ba <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80035b6:	2301      	movs	r3, #1
 80035b8:	e345      	b.n	8003c46 <HAL_RCC_OscConfig+0x6a2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	2b0f      	cmp	r3, #15
 80035c0:	d904      	bls.n	80035cc <HAL_RCC_OscConfig+0x28>
 80035c2:	f240 1163 	movw	r1, #355	; 0x163
 80035c6:	4892      	ldr	r0, [pc, #584]	; (8003810 <HAL_RCC_OscConfig+0x26c>)
 80035c8:	f7fe f8e3 	bl	8001792 <assert_failed>

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	f003 0301 	and.w	r3, r3, #1
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	f000 809a 	beq.w	800370e <HAL_RCC_OscConfig+0x16a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	685b      	ldr	r3, [r3, #4]
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d00e      	beq.n	8003600 <HAL_RCC_OscConfig+0x5c>
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	685b      	ldr	r3, [r3, #4]
 80035e6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80035ea:	d009      	beq.n	8003600 <HAL_RCC_OscConfig+0x5c>
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	685b      	ldr	r3, [r3, #4]
 80035f0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80035f4:	d004      	beq.n	8003600 <HAL_RCC_OscConfig+0x5c>
 80035f6:	f240 1169 	movw	r1, #361	; 0x169
 80035fa:	4885      	ldr	r0, [pc, #532]	; (8003810 <HAL_RCC_OscConfig+0x26c>)
 80035fc:	f7fe f8c9 	bl	8001792 <assert_failed>
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003600:	4b84      	ldr	r3, [pc, #528]	; (8003814 <HAL_RCC_OscConfig+0x270>)
 8003602:	689b      	ldr	r3, [r3, #8]
 8003604:	f003 030c 	and.w	r3, r3, #12
 8003608:	2b04      	cmp	r3, #4
 800360a:	d00c      	beq.n	8003626 <HAL_RCC_OscConfig+0x82>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800360c:	4b81      	ldr	r3, [pc, #516]	; (8003814 <HAL_RCC_OscConfig+0x270>)
 800360e:	689b      	ldr	r3, [r3, #8]
 8003610:	f003 030c 	and.w	r3, r3, #12
 8003614:	2b08      	cmp	r3, #8
 8003616:	d112      	bne.n	800363e <HAL_RCC_OscConfig+0x9a>
 8003618:	4b7e      	ldr	r3, [pc, #504]	; (8003814 <HAL_RCC_OscConfig+0x270>)
 800361a:	685b      	ldr	r3, [r3, #4]
 800361c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003620:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003624:	d10b      	bne.n	800363e <HAL_RCC_OscConfig+0x9a>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003626:	4b7b      	ldr	r3, [pc, #492]	; (8003814 <HAL_RCC_OscConfig+0x270>)
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800362e:	2b00      	cmp	r3, #0
 8003630:	d06c      	beq.n	800370c <HAL_RCC_OscConfig+0x168>
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	685b      	ldr	r3, [r3, #4]
 8003636:	2b00      	cmp	r3, #0
 8003638:	d168      	bne.n	800370c <HAL_RCC_OscConfig+0x168>
      {
        return HAL_ERROR;
 800363a:	2301      	movs	r3, #1
 800363c:	e303      	b.n	8003c46 <HAL_RCC_OscConfig+0x6a2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	685b      	ldr	r3, [r3, #4]
 8003642:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003646:	d106      	bne.n	8003656 <HAL_RCC_OscConfig+0xb2>
 8003648:	4b72      	ldr	r3, [pc, #456]	; (8003814 <HAL_RCC_OscConfig+0x270>)
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	4a71      	ldr	r2, [pc, #452]	; (8003814 <HAL_RCC_OscConfig+0x270>)
 800364e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003652:	6013      	str	r3, [r2, #0]
 8003654:	e02e      	b.n	80036b4 <HAL_RCC_OscConfig+0x110>
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	685b      	ldr	r3, [r3, #4]
 800365a:	2b00      	cmp	r3, #0
 800365c:	d10c      	bne.n	8003678 <HAL_RCC_OscConfig+0xd4>
 800365e:	4b6d      	ldr	r3, [pc, #436]	; (8003814 <HAL_RCC_OscConfig+0x270>)
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	4a6c      	ldr	r2, [pc, #432]	; (8003814 <HAL_RCC_OscConfig+0x270>)
 8003664:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003668:	6013      	str	r3, [r2, #0]
 800366a:	4b6a      	ldr	r3, [pc, #424]	; (8003814 <HAL_RCC_OscConfig+0x270>)
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	4a69      	ldr	r2, [pc, #420]	; (8003814 <HAL_RCC_OscConfig+0x270>)
 8003670:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003674:	6013      	str	r3, [r2, #0]
 8003676:	e01d      	b.n	80036b4 <HAL_RCC_OscConfig+0x110>
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	685b      	ldr	r3, [r3, #4]
 800367c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003680:	d10c      	bne.n	800369c <HAL_RCC_OscConfig+0xf8>
 8003682:	4b64      	ldr	r3, [pc, #400]	; (8003814 <HAL_RCC_OscConfig+0x270>)
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	4a63      	ldr	r2, [pc, #396]	; (8003814 <HAL_RCC_OscConfig+0x270>)
 8003688:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800368c:	6013      	str	r3, [r2, #0]
 800368e:	4b61      	ldr	r3, [pc, #388]	; (8003814 <HAL_RCC_OscConfig+0x270>)
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	4a60      	ldr	r2, [pc, #384]	; (8003814 <HAL_RCC_OscConfig+0x270>)
 8003694:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003698:	6013      	str	r3, [r2, #0]
 800369a:	e00b      	b.n	80036b4 <HAL_RCC_OscConfig+0x110>
 800369c:	4b5d      	ldr	r3, [pc, #372]	; (8003814 <HAL_RCC_OscConfig+0x270>)
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	4a5c      	ldr	r2, [pc, #368]	; (8003814 <HAL_RCC_OscConfig+0x270>)
 80036a2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80036a6:	6013      	str	r3, [r2, #0]
 80036a8:	4b5a      	ldr	r3, [pc, #360]	; (8003814 <HAL_RCC_OscConfig+0x270>)
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	4a59      	ldr	r2, [pc, #356]	; (8003814 <HAL_RCC_OscConfig+0x270>)
 80036ae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80036b2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	685b      	ldr	r3, [r3, #4]
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d013      	beq.n	80036e4 <HAL_RCC_OscConfig+0x140>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036bc:	f7fe fad8 	bl	8001c70 <HAL_GetTick>
 80036c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80036c2:	e008      	b.n	80036d6 <HAL_RCC_OscConfig+0x132>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80036c4:	f7fe fad4 	bl	8001c70 <HAL_GetTick>
 80036c8:	4602      	mov	r2, r0
 80036ca:	693b      	ldr	r3, [r7, #16]
 80036cc:	1ad3      	subs	r3, r2, r3
 80036ce:	2b64      	cmp	r3, #100	; 0x64
 80036d0:	d901      	bls.n	80036d6 <HAL_RCC_OscConfig+0x132>
          {
            return HAL_TIMEOUT;
 80036d2:	2303      	movs	r3, #3
 80036d4:	e2b7      	b.n	8003c46 <HAL_RCC_OscConfig+0x6a2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80036d6:	4b4f      	ldr	r3, [pc, #316]	; (8003814 <HAL_RCC_OscConfig+0x270>)
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d0f0      	beq.n	80036c4 <HAL_RCC_OscConfig+0x120>
 80036e2:	e014      	b.n	800370e <HAL_RCC_OscConfig+0x16a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036e4:	f7fe fac4 	bl	8001c70 <HAL_GetTick>
 80036e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80036ea:	e008      	b.n	80036fe <HAL_RCC_OscConfig+0x15a>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80036ec:	f7fe fac0 	bl	8001c70 <HAL_GetTick>
 80036f0:	4602      	mov	r2, r0
 80036f2:	693b      	ldr	r3, [r7, #16]
 80036f4:	1ad3      	subs	r3, r2, r3
 80036f6:	2b64      	cmp	r3, #100	; 0x64
 80036f8:	d901      	bls.n	80036fe <HAL_RCC_OscConfig+0x15a>
          {
            return HAL_TIMEOUT;
 80036fa:	2303      	movs	r3, #3
 80036fc:	e2a3      	b.n	8003c46 <HAL_RCC_OscConfig+0x6a2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80036fe:	4b45      	ldr	r3, [pc, #276]	; (8003814 <HAL_RCC_OscConfig+0x270>)
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003706:	2b00      	cmp	r3, #0
 8003708:	d1f0      	bne.n	80036ec <HAL_RCC_OscConfig+0x148>
 800370a:	e000      	b.n	800370e <HAL_RCC_OscConfig+0x16a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800370c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f003 0302 	and.w	r3, r3, #2
 8003716:	2b00      	cmp	r3, #0
 8003718:	f000 8084 	beq.w	8003824 <HAL_RCC_OscConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	68db      	ldr	r3, [r3, #12]
 8003720:	2b00      	cmp	r3, #0
 8003722:	d008      	beq.n	8003736 <HAL_RCC_OscConfig+0x192>
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	68db      	ldr	r3, [r3, #12]
 8003728:	2b01      	cmp	r3, #1
 800372a:	d004      	beq.n	8003736 <HAL_RCC_OscConfig+0x192>
 800372c:	f240 119b 	movw	r1, #411	; 0x19b
 8003730:	4837      	ldr	r0, [pc, #220]	; (8003810 <HAL_RCC_OscConfig+0x26c>)
 8003732:	f7fe f82e 	bl	8001792 <assert_failed>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	691b      	ldr	r3, [r3, #16]
 800373a:	2b1f      	cmp	r3, #31
 800373c:	d904      	bls.n	8003748 <HAL_RCC_OscConfig+0x1a4>
 800373e:	f44f 71ce 	mov.w	r1, #412	; 0x19c
 8003742:	4833      	ldr	r0, [pc, #204]	; (8003810 <HAL_RCC_OscConfig+0x26c>)
 8003744:	f7fe f825 	bl	8001792 <assert_failed>

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003748:	4b32      	ldr	r3, [pc, #200]	; (8003814 <HAL_RCC_OscConfig+0x270>)
 800374a:	689b      	ldr	r3, [r3, #8]
 800374c:	f003 030c 	and.w	r3, r3, #12
 8003750:	2b00      	cmp	r3, #0
 8003752:	d00b      	beq.n	800376c <HAL_RCC_OscConfig+0x1c8>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003754:	4b2f      	ldr	r3, [pc, #188]	; (8003814 <HAL_RCC_OscConfig+0x270>)
 8003756:	689b      	ldr	r3, [r3, #8]
 8003758:	f003 030c 	and.w	r3, r3, #12
 800375c:	2b08      	cmp	r3, #8
 800375e:	d11c      	bne.n	800379a <HAL_RCC_OscConfig+0x1f6>
 8003760:	4b2c      	ldr	r3, [pc, #176]	; (8003814 <HAL_RCC_OscConfig+0x270>)
 8003762:	685b      	ldr	r3, [r3, #4]
 8003764:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003768:	2b00      	cmp	r3, #0
 800376a:	d116      	bne.n	800379a <HAL_RCC_OscConfig+0x1f6>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800376c:	4b29      	ldr	r3, [pc, #164]	; (8003814 <HAL_RCC_OscConfig+0x270>)
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	f003 0302 	and.w	r3, r3, #2
 8003774:	2b00      	cmp	r3, #0
 8003776:	d005      	beq.n	8003784 <HAL_RCC_OscConfig+0x1e0>
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	68db      	ldr	r3, [r3, #12]
 800377c:	2b01      	cmp	r3, #1
 800377e:	d001      	beq.n	8003784 <HAL_RCC_OscConfig+0x1e0>
      {
        return HAL_ERROR;
 8003780:	2301      	movs	r3, #1
 8003782:	e260      	b.n	8003c46 <HAL_RCC_OscConfig+0x6a2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003784:	4b23      	ldr	r3, [pc, #140]	; (8003814 <HAL_RCC_OscConfig+0x270>)
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	691b      	ldr	r3, [r3, #16]
 8003790:	00db      	lsls	r3, r3, #3
 8003792:	4920      	ldr	r1, [pc, #128]	; (8003814 <HAL_RCC_OscConfig+0x270>)
 8003794:	4313      	orrs	r3, r2
 8003796:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003798:	e044      	b.n	8003824 <HAL_RCC_OscConfig+0x280>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	68db      	ldr	r3, [r3, #12]
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d023      	beq.n	80037ea <HAL_RCC_OscConfig+0x246>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80037a2:	4b1c      	ldr	r3, [pc, #112]	; (8003814 <HAL_RCC_OscConfig+0x270>)
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	4a1b      	ldr	r2, [pc, #108]	; (8003814 <HAL_RCC_OscConfig+0x270>)
 80037a8:	f043 0301 	orr.w	r3, r3, #1
 80037ac:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037ae:	f7fe fa5f 	bl	8001c70 <HAL_GetTick>
 80037b2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80037b4:	e008      	b.n	80037c8 <HAL_RCC_OscConfig+0x224>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80037b6:	f7fe fa5b 	bl	8001c70 <HAL_GetTick>
 80037ba:	4602      	mov	r2, r0
 80037bc:	693b      	ldr	r3, [r7, #16]
 80037be:	1ad3      	subs	r3, r2, r3
 80037c0:	2b02      	cmp	r3, #2
 80037c2:	d901      	bls.n	80037c8 <HAL_RCC_OscConfig+0x224>
          {
            return HAL_TIMEOUT;
 80037c4:	2303      	movs	r3, #3
 80037c6:	e23e      	b.n	8003c46 <HAL_RCC_OscConfig+0x6a2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80037c8:	4b12      	ldr	r3, [pc, #72]	; (8003814 <HAL_RCC_OscConfig+0x270>)
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	f003 0302 	and.w	r3, r3, #2
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d0f0      	beq.n	80037b6 <HAL_RCC_OscConfig+0x212>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80037d4:	4b0f      	ldr	r3, [pc, #60]	; (8003814 <HAL_RCC_OscConfig+0x270>)
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	691b      	ldr	r3, [r3, #16]
 80037e0:	00db      	lsls	r3, r3, #3
 80037e2:	490c      	ldr	r1, [pc, #48]	; (8003814 <HAL_RCC_OscConfig+0x270>)
 80037e4:	4313      	orrs	r3, r2
 80037e6:	600b      	str	r3, [r1, #0]
 80037e8:	e01c      	b.n	8003824 <HAL_RCC_OscConfig+0x280>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80037ea:	4b0a      	ldr	r3, [pc, #40]	; (8003814 <HAL_RCC_OscConfig+0x270>)
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	4a09      	ldr	r2, [pc, #36]	; (8003814 <HAL_RCC_OscConfig+0x270>)
 80037f0:	f023 0301 	bic.w	r3, r3, #1
 80037f4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037f6:	f7fe fa3b 	bl	8001c70 <HAL_GetTick>
 80037fa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80037fc:	e00c      	b.n	8003818 <HAL_RCC_OscConfig+0x274>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80037fe:	f7fe fa37 	bl	8001c70 <HAL_GetTick>
 8003802:	4602      	mov	r2, r0
 8003804:	693b      	ldr	r3, [r7, #16]
 8003806:	1ad3      	subs	r3, r2, r3
 8003808:	2b02      	cmp	r3, #2
 800380a:	d905      	bls.n	8003818 <HAL_RCC_OscConfig+0x274>
          {
            return HAL_TIMEOUT;
 800380c:	2303      	movs	r3, #3
 800380e:	e21a      	b.n	8003c46 <HAL_RCC_OscConfig+0x6a2>
 8003810:	0800e58c 	.word	0x0800e58c
 8003814:	40023800 	.word	0x40023800
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003818:	4b7e      	ldr	r3, [pc, #504]	; (8003a14 <HAL_RCC_OscConfig+0x470>)
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	f003 0302 	and.w	r3, r3, #2
 8003820:	2b00      	cmp	r3, #0
 8003822:	d1ec      	bne.n	80037fe <HAL_RCC_OscConfig+0x25a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	f003 0308 	and.w	r3, r3, #8
 800382c:	2b00      	cmp	r3, #0
 800382e:	d043      	beq.n	80038b8 <HAL_RCC_OscConfig+0x314>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	695b      	ldr	r3, [r3, #20]
 8003834:	2b00      	cmp	r3, #0
 8003836:	d008      	beq.n	800384a <HAL_RCC_OscConfig+0x2a6>
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	695b      	ldr	r3, [r3, #20]
 800383c:	2b01      	cmp	r3, #1
 800383e:	d004      	beq.n	800384a <HAL_RCC_OscConfig+0x2a6>
 8003840:	f44f 71ee 	mov.w	r1, #476	; 0x1dc
 8003844:	4874      	ldr	r0, [pc, #464]	; (8003a18 <HAL_RCC_OscConfig+0x474>)
 8003846:	f7fd ffa4 	bl	8001792 <assert_failed>

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	695b      	ldr	r3, [r3, #20]
 800384e:	2b00      	cmp	r3, #0
 8003850:	d019      	beq.n	8003886 <HAL_RCC_OscConfig+0x2e2>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003852:	4b70      	ldr	r3, [pc, #448]	; (8003a14 <HAL_RCC_OscConfig+0x470>)
 8003854:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003856:	4a6f      	ldr	r2, [pc, #444]	; (8003a14 <HAL_RCC_OscConfig+0x470>)
 8003858:	f043 0301 	orr.w	r3, r3, #1
 800385c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800385e:	f7fe fa07 	bl	8001c70 <HAL_GetTick>
 8003862:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003864:	e008      	b.n	8003878 <HAL_RCC_OscConfig+0x2d4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003866:	f7fe fa03 	bl	8001c70 <HAL_GetTick>
 800386a:	4602      	mov	r2, r0
 800386c:	693b      	ldr	r3, [r7, #16]
 800386e:	1ad3      	subs	r3, r2, r3
 8003870:	2b02      	cmp	r3, #2
 8003872:	d901      	bls.n	8003878 <HAL_RCC_OscConfig+0x2d4>
        {
          return HAL_TIMEOUT;
 8003874:	2303      	movs	r3, #3
 8003876:	e1e6      	b.n	8003c46 <HAL_RCC_OscConfig+0x6a2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003878:	4b66      	ldr	r3, [pc, #408]	; (8003a14 <HAL_RCC_OscConfig+0x470>)
 800387a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800387c:	f003 0302 	and.w	r3, r3, #2
 8003880:	2b00      	cmp	r3, #0
 8003882:	d0f0      	beq.n	8003866 <HAL_RCC_OscConfig+0x2c2>
 8003884:	e018      	b.n	80038b8 <HAL_RCC_OscConfig+0x314>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003886:	4b63      	ldr	r3, [pc, #396]	; (8003a14 <HAL_RCC_OscConfig+0x470>)
 8003888:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800388a:	4a62      	ldr	r2, [pc, #392]	; (8003a14 <HAL_RCC_OscConfig+0x470>)
 800388c:	f023 0301 	bic.w	r3, r3, #1
 8003890:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003892:	f7fe f9ed 	bl	8001c70 <HAL_GetTick>
 8003896:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003898:	e008      	b.n	80038ac <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800389a:	f7fe f9e9 	bl	8001c70 <HAL_GetTick>
 800389e:	4602      	mov	r2, r0
 80038a0:	693b      	ldr	r3, [r7, #16]
 80038a2:	1ad3      	subs	r3, r2, r3
 80038a4:	2b02      	cmp	r3, #2
 80038a6:	d901      	bls.n	80038ac <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80038a8:	2303      	movs	r3, #3
 80038aa:	e1cc      	b.n	8003c46 <HAL_RCC_OscConfig+0x6a2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80038ac:	4b59      	ldr	r3, [pc, #356]	; (8003a14 <HAL_RCC_OscConfig+0x470>)
 80038ae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80038b0:	f003 0302 	and.w	r3, r3, #2
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d1f0      	bne.n	800389a <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	f003 0304 	and.w	r3, r3, #4
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	f000 80bc 	beq.w	8003a3e <HAL_RCC_OscConfig+0x49a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	689b      	ldr	r3, [r3, #8]
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d00c      	beq.n	80038e8 <HAL_RCC_OscConfig+0x344>
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	689b      	ldr	r3, [r3, #8]
 80038d2:	2b01      	cmp	r3, #1
 80038d4:	d008      	beq.n	80038e8 <HAL_RCC_OscConfig+0x344>
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	689b      	ldr	r3, [r3, #8]
 80038da:	2b05      	cmp	r3, #5
 80038dc:	d004      	beq.n	80038e8 <HAL_RCC_OscConfig+0x344>
 80038de:	f240 2106 	movw	r1, #518	; 0x206
 80038e2:	484d      	ldr	r0, [pc, #308]	; (8003a18 <HAL_RCC_OscConfig+0x474>)
 80038e4:	f7fd ff55 	bl	8001792 <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80038e8:	4b4a      	ldr	r3, [pc, #296]	; (8003a14 <HAL_RCC_OscConfig+0x470>)
 80038ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d10d      	bne.n	8003910 <HAL_RCC_OscConfig+0x36c>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80038f4:	4b47      	ldr	r3, [pc, #284]	; (8003a14 <HAL_RCC_OscConfig+0x470>)
 80038f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038f8:	4a46      	ldr	r2, [pc, #280]	; (8003a14 <HAL_RCC_OscConfig+0x470>)
 80038fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80038fe:	6413      	str	r3, [r2, #64]	; 0x40
 8003900:	4b44      	ldr	r3, [pc, #272]	; (8003a14 <HAL_RCC_OscConfig+0x470>)
 8003902:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003904:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003908:	60bb      	str	r3, [r7, #8]
 800390a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800390c:	2301      	movs	r3, #1
 800390e:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003910:	4b42      	ldr	r3, [pc, #264]	; (8003a1c <HAL_RCC_OscConfig+0x478>)
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003918:	2b00      	cmp	r3, #0
 800391a:	d118      	bne.n	800394e <HAL_RCC_OscConfig+0x3aa>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800391c:	4b3f      	ldr	r3, [pc, #252]	; (8003a1c <HAL_RCC_OscConfig+0x478>)
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	4a3e      	ldr	r2, [pc, #248]	; (8003a1c <HAL_RCC_OscConfig+0x478>)
 8003922:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003926:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003928:	f7fe f9a2 	bl	8001c70 <HAL_GetTick>
 800392c:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800392e:	e008      	b.n	8003942 <HAL_RCC_OscConfig+0x39e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003930:	f7fe f99e 	bl	8001c70 <HAL_GetTick>
 8003934:	4602      	mov	r2, r0
 8003936:	693b      	ldr	r3, [r7, #16]
 8003938:	1ad3      	subs	r3, r2, r3
 800393a:	2b64      	cmp	r3, #100	; 0x64
 800393c:	d901      	bls.n	8003942 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800393e:	2303      	movs	r3, #3
 8003940:	e181      	b.n	8003c46 <HAL_RCC_OscConfig+0x6a2>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003942:	4b36      	ldr	r3, [pc, #216]	; (8003a1c <HAL_RCC_OscConfig+0x478>)
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800394a:	2b00      	cmp	r3, #0
 800394c:	d0f0      	beq.n	8003930 <HAL_RCC_OscConfig+0x38c>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	689b      	ldr	r3, [r3, #8]
 8003952:	2b01      	cmp	r3, #1
 8003954:	d106      	bne.n	8003964 <HAL_RCC_OscConfig+0x3c0>
 8003956:	4b2f      	ldr	r3, [pc, #188]	; (8003a14 <HAL_RCC_OscConfig+0x470>)
 8003958:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800395a:	4a2e      	ldr	r2, [pc, #184]	; (8003a14 <HAL_RCC_OscConfig+0x470>)
 800395c:	f043 0301 	orr.w	r3, r3, #1
 8003960:	6713      	str	r3, [r2, #112]	; 0x70
 8003962:	e02d      	b.n	80039c0 <HAL_RCC_OscConfig+0x41c>
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	689b      	ldr	r3, [r3, #8]
 8003968:	2b00      	cmp	r3, #0
 800396a:	d10c      	bne.n	8003986 <HAL_RCC_OscConfig+0x3e2>
 800396c:	4b29      	ldr	r3, [pc, #164]	; (8003a14 <HAL_RCC_OscConfig+0x470>)
 800396e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003970:	4a28      	ldr	r2, [pc, #160]	; (8003a14 <HAL_RCC_OscConfig+0x470>)
 8003972:	f023 0301 	bic.w	r3, r3, #1
 8003976:	6713      	str	r3, [r2, #112]	; 0x70
 8003978:	4b26      	ldr	r3, [pc, #152]	; (8003a14 <HAL_RCC_OscConfig+0x470>)
 800397a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800397c:	4a25      	ldr	r2, [pc, #148]	; (8003a14 <HAL_RCC_OscConfig+0x470>)
 800397e:	f023 0304 	bic.w	r3, r3, #4
 8003982:	6713      	str	r3, [r2, #112]	; 0x70
 8003984:	e01c      	b.n	80039c0 <HAL_RCC_OscConfig+0x41c>
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	689b      	ldr	r3, [r3, #8]
 800398a:	2b05      	cmp	r3, #5
 800398c:	d10c      	bne.n	80039a8 <HAL_RCC_OscConfig+0x404>
 800398e:	4b21      	ldr	r3, [pc, #132]	; (8003a14 <HAL_RCC_OscConfig+0x470>)
 8003990:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003992:	4a20      	ldr	r2, [pc, #128]	; (8003a14 <HAL_RCC_OscConfig+0x470>)
 8003994:	f043 0304 	orr.w	r3, r3, #4
 8003998:	6713      	str	r3, [r2, #112]	; 0x70
 800399a:	4b1e      	ldr	r3, [pc, #120]	; (8003a14 <HAL_RCC_OscConfig+0x470>)
 800399c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800399e:	4a1d      	ldr	r2, [pc, #116]	; (8003a14 <HAL_RCC_OscConfig+0x470>)
 80039a0:	f043 0301 	orr.w	r3, r3, #1
 80039a4:	6713      	str	r3, [r2, #112]	; 0x70
 80039a6:	e00b      	b.n	80039c0 <HAL_RCC_OscConfig+0x41c>
 80039a8:	4b1a      	ldr	r3, [pc, #104]	; (8003a14 <HAL_RCC_OscConfig+0x470>)
 80039aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039ac:	4a19      	ldr	r2, [pc, #100]	; (8003a14 <HAL_RCC_OscConfig+0x470>)
 80039ae:	f023 0301 	bic.w	r3, r3, #1
 80039b2:	6713      	str	r3, [r2, #112]	; 0x70
 80039b4:	4b17      	ldr	r3, [pc, #92]	; (8003a14 <HAL_RCC_OscConfig+0x470>)
 80039b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039b8:	4a16      	ldr	r2, [pc, #88]	; (8003a14 <HAL_RCC_OscConfig+0x470>)
 80039ba:	f023 0304 	bic.w	r3, r3, #4
 80039be:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	689b      	ldr	r3, [r3, #8]
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d015      	beq.n	80039f4 <HAL_RCC_OscConfig+0x450>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039c8:	f7fe f952 	bl	8001c70 <HAL_GetTick>
 80039cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80039ce:	e00a      	b.n	80039e6 <HAL_RCC_OscConfig+0x442>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80039d0:	f7fe f94e 	bl	8001c70 <HAL_GetTick>
 80039d4:	4602      	mov	r2, r0
 80039d6:	693b      	ldr	r3, [r7, #16]
 80039d8:	1ad3      	subs	r3, r2, r3
 80039da:	f241 3288 	movw	r2, #5000	; 0x1388
 80039de:	4293      	cmp	r3, r2
 80039e0:	d901      	bls.n	80039e6 <HAL_RCC_OscConfig+0x442>
        {
          return HAL_TIMEOUT;
 80039e2:	2303      	movs	r3, #3
 80039e4:	e12f      	b.n	8003c46 <HAL_RCC_OscConfig+0x6a2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80039e6:	4b0b      	ldr	r3, [pc, #44]	; (8003a14 <HAL_RCC_OscConfig+0x470>)
 80039e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039ea:	f003 0302 	and.w	r3, r3, #2
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d0ee      	beq.n	80039d0 <HAL_RCC_OscConfig+0x42c>
 80039f2:	e01b      	b.n	8003a2c <HAL_RCC_OscConfig+0x488>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039f4:	f7fe f93c 	bl	8001c70 <HAL_GetTick>
 80039f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80039fa:	e011      	b.n	8003a20 <HAL_RCC_OscConfig+0x47c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80039fc:	f7fe f938 	bl	8001c70 <HAL_GetTick>
 8003a00:	4602      	mov	r2, r0
 8003a02:	693b      	ldr	r3, [r7, #16]
 8003a04:	1ad3      	subs	r3, r2, r3
 8003a06:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a0a:	4293      	cmp	r3, r2
 8003a0c:	d908      	bls.n	8003a20 <HAL_RCC_OscConfig+0x47c>
        {
          return HAL_TIMEOUT;
 8003a0e:	2303      	movs	r3, #3
 8003a10:	e119      	b.n	8003c46 <HAL_RCC_OscConfig+0x6a2>
 8003a12:	bf00      	nop
 8003a14:	40023800 	.word	0x40023800
 8003a18:	0800e58c 	.word	0x0800e58c
 8003a1c:	40007000 	.word	0x40007000
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003a20:	4b8b      	ldr	r3, [pc, #556]	; (8003c50 <HAL_RCC_OscConfig+0x6ac>)
 8003a22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a24:	f003 0302 	and.w	r3, r3, #2
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d1e7      	bne.n	80039fc <HAL_RCC_OscConfig+0x458>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003a2c:	7dfb      	ldrb	r3, [r7, #23]
 8003a2e:	2b01      	cmp	r3, #1
 8003a30:	d105      	bne.n	8003a3e <HAL_RCC_OscConfig+0x49a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003a32:	4b87      	ldr	r3, [pc, #540]	; (8003c50 <HAL_RCC_OscConfig+0x6ac>)
 8003a34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a36:	4a86      	ldr	r2, [pc, #536]	; (8003c50 <HAL_RCC_OscConfig+0x6ac>)
 8003a38:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003a3c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	699b      	ldr	r3, [r3, #24]
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d00c      	beq.n	8003a60 <HAL_RCC_OscConfig+0x4bc>
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	699b      	ldr	r3, [r3, #24]
 8003a4a:	2b01      	cmp	r3, #1
 8003a4c:	d008      	beq.n	8003a60 <HAL_RCC_OscConfig+0x4bc>
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	699b      	ldr	r3, [r3, #24]
 8003a52:	2b02      	cmp	r3, #2
 8003a54:	d004      	beq.n	8003a60 <HAL_RCC_OscConfig+0x4bc>
 8003a56:	f240 214a 	movw	r1, #586	; 0x24a
 8003a5a:	487e      	ldr	r0, [pc, #504]	; (8003c54 <HAL_RCC_OscConfig+0x6b0>)
 8003a5c:	f7fd fe99 	bl	8001792 <assert_failed>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	699b      	ldr	r3, [r3, #24]
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	f000 80ed 	beq.w	8003c44 <HAL_RCC_OscConfig+0x6a0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003a6a:	4b79      	ldr	r3, [pc, #484]	; (8003c50 <HAL_RCC_OscConfig+0x6ac>)
 8003a6c:	689b      	ldr	r3, [r3, #8]
 8003a6e:	f003 030c 	and.w	r3, r3, #12
 8003a72:	2b08      	cmp	r3, #8
 8003a74:	f000 80b4 	beq.w	8003be0 <HAL_RCC_OscConfig+0x63c>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	699b      	ldr	r3, [r3, #24]
 8003a7c:	2b02      	cmp	r3, #2
 8003a7e:	f040 8095 	bne.w	8003bac <HAL_RCC_OscConfig+0x608>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	69db      	ldr	r3, [r3, #28]
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d009      	beq.n	8003a9e <HAL_RCC_OscConfig+0x4fa>
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	69db      	ldr	r3, [r3, #28]
 8003a8e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003a92:	d004      	beq.n	8003a9e <HAL_RCC_OscConfig+0x4fa>
 8003a94:	f240 2153 	movw	r1, #595	; 0x253
 8003a98:	486e      	ldr	r0, [pc, #440]	; (8003c54 <HAL_RCC_OscConfig+0x6b0>)
 8003a9a:	f7fd fe7a 	bl	8001792 <assert_failed>
        assert_param(IS_RCC_PLLM_VALUE(RCC_OscInitStruct->PLL.PLLM));
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	6a1b      	ldr	r3, [r3, #32]
 8003aa2:	2b01      	cmp	r3, #1
 8003aa4:	d903      	bls.n	8003aae <HAL_RCC_OscConfig+0x50a>
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	6a1b      	ldr	r3, [r3, #32]
 8003aaa:	2b3f      	cmp	r3, #63	; 0x3f
 8003aac:	d904      	bls.n	8003ab8 <HAL_RCC_OscConfig+0x514>
 8003aae:	f44f 7115 	mov.w	r1, #596	; 0x254
 8003ab2:	4868      	ldr	r0, [pc, #416]	; (8003c54 <HAL_RCC_OscConfig+0x6b0>)
 8003ab4:	f7fd fe6d 	bl	8001792 <assert_failed>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003abc:	2b31      	cmp	r3, #49	; 0x31
 8003abe:	d904      	bls.n	8003aca <HAL_RCC_OscConfig+0x526>
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ac4:	f5b3 7fd8 	cmp.w	r3, #432	; 0x1b0
 8003ac8:	d904      	bls.n	8003ad4 <HAL_RCC_OscConfig+0x530>
 8003aca:	f240 2155 	movw	r1, #597	; 0x255
 8003ace:	4861      	ldr	r0, [pc, #388]	; (8003c54 <HAL_RCC_OscConfig+0x6b0>)
 8003ad0:	f7fd fe5f 	bl	8001792 <assert_failed>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ad8:	2b02      	cmp	r3, #2
 8003ada:	d010      	beq.n	8003afe <HAL_RCC_OscConfig+0x55a>
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ae0:	2b04      	cmp	r3, #4
 8003ae2:	d00c      	beq.n	8003afe <HAL_RCC_OscConfig+0x55a>
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ae8:	2b06      	cmp	r3, #6
 8003aea:	d008      	beq.n	8003afe <HAL_RCC_OscConfig+0x55a>
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003af0:	2b08      	cmp	r3, #8
 8003af2:	d004      	beq.n	8003afe <HAL_RCC_OscConfig+0x55a>
 8003af4:	f240 2156 	movw	r1, #598	; 0x256
 8003af8:	4856      	ldr	r0, [pc, #344]	; (8003c54 <HAL_RCC_OscConfig+0x6b0>)
 8003afa:	f7fd fe4a 	bl	8001792 <assert_failed>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b02:	2b01      	cmp	r3, #1
 8003b04:	d903      	bls.n	8003b0e <HAL_RCC_OscConfig+0x56a>
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b0a:	2b0f      	cmp	r3, #15
 8003b0c:	d904      	bls.n	8003b18 <HAL_RCC_OscConfig+0x574>
 8003b0e:	f240 2157 	movw	r1, #599	; 0x257
 8003b12:	4850      	ldr	r0, [pc, #320]	; (8003c54 <HAL_RCC_OscConfig+0x6b0>)
 8003b14:	f7fd fe3d 	bl	8001792 <assert_failed>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b18:	4b4d      	ldr	r3, [pc, #308]	; (8003c50 <HAL_RCC_OscConfig+0x6ac>)
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	4a4c      	ldr	r2, [pc, #304]	; (8003c50 <HAL_RCC_OscConfig+0x6ac>)
 8003b1e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003b22:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b24:	f7fe f8a4 	bl	8001c70 <HAL_GetTick>
 8003b28:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b2a:	e008      	b.n	8003b3e <HAL_RCC_OscConfig+0x59a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b2c:	f7fe f8a0 	bl	8001c70 <HAL_GetTick>
 8003b30:	4602      	mov	r2, r0
 8003b32:	693b      	ldr	r3, [r7, #16]
 8003b34:	1ad3      	subs	r3, r2, r3
 8003b36:	2b02      	cmp	r3, #2
 8003b38:	d901      	bls.n	8003b3e <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 8003b3a:	2303      	movs	r3, #3
 8003b3c:	e083      	b.n	8003c46 <HAL_RCC_OscConfig+0x6a2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b3e:	4b44      	ldr	r3, [pc, #272]	; (8003c50 <HAL_RCC_OscConfig+0x6ac>)
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d1f0      	bne.n	8003b2c <HAL_RCC_OscConfig+0x588>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	69da      	ldr	r2, [r3, #28]
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	6a1b      	ldr	r3, [r3, #32]
 8003b52:	431a      	orrs	r2, r3
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b58:	019b      	lsls	r3, r3, #6
 8003b5a:	431a      	orrs	r2, r3
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b60:	085b      	lsrs	r3, r3, #1
 8003b62:	3b01      	subs	r3, #1
 8003b64:	041b      	lsls	r3, r3, #16
 8003b66:	431a      	orrs	r2, r3
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b6c:	061b      	lsls	r3, r3, #24
 8003b6e:	4313      	orrs	r3, r2
 8003b70:	4a37      	ldr	r2, [pc, #220]	; (8003c50 <HAL_RCC_OscConfig+0x6ac>)
 8003b72:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003b76:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003b78:	4b35      	ldr	r3, [pc, #212]	; (8003c50 <HAL_RCC_OscConfig+0x6ac>)
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	4a34      	ldr	r2, [pc, #208]	; (8003c50 <HAL_RCC_OscConfig+0x6ac>)
 8003b7e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003b82:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b84:	f7fe f874 	bl	8001c70 <HAL_GetTick>
 8003b88:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b8a:	e008      	b.n	8003b9e <HAL_RCC_OscConfig+0x5fa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b8c:	f7fe f870 	bl	8001c70 <HAL_GetTick>
 8003b90:	4602      	mov	r2, r0
 8003b92:	693b      	ldr	r3, [r7, #16]
 8003b94:	1ad3      	subs	r3, r2, r3
 8003b96:	2b02      	cmp	r3, #2
 8003b98:	d901      	bls.n	8003b9e <HAL_RCC_OscConfig+0x5fa>
          {
            return HAL_TIMEOUT;
 8003b9a:	2303      	movs	r3, #3
 8003b9c:	e053      	b.n	8003c46 <HAL_RCC_OscConfig+0x6a2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b9e:	4b2c      	ldr	r3, [pc, #176]	; (8003c50 <HAL_RCC_OscConfig+0x6ac>)
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d0f0      	beq.n	8003b8c <HAL_RCC_OscConfig+0x5e8>
 8003baa:	e04b      	b.n	8003c44 <HAL_RCC_OscConfig+0x6a0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003bac:	4b28      	ldr	r3, [pc, #160]	; (8003c50 <HAL_RCC_OscConfig+0x6ac>)
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	4a27      	ldr	r2, [pc, #156]	; (8003c50 <HAL_RCC_OscConfig+0x6ac>)
 8003bb2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003bb6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bb8:	f7fe f85a 	bl	8001c70 <HAL_GetTick>
 8003bbc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003bbe:	e008      	b.n	8003bd2 <HAL_RCC_OscConfig+0x62e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003bc0:	f7fe f856 	bl	8001c70 <HAL_GetTick>
 8003bc4:	4602      	mov	r2, r0
 8003bc6:	693b      	ldr	r3, [r7, #16]
 8003bc8:	1ad3      	subs	r3, r2, r3
 8003bca:	2b02      	cmp	r3, #2
 8003bcc:	d901      	bls.n	8003bd2 <HAL_RCC_OscConfig+0x62e>
          {
            return HAL_TIMEOUT;
 8003bce:	2303      	movs	r3, #3
 8003bd0:	e039      	b.n	8003c46 <HAL_RCC_OscConfig+0x6a2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003bd2:	4b1f      	ldr	r3, [pc, #124]	; (8003c50 <HAL_RCC_OscConfig+0x6ac>)
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d1f0      	bne.n	8003bc0 <HAL_RCC_OscConfig+0x61c>
 8003bde:	e031      	b.n	8003c44 <HAL_RCC_OscConfig+0x6a0>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8003be0:	4b1b      	ldr	r3, [pc, #108]	; (8003c50 <HAL_RCC_OscConfig+0x6ac>)
 8003be2:	685b      	ldr	r3, [r3, #4]
 8003be4:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	699b      	ldr	r3, [r3, #24]
 8003bea:	2b01      	cmp	r3, #1
 8003bec:	d028      	beq.n	8003c40 <HAL_RCC_OscConfig+0x69c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003bf8:	429a      	cmp	r2, r3
 8003bfa:	d121      	bne.n	8003c40 <HAL_RCC_OscConfig+0x69c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c06:	429a      	cmp	r2, r3
 8003c08:	d11a      	bne.n	8003c40 <HAL_RCC_OscConfig+0x69c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003c0a:	68fa      	ldr	r2, [r7, #12]
 8003c0c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003c10:	4013      	ands	r3, r2
 8003c12:	687a      	ldr	r2, [r7, #4]
 8003c14:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003c16:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003c18:	4293      	cmp	r3, r2
 8003c1a:	d111      	bne.n	8003c40 <HAL_RCC_OscConfig+0x69c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c26:	085b      	lsrs	r3, r3, #1
 8003c28:	3b01      	subs	r3, #1
 8003c2a:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003c2c:	429a      	cmp	r2, r3
 8003c2e:	d107      	bne.n	8003c40 <HAL_RCC_OscConfig+0x69c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c3a:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003c3c:	429a      	cmp	r2, r3
 8003c3e:	d001      	beq.n	8003c44 <HAL_RCC_OscConfig+0x6a0>
#endif
      {
        return HAL_ERROR;
 8003c40:	2301      	movs	r3, #1
 8003c42:	e000      	b.n	8003c46 <HAL_RCC_OscConfig+0x6a2>
      }
    }
  }
  return HAL_OK;
 8003c44:	2300      	movs	r3, #0
}
 8003c46:	4618      	mov	r0, r3
 8003c48:	3718      	adds	r7, #24
 8003c4a:	46bd      	mov	sp, r7
 8003c4c:	bd80      	pop	{r7, pc}
 8003c4e:	bf00      	nop
 8003c50:	40023800 	.word	0x40023800
 8003c54:	0800e58c 	.word	0x0800e58c

08003c58 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003c58:	b580      	push	{r7, lr}
 8003c5a:	b084      	sub	sp, #16
 8003c5c:	af00      	add	r7, sp, #0
 8003c5e:	6078      	str	r0, [r7, #4]
 8003c60:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8003c62:	2300      	movs	r3, #0
 8003c64:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d101      	bne.n	8003c70 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003c6c:	2301      	movs	r3, #1
 8003c6e:	e18c      	b.n	8003f8a <HAL_RCC_ClockConfig+0x332>
  }

  /* Check the parameters */
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d003      	beq.n	8003c80 <HAL_RCC_ClockConfig+0x28>
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	2b0f      	cmp	r3, #15
 8003c7e:	d904      	bls.n	8003c8a <HAL_RCC_ClockConfig+0x32>
 8003c80:	f240 21dd 	movw	r1, #733	; 0x2dd
 8003c84:	4887      	ldr	r0, [pc, #540]	; (8003ea4 <HAL_RCC_ClockConfig+0x24c>)
 8003c86:	f7fd fd84 	bl	8001792 <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 8003c8a:	683b      	ldr	r3, [r7, #0]
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d031      	beq.n	8003cf4 <HAL_RCC_ClockConfig+0x9c>
 8003c90:	683b      	ldr	r3, [r7, #0]
 8003c92:	2b01      	cmp	r3, #1
 8003c94:	d02e      	beq.n	8003cf4 <HAL_RCC_ClockConfig+0x9c>
 8003c96:	683b      	ldr	r3, [r7, #0]
 8003c98:	2b02      	cmp	r3, #2
 8003c9a:	d02b      	beq.n	8003cf4 <HAL_RCC_ClockConfig+0x9c>
 8003c9c:	683b      	ldr	r3, [r7, #0]
 8003c9e:	2b03      	cmp	r3, #3
 8003ca0:	d028      	beq.n	8003cf4 <HAL_RCC_ClockConfig+0x9c>
 8003ca2:	683b      	ldr	r3, [r7, #0]
 8003ca4:	2b04      	cmp	r3, #4
 8003ca6:	d025      	beq.n	8003cf4 <HAL_RCC_ClockConfig+0x9c>
 8003ca8:	683b      	ldr	r3, [r7, #0]
 8003caa:	2b05      	cmp	r3, #5
 8003cac:	d022      	beq.n	8003cf4 <HAL_RCC_ClockConfig+0x9c>
 8003cae:	683b      	ldr	r3, [r7, #0]
 8003cb0:	2b06      	cmp	r3, #6
 8003cb2:	d01f      	beq.n	8003cf4 <HAL_RCC_ClockConfig+0x9c>
 8003cb4:	683b      	ldr	r3, [r7, #0]
 8003cb6:	2b07      	cmp	r3, #7
 8003cb8:	d01c      	beq.n	8003cf4 <HAL_RCC_ClockConfig+0x9c>
 8003cba:	683b      	ldr	r3, [r7, #0]
 8003cbc:	2b08      	cmp	r3, #8
 8003cbe:	d019      	beq.n	8003cf4 <HAL_RCC_ClockConfig+0x9c>
 8003cc0:	683b      	ldr	r3, [r7, #0]
 8003cc2:	2b09      	cmp	r3, #9
 8003cc4:	d016      	beq.n	8003cf4 <HAL_RCC_ClockConfig+0x9c>
 8003cc6:	683b      	ldr	r3, [r7, #0]
 8003cc8:	2b0a      	cmp	r3, #10
 8003cca:	d013      	beq.n	8003cf4 <HAL_RCC_ClockConfig+0x9c>
 8003ccc:	683b      	ldr	r3, [r7, #0]
 8003cce:	2b0b      	cmp	r3, #11
 8003cd0:	d010      	beq.n	8003cf4 <HAL_RCC_ClockConfig+0x9c>
 8003cd2:	683b      	ldr	r3, [r7, #0]
 8003cd4:	2b0c      	cmp	r3, #12
 8003cd6:	d00d      	beq.n	8003cf4 <HAL_RCC_ClockConfig+0x9c>
 8003cd8:	683b      	ldr	r3, [r7, #0]
 8003cda:	2b0d      	cmp	r3, #13
 8003cdc:	d00a      	beq.n	8003cf4 <HAL_RCC_ClockConfig+0x9c>
 8003cde:	683b      	ldr	r3, [r7, #0]
 8003ce0:	2b0e      	cmp	r3, #14
 8003ce2:	d007      	beq.n	8003cf4 <HAL_RCC_ClockConfig+0x9c>
 8003ce4:	683b      	ldr	r3, [r7, #0]
 8003ce6:	2b0f      	cmp	r3, #15
 8003ce8:	d004      	beq.n	8003cf4 <HAL_RCC_ClockConfig+0x9c>
 8003cea:	f240 21de 	movw	r1, #734	; 0x2de
 8003cee:	486d      	ldr	r0, [pc, #436]	; (8003ea4 <HAL_RCC_ClockConfig+0x24c>)
 8003cf0:	f7fd fd4f 	bl	8001792 <assert_failed>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003cf4:	4b6c      	ldr	r3, [pc, #432]	; (8003ea8 <HAL_RCC_ClockConfig+0x250>)
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	f003 030f 	and.w	r3, r3, #15
 8003cfc:	683a      	ldr	r2, [r7, #0]
 8003cfe:	429a      	cmp	r2, r3
 8003d00:	d910      	bls.n	8003d24 <HAL_RCC_ClockConfig+0xcc>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d02:	4b69      	ldr	r3, [pc, #420]	; (8003ea8 <HAL_RCC_ClockConfig+0x250>)
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	f023 020f 	bic.w	r2, r3, #15
 8003d0a:	4967      	ldr	r1, [pc, #412]	; (8003ea8 <HAL_RCC_ClockConfig+0x250>)
 8003d0c:	683b      	ldr	r3, [r7, #0]
 8003d0e:	4313      	orrs	r3, r2
 8003d10:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d12:	4b65      	ldr	r3, [pc, #404]	; (8003ea8 <HAL_RCC_ClockConfig+0x250>)
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	f003 030f 	and.w	r3, r3, #15
 8003d1a:	683a      	ldr	r2, [r7, #0]
 8003d1c:	429a      	cmp	r2, r3
 8003d1e:	d001      	beq.n	8003d24 <HAL_RCC_ClockConfig+0xcc>
    {
      return HAL_ERROR;
 8003d20:	2301      	movs	r3, #1
 8003d22:	e132      	b.n	8003f8a <HAL_RCC_ClockConfig+0x332>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	f003 0302 	and.w	r3, r3, #2
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d049      	beq.n	8003dc4 <HAL_RCC_ClockConfig+0x16c>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	f003 0304 	and.w	r3, r3, #4
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d005      	beq.n	8003d48 <HAL_RCC_ClockConfig+0xf0>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003d3c:	4b5b      	ldr	r3, [pc, #364]	; (8003eac <HAL_RCC_ClockConfig+0x254>)
 8003d3e:	689b      	ldr	r3, [r3, #8]
 8003d40:	4a5a      	ldr	r2, [pc, #360]	; (8003eac <HAL_RCC_ClockConfig+0x254>)
 8003d42:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003d46:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	f003 0308 	and.w	r3, r3, #8
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d005      	beq.n	8003d60 <HAL_RCC_ClockConfig+0x108>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003d54:	4b55      	ldr	r3, [pc, #340]	; (8003eac <HAL_RCC_ClockConfig+0x254>)
 8003d56:	689b      	ldr	r3, [r3, #8]
 8003d58:	4a54      	ldr	r2, [pc, #336]	; (8003eac <HAL_RCC_ClockConfig+0x254>)
 8003d5a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003d5e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	689b      	ldr	r3, [r3, #8]
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d024      	beq.n	8003db2 <HAL_RCC_ClockConfig+0x15a>
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	689b      	ldr	r3, [r3, #8]
 8003d6c:	2b80      	cmp	r3, #128	; 0x80
 8003d6e:	d020      	beq.n	8003db2 <HAL_RCC_ClockConfig+0x15a>
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	689b      	ldr	r3, [r3, #8]
 8003d74:	2b90      	cmp	r3, #144	; 0x90
 8003d76:	d01c      	beq.n	8003db2 <HAL_RCC_ClockConfig+0x15a>
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	689b      	ldr	r3, [r3, #8]
 8003d7c:	2ba0      	cmp	r3, #160	; 0xa0
 8003d7e:	d018      	beq.n	8003db2 <HAL_RCC_ClockConfig+0x15a>
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	689b      	ldr	r3, [r3, #8]
 8003d84:	2bb0      	cmp	r3, #176	; 0xb0
 8003d86:	d014      	beq.n	8003db2 <HAL_RCC_ClockConfig+0x15a>
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	689b      	ldr	r3, [r3, #8]
 8003d8c:	2bc0      	cmp	r3, #192	; 0xc0
 8003d8e:	d010      	beq.n	8003db2 <HAL_RCC_ClockConfig+0x15a>
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	689b      	ldr	r3, [r3, #8]
 8003d94:	2bd0      	cmp	r3, #208	; 0xd0
 8003d96:	d00c      	beq.n	8003db2 <HAL_RCC_ClockConfig+0x15a>
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	689b      	ldr	r3, [r3, #8]
 8003d9c:	2be0      	cmp	r3, #224	; 0xe0
 8003d9e:	d008      	beq.n	8003db2 <HAL_RCC_ClockConfig+0x15a>
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	689b      	ldr	r3, [r3, #8]
 8003da4:	2bf0      	cmp	r3, #240	; 0xf0
 8003da6:	d004      	beq.n	8003db2 <HAL_RCC_ClockConfig+0x15a>
 8003da8:	f240 3102 	movw	r1, #770	; 0x302
 8003dac:	483d      	ldr	r0, [pc, #244]	; (8003ea4 <HAL_RCC_ClockConfig+0x24c>)
 8003dae:	f7fd fcf0 	bl	8001792 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003db2:	4b3e      	ldr	r3, [pc, #248]	; (8003eac <HAL_RCC_ClockConfig+0x254>)
 8003db4:	689b      	ldr	r3, [r3, #8]
 8003db6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	689b      	ldr	r3, [r3, #8]
 8003dbe:	493b      	ldr	r1, [pc, #236]	; (8003eac <HAL_RCC_ClockConfig+0x254>)
 8003dc0:	4313      	orrs	r3, r2
 8003dc2:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	f003 0301 	and.w	r3, r3, #1
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d051      	beq.n	8003e74 <HAL_RCC_ClockConfig+0x21c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	685b      	ldr	r3, [r3, #4]
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d00c      	beq.n	8003df2 <HAL_RCC_ClockConfig+0x19a>
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	685b      	ldr	r3, [r3, #4]
 8003ddc:	2b01      	cmp	r3, #1
 8003dde:	d008      	beq.n	8003df2 <HAL_RCC_ClockConfig+0x19a>
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	685b      	ldr	r3, [r3, #4]
 8003de4:	2b02      	cmp	r3, #2
 8003de6:	d004      	beq.n	8003df2 <HAL_RCC_ClockConfig+0x19a>
 8003de8:	f240 3109 	movw	r1, #777	; 0x309
 8003dec:	482d      	ldr	r0, [pc, #180]	; (8003ea4 <HAL_RCC_ClockConfig+0x24c>)
 8003dee:	f7fd fcd0 	bl	8001792 <assert_failed>

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	685b      	ldr	r3, [r3, #4]
 8003df6:	2b01      	cmp	r3, #1
 8003df8:	d107      	bne.n	8003e0a <HAL_RCC_ClockConfig+0x1b2>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003dfa:	4b2c      	ldr	r3, [pc, #176]	; (8003eac <HAL_RCC_ClockConfig+0x254>)
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d115      	bne.n	8003e32 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8003e06:	2301      	movs	r3, #1
 8003e08:	e0bf      	b.n	8003f8a <HAL_RCC_ClockConfig+0x332>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	685b      	ldr	r3, [r3, #4]
 8003e0e:	2b02      	cmp	r3, #2
 8003e10:	d107      	bne.n	8003e22 <HAL_RCC_ClockConfig+0x1ca>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e12:	4b26      	ldr	r3, [pc, #152]	; (8003eac <HAL_RCC_ClockConfig+0x254>)
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d109      	bne.n	8003e32 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8003e1e:	2301      	movs	r3, #1
 8003e20:	e0b3      	b.n	8003f8a <HAL_RCC_ClockConfig+0x332>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e22:	4b22      	ldr	r3, [pc, #136]	; (8003eac <HAL_RCC_ClockConfig+0x254>)
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	f003 0302 	and.w	r3, r3, #2
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d101      	bne.n	8003e32 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8003e2e:	2301      	movs	r3, #1
 8003e30:	e0ab      	b.n	8003f8a <HAL_RCC_ClockConfig+0x332>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003e32:	4b1e      	ldr	r3, [pc, #120]	; (8003eac <HAL_RCC_ClockConfig+0x254>)
 8003e34:	689b      	ldr	r3, [r3, #8]
 8003e36:	f023 0203 	bic.w	r2, r3, #3
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	685b      	ldr	r3, [r3, #4]
 8003e3e:	491b      	ldr	r1, [pc, #108]	; (8003eac <HAL_RCC_ClockConfig+0x254>)
 8003e40:	4313      	orrs	r3, r2
 8003e42:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003e44:	f7fd ff14 	bl	8001c70 <HAL_GetTick>
 8003e48:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e4a:	e00a      	b.n	8003e62 <HAL_RCC_ClockConfig+0x20a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003e4c:	f7fd ff10 	bl	8001c70 <HAL_GetTick>
 8003e50:	4602      	mov	r2, r0
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	1ad3      	subs	r3, r2, r3
 8003e56:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e5a:	4293      	cmp	r3, r2
 8003e5c:	d901      	bls.n	8003e62 <HAL_RCC_ClockConfig+0x20a>
      {
        return HAL_TIMEOUT;
 8003e5e:	2303      	movs	r3, #3
 8003e60:	e093      	b.n	8003f8a <HAL_RCC_ClockConfig+0x332>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e62:	4b12      	ldr	r3, [pc, #72]	; (8003eac <HAL_RCC_ClockConfig+0x254>)
 8003e64:	689b      	ldr	r3, [r3, #8]
 8003e66:	f003 020c 	and.w	r2, r3, #12
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	685b      	ldr	r3, [r3, #4]
 8003e6e:	009b      	lsls	r3, r3, #2
 8003e70:	429a      	cmp	r2, r3
 8003e72:	d1eb      	bne.n	8003e4c <HAL_RCC_ClockConfig+0x1f4>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003e74:	4b0c      	ldr	r3, [pc, #48]	; (8003ea8 <HAL_RCC_ClockConfig+0x250>)
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	f003 030f 	and.w	r3, r3, #15
 8003e7c:	683a      	ldr	r2, [r7, #0]
 8003e7e:	429a      	cmp	r2, r3
 8003e80:	d216      	bcs.n	8003eb0 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e82:	4b09      	ldr	r3, [pc, #36]	; (8003ea8 <HAL_RCC_ClockConfig+0x250>)
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	f023 020f 	bic.w	r2, r3, #15
 8003e8a:	4907      	ldr	r1, [pc, #28]	; (8003ea8 <HAL_RCC_ClockConfig+0x250>)
 8003e8c:	683b      	ldr	r3, [r7, #0]
 8003e8e:	4313      	orrs	r3, r2
 8003e90:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e92:	4b05      	ldr	r3, [pc, #20]	; (8003ea8 <HAL_RCC_ClockConfig+0x250>)
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	f003 030f 	and.w	r3, r3, #15
 8003e9a:	683a      	ldr	r2, [r7, #0]
 8003e9c:	429a      	cmp	r2, r3
 8003e9e:	d007      	beq.n	8003eb0 <HAL_RCC_ClockConfig+0x258>
    {
      return HAL_ERROR;
 8003ea0:	2301      	movs	r3, #1
 8003ea2:	e072      	b.n	8003f8a <HAL_RCC_ClockConfig+0x332>
 8003ea4:	0800e58c 	.word	0x0800e58c
 8003ea8:	40023c00 	.word	0x40023c00
 8003eac:	40023800 	.word	0x40023800
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	f003 0304 	and.w	r3, r3, #4
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d025      	beq.n	8003f08 <HAL_RCC_ClockConfig+0x2b0>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	68db      	ldr	r3, [r3, #12]
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d018      	beq.n	8003ef6 <HAL_RCC_ClockConfig+0x29e>
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	68db      	ldr	r3, [r3, #12]
 8003ec8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ecc:	d013      	beq.n	8003ef6 <HAL_RCC_ClockConfig+0x29e>
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	68db      	ldr	r3, [r3, #12]
 8003ed2:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8003ed6:	d00e      	beq.n	8003ef6 <HAL_RCC_ClockConfig+0x29e>
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	68db      	ldr	r3, [r3, #12]
 8003edc:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8003ee0:	d009      	beq.n	8003ef6 <HAL_RCC_ClockConfig+0x29e>
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	68db      	ldr	r3, [r3, #12]
 8003ee6:	f5b3 5fe0 	cmp.w	r3, #7168	; 0x1c00
 8003eea:	d004      	beq.n	8003ef6 <HAL_RCC_ClockConfig+0x29e>
 8003eec:	f240 3146 	movw	r1, #838	; 0x346
 8003ef0:	4828      	ldr	r0, [pc, #160]	; (8003f94 <HAL_RCC_ClockConfig+0x33c>)
 8003ef2:	f7fd fc4e 	bl	8001792 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003ef6:	4b28      	ldr	r3, [pc, #160]	; (8003f98 <HAL_RCC_ClockConfig+0x340>)
 8003ef8:	689b      	ldr	r3, [r3, #8]
 8003efa:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	68db      	ldr	r3, [r3, #12]
 8003f02:	4925      	ldr	r1, [pc, #148]	; (8003f98 <HAL_RCC_ClockConfig+0x340>)
 8003f04:	4313      	orrs	r3, r2
 8003f06:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	f003 0308 	and.w	r3, r3, #8
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d026      	beq.n	8003f62 <HAL_RCC_ClockConfig+0x30a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	691b      	ldr	r3, [r3, #16]
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d018      	beq.n	8003f4e <HAL_RCC_ClockConfig+0x2f6>
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	691b      	ldr	r3, [r3, #16]
 8003f20:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f24:	d013      	beq.n	8003f4e <HAL_RCC_ClockConfig+0x2f6>
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	691b      	ldr	r3, [r3, #16]
 8003f2a:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8003f2e:	d00e      	beq.n	8003f4e <HAL_RCC_ClockConfig+0x2f6>
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	691b      	ldr	r3, [r3, #16]
 8003f34:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8003f38:	d009      	beq.n	8003f4e <HAL_RCC_ClockConfig+0x2f6>
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	691b      	ldr	r3, [r3, #16]
 8003f3e:	f5b3 5fe0 	cmp.w	r3, #7168	; 0x1c00
 8003f42:	d004      	beq.n	8003f4e <HAL_RCC_ClockConfig+0x2f6>
 8003f44:	f240 314d 	movw	r1, #845	; 0x34d
 8003f48:	4812      	ldr	r0, [pc, #72]	; (8003f94 <HAL_RCC_ClockConfig+0x33c>)
 8003f4a:	f7fd fc22 	bl	8001792 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003f4e:	4b12      	ldr	r3, [pc, #72]	; (8003f98 <HAL_RCC_ClockConfig+0x340>)
 8003f50:	689b      	ldr	r3, [r3, #8]
 8003f52:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	691b      	ldr	r3, [r3, #16]
 8003f5a:	00db      	lsls	r3, r3, #3
 8003f5c:	490e      	ldr	r1, [pc, #56]	; (8003f98 <HAL_RCC_ClockConfig+0x340>)
 8003f5e:	4313      	orrs	r3, r2
 8003f60:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003f62:	f000 f821 	bl	8003fa8 <HAL_RCC_GetSysClockFreq>
 8003f66:	4602      	mov	r2, r0
 8003f68:	4b0b      	ldr	r3, [pc, #44]	; (8003f98 <HAL_RCC_ClockConfig+0x340>)
 8003f6a:	689b      	ldr	r3, [r3, #8]
 8003f6c:	091b      	lsrs	r3, r3, #4
 8003f6e:	f003 030f 	and.w	r3, r3, #15
 8003f72:	490a      	ldr	r1, [pc, #40]	; (8003f9c <HAL_RCC_ClockConfig+0x344>)
 8003f74:	5ccb      	ldrb	r3, [r1, r3]
 8003f76:	fa22 f303 	lsr.w	r3, r2, r3
 8003f7a:	4a09      	ldr	r2, [pc, #36]	; (8003fa0 <HAL_RCC_ClockConfig+0x348>)
 8003f7c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003f7e:	4b09      	ldr	r3, [pc, #36]	; (8003fa4 <HAL_RCC_ClockConfig+0x34c>)
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	4618      	mov	r0, r3
 8003f84:	f7fd fe30 	bl	8001be8 <HAL_InitTick>

  return HAL_OK;
 8003f88:	2300      	movs	r3, #0
}
 8003f8a:	4618      	mov	r0, r3
 8003f8c:	3710      	adds	r7, #16
 8003f8e:	46bd      	mov	sp, r7
 8003f90:	bd80      	pop	{r7, pc}
 8003f92:	bf00      	nop
 8003f94:	0800e58c 	.word	0x0800e58c
 8003f98:	40023800 	.word	0x40023800
 8003f9c:	0800e63c 	.word	0x0800e63c
 8003fa0:	20000000 	.word	0x20000000
 8003fa4:	20000004 	.word	0x20000004

08003fa8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003fa8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003fac:	b090      	sub	sp, #64	; 0x40
 8003fae:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8003fb0:	2300      	movs	r3, #0
 8003fb2:	637b      	str	r3, [r7, #52]	; 0x34
 8003fb4:	2300      	movs	r3, #0
 8003fb6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003fb8:	2300      	movs	r3, #0
 8003fba:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0;
 8003fbc:	2300      	movs	r3, #0
 8003fbe:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003fc0:	4b59      	ldr	r3, [pc, #356]	; (8004128 <HAL_RCC_GetSysClockFreq+0x180>)
 8003fc2:	689b      	ldr	r3, [r3, #8]
 8003fc4:	f003 030c 	and.w	r3, r3, #12
 8003fc8:	2b08      	cmp	r3, #8
 8003fca:	d00d      	beq.n	8003fe8 <HAL_RCC_GetSysClockFreq+0x40>
 8003fcc:	2b08      	cmp	r3, #8
 8003fce:	f200 80a1 	bhi.w	8004114 <HAL_RCC_GetSysClockFreq+0x16c>
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d002      	beq.n	8003fdc <HAL_RCC_GetSysClockFreq+0x34>
 8003fd6:	2b04      	cmp	r3, #4
 8003fd8:	d003      	beq.n	8003fe2 <HAL_RCC_GetSysClockFreq+0x3a>
 8003fda:	e09b      	b.n	8004114 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003fdc:	4b53      	ldr	r3, [pc, #332]	; (800412c <HAL_RCC_GetSysClockFreq+0x184>)
 8003fde:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003fe0:	e09b      	b.n	800411a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003fe2:	4b53      	ldr	r3, [pc, #332]	; (8004130 <HAL_RCC_GetSysClockFreq+0x188>)
 8003fe4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003fe6:	e098      	b.n	800411a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003fe8:	4b4f      	ldr	r3, [pc, #316]	; (8004128 <HAL_RCC_GetSysClockFreq+0x180>)
 8003fea:	685b      	ldr	r3, [r3, #4]
 8003fec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003ff0:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8003ff2:	4b4d      	ldr	r3, [pc, #308]	; (8004128 <HAL_RCC_GetSysClockFreq+0x180>)
 8003ff4:	685b      	ldr	r3, [r3, #4]
 8003ff6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d028      	beq.n	8004050 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003ffe:	4b4a      	ldr	r3, [pc, #296]	; (8004128 <HAL_RCC_GetSysClockFreq+0x180>)
 8004000:	685b      	ldr	r3, [r3, #4]
 8004002:	099b      	lsrs	r3, r3, #6
 8004004:	2200      	movs	r2, #0
 8004006:	623b      	str	r3, [r7, #32]
 8004008:	627a      	str	r2, [r7, #36]	; 0x24
 800400a:	6a3b      	ldr	r3, [r7, #32]
 800400c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8004010:	2100      	movs	r1, #0
 8004012:	4b47      	ldr	r3, [pc, #284]	; (8004130 <HAL_RCC_GetSysClockFreq+0x188>)
 8004014:	fb03 f201 	mul.w	r2, r3, r1
 8004018:	2300      	movs	r3, #0
 800401a:	fb00 f303 	mul.w	r3, r0, r3
 800401e:	4413      	add	r3, r2
 8004020:	4a43      	ldr	r2, [pc, #268]	; (8004130 <HAL_RCC_GetSysClockFreq+0x188>)
 8004022:	fba0 1202 	umull	r1, r2, r0, r2
 8004026:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004028:	460a      	mov	r2, r1
 800402a:	62ba      	str	r2, [r7, #40]	; 0x28
 800402c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800402e:	4413      	add	r3, r2
 8004030:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004032:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004034:	2200      	movs	r2, #0
 8004036:	61bb      	str	r3, [r7, #24]
 8004038:	61fa      	str	r2, [r7, #28]
 800403a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800403e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8004042:	f7fc fdd1 	bl	8000be8 <__aeabi_uldivmod>
 8004046:	4602      	mov	r2, r0
 8004048:	460b      	mov	r3, r1
 800404a:	4613      	mov	r3, r2
 800404c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800404e:	e053      	b.n	80040f8 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004050:	4b35      	ldr	r3, [pc, #212]	; (8004128 <HAL_RCC_GetSysClockFreq+0x180>)
 8004052:	685b      	ldr	r3, [r3, #4]
 8004054:	099b      	lsrs	r3, r3, #6
 8004056:	2200      	movs	r2, #0
 8004058:	613b      	str	r3, [r7, #16]
 800405a:	617a      	str	r2, [r7, #20]
 800405c:	693b      	ldr	r3, [r7, #16]
 800405e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8004062:	f04f 0b00 	mov.w	fp, #0
 8004066:	4652      	mov	r2, sl
 8004068:	465b      	mov	r3, fp
 800406a:	f04f 0000 	mov.w	r0, #0
 800406e:	f04f 0100 	mov.w	r1, #0
 8004072:	0159      	lsls	r1, r3, #5
 8004074:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004078:	0150      	lsls	r0, r2, #5
 800407a:	4602      	mov	r2, r0
 800407c:	460b      	mov	r3, r1
 800407e:	ebb2 080a 	subs.w	r8, r2, sl
 8004082:	eb63 090b 	sbc.w	r9, r3, fp
 8004086:	f04f 0200 	mov.w	r2, #0
 800408a:	f04f 0300 	mov.w	r3, #0
 800408e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8004092:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8004096:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800409a:	ebb2 0408 	subs.w	r4, r2, r8
 800409e:	eb63 0509 	sbc.w	r5, r3, r9
 80040a2:	f04f 0200 	mov.w	r2, #0
 80040a6:	f04f 0300 	mov.w	r3, #0
 80040aa:	00eb      	lsls	r3, r5, #3
 80040ac:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80040b0:	00e2      	lsls	r2, r4, #3
 80040b2:	4614      	mov	r4, r2
 80040b4:	461d      	mov	r5, r3
 80040b6:	eb14 030a 	adds.w	r3, r4, sl
 80040ba:	603b      	str	r3, [r7, #0]
 80040bc:	eb45 030b 	adc.w	r3, r5, fp
 80040c0:	607b      	str	r3, [r7, #4]
 80040c2:	f04f 0200 	mov.w	r2, #0
 80040c6:	f04f 0300 	mov.w	r3, #0
 80040ca:	e9d7 4500 	ldrd	r4, r5, [r7]
 80040ce:	4629      	mov	r1, r5
 80040d0:	028b      	lsls	r3, r1, #10
 80040d2:	4621      	mov	r1, r4
 80040d4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80040d8:	4621      	mov	r1, r4
 80040da:	028a      	lsls	r2, r1, #10
 80040dc:	4610      	mov	r0, r2
 80040de:	4619      	mov	r1, r3
 80040e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80040e2:	2200      	movs	r2, #0
 80040e4:	60bb      	str	r3, [r7, #8]
 80040e6:	60fa      	str	r2, [r7, #12]
 80040e8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80040ec:	f7fc fd7c 	bl	8000be8 <__aeabi_uldivmod>
 80040f0:	4602      	mov	r2, r0
 80040f2:	460b      	mov	r3, r1
 80040f4:	4613      	mov	r3, r2
 80040f6:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80040f8:	4b0b      	ldr	r3, [pc, #44]	; (8004128 <HAL_RCC_GetSysClockFreq+0x180>)
 80040fa:	685b      	ldr	r3, [r3, #4]
 80040fc:	0c1b      	lsrs	r3, r3, #16
 80040fe:	f003 0303 	and.w	r3, r3, #3
 8004102:	3301      	adds	r3, #1
 8004104:	005b      	lsls	r3, r3, #1
 8004106:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 8004108:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800410a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800410c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004110:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004112:	e002      	b.n	800411a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004114:	4b05      	ldr	r3, [pc, #20]	; (800412c <HAL_RCC_GetSysClockFreq+0x184>)
 8004116:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004118:	bf00      	nop
    }
  }
  return sysclockfreq;
 800411a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 800411c:	4618      	mov	r0, r3
 800411e:	3740      	adds	r7, #64	; 0x40
 8004120:	46bd      	mov	sp, r7
 8004122:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004126:	bf00      	nop
 8004128:	40023800 	.word	0x40023800
 800412c:	00f42400 	.word	0x00f42400
 8004130:	017d7840 	.word	0x017d7840

08004134 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004134:	b480      	push	{r7}
 8004136:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004138:	4b03      	ldr	r3, [pc, #12]	; (8004148 <HAL_RCC_GetHCLKFreq+0x14>)
 800413a:	681b      	ldr	r3, [r3, #0]
}
 800413c:	4618      	mov	r0, r3
 800413e:	46bd      	mov	sp, r7
 8004140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004144:	4770      	bx	lr
 8004146:	bf00      	nop
 8004148:	20000000 	.word	0x20000000

0800414c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800414c:	b580      	push	{r7, lr}
 800414e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004150:	f7ff fff0 	bl	8004134 <HAL_RCC_GetHCLKFreq>
 8004154:	4602      	mov	r2, r0
 8004156:	4b05      	ldr	r3, [pc, #20]	; (800416c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004158:	689b      	ldr	r3, [r3, #8]
 800415a:	0a9b      	lsrs	r3, r3, #10
 800415c:	f003 0307 	and.w	r3, r3, #7
 8004160:	4903      	ldr	r1, [pc, #12]	; (8004170 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004162:	5ccb      	ldrb	r3, [r1, r3]
 8004164:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004168:	4618      	mov	r0, r3
 800416a:	bd80      	pop	{r7, pc}
 800416c:	40023800 	.word	0x40023800
 8004170:	0800e64c 	.word	0x0800e64c

08004174 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004174:	b580      	push	{r7, lr}
 8004176:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004178:	f7ff ffdc 	bl	8004134 <HAL_RCC_GetHCLKFreq>
 800417c:	4602      	mov	r2, r0
 800417e:	4b05      	ldr	r3, [pc, #20]	; (8004194 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004180:	689b      	ldr	r3, [r3, #8]
 8004182:	0b5b      	lsrs	r3, r3, #13
 8004184:	f003 0307 	and.w	r3, r3, #7
 8004188:	4903      	ldr	r1, [pc, #12]	; (8004198 <HAL_RCC_GetPCLK2Freq+0x24>)
 800418a:	5ccb      	ldrb	r3, [r1, r3]
 800418c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004190:	4618      	mov	r0, r3
 8004192:	bd80      	pop	{r7, pc}
 8004194:	40023800 	.word	0x40023800
 8004198:	0800e64c 	.word	0x0800e64c

0800419c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800419c:	b580      	push	{r7, lr}
 800419e:	b088      	sub	sp, #32
 80041a0:	af00      	add	r7, sp, #0
 80041a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80041a4:	2300      	movs	r3, #0
 80041a6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80041a8:	2300      	movs	r3, #0
 80041aa:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80041ac:	2300      	movs	r3, #0
 80041ae:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80041b0:	2300      	movs	r3, #0
 80041b2:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80041b4:	2300      	movs	r3, #0
 80041b6:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	f003 0301 	and.w	r3, r3, #1
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	f040 8089 	bne.w	80042d8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	f003 0308 	and.w	r3, r3, #8
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	f040 8082 	bne.w	80042d8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	f003 0310 	and.w	r3, r3, #16
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d17b      	bne.n	80042d8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d175      	bne.n	80042d8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d16f      	bne.n	80042d8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004200:	2b00      	cmp	r3, #0
 8004202:	d169      	bne.n	80042d8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800420c:	2b00      	cmp	r3, #0
 800420e:	d163      	bne.n	80042d8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004218:	2b00      	cmp	r3, #0
 800421a:	d15d      	bne.n	80042d8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004224:	2b00      	cmp	r3, #0
 8004226:	d157      	bne.n	80042d8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004230:	2b00      	cmp	r3, #0
 8004232:	d151      	bne.n	80042d8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800423c:	2b00      	cmp	r3, #0
 800423e:	d14b      	bne.n	80042d8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004248:	2b00      	cmp	r3, #0
 800424a:	d145      	bne.n	80042d8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004254:	2b00      	cmp	r3, #0
 8004256:	d13f      	bne.n	80042d8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004260:	2b00      	cmp	r3, #0
 8004262:	d139      	bne.n	80042d8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800426c:	2b00      	cmp	r3, #0
 800426e:	d133      	bne.n	80042d8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004278:	2b00      	cmp	r3, #0
 800427a:	d12d      	bne.n	80042d8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004284:	2b00      	cmp	r3, #0
 8004286:	d127      	bne.n	80042d8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004290:	2b00      	cmp	r3, #0
 8004292:	d121      	bne.n	80042d8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800429c:	2b00      	cmp	r3, #0
 800429e:	d11b      	bne.n	80042d8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d115      	bne.n	80042d8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d10f      	bne.n	80042d8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d109      	bne.n	80042d8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	f003 0320 	and.w	r3, r3, #32
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d103      	bne.n	80042d8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80042d0:	2172      	movs	r1, #114	; 0x72
 80042d2:	4895      	ldr	r0, [pc, #596]	; (8004528 <HAL_RCCEx_PeriphCLKConfig+0x38c>)
 80042d4:	f7fd fa5d 	bl	8001792 <assert_failed>

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	f003 0301 	and.w	r3, r3, #1
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d01f      	beq.n	8004324 <HAL_RCCEx_PeriphCLKConfig+0x188>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d008      	beq.n	80042fe <HAL_RCCEx_PeriphCLKConfig+0x162>
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80042f0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80042f4:	d003      	beq.n	80042fe <HAL_RCCEx_PeriphCLKConfig+0x162>
 80042f6:	2178      	movs	r1, #120	; 0x78
 80042f8:	488b      	ldr	r0, [pc, #556]	; (8004528 <HAL_RCCEx_PeriphCLKConfig+0x38c>)
 80042fa:	f7fd fa4a 	bl	8001792 <assert_failed>

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80042fe:	4b8b      	ldr	r3, [pc, #556]	; (800452c <HAL_RCCEx_PeriphCLKConfig+0x390>)
 8004300:	689b      	ldr	r3, [r3, #8]
 8004302:	4a8a      	ldr	r2, [pc, #552]	; (800452c <HAL_RCCEx_PeriphCLKConfig+0x390>)
 8004304:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8004308:	6093      	str	r3, [r2, #8]
 800430a:	4b88      	ldr	r3, [pc, #544]	; (800452c <HAL_RCCEx_PeriphCLKConfig+0x390>)
 800430c:	689a      	ldr	r2, [r3, #8]
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004312:	4986      	ldr	r1, [pc, #536]	; (800452c <HAL_RCCEx_PeriphCLKConfig+0x390>)
 8004314:	4313      	orrs	r3, r2
 8004316:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800431c:	2b00      	cmp	r3, #0
 800431e:	d101      	bne.n	8004324 <HAL_RCCEx_PeriphCLKConfig+0x188>
    {
      plli2sused = 1;
 8004320:	2301      	movs	r3, #1
 8004322:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800432c:	2b00      	cmp	r3, #0
 800432e:	d029      	beq.n	8004384 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004334:	2b00      	cmp	r3, #0
 8004336:	d00d      	beq.n	8004354 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800433c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004340:	d008      	beq.n	8004354 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004346:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800434a:	d003      	beq.n	8004354 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 800434c:	2188      	movs	r1, #136	; 0x88
 800434e:	4876      	ldr	r0, [pc, #472]	; (8004528 <HAL_RCCEx_PeriphCLKConfig+0x38c>)
 8004350:	f7fd fa1f 	bl	8001792 <assert_failed>

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004354:	4b75      	ldr	r3, [pc, #468]	; (800452c <HAL_RCCEx_PeriphCLKConfig+0x390>)
 8004356:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800435a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004362:	4972      	ldr	r1, [pc, #456]	; (800452c <HAL_RCCEx_PeriphCLKConfig+0x390>)
 8004364:	4313      	orrs	r3, r2
 8004366:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800436e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004372:	d101      	bne.n	8004378 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
    {
      plli2sused = 1;
 8004374:	2301      	movs	r3, #1
 8004376:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800437c:	2b00      	cmp	r3, #0
 800437e:	d101      	bne.n	8004384 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
    {
      pllsaiused = 1;
 8004380:	2301      	movs	r3, #1
 8004382:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800438c:	2b00      	cmp	r3, #0
 800438e:	d029      	beq.n	80043e4 <HAL_RCCEx_PeriphCLKConfig+0x248>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004394:	2b00      	cmp	r3, #0
 8004396:	d00d      	beq.n	80043b4 <HAL_RCCEx_PeriphCLKConfig+0x218>
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800439c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80043a0:	d008      	beq.n	80043b4 <HAL_RCCEx_PeriphCLKConfig+0x218>
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043a6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80043aa:	d003      	beq.n	80043b4 <HAL_RCCEx_PeriphCLKConfig+0x218>
 80043ac:	219c      	movs	r1, #156	; 0x9c
 80043ae:	485e      	ldr	r0, [pc, #376]	; (8004528 <HAL_RCCEx_PeriphCLKConfig+0x38c>)
 80043b0:	f7fd f9ef 	bl	8001792 <assert_failed>

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80043b4:	4b5d      	ldr	r3, [pc, #372]	; (800452c <HAL_RCCEx_PeriphCLKConfig+0x390>)
 80043b6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80043ba:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043c2:	495a      	ldr	r1, [pc, #360]	; (800452c <HAL_RCCEx_PeriphCLKConfig+0x390>)
 80043c4:	4313      	orrs	r3, r2
 80043c6:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043ce:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80043d2:	d101      	bne.n	80043d8 <HAL_RCCEx_PeriphCLKConfig+0x23c>
    {
      plli2sused = 1;
 80043d4:	2301      	movs	r3, #1
 80043d6:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d101      	bne.n	80043e4 <HAL_RCCEx_PeriphCLKConfig+0x248>
    {
      pllsaiused = 1;
 80043e0:	2301      	movs	r3, #1
 80043e2:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d001      	beq.n	80043f4 <HAL_RCCEx_PeriphCLKConfig+0x258>
  {
      plli2sused = 1;
 80043f0:	2301      	movs	r3, #1
 80043f2:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	f003 0320 	and.w	r3, r3, #32
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	f000 8186 	beq.w	800470e <HAL_RCCEx_PeriphCLKConfig+0x572>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004406:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800440a:	f000 80e4 	beq.w	80045d6 <HAL_RCCEx_PeriphCLKConfig+0x43a>
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004412:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004416:	f000 80de 	beq.w	80045d6 <HAL_RCCEx_PeriphCLKConfig+0x43a>
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800441e:	4a44      	ldr	r2, [pc, #272]	; (8004530 <HAL_RCCEx_PeriphCLKConfig+0x394>)
 8004420:	4293      	cmp	r3, r2
 8004422:	f000 80d8 	beq.w	80045d6 <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800442a:	4a42      	ldr	r2, [pc, #264]	; (8004534 <HAL_RCCEx_PeriphCLKConfig+0x398>)
 800442c:	4293      	cmp	r3, r2
 800442e:	f000 80d2 	beq.w	80045d6 <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004436:	4a40      	ldr	r2, [pc, #256]	; (8004538 <HAL_RCCEx_PeriphCLKConfig+0x39c>)
 8004438:	4293      	cmp	r3, r2
 800443a:	f000 80cc 	beq.w	80045d6 <HAL_RCCEx_PeriphCLKConfig+0x43a>
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004442:	4a3e      	ldr	r2, [pc, #248]	; (800453c <HAL_RCCEx_PeriphCLKConfig+0x3a0>)
 8004444:	4293      	cmp	r3, r2
 8004446:	f000 80c6 	beq.w	80045d6 <HAL_RCCEx_PeriphCLKConfig+0x43a>
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800444e:	4a3c      	ldr	r2, [pc, #240]	; (8004540 <HAL_RCCEx_PeriphCLKConfig+0x3a4>)
 8004450:	4293      	cmp	r3, r2
 8004452:	f000 80c0 	beq.w	80045d6 <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800445a:	4a3a      	ldr	r2, [pc, #232]	; (8004544 <HAL_RCCEx_PeriphCLKConfig+0x3a8>)
 800445c:	4293      	cmp	r3, r2
 800445e:	f000 80ba 	beq.w	80045d6 <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004466:	4a38      	ldr	r2, [pc, #224]	; (8004548 <HAL_RCCEx_PeriphCLKConfig+0x3ac>)
 8004468:	4293      	cmp	r3, r2
 800446a:	f000 80b4 	beq.w	80045d6 <HAL_RCCEx_PeriphCLKConfig+0x43a>
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004472:	4a36      	ldr	r2, [pc, #216]	; (800454c <HAL_RCCEx_PeriphCLKConfig+0x3b0>)
 8004474:	4293      	cmp	r3, r2
 8004476:	f000 80ae 	beq.w	80045d6 <HAL_RCCEx_PeriphCLKConfig+0x43a>
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800447e:	4a34      	ldr	r2, [pc, #208]	; (8004550 <HAL_RCCEx_PeriphCLKConfig+0x3b4>)
 8004480:	4293      	cmp	r3, r2
 8004482:	f000 80a8 	beq.w	80045d6 <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800448a:	4a32      	ldr	r2, [pc, #200]	; (8004554 <HAL_RCCEx_PeriphCLKConfig+0x3b8>)
 800448c:	4293      	cmp	r3, r2
 800448e:	f000 80a2 	beq.w	80045d6 <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004496:	4a30      	ldr	r2, [pc, #192]	; (8004558 <HAL_RCCEx_PeriphCLKConfig+0x3bc>)
 8004498:	4293      	cmp	r3, r2
 800449a:	f000 809c 	beq.w	80045d6 <HAL_RCCEx_PeriphCLKConfig+0x43a>
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044a2:	4a2e      	ldr	r2, [pc, #184]	; (800455c <HAL_RCCEx_PeriphCLKConfig+0x3c0>)
 80044a4:	4293      	cmp	r3, r2
 80044a6:	f000 8096 	beq.w	80045d6 <HAL_RCCEx_PeriphCLKConfig+0x43a>
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044ae:	4a2c      	ldr	r2, [pc, #176]	; (8004560 <HAL_RCCEx_PeriphCLKConfig+0x3c4>)
 80044b0:	4293      	cmp	r3, r2
 80044b2:	f000 8090 	beq.w	80045d6 <HAL_RCCEx_PeriphCLKConfig+0x43a>
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044ba:	4a2a      	ldr	r2, [pc, #168]	; (8004564 <HAL_RCCEx_PeriphCLKConfig+0x3c8>)
 80044bc:	4293      	cmp	r3, r2
 80044be:	f000 808a 	beq.w	80045d6 <HAL_RCCEx_PeriphCLKConfig+0x43a>
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044c6:	4a28      	ldr	r2, [pc, #160]	; (8004568 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 80044c8:	4293      	cmp	r3, r2
 80044ca:	f000 8084 	beq.w	80045d6 <HAL_RCCEx_PeriphCLKConfig+0x43a>
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044d2:	4a26      	ldr	r2, [pc, #152]	; (800456c <HAL_RCCEx_PeriphCLKConfig+0x3d0>)
 80044d4:	4293      	cmp	r3, r2
 80044d6:	d07e      	beq.n	80045d6 <HAL_RCCEx_PeriphCLKConfig+0x43a>
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044dc:	4a24      	ldr	r2, [pc, #144]	; (8004570 <HAL_RCCEx_PeriphCLKConfig+0x3d4>)
 80044de:	4293      	cmp	r3, r2
 80044e0:	d079      	beq.n	80045d6 <HAL_RCCEx_PeriphCLKConfig+0x43a>
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044e6:	4a23      	ldr	r2, [pc, #140]	; (8004574 <HAL_RCCEx_PeriphCLKConfig+0x3d8>)
 80044e8:	4293      	cmp	r3, r2
 80044ea:	d074      	beq.n	80045d6 <HAL_RCCEx_PeriphCLKConfig+0x43a>
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044f0:	4a21      	ldr	r2, [pc, #132]	; (8004578 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80044f2:	4293      	cmp	r3, r2
 80044f4:	d06f      	beq.n	80045d6 <HAL_RCCEx_PeriphCLKConfig+0x43a>
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044fa:	4a20      	ldr	r2, [pc, #128]	; (800457c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80044fc:	4293      	cmp	r3, r2
 80044fe:	d06a      	beq.n	80045d6 <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004504:	4a1e      	ldr	r2, [pc, #120]	; (8004580 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004506:	4293      	cmp	r3, r2
 8004508:	d065      	beq.n	80045d6 <HAL_RCCEx_PeriphCLKConfig+0x43a>
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800450e:	4a1d      	ldr	r2, [pc, #116]	; (8004584 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004510:	4293      	cmp	r3, r2
 8004512:	d060      	beq.n	80045d6 <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004518:	4a1b      	ldr	r2, [pc, #108]	; (8004588 <HAL_RCCEx_PeriphCLKConfig+0x3ec>)
 800451a:	4293      	cmp	r3, r2
 800451c:	d05b      	beq.n	80045d6 <HAL_RCCEx_PeriphCLKConfig+0x43a>
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004522:	4a1a      	ldr	r2, [pc, #104]	; (800458c <HAL_RCCEx_PeriphCLKConfig+0x3f0>)
 8004524:	4293      	cmp	r3, r2
 8004526:	e033      	b.n	8004590 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
 8004528:	0800e5c4 	.word	0x0800e5c4
 800452c:	40023800 	.word	0x40023800
 8004530:	00020300 	.word	0x00020300
 8004534:	00030300 	.word	0x00030300
 8004538:	00040300 	.word	0x00040300
 800453c:	00050300 	.word	0x00050300
 8004540:	00060300 	.word	0x00060300
 8004544:	00070300 	.word	0x00070300
 8004548:	00080300 	.word	0x00080300
 800454c:	00090300 	.word	0x00090300
 8004550:	000a0300 	.word	0x000a0300
 8004554:	000b0300 	.word	0x000b0300
 8004558:	000c0300 	.word	0x000c0300
 800455c:	000d0300 	.word	0x000d0300
 8004560:	000e0300 	.word	0x000e0300
 8004564:	000f0300 	.word	0x000f0300
 8004568:	00100300 	.word	0x00100300
 800456c:	00110300 	.word	0x00110300
 8004570:	00120300 	.word	0x00120300
 8004574:	00130300 	.word	0x00130300
 8004578:	00140300 	.word	0x00140300
 800457c:	00150300 	.word	0x00150300
 8004580:	00160300 	.word	0x00160300
 8004584:	00170300 	.word	0x00170300
 8004588:	00180300 	.word	0x00180300
 800458c:	00190300 	.word	0x00190300
 8004590:	d021      	beq.n	80045d6 <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004596:	4a4c      	ldr	r2, [pc, #304]	; (80046c8 <HAL_RCCEx_PeriphCLKConfig+0x52c>)
 8004598:	4293      	cmp	r3, r2
 800459a:	d01c      	beq.n	80045d6 <HAL_RCCEx_PeriphCLKConfig+0x43a>
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045a0:	4a4a      	ldr	r2, [pc, #296]	; (80046cc <HAL_RCCEx_PeriphCLKConfig+0x530>)
 80045a2:	4293      	cmp	r3, r2
 80045a4:	d017      	beq.n	80045d6 <HAL_RCCEx_PeriphCLKConfig+0x43a>
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045aa:	4a49      	ldr	r2, [pc, #292]	; (80046d0 <HAL_RCCEx_PeriphCLKConfig+0x534>)
 80045ac:	4293      	cmp	r3, r2
 80045ae:	d012      	beq.n	80045d6 <HAL_RCCEx_PeriphCLKConfig+0x43a>
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045b4:	4a47      	ldr	r2, [pc, #284]	; (80046d4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80045b6:	4293      	cmp	r3, r2
 80045b8:	d00d      	beq.n	80045d6 <HAL_RCCEx_PeriphCLKConfig+0x43a>
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045be:	4a46      	ldr	r2, [pc, #280]	; (80046d8 <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 80045c0:	4293      	cmp	r3, r2
 80045c2:	d008      	beq.n	80045d6 <HAL_RCCEx_PeriphCLKConfig+0x43a>
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045c8:	4a44      	ldr	r2, [pc, #272]	; (80046dc <HAL_RCCEx_PeriphCLKConfig+0x540>)
 80045ca:	4293      	cmp	r3, r2
 80045cc:	d003      	beq.n	80045d6 <HAL_RCCEx_PeriphCLKConfig+0x43a>
 80045ce:	21b7      	movs	r1, #183	; 0xb7
 80045d0:	4843      	ldr	r0, [pc, #268]	; (80046e0 <HAL_RCCEx_PeriphCLKConfig+0x544>)
 80045d2:	f7fd f8de 	bl	8001792 <assert_failed>

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80045d6:	4b43      	ldr	r3, [pc, #268]	; (80046e4 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80045d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045da:	4a42      	ldr	r2, [pc, #264]	; (80046e4 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80045dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80045e0:	6413      	str	r3, [r2, #64]	; 0x40
 80045e2:	4b40      	ldr	r3, [pc, #256]	; (80046e4 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80045e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80045ea:	60bb      	str	r3, [r7, #8]
 80045ec:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80045ee:	4b3e      	ldr	r3, [pc, #248]	; (80046e8 <HAL_RCCEx_PeriphCLKConfig+0x54c>)
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	4a3d      	ldr	r2, [pc, #244]	; (80046e8 <HAL_RCCEx_PeriphCLKConfig+0x54c>)
 80045f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80045f8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80045fa:	f7fd fb39 	bl	8001c70 <HAL_GetTick>
 80045fe:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004600:	e009      	b.n	8004616 <HAL_RCCEx_PeriphCLKConfig+0x47a>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004602:	f7fd fb35 	bl	8001c70 <HAL_GetTick>
 8004606:	4602      	mov	r2, r0
 8004608:	697b      	ldr	r3, [r7, #20]
 800460a:	1ad3      	subs	r3, r2, r3
 800460c:	2b64      	cmp	r3, #100	; 0x64
 800460e:	d902      	bls.n	8004616 <HAL_RCCEx_PeriphCLKConfig+0x47a>
      {
        return HAL_TIMEOUT;
 8004610:	2303      	movs	r3, #3
 8004612:	f000 bd9f 	b.w	8005154 <HAL_RCCEx_PeriphCLKConfig+0xfb8>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004616:	4b34      	ldr	r3, [pc, #208]	; (80046e8 <HAL_RCCEx_PeriphCLKConfig+0x54c>)
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800461e:	2b00      	cmp	r3, #0
 8004620:	d0ef      	beq.n	8004602 <HAL_RCCEx_PeriphCLKConfig+0x466>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004622:	4b30      	ldr	r3, [pc, #192]	; (80046e4 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004624:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004626:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800462a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800462c:	693b      	ldr	r3, [r7, #16]
 800462e:	2b00      	cmp	r3, #0
 8004630:	d036      	beq.n	80046a0 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004636:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800463a:	693a      	ldr	r2, [r7, #16]
 800463c:	429a      	cmp	r2, r3
 800463e:	d02f      	beq.n	80046a0 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004640:	4b28      	ldr	r3, [pc, #160]	; (80046e4 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004642:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004644:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004648:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800464a:	4b26      	ldr	r3, [pc, #152]	; (80046e4 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800464c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800464e:	4a25      	ldr	r2, [pc, #148]	; (80046e4 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004650:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004654:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004656:	4b23      	ldr	r3, [pc, #140]	; (80046e4 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004658:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800465a:	4a22      	ldr	r2, [pc, #136]	; (80046e4 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800465c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004660:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8004662:	4a20      	ldr	r2, [pc, #128]	; (80046e4 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004664:	693b      	ldr	r3, [r7, #16]
 8004666:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004668:	4b1e      	ldr	r3, [pc, #120]	; (80046e4 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800466a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800466c:	f003 0301 	and.w	r3, r3, #1
 8004670:	2b01      	cmp	r3, #1
 8004672:	d115      	bne.n	80046a0 <HAL_RCCEx_PeriphCLKConfig+0x504>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004674:	f7fd fafc 	bl	8001c70 <HAL_GetTick>
 8004678:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800467a:	e00b      	b.n	8004694 <HAL_RCCEx_PeriphCLKConfig+0x4f8>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800467c:	f7fd faf8 	bl	8001c70 <HAL_GetTick>
 8004680:	4602      	mov	r2, r0
 8004682:	697b      	ldr	r3, [r7, #20]
 8004684:	1ad3      	subs	r3, r2, r3
 8004686:	f241 3288 	movw	r2, #5000	; 0x1388
 800468a:	4293      	cmp	r3, r2
 800468c:	d902      	bls.n	8004694 <HAL_RCCEx_PeriphCLKConfig+0x4f8>
          {
            return HAL_TIMEOUT;
 800468e:	2303      	movs	r3, #3
 8004690:	f000 bd60 	b.w	8005154 <HAL_RCCEx_PeriphCLKConfig+0xfb8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004694:	4b13      	ldr	r3, [pc, #76]	; (80046e4 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004696:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004698:	f003 0302 	and.w	r3, r3, #2
 800469c:	2b00      	cmp	r3, #0
 800469e:	d0ed      	beq.n	800467c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046a4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80046a8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80046ac:	d120      	bne.n	80046f0 <HAL_RCCEx_PeriphCLKConfig+0x554>
 80046ae:	4b0d      	ldr	r3, [pc, #52]	; (80046e4 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80046b0:	689b      	ldr	r3, [r3, #8]
 80046b2:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80046ba:	4b0c      	ldr	r3, [pc, #48]	; (80046ec <HAL_RCCEx_PeriphCLKConfig+0x550>)
 80046bc:	400b      	ands	r3, r1
 80046be:	4909      	ldr	r1, [pc, #36]	; (80046e4 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80046c0:	4313      	orrs	r3, r2
 80046c2:	608b      	str	r3, [r1, #8]
 80046c4:	e01a      	b.n	80046fc <HAL_RCCEx_PeriphCLKConfig+0x560>
 80046c6:	bf00      	nop
 80046c8:	001a0300 	.word	0x001a0300
 80046cc:	001b0300 	.word	0x001b0300
 80046d0:	001c0300 	.word	0x001c0300
 80046d4:	001d0300 	.word	0x001d0300
 80046d8:	001e0300 	.word	0x001e0300
 80046dc:	001f0300 	.word	0x001f0300
 80046e0:	0800e5c4 	.word	0x0800e5c4
 80046e4:	40023800 	.word	0x40023800
 80046e8:	40007000 	.word	0x40007000
 80046ec:	0ffffcff 	.word	0x0ffffcff
 80046f0:	4b9a      	ldr	r3, [pc, #616]	; (800495c <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 80046f2:	689b      	ldr	r3, [r3, #8]
 80046f4:	4a99      	ldr	r2, [pc, #612]	; (800495c <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 80046f6:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80046fa:	6093      	str	r3, [r2, #8]
 80046fc:	4b97      	ldr	r3, [pc, #604]	; (800495c <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 80046fe:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004704:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004708:	4994      	ldr	r1, [pc, #592]	; (800495c <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 800470a:	4313      	orrs	r3, r2
 800470c:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	f003 0310 	and.w	r3, r3, #16
 8004716:	2b00      	cmp	r3, #0
 8004718:	d01d      	beq.n	8004756 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800471e:	2b00      	cmp	r3, #0
 8004720:	d008      	beq.n	8004734 <HAL_RCCEx_PeriphCLKConfig+0x598>
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004726:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800472a:	d003      	beq.n	8004734 <HAL_RCCEx_PeriphCLKConfig+0x598>
 800472c:	21f1      	movs	r1, #241	; 0xf1
 800472e:	488c      	ldr	r0, [pc, #560]	; (8004960 <HAL_RCCEx_PeriphCLKConfig+0x7c4>)
 8004730:	f7fd f82f 	bl	8001792 <assert_failed>

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004734:	4b89      	ldr	r3, [pc, #548]	; (800495c <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8004736:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800473a:	4a88      	ldr	r2, [pc, #544]	; (800495c <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 800473c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004740:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8004744:	4b85      	ldr	r3, [pc, #532]	; (800495c <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8004746:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800474e:	4983      	ldr	r1, [pc, #524]	; (800495c <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8004750:	4313      	orrs	r3, r2
 8004752:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800475e:	2b00      	cmp	r3, #0
 8004760:	d01c      	beq.n	800479c <HAL_RCCEx_PeriphCLKConfig+0x600>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004766:	2b00      	cmp	r3, #0
 8004768:	d00d      	beq.n	8004786 <HAL_RCCEx_PeriphCLKConfig+0x5ea>
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800476e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004772:	d008      	beq.n	8004786 <HAL_RCCEx_PeriphCLKConfig+0x5ea>
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004778:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800477c:	d003      	beq.n	8004786 <HAL_RCCEx_PeriphCLKConfig+0x5ea>
 800477e:	21fb      	movs	r1, #251	; 0xfb
 8004780:	4877      	ldr	r0, [pc, #476]	; (8004960 <HAL_RCCEx_PeriphCLKConfig+0x7c4>)
 8004782:	f7fd f806 	bl	8001792 <assert_failed>

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004786:	4b75      	ldr	r3, [pc, #468]	; (800495c <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8004788:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800478c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004794:	4971      	ldr	r1, [pc, #452]	; (800495c <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8004796:	4313      	orrs	r3, r2
 8004798:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d01d      	beq.n	80047e4 <HAL_RCCEx_PeriphCLKConfig+0x648>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d00e      	beq.n	80047ce <HAL_RCCEx_PeriphCLKConfig+0x632>
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80047b4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80047b8:	d009      	beq.n	80047ce <HAL_RCCEx_PeriphCLKConfig+0x632>
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80047be:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80047c2:	d004      	beq.n	80047ce <HAL_RCCEx_PeriphCLKConfig+0x632>
 80047c4:	f240 1105 	movw	r1, #261	; 0x105
 80047c8:	4865      	ldr	r0, [pc, #404]	; (8004960 <HAL_RCCEx_PeriphCLKConfig+0x7c4>)
 80047ca:	f7fc ffe2 	bl	8001792 <assert_failed>

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80047ce:	4b63      	ldr	r3, [pc, #396]	; (800495c <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 80047d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047d4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80047dc:	495f      	ldr	r1, [pc, #380]	; (800495c <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 80047de:	4313      	orrs	r3, r2
 80047e0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d01d      	beq.n	800482c <HAL_RCCEx_PeriphCLKConfig+0x690>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d00e      	beq.n	8004816 <HAL_RCCEx_PeriphCLKConfig+0x67a>
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80047fc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004800:	d009      	beq.n	8004816 <HAL_RCCEx_PeriphCLKConfig+0x67a>
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004806:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800480a:	d004      	beq.n	8004816 <HAL_RCCEx_PeriphCLKConfig+0x67a>
 800480c:	f240 110f 	movw	r1, #271	; 0x10f
 8004810:	4853      	ldr	r0, [pc, #332]	; (8004960 <HAL_RCCEx_PeriphCLKConfig+0x7c4>)
 8004812:	f7fc ffbe 	bl	8001792 <assert_failed>

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004816:	4b51      	ldr	r3, [pc, #324]	; (800495c <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8004818:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800481c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004824:	494d      	ldr	r1, [pc, #308]	; (800495c <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8004826:	4313      	orrs	r3, r2
 8004828:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004834:	2b00      	cmp	r3, #0
 8004836:	d01d      	beq.n	8004874 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800483c:	2b00      	cmp	r3, #0
 800483e:	d00e      	beq.n	800485e <HAL_RCCEx_PeriphCLKConfig+0x6c2>
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004844:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004848:	d009      	beq.n	800485e <HAL_RCCEx_PeriphCLKConfig+0x6c2>
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800484e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004852:	d004      	beq.n	800485e <HAL_RCCEx_PeriphCLKConfig+0x6c2>
 8004854:	f240 1119 	movw	r1, #281	; 0x119
 8004858:	4841      	ldr	r0, [pc, #260]	; (8004960 <HAL_RCCEx_PeriphCLKConfig+0x7c4>)
 800485a:	f7fc ff9a 	bl	8001792 <assert_failed>

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800485e:	4b3f      	ldr	r3, [pc, #252]	; (800495c <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8004860:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004864:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800486c:	493b      	ldr	r1, [pc, #236]	; (800495c <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 800486e:	4313      	orrs	r3, r2
 8004870:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800487c:	2b00      	cmp	r3, #0
 800487e:	d01f      	beq.n	80048c0 <HAL_RCCEx_PeriphCLKConfig+0x724>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004884:	2b00      	cmp	r3, #0
 8004886:	d010      	beq.n	80048aa <HAL_RCCEx_PeriphCLKConfig+0x70e>
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800488c:	2b01      	cmp	r3, #1
 800488e:	d00c      	beq.n	80048aa <HAL_RCCEx_PeriphCLKConfig+0x70e>
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004894:	2b03      	cmp	r3, #3
 8004896:	d008      	beq.n	80048aa <HAL_RCCEx_PeriphCLKConfig+0x70e>
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800489c:	2b02      	cmp	r3, #2
 800489e:	d004      	beq.n	80048aa <HAL_RCCEx_PeriphCLKConfig+0x70e>
 80048a0:	f240 1123 	movw	r1, #291	; 0x123
 80048a4:	482e      	ldr	r0, [pc, #184]	; (8004960 <HAL_RCCEx_PeriphCLKConfig+0x7c4>)
 80048a6:	f7fc ff74 	bl	8001792 <assert_failed>

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80048aa:	4b2c      	ldr	r3, [pc, #176]	; (800495c <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 80048ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048b0:	f023 0203 	bic.w	r2, r3, #3
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048b8:	4928      	ldr	r1, [pc, #160]	; (800495c <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 80048ba:	4313      	orrs	r3, r2
 80048bc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d01f      	beq.n	800490c <HAL_RCCEx_PeriphCLKConfig+0x770>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d010      	beq.n	80048f6 <HAL_RCCEx_PeriphCLKConfig+0x75a>
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80048d8:	2b04      	cmp	r3, #4
 80048da:	d00c      	beq.n	80048f6 <HAL_RCCEx_PeriphCLKConfig+0x75a>
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80048e0:	2b0c      	cmp	r3, #12
 80048e2:	d008      	beq.n	80048f6 <HAL_RCCEx_PeriphCLKConfig+0x75a>
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80048e8:	2b08      	cmp	r3, #8
 80048ea:	d004      	beq.n	80048f6 <HAL_RCCEx_PeriphCLKConfig+0x75a>
 80048ec:	f240 112d 	movw	r1, #301	; 0x12d
 80048f0:	481b      	ldr	r0, [pc, #108]	; (8004960 <HAL_RCCEx_PeriphCLKConfig+0x7c4>)
 80048f2:	f7fc ff4e 	bl	8001792 <assert_failed>

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80048f6:	4b19      	ldr	r3, [pc, #100]	; (800495c <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 80048f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048fc:	f023 020c 	bic.w	r2, r3, #12
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004904:	4915      	ldr	r1, [pc, #84]	; (800495c <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8004906:	4313      	orrs	r3, r2
 8004908:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004914:	2b00      	cmp	r3, #0
 8004916:	d025      	beq.n	8004964 <HAL_RCCEx_PeriphCLKConfig+0x7c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800491c:	2b00      	cmp	r3, #0
 800491e:	d010      	beq.n	8004942 <HAL_RCCEx_PeriphCLKConfig+0x7a6>
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004924:	2b10      	cmp	r3, #16
 8004926:	d00c      	beq.n	8004942 <HAL_RCCEx_PeriphCLKConfig+0x7a6>
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800492c:	2b30      	cmp	r3, #48	; 0x30
 800492e:	d008      	beq.n	8004942 <HAL_RCCEx_PeriphCLKConfig+0x7a6>
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004934:	2b20      	cmp	r3, #32
 8004936:	d004      	beq.n	8004942 <HAL_RCCEx_PeriphCLKConfig+0x7a6>
 8004938:	f240 1137 	movw	r1, #311	; 0x137
 800493c:	4808      	ldr	r0, [pc, #32]	; (8004960 <HAL_RCCEx_PeriphCLKConfig+0x7c4>)
 800493e:	f7fc ff28 	bl	8001792 <assert_failed>

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004942:	4b06      	ldr	r3, [pc, #24]	; (800495c <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8004944:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004948:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004950:	4902      	ldr	r1, [pc, #8]	; (800495c <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8004952:	4313      	orrs	r3, r2
 8004954:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004958:	e004      	b.n	8004964 <HAL_RCCEx_PeriphCLKConfig+0x7c8>
 800495a:	bf00      	nop
 800495c:	40023800 	.word	0x40023800
 8004960:	0800e5c4 	.word	0x0800e5c4
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800496c:	2b00      	cmp	r3, #0
 800496e:	d01f      	beq.n	80049b0 <HAL_RCCEx_PeriphCLKConfig+0x814>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004974:	2b00      	cmp	r3, #0
 8004976:	d010      	beq.n	800499a <HAL_RCCEx_PeriphCLKConfig+0x7fe>
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800497c:	2b40      	cmp	r3, #64	; 0x40
 800497e:	d00c      	beq.n	800499a <HAL_RCCEx_PeriphCLKConfig+0x7fe>
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004984:	2bc0      	cmp	r3, #192	; 0xc0
 8004986:	d008      	beq.n	800499a <HAL_RCCEx_PeriphCLKConfig+0x7fe>
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800498c:	2b80      	cmp	r3, #128	; 0x80
 800498e:	d004      	beq.n	800499a <HAL_RCCEx_PeriphCLKConfig+0x7fe>
 8004990:	f240 1141 	movw	r1, #321	; 0x141
 8004994:	48a0      	ldr	r0, [pc, #640]	; (8004c18 <HAL_RCCEx_PeriphCLKConfig+0xa7c>)
 8004996:	f7fc fefc 	bl	8001792 <assert_failed>

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800499a:	4ba0      	ldr	r3, [pc, #640]	; (8004c1c <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 800499c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049a0:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80049a8:	499c      	ldr	r1, [pc, #624]	; (8004c1c <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 80049aa:	4313      	orrs	r3, r2
 80049ac:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d022      	beq.n	8004a02 <HAL_RCCEx_PeriphCLKConfig+0x866>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d013      	beq.n	80049ec <HAL_RCCEx_PeriphCLKConfig+0x850>
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049c8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80049cc:	d00e      	beq.n	80049ec <HAL_RCCEx_PeriphCLKConfig+0x850>
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049d2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80049d6:	d009      	beq.n	80049ec <HAL_RCCEx_PeriphCLKConfig+0x850>
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049dc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80049e0:	d004      	beq.n	80049ec <HAL_RCCEx_PeriphCLKConfig+0x850>
 80049e2:	f240 114b 	movw	r1, #331	; 0x14b
 80049e6:	488c      	ldr	r0, [pc, #560]	; (8004c18 <HAL_RCCEx_PeriphCLKConfig+0xa7c>)
 80049e8:	f7fc fed3 	bl	8001792 <assert_failed>

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80049ec:	4b8b      	ldr	r3, [pc, #556]	; (8004c1c <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 80049ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049f2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049fa:	4988      	ldr	r1, [pc, #544]	; (8004c1c <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 80049fc:	4313      	orrs	r3, r2
 80049fe:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d022      	beq.n	8004a54 <HAL_RCCEx_PeriphCLKConfig+0x8b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d013      	beq.n	8004a3e <HAL_RCCEx_PeriphCLKConfig+0x8a2>
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a1a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a1e:	d00e      	beq.n	8004a3e <HAL_RCCEx_PeriphCLKConfig+0x8a2>
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a24:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004a28:	d009      	beq.n	8004a3e <HAL_RCCEx_PeriphCLKConfig+0x8a2>
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a2e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004a32:	d004      	beq.n	8004a3e <HAL_RCCEx_PeriphCLKConfig+0x8a2>
 8004a34:	f240 1155 	movw	r1, #341	; 0x155
 8004a38:	4877      	ldr	r0, [pc, #476]	; (8004c18 <HAL_RCCEx_PeriphCLKConfig+0xa7c>)
 8004a3a:	f7fc feaa 	bl	8001792 <assert_failed>

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8004a3e:	4b77      	ldr	r3, [pc, #476]	; (8004c1c <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 8004a40:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a44:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a4c:	4973      	ldr	r1, [pc, #460]	; (8004c1c <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 8004a4e:	4313      	orrs	r3, r2
 8004a50:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d022      	beq.n	8004aa6 <HAL_RCCEx_PeriphCLKConfig+0x90a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d013      	beq.n	8004a90 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a6c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a70:	d00e      	beq.n	8004a90 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a76:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004a7a:	d009      	beq.n	8004a90 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a80:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004a84:	d004      	beq.n	8004a90 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
 8004a86:	f240 115f 	movw	r1, #351	; 0x15f
 8004a8a:	4863      	ldr	r0, [pc, #396]	; (8004c18 <HAL_RCCEx_PeriphCLKConfig+0xa7c>)
 8004a8c:	f7fc fe81 	bl	8001792 <assert_failed>

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8004a90:	4b62      	ldr	r3, [pc, #392]	; (8004c1c <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 8004a92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a96:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a9e:	495f      	ldr	r1, [pc, #380]	; (8004c1c <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 8004aa0:	4313      	orrs	r3, r2
 8004aa2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d022      	beq.n	8004af8 <HAL_RCCEx_PeriphCLKConfig+0x95c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d013      	beq.n	8004ae2 <HAL_RCCEx_PeriphCLKConfig+0x946>
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004abe:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004ac2:	d00e      	beq.n	8004ae2 <HAL_RCCEx_PeriphCLKConfig+0x946>
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004ac8:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004acc:	d009      	beq.n	8004ae2 <HAL_RCCEx_PeriphCLKConfig+0x946>
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004ad2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004ad6:	d004      	beq.n	8004ae2 <HAL_RCCEx_PeriphCLKConfig+0x946>
 8004ad8:	f240 1169 	movw	r1, #361	; 0x169
 8004adc:	484e      	ldr	r0, [pc, #312]	; (8004c18 <HAL_RCCEx_PeriphCLKConfig+0xa7c>)
 8004ade:	f7fc fe58 	bl	8001792 <assert_failed>

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8004ae2:	4b4e      	ldr	r3, [pc, #312]	; (8004c1c <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 8004ae4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ae8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004af0:	494a      	ldr	r1, [pc, #296]	; (8004c1c <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 8004af2:	4313      	orrs	r3, r2
 8004af4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d018      	beq.n	8004b36 <HAL_RCCEx_PeriphCLKConfig+0x99a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004b08:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004b0c:	d008      	beq.n	8004b20 <HAL_RCCEx_PeriphCLKConfig+0x984>
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d004      	beq.n	8004b20 <HAL_RCCEx_PeriphCLKConfig+0x984>
 8004b16:	f240 1173 	movw	r1, #371	; 0x173
 8004b1a:	483f      	ldr	r0, [pc, #252]	; (8004c18 <HAL_RCCEx_PeriphCLKConfig+0xa7c>)
 8004b1c:	f7fc fe39 	bl	8001792 <assert_failed>

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004b20:	4b3e      	ldr	r3, [pc, #248]	; (8004c1c <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 8004b22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b26:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004b2e:	493b      	ldr	r1, [pc, #236]	; (8004c1c <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 8004b30:	4313      	orrs	r3, r2
 8004b32:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d01f      	beq.n	8004b82 <HAL_RCCEx_PeriphCLKConfig+0x9e6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004b46:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004b4a:	d008      	beq.n	8004b5e <HAL_RCCEx_PeriphCLKConfig+0x9c2>
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d004      	beq.n	8004b5e <HAL_RCCEx_PeriphCLKConfig+0x9c2>
 8004b54:	f240 117d 	movw	r1, #381	; 0x17d
 8004b58:	482f      	ldr	r0, [pc, #188]	; (8004c18 <HAL_RCCEx_PeriphCLKConfig+0xa7c>)
 8004b5a:	f7fc fe1a 	bl	8001792 <assert_failed>

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8004b5e:	4b2f      	ldr	r3, [pc, #188]	; (8004c1c <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 8004b60:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b64:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004b6c:	492b      	ldr	r1, [pc, #172]	; (8004c1c <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 8004b6e:	4313      	orrs	r3, r2
 8004b70:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004b78:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004b7c:	d101      	bne.n	8004b82 <HAL_RCCEx_PeriphCLKConfig+0x9e6>
    {
      pllsaiused = 1;
 8004b7e:	2301      	movs	r3, #1
 8004b80:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	f003 0308 	and.w	r3, r3, #8
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d001      	beq.n	8004b92 <HAL_RCCEx_PeriphCLKConfig+0x9f6>
  {
    pllsaiused = 1;
 8004b8e:	2301      	movs	r3, #1
 8004b90:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d022      	beq.n	8004be4 <HAL_RCCEx_PeriphCLKConfig+0xa48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d013      	beq.n	8004bce <HAL_RCCEx_PeriphCLKConfig+0xa32>
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004baa:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004bae:	d00e      	beq.n	8004bce <HAL_RCCEx_PeriphCLKConfig+0xa32>
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004bb4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004bb8:	d009      	beq.n	8004bce <HAL_RCCEx_PeriphCLKConfig+0xa32>
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004bbe:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004bc2:	d004      	beq.n	8004bce <HAL_RCCEx_PeriphCLKConfig+0xa32>
 8004bc4:	f240 1195 	movw	r1, #405	; 0x195
 8004bc8:	4813      	ldr	r0, [pc, #76]	; (8004c18 <HAL_RCCEx_PeriphCLKConfig+0xa7c>)
 8004bca:	f7fc fde2 	bl	8001792 <assert_failed>

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004bce:	4b13      	ldr	r3, [pc, #76]	; (8004c1c <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 8004bd0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004bd4:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004bdc:	490f      	ldr	r1, [pc, #60]	; (8004c1c <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 8004bde:	4313      	orrs	r3, r2
 8004be0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d020      	beq.n	8004c32 <HAL_RCCEx_PeriphCLKConfig+0xa96>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004bf6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004bfa:	d009      	beq.n	8004c10 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d004      	beq.n	8004c10 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8004c06:	f240 119f 	movw	r1, #415	; 0x19f
 8004c0a:	4803      	ldr	r0, [pc, #12]	; (8004c18 <HAL_RCCEx_PeriphCLKConfig+0xa7c>)
 8004c0c:	f7fc fdc1 	bl	8001792 <assert_failed>

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004c10:	4b02      	ldr	r3, [pc, #8]	; (8004c1c <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 8004c12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c16:	e003      	b.n	8004c20 <HAL_RCCEx_PeriphCLKConfig+0xa84>
 8004c18:	0800e5c4 	.word	0x0800e5c4
 8004c1c:	40023800 	.word	0x40023800
 8004c20:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004c2a:	4910      	ldr	r1, [pc, #64]	; (8004c6c <HAL_RCCEx_PeriphCLKConfig+0xad0>)
 8004c2c:	4313      	orrs	r3, r2
 8004c2e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004c32:	69fb      	ldr	r3, [r7, #28]
 8004c34:	2b01      	cmp	r3, #1
 8004c36:	d006      	beq.n	8004c46 <HAL_RCCEx_PeriphCLKConfig+0xaaa>
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	f000 8155 	beq.w	8004ef0 <HAL_RCCEx_PeriphCLKConfig+0xd54>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004c46:	4b09      	ldr	r3, [pc, #36]	; (8004c6c <HAL_RCCEx_PeriphCLKConfig+0xad0>)
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	4a08      	ldr	r2, [pc, #32]	; (8004c6c <HAL_RCCEx_PeriphCLKConfig+0xad0>)
 8004c4c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004c50:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004c52:	f7fd f80d 	bl	8001c70 <HAL_GetTick>
 8004c56:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004c58:	e00a      	b.n	8004c70 <HAL_RCCEx_PeriphCLKConfig+0xad4>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004c5a:	f7fd f809 	bl	8001c70 <HAL_GetTick>
 8004c5e:	4602      	mov	r2, r0
 8004c60:	697b      	ldr	r3, [r7, #20]
 8004c62:	1ad3      	subs	r3, r2, r3
 8004c64:	2b64      	cmp	r3, #100	; 0x64
 8004c66:	d903      	bls.n	8004c70 <HAL_RCCEx_PeriphCLKConfig+0xad4>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004c68:	2303      	movs	r3, #3
 8004c6a:	e273      	b.n	8005154 <HAL_RCCEx_PeriphCLKConfig+0xfb8>
 8004c6c:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004c70:	4b9a      	ldr	r3, [pc, #616]	; (8004edc <HAL_RCCEx_PeriphCLKConfig+0xd40>)
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d1ee      	bne.n	8004c5a <HAL_RCCEx_PeriphCLKConfig+0xabe>
      }
    }

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	685b      	ldr	r3, [r3, #4]
 8004c80:	2b31      	cmp	r3, #49	; 0x31
 8004c82:	d904      	bls.n	8004c8e <HAL_RCCEx_PeriphCLKConfig+0xaf2>
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	685b      	ldr	r3, [r3, #4]
 8004c88:	f5b3 7fd8 	cmp.w	r3, #432	; 0x1b0
 8004c8c:	d904      	bls.n	8004c98 <HAL_RCCEx_PeriphCLKConfig+0xafc>
 8004c8e:	f44f 71ed 	mov.w	r1, #474	; 0x1da
 8004c92:	4893      	ldr	r0, [pc, #588]	; (8004ee0 <HAL_RCCEx_PeriphCLKConfig+0xd44>)
 8004c94:	f7fc fd7d 	bl	8001792 <assert_failed>

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	f003 0301 	and.w	r3, r3, #1
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d02e      	beq.n	8004d02 <HAL_RCCEx_PeriphCLKConfig+0xb66>
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d12a      	bne.n	8004d02 <HAL_RCCEx_PeriphCLKConfig+0xb66>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	689b      	ldr	r3, [r3, #8]
 8004cb0:	2b01      	cmp	r3, #1
 8004cb2:	d903      	bls.n	8004cbc <HAL_RCCEx_PeriphCLKConfig+0xb20>
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	689b      	ldr	r3, [r3, #8]
 8004cb8:	2b07      	cmp	r3, #7
 8004cba:	d904      	bls.n	8004cc6 <HAL_RCCEx_PeriphCLKConfig+0xb2a>
 8004cbc:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 8004cc0:	4887      	ldr	r0, [pc, #540]	; (8004ee0 <HAL_RCCEx_PeriphCLKConfig+0xd44>)
 8004cc2:	f7fc fd66 	bl	8001792 <assert_failed>

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004cc6:	4b85      	ldr	r3, [pc, #532]	; (8004edc <HAL_RCCEx_PeriphCLKConfig+0xd40>)
 8004cc8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004ccc:	0c1b      	lsrs	r3, r3, #16
 8004cce:	f003 0303 	and.w	r3, r3, #3
 8004cd2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004cd4:	4b81      	ldr	r3, [pc, #516]	; (8004edc <HAL_RCCEx_PeriphCLKConfig+0xd40>)
 8004cd6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004cda:	0e1b      	lsrs	r3, r3, #24
 8004cdc:	f003 030f 	and.w	r3, r3, #15
 8004ce0:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	685b      	ldr	r3, [r3, #4]
 8004ce6:	019a      	lsls	r2, r3, #6
 8004ce8:	693b      	ldr	r3, [r7, #16]
 8004cea:	041b      	lsls	r3, r3, #16
 8004cec:	431a      	orrs	r2, r3
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	061b      	lsls	r3, r3, #24
 8004cf2:	431a      	orrs	r2, r3
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	689b      	ldr	r3, [r3, #8]
 8004cf8:	071b      	lsls	r3, r3, #28
 8004cfa:	4978      	ldr	r1, [pc, #480]	; (8004edc <HAL_RCCEx_PeriphCLKConfig+0xd40>)
 8004cfc:	4313      	orrs	r3, r2
 8004cfe:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d004      	beq.n	8004d18 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d12:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004d16:	d00a      	beq.n	8004d2e <HAL_RCCEx_PeriphCLKConfig+0xb92>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d048      	beq.n	8004db6 <HAL_RCCEx_PeriphCLKConfig+0xc1a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d28:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004d2c:	d143      	bne.n	8004db6 <HAL_RCCEx_PeriphCLKConfig+0xc1a>
    {
      /* Check for PLLI2S Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	68db      	ldr	r3, [r3, #12]
 8004d32:	2b01      	cmp	r3, #1
 8004d34:	d903      	bls.n	8004d3e <HAL_RCCEx_PeriphCLKConfig+0xba2>
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	68db      	ldr	r3, [r3, #12]
 8004d3a:	2b0f      	cmp	r3, #15
 8004d3c:	d904      	bls.n	8004d48 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 8004d3e:	f44f 71f8 	mov.w	r1, #496	; 0x1f0
 8004d42:	4867      	ldr	r0, [pc, #412]	; (8004ee0 <HAL_RCCEx_PeriphCLKConfig+0xd44>)
 8004d44:	f7fc fd25 	bl	8001792 <assert_failed>
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d003      	beq.n	8004d58 <HAL_RCCEx_PeriphCLKConfig+0xbbc>
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d54:	2b20      	cmp	r3, #32
 8004d56:	d904      	bls.n	8004d62 <HAL_RCCEx_PeriphCLKConfig+0xbc6>
 8004d58:	f44f 71f9 	mov.w	r1, #498	; 0x1f2
 8004d5c:	4860      	ldr	r0, [pc, #384]	; (8004ee0 <HAL_RCCEx_PeriphCLKConfig+0xd44>)
 8004d5e:	f7fc fd18 	bl	8001792 <assert_failed>

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004d62:	4b5e      	ldr	r3, [pc, #376]	; (8004edc <HAL_RCCEx_PeriphCLKConfig+0xd40>)
 8004d64:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004d68:	0c1b      	lsrs	r3, r3, #16
 8004d6a:	f003 0303 	and.w	r3, r3, #3
 8004d6e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004d70:	4b5a      	ldr	r3, [pc, #360]	; (8004edc <HAL_RCCEx_PeriphCLKConfig+0xd40>)
 8004d72:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004d76:	0f1b      	lsrs	r3, r3, #28
 8004d78:	f003 0307 	and.w	r3, r3, #7
 8004d7c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	685b      	ldr	r3, [r3, #4]
 8004d82:	019a      	lsls	r2, r3, #6
 8004d84:	693b      	ldr	r3, [r7, #16]
 8004d86:	041b      	lsls	r3, r3, #16
 8004d88:	431a      	orrs	r2, r3
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	68db      	ldr	r3, [r3, #12]
 8004d8e:	061b      	lsls	r3, r3, #24
 8004d90:	431a      	orrs	r2, r3
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	071b      	lsls	r3, r3, #28
 8004d96:	4951      	ldr	r1, [pc, #324]	; (8004edc <HAL_RCCEx_PeriphCLKConfig+0xd40>)
 8004d98:	4313      	orrs	r3, r2
 8004d9a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004d9e:	4b4f      	ldr	r3, [pc, #316]	; (8004edc <HAL_RCCEx_PeriphCLKConfig+0xd40>)
 8004da0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004da4:	f023 021f 	bic.w	r2, r3, #31
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dac:	3b01      	subs	r3, #1
 8004dae:	494b      	ldr	r1, [pc, #300]	; (8004edc <HAL_RCCEx_PeriphCLKConfig+0xd40>)
 8004db0:	4313      	orrs	r3, r2
 8004db2:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d032      	beq.n	8004e28 <HAL_RCCEx_PeriphCLKConfig+0xc8c>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	691b      	ldr	r3, [r3, #16]
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d010      	beq.n	8004dec <HAL_RCCEx_PeriphCLKConfig+0xc50>
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	691b      	ldr	r3, [r3, #16]
 8004dce:	2b01      	cmp	r3, #1
 8004dd0:	d00c      	beq.n	8004dec <HAL_RCCEx_PeriphCLKConfig+0xc50>
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	691b      	ldr	r3, [r3, #16]
 8004dd6:	2b02      	cmp	r3, #2
 8004dd8:	d008      	beq.n	8004dec <HAL_RCCEx_PeriphCLKConfig+0xc50>
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	691b      	ldr	r3, [r3, #16]
 8004dde:	2b03      	cmp	r3, #3
 8004de0:	d004      	beq.n	8004dec <HAL_RCCEx_PeriphCLKConfig+0xc50>
 8004de2:	f240 2105 	movw	r1, #517	; 0x205
 8004de6:	483e      	ldr	r0, [pc, #248]	; (8004ee0 <HAL_RCCEx_PeriphCLKConfig+0xd44>)
 8004de8:	f7fc fcd3 	bl	8001792 <assert_failed>

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004dec:	4b3b      	ldr	r3, [pc, #236]	; (8004edc <HAL_RCCEx_PeriphCLKConfig+0xd40>)
 8004dee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004df2:	0e1b      	lsrs	r3, r3, #24
 8004df4:	f003 030f 	and.w	r3, r3, #15
 8004df8:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004dfa:	4b38      	ldr	r3, [pc, #224]	; (8004edc <HAL_RCCEx_PeriphCLKConfig+0xd40>)
 8004dfc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004e00:	0f1b      	lsrs	r3, r3, #28
 8004e02:	f003 0307 	and.w	r3, r3, #7
 8004e06:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	685b      	ldr	r3, [r3, #4]
 8004e0c:	019a      	lsls	r2, r3, #6
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	691b      	ldr	r3, [r3, #16]
 8004e12:	041b      	lsls	r3, r3, #16
 8004e14:	431a      	orrs	r2, r3
 8004e16:	693b      	ldr	r3, [r7, #16]
 8004e18:	061b      	lsls	r3, r3, #24
 8004e1a:	431a      	orrs	r2, r3
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	071b      	lsls	r3, r3, #28
 8004e20:	492e      	ldr	r1, [pc, #184]	; (8004edc <HAL_RCCEx_PeriphCLKConfig+0xd40>)
 8004e22:	4313      	orrs	r3, r2
 8004e24:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d040      	beq.n	8004eb6 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    {
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	691b      	ldr	r3, [r3, #16]
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d010      	beq.n	8004e5e <HAL_RCCEx_PeriphCLKConfig+0xcc2>
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	691b      	ldr	r3, [r3, #16]
 8004e40:	2b01      	cmp	r3, #1
 8004e42:	d00c      	beq.n	8004e5e <HAL_RCCEx_PeriphCLKConfig+0xcc2>
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	691b      	ldr	r3, [r3, #16]
 8004e48:	2b02      	cmp	r3, #2
 8004e4a:	d008      	beq.n	8004e5e <HAL_RCCEx_PeriphCLKConfig+0xcc2>
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	691b      	ldr	r3, [r3, #16]
 8004e50:	2b03      	cmp	r3, #3
 8004e52:	d004      	beq.n	8004e5e <HAL_RCCEx_PeriphCLKConfig+0xcc2>
 8004e54:	f44f 7105 	mov.w	r1, #532	; 0x214
 8004e58:	4821      	ldr	r0, [pc, #132]	; (8004ee0 <HAL_RCCEx_PeriphCLKConfig+0xd44>)
 8004e5a:	f7fc fc9a 	bl	8001792 <assert_failed>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	689b      	ldr	r3, [r3, #8]
 8004e62:	2b01      	cmp	r3, #1
 8004e64:	d903      	bls.n	8004e6e <HAL_RCCEx_PeriphCLKConfig+0xcd2>
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	689b      	ldr	r3, [r3, #8]
 8004e6a:	2b07      	cmp	r3, #7
 8004e6c:	d904      	bls.n	8004e78 <HAL_RCCEx_PeriphCLKConfig+0xcdc>
 8004e6e:	f240 2115 	movw	r1, #533	; 0x215
 8004e72:	481b      	ldr	r0, [pc, #108]	; (8004ee0 <HAL_RCCEx_PeriphCLKConfig+0xd44>)
 8004e74:	f7fc fc8d 	bl	8001792 <assert_failed>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	68db      	ldr	r3, [r3, #12]
 8004e7c:	2b01      	cmp	r3, #1
 8004e7e:	d903      	bls.n	8004e88 <HAL_RCCEx_PeriphCLKConfig+0xcec>
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	68db      	ldr	r3, [r3, #12]
 8004e84:	2b0f      	cmp	r3, #15
 8004e86:	d904      	bls.n	8004e92 <HAL_RCCEx_PeriphCLKConfig+0xcf6>
 8004e88:	f240 2116 	movw	r1, #534	; 0x216
 8004e8c:	4814      	ldr	r0, [pc, #80]	; (8004ee0 <HAL_RCCEx_PeriphCLKConfig+0xd44>)
 8004e8e:	f7fc fc80 	bl	8001792 <assert_failed>

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	685b      	ldr	r3, [r3, #4]
 8004e96:	019a      	lsls	r2, r3, #6
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	691b      	ldr	r3, [r3, #16]
 8004e9c:	041b      	lsls	r3, r3, #16
 8004e9e:	431a      	orrs	r2, r3
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	68db      	ldr	r3, [r3, #12]
 8004ea4:	061b      	lsls	r3, r3, #24
 8004ea6:	431a      	orrs	r2, r3
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	689b      	ldr	r3, [r3, #8]
 8004eac:	071b      	lsls	r3, r3, #28
 8004eae:	490b      	ldr	r1, [pc, #44]	; (8004edc <HAL_RCCEx_PeriphCLKConfig+0xd40>)
 8004eb0:	4313      	orrs	r3, r2
 8004eb2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004eb6:	4b09      	ldr	r3, [pc, #36]	; (8004edc <HAL_RCCEx_PeriphCLKConfig+0xd40>)
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	4a08      	ldr	r2, [pc, #32]	; (8004edc <HAL_RCCEx_PeriphCLKConfig+0xd40>)
 8004ebc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004ec0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004ec2:	f7fc fed5 	bl	8001c70 <HAL_GetTick>
 8004ec6:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004ec8:	e00c      	b.n	8004ee4 <HAL_RCCEx_PeriphCLKConfig+0xd48>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004eca:	f7fc fed1 	bl	8001c70 <HAL_GetTick>
 8004ece:	4602      	mov	r2, r0
 8004ed0:	697b      	ldr	r3, [r7, #20]
 8004ed2:	1ad3      	subs	r3, r2, r3
 8004ed4:	2b64      	cmp	r3, #100	; 0x64
 8004ed6:	d905      	bls.n	8004ee4 <HAL_RCCEx_PeriphCLKConfig+0xd48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004ed8:	2303      	movs	r3, #3
 8004eda:	e13b      	b.n	8005154 <HAL_RCCEx_PeriphCLKConfig+0xfb8>
 8004edc:	40023800 	.word	0x40023800
 8004ee0:	0800e5c4 	.word	0x0800e5c4
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004ee4:	4b9d      	ldr	r3, [pc, #628]	; (800515c <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d0ec      	beq.n	8004eca <HAL_RCCEx_PeriphCLKConfig+0xd2e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8004ef0:	69bb      	ldr	r3, [r7, #24]
 8004ef2:	2b01      	cmp	r3, #1
 8004ef4:	f040 812d 	bne.w	8005152 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004ef8:	4b98      	ldr	r3, [pc, #608]	; (800515c <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	4a97      	ldr	r2, [pc, #604]	; (800515c <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 8004efe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004f02:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004f04:	f7fc feb4 	bl	8001c70 <HAL_GetTick>
 8004f08:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004f0a:	e008      	b.n	8004f1e <HAL_RCCEx_PeriphCLKConfig+0xd82>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004f0c:	f7fc feb0 	bl	8001c70 <HAL_GetTick>
 8004f10:	4602      	mov	r2, r0
 8004f12:	697b      	ldr	r3, [r7, #20]
 8004f14:	1ad3      	subs	r3, r2, r3
 8004f16:	2b64      	cmp	r3, #100	; 0x64
 8004f18:	d901      	bls.n	8004f1e <HAL_RCCEx_PeriphCLKConfig+0xd82>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004f1a:	2303      	movs	r3, #3
 8004f1c:	e11a      	b.n	8005154 <HAL_RCCEx_PeriphCLKConfig+0xfb8>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004f1e:	4b8f      	ldr	r3, [pc, #572]	; (800515c <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004f26:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004f2a:	d0ef      	beq.n	8004f0c <HAL_RCCEx_PeriphCLKConfig+0xd70>
      }
    }

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	695b      	ldr	r3, [r3, #20]
 8004f30:	2b31      	cmp	r3, #49	; 0x31
 8004f32:	d904      	bls.n	8004f3e <HAL_RCCEx_PeriphCLKConfig+0xda2>
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	695b      	ldr	r3, [r3, #20]
 8004f38:	f5b3 7fd8 	cmp.w	r3, #432	; 0x1b0
 8004f3c:	d904      	bls.n	8004f48 <HAL_RCCEx_PeriphCLKConfig+0xdac>
 8004f3e:	f44f 7111 	mov.w	r1, #580	; 0x244
 8004f42:	4887      	ldr	r0, [pc, #540]	; (8005160 <HAL_RCCEx_PeriphCLKConfig+0xfc4>)
 8004f44:	f7fc fc25 	bl	8001792 <assert_failed>

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d003      	beq.n	8004f5c <HAL_RCCEx_PeriphCLKConfig+0xdc0>
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d009      	beq.n	8004f70 <HAL_RCCEx_PeriphCLKConfig+0xdd4>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d048      	beq.n	8004ffa <HAL_RCCEx_PeriphCLKConfig+0xe5e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d144      	bne.n	8004ffa <HAL_RCCEx_PeriphCLKConfig+0xe5e>
    {
      /* check for PLLSAIQ Parameter */
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	699b      	ldr	r3, [r3, #24]
 8004f74:	2b01      	cmp	r3, #1
 8004f76:	d903      	bls.n	8004f80 <HAL_RCCEx_PeriphCLKConfig+0xde4>
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	699b      	ldr	r3, [r3, #24]
 8004f7c:	2b0f      	cmp	r3, #15
 8004f7e:	d904      	bls.n	8004f8a <HAL_RCCEx_PeriphCLKConfig+0xdee>
 8004f80:	f240 214b 	movw	r1, #587	; 0x24b
 8004f84:	4876      	ldr	r0, [pc, #472]	; (8005160 <HAL_RCCEx_PeriphCLKConfig+0xfc4>)
 8004f86:	f7fc fc04 	bl	8001792 <assert_failed>
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d003      	beq.n	8004f9a <HAL_RCCEx_PeriphCLKConfig+0xdfe>
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f96:	2b20      	cmp	r3, #32
 8004f98:	d904      	bls.n	8004fa4 <HAL_RCCEx_PeriphCLKConfig+0xe08>
 8004f9a:	f240 214d 	movw	r1, #589	; 0x24d
 8004f9e:	4870      	ldr	r0, [pc, #448]	; (8005160 <HAL_RCCEx_PeriphCLKConfig+0xfc4>)
 8004fa0:	f7fc fbf7 	bl	8001792 <assert_failed>

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004fa4:	4b6d      	ldr	r3, [pc, #436]	; (800515c <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 8004fa6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004faa:	0c1b      	lsrs	r3, r3, #16
 8004fac:	f003 0303 	and.w	r3, r3, #3
 8004fb0:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004fb2:	4b6a      	ldr	r3, [pc, #424]	; (800515c <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 8004fb4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004fb8:	0f1b      	lsrs	r3, r3, #28
 8004fba:	f003 0307 	and.w	r3, r3, #7
 8004fbe:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	695b      	ldr	r3, [r3, #20]
 8004fc4:	019a      	lsls	r2, r3, #6
 8004fc6:	693b      	ldr	r3, [r7, #16]
 8004fc8:	041b      	lsls	r3, r3, #16
 8004fca:	431a      	orrs	r2, r3
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	699b      	ldr	r3, [r3, #24]
 8004fd0:	061b      	lsls	r3, r3, #24
 8004fd2:	431a      	orrs	r2, r3
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	071b      	lsls	r3, r3, #28
 8004fd8:	4960      	ldr	r1, [pc, #384]	; (800515c <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 8004fda:	4313      	orrs	r3, r2
 8004fdc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004fe0:	4b5e      	ldr	r3, [pc, #376]	; (800515c <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 8004fe2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004fe6:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fee:	3b01      	subs	r3, #1
 8004ff0:	021b      	lsls	r3, r3, #8
 8004ff2:	495a      	ldr	r1, [pc, #360]	; (800515c <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 8004ff4:	4313      	orrs	r3, r2
 8004ff6:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005002:	2b00      	cmp	r3, #0
 8005004:	d037      	beq.n	8005076 <HAL_RCCEx_PeriphCLKConfig+0xeda>
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800500a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800500e:	d132      	bne.n	8005076 <HAL_RCCEx_PeriphCLKConfig+0xeda>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	6a1b      	ldr	r3, [r3, #32]
 8005014:	2b00      	cmp	r3, #0
 8005016:	d010      	beq.n	800503a <HAL_RCCEx_PeriphCLKConfig+0xe9e>
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	6a1b      	ldr	r3, [r3, #32]
 800501c:	2b01      	cmp	r3, #1
 800501e:	d00c      	beq.n	800503a <HAL_RCCEx_PeriphCLKConfig+0xe9e>
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	6a1b      	ldr	r3, [r3, #32]
 8005024:	2b02      	cmp	r3, #2
 8005026:	d008      	beq.n	800503a <HAL_RCCEx_PeriphCLKConfig+0xe9e>
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	6a1b      	ldr	r3, [r3, #32]
 800502c:	2b03      	cmp	r3, #3
 800502e:	d004      	beq.n	800503a <HAL_RCCEx_PeriphCLKConfig+0xe9e>
 8005030:	f44f 7118 	mov.w	r1, #608	; 0x260
 8005034:	484a      	ldr	r0, [pc, #296]	; (8005160 <HAL_RCCEx_PeriphCLKConfig+0xfc4>)
 8005036:	f7fc fbac 	bl	8001792 <assert_failed>
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800503a:	4b48      	ldr	r3, [pc, #288]	; (800515c <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 800503c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005040:	0e1b      	lsrs	r3, r3, #24
 8005042:	f003 030f 	and.w	r3, r3, #15
 8005046:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005048:	4b44      	ldr	r3, [pc, #272]	; (800515c <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 800504a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800504e:	0f1b      	lsrs	r3, r3, #28
 8005050:	f003 0307 	and.w	r3, r3, #7
 8005054:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	695b      	ldr	r3, [r3, #20]
 800505a:	019a      	lsls	r2, r3, #6
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	6a1b      	ldr	r3, [r3, #32]
 8005060:	041b      	lsls	r3, r3, #16
 8005062:	431a      	orrs	r2, r3
 8005064:	693b      	ldr	r3, [r7, #16]
 8005066:	061b      	lsls	r3, r3, #24
 8005068:	431a      	orrs	r2, r3
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	071b      	lsls	r3, r3, #28
 800506e:	493b      	ldr	r1, [pc, #236]	; (800515c <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 8005070:	4313      	orrs	r3, r2
 8005072:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	f003 0308 	and.w	r3, r3, #8
 800507e:	2b00      	cmp	r3, #0
 8005080:	d04d      	beq.n	800511e <HAL_RCCEx_PeriphCLKConfig+0xf82>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	69db      	ldr	r3, [r3, #28]
 8005086:	2b01      	cmp	r3, #1
 8005088:	d903      	bls.n	8005092 <HAL_RCCEx_PeriphCLKConfig+0xef6>
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	69db      	ldr	r3, [r3, #28]
 800508e:	2b07      	cmp	r3, #7
 8005090:	d904      	bls.n	800509c <HAL_RCCEx_PeriphCLKConfig+0xf00>
 8005092:	f240 216f 	movw	r1, #623	; 0x26f
 8005096:	4832      	ldr	r0, [pc, #200]	; (8005160 <HAL_RCCEx_PeriphCLKConfig+0xfc4>)
 8005098:	f7fc fb7b 	bl	8001792 <assert_failed>
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d013      	beq.n	80050cc <HAL_RCCEx_PeriphCLKConfig+0xf30>
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80050ac:	d00e      	beq.n	80050cc <HAL_RCCEx_PeriphCLKConfig+0xf30>
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050b2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80050b6:	d009      	beq.n	80050cc <HAL_RCCEx_PeriphCLKConfig+0xf30>
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050bc:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80050c0:	d004      	beq.n	80050cc <HAL_RCCEx_PeriphCLKConfig+0xf30>
 80050c2:	f44f 711c 	mov.w	r1, #624	; 0x270
 80050c6:	4826      	ldr	r0, [pc, #152]	; (8005160 <HAL_RCCEx_PeriphCLKConfig+0xfc4>)
 80050c8:	f7fc fb63 	bl	8001792 <assert_failed>

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80050cc:	4b23      	ldr	r3, [pc, #140]	; (800515c <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 80050ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050d2:	0e1b      	lsrs	r3, r3, #24
 80050d4:	f003 030f 	and.w	r3, r3, #15
 80050d8:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80050da:	4b20      	ldr	r3, [pc, #128]	; (800515c <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 80050dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050e0:	0c1b      	lsrs	r3, r3, #16
 80050e2:	f003 0303 	and.w	r3, r3, #3
 80050e6:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	695b      	ldr	r3, [r3, #20]
 80050ec:	019a      	lsls	r2, r3, #6
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	041b      	lsls	r3, r3, #16
 80050f2:	431a      	orrs	r2, r3
 80050f4:	693b      	ldr	r3, [r7, #16]
 80050f6:	061b      	lsls	r3, r3, #24
 80050f8:	431a      	orrs	r2, r3
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	69db      	ldr	r3, [r3, #28]
 80050fe:	071b      	lsls	r3, r3, #28
 8005100:	4916      	ldr	r1, [pc, #88]	; (800515c <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 8005102:	4313      	orrs	r3, r2
 8005104:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8005108:	4b14      	ldr	r3, [pc, #80]	; (800515c <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 800510a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800510e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005116:	4911      	ldr	r1, [pc, #68]	; (800515c <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 8005118:	4313      	orrs	r3, r2
 800511a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800511e:	4b0f      	ldr	r3, [pc, #60]	; (800515c <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	4a0e      	ldr	r2, [pc, #56]	; (800515c <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 8005124:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005128:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800512a:	f7fc fda1 	bl	8001c70 <HAL_GetTick>
 800512e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005130:	e008      	b.n	8005144 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005132:	f7fc fd9d 	bl	8001c70 <HAL_GetTick>
 8005136:	4602      	mov	r2, r0
 8005138:	697b      	ldr	r3, [r7, #20]
 800513a:	1ad3      	subs	r3, r2, r3
 800513c:	2b64      	cmp	r3, #100	; 0x64
 800513e:	d901      	bls.n	8005144 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005140:	2303      	movs	r3, #3
 8005142:	e007      	b.n	8005154 <HAL_RCCEx_PeriphCLKConfig+0xfb8>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005144:	4b05      	ldr	r3, [pc, #20]	; (800515c <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800514c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005150:	d1ef      	bne.n	8005132 <HAL_RCCEx_PeriphCLKConfig+0xf96>
      }
    }
  }
  return HAL_OK;
 8005152:	2300      	movs	r3, #0
}
 8005154:	4618      	mov	r0, r3
 8005156:	3720      	adds	r7, #32
 8005158:	46bd      	mov	sp, r7
 800515a:	bd80      	pop	{r7, pc}
 800515c:	40023800 	.word	0x40023800
 8005160:	0800e5c4 	.word	0x0800e5c4

08005164 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005164:	b580      	push	{r7, lr}
 8005166:	b082      	sub	sp, #8
 8005168:	af00      	add	r7, sp, #0
 800516a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	2b00      	cmp	r3, #0
 8005170:	d101      	bne.n	8005176 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005172:	2301      	movs	r3, #1
 8005174:	e09f      	b.n	80052b6 <HAL_UART_Init+0x152>
  }

  if (huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	699b      	ldr	r3, [r3, #24]
 800517a:	2b00      	cmp	r3, #0
 800517c:	d02d      	beq.n	80051da <HAL_UART_Init+0x76>
  {
    /* Check the parameters */
    assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	4a4f      	ldr	r2, [pc, #316]	; (80052c0 <HAL_UART_Init+0x15c>)
 8005184:	4293      	cmp	r3, r2
 8005186:	d055      	beq.n	8005234 <HAL_UART_Init+0xd0>
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	4a4d      	ldr	r2, [pc, #308]	; (80052c4 <HAL_UART_Init+0x160>)
 800518e:	4293      	cmp	r3, r2
 8005190:	d050      	beq.n	8005234 <HAL_UART_Init+0xd0>
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	4a4c      	ldr	r2, [pc, #304]	; (80052c8 <HAL_UART_Init+0x164>)
 8005198:	4293      	cmp	r3, r2
 800519a:	d04b      	beq.n	8005234 <HAL_UART_Init+0xd0>
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	4a4a      	ldr	r2, [pc, #296]	; (80052cc <HAL_UART_Init+0x168>)
 80051a2:	4293      	cmp	r3, r2
 80051a4:	d046      	beq.n	8005234 <HAL_UART_Init+0xd0>
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	4a49      	ldr	r2, [pc, #292]	; (80052d0 <HAL_UART_Init+0x16c>)
 80051ac:	4293      	cmp	r3, r2
 80051ae:	d041      	beq.n	8005234 <HAL_UART_Init+0xd0>
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	4a47      	ldr	r2, [pc, #284]	; (80052d4 <HAL_UART_Init+0x170>)
 80051b6:	4293      	cmp	r3, r2
 80051b8:	d03c      	beq.n	8005234 <HAL_UART_Init+0xd0>
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	4a46      	ldr	r2, [pc, #280]	; (80052d8 <HAL_UART_Init+0x174>)
 80051c0:	4293      	cmp	r3, r2
 80051c2:	d037      	beq.n	8005234 <HAL_UART_Init+0xd0>
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	4a44      	ldr	r2, [pc, #272]	; (80052dc <HAL_UART_Init+0x178>)
 80051ca:	4293      	cmp	r3, r2
 80051cc:	d032      	beq.n	8005234 <HAL_UART_Init+0xd0>
 80051ce:	f44f 7196 	mov.w	r1, #300	; 0x12c
 80051d2:	4843      	ldr	r0, [pc, #268]	; (80052e0 <HAL_UART_Init+0x17c>)
 80051d4:	f7fc fadd 	bl	8001792 <assert_failed>
 80051d8:	e02c      	b.n	8005234 <HAL_UART_Init+0xd0>
  }
  else
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	4a38      	ldr	r2, [pc, #224]	; (80052c0 <HAL_UART_Init+0x15c>)
 80051e0:	4293      	cmp	r3, r2
 80051e2:	d027      	beq.n	8005234 <HAL_UART_Init+0xd0>
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	4a36      	ldr	r2, [pc, #216]	; (80052c4 <HAL_UART_Init+0x160>)
 80051ea:	4293      	cmp	r3, r2
 80051ec:	d022      	beq.n	8005234 <HAL_UART_Init+0xd0>
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	4a35      	ldr	r2, [pc, #212]	; (80052c8 <HAL_UART_Init+0x164>)
 80051f4:	4293      	cmp	r3, r2
 80051f6:	d01d      	beq.n	8005234 <HAL_UART_Init+0xd0>
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	4a33      	ldr	r2, [pc, #204]	; (80052cc <HAL_UART_Init+0x168>)
 80051fe:	4293      	cmp	r3, r2
 8005200:	d018      	beq.n	8005234 <HAL_UART_Init+0xd0>
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	4a32      	ldr	r2, [pc, #200]	; (80052d0 <HAL_UART_Init+0x16c>)
 8005208:	4293      	cmp	r3, r2
 800520a:	d013      	beq.n	8005234 <HAL_UART_Init+0xd0>
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	4a30      	ldr	r2, [pc, #192]	; (80052d4 <HAL_UART_Init+0x170>)
 8005212:	4293      	cmp	r3, r2
 8005214:	d00e      	beq.n	8005234 <HAL_UART_Init+0xd0>
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	4a2f      	ldr	r2, [pc, #188]	; (80052d8 <HAL_UART_Init+0x174>)
 800521c:	4293      	cmp	r3, r2
 800521e:	d009      	beq.n	8005234 <HAL_UART_Init+0xd0>
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	4a2d      	ldr	r2, [pc, #180]	; (80052dc <HAL_UART_Init+0x178>)
 8005226:	4293      	cmp	r3, r2
 8005228:	d004      	beq.n	8005234 <HAL_UART_Init+0xd0>
 800522a:	f240 1131 	movw	r1, #305	; 0x131
 800522e:	482c      	ldr	r0, [pc, #176]	; (80052e0 <HAL_UART_Init+0x17c>)
 8005230:	f7fc faaf 	bl	8001792 <assert_failed>
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005238:	2b00      	cmp	r3, #0
 800523a:	d106      	bne.n	800524a <HAL_UART_Init+0xe6>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	2200      	movs	r2, #0
 8005240:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005244:	6878      	ldr	r0, [r7, #4]
 8005246:	f7fc fc0f 	bl	8001a68 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	2224      	movs	r2, #36	; 0x24
 800524e:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	681a      	ldr	r2, [r3, #0]
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	f022 0201 	bic.w	r2, r2, #1
 800525e:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005260:	6878      	ldr	r0, [r7, #4]
 8005262:	f000 fbb5 	bl	80059d0 <UART_SetConfig>
 8005266:	4603      	mov	r3, r0
 8005268:	2b01      	cmp	r3, #1
 800526a:	d101      	bne.n	8005270 <HAL_UART_Init+0x10c>
  {
    return HAL_ERROR;
 800526c:	2301      	movs	r3, #1
 800526e:	e022      	b.n	80052b6 <HAL_UART_Init+0x152>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005274:	2b00      	cmp	r3, #0
 8005276:	d002      	beq.n	800527e <HAL_UART_Init+0x11a>
  {
    UART_AdvFeatureConfig(huart);
 8005278:	6878      	ldr	r0, [r7, #4]
 800527a:	f000 fe9f 	bl	8005fbc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	685a      	ldr	r2, [r3, #4]
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800528c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	689a      	ldr	r2, [r3, #8]
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800529c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	681a      	ldr	r2, [r3, #0]
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	f042 0201 	orr.w	r2, r2, #1
 80052ac:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80052ae:	6878      	ldr	r0, [r7, #4]
 80052b0:	f000 ffdc 	bl	800626c <UART_CheckIdleState>
 80052b4:	4603      	mov	r3, r0
}
 80052b6:	4618      	mov	r0, r3
 80052b8:	3708      	adds	r7, #8
 80052ba:	46bd      	mov	sp, r7
 80052bc:	bd80      	pop	{r7, pc}
 80052be:	bf00      	nop
 80052c0:	40011000 	.word	0x40011000
 80052c4:	40004400 	.word	0x40004400
 80052c8:	40004800 	.word	0x40004800
 80052cc:	40004c00 	.word	0x40004c00
 80052d0:	40005000 	.word	0x40005000
 80052d4:	40011400 	.word	0x40011400
 80052d8:	40007800 	.word	0x40007800
 80052dc:	40007c00 	.word	0x40007c00
 80052e0:	0800e600 	.word	0x0800e600

080052e4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80052e4:	b580      	push	{r7, lr}
 80052e6:	b08a      	sub	sp, #40	; 0x28
 80052e8:	af02      	add	r7, sp, #8
 80052ea:	60f8      	str	r0, [r7, #12]
 80052ec:	60b9      	str	r1, [r7, #8]
 80052ee:	603b      	str	r3, [r7, #0]
 80052f0:	4613      	mov	r3, r2
 80052f2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80052f8:	2b20      	cmp	r3, #32
 80052fa:	d171      	bne.n	80053e0 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 80052fc:	68bb      	ldr	r3, [r7, #8]
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d002      	beq.n	8005308 <HAL_UART_Transmit+0x24>
 8005302:	88fb      	ldrh	r3, [r7, #6]
 8005304:	2b00      	cmp	r3, #0
 8005306:	d101      	bne.n	800530c <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8005308:	2301      	movs	r3, #1
 800530a:	e06a      	b.n	80053e2 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	2200      	movs	r2, #0
 8005310:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	2221      	movs	r2, #33	; 0x21
 8005318:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800531a:	f7fc fca9 	bl	8001c70 <HAL_GetTick>
 800531e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	88fa      	ldrh	r2, [r7, #6]
 8005324:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	88fa      	ldrh	r2, [r7, #6]
 800532c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	689b      	ldr	r3, [r3, #8]
 8005334:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005338:	d108      	bne.n	800534c <HAL_UART_Transmit+0x68>
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	691b      	ldr	r3, [r3, #16]
 800533e:	2b00      	cmp	r3, #0
 8005340:	d104      	bne.n	800534c <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8005342:	2300      	movs	r3, #0
 8005344:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005346:	68bb      	ldr	r3, [r7, #8]
 8005348:	61bb      	str	r3, [r7, #24]
 800534a:	e003      	b.n	8005354 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 800534c:	68bb      	ldr	r3, [r7, #8]
 800534e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005350:	2300      	movs	r3, #0
 8005352:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005354:	e02c      	b.n	80053b0 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005356:	683b      	ldr	r3, [r7, #0]
 8005358:	9300      	str	r3, [sp, #0]
 800535a:	697b      	ldr	r3, [r7, #20]
 800535c:	2200      	movs	r2, #0
 800535e:	2180      	movs	r1, #128	; 0x80
 8005360:	68f8      	ldr	r0, [r7, #12]
 8005362:	f000 ffba 	bl	80062da <UART_WaitOnFlagUntilTimeout>
 8005366:	4603      	mov	r3, r0
 8005368:	2b00      	cmp	r3, #0
 800536a:	d001      	beq.n	8005370 <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 800536c:	2303      	movs	r3, #3
 800536e:	e038      	b.n	80053e2 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8005370:	69fb      	ldr	r3, [r7, #28]
 8005372:	2b00      	cmp	r3, #0
 8005374:	d10b      	bne.n	800538e <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005376:	69bb      	ldr	r3, [r7, #24]
 8005378:	881b      	ldrh	r3, [r3, #0]
 800537a:	461a      	mov	r2, r3
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005384:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005386:	69bb      	ldr	r3, [r7, #24]
 8005388:	3302      	adds	r3, #2
 800538a:	61bb      	str	r3, [r7, #24]
 800538c:	e007      	b.n	800539e <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800538e:	69fb      	ldr	r3, [r7, #28]
 8005390:	781a      	ldrb	r2, [r3, #0]
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005398:	69fb      	ldr	r3, [r7, #28]
 800539a:	3301      	adds	r3, #1
 800539c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80053a4:	b29b      	uxth	r3, r3
 80053a6:	3b01      	subs	r3, #1
 80053a8:	b29a      	uxth	r2, r3
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80053b6:	b29b      	uxth	r3, r3
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d1cc      	bne.n	8005356 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80053bc:	683b      	ldr	r3, [r7, #0]
 80053be:	9300      	str	r3, [sp, #0]
 80053c0:	697b      	ldr	r3, [r7, #20]
 80053c2:	2200      	movs	r2, #0
 80053c4:	2140      	movs	r1, #64	; 0x40
 80053c6:	68f8      	ldr	r0, [r7, #12]
 80053c8:	f000 ff87 	bl	80062da <UART_WaitOnFlagUntilTimeout>
 80053cc:	4603      	mov	r3, r0
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d001      	beq.n	80053d6 <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 80053d2:	2303      	movs	r3, #3
 80053d4:	e005      	b.n	80053e2 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	2220      	movs	r2, #32
 80053da:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80053dc:	2300      	movs	r3, #0
 80053de:	e000      	b.n	80053e2 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 80053e0:	2302      	movs	r3, #2
  }
}
 80053e2:	4618      	mov	r0, r3
 80053e4:	3720      	adds	r7, #32
 80053e6:	46bd      	mov	sp, r7
 80053e8:	bd80      	pop	{r7, pc}
	...

080053ec <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80053ec:	b580      	push	{r7, lr}
 80053ee:	b0ba      	sub	sp, #232	; 0xe8
 80053f0:	af00      	add	r7, sp, #0
 80053f2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	69db      	ldr	r3, [r3, #28]
 80053fa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	689b      	ldr	r3, [r3, #8]
 800540e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005412:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8005416:	f640 030f 	movw	r3, #2063	; 0x80f
 800541a:	4013      	ands	r3, r2
 800541c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8005420:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005424:	2b00      	cmp	r3, #0
 8005426:	d115      	bne.n	8005454 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8005428:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800542c:	f003 0320 	and.w	r3, r3, #32
 8005430:	2b00      	cmp	r3, #0
 8005432:	d00f      	beq.n	8005454 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005434:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005438:	f003 0320 	and.w	r3, r3, #32
 800543c:	2b00      	cmp	r3, #0
 800543e:	d009      	beq.n	8005454 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005444:	2b00      	cmp	r3, #0
 8005446:	f000 8297 	beq.w	8005978 <HAL_UART_IRQHandler+0x58c>
      {
        huart->RxISR(huart);
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800544e:	6878      	ldr	r0, [r7, #4]
 8005450:	4798      	blx	r3
      }
      return;
 8005452:	e291      	b.n	8005978 <HAL_UART_IRQHandler+0x58c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8005454:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005458:	2b00      	cmp	r3, #0
 800545a:	f000 8117 	beq.w	800568c <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800545e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005462:	f003 0301 	and.w	r3, r3, #1
 8005466:	2b00      	cmp	r3, #0
 8005468:	d106      	bne.n	8005478 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800546a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800546e:	4b85      	ldr	r3, [pc, #532]	; (8005684 <HAL_UART_IRQHandler+0x298>)
 8005470:	4013      	ands	r3, r2
 8005472:	2b00      	cmp	r3, #0
 8005474:	f000 810a 	beq.w	800568c <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005478:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800547c:	f003 0301 	and.w	r3, r3, #1
 8005480:	2b00      	cmp	r3, #0
 8005482:	d011      	beq.n	80054a8 <HAL_UART_IRQHandler+0xbc>
 8005484:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005488:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800548c:	2b00      	cmp	r3, #0
 800548e:	d00b      	beq.n	80054a8 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	2201      	movs	r2, #1
 8005496:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800549e:	f043 0201 	orr.w	r2, r3, #1
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80054a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80054ac:	f003 0302 	and.w	r3, r3, #2
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d011      	beq.n	80054d8 <HAL_UART_IRQHandler+0xec>
 80054b4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80054b8:	f003 0301 	and.w	r3, r3, #1
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d00b      	beq.n	80054d8 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	2202      	movs	r2, #2
 80054c6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80054ce:	f043 0204 	orr.w	r2, r3, #4
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80054d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80054dc:	f003 0304 	and.w	r3, r3, #4
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d011      	beq.n	8005508 <HAL_UART_IRQHandler+0x11c>
 80054e4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80054e8:	f003 0301 	and.w	r3, r3, #1
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d00b      	beq.n	8005508 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	2204      	movs	r2, #4
 80054f6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80054fe:	f043 0202 	orr.w	r2, r3, #2
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005508:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800550c:	f003 0308 	and.w	r3, r3, #8
 8005510:	2b00      	cmp	r3, #0
 8005512:	d017      	beq.n	8005544 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005514:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005518:	f003 0320 	and.w	r3, r3, #32
 800551c:	2b00      	cmp	r3, #0
 800551e:	d105      	bne.n	800552c <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8005520:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005524:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005528:	2b00      	cmp	r3, #0
 800552a:	d00b      	beq.n	8005544 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	2208      	movs	r2, #8
 8005532:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800553a:	f043 0208 	orr.w	r2, r3, #8
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005544:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005548:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800554c:	2b00      	cmp	r3, #0
 800554e:	d012      	beq.n	8005576 <HAL_UART_IRQHandler+0x18a>
 8005550:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005554:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005558:	2b00      	cmp	r3, #0
 800555a:	d00c      	beq.n	8005576 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005564:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800556c:	f043 0220 	orr.w	r2, r3, #32
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800557c:	2b00      	cmp	r3, #0
 800557e:	f000 81fd 	beq.w	800597c <HAL_UART_IRQHandler+0x590>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8005582:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005586:	f003 0320 	and.w	r3, r3, #32
 800558a:	2b00      	cmp	r3, #0
 800558c:	d00d      	beq.n	80055aa <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800558e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005592:	f003 0320 	and.w	r3, r3, #32
 8005596:	2b00      	cmp	r3, #0
 8005598:	d007      	beq.n	80055aa <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d003      	beq.n	80055aa <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80055a6:	6878      	ldr	r0, [r7, #4]
 80055a8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80055b0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	689b      	ldr	r3, [r3, #8]
 80055ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055be:	2b40      	cmp	r3, #64	; 0x40
 80055c0:	d005      	beq.n	80055ce <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80055c2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80055c6:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d04f      	beq.n	800566e <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80055ce:	6878      	ldr	r0, [r7, #4]
 80055d0:	f000 ff49 	bl	8006466 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	689b      	ldr	r3, [r3, #8]
 80055da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055de:	2b40      	cmp	r3, #64	; 0x40
 80055e0:	d141      	bne.n	8005666 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	3308      	adds	r3, #8
 80055e8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055ec:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80055f0:	e853 3f00 	ldrex	r3, [r3]
 80055f4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80055f8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80055fc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005600:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	3308      	adds	r3, #8
 800560a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800560e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005612:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005616:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800561a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800561e:	e841 2300 	strex	r3, r2, [r1]
 8005622:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005626:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800562a:	2b00      	cmp	r3, #0
 800562c:	d1d9      	bne.n	80055e2 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005632:	2b00      	cmp	r3, #0
 8005634:	d013      	beq.n	800565e <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800563a:	4a13      	ldr	r2, [pc, #76]	; (8005688 <HAL_UART_IRQHandler+0x29c>)
 800563c:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005642:	4618      	mov	r0, r3
 8005644:	f7fc fcf4 	bl	8002030 <HAL_DMA_Abort_IT>
 8005648:	4603      	mov	r3, r0
 800564a:	2b00      	cmp	r3, #0
 800564c:	d017      	beq.n	800567e <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005652:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005654:	687a      	ldr	r2, [r7, #4]
 8005656:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8005658:	4610      	mov	r0, r2
 800565a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800565c:	e00f      	b.n	800567e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800565e:	6878      	ldr	r0, [r7, #4]
 8005660:	f000 f9a0 	bl	80059a4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005664:	e00b      	b.n	800567e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005666:	6878      	ldr	r0, [r7, #4]
 8005668:	f000 f99c 	bl	80059a4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800566c:	e007      	b.n	800567e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800566e:	6878      	ldr	r0, [r7, #4]
 8005670:	f000 f998 	bl	80059a4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	2200      	movs	r2, #0
 8005678:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 800567c:	e17e      	b.n	800597c <HAL_UART_IRQHandler+0x590>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800567e:	bf00      	nop
    return;
 8005680:	e17c      	b.n	800597c <HAL_UART_IRQHandler+0x590>
 8005682:	bf00      	nop
 8005684:	04000120 	.word	0x04000120
 8005688:	0800652f 	.word	0x0800652f

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005690:	2b01      	cmp	r3, #1
 8005692:	f040 814c 	bne.w	800592e <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8005696:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800569a:	f003 0310 	and.w	r3, r3, #16
 800569e:	2b00      	cmp	r3, #0
 80056a0:	f000 8145 	beq.w	800592e <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80056a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80056a8:	f003 0310 	and.w	r3, r3, #16
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	f000 813e 	beq.w	800592e <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	2210      	movs	r2, #16
 80056b8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	689b      	ldr	r3, [r3, #8]
 80056c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056c4:	2b40      	cmp	r3, #64	; 0x40
 80056c6:	f040 80b6 	bne.w	8005836 <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	685b      	ldr	r3, [r3, #4]
 80056d2:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80056d6:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80056da:	2b00      	cmp	r3, #0
 80056dc:	f000 8150 	beq.w	8005980 <HAL_UART_IRQHandler+0x594>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80056e6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80056ea:	429a      	cmp	r2, r3
 80056ec:	f080 8148 	bcs.w	8005980 <HAL_UART_IRQHandler+0x594>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80056f6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80056fe:	69db      	ldr	r3, [r3, #28]
 8005700:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005704:	f000 8086 	beq.w	8005814 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005710:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005714:	e853 3f00 	ldrex	r3, [r3]
 8005718:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800571c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005720:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005724:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	461a      	mov	r2, r3
 800572e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005732:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8005736:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800573a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800573e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005742:	e841 2300 	strex	r3, r2, [r1]
 8005746:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800574a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800574e:	2b00      	cmp	r3, #0
 8005750:	d1da      	bne.n	8005708 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	3308      	adds	r3, #8
 8005758:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800575a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800575c:	e853 3f00 	ldrex	r3, [r3]
 8005760:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005762:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005764:	f023 0301 	bic.w	r3, r3, #1
 8005768:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	3308      	adds	r3, #8
 8005772:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005776:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800577a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800577c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800577e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005782:	e841 2300 	strex	r3, r2, [r1]
 8005786:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005788:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800578a:	2b00      	cmp	r3, #0
 800578c:	d1e1      	bne.n	8005752 <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	3308      	adds	r3, #8
 8005794:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005796:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005798:	e853 3f00 	ldrex	r3, [r3]
 800579c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800579e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80057a0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80057a4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	3308      	adds	r3, #8
 80057ae:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80057b2:	66fa      	str	r2, [r7, #108]	; 0x6c
 80057b4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057b6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80057b8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80057ba:	e841 2300 	strex	r3, r2, [r1]
 80057be:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80057c0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d1e3      	bne.n	800578e <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	2220      	movs	r2, #32
 80057ca:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	2200      	movs	r2, #0
 80057d2:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80057dc:	e853 3f00 	ldrex	r3, [r3]
 80057e0:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80057e2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80057e4:	f023 0310 	bic.w	r3, r3, #16
 80057e8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	461a      	mov	r2, r3
 80057f2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80057f6:	65bb      	str	r3, [r7, #88]	; 0x58
 80057f8:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057fa:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80057fc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80057fe:	e841 2300 	strex	r3, r2, [r1]
 8005802:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005804:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005806:	2b00      	cmp	r3, #0
 8005808:	d1e4      	bne.n	80057d4 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800580e:	4618      	mov	r0, r3
 8005810:	f7fc fb9e 	bl	8001f50 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	2202      	movs	r2, #2
 8005818:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005826:	b29b      	uxth	r3, r3
 8005828:	1ad3      	subs	r3, r2, r3
 800582a:	b29b      	uxth	r3, r3
 800582c:	4619      	mov	r1, r3
 800582e:	6878      	ldr	r0, [r7, #4]
 8005830:	f000 f8c2 	bl	80059b8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005834:	e0a4      	b.n	8005980 <HAL_UART_IRQHandler+0x594>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005842:	b29b      	uxth	r3, r3
 8005844:	1ad3      	subs	r3, r2, r3
 8005846:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005850:	b29b      	uxth	r3, r3
 8005852:	2b00      	cmp	r3, #0
 8005854:	f000 8096 	beq.w	8005984 <HAL_UART_IRQHandler+0x598>
          && (nb_rx_data > 0U))
 8005858:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800585c:	2b00      	cmp	r3, #0
 800585e:	f000 8091 	beq.w	8005984 <HAL_UART_IRQHandler+0x598>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005868:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800586a:	e853 3f00 	ldrex	r3, [r3]
 800586e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005870:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005872:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005876:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	461a      	mov	r2, r3
 8005880:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005884:	647b      	str	r3, [r7, #68]	; 0x44
 8005886:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005888:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800588a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800588c:	e841 2300 	strex	r3, r2, [r1]
 8005890:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005892:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005894:	2b00      	cmp	r3, #0
 8005896:	d1e4      	bne.n	8005862 <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	3308      	adds	r3, #8
 800589e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058a2:	e853 3f00 	ldrex	r3, [r3]
 80058a6:	623b      	str	r3, [r7, #32]
   return(result);
 80058a8:	6a3b      	ldr	r3, [r7, #32]
 80058aa:	f023 0301 	bic.w	r3, r3, #1
 80058ae:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	3308      	adds	r3, #8
 80058b8:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80058bc:	633a      	str	r2, [r7, #48]	; 0x30
 80058be:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058c0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80058c2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80058c4:	e841 2300 	strex	r3, r2, [r1]
 80058c8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80058ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d1e3      	bne.n	8005898 <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	2220      	movs	r2, #32
 80058d4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	2200      	movs	r2, #0
 80058dc:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	2200      	movs	r2, #0
 80058e2:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058ea:	693b      	ldr	r3, [r7, #16]
 80058ec:	e853 3f00 	ldrex	r3, [r3]
 80058f0:	60fb      	str	r3, [r7, #12]
   return(result);
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	f023 0310 	bic.w	r3, r3, #16
 80058f8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	461a      	mov	r2, r3
 8005902:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005906:	61fb      	str	r3, [r7, #28]
 8005908:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800590a:	69b9      	ldr	r1, [r7, #24]
 800590c:	69fa      	ldr	r2, [r7, #28]
 800590e:	e841 2300 	strex	r3, r2, [r1]
 8005912:	617b      	str	r3, [r7, #20]
   return(result);
 8005914:	697b      	ldr	r3, [r7, #20]
 8005916:	2b00      	cmp	r3, #0
 8005918:	d1e4      	bne.n	80058e4 <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	2202      	movs	r2, #2
 800591e:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005920:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005924:	4619      	mov	r1, r3
 8005926:	6878      	ldr	r0, [r7, #4]
 8005928:	f000 f846 	bl	80059b8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800592c:	e02a      	b.n	8005984 <HAL_UART_IRQHandler+0x598>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800592e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005932:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005936:	2b00      	cmp	r3, #0
 8005938:	d00e      	beq.n	8005958 <HAL_UART_IRQHandler+0x56c>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800593a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800593e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005942:	2b00      	cmp	r3, #0
 8005944:	d008      	beq.n	8005958 <HAL_UART_IRQHandler+0x56c>
  {
    if (huart->TxISR != NULL)
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800594a:	2b00      	cmp	r3, #0
 800594c:	d01c      	beq.n	8005988 <HAL_UART_IRQHandler+0x59c>
    {
      huart->TxISR(huart);
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005952:	6878      	ldr	r0, [r7, #4]
 8005954:	4798      	blx	r3
    }
    return;
 8005956:	e017      	b.n	8005988 <HAL_UART_IRQHandler+0x59c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005958:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800595c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005960:	2b00      	cmp	r3, #0
 8005962:	d012      	beq.n	800598a <HAL_UART_IRQHandler+0x59e>
 8005964:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005968:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800596c:	2b00      	cmp	r3, #0
 800596e:	d00c      	beq.n	800598a <HAL_UART_IRQHandler+0x59e>
  {
    UART_EndTransmit_IT(huart);
 8005970:	6878      	ldr	r0, [r7, #4]
 8005972:	f000 fdf2 	bl	800655a <UART_EndTransmit_IT>
    return;
 8005976:	e008      	b.n	800598a <HAL_UART_IRQHandler+0x59e>
      return;
 8005978:	bf00      	nop
 800597a:	e006      	b.n	800598a <HAL_UART_IRQHandler+0x59e>
    return;
 800597c:	bf00      	nop
 800597e:	e004      	b.n	800598a <HAL_UART_IRQHandler+0x59e>
      return;
 8005980:	bf00      	nop
 8005982:	e002      	b.n	800598a <HAL_UART_IRQHandler+0x59e>
      return;
 8005984:	bf00      	nop
 8005986:	e000      	b.n	800598a <HAL_UART_IRQHandler+0x59e>
    return;
 8005988:	bf00      	nop
  }

}
 800598a:	37e8      	adds	r7, #232	; 0xe8
 800598c:	46bd      	mov	sp, r7
 800598e:	bd80      	pop	{r7, pc}

08005990 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005990:	b480      	push	{r7}
 8005992:	b083      	sub	sp, #12
 8005994:	af00      	add	r7, sp, #0
 8005996:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005998:	bf00      	nop
 800599a:	370c      	adds	r7, #12
 800599c:	46bd      	mov	sp, r7
 800599e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a2:	4770      	bx	lr

080059a4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80059a4:	b480      	push	{r7}
 80059a6:	b083      	sub	sp, #12
 80059a8:	af00      	add	r7, sp, #0
 80059aa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80059ac:	bf00      	nop
 80059ae:	370c      	adds	r7, #12
 80059b0:	46bd      	mov	sp, r7
 80059b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b6:	4770      	bx	lr

080059b8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80059b8:	b480      	push	{r7}
 80059ba:	b083      	sub	sp, #12
 80059bc:	af00      	add	r7, sp, #0
 80059be:	6078      	str	r0, [r7, #4]
 80059c0:	460b      	mov	r3, r1
 80059c2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80059c4:	bf00      	nop
 80059c6:	370c      	adds	r7, #12
 80059c8:	46bd      	mov	sp, r7
 80059ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ce:	4770      	bx	lr

080059d0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80059d0:	b580      	push	{r7, lr}
 80059d2:	b088      	sub	sp, #32
 80059d4:	af00      	add	r7, sp, #0
 80059d6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80059d8:	2300      	movs	r3, #0
 80059da:	77bb      	strb	r3, [r7, #30]
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	685b      	ldr	r3, [r3, #4]
 80059e0:	4aa0      	ldr	r2, [pc, #640]	; (8005c64 <UART_SetConfig+0x294>)
 80059e2:	4293      	cmp	r3, r2
 80059e4:	d904      	bls.n	80059f0 <UART_SetConfig+0x20>
 80059e6:	f640 315d 	movw	r1, #2909	; 0xb5d
 80059ea:	489f      	ldr	r0, [pc, #636]	; (8005c68 <UART_SetConfig+0x298>)
 80059ec:	f7fb fed1 	bl	8001792 <assert_failed>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	689b      	ldr	r3, [r3, #8]
 80059f4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80059f8:	d00d      	beq.n	8005a16 <UART_SetConfig+0x46>
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	689b      	ldr	r3, [r3, #8]
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d009      	beq.n	8005a16 <UART_SetConfig+0x46>
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	689b      	ldr	r3, [r3, #8]
 8005a06:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005a0a:	d004      	beq.n	8005a16 <UART_SetConfig+0x46>
 8005a0c:	f640 315e 	movw	r1, #2910	; 0xb5e
 8005a10:	4895      	ldr	r0, [pc, #596]	; (8005c68 <UART_SetConfig+0x298>)
 8005a12:	f7fb febe 	bl	8001792 <assert_failed>
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	68db      	ldr	r3, [r3, #12]
 8005a1a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005a1e:	d012      	beq.n	8005a46 <UART_SetConfig+0x76>
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	68db      	ldr	r3, [r3, #12]
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d00e      	beq.n	8005a46 <UART_SetConfig+0x76>
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	68db      	ldr	r3, [r3, #12]
 8005a2c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005a30:	d009      	beq.n	8005a46 <UART_SetConfig+0x76>
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	68db      	ldr	r3, [r3, #12]
 8005a36:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005a3a:	d004      	beq.n	8005a46 <UART_SetConfig+0x76>
 8005a3c:	f640 315f 	movw	r1, #2911	; 0xb5f
 8005a40:	4889      	ldr	r0, [pc, #548]	; (8005c68 <UART_SetConfig+0x298>)
 8005a42:	f7fb fea6 	bl	8001792 <assert_failed>
  assert_param(IS_UART_ONE_BIT_SAMPLE(huart->Init.OneBitSampling));
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	6a1b      	ldr	r3, [r3, #32]
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d009      	beq.n	8005a62 <UART_SetConfig+0x92>
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	6a1b      	ldr	r3, [r3, #32]
 8005a52:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005a56:	d004      	beq.n	8005a62 <UART_SetConfig+0x92>
 8005a58:	f44f 6136 	mov.w	r1, #2912	; 0xb60
 8005a5c:	4882      	ldr	r0, [pc, #520]	; (8005c68 <UART_SetConfig+0x298>)
 8005a5e:	f7fb fe98 	bl	8001792 <assert_failed>

  assert_param(IS_UART_PARITY(huart->Init.Parity));
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	691b      	ldr	r3, [r3, #16]
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d00e      	beq.n	8005a88 <UART_SetConfig+0xb8>
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	691b      	ldr	r3, [r3, #16]
 8005a6e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005a72:	d009      	beq.n	8005a88 <UART_SetConfig+0xb8>
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	691b      	ldr	r3, [r3, #16]
 8005a78:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8005a7c:	d004      	beq.n	8005a88 <UART_SetConfig+0xb8>
 8005a7e:	f640 3162 	movw	r1, #2914	; 0xb62
 8005a82:	4879      	ldr	r0, [pc, #484]	; (8005c68 <UART_SetConfig+0x298>)
 8005a84:	f7fb fe85 	bl	8001792 <assert_failed>
  assert_param(IS_UART_MODE(huart->Init.Mode));
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	695b      	ldr	r3, [r3, #20]
 8005a8c:	f023 030c 	bic.w	r3, r3, #12
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d103      	bne.n	8005a9c <UART_SetConfig+0xcc>
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	695b      	ldr	r3, [r3, #20]
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d104      	bne.n	8005aa6 <UART_SetConfig+0xd6>
 8005a9c:	f640 3163 	movw	r1, #2915	; 0xb63
 8005aa0:	4871      	ldr	r0, [pc, #452]	; (8005c68 <UART_SetConfig+0x298>)
 8005aa2:	f7fb fe76 	bl	8001792 <assert_failed>
  assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	699b      	ldr	r3, [r3, #24]
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d013      	beq.n	8005ad6 <UART_SetConfig+0x106>
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	699b      	ldr	r3, [r3, #24]
 8005ab2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005ab6:	d00e      	beq.n	8005ad6 <UART_SetConfig+0x106>
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	699b      	ldr	r3, [r3, #24]
 8005abc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005ac0:	d009      	beq.n	8005ad6 <UART_SetConfig+0x106>
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	699b      	ldr	r3, [r3, #24]
 8005ac6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005aca:	d004      	beq.n	8005ad6 <UART_SetConfig+0x106>
 8005acc:	f640 3164 	movw	r1, #2916	; 0xb64
 8005ad0:	4865      	ldr	r0, [pc, #404]	; (8005c68 <UART_SetConfig+0x298>)
 8005ad2:	f7fb fe5e 	bl	8001792 <assert_failed>
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	69db      	ldr	r3, [r3, #28]
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d009      	beq.n	8005af2 <UART_SetConfig+0x122>
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	69db      	ldr	r3, [r3, #28]
 8005ae2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005ae6:	d004      	beq.n	8005af2 <UART_SetConfig+0x122>
 8005ae8:	f640 3165 	movw	r1, #2917	; 0xb65
 8005aec:	485e      	ldr	r0, [pc, #376]	; (8005c68 <UART_SetConfig+0x298>)
 8005aee:	f7fb fe50 	bl	8001792 <assert_failed>
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	689a      	ldr	r2, [r3, #8]
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	691b      	ldr	r3, [r3, #16]
 8005afa:	431a      	orrs	r2, r3
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	695b      	ldr	r3, [r3, #20]
 8005b00:	431a      	orrs	r2, r3
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	69db      	ldr	r3, [r3, #28]
 8005b06:	4313      	orrs	r3, r2
 8005b08:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	681a      	ldr	r2, [r3, #0]
 8005b10:	4b56      	ldr	r3, [pc, #344]	; (8005c6c <UART_SetConfig+0x29c>)
 8005b12:	4013      	ands	r3, r2
 8005b14:	687a      	ldr	r2, [r7, #4]
 8005b16:	6812      	ldr	r2, [r2, #0]
 8005b18:	6979      	ldr	r1, [r7, #20]
 8005b1a:	430b      	orrs	r3, r1
 8005b1c:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	685b      	ldr	r3, [r3, #4]
 8005b24:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	68da      	ldr	r2, [r3, #12]
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	430a      	orrs	r2, r1
 8005b32:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	699b      	ldr	r3, [r3, #24]
 8005b38:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	6a1b      	ldr	r3, [r3, #32]
 8005b3e:	697a      	ldr	r2, [r7, #20]
 8005b40:	4313      	orrs	r3, r2
 8005b42:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	689b      	ldr	r3, [r3, #8]
 8005b4a:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	697a      	ldr	r2, [r7, #20]
 8005b54:	430a      	orrs	r2, r1
 8005b56:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	4a44      	ldr	r2, [pc, #272]	; (8005c70 <UART_SetConfig+0x2a0>)
 8005b5e:	4293      	cmp	r3, r2
 8005b60:	d121      	bne.n	8005ba6 <UART_SetConfig+0x1d6>
 8005b62:	4b44      	ldr	r3, [pc, #272]	; (8005c74 <UART_SetConfig+0x2a4>)
 8005b64:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b68:	f003 0303 	and.w	r3, r3, #3
 8005b6c:	2b03      	cmp	r3, #3
 8005b6e:	d817      	bhi.n	8005ba0 <UART_SetConfig+0x1d0>
 8005b70:	a201      	add	r2, pc, #4	; (adr r2, 8005b78 <UART_SetConfig+0x1a8>)
 8005b72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b76:	bf00      	nop
 8005b78:	08005b89 	.word	0x08005b89
 8005b7c:	08005b95 	.word	0x08005b95
 8005b80:	08005b8f 	.word	0x08005b8f
 8005b84:	08005b9b 	.word	0x08005b9b
 8005b88:	2301      	movs	r3, #1
 8005b8a:	77fb      	strb	r3, [r7, #31]
 8005b8c:	e14c      	b.n	8005e28 <UART_SetConfig+0x458>
 8005b8e:	2302      	movs	r3, #2
 8005b90:	77fb      	strb	r3, [r7, #31]
 8005b92:	e149      	b.n	8005e28 <UART_SetConfig+0x458>
 8005b94:	2304      	movs	r3, #4
 8005b96:	77fb      	strb	r3, [r7, #31]
 8005b98:	e146      	b.n	8005e28 <UART_SetConfig+0x458>
 8005b9a:	2308      	movs	r3, #8
 8005b9c:	77fb      	strb	r3, [r7, #31]
 8005b9e:	e143      	b.n	8005e28 <UART_SetConfig+0x458>
 8005ba0:	2310      	movs	r3, #16
 8005ba2:	77fb      	strb	r3, [r7, #31]
 8005ba4:	e140      	b.n	8005e28 <UART_SetConfig+0x458>
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	4a33      	ldr	r2, [pc, #204]	; (8005c78 <UART_SetConfig+0x2a8>)
 8005bac:	4293      	cmp	r3, r2
 8005bae:	d132      	bne.n	8005c16 <UART_SetConfig+0x246>
 8005bb0:	4b30      	ldr	r3, [pc, #192]	; (8005c74 <UART_SetConfig+0x2a4>)
 8005bb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005bb6:	f003 030c 	and.w	r3, r3, #12
 8005bba:	2b0c      	cmp	r3, #12
 8005bbc:	d828      	bhi.n	8005c10 <UART_SetConfig+0x240>
 8005bbe:	a201      	add	r2, pc, #4	; (adr r2, 8005bc4 <UART_SetConfig+0x1f4>)
 8005bc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bc4:	08005bf9 	.word	0x08005bf9
 8005bc8:	08005c11 	.word	0x08005c11
 8005bcc:	08005c11 	.word	0x08005c11
 8005bd0:	08005c11 	.word	0x08005c11
 8005bd4:	08005c05 	.word	0x08005c05
 8005bd8:	08005c11 	.word	0x08005c11
 8005bdc:	08005c11 	.word	0x08005c11
 8005be0:	08005c11 	.word	0x08005c11
 8005be4:	08005bff 	.word	0x08005bff
 8005be8:	08005c11 	.word	0x08005c11
 8005bec:	08005c11 	.word	0x08005c11
 8005bf0:	08005c11 	.word	0x08005c11
 8005bf4:	08005c0b 	.word	0x08005c0b
 8005bf8:	2300      	movs	r3, #0
 8005bfa:	77fb      	strb	r3, [r7, #31]
 8005bfc:	e114      	b.n	8005e28 <UART_SetConfig+0x458>
 8005bfe:	2302      	movs	r3, #2
 8005c00:	77fb      	strb	r3, [r7, #31]
 8005c02:	e111      	b.n	8005e28 <UART_SetConfig+0x458>
 8005c04:	2304      	movs	r3, #4
 8005c06:	77fb      	strb	r3, [r7, #31]
 8005c08:	e10e      	b.n	8005e28 <UART_SetConfig+0x458>
 8005c0a:	2308      	movs	r3, #8
 8005c0c:	77fb      	strb	r3, [r7, #31]
 8005c0e:	e10b      	b.n	8005e28 <UART_SetConfig+0x458>
 8005c10:	2310      	movs	r3, #16
 8005c12:	77fb      	strb	r3, [r7, #31]
 8005c14:	e108      	b.n	8005e28 <UART_SetConfig+0x458>
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	4a18      	ldr	r2, [pc, #96]	; (8005c7c <UART_SetConfig+0x2ac>)
 8005c1c:	4293      	cmp	r3, r2
 8005c1e:	d12f      	bne.n	8005c80 <UART_SetConfig+0x2b0>
 8005c20:	4b14      	ldr	r3, [pc, #80]	; (8005c74 <UART_SetConfig+0x2a4>)
 8005c22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c26:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005c2a:	2b30      	cmp	r3, #48	; 0x30
 8005c2c:	d013      	beq.n	8005c56 <UART_SetConfig+0x286>
 8005c2e:	2b30      	cmp	r3, #48	; 0x30
 8005c30:	d814      	bhi.n	8005c5c <UART_SetConfig+0x28c>
 8005c32:	2b20      	cmp	r3, #32
 8005c34:	d009      	beq.n	8005c4a <UART_SetConfig+0x27a>
 8005c36:	2b20      	cmp	r3, #32
 8005c38:	d810      	bhi.n	8005c5c <UART_SetConfig+0x28c>
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d002      	beq.n	8005c44 <UART_SetConfig+0x274>
 8005c3e:	2b10      	cmp	r3, #16
 8005c40:	d006      	beq.n	8005c50 <UART_SetConfig+0x280>
 8005c42:	e00b      	b.n	8005c5c <UART_SetConfig+0x28c>
 8005c44:	2300      	movs	r3, #0
 8005c46:	77fb      	strb	r3, [r7, #31]
 8005c48:	e0ee      	b.n	8005e28 <UART_SetConfig+0x458>
 8005c4a:	2302      	movs	r3, #2
 8005c4c:	77fb      	strb	r3, [r7, #31]
 8005c4e:	e0eb      	b.n	8005e28 <UART_SetConfig+0x458>
 8005c50:	2304      	movs	r3, #4
 8005c52:	77fb      	strb	r3, [r7, #31]
 8005c54:	e0e8      	b.n	8005e28 <UART_SetConfig+0x458>
 8005c56:	2308      	movs	r3, #8
 8005c58:	77fb      	strb	r3, [r7, #31]
 8005c5a:	e0e5      	b.n	8005e28 <UART_SetConfig+0x458>
 8005c5c:	2310      	movs	r3, #16
 8005c5e:	77fb      	strb	r3, [r7, #31]
 8005c60:	e0e2      	b.n	8005e28 <UART_SetConfig+0x458>
 8005c62:	bf00      	nop
 8005c64:	019bfcc0 	.word	0x019bfcc0
 8005c68:	0800e600 	.word	0x0800e600
 8005c6c:	efff69f3 	.word	0xefff69f3
 8005c70:	40011000 	.word	0x40011000
 8005c74:	40023800 	.word	0x40023800
 8005c78:	40004400 	.word	0x40004400
 8005c7c:	40004800 	.word	0x40004800
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	4aa5      	ldr	r2, [pc, #660]	; (8005f1c <UART_SetConfig+0x54c>)
 8005c86:	4293      	cmp	r3, r2
 8005c88:	d120      	bne.n	8005ccc <UART_SetConfig+0x2fc>
 8005c8a:	4ba5      	ldr	r3, [pc, #660]	; (8005f20 <UART_SetConfig+0x550>)
 8005c8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c90:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005c94:	2bc0      	cmp	r3, #192	; 0xc0
 8005c96:	d013      	beq.n	8005cc0 <UART_SetConfig+0x2f0>
 8005c98:	2bc0      	cmp	r3, #192	; 0xc0
 8005c9a:	d814      	bhi.n	8005cc6 <UART_SetConfig+0x2f6>
 8005c9c:	2b80      	cmp	r3, #128	; 0x80
 8005c9e:	d009      	beq.n	8005cb4 <UART_SetConfig+0x2e4>
 8005ca0:	2b80      	cmp	r3, #128	; 0x80
 8005ca2:	d810      	bhi.n	8005cc6 <UART_SetConfig+0x2f6>
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d002      	beq.n	8005cae <UART_SetConfig+0x2de>
 8005ca8:	2b40      	cmp	r3, #64	; 0x40
 8005caa:	d006      	beq.n	8005cba <UART_SetConfig+0x2ea>
 8005cac:	e00b      	b.n	8005cc6 <UART_SetConfig+0x2f6>
 8005cae:	2300      	movs	r3, #0
 8005cb0:	77fb      	strb	r3, [r7, #31]
 8005cb2:	e0b9      	b.n	8005e28 <UART_SetConfig+0x458>
 8005cb4:	2302      	movs	r3, #2
 8005cb6:	77fb      	strb	r3, [r7, #31]
 8005cb8:	e0b6      	b.n	8005e28 <UART_SetConfig+0x458>
 8005cba:	2304      	movs	r3, #4
 8005cbc:	77fb      	strb	r3, [r7, #31]
 8005cbe:	e0b3      	b.n	8005e28 <UART_SetConfig+0x458>
 8005cc0:	2308      	movs	r3, #8
 8005cc2:	77fb      	strb	r3, [r7, #31]
 8005cc4:	e0b0      	b.n	8005e28 <UART_SetConfig+0x458>
 8005cc6:	2310      	movs	r3, #16
 8005cc8:	77fb      	strb	r3, [r7, #31]
 8005cca:	e0ad      	b.n	8005e28 <UART_SetConfig+0x458>
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	4a94      	ldr	r2, [pc, #592]	; (8005f24 <UART_SetConfig+0x554>)
 8005cd2:	4293      	cmp	r3, r2
 8005cd4:	d125      	bne.n	8005d22 <UART_SetConfig+0x352>
 8005cd6:	4b92      	ldr	r3, [pc, #584]	; (8005f20 <UART_SetConfig+0x550>)
 8005cd8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005cdc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005ce0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005ce4:	d017      	beq.n	8005d16 <UART_SetConfig+0x346>
 8005ce6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005cea:	d817      	bhi.n	8005d1c <UART_SetConfig+0x34c>
 8005cec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005cf0:	d00b      	beq.n	8005d0a <UART_SetConfig+0x33a>
 8005cf2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005cf6:	d811      	bhi.n	8005d1c <UART_SetConfig+0x34c>
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d003      	beq.n	8005d04 <UART_SetConfig+0x334>
 8005cfc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005d00:	d006      	beq.n	8005d10 <UART_SetConfig+0x340>
 8005d02:	e00b      	b.n	8005d1c <UART_SetConfig+0x34c>
 8005d04:	2300      	movs	r3, #0
 8005d06:	77fb      	strb	r3, [r7, #31]
 8005d08:	e08e      	b.n	8005e28 <UART_SetConfig+0x458>
 8005d0a:	2302      	movs	r3, #2
 8005d0c:	77fb      	strb	r3, [r7, #31]
 8005d0e:	e08b      	b.n	8005e28 <UART_SetConfig+0x458>
 8005d10:	2304      	movs	r3, #4
 8005d12:	77fb      	strb	r3, [r7, #31]
 8005d14:	e088      	b.n	8005e28 <UART_SetConfig+0x458>
 8005d16:	2308      	movs	r3, #8
 8005d18:	77fb      	strb	r3, [r7, #31]
 8005d1a:	e085      	b.n	8005e28 <UART_SetConfig+0x458>
 8005d1c:	2310      	movs	r3, #16
 8005d1e:	77fb      	strb	r3, [r7, #31]
 8005d20:	e082      	b.n	8005e28 <UART_SetConfig+0x458>
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	4a80      	ldr	r2, [pc, #512]	; (8005f28 <UART_SetConfig+0x558>)
 8005d28:	4293      	cmp	r3, r2
 8005d2a:	d125      	bne.n	8005d78 <UART_SetConfig+0x3a8>
 8005d2c:	4b7c      	ldr	r3, [pc, #496]	; (8005f20 <UART_SetConfig+0x550>)
 8005d2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d32:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005d36:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005d3a:	d017      	beq.n	8005d6c <UART_SetConfig+0x39c>
 8005d3c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005d40:	d817      	bhi.n	8005d72 <UART_SetConfig+0x3a2>
 8005d42:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005d46:	d00b      	beq.n	8005d60 <UART_SetConfig+0x390>
 8005d48:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005d4c:	d811      	bhi.n	8005d72 <UART_SetConfig+0x3a2>
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d003      	beq.n	8005d5a <UART_SetConfig+0x38a>
 8005d52:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005d56:	d006      	beq.n	8005d66 <UART_SetConfig+0x396>
 8005d58:	e00b      	b.n	8005d72 <UART_SetConfig+0x3a2>
 8005d5a:	2301      	movs	r3, #1
 8005d5c:	77fb      	strb	r3, [r7, #31]
 8005d5e:	e063      	b.n	8005e28 <UART_SetConfig+0x458>
 8005d60:	2302      	movs	r3, #2
 8005d62:	77fb      	strb	r3, [r7, #31]
 8005d64:	e060      	b.n	8005e28 <UART_SetConfig+0x458>
 8005d66:	2304      	movs	r3, #4
 8005d68:	77fb      	strb	r3, [r7, #31]
 8005d6a:	e05d      	b.n	8005e28 <UART_SetConfig+0x458>
 8005d6c:	2308      	movs	r3, #8
 8005d6e:	77fb      	strb	r3, [r7, #31]
 8005d70:	e05a      	b.n	8005e28 <UART_SetConfig+0x458>
 8005d72:	2310      	movs	r3, #16
 8005d74:	77fb      	strb	r3, [r7, #31]
 8005d76:	e057      	b.n	8005e28 <UART_SetConfig+0x458>
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	4a6b      	ldr	r2, [pc, #428]	; (8005f2c <UART_SetConfig+0x55c>)
 8005d7e:	4293      	cmp	r3, r2
 8005d80:	d125      	bne.n	8005dce <UART_SetConfig+0x3fe>
 8005d82:	4b67      	ldr	r3, [pc, #412]	; (8005f20 <UART_SetConfig+0x550>)
 8005d84:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d88:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8005d8c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005d90:	d017      	beq.n	8005dc2 <UART_SetConfig+0x3f2>
 8005d92:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005d96:	d817      	bhi.n	8005dc8 <UART_SetConfig+0x3f8>
 8005d98:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005d9c:	d00b      	beq.n	8005db6 <UART_SetConfig+0x3e6>
 8005d9e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005da2:	d811      	bhi.n	8005dc8 <UART_SetConfig+0x3f8>
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d003      	beq.n	8005db0 <UART_SetConfig+0x3e0>
 8005da8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005dac:	d006      	beq.n	8005dbc <UART_SetConfig+0x3ec>
 8005dae:	e00b      	b.n	8005dc8 <UART_SetConfig+0x3f8>
 8005db0:	2300      	movs	r3, #0
 8005db2:	77fb      	strb	r3, [r7, #31]
 8005db4:	e038      	b.n	8005e28 <UART_SetConfig+0x458>
 8005db6:	2302      	movs	r3, #2
 8005db8:	77fb      	strb	r3, [r7, #31]
 8005dba:	e035      	b.n	8005e28 <UART_SetConfig+0x458>
 8005dbc:	2304      	movs	r3, #4
 8005dbe:	77fb      	strb	r3, [r7, #31]
 8005dc0:	e032      	b.n	8005e28 <UART_SetConfig+0x458>
 8005dc2:	2308      	movs	r3, #8
 8005dc4:	77fb      	strb	r3, [r7, #31]
 8005dc6:	e02f      	b.n	8005e28 <UART_SetConfig+0x458>
 8005dc8:	2310      	movs	r3, #16
 8005dca:	77fb      	strb	r3, [r7, #31]
 8005dcc:	e02c      	b.n	8005e28 <UART_SetConfig+0x458>
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	4a57      	ldr	r2, [pc, #348]	; (8005f30 <UART_SetConfig+0x560>)
 8005dd4:	4293      	cmp	r3, r2
 8005dd6:	d125      	bne.n	8005e24 <UART_SetConfig+0x454>
 8005dd8:	4b51      	ldr	r3, [pc, #324]	; (8005f20 <UART_SetConfig+0x550>)
 8005dda:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005dde:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8005de2:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8005de6:	d017      	beq.n	8005e18 <UART_SetConfig+0x448>
 8005de8:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8005dec:	d817      	bhi.n	8005e1e <UART_SetConfig+0x44e>
 8005dee:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005df2:	d00b      	beq.n	8005e0c <UART_SetConfig+0x43c>
 8005df4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005df8:	d811      	bhi.n	8005e1e <UART_SetConfig+0x44e>
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d003      	beq.n	8005e06 <UART_SetConfig+0x436>
 8005dfe:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005e02:	d006      	beq.n	8005e12 <UART_SetConfig+0x442>
 8005e04:	e00b      	b.n	8005e1e <UART_SetConfig+0x44e>
 8005e06:	2300      	movs	r3, #0
 8005e08:	77fb      	strb	r3, [r7, #31]
 8005e0a:	e00d      	b.n	8005e28 <UART_SetConfig+0x458>
 8005e0c:	2302      	movs	r3, #2
 8005e0e:	77fb      	strb	r3, [r7, #31]
 8005e10:	e00a      	b.n	8005e28 <UART_SetConfig+0x458>
 8005e12:	2304      	movs	r3, #4
 8005e14:	77fb      	strb	r3, [r7, #31]
 8005e16:	e007      	b.n	8005e28 <UART_SetConfig+0x458>
 8005e18:	2308      	movs	r3, #8
 8005e1a:	77fb      	strb	r3, [r7, #31]
 8005e1c:	e004      	b.n	8005e28 <UART_SetConfig+0x458>
 8005e1e:	2310      	movs	r3, #16
 8005e20:	77fb      	strb	r3, [r7, #31]
 8005e22:	e001      	b.n	8005e28 <UART_SetConfig+0x458>
 8005e24:	2310      	movs	r3, #16
 8005e26:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	69db      	ldr	r3, [r3, #28]
 8005e2c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005e30:	d15c      	bne.n	8005eec <UART_SetConfig+0x51c>
  {
    switch (clocksource)
 8005e32:	7ffb      	ldrb	r3, [r7, #31]
 8005e34:	2b08      	cmp	r3, #8
 8005e36:	d828      	bhi.n	8005e8a <UART_SetConfig+0x4ba>
 8005e38:	a201      	add	r2, pc, #4	; (adr r2, 8005e40 <UART_SetConfig+0x470>)
 8005e3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e3e:	bf00      	nop
 8005e40:	08005e65 	.word	0x08005e65
 8005e44:	08005e6d 	.word	0x08005e6d
 8005e48:	08005e75 	.word	0x08005e75
 8005e4c:	08005e8b 	.word	0x08005e8b
 8005e50:	08005e7b 	.word	0x08005e7b
 8005e54:	08005e8b 	.word	0x08005e8b
 8005e58:	08005e8b 	.word	0x08005e8b
 8005e5c:	08005e8b 	.word	0x08005e8b
 8005e60:	08005e83 	.word	0x08005e83
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005e64:	f7fe f972 	bl	800414c <HAL_RCC_GetPCLK1Freq>
 8005e68:	61b8      	str	r0, [r7, #24]
        break;
 8005e6a:	e013      	b.n	8005e94 <UART_SetConfig+0x4c4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005e6c:	f7fe f982 	bl	8004174 <HAL_RCC_GetPCLK2Freq>
 8005e70:	61b8      	str	r0, [r7, #24]
        break;
 8005e72:	e00f      	b.n	8005e94 <UART_SetConfig+0x4c4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005e74:	4b2f      	ldr	r3, [pc, #188]	; (8005f34 <UART_SetConfig+0x564>)
 8005e76:	61bb      	str	r3, [r7, #24]
        break;
 8005e78:	e00c      	b.n	8005e94 <UART_SetConfig+0x4c4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005e7a:	f7fe f895 	bl	8003fa8 <HAL_RCC_GetSysClockFreq>
 8005e7e:	61b8      	str	r0, [r7, #24]
        break;
 8005e80:	e008      	b.n	8005e94 <UART_SetConfig+0x4c4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005e82:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005e86:	61bb      	str	r3, [r7, #24]
        break;
 8005e88:	e004      	b.n	8005e94 <UART_SetConfig+0x4c4>
      default:
        pclk = 0U;
 8005e8a:	2300      	movs	r3, #0
 8005e8c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005e8e:	2301      	movs	r3, #1
 8005e90:	77bb      	strb	r3, [r7, #30]
        break;
 8005e92:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005e94:	69bb      	ldr	r3, [r7, #24]
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	f000 8082 	beq.w	8005fa0 <UART_SetConfig+0x5d0>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005e9c:	69bb      	ldr	r3, [r7, #24]
 8005e9e:	005a      	lsls	r2, r3, #1
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	685b      	ldr	r3, [r3, #4]
 8005ea4:	085b      	lsrs	r3, r3, #1
 8005ea6:	441a      	add	r2, r3
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	685b      	ldr	r3, [r3, #4]
 8005eac:	fbb2 f3f3 	udiv	r3, r2, r3
 8005eb0:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005eb2:	693b      	ldr	r3, [r7, #16]
 8005eb4:	2b0f      	cmp	r3, #15
 8005eb6:	d916      	bls.n	8005ee6 <UART_SetConfig+0x516>
 8005eb8:	693b      	ldr	r3, [r7, #16]
 8005eba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005ebe:	d212      	bcs.n	8005ee6 <UART_SetConfig+0x516>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005ec0:	693b      	ldr	r3, [r7, #16]
 8005ec2:	b29b      	uxth	r3, r3
 8005ec4:	f023 030f 	bic.w	r3, r3, #15
 8005ec8:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005eca:	693b      	ldr	r3, [r7, #16]
 8005ecc:	085b      	lsrs	r3, r3, #1
 8005ece:	b29b      	uxth	r3, r3
 8005ed0:	f003 0307 	and.w	r3, r3, #7
 8005ed4:	b29a      	uxth	r2, r3
 8005ed6:	89fb      	ldrh	r3, [r7, #14]
 8005ed8:	4313      	orrs	r3, r2
 8005eda:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	89fa      	ldrh	r2, [r7, #14]
 8005ee2:	60da      	str	r2, [r3, #12]
 8005ee4:	e05c      	b.n	8005fa0 <UART_SetConfig+0x5d0>
      }
      else
      {
        ret = HAL_ERROR;
 8005ee6:	2301      	movs	r3, #1
 8005ee8:	77bb      	strb	r3, [r7, #30]
 8005eea:	e059      	b.n	8005fa0 <UART_SetConfig+0x5d0>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005eec:	7ffb      	ldrb	r3, [r7, #31]
 8005eee:	2b08      	cmp	r3, #8
 8005ef0:	d835      	bhi.n	8005f5e <UART_SetConfig+0x58e>
 8005ef2:	a201      	add	r2, pc, #4	; (adr r2, 8005ef8 <UART_SetConfig+0x528>)
 8005ef4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ef8:	08005f39 	.word	0x08005f39
 8005efc:	08005f41 	.word	0x08005f41
 8005f00:	08005f49 	.word	0x08005f49
 8005f04:	08005f5f 	.word	0x08005f5f
 8005f08:	08005f4f 	.word	0x08005f4f
 8005f0c:	08005f5f 	.word	0x08005f5f
 8005f10:	08005f5f 	.word	0x08005f5f
 8005f14:	08005f5f 	.word	0x08005f5f
 8005f18:	08005f57 	.word	0x08005f57
 8005f1c:	40004c00 	.word	0x40004c00
 8005f20:	40023800 	.word	0x40023800
 8005f24:	40005000 	.word	0x40005000
 8005f28:	40011400 	.word	0x40011400
 8005f2c:	40007800 	.word	0x40007800
 8005f30:	40007c00 	.word	0x40007c00
 8005f34:	00f42400 	.word	0x00f42400
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005f38:	f7fe f908 	bl	800414c <HAL_RCC_GetPCLK1Freq>
 8005f3c:	61b8      	str	r0, [r7, #24]
        break;
 8005f3e:	e013      	b.n	8005f68 <UART_SetConfig+0x598>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005f40:	f7fe f918 	bl	8004174 <HAL_RCC_GetPCLK2Freq>
 8005f44:	61b8      	str	r0, [r7, #24]
        break;
 8005f46:	e00f      	b.n	8005f68 <UART_SetConfig+0x598>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005f48:	4b1b      	ldr	r3, [pc, #108]	; (8005fb8 <UART_SetConfig+0x5e8>)
 8005f4a:	61bb      	str	r3, [r7, #24]
        break;
 8005f4c:	e00c      	b.n	8005f68 <UART_SetConfig+0x598>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005f4e:	f7fe f82b 	bl	8003fa8 <HAL_RCC_GetSysClockFreq>
 8005f52:	61b8      	str	r0, [r7, #24]
        break;
 8005f54:	e008      	b.n	8005f68 <UART_SetConfig+0x598>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005f56:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005f5a:	61bb      	str	r3, [r7, #24]
        break;
 8005f5c:	e004      	b.n	8005f68 <UART_SetConfig+0x598>
      default:
        pclk = 0U;
 8005f5e:	2300      	movs	r3, #0
 8005f60:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005f62:	2301      	movs	r3, #1
 8005f64:	77bb      	strb	r3, [r7, #30]
        break;
 8005f66:	bf00      	nop
    }

    if (pclk != 0U)
 8005f68:	69bb      	ldr	r3, [r7, #24]
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d018      	beq.n	8005fa0 <UART_SetConfig+0x5d0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	685b      	ldr	r3, [r3, #4]
 8005f72:	085a      	lsrs	r2, r3, #1
 8005f74:	69bb      	ldr	r3, [r7, #24]
 8005f76:	441a      	add	r2, r3
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	685b      	ldr	r3, [r3, #4]
 8005f7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f80:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005f82:	693b      	ldr	r3, [r7, #16]
 8005f84:	2b0f      	cmp	r3, #15
 8005f86:	d909      	bls.n	8005f9c <UART_SetConfig+0x5cc>
 8005f88:	693b      	ldr	r3, [r7, #16]
 8005f8a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005f8e:	d205      	bcs.n	8005f9c <UART_SetConfig+0x5cc>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005f90:	693b      	ldr	r3, [r7, #16]
 8005f92:	b29a      	uxth	r2, r3
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	60da      	str	r2, [r3, #12]
 8005f9a:	e001      	b.n	8005fa0 <UART_SetConfig+0x5d0>
      }
      else
      {
        ret = HAL_ERROR;
 8005f9c:	2301      	movs	r3, #1
 8005f9e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	2200      	movs	r2, #0
 8005fa4:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	2200      	movs	r2, #0
 8005faa:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8005fac:	7fbb      	ldrb	r3, [r7, #30]
}
 8005fae:	4618      	mov	r0, r3
 8005fb0:	3720      	adds	r7, #32
 8005fb2:	46bd      	mov	sp, r7
 8005fb4:	bd80      	pop	{r7, pc}
 8005fb6:	bf00      	nop
 8005fb8:	00f42400 	.word	0x00f42400

08005fbc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005fbc:	b580      	push	{r7, lr}
 8005fbe:	b082      	sub	sp, #8
 8005fc0:	af00      	add	r7, sp, #0
 8005fc2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fc8:	2bff      	cmp	r3, #255	; 0xff
 8005fca:	d904      	bls.n	8005fd6 <UART_AdvFeatureConfig+0x1a>
 8005fcc:	f640 31e6 	movw	r1, #3046	; 0xbe6
 8005fd0:	488e      	ldr	r0, [pc, #568]	; (800620c <UART_AdvFeatureConfig+0x250>)
 8005fd2:	f7fb fbde 	bl	8001792 <assert_failed>

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fda:	f003 0301 	and.w	r3, r3, #1
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d018      	beq.n	8006014 <UART_AdvFeatureConfig+0x58>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d009      	beq.n	8005ffe <UART_AdvFeatureConfig+0x42>
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fee:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005ff2:	d004      	beq.n	8005ffe <UART_AdvFeatureConfig+0x42>
 8005ff4:	f640 31eb 	movw	r1, #3051	; 0xbeb
 8005ff8:	4884      	ldr	r0, [pc, #528]	; (800620c <UART_AdvFeatureConfig+0x250>)
 8005ffa:	f7fb fbca 	bl	8001792 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	685b      	ldr	r3, [r3, #4]
 8006004:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	430a      	orrs	r2, r1
 8006012:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006018:	f003 0302 	and.w	r3, r3, #2
 800601c:	2b00      	cmp	r3, #0
 800601e:	d018      	beq.n	8006052 <UART_AdvFeatureConfig+0x96>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006024:	2b00      	cmp	r3, #0
 8006026:	d009      	beq.n	800603c <UART_AdvFeatureConfig+0x80>
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800602c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006030:	d004      	beq.n	800603c <UART_AdvFeatureConfig+0x80>
 8006032:	f640 31f2 	movw	r1, #3058	; 0xbf2
 8006036:	4875      	ldr	r0, [pc, #468]	; (800620c <UART_AdvFeatureConfig+0x250>)
 8006038:	f7fb fbab 	bl	8001792 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	685b      	ldr	r3, [r3, #4]
 8006042:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	430a      	orrs	r2, r1
 8006050:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006056:	f003 0304 	and.w	r3, r3, #4
 800605a:	2b00      	cmp	r3, #0
 800605c:	d018      	beq.n	8006090 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006062:	2b00      	cmp	r3, #0
 8006064:	d009      	beq.n	800607a <UART_AdvFeatureConfig+0xbe>
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800606a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800606e:	d004      	beq.n	800607a <UART_AdvFeatureConfig+0xbe>
 8006070:	f640 31f9 	movw	r1, #3065	; 0xbf9
 8006074:	4865      	ldr	r0, [pc, #404]	; (800620c <UART_AdvFeatureConfig+0x250>)
 8006076:	f7fb fb8c 	bl	8001792 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	685b      	ldr	r3, [r3, #4]
 8006080:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	430a      	orrs	r2, r1
 800608e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006094:	f003 0308 	and.w	r3, r3, #8
 8006098:	2b00      	cmp	r3, #0
 800609a:	d018      	beq.n	80060ce <UART_AdvFeatureConfig+0x112>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d009      	beq.n	80060b8 <UART_AdvFeatureConfig+0xfc>
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80060a8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80060ac:	d004      	beq.n	80060b8 <UART_AdvFeatureConfig+0xfc>
 80060ae:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 80060b2:	4856      	ldr	r0, [pc, #344]	; (800620c <UART_AdvFeatureConfig+0x250>)
 80060b4:	f7fb fb6d 	bl	8001792 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	685b      	ldr	r3, [r3, #4]
 80060be:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	430a      	orrs	r2, r1
 80060cc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060d2:	f003 0310 	and.w	r3, r3, #16
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d018      	beq.n	800610c <UART_AdvFeatureConfig+0x150>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d009      	beq.n	80060f6 <UART_AdvFeatureConfig+0x13a>
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80060ea:	d004      	beq.n	80060f6 <UART_AdvFeatureConfig+0x13a>
 80060ec:	f640 4107 	movw	r1, #3079	; 0xc07
 80060f0:	4846      	ldr	r0, [pc, #280]	; (800620c <UART_AdvFeatureConfig+0x250>)
 80060f2:	f7fb fb4e 	bl	8001792 <assert_failed>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	689b      	ldr	r3, [r3, #8]
 80060fc:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	430a      	orrs	r2, r1
 800610a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006110:	f003 0320 	and.w	r3, r3, #32
 8006114:	2b00      	cmp	r3, #0
 8006116:	d018      	beq.n	800614a <UART_AdvFeatureConfig+0x18e>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800611c:	2b00      	cmp	r3, #0
 800611e:	d009      	beq.n	8006134 <UART_AdvFeatureConfig+0x178>
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006124:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006128:	d004      	beq.n	8006134 <UART_AdvFeatureConfig+0x178>
 800612a:	f640 410e 	movw	r1, #3086	; 0xc0e
 800612e:	4837      	ldr	r0, [pc, #220]	; (800620c <UART_AdvFeatureConfig+0x250>)
 8006130:	f7fb fb2f 	bl	8001792 <assert_failed>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	689b      	ldr	r3, [r3, #8]
 800613a:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	430a      	orrs	r2, r1
 8006148:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800614e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006152:	2b00      	cmp	r3, #0
 8006154:	d064      	beq.n	8006220 <UART_AdvFeatureConfig+0x264>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	4a2d      	ldr	r2, [pc, #180]	; (8006210 <UART_AdvFeatureConfig+0x254>)
 800615c:	4293      	cmp	r3, r2
 800615e:	d013      	beq.n	8006188 <UART_AdvFeatureConfig+0x1cc>
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	4a2b      	ldr	r2, [pc, #172]	; (8006214 <UART_AdvFeatureConfig+0x258>)
 8006166:	4293      	cmp	r3, r2
 8006168:	d00e      	beq.n	8006188 <UART_AdvFeatureConfig+0x1cc>
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	4a2a      	ldr	r2, [pc, #168]	; (8006218 <UART_AdvFeatureConfig+0x25c>)
 8006170:	4293      	cmp	r3, r2
 8006172:	d009      	beq.n	8006188 <UART_AdvFeatureConfig+0x1cc>
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	4a28      	ldr	r2, [pc, #160]	; (800621c <UART_AdvFeatureConfig+0x260>)
 800617a:	4293      	cmp	r3, r2
 800617c:	d004      	beq.n	8006188 <UART_AdvFeatureConfig+0x1cc>
 800617e:	f640 4115 	movw	r1, #3093	; 0xc15
 8006182:	4822      	ldr	r0, [pc, #136]	; (800620c <UART_AdvFeatureConfig+0x250>)
 8006184:	f7fb fb05 	bl	8001792 <assert_failed>
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800618c:	2b00      	cmp	r3, #0
 800618e:	d009      	beq.n	80061a4 <UART_AdvFeatureConfig+0x1e8>
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006194:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006198:	d004      	beq.n	80061a4 <UART_AdvFeatureConfig+0x1e8>
 800619a:	f640 4116 	movw	r1, #3094	; 0xc16
 800619e:	481b      	ldr	r0, [pc, #108]	; (800620c <UART_AdvFeatureConfig+0x250>)
 80061a0:	f7fb faf7 	bl	8001792 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	685b      	ldr	r3, [r3, #4]
 80061aa:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	430a      	orrs	r2, r1
 80061b8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061be:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80061c2:	d12d      	bne.n	8006220 <UART_AdvFeatureConfig+0x264>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d013      	beq.n	80061f4 <UART_AdvFeatureConfig+0x238>
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80061d0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80061d4:	d00e      	beq.n	80061f4 <UART_AdvFeatureConfig+0x238>
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80061da:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80061de:	d009      	beq.n	80061f4 <UART_AdvFeatureConfig+0x238>
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80061e4:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80061e8:	d004      	beq.n	80061f4 <UART_AdvFeatureConfig+0x238>
 80061ea:	f640 411b 	movw	r1, #3099	; 0xc1b
 80061ee:	4807      	ldr	r0, [pc, #28]	; (800620c <UART_AdvFeatureConfig+0x250>)
 80061f0:	f7fb facf 	bl	8001792 <assert_failed>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	685b      	ldr	r3, [r3, #4]
 80061fa:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	430a      	orrs	r2, r1
 8006208:	605a      	str	r2, [r3, #4]
 800620a:	e009      	b.n	8006220 <UART_AdvFeatureConfig+0x264>
 800620c:	0800e600 	.word	0x0800e600
 8006210:	40011000 	.word	0x40011000
 8006214:	40004400 	.word	0x40004400
 8006218:	40004800 	.word	0x40004800
 800621c:	40011400 	.word	0x40011400
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006224:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006228:	2b00      	cmp	r3, #0
 800622a:	d018      	beq.n	800625e <UART_AdvFeatureConfig+0x2a2>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006230:	2b00      	cmp	r3, #0
 8006232:	d009      	beq.n	8006248 <UART_AdvFeatureConfig+0x28c>
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006238:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800623c:	d004      	beq.n	8006248 <UART_AdvFeatureConfig+0x28c>
 800623e:	f640 4123 	movw	r1, #3107	; 0xc23
 8006242:	4809      	ldr	r0, [pc, #36]	; (8006268 <UART_AdvFeatureConfig+0x2ac>)
 8006244:	f7fb faa5 	bl	8001792 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	685b      	ldr	r3, [r3, #4]
 800624e:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	430a      	orrs	r2, r1
 800625c:	605a      	str	r2, [r3, #4]
  }
}
 800625e:	bf00      	nop
 8006260:	3708      	adds	r7, #8
 8006262:	46bd      	mov	sp, r7
 8006264:	bd80      	pop	{r7, pc}
 8006266:	bf00      	nop
 8006268:	0800e600 	.word	0x0800e600

0800626c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800626c:	b580      	push	{r7, lr}
 800626e:	b086      	sub	sp, #24
 8006270:	af02      	add	r7, sp, #8
 8006272:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	2200      	movs	r2, #0
 8006278:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800627c:	f7fb fcf8 	bl	8001c70 <HAL_GetTick>
 8006280:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	f003 0308 	and.w	r3, r3, #8
 800628c:	2b08      	cmp	r3, #8
 800628e:	d10e      	bne.n	80062ae <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006290:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006294:	9300      	str	r3, [sp, #0]
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	2200      	movs	r2, #0
 800629a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800629e:	6878      	ldr	r0, [r7, #4]
 80062a0:	f000 f81b 	bl	80062da <UART_WaitOnFlagUntilTimeout>
 80062a4:	4603      	mov	r3, r0
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d001      	beq.n	80062ae <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80062aa:	2303      	movs	r3, #3
 80062ac:	e011      	b.n	80062d2 <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	2220      	movs	r2, #32
 80062b2:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	2220      	movs	r2, #32
 80062b8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	2200      	movs	r2, #0
 80062c0:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	2200      	movs	r2, #0
 80062c6:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	2200      	movs	r2, #0
 80062cc:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 80062d0:	2300      	movs	r3, #0
}
 80062d2:	4618      	mov	r0, r3
 80062d4:	3710      	adds	r7, #16
 80062d6:	46bd      	mov	sp, r7
 80062d8:	bd80      	pop	{r7, pc}

080062da <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80062da:	b580      	push	{r7, lr}
 80062dc:	b09c      	sub	sp, #112	; 0x70
 80062de:	af00      	add	r7, sp, #0
 80062e0:	60f8      	str	r0, [r7, #12]
 80062e2:	60b9      	str	r1, [r7, #8]
 80062e4:	603b      	str	r3, [r7, #0]
 80062e6:	4613      	mov	r3, r2
 80062e8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80062ea:	e0a7      	b.n	800643c <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80062ec:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80062ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062f2:	f000 80a3 	beq.w	800643c <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80062f6:	f7fb fcbb 	bl	8001c70 <HAL_GetTick>
 80062fa:	4602      	mov	r2, r0
 80062fc:	683b      	ldr	r3, [r7, #0]
 80062fe:	1ad3      	subs	r3, r2, r3
 8006300:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8006302:	429a      	cmp	r2, r3
 8006304:	d302      	bcc.n	800630c <UART_WaitOnFlagUntilTimeout+0x32>
 8006306:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006308:	2b00      	cmp	r3, #0
 800630a:	d13f      	bne.n	800638c <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006312:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006314:	e853 3f00 	ldrex	r3, [r3]
 8006318:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800631a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800631c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006320:	667b      	str	r3, [r7, #100]	; 0x64
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	461a      	mov	r2, r3
 8006328:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800632a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800632c:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800632e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006330:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006332:	e841 2300 	strex	r3, r2, [r1]
 8006336:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8006338:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800633a:	2b00      	cmp	r3, #0
 800633c:	d1e6      	bne.n	800630c <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	3308      	adds	r3, #8
 8006344:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006346:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006348:	e853 3f00 	ldrex	r3, [r3]
 800634c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800634e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006350:	f023 0301 	bic.w	r3, r3, #1
 8006354:	663b      	str	r3, [r7, #96]	; 0x60
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	3308      	adds	r3, #8
 800635c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800635e:	64ba      	str	r2, [r7, #72]	; 0x48
 8006360:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006362:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006364:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006366:	e841 2300 	strex	r3, r2, [r1]
 800636a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800636c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800636e:	2b00      	cmp	r3, #0
 8006370:	d1e5      	bne.n	800633e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	2220      	movs	r2, #32
 8006376:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	2220      	movs	r2, #32
 800637c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	2200      	movs	r2, #0
 8006384:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8006388:	2303      	movs	r3, #3
 800638a:	e068      	b.n	800645e <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	f003 0304 	and.w	r3, r3, #4
 8006396:	2b00      	cmp	r3, #0
 8006398:	d050      	beq.n	800643c <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	69db      	ldr	r3, [r3, #28]
 80063a0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80063a4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80063a8:	d148      	bne.n	800643c <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80063b2:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063bc:	e853 3f00 	ldrex	r3, [r3]
 80063c0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80063c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063c4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80063c8:	66fb      	str	r3, [r7, #108]	; 0x6c
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	461a      	mov	r2, r3
 80063d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80063d2:	637b      	str	r3, [r7, #52]	; 0x34
 80063d4:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063d6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80063d8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80063da:	e841 2300 	strex	r3, r2, [r1]
 80063de:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80063e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d1e6      	bne.n	80063b4 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	3308      	adds	r3, #8
 80063ec:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063ee:	697b      	ldr	r3, [r7, #20]
 80063f0:	e853 3f00 	ldrex	r3, [r3]
 80063f4:	613b      	str	r3, [r7, #16]
   return(result);
 80063f6:	693b      	ldr	r3, [r7, #16]
 80063f8:	f023 0301 	bic.w	r3, r3, #1
 80063fc:	66bb      	str	r3, [r7, #104]	; 0x68
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	3308      	adds	r3, #8
 8006404:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006406:	623a      	str	r2, [r7, #32]
 8006408:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800640a:	69f9      	ldr	r1, [r7, #28]
 800640c:	6a3a      	ldr	r2, [r7, #32]
 800640e:	e841 2300 	strex	r3, r2, [r1]
 8006412:	61bb      	str	r3, [r7, #24]
   return(result);
 8006414:	69bb      	ldr	r3, [r7, #24]
 8006416:	2b00      	cmp	r3, #0
 8006418:	d1e5      	bne.n	80063e6 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	2220      	movs	r2, #32
 800641e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	2220      	movs	r2, #32
 8006424:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	2220      	movs	r2, #32
 800642c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	2200      	movs	r2, #0
 8006434:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8006438:	2303      	movs	r3, #3
 800643a:	e010      	b.n	800645e <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	69da      	ldr	r2, [r3, #28]
 8006442:	68bb      	ldr	r3, [r7, #8]
 8006444:	4013      	ands	r3, r2
 8006446:	68ba      	ldr	r2, [r7, #8]
 8006448:	429a      	cmp	r2, r3
 800644a:	bf0c      	ite	eq
 800644c:	2301      	moveq	r3, #1
 800644e:	2300      	movne	r3, #0
 8006450:	b2db      	uxtb	r3, r3
 8006452:	461a      	mov	r2, r3
 8006454:	79fb      	ldrb	r3, [r7, #7]
 8006456:	429a      	cmp	r2, r3
 8006458:	f43f af48 	beq.w	80062ec <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800645c:	2300      	movs	r3, #0
}
 800645e:	4618      	mov	r0, r3
 8006460:	3770      	adds	r7, #112	; 0x70
 8006462:	46bd      	mov	sp, r7
 8006464:	bd80      	pop	{r7, pc}

08006466 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006466:	b480      	push	{r7}
 8006468:	b095      	sub	sp, #84	; 0x54
 800646a:	af00      	add	r7, sp, #0
 800646c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006474:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006476:	e853 3f00 	ldrex	r3, [r3]
 800647a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800647c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800647e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006482:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	461a      	mov	r2, r3
 800648a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800648c:	643b      	str	r3, [r7, #64]	; 0x40
 800648e:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006490:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006492:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006494:	e841 2300 	strex	r3, r2, [r1]
 8006498:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800649a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800649c:	2b00      	cmp	r3, #0
 800649e:	d1e6      	bne.n	800646e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	3308      	adds	r3, #8
 80064a6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064a8:	6a3b      	ldr	r3, [r7, #32]
 80064aa:	e853 3f00 	ldrex	r3, [r3]
 80064ae:	61fb      	str	r3, [r7, #28]
   return(result);
 80064b0:	69fb      	ldr	r3, [r7, #28]
 80064b2:	f023 0301 	bic.w	r3, r3, #1
 80064b6:	64bb      	str	r3, [r7, #72]	; 0x48
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	3308      	adds	r3, #8
 80064be:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80064c0:	62fa      	str	r2, [r7, #44]	; 0x2c
 80064c2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064c4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80064c6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80064c8:	e841 2300 	strex	r3, r2, [r1]
 80064cc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80064ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d1e5      	bne.n	80064a0 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80064d8:	2b01      	cmp	r3, #1
 80064da:	d118      	bne.n	800650e <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	e853 3f00 	ldrex	r3, [r3]
 80064e8:	60bb      	str	r3, [r7, #8]
   return(result);
 80064ea:	68bb      	ldr	r3, [r7, #8]
 80064ec:	f023 0310 	bic.w	r3, r3, #16
 80064f0:	647b      	str	r3, [r7, #68]	; 0x44
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	461a      	mov	r2, r3
 80064f8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80064fa:	61bb      	str	r3, [r7, #24]
 80064fc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064fe:	6979      	ldr	r1, [r7, #20]
 8006500:	69ba      	ldr	r2, [r7, #24]
 8006502:	e841 2300 	strex	r3, r2, [r1]
 8006506:	613b      	str	r3, [r7, #16]
   return(result);
 8006508:	693b      	ldr	r3, [r7, #16]
 800650a:	2b00      	cmp	r3, #0
 800650c:	d1e6      	bne.n	80064dc <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	2220      	movs	r2, #32
 8006512:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	2200      	movs	r2, #0
 800651a:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	2200      	movs	r2, #0
 8006520:	669a      	str	r2, [r3, #104]	; 0x68
}
 8006522:	bf00      	nop
 8006524:	3754      	adds	r7, #84	; 0x54
 8006526:	46bd      	mov	sp, r7
 8006528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800652c:	4770      	bx	lr

0800652e <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800652e:	b580      	push	{r7, lr}
 8006530:	b084      	sub	sp, #16
 8006532:	af00      	add	r7, sp, #0
 8006534:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800653a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	2200      	movs	r2, #0
 8006540:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	2200      	movs	r2, #0
 8006548:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800654c:	68f8      	ldr	r0, [r7, #12]
 800654e:	f7ff fa29 	bl	80059a4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006552:	bf00      	nop
 8006554:	3710      	adds	r7, #16
 8006556:	46bd      	mov	sp, r7
 8006558:	bd80      	pop	{r7, pc}

0800655a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800655a:	b580      	push	{r7, lr}
 800655c:	b088      	sub	sp, #32
 800655e:	af00      	add	r7, sp, #0
 8006560:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	e853 3f00 	ldrex	r3, [r3]
 800656e:	60bb      	str	r3, [r7, #8]
   return(result);
 8006570:	68bb      	ldr	r3, [r7, #8]
 8006572:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006576:	61fb      	str	r3, [r7, #28]
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	461a      	mov	r2, r3
 800657e:	69fb      	ldr	r3, [r7, #28]
 8006580:	61bb      	str	r3, [r7, #24]
 8006582:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006584:	6979      	ldr	r1, [r7, #20]
 8006586:	69ba      	ldr	r2, [r7, #24]
 8006588:	e841 2300 	strex	r3, r2, [r1]
 800658c:	613b      	str	r3, [r7, #16]
   return(result);
 800658e:	693b      	ldr	r3, [r7, #16]
 8006590:	2b00      	cmp	r3, #0
 8006592:	d1e6      	bne.n	8006562 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	2220      	movs	r2, #32
 8006598:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	2200      	movs	r2, #0
 800659e:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80065a0:	6878      	ldr	r0, [r7, #4]
 80065a2:	f7ff f9f5 	bl	8005990 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80065a6:	bf00      	nop
 80065a8:	3720      	adds	r7, #32
 80065aa:	46bd      	mov	sp, r7
 80065ac:	bd80      	pop	{r7, pc}

080065ae <VL53L0X_GetOffsetCalibrationDataMicroMeter>:
	return Status;
}

VL53L0X_Error VL53L0X_GetOffsetCalibrationDataMicroMeter(VL53L0X_DEV Dev,
	int32_t *pOffsetCalibrationDataMicroMeter)
{
 80065ae:	b580      	push	{r7, lr}
 80065b0:	b084      	sub	sp, #16
 80065b2:	af00      	add	r7, sp, #0
 80065b4:	6078      	str	r0, [r7, #4]
 80065b6:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80065b8:	2300      	movs	r3, #0
 80065ba:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_offset_calibration_data_micro_meter(Dev,
 80065bc:	6839      	ldr	r1, [r7, #0]
 80065be:	6878      	ldr	r0, [r7, #4]
 80065c0:	f001 fce1 	bl	8007f86 <VL53L0X_get_offset_calibration_data_micro_meter>
 80065c4:	4603      	mov	r3, r0
 80065c6:	73fb      	strb	r3, [r7, #15]
		pOffsetCalibrationDataMicroMeter);

	LOG_FUNCTION_END(Status);
	return Status;
 80065c8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80065cc:	4618      	mov	r0, r3
 80065ce:	3710      	adds	r7, #16
 80065d0:	46bd      	mov	sp, r7
 80065d2:	bd80      	pop	{r7, pc}

080065d4 <VL53L0X_DataInit>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_DataInit(VL53L0X_DEV Dev)
{
 80065d4:	b5b0      	push	{r4, r5, r7, lr}
 80065d6:	b096      	sub	sp, #88	; 0x58
 80065d8:	af00      	add	r7, sp, #0
 80065da:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80065dc:	2300      	movs	r3, #0
 80065de:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		0xFE,
		0x01);
#endif

	/* Set I2C standard mode */
	if (Status == VL53L0X_ERROR_NONE)
 80065e2:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d107      	bne.n	80065fa <VL53L0X_DataInit+0x26>
		Status = VL53L0X_WrByte(Dev, 0x88, 0x00);
 80065ea:	2200      	movs	r2, #0
 80065ec:	2188      	movs	r1, #136	; 0x88
 80065ee:	6878      	ldr	r0, [r7, #4]
 80065f0:	f004 feda 	bl	800b3a8 <VL53L0X_WrByte>
 80065f4:	4603      	mov	r3, r0
 80065f6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, ReadDataFromDeviceDone, 0);
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	2200      	movs	r2, #0
 80065fe:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
	if (Status == VL53L0X_ERROR_NONE)
		Status = VL53L0X_apply_offset_adjustment(Dev);
#endif

	/* Default value is 1000 for Linearity Corrective Gain */
	PALDevDataSet(Dev, LinearityCorrectiveGain, 1000);
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006608:	f8a3 2152 	strh.w	r2, [r3, #338]	; 0x152

	/* Dmax default Parameter */
	PALDevDataSet(Dev, DmaxCalRangeMilliMeter, 400);
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8006612:	f8a3 2154 	strh.w	r2, [r3, #340]	; 0x154
	PALDevDataSet(Dev, DmaxCalSignalRateRtnMegaCps,
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	4a9e      	ldr	r2, [pc, #632]	; (8006894 <VL53L0X_DataInit+0x2c0>)
 800661a:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
		(FixPoint1616_t)((0x00016B85))); /* 1.42 No Cover Glass*/

	/* Set Default static parameters
	 *set first temporary values 9.44MHz * 65536 = 618660 */
	VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, OscFrequencyMHz, 618660);
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	4a9d      	ldr	r2, [pc, #628]	; (8006898 <VL53L0X_DataInit+0x2c4>)
 8006622:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4

	/* Set Default XTalkCompensationRateMegaCps to 0  */
	VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationRateMegaCps, 0);
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	2200      	movs	r2, #0
 800662a:	621a      	str	r2, [r3, #32]

	/* Get default parameters */
	Status = VL53L0X_GetDeviceParameters(Dev, &CurrentParameters);
 800662c:	f107 0310 	add.w	r3, r7, #16
 8006630:	4619      	mov	r1, r3
 8006632:	6878      	ldr	r0, [r7, #4]
 8006634:	f000 fac2 	bl	8006bbc <VL53L0X_GetDeviceParameters>
 8006638:	4603      	mov	r3, r0
 800663a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (Status == VL53L0X_ERROR_NONE) {
 800663e:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8006642:	2b00      	cmp	r3, #0
 8006644:	d112      	bne.n	800666c <VL53L0X_DataInit+0x98>
		/* initialize PAL values */
		CurrentParameters.DeviceMode = VL53L0X_DEVICEMODE_SINGLE_RANGING;
 8006646:	2300      	movs	r3, #0
 8006648:	743b      	strb	r3, [r7, #16]
		CurrentParameters.HistogramMode = VL53L0X_HISTOGRAMMODE_DISABLED;
 800664a:	2300      	movs	r3, #0
 800664c:	747b      	strb	r3, [r7, #17]
		PALDevDataSet(Dev, CurrentParameters, CurrentParameters);
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	f103 0410 	add.w	r4, r3, #16
 8006654:	f107 0510 	add.w	r5, r7, #16
 8006658:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800665a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800665c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800665e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006660:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006662:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006664:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8006668:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	}

	/* Sigma estimator variable */
	PALDevDataSet(Dev, SigmaEstRefArray, 100);
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	2264      	movs	r2, #100	; 0x64
 8006670:	f8a3 2134 	strh.w	r2, [r3, #308]	; 0x134
	PALDevDataSet(Dev, SigmaEstEffPulseWidth, 900);
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	f44f 7261 	mov.w	r2, #900	; 0x384
 800667a:	f8a3 2136 	strh.w	r2, [r3, #310]	; 0x136
	PALDevDataSet(Dev, SigmaEstEffAmbWidth, 500);
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8006684:	f8a3 2138 	strh.w	r2, [r3, #312]	; 0x138
	PALDevDataSet(Dev, targetRefRate, 0x0A00); /* 20 MCPS in 9:7 format */
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 800668e:	f8a3 213c 	strh.w	r2, [r3, #316]	; 0x13c

	/* Use internal default settings */
	PALDevDataSet(Dev, UseInternalTuningSettings, 1);
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	2201      	movs	r2, #1
 8006696:	f883 2150 	strb.w	r2, [r3, #336]	; 0x150

	Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 800669a:	2201      	movs	r2, #1
 800669c:	2180      	movs	r1, #128	; 0x80
 800669e:	6878      	ldr	r0, [r7, #4]
 80066a0:	f004 fe82 	bl	800b3a8 <VL53L0X_WrByte>
 80066a4:	4603      	mov	r3, r0
 80066a6:	461a      	mov	r2, r3
 80066a8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80066ac:	4313      	orrs	r3, r2
 80066ae:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 80066b2:	2201      	movs	r2, #1
 80066b4:	21ff      	movs	r1, #255	; 0xff
 80066b6:	6878      	ldr	r0, [r7, #4]
 80066b8:	f004 fe76 	bl	800b3a8 <VL53L0X_WrByte>
 80066bc:	4603      	mov	r3, r0
 80066be:	461a      	mov	r2, r3
 80066c0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80066c4:	4313      	orrs	r3, r2
 80066c6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 80066ca:	2200      	movs	r2, #0
 80066cc:	2100      	movs	r1, #0
 80066ce:	6878      	ldr	r0, [r7, #4]
 80066d0:	f004 fe6a 	bl	800b3a8 <VL53L0X_WrByte>
 80066d4:	4603      	mov	r3, r0
 80066d6:	461a      	mov	r2, r3
 80066d8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80066dc:	4313      	orrs	r3, r2
 80066de:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_RdByte(Dev, 0x91, &StopVariable);
 80066e2:	f107 030f 	add.w	r3, r7, #15
 80066e6:	461a      	mov	r2, r3
 80066e8:	2191      	movs	r1, #145	; 0x91
 80066ea:	6878      	ldr	r0, [r7, #4]
 80066ec:	f004 fede 	bl	800b4ac <VL53L0X_RdByte>
 80066f0:	4603      	mov	r3, r0
 80066f2:	461a      	mov	r2, r3
 80066f4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80066f8:	4313      	orrs	r3, r2
 80066fa:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	PALDevDataSet(Dev, StopVariable, StopVariable);
 80066fe:	7bfa      	ldrb	r2, [r7, #15]
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	f883 213a 	strb.w	r2, [r3, #314]	; 0x13a
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 8006706:	2201      	movs	r2, #1
 8006708:	2100      	movs	r1, #0
 800670a:	6878      	ldr	r0, [r7, #4]
 800670c:	f004 fe4c 	bl	800b3a8 <VL53L0X_WrByte>
 8006710:	4603      	mov	r3, r0
 8006712:	461a      	mov	r2, r3
 8006714:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006718:	4313      	orrs	r3, r2
 800671a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800671e:	2200      	movs	r2, #0
 8006720:	21ff      	movs	r1, #255	; 0xff
 8006722:	6878      	ldr	r0, [r7, #4]
 8006724:	f004 fe40 	bl	800b3a8 <VL53L0X_WrByte>
 8006728:	4603      	mov	r3, r0
 800672a:	461a      	mov	r2, r3
 800672c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006730:	4313      	orrs	r3, r2
 8006732:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 8006736:	2200      	movs	r2, #0
 8006738:	2180      	movs	r1, #128	; 0x80
 800673a:	6878      	ldr	r0, [r7, #4]
 800673c:	f004 fe34 	bl	800b3a8 <VL53L0X_WrByte>
 8006740:	4603      	mov	r3, r0
 8006742:	461a      	mov	r2, r3
 8006744:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006748:	4313      	orrs	r3, r2
 800674a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	/* Enable all check */
	for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 800674e:	2300      	movs	r3, #0
 8006750:	653b      	str	r3, [r7, #80]	; 0x50
 8006752:	e014      	b.n	800677e <VL53L0X_DataInit+0x1aa>
		if (Status == VL53L0X_ERROR_NONE)
 8006754:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8006758:	2b00      	cmp	r3, #0
 800675a:	d114      	bne.n	8006786 <VL53L0X_DataInit+0x1b2>
			Status |= VL53L0X_SetLimitCheckEnable(Dev, i, 1);
 800675c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800675e:	b29b      	uxth	r3, r3
 8006760:	2201      	movs	r2, #1
 8006762:	4619      	mov	r1, r3
 8006764:	6878      	ldr	r0, [r7, #4]
 8006766:	f000 fd35 	bl	80071d4 <VL53L0X_SetLimitCheckEnable>
 800676a:	4603      	mov	r3, r0
 800676c:	461a      	mov	r2, r3
 800676e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006772:	4313      	orrs	r3, r2
 8006774:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8006778:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800677a:	3301      	adds	r3, #1
 800677c:	653b      	str	r3, [r7, #80]	; 0x50
 800677e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006780:	2b05      	cmp	r3, #5
 8006782:	dde7      	ble.n	8006754 <VL53L0X_DataInit+0x180>
 8006784:	e000      	b.n	8006788 <VL53L0X_DataInit+0x1b4>
		else
			break;
 8006786:	bf00      	nop

	}

	/* Disable the following checks */
	if (Status == VL53L0X_ERROR_NONE)
 8006788:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800678c:	2b00      	cmp	r3, #0
 800678e:	d107      	bne.n	80067a0 <VL53L0X_DataInit+0x1cc>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 8006790:	2200      	movs	r2, #0
 8006792:	2102      	movs	r1, #2
 8006794:	6878      	ldr	r0, [r7, #4]
 8006796:	f000 fd1d 	bl	80071d4 <VL53L0X_SetLimitCheckEnable>
 800679a:	4603      	mov	r3, r0
 800679c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, 0);

	if (Status == VL53L0X_ERROR_NONE)
 80067a0:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d107      	bne.n	80067b8 <VL53L0X_DataInit+0x1e4>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 80067a8:	2200      	movs	r2, #0
 80067aa:	2103      	movs	r1, #3
 80067ac:	6878      	ldr	r0, [r7, #4]
 80067ae:	f000 fd11 	bl	80071d4 <VL53L0X_SetLimitCheckEnable>
 80067b2:	4603      	mov	r3, r0
 80067b4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD, 0);

	if (Status == VL53L0X_ERROR_NONE)
 80067b8:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d107      	bne.n	80067d0 <VL53L0X_DataInit+0x1fc>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 80067c0:	2200      	movs	r2, #0
 80067c2:	2104      	movs	r1, #4
 80067c4:	6878      	ldr	r0, [r7, #4]
 80067c6:	f000 fd05 	bl	80071d4 <VL53L0X_SetLimitCheckEnable>
 80067ca:	4603      	mov	r3, r0
 80067cc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC, 0);

	if (Status == VL53L0X_ERROR_NONE)
 80067d0:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d107      	bne.n	80067e8 <VL53L0X_DataInit+0x214>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 80067d8:	2200      	movs	r2, #0
 80067da:	2105      	movs	r1, #5
 80067dc:	6878      	ldr	r0, [r7, #4]
 80067de:	f000 fcf9 	bl	80071d4 <VL53L0X_SetLimitCheckEnable>
 80067e2:	4603      	mov	r3, r0
 80067e4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE, 0);

	/* Limit default values */
	if (Status == VL53L0X_ERROR_NONE) {
 80067e8:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	d108      	bne.n	8006802 <VL53L0X_DataInit+0x22e>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 80067f0:	f44f 1290 	mov.w	r2, #1179648	; 0x120000
 80067f4:	2100      	movs	r1, #0
 80067f6:	6878      	ldr	r0, [r7, #4]
 80067f8:	f000 fd9c 	bl	8007334 <VL53L0X_SetLimitCheckValue>
 80067fc:	4603      	mov	r3, r0
 80067fe:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				(FixPoint1616_t)(18 * 65536));
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8006802:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8006806:	2b00      	cmp	r3, #0
 8006808:	d108      	bne.n	800681c <VL53L0X_DataInit+0x248>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 800680a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800680e:	2101      	movs	r1, #1
 8006810:	6878      	ldr	r0, [r7, #4]
 8006812:	f000 fd8f 	bl	8007334 <VL53L0X_SetLimitCheckValue>
 8006816:	4603      	mov	r3, r0
 8006818:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
				(FixPoint1616_t)(25 * 65536 / 100));
				/* 0.25 * 65536 */
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800681c:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8006820:	2b00      	cmp	r3, #0
 8006822:	d108      	bne.n	8006836 <VL53L0X_DataInit+0x262>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 8006824:	f44f 120c 	mov.w	r2, #2293760	; 0x230000
 8006828:	2102      	movs	r1, #2
 800682a:	6878      	ldr	r0, [r7, #4]
 800682c:	f000 fd82 	bl	8007334 <VL53L0X_SetLimitCheckValue>
 8006830:	4603      	mov	r3, r0
 8006832:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				(FixPoint1616_t)(35 * 65536));
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8006836:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800683a:	2b00      	cmp	r3, #0
 800683c:	d107      	bne.n	800684e <VL53L0X_DataInit+0x27a>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 800683e:	2200      	movs	r2, #0
 8006840:	2103      	movs	r1, #3
 8006842:	6878      	ldr	r0, [r7, #4]
 8006844:	f000 fd76 	bl	8007334 <VL53L0X_SetLimitCheckValue>
 8006848:	4603      	mov	r3, r0
 800684a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				(FixPoint1616_t)(0 * 65536));
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800684e:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8006852:	2b00      	cmp	r3, #0
 8006854:	d10f      	bne.n	8006876 <VL53L0X_DataInit+0x2a2>

		PALDevDataSet(Dev, SequenceConfig, 0xFF);
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	22ff      	movs	r2, #255	; 0xff
 800685a:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 800685e:	22ff      	movs	r2, #255	; 0xff
 8006860:	2101      	movs	r1, #1
 8006862:	6878      	ldr	r0, [r7, #4]
 8006864:	f004 fda0 	bl	800b3a8 <VL53L0X_WrByte>
 8006868:	4603      	mov	r3, r0
 800686a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			0xFF);

		/* Set PAL state to tell that we are waiting for call to
		 * VL53L0X_StaticInit */
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_WAIT_STATICINIT);
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	2201      	movs	r2, #1
 8006872:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
	}

	if (Status == VL53L0X_ERROR_NONE)
 8006876:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800687a:	2b00      	cmp	r3, #0
 800687c:	d103      	bne.n	8006886 <VL53L0X_DataInit+0x2b2>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 0);
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	2200      	movs	r2, #0
 8006882:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115


	LOG_FUNCTION_END(Status);
	return Status;
 8006886:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
}
 800688a:	4618      	mov	r0, r3
 800688c:	3758      	adds	r7, #88	; 0x58
 800688e:	46bd      	mov	sp, r7
 8006890:	bdb0      	pop	{r4, r5, r7, pc}
 8006892:	bf00      	nop
 8006894:	00016b85 	.word	0x00016b85
 8006898:	000970a4 	.word	0x000970a4

0800689c <VL53L0X_StaticInit>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_StaticInit(VL53L0X_DEV Dev)
{
 800689c:	b5b0      	push	{r4, r5, r7, lr}
 800689e:	b09e      	sub	sp, #120	; 0x78
 80068a0:	af02      	add	r7, sp, #8
 80068a2:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80068a4:	2300      	movs	r3, #0
 80068a6:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	VL53L0X_DeviceParameters_t CurrentParameters = {0};
 80068aa:	f107 031c 	add.w	r3, r7, #28
 80068ae:	2240      	movs	r2, #64	; 0x40
 80068b0:	2100      	movs	r1, #0
 80068b2:	4618      	mov	r0, r3
 80068b4:	f004 fee0 	bl	800b678 <memset>
	uint8_t *pTuningSettingBuffer;
	uint16_t tempword = 0;
 80068b8:	2300      	movs	r3, #0
 80068ba:	837b      	strh	r3, [r7, #26]
	uint8_t tempbyte = 0;
 80068bc:	2300      	movs	r3, #0
 80068be:	767b      	strb	r3, [r7, #25]
	uint8_t UseInternalTuningSettings = 0;
 80068c0:	2300      	movs	r3, #0
 80068c2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	uint32_t count = 0;
 80068c6:	2300      	movs	r3, #0
 80068c8:	663b      	str	r3, [r7, #96]	; 0x60
	uint8_t isApertureSpads = 0;
 80068ca:	2300      	movs	r3, #0
 80068cc:	763b      	strb	r3, [r7, #24]
	uint32_t refSpadCount = 0;
 80068ce:	2300      	movs	r3, #0
 80068d0:	617b      	str	r3, [r7, #20]
	uint8_t ApertureSpads = 0;
 80068d2:	2300      	movs	r3, #0
 80068d4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	uint8_t vcselPulsePeriodPCLK;
	uint32_t seqTimeoutMicroSecs;

	LOG_FUNCTION_START("");

	Status = VL53L0X_get_info_from_device(Dev, 1);
 80068d8:	2101      	movs	r1, #1
 80068da:	6878      	ldr	r0, [r7, #4]
 80068dc:	f002 faa9 	bl	8008e32 <VL53L0X_get_info_from_device>
 80068e0:	4603      	mov	r3, r0
 80068e2:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f

	/* set the ref spad from NVM */
	count	= (uint32_t)VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	f893 3113 	ldrb.w	r3, [r3, #275]	; 0x113
 80068ec:	663b      	str	r3, [r7, #96]	; 0x60
		ReferenceSpadCount);
	ApertureSpads = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	f893 3114 	ldrb.w	r3, [r3, #276]	; 0x114
 80068f4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		ReferenceSpadType);

	/* NVM value invalid */
	if ((ApertureSpads > 1) ||
 80068f8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80068fc:	2b01      	cmp	r3, #1
 80068fe:	d80d      	bhi.n	800691c <VL53L0X_StaticInit+0x80>
 8006900:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006904:	2b01      	cmp	r3, #1
 8006906:	d102      	bne.n	800690e <VL53L0X_StaticInit+0x72>
		((ApertureSpads == 1) && (count > 32)) ||
 8006908:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800690a:	2b20      	cmp	r3, #32
 800690c:	d806      	bhi.n	800691c <VL53L0X_StaticInit+0x80>
 800690e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006912:	2b00      	cmp	r3, #0
 8006914:	d10e      	bne.n	8006934 <VL53L0X_StaticInit+0x98>
		((ApertureSpads == 0) && (count > 12)))
 8006916:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006918:	2b0c      	cmp	r3, #12
 800691a:	d90b      	bls.n	8006934 <VL53L0X_StaticInit+0x98>
		Status = VL53L0X_perform_ref_spad_management(Dev, &refSpadCount,
 800691c:	f107 0218 	add.w	r2, r7, #24
 8006920:	f107 0314 	add.w	r3, r7, #20
 8006924:	4619      	mov	r1, r3
 8006926:	6878      	ldr	r0, [r7, #4]
 8006928:	f001 fd28 	bl	800837c <VL53L0X_perform_ref_spad_management>
 800692c:	4603      	mov	r3, r0
 800692e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 8006932:	e009      	b.n	8006948 <VL53L0X_StaticInit+0xac>
			&isApertureSpads);
	else
		Status = VL53L0X_set_reference_spads(Dev, count, ApertureSpads);
 8006934:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006938:	461a      	mov	r2, r3
 800693a:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800693c:	6878      	ldr	r0, [r7, #4]
 800693e:	f001 ff29 	bl	8008794 <VL53L0X_set_reference_spads>
 8006942:	4603      	mov	r3, r0
 8006944:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f


	/* Initialize tuning settings buffer to prevent compiler warning. */
	pTuningSettingBuffer = DefaultTuningSettings;
 8006948:	4b94      	ldr	r3, [pc, #592]	; (8006b9c <VL53L0X_StaticInit+0x300>)
 800694a:	66bb      	str	r3, [r7, #104]	; 0x68

	if (Status == VL53L0X_ERROR_NONE) {
 800694c:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8006950:	2b00      	cmp	r3, #0
 8006952:	d10f      	bne.n	8006974 <VL53L0X_StaticInit+0xd8>
		UseInternalTuningSettings = PALDevDataGet(Dev,
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	f893 3150 	ldrb.w	r3, [r3, #336]	; 0x150
 800695a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			UseInternalTuningSettings);

		if (UseInternalTuningSettings == 0)
 800695e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8006962:	2b00      	cmp	r3, #0
 8006964:	d104      	bne.n	8006970 <VL53L0X_StaticInit+0xd4>
			pTuningSettingBuffer = PALDevDataGet(Dev,
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 800696c:	66bb      	str	r3, [r7, #104]	; 0x68
 800696e:	e001      	b.n	8006974 <VL53L0X_StaticInit+0xd8>
				pTuningSettingsPointer);
		else
			pTuningSettingBuffer = DefaultTuningSettings;
 8006970:	4b8a      	ldr	r3, [pc, #552]	; (8006b9c <VL53L0X_StaticInit+0x300>)
 8006972:	66bb      	str	r3, [r7, #104]	; 0x68

	}

	if (Status == VL53L0X_ERROR_NONE)
 8006974:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8006978:	2b00      	cmp	r3, #0
 800697a:	d106      	bne.n	800698a <VL53L0X_StaticInit+0xee>
		Status = VL53L0X_load_tuning_settings(Dev, pTuningSettingBuffer);
 800697c:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800697e:	6878      	ldr	r0, [r7, #4]
 8006980:	f003 fdfc 	bl	800a57c <VL53L0X_load_tuning_settings>
 8006984:	4603      	mov	r3, r0
 8006986:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f


	/* Set interrupt config to new sample ready */
	if (Status == VL53L0X_ERROR_NONE) {
 800698a:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800698e:	2b00      	cmp	r3, #0
 8006990:	d10a      	bne.n	80069a8 <VL53L0X_StaticInit+0x10c>
		Status = VL53L0X_SetGpioConfig(Dev, 0, 0,
 8006992:	2300      	movs	r3, #0
 8006994:	9300      	str	r3, [sp, #0]
 8006996:	2304      	movs	r3, #4
 8006998:	2200      	movs	r2, #0
 800699a:	2100      	movs	r1, #0
 800699c:	6878      	ldr	r0, [r7, #4]
 800699e:	f001 f8f1 	bl	8007b84 <VL53L0X_SetGpioConfig>
 80069a2:	4603      	mov	r3, r0
 80069a4:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY,
		VL53L0X_INTERRUPTPOLARITY_LOW);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 80069a8:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	d121      	bne.n	80069f4 <VL53L0X_StaticInit+0x158>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 80069b0:	2201      	movs	r2, #1
 80069b2:	21ff      	movs	r1, #255	; 0xff
 80069b4:	6878      	ldr	r0, [r7, #4]
 80069b6:	f004 fcf7 	bl	800b3a8 <VL53L0X_WrByte>
 80069ba:	4603      	mov	r3, r0
 80069bc:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		Status |= VL53L0X_RdWord(Dev, 0x84, &tempword);
 80069c0:	f107 031a 	add.w	r3, r7, #26
 80069c4:	461a      	mov	r2, r3
 80069c6:	2184      	movs	r1, #132	; 0x84
 80069c8:	6878      	ldr	r0, [r7, #4]
 80069ca:	f004 fd99 	bl	800b500 <VL53L0X_RdWord>
 80069ce:	4603      	mov	r3, r0
 80069d0:	461a      	mov	r2, r3
 80069d2:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80069d6:	4313      	orrs	r3, r2
 80069d8:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 80069dc:	2200      	movs	r2, #0
 80069de:	21ff      	movs	r1, #255	; 0xff
 80069e0:	6878      	ldr	r0, [r7, #4]
 80069e2:	f004 fce1 	bl	800b3a8 <VL53L0X_WrByte>
 80069e6:	4603      	mov	r3, r0
 80069e8:	461a      	mov	r2, r3
 80069ea:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80069ee:	4313      	orrs	r3, r2
 80069f0:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	}

	if (Status == VL53L0X_ERROR_NONE) {
 80069f4:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d105      	bne.n	8006a08 <VL53L0X_StaticInit+0x16c>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, OscFrequencyMHz,
 80069fc:	8b7b      	ldrh	r3, [r7, #26]
 80069fe:	011b      	lsls	r3, r3, #4
 8006a00:	461a      	mov	r2, r3
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
			VL53L0X_FIXPOINT412TOFIXPOINT1616(tempword));
	}

	/* After static init, some device parameters may be changed,
	 * so update them */
	if (Status == VL53L0X_ERROR_NONE)
 8006a08:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d108      	bne.n	8006a22 <VL53L0X_StaticInit+0x186>
		Status = VL53L0X_GetDeviceParameters(Dev, &CurrentParameters);
 8006a10:	f107 031c 	add.w	r3, r7, #28
 8006a14:	4619      	mov	r1, r3
 8006a16:	6878      	ldr	r0, [r7, #4]
 8006a18:	f000 f8d0 	bl	8006bbc <VL53L0X_GetDeviceParameters>
 8006a1c:	4603      	mov	r3, r0
 8006a1e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f


	if (Status == VL53L0X_ERROR_NONE) {
 8006a22:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d110      	bne.n	8006a4c <VL53L0X_StaticInit+0x1b0>
		Status = VL53L0X_GetFractionEnable(Dev, &tempbyte);
 8006a2a:	f107 0319 	add.w	r3, r7, #25
 8006a2e:	4619      	mov	r1, r3
 8006a30:	6878      	ldr	r0, [r7, #4]
 8006a32:	f000 f992 	bl	8006d5a <VL53L0X_GetFractionEnable>
 8006a36:	4603      	mov	r3, r0
 8006a38:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		if (Status == VL53L0X_ERROR_NONE)
 8006a3c:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	d103      	bne.n	8006a4c <VL53L0X_StaticInit+0x1b0>
			PALDevDataSet(Dev, RangeFractionalEnable, tempbyte);
 8006a44:	7e7a      	ldrb	r2, [r7, #25]
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	f883 2131 	strb.w	r2, [r3, #305]	; 0x131

	}

	if (Status == VL53L0X_ERROR_NONE)
 8006a4c:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d10e      	bne.n	8006a72 <VL53L0X_StaticInit+0x1d6>
		PALDevDataSet(Dev, CurrentParameters, CurrentParameters);
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	f103 0410 	add.w	r4, r3, #16
 8006a5a:	f107 051c 	add.w	r5, r7, #28
 8006a5e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006a60:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006a62:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006a64:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006a66:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006a68:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006a6a:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8006a6e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}


	/* read the sequence config and save it */
	if (Status == VL53L0X_ERROR_NONE) {
 8006a72:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d111      	bne.n	8006a9e <VL53L0X_StaticInit+0x202>
		Status = VL53L0X_RdByte(Dev,
 8006a7a:	f107 0319 	add.w	r3, r7, #25
 8006a7e:	461a      	mov	r2, r3
 8006a80:	2101      	movs	r1, #1
 8006a82:	6878      	ldr	r0, [r7, #4]
 8006a84:	f004 fd12 	bl	800b4ac <VL53L0X_RdByte>
 8006a88:	4603      	mov	r3, r0
 8006a8a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, &tempbyte);
		if (Status == VL53L0X_ERROR_NONE)
 8006a8e:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d103      	bne.n	8006a9e <VL53L0X_StaticInit+0x202>
			PALDevDataSet(Dev, SequenceConfig, tempbyte);
 8006a96:	7e7a      	ldrb	r2, [r7, #25]
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	/* Disable MSRC and TCC by default */
	if (Status == VL53L0X_ERROR_NONE)
 8006a9e:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d107      	bne.n	8006ab6 <VL53L0X_StaticInit+0x21a>
		Status = VL53L0X_SetSequenceStepEnable(Dev,
 8006aa6:	2200      	movs	r2, #0
 8006aa8:	2100      	movs	r1, #0
 8006aaa:	6878      	ldr	r0, [r7, #4]
 8006aac:	f000 f9ca 	bl	8006e44 <VL53L0X_SetSequenceStepEnable>
 8006ab0:	4603      	mov	r3, r0
 8006ab2:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
					VL53L0X_SEQUENCESTEP_TCC, 0);


	if (Status == VL53L0X_ERROR_NONE)
 8006ab6:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d107      	bne.n	8006ace <VL53L0X_StaticInit+0x232>
		Status = VL53L0X_SetSequenceStepEnable(Dev,
 8006abe:	2200      	movs	r2, #0
 8006ac0:	2102      	movs	r1, #2
 8006ac2:	6878      	ldr	r0, [r7, #4]
 8006ac4:	f000 f9be 	bl	8006e44 <VL53L0X_SetSequenceStepEnable>
 8006ac8:	4603      	mov	r3, r0
 8006aca:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		VL53L0X_SEQUENCESTEP_MSRC, 0);


	/* Set PAL State to standby */
	if (Status == VL53L0X_ERROR_NONE)
 8006ace:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d103      	bne.n	8006ade <VL53L0X_StaticInit+0x242>
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_IDLE);
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	2203      	movs	r2, #3
 8006ada:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132



	/* Store pre-range vcsel period */
	if (Status == VL53L0X_ERROR_NONE) {
 8006ade:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d109      	bne.n	8006afa <VL53L0X_StaticInit+0x25e>
		Status = VL53L0X_GetVcselPulsePeriod(
 8006ae6:	f107 0313 	add.w	r3, r7, #19
 8006aea:	461a      	mov	r2, r3
 8006aec:	2100      	movs	r1, #0
 8006aee:	6878      	ldr	r0, [r7, #4]
 8006af0:	f000 f990 	bl	8006e14 <VL53L0X_GetVcselPulsePeriod>
 8006af4:	4603      	mov	r3, r0
 8006af6:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_VCSEL_PERIOD_PRE_RANGE,
			&vcselPulsePeriodPCLK);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8006afa:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d103      	bne.n	8006b0a <VL53L0X_StaticInit+0x26e>
			VL53L0X_SETDEVICESPECIFICPARAMETER(
 8006b02:	7cfa      	ldrb	r2, [r7, #19]
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	f883 20e8 	strb.w	r2, [r3, #232]	; 0xe8
				PreRangeVcselPulsePeriod,
				vcselPulsePeriodPCLK);
	}

	/* Store final-range vcsel period */
	if (Status == VL53L0X_ERROR_NONE) {
 8006b0a:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d109      	bne.n	8006b26 <VL53L0X_StaticInit+0x28a>
		Status = VL53L0X_GetVcselPulsePeriod(
 8006b12:	f107 0313 	add.w	r3, r7, #19
 8006b16:	461a      	mov	r2, r3
 8006b18:	2101      	movs	r1, #1
 8006b1a:	6878      	ldr	r0, [r7, #4]
 8006b1c:	f000 f97a 	bl	8006e14 <VL53L0X_GetVcselPulsePeriod>
 8006b20:	4603      	mov	r3, r0
 8006b22:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
			&vcselPulsePeriodPCLK);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8006b26:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d103      	bne.n	8006b36 <VL53L0X_StaticInit+0x29a>
			VL53L0X_SETDEVICESPECIFICPARAMETER(
 8006b2e:	7cfa      	ldrb	r2, [r7, #19]
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
				FinalRangeVcselPulsePeriod,
				vcselPulsePeriodPCLK);
	}

	/* Store pre-range timeout */
	if (Status == VL53L0X_ERROR_NONE) {
 8006b36:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d109      	bne.n	8006b52 <VL53L0X_StaticInit+0x2b6>
		Status = get_sequence_step_timeout(
 8006b3e:	f107 030c 	add.w	r3, r7, #12
 8006b42:	461a      	mov	r2, r3
 8006b44:	2103      	movs	r1, #3
 8006b46:	6878      	ldr	r0, [r7, #4]
 8006b48:	f002 fef4 	bl	8009934 <get_sequence_step_timeout>
 8006b4c:	4603      	mov	r3, r0
 8006b4e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_SEQUENCESTEP_PRE_RANGE,
			&seqTimeoutMicroSecs);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8006b52:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d103      	bne.n	8006b62 <VL53L0X_StaticInit+0x2c6>
		VL53L0X_SETDEVICESPECIFICPARAMETER(
 8006b5a:	68fa      	ldr	r2, [r7, #12]
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
			PreRangeTimeoutMicroSecs,
			seqTimeoutMicroSecs);
	}

	/* Store final-range timeout */
	if (Status == VL53L0X_ERROR_NONE) {
 8006b62:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d109      	bne.n	8006b7e <VL53L0X_StaticInit+0x2e2>
		Status = get_sequence_step_timeout(
 8006b6a:	f107 030c 	add.w	r3, r7, #12
 8006b6e:	461a      	mov	r2, r3
 8006b70:	2104      	movs	r1, #4
 8006b72:	6878      	ldr	r0, [r7, #4]
 8006b74:	f002 fede 	bl	8009934 <get_sequence_step_timeout>
 8006b78:	4603      	mov	r3, r0
 8006b7a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_SEQUENCESTEP_FINAL_RANGE,
			&seqTimeoutMicroSecs);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8006b7e:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d103      	bne.n	8006b8e <VL53L0X_StaticInit+0x2f2>
		VL53L0X_SETDEVICESPECIFICPARAMETER(
 8006b86:	68fa      	ldr	r2, [r7, #12]
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
			FinalRangeTimeoutMicroSecs,
			seqTimeoutMicroSecs);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8006b8e:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
}
 8006b92:	4618      	mov	r0, r3
 8006b94:	3770      	adds	r7, #112	; 0x70
 8006b96:	46bd      	mov	sp, r7
 8006b98:	bdb0      	pop	{r4, r5, r7, pc}
 8006b9a:	bf00      	nop
 8006b9c:	2000000c 	.word	0x2000000c

08006ba0 <VL53L0X_WaitDeviceBooted>:

VL53L0X_Error VL53L0X_WaitDeviceBooted(VL53L0X_DEV Dev)
{
 8006ba0:	b480      	push	{r7}
 8006ba2:	b085      	sub	sp, #20
 8006ba4:	af00      	add	r7, sp, #0
 8006ba6:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NOT_IMPLEMENTED;
 8006ba8:	239d      	movs	r3, #157	; 0x9d
 8006baa:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	/* not implemented on VL53L0X */

	LOG_FUNCTION_END(Status);
	return Status;
 8006bac:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006bb0:	4618      	mov	r0, r3
 8006bb2:	3714      	adds	r7, #20
 8006bb4:	46bd      	mov	sp, r7
 8006bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bba:	4770      	bx	lr

08006bbc <VL53L0X_GetDeviceParameters>:
	return Status;
}

VL53L0X_Error VL53L0X_GetDeviceParameters(VL53L0X_DEV Dev,
	VL53L0X_DeviceParameters_t *pDeviceParameters)
{
 8006bbc:	b580      	push	{r7, lr}
 8006bbe:	b084      	sub	sp, #16
 8006bc0:	af00      	add	r7, sp, #0
 8006bc2:	6078      	str	r0, [r7, #4]
 8006bc4:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006bc6:	2300      	movs	r3, #0
 8006bc8:	73fb      	strb	r3, [r7, #15]
	int i;

	LOG_FUNCTION_START("");

	Status = VL53L0X_GetDeviceMode(Dev, &(pDeviceParameters->DeviceMode));
 8006bca:	683b      	ldr	r3, [r7, #0]
 8006bcc:	4619      	mov	r1, r3
 8006bce:	6878      	ldr	r0, [r7, #4]
 8006bd0:	f000 f8b0 	bl	8006d34 <VL53L0X_GetDeviceMode>
 8006bd4:	4603      	mov	r3, r0
 8006bd6:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 8006bd8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d107      	bne.n	8006bf0 <VL53L0X_GetDeviceParameters+0x34>
		Status = VL53L0X_GetInterMeasurementPeriodMilliSeconds(Dev,
 8006be0:	683b      	ldr	r3, [r7, #0]
 8006be2:	3308      	adds	r3, #8
 8006be4:	4619      	mov	r1, r3
 8006be6:	6878      	ldr	r0, [r7, #4]
 8006be8:	f000 fa78 	bl	80070dc <VL53L0X_GetInterMeasurementPeriodMilliSeconds>
 8006bec:	4603      	mov	r3, r0
 8006bee:	73fb      	strb	r3, [r7, #15]
		&(pDeviceParameters->InterMeasurementPeriodMilliSeconds));


	if (Status == VL53L0X_ERROR_NONE)
 8006bf0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d102      	bne.n	8006bfe <VL53L0X_GetDeviceParameters+0x42>
		pDeviceParameters->XTalkCompensationEnable = 0;
 8006bf8:	683b      	ldr	r3, [r7, #0]
 8006bfa:	2200      	movs	r2, #0
 8006bfc:	731a      	strb	r2, [r3, #12]

	if (Status == VL53L0X_ERROR_NONE)
 8006bfe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d107      	bne.n	8006c16 <VL53L0X_GetDeviceParameters+0x5a>
		Status = VL53L0X_GetXTalkCompensationRateMegaCps(Dev,
 8006c06:	683b      	ldr	r3, [r7, #0]
 8006c08:	3310      	adds	r3, #16
 8006c0a:	4619      	mov	r1, r3
 8006c0c:	6878      	ldr	r0, [r7, #4]
 8006c0e:	f000 faae 	bl	800716e <VL53L0X_GetXTalkCompensationRateMegaCps>
 8006c12:	4603      	mov	r3, r0
 8006c14:	73fb      	strb	r3, [r7, #15]
			&(pDeviceParameters->XTalkCompensationRateMegaCps));


	if (Status == VL53L0X_ERROR_NONE)
 8006c16:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d107      	bne.n	8006c2e <VL53L0X_GetDeviceParameters+0x72>
		Status = VL53L0X_GetOffsetCalibrationDataMicroMeter(Dev,
 8006c1e:	683b      	ldr	r3, [r7, #0]
 8006c20:	3314      	adds	r3, #20
 8006c22:	4619      	mov	r1, r3
 8006c24:	6878      	ldr	r0, [r7, #4]
 8006c26:	f7ff fcc2 	bl	80065ae <VL53L0X_GetOffsetCalibrationDataMicroMeter>
 8006c2a:	4603      	mov	r3, r0
 8006c2c:	73fb      	strb	r3, [r7, #15]
			&(pDeviceParameters->RangeOffsetMicroMeters));


	if (Status == VL53L0X_ERROR_NONE) {
 8006c2e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d134      	bne.n	8006ca0 <VL53L0X_GetDeviceParameters+0xe4>
		for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8006c36:	2300      	movs	r3, #0
 8006c38:	60bb      	str	r3, [r7, #8]
 8006c3a:	e02a      	b.n	8006c92 <VL53L0X_GetDeviceParameters+0xd6>
			/* get first the values, then the enables.
			 * VL53L0X_GetLimitCheckValue will modify the enable
			 * flags
			 */
			if (Status == VL53L0X_ERROR_NONE) {
 8006c3c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	d12a      	bne.n	8006c9a <VL53L0X_GetDeviceParameters+0xde>
				Status |= VL53L0X_GetLimitCheckValue(Dev, i,
 8006c44:	68bb      	ldr	r3, [r7, #8]
 8006c46:	b299      	uxth	r1, r3
 8006c48:	68bb      	ldr	r3, [r7, #8]
 8006c4a:	3308      	adds	r3, #8
 8006c4c:	009b      	lsls	r3, r3, #2
 8006c4e:	683a      	ldr	r2, [r7, #0]
 8006c50:	4413      	add	r3, r2
 8006c52:	3304      	adds	r3, #4
 8006c54:	461a      	mov	r2, r3
 8006c56:	6878      	ldr	r0, [r7, #4]
 8006c58:	f000 fbce 	bl	80073f8 <VL53L0X_GetLimitCheckValue>
 8006c5c:	4603      	mov	r3, r0
 8006c5e:	461a      	mov	r2, r3
 8006c60:	7bfb      	ldrb	r3, [r7, #15]
 8006c62:	4313      	orrs	r3, r2
 8006c64:	73fb      	strb	r3, [r7, #15]
				&(pDeviceParameters->LimitChecksValue[i]));
			} else {
				break;
			}
			if (Status == VL53L0X_ERROR_NONE) {
 8006c66:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d117      	bne.n	8006c9e <VL53L0X_GetDeviceParameters+0xe2>
				Status |= VL53L0X_GetLimitCheckEnable(Dev, i,
 8006c6e:	68bb      	ldr	r3, [r7, #8]
 8006c70:	b299      	uxth	r1, r3
 8006c72:	68bb      	ldr	r3, [r7, #8]
 8006c74:	3318      	adds	r3, #24
 8006c76:	683a      	ldr	r2, [r7, #0]
 8006c78:	4413      	add	r3, r2
 8006c7a:	461a      	mov	r2, r3
 8006c7c:	6878      	ldr	r0, [r7, #4]
 8006c7e:	f000 fb35 	bl	80072ec <VL53L0X_GetLimitCheckEnable>
 8006c82:	4603      	mov	r3, r0
 8006c84:	461a      	mov	r2, r3
 8006c86:	7bfb      	ldrb	r3, [r7, #15]
 8006c88:	4313      	orrs	r3, r2
 8006c8a:	73fb      	strb	r3, [r7, #15]
		for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8006c8c:	68bb      	ldr	r3, [r7, #8]
 8006c8e:	3301      	adds	r3, #1
 8006c90:	60bb      	str	r3, [r7, #8]
 8006c92:	68bb      	ldr	r3, [r7, #8]
 8006c94:	2b05      	cmp	r3, #5
 8006c96:	ddd1      	ble.n	8006c3c <VL53L0X_GetDeviceParameters+0x80>
 8006c98:	e002      	b.n	8006ca0 <VL53L0X_GetDeviceParameters+0xe4>
				break;
 8006c9a:	bf00      	nop
 8006c9c:	e000      	b.n	8006ca0 <VL53L0X_GetDeviceParameters+0xe4>
				&(pDeviceParameters->LimitChecksEnable[i]));
			} else {
				break;
 8006c9e:	bf00      	nop
			}
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8006ca0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d107      	bne.n	8006cb8 <VL53L0X_GetDeviceParameters+0xfc>
		Status = VL53L0X_GetWrapAroundCheckEnable(Dev,
 8006ca8:	683b      	ldr	r3, [r7, #0]
 8006caa:	333c      	adds	r3, #60	; 0x3c
 8006cac:	4619      	mov	r1, r3
 8006cae:	6878      	ldr	r0, [r7, #4]
 8006cb0:	f000 fc30 	bl	8007514 <VL53L0X_GetWrapAroundCheckEnable>
 8006cb4:	4603      	mov	r3, r0
 8006cb6:	73fb      	strb	r3, [r7, #15]
			&(pDeviceParameters->WrapAroundCheckEnable));
	}

	/* Need to be done at the end as it uses VCSELPulsePeriod */
	if (Status == VL53L0X_ERROR_NONE) {
 8006cb8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	d107      	bne.n	8006cd0 <VL53L0X_GetDeviceParameters+0x114>
		Status = VL53L0X_GetMeasurementTimingBudgetMicroSeconds(Dev,
 8006cc0:	683b      	ldr	r3, [r7, #0]
 8006cc2:	3304      	adds	r3, #4
 8006cc4:	4619      	mov	r1, r3
 8006cc6:	6878      	ldr	r0, [r7, #4]
 8006cc8:	f000 f879 	bl	8006dbe <VL53L0X_GetMeasurementTimingBudgetMicroSeconds>
 8006ccc:	4603      	mov	r3, r0
 8006cce:	73fb      	strb	r3, [r7, #15]
		&(pDeviceParameters->MeasurementTimingBudgetMicroSeconds));
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8006cd0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006cd4:	4618      	mov	r0, r3
 8006cd6:	3710      	adds	r7, #16
 8006cd8:	46bd      	mov	sp, r7
 8006cda:	bd80      	pop	{r7, pc}

08006cdc <VL53L0X_SetDeviceMode>:

VL53L0X_Error VL53L0X_SetDeviceMode(VL53L0X_DEV Dev, VL53L0X_DeviceModes DeviceMode)
{
 8006cdc:	b480      	push	{r7}
 8006cde:	b085      	sub	sp, #20
 8006ce0:	af00      	add	r7, sp, #0
 8006ce2:	6078      	str	r0, [r7, #4]
 8006ce4:	460b      	mov	r3, r1
 8006ce6:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006ce8:	2300      	movs	r3, #0
 8006cea:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("%d", (int)DeviceMode);

	switch (DeviceMode) {
 8006cec:	78fb      	ldrb	r3, [r7, #3]
 8006cee:	2b15      	cmp	r3, #21
 8006cf0:	bf8c      	ite	hi
 8006cf2:	2201      	movhi	r2, #1
 8006cf4:	2200      	movls	r2, #0
 8006cf6:	b2d2      	uxtb	r2, r2
 8006cf8:	2a00      	cmp	r2, #0
 8006cfa:	d10e      	bne.n	8006d1a <VL53L0X_SetDeviceMode+0x3e>
 8006cfc:	2201      	movs	r2, #1
 8006cfe:	409a      	lsls	r2, r3
 8006d00:	4b0b      	ldr	r3, [pc, #44]	; (8006d30 <VL53L0X_SetDeviceMode+0x54>)
 8006d02:	4013      	ands	r3, r2
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	bf14      	ite	ne
 8006d08:	2301      	movne	r3, #1
 8006d0a:	2300      	moveq	r3, #0
 8006d0c:	b2db      	uxtb	r3, r3
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d003      	beq.n	8006d1a <VL53L0X_SetDeviceMode+0x3e>
	case VL53L0X_DEVICEMODE_CONTINUOUS_RANGING:
	case VL53L0X_DEVICEMODE_CONTINUOUS_TIMED_RANGING:
	case VL53L0X_DEVICEMODE_GPIO_DRIVE:
	case VL53L0X_DEVICEMODE_GPIO_OSC:
		/* Supported modes */
		VL53L0X_SETPARAMETERFIELD(Dev, DeviceMode, DeviceMode);
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	78fa      	ldrb	r2, [r7, #3]
 8006d16:	741a      	strb	r2, [r3, #16]
		break;
 8006d18:	e001      	b.n	8006d1e <VL53L0X_SetDeviceMode+0x42>
	default:
		/* Unsupported mode */
		Status = VL53L0X_ERROR_MODE_NOT_SUPPORTED;
 8006d1a:	23f8      	movs	r3, #248	; 0xf8
 8006d1c:	73fb      	strb	r3, [r7, #15]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8006d1e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006d22:	4618      	mov	r0, r3
 8006d24:	3714      	adds	r7, #20
 8006d26:	46bd      	mov	sp, r7
 8006d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d2c:	4770      	bx	lr
 8006d2e:	bf00      	nop
 8006d30:	0030000b 	.word	0x0030000b

08006d34 <VL53L0X_GetDeviceMode>:

VL53L0X_Error VL53L0X_GetDeviceMode(VL53L0X_DEV Dev,
	VL53L0X_DeviceModes *pDeviceMode)
{
 8006d34:	b480      	push	{r7}
 8006d36:	b085      	sub	sp, #20
 8006d38:	af00      	add	r7, sp, #0
 8006d3a:	6078      	str	r0, [r7, #4]
 8006d3c:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006d3e:	2300      	movs	r3, #0
 8006d40:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, DeviceMode, *pDeviceMode);
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	7c1a      	ldrb	r2, [r3, #16]
 8006d46:	683b      	ldr	r3, [r7, #0]
 8006d48:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 8006d4a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006d4e:	4618      	mov	r0, r3
 8006d50:	3714      	adds	r7, #20
 8006d52:	46bd      	mov	sp, r7
 8006d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d58:	4770      	bx	lr

08006d5a <VL53L0X_GetFractionEnable>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_GetFractionEnable(VL53L0X_DEV Dev, uint8_t *pEnabled)
{
 8006d5a:	b580      	push	{r7, lr}
 8006d5c:	b084      	sub	sp, #16
 8006d5e:	af00      	add	r7, sp, #0
 8006d60:	6078      	str	r0, [r7, #4]
 8006d62:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006d64:	2300      	movs	r3, #0
 8006d66:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_RANGE_CONFIG, pEnabled);
 8006d68:	683a      	ldr	r2, [r7, #0]
 8006d6a:	2109      	movs	r1, #9
 8006d6c:	6878      	ldr	r0, [r7, #4]
 8006d6e:	f004 fb9d 	bl	800b4ac <VL53L0X_RdByte>
 8006d72:	4603      	mov	r3, r0
 8006d74:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 8006d76:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	d106      	bne.n	8006d8c <VL53L0X_GetFractionEnable+0x32>
		*pEnabled = (*pEnabled & 1);
 8006d7e:	683b      	ldr	r3, [r7, #0]
 8006d80:	781b      	ldrb	r3, [r3, #0]
 8006d82:	f003 0301 	and.w	r3, r3, #1
 8006d86:	b2da      	uxtb	r2, r3
 8006d88:	683b      	ldr	r3, [r7, #0]
 8006d8a:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 8006d8c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006d90:	4618      	mov	r0, r3
 8006d92:	3710      	adds	r7, #16
 8006d94:	46bd      	mov	sp, r7
 8006d96:	bd80      	pop	{r7, pc}

08006d98 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>:
	return Status;
}

VL53L0X_Error VL53L0X_SetMeasurementTimingBudgetMicroSeconds(VL53L0X_DEV Dev,
	uint32_t MeasurementTimingBudgetMicroSeconds)
{
 8006d98:	b580      	push	{r7, lr}
 8006d9a:	b084      	sub	sp, #16
 8006d9c:	af00      	add	r7, sp, #0
 8006d9e:	6078      	str	r0, [r7, #4]
 8006da0:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006da2:	2300      	movs	r3, #0
 8006da4:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_set_measurement_timing_budget_micro_seconds(Dev,
 8006da6:	6839      	ldr	r1, [r7, #0]
 8006da8:	6878      	ldr	r0, [r7, #4]
 8006daa:	f003 fa56 	bl	800a25a <VL53L0X_set_measurement_timing_budget_micro_seconds>
 8006dae:	4603      	mov	r3, r0
 8006db0:	73fb      	strb	r3, [r7, #15]
		MeasurementTimingBudgetMicroSeconds);

	LOG_FUNCTION_END(Status);

	return Status;
 8006db2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006db6:	4618      	mov	r0, r3
 8006db8:	3710      	adds	r7, #16
 8006dba:	46bd      	mov	sp, r7
 8006dbc:	bd80      	pop	{r7, pc}

08006dbe <VL53L0X_GetMeasurementTimingBudgetMicroSeconds>:

VL53L0X_Error VL53L0X_GetMeasurementTimingBudgetMicroSeconds(VL53L0X_DEV Dev,
	uint32_t *pMeasurementTimingBudgetMicroSeconds)
{
 8006dbe:	b580      	push	{r7, lr}
 8006dc0:	b084      	sub	sp, #16
 8006dc2:	af00      	add	r7, sp, #0
 8006dc4:	6078      	str	r0, [r7, #4]
 8006dc6:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006dc8:	2300      	movs	r3, #0
 8006dca:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_measurement_timing_budget_micro_seconds(Dev,
 8006dcc:	6839      	ldr	r1, [r7, #0]
 8006dce:	6878      	ldr	r0, [r7, #4]
 8006dd0:	f003 fb23 	bl	800a41a <VL53L0X_get_measurement_timing_budget_micro_seconds>
 8006dd4:	4603      	mov	r3, r0
 8006dd6:	73fb      	strb	r3, [r7, #15]
		pMeasurementTimingBudgetMicroSeconds);

	LOG_FUNCTION_END(Status);
	return Status;
 8006dd8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006ddc:	4618      	mov	r0, r3
 8006dde:	3710      	adds	r7, #16
 8006de0:	46bd      	mov	sp, r7
 8006de2:	bd80      	pop	{r7, pc}

08006de4 <VL53L0X_SetVcselPulsePeriod>:

VL53L0X_Error VL53L0X_SetVcselPulsePeriod(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t VCSELPulsePeriodPCLK)
{
 8006de4:	b580      	push	{r7, lr}
 8006de6:	b084      	sub	sp, #16
 8006de8:	af00      	add	r7, sp, #0
 8006dea:	6078      	str	r0, [r7, #4]
 8006dec:	460b      	mov	r3, r1
 8006dee:	70fb      	strb	r3, [r7, #3]
 8006df0:	4613      	mov	r3, r2
 8006df2:	70bb      	strb	r3, [r7, #2]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006df4:	2300      	movs	r3, #0
 8006df6:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_set_vcsel_pulse_period(Dev, VcselPeriodType,
 8006df8:	78ba      	ldrb	r2, [r7, #2]
 8006dfa:	78fb      	ldrb	r3, [r7, #3]
 8006dfc:	4619      	mov	r1, r3
 8006dfe:	6878      	ldr	r0, [r7, #4]
 8006e00:	f002 ff6b 	bl	8009cda <VL53L0X_set_vcsel_pulse_period>
 8006e04:	4603      	mov	r3, r0
 8006e06:	73fb      	strb	r3, [r7, #15]
		VCSELPulsePeriodPCLK);

	LOG_FUNCTION_END(Status);
	return Status;
 8006e08:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006e0c:	4618      	mov	r0, r3
 8006e0e:	3710      	adds	r7, #16
 8006e10:	46bd      	mov	sp, r7
 8006e12:	bd80      	pop	{r7, pc}

08006e14 <VL53L0X_GetVcselPulsePeriod>:

VL53L0X_Error VL53L0X_GetVcselPulsePeriod(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t *pVCSELPulsePeriodPCLK)
{
 8006e14:	b580      	push	{r7, lr}
 8006e16:	b086      	sub	sp, #24
 8006e18:	af00      	add	r7, sp, #0
 8006e1a:	60f8      	str	r0, [r7, #12]
 8006e1c:	460b      	mov	r3, r1
 8006e1e:	607a      	str	r2, [r7, #4]
 8006e20:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006e22:	2300      	movs	r3, #0
 8006e24:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_vcsel_pulse_period(Dev, VcselPeriodType,
 8006e26:	7afb      	ldrb	r3, [r7, #11]
 8006e28:	687a      	ldr	r2, [r7, #4]
 8006e2a:	4619      	mov	r1, r3
 8006e2c:	68f8      	ldr	r0, [r7, #12]
 8006e2e:	f003 f9dd 	bl	800a1ec <VL53L0X_get_vcsel_pulse_period>
 8006e32:	4603      	mov	r3, r0
 8006e34:	75fb      	strb	r3, [r7, #23]
		pVCSELPulsePeriodPCLK);

	LOG_FUNCTION_END(Status);
	return Status;
 8006e36:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006e3a:	4618      	mov	r0, r3
 8006e3c:	3718      	adds	r7, #24
 8006e3e:	46bd      	mov	sp, r7
 8006e40:	bd80      	pop	{r7, pc}
	...

08006e44 <VL53L0X_SetSequenceStepEnable>:

VL53L0X_Error VL53L0X_SetSequenceStepEnable(VL53L0X_DEV Dev,
	VL53L0X_SequenceStepId SequenceStepId, uint8_t SequenceStepEnabled)
{
 8006e44:	b580      	push	{r7, lr}
 8006e46:	b086      	sub	sp, #24
 8006e48:	af00      	add	r7, sp, #0
 8006e4a:	6078      	str	r0, [r7, #4]
 8006e4c:	460b      	mov	r3, r1
 8006e4e:	70fb      	strb	r3, [r7, #3]
 8006e50:	4613      	mov	r3, r2
 8006e52:	70bb      	strb	r3, [r7, #2]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006e54:	2300      	movs	r3, #0
 8006e56:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 8006e58:	2300      	movs	r3, #0
 8006e5a:	73fb      	strb	r3, [r7, #15]
	uint8_t SequenceConfigNew = 0;
 8006e5c:	2300      	movs	r3, #0
 8006e5e:	75bb      	strb	r3, [r7, #22]
	uint32_t MeasurementTimingBudgetMicroSeconds;
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8006e60:	f107 030f 	add.w	r3, r7, #15
 8006e64:	461a      	mov	r2, r3
 8006e66:	2101      	movs	r1, #1
 8006e68:	6878      	ldr	r0, [r7, #4]
 8006e6a:	f004 fb1f 	bl	800b4ac <VL53L0X_RdByte>
 8006e6e:	4603      	mov	r3, r0
 8006e70:	75fb      	strb	r3, [r7, #23]
		&SequenceConfig);

	SequenceConfigNew = SequenceConfig;
 8006e72:	7bfb      	ldrb	r3, [r7, #15]
 8006e74:	75bb      	strb	r3, [r7, #22]

	if (Status == VL53L0X_ERROR_NONE) {
 8006e76:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d15a      	bne.n	8006f34 <VL53L0X_SetSequenceStepEnable+0xf0>
		if (SequenceStepEnabled == 1) {
 8006e7e:	78bb      	ldrb	r3, [r7, #2]
 8006e80:	2b01      	cmp	r3, #1
 8006e82:	d12b      	bne.n	8006edc <VL53L0X_SetSequenceStepEnable+0x98>

			/* Enable requested sequence step
			 */
			switch (SequenceStepId) {
 8006e84:	78fb      	ldrb	r3, [r7, #3]
 8006e86:	2b04      	cmp	r3, #4
 8006e88:	d825      	bhi.n	8006ed6 <VL53L0X_SetSequenceStepEnable+0x92>
 8006e8a:	a201      	add	r2, pc, #4	; (adr r2, 8006e90 <VL53L0X_SetSequenceStepEnable+0x4c>)
 8006e8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e90:	08006ea5 	.word	0x08006ea5
 8006e94:	08006eaf 	.word	0x08006eaf
 8006e98:	08006eb9 	.word	0x08006eb9
 8006e9c:	08006ec3 	.word	0x08006ec3
 8006ea0:	08006ecd 	.word	0x08006ecd
			case VL53L0X_SEQUENCESTEP_TCC:
				SequenceConfigNew |= 0x10;
 8006ea4:	7dbb      	ldrb	r3, [r7, #22]
 8006ea6:	f043 0310 	orr.w	r3, r3, #16
 8006eaa:	75bb      	strb	r3, [r7, #22]
				break;
 8006eac:	e043      	b.n	8006f36 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_DSS:
				SequenceConfigNew |= 0x28;
 8006eae:	7dbb      	ldrb	r3, [r7, #22]
 8006eb0:	f043 0328 	orr.w	r3, r3, #40	; 0x28
 8006eb4:	75bb      	strb	r3, [r7, #22]
				break;
 8006eb6:	e03e      	b.n	8006f36 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_MSRC:
				SequenceConfigNew |= 0x04;
 8006eb8:	7dbb      	ldrb	r3, [r7, #22]
 8006eba:	f043 0304 	orr.w	r3, r3, #4
 8006ebe:	75bb      	strb	r3, [r7, #22]
				break;
 8006ec0:	e039      	b.n	8006f36 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_PRE_RANGE:
				SequenceConfigNew |= 0x40;
 8006ec2:	7dbb      	ldrb	r3, [r7, #22]
 8006ec4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006ec8:	75bb      	strb	r3, [r7, #22]
				break;
 8006eca:	e034      	b.n	8006f36 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
				SequenceConfigNew |= 0x80;
 8006ecc:	7dbb      	ldrb	r3, [r7, #22]
 8006ece:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006ed2:	75bb      	strb	r3, [r7, #22]
				break;
 8006ed4:	e02f      	b.n	8006f36 <VL53L0X_SetSequenceStepEnable+0xf2>
			default:
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 8006ed6:	23fc      	movs	r3, #252	; 0xfc
 8006ed8:	75fb      	strb	r3, [r7, #23]
 8006eda:	e02c      	b.n	8006f36 <VL53L0X_SetSequenceStepEnable+0xf2>
			}
		} else {
			/* Disable requested sequence step
			 */
			switch (SequenceStepId) {
 8006edc:	78fb      	ldrb	r3, [r7, #3]
 8006ede:	2b04      	cmp	r3, #4
 8006ee0:	d825      	bhi.n	8006f2e <VL53L0X_SetSequenceStepEnable+0xea>
 8006ee2:	a201      	add	r2, pc, #4	; (adr r2, 8006ee8 <VL53L0X_SetSequenceStepEnable+0xa4>)
 8006ee4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ee8:	08006efd 	.word	0x08006efd
 8006eec:	08006f07 	.word	0x08006f07
 8006ef0:	08006f11 	.word	0x08006f11
 8006ef4:	08006f1b 	.word	0x08006f1b
 8006ef8:	08006f25 	.word	0x08006f25
			case VL53L0X_SEQUENCESTEP_TCC:
				SequenceConfigNew &= 0xef;
 8006efc:	7dbb      	ldrb	r3, [r7, #22]
 8006efe:	f023 0310 	bic.w	r3, r3, #16
 8006f02:	75bb      	strb	r3, [r7, #22]
				break;
 8006f04:	e017      	b.n	8006f36 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_DSS:
				SequenceConfigNew &= 0xd7;
 8006f06:	7dbb      	ldrb	r3, [r7, #22]
 8006f08:	f023 0328 	bic.w	r3, r3, #40	; 0x28
 8006f0c:	75bb      	strb	r3, [r7, #22]
				break;
 8006f0e:	e012      	b.n	8006f36 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_MSRC:
				SequenceConfigNew &= 0xfb;
 8006f10:	7dbb      	ldrb	r3, [r7, #22]
 8006f12:	f023 0304 	bic.w	r3, r3, #4
 8006f16:	75bb      	strb	r3, [r7, #22]
				break;
 8006f18:	e00d      	b.n	8006f36 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_PRE_RANGE:
				SequenceConfigNew &= 0xbf;
 8006f1a:	7dbb      	ldrb	r3, [r7, #22]
 8006f1c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006f20:	75bb      	strb	r3, [r7, #22]
				break;
 8006f22:	e008      	b.n	8006f36 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
				SequenceConfigNew &= 0x7f;
 8006f24:	7dbb      	ldrb	r3, [r7, #22]
 8006f26:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006f2a:	75bb      	strb	r3, [r7, #22]
				break;
 8006f2c:	e003      	b.n	8006f36 <VL53L0X_SetSequenceStepEnable+0xf2>
			default:
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 8006f2e:	23fc      	movs	r3, #252	; 0xfc
 8006f30:	75fb      	strb	r3, [r7, #23]
 8006f32:	e000      	b.n	8006f36 <VL53L0X_SetSequenceStepEnable+0xf2>
			}
		}
 8006f34:	bf00      	nop
	}

	if (SequenceConfigNew != SequenceConfig) {
 8006f36:	7bfb      	ldrb	r3, [r7, #15]
 8006f38:	7dba      	ldrb	r2, [r7, #22]
 8006f3a:	429a      	cmp	r2, r3
 8006f3c:	d01e      	beq.n	8006f7c <VL53L0X_SetSequenceStepEnable+0x138>
		/* Apply New Setting */
		if (Status == VL53L0X_ERROR_NONE) {
 8006f3e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d107      	bne.n	8006f56 <VL53L0X_SetSequenceStepEnable+0x112>
			Status = VL53L0X_WrByte(Dev,
 8006f46:	7dbb      	ldrb	r3, [r7, #22]
 8006f48:	461a      	mov	r2, r3
 8006f4a:	2101      	movs	r1, #1
 8006f4c:	6878      	ldr	r0, [r7, #4]
 8006f4e:	f004 fa2b 	bl	800b3a8 <VL53L0X_WrByte>
 8006f52:	4603      	mov	r3, r0
 8006f54:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, SequenceConfigNew);
		}
		if (Status == VL53L0X_ERROR_NONE)
 8006f56:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d103      	bne.n	8006f66 <VL53L0X_SetSequenceStepEnable+0x122>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfigNew);
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	7dba      	ldrb	r2, [r7, #22]
 8006f62:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130


		/* Recalculate timing budget */
		if (Status == VL53L0X_ERROR_NONE) {
 8006f66:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d106      	bne.n	8006f7c <VL53L0X_SetSequenceStepEnable+0x138>
			VL53L0X_GETPARAMETERFIELD(Dev,
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	695b      	ldr	r3, [r3, #20]
 8006f72:	613b      	str	r3, [r7, #16]
				MeasurementTimingBudgetMicroSeconds,
				MeasurementTimingBudgetMicroSeconds);

			VL53L0X_SetMeasurementTimingBudgetMicroSeconds(Dev,
 8006f74:	6939      	ldr	r1, [r7, #16]
 8006f76:	6878      	ldr	r0, [r7, #4]
 8006f78:	f7ff ff0e 	bl	8006d98 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>
		}
	}

	LOG_FUNCTION_END(Status);

	return Status;
 8006f7c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006f80:	4618      	mov	r0, r3
 8006f82:	3718      	adds	r7, #24
 8006f84:	46bd      	mov	sp, r7
 8006f86:	bd80      	pop	{r7, pc}

08006f88 <sequence_step_enabled>:

VL53L0X_Error sequence_step_enabled(VL53L0X_DEV Dev,
	VL53L0X_SequenceStepId SequenceStepId, uint8_t SequenceConfig,
	uint8_t *pSequenceStepEnabled)
{
 8006f88:	b480      	push	{r7}
 8006f8a:	b087      	sub	sp, #28
 8006f8c:	af00      	add	r7, sp, #0
 8006f8e:	60f8      	str	r0, [r7, #12]
 8006f90:	607b      	str	r3, [r7, #4]
 8006f92:	460b      	mov	r3, r1
 8006f94:	72fb      	strb	r3, [r7, #11]
 8006f96:	4613      	mov	r3, r2
 8006f98:	72bb      	strb	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006f9a:	2300      	movs	r3, #0
 8006f9c:	75fb      	strb	r3, [r7, #23]
	*pSequenceStepEnabled = 0;
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	2200      	movs	r2, #0
 8006fa2:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_START("");

	switch (SequenceStepId) {
 8006fa4:	7afb      	ldrb	r3, [r7, #11]
 8006fa6:	2b04      	cmp	r3, #4
 8006fa8:	d836      	bhi.n	8007018 <sequence_step_enabled+0x90>
 8006faa:	a201      	add	r2, pc, #4	; (adr r2, 8006fb0 <sequence_step_enabled+0x28>)
 8006fac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006fb0:	08006fc5 	.word	0x08006fc5
 8006fb4:	08006fd7 	.word	0x08006fd7
 8006fb8:	08006fe9 	.word	0x08006fe9
 8006fbc:	08006ffb 	.word	0x08006ffb
 8006fc0:	0800700d 	.word	0x0800700d
	case VL53L0X_SEQUENCESTEP_TCC:
		*pSequenceStepEnabled = (SequenceConfig & 0x10) >> 4;
 8006fc4:	7abb      	ldrb	r3, [r7, #10]
 8006fc6:	111b      	asrs	r3, r3, #4
 8006fc8:	b2db      	uxtb	r3, r3
 8006fca:	f003 0301 	and.w	r3, r3, #1
 8006fce:	b2da      	uxtb	r2, r3
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	701a      	strb	r2, [r3, #0]
		break;
 8006fd4:	e022      	b.n	800701c <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_DSS:
		*pSequenceStepEnabled = (SequenceConfig & 0x08) >> 3;
 8006fd6:	7abb      	ldrb	r3, [r7, #10]
 8006fd8:	10db      	asrs	r3, r3, #3
 8006fda:	b2db      	uxtb	r3, r3
 8006fdc:	f003 0301 	and.w	r3, r3, #1
 8006fe0:	b2da      	uxtb	r2, r3
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	701a      	strb	r2, [r3, #0]
		break;
 8006fe6:	e019      	b.n	800701c <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_MSRC:
		*pSequenceStepEnabled = (SequenceConfig & 0x04) >> 2;
 8006fe8:	7abb      	ldrb	r3, [r7, #10]
 8006fea:	109b      	asrs	r3, r3, #2
 8006fec:	b2db      	uxtb	r3, r3
 8006fee:	f003 0301 	and.w	r3, r3, #1
 8006ff2:	b2da      	uxtb	r2, r3
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	701a      	strb	r2, [r3, #0]
		break;
 8006ff8:	e010      	b.n	800701c <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_PRE_RANGE:
		*pSequenceStepEnabled = (SequenceConfig & 0x40) >> 6;
 8006ffa:	7abb      	ldrb	r3, [r7, #10]
 8006ffc:	119b      	asrs	r3, r3, #6
 8006ffe:	b2db      	uxtb	r3, r3
 8007000:	f003 0301 	and.w	r3, r3, #1
 8007004:	b2da      	uxtb	r2, r3
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	701a      	strb	r2, [r3, #0]
		break;
 800700a:	e007      	b.n	800701c <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
		*pSequenceStepEnabled = (SequenceConfig & 0x80) >> 7;
 800700c:	7abb      	ldrb	r3, [r7, #10]
 800700e:	09db      	lsrs	r3, r3, #7
 8007010:	b2da      	uxtb	r2, r3
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	701a      	strb	r2, [r3, #0]
		break;
 8007016:	e001      	b.n	800701c <sequence_step_enabled+0x94>
	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8007018:	23fc      	movs	r3, #252	; 0xfc
 800701a:	75fb      	strb	r3, [r7, #23]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800701c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007020:	4618      	mov	r0, r3
 8007022:	371c      	adds	r7, #28
 8007024:	46bd      	mov	sp, r7
 8007026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800702a:	4770      	bx	lr

0800702c <VL53L0X_GetSequenceStepEnables>:
	return Status;
}

VL53L0X_Error VL53L0X_GetSequenceStepEnables(VL53L0X_DEV Dev,
	VL53L0X_SchedulerSequenceSteps_t *pSchedulerSequenceSteps)
{
 800702c:	b580      	push	{r7, lr}
 800702e:	b084      	sub	sp, #16
 8007030:	af00      	add	r7, sp, #0
 8007032:	6078      	str	r0, [r7, #4]
 8007034:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007036:	2300      	movs	r3, #0
 8007038:	73fb      	strb	r3, [r7, #15]
	uint8_t SequenceConfig = 0;
 800703a:	2300      	movs	r3, #0
 800703c:	73bb      	strb	r3, [r7, #14]
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 800703e:	f107 030e 	add.w	r3, r7, #14
 8007042:	461a      	mov	r2, r3
 8007044:	2101      	movs	r1, #1
 8007046:	6878      	ldr	r0, [r7, #4]
 8007048:	f004 fa30 	bl	800b4ac <VL53L0X_RdByte>
 800704c:	4603      	mov	r3, r0
 800704e:	73fb      	strb	r3, [r7, #15]
		&SequenceConfig);

	if (Status == VL53L0X_ERROR_NONE) {
 8007050:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007054:	2b00      	cmp	r3, #0
 8007056:	d107      	bne.n	8007068 <VL53L0X_GetSequenceStepEnables+0x3c>
		Status = sequence_step_enabled(Dev,
 8007058:	7bba      	ldrb	r2, [r7, #14]
 800705a:	683b      	ldr	r3, [r7, #0]
 800705c:	2100      	movs	r1, #0
 800705e:	6878      	ldr	r0, [r7, #4]
 8007060:	f7ff ff92 	bl	8006f88 <sequence_step_enabled>
 8007064:	4603      	mov	r3, r0
 8007066:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_TCC, SequenceConfig,
			&pSchedulerSequenceSteps->TccOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8007068:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800706c:	2b00      	cmp	r3, #0
 800706e:	d108      	bne.n	8007082 <VL53L0X_GetSequenceStepEnables+0x56>
		Status = sequence_step_enabled(Dev,
 8007070:	7bba      	ldrb	r2, [r7, #14]
 8007072:	683b      	ldr	r3, [r7, #0]
 8007074:	3302      	adds	r3, #2
 8007076:	2101      	movs	r1, #1
 8007078:	6878      	ldr	r0, [r7, #4]
 800707a:	f7ff ff85 	bl	8006f88 <sequence_step_enabled>
 800707e:	4603      	mov	r3, r0
 8007080:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_DSS, SequenceConfig,
			&pSchedulerSequenceSteps->DssOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8007082:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007086:	2b00      	cmp	r3, #0
 8007088:	d108      	bne.n	800709c <VL53L0X_GetSequenceStepEnables+0x70>
		Status = sequence_step_enabled(Dev,
 800708a:	7bba      	ldrb	r2, [r7, #14]
 800708c:	683b      	ldr	r3, [r7, #0]
 800708e:	3301      	adds	r3, #1
 8007090:	2102      	movs	r1, #2
 8007092:	6878      	ldr	r0, [r7, #4]
 8007094:	f7ff ff78 	bl	8006f88 <sequence_step_enabled>
 8007098:	4603      	mov	r3, r0
 800709a:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_MSRC, SequenceConfig,
			&pSchedulerSequenceSteps->MsrcOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 800709c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	d108      	bne.n	80070b6 <VL53L0X_GetSequenceStepEnables+0x8a>
		Status = sequence_step_enabled(Dev,
 80070a4:	7bba      	ldrb	r2, [r7, #14]
 80070a6:	683b      	ldr	r3, [r7, #0]
 80070a8:	3303      	adds	r3, #3
 80070aa:	2103      	movs	r1, #3
 80070ac:	6878      	ldr	r0, [r7, #4]
 80070ae:	f7ff ff6b 	bl	8006f88 <sequence_step_enabled>
 80070b2:	4603      	mov	r3, r0
 80070b4:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_PRE_RANGE, SequenceConfig,
			&pSchedulerSequenceSteps->PreRangeOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 80070b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d108      	bne.n	80070d0 <VL53L0X_GetSequenceStepEnables+0xa4>
		Status = sequence_step_enabled(Dev,
 80070be:	7bba      	ldrb	r2, [r7, #14]
 80070c0:	683b      	ldr	r3, [r7, #0]
 80070c2:	3304      	adds	r3, #4
 80070c4:	2104      	movs	r1, #4
 80070c6:	6878      	ldr	r0, [r7, #4]
 80070c8:	f7ff ff5e 	bl	8006f88 <sequence_step_enabled>
 80070cc:	4603      	mov	r3, r0
 80070ce:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_FINAL_RANGE, SequenceConfig,
			&pSchedulerSequenceSteps->FinalRangeOn);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80070d0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80070d4:	4618      	mov	r0, r3
 80070d6:	3710      	adds	r7, #16
 80070d8:	46bd      	mov	sp, r7
 80070da:	bd80      	pop	{r7, pc}

080070dc <VL53L0X_GetInterMeasurementPeriodMilliSeconds>:
	return Status;
}

VL53L0X_Error VL53L0X_GetInterMeasurementPeriodMilliSeconds(VL53L0X_DEV Dev,
	uint32_t *pInterMeasurementPeriodMilliSeconds)
{
 80070dc:	b580      	push	{r7, lr}
 80070de:	b084      	sub	sp, #16
 80070e0:	af00      	add	r7, sp, #0
 80070e2:	6078      	str	r0, [r7, #4]
 80070e4:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80070e6:	2300      	movs	r3, #0
 80070e8:	73fb      	strb	r3, [r7, #15]
	uint16_t osc_calibrate_val;
	uint32_t IMPeriodMilliSeconds;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdWord(Dev, VL53L0X_REG_OSC_CALIBRATE_VAL,
 80070ea:	f107 030c 	add.w	r3, r7, #12
 80070ee:	461a      	mov	r2, r3
 80070f0:	21f8      	movs	r1, #248	; 0xf8
 80070f2:	6878      	ldr	r0, [r7, #4]
 80070f4:	f004 fa04 	bl	800b500 <VL53L0X_RdWord>
 80070f8:	4603      	mov	r3, r0
 80070fa:	73fb      	strb	r3, [r7, #15]
		&osc_calibrate_val);

	if (Status == VL53L0X_ERROR_NONE) {
 80070fc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007100:	2b00      	cmp	r3, #0
 8007102:	d108      	bne.n	8007116 <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x3a>
		Status = VL53L0X_RdDWord(Dev,
 8007104:	f107 0308 	add.w	r3, r7, #8
 8007108:	461a      	mov	r2, r3
 800710a:	2104      	movs	r1, #4
 800710c:	6878      	ldr	r0, [r7, #4]
 800710e:	f004 fa2f 	bl	800b570 <VL53L0X_RdDWord>
 8007112:	4603      	mov	r3, r0
 8007114:	73fb      	strb	r3, [r7, #15]
		VL53L0X_REG_SYSTEM_INTERMEASUREMENT_PERIOD,
			&IMPeriodMilliSeconds);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8007116:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800711a:	2b00      	cmp	r3, #0
 800711c:	d10c      	bne.n	8007138 <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x5c>
		if (osc_calibrate_val != 0) {
 800711e:	89bb      	ldrh	r3, [r7, #12]
 8007120:	2b00      	cmp	r3, #0
 8007122:	d005      	beq.n	8007130 <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x54>
			*pInterMeasurementPeriodMilliSeconds =
				IMPeriodMilliSeconds / osc_calibrate_val;
 8007124:	68bb      	ldr	r3, [r7, #8]
 8007126:	89ba      	ldrh	r2, [r7, #12]
 8007128:	fbb3 f2f2 	udiv	r2, r3, r2
			*pInterMeasurementPeriodMilliSeconds =
 800712c:	683b      	ldr	r3, [r7, #0]
 800712e:	601a      	str	r2, [r3, #0]
		}
		VL53L0X_SETPARAMETERFIELD(Dev,
 8007130:	683b      	ldr	r3, [r7, #0]
 8007132:	681a      	ldr	r2, [r3, #0]
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	619a      	str	r2, [r3, #24]
			InterMeasurementPeriodMilliSeconds,
			*pInterMeasurementPeriodMilliSeconds);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8007138:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800713c:	4618      	mov	r0, r3
 800713e:	3710      	adds	r7, #16
 8007140:	46bd      	mov	sp, r7
 8007142:	bd80      	pop	{r7, pc}

08007144 <VL53L0X_GetXTalkCompensationEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_GetXTalkCompensationEnable(VL53L0X_DEV Dev,
	uint8_t *pXTalkCompensationEnable)
{
 8007144:	b480      	push	{r7}
 8007146:	b085      	sub	sp, #20
 8007148:	af00      	add	r7, sp, #0
 800714a:	6078      	str	r0, [r7, #4]
 800714c:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800714e:	2300      	movs	r3, #0
 8007150:	73fb      	strb	r3, [r7, #15]
	uint8_t Temp8;
	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationEnable, Temp8);
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	7f1b      	ldrb	r3, [r3, #28]
 8007156:	73bb      	strb	r3, [r7, #14]
	*pXTalkCompensationEnable = Temp8;
 8007158:	683b      	ldr	r3, [r7, #0]
 800715a:	7bba      	ldrb	r2, [r7, #14]
 800715c:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 800715e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007162:	4618      	mov	r0, r3
 8007164:	3714      	adds	r7, #20
 8007166:	46bd      	mov	sp, r7
 8007168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800716c:	4770      	bx	lr

0800716e <VL53L0X_GetXTalkCompensationRateMegaCps>:
	return Status;
}

VL53L0X_Error VL53L0X_GetXTalkCompensationRateMegaCps(VL53L0X_DEV Dev,
	FixPoint1616_t *pXTalkCompensationRateMegaCps)
{
 800716e:	b580      	push	{r7, lr}
 8007170:	b086      	sub	sp, #24
 8007172:	af00      	add	r7, sp, #0
 8007174:	6078      	str	r0, [r7, #4]
 8007176:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007178:	2300      	movs	r3, #0
 800717a:	75fb      	strb	r3, [r7, #23]
	uint16_t Value;
	FixPoint1616_t TempFix1616;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdWord(Dev,
 800717c:	f107 030e 	add.w	r3, r7, #14
 8007180:	461a      	mov	r2, r3
 8007182:	2120      	movs	r1, #32
 8007184:	6878      	ldr	r0, [r7, #4]
 8007186:	f004 f9bb 	bl	800b500 <VL53L0X_RdWord>
 800718a:	4603      	mov	r3, r0
 800718c:	75fb      	strb	r3, [r7, #23]
	VL53L0X_REG_CROSSTALK_COMPENSATION_PEAK_RATE_MCPS, (uint16_t *)&Value);
	if (Status == VL53L0X_ERROR_NONE) {
 800718e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007192:	2b00      	cmp	r3, #0
 8007194:	d118      	bne.n	80071c8 <VL53L0X_GetXTalkCompensationRateMegaCps+0x5a>
		if (Value == 0) {
 8007196:	89fb      	ldrh	r3, [r7, #14]
 8007198:	2b00      	cmp	r3, #0
 800719a:	d109      	bne.n	80071b0 <VL53L0X_GetXTalkCompensationRateMegaCps+0x42>
			/* the Xtalk is disabled return value from memory */
			VL53L0X_GETPARAMETERFIELD(Dev,
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	6a1b      	ldr	r3, [r3, #32]
 80071a0:	613b      	str	r3, [r7, #16]
				XTalkCompensationRateMegaCps, TempFix1616);
			*pXTalkCompensationRateMegaCps = TempFix1616;
 80071a2:	683b      	ldr	r3, [r7, #0]
 80071a4:	693a      	ldr	r2, [r7, #16]
 80071a6:	601a      	str	r2, [r3, #0]
			VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	2200      	movs	r2, #0
 80071ac:	771a      	strb	r2, [r3, #28]
 80071ae:	e00b      	b.n	80071c8 <VL53L0X_GetXTalkCompensationRateMegaCps+0x5a>
				0);
		} else {
			TempFix1616 = VL53L0X_FIXPOINT313TOFIXPOINT1616(Value);
 80071b0:	89fb      	ldrh	r3, [r7, #14]
 80071b2:	00db      	lsls	r3, r3, #3
 80071b4:	613b      	str	r3, [r7, #16]
			*pXTalkCompensationRateMegaCps = TempFix1616;
 80071b6:	683b      	ldr	r3, [r7, #0]
 80071b8:	693a      	ldr	r2, [r7, #16]
 80071ba:	601a      	str	r2, [r3, #0]
			VL53L0X_SETPARAMETERFIELD(Dev,
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	693a      	ldr	r2, [r7, #16]
 80071c0:	621a      	str	r2, [r3, #32]
				XTalkCompensationRateMegaCps, TempFix1616);
			VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	2201      	movs	r2, #1
 80071c6:	771a      	strb	r2, [r3, #28]
				1);
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80071c8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80071cc:	4618      	mov	r0, r3
 80071ce:	3718      	adds	r7, #24
 80071d0:	46bd      	mov	sp, r7
 80071d2:	bd80      	pop	{r7, pc}

080071d4 <VL53L0X_SetLimitCheckEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_SetLimitCheckEnable(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	uint8_t LimitCheckEnable)
{
 80071d4:	b580      	push	{r7, lr}
 80071d6:	b086      	sub	sp, #24
 80071d8:	af00      	add	r7, sp, #0
 80071da:	6078      	str	r0, [r7, #4]
 80071dc:	460b      	mov	r3, r1
 80071de:	807b      	strh	r3, [r7, #2]
 80071e0:	4613      	mov	r3, r2
 80071e2:	707b      	strb	r3, [r7, #1]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80071e4:	2300      	movs	r3, #0
 80071e6:	75fb      	strb	r3, [r7, #23]
	FixPoint1616_t TempFix1616 = 0;
 80071e8:	2300      	movs	r3, #0
 80071ea:	613b      	str	r3, [r7, #16]
	uint8_t LimitCheckEnableInt = 0;
 80071ec:	2300      	movs	r3, #0
 80071ee:	73fb      	strb	r3, [r7, #15]
	uint8_t LimitCheckDisable = 0;
 80071f0:	2300      	movs	r3, #0
 80071f2:	73bb      	strb	r3, [r7, #14]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	if (LimitCheckId >= VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS) {
 80071f4:	887b      	ldrh	r3, [r7, #2]
 80071f6:	2b05      	cmp	r3, #5
 80071f8:	d902      	bls.n	8007200 <VL53L0X_SetLimitCheckEnable+0x2c>
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 80071fa:	23fc      	movs	r3, #252	; 0xfc
 80071fc:	75fb      	strb	r3, [r7, #23]
 80071fe:	e05b      	b.n	80072b8 <VL53L0X_SetLimitCheckEnable+0xe4>
	} else {
		if (LimitCheckEnable == 0) {
 8007200:	787b      	ldrb	r3, [r7, #1]
 8007202:	2b00      	cmp	r3, #0
 8007204:	d106      	bne.n	8007214 <VL53L0X_SetLimitCheckEnable+0x40>
			TempFix1616 = 0;
 8007206:	2300      	movs	r3, #0
 8007208:	613b      	str	r3, [r7, #16]
			LimitCheckEnableInt = 0;
 800720a:	2300      	movs	r3, #0
 800720c:	73fb      	strb	r3, [r7, #15]
			LimitCheckDisable = 1;
 800720e:	2301      	movs	r3, #1
 8007210:	73bb      	strb	r3, [r7, #14]
 8007212:	e00a      	b.n	800722a <VL53L0X_SetLimitCheckEnable+0x56>

		} else {
			VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8007214:	887b      	ldrh	r3, [r7, #2]
 8007216:	687a      	ldr	r2, [r7, #4]
 8007218:	330c      	adds	r3, #12
 800721a:	009b      	lsls	r3, r3, #2
 800721c:	4413      	add	r3, r2
 800721e:	685b      	ldr	r3, [r3, #4]
 8007220:	613b      	str	r3, [r7, #16]
				LimitCheckId, TempFix1616);
			LimitCheckDisable = 0;
 8007222:	2300      	movs	r3, #0
 8007224:	73bb      	strb	r3, [r7, #14]
			/* this to be sure to have either 0 or 1 */
			LimitCheckEnableInt = 1;
 8007226:	2301      	movs	r3, #1
 8007228:	73fb      	strb	r3, [r7, #15]
		}

		switch (LimitCheckId) {
 800722a:	887b      	ldrh	r3, [r7, #2]
 800722c:	2b05      	cmp	r3, #5
 800722e:	d841      	bhi.n	80072b4 <VL53L0X_SetLimitCheckEnable+0xe0>
 8007230:	a201      	add	r2, pc, #4	; (adr r2, 8007238 <VL53L0X_SetLimitCheckEnable+0x64>)
 8007232:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007236:	bf00      	nop
 8007238:	08007251 	.word	0x08007251
 800723c:	0800725b 	.word	0x0800725b
 8007240:	08007271 	.word	0x08007271
 8007244:	0800727b 	.word	0x0800727b
 8007248:	08007285 	.word	0x08007285
 800724c:	0800729d 	.word	0x0800729d

		case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	7bfa      	ldrb	r2, [r7, #15]
 8007254:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				LimitCheckEnableInt);

			break;
 8007258:	e02e      	b.n	80072b8 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:

			Status = VL53L0X_WrWord(Dev,
			VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(TempFix1616));
 800725a:	693b      	ldr	r3, [r7, #16]
 800725c:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 800725e:	b29b      	uxth	r3, r3
 8007260:	461a      	mov	r2, r3
 8007262:	2144      	movs	r1, #68	; 0x44
 8007264:	6878      	ldr	r0, [r7, #4]
 8007266:	f004 f8c3 	bl	800b3f0 <VL53L0X_WrWord>
 800726a:	4603      	mov	r3, r0
 800726c:	75fb      	strb	r3, [r7, #23]

			break;
 800726e:	e023      	b.n	80072b8 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	7bfa      	ldrb	r2, [r7, #15]
 8007274:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				LimitCheckEnableInt);

			break;
 8007278:	e01e      	b.n	80072b8 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	7bfa      	ldrb	r2, [r7, #15]
 800727e:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				LimitCheckEnableInt);

			break;
 8007282:	e019      	b.n	80072b8 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:

			Temp8 = (uint8_t)(LimitCheckDisable << 1);
 8007284:	7bbb      	ldrb	r3, [r7, #14]
 8007286:	005b      	lsls	r3, r3, #1
 8007288:	737b      	strb	r3, [r7, #13]
			Status = VL53L0X_UpdateByte(Dev,
 800728a:	7b7b      	ldrb	r3, [r7, #13]
 800728c:	22fe      	movs	r2, #254	; 0xfe
 800728e:	2160      	movs	r1, #96	; 0x60
 8007290:	6878      	ldr	r0, [r7, #4]
 8007292:	f004 f8d7 	bl	800b444 <VL53L0X_UpdateByte>
 8007296:	4603      	mov	r3, r0
 8007298:	75fb      	strb	r3, [r7, #23]
				VL53L0X_REG_MSRC_CONFIG_CONTROL,
				0xFE, Temp8);

			break;
 800729a:	e00d      	b.n	80072b8 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:

			Temp8 = (uint8_t)(LimitCheckDisable << 4);
 800729c:	7bbb      	ldrb	r3, [r7, #14]
 800729e:	011b      	lsls	r3, r3, #4
 80072a0:	737b      	strb	r3, [r7, #13]
			Status = VL53L0X_UpdateByte(Dev,
 80072a2:	7b7b      	ldrb	r3, [r7, #13]
 80072a4:	22ef      	movs	r2, #239	; 0xef
 80072a6:	2160      	movs	r1, #96	; 0x60
 80072a8:	6878      	ldr	r0, [r7, #4]
 80072aa:	f004 f8cb 	bl	800b444 <VL53L0X_UpdateByte>
 80072ae:	4603      	mov	r3, r0
 80072b0:	75fb      	strb	r3, [r7, #23]
				VL53L0X_REG_MSRC_CONFIG_CONTROL,
				0xEF, Temp8);

			break;
 80072b2:	e001      	b.n	80072b8 <VL53L0X_SetLimitCheckEnable+0xe4>


		default:
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 80072b4:	23fc      	movs	r3, #252	; 0xfc
 80072b6:	75fb      	strb	r3, [r7, #23]

		}

	}

	if (Status == VL53L0X_ERROR_NONE) {
 80072b8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d10f      	bne.n	80072e0 <VL53L0X_SetLimitCheckEnable+0x10c>
		if (LimitCheckEnable == 0) {
 80072c0:	787b      	ldrb	r3, [r7, #1]
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d106      	bne.n	80072d4 <VL53L0X_SetLimitCheckEnable+0x100>
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 80072c6:	887b      	ldrh	r3, [r7, #2]
 80072c8:	687a      	ldr	r2, [r7, #4]
 80072ca:	4413      	add	r3, r2
 80072cc:	2200      	movs	r2, #0
 80072ce:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 80072d2:	e005      	b.n	80072e0 <VL53L0X_SetLimitCheckEnable+0x10c>
				LimitCheckId, 0);
		} else {
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 80072d4:	887b      	ldrh	r3, [r7, #2]
 80072d6:	687a      	ldr	r2, [r7, #4]
 80072d8:	4413      	add	r3, r2
 80072da:	2201      	movs	r2, #1
 80072dc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
				LimitCheckId, 1);
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80072e0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80072e4:	4618      	mov	r0, r3
 80072e6:	3718      	adds	r7, #24
 80072e8:	46bd      	mov	sp, r7
 80072ea:	bd80      	pop	{r7, pc}

080072ec <VL53L0X_GetLimitCheckEnable>:

VL53L0X_Error VL53L0X_GetLimitCheckEnable(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	uint8_t *pLimitCheckEnable)
{
 80072ec:	b480      	push	{r7}
 80072ee:	b087      	sub	sp, #28
 80072f0:	af00      	add	r7, sp, #0
 80072f2:	60f8      	str	r0, [r7, #12]
 80072f4:	460b      	mov	r3, r1
 80072f6:	607a      	str	r2, [r7, #4]
 80072f8:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80072fa:	2300      	movs	r3, #0
 80072fc:	75fb      	strb	r3, [r7, #23]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	if (LimitCheckId >= VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS) {
 80072fe:	897b      	ldrh	r3, [r7, #10]
 8007300:	2b05      	cmp	r3, #5
 8007302:	d905      	bls.n	8007310 <VL53L0X_GetLimitCheckEnable+0x24>
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8007304:	23fc      	movs	r3, #252	; 0xfc
 8007306:	75fb      	strb	r3, [r7, #23]
		*pLimitCheckEnable = 0;
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	2200      	movs	r2, #0
 800730c:	701a      	strb	r2, [r3, #0]
 800730e:	e008      	b.n	8007322 <VL53L0X_GetLimitCheckEnable+0x36>
	} else {
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8007310:	897b      	ldrh	r3, [r7, #10]
 8007312:	68fa      	ldr	r2, [r7, #12]
 8007314:	4413      	add	r3, r2
 8007316:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800731a:	75bb      	strb	r3, [r7, #22]
			LimitCheckId, Temp8);
		*pLimitCheckEnable = Temp8;
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	7dba      	ldrb	r2, [r7, #22]
 8007320:	701a      	strb	r2, [r3, #0]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8007322:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007326:	4618      	mov	r0, r3
 8007328:	371c      	adds	r7, #28
 800732a:	46bd      	mov	sp, r7
 800732c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007330:	4770      	bx	lr
	...

08007334 <VL53L0X_SetLimitCheckValue>:

VL53L0X_Error VL53L0X_SetLimitCheckValue(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	FixPoint1616_t LimitCheckValue)
{
 8007334:	b580      	push	{r7, lr}
 8007336:	b086      	sub	sp, #24
 8007338:	af00      	add	r7, sp, #0
 800733a:	60f8      	str	r0, [r7, #12]
 800733c:	460b      	mov	r3, r1
 800733e:	607a      	str	r2, [r7, #4]
 8007340:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007342:	2300      	movs	r3, #0
 8007344:	75fb      	strb	r3, [r7, #23]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksEnable, LimitCheckId,
 8007346:	897b      	ldrh	r3, [r7, #10]
 8007348:	68fa      	ldr	r2, [r7, #12]
 800734a:	4413      	add	r3, r2
 800734c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007350:	75bb      	strb	r3, [r7, #22]
		Temp8);

	if (Temp8 == 0) { /* disabled write only internal value */
 8007352:	7dbb      	ldrb	r3, [r7, #22]
 8007354:	2b00      	cmp	r3, #0
 8007356:	d107      	bne.n	8007368 <VL53L0X_SetLimitCheckValue+0x34>
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8007358:	897b      	ldrh	r3, [r7, #10]
 800735a:	68fa      	ldr	r2, [r7, #12]
 800735c:	330c      	adds	r3, #12
 800735e:	009b      	lsls	r3, r3, #2
 8007360:	4413      	add	r3, r2
 8007362:	687a      	ldr	r2, [r7, #4]
 8007364:	605a      	str	r2, [r3, #4]
 8007366:	e040      	b.n	80073ea <VL53L0X_SetLimitCheckValue+0xb6>
			LimitCheckId, LimitCheckValue);
	} else {

		switch (LimitCheckId) {
 8007368:	897b      	ldrh	r3, [r7, #10]
 800736a:	2b05      	cmp	r3, #5
 800736c:	d830      	bhi.n	80073d0 <VL53L0X_SetLimitCheckValue+0x9c>
 800736e:	a201      	add	r2, pc, #4	; (adr r2, 8007374 <VL53L0X_SetLimitCheckValue+0x40>)
 8007370:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007374:	0800738d 	.word	0x0800738d
 8007378:	08007395 	.word	0x08007395
 800737c:	080073ab 	.word	0x080073ab
 8007380:	080073b3 	.word	0x080073b3
 8007384:	080073bb 	.word	0x080073bb
 8007388:	080073bb 	.word	0x080073bb

		case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	687a      	ldr	r2, [r7, #4]
 8007390:	635a      	str	r2, [r3, #52]	; 0x34
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				LimitCheckValue);
			break;
 8007392:	e01f      	b.n	80073d4 <VL53L0X_SetLimitCheckValue+0xa0>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:

			Status = VL53L0X_WrWord(Dev,
			VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 8007398:	b29b      	uxth	r3, r3
 800739a:	461a      	mov	r2, r3
 800739c:	2144      	movs	r1, #68	; 0x44
 800739e:	68f8      	ldr	r0, [r7, #12]
 80073a0:	f004 f826 	bl	800b3f0 <VL53L0X_WrWord>
 80073a4:	4603      	mov	r3, r0
 80073a6:	75fb      	strb	r3, [r7, #23]
					LimitCheckValue));

			break;
 80073a8:	e014      	b.n	80073d4 <VL53L0X_SetLimitCheckValue+0xa0>

		case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	687a      	ldr	r2, [r7, #4]
 80073ae:	63da      	str	r2, [r3, #60]	; 0x3c
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				LimitCheckValue);

			break;
 80073b0:	e010      	b.n	80073d4 <VL53L0X_SetLimitCheckValue+0xa0>

		case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	687a      	ldr	r2, [r7, #4]
 80073b6:	641a      	str	r2, [r3, #64]	; 0x40
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				LimitCheckValue);

			break;
 80073b8:	e00c      	b.n	80073d4 <VL53L0X_SetLimitCheckValue+0xa0>
		case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:
		case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:

			Status = VL53L0X_WrWord(Dev,
				VL53L0X_REG_PRE_RANGE_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 80073be:	b29b      	uxth	r3, r3
 80073c0:	461a      	mov	r2, r3
 80073c2:	2164      	movs	r1, #100	; 0x64
 80073c4:	68f8      	ldr	r0, [r7, #12]
 80073c6:	f004 f813 	bl	800b3f0 <VL53L0X_WrWord>
 80073ca:	4603      	mov	r3, r0
 80073cc:	75fb      	strb	r3, [r7, #23]
					LimitCheckValue));

			break;
 80073ce:	e001      	b.n	80073d4 <VL53L0X_SetLimitCheckValue+0xa0>

		default:
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 80073d0:	23fc      	movs	r3, #252	; 0xfc
 80073d2:	75fb      	strb	r3, [r7, #23]

		}

		if (Status == VL53L0X_ERROR_NONE) {
 80073d4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80073d8:	2b00      	cmp	r3, #0
 80073da:	d106      	bne.n	80073ea <VL53L0X_SetLimitCheckValue+0xb6>
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 80073dc:	897b      	ldrh	r3, [r7, #10]
 80073de:	68fa      	ldr	r2, [r7, #12]
 80073e0:	330c      	adds	r3, #12
 80073e2:	009b      	lsls	r3, r3, #2
 80073e4:	4413      	add	r3, r2
 80073e6:	687a      	ldr	r2, [r7, #4]
 80073e8:	605a      	str	r2, [r3, #4]
				LimitCheckId, LimitCheckValue);
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80073ea:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80073ee:	4618      	mov	r0, r3
 80073f0:	3718      	adds	r7, #24
 80073f2:	46bd      	mov	sp, r7
 80073f4:	bd80      	pop	{r7, pc}
 80073f6:	bf00      	nop

080073f8 <VL53L0X_GetLimitCheckValue>:

VL53L0X_Error VL53L0X_GetLimitCheckValue(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	FixPoint1616_t *pLimitCheckValue)
{
 80073f8:	b580      	push	{r7, lr}
 80073fa:	b088      	sub	sp, #32
 80073fc:	af00      	add	r7, sp, #0
 80073fe:	60f8      	str	r0, [r7, #12]
 8007400:	460b      	mov	r3, r1
 8007402:	607a      	str	r2, [r7, #4]
 8007404:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007406:	2300      	movs	r3, #0
 8007408:	77fb      	strb	r3, [r7, #31]
	uint8_t EnableZeroValue = 0;
 800740a:	2300      	movs	r3, #0
 800740c:	77bb      	strb	r3, [r7, #30]
	uint16_t Temp16;
	FixPoint1616_t TempFix1616;

	LOG_FUNCTION_START("");

	switch (LimitCheckId) {
 800740e:	897b      	ldrh	r3, [r7, #10]
 8007410:	2b05      	cmp	r3, #5
 8007412:	d847      	bhi.n	80074a4 <VL53L0X_GetLimitCheckValue+0xac>
 8007414:	a201      	add	r2, pc, #4	; (adr r2, 800741c <VL53L0X_GetLimitCheckValue+0x24>)
 8007416:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800741a:	bf00      	nop
 800741c:	08007435 	.word	0x08007435
 8007420:	08007441 	.word	0x08007441
 8007424:	08007467 	.word	0x08007467
 8007428:	08007473 	.word	0x08007473
 800742c:	0800747f 	.word	0x0800747f
 8007430:	0800747f 	.word	0x0800747f

	case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007438:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, TempFix1616);
		EnableZeroValue = 0;
 800743a:	2300      	movs	r3, #0
 800743c:	77bb      	strb	r3, [r7, #30]
		break;
 800743e:	e033      	b.n	80074a8 <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:
		Status = VL53L0X_RdWord(Dev,
 8007440:	f107 0316 	add.w	r3, r7, #22
 8007444:	461a      	mov	r2, r3
 8007446:	2144      	movs	r1, #68	; 0x44
 8007448:	68f8      	ldr	r0, [r7, #12]
 800744a:	f004 f859 	bl	800b500 <VL53L0X_RdWord>
 800744e:	4603      	mov	r3, r0
 8007450:	77fb      	strb	r3, [r7, #31]
		VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
			&Temp16);
		if (Status == VL53L0X_ERROR_NONE)
 8007452:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8007456:	2b00      	cmp	r3, #0
 8007458:	d102      	bne.n	8007460 <VL53L0X_GetLimitCheckValue+0x68>
			TempFix1616 = VL53L0X_FIXPOINT97TOFIXPOINT1616(Temp16);
 800745a:	8afb      	ldrh	r3, [r7, #22]
 800745c:	025b      	lsls	r3, r3, #9
 800745e:	61bb      	str	r3, [r7, #24]


		EnableZeroValue = 1;
 8007460:	2301      	movs	r3, #1
 8007462:	77bb      	strb	r3, [r7, #30]
		break;
 8007464:	e020      	b.n	80074a8 <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800746a:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, TempFix1616);
		EnableZeroValue = 0;
 800746c:	2300      	movs	r3, #0
 800746e:	77bb      	strb	r3, [r7, #30]
		break;
 8007470:	e01a      	b.n	80074a8 <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007476:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD, TempFix1616);
		EnableZeroValue = 0;
 8007478:	2300      	movs	r3, #0
 800747a:	77bb      	strb	r3, [r7, #30]
		break;
 800747c:	e014      	b.n	80074a8 <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:
	case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:
		Status = VL53L0X_RdWord(Dev,
 800747e:	f107 0316 	add.w	r3, r7, #22
 8007482:	461a      	mov	r2, r3
 8007484:	2164      	movs	r1, #100	; 0x64
 8007486:	68f8      	ldr	r0, [r7, #12]
 8007488:	f004 f83a 	bl	800b500 <VL53L0X_RdWord>
 800748c:	4603      	mov	r3, r0
 800748e:	77fb      	strb	r3, [r7, #31]
			VL53L0X_REG_PRE_RANGE_MIN_COUNT_RATE_RTN_LIMIT,
			&Temp16);
		if (Status == VL53L0X_ERROR_NONE)
 8007490:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8007494:	2b00      	cmp	r3, #0
 8007496:	d102      	bne.n	800749e <VL53L0X_GetLimitCheckValue+0xa6>
			TempFix1616 = VL53L0X_FIXPOINT97TOFIXPOINT1616(Temp16);
 8007498:	8afb      	ldrh	r3, [r7, #22]
 800749a:	025b      	lsls	r3, r3, #9
 800749c:	61bb      	str	r3, [r7, #24]


		EnableZeroValue = 0;
 800749e:	2300      	movs	r3, #0
 80074a0:	77bb      	strb	r3, [r7, #30]
		break;
 80074a2:	e001      	b.n	80074a8 <VL53L0X_GetLimitCheckValue+0xb0>

	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 80074a4:	23fc      	movs	r3, #252	; 0xfc
 80074a6:	77fb      	strb	r3, [r7, #31]

	}

	if (Status == VL53L0X_ERROR_NONE) {
 80074a8:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	d12a      	bne.n	8007506 <VL53L0X_GetLimitCheckValue+0x10e>

		if (EnableZeroValue == 1) {
 80074b0:	7fbb      	ldrb	r3, [r7, #30]
 80074b2:	2b01      	cmp	r3, #1
 80074b4:	d124      	bne.n	8007500 <VL53L0X_GetLimitCheckValue+0x108>

			if (TempFix1616 == 0) {
 80074b6:	69bb      	ldr	r3, [r7, #24]
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	d110      	bne.n	80074de <VL53L0X_GetLimitCheckValue+0xe6>
				/* disabled: return value from memory */
				VL53L0X_GETARRAYPARAMETERFIELD(Dev,
 80074bc:	897b      	ldrh	r3, [r7, #10]
 80074be:	68fa      	ldr	r2, [r7, #12]
 80074c0:	330c      	adds	r3, #12
 80074c2:	009b      	lsls	r3, r3, #2
 80074c4:	4413      	add	r3, r2
 80074c6:	685b      	ldr	r3, [r3, #4]
 80074c8:	61bb      	str	r3, [r7, #24]
					LimitChecksValue, LimitCheckId,
					TempFix1616);
				*pLimitCheckValue = TempFix1616;
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	69ba      	ldr	r2, [r7, #24]
 80074ce:	601a      	str	r2, [r3, #0]
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 80074d0:	897b      	ldrh	r3, [r7, #10]
 80074d2:	68fa      	ldr	r2, [r7, #12]
 80074d4:	4413      	add	r3, r2
 80074d6:	2200      	movs	r2, #0
 80074d8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 80074dc:	e013      	b.n	8007506 <VL53L0X_GetLimitCheckValue+0x10e>
					LimitChecksEnable, LimitCheckId, 0);
			} else {
				*pLimitCheckValue = TempFix1616;
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	69ba      	ldr	r2, [r7, #24]
 80074e2:	601a      	str	r2, [r3, #0]
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 80074e4:	897b      	ldrh	r3, [r7, #10]
 80074e6:	68fa      	ldr	r2, [r7, #12]
 80074e8:	330c      	adds	r3, #12
 80074ea:	009b      	lsls	r3, r3, #2
 80074ec:	4413      	add	r3, r2
 80074ee:	69ba      	ldr	r2, [r7, #24]
 80074f0:	605a      	str	r2, [r3, #4]
					LimitChecksValue, LimitCheckId,
					TempFix1616);
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 80074f2:	897b      	ldrh	r3, [r7, #10]
 80074f4:	68fa      	ldr	r2, [r7, #12]
 80074f6:	4413      	add	r3, r2
 80074f8:	2201      	movs	r2, #1
 80074fa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 80074fe:	e002      	b.n	8007506 <VL53L0X_GetLimitCheckValue+0x10e>
					LimitChecksEnable, LimitCheckId, 1);
			}
		} else {
			*pLimitCheckValue = TempFix1616;
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	69ba      	ldr	r2, [r7, #24]
 8007504:	601a      	str	r2, [r3, #0]
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8007506:	f997 301f 	ldrsb.w	r3, [r7, #31]

}
 800750a:	4618      	mov	r0, r3
 800750c:	3720      	adds	r7, #32
 800750e:	46bd      	mov	sp, r7
 8007510:	bd80      	pop	{r7, pc}
 8007512:	bf00      	nop

08007514 <VL53L0X_GetWrapAroundCheckEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_GetWrapAroundCheckEnable(VL53L0X_DEV Dev,
	uint8_t *pWrapAroundCheckEnable)
{
 8007514:	b580      	push	{r7, lr}
 8007516:	b084      	sub	sp, #16
 8007518:	af00      	add	r7, sp, #0
 800751a:	6078      	str	r0, [r7, #4]
 800751c:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800751e:	2300      	movs	r3, #0
 8007520:	73fb      	strb	r3, [r7, #15]
	uint8_t data;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, &data);
 8007522:	f107 030e 	add.w	r3, r7, #14
 8007526:	461a      	mov	r2, r3
 8007528:	2101      	movs	r1, #1
 800752a:	6878      	ldr	r0, [r7, #4]
 800752c:	f003 ffbe 	bl	800b4ac <VL53L0X_RdByte>
 8007530:	4603      	mov	r3, r0
 8007532:	73fb      	strb	r3, [r7, #15]
	if (Status == VL53L0X_ERROR_NONE) {
 8007534:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007538:	2b00      	cmp	r3, #0
 800753a:	d10e      	bne.n	800755a <VL53L0X_GetWrapAroundCheckEnable+0x46>
		PALDevDataSet(Dev, SequenceConfig, data);
 800753c:	7bba      	ldrb	r2, [r7, #14]
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
		if (data & (0x01 << 7))
 8007544:	7bbb      	ldrb	r3, [r7, #14]
 8007546:	b25b      	sxtb	r3, r3
 8007548:	2b00      	cmp	r3, #0
 800754a:	da03      	bge.n	8007554 <VL53L0X_GetWrapAroundCheckEnable+0x40>
			*pWrapAroundCheckEnable = 0x01;
 800754c:	683b      	ldr	r3, [r7, #0]
 800754e:	2201      	movs	r2, #1
 8007550:	701a      	strb	r2, [r3, #0]
 8007552:	e002      	b.n	800755a <VL53L0X_GetWrapAroundCheckEnable+0x46>
		else
			*pWrapAroundCheckEnable = 0x00;
 8007554:	683b      	ldr	r3, [r7, #0]
 8007556:	2200      	movs	r2, #0
 8007558:	701a      	strb	r2, [r3, #0]
	}
	if (Status == VL53L0X_ERROR_NONE) {
 800755a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800755e:	2b00      	cmp	r3, #0
 8007560:	d104      	bne.n	800756c <VL53L0X_GetWrapAroundCheckEnable+0x58>
		VL53L0X_SETPARAMETERFIELD(Dev, WrapAroundCheckEnable,
 8007562:	683b      	ldr	r3, [r7, #0]
 8007564:	781a      	ldrb	r2, [r3, #0]
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
			*pWrapAroundCheckEnable);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800756c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007570:	4618      	mov	r0, r3
 8007572:	3710      	adds	r7, #16
 8007574:	46bd      	mov	sp, r7
 8007576:	bd80      	pop	{r7, pc}

08007578 <VL53L0X_PerformSingleMeasurement>:

/* End Group PAL Parameters Functions */

/* Group PAL Measurement Functions */
VL53L0X_Error VL53L0X_PerformSingleMeasurement(VL53L0X_DEV Dev)
{
 8007578:	b580      	push	{r7, lr}
 800757a:	b084      	sub	sp, #16
 800757c:	af00      	add	r7, sp, #0
 800757e:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007580:	2300      	movs	r3, #0
 8007582:	73fb      	strb	r3, [r7, #15]
	VL53L0X_DeviceModes DeviceMode;

	LOG_FUNCTION_START("");

	/* Get Current DeviceMode */
	Status = VL53L0X_GetDeviceMode(Dev, &DeviceMode);
 8007584:	f107 030e 	add.w	r3, r7, #14
 8007588:	4619      	mov	r1, r3
 800758a:	6878      	ldr	r0, [r7, #4]
 800758c:	f7ff fbd2 	bl	8006d34 <VL53L0X_GetDeviceMode>
 8007590:	4603      	mov	r3, r0
 8007592:	73fb      	strb	r3, [r7, #15]

	/* Start immediately to run a single ranging measurement in case of
	 * single ranging or single histogram */
	if (Status == VL53L0X_ERROR_NONE
 8007594:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007598:	2b00      	cmp	r3, #0
 800759a:	d107      	bne.n	80075ac <VL53L0X_PerformSingleMeasurement+0x34>
		&& DeviceMode == VL53L0X_DEVICEMODE_SINGLE_RANGING)
 800759c:	7bbb      	ldrb	r3, [r7, #14]
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d104      	bne.n	80075ac <VL53L0X_PerformSingleMeasurement+0x34>
		Status = VL53L0X_StartMeasurement(Dev);
 80075a2:	6878      	ldr	r0, [r7, #4]
 80075a4:	f000 f898 	bl	80076d8 <VL53L0X_StartMeasurement>
 80075a8:	4603      	mov	r3, r0
 80075aa:	73fb      	strb	r3, [r7, #15]


	if (Status == VL53L0X_ERROR_NONE)
 80075ac:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	d104      	bne.n	80075be <VL53L0X_PerformSingleMeasurement+0x46>
		Status = VL53L0X_measurement_poll_for_completion(Dev);
 80075b4:	6878      	ldr	r0, [r7, #4]
 80075b6:	f001 fb6f 	bl	8008c98 <VL53L0X_measurement_poll_for_completion>
 80075ba:	4603      	mov	r3, r0
 80075bc:	73fb      	strb	r3, [r7, #15]


	/* Change PAL State in case of single ranging or single histogram */
	if (Status == VL53L0X_ERROR_NONE
 80075be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	d106      	bne.n	80075d4 <VL53L0X_PerformSingleMeasurement+0x5c>
		&& DeviceMode == VL53L0X_DEVICEMODE_SINGLE_RANGING)
 80075c6:	7bbb      	ldrb	r3, [r7, #14]
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	d103      	bne.n	80075d4 <VL53L0X_PerformSingleMeasurement+0x5c>
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_IDLE);
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	2203      	movs	r2, #3
 80075d0:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132


	LOG_FUNCTION_END(Status);
	return Status;
 80075d4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80075d8:	4618      	mov	r0, r3
 80075da:	3710      	adds	r7, #16
 80075dc:	46bd      	mov	sp, r7
 80075de:	bd80      	pop	{r7, pc}

080075e0 <VL53L0X_PerformRefCalibration>:
	return Status;
}

VL53L0X_Error VL53L0X_PerformRefCalibration(VL53L0X_DEV Dev, uint8_t *pVhvSettings,
	uint8_t *pPhaseCal)
{
 80075e0:	b580      	push	{r7, lr}
 80075e2:	b086      	sub	sp, #24
 80075e4:	af00      	add	r7, sp, #0
 80075e6:	60f8      	str	r0, [r7, #12]
 80075e8:	60b9      	str	r1, [r7, #8]
 80075ea:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80075ec:	2300      	movs	r3, #0
 80075ee:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");

	Status = VL53L0X_perform_ref_calibration(Dev, pVhvSettings,
 80075f0:	2301      	movs	r3, #1
 80075f2:	687a      	ldr	r2, [r7, #4]
 80075f4:	68b9      	ldr	r1, [r7, #8]
 80075f6:	68f8      	ldr	r0, [r7, #12]
 80075f8:	f001 fb11 	bl	8008c1e <VL53L0X_perform_ref_calibration>
 80075fc:	4603      	mov	r3, r0
 80075fe:	75fb      	strb	r3, [r7, #23]
		pPhaseCal, 1);

	LOG_FUNCTION_END(Status);
	return Status;
 8007600:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007604:	4618      	mov	r0, r3
 8007606:	3718      	adds	r7, #24
 8007608:	46bd      	mov	sp, r7
 800760a:	bd80      	pop	{r7, pc}

0800760c <VL53L0X_CheckAndLoadInterruptSettings>:
	return Status;
}

VL53L0X_Error VL53L0X_CheckAndLoadInterruptSettings(VL53L0X_DEV Dev,
	uint8_t StartNotStopFlag)
{
 800760c:	b580      	push	{r7, lr}
 800760e:	b086      	sub	sp, #24
 8007610:	af00      	add	r7, sp, #0
 8007612:	6078      	str	r0, [r7, #4]
 8007614:	460b      	mov	r3, r1
 8007616:	70fb      	strb	r3, [r7, #3]
	uint8_t InterruptConfig;
	FixPoint1616_t ThresholdLow;
	FixPoint1616_t ThresholdHigh;
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007618:	2300      	movs	r3, #0
 800761a:	75fb      	strb	r3, [r7, #23]

	InterruptConfig = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	f893 30da 	ldrb.w	r3, [r3, #218]	; 0xda
 8007622:	75bb      	strb	r3, [r7, #22]
		Pin0GpioFunctionality);

	if ((InterruptConfig ==
 8007624:	7dbb      	ldrb	r3, [r7, #22]
 8007626:	2b01      	cmp	r3, #1
 8007628:	d005      	beq.n	8007636 <VL53L0X_CheckAndLoadInterruptSettings+0x2a>
		VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_LOW) ||
 800762a:	7dbb      	ldrb	r3, [r7, #22]
 800762c:	2b02      	cmp	r3, #2
 800762e:	d002      	beq.n	8007636 <VL53L0X_CheckAndLoadInterruptSettings+0x2a>
		(InterruptConfig ==
		VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_HIGH) ||
 8007630:	7dbb      	ldrb	r3, [r7, #22]
 8007632:	2b03      	cmp	r3, #3
 8007634:	d147      	bne.n	80076c6 <VL53L0X_CheckAndLoadInterruptSettings+0xba>
		(InterruptConfig ==
		VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_OUT)) {

		Status = VL53L0X_GetInterruptThresholds(Dev,
 8007636:	f107 030c 	add.w	r3, r7, #12
 800763a:	f107 0210 	add.w	r2, r7, #16
 800763e:	2101      	movs	r1, #1
 8007640:	6878      	ldr	r0, [r7, #4]
 8007642:	f000 fbc3 	bl	8007dcc <VL53L0X_GetInterruptThresholds>
 8007646:	4603      	mov	r3, r0
 8007648:	75fb      	strb	r3, [r7, #23]
			VL53L0X_DEVICEMODE_CONTINUOUS_RANGING,
			&ThresholdLow, &ThresholdHigh);

		if (((ThresholdLow > 255*65536) ||
 800764a:	693b      	ldr	r3, [r7, #16]
 800764c:	f5b3 0f7f 	cmp.w	r3, #16711680	; 0xff0000
 8007650:	d803      	bhi.n	800765a <VL53L0X_CheckAndLoadInterruptSettings+0x4e>
			(ThresholdHigh > 255*65536)) &&
 8007652:	68fb      	ldr	r3, [r7, #12]
		if (((ThresholdLow > 255*65536) ||
 8007654:	f5b3 0f7f 	cmp.w	r3, #16711680	; 0xff0000
 8007658:	d935      	bls.n	80076c6 <VL53L0X_CheckAndLoadInterruptSettings+0xba>
			(ThresholdHigh > 255*65536)) &&
 800765a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800765e:	2b00      	cmp	r3, #0
 8007660:	d131      	bne.n	80076c6 <VL53L0X_CheckAndLoadInterruptSettings+0xba>
			(Status == VL53L0X_ERROR_NONE)) {

			if (StartNotStopFlag != 0) {
 8007662:	78fb      	ldrb	r3, [r7, #3]
 8007664:	2b00      	cmp	r3, #0
 8007666:	d006      	beq.n	8007676 <VL53L0X_CheckAndLoadInterruptSettings+0x6a>
				Status = VL53L0X_load_tuning_settings(Dev,
 8007668:	491a      	ldr	r1, [pc, #104]	; (80076d4 <VL53L0X_CheckAndLoadInterruptSettings+0xc8>)
 800766a:	6878      	ldr	r0, [r7, #4]
 800766c:	f002 ff86 	bl	800a57c <VL53L0X_load_tuning_settings>
 8007670:	4603      	mov	r3, r0
 8007672:	75fb      	strb	r3, [r7, #23]
 8007674:	e027      	b.n	80076c6 <VL53L0X_CheckAndLoadInterruptSettings+0xba>
					InterruptThresholdSettings);
			} else {
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x04);
 8007676:	2204      	movs	r2, #4
 8007678:	21ff      	movs	r1, #255	; 0xff
 800767a:	6878      	ldr	r0, [r7, #4]
 800767c:	f003 fe94 	bl	800b3a8 <VL53L0X_WrByte>
 8007680:	4603      	mov	r3, r0
 8007682:	461a      	mov	r2, r3
 8007684:	7dfb      	ldrb	r3, [r7, #23]
 8007686:	4313      	orrs	r3, r2
 8007688:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0x70, 0x00);
 800768a:	2200      	movs	r2, #0
 800768c:	2170      	movs	r1, #112	; 0x70
 800768e:	6878      	ldr	r0, [r7, #4]
 8007690:	f003 fe8a 	bl	800b3a8 <VL53L0X_WrByte>
 8007694:	4603      	mov	r3, r0
 8007696:	461a      	mov	r2, r3
 8007698:	7dfb      	ldrb	r3, [r7, #23]
 800769a:	4313      	orrs	r3, r2
 800769c:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800769e:	2200      	movs	r2, #0
 80076a0:	21ff      	movs	r1, #255	; 0xff
 80076a2:	6878      	ldr	r0, [r7, #4]
 80076a4:	f003 fe80 	bl	800b3a8 <VL53L0X_WrByte>
 80076a8:	4603      	mov	r3, r0
 80076aa:	461a      	mov	r2, r3
 80076ac:	7dfb      	ldrb	r3, [r7, #23]
 80076ae:	4313      	orrs	r3, r2
 80076b0:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 80076b2:	2200      	movs	r2, #0
 80076b4:	2180      	movs	r1, #128	; 0x80
 80076b6:	6878      	ldr	r0, [r7, #4]
 80076b8:	f003 fe76 	bl	800b3a8 <VL53L0X_WrByte>
 80076bc:	4603      	mov	r3, r0
 80076be:	461a      	mov	r2, r3
 80076c0:	7dfb      	ldrb	r3, [r7, #23]
 80076c2:	4313      	orrs	r3, r2
 80076c4:	75fb      	strb	r3, [r7, #23]
		}


	}

	return Status;
 80076c6:	f997 3017 	ldrsb.w	r3, [r7, #23]

}
 80076ca:	4618      	mov	r0, r3
 80076cc:	3718      	adds	r7, #24
 80076ce:	46bd      	mov	sp, r7
 80076d0:	bd80      	pop	{r7, pc}
 80076d2:	bf00      	nop
 80076d4:	20000100 	.word	0x20000100

080076d8 <VL53L0X_StartMeasurement>:


VL53L0X_Error VL53L0X_StartMeasurement(VL53L0X_DEV Dev)
{
 80076d8:	b580      	push	{r7, lr}
 80076da:	b086      	sub	sp, #24
 80076dc:	af00      	add	r7, sp, #0
 80076de:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80076e0:	2300      	movs	r3, #0
 80076e2:	75fb      	strb	r3, [r7, #23]
	VL53L0X_DeviceModes DeviceMode;
	uint8_t Byte;
	uint8_t StartStopByte = VL53L0X_REG_SYSRANGE_MODE_START_STOP;
 80076e4:	2301      	movs	r3, #1
 80076e6:	73fb      	strb	r3, [r7, #15]
	uint32_t LoopNb;
	LOG_FUNCTION_START("");

	/* Get Current DeviceMode */
	VL53L0X_GetDeviceMode(Dev, &DeviceMode);
 80076e8:	f107 030e 	add.w	r3, r7, #14
 80076ec:	4619      	mov	r1, r3
 80076ee:	6878      	ldr	r0, [r7, #4]
 80076f0:	f7ff fb20 	bl	8006d34 <VL53L0X_GetDeviceMode>

	Status = VL53L0X_WrByte(Dev, 0x80, 0x01);
 80076f4:	2201      	movs	r2, #1
 80076f6:	2180      	movs	r1, #128	; 0x80
 80076f8:	6878      	ldr	r0, [r7, #4]
 80076fa:	f003 fe55 	bl	800b3a8 <VL53L0X_WrByte>
 80076fe:	4603      	mov	r3, r0
 8007700:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8007702:	2201      	movs	r2, #1
 8007704:	21ff      	movs	r1, #255	; 0xff
 8007706:	6878      	ldr	r0, [r7, #4]
 8007708:	f003 fe4e 	bl	800b3a8 <VL53L0X_WrByte>
 800770c:	4603      	mov	r3, r0
 800770e:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x00, 0x00);
 8007710:	2200      	movs	r2, #0
 8007712:	2100      	movs	r1, #0
 8007714:	6878      	ldr	r0, [r7, #4]
 8007716:	f003 fe47 	bl	800b3a8 <VL53L0X_WrByte>
 800771a:	4603      	mov	r3, r0
 800771c:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x91, PALDevDataGet(Dev, StopVariable));
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	f893 313a 	ldrb.w	r3, [r3, #314]	; 0x13a
 8007724:	461a      	mov	r2, r3
 8007726:	2191      	movs	r1, #145	; 0x91
 8007728:	6878      	ldr	r0, [r7, #4]
 800772a:	f003 fe3d 	bl	800b3a8 <VL53L0X_WrByte>
 800772e:	4603      	mov	r3, r0
 8007730:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x00, 0x01);
 8007732:	2201      	movs	r2, #1
 8007734:	2100      	movs	r1, #0
 8007736:	6878      	ldr	r0, [r7, #4]
 8007738:	f003 fe36 	bl	800b3a8 <VL53L0X_WrByte>
 800773c:	4603      	mov	r3, r0
 800773e:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8007740:	2200      	movs	r2, #0
 8007742:	21ff      	movs	r1, #255	; 0xff
 8007744:	6878      	ldr	r0, [r7, #4]
 8007746:	f003 fe2f 	bl	800b3a8 <VL53L0X_WrByte>
 800774a:	4603      	mov	r3, r0
 800774c:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x80, 0x00);
 800774e:	2200      	movs	r2, #0
 8007750:	2180      	movs	r1, #128	; 0x80
 8007752:	6878      	ldr	r0, [r7, #4]
 8007754:	f003 fe28 	bl	800b3a8 <VL53L0X_WrByte>
 8007758:	4603      	mov	r3, r0
 800775a:	75fb      	strb	r3, [r7, #23]

	switch (DeviceMode) {
 800775c:	7bbb      	ldrb	r3, [r7, #14]
 800775e:	2b03      	cmp	r3, #3
 8007760:	d054      	beq.n	800780c <VL53L0X_StartMeasurement+0x134>
 8007762:	2b03      	cmp	r3, #3
 8007764:	dc6c      	bgt.n	8007840 <VL53L0X_StartMeasurement+0x168>
 8007766:	2b00      	cmp	r3, #0
 8007768:	d002      	beq.n	8007770 <VL53L0X_StartMeasurement+0x98>
 800776a:	2b01      	cmp	r3, #1
 800776c:	d034      	beq.n	80077d8 <VL53L0X_StartMeasurement+0x100>
 800776e:	e067      	b.n	8007840 <VL53L0X_StartMeasurement+0x168>
	case VL53L0X_DEVICEMODE_SINGLE_RANGING:
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START, 0x01);
 8007770:	2201      	movs	r2, #1
 8007772:	2100      	movs	r1, #0
 8007774:	6878      	ldr	r0, [r7, #4]
 8007776:	f003 fe17 	bl	800b3a8 <VL53L0X_WrByte>
 800777a:	4603      	mov	r3, r0
 800777c:	75fb      	strb	r3, [r7, #23]

		Byte = StartStopByte;
 800777e:	7bfb      	ldrb	r3, [r7, #15]
 8007780:	737b      	strb	r3, [r7, #13]
		if (Status == VL53L0X_ERROR_NONE) {
 8007782:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007786:	2b00      	cmp	r3, #0
 8007788:	d15d      	bne.n	8007846 <VL53L0X_StartMeasurement+0x16e>
			/* Wait until start bit has been cleared */
			LoopNb = 0;
 800778a:	2300      	movs	r3, #0
 800778c:	613b      	str	r3, [r7, #16]
			do {
				if (LoopNb > 0)
 800778e:	693b      	ldr	r3, [r7, #16]
 8007790:	2b00      	cmp	r3, #0
 8007792:	d008      	beq.n	80077a6 <VL53L0X_StartMeasurement+0xce>
					Status = VL53L0X_RdByte(Dev,
 8007794:	f107 030d 	add.w	r3, r7, #13
 8007798:	461a      	mov	r2, r3
 800779a:	2100      	movs	r1, #0
 800779c:	6878      	ldr	r0, [r7, #4]
 800779e:	f003 fe85 	bl	800b4ac <VL53L0X_RdByte>
 80077a2:	4603      	mov	r3, r0
 80077a4:	75fb      	strb	r3, [r7, #23]
					VL53L0X_REG_SYSRANGE_START, &Byte);
				LoopNb = LoopNb + 1;
 80077a6:	693b      	ldr	r3, [r7, #16]
 80077a8:	3301      	adds	r3, #1
 80077aa:	613b      	str	r3, [r7, #16]
			} while (((Byte & StartStopByte) == StartStopByte)
 80077ac:	7b7a      	ldrb	r2, [r7, #13]
 80077ae:	7bfb      	ldrb	r3, [r7, #15]
 80077b0:	4013      	ands	r3, r2
 80077b2:	b2db      	uxtb	r3, r3
				&& (Status == VL53L0X_ERROR_NONE)
				&& (LoopNb < VL53L0X_DEFAULT_MAX_LOOP));
 80077b4:	7bfa      	ldrb	r2, [r7, #15]
 80077b6:	429a      	cmp	r2, r3
 80077b8:	d107      	bne.n	80077ca <VL53L0X_StartMeasurement+0xf2>
				&& (Status == VL53L0X_ERROR_NONE)
 80077ba:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80077be:	2b00      	cmp	r3, #0
 80077c0:	d103      	bne.n	80077ca <VL53L0X_StartMeasurement+0xf2>
				&& (LoopNb < VL53L0X_DEFAULT_MAX_LOOP));
 80077c2:	693b      	ldr	r3, [r7, #16]
 80077c4:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80077c8:	d3e1      	bcc.n	800778e <VL53L0X_StartMeasurement+0xb6>

			if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP)
 80077ca:	693b      	ldr	r3, [r7, #16]
 80077cc:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80077d0:	d339      	bcc.n	8007846 <VL53L0X_StartMeasurement+0x16e>
				Status = VL53L0X_ERROR_TIME_OUT;
 80077d2:	23f9      	movs	r3, #249	; 0xf9
 80077d4:	75fb      	strb	r3, [r7, #23]

		}

		break;
 80077d6:	e036      	b.n	8007846 <VL53L0X_StartMeasurement+0x16e>
	case VL53L0X_DEVICEMODE_CONTINUOUS_RANGING:
		/* Back-to-back mode */

		/* Check if need to apply interrupt settings */
		if (Status == VL53L0X_ERROR_NONE)
 80077d8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80077dc:	2b00      	cmp	r3, #0
 80077de:	d105      	bne.n	80077ec <VL53L0X_StartMeasurement+0x114>
			Status = VL53L0X_CheckAndLoadInterruptSettings(Dev, 1);
 80077e0:	2101      	movs	r1, #1
 80077e2:	6878      	ldr	r0, [r7, #4]
 80077e4:	f7ff ff12 	bl	800760c <VL53L0X_CheckAndLoadInterruptSettings>
 80077e8:	4603      	mov	r3, r0
 80077ea:	75fb      	strb	r3, [r7, #23]

		Status = VL53L0X_WrByte(Dev,
 80077ec:	2202      	movs	r2, #2
 80077ee:	2100      	movs	r1, #0
 80077f0:	6878      	ldr	r0, [r7, #4]
 80077f2:	f003 fdd9 	bl	800b3a8 <VL53L0X_WrByte>
 80077f6:	4603      	mov	r3, r0
 80077f8:	75fb      	strb	r3, [r7, #23]
		VL53L0X_REG_SYSRANGE_START,
		VL53L0X_REG_SYSRANGE_MODE_BACKTOBACK);
		if (Status == VL53L0X_ERROR_NONE) {
 80077fa:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80077fe:	2b00      	cmp	r3, #0
 8007800:	d123      	bne.n	800784a <VL53L0X_StartMeasurement+0x172>
			/* Set PAL State to Running */
			PALDevDataSet(Dev, PalState, VL53L0X_STATE_RUNNING);
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	2204      	movs	r2, #4
 8007806:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
		}
		break;
 800780a:	e01e      	b.n	800784a <VL53L0X_StartMeasurement+0x172>
	case VL53L0X_DEVICEMODE_CONTINUOUS_TIMED_RANGING:
		/* Continuous mode */
		/* Check if need to apply interrupt settings */
		if (Status == VL53L0X_ERROR_NONE)
 800780c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007810:	2b00      	cmp	r3, #0
 8007812:	d105      	bne.n	8007820 <VL53L0X_StartMeasurement+0x148>
			Status = VL53L0X_CheckAndLoadInterruptSettings(Dev, 1);
 8007814:	2101      	movs	r1, #1
 8007816:	6878      	ldr	r0, [r7, #4]
 8007818:	f7ff fef8 	bl	800760c <VL53L0X_CheckAndLoadInterruptSettings>
 800781c:	4603      	mov	r3, r0
 800781e:	75fb      	strb	r3, [r7, #23]

		Status = VL53L0X_WrByte(Dev,
 8007820:	2204      	movs	r2, #4
 8007822:	2100      	movs	r1, #0
 8007824:	6878      	ldr	r0, [r7, #4]
 8007826:	f003 fdbf 	bl	800b3a8 <VL53L0X_WrByte>
 800782a:	4603      	mov	r3, r0
 800782c:	75fb      	strb	r3, [r7, #23]
		VL53L0X_REG_SYSRANGE_START,
		VL53L0X_REG_SYSRANGE_MODE_TIMED);

		if (Status == VL53L0X_ERROR_NONE) {
 800782e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007832:	2b00      	cmp	r3, #0
 8007834:	d10b      	bne.n	800784e <VL53L0X_StartMeasurement+0x176>
			/* Set PAL State to Running */
			PALDevDataSet(Dev, PalState, VL53L0X_STATE_RUNNING);
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	2204      	movs	r2, #4
 800783a:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
		}
		break;
 800783e:	e006      	b.n	800784e <VL53L0X_StartMeasurement+0x176>
	default:
		/* Selected mode not supported */
		Status = VL53L0X_ERROR_MODE_NOT_SUPPORTED;
 8007840:	23f8      	movs	r3, #248	; 0xf8
 8007842:	75fb      	strb	r3, [r7, #23]
 8007844:	e004      	b.n	8007850 <VL53L0X_StartMeasurement+0x178>
		break;
 8007846:	bf00      	nop
 8007848:	e002      	b.n	8007850 <VL53L0X_StartMeasurement+0x178>
		break;
 800784a:	bf00      	nop
 800784c:	e000      	b.n	8007850 <VL53L0X_StartMeasurement+0x178>
		break;
 800784e:	bf00      	nop
	}


	LOG_FUNCTION_END(Status);
	return Status;
 8007850:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007854:	4618      	mov	r0, r3
 8007856:	3718      	adds	r7, #24
 8007858:	46bd      	mov	sp, r7
 800785a:	bd80      	pop	{r7, pc}

0800785c <VL53L0X_GetMeasurementDataReady>:
	return Status;
}

VL53L0X_Error VL53L0X_GetMeasurementDataReady(VL53L0X_DEV Dev,
	uint8_t *pMeasurementDataReady)
{
 800785c:	b580      	push	{r7, lr}
 800785e:	b084      	sub	sp, #16
 8007860:	af00      	add	r7, sp, #0
 8007862:	6078      	str	r0, [r7, #4]
 8007864:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007866:	2300      	movs	r3, #0
 8007868:	73fb      	strb	r3, [r7, #15]
	uint8_t SysRangeStatusRegister;
	uint8_t InterruptConfig;
	uint32_t InterruptMask;
	LOG_FUNCTION_START("");

	InterruptConfig = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	f893 30da 	ldrb.w	r3, [r3, #218]	; 0xda
 8007870:	73bb      	strb	r3, [r7, #14]
		Pin0GpioFunctionality);

	if (InterruptConfig ==
 8007872:	7bbb      	ldrb	r3, [r7, #14]
 8007874:	2b04      	cmp	r3, #4
 8007876:	d112      	bne.n	800789e <VL53L0X_GetMeasurementDataReady+0x42>
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY) {
		Status = VL53L0X_GetInterruptMaskStatus(Dev, &InterruptMask);
 8007878:	f107 0308 	add.w	r3, r7, #8
 800787c:	4619      	mov	r1, r3
 800787e:	6878      	ldr	r0, [r7, #4]
 8007880:	f000 fb1a 	bl	8007eb8 <VL53L0X_GetInterruptMaskStatus>
 8007884:	4603      	mov	r3, r0
 8007886:	73fb      	strb	r3, [r7, #15]
		if (InterruptMask ==
 8007888:	68bb      	ldr	r3, [r7, #8]
 800788a:	2b04      	cmp	r3, #4
 800788c:	d103      	bne.n	8007896 <VL53L0X_GetMeasurementDataReady+0x3a>
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY)
			*pMeasurementDataReady = 1;
 800788e:	683b      	ldr	r3, [r7, #0]
 8007890:	2201      	movs	r2, #1
 8007892:	701a      	strb	r2, [r3, #0]
 8007894:	e01c      	b.n	80078d0 <VL53L0X_GetMeasurementDataReady+0x74>
		else
			*pMeasurementDataReady = 0;
 8007896:	683b      	ldr	r3, [r7, #0]
 8007898:	2200      	movs	r2, #0
 800789a:	701a      	strb	r2, [r3, #0]
 800789c:	e018      	b.n	80078d0 <VL53L0X_GetMeasurementDataReady+0x74>
	} else {
		Status = VL53L0X_RdByte(Dev, VL53L0X_REG_RESULT_RANGE_STATUS,
 800789e:	f107 030d 	add.w	r3, r7, #13
 80078a2:	461a      	mov	r2, r3
 80078a4:	2114      	movs	r1, #20
 80078a6:	6878      	ldr	r0, [r7, #4]
 80078a8:	f003 fe00 	bl	800b4ac <VL53L0X_RdByte>
 80078ac:	4603      	mov	r3, r0
 80078ae:	73fb      	strb	r3, [r7, #15]
			&SysRangeStatusRegister);
		if (Status == VL53L0X_ERROR_NONE) {
 80078b0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	d10b      	bne.n	80078d0 <VL53L0X_GetMeasurementDataReady+0x74>
			if (SysRangeStatusRegister & 0x01)
 80078b8:	7b7b      	ldrb	r3, [r7, #13]
 80078ba:	f003 0301 	and.w	r3, r3, #1
 80078be:	2b00      	cmp	r3, #0
 80078c0:	d003      	beq.n	80078ca <VL53L0X_GetMeasurementDataReady+0x6e>
				*pMeasurementDataReady = 1;
 80078c2:	683b      	ldr	r3, [r7, #0]
 80078c4:	2201      	movs	r2, #1
 80078c6:	701a      	strb	r2, [r3, #0]
 80078c8:	e002      	b.n	80078d0 <VL53L0X_GetMeasurementDataReady+0x74>
			else
				*pMeasurementDataReady = 0;
 80078ca:	683b      	ldr	r3, [r7, #0]
 80078cc:	2200      	movs	r2, #0
 80078ce:	701a      	strb	r2, [r3, #0]
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80078d0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80078d4:	4618      	mov	r0, r3
 80078d6:	3710      	adds	r7, #16
 80078d8:	46bd      	mov	sp, r7
 80078da:	bd80      	pop	{r7, pc}

080078dc <VL53L0X_GetRangingMeasurementData>:
}


VL53L0X_Error VL53L0X_GetRangingMeasurementData(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData)
{
 80078dc:	b5b0      	push	{r4, r5, r7, lr}
 80078de:	b096      	sub	sp, #88	; 0x58
 80078e0:	af02      	add	r7, sp, #8
 80078e2:	6078      	str	r0, [r7, #4]
 80078e4:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80078e6:	2300      	movs	r3, #0
 80078e8:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	 * use multi read even if some registers are not useful, result will
	 * be more efficient
	 * start reading at 0x14 dec20
	 * end reading at 0x21 dec33 total 14 bytes to read
	 */
	Status = VL53L0X_ReadMulti(Dev, 0x14, localBuffer, 12);
 80078ec:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80078f0:	230c      	movs	r3, #12
 80078f2:	2114      	movs	r1, #20
 80078f4:	6878      	ldr	r0, [r7, #4]
 80078f6:	f003 fd2b 	bl	800b350 <VL53L0X_ReadMulti>
 80078fa:	4603      	mov	r3, r0
 80078fc:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

	if (Status == VL53L0X_ERROR_NONE) {
 8007900:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8007904:	2b00      	cmp	r3, #0
 8007906:	f040 80d1 	bne.w	8007aac <VL53L0X_GetRangingMeasurementData+0x1d0>

		pRangingMeasurementData->ZoneId = 0; /* Only one zone */
 800790a:	683b      	ldr	r3, [r7, #0]
 800790c:	2200      	movs	r2, #0
 800790e:	759a      	strb	r2, [r3, #22]
		pRangingMeasurementData->TimeStamp = 0; /* Not Implemented */
 8007910:	683b      	ldr	r3, [r7, #0]
 8007912:	2200      	movs	r2, #0
 8007914:	601a      	str	r2, [r3, #0]

		tmpuint16 = VL53L0X_MAKEUINT16(localBuffer[11], localBuffer[10]);
 8007916:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800791a:	b29b      	uxth	r3, r3
 800791c:	021b      	lsls	r3, r3, #8
 800791e:	b29a      	uxth	r2, r3
 8007920:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8007924:	b29b      	uxth	r3, r3
 8007926:	4413      	add	r3, r2
 8007928:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
		/* cut1.1 if SYSTEM__RANGE_CONFIG if 1 range is 2bits fractional
		 *(format 11.2) else no fractional
		 */

		pRangingMeasurementData->MeasurementTimeUsec = 0;
 800792c:	683b      	ldr	r3, [r7, #0]
 800792e:	2200      	movs	r2, #0
 8007930:	605a      	str	r2, [r3, #4]

		SignalRate = VL53L0X_FIXPOINT97TOFIXPOINT1616(
 8007932:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8007936:	b29b      	uxth	r3, r3
 8007938:	021b      	lsls	r3, r3, #8
 800793a:	b29a      	uxth	r2, r3
 800793c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007940:	b29b      	uxth	r3, r3
 8007942:	4413      	add	r3, r2
 8007944:	b29b      	uxth	r3, r3
 8007946:	025b      	lsls	r3, r3, #9
 8007948:	647b      	str	r3, [r7, #68]	; 0x44
			VL53L0X_MAKEUINT16(localBuffer[7], localBuffer[6]));
		/* peak_signal_count_rate_rtn_mcps */
		pRangingMeasurementData->SignalRateRtnMegaCps = SignalRate;
 800794a:	683b      	ldr	r3, [r7, #0]
 800794c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800794e:	60da      	str	r2, [r3, #12]

		AmbientRate = VL53L0X_MAKEUINT16(localBuffer[9], localBuffer[8]);
 8007950:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8007954:	b29b      	uxth	r3, r3
 8007956:	021b      	lsls	r3, r3, #8
 8007958:	b29a      	uxth	r2, r3
 800795a:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 800795e:	b29b      	uxth	r3, r3
 8007960:	4413      	add	r3, r2
 8007962:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
		pRangingMeasurementData->AmbientRateRtnMegaCps =
			VL53L0X_FIXPOINT97TOFIXPOINT1616(AmbientRate);
 8007966:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800796a:	025b      	lsls	r3, r3, #9
 800796c:	461a      	mov	r2, r3
		pRangingMeasurementData->AmbientRateRtnMegaCps =
 800796e:	683b      	ldr	r3, [r7, #0]
 8007970:	611a      	str	r2, [r3, #16]

		EffectiveSpadRtnCount = VL53L0X_MAKEUINT16(localBuffer[3],
 8007972:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8007976:	b29b      	uxth	r3, r3
 8007978:	021b      	lsls	r3, r3, #8
 800797a:	b29a      	uxth	r2, r3
 800797c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007980:	b29b      	uxth	r3, r3
 8007982:	4413      	add	r3, r2
 8007984:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
			localBuffer[2]);
		/* EffectiveSpadRtnCount is 8.8 format */
		pRangingMeasurementData->EffectiveSpadRtnCount =
 8007988:	683b      	ldr	r3, [r7, #0]
 800798a:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 800798e:	829a      	strh	r2, [r3, #20]
			EffectiveSpadRtnCount;

		DeviceRangeStatus = localBuffer[0];
 8007990:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8007994:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

		/* Get Linearity Corrective Gain */
		LinearityCorrectiveGain = PALDevDataGet(Dev,
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	f8b3 3152 	ldrh.w	r3, [r3, #338]	; 0x152
 800799e:	87bb      	strh	r3, [r7, #60]	; 0x3c
			LinearityCorrectiveGain);

		/* Get ranging configuration */
		RangeFractionalEnable = PALDevDataGet(Dev,
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	f893 3131 	ldrb.w	r3, [r3, #305]	; 0x131
 80079a6:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
			RangeFractionalEnable);

		if (LinearityCorrectiveGain != 1000) {
 80079aa:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80079ac:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80079b0:	d046      	beq.n	8007a40 <VL53L0X_GetRangingMeasurementData+0x164>

			tmpuint16 = (uint16_t)((LinearityCorrectiveGain
				* tmpuint16 + 500) / 1000);
 80079b2:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80079b4:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 80079b8:	fb02 f303 	mul.w	r3, r2, r3
 80079bc:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 80079c0:	4a57      	ldr	r2, [pc, #348]	; (8007b20 <VL53L0X_GetRangingMeasurementData+0x244>)
 80079c2:	fb82 1203 	smull	r1, r2, r2, r3
 80079c6:	1192      	asrs	r2, r2, #6
 80079c8:	17db      	asrs	r3, r3, #31
 80079ca:	1ad3      	subs	r3, r2, r3
			tmpuint16 = (uint16_t)((LinearityCorrectiveGain
 80079cc:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

			/* Implement Xtalk */
			VL53L0X_GETPARAMETERFIELD(Dev,
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	6a1b      	ldr	r3, [r3, #32]
 80079d4:	873b      	strh	r3, [r7, #56]	; 0x38
				XTalkCompensationRateMegaCps,
				XTalkCompensationRateMegaCps);
			VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	7f1b      	ldrb	r3, [r3, #28]
 80079da:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
				XTalkCompensationEnable);

			if (XTalkCompensationEnable) {
 80079de:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	d02c      	beq.n	8007a40 <VL53L0X_GetRangingMeasurementData+0x164>

				if ((SignalRate
					- ((XTalkCompensationRateMegaCps
					* EffectiveSpadRtnCount) >> 8))
 80079e6:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80079e8:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 80079ec:	fb02 f303 	mul.w	r3, r2, r3
 80079f0:	121a      	asrs	r2, r3, #8
					<= 0) {
 80079f2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
				if ((SignalRate
 80079f4:	429a      	cmp	r2, r3
 80079f6:	d10d      	bne.n	8007a14 <VL53L0X_GetRangingMeasurementData+0x138>
					if (RangeFractionalEnable)
 80079f8:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	d004      	beq.n	8007a0a <VL53L0X_GetRangingMeasurementData+0x12e>
						XtalkRangeMilliMeter = 8888;
 8007a00:	f242 23b8 	movw	r3, #8888	; 0x22b8
 8007a04:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8007a08:	e016      	b.n	8007a38 <VL53L0X_GetRangingMeasurementData+0x15c>
					else
						XtalkRangeMilliMeter = 8888
 8007a0a:	f648 23e0 	movw	r3, #35552	; 0x8ae0
 8007a0e:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8007a12:	e011      	b.n	8007a38 <VL53L0X_GetRangingMeasurementData+0x15c>
							<< 2;
				} else {
					XtalkRangeMilliMeter =
					(tmpuint16 * SignalRate)
 8007a14:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8007a18:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007a1a:	fb03 f202 	mul.w	r2, r3, r2
						/ (SignalRate
						- ((XTalkCompensationRateMegaCps
						* EffectiveSpadRtnCount)
 8007a1e:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8007a20:	f8b7 1040 	ldrh.w	r1, [r7, #64]	; 0x40
 8007a24:	fb01 f303 	mul.w	r3, r1, r3
						>> 8));
 8007a28:	121b      	asrs	r3, r3, #8
 8007a2a:	4619      	mov	r1, r3
						- ((XTalkCompensationRateMegaCps
 8007a2c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007a2e:	1a5b      	subs	r3, r3, r1
						/ (SignalRate
 8007a30:	fbb2 f3f3 	udiv	r3, r2, r3
					XtalkRangeMilliMeter =
 8007a34:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
				}

				tmpuint16 = XtalkRangeMilliMeter;
 8007a38:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8007a3c:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
			}

		}

		if (RangeFractionalEnable) {
 8007a40:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8007a44:	2b00      	cmp	r3, #0
 8007a46:	d00d      	beq.n	8007a64 <VL53L0X_GetRangingMeasurementData+0x188>
			pRangingMeasurementData->RangeMilliMeter =
				(uint16_t)((tmpuint16) >> 2);
 8007a48:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8007a4c:	089b      	lsrs	r3, r3, #2
 8007a4e:	b29a      	uxth	r2, r3
			pRangingMeasurementData->RangeMilliMeter =
 8007a50:	683b      	ldr	r3, [r7, #0]
 8007a52:	811a      	strh	r2, [r3, #8]
			pRangingMeasurementData->RangeFractionalPart =
				(uint8_t)((tmpuint16 & 0x03) << 6);
 8007a54:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8007a58:	b2db      	uxtb	r3, r3
 8007a5a:	019b      	lsls	r3, r3, #6
 8007a5c:	b2da      	uxtb	r2, r3
			pRangingMeasurementData->RangeFractionalPart =
 8007a5e:	683b      	ldr	r3, [r7, #0]
 8007a60:	75da      	strb	r2, [r3, #23]
 8007a62:	e006      	b.n	8007a72 <VL53L0X_GetRangingMeasurementData+0x196>
		} else {
			pRangingMeasurementData->RangeMilliMeter = tmpuint16;
 8007a64:	683b      	ldr	r3, [r7, #0]
 8007a66:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 8007a6a:	811a      	strh	r2, [r3, #8]
			pRangingMeasurementData->RangeFractionalPart = 0;
 8007a6c:	683b      	ldr	r3, [r7, #0]
 8007a6e:	2200      	movs	r2, #0
 8007a70:	75da      	strb	r2, [r3, #23]
		 * For a standard definition of RangeStatus, this should
		 * return 0 in case of good result after a ranging
		 * The range status depends on the device so call a device
		 * specific function to obtain the right Status.
		 */
		Status |= VL53L0X_get_pal_range_status(Dev, DeviceRangeStatus,
 8007a72:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8007a76:	f897 103f 	ldrb.w	r1, [r7, #63]	; 0x3f
 8007a7a:	f107 0336 	add.w	r3, r7, #54	; 0x36
 8007a7e:	9301      	str	r3, [sp, #4]
 8007a80:	683b      	ldr	r3, [r7, #0]
 8007a82:	9300      	str	r3, [sp, #0]
 8007a84:	4613      	mov	r3, r2
 8007a86:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007a88:	6878      	ldr	r0, [r7, #4]
 8007a8a:	f003 fa15 	bl	800aeb8 <VL53L0X_get_pal_range_status>
 8007a8e:	4603      	mov	r3, r0
 8007a90:	461a      	mov	r2, r3
 8007a92:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8007a96:	4313      	orrs	r3, r2
 8007a98:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
			SignalRate, EffectiveSpadRtnCount,
			pRangingMeasurementData, &PalRangeStatus);

		if (Status == VL53L0X_ERROR_NONE)
 8007a9c:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	d103      	bne.n	8007aac <VL53L0X_GetRangingMeasurementData+0x1d0>
			pRangingMeasurementData->RangeStatus = PalRangeStatus;
 8007aa4:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 8007aa8:	683b      	ldr	r3, [r7, #0]
 8007aaa:	761a      	strb	r2, [r3, #24]

	}

	if (Status == VL53L0X_ERROR_NONE) {
 8007aac:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	d12f      	bne.n	8007b14 <VL53L0X_GetRangingMeasurementData+0x238>
		/* Copy last read data into Dev buffer */
		LastRangeDataBuffer = PALDevDataGet(Dev, LastRangeMeasure);
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	f107 040c 	add.w	r4, r7, #12
 8007aba:	f103 0550 	add.w	r5, r3, #80	; 0x50
 8007abe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007ac0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007ac2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8007ac6:	e884 0007 	stmia.w	r4, {r0, r1, r2}

		LastRangeDataBuffer.RangeMilliMeter =
			pRangingMeasurementData->RangeMilliMeter;
 8007aca:	683b      	ldr	r3, [r7, #0]
 8007acc:	891b      	ldrh	r3, [r3, #8]
		LastRangeDataBuffer.RangeMilliMeter =
 8007ace:	82bb      	strh	r3, [r7, #20]
		LastRangeDataBuffer.RangeFractionalPart =
			pRangingMeasurementData->RangeFractionalPart;
 8007ad0:	683b      	ldr	r3, [r7, #0]
 8007ad2:	7ddb      	ldrb	r3, [r3, #23]
		LastRangeDataBuffer.RangeFractionalPart =
 8007ad4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
		LastRangeDataBuffer.RangeDMaxMilliMeter =
			pRangingMeasurementData->RangeDMaxMilliMeter;
 8007ad8:	683b      	ldr	r3, [r7, #0]
 8007ada:	895b      	ldrh	r3, [r3, #10]
		LastRangeDataBuffer.RangeDMaxMilliMeter =
 8007adc:	82fb      	strh	r3, [r7, #22]
		LastRangeDataBuffer.MeasurementTimeUsec =
			pRangingMeasurementData->MeasurementTimeUsec;
 8007ade:	683b      	ldr	r3, [r7, #0]
 8007ae0:	685b      	ldr	r3, [r3, #4]
		LastRangeDataBuffer.MeasurementTimeUsec =
 8007ae2:	613b      	str	r3, [r7, #16]
		LastRangeDataBuffer.SignalRateRtnMegaCps =
			pRangingMeasurementData->SignalRateRtnMegaCps;
 8007ae4:	683b      	ldr	r3, [r7, #0]
 8007ae6:	68db      	ldr	r3, [r3, #12]
		LastRangeDataBuffer.SignalRateRtnMegaCps =
 8007ae8:	61bb      	str	r3, [r7, #24]
		LastRangeDataBuffer.AmbientRateRtnMegaCps =
			pRangingMeasurementData->AmbientRateRtnMegaCps;
 8007aea:	683b      	ldr	r3, [r7, #0]
 8007aec:	691b      	ldr	r3, [r3, #16]
		LastRangeDataBuffer.AmbientRateRtnMegaCps =
 8007aee:	61fb      	str	r3, [r7, #28]
		LastRangeDataBuffer.EffectiveSpadRtnCount =
			pRangingMeasurementData->EffectiveSpadRtnCount;
 8007af0:	683b      	ldr	r3, [r7, #0]
 8007af2:	8a9b      	ldrh	r3, [r3, #20]
		LastRangeDataBuffer.EffectiveSpadRtnCount =
 8007af4:	843b      	strh	r3, [r7, #32]
		LastRangeDataBuffer.RangeStatus =
			pRangingMeasurementData->RangeStatus;
 8007af6:	683b      	ldr	r3, [r7, #0]
 8007af8:	7e1b      	ldrb	r3, [r3, #24]
		LastRangeDataBuffer.RangeStatus =
 8007afa:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24

		PALDevDataSet(Dev, LastRangeMeasure, LastRangeDataBuffer);
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	f103 0450 	add.w	r4, r3, #80	; 0x50
 8007b04:	f107 050c 	add.w	r5, r7, #12
 8007b08:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007b0a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007b0c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8007b10:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8007b14:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
}
 8007b18:	4618      	mov	r0, r3
 8007b1a:	3750      	adds	r7, #80	; 0x50
 8007b1c:	46bd      	mov	sp, r7
 8007b1e:	bdb0      	pop	{r4, r5, r7, pc}
 8007b20:	10624dd3 	.word	0x10624dd3

08007b24 <VL53L0X_PerformSingleRangingMeasurement>:
	return Status;
}

VL53L0X_Error VL53L0X_PerformSingleRangingMeasurement(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData)
{
 8007b24:	b580      	push	{r7, lr}
 8007b26:	b084      	sub	sp, #16
 8007b28:	af00      	add	r7, sp, #0
 8007b2a:	6078      	str	r0, [r7, #4]
 8007b2c:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007b2e:	2300      	movs	r3, #0
 8007b30:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	/* This function will do a complete single ranging
	 * Here we fix the mode! */
	Status = VL53L0X_SetDeviceMode(Dev, VL53L0X_DEVICEMODE_SINGLE_RANGING);
 8007b32:	2100      	movs	r1, #0
 8007b34:	6878      	ldr	r0, [r7, #4]
 8007b36:	f7ff f8d1 	bl	8006cdc <VL53L0X_SetDeviceMode>
 8007b3a:	4603      	mov	r3, r0
 8007b3c:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 8007b3e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007b42:	2b00      	cmp	r3, #0
 8007b44:	d104      	bne.n	8007b50 <VL53L0X_PerformSingleRangingMeasurement+0x2c>
		Status = VL53L0X_PerformSingleMeasurement(Dev);
 8007b46:	6878      	ldr	r0, [r7, #4]
 8007b48:	f7ff fd16 	bl	8007578 <VL53L0X_PerformSingleMeasurement>
 8007b4c:	4603      	mov	r3, r0
 8007b4e:	73fb      	strb	r3, [r7, #15]


	if (Status == VL53L0X_ERROR_NONE)
 8007b50:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007b54:	2b00      	cmp	r3, #0
 8007b56:	d105      	bne.n	8007b64 <VL53L0X_PerformSingleRangingMeasurement+0x40>
		Status = VL53L0X_GetRangingMeasurementData(Dev,
 8007b58:	6839      	ldr	r1, [r7, #0]
 8007b5a:	6878      	ldr	r0, [r7, #4]
 8007b5c:	f7ff febe 	bl	80078dc <VL53L0X_GetRangingMeasurementData>
 8007b60:	4603      	mov	r3, r0
 8007b62:	73fb      	strb	r3, [r7, #15]
			pRangingMeasurementData);


	if (Status == VL53L0X_ERROR_NONE)
 8007b64:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	d105      	bne.n	8007b78 <VL53L0X_PerformSingleRangingMeasurement+0x54>
		Status = VL53L0X_ClearInterruptMask(Dev, 0);
 8007b6c:	2100      	movs	r1, #0
 8007b6e:	6878      	ldr	r0, [r7, #4]
 8007b70:	f000 f962 	bl	8007e38 <VL53L0X_ClearInterruptMask>
 8007b74:	4603      	mov	r3, r0
 8007b76:	73fb      	strb	r3, [r7, #15]


	LOG_FUNCTION_END(Status);
	return Status;
 8007b78:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007b7c:	4618      	mov	r0, r3
 8007b7e:	3710      	adds	r7, #16
 8007b80:	46bd      	mov	sp, r7
 8007b82:	bd80      	pop	{r7, pc}

08007b84 <VL53L0X_SetGpioConfig>:
/* End Group PAL Measurement Functions */

VL53L0X_Error VL53L0X_SetGpioConfig(VL53L0X_DEV Dev, uint8_t Pin,
	VL53L0X_DeviceModes DeviceMode, VL53L0X_GpioFunctionality Functionality,
	VL53L0X_InterruptPolarity Polarity)
{
 8007b84:	b580      	push	{r7, lr}
 8007b86:	b084      	sub	sp, #16
 8007b88:	af00      	add	r7, sp, #0
 8007b8a:	6078      	str	r0, [r7, #4]
 8007b8c:	4608      	mov	r0, r1
 8007b8e:	4611      	mov	r1, r2
 8007b90:	461a      	mov	r2, r3
 8007b92:	4603      	mov	r3, r0
 8007b94:	70fb      	strb	r3, [r7, #3]
 8007b96:	460b      	mov	r3, r1
 8007b98:	70bb      	strb	r3, [r7, #2]
 8007b9a:	4613      	mov	r3, r2
 8007b9c:	707b      	strb	r3, [r7, #1]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007b9e:	2300      	movs	r3, #0
 8007ba0:	73fb      	strb	r3, [r7, #15]
	uint8_t data;

	LOG_FUNCTION_START("");

	if (Pin != 0) {
 8007ba2:	78fb      	ldrb	r3, [r7, #3]
 8007ba4:	2b00      	cmp	r3, #0
 8007ba6:	d002      	beq.n	8007bae <VL53L0X_SetGpioConfig+0x2a>
		Status = VL53L0X_ERROR_GPIO_NOT_EXISTING;
 8007ba8:	23f6      	movs	r3, #246	; 0xf6
 8007baa:	73fb      	strb	r3, [r7, #15]
 8007bac:	e107      	b.n	8007dbe <VL53L0X_SetGpioConfig+0x23a>
	} else if (DeviceMode == VL53L0X_DEVICEMODE_GPIO_DRIVE) {
 8007bae:	78bb      	ldrb	r3, [r7, #2]
 8007bb0:	2b14      	cmp	r3, #20
 8007bb2:	d110      	bne.n	8007bd6 <VL53L0X_SetGpioConfig+0x52>
		if (Polarity == VL53L0X_INTERRUPTPOLARITY_LOW)
 8007bb4:	7e3b      	ldrb	r3, [r7, #24]
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	d102      	bne.n	8007bc0 <VL53L0X_SetGpioConfig+0x3c>
			data = 0x10;
 8007bba:	2310      	movs	r3, #16
 8007bbc:	73bb      	strb	r3, [r7, #14]
 8007bbe:	e001      	b.n	8007bc4 <VL53L0X_SetGpioConfig+0x40>
		else
			data = 1;
 8007bc0:	2301      	movs	r3, #1
 8007bc2:	73bb      	strb	r3, [r7, #14]

		Status = VL53L0X_WrByte(Dev,
 8007bc4:	7bbb      	ldrb	r3, [r7, #14]
 8007bc6:	461a      	mov	r2, r3
 8007bc8:	2184      	movs	r1, #132	; 0x84
 8007bca:	6878      	ldr	r0, [r7, #4]
 8007bcc:	f003 fbec 	bl	800b3a8 <VL53L0X_WrByte>
 8007bd0:	4603      	mov	r3, r0
 8007bd2:	73fb      	strb	r3, [r7, #15]
 8007bd4:	e0f3      	b.n	8007dbe <VL53L0X_SetGpioConfig+0x23a>
		VL53L0X_REG_GPIO_HV_MUX_ACTIVE_HIGH, data);

	} else if (DeviceMode == VL53L0X_DEVICEMODE_GPIO_OSC) {
 8007bd6:	78bb      	ldrb	r3, [r7, #2]
 8007bd8:	2b15      	cmp	r3, #21
 8007bda:	f040 8097 	bne.w	8007d0c <VL53L0X_SetGpioConfig+0x188>

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 8007bde:	2201      	movs	r2, #1
 8007be0:	21ff      	movs	r1, #255	; 0xff
 8007be2:	6878      	ldr	r0, [r7, #4]
 8007be4:	f003 fbe0 	bl	800b3a8 <VL53L0X_WrByte>
 8007be8:	4603      	mov	r3, r0
 8007bea:	461a      	mov	r2, r3
 8007bec:	7bfb      	ldrb	r3, [r7, #15]
 8007bee:	4313      	orrs	r3, r2
 8007bf0:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 8007bf2:	2200      	movs	r2, #0
 8007bf4:	2100      	movs	r1, #0
 8007bf6:	6878      	ldr	r0, [r7, #4]
 8007bf8:	f003 fbd6 	bl	800b3a8 <VL53L0X_WrByte>
 8007bfc:	4603      	mov	r3, r0
 8007bfe:	461a      	mov	r2, r3
 8007c00:	7bfb      	ldrb	r3, [r7, #15]
 8007c02:	4313      	orrs	r3, r2
 8007c04:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 8007c06:	2200      	movs	r2, #0
 8007c08:	21ff      	movs	r1, #255	; 0xff
 8007c0a:	6878      	ldr	r0, [r7, #4]
 8007c0c:	f003 fbcc 	bl	800b3a8 <VL53L0X_WrByte>
 8007c10:	4603      	mov	r3, r0
 8007c12:	461a      	mov	r2, r3
 8007c14:	7bfb      	ldrb	r3, [r7, #15]
 8007c16:	4313      	orrs	r3, r2
 8007c18:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 8007c1a:	2201      	movs	r2, #1
 8007c1c:	2180      	movs	r1, #128	; 0x80
 8007c1e:	6878      	ldr	r0, [r7, #4]
 8007c20:	f003 fbc2 	bl	800b3a8 <VL53L0X_WrByte>
 8007c24:	4603      	mov	r3, r0
 8007c26:	461a      	mov	r2, r3
 8007c28:	7bfb      	ldrb	r3, [r7, #15]
 8007c2a:	4313      	orrs	r3, r2
 8007c2c:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x85, 0x02);
 8007c2e:	2202      	movs	r2, #2
 8007c30:	2185      	movs	r1, #133	; 0x85
 8007c32:	6878      	ldr	r0, [r7, #4]
 8007c34:	f003 fbb8 	bl	800b3a8 <VL53L0X_WrByte>
 8007c38:	4603      	mov	r3, r0
 8007c3a:	461a      	mov	r2, r3
 8007c3c:	7bfb      	ldrb	r3, [r7, #15]
 8007c3e:	4313      	orrs	r3, r2
 8007c40:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x04);
 8007c42:	2204      	movs	r2, #4
 8007c44:	21ff      	movs	r1, #255	; 0xff
 8007c46:	6878      	ldr	r0, [r7, #4]
 8007c48:	f003 fbae 	bl	800b3a8 <VL53L0X_WrByte>
 8007c4c:	4603      	mov	r3, r0
 8007c4e:	461a      	mov	r2, r3
 8007c50:	7bfb      	ldrb	r3, [r7, #15]
 8007c52:	4313      	orrs	r3, r2
 8007c54:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xcd, 0x00);
 8007c56:	2200      	movs	r2, #0
 8007c58:	21cd      	movs	r1, #205	; 0xcd
 8007c5a:	6878      	ldr	r0, [r7, #4]
 8007c5c:	f003 fba4 	bl	800b3a8 <VL53L0X_WrByte>
 8007c60:	4603      	mov	r3, r0
 8007c62:	461a      	mov	r2, r3
 8007c64:	7bfb      	ldrb	r3, [r7, #15]
 8007c66:	4313      	orrs	r3, r2
 8007c68:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xcc, 0x11);
 8007c6a:	2211      	movs	r2, #17
 8007c6c:	21cc      	movs	r1, #204	; 0xcc
 8007c6e:	6878      	ldr	r0, [r7, #4]
 8007c70:	f003 fb9a 	bl	800b3a8 <VL53L0X_WrByte>
 8007c74:	4603      	mov	r3, r0
 8007c76:	461a      	mov	r2, r3
 8007c78:	7bfb      	ldrb	r3, [r7, #15]
 8007c7a:	4313      	orrs	r3, r2
 8007c7c:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x07);
 8007c7e:	2207      	movs	r2, #7
 8007c80:	21ff      	movs	r1, #255	; 0xff
 8007c82:	6878      	ldr	r0, [r7, #4]
 8007c84:	f003 fb90 	bl	800b3a8 <VL53L0X_WrByte>
 8007c88:	4603      	mov	r3, r0
 8007c8a:	461a      	mov	r2, r3
 8007c8c:	7bfb      	ldrb	r3, [r7, #15]
 8007c8e:	4313      	orrs	r3, r2
 8007c90:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xbe, 0x00);
 8007c92:	2200      	movs	r2, #0
 8007c94:	21be      	movs	r1, #190	; 0xbe
 8007c96:	6878      	ldr	r0, [r7, #4]
 8007c98:	f003 fb86 	bl	800b3a8 <VL53L0X_WrByte>
 8007c9c:	4603      	mov	r3, r0
 8007c9e:	461a      	mov	r2, r3
 8007ca0:	7bfb      	ldrb	r3, [r7, #15]
 8007ca2:	4313      	orrs	r3, r2
 8007ca4:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x06);
 8007ca6:	2206      	movs	r2, #6
 8007ca8:	21ff      	movs	r1, #255	; 0xff
 8007caa:	6878      	ldr	r0, [r7, #4]
 8007cac:	f003 fb7c 	bl	800b3a8 <VL53L0X_WrByte>
 8007cb0:	4603      	mov	r3, r0
 8007cb2:	461a      	mov	r2, r3
 8007cb4:	7bfb      	ldrb	r3, [r7, #15]
 8007cb6:	4313      	orrs	r3, r2
 8007cb8:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xcc, 0x09);
 8007cba:	2209      	movs	r2, #9
 8007cbc:	21cc      	movs	r1, #204	; 0xcc
 8007cbe:	6878      	ldr	r0, [r7, #4]
 8007cc0:	f003 fb72 	bl	800b3a8 <VL53L0X_WrByte>
 8007cc4:	4603      	mov	r3, r0
 8007cc6:	461a      	mov	r2, r3
 8007cc8:	7bfb      	ldrb	r3, [r7, #15]
 8007cca:	4313      	orrs	r3, r2
 8007ccc:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 8007cce:	2200      	movs	r2, #0
 8007cd0:	21ff      	movs	r1, #255	; 0xff
 8007cd2:	6878      	ldr	r0, [r7, #4]
 8007cd4:	f003 fb68 	bl	800b3a8 <VL53L0X_WrByte>
 8007cd8:	4603      	mov	r3, r0
 8007cda:	461a      	mov	r2, r3
 8007cdc:	7bfb      	ldrb	r3, [r7, #15]
 8007cde:	4313      	orrs	r3, r2
 8007ce0:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 8007ce2:	2201      	movs	r2, #1
 8007ce4:	21ff      	movs	r1, #255	; 0xff
 8007ce6:	6878      	ldr	r0, [r7, #4]
 8007ce8:	f003 fb5e 	bl	800b3a8 <VL53L0X_WrByte>
 8007cec:	4603      	mov	r3, r0
 8007cee:	461a      	mov	r2, r3
 8007cf0:	7bfb      	ldrb	r3, [r7, #15]
 8007cf2:	4313      	orrs	r3, r2
 8007cf4:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 8007cf6:	2200      	movs	r2, #0
 8007cf8:	2100      	movs	r1, #0
 8007cfa:	6878      	ldr	r0, [r7, #4]
 8007cfc:	f003 fb54 	bl	800b3a8 <VL53L0X_WrByte>
 8007d00:	4603      	mov	r3, r0
 8007d02:	461a      	mov	r2, r3
 8007d04:	7bfb      	ldrb	r3, [r7, #15]
 8007d06:	4313      	orrs	r3, r2
 8007d08:	73fb      	strb	r3, [r7, #15]
 8007d0a:	e058      	b.n	8007dbe <VL53L0X_SetGpioConfig+0x23a>

	} else {

		if (Status == VL53L0X_ERROR_NONE) {
 8007d0c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007d10:	2b00      	cmp	r3, #0
 8007d12:	d121      	bne.n	8007d58 <VL53L0X_SetGpioConfig+0x1d4>
			switch (Functionality) {
 8007d14:	787b      	ldrb	r3, [r7, #1]
 8007d16:	2b04      	cmp	r3, #4
 8007d18:	d81b      	bhi.n	8007d52 <VL53L0X_SetGpioConfig+0x1ce>
 8007d1a:	a201      	add	r2, pc, #4	; (adr r2, 8007d20 <VL53L0X_SetGpioConfig+0x19c>)
 8007d1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d20:	08007d35 	.word	0x08007d35
 8007d24:	08007d3b 	.word	0x08007d3b
 8007d28:	08007d41 	.word	0x08007d41
 8007d2c:	08007d47 	.word	0x08007d47
 8007d30:	08007d4d 	.word	0x08007d4d
			case VL53L0X_GPIOFUNCTIONALITY_OFF:
				data = 0x00;
 8007d34:	2300      	movs	r3, #0
 8007d36:	73bb      	strb	r3, [r7, #14]
				break;
 8007d38:	e00f      	b.n	8007d5a <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_LOW:
				data = 0x01;
 8007d3a:	2301      	movs	r3, #1
 8007d3c:	73bb      	strb	r3, [r7, #14]
				break;
 8007d3e:	e00c      	b.n	8007d5a <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_HIGH:
				data = 0x02;
 8007d40:	2302      	movs	r3, #2
 8007d42:	73bb      	strb	r3, [r7, #14]
				break;
 8007d44:	e009      	b.n	8007d5a <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_OUT:
				data = 0x03;
 8007d46:	2303      	movs	r3, #3
 8007d48:	73bb      	strb	r3, [r7, #14]
				break;
 8007d4a:	e006      	b.n	8007d5a <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_NEW_MEASURE_READY:
				data = 0x04;
 8007d4c:	2304      	movs	r3, #4
 8007d4e:	73bb      	strb	r3, [r7, #14]
				break;
 8007d50:	e003      	b.n	8007d5a <VL53L0X_SetGpioConfig+0x1d6>
			default:
				Status =
 8007d52:	23f5      	movs	r3, #245	; 0xf5
 8007d54:	73fb      	strb	r3, [r7, #15]
 8007d56:	e000      	b.n	8007d5a <VL53L0X_SetGpioConfig+0x1d6>
				VL53L0X_ERROR_GPIO_FUNCTIONALITY_NOT_SUPPORTED;
			}
		}
 8007d58:	bf00      	nop

		if (Status == VL53L0X_ERROR_NONE)
 8007d5a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	d107      	bne.n	8007d72 <VL53L0X_SetGpioConfig+0x1ee>
			Status = VL53L0X_WrByte(Dev,
 8007d62:	7bbb      	ldrb	r3, [r7, #14]
 8007d64:	461a      	mov	r2, r3
 8007d66:	210a      	movs	r1, #10
 8007d68:	6878      	ldr	r0, [r7, #4]
 8007d6a:	f003 fb1d 	bl	800b3a8 <VL53L0X_WrByte>
 8007d6e:	4603      	mov	r3, r0
 8007d70:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_SYSTEM_INTERRUPT_CONFIG_GPIO, data);

		if (Status == VL53L0X_ERROR_NONE) {
 8007d72:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007d76:	2b00      	cmp	r3, #0
 8007d78:	d10f      	bne.n	8007d9a <VL53L0X_SetGpioConfig+0x216>
			if (Polarity == VL53L0X_INTERRUPTPOLARITY_LOW)
 8007d7a:	7e3b      	ldrb	r3, [r7, #24]
 8007d7c:	2b00      	cmp	r3, #0
 8007d7e:	d102      	bne.n	8007d86 <VL53L0X_SetGpioConfig+0x202>
				data = 0;
 8007d80:	2300      	movs	r3, #0
 8007d82:	73bb      	strb	r3, [r7, #14]
 8007d84:	e001      	b.n	8007d8a <VL53L0X_SetGpioConfig+0x206>
			else
				data = (uint8_t)(1 << 4);
 8007d86:	2310      	movs	r3, #16
 8007d88:	73bb      	strb	r3, [r7, #14]

			Status = VL53L0X_UpdateByte(Dev,
 8007d8a:	7bbb      	ldrb	r3, [r7, #14]
 8007d8c:	22ef      	movs	r2, #239	; 0xef
 8007d8e:	2184      	movs	r1, #132	; 0x84
 8007d90:	6878      	ldr	r0, [r7, #4]
 8007d92:	f003 fb57 	bl	800b444 <VL53L0X_UpdateByte>
 8007d96:	4603      	mov	r3, r0
 8007d98:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_GPIO_HV_MUX_ACTIVE_HIGH, 0xEF, data);
		}

		if (Status == VL53L0X_ERROR_NONE)
 8007d9a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	d103      	bne.n	8007daa <VL53L0X_SetGpioConfig+0x226>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	787a      	ldrb	r2, [r7, #1]
 8007da6:	f883 20da 	strb.w	r2, [r3, #218]	; 0xda
				Pin0GpioFunctionality, Functionality);

		if (Status == VL53L0X_ERROR_NONE)
 8007daa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007dae:	2b00      	cmp	r3, #0
 8007db0:	d105      	bne.n	8007dbe <VL53L0X_SetGpioConfig+0x23a>
			Status = VL53L0X_ClearInterruptMask(Dev, 0);
 8007db2:	2100      	movs	r1, #0
 8007db4:	6878      	ldr	r0, [r7, #4]
 8007db6:	f000 f83f 	bl	8007e38 <VL53L0X_ClearInterruptMask>
 8007dba:	4603      	mov	r3, r0
 8007dbc:	73fb      	strb	r3, [r7, #15]

	}

	LOG_FUNCTION_END(Status);
	return Status;
 8007dbe:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007dc2:	4618      	mov	r0, r3
 8007dc4:	3710      	adds	r7, #16
 8007dc6:	46bd      	mov	sp, r7
 8007dc8:	bd80      	pop	{r7, pc}
 8007dca:	bf00      	nop

08007dcc <VL53L0X_GetInterruptThresholds>:
}

VL53L0X_Error VL53L0X_GetInterruptThresholds(VL53L0X_DEV Dev,
	VL53L0X_DeviceModes DeviceMode, FixPoint1616_t *pThresholdLow,
	FixPoint1616_t *pThresholdHigh)
{
 8007dcc:	b580      	push	{r7, lr}
 8007dce:	b086      	sub	sp, #24
 8007dd0:	af00      	add	r7, sp, #0
 8007dd2:	60f8      	str	r0, [r7, #12]
 8007dd4:	607a      	str	r2, [r7, #4]
 8007dd6:	603b      	str	r3, [r7, #0]
 8007dd8:	460b      	mov	r3, r1
 8007dda:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007ddc:	2300      	movs	r3, #0
 8007dde:	75fb      	strb	r3, [r7, #23]
	uint16_t Threshold16;
	LOG_FUNCTION_START("");

	/* no dependency on DeviceMode for Ewok */

	Status = VL53L0X_RdWord(Dev, VL53L0X_REG_SYSTEM_THRESH_LOW, &Threshold16);
 8007de0:	f107 0314 	add.w	r3, r7, #20
 8007de4:	461a      	mov	r2, r3
 8007de6:	210e      	movs	r1, #14
 8007de8:	68f8      	ldr	r0, [r7, #12]
 8007dea:	f003 fb89 	bl	800b500 <VL53L0X_RdWord>
 8007dee:	4603      	mov	r3, r0
 8007df0:	75fb      	strb	r3, [r7, #23]
	/* Need to multiply by 2 because the FW will apply a x2 */
	*pThresholdLow = (FixPoint1616_t)((0x00fff & Threshold16) << 17);
 8007df2:	8abb      	ldrh	r3, [r7, #20]
 8007df4:	045b      	lsls	r3, r3, #17
 8007df6:	461a      	mov	r2, r3
 8007df8:	4b0e      	ldr	r3, [pc, #56]	; (8007e34 <VL53L0X_GetInterruptThresholds+0x68>)
 8007dfa:	4013      	ands	r3, r2
 8007dfc:	687a      	ldr	r2, [r7, #4]
 8007dfe:	6013      	str	r3, [r2, #0]

	if (Status == VL53L0X_ERROR_NONE) {
 8007e00:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	d10f      	bne.n	8007e28 <VL53L0X_GetInterruptThresholds+0x5c>
		Status = VL53L0X_RdWord(Dev, VL53L0X_REG_SYSTEM_THRESH_HIGH,
 8007e08:	f107 0314 	add.w	r3, r7, #20
 8007e0c:	461a      	mov	r2, r3
 8007e0e:	210c      	movs	r1, #12
 8007e10:	68f8      	ldr	r0, [r7, #12]
 8007e12:	f003 fb75 	bl	800b500 <VL53L0X_RdWord>
 8007e16:	4603      	mov	r3, r0
 8007e18:	75fb      	strb	r3, [r7, #23]
			&Threshold16);
		/* Need to multiply by 2 because the FW will apply a x2 */
		*pThresholdHigh =
			(FixPoint1616_t)((0x00fff & Threshold16) << 17);
 8007e1a:	8abb      	ldrh	r3, [r7, #20]
 8007e1c:	045b      	lsls	r3, r3, #17
 8007e1e:	461a      	mov	r2, r3
 8007e20:	4b04      	ldr	r3, [pc, #16]	; (8007e34 <VL53L0X_GetInterruptThresholds+0x68>)
 8007e22:	4013      	ands	r3, r2
		*pThresholdHigh =
 8007e24:	683a      	ldr	r2, [r7, #0]
 8007e26:	6013      	str	r3, [r2, #0]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8007e28:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007e2c:	4618      	mov	r0, r3
 8007e2e:	3718      	adds	r7, #24
 8007e30:	46bd      	mov	sp, r7
 8007e32:	bd80      	pop	{r7, pc}
 8007e34:	1ffe0000 	.word	0x1ffe0000

08007e38 <VL53L0X_ClearInterruptMask>:
	return Status;
}

/* Group PAL Interrupt Functions */
VL53L0X_Error VL53L0X_ClearInterruptMask(VL53L0X_DEV Dev, uint32_t InterruptMask)
{
 8007e38:	b580      	push	{r7, lr}
 8007e3a:	b084      	sub	sp, #16
 8007e3c:	af00      	add	r7, sp, #0
 8007e3e:	6078      	str	r0, [r7, #4]
 8007e40:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007e42:	2300      	movs	r3, #0
 8007e44:	73fb      	strb	r3, [r7, #15]
	uint8_t LoopCount;
	uint8_t Byte;
	LOG_FUNCTION_START("");

	/* clear bit 0 range interrupt, bit 1 error interrupt */
	LoopCount = 0;
 8007e46:	2300      	movs	r3, #0
 8007e48:	73bb      	strb	r3, [r7, #14]
	do {
		Status = VL53L0X_WrByte(Dev,
 8007e4a:	2201      	movs	r2, #1
 8007e4c:	210b      	movs	r1, #11
 8007e4e:	6878      	ldr	r0, [r7, #4]
 8007e50:	f003 faaa 	bl	800b3a8 <VL53L0X_WrByte>
 8007e54:	4603      	mov	r3, r0
 8007e56:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_SYSTEM_INTERRUPT_CLEAR, 0x01);
		Status |= VL53L0X_WrByte(Dev,
 8007e58:	2200      	movs	r2, #0
 8007e5a:	210b      	movs	r1, #11
 8007e5c:	6878      	ldr	r0, [r7, #4]
 8007e5e:	f003 faa3 	bl	800b3a8 <VL53L0X_WrByte>
 8007e62:	4603      	mov	r3, r0
 8007e64:	461a      	mov	r2, r3
 8007e66:	7bfb      	ldrb	r3, [r7, #15]
 8007e68:	4313      	orrs	r3, r2
 8007e6a:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_SYSTEM_INTERRUPT_CLEAR, 0x00);
		Status |= VL53L0X_RdByte(Dev,
 8007e6c:	f107 030d 	add.w	r3, r7, #13
 8007e70:	461a      	mov	r2, r3
 8007e72:	2113      	movs	r1, #19
 8007e74:	6878      	ldr	r0, [r7, #4]
 8007e76:	f003 fb19 	bl	800b4ac <VL53L0X_RdByte>
 8007e7a:	4603      	mov	r3, r0
 8007e7c:	461a      	mov	r2, r3
 8007e7e:	7bfb      	ldrb	r3, [r7, #15]
 8007e80:	4313      	orrs	r3, r2
 8007e82:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_RESULT_INTERRUPT_STATUS, &Byte);
		LoopCount++;
 8007e84:	7bbb      	ldrb	r3, [r7, #14]
 8007e86:	3301      	adds	r3, #1
 8007e88:	73bb      	strb	r3, [r7, #14]
	} while (((Byte & 0x07) != 0x00)
 8007e8a:	7b7b      	ldrb	r3, [r7, #13]
 8007e8c:	f003 0307 	and.w	r3, r3, #7
			&& (LoopCount < 3)
			&& (Status == VL53L0X_ERROR_NONE));
 8007e90:	2b00      	cmp	r3, #0
 8007e92:	d006      	beq.n	8007ea2 <VL53L0X_ClearInterruptMask+0x6a>
			&& (LoopCount < 3)
 8007e94:	7bbb      	ldrb	r3, [r7, #14]
 8007e96:	2b02      	cmp	r3, #2
 8007e98:	d803      	bhi.n	8007ea2 <VL53L0X_ClearInterruptMask+0x6a>
			&& (Status == VL53L0X_ERROR_NONE));
 8007e9a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	d0d3      	beq.n	8007e4a <VL53L0X_ClearInterruptMask+0x12>


	if (LoopCount >= 3)
 8007ea2:	7bbb      	ldrb	r3, [r7, #14]
 8007ea4:	2b02      	cmp	r3, #2
 8007ea6:	d901      	bls.n	8007eac <VL53L0X_ClearInterruptMask+0x74>
		Status = VL53L0X_ERROR_INTERRUPT_NOT_CLEARED;
 8007ea8:	23f4      	movs	r3, #244	; 0xf4
 8007eaa:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(Status);
	return Status;
 8007eac:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007eb0:	4618      	mov	r0, r3
 8007eb2:	3710      	adds	r7, #16
 8007eb4:	46bd      	mov	sp, r7
 8007eb6:	bd80      	pop	{r7, pc}

08007eb8 <VL53L0X_GetInterruptMaskStatus>:

VL53L0X_Error VL53L0X_GetInterruptMaskStatus(VL53L0X_DEV Dev,
	uint32_t *pInterruptMaskStatus)
{
 8007eb8:	b580      	push	{r7, lr}
 8007eba:	b084      	sub	sp, #16
 8007ebc:	af00      	add	r7, sp, #0
 8007ebe:	6078      	str	r0, [r7, #4]
 8007ec0:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007ec2:	2300      	movs	r3, #0
 8007ec4:	73fb      	strb	r3, [r7, #15]
	uint8_t Byte;
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_RESULT_INTERRUPT_STATUS, &Byte);
 8007ec6:	f107 030e 	add.w	r3, r7, #14
 8007eca:	461a      	mov	r2, r3
 8007ecc:	2113      	movs	r1, #19
 8007ece:	6878      	ldr	r0, [r7, #4]
 8007ed0:	f003 faec 	bl	800b4ac <VL53L0X_RdByte>
 8007ed4:	4603      	mov	r3, r0
 8007ed6:	73fb      	strb	r3, [r7, #15]
	*pInterruptMaskStatus = Byte & 0x07;
 8007ed8:	7bbb      	ldrb	r3, [r7, #14]
 8007eda:	f003 0207 	and.w	r2, r3, #7
 8007ede:	683b      	ldr	r3, [r7, #0]
 8007ee0:	601a      	str	r2, [r3, #0]

	if (Byte & 0x18)
 8007ee2:	7bbb      	ldrb	r3, [r7, #14]
 8007ee4:	f003 0318 	and.w	r3, r3, #24
 8007ee8:	2b00      	cmp	r3, #0
 8007eea:	d001      	beq.n	8007ef0 <VL53L0X_GetInterruptMaskStatus+0x38>
		Status = VL53L0X_ERROR_RANGE_ERROR;
 8007eec:	23fa      	movs	r3, #250	; 0xfa
 8007eee:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(Status);
	return Status;
 8007ef0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007ef4:	4618      	mov	r0, r3
 8007ef6:	3710      	adds	r7, #16
 8007ef8:	46bd      	mov	sp, r7
 8007efa:	bd80      	pop	{r7, pc}

08007efc <VL53L0X_PerformRefSpadManagement>:
	return Status;
}

VL53L0X_Error VL53L0X_PerformRefSpadManagement(VL53L0X_DEV Dev,
	uint32_t *refSpadCount, uint8_t *isApertureSpads)
{
 8007efc:	b580      	push	{r7, lr}
 8007efe:	b086      	sub	sp, #24
 8007f00:	af00      	add	r7, sp, #0
 8007f02:	60f8      	str	r0, [r7, #12]
 8007f04:	60b9      	str	r1, [r7, #8]
 8007f06:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007f08:	2300      	movs	r3, #0
 8007f0a:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");

	Status = VL53L0X_perform_ref_spad_management(Dev, refSpadCount,
 8007f0c:	687a      	ldr	r2, [r7, #4]
 8007f0e:	68b9      	ldr	r1, [r7, #8]
 8007f10:	68f8      	ldr	r0, [r7, #12]
 8007f12:	f000 fa33 	bl	800837c <VL53L0X_perform_ref_spad_management>
 8007f16:	4603      	mov	r3, r0
 8007f18:	75fb      	strb	r3, [r7, #23]
		isApertureSpads);

	LOG_FUNCTION_END(Status);

	return Status;
 8007f1a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007f1e:	4618      	mov	r0, r3
 8007f20:	3718      	adds	r7, #24
 8007f22:	46bd      	mov	sp, r7
 8007f24:	bd80      	pop	{r7, pc}

08007f26 <VL53L0X_PerformContinuousRangingMeasurement>:


VL53L0X_Error VL53L0X_PerformContinuousRangingMeasurement(VL53L0X_Dev_t *device, VL53L0X_RangingMeasurementData_t *ranging_data) {
 8007f26:	b580      	push	{r7, lr}
 8007f28:	b084      	sub	sp, #16
 8007f2a:	af00      	add	r7, sp, #0
 8007f2c:	6078      	str	r0, [r7, #4]
 8007f2e:	6039      	str	r1, [r7, #0]
    VL53L0X_Error status;

    // Set the device to high accuracy mode
    status = VL53L0X_SetDeviceMode(device, VL53L0X_DEVICEMODE_CONTINUOUS_RANGING);
 8007f30:	2101      	movs	r1, #1
 8007f32:	6878      	ldr	r0, [r7, #4]
 8007f34:	f7fe fed2 	bl	8006cdc <VL53L0X_SetDeviceMode>
 8007f38:	4603      	mov	r3, r0
 8007f3a:	73fb      	strb	r3, [r7, #15]
    if (status != VL53L0X_ERROR_NONE) {
 8007f3c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007f40:	2b00      	cmp	r3, #0
 8007f42:	d002      	beq.n	8007f4a <VL53L0X_PerformContinuousRangingMeasurement+0x24>
        return status;
 8007f44:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007f48:	e019      	b.n	8007f7e <VL53L0X_PerformContinuousRangingMeasurement+0x58>
    }

    // Start continuous ranging measurement
    status = VL53L0X_StartMeasurement(device);
 8007f4a:	6878      	ldr	r0, [r7, #4]
 8007f4c:	f7ff fbc4 	bl	80076d8 <VL53L0X_StartMeasurement>
 8007f50:	4603      	mov	r3, r0
 8007f52:	73fb      	strb	r3, [r7, #15]
    if (status != VL53L0X_ERROR_NONE) {
 8007f54:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007f58:	2b00      	cmp	r3, #0
 8007f5a:	d002      	beq.n	8007f62 <VL53L0X_PerformContinuousRangingMeasurement+0x3c>
        return status;
 8007f5c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007f60:	e00d      	b.n	8007f7e <VL53L0X_PerformContinuousRangingMeasurement+0x58>
    }

    // Get ranging measurement data
    status = VL53L0X_GetRangingMeasurementData(device, ranging_data);
 8007f62:	6839      	ldr	r1, [r7, #0]
 8007f64:	6878      	ldr	r0, [r7, #4]
 8007f66:	f7ff fcb9 	bl	80078dc <VL53L0X_GetRangingMeasurementData>
 8007f6a:	4603      	mov	r3, r0
 8007f6c:	73fb      	strb	r3, [r7, #15]
    if (status != VL53L0X_ERROR_NONE) {
 8007f6e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	d002      	beq.n	8007f7c <VL53L0X_PerformContinuousRangingMeasurement+0x56>
        return status;
 8007f76:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007f7a:	e000      	b.n	8007f7e <VL53L0X_PerformContinuousRangingMeasurement+0x58>
    }

    return VL53L0X_ERROR_NONE;
 8007f7c:	2300      	movs	r3, #0
}
 8007f7e:	4618      	mov	r0, r3
 8007f80:	3710      	adds	r7, #16
 8007f82:	46bd      	mov	sp, r7
 8007f84:	bd80      	pop	{r7, pc}

08007f86 <VL53L0X_get_offset_calibration_data_micro_meter>:
	return Status;
}

VL53L0X_Error VL53L0X_get_offset_calibration_data_micro_meter(VL53L0X_DEV Dev,
		int32_t *pOffsetCalibrationDataMicroMeter)
{
 8007f86:	b580      	push	{r7, lr}
 8007f88:	b084      	sub	sp, #16
 8007f8a:	af00      	add	r7, sp, #0
 8007f8c:	6078      	str	r0, [r7, #4]
 8007f8e:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007f90:	2300      	movs	r3, #0
 8007f92:	73fb      	strb	r3, [r7, #15]
	uint16_t RangeOffsetRegister;
	int16_t cMaxOffset = 2047;
 8007f94:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8007f98:	81bb      	strh	r3, [r7, #12]
	int16_t cOffsetRange = 4096;
 8007f9a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007f9e:	817b      	strh	r3, [r7, #10]

	/* Note that offset has 10.2 format */

	Status = VL53L0X_RdWord(Dev,
 8007fa0:	f107 0308 	add.w	r3, r7, #8
 8007fa4:	461a      	mov	r2, r3
 8007fa6:	2128      	movs	r1, #40	; 0x28
 8007fa8:	6878      	ldr	r0, [r7, #4]
 8007faa:	f003 faa9 	bl	800b500 <VL53L0X_RdWord>
 8007fae:	4603      	mov	r3, r0
 8007fb0:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_ALGO_PART_TO_PART_RANGE_OFFSET_MM,
				&RangeOffsetRegister);

	if (Status == VL53L0X_ERROR_NONE) {
 8007fb2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	d11e      	bne.n	8007ff8 <VL53L0X_get_offset_calibration_data_micro_meter+0x72>
		RangeOffsetRegister = (RangeOffsetRegister & 0x0fff);
 8007fba:	893b      	ldrh	r3, [r7, #8]
 8007fbc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007fc0:	b29b      	uxth	r3, r3
 8007fc2:	813b      	strh	r3, [r7, #8]

		/* Apply 12 bit 2's compliment conversion */
		if (RangeOffsetRegister > cMaxOffset)
 8007fc4:	893b      	ldrh	r3, [r7, #8]
 8007fc6:	461a      	mov	r2, r3
 8007fc8:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8007fcc:	429a      	cmp	r2, r3
 8007fce:	dd0b      	ble.n	8007fe8 <VL53L0X_get_offset_calibration_data_micro_meter+0x62>
			*pOffsetCalibrationDataMicroMeter =
				(int16_t)(RangeOffsetRegister - cOffsetRange)
 8007fd0:	893a      	ldrh	r2, [r7, #8]
 8007fd2:	897b      	ldrh	r3, [r7, #10]
 8007fd4:	1ad3      	subs	r3, r2, r3
 8007fd6:	b29b      	uxth	r3, r3
 8007fd8:	b21b      	sxth	r3, r3
 8007fda:	461a      	mov	r2, r3
					* 250;
 8007fdc:	23fa      	movs	r3, #250	; 0xfa
 8007fde:	fb03 f202 	mul.w	r2, r3, r2
			*pOffsetCalibrationDataMicroMeter =
 8007fe2:	683b      	ldr	r3, [r7, #0]
 8007fe4:	601a      	str	r2, [r3, #0]
 8007fe6:	e007      	b.n	8007ff8 <VL53L0X_get_offset_calibration_data_micro_meter+0x72>
		else
			*pOffsetCalibrationDataMicroMeter =
				(int16_t)RangeOffsetRegister * 250;
 8007fe8:	893b      	ldrh	r3, [r7, #8]
 8007fea:	b21b      	sxth	r3, r3
 8007fec:	461a      	mov	r2, r3
 8007fee:	23fa      	movs	r3, #250	; 0xfa
 8007ff0:	fb03 f202 	mul.w	r2, r3, r2
			*pOffsetCalibrationDataMicroMeter =
 8007ff4:	683b      	ldr	r3, [r7, #0]
 8007ff6:	601a      	str	r2, [r3, #0]

	}

	return Status;
 8007ff8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007ffc:	4618      	mov	r0, r3
 8007ffe:	3710      	adds	r7, #16
 8008000:	46bd      	mov	sp, r7
 8008002:	bd80      	pop	{r7, pc}

08008004 <get_next_good_spad>:
	return Status;
}

void get_next_good_spad(uint8_t goodSpadArray[], uint32_t size,
			uint32_t curr, int32_t *next)
{
 8008004:	b480      	push	{r7}
 8008006:	b08b      	sub	sp, #44	; 0x2c
 8008008:	af00      	add	r7, sp, #0
 800800a:	60f8      	str	r0, [r7, #12]
 800800c:	60b9      	str	r1, [r7, #8]
 800800e:	607a      	str	r2, [r7, #4]
 8008010:	603b      	str	r3, [r7, #0]
	uint32_t startIndex;
	uint32_t fineOffset;
	uint32_t cSpadsPerByte = 8;
 8008012:	2308      	movs	r3, #8
 8008014:	61bb      	str	r3, [r7, #24]
	uint32_t coarseIndex;
	uint32_t fineIndex;
	uint8_t dataByte;
	uint8_t success = 0;
 8008016:	2300      	movs	r3, #0
 8008018:	77bb      	strb	r3, [r7, #30]
	 *
	 * The coarse index is the byte index of the array and the fine index is
	 * the index of the bit within each byte.
	 */

	*next = -1;
 800801a:	683b      	ldr	r3, [r7, #0]
 800801c:	f04f 32ff 	mov.w	r2, #4294967295
 8008020:	601a      	str	r2, [r3, #0]

	startIndex = curr / cSpadsPerByte;
 8008022:	687a      	ldr	r2, [r7, #4]
 8008024:	69bb      	ldr	r3, [r7, #24]
 8008026:	fbb2 f3f3 	udiv	r3, r2, r3
 800802a:	617b      	str	r3, [r7, #20]
	fineOffset = curr % cSpadsPerByte;
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	69ba      	ldr	r2, [r7, #24]
 8008030:	fbb3 f2f2 	udiv	r2, r3, r2
 8008034:	69b9      	ldr	r1, [r7, #24]
 8008036:	fb01 f202 	mul.w	r2, r1, r2
 800803a:	1a9b      	subs	r3, r3, r2
 800803c:	613b      	str	r3, [r7, #16]

	for (coarseIndex = startIndex; ((coarseIndex < size) && !success);
 800803e:	697b      	ldr	r3, [r7, #20]
 8008040:	627b      	str	r3, [r7, #36]	; 0x24
 8008042:	e030      	b.n	80080a6 <get_next_good_spad+0xa2>
				coarseIndex++) {
		fineIndex = 0;
 8008044:	2300      	movs	r3, #0
 8008046:	623b      	str	r3, [r7, #32]
		dataByte = goodSpadArray[coarseIndex];
 8008048:	68fa      	ldr	r2, [r7, #12]
 800804a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800804c:	4413      	add	r3, r2
 800804e:	781b      	ldrb	r3, [r3, #0]
 8008050:	77fb      	strb	r3, [r7, #31]

		if (coarseIndex == startIndex) {
 8008052:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008054:	697b      	ldr	r3, [r7, #20]
 8008056:	429a      	cmp	r2, r3
 8008058:	d11e      	bne.n	8008098 <get_next_good_spad+0x94>
			/* locate the bit position of the provided current
			 * spad bit before iterating */
			dataByte >>= fineOffset;
 800805a:	7ffa      	ldrb	r2, [r7, #31]
 800805c:	693b      	ldr	r3, [r7, #16]
 800805e:	fa42 f303 	asr.w	r3, r2, r3
 8008062:	77fb      	strb	r3, [r7, #31]
			fineIndex = fineOffset;
 8008064:	693b      	ldr	r3, [r7, #16]
 8008066:	623b      	str	r3, [r7, #32]
		}

		while (fineIndex < cSpadsPerByte) {
 8008068:	e016      	b.n	8008098 <get_next_good_spad+0x94>
			if ((dataByte & 0x1) == 1) {
 800806a:	7ffb      	ldrb	r3, [r7, #31]
 800806c:	f003 0301 	and.w	r3, r3, #1
 8008070:	2b00      	cmp	r3, #0
 8008072:	d00b      	beq.n	800808c <get_next_good_spad+0x88>
				success = 1;
 8008074:	2301      	movs	r3, #1
 8008076:	77bb      	strb	r3, [r7, #30]
				*next = coarseIndex * cSpadsPerByte + fineIndex;
 8008078:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800807a:	69ba      	ldr	r2, [r7, #24]
 800807c:	fb03 f202 	mul.w	r2, r3, r2
 8008080:	6a3b      	ldr	r3, [r7, #32]
 8008082:	4413      	add	r3, r2
 8008084:	461a      	mov	r2, r3
 8008086:	683b      	ldr	r3, [r7, #0]
 8008088:	601a      	str	r2, [r3, #0]
				break;
 800808a:	e009      	b.n	80080a0 <get_next_good_spad+0x9c>
			}
			dataByte >>= 1;
 800808c:	7ffb      	ldrb	r3, [r7, #31]
 800808e:	085b      	lsrs	r3, r3, #1
 8008090:	77fb      	strb	r3, [r7, #31]
			fineIndex++;
 8008092:	6a3b      	ldr	r3, [r7, #32]
 8008094:	3301      	adds	r3, #1
 8008096:	623b      	str	r3, [r7, #32]
		while (fineIndex < cSpadsPerByte) {
 8008098:	6a3a      	ldr	r2, [r7, #32]
 800809a:	69bb      	ldr	r3, [r7, #24]
 800809c:	429a      	cmp	r2, r3
 800809e:	d3e4      	bcc.n	800806a <get_next_good_spad+0x66>
				coarseIndex++) {
 80080a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080a2:	3301      	adds	r3, #1
 80080a4:	627b      	str	r3, [r7, #36]	; 0x24
	for (coarseIndex = startIndex; ((coarseIndex < size) && !success);
 80080a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80080a8:	68bb      	ldr	r3, [r7, #8]
 80080aa:	429a      	cmp	r2, r3
 80080ac:	d202      	bcs.n	80080b4 <get_next_good_spad+0xb0>
 80080ae:	7fbb      	ldrb	r3, [r7, #30]
 80080b0:	2b00      	cmp	r3, #0
 80080b2:	d0c7      	beq.n	8008044 <get_next_good_spad+0x40>
		}
	}
}
 80080b4:	bf00      	nop
 80080b6:	372c      	adds	r7, #44	; 0x2c
 80080b8:	46bd      	mov	sp, r7
 80080ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080be:	4770      	bx	lr

080080c0 <is_aperture>:


uint8_t is_aperture(uint32_t spadIndex)
{
 80080c0:	b480      	push	{r7}
 80080c2:	b085      	sub	sp, #20
 80080c4:	af00      	add	r7, sp, #0
 80080c6:	6078      	str	r0, [r7, #4]
	/*
	 * This function reports if a given spad index is an aperture SPAD by
	 * deriving the quadrant.
	 */
	uint32_t quadrant;
	uint8_t isAperture = 1;
 80080c8:	2301      	movs	r3, #1
 80080ca:	73fb      	strb	r3, [r7, #15]
	quadrant = spadIndex >> 6;
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	099b      	lsrs	r3, r3, #6
 80080d0:	60bb      	str	r3, [r7, #8]
	if (refArrayQuadrants[quadrant] == REF_ARRAY_SPAD_0)
 80080d2:	4a07      	ldr	r2, [pc, #28]	; (80080f0 <is_aperture+0x30>)
 80080d4:	68bb      	ldr	r3, [r7, #8]
 80080d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80080da:	2b00      	cmp	r3, #0
 80080dc:	d101      	bne.n	80080e2 <is_aperture+0x22>
		isAperture = 0;
 80080de:	2300      	movs	r3, #0
 80080e0:	73fb      	strb	r3, [r7, #15]

	return isAperture;
 80080e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80080e4:	4618      	mov	r0, r3
 80080e6:	3714      	adds	r7, #20
 80080e8:	46bd      	mov	sp, r7
 80080ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ee:	4770      	bx	lr
 80080f0:	200002b8 	.word	0x200002b8

080080f4 <enable_spad_bit>:


VL53L0X_Error enable_spad_bit(uint8_t spadArray[], uint32_t size,
	uint32_t spadIndex)
{
 80080f4:	b480      	push	{r7}
 80080f6:	b089      	sub	sp, #36	; 0x24
 80080f8:	af00      	add	r7, sp, #0
 80080fa:	60f8      	str	r0, [r7, #12]
 80080fc:	60b9      	str	r1, [r7, #8]
 80080fe:	607a      	str	r2, [r7, #4]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 8008100:	2300      	movs	r3, #0
 8008102:	77fb      	strb	r3, [r7, #31]
	uint32_t cSpadsPerByte = 8;
 8008104:	2308      	movs	r3, #8
 8008106:	61bb      	str	r3, [r7, #24]
	uint32_t coarseIndex;
	uint32_t fineIndex;

	coarseIndex = spadIndex / cSpadsPerByte;
 8008108:	687a      	ldr	r2, [r7, #4]
 800810a:	69bb      	ldr	r3, [r7, #24]
 800810c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008110:	617b      	str	r3, [r7, #20]
	fineIndex = spadIndex % cSpadsPerByte;
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	69ba      	ldr	r2, [r7, #24]
 8008116:	fbb3 f2f2 	udiv	r2, r3, r2
 800811a:	69b9      	ldr	r1, [r7, #24]
 800811c:	fb01 f202 	mul.w	r2, r1, r2
 8008120:	1a9b      	subs	r3, r3, r2
 8008122:	613b      	str	r3, [r7, #16]
	if (coarseIndex >= size)
 8008124:	697a      	ldr	r2, [r7, #20]
 8008126:	68bb      	ldr	r3, [r7, #8]
 8008128:	429a      	cmp	r2, r3
 800812a:	d302      	bcc.n	8008132 <enable_spad_bit+0x3e>
		status = VL53L0X_ERROR_REF_SPAD_INIT;
 800812c:	23ce      	movs	r3, #206	; 0xce
 800812e:	77fb      	strb	r3, [r7, #31]
 8008130:	e010      	b.n	8008154 <enable_spad_bit+0x60>
	else
		spadArray[coarseIndex] |= (1 << fineIndex);
 8008132:	68fa      	ldr	r2, [r7, #12]
 8008134:	697b      	ldr	r3, [r7, #20]
 8008136:	4413      	add	r3, r2
 8008138:	781b      	ldrb	r3, [r3, #0]
 800813a:	b25a      	sxtb	r2, r3
 800813c:	2101      	movs	r1, #1
 800813e:	693b      	ldr	r3, [r7, #16]
 8008140:	fa01 f303 	lsl.w	r3, r1, r3
 8008144:	b25b      	sxtb	r3, r3
 8008146:	4313      	orrs	r3, r2
 8008148:	b259      	sxtb	r1, r3
 800814a:	68fa      	ldr	r2, [r7, #12]
 800814c:	697b      	ldr	r3, [r7, #20]
 800814e:	4413      	add	r3, r2
 8008150:	b2ca      	uxtb	r2, r1
 8008152:	701a      	strb	r2, [r3, #0]

	return status;
 8008154:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8008158:	4618      	mov	r0, r3
 800815a:	3724      	adds	r7, #36	; 0x24
 800815c:	46bd      	mov	sp, r7
 800815e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008162:	4770      	bx	lr

08008164 <set_ref_spad_map>:

	return status;
}

VL53L0X_Error set_ref_spad_map(VL53L0X_DEV Dev, uint8_t *refSpadArray)
{
 8008164:	b580      	push	{r7, lr}
 8008166:	b084      	sub	sp, #16
 8008168:	af00      	add	r7, sp, #0
 800816a:	6078      	str	r0, [r7, #4]
 800816c:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_WriteMulti(Dev,
 800816e:	2306      	movs	r3, #6
 8008170:	683a      	ldr	r2, [r7, #0]
 8008172:	21b0      	movs	r1, #176	; 0xb0
 8008174:	6878      	ldr	r0, [r7, #4]
 8008176:	f003 f8bb 	bl	800b2f0 <VL53L0X_WriteMulti>
 800817a:	4603      	mov	r3, r0
 800817c:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_GLOBAL_CONFIG_SPAD_ENABLES_REF_0,
				refSpadArray, 6);
	return status;
 800817e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008182:	4618      	mov	r0, r3
 8008184:	3710      	adds	r7, #16
 8008186:	46bd      	mov	sp, r7
 8008188:	bd80      	pop	{r7, pc}

0800818a <get_ref_spad_map>:

VL53L0X_Error get_ref_spad_map(VL53L0X_DEV Dev, uint8_t *refSpadArray)
{
 800818a:	b580      	push	{r7, lr}
 800818c:	b084      	sub	sp, #16
 800818e:	af00      	add	r7, sp, #0
 8008190:	6078      	str	r0, [r7, #4]
 8008192:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_ReadMulti(Dev,
 8008194:	2306      	movs	r3, #6
 8008196:	683a      	ldr	r2, [r7, #0]
 8008198:	21b0      	movs	r1, #176	; 0xb0
 800819a:	6878      	ldr	r0, [r7, #4]
 800819c:	f003 f8d8 	bl	800b350 <VL53L0X_ReadMulti>
 80081a0:	4603      	mov	r3, r0
 80081a2:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_GLOBAL_CONFIG_SPAD_ENABLES_REF_0,
				refSpadArray,
				6);
	return status;
 80081a4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80081a8:	4618      	mov	r0, r3
 80081aa:	3710      	adds	r7, #16
 80081ac:	46bd      	mov	sp, r7
 80081ae:	bd80      	pop	{r7, pc}

080081b0 <enable_ref_spads>:
				uint32_t size,
				uint32_t start,
				uint32_t offset,
				uint32_t spadCount,
				uint32_t *lastSpad)
{
 80081b0:	b580      	push	{r7, lr}
 80081b2:	b08c      	sub	sp, #48	; 0x30
 80081b4:	af00      	add	r7, sp, #0
 80081b6:	60f8      	str	r0, [r7, #12]
 80081b8:	607a      	str	r2, [r7, #4]
 80081ba:	603b      	str	r3, [r7, #0]
 80081bc:	460b      	mov	r3, r1
 80081be:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 80081c0:	2300      	movs	r3, #0
 80081c2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint32_t index;
	uint32_t i;
	int32_t nextGoodSpad = offset;
 80081c6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80081c8:	61fb      	str	r3, [r7, #28]
	 *
	 * This function applies to only aperture or only non-aperture spads.
	 * Checks are performed to ensure this.
	 */

	currentSpad = offset;
 80081ca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80081cc:	623b      	str	r3, [r7, #32]
	for (index = 0; index < spadCount; index++) {
 80081ce:	2300      	movs	r3, #0
 80081d0:	62bb      	str	r3, [r7, #40]	; 0x28
 80081d2:	e02b      	b.n	800822c <enable_ref_spads+0x7c>
		get_next_good_spad(goodSpadArray, size, currentSpad,
 80081d4:	f107 031c 	add.w	r3, r7, #28
 80081d8:	6a3a      	ldr	r2, [r7, #32]
 80081da:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80081dc:	6878      	ldr	r0, [r7, #4]
 80081de:	f7ff ff11 	bl	8008004 <get_next_good_spad>
			&nextGoodSpad);

		if (nextGoodSpad == -1) {
 80081e2:	69fb      	ldr	r3, [r7, #28]
 80081e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80081e8:	d103      	bne.n	80081f2 <enable_ref_spads+0x42>
			status = VL53L0X_ERROR_REF_SPAD_INIT;
 80081ea:	23ce      	movs	r3, #206	; 0xce
 80081ec:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			break;
 80081f0:	e020      	b.n	8008234 <enable_ref_spads+0x84>
		}

		/* Confirm that the next good SPAD is non-aperture */
		if (is_aperture(start + nextGoodSpad) != apertureSpads) {
 80081f2:	69fb      	ldr	r3, [r7, #28]
 80081f4:	461a      	mov	r2, r3
 80081f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80081f8:	4413      	add	r3, r2
 80081fa:	4618      	mov	r0, r3
 80081fc:	f7ff ff60 	bl	80080c0 <is_aperture>
 8008200:	4603      	mov	r3, r0
 8008202:	461a      	mov	r2, r3
 8008204:	7afb      	ldrb	r3, [r7, #11]
 8008206:	4293      	cmp	r3, r2
 8008208:	d003      	beq.n	8008212 <enable_ref_spads+0x62>
			/* if we can't get the required number of good aperture
			 * spads from the current quadrant then this is an error
			 */
			status = VL53L0X_ERROR_REF_SPAD_INIT;
 800820a:	23ce      	movs	r3, #206	; 0xce
 800820c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			break;
 8008210:	e010      	b.n	8008234 <enable_ref_spads+0x84>
		}
		currentSpad = (uint32_t)nextGoodSpad;
 8008212:	69fb      	ldr	r3, [r7, #28]
 8008214:	623b      	str	r3, [r7, #32]
		enable_spad_bit(spadArray, size, currentSpad);
 8008216:	6a3a      	ldr	r2, [r7, #32]
 8008218:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800821a:	6838      	ldr	r0, [r7, #0]
 800821c:	f7ff ff6a 	bl	80080f4 <enable_spad_bit>
		currentSpad++;
 8008220:	6a3b      	ldr	r3, [r7, #32]
 8008222:	3301      	adds	r3, #1
 8008224:	623b      	str	r3, [r7, #32]
	for (index = 0; index < spadCount; index++) {
 8008226:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008228:	3301      	adds	r3, #1
 800822a:	62bb      	str	r3, [r7, #40]	; 0x28
 800822c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800822e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008230:	429a      	cmp	r2, r3
 8008232:	d3cf      	bcc.n	80081d4 <enable_ref_spads+0x24>
	}
	*lastSpad = currentSpad;
 8008234:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008236:	6a3a      	ldr	r2, [r7, #32]
 8008238:	601a      	str	r2, [r3, #0]

	if (status == VL53L0X_ERROR_NONE)
 800823a:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800823e:	2b00      	cmp	r3, #0
 8008240:	d106      	bne.n	8008250 <enable_ref_spads+0xa0>
		status = set_ref_spad_map(Dev, spadArray);
 8008242:	6839      	ldr	r1, [r7, #0]
 8008244:	68f8      	ldr	r0, [r7, #12]
 8008246:	f7ff ff8d 	bl	8008164 <set_ref_spad_map>
 800824a:	4603      	mov	r3, r0
 800824c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f


	if (status == VL53L0X_ERROR_NONE) {
 8008250:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8008254:	2b00      	cmp	r3, #0
 8008256:	d121      	bne.n	800829c <enable_ref_spads+0xec>
		status = get_ref_spad_map(Dev, checkSpadArray);
 8008258:	f107 0314 	add.w	r3, r7, #20
 800825c:	4619      	mov	r1, r3
 800825e:	68f8      	ldr	r0, [r7, #12]
 8008260:	f7ff ff93 	bl	800818a <get_ref_spad_map>
 8008264:	4603      	mov	r3, r0
 8008266:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

		i = 0;
 800826a:	2300      	movs	r3, #0
 800826c:	627b      	str	r3, [r7, #36]	; 0x24

		/* Compare spad maps. If not equal report error. */
		while (i < size) {
 800826e:	e011      	b.n	8008294 <enable_ref_spads+0xe4>
			if (spadArray[i] != checkSpadArray[i]) {
 8008270:	683a      	ldr	r2, [r7, #0]
 8008272:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008274:	4413      	add	r3, r2
 8008276:	781a      	ldrb	r2, [r3, #0]
 8008278:	f107 0114 	add.w	r1, r7, #20
 800827c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800827e:	440b      	add	r3, r1
 8008280:	781b      	ldrb	r3, [r3, #0]
 8008282:	429a      	cmp	r2, r3
 8008284:	d003      	beq.n	800828e <enable_ref_spads+0xde>
				status = VL53L0X_ERROR_REF_SPAD_INIT;
 8008286:	23ce      	movs	r3, #206	; 0xce
 8008288:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				break;
 800828c:	e006      	b.n	800829c <enable_ref_spads+0xec>
			}
			i++;
 800828e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008290:	3301      	adds	r3, #1
 8008292:	627b      	str	r3, [r7, #36]	; 0x24
		while (i < size) {
 8008294:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008296:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008298:	429a      	cmp	r2, r3
 800829a:	d3e9      	bcc.n	8008270 <enable_ref_spads+0xc0>
		}
	}
	return status;
 800829c:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 80082a0:	4618      	mov	r0, r3
 80082a2:	3730      	adds	r7, #48	; 0x30
 80082a4:	46bd      	mov	sp, r7
 80082a6:	bd80      	pop	{r7, pc}

080082a8 <perform_ref_signal_measurement>:


VL53L0X_Error perform_ref_signal_measurement(VL53L0X_DEV Dev,
		uint16_t *refSignalRate)
{
 80082a8:	b580      	push	{r7, lr}
 80082aa:	b08a      	sub	sp, #40	; 0x28
 80082ac:	af00      	add	r7, sp, #0
 80082ae:	6078      	str	r0, [r7, #4]
 80082b0:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 80082b2:	2300      	movs	r3, #0
 80082b4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	VL53L0X_RangingMeasurementData_t rangingMeasurementData;

	uint8_t SequenceConfig = 0;
 80082b8:	2300      	movs	r3, #0
 80082ba:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 80082c4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	/*
	 * This function performs a reference signal rate measurement.
	 */
	if (status == VL53L0X_ERROR_NONE)
 80082c8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80082cc:	2b00      	cmp	r3, #0
 80082ce:	d107      	bne.n	80082e0 <perform_ref_signal_measurement+0x38>
		status = VL53L0X_WrByte(Dev,
 80082d0:	22c0      	movs	r2, #192	; 0xc0
 80082d2:	2101      	movs	r1, #1
 80082d4:	6878      	ldr	r0, [r7, #4]
 80082d6:	f003 f867 	bl	800b3a8 <VL53L0X_WrByte>
 80082da:	4603      	mov	r3, r0
 80082dc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0xC0);

	if (status == VL53L0X_ERROR_NONE)
 80082e0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80082e4:	2b00      	cmp	r3, #0
 80082e6:	d108      	bne.n	80082fa <perform_ref_signal_measurement+0x52>
		status = VL53L0X_PerformSingleRangingMeasurement(Dev,
 80082e8:	f107 0308 	add.w	r3, r7, #8
 80082ec:	4619      	mov	r1, r3
 80082ee:	6878      	ldr	r0, [r7, #4]
 80082f0:	f7ff fc18 	bl	8007b24 <VL53L0X_PerformSingleRangingMeasurement>
 80082f4:	4603      	mov	r3, r0
 80082f6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				&rangingMeasurementData);

	if (status == VL53L0X_ERROR_NONE)
 80082fa:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80082fe:	2b00      	cmp	r3, #0
 8008300:	d107      	bne.n	8008312 <perform_ref_signal_measurement+0x6a>
		status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8008302:	2201      	movs	r2, #1
 8008304:	21ff      	movs	r1, #255	; 0xff
 8008306:	6878      	ldr	r0, [r7, #4]
 8008308:	f003 f84e 	bl	800b3a8 <VL53L0X_WrByte>
 800830c:	4603      	mov	r3, r0
 800830e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (status == VL53L0X_ERROR_NONE)
 8008312:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8008316:	2b00      	cmp	r3, #0
 8008318:	d107      	bne.n	800832a <perform_ref_signal_measurement+0x82>
		status = VL53L0X_RdWord(Dev,
 800831a:	683a      	ldr	r2, [r7, #0]
 800831c:	21b6      	movs	r1, #182	; 0xb6
 800831e:	6878      	ldr	r0, [r7, #4]
 8008320:	f003 f8ee 	bl	800b500 <VL53L0X_RdWord>
 8008324:	4603      	mov	r3, r0
 8008326:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			VL53L0X_REG_RESULT_PEAK_SIGNAL_RATE_REF,
			refSignalRate);

	if (status == VL53L0X_ERROR_NONE)
 800832a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800832e:	2b00      	cmp	r3, #0
 8008330:	d107      	bne.n	8008342 <perform_ref_signal_measurement+0x9a>
		status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8008332:	2200      	movs	r2, #0
 8008334:	21ff      	movs	r1, #255	; 0xff
 8008336:	6878      	ldr	r0, [r7, #4]
 8008338:	f003 f836 	bl	800b3a8 <VL53L0X_WrByte>
 800833c:	4603      	mov	r3, r0
 800833e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (status == VL53L0X_ERROR_NONE) {
 8008342:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8008346:	2b00      	cmp	r3, #0
 8008348:	d112      	bne.n	8008370 <perform_ref_signal_measurement+0xc8>
		/* restore the previous Sequence Config */
		status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 800834a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800834e:	461a      	mov	r2, r3
 8008350:	2101      	movs	r1, #1
 8008352:	6878      	ldr	r0, [r7, #4]
 8008354:	f003 f828 	bl	800b3a8 <VL53L0X_WrByte>
 8008358:	4603      	mov	r3, r0
 800835a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				SequenceConfig);
		if (status == VL53L0X_ERROR_NONE)
 800835e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8008362:	2b00      	cmp	r3, #0
 8008364:	d104      	bne.n	8008370 <perform_ref_signal_measurement+0xc8>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800836c:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
	}

	return status;
 8008370:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8008374:	4618      	mov	r0, r3
 8008376:	3728      	adds	r7, #40	; 0x28
 8008378:	46bd      	mov	sp, r7
 800837a:	bd80      	pop	{r7, pc}

0800837c <VL53L0X_perform_ref_spad_management>:

VL53L0X_Error VL53L0X_perform_ref_spad_management(VL53L0X_DEV Dev,
				uint32_t *refSpadCount,
				uint8_t *isApertureSpads)
{
 800837c:	b590      	push	{r4, r7, lr}
 800837e:	b09d      	sub	sp, #116	; 0x74
 8008380:	af06      	add	r7, sp, #24
 8008382:	60f8      	str	r0, [r7, #12]
 8008384:	60b9      	str	r1, [r7, #8]
 8008386:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008388:	2300      	movs	r3, #0
 800838a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	uint8_t lastSpadArray[6];
	uint8_t startSelect = 0xB4;
 800838e:	23b4      	movs	r3, #180	; 0xb4
 8008390:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
	uint32_t minimumSpadCount = 3;
 8008394:	2303      	movs	r3, #3
 8008396:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t maxSpadCount = 44;
 8008398:	232c      	movs	r3, #44	; 0x2c
 800839a:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t currentSpadIndex = 0;
 800839c:	2300      	movs	r3, #0
 800839e:	653b      	str	r3, [r7, #80]	; 0x50
	uint32_t lastSpadIndex = 0;
 80083a0:	2300      	movs	r3, #0
 80083a2:	61bb      	str	r3, [r7, #24]
	int32_t nextGoodSpad = 0;
 80083a4:	2300      	movs	r3, #0
 80083a6:	617b      	str	r3, [r7, #20]
	uint16_t targetRefRate = 0x0A00; /* 20 MCPS in 9:7 format */
 80083a8:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 80083ac:	85fb      	strh	r3, [r7, #46]	; 0x2e
	uint16_t peakSignalRateRef;
	uint32_t needAptSpads = 0;
 80083ae:	2300      	movs	r3, #0
 80083b0:	64fb      	str	r3, [r7, #76]	; 0x4c
	uint32_t index = 0;
 80083b2:	2300      	movs	r3, #0
 80083b4:	64bb      	str	r3, [r7, #72]	; 0x48
	uint32_t spadArraySize = 6;
 80083b6:	2306      	movs	r3, #6
 80083b8:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t signalRateDiff = 0;
 80083ba:	2300      	movs	r3, #0
 80083bc:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t lastSignalRateDiff = 0;
 80083be:	2300      	movs	r3, #0
 80083c0:	647b      	str	r3, [r7, #68]	; 0x44
	uint8_t complete = 0;
 80083c2:	2300      	movs	r3, #0
 80083c4:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
	uint8_t VhvSettings = 0;
 80083c8:	2300      	movs	r3, #0
 80083ca:	747b      	strb	r3, [r7, #17]
	uint8_t PhaseCal = 0;
 80083cc:	2300      	movs	r3, #0
 80083ce:	743b      	strb	r3, [r7, #16]
	uint32_t refSpadCount_int = 0;
 80083d0:	2300      	movs	r3, #0
 80083d2:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint8_t	 isApertureSpads_int = 0;
 80083d4:	2300      	movs	r3, #0
 80083d6:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	 * of the non-aperture quadrant and runs in to the adjacent aperture
	 * quadrant.
	 */


	targetRefRate = PALDevDataGet(Dev, targetRefRate);
 80083da:	68fb      	ldr	r3, [r7, #12]
 80083dc:	f8b3 313c 	ldrh.w	r3, [r3, #316]	; 0x13c
 80083e0:	85fb      	strh	r3, [r7, #46]	; 0x2e
	 * This is a short term implementation. The good spad map will be
	 * provided as an input.
	 * Note that there are 6 bytes. Only the first 44 bits will be used to
	 * represent spads.
	 */
	for (index = 0; index < spadArraySize; index++)
 80083e2:	2300      	movs	r3, #0
 80083e4:	64bb      	str	r3, [r7, #72]	; 0x48
 80083e6:	e009      	b.n	80083fc <VL53L0X_perform_ref_spad_management+0x80>
		Dev->Data.SpadData.RefSpadEnables[index] = 0;
 80083e8:	68fa      	ldr	r2, [r7, #12]
 80083ea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80083ec:	4413      	add	r3, r2
 80083ee:	f503 7392 	add.w	r3, r3, #292	; 0x124
 80083f2:	2200      	movs	r2, #0
 80083f4:	701a      	strb	r2, [r3, #0]
	for (index = 0; index < spadArraySize; index++)
 80083f6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80083f8:	3301      	adds	r3, #1
 80083fa:	64bb      	str	r3, [r7, #72]	; 0x48
 80083fc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80083fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008400:	429a      	cmp	r2, r3
 8008402:	d3f1      	bcc.n	80083e8 <VL53L0X_perform_ref_spad_management+0x6c>


	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8008404:	2201      	movs	r2, #1
 8008406:	21ff      	movs	r1, #255	; 0xff
 8008408:	68f8      	ldr	r0, [r7, #12]
 800840a:	f002 ffcd 	bl	800b3a8 <VL53L0X_WrByte>
 800840e:	4603      	mov	r3, r0
 8008410:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	if (Status == VL53L0X_ERROR_NONE)
 8008414:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8008418:	2b00      	cmp	r3, #0
 800841a:	d107      	bne.n	800842c <VL53L0X_perform_ref_spad_management+0xb0>
		Status = VL53L0X_WrByte(Dev,
 800841c:	2200      	movs	r2, #0
 800841e:	214f      	movs	r1, #79	; 0x4f
 8008420:	68f8      	ldr	r0, [r7, #12]
 8008422:	f002 ffc1 	bl	800b3a8 <VL53L0X_WrByte>
 8008426:	4603      	mov	r3, r0
 8008428:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_REG_DYNAMIC_SPAD_REF_EN_START_OFFSET, 0x00);

	if (Status == VL53L0X_ERROR_NONE)
 800842c:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8008430:	2b00      	cmp	r3, #0
 8008432:	d107      	bne.n	8008444 <VL53L0X_perform_ref_spad_management+0xc8>
		Status = VL53L0X_WrByte(Dev,
 8008434:	222c      	movs	r2, #44	; 0x2c
 8008436:	214e      	movs	r1, #78	; 0x4e
 8008438:	68f8      	ldr	r0, [r7, #12]
 800843a:	f002 ffb5 	bl	800b3a8 <VL53L0X_WrByte>
 800843e:	4603      	mov	r3, r0
 8008440:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_REG_DYNAMIC_SPAD_NUM_REQUESTED_REF_SPAD, 0x2C);

	if (Status == VL53L0X_ERROR_NONE)
 8008444:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8008448:	2b00      	cmp	r3, #0
 800844a:	d107      	bne.n	800845c <VL53L0X_perform_ref_spad_management+0xe0>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800844c:	2200      	movs	r2, #0
 800844e:	21ff      	movs	r1, #255	; 0xff
 8008450:	68f8      	ldr	r0, [r7, #12]
 8008452:	f002 ffa9 	bl	800b3a8 <VL53L0X_WrByte>
 8008456:	4603      	mov	r3, r0
 8008458:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	if (Status == VL53L0X_ERROR_NONE)
 800845c:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8008460:	2b00      	cmp	r3, #0
 8008462:	d109      	bne.n	8008478 <VL53L0X_perform_ref_spad_management+0xfc>
		Status = VL53L0X_WrByte(Dev,
 8008464:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8008468:	461a      	mov	r2, r3
 800846a:	21b6      	movs	r1, #182	; 0xb6
 800846c:	68f8      	ldr	r0, [r7, #12]
 800846e:	f002 ff9b 	bl	800b3a8 <VL53L0X_WrByte>
 8008472:	4603      	mov	r3, r0
 8008474:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_REG_GLOBAL_CONFIG_REF_EN_START_SELECT,
			startSelect);


	if (Status == VL53L0X_ERROR_NONE)
 8008478:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800847c:	2b00      	cmp	r3, #0
 800847e:	d107      	bne.n	8008490 <VL53L0X_perform_ref_spad_management+0x114>
		Status = VL53L0X_WrByte(Dev,
 8008480:	2200      	movs	r2, #0
 8008482:	2180      	movs	r1, #128	; 0x80
 8008484:	68f8      	ldr	r0, [r7, #12]
 8008486:	f002 ff8f 	bl	800b3a8 <VL53L0X_WrByte>
 800848a:	4603      	mov	r3, r0
 800848c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
				VL53L0X_REG_POWER_MANAGEMENT_GO1_POWER_FORCE, 0);

	/* Perform ref calibration */
	if (Status == VL53L0X_ERROR_NONE)
 8008490:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8008494:	2b00      	cmp	r3, #0
 8008496:	d10a      	bne.n	80084ae <VL53L0X_perform_ref_spad_management+0x132>
		Status = VL53L0X_perform_ref_calibration(Dev, &VhvSettings,
 8008498:	f107 0210 	add.w	r2, r7, #16
 800849c:	f107 0111 	add.w	r1, r7, #17
 80084a0:	2300      	movs	r3, #0
 80084a2:	68f8      	ldr	r0, [r7, #12]
 80084a4:	f000 fbbb 	bl	8008c1e <VL53L0X_perform_ref_calibration>
 80084a8:	4603      	mov	r3, r0
 80084aa:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			&PhaseCal, 0);

	if (Status == VL53L0X_ERROR_NONE) {
 80084ae:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80084b2:	2b00      	cmp	r3, #0
 80084b4:	d121      	bne.n	80084fa <VL53L0X_perform_ref_spad_management+0x17e>
		/* Enable Minimum NON-APERTURE Spads */
		currentSpadIndex = 0;
 80084b6:	2300      	movs	r3, #0
 80084b8:	653b      	str	r3, [r7, #80]	; 0x50
		lastSpadIndex = currentSpadIndex;
 80084ba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80084bc:	61bb      	str	r3, [r7, #24]
		needAptSpads = 0;
 80084be:	2300      	movs	r3, #0
 80084c0:	64fb      	str	r3, [r7, #76]	; 0x4c
		Status = enable_ref_spads(Dev,
 80084c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80084c4:	b2d9      	uxtb	r1, r3
					needAptSpads,
					Dev->Data.SpadData.RefGoodSpadMap,
 80084c6:	68fb      	ldr	r3, [r7, #12]
 80084c8:	f503 7095 	add.w	r0, r3, #298	; 0x12a
					Dev->Data.SpadData.RefSpadEnables,
 80084cc:	68fb      	ldr	r3, [r7, #12]
 80084ce:	f503 7492 	add.w	r4, r3, #292	; 0x124
		Status = enable_ref_spads(Dev,
 80084d2:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 80084d6:	f107 0218 	add.w	r2, r7, #24
 80084da:	9204      	str	r2, [sp, #16]
 80084dc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80084de:	9203      	str	r2, [sp, #12]
 80084e0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80084e2:	9202      	str	r2, [sp, #8]
 80084e4:	9301      	str	r3, [sp, #4]
 80084e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084e8:	9300      	str	r3, [sp, #0]
 80084ea:	4623      	mov	r3, r4
 80084ec:	4602      	mov	r2, r0
 80084ee:	68f8      	ldr	r0, [r7, #12]
 80084f0:	f7ff fe5e 	bl	80081b0 <enable_ref_spads>
 80084f4:	4603      	mov	r3, r0
 80084f6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					currentSpadIndex,
					minimumSpadCount,
					&lastSpadIndex);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 80084fa:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80084fe:	2b00      	cmp	r3, #0
 8008500:	d174      	bne.n	80085ec <VL53L0X_perform_ref_spad_management+0x270>
		currentSpadIndex = lastSpadIndex;
 8008502:	69bb      	ldr	r3, [r7, #24]
 8008504:	653b      	str	r3, [r7, #80]	; 0x50

		Status = perform_ref_signal_measurement(Dev,
 8008506:	f107 0312 	add.w	r3, r7, #18
 800850a:	4619      	mov	r1, r3
 800850c:	68f8      	ldr	r0, [r7, #12]
 800850e:	f7ff fecb 	bl	80082a8 <perform_ref_signal_measurement>
 8008512:	4603      	mov	r3, r0
 8008514:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			&peakSignalRateRef);
		if ((Status == VL53L0X_ERROR_NONE) &&
 8008518:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800851c:	2b00      	cmp	r3, #0
 800851e:	d161      	bne.n	80085e4 <VL53L0X_perform_ref_spad_management+0x268>
			(peakSignalRateRef > targetRefRate)) {
 8008520:	8a7b      	ldrh	r3, [r7, #18]
		if ((Status == VL53L0X_ERROR_NONE) &&
 8008522:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8008524:	429a      	cmp	r2, r3
 8008526:	d25d      	bcs.n	80085e4 <VL53L0X_perform_ref_spad_management+0x268>
			/* Signal rate measurement too high,
			 * switch to APERTURE SPADs */

			for (index = 0; index < spadArraySize; index++)
 8008528:	2300      	movs	r3, #0
 800852a:	64bb      	str	r3, [r7, #72]	; 0x48
 800852c:	e009      	b.n	8008542 <VL53L0X_perform_ref_spad_management+0x1c6>
				Dev->Data.SpadData.RefSpadEnables[index] = 0;
 800852e:	68fa      	ldr	r2, [r7, #12]
 8008530:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008532:	4413      	add	r3, r2
 8008534:	f503 7392 	add.w	r3, r3, #292	; 0x124
 8008538:	2200      	movs	r2, #0
 800853a:	701a      	strb	r2, [r3, #0]
			for (index = 0; index < spadArraySize; index++)
 800853c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800853e:	3301      	adds	r3, #1
 8008540:	64bb      	str	r3, [r7, #72]	; 0x48
 8008542:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008544:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008546:	429a      	cmp	r2, r3
 8008548:	d3f1      	bcc.n	800852e <VL53L0X_perform_ref_spad_management+0x1b2>


			/* Increment to the first APERTURE spad */
			while ((is_aperture(startSelect + currentSpadIndex)
 800854a:	e002      	b.n	8008552 <VL53L0X_perform_ref_spad_management+0x1d6>
				== 0) && (currentSpadIndex < maxSpadCount)) {
				currentSpadIndex++;
 800854c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800854e:	3301      	adds	r3, #1
 8008550:	653b      	str	r3, [r7, #80]	; 0x50
			while ((is_aperture(startSelect + currentSpadIndex)
 8008552:	f897 203a 	ldrb.w	r2, [r7, #58]	; 0x3a
 8008556:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008558:	4413      	add	r3, r2
 800855a:	4618      	mov	r0, r3
 800855c:	f7ff fdb0 	bl	80080c0 <is_aperture>
 8008560:	4603      	mov	r3, r0
 8008562:	2b00      	cmp	r3, #0
 8008564:	d103      	bne.n	800856e <VL53L0X_perform_ref_spad_management+0x1f2>
				== 0) && (currentSpadIndex < maxSpadCount)) {
 8008566:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008568:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800856a:	429a      	cmp	r2, r3
 800856c:	d3ee      	bcc.n	800854c <VL53L0X_perform_ref_spad_management+0x1d0>
			}

			needAptSpads = 1;
 800856e:	2301      	movs	r3, #1
 8008570:	64fb      	str	r3, [r7, #76]	; 0x4c

			Status = enable_ref_spads(Dev,
 8008572:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008574:	b2d9      	uxtb	r1, r3
					needAptSpads,
					Dev->Data.SpadData.RefGoodSpadMap,
 8008576:	68fb      	ldr	r3, [r7, #12]
 8008578:	f503 7095 	add.w	r0, r3, #298	; 0x12a
					Dev->Data.SpadData.RefSpadEnables,
 800857c:	68fb      	ldr	r3, [r7, #12]
 800857e:	f503 7492 	add.w	r4, r3, #292	; 0x124
			Status = enable_ref_spads(Dev,
 8008582:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8008586:	f107 0218 	add.w	r2, r7, #24
 800858a:	9204      	str	r2, [sp, #16]
 800858c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800858e:	9203      	str	r2, [sp, #12]
 8008590:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008592:	9202      	str	r2, [sp, #8]
 8008594:	9301      	str	r3, [sp, #4]
 8008596:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008598:	9300      	str	r3, [sp, #0]
 800859a:	4623      	mov	r3, r4
 800859c:	4602      	mov	r2, r0
 800859e:	68f8      	ldr	r0, [r7, #12]
 80085a0:	f7ff fe06 	bl	80081b0 <enable_ref_spads>
 80085a4:	4603      	mov	r3, r0
 80085a6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					startSelect,
					currentSpadIndex,
					minimumSpadCount,
					&lastSpadIndex);

			if (Status == VL53L0X_ERROR_NONE) {
 80085aa:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80085ae:	2b00      	cmp	r3, #0
 80085b0:	d11b      	bne.n	80085ea <VL53L0X_perform_ref_spad_management+0x26e>
				currentSpadIndex = lastSpadIndex;
 80085b2:	69bb      	ldr	r3, [r7, #24]
 80085b4:	653b      	str	r3, [r7, #80]	; 0x50
				Status = perform_ref_signal_measurement(Dev,
 80085b6:	f107 0312 	add.w	r3, r7, #18
 80085ba:	4619      	mov	r1, r3
 80085bc:	68f8      	ldr	r0, [r7, #12]
 80085be:	f7ff fe73 	bl	80082a8 <perform_ref_signal_measurement>
 80085c2:	4603      	mov	r3, r0
 80085c4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
						&peakSignalRateRef);

				if ((Status == VL53L0X_ERROR_NONE) &&
 80085c8:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80085cc:	2b00      	cmp	r3, #0
 80085ce:	d10c      	bne.n	80085ea <VL53L0X_perform_ref_spad_management+0x26e>
					(peakSignalRateRef > targetRefRate)) {
 80085d0:	8a7b      	ldrh	r3, [r7, #18]
				if ((Status == VL53L0X_ERROR_NONE) &&
 80085d2:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80085d4:	429a      	cmp	r2, r3
 80085d6:	d208      	bcs.n	80085ea <VL53L0X_perform_ref_spad_management+0x26e>
					 * setting the minimum number of
					 * APERTURE spads. Can do no more
					 * therefore set the min number of
					 * aperture spads as the result.
					 */
					isApertureSpads_int = 1;
 80085d8:	2301      	movs	r3, #1
 80085da:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
					refSpadCount_int = minimumSpadCount;
 80085de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80085e0:	63fb      	str	r3, [r7, #60]	; 0x3c
			if (Status == VL53L0X_ERROR_NONE) {
 80085e2:	e002      	b.n	80085ea <VL53L0X_perform_ref_spad_management+0x26e>
				}
			}
		} else {
			needAptSpads = 0;
 80085e4:	2300      	movs	r3, #0
 80085e6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80085e8:	e000      	b.n	80085ec <VL53L0X_perform_ref_spad_management+0x270>
			if (Status == VL53L0X_ERROR_NONE) {
 80085ea:	bf00      	nop
		}
	}

	if ((Status == VL53L0X_ERROR_NONE) &&
 80085ec:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80085f0:	2b00      	cmp	r3, #0
 80085f2:	f040 80af 	bne.w	8008754 <VL53L0X_perform_ref_spad_management+0x3d8>
		(peakSignalRateRef < targetRefRate)) {
 80085f6:	8a7b      	ldrh	r3, [r7, #18]
	if ((Status == VL53L0X_ERROR_NONE) &&
 80085f8:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80085fa:	429a      	cmp	r2, r3
 80085fc:	f240 80aa 	bls.w	8008754 <VL53L0X_perform_ref_spad_management+0x3d8>
		/* At this point, the minimum number of either aperture
		 * or non-aperture spads have been set. Proceed to add
		 * spads and perform measurements until the target
		 * reference is reached.
		 */
		isApertureSpads_int = needAptSpads;
 8008600:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008602:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
		refSpadCount_int	= minimumSpadCount;
 8008606:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008608:	63fb      	str	r3, [r7, #60]	; 0x3c

		memcpy(lastSpadArray, Dev->Data.SpadData.RefSpadEnables,
 800860a:	68fb      	ldr	r3, [r7, #12]
 800860c:	f503 7192 	add.w	r1, r3, #292	; 0x124
 8008610:	f107 031c 	add.w	r3, r7, #28
 8008614:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008616:	4618      	mov	r0, r3
 8008618:	f003 f820 	bl	800b65c <memcpy>
				spadArraySize);
		lastSignalRateDiff = abs(peakSignalRateRef -
 800861c:	8a7b      	ldrh	r3, [r7, #18]
 800861e:	461a      	mov	r2, r3
 8008620:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8008622:	1ad3      	subs	r3, r2, r3
 8008624:	2b00      	cmp	r3, #0
 8008626:	bfb8      	it	lt
 8008628:	425b      	neglt	r3, r3
 800862a:	647b      	str	r3, [r7, #68]	; 0x44
			targetRefRate);
		complete = 0;
 800862c:	2300      	movs	r3, #0
 800862e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

		while (!complete) {
 8008632:	e086      	b.n	8008742 <VL53L0X_perform_ref_spad_management+0x3c6>
			get_next_good_spad(
				Dev->Data.SpadData.RefGoodSpadMap,
 8008634:	68fb      	ldr	r3, [r7, #12]
 8008636:	f503 7095 	add.w	r0, r3, #298	; 0x12a
			get_next_good_spad(
 800863a:	f107 0314 	add.w	r3, r7, #20
 800863e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008640:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008642:	f7ff fcdf 	bl	8008004 <get_next_good_spad>
				spadArraySize, currentSpadIndex,
				&nextGoodSpad);

			if (nextGoodSpad == -1) {
 8008646:	697b      	ldr	r3, [r7, #20]
 8008648:	f1b3 3fff 	cmp.w	r3, #4294967295
 800864c:	d103      	bne.n	8008656 <VL53L0X_perform_ref_spad_management+0x2da>
				Status = VL53L0X_ERROR_REF_SPAD_INIT;
 800864e:	23ce      	movs	r3, #206	; 0xce
 8008650:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
				break;
 8008654:	e07e      	b.n	8008754 <VL53L0X_perform_ref_spad_management+0x3d8>
			}

			/* Cannot combine Aperture and Non-Aperture spads, so
			 * ensure the current spad is of the correct type.
			 */
			if (is_aperture((uint32_t)startSelect + nextGoodSpad) !=
 8008656:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 800865a:	697a      	ldr	r2, [r7, #20]
 800865c:	4413      	add	r3, r2
 800865e:	4618      	mov	r0, r3
 8008660:	f7ff fd2e 	bl	80080c0 <is_aperture>
 8008664:	4603      	mov	r3, r0
 8008666:	461a      	mov	r2, r3
 8008668:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800866a:	4293      	cmp	r3, r2
 800866c:	d003      	beq.n	8008676 <VL53L0X_perform_ref_spad_management+0x2fa>
					needAptSpads) {
				/* At this point we have enabled the maximum
				 * number of Aperture spads.
				 */
				complete = 1;
 800866e:	2301      	movs	r3, #1
 8008670:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
				break;
 8008674:	e06e      	b.n	8008754 <VL53L0X_perform_ref_spad_management+0x3d8>
			}

			(refSpadCount_int)++;
 8008676:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008678:	3301      	adds	r3, #1
 800867a:	63fb      	str	r3, [r7, #60]	; 0x3c

			currentSpadIndex = nextGoodSpad;
 800867c:	697b      	ldr	r3, [r7, #20]
 800867e:	653b      	str	r3, [r7, #80]	; 0x50
			Status = enable_spad_bit(
					Dev->Data.SpadData.RefSpadEnables,
 8008680:	68fb      	ldr	r3, [r7, #12]
 8008682:	f503 7392 	add.w	r3, r3, #292	; 0x124
			Status = enable_spad_bit(
 8008686:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008688:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800868a:	4618      	mov	r0, r3
 800868c:	f7ff fd32 	bl	80080f4 <enable_spad_bit>
 8008690:	4603      	mov	r3, r0
 8008692:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					spadArraySize, currentSpadIndex);

			if (Status == VL53L0X_ERROR_NONE) {
 8008696:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800869a:	2b00      	cmp	r3, #0
 800869c:	d10c      	bne.n	80086b8 <VL53L0X_perform_ref_spad_management+0x33c>
				currentSpadIndex++;
 800869e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80086a0:	3301      	adds	r3, #1
 80086a2:	653b      	str	r3, [r7, #80]	; 0x50
				/* Proceed to apply the additional spad and
				 * perform measurement. */
				Status = set_ref_spad_map(Dev,
					Dev->Data.SpadData.RefSpadEnables);
 80086a4:	68fb      	ldr	r3, [r7, #12]
 80086a6:	f503 7392 	add.w	r3, r3, #292	; 0x124
				Status = set_ref_spad_map(Dev,
 80086aa:	4619      	mov	r1, r3
 80086ac:	68f8      	ldr	r0, [r7, #12]
 80086ae:	f7ff fd59 	bl	8008164 <set_ref_spad_map>
 80086b2:	4603      	mov	r3, r0
 80086b4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			}

			if (Status != VL53L0X_ERROR_NONE)
 80086b8:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80086bc:	2b00      	cmp	r3, #0
 80086be:	d146      	bne.n	800874e <VL53L0X_perform_ref_spad_management+0x3d2>
				break;

			Status = perform_ref_signal_measurement(Dev,
 80086c0:	f107 0312 	add.w	r3, r7, #18
 80086c4:	4619      	mov	r1, r3
 80086c6:	68f8      	ldr	r0, [r7, #12]
 80086c8:	f7ff fdee 	bl	80082a8 <perform_ref_signal_measurement>
 80086cc:	4603      	mov	r3, r0
 80086ce:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					&peakSignalRateRef);

			if (Status != VL53L0X_ERROR_NONE)
 80086d2:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	d13b      	bne.n	8008752 <VL53L0X_perform_ref_spad_management+0x3d6>
				break;

			signalRateDiff = abs(peakSignalRateRef - targetRefRate);
 80086da:	8a7b      	ldrh	r3, [r7, #18]
 80086dc:	461a      	mov	r2, r3
 80086de:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80086e0:	1ad3      	subs	r3, r2, r3
 80086e2:	2b00      	cmp	r3, #0
 80086e4:	bfb8      	it	lt
 80086e6:	425b      	neglt	r3, r3
 80086e8:	627b      	str	r3, [r7, #36]	; 0x24

			if (peakSignalRateRef > targetRefRate) {
 80086ea:	8a7b      	ldrh	r3, [r7, #18]
 80086ec:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80086ee:	429a      	cmp	r2, r3
 80086f0:	d21c      	bcs.n	800872c <VL53L0X_perform_ref_spad_management+0x3b0>
				/* Select the spad map that provides the
				 * measurement closest to the target rate,
				 * either above or below it.
				 */
				if (signalRateDiff > lastSignalRateDiff) {
 80086f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80086f4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80086f6:	429a      	cmp	r2, r3
 80086f8:	d914      	bls.n	8008724 <VL53L0X_perform_ref_spad_management+0x3a8>
					/* Previous spad map produced a closer
					 * measurement, so choose this. */
					Status = set_ref_spad_map(Dev,
 80086fa:	f107 031c 	add.w	r3, r7, #28
 80086fe:	4619      	mov	r1, r3
 8008700:	68f8      	ldr	r0, [r7, #12]
 8008702:	f7ff fd2f 	bl	8008164 <set_ref_spad_map>
 8008706:	4603      	mov	r3, r0
 8008708:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
							lastSpadArray);
					memcpy(
					Dev->Data.SpadData.RefSpadEnables,
 800870c:	68fb      	ldr	r3, [r7, #12]
 800870e:	f503 7392 	add.w	r3, r3, #292	; 0x124
					memcpy(
 8008712:	f107 011c 	add.w	r1, r7, #28
 8008716:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008718:	4618      	mov	r0, r3
 800871a:	f002 ff9f 	bl	800b65c <memcpy>
					lastSpadArray, spadArraySize);

					(refSpadCount_int)--;
 800871e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008720:	3b01      	subs	r3, #1
 8008722:	63fb      	str	r3, [r7, #60]	; 0x3c
				}
				complete = 1;
 8008724:	2301      	movs	r3, #1
 8008726:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800872a:	e00a      	b.n	8008742 <VL53L0X_perform_ref_spad_management+0x3c6>
			} else {
				/* Continue to add spads */
				lastSignalRateDiff = signalRateDiff;
 800872c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800872e:	647b      	str	r3, [r7, #68]	; 0x44
				memcpy(lastSpadArray,
					Dev->Data.SpadData.RefSpadEnables,
 8008730:	68fb      	ldr	r3, [r7, #12]
 8008732:	f503 7192 	add.w	r1, r3, #292	; 0x124
				memcpy(lastSpadArray,
 8008736:	f107 031c 	add.w	r3, r7, #28
 800873a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800873c:	4618      	mov	r0, r3
 800873e:	f002 ff8d 	bl	800b65c <memcpy>
		while (!complete) {
 8008742:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8008746:	2b00      	cmp	r3, #0
 8008748:	f43f af74 	beq.w	8008634 <VL53L0X_perform_ref_spad_management+0x2b8>
 800874c:	e002      	b.n	8008754 <VL53L0X_perform_ref_spad_management+0x3d8>
				break;
 800874e:	bf00      	nop
 8008750:	e000      	b.n	8008754 <VL53L0X_perform_ref_spad_management+0x3d8>
				break;
 8008752:	bf00      	nop
			}

		} /* while */
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8008754:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8008758:	2b00      	cmp	r3, #0
 800875a:	d115      	bne.n	8008788 <VL53L0X_perform_ref_spad_management+0x40c>
		*refSpadCount = refSpadCount_int;
 800875c:	68bb      	ldr	r3, [r7, #8]
 800875e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008760:	601a      	str	r2, [r3, #0]
		*isApertureSpads = isApertureSpads_int;
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	f897 203b 	ldrb.w	r2, [r7, #59]	; 0x3b
 8008768:	701a      	strb	r2, [r3, #0]

		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 1);
 800876a:	68fb      	ldr	r3, [r7, #12]
 800876c:	2201      	movs	r2, #1
 800876e:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8008772:	68bb      	ldr	r3, [r7, #8]
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	b2da      	uxtb	r2, r3
 8008778:	68fb      	ldr	r3, [r7, #12]
 800877a:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
			ReferenceSpadCount, (uint8_t)(*refSpadCount));
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	781a      	ldrb	r2, [r3, #0]
 8008782:	68fb      	ldr	r3, [r7, #12]
 8008784:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
			ReferenceSpadType, *isApertureSpads);
	}

	return Status;
 8008788:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
}
 800878c:	4618      	mov	r0, r3
 800878e:	375c      	adds	r7, #92	; 0x5c
 8008790:	46bd      	mov	sp, r7
 8008792:	bd90      	pop	{r4, r7, pc}

08008794 <VL53L0X_set_reference_spads>:

VL53L0X_Error VL53L0X_set_reference_spads(VL53L0X_DEV Dev,
				 uint32_t count, uint8_t isApertureSpads)
{
 8008794:	b590      	push	{r4, r7, lr}
 8008796:	b093      	sub	sp, #76	; 0x4c
 8008798:	af06      	add	r7, sp, #24
 800879a:	60f8      	str	r0, [r7, #12]
 800879c:	60b9      	str	r1, [r7, #8]
 800879e:	4613      	mov	r3, r2
 80087a0:	71fb      	strb	r3, [r7, #7]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80087a2:	2300      	movs	r3, #0
 80087a4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint32_t currentSpadIndex = 0;
 80087a8:	2300      	movs	r3, #0
 80087aa:	62bb      	str	r3, [r7, #40]	; 0x28
	uint8_t startSelect = 0xB4;
 80087ac:	23b4      	movs	r3, #180	; 0xb4
 80087ae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	uint32_t spadArraySize = 6;
 80087b2:	2306      	movs	r3, #6
 80087b4:	61fb      	str	r3, [r7, #28]
	uint32_t maxSpadCount = 44;
 80087b6:	232c      	movs	r3, #44	; 0x2c
 80087b8:	61bb      	str	r3, [r7, #24]
	 * aperture or
	 * non-aperture, as requested.
	 * The good spad map will be applied.
	 */

	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 80087ba:	2201      	movs	r2, #1
 80087bc:	21ff      	movs	r1, #255	; 0xff
 80087be:	68f8      	ldr	r0, [r7, #12]
 80087c0:	f002 fdf2 	bl	800b3a8 <VL53L0X_WrByte>
 80087c4:	4603      	mov	r3, r0
 80087c6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	if (Status == VL53L0X_ERROR_NONE)
 80087ca:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80087ce:	2b00      	cmp	r3, #0
 80087d0:	d107      	bne.n	80087e2 <VL53L0X_set_reference_spads+0x4e>
		Status = VL53L0X_WrByte(Dev,
 80087d2:	2200      	movs	r2, #0
 80087d4:	214f      	movs	r1, #79	; 0x4f
 80087d6:	68f8      	ldr	r0, [r7, #12]
 80087d8:	f002 fde6 	bl	800b3a8 <VL53L0X_WrByte>
 80087dc:	4603      	mov	r3, r0
 80087de:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L0X_REG_DYNAMIC_SPAD_REF_EN_START_OFFSET, 0x00);

	if (Status == VL53L0X_ERROR_NONE)
 80087e2:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80087e6:	2b00      	cmp	r3, #0
 80087e8:	d107      	bne.n	80087fa <VL53L0X_set_reference_spads+0x66>
		Status = VL53L0X_WrByte(Dev,
 80087ea:	222c      	movs	r2, #44	; 0x2c
 80087ec:	214e      	movs	r1, #78	; 0x4e
 80087ee:	68f8      	ldr	r0, [r7, #12]
 80087f0:	f002 fdda 	bl	800b3a8 <VL53L0X_WrByte>
 80087f4:	4603      	mov	r3, r0
 80087f6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L0X_REG_DYNAMIC_SPAD_NUM_REQUESTED_REF_SPAD, 0x2C);

	if (Status == VL53L0X_ERROR_NONE)
 80087fa:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80087fe:	2b00      	cmp	r3, #0
 8008800:	d107      	bne.n	8008812 <VL53L0X_set_reference_spads+0x7e>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8008802:	2200      	movs	r2, #0
 8008804:	21ff      	movs	r1, #255	; 0xff
 8008806:	68f8      	ldr	r0, [r7, #12]
 8008808:	f002 fdce 	bl	800b3a8 <VL53L0X_WrByte>
 800880c:	4603      	mov	r3, r0
 800880e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	if (Status == VL53L0X_ERROR_NONE)
 8008812:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8008816:	2b00      	cmp	r3, #0
 8008818:	d109      	bne.n	800882e <VL53L0X_set_reference_spads+0x9a>
		Status = VL53L0X_WrByte(Dev,
 800881a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800881e:	461a      	mov	r2, r3
 8008820:	21b6      	movs	r1, #182	; 0xb6
 8008822:	68f8      	ldr	r0, [r7, #12]
 8008824:	f002 fdc0 	bl	800b3a8 <VL53L0X_WrByte>
 8008828:	4603      	mov	r3, r0
 800882a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L0X_REG_GLOBAL_CONFIG_REF_EN_START_SELECT,
			startSelect);

	for (index = 0; index < spadArraySize; index++)
 800882e:	2300      	movs	r3, #0
 8008830:	627b      	str	r3, [r7, #36]	; 0x24
 8008832:	e009      	b.n	8008848 <VL53L0X_set_reference_spads+0xb4>
		Dev->Data.SpadData.RefSpadEnables[index] = 0;
 8008834:	68fa      	ldr	r2, [r7, #12]
 8008836:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008838:	4413      	add	r3, r2
 800883a:	f503 7392 	add.w	r3, r3, #292	; 0x124
 800883e:	2200      	movs	r2, #0
 8008840:	701a      	strb	r2, [r3, #0]
	for (index = 0; index < spadArraySize; index++)
 8008842:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008844:	3301      	adds	r3, #1
 8008846:	627b      	str	r3, [r7, #36]	; 0x24
 8008848:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800884a:	69fb      	ldr	r3, [r7, #28]
 800884c:	429a      	cmp	r2, r3
 800884e:	d3f1      	bcc.n	8008834 <VL53L0X_set_reference_spads+0xa0>

	if (isApertureSpads) {
 8008850:	79fb      	ldrb	r3, [r7, #7]
 8008852:	2b00      	cmp	r3, #0
 8008854:	d011      	beq.n	800887a <VL53L0X_set_reference_spads+0xe6>
		/* Increment to the first APERTURE spad */
		while ((is_aperture(startSelect + currentSpadIndex) == 0) &&
 8008856:	e002      	b.n	800885e <VL53L0X_set_reference_spads+0xca>
			  (currentSpadIndex < maxSpadCount)) {
			currentSpadIndex++;
 8008858:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800885a:	3301      	adds	r3, #1
 800885c:	62bb      	str	r3, [r7, #40]	; 0x28
		while ((is_aperture(startSelect + currentSpadIndex) == 0) &&
 800885e:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8008862:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008864:	4413      	add	r3, r2
 8008866:	4618      	mov	r0, r3
 8008868:	f7ff fc2a 	bl	80080c0 <is_aperture>
 800886c:	4603      	mov	r3, r0
 800886e:	2b00      	cmp	r3, #0
 8008870:	d103      	bne.n	800887a <VL53L0X_set_reference_spads+0xe6>
 8008872:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008874:	69bb      	ldr	r3, [r7, #24]
 8008876:	429a      	cmp	r2, r3
 8008878:	d3ee      	bcc.n	8008858 <VL53L0X_set_reference_spads+0xc4>
		}
	}
	Status = enable_ref_spads(Dev,
				isApertureSpads,
				Dev->Data.SpadData.RefGoodSpadMap,
 800887a:	68fb      	ldr	r3, [r7, #12]
 800887c:	f503 7095 	add.w	r0, r3, #298	; 0x12a
				Dev->Data.SpadData.RefSpadEnables,
 8008880:	68fb      	ldr	r3, [r7, #12]
 8008882:	f503 7492 	add.w	r4, r3, #292	; 0x124
	Status = enable_ref_spads(Dev,
 8008886:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800888a:	79f9      	ldrb	r1, [r7, #7]
 800888c:	f107 0214 	add.w	r2, r7, #20
 8008890:	9204      	str	r2, [sp, #16]
 8008892:	68ba      	ldr	r2, [r7, #8]
 8008894:	9203      	str	r2, [sp, #12]
 8008896:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008898:	9202      	str	r2, [sp, #8]
 800889a:	9301      	str	r3, [sp, #4]
 800889c:	69fb      	ldr	r3, [r7, #28]
 800889e:	9300      	str	r3, [sp, #0]
 80088a0:	4623      	mov	r3, r4
 80088a2:	4602      	mov	r2, r0
 80088a4:	68f8      	ldr	r0, [r7, #12]
 80088a6:	f7ff fc83 	bl	80081b0 <enable_ref_spads>
 80088aa:	4603      	mov	r3, r0
 80088ac:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				startSelect,
				currentSpadIndex,
				count,
				&lastSpadIndex);

	if (Status == VL53L0X_ERROR_NONE) {
 80088b0:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80088b4:	2b00      	cmp	r3, #0
 80088b6:	d10c      	bne.n	80088d2 <VL53L0X_set_reference_spads+0x13e>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 1);
 80088b8:	68fb      	ldr	r3, [r7, #12]
 80088ba:	2201      	movs	r2, #1
 80088bc:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 80088c0:	68bb      	ldr	r3, [r7, #8]
 80088c2:	b2da      	uxtb	r2, r3
 80088c4:	68fb      	ldr	r3, [r7, #12]
 80088c6:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
			ReferenceSpadCount, (uint8_t)(count));
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 80088ca:	68fb      	ldr	r3, [r7, #12]
 80088cc:	79fa      	ldrb	r2, [r7, #7]
 80088ce:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
			ReferenceSpadType, isApertureSpads);
	}

	return Status;
 80088d2:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 80088d6:	4618      	mov	r0, r3
 80088d8:	3734      	adds	r7, #52	; 0x34
 80088da:	46bd      	mov	sp, r7
 80088dc:	bd90      	pop	{r4, r7, pc}

080088de <VL53L0X_perform_single_ref_calibration>:
}


VL53L0X_Error VL53L0X_perform_single_ref_calibration(VL53L0X_DEV Dev,
		uint8_t vhv_init_byte)
{
 80088de:	b580      	push	{r7, lr}
 80088e0:	b084      	sub	sp, #16
 80088e2:	af00      	add	r7, sp, #0
 80088e4:	6078      	str	r0, [r7, #4]
 80088e6:	460b      	mov	r3, r1
 80088e8:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80088ea:	2300      	movs	r3, #0
 80088ec:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 80088ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80088f2:	2b00      	cmp	r3, #0
 80088f4:	d10a      	bne.n	800890c <VL53L0X_perform_single_ref_calibration+0x2e>
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START,
 80088f6:	78fb      	ldrb	r3, [r7, #3]
 80088f8:	f043 0301 	orr.w	r3, r3, #1
 80088fc:	b2db      	uxtb	r3, r3
 80088fe:	461a      	mov	r2, r3
 8008900:	2100      	movs	r1, #0
 8008902:	6878      	ldr	r0, [r7, #4]
 8008904:	f002 fd50 	bl	800b3a8 <VL53L0X_WrByte>
 8008908:	4603      	mov	r3, r0
 800890a:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_SYSRANGE_MODE_START_STOP |
				vhv_init_byte);

	if (Status == VL53L0X_ERROR_NONE)
 800890c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008910:	2b00      	cmp	r3, #0
 8008912:	d104      	bne.n	800891e <VL53L0X_perform_single_ref_calibration+0x40>
		Status = VL53L0X_measurement_poll_for_completion(Dev);
 8008914:	6878      	ldr	r0, [r7, #4]
 8008916:	f000 f9bf 	bl	8008c98 <VL53L0X_measurement_poll_for_completion>
 800891a:	4603      	mov	r3, r0
 800891c:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 800891e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008922:	2b00      	cmp	r3, #0
 8008924:	d105      	bne.n	8008932 <VL53L0X_perform_single_ref_calibration+0x54>
		Status = VL53L0X_ClearInterruptMask(Dev, 0);
 8008926:	2100      	movs	r1, #0
 8008928:	6878      	ldr	r0, [r7, #4]
 800892a:	f7ff fa85 	bl	8007e38 <VL53L0X_ClearInterruptMask>
 800892e:	4603      	mov	r3, r0
 8008930:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 8008932:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008936:	2b00      	cmp	r3, #0
 8008938:	d106      	bne.n	8008948 <VL53L0X_perform_single_ref_calibration+0x6a>
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START, 0x00);
 800893a:	2200      	movs	r2, #0
 800893c:	2100      	movs	r1, #0
 800893e:	6878      	ldr	r0, [r7, #4]
 8008940:	f002 fd32 	bl	800b3a8 <VL53L0X_WrByte>
 8008944:	4603      	mov	r3, r0
 8008946:	73fb      	strb	r3, [r7, #15]

	return Status;
 8008948:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800894c:	4618      	mov	r0, r3
 800894e:	3710      	adds	r7, #16
 8008950:	46bd      	mov	sp, r7
 8008952:	bd80      	pop	{r7, pc}

08008954 <VL53L0X_ref_calibration_io>:

VL53L0X_Error VL53L0X_ref_calibration_io(VL53L0X_DEV Dev, uint8_t read_not_write,
	uint8_t VhvSettings, uint8_t PhaseCal,
	uint8_t *pVhvSettings, uint8_t *pPhaseCal,
	const uint8_t vhv_enable, const uint8_t phase_enable)
{
 8008954:	b580      	push	{r7, lr}
 8008956:	b084      	sub	sp, #16
 8008958:	af00      	add	r7, sp, #0
 800895a:	6078      	str	r0, [r7, #4]
 800895c:	4608      	mov	r0, r1
 800895e:	4611      	mov	r1, r2
 8008960:	461a      	mov	r2, r3
 8008962:	4603      	mov	r3, r0
 8008964:	70fb      	strb	r3, [r7, #3]
 8008966:	460b      	mov	r3, r1
 8008968:	70bb      	strb	r3, [r7, #2]
 800896a:	4613      	mov	r3, r2
 800896c:	707b      	strb	r3, [r7, #1]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800896e:	2300      	movs	r3, #0
 8008970:	73fb      	strb	r3, [r7, #15]
	uint8_t PhaseCalint = 0;
 8008972:	2300      	movs	r3, #0
 8008974:	73bb      	strb	r3, [r7, #14]

	/* Read VHV from device */
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8008976:	2201      	movs	r2, #1
 8008978:	21ff      	movs	r1, #255	; 0xff
 800897a:	6878      	ldr	r0, [r7, #4]
 800897c:	f002 fd14 	bl	800b3a8 <VL53L0X_WrByte>
 8008980:	4603      	mov	r3, r0
 8008982:	461a      	mov	r2, r3
 8008984:	7bfb      	ldrb	r3, [r7, #15]
 8008986:	4313      	orrs	r3, r2
 8008988:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 800898a:	2200      	movs	r2, #0
 800898c:	2100      	movs	r1, #0
 800898e:	6878      	ldr	r0, [r7, #4]
 8008990:	f002 fd0a 	bl	800b3a8 <VL53L0X_WrByte>
 8008994:	4603      	mov	r3, r0
 8008996:	461a      	mov	r2, r3
 8008998:	7bfb      	ldrb	r3, [r7, #15]
 800899a:	4313      	orrs	r3, r2
 800899c:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800899e:	2200      	movs	r2, #0
 80089a0:	21ff      	movs	r1, #255	; 0xff
 80089a2:	6878      	ldr	r0, [r7, #4]
 80089a4:	f002 fd00 	bl	800b3a8 <VL53L0X_WrByte>
 80089a8:	4603      	mov	r3, r0
 80089aa:	461a      	mov	r2, r3
 80089ac:	7bfb      	ldrb	r3, [r7, #15]
 80089ae:	4313      	orrs	r3, r2
 80089b0:	73fb      	strb	r3, [r7, #15]

	if (read_not_write) {
 80089b2:	78fb      	ldrb	r3, [r7, #3]
 80089b4:	2b00      	cmp	r3, #0
 80089b6:	d01e      	beq.n	80089f6 <VL53L0X_ref_calibration_io+0xa2>
		if (vhv_enable)
 80089b8:	f897 3020 	ldrb.w	r3, [r7, #32]
 80089bc:	2b00      	cmp	r3, #0
 80089be:	d009      	beq.n	80089d4 <VL53L0X_ref_calibration_io+0x80>
			Status |= VL53L0X_RdByte(Dev, 0xCB, pVhvSettings);
 80089c0:	69ba      	ldr	r2, [r7, #24]
 80089c2:	21cb      	movs	r1, #203	; 0xcb
 80089c4:	6878      	ldr	r0, [r7, #4]
 80089c6:	f002 fd71 	bl	800b4ac <VL53L0X_RdByte>
 80089ca:	4603      	mov	r3, r0
 80089cc:	461a      	mov	r2, r3
 80089ce:	7bfb      	ldrb	r3, [r7, #15]
 80089d0:	4313      	orrs	r3, r2
 80089d2:	73fb      	strb	r3, [r7, #15]
		if (phase_enable)
 80089d4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80089d8:	2b00      	cmp	r3, #0
 80089da:	d02a      	beq.n	8008a32 <VL53L0X_ref_calibration_io+0xde>
			Status |= VL53L0X_RdByte(Dev, 0xEE, &PhaseCalint);
 80089dc:	f107 030e 	add.w	r3, r7, #14
 80089e0:	461a      	mov	r2, r3
 80089e2:	21ee      	movs	r1, #238	; 0xee
 80089e4:	6878      	ldr	r0, [r7, #4]
 80089e6:	f002 fd61 	bl	800b4ac <VL53L0X_RdByte>
 80089ea:	4603      	mov	r3, r0
 80089ec:	461a      	mov	r2, r3
 80089ee:	7bfb      	ldrb	r3, [r7, #15]
 80089f0:	4313      	orrs	r3, r2
 80089f2:	73fb      	strb	r3, [r7, #15]
 80089f4:	e01d      	b.n	8008a32 <VL53L0X_ref_calibration_io+0xde>
	} else {
		if (vhv_enable)
 80089f6:	f897 3020 	ldrb.w	r3, [r7, #32]
 80089fa:	2b00      	cmp	r3, #0
 80089fc:	d00a      	beq.n	8008a14 <VL53L0X_ref_calibration_io+0xc0>
			Status |= VL53L0X_WrByte(Dev, 0xCB, VhvSettings);
 80089fe:	78bb      	ldrb	r3, [r7, #2]
 8008a00:	461a      	mov	r2, r3
 8008a02:	21cb      	movs	r1, #203	; 0xcb
 8008a04:	6878      	ldr	r0, [r7, #4]
 8008a06:	f002 fccf 	bl	800b3a8 <VL53L0X_WrByte>
 8008a0a:	4603      	mov	r3, r0
 8008a0c:	461a      	mov	r2, r3
 8008a0e:	7bfb      	ldrb	r3, [r7, #15]
 8008a10:	4313      	orrs	r3, r2
 8008a12:	73fb      	strb	r3, [r7, #15]
		if (phase_enable)
 8008a14:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8008a18:	2b00      	cmp	r3, #0
 8008a1a:	d00a      	beq.n	8008a32 <VL53L0X_ref_calibration_io+0xde>
			Status |= VL53L0X_UpdateByte(Dev, 0xEE, 0x80, PhaseCal);
 8008a1c:	787b      	ldrb	r3, [r7, #1]
 8008a1e:	2280      	movs	r2, #128	; 0x80
 8008a20:	21ee      	movs	r1, #238	; 0xee
 8008a22:	6878      	ldr	r0, [r7, #4]
 8008a24:	f002 fd0e 	bl	800b444 <VL53L0X_UpdateByte>
 8008a28:	4603      	mov	r3, r0
 8008a2a:	461a      	mov	r2, r3
 8008a2c:	7bfb      	ldrb	r3, [r7, #15]
 8008a2e:	4313      	orrs	r3, r2
 8008a30:	73fb      	strb	r3, [r7, #15]
	}

	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8008a32:	2201      	movs	r2, #1
 8008a34:	21ff      	movs	r1, #255	; 0xff
 8008a36:	6878      	ldr	r0, [r7, #4]
 8008a38:	f002 fcb6 	bl	800b3a8 <VL53L0X_WrByte>
 8008a3c:	4603      	mov	r3, r0
 8008a3e:	461a      	mov	r2, r3
 8008a40:	7bfb      	ldrb	r3, [r7, #15]
 8008a42:	4313      	orrs	r3, r2
 8008a44:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 8008a46:	2201      	movs	r2, #1
 8008a48:	2100      	movs	r1, #0
 8008a4a:	6878      	ldr	r0, [r7, #4]
 8008a4c:	f002 fcac 	bl	800b3a8 <VL53L0X_WrByte>
 8008a50:	4603      	mov	r3, r0
 8008a52:	461a      	mov	r2, r3
 8008a54:	7bfb      	ldrb	r3, [r7, #15]
 8008a56:	4313      	orrs	r3, r2
 8008a58:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8008a5a:	2200      	movs	r2, #0
 8008a5c:	21ff      	movs	r1, #255	; 0xff
 8008a5e:	6878      	ldr	r0, [r7, #4]
 8008a60:	f002 fca2 	bl	800b3a8 <VL53L0X_WrByte>
 8008a64:	4603      	mov	r3, r0
 8008a66:	461a      	mov	r2, r3
 8008a68:	7bfb      	ldrb	r3, [r7, #15]
 8008a6a:	4313      	orrs	r3, r2
 8008a6c:	73fb      	strb	r3, [r7, #15]

	*pPhaseCal = (uint8_t)(PhaseCalint&0xEF);
 8008a6e:	7bbb      	ldrb	r3, [r7, #14]
 8008a70:	f023 0310 	bic.w	r3, r3, #16
 8008a74:	b2da      	uxtb	r2, r3
 8008a76:	69fb      	ldr	r3, [r7, #28]
 8008a78:	701a      	strb	r2, [r3, #0]

	return Status;
 8008a7a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008a7e:	4618      	mov	r0, r3
 8008a80:	3710      	adds	r7, #16
 8008a82:	46bd      	mov	sp, r7
 8008a84:	bd80      	pop	{r7, pc}

08008a86 <VL53L0X_perform_vhv_calibration>:


VL53L0X_Error VL53L0X_perform_vhv_calibration(VL53L0X_DEV Dev,
	uint8_t *pVhvSettings, const uint8_t get_data_enable,
	const uint8_t restore_config)
{
 8008a86:	b580      	push	{r7, lr}
 8008a88:	b08a      	sub	sp, #40	; 0x28
 8008a8a:	af04      	add	r7, sp, #16
 8008a8c:	60f8      	str	r0, [r7, #12]
 8008a8e:	60b9      	str	r1, [r7, #8]
 8008a90:	4611      	mov	r1, r2
 8008a92:	461a      	mov	r2, r3
 8008a94:	460b      	mov	r3, r1
 8008a96:	71fb      	strb	r3, [r7, #7]
 8008a98:	4613      	mov	r3, r2
 8008a9a:	71bb      	strb	r3, [r7, #6]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008a9c:	2300      	movs	r3, #0
 8008a9e:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 8008aa0:	2300      	movs	r3, #0
 8008aa2:	75bb      	strb	r3, [r7, #22]
	uint8_t VhvSettings = 0;
 8008aa4:	2300      	movs	r3, #0
 8008aa6:	757b      	strb	r3, [r7, #21]
	uint8_t PhaseCal = 0;
 8008aa8:	2300      	movs	r3, #0
 8008aaa:	753b      	strb	r3, [r7, #20]
	uint8_t PhaseCalInt = 0;
 8008aac:	2300      	movs	r3, #0
 8008aae:	74fb      	strb	r3, [r7, #19]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	if (restore_config)
 8008ab0:	79bb      	ldrb	r3, [r7, #6]
 8008ab2:	2b00      	cmp	r3, #0
 8008ab4:	d003      	beq.n	8008abe <VL53L0X_perform_vhv_calibration+0x38>
		SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 8008ab6:	68fb      	ldr	r3, [r7, #12]
 8008ab8:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 8008abc:	75bb      	strb	r3, [r7, #22]

	/* Run VHV */
	Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0x01);
 8008abe:	2201      	movs	r2, #1
 8008ac0:	2101      	movs	r1, #1
 8008ac2:	68f8      	ldr	r0, [r7, #12]
 8008ac4:	f002 fc70 	bl	800b3a8 <VL53L0X_WrByte>
 8008ac8:	4603      	mov	r3, r0
 8008aca:	75fb      	strb	r3, [r7, #23]

	if (Status == VL53L0X_ERROR_NONE)
 8008acc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008ad0:	2b00      	cmp	r3, #0
 8008ad2:	d105      	bne.n	8008ae0 <VL53L0X_perform_vhv_calibration+0x5a>
		Status = VL53L0X_perform_single_ref_calibration(Dev, 0x40);
 8008ad4:	2140      	movs	r1, #64	; 0x40
 8008ad6:	68f8      	ldr	r0, [r7, #12]
 8008ad8:	f7ff ff01 	bl	80088de <VL53L0X_perform_single_ref_calibration>
 8008adc:	4603      	mov	r3, r0
 8008ade:	75fb      	strb	r3, [r7, #23]

	/* Read VHV from device */
	if ((Status == VL53L0X_ERROR_NONE) && (get_data_enable == 1)) {
 8008ae0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008ae4:	2b00      	cmp	r3, #0
 8008ae6:	d115      	bne.n	8008b14 <VL53L0X_perform_vhv_calibration+0x8e>
 8008ae8:	79fb      	ldrb	r3, [r7, #7]
 8008aea:	2b01      	cmp	r3, #1
 8008aec:	d112      	bne.n	8008b14 <VL53L0X_perform_vhv_calibration+0x8e>
		Status = VL53L0X_ref_calibration_io(Dev, 1,
 8008aee:	7d39      	ldrb	r1, [r7, #20]
 8008af0:	7d7a      	ldrb	r2, [r7, #21]
 8008af2:	2300      	movs	r3, #0
 8008af4:	9303      	str	r3, [sp, #12]
 8008af6:	2301      	movs	r3, #1
 8008af8:	9302      	str	r3, [sp, #8]
 8008afa:	f107 0313 	add.w	r3, r7, #19
 8008afe:	9301      	str	r3, [sp, #4]
 8008b00:	68bb      	ldr	r3, [r7, #8]
 8008b02:	9300      	str	r3, [sp, #0]
 8008b04:	460b      	mov	r3, r1
 8008b06:	2101      	movs	r1, #1
 8008b08:	68f8      	ldr	r0, [r7, #12]
 8008b0a:	f7ff ff23 	bl	8008954 <VL53L0X_ref_calibration_io>
 8008b0e:	4603      	mov	r3, r0
 8008b10:	75fb      	strb	r3, [r7, #23]
 8008b12:	e002      	b.n	8008b1a <VL53L0X_perform_vhv_calibration+0x94>
			VhvSettings, PhaseCal, /* Not used here */
			pVhvSettings, &PhaseCalInt,
			1, 0);
	} else
		*pVhvSettings = 0;
 8008b14:	68bb      	ldr	r3, [r7, #8]
 8008b16:	2200      	movs	r2, #0
 8008b18:	701a      	strb	r2, [r3, #0]


	if ((Status == VL53L0X_ERROR_NONE) && restore_config) {
 8008b1a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008b1e:	2b00      	cmp	r3, #0
 8008b20:	d112      	bne.n	8008b48 <VL53L0X_perform_vhv_calibration+0xc2>
 8008b22:	79bb      	ldrb	r3, [r7, #6]
 8008b24:	2b00      	cmp	r3, #0
 8008b26:	d00f      	beq.n	8008b48 <VL53L0X_perform_vhv_calibration+0xc2>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8008b28:	7dbb      	ldrb	r3, [r7, #22]
 8008b2a:	461a      	mov	r2, r3
 8008b2c:	2101      	movs	r1, #1
 8008b2e:	68f8      	ldr	r0, [r7, #12]
 8008b30:	f002 fc3a 	bl	800b3a8 <VL53L0X_WrByte>
 8008b34:	4603      	mov	r3, r0
 8008b36:	75fb      	strb	r3, [r7, #23]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 8008b38:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008b3c:	2b00      	cmp	r3, #0
 8008b3e:	d103      	bne.n	8008b48 <VL53L0X_perform_vhv_calibration+0xc2>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 8008b40:	68fb      	ldr	r3, [r7, #12]
 8008b42:	7dba      	ldrb	r2, [r7, #22]
 8008b44:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	return Status;
 8008b48:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008b4c:	4618      	mov	r0, r3
 8008b4e:	3718      	adds	r7, #24
 8008b50:	46bd      	mov	sp, r7
 8008b52:	bd80      	pop	{r7, pc}

08008b54 <VL53L0X_perform_phase_calibration>:

VL53L0X_Error VL53L0X_perform_phase_calibration(VL53L0X_DEV Dev,
	uint8_t *pPhaseCal, const uint8_t get_data_enable,
	const uint8_t restore_config)
{
 8008b54:	b580      	push	{r7, lr}
 8008b56:	b08a      	sub	sp, #40	; 0x28
 8008b58:	af04      	add	r7, sp, #16
 8008b5a:	60f8      	str	r0, [r7, #12]
 8008b5c:	60b9      	str	r1, [r7, #8]
 8008b5e:	4611      	mov	r1, r2
 8008b60:	461a      	mov	r2, r3
 8008b62:	460b      	mov	r3, r1
 8008b64:	71fb      	strb	r3, [r7, #7]
 8008b66:	4613      	mov	r3, r2
 8008b68:	71bb      	strb	r3, [r7, #6]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008b6a:	2300      	movs	r3, #0
 8008b6c:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 8008b6e:	2300      	movs	r3, #0
 8008b70:	75bb      	strb	r3, [r7, #22]
	uint8_t VhvSettings = 0;
 8008b72:	2300      	movs	r3, #0
 8008b74:	757b      	strb	r3, [r7, #21]
	uint8_t PhaseCal = 0;
 8008b76:	2300      	movs	r3, #0
 8008b78:	753b      	strb	r3, [r7, #20]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	if (restore_config)
 8008b7a:	79bb      	ldrb	r3, [r7, #6]
 8008b7c:	2b00      	cmp	r3, #0
 8008b7e:	d003      	beq.n	8008b88 <VL53L0X_perform_phase_calibration+0x34>
		SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 8008b80:	68fb      	ldr	r3, [r7, #12]
 8008b82:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 8008b86:	75bb      	strb	r3, [r7, #22]

	/* Run PhaseCal */
	Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0x02);
 8008b88:	2202      	movs	r2, #2
 8008b8a:	2101      	movs	r1, #1
 8008b8c:	68f8      	ldr	r0, [r7, #12]
 8008b8e:	f002 fc0b 	bl	800b3a8 <VL53L0X_WrByte>
 8008b92:	4603      	mov	r3, r0
 8008b94:	75fb      	strb	r3, [r7, #23]

	if (Status == VL53L0X_ERROR_NONE)
 8008b96:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008b9a:	2b00      	cmp	r3, #0
 8008b9c:	d105      	bne.n	8008baa <VL53L0X_perform_phase_calibration+0x56>
		Status = VL53L0X_perform_single_ref_calibration(Dev, 0x0);
 8008b9e:	2100      	movs	r1, #0
 8008ba0:	68f8      	ldr	r0, [r7, #12]
 8008ba2:	f7ff fe9c 	bl	80088de <VL53L0X_perform_single_ref_calibration>
 8008ba6:	4603      	mov	r3, r0
 8008ba8:	75fb      	strb	r3, [r7, #23]

	/* Read PhaseCal from device */
	if ((Status == VL53L0X_ERROR_NONE) && (get_data_enable == 1)) {
 8008baa:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008bae:	2b00      	cmp	r3, #0
 8008bb0:	d115      	bne.n	8008bde <VL53L0X_perform_phase_calibration+0x8a>
 8008bb2:	79fb      	ldrb	r3, [r7, #7]
 8008bb4:	2b01      	cmp	r3, #1
 8008bb6:	d112      	bne.n	8008bde <VL53L0X_perform_phase_calibration+0x8a>
		Status = VL53L0X_ref_calibration_io(Dev, 1,
 8008bb8:	7d39      	ldrb	r1, [r7, #20]
 8008bba:	7d7a      	ldrb	r2, [r7, #21]
 8008bbc:	2301      	movs	r3, #1
 8008bbe:	9303      	str	r3, [sp, #12]
 8008bc0:	2300      	movs	r3, #0
 8008bc2:	9302      	str	r3, [sp, #8]
 8008bc4:	68bb      	ldr	r3, [r7, #8]
 8008bc6:	9301      	str	r3, [sp, #4]
 8008bc8:	f107 0313 	add.w	r3, r7, #19
 8008bcc:	9300      	str	r3, [sp, #0]
 8008bce:	460b      	mov	r3, r1
 8008bd0:	2101      	movs	r1, #1
 8008bd2:	68f8      	ldr	r0, [r7, #12]
 8008bd4:	f7ff febe 	bl	8008954 <VL53L0X_ref_calibration_io>
 8008bd8:	4603      	mov	r3, r0
 8008bda:	75fb      	strb	r3, [r7, #23]
 8008bdc:	e002      	b.n	8008be4 <VL53L0X_perform_phase_calibration+0x90>
			VhvSettings, PhaseCal, /* Not used here */
			&VhvSettingsint, pPhaseCal,
			0, 1);
	} else
		*pPhaseCal = 0;
 8008bde:	68bb      	ldr	r3, [r7, #8]
 8008be0:	2200      	movs	r2, #0
 8008be2:	701a      	strb	r2, [r3, #0]


	if ((Status == VL53L0X_ERROR_NONE) && restore_config) {
 8008be4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008be8:	2b00      	cmp	r3, #0
 8008bea:	d112      	bne.n	8008c12 <VL53L0X_perform_phase_calibration+0xbe>
 8008bec:	79bb      	ldrb	r3, [r7, #6]
 8008bee:	2b00      	cmp	r3, #0
 8008bf0:	d00f      	beq.n	8008c12 <VL53L0X_perform_phase_calibration+0xbe>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8008bf2:	7dbb      	ldrb	r3, [r7, #22]
 8008bf4:	461a      	mov	r2, r3
 8008bf6:	2101      	movs	r1, #1
 8008bf8:	68f8      	ldr	r0, [r7, #12]
 8008bfa:	f002 fbd5 	bl	800b3a8 <VL53L0X_WrByte>
 8008bfe:	4603      	mov	r3, r0
 8008c00:	75fb      	strb	r3, [r7, #23]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 8008c02:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008c06:	2b00      	cmp	r3, #0
 8008c08:	d103      	bne.n	8008c12 <VL53L0X_perform_phase_calibration+0xbe>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 8008c0a:	68fb      	ldr	r3, [r7, #12]
 8008c0c:	7dba      	ldrb	r2, [r7, #22]
 8008c0e:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	return Status;
 8008c12:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008c16:	4618      	mov	r0, r3
 8008c18:	3718      	adds	r7, #24
 8008c1a:	46bd      	mov	sp, r7
 8008c1c:	bd80      	pop	{r7, pc}

08008c1e <VL53L0X_perform_ref_calibration>:

VL53L0X_Error VL53L0X_perform_ref_calibration(VL53L0X_DEV Dev,
	uint8_t *pVhvSettings, uint8_t *pPhaseCal, uint8_t get_data_enable)
{
 8008c1e:	b580      	push	{r7, lr}
 8008c20:	b086      	sub	sp, #24
 8008c22:	af00      	add	r7, sp, #0
 8008c24:	60f8      	str	r0, [r7, #12]
 8008c26:	60b9      	str	r1, [r7, #8]
 8008c28:	607a      	str	r2, [r7, #4]
 8008c2a:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008c2c:	2300      	movs	r3, #0
 8008c2e:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 8008c30:	2300      	movs	r3, #0
 8008c32:	75bb      	strb	r3, [r7, #22]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 8008c34:	68fb      	ldr	r3, [r7, #12]
 8008c36:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 8008c3a:	75bb      	strb	r3, [r7, #22]

	/* In the following function we don't save the config to optimize
	 * writes on device. Config is saved and restored only once. */
	Status = VL53L0X_perform_vhv_calibration(
 8008c3c:	78fa      	ldrb	r2, [r7, #3]
 8008c3e:	2300      	movs	r3, #0
 8008c40:	68b9      	ldr	r1, [r7, #8]
 8008c42:	68f8      	ldr	r0, [r7, #12]
 8008c44:	f7ff ff1f 	bl	8008a86 <VL53L0X_perform_vhv_calibration>
 8008c48:	4603      	mov	r3, r0
 8008c4a:	75fb      	strb	r3, [r7, #23]
			Dev, pVhvSettings, get_data_enable, 0);


	if (Status == VL53L0X_ERROR_NONE)
 8008c4c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008c50:	2b00      	cmp	r3, #0
 8008c52:	d107      	bne.n	8008c64 <VL53L0X_perform_ref_calibration+0x46>
		Status = VL53L0X_perform_phase_calibration(
 8008c54:	78fa      	ldrb	r2, [r7, #3]
 8008c56:	2300      	movs	r3, #0
 8008c58:	6879      	ldr	r1, [r7, #4]
 8008c5a:	68f8      	ldr	r0, [r7, #12]
 8008c5c:	f7ff ff7a 	bl	8008b54 <VL53L0X_perform_phase_calibration>
 8008c60:	4603      	mov	r3, r0
 8008c62:	75fb      	strb	r3, [r7, #23]
			Dev, pPhaseCal, get_data_enable, 0);


	if (Status == VL53L0X_ERROR_NONE) {
 8008c64:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008c68:	2b00      	cmp	r3, #0
 8008c6a:	d10f      	bne.n	8008c8c <VL53L0X_perform_ref_calibration+0x6e>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8008c6c:	7dbb      	ldrb	r3, [r7, #22]
 8008c6e:	461a      	mov	r2, r3
 8008c70:	2101      	movs	r1, #1
 8008c72:	68f8      	ldr	r0, [r7, #12]
 8008c74:	f002 fb98 	bl	800b3a8 <VL53L0X_WrByte>
 8008c78:	4603      	mov	r3, r0
 8008c7a:	75fb      	strb	r3, [r7, #23]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 8008c7c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008c80:	2b00      	cmp	r3, #0
 8008c82:	d103      	bne.n	8008c8c <VL53L0X_perform_ref_calibration+0x6e>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 8008c84:	68fb      	ldr	r3, [r7, #12]
 8008c86:	7dba      	ldrb	r2, [r7, #22]
 8008c88:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	return Status;
 8008c8c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008c90:	4618      	mov	r0, r3
 8008c92:	3718      	adds	r7, #24
 8008c94:	46bd      	mov	sp, r7
 8008c96:	bd80      	pop	{r7, pc}

08008c98 <VL53L0X_measurement_poll_for_completion>:
	}
	return Status;
}

VL53L0X_Error VL53L0X_measurement_poll_for_completion(VL53L0X_DEV Dev)
{
 8008c98:	b580      	push	{r7, lr}
 8008c9a:	b086      	sub	sp, #24
 8008c9c:	af00      	add	r7, sp, #0
 8008c9e:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008ca0:	2300      	movs	r3, #0
 8008ca2:	75fb      	strb	r3, [r7, #23]
	uint8_t NewDataReady = 0;
 8008ca4:	2300      	movs	r3, #0
 8008ca6:	73fb      	strb	r3, [r7, #15]
	uint32_t LoopNb;

	LOG_FUNCTION_START("");

	LoopNb = 0;
 8008ca8:	2300      	movs	r3, #0
 8008caa:	613b      	str	r3, [r7, #16]

	do {
		Status = VL53L0X_GetMeasurementDataReady(Dev, &NewDataReady);
 8008cac:	f107 030f 	add.w	r3, r7, #15
 8008cb0:	4619      	mov	r1, r3
 8008cb2:	6878      	ldr	r0, [r7, #4]
 8008cb4:	f7fe fdd2 	bl	800785c <VL53L0X_GetMeasurementDataReady>
 8008cb8:	4603      	mov	r3, r0
 8008cba:	75fb      	strb	r3, [r7, #23]
		if (Status != 0)
 8008cbc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008cc0:	2b00      	cmp	r3, #0
 8008cc2:	d110      	bne.n	8008ce6 <VL53L0X_measurement_poll_for_completion+0x4e>
			break; /* the error is set */

		if (NewDataReady == 1)
 8008cc4:	7bfb      	ldrb	r3, [r7, #15]
 8008cc6:	2b01      	cmp	r3, #1
 8008cc8:	d00f      	beq.n	8008cea <VL53L0X_measurement_poll_for_completion+0x52>
			break; /* done note that status == 0 */

		LoopNb++;
 8008cca:	693b      	ldr	r3, [r7, #16]
 8008ccc:	3301      	adds	r3, #1
 8008cce:	613b      	str	r3, [r7, #16]
		if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP) {
 8008cd0:	693b      	ldr	r3, [r7, #16]
 8008cd2:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8008cd6:	d302      	bcc.n	8008cde <VL53L0X_measurement_poll_for_completion+0x46>
			Status = VL53L0X_ERROR_TIME_OUT;
 8008cd8:	23f9      	movs	r3, #249	; 0xf9
 8008cda:	75fb      	strb	r3, [r7, #23]
			break;
 8008cdc:	e006      	b.n	8008cec <VL53L0X_measurement_poll_for_completion+0x54>
		}

		VL53L0X_PollingDelay(Dev);
 8008cde:	6878      	ldr	r0, [r7, #4]
 8008ce0:	f002 fc82 	bl	800b5e8 <VL53L0X_PollingDelay>
		Status = VL53L0X_GetMeasurementDataReady(Dev, &NewDataReady);
 8008ce4:	e7e2      	b.n	8008cac <VL53L0X_measurement_poll_for_completion+0x14>
			break; /* the error is set */
 8008ce6:	bf00      	nop
 8008ce8:	e000      	b.n	8008cec <VL53L0X_measurement_poll_for_completion+0x54>
			break; /* done note that status == 0 */
 8008cea:	bf00      	nop
	} while (1);

	LOG_FUNCTION_END(Status);

	return Status;
 8008cec:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008cf0:	4618      	mov	r0, r3
 8008cf2:	3718      	adds	r7, #24
 8008cf4:	46bd      	mov	sp, r7
 8008cf6:	bd80      	pop	{r7, pc}

08008cf8 <VL53L0X_decode_vcsel_period>:


uint8_t VL53L0X_decode_vcsel_period(uint8_t vcsel_period_reg)
{
 8008cf8:	b480      	push	{r7}
 8008cfa:	b085      	sub	sp, #20
 8008cfc:	af00      	add	r7, sp, #0
 8008cfe:	4603      	mov	r3, r0
 8008d00:	71fb      	strb	r3, [r7, #7]
	/*!
	 * Converts the encoded VCSEL period register value into the real
	 * period in PLL clocks
	 */

	uint8_t vcsel_period_pclks = 0;
 8008d02:	2300      	movs	r3, #0
 8008d04:	73fb      	strb	r3, [r7, #15]

	vcsel_period_pclks = (vcsel_period_reg + 1) << 1;
 8008d06:	79fb      	ldrb	r3, [r7, #7]
 8008d08:	3301      	adds	r3, #1
 8008d0a:	b2db      	uxtb	r3, r3
 8008d0c:	005b      	lsls	r3, r3, #1
 8008d0e:	73fb      	strb	r3, [r7, #15]

	return vcsel_period_pclks;
 8008d10:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d12:	4618      	mov	r0, r3
 8008d14:	3714      	adds	r7, #20
 8008d16:	46bd      	mov	sp, r7
 8008d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d1c:	4770      	bx	lr

08008d1e <VL53L0X_encode_vcsel_period>:

uint8_t VL53L0X_encode_vcsel_period(uint8_t vcsel_period_pclks)
{
 8008d1e:	b480      	push	{r7}
 8008d20:	b085      	sub	sp, #20
 8008d22:	af00      	add	r7, sp, #0
 8008d24:	4603      	mov	r3, r0
 8008d26:	71fb      	strb	r3, [r7, #7]
	/*!
	 * Converts the encoded VCSEL period register value into the real period
	 * in PLL clocks
	 */

	uint8_t vcsel_period_reg = 0;
 8008d28:	2300      	movs	r3, #0
 8008d2a:	73fb      	strb	r3, [r7, #15]

	vcsel_period_reg = (vcsel_period_pclks >> 1) - 1;
 8008d2c:	79fb      	ldrb	r3, [r7, #7]
 8008d2e:	085b      	lsrs	r3, r3, #1
 8008d30:	b2db      	uxtb	r3, r3
 8008d32:	3b01      	subs	r3, #1
 8008d34:	73fb      	strb	r3, [r7, #15]

	return vcsel_period_reg;
 8008d36:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d38:	4618      	mov	r0, r3
 8008d3a:	3714      	adds	r7, #20
 8008d3c:	46bd      	mov	sp, r7
 8008d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d42:	4770      	bx	lr

08008d44 <VL53L0X_isqrt>:


uint32_t VL53L0X_isqrt(uint32_t num)
{
 8008d44:	b480      	push	{r7}
 8008d46:	b085      	sub	sp, #20
 8008d48:	af00      	add	r7, sp, #0
 8008d4a:	6078      	str	r0, [r7, #4]
	 * Implements an integer square root
	 *
	 * From: http://en.wikipedia.org/wiki/Methods_of_computing_square_roots
	 */

	uint32_t  res = 0;
 8008d4c:	2300      	movs	r3, #0
 8008d4e:	60fb      	str	r3, [r7, #12]
	uint32_t  bit = 1 << 30;
 8008d50:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8008d54:	60bb      	str	r3, [r7, #8]
	/* The second-to-top bit is set:
	 *	1 << 14 for 16-bits, 1 << 30 for 32 bits */

	 /* "bit" starts at the highest power of four <= the argument. */
	while (bit > num)
 8008d56:	e002      	b.n	8008d5e <VL53L0X_isqrt+0x1a>
		bit >>= 2;
 8008d58:	68bb      	ldr	r3, [r7, #8]
 8008d5a:	089b      	lsrs	r3, r3, #2
 8008d5c:	60bb      	str	r3, [r7, #8]
	while (bit > num)
 8008d5e:	68ba      	ldr	r2, [r7, #8]
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	429a      	cmp	r2, r3
 8008d64:	d8f8      	bhi.n	8008d58 <VL53L0X_isqrt+0x14>


	while (bit != 0) {
 8008d66:	e017      	b.n	8008d98 <VL53L0X_isqrt+0x54>
		if (num >= res + bit) {
 8008d68:	68fa      	ldr	r2, [r7, #12]
 8008d6a:	68bb      	ldr	r3, [r7, #8]
 8008d6c:	4413      	add	r3, r2
 8008d6e:	687a      	ldr	r2, [r7, #4]
 8008d70:	429a      	cmp	r2, r3
 8008d72:	d30b      	bcc.n	8008d8c <VL53L0X_isqrt+0x48>
			num -= res + bit;
 8008d74:	68fa      	ldr	r2, [r7, #12]
 8008d76:	68bb      	ldr	r3, [r7, #8]
 8008d78:	4413      	add	r3, r2
 8008d7a:	687a      	ldr	r2, [r7, #4]
 8008d7c:	1ad3      	subs	r3, r2, r3
 8008d7e:	607b      	str	r3, [r7, #4]
			res = (res >> 1) + bit;
 8008d80:	68fb      	ldr	r3, [r7, #12]
 8008d82:	085b      	lsrs	r3, r3, #1
 8008d84:	68ba      	ldr	r2, [r7, #8]
 8008d86:	4413      	add	r3, r2
 8008d88:	60fb      	str	r3, [r7, #12]
 8008d8a:	e002      	b.n	8008d92 <VL53L0X_isqrt+0x4e>
		} else
			res >>= 1;
 8008d8c:	68fb      	ldr	r3, [r7, #12]
 8008d8e:	085b      	lsrs	r3, r3, #1
 8008d90:	60fb      	str	r3, [r7, #12]

		bit >>= 2;
 8008d92:	68bb      	ldr	r3, [r7, #8]
 8008d94:	089b      	lsrs	r3, r3, #2
 8008d96:	60bb      	str	r3, [r7, #8]
	while (bit != 0) {
 8008d98:	68bb      	ldr	r3, [r7, #8]
 8008d9a:	2b00      	cmp	r3, #0
 8008d9c:	d1e4      	bne.n	8008d68 <VL53L0X_isqrt+0x24>
	}

	return res;
 8008d9e:	68fb      	ldr	r3, [r7, #12]
}
 8008da0:	4618      	mov	r0, r3
 8008da2:	3714      	adds	r7, #20
 8008da4:	46bd      	mov	sp, r7
 8008da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008daa:	4770      	bx	lr

08008dac <VL53L0X_device_read_strobe>:
	return res;
}


VL53L0X_Error VL53L0X_device_read_strobe(VL53L0X_DEV Dev)
{
 8008dac:	b580      	push	{r7, lr}
 8008dae:	b086      	sub	sp, #24
 8008db0:	af00      	add	r7, sp, #0
 8008db2:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008db4:	2300      	movs	r3, #0
 8008db6:	75fb      	strb	r3, [r7, #23]
	uint8_t strobe;
	uint32_t LoopNb;
	LOG_FUNCTION_START("");

	Status |= VL53L0X_WrByte(Dev, 0x83, 0x00);
 8008db8:	2200      	movs	r2, #0
 8008dba:	2183      	movs	r1, #131	; 0x83
 8008dbc:	6878      	ldr	r0, [r7, #4]
 8008dbe:	f002 faf3 	bl	800b3a8 <VL53L0X_WrByte>
 8008dc2:	4603      	mov	r3, r0
 8008dc4:	461a      	mov	r2, r3
 8008dc6:	7dfb      	ldrb	r3, [r7, #23]
 8008dc8:	4313      	orrs	r3, r2
 8008dca:	75fb      	strb	r3, [r7, #23]

	/* polling
	 * use timeout to avoid deadlock*/
	if (Status == VL53L0X_ERROR_NONE) {
 8008dcc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008dd0:	2b00      	cmp	r3, #0
 8008dd2:	d11e      	bne.n	8008e12 <VL53L0X_device_read_strobe+0x66>
		LoopNb = 0;
 8008dd4:	2300      	movs	r3, #0
 8008dd6:	613b      	str	r3, [r7, #16]
		do {
			Status = VL53L0X_RdByte(Dev, 0x83, &strobe);
 8008dd8:	f107 030f 	add.w	r3, r7, #15
 8008ddc:	461a      	mov	r2, r3
 8008dde:	2183      	movs	r1, #131	; 0x83
 8008de0:	6878      	ldr	r0, [r7, #4]
 8008de2:	f002 fb63 	bl	800b4ac <VL53L0X_RdByte>
 8008de6:	4603      	mov	r3, r0
 8008de8:	75fb      	strb	r3, [r7, #23]
			if ((strobe != 0x00) || Status != VL53L0X_ERROR_NONE)
 8008dea:	7bfb      	ldrb	r3, [r7, #15]
 8008dec:	2b00      	cmp	r3, #0
 8008dee:	d10a      	bne.n	8008e06 <VL53L0X_device_read_strobe+0x5a>
 8008df0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008df4:	2b00      	cmp	r3, #0
 8008df6:	d106      	bne.n	8008e06 <VL53L0X_device_read_strobe+0x5a>
					break;

			LoopNb = LoopNb + 1;
 8008df8:	693b      	ldr	r3, [r7, #16]
 8008dfa:	3301      	adds	r3, #1
 8008dfc:	613b      	str	r3, [r7, #16]
		} while (LoopNb < VL53L0X_DEFAULT_MAX_LOOP);
 8008dfe:	693b      	ldr	r3, [r7, #16]
 8008e00:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8008e04:	d3e8      	bcc.n	8008dd8 <VL53L0X_device_read_strobe+0x2c>

		if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP)
 8008e06:	693b      	ldr	r3, [r7, #16]
 8008e08:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8008e0c:	d301      	bcc.n	8008e12 <VL53L0X_device_read_strobe+0x66>
			Status = VL53L0X_ERROR_TIME_OUT;
 8008e0e:	23f9      	movs	r3, #249	; 0xf9
 8008e10:	75fb      	strb	r3, [r7, #23]

	}

	Status |= VL53L0X_WrByte(Dev, 0x83, 0x01);
 8008e12:	2201      	movs	r2, #1
 8008e14:	2183      	movs	r1, #131	; 0x83
 8008e16:	6878      	ldr	r0, [r7, #4]
 8008e18:	f002 fac6 	bl	800b3a8 <VL53L0X_WrByte>
 8008e1c:	4603      	mov	r3, r0
 8008e1e:	461a      	mov	r2, r3
 8008e20:	7dfb      	ldrb	r3, [r7, #23]
 8008e22:	4313      	orrs	r3, r2
 8008e24:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_END(Status);
	return Status;
 8008e26:	f997 3017 	ldrsb.w	r3, [r7, #23]

}
 8008e2a:	4618      	mov	r0, r3
 8008e2c:	3718      	adds	r7, #24
 8008e2e:	46bd      	mov	sp, r7
 8008e30:	bd80      	pop	{r7, pc}

08008e32 <VL53L0X_get_info_from_device>:

VL53L0X_Error VL53L0X_get_info_from_device(VL53L0X_DEV Dev, uint8_t option)
{
 8008e32:	b580      	push	{r7, lr}
 8008e34:	b098      	sub	sp, #96	; 0x60
 8008e36:	af00      	add	r7, sp, #0
 8008e38:	6078      	str	r0, [r7, #4]
 8008e3a:	460b      	mov	r3, r1
 8008e3c:	70fb      	strb	r3, [r7, #3]

	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008e3e:	2300      	movs	r3, #0
 8008e40:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	uint8_t byte;
	uint32_t TmpDWord;
	uint8_t ModuleId;
	uint8_t Revision;
	uint8_t ReferenceSpadCount = 0;
 8008e44:	2300      	movs	r3, #0
 8008e46:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
	uint8_t ReferenceSpadType = 0;
 8008e4a:	2300      	movs	r3, #0
 8008e4c:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
	uint32_t PartUIDUpper = 0;
 8008e50:	2300      	movs	r3, #0
 8008e52:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t PartUIDLower = 0;
 8008e54:	2300      	movs	r3, #0
 8008e56:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t OffsetFixed1104_mm = 0;
 8008e58:	2300      	movs	r3, #0
 8008e5a:	64bb      	str	r3, [r7, #72]	; 0x48
	int16_t OffsetMicroMeters = 0;
 8008e5c:	2300      	movs	r3, #0
 8008e5e:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
	uint32_t DistMeasTgtFixed1104_mm = 400 << 4;
 8008e62:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 8008e66:	647b      	str	r3, [r7, #68]	; 0x44
	uint32_t DistMeasFixed1104_400_mm = 0;
 8008e68:	2300      	movs	r3, #0
 8008e6a:	657b      	str	r3, [r7, #84]	; 0x54
	uint32_t SignalRateMeasFixed1104_400_mm = 0;
 8008e6c:	2300      	movs	r3, #0
 8008e6e:	653b      	str	r3, [r7, #80]	; 0x50
	char ProductId[19];
	char *ProductId_tmp;
	uint8_t ReadDataFromDeviceDone;
	FixPoint1616_t SignalRateMeasFixed400mmFix = 0;
 8008e70:	2300      	movs	r3, #0
 8008e72:	643b      	str	r3, [r7, #64]	; 0x40
	int i;


	LOG_FUNCTION_START("");

	ReadDataFromDeviceDone = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	f893 30f0 	ldrb.w	r3, [r3, #240]	; 0xf0
 8008e7a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			ReadDataFromDeviceDone);

	/* This access is done only once after that a GetDeviceInfo or
	 * datainit is done*/
	if (ReadDataFromDeviceDone != 7) {
 8008e7e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8008e82:	2b07      	cmp	r3, #7
 8008e84:	f000 8408 	beq.w	8009698 <VL53L0X_get_info_from_device+0x866>

		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 8008e88:	2201      	movs	r2, #1
 8008e8a:	2180      	movs	r1, #128	; 0x80
 8008e8c:	6878      	ldr	r0, [r7, #4]
 8008e8e:	f002 fa8b 	bl	800b3a8 <VL53L0X_WrByte>
 8008e92:	4603      	mov	r3, r0
 8008e94:	461a      	mov	r2, r3
 8008e96:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008e9a:	4313      	orrs	r3, r2
 8008e9c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8008ea0:	2201      	movs	r2, #1
 8008ea2:	21ff      	movs	r1, #255	; 0xff
 8008ea4:	6878      	ldr	r0, [r7, #4]
 8008ea6:	f002 fa7f 	bl	800b3a8 <VL53L0X_WrByte>
 8008eaa:	4603      	mov	r3, r0
 8008eac:	461a      	mov	r2, r3
 8008eae:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008eb2:	4313      	orrs	r3, r2
 8008eb4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 8008eb8:	2200      	movs	r2, #0
 8008eba:	2100      	movs	r1, #0
 8008ebc:	6878      	ldr	r0, [r7, #4]
 8008ebe:	f002 fa73 	bl	800b3a8 <VL53L0X_WrByte>
 8008ec2:	4603      	mov	r3, r0
 8008ec4:	461a      	mov	r2, r3
 8008ec6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008eca:	4313      	orrs	r3, r2
 8008ecc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x06);
 8008ed0:	2206      	movs	r2, #6
 8008ed2:	21ff      	movs	r1, #255	; 0xff
 8008ed4:	6878      	ldr	r0, [r7, #4]
 8008ed6:	f002 fa67 	bl	800b3a8 <VL53L0X_WrByte>
 8008eda:	4603      	mov	r3, r0
 8008edc:	461a      	mov	r2, r3
 8008ede:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008ee2:	4313      	orrs	r3, r2
 8008ee4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_RdByte(Dev, 0x83, &byte);
 8008ee8:	f107 0337 	add.w	r3, r7, #55	; 0x37
 8008eec:	461a      	mov	r2, r3
 8008eee:	2183      	movs	r1, #131	; 0x83
 8008ef0:	6878      	ldr	r0, [r7, #4]
 8008ef2:	f002 fadb 	bl	800b4ac <VL53L0X_RdByte>
 8008ef6:	4603      	mov	r3, r0
 8008ef8:	461a      	mov	r2, r3
 8008efa:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008efe:	4313      	orrs	r3, r2
 8008f00:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x83, byte|4);
 8008f04:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008f08:	f043 0304 	orr.w	r3, r3, #4
 8008f0c:	b2db      	uxtb	r3, r3
 8008f0e:	461a      	mov	r2, r3
 8008f10:	2183      	movs	r1, #131	; 0x83
 8008f12:	6878      	ldr	r0, [r7, #4]
 8008f14:	f002 fa48 	bl	800b3a8 <VL53L0X_WrByte>
 8008f18:	4603      	mov	r3, r0
 8008f1a:	461a      	mov	r2, r3
 8008f1c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008f20:	4313      	orrs	r3, r2
 8008f22:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x07);
 8008f26:	2207      	movs	r2, #7
 8008f28:	21ff      	movs	r1, #255	; 0xff
 8008f2a:	6878      	ldr	r0, [r7, #4]
 8008f2c:	f002 fa3c 	bl	800b3a8 <VL53L0X_WrByte>
 8008f30:	4603      	mov	r3, r0
 8008f32:	461a      	mov	r2, r3
 8008f34:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008f38:	4313      	orrs	r3, r2
 8008f3a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x81, 0x01);
 8008f3e:	2201      	movs	r2, #1
 8008f40:	2181      	movs	r1, #129	; 0x81
 8008f42:	6878      	ldr	r0, [r7, #4]
 8008f44:	f002 fa30 	bl	800b3a8 <VL53L0X_WrByte>
 8008f48:	4603      	mov	r3, r0
 8008f4a:	461a      	mov	r2, r3
 8008f4c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008f50:	4313      	orrs	r3, r2
 8008f52:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_PollingDelay(Dev);
 8008f56:	6878      	ldr	r0, [r7, #4]
 8008f58:	f002 fb46 	bl	800b5e8 <VL53L0X_PollingDelay>
 8008f5c:	4603      	mov	r3, r0
 8008f5e:	461a      	mov	r2, r3
 8008f60:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008f64:	4313      	orrs	r3, r2
 8008f66:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 8008f6a:	2201      	movs	r2, #1
 8008f6c:	2180      	movs	r1, #128	; 0x80
 8008f6e:	6878      	ldr	r0, [r7, #4]
 8008f70:	f002 fa1a 	bl	800b3a8 <VL53L0X_WrByte>
 8008f74:	4603      	mov	r3, r0
 8008f76:	461a      	mov	r2, r3
 8008f78:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008f7c:	4313      	orrs	r3, r2
 8008f7e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		if (((option & 1) == 1) &&
 8008f82:	78fb      	ldrb	r3, [r7, #3]
 8008f84:	f003 0301 	and.w	r3, r3, #1
 8008f88:	2b00      	cmp	r3, #0
 8008f8a:	f000 8098 	beq.w	80090be <VL53L0X_get_info_from_device+0x28c>
			((ReadDataFromDeviceDone & 1) == 0)) {
 8008f8e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8008f92:	f003 0301 	and.w	r3, r3, #1
		if (((option & 1) == 1) &&
 8008f96:	2b00      	cmp	r3, #0
 8008f98:	f040 8091 	bne.w	80090be <VL53L0X_get_info_from_device+0x28c>
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x6b);
 8008f9c:	226b      	movs	r2, #107	; 0x6b
 8008f9e:	2194      	movs	r1, #148	; 0x94
 8008fa0:	6878      	ldr	r0, [r7, #4]
 8008fa2:	f002 fa01 	bl	800b3a8 <VL53L0X_WrByte>
 8008fa6:	4603      	mov	r3, r0
 8008fa8:	461a      	mov	r2, r3
 8008faa:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008fae:	4313      	orrs	r3, r2
 8008fb0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8008fb4:	6878      	ldr	r0, [r7, #4]
 8008fb6:	f7ff fef9 	bl	8008dac <VL53L0X_device_read_strobe>
 8008fba:	4603      	mov	r3, r0
 8008fbc:	461a      	mov	r2, r3
 8008fbe:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008fc2:	4313      	orrs	r3, r2
 8008fc4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8008fc8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8008fcc:	461a      	mov	r2, r3
 8008fce:	2190      	movs	r1, #144	; 0x90
 8008fd0:	6878      	ldr	r0, [r7, #4]
 8008fd2:	f002 facd 	bl	800b570 <VL53L0X_RdDWord>
 8008fd6:	4603      	mov	r3, r0
 8008fd8:	461a      	mov	r2, r3
 8008fda:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008fde:	4313      	orrs	r3, r2
 8008fe0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ReferenceSpadCount = (uint8_t)((TmpDWord >> 8) & 0x07f);
 8008fe4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fe6:	0a1b      	lsrs	r3, r3, #8
 8008fe8:	b2db      	uxtb	r3, r3
 8008fea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008fee:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
			ReferenceSpadType  = (uint8_t)((TmpDWord >> 15) & 0x01);
 8008ff2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ff4:	0bdb      	lsrs	r3, r3, #15
 8008ff6:	b2db      	uxtb	r3, r3
 8008ff8:	f003 0301 	and.w	r3, r3, #1
 8008ffc:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x24);
 8009000:	2224      	movs	r2, #36	; 0x24
 8009002:	2194      	movs	r1, #148	; 0x94
 8009004:	6878      	ldr	r0, [r7, #4]
 8009006:	f002 f9cf 	bl	800b3a8 <VL53L0X_WrByte>
 800900a:	4603      	mov	r3, r0
 800900c:	461a      	mov	r2, r3
 800900e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009012:	4313      	orrs	r3, r2
 8009014:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8009018:	6878      	ldr	r0, [r7, #4]
 800901a:	f7ff fec7 	bl	8008dac <VL53L0X_device_read_strobe>
 800901e:	4603      	mov	r3, r0
 8009020:	461a      	mov	r2, r3
 8009022:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009026:	4313      	orrs	r3, r2
 8009028:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800902c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8009030:	461a      	mov	r2, r3
 8009032:	2190      	movs	r1, #144	; 0x90
 8009034:	6878      	ldr	r0, [r7, #4]
 8009036:	f002 fa9b 	bl	800b570 <VL53L0X_RdDWord>
 800903a:	4603      	mov	r3, r0
 800903c:	461a      	mov	r2, r3
 800903e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009042:	4313      	orrs	r3, r2
 8009044:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f


			NvmRefGoodSpadMap[0] = (uint8_t)((TmpDWord >> 24)
 8009048:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800904a:	0e1b      	lsrs	r3, r3, #24
 800904c:	b2db      	uxtb	r3, r3
 800904e:	723b      	strb	r3, [r7, #8]
				& 0xff);
			NvmRefGoodSpadMap[1] = (uint8_t)((TmpDWord >> 16)
 8009050:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009052:	0c1b      	lsrs	r3, r3, #16
 8009054:	b2db      	uxtb	r3, r3
 8009056:	727b      	strb	r3, [r7, #9]
				& 0xff);
			NvmRefGoodSpadMap[2] = (uint8_t)((TmpDWord >> 8)
 8009058:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800905a:	0a1b      	lsrs	r3, r3, #8
 800905c:	b2db      	uxtb	r3, r3
 800905e:	72bb      	strb	r3, [r7, #10]
				& 0xff);
			NvmRefGoodSpadMap[3] = (uint8_t)(TmpDWord & 0xff);
 8009060:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009062:	b2db      	uxtb	r3, r3
 8009064:	72fb      	strb	r3, [r7, #11]

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x25);
 8009066:	2225      	movs	r2, #37	; 0x25
 8009068:	2194      	movs	r1, #148	; 0x94
 800906a:	6878      	ldr	r0, [r7, #4]
 800906c:	f002 f99c 	bl	800b3a8 <VL53L0X_WrByte>
 8009070:	4603      	mov	r3, r0
 8009072:	461a      	mov	r2, r3
 8009074:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009078:	4313      	orrs	r3, r2
 800907a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800907e:	6878      	ldr	r0, [r7, #4]
 8009080:	f7ff fe94 	bl	8008dac <VL53L0X_device_read_strobe>
 8009084:	4603      	mov	r3, r0
 8009086:	461a      	mov	r2, r3
 8009088:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800908c:	4313      	orrs	r3, r2
 800908e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8009092:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8009096:	461a      	mov	r2, r3
 8009098:	2190      	movs	r1, #144	; 0x90
 800909a:	6878      	ldr	r0, [r7, #4]
 800909c:	f002 fa68 	bl	800b570 <VL53L0X_RdDWord>
 80090a0:	4603      	mov	r3, r0
 80090a2:	461a      	mov	r2, r3
 80090a4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80090a8:	4313      	orrs	r3, r2
 80090aa:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			NvmRefGoodSpadMap[4] = (uint8_t)((TmpDWord >> 24)
 80090ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090b0:	0e1b      	lsrs	r3, r3, #24
 80090b2:	b2db      	uxtb	r3, r3
 80090b4:	733b      	strb	r3, [r7, #12]
				& 0xff);
			NvmRefGoodSpadMap[5] = (uint8_t)((TmpDWord >> 16)
 80090b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090b8:	0c1b      	lsrs	r3, r3, #16
 80090ba:	b2db      	uxtb	r3, r3
 80090bc:	737b      	strb	r3, [r7, #13]
				& 0xff);
		}

		if (((option & 2) == 2) &&
 80090be:	78fb      	ldrb	r3, [r7, #3]
 80090c0:	f003 0302 	and.w	r3, r3, #2
 80090c4:	2b00      	cmp	r3, #0
 80090c6:	f000 8189 	beq.w	80093dc <VL53L0X_get_info_from_device+0x5aa>
			((ReadDataFromDeviceDone & 2) == 0)) {
 80090ca:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80090ce:	f003 0302 	and.w	r3, r3, #2
		if (((option & 2) == 2) &&
 80090d2:	2b00      	cmp	r3, #0
 80090d4:	f040 8182 	bne.w	80093dc <VL53L0X_get_info_from_device+0x5aa>

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x02);
 80090d8:	2202      	movs	r2, #2
 80090da:	2194      	movs	r1, #148	; 0x94
 80090dc:	6878      	ldr	r0, [r7, #4]
 80090de:	f002 f963 	bl	800b3a8 <VL53L0X_WrByte>
 80090e2:	4603      	mov	r3, r0
 80090e4:	461a      	mov	r2, r3
 80090e6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80090ea:	4313      	orrs	r3, r2
 80090ec:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 80090f0:	6878      	ldr	r0, [r7, #4]
 80090f2:	f7ff fe5b 	bl	8008dac <VL53L0X_device_read_strobe>
 80090f6:	4603      	mov	r3, r0
 80090f8:	461a      	mov	r2, r3
 80090fa:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80090fe:	4313      	orrs	r3, r2
 8009100:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdByte(Dev, 0x90, &ModuleId);
 8009104:	f107 032f 	add.w	r3, r7, #47	; 0x2f
 8009108:	461a      	mov	r2, r3
 800910a:	2190      	movs	r1, #144	; 0x90
 800910c:	6878      	ldr	r0, [r7, #4]
 800910e:	f002 f9cd 	bl	800b4ac <VL53L0X_RdByte>
 8009112:	4603      	mov	r3, r0
 8009114:	461a      	mov	r2, r3
 8009116:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800911a:	4313      	orrs	r3, r2
 800911c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7B);
 8009120:	227b      	movs	r2, #123	; 0x7b
 8009122:	2194      	movs	r1, #148	; 0x94
 8009124:	6878      	ldr	r0, [r7, #4]
 8009126:	f002 f93f 	bl	800b3a8 <VL53L0X_WrByte>
 800912a:	4603      	mov	r3, r0
 800912c:	461a      	mov	r2, r3
 800912e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009132:	4313      	orrs	r3, r2
 8009134:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8009138:	6878      	ldr	r0, [r7, #4]
 800913a:	f7ff fe37 	bl	8008dac <VL53L0X_device_read_strobe>
 800913e:	4603      	mov	r3, r0
 8009140:	461a      	mov	r2, r3
 8009142:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009146:	4313      	orrs	r3, r2
 8009148:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdByte(Dev, 0x90, &Revision);
 800914c:	f107 032e 	add.w	r3, r7, #46	; 0x2e
 8009150:	461a      	mov	r2, r3
 8009152:	2190      	movs	r1, #144	; 0x90
 8009154:	6878      	ldr	r0, [r7, #4]
 8009156:	f002 f9a9 	bl	800b4ac <VL53L0X_RdByte>
 800915a:	4603      	mov	r3, r0
 800915c:	461a      	mov	r2, r3
 800915e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009162:	4313      	orrs	r3, r2
 8009164:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x77);
 8009168:	2277      	movs	r2, #119	; 0x77
 800916a:	2194      	movs	r1, #148	; 0x94
 800916c:	6878      	ldr	r0, [r7, #4]
 800916e:	f002 f91b 	bl	800b3a8 <VL53L0X_WrByte>
 8009172:	4603      	mov	r3, r0
 8009174:	461a      	mov	r2, r3
 8009176:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800917a:	4313      	orrs	r3, r2
 800917c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8009180:	6878      	ldr	r0, [r7, #4]
 8009182:	f7ff fe13 	bl	8008dac <VL53L0X_device_read_strobe>
 8009186:	4603      	mov	r3, r0
 8009188:	461a      	mov	r2, r3
 800918a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800918e:	4313      	orrs	r3, r2
 8009190:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8009194:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8009198:	461a      	mov	r2, r3
 800919a:	2190      	movs	r1, #144	; 0x90
 800919c:	6878      	ldr	r0, [r7, #4]
 800919e:	f002 f9e7 	bl	800b570 <VL53L0X_RdDWord>
 80091a2:	4603      	mov	r3, r0
 80091a4:	461a      	mov	r2, r3
 80091a6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80091aa:	4313      	orrs	r3, r2
 80091ac:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[0] = (char)((TmpDWord >> 25) & 0x07f);
 80091b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091b2:	0e5b      	lsrs	r3, r3, #25
 80091b4:	b2db      	uxtb	r3, r3
 80091b6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80091ba:	b2db      	uxtb	r3, r3
 80091bc:	743b      	strb	r3, [r7, #16]
			ProductId[1] = (char)((TmpDWord >> 18) & 0x07f);
 80091be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091c0:	0c9b      	lsrs	r3, r3, #18
 80091c2:	b2db      	uxtb	r3, r3
 80091c4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80091c8:	b2db      	uxtb	r3, r3
 80091ca:	747b      	strb	r3, [r7, #17]
			ProductId[2] = (char)((TmpDWord >> 11) & 0x07f);
 80091cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091ce:	0adb      	lsrs	r3, r3, #11
 80091d0:	b2db      	uxtb	r3, r3
 80091d2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80091d6:	b2db      	uxtb	r3, r3
 80091d8:	74bb      	strb	r3, [r7, #18]
			ProductId[3] = (char)((TmpDWord >> 4) & 0x07f);
 80091da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091dc:	091b      	lsrs	r3, r3, #4
 80091de:	b2db      	uxtb	r3, r3
 80091e0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80091e4:	b2db      	uxtb	r3, r3
 80091e6:	74fb      	strb	r3, [r7, #19]

			byte = (uint8_t)((TmpDWord & 0x00f) << 3);
 80091e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091ea:	b2db      	uxtb	r3, r3
 80091ec:	00db      	lsls	r3, r3, #3
 80091ee:	b2db      	uxtb	r3, r3
 80091f0:	f003 0378 	and.w	r3, r3, #120	; 0x78
 80091f4:	b2db      	uxtb	r3, r3
 80091f6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x78);
 80091fa:	2278      	movs	r2, #120	; 0x78
 80091fc:	2194      	movs	r1, #148	; 0x94
 80091fe:	6878      	ldr	r0, [r7, #4]
 8009200:	f002 f8d2 	bl	800b3a8 <VL53L0X_WrByte>
 8009204:	4603      	mov	r3, r0
 8009206:	461a      	mov	r2, r3
 8009208:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800920c:	4313      	orrs	r3, r2
 800920e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8009212:	6878      	ldr	r0, [r7, #4]
 8009214:	f7ff fdca 	bl	8008dac <VL53L0X_device_read_strobe>
 8009218:	4603      	mov	r3, r0
 800921a:	461a      	mov	r2, r3
 800921c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009220:	4313      	orrs	r3, r2
 8009222:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8009226:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800922a:	461a      	mov	r2, r3
 800922c:	2190      	movs	r1, #144	; 0x90
 800922e:	6878      	ldr	r0, [r7, #4]
 8009230:	f002 f99e 	bl	800b570 <VL53L0X_RdDWord>
 8009234:	4603      	mov	r3, r0
 8009236:	461a      	mov	r2, r3
 8009238:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800923c:	4313      	orrs	r3, r2
 800923e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[4] = (char)(byte +
					((TmpDWord >> 29) & 0x07f));
 8009242:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009244:	0f5b      	lsrs	r3, r3, #29
 8009246:	b2db      	uxtb	r3, r3
 8009248:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800924c:	b2da      	uxtb	r2, r3
			ProductId[4] = (char)(byte +
 800924e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009252:	4413      	add	r3, r2
 8009254:	b2db      	uxtb	r3, r3
 8009256:	753b      	strb	r3, [r7, #20]
			ProductId[5] = (char)((TmpDWord >> 22) & 0x07f);
 8009258:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800925a:	0d9b      	lsrs	r3, r3, #22
 800925c:	b2db      	uxtb	r3, r3
 800925e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009262:	b2db      	uxtb	r3, r3
 8009264:	757b      	strb	r3, [r7, #21]
			ProductId[6] = (char)((TmpDWord >> 15) & 0x07f);
 8009266:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009268:	0bdb      	lsrs	r3, r3, #15
 800926a:	b2db      	uxtb	r3, r3
 800926c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009270:	b2db      	uxtb	r3, r3
 8009272:	75bb      	strb	r3, [r7, #22]
			ProductId[7] = (char)((TmpDWord >> 8) & 0x07f);
 8009274:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009276:	0a1b      	lsrs	r3, r3, #8
 8009278:	b2db      	uxtb	r3, r3
 800927a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800927e:	b2db      	uxtb	r3, r3
 8009280:	75fb      	strb	r3, [r7, #23]
			ProductId[8] = (char)((TmpDWord >> 1) & 0x07f);
 8009282:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009284:	085b      	lsrs	r3, r3, #1
 8009286:	b2db      	uxtb	r3, r3
 8009288:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800928c:	b2db      	uxtb	r3, r3
 800928e:	763b      	strb	r3, [r7, #24]

			byte = (uint8_t)((TmpDWord & 0x001) << 6);
 8009290:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009292:	b2db      	uxtb	r3, r3
 8009294:	019b      	lsls	r3, r3, #6
 8009296:	b2db      	uxtb	r3, r3
 8009298:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800929c:	b2db      	uxtb	r3, r3
 800929e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x79);
 80092a2:	2279      	movs	r2, #121	; 0x79
 80092a4:	2194      	movs	r1, #148	; 0x94
 80092a6:	6878      	ldr	r0, [r7, #4]
 80092a8:	f002 f87e 	bl	800b3a8 <VL53L0X_WrByte>
 80092ac:	4603      	mov	r3, r0
 80092ae:	461a      	mov	r2, r3
 80092b0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80092b4:	4313      	orrs	r3, r2
 80092b6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_device_read_strobe(Dev);
 80092ba:	6878      	ldr	r0, [r7, #4]
 80092bc:	f7ff fd76 	bl	8008dac <VL53L0X_device_read_strobe>
 80092c0:	4603      	mov	r3, r0
 80092c2:	461a      	mov	r2, r3
 80092c4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80092c8:	4313      	orrs	r3, r2
 80092ca:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 80092ce:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80092d2:	461a      	mov	r2, r3
 80092d4:	2190      	movs	r1, #144	; 0x90
 80092d6:	6878      	ldr	r0, [r7, #4]
 80092d8:	f002 f94a 	bl	800b570 <VL53L0X_RdDWord>
 80092dc:	4603      	mov	r3, r0
 80092de:	461a      	mov	r2, r3
 80092e0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80092e4:	4313      	orrs	r3, r2
 80092e6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[9] = (char)(byte +
					((TmpDWord >> 26) & 0x07f));
 80092ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092ec:	0e9b      	lsrs	r3, r3, #26
 80092ee:	b2db      	uxtb	r3, r3
 80092f0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80092f4:	b2da      	uxtb	r2, r3
			ProductId[9] = (char)(byte +
 80092f6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80092fa:	4413      	add	r3, r2
 80092fc:	b2db      	uxtb	r3, r3
 80092fe:	767b      	strb	r3, [r7, #25]
			ProductId[10] = (char)((TmpDWord >> 19) & 0x07f);
 8009300:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009302:	0cdb      	lsrs	r3, r3, #19
 8009304:	b2db      	uxtb	r3, r3
 8009306:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800930a:	b2db      	uxtb	r3, r3
 800930c:	76bb      	strb	r3, [r7, #26]
			ProductId[11] = (char)((TmpDWord >> 12) & 0x07f);
 800930e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009310:	0b1b      	lsrs	r3, r3, #12
 8009312:	b2db      	uxtb	r3, r3
 8009314:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009318:	b2db      	uxtb	r3, r3
 800931a:	76fb      	strb	r3, [r7, #27]
			ProductId[12] = (char)((TmpDWord >> 5) & 0x07f);
 800931c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800931e:	095b      	lsrs	r3, r3, #5
 8009320:	b2db      	uxtb	r3, r3
 8009322:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009326:	b2db      	uxtb	r3, r3
 8009328:	773b      	strb	r3, [r7, #28]

			byte = (uint8_t)((TmpDWord & 0x01f) << 2);
 800932a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800932c:	b2db      	uxtb	r3, r3
 800932e:	009b      	lsls	r3, r3, #2
 8009330:	b2db      	uxtb	r3, r3
 8009332:	f003 037c 	and.w	r3, r3, #124	; 0x7c
 8009336:	b2db      	uxtb	r3, r3
 8009338:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7A);
 800933c:	227a      	movs	r2, #122	; 0x7a
 800933e:	2194      	movs	r1, #148	; 0x94
 8009340:	6878      	ldr	r0, [r7, #4]
 8009342:	f002 f831 	bl	800b3a8 <VL53L0X_WrByte>
 8009346:	4603      	mov	r3, r0
 8009348:	461a      	mov	r2, r3
 800934a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800934e:	4313      	orrs	r3, r2
 8009350:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_device_read_strobe(Dev);
 8009354:	6878      	ldr	r0, [r7, #4]
 8009356:	f7ff fd29 	bl	8008dac <VL53L0X_device_read_strobe>
 800935a:	4603      	mov	r3, r0
 800935c:	461a      	mov	r2, r3
 800935e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009362:	4313      	orrs	r3, r2
 8009364:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8009368:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800936c:	461a      	mov	r2, r3
 800936e:	2190      	movs	r1, #144	; 0x90
 8009370:	6878      	ldr	r0, [r7, #4]
 8009372:	f002 f8fd 	bl	800b570 <VL53L0X_RdDWord>
 8009376:	4603      	mov	r3, r0
 8009378:	461a      	mov	r2, r3
 800937a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800937e:	4313      	orrs	r3, r2
 8009380:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[13] = (char)(byte +
					((TmpDWord >> 30) & 0x07f));
 8009384:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009386:	0f9b      	lsrs	r3, r3, #30
 8009388:	b2db      	uxtb	r3, r3
 800938a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800938e:	b2da      	uxtb	r2, r3
			ProductId[13] = (char)(byte +
 8009390:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009394:	4413      	add	r3, r2
 8009396:	b2db      	uxtb	r3, r3
 8009398:	777b      	strb	r3, [r7, #29]
			ProductId[14] = (char)((TmpDWord >> 23) & 0x07f);
 800939a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800939c:	0ddb      	lsrs	r3, r3, #23
 800939e:	b2db      	uxtb	r3, r3
 80093a0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80093a4:	b2db      	uxtb	r3, r3
 80093a6:	77bb      	strb	r3, [r7, #30]
			ProductId[15] = (char)((TmpDWord >> 16) & 0x07f);
 80093a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093aa:	0c1b      	lsrs	r3, r3, #16
 80093ac:	b2db      	uxtb	r3, r3
 80093ae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80093b2:	b2db      	uxtb	r3, r3
 80093b4:	77fb      	strb	r3, [r7, #31]
			ProductId[16] = (char)((TmpDWord >> 9) & 0x07f);
 80093b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093b8:	0a5b      	lsrs	r3, r3, #9
 80093ba:	b2db      	uxtb	r3, r3
 80093bc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80093c0:	b2db      	uxtb	r3, r3
 80093c2:	f887 3020 	strb.w	r3, [r7, #32]
			ProductId[17] = (char)((TmpDWord >> 2) & 0x07f);
 80093c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093c8:	089b      	lsrs	r3, r3, #2
 80093ca:	b2db      	uxtb	r3, r3
 80093cc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80093d0:	b2db      	uxtb	r3, r3
 80093d2:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
			ProductId[18] = '\0';
 80093d6:	2300      	movs	r3, #0
 80093d8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

		}

		if (((option & 4) == 4) &&
 80093dc:	78fb      	ldrb	r3, [r7, #3]
 80093de:	f003 0304 	and.w	r3, r3, #4
 80093e2:	2b00      	cmp	r3, #0
 80093e4:	f000 80f1 	beq.w	80095ca <VL53L0X_get_info_from_device+0x798>
			((ReadDataFromDeviceDone & 4) == 0)) {
 80093e8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80093ec:	f003 0304 	and.w	r3, r3, #4
		if (((option & 4) == 4) &&
 80093f0:	2b00      	cmp	r3, #0
 80093f2:	f040 80ea 	bne.w	80095ca <VL53L0X_get_info_from_device+0x798>

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7B);
 80093f6:	227b      	movs	r2, #123	; 0x7b
 80093f8:	2194      	movs	r1, #148	; 0x94
 80093fa:	6878      	ldr	r0, [r7, #4]
 80093fc:	f001 ffd4 	bl	800b3a8 <VL53L0X_WrByte>
 8009400:	4603      	mov	r3, r0
 8009402:	461a      	mov	r2, r3
 8009404:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009408:	4313      	orrs	r3, r2
 800940a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800940e:	6878      	ldr	r0, [r7, #4]
 8009410:	f7ff fccc 	bl	8008dac <VL53L0X_device_read_strobe>
 8009414:	4603      	mov	r3, r0
 8009416:	461a      	mov	r2, r3
 8009418:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800941c:	4313      	orrs	r3, r2
 800941e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &PartUIDUpper);
 8009422:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8009426:	461a      	mov	r2, r3
 8009428:	2190      	movs	r1, #144	; 0x90
 800942a:	6878      	ldr	r0, [r7, #4]
 800942c:	f002 f8a0 	bl	800b570 <VL53L0X_RdDWord>
 8009430:	4603      	mov	r3, r0
 8009432:	461a      	mov	r2, r3
 8009434:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009438:	4313      	orrs	r3, r2
 800943a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7C);
 800943e:	227c      	movs	r2, #124	; 0x7c
 8009440:	2194      	movs	r1, #148	; 0x94
 8009442:	6878      	ldr	r0, [r7, #4]
 8009444:	f001 ffb0 	bl	800b3a8 <VL53L0X_WrByte>
 8009448:	4603      	mov	r3, r0
 800944a:	461a      	mov	r2, r3
 800944c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009450:	4313      	orrs	r3, r2
 8009452:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8009456:	6878      	ldr	r0, [r7, #4]
 8009458:	f7ff fca8 	bl	8008dac <VL53L0X_device_read_strobe>
 800945c:	4603      	mov	r3, r0
 800945e:	461a      	mov	r2, r3
 8009460:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009464:	4313      	orrs	r3, r2
 8009466:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &PartUIDLower);
 800946a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800946e:	461a      	mov	r2, r3
 8009470:	2190      	movs	r1, #144	; 0x90
 8009472:	6878      	ldr	r0, [r7, #4]
 8009474:	f002 f87c 	bl	800b570 <VL53L0X_RdDWord>
 8009478:	4603      	mov	r3, r0
 800947a:	461a      	mov	r2, r3
 800947c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009480:	4313      	orrs	r3, r2
 8009482:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x73);
 8009486:	2273      	movs	r2, #115	; 0x73
 8009488:	2194      	movs	r1, #148	; 0x94
 800948a:	6878      	ldr	r0, [r7, #4]
 800948c:	f001 ff8c 	bl	800b3a8 <VL53L0X_WrByte>
 8009490:	4603      	mov	r3, r0
 8009492:	461a      	mov	r2, r3
 8009494:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009498:	4313      	orrs	r3, r2
 800949a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800949e:	6878      	ldr	r0, [r7, #4]
 80094a0:	f7ff fc84 	bl	8008dac <VL53L0X_device_read_strobe>
 80094a4:	4603      	mov	r3, r0
 80094a6:	461a      	mov	r2, r3
 80094a8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80094ac:	4313      	orrs	r3, r2
 80094ae:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 80094b2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80094b6:	461a      	mov	r2, r3
 80094b8:	2190      	movs	r1, #144	; 0x90
 80094ba:	6878      	ldr	r0, [r7, #4]
 80094bc:	f002 f858 	bl	800b570 <VL53L0X_RdDWord>
 80094c0:	4603      	mov	r3, r0
 80094c2:	461a      	mov	r2, r3
 80094c4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80094c8:	4313      	orrs	r3, r2
 80094ca:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			SignalRateMeasFixed1104_400_mm = (TmpDWord &
				0x0000000ff) << 8;
 80094ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094d0:	021b      	lsls	r3, r3, #8
			SignalRateMeasFixed1104_400_mm = (TmpDWord &
 80094d2:	b29b      	uxth	r3, r3
 80094d4:	653b      	str	r3, [r7, #80]	; 0x50

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x74);
 80094d6:	2274      	movs	r2, #116	; 0x74
 80094d8:	2194      	movs	r1, #148	; 0x94
 80094da:	6878      	ldr	r0, [r7, #4]
 80094dc:	f001 ff64 	bl	800b3a8 <VL53L0X_WrByte>
 80094e0:	4603      	mov	r3, r0
 80094e2:	461a      	mov	r2, r3
 80094e4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80094e8:	4313      	orrs	r3, r2
 80094ea:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 80094ee:	6878      	ldr	r0, [r7, #4]
 80094f0:	f7ff fc5c 	bl	8008dac <VL53L0X_device_read_strobe>
 80094f4:	4603      	mov	r3, r0
 80094f6:	461a      	mov	r2, r3
 80094f8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80094fc:	4313      	orrs	r3, r2
 80094fe:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8009502:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8009506:	461a      	mov	r2, r3
 8009508:	2190      	movs	r1, #144	; 0x90
 800950a:	6878      	ldr	r0, [r7, #4]
 800950c:	f002 f830 	bl	800b570 <VL53L0X_RdDWord>
 8009510:	4603      	mov	r3, r0
 8009512:	461a      	mov	r2, r3
 8009514:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009518:	4313      	orrs	r3, r2
 800951a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			SignalRateMeasFixed1104_400_mm |= ((TmpDWord &
				0xff000000) >> 24);
 800951e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009520:	0e1b      	lsrs	r3, r3, #24
			SignalRateMeasFixed1104_400_mm |= ((TmpDWord &
 8009522:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8009524:	4313      	orrs	r3, r2
 8009526:	653b      	str	r3, [r7, #80]	; 0x50

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x75);
 8009528:	2275      	movs	r2, #117	; 0x75
 800952a:	2194      	movs	r1, #148	; 0x94
 800952c:	6878      	ldr	r0, [r7, #4]
 800952e:	f001 ff3b 	bl	800b3a8 <VL53L0X_WrByte>
 8009532:	4603      	mov	r3, r0
 8009534:	461a      	mov	r2, r3
 8009536:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800953a:	4313      	orrs	r3, r2
 800953c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8009540:	6878      	ldr	r0, [r7, #4]
 8009542:	f7ff fc33 	bl	8008dac <VL53L0X_device_read_strobe>
 8009546:	4603      	mov	r3, r0
 8009548:	461a      	mov	r2, r3
 800954a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800954e:	4313      	orrs	r3, r2
 8009550:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8009554:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8009558:	461a      	mov	r2, r3
 800955a:	2190      	movs	r1, #144	; 0x90
 800955c:	6878      	ldr	r0, [r7, #4]
 800955e:	f002 f807 	bl	800b570 <VL53L0X_RdDWord>
 8009562:	4603      	mov	r3, r0
 8009564:	461a      	mov	r2, r3
 8009566:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800956a:	4313      	orrs	r3, r2
 800956c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			DistMeasFixed1104_400_mm = (TmpDWord & 0x0000000ff)
							<< 8;
 8009570:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009572:	021b      	lsls	r3, r3, #8
			DistMeasFixed1104_400_mm = (TmpDWord & 0x0000000ff)
 8009574:	b29b      	uxth	r3, r3
 8009576:	657b      	str	r3, [r7, #84]	; 0x54

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x76);
 8009578:	2276      	movs	r2, #118	; 0x76
 800957a:	2194      	movs	r1, #148	; 0x94
 800957c:	6878      	ldr	r0, [r7, #4]
 800957e:	f001 ff13 	bl	800b3a8 <VL53L0X_WrByte>
 8009582:	4603      	mov	r3, r0
 8009584:	461a      	mov	r2, r3
 8009586:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800958a:	4313      	orrs	r3, r2
 800958c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8009590:	6878      	ldr	r0, [r7, #4]
 8009592:	f7ff fc0b 	bl	8008dac <VL53L0X_device_read_strobe>
 8009596:	4603      	mov	r3, r0
 8009598:	461a      	mov	r2, r3
 800959a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800959e:	4313      	orrs	r3, r2
 80095a0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 80095a4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80095a8:	461a      	mov	r2, r3
 80095aa:	2190      	movs	r1, #144	; 0x90
 80095ac:	6878      	ldr	r0, [r7, #4]
 80095ae:	f001 ffdf 	bl	800b570 <VL53L0X_RdDWord>
 80095b2:	4603      	mov	r3, r0
 80095b4:	461a      	mov	r2, r3
 80095b6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80095ba:	4313      	orrs	r3, r2
 80095bc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			DistMeasFixed1104_400_mm |= ((TmpDWord & 0xff000000)
							>> 24);
 80095c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095c2:	0e1b      	lsrs	r3, r3, #24
			DistMeasFixed1104_400_mm |= ((TmpDWord & 0xff000000)
 80095c4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80095c6:	4313      	orrs	r3, r2
 80095c8:	657b      	str	r3, [r7, #84]	; 0x54
		}

		Status |= VL53L0X_WrByte(Dev, 0x81, 0x00);
 80095ca:	2200      	movs	r2, #0
 80095cc:	2181      	movs	r1, #129	; 0x81
 80095ce:	6878      	ldr	r0, [r7, #4]
 80095d0:	f001 feea 	bl	800b3a8 <VL53L0X_WrByte>
 80095d4:	4603      	mov	r3, r0
 80095d6:	461a      	mov	r2, r3
 80095d8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80095dc:	4313      	orrs	r3, r2
 80095de:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x06);
 80095e2:	2206      	movs	r2, #6
 80095e4:	21ff      	movs	r1, #255	; 0xff
 80095e6:	6878      	ldr	r0, [r7, #4]
 80095e8:	f001 fede 	bl	800b3a8 <VL53L0X_WrByte>
 80095ec:	4603      	mov	r3, r0
 80095ee:	461a      	mov	r2, r3
 80095f0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80095f4:	4313      	orrs	r3, r2
 80095f6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_RdByte(Dev, 0x83, &byte);
 80095fa:	f107 0337 	add.w	r3, r7, #55	; 0x37
 80095fe:	461a      	mov	r2, r3
 8009600:	2183      	movs	r1, #131	; 0x83
 8009602:	6878      	ldr	r0, [r7, #4]
 8009604:	f001 ff52 	bl	800b4ac <VL53L0X_RdByte>
 8009608:	4603      	mov	r3, r0
 800960a:	461a      	mov	r2, r3
 800960c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009610:	4313      	orrs	r3, r2
 8009612:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x83, byte&0xfb);
 8009616:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800961a:	f023 0304 	bic.w	r3, r3, #4
 800961e:	b2db      	uxtb	r3, r3
 8009620:	461a      	mov	r2, r3
 8009622:	2183      	movs	r1, #131	; 0x83
 8009624:	6878      	ldr	r0, [r7, #4]
 8009626:	f001 febf 	bl	800b3a8 <VL53L0X_WrByte>
 800962a:	4603      	mov	r3, r0
 800962c:	461a      	mov	r2, r3
 800962e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009632:	4313      	orrs	r3, r2
 8009634:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8009638:	2201      	movs	r2, #1
 800963a:	21ff      	movs	r1, #255	; 0xff
 800963c:	6878      	ldr	r0, [r7, #4]
 800963e:	f001 feb3 	bl	800b3a8 <VL53L0X_WrByte>
 8009642:	4603      	mov	r3, r0
 8009644:	461a      	mov	r2, r3
 8009646:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800964a:	4313      	orrs	r3, r2
 800964c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 8009650:	2201      	movs	r2, #1
 8009652:	2100      	movs	r1, #0
 8009654:	6878      	ldr	r0, [r7, #4]
 8009656:	f001 fea7 	bl	800b3a8 <VL53L0X_WrByte>
 800965a:	4603      	mov	r3, r0
 800965c:	461a      	mov	r2, r3
 800965e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009662:	4313      	orrs	r3, r2
 8009664:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8009668:	2200      	movs	r2, #0
 800966a:	21ff      	movs	r1, #255	; 0xff
 800966c:	6878      	ldr	r0, [r7, #4]
 800966e:	f001 fe9b 	bl	800b3a8 <VL53L0X_WrByte>
 8009672:	4603      	mov	r3, r0
 8009674:	461a      	mov	r2, r3
 8009676:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800967a:	4313      	orrs	r3, r2
 800967c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 8009680:	2200      	movs	r2, #0
 8009682:	2180      	movs	r1, #128	; 0x80
 8009684:	6878      	ldr	r0, [r7, #4]
 8009686:	f001 fe8f 	bl	800b3a8 <VL53L0X_WrByte>
 800968a:	4603      	mov	r3, r0
 800968c:	461a      	mov	r2, r3
 800968e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009692:	4313      	orrs	r3, r2
 8009694:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	}

	if ((Status == VL53L0X_ERROR_NONE) &&
 8009698:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
 800969c:	2b00      	cmp	r3, #0
 800969e:	f040 808f 	bne.w	80097c0 <VL53L0X_get_info_from_device+0x98e>
 80096a2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80096a6:	2b07      	cmp	r3, #7
 80096a8:	f000 808a 	beq.w	80097c0 <VL53L0X_get_info_from_device+0x98e>
		(ReadDataFromDeviceDone != 7)) {
		/* Assign to variable if status is ok */
		if (((option & 1) == 1) &&
 80096ac:	78fb      	ldrb	r3, [r7, #3]
 80096ae:	f003 0301 	and.w	r3, r3, #1
 80096b2:	2b00      	cmp	r3, #0
 80096b4:	d024      	beq.n	8009700 <VL53L0X_get_info_from_device+0x8ce>
			((ReadDataFromDeviceDone & 1) == 0)) {
 80096b6:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80096ba:	f003 0301 	and.w	r3, r3, #1
		if (((option & 1) == 1) &&
 80096be:	2b00      	cmp	r3, #0
 80096c0:	d11e      	bne.n	8009700 <VL53L0X_get_info_from_device+0x8ce>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	f897 205e 	ldrb.w	r2, [r7, #94]	; 0x5e
 80096c8:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
				ReferenceSpadCount, ReferenceSpadCount);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	f897 205d 	ldrb.w	r2, [r7, #93]	; 0x5d
 80096d2:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
				ReferenceSpadType, ReferenceSpadType);

			for (i = 0; i < VL53L0X_REF_SPAD_BUFFER_SIZE; i++) {
 80096d6:	2300      	movs	r3, #0
 80096d8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80096da:	e00e      	b.n	80096fa <VL53L0X_get_info_from_device+0x8c8>
				Dev->Data.SpadData.RefGoodSpadMap[i] =
					NvmRefGoodSpadMap[i];
 80096dc:	f107 0208 	add.w	r2, r7, #8
 80096e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80096e2:	4413      	add	r3, r2
 80096e4:	7819      	ldrb	r1, [r3, #0]
				Dev->Data.SpadData.RefGoodSpadMap[i] =
 80096e6:	687a      	ldr	r2, [r7, #4]
 80096e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80096ea:	4413      	add	r3, r2
 80096ec:	f503 7395 	add.w	r3, r3, #298	; 0x12a
 80096f0:	460a      	mov	r2, r1
 80096f2:	701a      	strb	r2, [r3, #0]
			for (i = 0; i < VL53L0X_REF_SPAD_BUFFER_SIZE; i++) {
 80096f4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80096f6:	3301      	adds	r3, #1
 80096f8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80096fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80096fc:	2b05      	cmp	r3, #5
 80096fe:	dded      	ble.n	80096dc <VL53L0X_get_info_from_device+0x8aa>
			}
		}

		if (((option & 2) == 2) &&
 8009700:	78fb      	ldrb	r3, [r7, #3]
 8009702:	f003 0302 	and.w	r3, r3, #2
 8009706:	2b00      	cmp	r3, #0
 8009708:	d018      	beq.n	800973c <VL53L0X_get_info_from_device+0x90a>
			((ReadDataFromDeviceDone & 2) == 0)) {
 800970a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800970e:	f003 0302 	and.w	r3, r3, #2
		if (((option & 2) == 2) &&
 8009712:	2b00      	cmp	r3, #0
 8009714:	d112      	bne.n	800973c <VL53L0X_get_info_from_device+0x90a>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8009716:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	f883 20f1 	strb.w	r2, [r3, #241]	; 0xf1
					ModuleId, ModuleId);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8009720:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	f883 20f2 	strb.w	r2, [r3, #242]	; 0xf2
					Revision, Revision);

			ProductId_tmp = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	33f3      	adds	r3, #243	; 0xf3
 800972e:	63bb      	str	r3, [r7, #56]	; 0x38
					ProductId);
			VL53L0X_COPYSTRING(ProductId_tmp, ProductId);
 8009730:	f107 0310 	add.w	r3, r7, #16
 8009734:	4619      	mov	r1, r3
 8009736:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8009738:	f002 fc30 	bl	800bf9c <strcpy>

		}

		if (((option & 4) == 4) &&
 800973c:	78fb      	ldrb	r3, [r7, #3]
 800973e:	f003 0304 	and.w	r3, r3, #4
 8009742:	2b00      	cmp	r3, #0
 8009744:	d030      	beq.n	80097a8 <VL53L0X_get_info_from_device+0x976>
			((ReadDataFromDeviceDone & 4) == 0)) {
 8009746:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800974a:	f003 0304 	and.w	r3, r3, #4
		if (((option & 4) == 4) &&
 800974e:	2b00      	cmp	r3, #0
 8009750:	d12a      	bne.n	80097a8 <VL53L0X_get_info_from_device+0x976>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8009752:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
						PartUIDUpper, PartUIDUpper);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800975a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
						PartUIDLower, PartUIDLower);

			SignalRateMeasFixed400mmFix =
 8009762:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009764:	025b      	lsls	r3, r3, #9
 8009766:	643b      	str	r3, [r7, #64]	; 0x40
				VL53L0X_FIXPOINT97TOFIXPOINT1616(
					SignalRateMeasFixed1104_400_mm);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800976c:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
				SignalRateMeasFixed400mm,
				SignalRateMeasFixed400mmFix);

			OffsetMicroMeters = 0;
 8009770:	2300      	movs	r3, #0
 8009772:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
			if (DistMeasFixed1104_400_mm != 0) {
 8009776:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009778:	2b00      	cmp	r3, #0
 800977a:	d011      	beq.n	80097a0 <VL53L0X_get_info_from_device+0x96e>
					OffsetFixed1104_mm =
 800977c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800977e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009780:	1ad3      	subs	r3, r2, r3
 8009782:	64bb      	str	r3, [r7, #72]	; 0x48
						DistMeasFixed1104_400_mm -
						DistMeasTgtFixed1104_mm;
					OffsetMicroMeters = (OffsetFixed1104_mm
						* 1000) >> 4;
 8009784:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009786:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800978a:	fb02 f303 	mul.w	r3, r2, r3
 800978e:	091b      	lsrs	r3, r3, #4
					OffsetMicroMeters = (OffsetFixed1104_mm
 8009790:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
					OffsetMicroMeters *= -1;
 8009794:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8009798:	425b      	negs	r3, r3
 800979a:	b29b      	uxth	r3, r3
 800979c:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
			}

			PALDevDataSet(Dev,
 80097a0:	f9b7 205a 	ldrsh.w	r2, [r7, #90]	; 0x5a
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	60da      	str	r2, [r3, #12]
				Part2PartOffsetAdjustmentNVMMicroMeter,
				OffsetMicroMeters);
		}
		byte = (uint8_t)(ReadDataFromDeviceDone|option);
 80097a8:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 80097ac:	78fb      	ldrb	r3, [r7, #3]
 80097ae:	4313      	orrs	r3, r2
 80097b0:	b2db      	uxtb	r3, r3
 80097b2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, ReadDataFromDeviceDone,
 80097b6:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
				byte);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80097c0:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
}
 80097c4:	4618      	mov	r0, r3
 80097c6:	3760      	adds	r7, #96	; 0x60
 80097c8:	46bd      	mov	sp, r7
 80097ca:	bd80      	pop	{r7, pc}

080097cc <VL53L0X_calc_macro_period_ps>:


uint32_t VL53L0X_calc_macro_period_ps(VL53L0X_DEV Dev, uint8_t vcsel_period_pclks)
{
 80097cc:	b480      	push	{r7}
 80097ce:	b087      	sub	sp, #28
 80097d0:	af00      	add	r7, sp, #0
 80097d2:	6078      	str	r0, [r7, #4]
 80097d4:	460b      	mov	r3, r1
 80097d6:	70fb      	strb	r3, [r7, #3]
	LOG_FUNCTION_START("");

	/* The above calculation will produce rounding errors,
	   therefore set fixed value
	*/
	PLL_period_ps = 1655;
 80097d8:	f240 6277 	movw	r2, #1655	; 0x677
 80097dc:	f04f 0300 	mov.w	r3, #0
 80097e0:	e9c7 2304 	strd	r2, r3, [r7, #16]

	macro_period_vclks = 2304;
 80097e4:	f44f 6310 	mov.w	r3, #2304	; 0x900
 80097e8:	60fb      	str	r3, [r7, #12]
	macro_period_ps = (uint32_t)(macro_period_vclks
			* vcsel_period_pclks * PLL_period_ps);
 80097ea:	78fb      	ldrb	r3, [r7, #3]
 80097ec:	68fa      	ldr	r2, [r7, #12]
 80097ee:	fb02 f303 	mul.w	r3, r2, r3
	macro_period_ps = (uint32_t)(macro_period_vclks
 80097f2:	693a      	ldr	r2, [r7, #16]
 80097f4:	fb02 f303 	mul.w	r3, r2, r3
 80097f8:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_END("");
	return macro_period_ps;
 80097fa:	68bb      	ldr	r3, [r7, #8]
}
 80097fc:	4618      	mov	r0, r3
 80097fe:	371c      	adds	r7, #28
 8009800:	46bd      	mov	sp, r7
 8009802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009806:	4770      	bx	lr

08009808 <VL53L0X_encode_timeout>:

uint16_t VL53L0X_encode_timeout(uint32_t timeout_macro_clks)
{
 8009808:	b480      	push	{r7}
 800980a:	b087      	sub	sp, #28
 800980c:	af00      	add	r7, sp, #0
 800980e:	6078      	str	r0, [r7, #4]
	/*!
	 * Encode timeout in macro periods in (LSByte * 2^MSByte) + 1 format
	 */

	uint16_t encoded_timeout = 0;
 8009810:	2300      	movs	r3, #0
 8009812:	82fb      	strh	r3, [r7, #22]
	uint32_t ls_byte = 0;
 8009814:	2300      	movs	r3, #0
 8009816:	613b      	str	r3, [r7, #16]
	uint16_t ms_byte = 0;
 8009818:	2300      	movs	r3, #0
 800981a:	81fb      	strh	r3, [r7, #14]

	if (timeout_macro_clks > 0) {
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	2b00      	cmp	r3, #0
 8009820:	d017      	beq.n	8009852 <VL53L0X_encode_timeout+0x4a>
		ls_byte = timeout_macro_clks - 1;
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	3b01      	subs	r3, #1
 8009826:	613b      	str	r3, [r7, #16]

		while ((ls_byte & 0xFFFFFF00) > 0) {
 8009828:	e005      	b.n	8009836 <VL53L0X_encode_timeout+0x2e>
			ls_byte = ls_byte >> 1;
 800982a:	693b      	ldr	r3, [r7, #16]
 800982c:	085b      	lsrs	r3, r3, #1
 800982e:	613b      	str	r3, [r7, #16]
			ms_byte++;
 8009830:	89fb      	ldrh	r3, [r7, #14]
 8009832:	3301      	adds	r3, #1
 8009834:	81fb      	strh	r3, [r7, #14]
		while ((ls_byte & 0xFFFFFF00) > 0) {
 8009836:	693b      	ldr	r3, [r7, #16]
 8009838:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800983c:	2b00      	cmp	r3, #0
 800983e:	d1f4      	bne.n	800982a <VL53L0X_encode_timeout+0x22>
		}

		encoded_timeout = (ms_byte << 8)
 8009840:	89fb      	ldrh	r3, [r7, #14]
 8009842:	021b      	lsls	r3, r3, #8
 8009844:	b29a      	uxth	r2, r3
				+ (uint16_t) (ls_byte & 0x000000FF);
 8009846:	693b      	ldr	r3, [r7, #16]
 8009848:	b29b      	uxth	r3, r3
 800984a:	b2db      	uxtb	r3, r3
 800984c:	b29b      	uxth	r3, r3
		encoded_timeout = (ms_byte << 8)
 800984e:	4413      	add	r3, r2
 8009850:	82fb      	strh	r3, [r7, #22]
	}

	return encoded_timeout;
 8009852:	8afb      	ldrh	r3, [r7, #22]

}
 8009854:	4618      	mov	r0, r3
 8009856:	371c      	adds	r7, #28
 8009858:	46bd      	mov	sp, r7
 800985a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800985e:	4770      	bx	lr

08009860 <VL53L0X_decode_timeout>:

uint32_t VL53L0X_decode_timeout(uint16_t encoded_timeout)
{
 8009860:	b480      	push	{r7}
 8009862:	b085      	sub	sp, #20
 8009864:	af00      	add	r7, sp, #0
 8009866:	4603      	mov	r3, r0
 8009868:	80fb      	strh	r3, [r7, #6]
	/*!
	 * Decode 16-bit timeout register value - format (LSByte * 2^MSByte) + 1
	 */

	uint32_t timeout_macro_clks = 0;
 800986a:	2300      	movs	r3, #0
 800986c:	60fb      	str	r3, [r7, #12]

	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 800986e:	88fb      	ldrh	r3, [r7, #6]
 8009870:	b2db      	uxtb	r3, r3
			<< (uint32_t) ((encoded_timeout & 0xFF00) >> 8)) + 1;
 8009872:	88fa      	ldrh	r2, [r7, #6]
 8009874:	0a12      	lsrs	r2, r2, #8
 8009876:	b292      	uxth	r2, r2
 8009878:	4093      	lsls	r3, r2
	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 800987a:	3301      	adds	r3, #1
 800987c:	60fb      	str	r3, [r7, #12]

	return timeout_macro_clks;
 800987e:	68fb      	ldr	r3, [r7, #12]
}
 8009880:	4618      	mov	r0, r3
 8009882:	3714      	adds	r7, #20
 8009884:	46bd      	mov	sp, r7
 8009886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800988a:	4770      	bx	lr

0800988c <VL53L0X_calc_timeout_mclks>:

/* To convert ms into register value */
uint32_t VL53L0X_calc_timeout_mclks(VL53L0X_DEV Dev,
		uint32_t timeout_period_us,
		uint8_t vcsel_period_pclks)
{
 800988c:	b580      	push	{r7, lr}
 800988e:	b088      	sub	sp, #32
 8009890:	af00      	add	r7, sp, #0
 8009892:	60f8      	str	r0, [r7, #12]
 8009894:	60b9      	str	r1, [r7, #8]
 8009896:	4613      	mov	r3, r2
 8009898:	71fb      	strb	r3, [r7, #7]
	uint32_t macro_period_ps;
	uint32_t macro_period_ns;
	uint32_t timeout_period_mclks = 0;
 800989a:	2300      	movs	r3, #0
 800989c:	61fb      	str	r3, [r7, #28]

	macro_period_ps = VL53L0X_calc_macro_period_ps(Dev, vcsel_period_pclks);
 800989e:	79fb      	ldrb	r3, [r7, #7]
 80098a0:	4619      	mov	r1, r3
 80098a2:	68f8      	ldr	r0, [r7, #12]
 80098a4:	f7ff ff92 	bl	80097cc <VL53L0X_calc_macro_period_ps>
 80098a8:	61b8      	str	r0, [r7, #24]
	macro_period_ns = (macro_period_ps + 500) / 1000;
 80098aa:	69bb      	ldr	r3, [r7, #24]
 80098ac:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 80098b0:	4a0a      	ldr	r2, [pc, #40]	; (80098dc <VL53L0X_calc_timeout_mclks+0x50>)
 80098b2:	fba2 2303 	umull	r2, r3, r2, r3
 80098b6:	099b      	lsrs	r3, r3, #6
 80098b8:	617b      	str	r3, [r7, #20]

	timeout_period_mclks =
		(uint32_t) (((timeout_period_us * 1000)
 80098ba:	68bb      	ldr	r3, [r7, #8]
 80098bc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80098c0:	fb03 f202 	mul.w	r2, r3, r2
		+ (macro_period_ns / 2)) / macro_period_ns);
 80098c4:	697b      	ldr	r3, [r7, #20]
 80098c6:	085b      	lsrs	r3, r3, #1
 80098c8:	441a      	add	r2, r3
	timeout_period_mclks =
 80098ca:	697b      	ldr	r3, [r7, #20]
 80098cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80098d0:	61fb      	str	r3, [r7, #28]

    return timeout_period_mclks;
 80098d2:	69fb      	ldr	r3, [r7, #28]
}
 80098d4:	4618      	mov	r0, r3
 80098d6:	3720      	adds	r7, #32
 80098d8:	46bd      	mov	sp, r7
 80098da:	bd80      	pop	{r7, pc}
 80098dc:	10624dd3 	.word	0x10624dd3

080098e0 <VL53L0X_calc_timeout_us>:

/* To convert register value into us */
uint32_t VL53L0X_calc_timeout_us(VL53L0X_DEV Dev,
		uint16_t timeout_period_mclks,
		uint8_t vcsel_period_pclks)
{
 80098e0:	b580      	push	{r7, lr}
 80098e2:	b086      	sub	sp, #24
 80098e4:	af00      	add	r7, sp, #0
 80098e6:	6078      	str	r0, [r7, #4]
 80098e8:	460b      	mov	r3, r1
 80098ea:	807b      	strh	r3, [r7, #2]
 80098ec:	4613      	mov	r3, r2
 80098ee:	707b      	strb	r3, [r7, #1]
	uint32_t macro_period_ps;
	uint32_t macro_period_ns;
	uint32_t actual_timeout_period_us = 0;
 80098f0:	2300      	movs	r3, #0
 80098f2:	617b      	str	r3, [r7, #20]

	macro_period_ps = VL53L0X_calc_macro_period_ps(Dev, vcsel_period_pclks);
 80098f4:	787b      	ldrb	r3, [r7, #1]
 80098f6:	4619      	mov	r1, r3
 80098f8:	6878      	ldr	r0, [r7, #4]
 80098fa:	f7ff ff67 	bl	80097cc <VL53L0X_calc_macro_period_ps>
 80098fe:	6138      	str	r0, [r7, #16]
	macro_period_ns = (macro_period_ps + 500) / 1000;
 8009900:	693b      	ldr	r3, [r7, #16]
 8009902:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8009906:	4a0a      	ldr	r2, [pc, #40]	; (8009930 <VL53L0X_calc_timeout_us+0x50>)
 8009908:	fba2 2303 	umull	r2, r3, r2, r3
 800990c:	099b      	lsrs	r3, r3, #6
 800990e:	60fb      	str	r3, [r7, #12]

	actual_timeout_period_us =
		((timeout_period_mclks * macro_period_ns) + 500) / 1000;
 8009910:	887b      	ldrh	r3, [r7, #2]
 8009912:	68fa      	ldr	r2, [r7, #12]
 8009914:	fb02 f303 	mul.w	r3, r2, r3
 8009918:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
	actual_timeout_period_us =
 800991c:	4a04      	ldr	r2, [pc, #16]	; (8009930 <VL53L0X_calc_timeout_us+0x50>)
 800991e:	fba2 2303 	umull	r2, r3, r2, r3
 8009922:	099b      	lsrs	r3, r3, #6
 8009924:	617b      	str	r3, [r7, #20]

	return actual_timeout_period_us;
 8009926:	697b      	ldr	r3, [r7, #20]
}
 8009928:	4618      	mov	r0, r3
 800992a:	3718      	adds	r7, #24
 800992c:	46bd      	mov	sp, r7
 800992e:	bd80      	pop	{r7, pc}
 8009930:	10624dd3 	.word	0x10624dd3

08009934 <get_sequence_step_timeout>:


VL53L0X_Error get_sequence_step_timeout(VL53L0X_DEV Dev,
				VL53L0X_SequenceStepId SequenceStepId,
				uint32_t *pTimeOutMicroSecs)
{
 8009934:	b580      	push	{r7, lr}
 8009936:	b08c      	sub	sp, #48	; 0x30
 8009938:	af00      	add	r7, sp, #0
 800993a:	60f8      	str	r0, [r7, #12]
 800993c:	460b      	mov	r3, r1
 800993e:	607a      	str	r2, [r7, #4]
 8009940:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009942:	2300      	movs	r3, #0
 8009944:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint8_t CurrentVCSELPulsePeriodPClk;
	uint8_t EncodedTimeOutByte = 0;
 8009948:	2300      	movs	r3, #0
 800994a:	f887 3020 	strb.w	r3, [r7, #32]
	uint32_t TimeoutMicroSeconds = 0;
 800994e:	2300      	movs	r3, #0
 8009950:	62bb      	str	r3, [r7, #40]	; 0x28
	uint16_t PreRangeEncodedTimeOut = 0;
 8009952:	2300      	movs	r3, #0
 8009954:	83fb      	strh	r3, [r7, #30]
	uint16_t MsrcTimeOutMClks;
	uint16_t PreRangeTimeOutMClks;
	uint16_t FinalRangeTimeOutMClks = 0;
 8009956:	2300      	movs	r3, #0
 8009958:	84bb      	strh	r3, [r7, #36]	; 0x24
	uint16_t FinalRangeEncodedTimeOut;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;

	if ((SequenceStepId == VL53L0X_SEQUENCESTEP_TCC)	 ||
 800995a:	7afb      	ldrb	r3, [r7, #11]
 800995c:	2b00      	cmp	r3, #0
 800995e:	d005      	beq.n	800996c <get_sequence_step_timeout+0x38>
 8009960:	7afb      	ldrb	r3, [r7, #11]
 8009962:	2b01      	cmp	r3, #1
 8009964:	d002      	beq.n	800996c <get_sequence_step_timeout+0x38>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_DSS)	 ||
 8009966:	7afb      	ldrb	r3, [r7, #11]
 8009968:	2b02      	cmp	r3, #2
 800996a:	d128      	bne.n	80099be <get_sequence_step_timeout+0x8a>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_MSRC)) {

		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800996c:	f107 0321 	add.w	r3, r7, #33	; 0x21
 8009970:	461a      	mov	r2, r3
 8009972:	2100      	movs	r1, #0
 8009974:	68f8      	ldr	r0, [r7, #12]
 8009976:	f7fd fa4d 	bl	8006e14 <VL53L0X_GetVcselPulsePeriod>
 800997a:	4603      	mov	r3, r0
 800997c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);
		if (Status == VL53L0X_ERROR_NONE) {
 8009980:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8009984:	2b00      	cmp	r3, #0
 8009986:	d109      	bne.n	800999c <get_sequence_step_timeout+0x68>
			Status = VL53L0X_RdByte(Dev,
 8009988:	f107 0320 	add.w	r3, r7, #32
 800998c:	461a      	mov	r2, r3
 800998e:	2146      	movs	r1, #70	; 0x46
 8009990:	68f8      	ldr	r0, [r7, #12]
 8009992:	f001 fd8b 	bl	800b4ac <VL53L0X_RdByte>
 8009996:	4603      	mov	r3, r0
 8009998:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_REG_MSRC_CONFIG_TIMEOUT_MACROP,
					&EncodedTimeOutByte);
		}
		MsrcTimeOutMClks = VL53L0X_decode_timeout(EncodedTimeOutByte);
 800999c:	f897 3020 	ldrb.w	r3, [r7, #32]
 80099a0:	b29b      	uxth	r3, r3
 80099a2:	4618      	mov	r0, r3
 80099a4:	f7ff ff5c 	bl	8009860 <VL53L0X_decode_timeout>
 80099a8:	4603      	mov	r3, r0
 80099aa:	847b      	strh	r3, [r7, #34]	; 0x22

		TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 80099ac:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 80099b0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80099b2:	4619      	mov	r1, r3
 80099b4:	68f8      	ldr	r0, [r7, #12]
 80099b6:	f7ff ff93 	bl	80098e0 <VL53L0X_calc_timeout_us>
 80099ba:	62b8      	str	r0, [r7, #40]	; 0x28
 80099bc:	e092      	b.n	8009ae4 <get_sequence_step_timeout+0x1b0>
						MsrcTimeOutMClks,
						CurrentVCSELPulsePeriodPClk);
	} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_PRE_RANGE) {
 80099be:	7afb      	ldrb	r3, [r7, #11]
 80099c0:	2b03      	cmp	r3, #3
 80099c2:	d135      	bne.n	8009a30 <get_sequence_step_timeout+0xfc>
		/* Retrieve PRE-RANGE VCSEL Period */
		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 80099c4:	f107 0321 	add.w	r3, r7, #33	; 0x21
 80099c8:	461a      	mov	r2, r3
 80099ca:	2100      	movs	r1, #0
 80099cc:	68f8      	ldr	r0, [r7, #12]
 80099ce:	f7fd fa21 	bl	8006e14 <VL53L0X_GetVcselPulsePeriod>
 80099d2:	4603      	mov	r3, r0
 80099d4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
						VL53L0X_VCSEL_PERIOD_PRE_RANGE,
						&CurrentVCSELPulsePeriodPClk);

		/* Retrieve PRE-RANGE Timeout in Macro periods (MCLKS) */
		if (Status == VL53L0X_ERROR_NONE) {
 80099d8:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80099dc:	2b00      	cmp	r3, #0
 80099de:	f040 8081 	bne.w	8009ae4 <get_sequence_step_timeout+0x1b0>

			/* Retrieve PRE-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 80099e2:	f107 0321 	add.w	r3, r7, #33	; 0x21
 80099e6:	461a      	mov	r2, r3
 80099e8:	2100      	movs	r1, #0
 80099ea:	68f8      	ldr	r0, [r7, #12]
 80099ec:	f7fd fa12 	bl	8006e14 <VL53L0X_GetVcselPulsePeriod>
 80099f0:	4603      	mov	r3, r0
 80099f2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

			if (Status == VL53L0X_ERROR_NONE) {
 80099f6:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80099fa:	2b00      	cmp	r3, #0
 80099fc:	d109      	bne.n	8009a12 <get_sequence_step_timeout+0xde>
				Status = VL53L0X_RdWord(Dev,
 80099fe:	f107 031e 	add.w	r3, r7, #30
 8009a02:	461a      	mov	r2, r3
 8009a04:	2151      	movs	r1, #81	; 0x51
 8009a06:	68f8      	ldr	r0, [r7, #12]
 8009a08:	f001 fd7a 	bl	800b500 <VL53L0X_RdWord>
 8009a0c:	4603      	mov	r3, r0
 8009a0e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&PreRangeEncodedTimeOut);
			}

			PreRangeTimeOutMClks = VL53L0X_decode_timeout(
 8009a12:	8bfb      	ldrh	r3, [r7, #30]
 8009a14:	4618      	mov	r0, r3
 8009a16:	f7ff ff23 	bl	8009860 <VL53L0X_decode_timeout>
 8009a1a:	4603      	mov	r3, r0
 8009a1c:	84fb      	strh	r3, [r7, #38]	; 0x26
					PreRangeEncodedTimeOut);

			TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 8009a1e:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8009a22:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8009a24:	4619      	mov	r1, r3
 8009a26:	68f8      	ldr	r0, [r7, #12]
 8009a28:	f7ff ff5a 	bl	80098e0 <VL53L0X_calc_timeout_us>
 8009a2c:	62b8      	str	r0, [r7, #40]	; 0x28
 8009a2e:	e059      	b.n	8009ae4 <get_sequence_step_timeout+0x1b0>
					PreRangeTimeOutMClks,
					CurrentVCSELPulsePeriodPClk);
		}
	} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_FINAL_RANGE) {
 8009a30:	7afb      	ldrb	r3, [r7, #11]
 8009a32:	2b04      	cmp	r3, #4
 8009a34:	d156      	bne.n	8009ae4 <get_sequence_step_timeout+0x1b0>

		VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 8009a36:	f107 0314 	add.w	r3, r7, #20
 8009a3a:	4619      	mov	r1, r3
 8009a3c:	68f8      	ldr	r0, [r7, #12]
 8009a3e:	f7fd faf5 	bl	800702c <VL53L0X_GetSequenceStepEnables>
		PreRangeTimeOutMClks = 0;
 8009a42:	2300      	movs	r3, #0
 8009a44:	84fb      	strh	r3, [r7, #38]	; 0x26

		if (SchedulerSequenceSteps.PreRangeOn) {
 8009a46:	7dfb      	ldrb	r3, [r7, #23]
 8009a48:	2b00      	cmp	r3, #0
 8009a4a:	d01d      	beq.n	8009a88 <get_sequence_step_timeout+0x154>
			/* Retrieve PRE-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8009a4c:	f107 0321 	add.w	r3, r7, #33	; 0x21
 8009a50:	461a      	mov	r2, r3
 8009a52:	2100      	movs	r1, #0
 8009a54:	68f8      	ldr	r0, [r7, #12]
 8009a56:	f7fd f9dd 	bl	8006e14 <VL53L0X_GetVcselPulsePeriod>
 8009a5a:	4603      	mov	r3, r0
 8009a5c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_VCSEL_PERIOD_PRE_RANGE,
				&CurrentVCSELPulsePeriodPClk);

			/* Retrieve PRE-RANGE Timeout in Macro periods
			 * (MCLKS) */
			if (Status == VL53L0X_ERROR_NONE) {
 8009a60:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8009a64:	2b00      	cmp	r3, #0
 8009a66:	d10f      	bne.n	8009a88 <get_sequence_step_timeout+0x154>
				Status = VL53L0X_RdWord(Dev,
 8009a68:	f107 031e 	add.w	r3, r7, #30
 8009a6c:	461a      	mov	r2, r3
 8009a6e:	2151      	movs	r1, #81	; 0x51
 8009a70:	68f8      	ldr	r0, [r7, #12]
 8009a72:	f001 fd45 	bl	800b500 <VL53L0X_RdWord>
 8009a76:	4603      	mov	r3, r0
 8009a78:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&PreRangeEncodedTimeOut);
				PreRangeTimeOutMClks = VL53L0X_decode_timeout(
 8009a7c:	8bfb      	ldrh	r3, [r7, #30]
 8009a7e:	4618      	mov	r0, r3
 8009a80:	f7ff feee 	bl	8009860 <VL53L0X_decode_timeout>
 8009a84:	4603      	mov	r3, r0
 8009a86:	84fb      	strh	r3, [r7, #38]	; 0x26
						PreRangeEncodedTimeOut);
			}
		}

		if (Status == VL53L0X_ERROR_NONE) {
 8009a88:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8009a8c:	2b00      	cmp	r3, #0
 8009a8e:	d109      	bne.n	8009aa4 <get_sequence_step_timeout+0x170>
			/* Retrieve FINAL-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8009a90:	f107 0321 	add.w	r3, r7, #33	; 0x21
 8009a94:	461a      	mov	r2, r3
 8009a96:	2101      	movs	r1, #1
 8009a98:	68f8      	ldr	r0, [r7, #12]
 8009a9a:	f7fd f9bb 	bl	8006e14 <VL53L0X_GetVcselPulsePeriod>
 8009a9e:	4603      	mov	r3, r0
 8009aa0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
					&CurrentVCSELPulsePeriodPClk);
		}

		/* Retrieve FINAL-RANGE Timeout in Macro periods (MCLKS) */
		if (Status == VL53L0X_ERROR_NONE) {
 8009aa4:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8009aa8:	2b00      	cmp	r3, #0
 8009aaa:	d10f      	bne.n	8009acc <get_sequence_step_timeout+0x198>
			Status = VL53L0X_RdWord(Dev,
 8009aac:	f107 031c 	add.w	r3, r7, #28
 8009ab0:	461a      	mov	r2, r3
 8009ab2:	2171      	movs	r1, #113	; 0x71
 8009ab4:	68f8      	ldr	r0, [r7, #12]
 8009ab6:	f001 fd23 	bl	800b500 <VL53L0X_RdWord>
 8009aba:	4603      	mov	r3, r0
 8009abc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_REG_FINAL_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&FinalRangeEncodedTimeOut);
			FinalRangeTimeOutMClks = VL53L0X_decode_timeout(
 8009ac0:	8bbb      	ldrh	r3, [r7, #28]
 8009ac2:	4618      	mov	r0, r3
 8009ac4:	f7ff fecc 	bl	8009860 <VL53L0X_decode_timeout>
 8009ac8:	4603      	mov	r3, r0
 8009aca:	84bb      	strh	r3, [r7, #36]	; 0x24
					FinalRangeEncodedTimeOut);
		}

		FinalRangeTimeOutMClks -= PreRangeTimeOutMClks;
 8009acc:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8009ace:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8009ad0:	1ad3      	subs	r3, r2, r3
 8009ad2:	84bb      	strh	r3, [r7, #36]	; 0x24
		TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 8009ad4:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8009ad8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009ada:	4619      	mov	r1, r3
 8009adc:	68f8      	ldr	r0, [r7, #12]
 8009ade:	f7ff feff 	bl	80098e0 <VL53L0X_calc_timeout_us>
 8009ae2:	62b8      	str	r0, [r7, #40]	; 0x28
						FinalRangeTimeOutMClks,
						CurrentVCSELPulsePeriodPClk);
	}

	*pTimeOutMicroSecs = TimeoutMicroSeconds;
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009ae8:	601a      	str	r2, [r3, #0]

	return Status;
 8009aea:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 8009aee:	4618      	mov	r0, r3
 8009af0:	3730      	adds	r7, #48	; 0x30
 8009af2:	46bd      	mov	sp, r7
 8009af4:	bd80      	pop	{r7, pc}

08009af6 <set_sequence_step_timeout>:


VL53L0X_Error set_sequence_step_timeout(VL53L0X_DEV Dev,
					VL53L0X_SequenceStepId SequenceStepId,
					uint32_t TimeOutMicroSecs)
{
 8009af6:	b580      	push	{r7, lr}
 8009af8:	b08a      	sub	sp, #40	; 0x28
 8009afa:	af00      	add	r7, sp, #0
 8009afc:	60f8      	str	r0, [r7, #12]
 8009afe:	460b      	mov	r3, r1
 8009b00:	607a      	str	r2, [r7, #4]
 8009b02:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009b04:	2300      	movs	r3, #0
 8009b06:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint16_t MsrcRangeTimeOutMClks;
	uint32_t FinalRangeTimeOutMClks;
	uint16_t FinalRangeEncodedTimeOut;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;

	if ((SequenceStepId == VL53L0X_SEQUENCESTEP_TCC)	 ||
 8009b0a:	7afb      	ldrb	r3, [r7, #11]
 8009b0c:	2b00      	cmp	r3, #0
 8009b0e:	d005      	beq.n	8009b1c <set_sequence_step_timeout+0x26>
 8009b10:	7afb      	ldrb	r3, [r7, #11]
 8009b12:	2b01      	cmp	r3, #1
 8009b14:	d002      	beq.n	8009b1c <set_sequence_step_timeout+0x26>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_DSS)	 ||
 8009b16:	7afb      	ldrb	r3, [r7, #11]
 8009b18:	2b02      	cmp	r3, #2
 8009b1a:	d138      	bne.n	8009b8e <set_sequence_step_timeout+0x98>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_MSRC)) {

		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8009b1c:	f107 031b 	add.w	r3, r7, #27
 8009b20:	461a      	mov	r2, r3
 8009b22:	2100      	movs	r1, #0
 8009b24:	68f8      	ldr	r0, [r7, #12]
 8009b26:	f7fd f975 	bl	8006e14 <VL53L0X_GetVcselPulsePeriod>
 8009b2a:	4603      	mov	r3, r0
 8009b2c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

		if (Status == VL53L0X_ERROR_NONE) {
 8009b30:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009b34:	2b00      	cmp	r3, #0
 8009b36:	d11a      	bne.n	8009b6e <set_sequence_step_timeout+0x78>
			MsrcRangeTimeOutMClks = VL53L0X_calc_timeout_mclks(Dev,
 8009b38:	7efb      	ldrb	r3, [r7, #27]
 8009b3a:	461a      	mov	r2, r3
 8009b3c:	6879      	ldr	r1, [r7, #4]
 8009b3e:	68f8      	ldr	r0, [r7, #12]
 8009b40:	f7ff fea4 	bl	800988c <VL53L0X_calc_timeout_mclks>
 8009b44:	4603      	mov	r3, r0
 8009b46:	83bb      	strh	r3, [r7, #28]
					TimeOutMicroSecs,
					(uint8_t)CurrentVCSELPulsePeriodPClk);

			if (MsrcRangeTimeOutMClks > 256)
 8009b48:	8bbb      	ldrh	r3, [r7, #28]
 8009b4a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009b4e:	d903      	bls.n	8009b58 <set_sequence_step_timeout+0x62>
				MsrcEncodedTimeOut = 255;
 8009b50:	23ff      	movs	r3, #255	; 0xff
 8009b52:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8009b56:	e004      	b.n	8009b62 <set_sequence_step_timeout+0x6c>
			else
				MsrcEncodedTimeOut =
					(uint8_t)MsrcRangeTimeOutMClks - 1;
 8009b58:	8bbb      	ldrh	r3, [r7, #28]
 8009b5a:	b2db      	uxtb	r3, r3
				MsrcEncodedTimeOut =
 8009b5c:	3b01      	subs	r3, #1
 8009b5e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8009b62:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8009b66:	b29a      	uxth	r2, r3
 8009b68:	68fb      	ldr	r3, [r7, #12]
 8009b6a:	f8a3 20d8 	strh.w	r2, [r3, #216]	; 0xd8
				LastEncodedTimeout,
				MsrcEncodedTimeOut);
		}

		if (Status == VL53L0X_ERROR_NONE) {
 8009b6e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009b72:	2b00      	cmp	r3, #0
 8009b74:	f040 80ab 	bne.w	8009cce <set_sequence_step_timeout+0x1d8>
			Status = VL53L0X_WrByte(Dev,
 8009b78:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8009b7c:	461a      	mov	r2, r3
 8009b7e:	2146      	movs	r1, #70	; 0x46
 8009b80:	68f8      	ldr	r0, [r7, #12]
 8009b82:	f001 fc11 	bl	800b3a8 <VL53L0X_WrByte>
 8009b86:	4603      	mov	r3, r0
 8009b88:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if (Status == VL53L0X_ERROR_NONE) {
 8009b8c:	e09f      	b.n	8009cce <set_sequence_step_timeout+0x1d8>
				VL53L0X_REG_MSRC_CONFIG_TIMEOUT_MACROP,
				MsrcEncodedTimeOut);
		}
	} else {

		if (SequenceStepId == VL53L0X_SEQUENCESTEP_PRE_RANGE) {
 8009b8e:	7afb      	ldrb	r3, [r7, #11]
 8009b90:	2b03      	cmp	r3, #3
 8009b92:	d135      	bne.n	8009c00 <set_sequence_step_timeout+0x10a>

			if (Status == VL53L0X_ERROR_NONE) {
 8009b94:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009b98:	2b00      	cmp	r3, #0
 8009b9a:	d11b      	bne.n	8009bd4 <set_sequence_step_timeout+0xde>
				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8009b9c:	f107 031b 	add.w	r3, r7, #27
 8009ba0:	461a      	mov	r2, r3
 8009ba2:	2100      	movs	r1, #0
 8009ba4:	68f8      	ldr	r0, [r7, #12]
 8009ba6:	f7fd f935 	bl	8006e14 <VL53L0X_GetVcselPulsePeriod>
 8009baa:	4603      	mov	r3, r0
 8009bac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						VL53L0X_VCSEL_PERIOD_PRE_RANGE,
						&CurrentVCSELPulsePeriodPClk);
				PreRangeTimeOutMClks =
					VL53L0X_calc_timeout_mclks(Dev,
 8009bb0:	7efb      	ldrb	r3, [r7, #27]
 8009bb2:	461a      	mov	r2, r3
 8009bb4:	6879      	ldr	r1, [r7, #4]
 8009bb6:	68f8      	ldr	r0, [r7, #12]
 8009bb8:	f7ff fe68 	bl	800988c <VL53L0X_calc_timeout_mclks>
 8009bbc:	4603      	mov	r3, r0
				PreRangeTimeOutMClks =
 8009bbe:	84bb      	strh	r3, [r7, #36]	; 0x24
					TimeOutMicroSecs,
					(uint8_t)CurrentVCSELPulsePeriodPClk);
				PreRangeEncodedTimeOut = VL53L0X_encode_timeout(
 8009bc0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009bc2:	4618      	mov	r0, r3
 8009bc4:	f7ff fe20 	bl	8009808 <VL53L0X_encode_timeout>
 8009bc8:	4603      	mov	r3, r0
 8009bca:	833b      	strh	r3, [r7, #24]
					PreRangeTimeOutMClks);

				VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8009bcc:	8b3a      	ldrh	r2, [r7, #24]
 8009bce:	68fb      	ldr	r3, [r7, #12]
 8009bd0:	f8a3 20d8 	strh.w	r2, [r3, #216]	; 0xd8
					LastEncodedTimeout,
					PreRangeEncodedTimeOut);
			}

			if (Status == VL53L0X_ERROR_NONE) {
 8009bd4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009bd8:	2b00      	cmp	r3, #0
 8009bda:	d108      	bne.n	8009bee <set_sequence_step_timeout+0xf8>
				Status = VL53L0X_WrWord(Dev,
 8009bdc:	8b3b      	ldrh	r3, [r7, #24]
 8009bde:	461a      	mov	r2, r3
 8009be0:	2151      	movs	r1, #81	; 0x51
 8009be2:	68f8      	ldr	r0, [r7, #12]
 8009be4:	f001 fc04 	bl	800b3f0 <VL53L0X_WrWord>
 8009be8:	4603      	mov	r3, r0
 8009bea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				PreRangeEncodedTimeOut);
			}

			if (Status == VL53L0X_ERROR_NONE) {
 8009bee:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009bf2:	2b00      	cmp	r3, #0
 8009bf4:	d16b      	bne.n	8009cce <set_sequence_step_timeout+0x1d8>
				VL53L0X_SETDEVICESPECIFICPARAMETER(
 8009bf6:	68fb      	ldr	r3, [r7, #12]
 8009bf8:	687a      	ldr	r2, [r7, #4]
 8009bfa:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
 8009bfe:	e066      	b.n	8009cce <set_sequence_step_timeout+0x1d8>
					Dev,
					PreRangeTimeoutMicroSecs,
					TimeOutMicroSecs);
			}
		} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_FINAL_RANGE) {
 8009c00:	7afb      	ldrb	r3, [r7, #11]
 8009c02:	2b04      	cmp	r3, #4
 8009c04:	d160      	bne.n	8009cc8 <set_sequence_step_timeout+0x1d2>
			 * must be added. To do this both final and pre-range
			 * timeouts must be expressed in macro periods MClks
			 * because they have different vcsel periods.
			 */

			VL53L0X_GetSequenceStepEnables(Dev,
 8009c06:	f107 0310 	add.w	r3, r7, #16
 8009c0a:	4619      	mov	r1, r3
 8009c0c:	68f8      	ldr	r0, [r7, #12]
 8009c0e:	f7fd fa0d 	bl	800702c <VL53L0X_GetSequenceStepEnables>
					&SchedulerSequenceSteps);
			PreRangeTimeOutMClks = 0;
 8009c12:	2300      	movs	r3, #0
 8009c14:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (SchedulerSequenceSteps.PreRangeOn) {
 8009c16:	7cfb      	ldrb	r3, [r7, #19]
 8009c18:	2b00      	cmp	r3, #0
 8009c1a:	d01d      	beq.n	8009c58 <set_sequence_step_timeout+0x162>

				/* Retrieve PRE-RANGE VCSEL Period */
				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8009c1c:	f107 031b 	add.w	r3, r7, #27
 8009c20:	461a      	mov	r2, r3
 8009c22:	2100      	movs	r1, #0
 8009c24:	68f8      	ldr	r0, [r7, #12]
 8009c26:	f7fd f8f5 	bl	8006e14 <VL53L0X_GetVcselPulsePeriod>
 8009c2a:	4603      	mov	r3, r0
 8009c2c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

				/* Retrieve PRE-RANGE Timeout in Macro periods
				 * (MCLKS) */
				if (Status == VL53L0X_ERROR_NONE) {
 8009c30:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009c34:	2b00      	cmp	r3, #0
 8009c36:	d10f      	bne.n	8009c58 <set_sequence_step_timeout+0x162>
					Status = VL53L0X_RdWord(Dev, 0x51,
 8009c38:	f107 0318 	add.w	r3, r7, #24
 8009c3c:	461a      	mov	r2, r3
 8009c3e:	2151      	movs	r1, #81	; 0x51
 8009c40:	68f8      	ldr	r0, [r7, #12]
 8009c42:	f001 fc5d 	bl	800b500 <VL53L0X_RdWord>
 8009c46:	4603      	mov	r3, r0
 8009c48:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						&PreRangeEncodedTimeOut);
					PreRangeTimeOutMClks =
						VL53L0X_decode_timeout(
 8009c4c:	8b3b      	ldrh	r3, [r7, #24]
 8009c4e:	4618      	mov	r0, r3
 8009c50:	f7ff fe06 	bl	8009860 <VL53L0X_decode_timeout>
 8009c54:	4603      	mov	r3, r0
					PreRangeTimeOutMClks =
 8009c56:	84bb      	strh	r3, [r7, #36]	; 0x24
			}

			/* Calculate FINAL RANGE Timeout in Macro Periods
			 * (MCLKS) and add PRE-RANGE value
			 */
			if (Status == VL53L0X_ERROR_NONE) {
 8009c58:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009c5c:	2b00      	cmp	r3, #0
 8009c5e:	d109      	bne.n	8009c74 <set_sequence_step_timeout+0x17e>

				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8009c60:	f107 031b 	add.w	r3, r7, #27
 8009c64:	461a      	mov	r2, r3
 8009c66:	2101      	movs	r1, #1
 8009c68:	68f8      	ldr	r0, [r7, #12]
 8009c6a:	f7fd f8d3 	bl	8006e14 <VL53L0X_GetVcselPulsePeriod>
 8009c6e:	4603      	mov	r3, r0
 8009c70:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
						&CurrentVCSELPulsePeriodPClk);
			}
			if (Status == VL53L0X_ERROR_NONE) {
 8009c74:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009c78:	2b00      	cmp	r3, #0
 8009c7a:	d128      	bne.n	8009cce <set_sequence_step_timeout+0x1d8>

				FinalRangeTimeOutMClks =
					VL53L0X_calc_timeout_mclks(Dev,
 8009c7c:	7efb      	ldrb	r3, [r7, #27]
 8009c7e:	461a      	mov	r2, r3
 8009c80:	6879      	ldr	r1, [r7, #4]
 8009c82:	68f8      	ldr	r0, [r7, #12]
 8009c84:	f7ff fe02 	bl	800988c <VL53L0X_calc_timeout_mclks>
 8009c88:	6238      	str	r0, [r7, #32]
					TimeOutMicroSecs,
					(uint8_t) CurrentVCSELPulsePeriodPClk);

				FinalRangeTimeOutMClks += PreRangeTimeOutMClks;
 8009c8a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009c8c:	6a3a      	ldr	r2, [r7, #32]
 8009c8e:	4413      	add	r3, r2
 8009c90:	623b      	str	r3, [r7, #32]

				FinalRangeEncodedTimeOut =
				VL53L0X_encode_timeout(FinalRangeTimeOutMClks);
 8009c92:	6a38      	ldr	r0, [r7, #32]
 8009c94:	f7ff fdb8 	bl	8009808 <VL53L0X_encode_timeout>
 8009c98:	4603      	mov	r3, r0
 8009c9a:	83fb      	strh	r3, [r7, #30]

				if (Status == VL53L0X_ERROR_NONE) {
 8009c9c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009ca0:	2b00      	cmp	r3, #0
 8009ca2:	d108      	bne.n	8009cb6 <set_sequence_step_timeout+0x1c0>
					Status = VL53L0X_WrWord(Dev, 0x71,
 8009ca4:	8bfb      	ldrh	r3, [r7, #30]
 8009ca6:	461a      	mov	r2, r3
 8009ca8:	2171      	movs	r1, #113	; 0x71
 8009caa:	68f8      	ldr	r0, [r7, #12]
 8009cac:	f001 fba0 	bl	800b3f0 <VL53L0X_WrWord>
 8009cb0:	4603      	mov	r3, r0
 8009cb2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					FinalRangeEncodedTimeOut);
				}

				if (Status == VL53L0X_ERROR_NONE) {
 8009cb6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009cba:	2b00      	cmp	r3, #0
 8009cbc:	d107      	bne.n	8009cce <set_sequence_step_timeout+0x1d8>
					VL53L0X_SETDEVICESPECIFICPARAMETER(
 8009cbe:	68fb      	ldr	r3, [r7, #12]
 8009cc0:	687a      	ldr	r2, [r7, #4]
 8009cc2:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
 8009cc6:	e002      	b.n	8009cce <set_sequence_step_timeout+0x1d8>
						FinalRangeTimeoutMicroSecs,
						TimeOutMicroSecs);
				}
			}
		} else
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 8009cc8:	23fc      	movs	r3, #252	; 0xfc
 8009cca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	}
	return Status;
 8009cce:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8009cd2:	4618      	mov	r0, r3
 8009cd4:	3728      	adds	r7, #40	; 0x28
 8009cd6:	46bd      	mov	sp, r7
 8009cd8:	bd80      	pop	{r7, pc}

08009cda <VL53L0X_set_vcsel_pulse_period>:

VL53L0X_Error VL53L0X_set_vcsel_pulse_period(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t VCSELPulsePeriodPCLK)
{
 8009cda:	b580      	push	{r7, lr}
 8009cdc:	b08a      	sub	sp, #40	; 0x28
 8009cde:	af00      	add	r7, sp, #0
 8009ce0:	6078      	str	r0, [r7, #4]
 8009ce2:	460b      	mov	r3, r1
 8009ce4:	70fb      	strb	r3, [r7, #3]
 8009ce6:	4613      	mov	r3, r2
 8009ce8:	70bb      	strb	r3, [r7, #2]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009cea:	2300      	movs	r3, #0
 8009cec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint8_t vcsel_period_reg;
	uint8_t MinPreVcselPeriodPCLK = 12;
 8009cf0:	230c      	movs	r3, #12
 8009cf2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	uint8_t MaxPreVcselPeriodPCLK = 18;
 8009cf6:	2312      	movs	r3, #18
 8009cf8:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	uint8_t MinFinalVcselPeriodPCLK = 8;
 8009cfc:	2308      	movs	r3, #8
 8009cfe:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	uint8_t MaxFinalVcselPeriodPCLK = 14;
 8009d02:	230e      	movs	r3, #14
 8009d04:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	uint32_t MeasurementTimingBudgetMicroSeconds;
	uint32_t FinalRangeTimeoutMicroSeconds;
	uint32_t PreRangeTimeoutMicroSeconds;
	uint32_t MsrcTimeoutMicroSeconds;
	uint8_t PhaseCalInt = 0;
 8009d08:	2300      	movs	r3, #0
 8009d0a:	73fb      	strb	r3, [r7, #15]

	/* Check if valid clock period requested */

	if ((VCSELPulsePeriodPCLK % 2) != 0) {
 8009d0c:	78bb      	ldrb	r3, [r7, #2]
 8009d0e:	f003 0301 	and.w	r3, r3, #1
 8009d12:	b2db      	uxtb	r3, r3
 8009d14:	2b00      	cmp	r3, #0
 8009d16:	d003      	beq.n	8009d20 <VL53L0X_set_vcsel_pulse_period+0x46>
		/* Value must be an even number */
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8009d18:	23fc      	movs	r3, #252	; 0xfc
 8009d1a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8009d1e:	e020      	b.n	8009d62 <VL53L0X_set_vcsel_pulse_period+0x88>
	} else if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_PRE_RANGE &&
 8009d20:	78fb      	ldrb	r3, [r7, #3]
 8009d22:	2b00      	cmp	r3, #0
 8009d24:	d10d      	bne.n	8009d42 <VL53L0X_set_vcsel_pulse_period+0x68>
 8009d26:	78ba      	ldrb	r2, [r7, #2]
 8009d28:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8009d2c:	429a      	cmp	r2, r3
 8009d2e:	d304      	bcc.n	8009d3a <VL53L0X_set_vcsel_pulse_period+0x60>
		(VCSELPulsePeriodPCLK < MinPreVcselPeriodPCLK ||
 8009d30:	78ba      	ldrb	r2, [r7, #2]
 8009d32:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8009d36:	429a      	cmp	r2, r3
 8009d38:	d903      	bls.n	8009d42 <VL53L0X_set_vcsel_pulse_period+0x68>
		VCSELPulsePeriodPCLK > MaxPreVcselPeriodPCLK)) {
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8009d3a:	23fc      	movs	r3, #252	; 0xfc
 8009d3c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8009d40:	e00f      	b.n	8009d62 <VL53L0X_set_vcsel_pulse_period+0x88>
	} else if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_FINAL_RANGE &&
 8009d42:	78fb      	ldrb	r3, [r7, #3]
 8009d44:	2b01      	cmp	r3, #1
 8009d46:	d10c      	bne.n	8009d62 <VL53L0X_set_vcsel_pulse_period+0x88>
 8009d48:	78ba      	ldrb	r2, [r7, #2]
 8009d4a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8009d4e:	429a      	cmp	r2, r3
 8009d50:	d304      	bcc.n	8009d5c <VL53L0X_set_vcsel_pulse_period+0x82>
		(VCSELPulsePeriodPCLK < MinFinalVcselPeriodPCLK ||
 8009d52:	78ba      	ldrb	r2, [r7, #2]
 8009d54:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009d58:	429a      	cmp	r2, r3
 8009d5a:	d902      	bls.n	8009d62 <VL53L0X_set_vcsel_pulse_period+0x88>
		 VCSELPulsePeriodPCLK > MaxFinalVcselPeriodPCLK)) {

		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8009d5c:	23fc      	movs	r3, #252	; 0xfc
 8009d5e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	/* Apply specific settings for the requested clock period */

	if (Status != VL53L0X_ERROR_NONE)
 8009d62:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009d66:	2b00      	cmp	r3, #0
 8009d68:	d002      	beq.n	8009d70 <VL53L0X_set_vcsel_pulse_period+0x96>
		return Status;
 8009d6a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009d6e:	e239      	b.n	800a1e4 <VL53L0X_set_vcsel_pulse_period+0x50a>


	if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_PRE_RANGE) {
 8009d70:	78fb      	ldrb	r3, [r7, #3]
 8009d72:	2b00      	cmp	r3, #0
 8009d74:	d150      	bne.n	8009e18 <VL53L0X_set_vcsel_pulse_period+0x13e>

		/* Set phase check limits */
		if (VCSELPulsePeriodPCLK == 12) {
 8009d76:	78bb      	ldrb	r3, [r7, #2]
 8009d78:	2b0c      	cmp	r3, #12
 8009d7a:	d110      	bne.n	8009d9e <VL53L0X_set_vcsel_pulse_period+0xc4>

			Status = VL53L0X_WrByte(Dev,
 8009d7c:	2218      	movs	r2, #24
 8009d7e:	2157      	movs	r1, #87	; 0x57
 8009d80:	6878      	ldr	r0, [r7, #4]
 8009d82:	f001 fb11 	bl	800b3a8 <VL53L0X_WrByte>
 8009d86:	4603      	mov	r3, r0
 8009d88:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x18);
			Status = VL53L0X_WrByte(Dev,
 8009d8c:	2208      	movs	r2, #8
 8009d8e:	2156      	movs	r1, #86	; 0x56
 8009d90:	6878      	ldr	r0, [r7, #4]
 8009d92:	f001 fb09 	bl	800b3a8 <VL53L0X_WrByte>
 8009d96:	4603      	mov	r3, r0
 8009d98:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8009d9c:	e17f      	b.n	800a09e <VL53L0X_set_vcsel_pulse_period+0x3c4>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		} else if (VCSELPulsePeriodPCLK == 14) {
 8009d9e:	78bb      	ldrb	r3, [r7, #2]
 8009da0:	2b0e      	cmp	r3, #14
 8009da2:	d110      	bne.n	8009dc6 <VL53L0X_set_vcsel_pulse_period+0xec>

			Status = VL53L0X_WrByte(Dev,
 8009da4:	2230      	movs	r2, #48	; 0x30
 8009da6:	2157      	movs	r1, #87	; 0x57
 8009da8:	6878      	ldr	r0, [r7, #4]
 8009daa:	f001 fafd 	bl	800b3a8 <VL53L0X_WrByte>
 8009dae:	4603      	mov	r3, r0
 8009db0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x30);
			Status = VL53L0X_WrByte(Dev,
 8009db4:	2208      	movs	r2, #8
 8009db6:	2156      	movs	r1, #86	; 0x56
 8009db8:	6878      	ldr	r0, [r7, #4]
 8009dba:	f001 faf5 	bl	800b3a8 <VL53L0X_WrByte>
 8009dbe:	4603      	mov	r3, r0
 8009dc0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8009dc4:	e16b      	b.n	800a09e <VL53L0X_set_vcsel_pulse_period+0x3c4>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		} else if (VCSELPulsePeriodPCLK == 16) {
 8009dc6:	78bb      	ldrb	r3, [r7, #2]
 8009dc8:	2b10      	cmp	r3, #16
 8009dca:	d110      	bne.n	8009dee <VL53L0X_set_vcsel_pulse_period+0x114>

			Status = VL53L0X_WrByte(Dev,
 8009dcc:	2240      	movs	r2, #64	; 0x40
 8009dce:	2157      	movs	r1, #87	; 0x57
 8009dd0:	6878      	ldr	r0, [r7, #4]
 8009dd2:	f001 fae9 	bl	800b3a8 <VL53L0X_WrByte>
 8009dd6:	4603      	mov	r3, r0
 8009dd8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x40);
			Status = VL53L0X_WrByte(Dev,
 8009ddc:	2208      	movs	r2, #8
 8009dde:	2156      	movs	r1, #86	; 0x56
 8009de0:	6878      	ldr	r0, [r7, #4]
 8009de2:	f001 fae1 	bl	800b3a8 <VL53L0X_WrByte>
 8009de6:	4603      	mov	r3, r0
 8009de8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8009dec:	e157      	b.n	800a09e <VL53L0X_set_vcsel_pulse_period+0x3c4>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		} else if (VCSELPulsePeriodPCLK == 18) {
 8009dee:	78bb      	ldrb	r3, [r7, #2]
 8009df0:	2b12      	cmp	r3, #18
 8009df2:	f040 8154 	bne.w	800a09e <VL53L0X_set_vcsel_pulse_period+0x3c4>

			Status = VL53L0X_WrByte(Dev,
 8009df6:	2250      	movs	r2, #80	; 0x50
 8009df8:	2157      	movs	r1, #87	; 0x57
 8009dfa:	6878      	ldr	r0, [r7, #4]
 8009dfc:	f001 fad4 	bl	800b3a8 <VL53L0X_WrByte>
 8009e00:	4603      	mov	r3, r0
 8009e02:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x50);
			Status = VL53L0X_WrByte(Dev,
 8009e06:	2208      	movs	r2, #8
 8009e08:	2156      	movs	r1, #86	; 0x56
 8009e0a:	6878      	ldr	r0, [r7, #4]
 8009e0c:	f001 facc 	bl	800b3a8 <VL53L0X_WrByte>
 8009e10:	4603      	mov	r3, r0
 8009e12:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8009e16:	e142      	b.n	800a09e <VL53L0X_set_vcsel_pulse_period+0x3c4>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		}
	} else if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_FINAL_RANGE) {
 8009e18:	78fb      	ldrb	r3, [r7, #3]
 8009e1a:	2b01      	cmp	r3, #1
 8009e1c:	f040 813f 	bne.w	800a09e <VL53L0X_set_vcsel_pulse_period+0x3c4>

		if (VCSELPulsePeriodPCLK == 8) {
 8009e20:	78bb      	ldrb	r3, [r7, #2]
 8009e22:	2b08      	cmp	r3, #8
 8009e24:	d14c      	bne.n	8009ec0 <VL53L0X_set_vcsel_pulse_period+0x1e6>

			Status = VL53L0X_WrByte(Dev,
 8009e26:	2210      	movs	r2, #16
 8009e28:	2148      	movs	r1, #72	; 0x48
 8009e2a:	6878      	ldr	r0, [r7, #4]
 8009e2c:	f001 fabc 	bl	800b3a8 <VL53L0X_WrByte>
 8009e30:	4603      	mov	r3, r0
 8009e32:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x10);
			Status = VL53L0X_WrByte(Dev,
 8009e36:	2208      	movs	r2, #8
 8009e38:	2147      	movs	r1, #71	; 0x47
 8009e3a:	6878      	ldr	r0, [r7, #4]
 8009e3c:	f001 fab4 	bl	800b3a8 <VL53L0X_WrByte>
 8009e40:	4603      	mov	r3, r0
 8009e42:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);

			Status |= VL53L0X_WrByte(Dev,
 8009e46:	2202      	movs	r2, #2
 8009e48:	2132      	movs	r1, #50	; 0x32
 8009e4a:	6878      	ldr	r0, [r7, #4]
 8009e4c:	f001 faac 	bl	800b3a8 <VL53L0X_WrByte>
 8009e50:	4603      	mov	r3, r0
 8009e52:	461a      	mov	r2, r3
 8009e54:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009e58:	4313      	orrs	r3, r2
 8009e5a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x02);
			Status |= VL53L0X_WrByte(Dev,
 8009e5e:	220c      	movs	r2, #12
 8009e60:	2130      	movs	r1, #48	; 0x30
 8009e62:	6878      	ldr	r0, [r7, #4]
 8009e64:	f001 faa0 	bl	800b3a8 <VL53L0X_WrByte>
 8009e68:	4603      	mov	r3, r0
 8009e6a:	461a      	mov	r2, r3
 8009e6c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009e70:	4313      	orrs	r3, r2
 8009e72:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x0C);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 8009e76:	2201      	movs	r2, #1
 8009e78:	21ff      	movs	r1, #255	; 0xff
 8009e7a:	6878      	ldr	r0, [r7, #4]
 8009e7c:	f001 fa94 	bl	800b3a8 <VL53L0X_WrByte>
 8009e80:	4603      	mov	r3, r0
 8009e82:	461a      	mov	r2, r3
 8009e84:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009e88:	4313      	orrs	r3, r2
 8009e8a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Status |= VL53L0X_WrByte(Dev,
 8009e8e:	2230      	movs	r2, #48	; 0x30
 8009e90:	2130      	movs	r1, #48	; 0x30
 8009e92:	6878      	ldr	r0, [r7, #4]
 8009e94:	f001 fa88 	bl	800b3a8 <VL53L0X_WrByte>
 8009e98:	4603      	mov	r3, r0
 8009e9a:	461a      	mov	r2, r3
 8009e9c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009ea0:	4313      	orrs	r3, r2
 8009ea2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x30);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 8009ea6:	2200      	movs	r2, #0
 8009ea8:	21ff      	movs	r1, #255	; 0xff
 8009eaa:	6878      	ldr	r0, [r7, #4]
 8009eac:	f001 fa7c 	bl	800b3a8 <VL53L0X_WrByte>
 8009eb0:	4603      	mov	r3, r0
 8009eb2:	461a      	mov	r2, r3
 8009eb4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009eb8:	4313      	orrs	r3, r2
 8009eba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8009ebe:	e0ee      	b.n	800a09e <VL53L0X_set_vcsel_pulse_period+0x3c4>
		} else if (VCSELPulsePeriodPCLK == 10) {
 8009ec0:	78bb      	ldrb	r3, [r7, #2]
 8009ec2:	2b0a      	cmp	r3, #10
 8009ec4:	d14c      	bne.n	8009f60 <VL53L0X_set_vcsel_pulse_period+0x286>

			Status = VL53L0X_WrByte(Dev,
 8009ec6:	2228      	movs	r2, #40	; 0x28
 8009ec8:	2148      	movs	r1, #72	; 0x48
 8009eca:	6878      	ldr	r0, [r7, #4]
 8009ecc:	f001 fa6c 	bl	800b3a8 <VL53L0X_WrByte>
 8009ed0:	4603      	mov	r3, r0
 8009ed2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x28);
			Status = VL53L0X_WrByte(Dev,
 8009ed6:	2208      	movs	r2, #8
 8009ed8:	2147      	movs	r1, #71	; 0x47
 8009eda:	6878      	ldr	r0, [r7, #4]
 8009edc:	f001 fa64 	bl	800b3a8 <VL53L0X_WrByte>
 8009ee0:	4603      	mov	r3, r0
 8009ee2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);

			Status |= VL53L0X_WrByte(Dev,
 8009ee6:	2203      	movs	r2, #3
 8009ee8:	2132      	movs	r1, #50	; 0x32
 8009eea:	6878      	ldr	r0, [r7, #4]
 8009eec:	f001 fa5c 	bl	800b3a8 <VL53L0X_WrByte>
 8009ef0:	4603      	mov	r3, r0
 8009ef2:	461a      	mov	r2, r3
 8009ef4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009ef8:	4313      	orrs	r3, r2
 8009efa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x03);
			Status |= VL53L0X_WrByte(Dev,
 8009efe:	2209      	movs	r2, #9
 8009f00:	2130      	movs	r1, #48	; 0x30
 8009f02:	6878      	ldr	r0, [r7, #4]
 8009f04:	f001 fa50 	bl	800b3a8 <VL53L0X_WrByte>
 8009f08:	4603      	mov	r3, r0
 8009f0a:	461a      	mov	r2, r3
 8009f0c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009f10:	4313      	orrs	r3, r2
 8009f12:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x09);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 8009f16:	2201      	movs	r2, #1
 8009f18:	21ff      	movs	r1, #255	; 0xff
 8009f1a:	6878      	ldr	r0, [r7, #4]
 8009f1c:	f001 fa44 	bl	800b3a8 <VL53L0X_WrByte>
 8009f20:	4603      	mov	r3, r0
 8009f22:	461a      	mov	r2, r3
 8009f24:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009f28:	4313      	orrs	r3, r2
 8009f2a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Status |= VL53L0X_WrByte(Dev,
 8009f2e:	2220      	movs	r2, #32
 8009f30:	2130      	movs	r1, #48	; 0x30
 8009f32:	6878      	ldr	r0, [r7, #4]
 8009f34:	f001 fa38 	bl	800b3a8 <VL53L0X_WrByte>
 8009f38:	4603      	mov	r3, r0
 8009f3a:	461a      	mov	r2, r3
 8009f3c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009f40:	4313      	orrs	r3, r2
 8009f42:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x20);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 8009f46:	2200      	movs	r2, #0
 8009f48:	21ff      	movs	r1, #255	; 0xff
 8009f4a:	6878      	ldr	r0, [r7, #4]
 8009f4c:	f001 fa2c 	bl	800b3a8 <VL53L0X_WrByte>
 8009f50:	4603      	mov	r3, r0
 8009f52:	461a      	mov	r2, r3
 8009f54:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009f58:	4313      	orrs	r3, r2
 8009f5a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8009f5e:	e09e      	b.n	800a09e <VL53L0X_set_vcsel_pulse_period+0x3c4>
		} else if (VCSELPulsePeriodPCLK == 12) {
 8009f60:	78bb      	ldrb	r3, [r7, #2]
 8009f62:	2b0c      	cmp	r3, #12
 8009f64:	d14c      	bne.n	800a000 <VL53L0X_set_vcsel_pulse_period+0x326>

			Status = VL53L0X_WrByte(Dev,
 8009f66:	2238      	movs	r2, #56	; 0x38
 8009f68:	2148      	movs	r1, #72	; 0x48
 8009f6a:	6878      	ldr	r0, [r7, #4]
 8009f6c:	f001 fa1c 	bl	800b3a8 <VL53L0X_WrByte>
 8009f70:	4603      	mov	r3, r0
 8009f72:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x38);
			Status = VL53L0X_WrByte(Dev,
 8009f76:	2208      	movs	r2, #8
 8009f78:	2147      	movs	r1, #71	; 0x47
 8009f7a:	6878      	ldr	r0, [r7, #4]
 8009f7c:	f001 fa14 	bl	800b3a8 <VL53L0X_WrByte>
 8009f80:	4603      	mov	r3, r0
 8009f82:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);

			Status |= VL53L0X_WrByte(Dev,
 8009f86:	2203      	movs	r2, #3
 8009f88:	2132      	movs	r1, #50	; 0x32
 8009f8a:	6878      	ldr	r0, [r7, #4]
 8009f8c:	f001 fa0c 	bl	800b3a8 <VL53L0X_WrByte>
 8009f90:	4603      	mov	r3, r0
 8009f92:	461a      	mov	r2, r3
 8009f94:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009f98:	4313      	orrs	r3, r2
 8009f9a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x03);
			Status |= VL53L0X_WrByte(Dev,
 8009f9e:	2208      	movs	r2, #8
 8009fa0:	2130      	movs	r1, #48	; 0x30
 8009fa2:	6878      	ldr	r0, [r7, #4]
 8009fa4:	f001 fa00 	bl	800b3a8 <VL53L0X_WrByte>
 8009fa8:	4603      	mov	r3, r0
 8009faa:	461a      	mov	r2, r3
 8009fac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009fb0:	4313      	orrs	r3, r2
 8009fb2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x08);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 8009fb6:	2201      	movs	r2, #1
 8009fb8:	21ff      	movs	r1, #255	; 0xff
 8009fba:	6878      	ldr	r0, [r7, #4]
 8009fbc:	f001 f9f4 	bl	800b3a8 <VL53L0X_WrByte>
 8009fc0:	4603      	mov	r3, r0
 8009fc2:	461a      	mov	r2, r3
 8009fc4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009fc8:	4313      	orrs	r3, r2
 8009fca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Status |= VL53L0X_WrByte(Dev,
 8009fce:	2220      	movs	r2, #32
 8009fd0:	2130      	movs	r1, #48	; 0x30
 8009fd2:	6878      	ldr	r0, [r7, #4]
 8009fd4:	f001 f9e8 	bl	800b3a8 <VL53L0X_WrByte>
 8009fd8:	4603      	mov	r3, r0
 8009fda:	461a      	mov	r2, r3
 8009fdc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009fe0:	4313      	orrs	r3, r2
 8009fe2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x20);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 8009fe6:	2200      	movs	r2, #0
 8009fe8:	21ff      	movs	r1, #255	; 0xff
 8009fea:	6878      	ldr	r0, [r7, #4]
 8009fec:	f001 f9dc 	bl	800b3a8 <VL53L0X_WrByte>
 8009ff0:	4603      	mov	r3, r0
 8009ff2:	461a      	mov	r2, r3
 8009ff4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009ff8:	4313      	orrs	r3, r2
 8009ffa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8009ffe:	e04e      	b.n	800a09e <VL53L0X_set_vcsel_pulse_period+0x3c4>
		} else if (VCSELPulsePeriodPCLK == 14) {
 800a000:	78bb      	ldrb	r3, [r7, #2]
 800a002:	2b0e      	cmp	r3, #14
 800a004:	d14b      	bne.n	800a09e <VL53L0X_set_vcsel_pulse_period+0x3c4>

			Status = VL53L0X_WrByte(Dev,
 800a006:	2248      	movs	r2, #72	; 0x48
 800a008:	2148      	movs	r1, #72	; 0x48
 800a00a:	6878      	ldr	r0, [r7, #4]
 800a00c:	f001 f9cc 	bl	800b3a8 <VL53L0X_WrByte>
 800a010:	4603      	mov	r3, r0
 800a012:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x048);
			Status = VL53L0X_WrByte(Dev,
 800a016:	2208      	movs	r2, #8
 800a018:	2147      	movs	r1, #71	; 0x47
 800a01a:	6878      	ldr	r0, [r7, #4]
 800a01c:	f001 f9c4 	bl	800b3a8 <VL53L0X_WrByte>
 800a020:	4603      	mov	r3, r0
 800a022:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);

			Status |= VL53L0X_WrByte(Dev,
 800a026:	2203      	movs	r2, #3
 800a028:	2132      	movs	r1, #50	; 0x32
 800a02a:	6878      	ldr	r0, [r7, #4]
 800a02c:	f001 f9bc 	bl	800b3a8 <VL53L0X_WrByte>
 800a030:	4603      	mov	r3, r0
 800a032:	461a      	mov	r2, r3
 800a034:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a038:	4313      	orrs	r3, r2
 800a03a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x03);
			Status |= VL53L0X_WrByte(Dev,
 800a03e:	2207      	movs	r2, #7
 800a040:	2130      	movs	r1, #48	; 0x30
 800a042:	6878      	ldr	r0, [r7, #4]
 800a044:	f001 f9b0 	bl	800b3a8 <VL53L0X_WrByte>
 800a048:	4603      	mov	r3, r0
 800a04a:	461a      	mov	r2, r3
 800a04c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a050:	4313      	orrs	r3, r2
 800a052:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x07);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 800a056:	2201      	movs	r2, #1
 800a058:	21ff      	movs	r1, #255	; 0xff
 800a05a:	6878      	ldr	r0, [r7, #4]
 800a05c:	f001 f9a4 	bl	800b3a8 <VL53L0X_WrByte>
 800a060:	4603      	mov	r3, r0
 800a062:	461a      	mov	r2, r3
 800a064:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a068:	4313      	orrs	r3, r2
 800a06a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Status |= VL53L0X_WrByte(Dev,
 800a06e:	2220      	movs	r2, #32
 800a070:	2130      	movs	r1, #48	; 0x30
 800a072:	6878      	ldr	r0, [r7, #4]
 800a074:	f001 f998 	bl	800b3a8 <VL53L0X_WrByte>
 800a078:	4603      	mov	r3, r0
 800a07a:	461a      	mov	r2, r3
 800a07c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a080:	4313      	orrs	r3, r2
 800a082:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x20);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 800a086:	2200      	movs	r2, #0
 800a088:	21ff      	movs	r1, #255	; 0xff
 800a08a:	6878      	ldr	r0, [r7, #4]
 800a08c:	f001 f98c 	bl	800b3a8 <VL53L0X_WrByte>
 800a090:	4603      	mov	r3, r0
 800a092:	461a      	mov	r2, r3
 800a094:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a098:	4313      	orrs	r3, r2
 800a09a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}


	/* Re-calculate and apply timeouts, in macro periods */

	if (Status == VL53L0X_ERROR_NONE) {
 800a09e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a0a2:	2b00      	cmp	r3, #0
 800a0a4:	d17f      	bne.n	800a1a6 <VL53L0X_set_vcsel_pulse_period+0x4cc>
		vcsel_period_reg = VL53L0X_encode_vcsel_period((uint8_t)
 800a0a6:	78bb      	ldrb	r3, [r7, #2]
 800a0a8:	4618      	mov	r0, r3
 800a0aa:	f7fe fe38 	bl	8008d1e <VL53L0X_encode_vcsel_period>
 800a0ae:	4603      	mov	r3, r0
 800a0b0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
		* using the new VCSEL period.
		*
		* For the MSRC timeout, the same applies - this timeout being
		* dependant on the pre-range vcsel period.
		*/
		switch (VcselPeriodType) {
 800a0b4:	78fb      	ldrb	r3, [r7, #3]
 800a0b6:	2b00      	cmp	r3, #0
 800a0b8:	d002      	beq.n	800a0c0 <VL53L0X_set_vcsel_pulse_period+0x3e6>
 800a0ba:	2b01      	cmp	r3, #1
 800a0bc:	d045      	beq.n	800a14a <VL53L0X_set_vcsel_pulse_period+0x470>
 800a0be:	e06e      	b.n	800a19e <VL53L0X_set_vcsel_pulse_period+0x4c4>
		case VL53L0X_VCSEL_PERIOD_PRE_RANGE:
			Status = get_sequence_step_timeout(Dev,
 800a0c0:	f107 0314 	add.w	r3, r7, #20
 800a0c4:	461a      	mov	r2, r3
 800a0c6:	2103      	movs	r1, #3
 800a0c8:	6878      	ldr	r0, [r7, #4]
 800a0ca:	f7ff fc33 	bl	8009934 <get_sequence_step_timeout>
 800a0ce:	4603      	mov	r3, r0
 800a0d0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_SEQUENCESTEP_PRE_RANGE,
				&PreRangeTimeoutMicroSeconds);

			if (Status == VL53L0X_ERROR_NONE)
 800a0d4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a0d8:	2b00      	cmp	r3, #0
 800a0da:	d109      	bne.n	800a0f0 <VL53L0X_set_vcsel_pulse_period+0x416>
				Status = get_sequence_step_timeout(Dev,
 800a0dc:	f107 0310 	add.w	r3, r7, #16
 800a0e0:	461a      	mov	r2, r3
 800a0e2:	2102      	movs	r1, #2
 800a0e4:	6878      	ldr	r0, [r7, #4]
 800a0e6:	f7ff fc25 	bl	8009934 <get_sequence_step_timeout>
 800a0ea:	4603      	mov	r3, r0
 800a0ec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_SEQUENCESTEP_MSRC,
					&MsrcTimeoutMicroSeconds);

			if (Status == VL53L0X_ERROR_NONE)
 800a0f0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a0f4:	2b00      	cmp	r3, #0
 800a0f6:	d109      	bne.n	800a10c <VL53L0X_set_vcsel_pulse_period+0x432>
				Status = VL53L0X_WrByte(Dev,
 800a0f8:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800a0fc:	461a      	mov	r2, r3
 800a0fe:	2150      	movs	r1, #80	; 0x50
 800a100:	6878      	ldr	r0, [r7, #4]
 800a102:	f001 f951 	bl	800b3a8 <VL53L0X_WrByte>
 800a106:	4603      	mov	r3, r0
 800a108:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VCSEL_PERIOD,
					vcsel_period_reg);


			if (Status == VL53L0X_ERROR_NONE)
 800a10c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a110:	2b00      	cmp	r3, #0
 800a112:	d108      	bne.n	800a126 <VL53L0X_set_vcsel_pulse_period+0x44c>
				Status = set_sequence_step_timeout(Dev,
 800a114:	697b      	ldr	r3, [r7, #20]
 800a116:	461a      	mov	r2, r3
 800a118:	2103      	movs	r1, #3
 800a11a:	6878      	ldr	r0, [r7, #4]
 800a11c:	f7ff fceb 	bl	8009af6 <set_sequence_step_timeout>
 800a120:	4603      	mov	r3, r0
 800a122:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_SEQUENCESTEP_PRE_RANGE,
					PreRangeTimeoutMicroSeconds);


			if (Status == VL53L0X_ERROR_NONE)
 800a126:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a12a:	2b00      	cmp	r3, #0
 800a12c:	d108      	bne.n	800a140 <VL53L0X_set_vcsel_pulse_period+0x466>
				Status = set_sequence_step_timeout(Dev,
 800a12e:	693b      	ldr	r3, [r7, #16]
 800a130:	461a      	mov	r2, r3
 800a132:	2102      	movs	r1, #2
 800a134:	6878      	ldr	r0, [r7, #4]
 800a136:	f7ff fcde 	bl	8009af6 <set_sequence_step_timeout>
 800a13a:	4603      	mov	r3, r0
 800a13c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_SEQUENCESTEP_MSRC,
					MsrcTimeoutMicroSeconds);

			VL53L0X_SETDEVICESPECIFICPARAMETER(
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	78ba      	ldrb	r2, [r7, #2]
 800a144:	f883 20e8 	strb.w	r2, [r3, #232]	; 0xe8
				Dev,
				PreRangeVcselPulsePeriod,
				VCSELPulsePeriodPCLK);
			break;
 800a148:	e02e      	b.n	800a1a8 <VL53L0X_set_vcsel_pulse_period+0x4ce>
		case VL53L0X_VCSEL_PERIOD_FINAL_RANGE:
			Status = get_sequence_step_timeout(Dev,
 800a14a:	f107 0318 	add.w	r3, r7, #24
 800a14e:	461a      	mov	r2, r3
 800a150:	2104      	movs	r1, #4
 800a152:	6878      	ldr	r0, [r7, #4]
 800a154:	f7ff fbee 	bl	8009934 <get_sequence_step_timeout>
 800a158:	4603      	mov	r3, r0
 800a15a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_SEQUENCESTEP_FINAL_RANGE,
				&FinalRangeTimeoutMicroSeconds);

			if (Status == VL53L0X_ERROR_NONE)
 800a15e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a162:	2b00      	cmp	r3, #0
 800a164:	d109      	bne.n	800a17a <VL53L0X_set_vcsel_pulse_period+0x4a0>
				Status = VL53L0X_WrByte(Dev,
 800a166:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800a16a:	461a      	mov	r2, r3
 800a16c:	2170      	movs	r1, #112	; 0x70
 800a16e:	6878      	ldr	r0, [r7, #4]
 800a170:	f001 f91a 	bl	800b3a8 <VL53L0X_WrByte>
 800a174:	4603      	mov	r3, r0
 800a176:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VCSEL_PERIOD,
					vcsel_period_reg);


			if (Status == VL53L0X_ERROR_NONE)
 800a17a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a17e:	2b00      	cmp	r3, #0
 800a180:	d108      	bne.n	800a194 <VL53L0X_set_vcsel_pulse_period+0x4ba>
				Status = set_sequence_step_timeout(Dev,
 800a182:	69bb      	ldr	r3, [r7, #24]
 800a184:	461a      	mov	r2, r3
 800a186:	2104      	movs	r1, #4
 800a188:	6878      	ldr	r0, [r7, #4]
 800a18a:	f7ff fcb4 	bl	8009af6 <set_sequence_step_timeout>
 800a18e:	4603      	mov	r3, r0
 800a190:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_SEQUENCESTEP_FINAL_RANGE,
					FinalRangeTimeoutMicroSeconds);

			VL53L0X_SETDEVICESPECIFICPARAMETER(
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	78ba      	ldrb	r2, [r7, #2]
 800a198:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
				Dev,
				FinalRangeVcselPulsePeriod,
				VCSELPulsePeriodPCLK);
			break;
 800a19c:	e004      	b.n	800a1a8 <VL53L0X_set_vcsel_pulse_period+0x4ce>
		default:
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 800a19e:	23fc      	movs	r3, #252	; 0xfc
 800a1a0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800a1a4:	e000      	b.n	800a1a8 <VL53L0X_set_vcsel_pulse_period+0x4ce>
		}
	}
 800a1a6:	bf00      	nop

	/* Finally, the timing budget must be re-applied */
	if (Status == VL53L0X_ERROR_NONE) {
 800a1a8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a1ac:	2b00      	cmp	r3, #0
 800a1ae:	d109      	bne.n	800a1c4 <VL53L0X_set_vcsel_pulse_period+0x4ea>
		VL53L0X_GETPARAMETERFIELD(Dev,
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	695b      	ldr	r3, [r3, #20]
 800a1b4:	61fb      	str	r3, [r7, #28]
			MeasurementTimingBudgetMicroSeconds,
			MeasurementTimingBudgetMicroSeconds);

		Status = VL53L0X_SetMeasurementTimingBudgetMicroSeconds(Dev,
 800a1b6:	69f9      	ldr	r1, [r7, #28]
 800a1b8:	6878      	ldr	r0, [r7, #4]
 800a1ba:	f7fc fded 	bl	8006d98 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>
 800a1be:	4603      	mov	r3, r0
 800a1c0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	/* Perform the phase calibration. This is needed after changing on
	 * vcsel period.
	 * get_data_enable = 0, restore_config = 1 */
	if (Status == VL53L0X_ERROR_NONE)
 800a1c4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a1c8:	2b00      	cmp	r3, #0
 800a1ca:	d109      	bne.n	800a1e0 <VL53L0X_set_vcsel_pulse_period+0x506>
		Status = VL53L0X_perform_phase_calibration(
 800a1cc:	f107 010f 	add.w	r1, r7, #15
 800a1d0:	2301      	movs	r3, #1
 800a1d2:	2200      	movs	r2, #0
 800a1d4:	6878      	ldr	r0, [r7, #4]
 800a1d6:	f7fe fcbd 	bl	8008b54 <VL53L0X_perform_phase_calibration>
 800a1da:	4603      	mov	r3, r0
 800a1dc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Dev, &PhaseCalInt, 0, 1);

	return Status;
 800a1e0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800a1e4:	4618      	mov	r0, r3
 800a1e6:	3728      	adds	r7, #40	; 0x28
 800a1e8:	46bd      	mov	sp, r7
 800a1ea:	bd80      	pop	{r7, pc}

0800a1ec <VL53L0X_get_vcsel_pulse_period>:

VL53L0X_Error VL53L0X_get_vcsel_pulse_period(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t *pVCSELPulsePeriodPCLK)
{
 800a1ec:	b580      	push	{r7, lr}
 800a1ee:	b086      	sub	sp, #24
 800a1f0:	af00      	add	r7, sp, #0
 800a1f2:	60f8      	str	r0, [r7, #12]
 800a1f4:	460b      	mov	r3, r1
 800a1f6:	607a      	str	r2, [r7, #4]
 800a1f8:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a1fa:	2300      	movs	r3, #0
 800a1fc:	75fb      	strb	r3, [r7, #23]
	uint8_t vcsel_period_reg;

	switch (VcselPeriodType) {
 800a1fe:	7afb      	ldrb	r3, [r7, #11]
 800a200:	2b00      	cmp	r3, #0
 800a202:	d002      	beq.n	800a20a <VL53L0X_get_vcsel_pulse_period+0x1e>
 800a204:	2b01      	cmp	r3, #1
 800a206:	d00a      	beq.n	800a21e <VL53L0X_get_vcsel_pulse_period+0x32>
 800a208:	e013      	b.n	800a232 <VL53L0X_get_vcsel_pulse_period+0x46>
	case VL53L0X_VCSEL_PERIOD_PRE_RANGE:
		Status = VL53L0X_RdByte(Dev,
 800a20a:	f107 0316 	add.w	r3, r7, #22
 800a20e:	461a      	mov	r2, r3
 800a210:	2150      	movs	r1, #80	; 0x50
 800a212:	68f8      	ldr	r0, [r7, #12]
 800a214:	f001 f94a 	bl	800b4ac <VL53L0X_RdByte>
 800a218:	4603      	mov	r3, r0
 800a21a:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_PRE_RANGE_CONFIG_VCSEL_PERIOD,
			&vcsel_period_reg);
	break;
 800a21c:	e00b      	b.n	800a236 <VL53L0X_get_vcsel_pulse_period+0x4a>
	case VL53L0X_VCSEL_PERIOD_FINAL_RANGE:
		Status = VL53L0X_RdByte(Dev,
 800a21e:	f107 0316 	add.w	r3, r7, #22
 800a222:	461a      	mov	r2, r3
 800a224:	2170      	movs	r1, #112	; 0x70
 800a226:	68f8      	ldr	r0, [r7, #12]
 800a228:	f001 f940 	bl	800b4ac <VL53L0X_RdByte>
 800a22c:	4603      	mov	r3, r0
 800a22e:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_FINAL_RANGE_CONFIG_VCSEL_PERIOD,
			&vcsel_period_reg);
	break;
 800a230:	e001      	b.n	800a236 <VL53L0X_get_vcsel_pulse_period+0x4a>
	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800a232:	23fc      	movs	r3, #252	; 0xfc
 800a234:	75fb      	strb	r3, [r7, #23]
	}

	if (Status == VL53L0X_ERROR_NONE)
 800a236:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a23a:	2b00      	cmp	r3, #0
 800a23c:	d107      	bne.n	800a24e <VL53L0X_get_vcsel_pulse_period+0x62>
		*pVCSELPulsePeriodPCLK =
			VL53L0X_decode_vcsel_period(vcsel_period_reg);
 800a23e:	7dbb      	ldrb	r3, [r7, #22]
 800a240:	4618      	mov	r0, r3
 800a242:	f7fe fd59 	bl	8008cf8 <VL53L0X_decode_vcsel_period>
 800a246:	4603      	mov	r3, r0
 800a248:	461a      	mov	r2, r3
		*pVCSELPulsePeriodPCLK =
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	701a      	strb	r2, [r3, #0]

	return Status;
 800a24e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a252:	4618      	mov	r0, r3
 800a254:	3718      	adds	r7, #24
 800a256:	46bd      	mov	sp, r7
 800a258:	bd80      	pop	{r7, pc}

0800a25a <VL53L0X_set_measurement_timing_budget_micro_seconds>:



VL53L0X_Error VL53L0X_set_measurement_timing_budget_micro_seconds(VL53L0X_DEV Dev,
		uint32_t MeasurementTimingBudgetMicroSeconds)
{
 800a25a:	b580      	push	{r7, lr}
 800a25c:	b092      	sub	sp, #72	; 0x48
 800a25e:	af00      	add	r7, sp, #0
 800a260:	6078      	str	r0, [r7, #4]
 800a262:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a264:	2300      	movs	r3, #0
 800a266:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	uint32_t FinalRangeTimingBudgetMicroSeconds;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;
	uint32_t MsrcDccTccTimeoutMicroSeconds	= 2000;
 800a26a:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800a26e:	613b      	str	r3, [r7, #16]
	uint32_t StartOverheadMicroSeconds		= 1910;
 800a270:	f240 7376 	movw	r3, #1910	; 0x776
 800a274:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint32_t EndOverheadMicroSeconds		= 960;
 800a276:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 800a27a:	63bb      	str	r3, [r7, #56]	; 0x38
	uint32_t MsrcOverheadMicroSeconds		= 660;
 800a27c:	f44f 7325 	mov.w	r3, #660	; 0x294
 800a280:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t TccOverheadMicroSeconds		= 590;
 800a282:	f240 234e 	movw	r3, #590	; 0x24e
 800a286:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t DssOverheadMicroSeconds		= 690;
 800a288:	f240 23b2 	movw	r3, #690	; 0x2b2
 800a28c:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t PreRangeOverheadMicroSeconds	= 660;
 800a28e:	f44f 7325 	mov.w	r3, #660	; 0x294
 800a292:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t FinalRangeOverheadMicroSeconds = 550;
 800a294:	f240 2326 	movw	r3, #550	; 0x226
 800a298:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t PreRangeTimeoutMicroSeconds	= 0;
 800a29a:	2300      	movs	r3, #0
 800a29c:	60fb      	str	r3, [r7, #12]
	uint32_t cMinTimingBudgetMicroSeconds	= 20000;
 800a29e:	f644 6320 	movw	r3, #20000	; 0x4e20
 800a2a2:	623b      	str	r3, [r7, #32]
	uint32_t SubTimeout = 0;
 800a2a4:	2300      	movs	r3, #0
 800a2a6:	61fb      	str	r3, [r7, #28]

	LOG_FUNCTION_START("");

	if (MeasurementTimingBudgetMicroSeconds
 800a2a8:	683a      	ldr	r2, [r7, #0]
 800a2aa:	6a3b      	ldr	r3, [r7, #32]
 800a2ac:	429a      	cmp	r2, r3
 800a2ae:	d205      	bcs.n	800a2bc <VL53L0X_set_measurement_timing_budget_micro_seconds+0x62>
			< cMinTimingBudgetMicroSeconds) {
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800a2b0:	23fc      	movs	r3, #252	; 0xfc
 800a2b2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		return Status;
 800a2b6:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800a2ba:	e0aa      	b.n	800a412 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>
	}

	FinalRangeTimingBudgetMicroSeconds =
		MeasurementTimingBudgetMicroSeconds -
		(StartOverheadMicroSeconds + EndOverheadMicroSeconds);
 800a2bc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800a2be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2c0:	4413      	add	r3, r2
	FinalRangeTimingBudgetMicroSeconds =
 800a2c2:	683a      	ldr	r2, [r7, #0]
 800a2c4:	1ad3      	subs	r3, r2, r3
 800a2c6:	643b      	str	r3, [r7, #64]	; 0x40

	Status = VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 800a2c8:	f107 0314 	add.w	r3, r7, #20
 800a2cc:	4619      	mov	r1, r3
 800a2ce:	6878      	ldr	r0, [r7, #4]
 800a2d0:	f7fc feac 	bl	800702c <VL53L0X_GetSequenceStepEnables>
 800a2d4:	4603      	mov	r3, r0
 800a2d6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

	if (Status == VL53L0X_ERROR_NONE &&
 800a2da:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800a2de:	2b00      	cmp	r3, #0
 800a2e0:	d15b      	bne.n	800a39a <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
		(SchedulerSequenceSteps.TccOn  ||
 800a2e2:	7d3b      	ldrb	r3, [r7, #20]
	if (Status == VL53L0X_ERROR_NONE &&
 800a2e4:	2b00      	cmp	r3, #0
 800a2e6:	d105      	bne.n	800a2f4 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x9a>
		SchedulerSequenceSteps.MsrcOn ||
 800a2e8:	7d7b      	ldrb	r3, [r7, #21]
		(SchedulerSequenceSteps.TccOn  ||
 800a2ea:	2b00      	cmp	r3, #0
 800a2ec:	d102      	bne.n	800a2f4 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x9a>
		SchedulerSequenceSteps.DssOn)) {
 800a2ee:	7dbb      	ldrb	r3, [r7, #22]
		SchedulerSequenceSteps.MsrcOn ||
 800a2f0:	2b00      	cmp	r3, #0
 800a2f2:	d052      	beq.n	800a39a <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>

		/* TCC, MSRC and DSS all share the same timeout */
		Status = get_sequence_step_timeout(Dev,
 800a2f4:	f107 0310 	add.w	r3, r7, #16
 800a2f8:	461a      	mov	r2, r3
 800a2fa:	2102      	movs	r1, #2
 800a2fc:	6878      	ldr	r0, [r7, #4]
 800a2fe:	f7ff fb19 	bl	8009934 <get_sequence_step_timeout>
 800a302:	4603      	mov	r3, r0
 800a304:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					&MsrcDccTccTimeoutMicroSeconds);

		/* Subtract the TCC, MSRC and DSS timeouts if they are
		 * enabled. */

		if (Status != VL53L0X_ERROR_NONE)
 800a308:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800a30c:	2b00      	cmp	r3, #0
 800a30e:	d002      	beq.n	800a316 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xbc>
			return Status;
 800a310:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800a314:	e07d      	b.n	800a412 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>

		/* TCC */
		if (SchedulerSequenceSteps.TccOn) {
 800a316:	7d3b      	ldrb	r3, [r7, #20]
 800a318:	2b00      	cmp	r3, #0
 800a31a:	d00f      	beq.n	800a33c <VL53L0X_set_measurement_timing_budget_micro_seconds+0xe2>

			SubTimeout = MsrcDccTccTimeoutMicroSeconds
				+ TccOverheadMicroSeconds;
 800a31c:	693b      	ldr	r3, [r7, #16]
			SubTimeout = MsrcDccTccTimeoutMicroSeconds
 800a31e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a320:	4413      	add	r3, r2
 800a322:	61fb      	str	r3, [r7, #28]

			if (SubTimeout <
 800a324:	69fa      	ldr	r2, [r7, #28]
 800a326:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a328:	429a      	cmp	r2, r3
 800a32a:	d204      	bcs.n	800a336 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xdc>
				FinalRangeTimingBudgetMicroSeconds) {
				FinalRangeTimingBudgetMicroSeconds -=
 800a32c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a32e:	69fb      	ldr	r3, [r7, #28]
 800a330:	1ad3      	subs	r3, r2, r3
 800a332:	643b      	str	r3, [r7, #64]	; 0x40
 800a334:	e002      	b.n	800a33c <VL53L0X_set_measurement_timing_budget_micro_seconds+0xe2>
							SubTimeout;
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 800a336:	23fc      	movs	r3, #252	; 0xfc
 800a338:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			}
		}

		if (Status != VL53L0X_ERROR_NONE) {
 800a33c:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800a340:	2b00      	cmp	r3, #0
 800a342:	d002      	beq.n	800a34a <VL53L0X_set_measurement_timing_budget_micro_seconds+0xf0>
			LOG_FUNCTION_END(Status);
			return Status;
 800a344:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800a348:	e063      	b.n	800a412 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>
		}

		/* DSS */
		if (SchedulerSequenceSteps.DssOn) {
 800a34a:	7dbb      	ldrb	r3, [r7, #22]
 800a34c:	2b00      	cmp	r3, #0
 800a34e:	d011      	beq.n	800a374 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x11a>

			SubTimeout = 2 * (MsrcDccTccTimeoutMicroSeconds +
 800a350:	693a      	ldr	r2, [r7, #16]
 800a352:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a354:	4413      	add	r3, r2
 800a356:	005b      	lsls	r3, r3, #1
 800a358:	61fb      	str	r3, [r7, #28]
				DssOverheadMicroSeconds);

			if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 800a35a:	69fa      	ldr	r2, [r7, #28]
 800a35c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a35e:	429a      	cmp	r2, r3
 800a360:	d204      	bcs.n	800a36c <VL53L0X_set_measurement_timing_budget_micro_seconds+0x112>
				FinalRangeTimingBudgetMicroSeconds
							-= SubTimeout;
 800a362:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a364:	69fb      	ldr	r3, [r7, #28]
 800a366:	1ad3      	subs	r3, r2, r3
 800a368:	643b      	str	r3, [r7, #64]	; 0x40
 800a36a:	e016      	b.n	800a39a <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 800a36c:	23fc      	movs	r3, #252	; 0xfc
 800a36e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800a372:	e012      	b.n	800a39a <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			}
		} else if (SchedulerSequenceSteps.MsrcOn) {
 800a374:	7d7b      	ldrb	r3, [r7, #21]
 800a376:	2b00      	cmp	r3, #0
 800a378:	d00f      	beq.n	800a39a <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			/* MSRC */
			SubTimeout = MsrcDccTccTimeoutMicroSeconds +
 800a37a:	693b      	ldr	r3, [r7, #16]
 800a37c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a37e:	4413      	add	r3, r2
 800a380:	61fb      	str	r3, [r7, #28]
						MsrcOverheadMicroSeconds;

			if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 800a382:	69fa      	ldr	r2, [r7, #28]
 800a384:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a386:	429a      	cmp	r2, r3
 800a388:	d204      	bcs.n	800a394 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x13a>
				FinalRangeTimingBudgetMicroSeconds
							-= SubTimeout;
 800a38a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a38c:	69fb      	ldr	r3, [r7, #28]
 800a38e:	1ad3      	subs	r3, r2, r3
 800a390:	643b      	str	r3, [r7, #64]	; 0x40
 800a392:	e002      	b.n	800a39a <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 800a394:	23fc      	movs	r3, #252	; 0xfc
 800a396:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			}
		}

	}

	if (Status != VL53L0X_ERROR_NONE) {
 800a39a:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800a39e:	2b00      	cmp	r3, #0
 800a3a0:	d002      	beq.n	800a3a8 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x14e>
		LOG_FUNCTION_END(Status);
		return Status;
 800a3a2:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800a3a6:	e034      	b.n	800a412 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>
	}

	if (SchedulerSequenceSteps.PreRangeOn) {
 800a3a8:	7dfb      	ldrb	r3, [r7, #23]
 800a3aa:	2b00      	cmp	r3, #0
 800a3ac:	d019      	beq.n	800a3e2 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x188>

		/* Subtract the Pre-range timeout if enabled. */

		Status = get_sequence_step_timeout(Dev,
 800a3ae:	f107 030c 	add.w	r3, r7, #12
 800a3b2:	461a      	mov	r2, r3
 800a3b4:	2103      	movs	r1, #3
 800a3b6:	6878      	ldr	r0, [r7, #4]
 800a3b8:	f7ff fabc 	bl	8009934 <get_sequence_step_timeout>
 800a3bc:	4603      	mov	r3, r0
 800a3be:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
				VL53L0X_SEQUENCESTEP_PRE_RANGE,
				&PreRangeTimeoutMicroSeconds);

		SubTimeout = PreRangeTimeoutMicroSeconds +
 800a3c2:	68fb      	ldr	r3, [r7, #12]
 800a3c4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a3c6:	4413      	add	r3, r2
 800a3c8:	61fb      	str	r3, [r7, #28]
				PreRangeOverheadMicroSeconds;

		if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 800a3ca:	69fa      	ldr	r2, [r7, #28]
 800a3cc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a3ce:	429a      	cmp	r2, r3
 800a3d0:	d204      	bcs.n	800a3dc <VL53L0X_set_measurement_timing_budget_micro_seconds+0x182>
			FinalRangeTimingBudgetMicroSeconds -= SubTimeout;
 800a3d2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a3d4:	69fb      	ldr	r3, [r7, #28]
 800a3d6:	1ad3      	subs	r3, r2, r3
 800a3d8:	643b      	str	r3, [r7, #64]	; 0x40
 800a3da:	e002      	b.n	800a3e2 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x188>
		} else {
			/* Requested timeout too big. */
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 800a3dc:	23fc      	movs	r3, #252	; 0xfc
 800a3de:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		}
	}


	if (Status == VL53L0X_ERROR_NONE &&
 800a3e2:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800a3e6:	2b00      	cmp	r3, #0
 800a3e8:	d111      	bne.n	800a40e <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b4>
		SchedulerSequenceSteps.FinalRangeOn) {
 800a3ea:	7e3b      	ldrb	r3, [r7, #24]
	if (Status == VL53L0X_ERROR_NONE &&
 800a3ec:	2b00      	cmp	r3, #0
 800a3ee:	d00e      	beq.n	800a40e <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b4>

		FinalRangeTimingBudgetMicroSeconds -=
 800a3f0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a3f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3f4:	1ad3      	subs	r3, r2, r3
 800a3f6:	643b      	str	r3, [r7, #64]	; 0x40
		 * budget and the sum of all other timeouts within the sequence.
		 * If there is no room for the final range timeout, then an error
		 * will be set. Otherwise the remaining time will be applied to
		 * the final range.
		 */
		Status = set_sequence_step_timeout(Dev,
 800a3f8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a3fa:	2104      	movs	r1, #4
 800a3fc:	6878      	ldr	r0, [r7, #4]
 800a3fe:	f7ff fb7a 	bl	8009af6 <set_sequence_step_timeout>
 800a402:	4603      	mov	r3, r0
 800a404:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			VL53L0X_SEQUENCESTEP_FINAL_RANGE,
			FinalRangeTimingBudgetMicroSeconds);

		VL53L0X_SETPARAMETERFIELD(Dev,
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	683a      	ldr	r2, [r7, #0]
 800a40c:	615a      	str	r2, [r3, #20]
			MeasurementTimingBudgetMicroSeconds);
	}

	LOG_FUNCTION_END(Status);

	return Status;
 800a40e:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
}
 800a412:	4618      	mov	r0, r3
 800a414:	3748      	adds	r7, #72	; 0x48
 800a416:	46bd      	mov	sp, r7
 800a418:	bd80      	pop	{r7, pc}

0800a41a <VL53L0X_get_measurement_timing_budget_micro_seconds>:

VL53L0X_Error VL53L0X_get_measurement_timing_budget_micro_seconds(VL53L0X_DEV Dev,
		uint32_t *pMeasurementTimingBudgetMicroSeconds)
{
 800a41a:	b580      	push	{r7, lr}
 800a41c:	b090      	sub	sp, #64	; 0x40
 800a41e:	af00      	add	r7, sp, #0
 800a420:	6078      	str	r0, [r7, #4]
 800a422:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a424:	2300      	movs	r3, #0
 800a426:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;
	uint32_t FinalRangeTimeoutMicroSeconds;
	uint32_t MsrcDccTccTimeoutMicroSeconds	= 2000;
 800a42a:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800a42e:	613b      	str	r3, [r7, #16]
	uint32_t StartOverheadMicroSeconds		= 1910;
 800a430:	f240 7376 	movw	r3, #1910	; 0x776
 800a434:	63bb      	str	r3, [r7, #56]	; 0x38
	uint32_t EndOverheadMicroSeconds		= 960;
 800a436:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 800a43a:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t MsrcOverheadMicroSeconds		= 660;
 800a43c:	f44f 7325 	mov.w	r3, #660	; 0x294
 800a440:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t TccOverheadMicroSeconds		= 590;
 800a442:	f240 234e 	movw	r3, #590	; 0x24e
 800a446:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t DssOverheadMicroSeconds		= 690;
 800a448:	f240 23b2 	movw	r3, #690	; 0x2b2
 800a44c:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t PreRangeOverheadMicroSeconds	= 660;
 800a44e:	f44f 7325 	mov.w	r3, #660	; 0x294
 800a452:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t FinalRangeOverheadMicroSeconds = 550;
 800a454:	f240 2326 	movw	r3, #550	; 0x226
 800a458:	623b      	str	r3, [r7, #32]
	uint32_t PreRangeTimeoutMicroSeconds	= 0;
 800a45a:	2300      	movs	r3, #0
 800a45c:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");

	/* Start and end overhead times always present */
	*pMeasurementTimingBudgetMicroSeconds
		= StartOverheadMicroSeconds + EndOverheadMicroSeconds;
 800a45e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a460:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a462:	441a      	add	r2, r3
 800a464:	683b      	ldr	r3, [r7, #0]
 800a466:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 800a468:	f107 0318 	add.w	r3, r7, #24
 800a46c:	4619      	mov	r1, r3
 800a46e:	6878      	ldr	r0, [r7, #4]
 800a470:	f7fc fddc 	bl	800702c <VL53L0X_GetSequenceStepEnables>
 800a474:	4603      	mov	r3, r0
 800a476:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

	if (Status != VL53L0X_ERROR_NONE) {
 800a47a:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800a47e:	2b00      	cmp	r3, #0
 800a480:	d002      	beq.n	800a488 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x6e>
		LOG_FUNCTION_END(Status);
		return Status;
 800a482:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800a486:	e075      	b.n	800a574 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x15a>
	}


	if (SchedulerSequenceSteps.TccOn  ||
 800a488:	7e3b      	ldrb	r3, [r7, #24]
 800a48a:	2b00      	cmp	r3, #0
 800a48c:	d105      	bne.n	800a49a <VL53L0X_get_measurement_timing_budget_micro_seconds+0x80>
		SchedulerSequenceSteps.MsrcOn ||
 800a48e:	7e7b      	ldrb	r3, [r7, #25]
	if (SchedulerSequenceSteps.TccOn  ||
 800a490:	2b00      	cmp	r3, #0
 800a492:	d102      	bne.n	800a49a <VL53L0X_get_measurement_timing_budget_micro_seconds+0x80>
		SchedulerSequenceSteps.DssOn) {
 800a494:	7ebb      	ldrb	r3, [r7, #26]
		SchedulerSequenceSteps.MsrcOn ||
 800a496:	2b00      	cmp	r3, #0
 800a498:	d030      	beq.n	800a4fc <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>

		Status = get_sequence_step_timeout(Dev,
 800a49a:	f107 0310 	add.w	r3, r7, #16
 800a49e:	461a      	mov	r2, r3
 800a4a0:	2102      	movs	r1, #2
 800a4a2:	6878      	ldr	r0, [r7, #4]
 800a4a4:	f7ff fa46 	bl	8009934 <get_sequence_step_timeout>
 800a4a8:	4603      	mov	r3, r0
 800a4aa:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_SEQUENCESTEP_MSRC,
				&MsrcDccTccTimeoutMicroSeconds);

		if (Status == VL53L0X_ERROR_NONE) {
 800a4ae:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800a4b2:	2b00      	cmp	r3, #0
 800a4b4:	d122      	bne.n	800a4fc <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
			if (SchedulerSequenceSteps.TccOn) {
 800a4b6:	7e3b      	ldrb	r3, [r7, #24]
 800a4b8:	2b00      	cmp	r3, #0
 800a4ba:	d007      	beq.n	800a4cc <VL53L0X_get_measurement_timing_budget_micro_seconds+0xb2>
				*pMeasurementTimingBudgetMicroSeconds +=
 800a4bc:	683b      	ldr	r3, [r7, #0]
 800a4be:	681a      	ldr	r2, [r3, #0]
					MsrcDccTccTimeoutMicroSeconds +
 800a4c0:	6939      	ldr	r1, [r7, #16]
 800a4c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a4c4:	440b      	add	r3, r1
				*pMeasurementTimingBudgetMicroSeconds +=
 800a4c6:	441a      	add	r2, r3
 800a4c8:	683b      	ldr	r3, [r7, #0]
 800a4ca:	601a      	str	r2, [r3, #0]
					TccOverheadMicroSeconds;
			}

			if (SchedulerSequenceSteps.DssOn) {
 800a4cc:	7ebb      	ldrb	r3, [r7, #26]
 800a4ce:	2b00      	cmp	r3, #0
 800a4d0:	d009      	beq.n	800a4e6 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xcc>
				*pMeasurementTimingBudgetMicroSeconds +=
 800a4d2:	683b      	ldr	r3, [r7, #0]
 800a4d4:	681a      	ldr	r2, [r3, #0]
				2 * (MsrcDccTccTimeoutMicroSeconds +
 800a4d6:	6939      	ldr	r1, [r7, #16]
 800a4d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4da:	440b      	add	r3, r1
 800a4dc:	005b      	lsls	r3, r3, #1
				*pMeasurementTimingBudgetMicroSeconds +=
 800a4de:	441a      	add	r2, r3
 800a4e0:	683b      	ldr	r3, [r7, #0]
 800a4e2:	601a      	str	r2, [r3, #0]
 800a4e4:	e00a      	b.n	800a4fc <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
					DssOverheadMicroSeconds);
			} else if (SchedulerSequenceSteps.MsrcOn) {
 800a4e6:	7e7b      	ldrb	r3, [r7, #25]
 800a4e8:	2b00      	cmp	r3, #0
 800a4ea:	d007      	beq.n	800a4fc <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
				*pMeasurementTimingBudgetMicroSeconds +=
 800a4ec:	683b      	ldr	r3, [r7, #0]
 800a4ee:	681a      	ldr	r2, [r3, #0]
					MsrcDccTccTimeoutMicroSeconds +
 800a4f0:	6939      	ldr	r1, [r7, #16]
 800a4f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a4f4:	440b      	add	r3, r1
				*pMeasurementTimingBudgetMicroSeconds +=
 800a4f6:	441a      	add	r2, r3
 800a4f8:	683b      	ldr	r3, [r7, #0]
 800a4fa:	601a      	str	r2, [r3, #0]
					MsrcOverheadMicroSeconds;
			}
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800a4fc:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800a500:	2b00      	cmp	r3, #0
 800a502:	d114      	bne.n	800a52e <VL53L0X_get_measurement_timing_budget_micro_seconds+0x114>
		if (SchedulerSequenceSteps.PreRangeOn) {
 800a504:	7efb      	ldrb	r3, [r7, #27]
 800a506:	2b00      	cmp	r3, #0
 800a508:	d011      	beq.n	800a52e <VL53L0X_get_measurement_timing_budget_micro_seconds+0x114>
			Status = get_sequence_step_timeout(Dev,
 800a50a:	f107 030c 	add.w	r3, r7, #12
 800a50e:	461a      	mov	r2, r3
 800a510:	2103      	movs	r1, #3
 800a512:	6878      	ldr	r0, [r7, #4]
 800a514:	f7ff fa0e 	bl	8009934 <get_sequence_step_timeout>
 800a518:	4603      	mov	r3, r0
 800a51a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_SEQUENCESTEP_PRE_RANGE,
				&PreRangeTimeoutMicroSeconds);
			*pMeasurementTimingBudgetMicroSeconds +=
 800a51e:	683b      	ldr	r3, [r7, #0]
 800a520:	681a      	ldr	r2, [r3, #0]
				PreRangeTimeoutMicroSeconds +
 800a522:	68f9      	ldr	r1, [r7, #12]
 800a524:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a526:	440b      	add	r3, r1
			*pMeasurementTimingBudgetMicroSeconds +=
 800a528:	441a      	add	r2, r3
 800a52a:	683b      	ldr	r3, [r7, #0]
 800a52c:	601a      	str	r2, [r3, #0]
				PreRangeOverheadMicroSeconds;
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800a52e:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800a532:	2b00      	cmp	r3, #0
 800a534:	d114      	bne.n	800a560 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x146>
		if (SchedulerSequenceSteps.FinalRangeOn) {
 800a536:	7f3b      	ldrb	r3, [r7, #28]
 800a538:	2b00      	cmp	r3, #0
 800a53a:	d011      	beq.n	800a560 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x146>
			Status = get_sequence_step_timeout(Dev,
 800a53c:	f107 0314 	add.w	r3, r7, #20
 800a540:	461a      	mov	r2, r3
 800a542:	2104      	movs	r1, #4
 800a544:	6878      	ldr	r0, [r7, #4]
 800a546:	f7ff f9f5 	bl	8009934 <get_sequence_step_timeout>
 800a54a:	4603      	mov	r3, r0
 800a54c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
					VL53L0X_SEQUENCESTEP_FINAL_RANGE,
					&FinalRangeTimeoutMicroSeconds);
			*pMeasurementTimingBudgetMicroSeconds +=
 800a550:	683b      	ldr	r3, [r7, #0]
 800a552:	681a      	ldr	r2, [r3, #0]
				(FinalRangeTimeoutMicroSeconds +
 800a554:	6979      	ldr	r1, [r7, #20]
 800a556:	6a3b      	ldr	r3, [r7, #32]
 800a558:	440b      	add	r3, r1
			*pMeasurementTimingBudgetMicroSeconds +=
 800a55a:	441a      	add	r2, r3
 800a55c:	683b      	ldr	r3, [r7, #0]
 800a55e:	601a      	str	r2, [r3, #0]
				FinalRangeOverheadMicroSeconds);
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800a560:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800a564:	2b00      	cmp	r3, #0
 800a566:	d103      	bne.n	800a570 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x156>
		VL53L0X_SETPARAMETERFIELD(Dev,
 800a568:	683b      	ldr	r3, [r7, #0]
 800a56a:	681a      	ldr	r2, [r3, #0]
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	615a      	str	r2, [r3, #20]
			MeasurementTimingBudgetMicroSeconds,
			*pMeasurementTimingBudgetMicroSeconds);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800a570:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 800a574:	4618      	mov	r0, r3
 800a576:	3740      	adds	r7, #64	; 0x40
 800a578:	46bd      	mov	sp, r7
 800a57a:	bd80      	pop	{r7, pc}

0800a57c <VL53L0X_load_tuning_settings>:



VL53L0X_Error VL53L0X_load_tuning_settings(VL53L0X_DEV Dev,
		uint8_t *pTuningSettingBuffer)
{
 800a57c:	b580      	push	{r7, lr}
 800a57e:	b088      	sub	sp, #32
 800a580:	af00      	add	r7, sp, #0
 800a582:	6078      	str	r0, [r7, #4]
 800a584:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a586:	2300      	movs	r3, #0
 800a588:	77fb      	strb	r3, [r7, #31]
	uint8_t localBuffer[4]; /* max */
	uint16_t Temp16;

	LOG_FUNCTION_START("");

	Index = 0;
 800a58a:	2300      	movs	r3, #0
 800a58c:	617b      	str	r3, [r7, #20]

	while ((*(pTuningSettingBuffer + Index) != 0) &&
 800a58e:	e0c6      	b.n	800a71e <VL53L0X_load_tuning_settings+0x1a2>
			(Status == VL53L0X_ERROR_NONE)) {
		NumberOfWrites = *(pTuningSettingBuffer + Index);
 800a590:	697b      	ldr	r3, [r7, #20]
 800a592:	683a      	ldr	r2, [r7, #0]
 800a594:	4413      	add	r3, r2
 800a596:	781b      	ldrb	r3, [r3, #0]
 800a598:	74fb      	strb	r3, [r7, #19]
		Index++;
 800a59a:	697b      	ldr	r3, [r7, #20]
 800a59c:	3301      	adds	r3, #1
 800a59e:	617b      	str	r3, [r7, #20]
		if (NumberOfWrites == 0xFF) {
 800a5a0:	7cfb      	ldrb	r3, [r7, #19]
 800a5a2:	2bff      	cmp	r3, #255	; 0xff
 800a5a4:	f040 808d 	bne.w	800a6c2 <VL53L0X_load_tuning_settings+0x146>
			/* internal parameters */
			SelectParam = *(pTuningSettingBuffer + Index);
 800a5a8:	697b      	ldr	r3, [r7, #20]
 800a5aa:	683a      	ldr	r2, [r7, #0]
 800a5ac:	4413      	add	r3, r2
 800a5ae:	781b      	ldrb	r3, [r3, #0]
 800a5b0:	747b      	strb	r3, [r7, #17]
			Index++;
 800a5b2:	697b      	ldr	r3, [r7, #20]
 800a5b4:	3301      	adds	r3, #1
 800a5b6:	617b      	str	r3, [r7, #20]
			switch (SelectParam) {
 800a5b8:	7c7b      	ldrb	r3, [r7, #17]
 800a5ba:	2b03      	cmp	r3, #3
 800a5bc:	d87e      	bhi.n	800a6bc <VL53L0X_load_tuning_settings+0x140>
 800a5be:	a201      	add	r2, pc, #4	; (adr r2, 800a5c4 <VL53L0X_load_tuning_settings+0x48>)
 800a5c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a5c4:	0800a5d5 	.word	0x0800a5d5
 800a5c8:	0800a60f 	.word	0x0800a60f
 800a5cc:	0800a649 	.word	0x0800a649
 800a5d0:	0800a683 	.word	0x0800a683
			case 0: /* uint16_t SigmaEstRefArray -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 800a5d4:	697b      	ldr	r3, [r7, #20]
 800a5d6:	683a      	ldr	r2, [r7, #0]
 800a5d8:	4413      	add	r3, r2
 800a5da:	781b      	ldrb	r3, [r3, #0]
 800a5dc:	743b      	strb	r3, [r7, #16]
				Index++;
 800a5de:	697b      	ldr	r3, [r7, #20]
 800a5e0:	3301      	adds	r3, #1
 800a5e2:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 800a5e4:	697b      	ldr	r3, [r7, #20]
 800a5e6:	683a      	ldr	r2, [r7, #0]
 800a5e8:	4413      	add	r3, r2
 800a5ea:	781b      	ldrb	r3, [r3, #0]
 800a5ec:	73fb      	strb	r3, [r7, #15]
				Index++;
 800a5ee:	697b      	ldr	r3, [r7, #20]
 800a5f0:	3301      	adds	r3, #1
 800a5f2:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 800a5f4:	7c3b      	ldrb	r3, [r7, #16]
 800a5f6:	b29b      	uxth	r3, r3
 800a5f8:	021b      	lsls	r3, r3, #8
 800a5fa:	b29a      	uxth	r2, r3
 800a5fc:	7bfb      	ldrb	r3, [r7, #15]
 800a5fe:	b29b      	uxth	r3, r3
 800a600:	4413      	add	r3, r2
 800a602:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, SigmaEstRefArray, Temp16);
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	89ba      	ldrh	r2, [r7, #12]
 800a608:	f8a3 2134 	strh.w	r2, [r3, #308]	; 0x134
				break;
 800a60c:	e087      	b.n	800a71e <VL53L0X_load_tuning_settings+0x1a2>
			case 1: /* uint16_t SigmaEstEffPulseWidth -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 800a60e:	697b      	ldr	r3, [r7, #20]
 800a610:	683a      	ldr	r2, [r7, #0]
 800a612:	4413      	add	r3, r2
 800a614:	781b      	ldrb	r3, [r3, #0]
 800a616:	743b      	strb	r3, [r7, #16]
				Index++;
 800a618:	697b      	ldr	r3, [r7, #20]
 800a61a:	3301      	adds	r3, #1
 800a61c:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 800a61e:	697b      	ldr	r3, [r7, #20]
 800a620:	683a      	ldr	r2, [r7, #0]
 800a622:	4413      	add	r3, r2
 800a624:	781b      	ldrb	r3, [r3, #0]
 800a626:	73fb      	strb	r3, [r7, #15]
				Index++;
 800a628:	697b      	ldr	r3, [r7, #20]
 800a62a:	3301      	adds	r3, #1
 800a62c:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 800a62e:	7c3b      	ldrb	r3, [r7, #16]
 800a630:	b29b      	uxth	r3, r3
 800a632:	021b      	lsls	r3, r3, #8
 800a634:	b29a      	uxth	r2, r3
 800a636:	7bfb      	ldrb	r3, [r7, #15]
 800a638:	b29b      	uxth	r3, r3
 800a63a:	4413      	add	r3, r2
 800a63c:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, SigmaEstEffPulseWidth,
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	89ba      	ldrh	r2, [r7, #12]
 800a642:	f8a3 2136 	strh.w	r2, [r3, #310]	; 0x136
					Temp16);
				break;
 800a646:	e06a      	b.n	800a71e <VL53L0X_load_tuning_settings+0x1a2>
			case 2: /* uint16_t SigmaEstEffAmbWidth -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 800a648:	697b      	ldr	r3, [r7, #20]
 800a64a:	683a      	ldr	r2, [r7, #0]
 800a64c:	4413      	add	r3, r2
 800a64e:	781b      	ldrb	r3, [r3, #0]
 800a650:	743b      	strb	r3, [r7, #16]
				Index++;
 800a652:	697b      	ldr	r3, [r7, #20]
 800a654:	3301      	adds	r3, #1
 800a656:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 800a658:	697b      	ldr	r3, [r7, #20]
 800a65a:	683a      	ldr	r2, [r7, #0]
 800a65c:	4413      	add	r3, r2
 800a65e:	781b      	ldrb	r3, [r3, #0]
 800a660:	73fb      	strb	r3, [r7, #15]
				Index++;
 800a662:	697b      	ldr	r3, [r7, #20]
 800a664:	3301      	adds	r3, #1
 800a666:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 800a668:	7c3b      	ldrb	r3, [r7, #16]
 800a66a:	b29b      	uxth	r3, r3
 800a66c:	021b      	lsls	r3, r3, #8
 800a66e:	b29a      	uxth	r2, r3
 800a670:	7bfb      	ldrb	r3, [r7, #15]
 800a672:	b29b      	uxth	r3, r3
 800a674:	4413      	add	r3, r2
 800a676:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, SigmaEstEffAmbWidth, Temp16);
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	89ba      	ldrh	r2, [r7, #12]
 800a67c:	f8a3 2138 	strh.w	r2, [r3, #312]	; 0x138
				break;
 800a680:	e04d      	b.n	800a71e <VL53L0X_load_tuning_settings+0x1a2>
			case 3: /* uint16_t targetRefRate -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 800a682:	697b      	ldr	r3, [r7, #20]
 800a684:	683a      	ldr	r2, [r7, #0]
 800a686:	4413      	add	r3, r2
 800a688:	781b      	ldrb	r3, [r3, #0]
 800a68a:	743b      	strb	r3, [r7, #16]
				Index++;
 800a68c:	697b      	ldr	r3, [r7, #20]
 800a68e:	3301      	adds	r3, #1
 800a690:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 800a692:	697b      	ldr	r3, [r7, #20]
 800a694:	683a      	ldr	r2, [r7, #0]
 800a696:	4413      	add	r3, r2
 800a698:	781b      	ldrb	r3, [r3, #0]
 800a69a:	73fb      	strb	r3, [r7, #15]
				Index++;
 800a69c:	697b      	ldr	r3, [r7, #20]
 800a69e:	3301      	adds	r3, #1
 800a6a0:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 800a6a2:	7c3b      	ldrb	r3, [r7, #16]
 800a6a4:	b29b      	uxth	r3, r3
 800a6a6:	021b      	lsls	r3, r3, #8
 800a6a8:	b29a      	uxth	r2, r3
 800a6aa:	7bfb      	ldrb	r3, [r7, #15]
 800a6ac:	b29b      	uxth	r3, r3
 800a6ae:	4413      	add	r3, r2
 800a6b0:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, targetRefRate, Temp16);
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	89ba      	ldrh	r2, [r7, #12]
 800a6b6:	f8a3 213c 	strh.w	r2, [r3, #316]	; 0x13c
				break;
 800a6ba:	e030      	b.n	800a71e <VL53L0X_load_tuning_settings+0x1a2>
			default: /* invalid parameter */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 800a6bc:	23fc      	movs	r3, #252	; 0xfc
 800a6be:	77fb      	strb	r3, [r7, #31]
 800a6c0:	e02d      	b.n	800a71e <VL53L0X_load_tuning_settings+0x1a2>
			}

		} else if (NumberOfWrites <= 4) {
 800a6c2:	7cfb      	ldrb	r3, [r7, #19]
 800a6c4:	2b04      	cmp	r3, #4
 800a6c6:	d828      	bhi.n	800a71a <VL53L0X_load_tuning_settings+0x19e>
			Address = *(pTuningSettingBuffer + Index);
 800a6c8:	697b      	ldr	r3, [r7, #20]
 800a6ca:	683a      	ldr	r2, [r7, #0]
 800a6cc:	4413      	add	r3, r2
 800a6ce:	781b      	ldrb	r3, [r3, #0]
 800a6d0:	74bb      	strb	r3, [r7, #18]
			Index++;
 800a6d2:	697b      	ldr	r3, [r7, #20]
 800a6d4:	3301      	adds	r3, #1
 800a6d6:	617b      	str	r3, [r7, #20]

			for (i = 0; i < NumberOfWrites; i++) {
 800a6d8:	2300      	movs	r3, #0
 800a6da:	61bb      	str	r3, [r7, #24]
 800a6dc:	e00f      	b.n	800a6fe <VL53L0X_load_tuning_settings+0x182>
				localBuffer[i] = *(pTuningSettingBuffer +
 800a6de:	697b      	ldr	r3, [r7, #20]
 800a6e0:	683a      	ldr	r2, [r7, #0]
 800a6e2:	4413      	add	r3, r2
 800a6e4:	7819      	ldrb	r1, [r3, #0]
 800a6e6:	f107 0208 	add.w	r2, r7, #8
 800a6ea:	69bb      	ldr	r3, [r7, #24]
 800a6ec:	4413      	add	r3, r2
 800a6ee:	460a      	mov	r2, r1
 800a6f0:	701a      	strb	r2, [r3, #0]
							Index);
				Index++;
 800a6f2:	697b      	ldr	r3, [r7, #20]
 800a6f4:	3301      	adds	r3, #1
 800a6f6:	617b      	str	r3, [r7, #20]
			for (i = 0; i < NumberOfWrites; i++) {
 800a6f8:	69bb      	ldr	r3, [r7, #24]
 800a6fa:	3301      	adds	r3, #1
 800a6fc:	61bb      	str	r3, [r7, #24]
 800a6fe:	7cfb      	ldrb	r3, [r7, #19]
 800a700:	69ba      	ldr	r2, [r7, #24]
 800a702:	429a      	cmp	r2, r3
 800a704:	dbeb      	blt.n	800a6de <VL53L0X_load_tuning_settings+0x162>
			}

			Status = VL53L0X_WriteMulti(Dev, Address, localBuffer,
 800a706:	7cfb      	ldrb	r3, [r7, #19]
 800a708:	f107 0208 	add.w	r2, r7, #8
 800a70c:	7cb9      	ldrb	r1, [r7, #18]
 800a70e:	6878      	ldr	r0, [r7, #4]
 800a710:	f000 fdee 	bl	800b2f0 <VL53L0X_WriteMulti>
 800a714:	4603      	mov	r3, r0
 800a716:	77fb      	strb	r3, [r7, #31]
 800a718:	e001      	b.n	800a71e <VL53L0X_load_tuning_settings+0x1a2>
					NumberOfWrites);

		} else {
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 800a71a:	23fc      	movs	r3, #252	; 0xfc
 800a71c:	77fb      	strb	r3, [r7, #31]
	while ((*(pTuningSettingBuffer + Index) != 0) &&
 800a71e:	697b      	ldr	r3, [r7, #20]
 800a720:	683a      	ldr	r2, [r7, #0]
 800a722:	4413      	add	r3, r2
 800a724:	781b      	ldrb	r3, [r3, #0]
 800a726:	2b00      	cmp	r3, #0
 800a728:	d004      	beq.n	800a734 <VL53L0X_load_tuning_settings+0x1b8>
 800a72a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800a72e:	2b00      	cmp	r3, #0
 800a730:	f43f af2e 	beq.w	800a590 <VL53L0X_load_tuning_settings+0x14>
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800a734:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800a738:	4618      	mov	r0, r3
 800a73a:	3720      	adds	r7, #32
 800a73c:	46bd      	mov	sp, r7
 800a73e:	bd80      	pop	{r7, pc}

0800a740 <VL53L0X_get_total_xtalk_rate>:

VL53L0X_Error VL53L0X_get_total_xtalk_rate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *ptotal_xtalk_rate_mcps)
{
 800a740:	b580      	push	{r7, lr}
 800a742:	b088      	sub	sp, #32
 800a744:	af00      	add	r7, sp, #0
 800a746:	60f8      	str	r0, [r7, #12]
 800a748:	60b9      	str	r1, [r7, #8]
 800a74a:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a74c:	2300      	movs	r3, #0
 800a74e:	77fb      	strb	r3, [r7, #31]

	uint8_t xtalkCompEnable;
	FixPoint1616_t totalXtalkMegaCps;
	FixPoint1616_t xtalkPerSpadMegaCps;

	*ptotal_xtalk_rate_mcps = 0;
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	2200      	movs	r2, #0
 800a754:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_GetXTalkCompensationEnable(Dev, &xtalkCompEnable);
 800a756:	f107 0313 	add.w	r3, r7, #19
 800a75a:	4619      	mov	r1, r3
 800a75c:	68f8      	ldr	r0, [r7, #12]
 800a75e:	f7fc fcf1 	bl	8007144 <VL53L0X_GetXTalkCompensationEnable>
 800a762:	4603      	mov	r3, r0
 800a764:	77fb      	strb	r3, [r7, #31]
	if (Status == VL53L0X_ERROR_NONE) {
 800a766:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800a76a:	2b00      	cmp	r3, #0
 800a76c:	d111      	bne.n	800a792 <VL53L0X_get_total_xtalk_rate+0x52>

		if (xtalkCompEnable) {
 800a76e:	7cfb      	ldrb	r3, [r7, #19]
 800a770:	2b00      	cmp	r3, #0
 800a772:	d00e      	beq.n	800a792 <VL53L0X_get_total_xtalk_rate+0x52>

			VL53L0X_GETPARAMETERFIELD(
 800a774:	68fb      	ldr	r3, [r7, #12]
 800a776:	6a1b      	ldr	r3, [r3, #32]
 800a778:	61bb      	str	r3, [r7, #24]
				XTalkCompensationRateMegaCps,
				xtalkPerSpadMegaCps);

			/* FixPoint1616 * FixPoint 8:8 = FixPoint0824 */
			totalXtalkMegaCps =
				pRangingMeasurementData->EffectiveSpadRtnCount *
 800a77a:	68bb      	ldr	r3, [r7, #8]
 800a77c:	8a9b      	ldrh	r3, [r3, #20]
 800a77e:	461a      	mov	r2, r3
			totalXtalkMegaCps =
 800a780:	69bb      	ldr	r3, [r7, #24]
 800a782:	fb02 f303 	mul.w	r3, r2, r3
 800a786:	617b      	str	r3, [r7, #20]
				xtalkPerSpadMegaCps;

			/* FixPoint0824 >> 8 = FixPoint1616 */
			*ptotal_xtalk_rate_mcps =
				(totalXtalkMegaCps + 0x80) >> 8;
 800a788:	697b      	ldr	r3, [r7, #20]
 800a78a:	3380      	adds	r3, #128	; 0x80
 800a78c:	0a1a      	lsrs	r2, r3, #8
			*ptotal_xtalk_rate_mcps =
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	601a      	str	r2, [r3, #0]
		}
	}

	return Status;
 800a792:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800a796:	4618      	mov	r0, r3
 800a798:	3720      	adds	r7, #32
 800a79a:	46bd      	mov	sp, r7
 800a79c:	bd80      	pop	{r7, pc}

0800a79e <VL53L0X_get_total_signal_rate>:

VL53L0X_Error VL53L0X_get_total_signal_rate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *ptotal_signal_rate_mcps)
{
 800a79e:	b580      	push	{r7, lr}
 800a7a0:	b086      	sub	sp, #24
 800a7a2:	af00      	add	r7, sp, #0
 800a7a4:	60f8      	str	r0, [r7, #12]
 800a7a6:	60b9      	str	r1, [r7, #8]
 800a7a8:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a7aa:	2300      	movs	r3, #0
 800a7ac:	75fb      	strb	r3, [r7, #23]
	FixPoint1616_t totalXtalkMegaCps;

	LOG_FUNCTION_START("");

	*ptotal_signal_rate_mcps =
		pRangingMeasurementData->SignalRateRtnMegaCps;
 800a7ae:	68bb      	ldr	r3, [r7, #8]
 800a7b0:	68da      	ldr	r2, [r3, #12]
	*ptotal_signal_rate_mcps =
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_get_total_xtalk_rate(
 800a7b6:	f107 0310 	add.w	r3, r7, #16
 800a7ba:	461a      	mov	r2, r3
 800a7bc:	68b9      	ldr	r1, [r7, #8]
 800a7be:	68f8      	ldr	r0, [r7, #12]
 800a7c0:	f7ff ffbe 	bl	800a740 <VL53L0X_get_total_xtalk_rate>
 800a7c4:	4603      	mov	r3, r0
 800a7c6:	75fb      	strb	r3, [r7, #23]
		Dev, pRangingMeasurementData, &totalXtalkMegaCps);

	if (Status == VL53L0X_ERROR_NONE)
 800a7c8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a7cc:	2b00      	cmp	r3, #0
 800a7ce:	d105      	bne.n	800a7dc <VL53L0X_get_total_signal_rate+0x3e>
		*ptotal_signal_rate_mcps += totalXtalkMegaCps;
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	681a      	ldr	r2, [r3, #0]
 800a7d4:	693b      	ldr	r3, [r7, #16]
 800a7d6:	441a      	add	r2, r3
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	601a      	str	r2, [r3, #0]

	return Status;
 800a7dc:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a7e0:	4618      	mov	r0, r3
 800a7e2:	3718      	adds	r7, #24
 800a7e4:	46bd      	mov	sp, r7
 800a7e6:	bd80      	pop	{r7, pc}

0800a7e8 <VL53L0X_calc_dmax>:
	FixPoint1616_t pwMult,
	uint32_t sigmaEstimateP1,
	FixPoint1616_t sigmaEstimateP2,
	uint32_t peakVcselDuration_us,
	uint32_t *pdmax_mm)
{
 800a7e8:	b580      	push	{r7, lr}
 800a7ea:	b09a      	sub	sp, #104	; 0x68
 800a7ec:	af00      	add	r7, sp, #0
 800a7ee:	60f8      	str	r0, [r7, #12]
 800a7f0:	60b9      	str	r1, [r7, #8]
 800a7f2:	607a      	str	r2, [r7, #4]
 800a7f4:	603b      	str	r3, [r7, #0]
	const uint32_t cSigmaLimit		= 18;
 800a7f6:	2312      	movs	r3, #18
 800a7f8:	657b      	str	r3, [r7, #84]	; 0x54
	const FixPoint1616_t cSignalLimit	= 0x4000; /* 0.25 */
 800a7fa:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800a7fe:	653b      	str	r3, [r7, #80]	; 0x50
	const FixPoint1616_t cSigmaEstRef	= 0x00000042; /* 0.001 */
 800a800:	2342      	movs	r3, #66	; 0x42
 800a802:	64fb      	str	r3, [r7, #76]	; 0x4c
	const uint32_t cAmbEffWidthSigmaEst_ns = 6;
 800a804:	2306      	movs	r3, #6
 800a806:	64bb      	str	r3, [r7, #72]	; 0x48
	const uint32_t cAmbEffWidthDMax_ns	   = 7;
 800a808:	2307      	movs	r3, #7
 800a80a:	647b      	str	r3, [r7, #68]	; 0x44
	FixPoint1616_t dmaxAmbient;
	FixPoint1616_t dmaxDarkTmp;
	FixPoint1616_t sigmaEstP2Tmp;
	uint32_t signalRateTemp_mcps;

	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a80c:	2300      	movs	r3, #0
 800a80e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

	LOG_FUNCTION_START("");

	dmaxCalRange_mm =
		PALDevDataGet(Dev, DmaxCalRangeMilliMeter);
 800a812:	68fb      	ldr	r3, [r7, #12]
 800a814:	f8b3 3154 	ldrh.w	r3, [r3, #340]	; 0x154
	dmaxCalRange_mm =
 800a818:	63fb      	str	r3, [r7, #60]	; 0x3c

	dmaxCalSignalRateRtn_mcps =
 800a81a:	68fb      	ldr	r3, [r7, #12]
 800a81c:	f8d3 3158 	ldr.w	r3, [r3, #344]	; 0x158
 800a820:	63bb      	str	r3, [r7, #56]	; 0x38
		PALDevDataGet(Dev, DmaxCalSignalRateRtnMegaCps);

	/* uint32 * FixPoint1616 = FixPoint1616 */
	SignalAt0mm = dmaxCalRange_mm * dmaxCalSignalRateRtn_mcps;
 800a822:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a824:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a826:	fb02 f303 	mul.w	r3, r2, r3
 800a82a:	637b      	str	r3, [r7, #52]	; 0x34

	/* FixPoint1616 >> 8 = FixPoint2408 */
	SignalAt0mm = (SignalAt0mm + 0x80) >> 8;
 800a82c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a82e:	3380      	adds	r3, #128	; 0x80
 800a830:	0a1b      	lsrs	r3, r3, #8
 800a832:	637b      	str	r3, [r7, #52]	; 0x34
	SignalAt0mm *= dmaxCalRange_mm;
 800a834:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a836:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800a838:	fb02 f303 	mul.w	r3, r2, r3
 800a83c:	637b      	str	r3, [r7, #52]	; 0x34

	minSignalNeeded_p1 = 0;
 800a83e:	2300      	movs	r3, #0
 800a840:	667b      	str	r3, [r7, #100]	; 0x64
	if (totalCorrSignalRate_mcps > 0) {
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	2b00      	cmp	r3, #0
 800a846:	d01a      	beq.n	800a87e <VL53L0X_calc_dmax+0x96>

		/* Shift by 10 bits to increase resolution prior to the
		 * division */
		signalRateTemp_mcps = totalSignalRate_mcps << 10;
 800a848:	68bb      	ldr	r3, [r7, #8]
 800a84a:	029b      	lsls	r3, r3, #10
 800a84c:	633b      	str	r3, [r7, #48]	; 0x30

		/* Add rounding value prior to division */
		minSignalNeeded_p1 = signalRateTemp_mcps +
			(totalCorrSignalRate_mcps/2);
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	085b      	lsrs	r3, r3, #1
		minSignalNeeded_p1 = signalRateTemp_mcps +
 800a852:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a854:	4413      	add	r3, r2
 800a856:	667b      	str	r3, [r7, #100]	; 0x64

		/* FixPoint0626/FixPoint1616 = FixPoint2210 */
		minSignalNeeded_p1 /= totalCorrSignalRate_mcps;
 800a858:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	fbb2 f3f3 	udiv	r3, r2, r3
 800a860:	667b      	str	r3, [r7, #100]	; 0x64

		/* Apply a factored version of the speed of light.
		 Correction to be applied at the end */
		minSignalNeeded_p1 *= 3;
 800a862:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800a864:	4613      	mov	r3, r2
 800a866:	005b      	lsls	r3, r3, #1
 800a868:	4413      	add	r3, r2
 800a86a:	667b      	str	r3, [r7, #100]	; 0x64

		/* FixPoint2210 * FixPoint2210 = FixPoint1220 */
		minSignalNeeded_p1 *= minSignalNeeded_p1;
 800a86c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a86e:	fb03 f303 	mul.w	r3, r3, r3
 800a872:	667b      	str	r3, [r7, #100]	; 0x64

		/* FixPoint1220 >> 16 = FixPoint2804 */
		minSignalNeeded_p1 = (minSignalNeeded_p1 + 0x8000) >> 16;
 800a874:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a876:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800a87a:	0c1b      	lsrs	r3, r3, #16
 800a87c:	667b      	str	r3, [r7, #100]	; 0x64
	}

	minSignalNeeded_p2 = pwMult * sigmaEstimateP1;
 800a87e:	683b      	ldr	r3, [r7, #0]
 800a880:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800a882:	fb02 f303 	mul.w	r3, r2, r3
 800a886:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* FixPoint1616 >> 16 =	 uint32 */
	minSignalNeeded_p2 = (minSignalNeeded_p2 + 0x8000) >> 16;
 800a888:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a88a:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800a88e:	0c1b      	lsrs	r3, r3, #16
 800a890:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* uint32 * uint32	=  uint32 */
	minSignalNeeded_p2 *= minSignalNeeded_p2;
 800a892:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a894:	fb03 f303 	mul.w	r3, r3, r3
 800a898:	62fb      	str	r3, [r7, #44]	; 0x2c
	/* Check sigmaEstimateP2
	 * If this value is too high there is not enough signal rate
	 * to calculate dmax value so set a suitable value to ensure
	 * a very small dmax.
	 */
	sigmaEstP2Tmp = (sigmaEstimateP2 + 0x8000) >> 16;
 800a89a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a89c:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800a8a0:	0c1b      	lsrs	r3, r3, #16
 800a8a2:	62bb      	str	r3, [r7, #40]	; 0x28
	sigmaEstP2Tmp = (sigmaEstP2Tmp + cAmbEffWidthSigmaEst_ns/2)/
 800a8a4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a8a6:	085a      	lsrs	r2, r3, #1
 800a8a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a8aa:	441a      	add	r2, r3
 800a8ac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a8ae:	fbb2 f3f3 	udiv	r3, r2, r3
 800a8b2:	62bb      	str	r3, [r7, #40]	; 0x28
		cAmbEffWidthSigmaEst_ns;
	sigmaEstP2Tmp *= cAmbEffWidthDMax_ns;
 800a8b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a8b6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a8b8:	fb02 f303 	mul.w	r3, r2, r3
 800a8bc:	62bb      	str	r3, [r7, #40]	; 0x28

	if (sigmaEstP2Tmp > 0xffff) {
 800a8be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a8c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a8c4:	d302      	bcc.n	800a8cc <VL53L0X_calc_dmax+0xe4>
		minSignalNeeded_p3 = 0xfff00000;
 800a8c6:	4b54      	ldr	r3, [pc, #336]	; (800aa18 <VL53L0X_calc_dmax+0x230>)
 800a8c8:	663b      	str	r3, [r7, #96]	; 0x60
 800a8ca:	e015      	b.n	800a8f8 <VL53L0X_calc_dmax+0x110>

		/* DMAX uses a different ambient width from sigma, so apply
		 * correction.
		 * Perform division before multiplication to prevent overflow.
		 */
		sigmaEstimateP2 = (sigmaEstimateP2 + cAmbEffWidthSigmaEst_ns/2)/
 800a8cc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a8ce:	085a      	lsrs	r2, r3, #1
 800a8d0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a8d2:	441a      	add	r2, r3
 800a8d4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a8d6:	fbb2 f3f3 	udiv	r3, r2, r3
 800a8da:	677b      	str	r3, [r7, #116]	; 0x74
			cAmbEffWidthSigmaEst_ns;
		sigmaEstimateP2 *= cAmbEffWidthDMax_ns;
 800a8dc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a8de:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a8e0:	fb02 f303 	mul.w	r3, r2, r3
 800a8e4:	677b      	str	r3, [r7, #116]	; 0x74

		/* FixPoint1616 >> 16 = uint32 */
		minSignalNeeded_p3 = (sigmaEstimateP2 + 0x8000) >> 16;
 800a8e6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a8e8:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800a8ec:	0c1b      	lsrs	r3, r3, #16
 800a8ee:	663b      	str	r3, [r7, #96]	; 0x60

		minSignalNeeded_p3 *= minSignalNeeded_p3;
 800a8f0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a8f2:	fb03 f303 	mul.w	r3, r3, r3
 800a8f6:	663b      	str	r3, [r7, #96]	; 0x60

	}

	/* FixPoint1814 / uint32 = FixPoint1814 */
	sigmaLimitTmp = ((cSigmaLimit << 14) + 500) / 1000;
 800a8f8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a8fa:	039b      	lsls	r3, r3, #14
 800a8fc:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800a900:	4a46      	ldr	r2, [pc, #280]	; (800aa1c <VL53L0X_calc_dmax+0x234>)
 800a902:	fba2 2303 	umull	r2, r3, r2, r3
 800a906:	099b      	lsrs	r3, r3, #6
 800a908:	627b      	str	r3, [r7, #36]	; 0x24

	/* FixPoint1814 * FixPoint1814 = FixPoint3628 := FixPoint0428 */
	sigmaLimitTmp *= sigmaLimitTmp;
 800a90a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a90c:	fb03 f303 	mul.w	r3, r3, r3
 800a910:	627b      	str	r3, [r7, #36]	; 0x24

	/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
	sigmaEstSqTmp = cSigmaEstRef * cSigmaEstRef;
 800a912:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a914:	fb03 f303 	mul.w	r3, r3, r3
 800a918:	623b      	str	r3, [r7, #32]

	/* FixPoint3232 >> 4 = FixPoint0428 */
	sigmaEstSqTmp = (sigmaEstSqTmp + 0x08) >> 4;
 800a91a:	6a3b      	ldr	r3, [r7, #32]
 800a91c:	3308      	adds	r3, #8
 800a91e:	091b      	lsrs	r3, r3, #4
 800a920:	623b      	str	r3, [r7, #32]

	/* FixPoint0428 - FixPoint0428	= FixPoint0428 */
	sigmaLimitTmp -=  sigmaEstSqTmp;
 800a922:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a924:	6a3b      	ldr	r3, [r7, #32]
 800a926:	1ad3      	subs	r3, r2, r3
 800a928:	627b      	str	r3, [r7, #36]	; 0x24

	/* uint32_t * FixPoint0428 = FixPoint0428 */
	minSignalNeeded_p4 = 4 * 12 * sigmaLimitTmp;
 800a92a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a92c:	4613      	mov	r3, r2
 800a92e:	005b      	lsls	r3, r3, #1
 800a930:	4413      	add	r3, r2
 800a932:	011b      	lsls	r3, r3, #4
 800a934:	61fb      	str	r3, [r7, #28]

	/* FixPoint0428 >> 14 = FixPoint1814 */
	minSignalNeeded_p4 = (minSignalNeeded_p4 + 0x2000) >> 14;
 800a936:	69fb      	ldr	r3, [r7, #28]
 800a938:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800a93c:	0b9b      	lsrs	r3, r3, #14
 800a93e:	61fb      	str	r3, [r7, #28]

	/* uint32 + uint32 = uint32 */
	minSignalNeeded = (minSignalNeeded_p2 + minSignalNeeded_p3);
 800a940:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a942:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a944:	4413      	add	r3, r2
 800a946:	61bb      	str	r3, [r7, #24]

	/* uint32 / uint32 = uint32 */
	minSignalNeeded += (peakVcselDuration_us/2);
 800a948:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a94a:	085b      	lsrs	r3, r3, #1
 800a94c:	69ba      	ldr	r2, [r7, #24]
 800a94e:	4413      	add	r3, r2
 800a950:	61bb      	str	r3, [r7, #24]
	minSignalNeeded /= peakVcselDuration_us;
 800a952:	69ba      	ldr	r2, [r7, #24]
 800a954:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a956:	fbb2 f3f3 	udiv	r3, r2, r3
 800a95a:	61bb      	str	r3, [r7, #24]

	/* uint32 << 14 = FixPoint1814 */
	minSignalNeeded <<= 14;
 800a95c:	69bb      	ldr	r3, [r7, #24]
 800a95e:	039b      	lsls	r3, r3, #14
 800a960:	61bb      	str	r3, [r7, #24]

	/* FixPoint1814 / FixPoint1814 = uint32 */
	minSignalNeeded += (minSignalNeeded_p4/2);
 800a962:	69fb      	ldr	r3, [r7, #28]
 800a964:	085b      	lsrs	r3, r3, #1
 800a966:	69ba      	ldr	r2, [r7, #24]
 800a968:	4413      	add	r3, r2
 800a96a:	61bb      	str	r3, [r7, #24]
	minSignalNeeded /= minSignalNeeded_p4;
 800a96c:	69ba      	ldr	r2, [r7, #24]
 800a96e:	69fb      	ldr	r3, [r7, #28]
 800a970:	fbb2 f3f3 	udiv	r3, r2, r3
 800a974:	61bb      	str	r3, [r7, #24]

	/* FixPoint3200 * FixPoint2804 := FixPoint2804*/
	minSignalNeeded *= minSignalNeeded_p1;
 800a976:	69bb      	ldr	r3, [r7, #24]
 800a978:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800a97a:	fb02 f303 	mul.w	r3, r2, r3
 800a97e:	61bb      	str	r3, [r7, #24]
	 * and 10E-22 on the denominator.
	 * We do this because 32bit fix point calculation can't
	 * handle the larger and smaller elements of this equation,
	 * i.e. speed of light and pulse widths.
	 */
	minSignalNeeded = (minSignalNeeded + 500) / 1000;
 800a980:	69bb      	ldr	r3, [r7, #24]
 800a982:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800a986:	4a25      	ldr	r2, [pc, #148]	; (800aa1c <VL53L0X_calc_dmax+0x234>)
 800a988:	fba2 2303 	umull	r2, r3, r2, r3
 800a98c:	099b      	lsrs	r3, r3, #6
 800a98e:	61bb      	str	r3, [r7, #24]
	minSignalNeeded <<= 4;
 800a990:	69bb      	ldr	r3, [r7, #24]
 800a992:	011b      	lsls	r3, r3, #4
 800a994:	61bb      	str	r3, [r7, #24]

	minSignalNeeded = (minSignalNeeded + 500) / 1000;
 800a996:	69bb      	ldr	r3, [r7, #24]
 800a998:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800a99c:	4a1f      	ldr	r2, [pc, #124]	; (800aa1c <VL53L0X_calc_dmax+0x234>)
 800a99e:	fba2 2303 	umull	r2, r3, r2, r3
 800a9a2:	099b      	lsrs	r3, r3, #6
 800a9a4:	61bb      	str	r3, [r7, #24]

	/* FixPoint1616 >> 8 = FixPoint2408 */
	signalLimitTmp = (cSignalLimit + 0x80) >> 8;
 800a9a6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a9a8:	3380      	adds	r3, #128	; 0x80
 800a9aa:	0a1b      	lsrs	r3, r3, #8
 800a9ac:	617b      	str	r3, [r7, #20]

	/* FixPoint2408/FixPoint2408 = uint32 */
	if (signalLimitTmp != 0)
 800a9ae:	697b      	ldr	r3, [r7, #20]
 800a9b0:	2b00      	cmp	r3, #0
 800a9b2:	d008      	beq.n	800a9c6 <VL53L0X_calc_dmax+0x1de>
		dmaxDarkTmp = (SignalAt0mm + (signalLimitTmp / 2))
 800a9b4:	697b      	ldr	r3, [r7, #20]
 800a9b6:	085a      	lsrs	r2, r3, #1
 800a9b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a9ba:	441a      	add	r2, r3
 800a9bc:	697b      	ldr	r3, [r7, #20]
 800a9be:	fbb2 f3f3 	udiv	r3, r2, r3
 800a9c2:	65bb      	str	r3, [r7, #88]	; 0x58
 800a9c4:	e001      	b.n	800a9ca <VL53L0X_calc_dmax+0x1e2>
			/ signalLimitTmp;
	else
		dmaxDarkTmp = 0;
 800a9c6:	2300      	movs	r3, #0
 800a9c8:	65bb      	str	r3, [r7, #88]	; 0x58

	dmaxDark = VL53L0X_isqrt(dmaxDarkTmp);
 800a9ca:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800a9cc:	f7fe f9ba 	bl	8008d44 <VL53L0X_isqrt>
 800a9d0:	6138      	str	r0, [r7, #16]

	/* FixPoint2408/FixPoint2408 = uint32 */
	if (minSignalNeeded != 0)
 800a9d2:	69bb      	ldr	r3, [r7, #24]
 800a9d4:	2b00      	cmp	r3, #0
 800a9d6:	d008      	beq.n	800a9ea <VL53L0X_calc_dmax+0x202>
		dmaxAmbient = (SignalAt0mm + minSignalNeeded/2)
 800a9d8:	69bb      	ldr	r3, [r7, #24]
 800a9da:	085a      	lsrs	r2, r3, #1
 800a9dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a9de:	441a      	add	r2, r3
 800a9e0:	69bb      	ldr	r3, [r7, #24]
 800a9e2:	fbb2 f3f3 	udiv	r3, r2, r3
 800a9e6:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a9e8:	e001      	b.n	800a9ee <VL53L0X_calc_dmax+0x206>
			/ minSignalNeeded;
	else
		dmaxAmbient = 0;
 800a9ea:	2300      	movs	r3, #0
 800a9ec:	65fb      	str	r3, [r7, #92]	; 0x5c

	dmaxAmbient = VL53L0X_isqrt(dmaxAmbient);
 800a9ee:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 800a9f0:	f7fe f9a8 	bl	8008d44 <VL53L0X_isqrt>
 800a9f4:	65f8      	str	r0, [r7, #92]	; 0x5c

	*pdmax_mm = dmaxDark;
 800a9f6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800a9f8:	693a      	ldr	r2, [r7, #16]
 800a9fa:	601a      	str	r2, [r3, #0]
	if (dmaxDark > dmaxAmbient)
 800a9fc:	693a      	ldr	r2, [r7, #16]
 800a9fe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800aa00:	429a      	cmp	r2, r3
 800aa02:	d902      	bls.n	800aa0a <VL53L0X_calc_dmax+0x222>
		*pdmax_mm = dmaxAmbient;
 800aa04:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800aa06:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800aa08:	601a      	str	r2, [r3, #0]

	LOG_FUNCTION_END(Status);

	return Status;
 800aa0a:	f997 3043 	ldrsb.w	r3, [r7, #67]	; 0x43
}
 800aa0e:	4618      	mov	r0, r3
 800aa10:	3768      	adds	r7, #104	; 0x68
 800aa12:	46bd      	mov	sp, r7
 800aa14:	bd80      	pop	{r7, pc}
 800aa16:	bf00      	nop
 800aa18:	fff00000 	.word	0xfff00000
 800aa1c:	10624dd3 	.word	0x10624dd3

0800aa20 <VL53L0X_calc_sigma_estimate>:

VL53L0X_Error VL53L0X_calc_sigma_estimate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *pSigmaEstimate,
	uint32_t *pDmax_mm)
{
 800aa20:	b580      	push	{r7, lr}
 800aa22:	b0b4      	sub	sp, #208	; 0xd0
 800aa24:	af04      	add	r7, sp, #16
 800aa26:	60f8      	str	r0, [r7, #12]
 800aa28:	60b9      	str	r1, [r7, #8]
 800aa2a:	607a      	str	r2, [r7, #4]
 800aa2c:	603b      	str	r3, [r7, #0]
	/* Expressed in 100ths of a ns, i.e. centi-ns */
	const uint32_t cPulseEffectiveWidth_centi_ns   = 800;
 800aa2e:	f44f 7348 	mov.w	r3, #800	; 0x320
 800aa32:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
	/* Expressed in 100ths of a ns, i.e. centi-ns */
	const uint32_t cAmbientEffectiveWidth_centi_ns = 600;
 800aa36:	f44f 7316 	mov.w	r3, #600	; 0x258
 800aa3a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	const FixPoint1616_t cDfltFinalRangeIntegrationTimeMilliSecs	= 0x00190000; /* 25ms */
 800aa3e:	f44f 13c8 	mov.w	r3, #1638400	; 0x190000
 800aa42:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
	const uint32_t cVcselPulseWidth_ps	= 4700; /* pico secs */
 800aa46:	f241 235c 	movw	r3, #4700	; 0x125c
 800aa4a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	const FixPoint1616_t cSigmaEstMax	= 0x028F87AE;
 800aa4e:	4b9e      	ldr	r3, [pc, #632]	; (800acc8 <VL53L0X_calc_sigma_estimate+0x2a8>)
 800aa50:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
	const FixPoint1616_t cSigmaEstRtnMax	= 0xF000;
 800aa54:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 800aa58:	67fb      	str	r3, [r7, #124]	; 0x7c
	const FixPoint1616_t cAmbToSignalRatioMax = 0xF0000000/
 800aa5a:	f04f 4270 	mov.w	r2, #4026531840	; 0xf0000000
 800aa5e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800aa62:	fbb2 f3f3 	udiv	r3, r2, r3
 800aa66:	67bb      	str	r3, [r7, #120]	; 0x78
		cAmbientEffectiveWidth_centi_ns;
	/* Time Of Flight per mm (6.6 pico secs) */
	const FixPoint1616_t cTOF_per_mm_ps		= 0x0006999A;
 800aa68:	4b98      	ldr	r3, [pc, #608]	; (800accc <VL53L0X_calc_sigma_estimate+0x2ac>)
 800aa6a:	677b      	str	r3, [r7, #116]	; 0x74
	const uint32_t c16BitRoundingParam		= 0x00008000;
 800aa6c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800aa70:	673b      	str	r3, [r7, #112]	; 0x70
	const FixPoint1616_t cMaxXTalk_kcps		= 0x00320000;
 800aa72:	f44f 1348 	mov.w	r3, #3276800	; 0x320000
 800aa76:	66fb      	str	r3, [r7, #108]	; 0x6c
	const uint32_t cPllPeriod_ps			= 1655;
 800aa78:	f240 6377 	movw	r3, #1655	; 0x677
 800aa7c:	66bb      	str	r3, [r7, #104]	; 0x68
	FixPoint1616_t xTalkCorrection;
	FixPoint1616_t ambientRate_kcps;
	FixPoint1616_t peakSignalRate_kcps;
	FixPoint1616_t xTalkCompRate_mcps;
	uint32_t xTalkCompRate_kcps;
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800aa7e:	2300      	movs	r3, #0
 800aa80:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
	 * Estimates the range sigma
	 */

	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationRateMegaCps,
 800aa84:	68fb      	ldr	r3, [r7, #12]
 800aa86:	6a1b      	ldr	r3, [r3, #32]
 800aa88:	617b      	str	r3, [r7, #20]
	 * We work in kcps rather than mcps as this helps keep within the
	 * confines of the 32 Fix1616 type.
	 */

	ambientRate_kcps =
		(pRangingMeasurementData->AmbientRateRtnMegaCps * 1000) >> 16;
 800aa8a:	68bb      	ldr	r3, [r7, #8]
 800aa8c:	691b      	ldr	r3, [r3, #16]
 800aa8e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800aa92:	fb02 f303 	mul.w	r3, r2, r3
	ambientRate_kcps =
 800aa96:	0c1b      	lsrs	r3, r3, #16
 800aa98:	667b      	str	r3, [r7, #100]	; 0x64

	correctedSignalRate_mcps =
 800aa9a:	68bb      	ldr	r3, [r7, #8]
 800aa9c:	68db      	ldr	r3, [r3, #12]
 800aa9e:	663b      	str	r3, [r7, #96]	; 0x60
		pRangingMeasurementData->SignalRateRtnMegaCps;


	Status = VL53L0X_get_total_signal_rate(
 800aaa0:	f107 0310 	add.w	r3, r7, #16
 800aaa4:	461a      	mov	r2, r3
 800aaa6:	68b9      	ldr	r1, [r7, #8]
 800aaa8:	68f8      	ldr	r0, [r7, #12]
 800aaaa:	f7ff fe78 	bl	800a79e <VL53L0X_get_total_signal_rate>
 800aaae:	4603      	mov	r3, r0
 800aab0:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
		Dev, pRangingMeasurementData, &totalSignalRate_mcps);
	Status = VL53L0X_get_total_xtalk_rate(
 800aab4:	f107 0314 	add.w	r3, r7, #20
 800aab8:	461a      	mov	r2, r3
 800aaba:	68b9      	ldr	r1, [r7, #8]
 800aabc:	68f8      	ldr	r0, [r7, #12]
 800aabe:	f7ff fe3f 	bl	800a740 <VL53L0X_get_total_xtalk_rate>
 800aac2:	4603      	mov	r3, r0
 800aac4:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f


	/* Signal rate measurement provided by device is the
	 * peak signal rate, not average.
	 */
	peakSignalRate_kcps = (totalSignalRate_mcps * 1000);
 800aac8:	693b      	ldr	r3, [r7, #16]
 800aaca:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800aace:	fb02 f303 	mul.w	r3, r2, r3
 800aad2:	65fb      	str	r3, [r7, #92]	; 0x5c
	peakSignalRate_kcps = (peakSignalRate_kcps + 0x8000) >> 16;
 800aad4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800aad6:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800aada:	0c1b      	lsrs	r3, r3, #16
 800aadc:	65fb      	str	r3, [r7, #92]	; 0x5c

	xTalkCompRate_kcps = xTalkCompRate_mcps * 1000;
 800aade:	697b      	ldr	r3, [r7, #20]
 800aae0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800aae4:	fb02 f303 	mul.w	r3, r2, r3
 800aae8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

	if (xTalkCompRate_kcps > cMaxXTalk_kcps)
 800aaec:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 800aaf0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800aaf2:	429a      	cmp	r2, r3
 800aaf4:	d902      	bls.n	800aafc <VL53L0X_calc_sigma_estimate+0xdc>
		xTalkCompRate_kcps = cMaxXTalk_kcps;
 800aaf6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800aaf8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

	if (Status == VL53L0X_ERROR_NONE) {
 800aafc:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
 800ab00:	2b00      	cmp	r3, #0
 800ab02:	d168      	bne.n	800abd6 <VL53L0X_calc_sigma_estimate+0x1b6>

		/* Calculate final range macro periods */
		finalRangeTimeoutMicroSecs = VL53L0X_GETDEVICESPECIFICPARAMETER(
 800ab04:	68fb      	ldr	r3, [r7, #12]
 800ab06:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800ab0a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
			Dev, FinalRangeTimeoutMicroSecs);

		finalRangeVcselPCLKS = VL53L0X_GETDEVICESPECIFICPARAMETER(
 800ab0e:	68fb      	ldr	r3, [r7, #12]
 800ab10:	f893 30e0 	ldrb.w	r3, [r3, #224]	; 0xe0
 800ab14:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
			Dev, FinalRangeVcselPulsePeriod);

		finalRangeMacroPCLKS = VL53L0X_calc_timeout_mclks(
 800ab18:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 800ab1c:	461a      	mov	r2, r3
 800ab1e:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
 800ab22:	68f8      	ldr	r0, [r7, #12]
 800ab24:	f7fe feb2 	bl	800988c <VL53L0X_calc_timeout_mclks>
 800ab28:	6578      	str	r0, [r7, #84]	; 0x54
			Dev, finalRangeTimeoutMicroSecs, finalRangeVcselPCLKS);

		/* Calculate pre-range macro periods */
		preRangeTimeoutMicroSecs = VL53L0X_GETDEVICESPECIFICPARAMETER(
 800ab2a:	68fb      	ldr	r3, [r7, #12]
 800ab2c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800ab30:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
			Dev, PreRangeTimeoutMicroSecs);

		preRangeVcselPCLKS = VL53L0X_GETDEVICESPECIFICPARAMETER(
 800ab34:	68fb      	ldr	r3, [r7, #12]
 800ab36:	f893 30e8 	ldrb.w	r3, [r3, #232]	; 0xe8
 800ab3a:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
			Dev, PreRangeVcselPulsePeriod);

		preRangeMacroPCLKS = VL53L0X_calc_timeout_mclks(
 800ab3e:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 800ab42:	461a      	mov	r2, r3
 800ab44:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
 800ab48:	68f8      	ldr	r0, [r7, #12]
 800ab4a:	f7fe fe9f 	bl	800988c <VL53L0X_calc_timeout_mclks>
 800ab4e:	64f8      	str	r0, [r7, #76]	; 0x4c
			Dev, preRangeTimeoutMicroSecs, preRangeVcselPCLKS);

		vcselWidth = 3;
 800ab50:	2303      	movs	r3, #3
 800ab52:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
		if (finalRangeVcselPCLKS == 8)
 800ab56:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 800ab5a:	2b08      	cmp	r3, #8
 800ab5c:	d102      	bne.n	800ab64 <VL53L0X_calc_sigma_estimate+0x144>
			vcselWidth = 2;
 800ab5e:	2302      	movs	r3, #2
 800ab60:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98


		peakVcselDuration_us = vcselWidth * 2048 *
			(preRangeMacroPCLKS + finalRangeMacroPCLKS);
 800ab64:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800ab66:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ab68:	4413      	add	r3, r2
		peakVcselDuration_us = vcselWidth * 2048 *
 800ab6a:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800ab6e:	fb02 f303 	mul.w	r3, r2, r3
 800ab72:	02db      	lsls	r3, r3, #11
 800ab74:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
		peakVcselDuration_us = (peakVcselDuration_us + 500)/1000;
 800ab78:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800ab7c:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800ab80:	4a53      	ldr	r2, [pc, #332]	; (800acd0 <VL53L0X_calc_sigma_estimate+0x2b0>)
 800ab82:	fba2 2303 	umull	r2, r3, r2, r3
 800ab86:	099b      	lsrs	r3, r3, #6
 800ab88:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
		peakVcselDuration_us *= cPllPeriod_ps;
 800ab8c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800ab90:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800ab92:	fb02 f303 	mul.w	r3, r2, r3
 800ab96:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
		peakVcselDuration_us = (peakVcselDuration_us + 500)/1000;
 800ab9a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800ab9e:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800aba2:	4a4b      	ldr	r2, [pc, #300]	; (800acd0 <VL53L0X_calc_sigma_estimate+0x2b0>)
 800aba4:	fba2 2303 	umull	r2, r3, r2, r3
 800aba8:	099b      	lsrs	r3, r3, #6
 800abaa:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

		/* Fix1616 >> 8 = Fix2408 */
		totalSignalRate_mcps = (totalSignalRate_mcps + 0x80) >> 8;
 800abae:	693b      	ldr	r3, [r7, #16]
 800abb0:	3380      	adds	r3, #128	; 0x80
 800abb2:	0a1b      	lsrs	r3, r3, #8
 800abb4:	613b      	str	r3, [r7, #16]

		/* Fix2408 * uint32 = Fix2408 */
		vcselTotalEventsRtn = totalSignalRate_mcps *
 800abb6:	693a      	ldr	r2, [r7, #16]
 800abb8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800abbc:	fb02 f303 	mul.w	r3, r2, r3
 800abc0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
			peakVcselDuration_us;

		/* Fix2408 >> 8 = uint32 */
		vcselTotalEventsRtn = (vcselTotalEventsRtn + 0x80) >> 8;
 800abc4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800abc8:	3380      	adds	r3, #128	; 0x80
 800abca:	0a1b      	lsrs	r3, r3, #8
 800abcc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

		/* Fix2408 << 8 = Fix1616 = */
		totalSignalRate_mcps <<= 8;
 800abd0:	693b      	ldr	r3, [r7, #16]
 800abd2:	021b      	lsls	r3, r3, #8
 800abd4:	613b      	str	r3, [r7, #16]
	}

	if (Status != VL53L0X_ERROR_NONE) {
 800abd6:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
 800abda:	2b00      	cmp	r3, #0
 800abdc:	d002      	beq.n	800abe4 <VL53L0X_calc_sigma_estimate+0x1c4>
		LOG_FUNCTION_END(Status);
		return Status;
 800abde:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
 800abe2:	e15e      	b.n	800aea2 <VL53L0X_calc_sigma_estimate+0x482>
	}

	if (peakSignalRate_kcps == 0) {
 800abe4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800abe6:	2b00      	cmp	r3, #0
 800abe8:	d10c      	bne.n	800ac04 <VL53L0X_calc_sigma_estimate+0x1e4>
		*pSigmaEstimate = cSigmaEstMax;
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800abf0:	601a      	str	r2, [r3, #0]
		PALDevDataSet(Dev, SigmaEstimate, cSigmaEstMax);
 800abf2:	68fb      	ldr	r3, [r7, #12]
 800abf4:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800abf8:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
		*pDmax_mm = 0;
 800abfc:	683b      	ldr	r3, [r7, #0]
 800abfe:	2200      	movs	r2, #0
 800ac00:	601a      	str	r2, [r3, #0]
 800ac02:	e14c      	b.n	800ae9e <VL53L0X_calc_sigma_estimate+0x47e>
	} else {
		if (vcselTotalEventsRtn < 1)
 800ac04:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800ac08:	2b00      	cmp	r3, #0
 800ac0a:	d102      	bne.n	800ac12 <VL53L0X_calc_sigma_estimate+0x1f2>
			vcselTotalEventsRtn = 1;
 800ac0c:	2301      	movs	r3, #1
 800ac0e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

		sigmaEstimateP1 = cPulseEffectiveWidth_centi_ns;
 800ac12:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800ac16:	64bb      	str	r3, [r7, #72]	; 0x48

		/* ((FixPoint1616 << 16)* uint32)/uint32 = FixPoint1616 */
		sigmaEstimateP2 = (ambientRate_kcps << 16)/peakSignalRate_kcps;
 800ac18:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ac1a:	041a      	lsls	r2, r3, #16
 800ac1c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ac1e:	fbb2 f3f3 	udiv	r3, r2, r3
 800ac22:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
		if (sigmaEstimateP2 > cAmbToSignalRatioMax) {
 800ac26:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800ac2a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ac2c:	429a      	cmp	r2, r3
 800ac2e:	d902      	bls.n	800ac36 <VL53L0X_calc_sigma_estimate+0x216>
			/* Clip to prevent overflow. Will ensure safe
			 * max result. */
			sigmaEstimateP2 = cAmbToSignalRatioMax;
 800ac30:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ac32:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
		}
		sigmaEstimateP2 *= cAmbientEffectiveWidth_centi_ns;
 800ac36:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800ac3a:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800ac3e:	fb02 f303 	mul.w	r3, r2, r3
 800ac42:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

		sigmaEstimateP3 = 2 * VL53L0X_isqrt(vcselTotalEventsRtn * 12);
 800ac46:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800ac4a:	4613      	mov	r3, r2
 800ac4c:	005b      	lsls	r3, r3, #1
 800ac4e:	4413      	add	r3, r2
 800ac50:	009b      	lsls	r3, r3, #2
 800ac52:	4618      	mov	r0, r3
 800ac54:	f7fe f876 	bl	8008d44 <VL53L0X_isqrt>
 800ac58:	4603      	mov	r3, r0
 800ac5a:	005b      	lsls	r3, r3, #1
 800ac5c:	647b      	str	r3, [r7, #68]	; 0x44

		/* uint32 * FixPoint1616 = FixPoint1616 */
		deltaT_ps = pRangingMeasurementData->RangeMilliMeter *
 800ac5e:	68bb      	ldr	r3, [r7, #8]
 800ac60:	891b      	ldrh	r3, [r3, #8]
 800ac62:	461a      	mov	r2, r3
 800ac64:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800ac66:	fb02 f303 	mul.w	r3, r2, r3
 800ac6a:	643b      	str	r3, [r7, #64]	; 0x40
		 * (uint32 << 16) - FixPoint1616 = FixPoint1616.
		 * Divide result by 1000 to convert to mcps.
		 * 500 is added to ensure rounding when integer division
		 * truncates.
		 */
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 800ac6c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ac6e:	041a      	lsls	r2, r3, #16
			2 * xTalkCompRate_kcps) + 500)/1000;
 800ac70:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800ac74:	005b      	lsls	r3, r3, #1
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 800ac76:	1ad3      	subs	r3, r2, r3
			2 * xTalkCompRate_kcps) + 500)/1000;
 800ac78:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 800ac7c:	4a14      	ldr	r2, [pc, #80]	; (800acd0 <VL53L0X_calc_sigma_estimate+0x2b0>)
 800ac7e:	fba2 2303 	umull	r2, r3, r2, r3
 800ac82:	099b      	lsrs	r3, r3, #6
 800ac84:	63fb      	str	r3, [r7, #60]	; 0x3c

		/* vcselRate + xtalkCompRate */
		diff2_mcps = ((peakSignalRate_kcps << 16) + 500)/1000;
 800ac86:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ac88:	041b      	lsls	r3, r3, #16
 800ac8a:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800ac8e:	4a10      	ldr	r2, [pc, #64]	; (800acd0 <VL53L0X_calc_sigma_estimate+0x2b0>)
 800ac90:	fba2 2303 	umull	r2, r3, r2, r3
 800ac94:	099b      	lsrs	r3, r3, #6
 800ac96:	63bb      	str	r3, [r7, #56]	; 0x38

		/* Shift by 8 bits to increase resolution prior to the
		 * division */
		diff1_mcps <<= 8;
 800ac98:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ac9a:	021b      	lsls	r3, r3, #8
 800ac9c:	63fb      	str	r3, [r7, #60]	; 0x3c

		/* FixPoint0824/FixPoint1616 = FixPoint2408 */
		xTalkCorrection	 = abs(diff1_mcps/diff2_mcps);
 800ac9e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800aca0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aca2:	fbb2 f3f3 	udiv	r3, r2, r3
 800aca6:	2b00      	cmp	r3, #0
 800aca8:	bfb8      	it	lt
 800acaa:	425b      	neglt	r3, r3
 800acac:	637b      	str	r3, [r7, #52]	; 0x34

		/* FixPoint2408 << 8 = FixPoint1616 */
		xTalkCorrection <<= 8;
 800acae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800acb0:	021b      	lsls	r3, r3, #8
 800acb2:	637b      	str	r3, [r7, #52]	; 0x34

		if(pRangingMeasurementData->RangeStatus != 0){
 800acb4:	68bb      	ldr	r3, [r7, #8]
 800acb6:	7e1b      	ldrb	r3, [r3, #24]
 800acb8:	2b00      	cmp	r3, #0
 800acba:	d00b      	beq.n	800acd4 <VL53L0X_calc_sigma_estimate+0x2b4>
			pwMult = 1 << 16;
 800acbc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800acc0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800acc4:	e033      	b.n	800ad2e <VL53L0X_calc_sigma_estimate+0x30e>
 800acc6:	bf00      	nop
 800acc8:	028f87ae 	.word	0x028f87ae
 800accc:	0006999a 	.word	0x0006999a
 800acd0:	10624dd3 	.word	0x10624dd3
		} else {
			/* FixPoint1616/uint32 = FixPoint1616 */
			pwMult = deltaT_ps/cVcselPulseWidth_ps; /* smaller than 1.0f */
 800acd4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800acd6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800acda:	fbb2 f3f3 	udiv	r3, r2, r3
 800acde:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			/*
			 * FixPoint1616 * FixPoint1616 = FixPoint3232, however both
			 * values are small enough such that32 bits will not be
			 * exceeded.
			 */
			pwMult *= ((1 << 16) - xTalkCorrection);
 800ace2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ace4:	f5c3 3280 	rsb	r2, r3, #65536	; 0x10000
 800ace8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800acec:	fb02 f303 	mul.w	r3, r2, r3
 800acf0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

			/* (FixPoint3232 >> 16) = FixPoint1616 */
			pwMult =  (pwMult + c16BitRoundingParam) >> 16;
 800acf4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800acf8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800acfa:	4413      	add	r3, r2
 800acfc:	0c1b      	lsrs	r3, r3, #16
 800acfe:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

			/* FixPoint1616 + FixPoint1616 = FixPoint1616 */
			pwMult += (1 << 16);
 800ad02:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800ad06:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 800ad0a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			/*
			 * At this point the value will be 1.xx, therefore if we square
			 * the value this will exceed 32 bits. To address this perform
			 * a single shift to the right before the multiplication.
			 */
			pwMult >>= 1;
 800ad0e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800ad12:	085b      	lsrs	r3, r3, #1
 800ad14:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			/* FixPoint1715 * FixPoint1715 = FixPoint3430 */
			pwMult = pwMult * pwMult;
 800ad18:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800ad1c:	fb03 f303 	mul.w	r3, r3, r3
 800ad20:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

			/* (FixPoint3430 >> 14) = Fix1616 */
			pwMult >>= 14;
 800ad24:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800ad28:	0b9b      	lsrs	r3, r3, #14
 800ad2a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
		}

		/* FixPoint1616 * uint32 = FixPoint1616 */
		sqr1 = pwMult * sigmaEstimateP1;
 800ad2e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800ad32:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ad34:	fb02 f303 	mul.w	r3, r2, r3
 800ad38:	633b      	str	r3, [r7, #48]	; 0x30

		/* (FixPoint1616 >> 16) = FixPoint3200 */
		sqr1 = (sqr1 + 0x8000) >> 16;
 800ad3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad3c:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800ad40:	0c1b      	lsrs	r3, r3, #16
 800ad42:	633b      	str	r3, [r7, #48]	; 0x30

		/* FixPoint3200 * FixPoint3200 = FixPoint6400 */
		sqr1 *= sqr1;
 800ad44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad46:	fb03 f303 	mul.w	r3, r3, r3
 800ad4a:	633b      	str	r3, [r7, #48]	; 0x30

		sqr2 = sigmaEstimateP2;
 800ad4c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800ad50:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* (FixPoint1616 >> 16) = FixPoint3200 */
		sqr2 = (sqr2 + 0x8000) >> 16;
 800ad52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad54:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800ad58:	0c1b      	lsrs	r3, r3, #16
 800ad5a:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* FixPoint3200 * FixPoint3200 = FixPoint6400 */
		sqr2 *= sqr2;
 800ad5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad5e:	fb03 f303 	mul.w	r3, r3, r3
 800ad62:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* FixPoint64000 + FixPoint6400 = FixPoint6400 */
		sqrSum = sqr1 + sqr2;
 800ad64:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ad66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad68:	4413      	add	r3, r2
 800ad6a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* SQRT(FixPoin6400) = FixPoint3200 */
		sqrtResult_centi_ns = VL53L0X_isqrt(sqrSum);
 800ad6c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ad6e:	f7fd ffe9 	bl	8008d44 <VL53L0X_isqrt>
 800ad72:	6278      	str	r0, [r7, #36]	; 0x24

		/* (FixPoint3200 << 16) = FixPoint1616 */
		sqrtResult_centi_ns <<= 16;
 800ad74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad76:	041b      	lsls	r3, r3, #16
 800ad78:	627b      	str	r3, [r7, #36]	; 0x24
		/*
		 * Note that the Speed Of Light is expressed in um per 1E-10
		 * seconds (2997) Therefore to get mm/ns we have to divide by
		 * 10000
		 */
		sigmaEstRtn = (((sqrtResult_centi_ns+50)/100) /
 800ad7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad7c:	3332      	adds	r3, #50	; 0x32
 800ad7e:	4a4b      	ldr	r2, [pc, #300]	; (800aeac <VL53L0X_calc_sigma_estimate+0x48c>)
 800ad80:	fba2 2303 	umull	r2, r3, r2, r3
 800ad84:	095a      	lsrs	r2, r3, #5
 800ad86:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ad88:	fbb2 f3f3 	udiv	r3, r2, r3
 800ad8c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
				sigmaEstimateP3);
		sigmaEstRtn		 *= VL53L0X_SPEED_OF_LIGHT_IN_AIR;
 800ad90:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800ad94:	f640 32b5 	movw	r2, #2997	; 0xbb5
 800ad98:	fb02 f303 	mul.w	r3, r2, r3
 800ad9c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

		/* Add 5000 before dividing by 10000 to ensure rounding. */
		sigmaEstRtn		 += 5000;
 800ada0:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800ada4:	f241 3388 	movw	r3, #5000	; 0x1388
 800ada8:	4413      	add	r3, r2
 800adaa:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
		sigmaEstRtn		 /= 10000;
 800adae:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800adb2:	4a3f      	ldr	r2, [pc, #252]	; (800aeb0 <VL53L0X_calc_sigma_estimate+0x490>)
 800adb4:	fba2 2303 	umull	r2, r3, r2, r3
 800adb8:	0b5b      	lsrs	r3, r3, #13
 800adba:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

		if (sigmaEstRtn > cSigmaEstRtnMax) {
 800adbe:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800adc2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800adc4:	429a      	cmp	r2, r3
 800adc6:	d902      	bls.n	800adce <VL53L0X_calc_sigma_estimate+0x3ae>
			/* Clip to prevent overflow. Will ensure safe
			 * max result. */
			sigmaEstRtn = cSigmaEstRtnMax;
 800adc8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800adca:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
		}
		finalRangeIntegrationTimeMilliSecs =
			(finalRangeTimeoutMicroSecs + preRangeTimeoutMicroSecs + 500)/1000;
 800adce:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800add2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800add6:	4413      	add	r3, r2
 800add8:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
		finalRangeIntegrationTimeMilliSecs =
 800addc:	4a35      	ldr	r2, [pc, #212]	; (800aeb4 <VL53L0X_calc_sigma_estimate+0x494>)
 800adde:	fba2 2303 	umull	r2, r3, r2, r3
 800ade2:	099b      	lsrs	r3, r3, #6
 800ade4:	623b      	str	r3, [r7, #32]
		/* sigmaEstRef = 1mm * 25ms/final range integration time (inc pre-range)
		 * sqrt(FixPoint1616/int) = FixPoint2408)
		 */
		sigmaEstRef =
			VL53L0X_isqrt((cDfltFinalRangeIntegrationTimeMilliSecs +
				finalRangeIntegrationTimeMilliSecs/2)/
 800ade6:	6a3b      	ldr	r3, [r7, #32]
 800ade8:	085a      	lsrs	r2, r3, #1
			VL53L0X_isqrt((cDfltFinalRangeIntegrationTimeMilliSecs +
 800adea:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800adee:	441a      	add	r2, r3
 800adf0:	6a3b      	ldr	r3, [r7, #32]
 800adf2:	fbb2 f3f3 	udiv	r3, r2, r3
 800adf6:	4618      	mov	r0, r3
 800adf8:	f7fd ffa4 	bl	8008d44 <VL53L0X_isqrt>
 800adfc:	61f8      	str	r0, [r7, #28]
				finalRangeIntegrationTimeMilliSecs);

		/* FixPoint2408 << 8 = FixPoint1616 */
		sigmaEstRef <<= 8;
 800adfe:	69fb      	ldr	r3, [r7, #28]
 800ae00:	021b      	lsls	r3, r3, #8
 800ae02:	61fb      	str	r3, [r7, #28]
		sigmaEstRef = (sigmaEstRef + 500)/1000;
 800ae04:	69fb      	ldr	r3, [r7, #28]
 800ae06:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800ae0a:	4a2a      	ldr	r2, [pc, #168]	; (800aeb4 <VL53L0X_calc_sigma_estimate+0x494>)
 800ae0c:	fba2 2303 	umull	r2, r3, r2, r3
 800ae10:	099b      	lsrs	r3, r3, #6
 800ae12:	61fb      	str	r3, [r7, #28]

		/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
		sqr1 = sigmaEstRtn * sigmaEstRtn;
 800ae14:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800ae18:	fb03 f303 	mul.w	r3, r3, r3
 800ae1c:	633b      	str	r3, [r7, #48]	; 0x30
		/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
		sqr2 = sigmaEstRef * sigmaEstRef;
 800ae1e:	69fb      	ldr	r3, [r7, #28]
 800ae20:	fb03 f303 	mul.w	r3, r3, r3
 800ae24:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* sqrt(FixPoint3232) = FixPoint1616 */
		sqrtResult = VL53L0X_isqrt((sqr1 + sqr2));
 800ae26:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ae28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae2a:	4413      	add	r3, r2
 800ae2c:	4618      	mov	r0, r3
 800ae2e:	f7fd ff89 	bl	8008d44 <VL53L0X_isqrt>
 800ae32:	61b8      	str	r0, [r7, #24]
		 * Note that the Shift by 4 bits increases resolution prior to
		 * the sqrt, therefore the result must be shifted by 2 bits to
		 * the right to revert back to the FixPoint1616 format.
		 */

		sigmaEstimate	 = 1000 * sqrtResult;
 800ae34:	69bb      	ldr	r3, [r7, #24]
 800ae36:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800ae3a:	fb02 f303 	mul.w	r3, r2, r3
 800ae3e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

		if ((peakSignalRate_kcps < 1) || (vcselTotalEventsRtn < 1) ||
 800ae42:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ae44:	2b00      	cmp	r3, #0
 800ae46:	d009      	beq.n	800ae5c <VL53L0X_calc_sigma_estimate+0x43c>
 800ae48:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800ae4c:	2b00      	cmp	r3, #0
 800ae4e:	d005      	beq.n	800ae5c <VL53L0X_calc_sigma_estimate+0x43c>
 800ae50:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 800ae54:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800ae58:	429a      	cmp	r2, r3
 800ae5a:	d903      	bls.n	800ae64 <VL53L0X_calc_sigma_estimate+0x444>
				(sigmaEstimate > cSigmaEstMax)) {
				sigmaEstimate = cSigmaEstMax;
 800ae5c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800ae60:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
		}

		*pSigmaEstimate = (uint32_t)(sigmaEstimate);
 800ae64:	687b      	ldr	r3, [r7, #4]
 800ae66:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 800ae6a:	601a      	str	r2, [r3, #0]
		PALDevDataSet(Dev, SigmaEstimate, *pSigmaEstimate);
 800ae6c:	687b      	ldr	r3, [r7, #4]
 800ae6e:	681a      	ldr	r2, [r3, #0]
 800ae70:	68fb      	ldr	r3, [r7, #12]
 800ae72:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
		Status = VL53L0X_calc_dmax(
 800ae76:	6939      	ldr	r1, [r7, #16]
 800ae78:	683b      	ldr	r3, [r7, #0]
 800ae7a:	9303      	str	r3, [sp, #12]
 800ae7c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800ae80:	9302      	str	r3, [sp, #8]
 800ae82:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800ae86:	9301      	str	r3, [sp, #4]
 800ae88:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ae8a:	9300      	str	r3, [sp, #0]
 800ae8c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800ae90:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800ae92:	68f8      	ldr	r0, [r7, #12]
 800ae94:	f7ff fca8 	bl	800a7e8 <VL53L0X_calc_dmax>
 800ae98:	4603      	mov	r3, r0
 800ae9a:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
			peakVcselDuration_us,
			pDmax_mm);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800ae9e:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
}
 800aea2:	4618      	mov	r0, r3
 800aea4:	37c0      	adds	r7, #192	; 0xc0
 800aea6:	46bd      	mov	sp, r7
 800aea8:	bd80      	pop	{r7, pc}
 800aeaa:	bf00      	nop
 800aeac:	51eb851f 	.word	0x51eb851f
 800aeb0:	d1b71759 	.word	0xd1b71759
 800aeb4:	10624dd3 	.word	0x10624dd3

0800aeb8 <VL53L0X_get_pal_range_status>:
		uint8_t DeviceRangeStatus,
		FixPoint1616_t SignalRate,
		uint16_t EffectiveSpadRtnCount,
		VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
		uint8_t *pPalRangeStatus)
{
 800aeb8:	b580      	push	{r7, lr}
 800aeba:	b090      	sub	sp, #64	; 0x40
 800aebc:	af00      	add	r7, sp, #0
 800aebe:	60f8      	str	r0, [r7, #12]
 800aec0:	607a      	str	r2, [r7, #4]
 800aec2:	461a      	mov	r2, r3
 800aec4:	460b      	mov	r3, r1
 800aec6:	72fb      	strb	r3, [r7, #11]
 800aec8:	4613      	mov	r3, r2
 800aeca:	813b      	strh	r3, [r7, #8]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800aecc:	2300      	movs	r3, #0
 800aece:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	uint8_t NoneFlag;
	uint8_t SigmaLimitflag = 0;
 800aed2:	2300      	movs	r3, #0
 800aed4:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
	uint8_t SignalRefClipflag = 0;
 800aed8:	2300      	movs	r3, #0
 800aeda:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
	uint8_t RangeIgnoreThresholdflag = 0;
 800aede:	2300      	movs	r3, #0
 800aee0:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	uint8_t SigmaLimitCheckEnable = 0;
 800aee4:	2300      	movs	r3, #0
 800aee6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	uint8_t SignalRateFinalRangeLimitCheckEnable = 0;
 800aeea:	2300      	movs	r3, #0
 800aeec:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
	uint8_t SignalRefClipLimitCheckEnable = 0;
 800aef0:	2300      	movs	r3, #0
 800aef2:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
	uint8_t RangeIgnoreThresholdLimitCheckEnable = 0;
 800aef6:	2300      	movs	r3, #0
 800aef8:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	FixPoint1616_t SigmaEstimate;
	FixPoint1616_t SigmaLimitValue;
	FixPoint1616_t SignalRefClipValue;
	FixPoint1616_t RangeIgnoreThresholdValue;
	FixPoint1616_t SignalRatePerSpad;
	uint8_t DeviceRangeStatusInternal = 0;
 800aefc:	2300      	movs	r3, #0
 800aefe:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
	uint16_t tmpWord = 0;
 800af02:	2300      	movs	r3, #0
 800af04:	82fb      	strh	r3, [r7, #22]
	uint8_t Temp8;
	uint32_t Dmax_mm = 0;
 800af06:	2300      	movs	r3, #0
 800af08:	613b      	str	r3, [r7, #16]
	 * the value 11 in the DeviceRangeStatus.
	 * In addition, the SigmaEstimator is not included in the VL53L0X
	 * DeviceRangeStatus, this will be added in the PalRangeStatus.
	 */

	DeviceRangeStatusInternal = ((DeviceRangeStatus & 0x78) >> 3);
 800af0a:	7afb      	ldrb	r3, [r7, #11]
 800af0c:	10db      	asrs	r3, r3, #3
 800af0e:	b2db      	uxtb	r3, r3
 800af10:	f003 030f 	and.w	r3, r3, #15
 800af14:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32

	if (DeviceRangeStatusInternal == 0 ||
 800af18:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800af1c:	2b00      	cmp	r3, #0
 800af1e:	d017      	beq.n	800af50 <VL53L0X_get_pal_range_status+0x98>
 800af20:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800af24:	2b05      	cmp	r3, #5
 800af26:	d013      	beq.n	800af50 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 5 ||
 800af28:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800af2c:	2b07      	cmp	r3, #7
 800af2e:	d00f      	beq.n	800af50 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 7 ||
 800af30:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800af34:	2b0c      	cmp	r3, #12
 800af36:	d00b      	beq.n	800af50 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 12 ||
 800af38:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800af3c:	2b0d      	cmp	r3, #13
 800af3e:	d007      	beq.n	800af50 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 13 ||
 800af40:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800af44:	2b0e      	cmp	r3, #14
 800af46:	d003      	beq.n	800af50 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 14 ||
 800af48:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800af4c:	2b0f      	cmp	r3, #15
 800af4e:	d103      	bne.n	800af58 <VL53L0X_get_pal_range_status+0xa0>
		DeviceRangeStatusInternal == 15
			) {
		NoneFlag = 1;
 800af50:	2301      	movs	r3, #1
 800af52:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 800af56:	e002      	b.n	800af5e <VL53L0X_get_pal_range_status+0xa6>
	} else {
		NoneFlag = 0;
 800af58:	2300      	movs	r3, #0
 800af5a:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e

	/*
	 * Check if Sigma limit is enabled, if yes then do comparison with limit
	 * value and put the result back into pPalRangeStatus.
	 */
	if (Status == VL53L0X_ERROR_NONE)
 800af5e:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800af62:	2b00      	cmp	r3, #0
 800af64:	d109      	bne.n	800af7a <VL53L0X_get_pal_range_status+0xc2>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 800af66:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 800af6a:	461a      	mov	r2, r3
 800af6c:	2100      	movs	r1, #0
 800af6e:	68f8      	ldr	r0, [r7, #12]
 800af70:	f7fc f9bc 	bl	80072ec <VL53L0X_GetLimitCheckEnable>
 800af74:	4603      	mov	r3, r0
 800af76:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
			&SigmaLimitCheckEnable);

	if ((SigmaLimitCheckEnable != 0) && (Status == VL53L0X_ERROR_NONE)) {
 800af7a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800af7e:	2b00      	cmp	r3, #0
 800af80:	d02e      	beq.n	800afe0 <VL53L0X_get_pal_range_status+0x128>
 800af82:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800af86:	2b00      	cmp	r3, #0
 800af88:	d12a      	bne.n	800afe0 <VL53L0X_get_pal_range_status+0x128>
		/*
		* compute the Sigma and check with limit
		*/
		Status = VL53L0X_calc_sigma_estimate(
 800af8a:	f107 0310 	add.w	r3, r7, #16
 800af8e:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800af92:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800af94:	68f8      	ldr	r0, [r7, #12]
 800af96:	f7ff fd43 	bl	800aa20 <VL53L0X_calc_sigma_estimate>
 800af9a:	4603      	mov	r3, r0
 800af9c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			Dev,
			pRangingMeasurementData,
			&SigmaEstimate,
			&Dmax_mm);
		if (Status == VL53L0X_ERROR_NONE)
 800afa0:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800afa4:	2b00      	cmp	r3, #0
 800afa6:	d103      	bne.n	800afb0 <VL53L0X_get_pal_range_status+0xf8>
			pRangingMeasurementData->RangeDMaxMilliMeter = Dmax_mm;
 800afa8:	693b      	ldr	r3, [r7, #16]
 800afaa:	b29a      	uxth	r2, r3
 800afac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800afae:	815a      	strh	r2, [r3, #10]

		if (Status == VL53L0X_ERROR_NONE) {
 800afb0:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800afb4:	2b00      	cmp	r3, #0
 800afb6:	d113      	bne.n	800afe0 <VL53L0X_get_pal_range_status+0x128>
			Status = VL53L0X_GetLimitCheckValue(Dev,
 800afb8:	f107 0320 	add.w	r3, r7, #32
 800afbc:	461a      	mov	r2, r3
 800afbe:	2100      	movs	r1, #0
 800afc0:	68f8      	ldr	r0, [r7, #12]
 800afc2:	f7fc fa19 	bl	80073f8 <VL53L0X_GetLimitCheckValue>
 800afc6:	4603      	mov	r3, r0
 800afc8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				&SigmaLimitValue);

			if ((SigmaLimitValue > 0) &&
 800afcc:	6a3b      	ldr	r3, [r7, #32]
 800afce:	2b00      	cmp	r3, #0
 800afd0:	d006      	beq.n	800afe0 <VL53L0X_get_pal_range_status+0x128>
				(SigmaEstimate > SigmaLimitValue))
 800afd2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800afd4:	6a3b      	ldr	r3, [r7, #32]
			if ((SigmaLimitValue > 0) &&
 800afd6:	429a      	cmp	r2, r3
 800afd8:	d902      	bls.n	800afe0 <VL53L0X_get_pal_range_status+0x128>
					/* Limit Fail */
					SigmaLimitflag = 1;
 800afda:	2301      	movs	r3, #1
 800afdc:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d

	/*
	 * Check if Signal ref clip limit is enabled, if yes then do comparison
	 * with limit value and put the result back into pPalRangeStatus.
	 */
	if (Status == VL53L0X_ERROR_NONE)
 800afe0:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800afe4:	2b00      	cmp	r3, #0
 800afe6:	d109      	bne.n	800affc <VL53L0X_get_pal_range_status+0x144>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 800afe8:	f107 0329 	add.w	r3, r7, #41	; 0x29
 800afec:	461a      	mov	r2, r3
 800afee:	2102      	movs	r1, #2
 800aff0:	68f8      	ldr	r0, [r7, #12]
 800aff2:	f7fc f97b 	bl	80072ec <VL53L0X_GetLimitCheckEnable>
 800aff6:	4603      	mov	r3, r0
 800aff8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				&SignalRefClipLimitCheckEnable);

	if ((SignalRefClipLimitCheckEnable != 0) &&
 800affc:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 800b000:	2b00      	cmp	r3, #0
 800b002:	d044      	beq.n	800b08e <VL53L0X_get_pal_range_status+0x1d6>
 800b004:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800b008:	2b00      	cmp	r3, #0
 800b00a:	d140      	bne.n	800b08e <VL53L0X_get_pal_range_status+0x1d6>
			(Status == VL53L0X_ERROR_NONE)) {

		Status = VL53L0X_GetLimitCheckValue(Dev,
 800b00c:	f107 031c 	add.w	r3, r7, #28
 800b010:	461a      	mov	r2, r3
 800b012:	2102      	movs	r1, #2
 800b014:	68f8      	ldr	r0, [r7, #12]
 800b016:	f7fc f9ef 	bl	80073f8 <VL53L0X_GetLimitCheckValue>
 800b01a:	4603      	mov	r3, r0
 800b01c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				&SignalRefClipValue);

		/* Read LastSignalRefMcps from device */
		if (Status == VL53L0X_ERROR_NONE)
 800b020:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800b024:	2b00      	cmp	r3, #0
 800b026:	d107      	bne.n	800b038 <VL53L0X_get_pal_range_status+0x180>
			Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800b028:	2201      	movs	r2, #1
 800b02a:	21ff      	movs	r1, #255	; 0xff
 800b02c:	68f8      	ldr	r0, [r7, #12]
 800b02e:	f000 f9bb 	bl	800b3a8 <VL53L0X_WrByte>
 800b032:	4603      	mov	r3, r0
 800b034:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

		if (Status == VL53L0X_ERROR_NONE)
 800b038:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800b03c:	2b00      	cmp	r3, #0
 800b03e:	d109      	bne.n	800b054 <VL53L0X_get_pal_range_status+0x19c>
			Status = VL53L0X_RdWord(Dev,
 800b040:	f107 0316 	add.w	r3, r7, #22
 800b044:	461a      	mov	r2, r3
 800b046:	21b6      	movs	r1, #182	; 0xb6
 800b048:	68f8      	ldr	r0, [r7, #12]
 800b04a:	f000 fa59 	bl	800b500 <VL53L0X_RdWord>
 800b04e:	4603      	mov	r3, r0
 800b050:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_REG_RESULT_PEAK_SIGNAL_RATE_REF,
				&tmpWord);

		if (Status == VL53L0X_ERROR_NONE)
 800b054:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800b058:	2b00      	cmp	r3, #0
 800b05a:	d107      	bne.n	800b06c <VL53L0X_get_pal_range_status+0x1b4>
			Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800b05c:	2200      	movs	r2, #0
 800b05e:	21ff      	movs	r1, #255	; 0xff
 800b060:	68f8      	ldr	r0, [r7, #12]
 800b062:	f000 f9a1 	bl	800b3a8 <VL53L0X_WrByte>
 800b066:	4603      	mov	r3, r0
 800b068:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

		LastSignalRefMcps = VL53L0X_FIXPOINT97TOFIXPOINT1616(tmpWord);
 800b06c:	8afb      	ldrh	r3, [r7, #22]
 800b06e:	025b      	lsls	r3, r3, #9
 800b070:	62fb      	str	r3, [r7, #44]	; 0x2c
		PALDevDataSet(Dev, LastSignalRefMcps, LastSignalRefMcps);
 800b072:	68fb      	ldr	r3, [r7, #12]
 800b074:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b076:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148

		if ((SignalRefClipValue > 0) &&
 800b07a:	69fb      	ldr	r3, [r7, #28]
 800b07c:	2b00      	cmp	r3, #0
 800b07e:	d006      	beq.n	800b08e <VL53L0X_get_pal_range_status+0x1d6>
				(LastSignalRefMcps > SignalRefClipValue)) {
 800b080:	69fb      	ldr	r3, [r7, #28]
		if ((SignalRefClipValue > 0) &&
 800b082:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b084:	429a      	cmp	r2, r3
 800b086:	d902      	bls.n	800b08e <VL53L0X_get_pal_range_status+0x1d6>
			/* Limit Fail */
			SignalRefClipflag = 1;
 800b088:	2301      	movs	r3, #1
 800b08a:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
	 * Check if Signal ref clip limit is enabled, if yes then do comparison
	 * with limit value and put the result back into pPalRangeStatus.
	 * EffectiveSpadRtnCount has a format 8.8
	 * If (Return signal rate < (1.5 x Xtalk x number of Spads)) : FAIL
	 */
	if (Status == VL53L0X_ERROR_NONE)
 800b08e:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800b092:	2b00      	cmp	r3, #0
 800b094:	d109      	bne.n	800b0aa <VL53L0X_get_pal_range_status+0x1f2>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 800b096:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800b09a:	461a      	mov	r2, r3
 800b09c:	2103      	movs	r1, #3
 800b09e:	68f8      	ldr	r0, [r7, #12]
 800b0a0:	f7fc f924 	bl	80072ec <VL53L0X_GetLimitCheckEnable>
 800b0a4:	4603      	mov	r3, r0
 800b0a6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				&RangeIgnoreThresholdLimitCheckEnable);

	if ((RangeIgnoreThresholdLimitCheckEnable != 0) &&
 800b0aa:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800b0ae:	2b00      	cmp	r3, #0
 800b0b0:	d023      	beq.n	800b0fa <VL53L0X_get_pal_range_status+0x242>
 800b0b2:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800b0b6:	2b00      	cmp	r3, #0
 800b0b8:	d11f      	bne.n	800b0fa <VL53L0X_get_pal_range_status+0x242>
			(Status == VL53L0X_ERROR_NONE)) {

		/* Compute the signal rate per spad */
		if (EffectiveSpadRtnCount == 0) {
 800b0ba:	893b      	ldrh	r3, [r7, #8]
 800b0bc:	2b00      	cmp	r3, #0
 800b0be:	d102      	bne.n	800b0c6 <VL53L0X_get_pal_range_status+0x20e>
			SignalRatePerSpad = 0;
 800b0c0:	2300      	movs	r3, #0
 800b0c2:	637b      	str	r3, [r7, #52]	; 0x34
 800b0c4:	e005      	b.n	800b0d2 <VL53L0X_get_pal_range_status+0x21a>
		} else {
			SignalRatePerSpad = (FixPoint1616_t)((256 * SignalRate)
 800b0c6:	687b      	ldr	r3, [r7, #4]
 800b0c8:	021a      	lsls	r2, r3, #8
 800b0ca:	893b      	ldrh	r3, [r7, #8]
 800b0cc:	fbb2 f3f3 	udiv	r3, r2, r3
 800b0d0:	637b      	str	r3, [r7, #52]	; 0x34
				/ EffectiveSpadRtnCount);
		}

		Status = VL53L0X_GetLimitCheckValue(Dev,
 800b0d2:	f107 0318 	add.w	r3, r7, #24
 800b0d6:	461a      	mov	r2, r3
 800b0d8:	2103      	movs	r1, #3
 800b0da:	68f8      	ldr	r0, [r7, #12]
 800b0dc:	f7fc f98c 	bl	80073f8 <VL53L0X_GetLimitCheckValue>
 800b0e0:	4603      	mov	r3, r0
 800b0e2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				&RangeIgnoreThresholdValue);

		if ((RangeIgnoreThresholdValue > 0) &&
 800b0e6:	69bb      	ldr	r3, [r7, #24]
 800b0e8:	2b00      	cmp	r3, #0
 800b0ea:	d006      	beq.n	800b0fa <VL53L0X_get_pal_range_status+0x242>
			(SignalRatePerSpad < RangeIgnoreThresholdValue)) {
 800b0ec:	69bb      	ldr	r3, [r7, #24]
		if ((RangeIgnoreThresholdValue > 0) &&
 800b0ee:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b0f0:	429a      	cmp	r2, r3
 800b0f2:	d202      	bcs.n	800b0fa <VL53L0X_get_pal_range_status+0x242>
			/* Limit Fail add 2^6 to range status */
			RangeIgnoreThresholdflag = 1;
 800b0f4:	2301      	movs	r3, #1
 800b0f6:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800b0fa:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800b0fe:	2b00      	cmp	r3, #0
 800b100:	d14a      	bne.n	800b198 <VL53L0X_get_pal_range_status+0x2e0>
		if (NoneFlag == 1) {
 800b102:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800b106:	2b01      	cmp	r3, #1
 800b108:	d103      	bne.n	800b112 <VL53L0X_get_pal_range_status+0x25a>
			*pPalRangeStatus = 255;	 /* NONE */
 800b10a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b10c:	22ff      	movs	r2, #255	; 0xff
 800b10e:	701a      	strb	r2, [r3, #0]
 800b110:	e042      	b.n	800b198 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 1 ||
 800b112:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800b116:	2b01      	cmp	r3, #1
 800b118:	d007      	beq.n	800b12a <VL53L0X_get_pal_range_status+0x272>
 800b11a:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800b11e:	2b02      	cmp	r3, #2
 800b120:	d003      	beq.n	800b12a <VL53L0X_get_pal_range_status+0x272>
					DeviceRangeStatusInternal == 2 ||
 800b122:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800b126:	2b03      	cmp	r3, #3
 800b128:	d103      	bne.n	800b132 <VL53L0X_get_pal_range_status+0x27a>
					DeviceRangeStatusInternal == 3) {
			*pPalRangeStatus = 5; /* HW fail */
 800b12a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b12c:	2205      	movs	r2, #5
 800b12e:	701a      	strb	r2, [r3, #0]
 800b130:	e032      	b.n	800b198 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 6 ||
 800b132:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800b136:	2b06      	cmp	r3, #6
 800b138:	d003      	beq.n	800b142 <VL53L0X_get_pal_range_status+0x28a>
 800b13a:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800b13e:	2b09      	cmp	r3, #9
 800b140:	d103      	bne.n	800b14a <VL53L0X_get_pal_range_status+0x292>
					DeviceRangeStatusInternal == 9) {
			*pPalRangeStatus = 4;  /* Phase fail */
 800b142:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b144:	2204      	movs	r2, #4
 800b146:	701a      	strb	r2, [r3, #0]
 800b148:	e026      	b.n	800b198 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 8 ||
 800b14a:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800b14e:	2b08      	cmp	r3, #8
 800b150:	d007      	beq.n	800b162 <VL53L0X_get_pal_range_status+0x2aa>
 800b152:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800b156:	2b0a      	cmp	r3, #10
 800b158:	d003      	beq.n	800b162 <VL53L0X_get_pal_range_status+0x2aa>
					DeviceRangeStatusInternal == 10 ||
 800b15a:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800b15e:	2b01      	cmp	r3, #1
 800b160:	d103      	bne.n	800b16a <VL53L0X_get_pal_range_status+0x2b2>
					SignalRefClipflag == 1) {
			*pPalRangeStatus = 3;  /* Min range */
 800b162:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b164:	2203      	movs	r2, #3
 800b166:	701a      	strb	r2, [r3, #0]
 800b168:	e016      	b.n	800b198 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 4 ||
 800b16a:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800b16e:	2b04      	cmp	r3, #4
 800b170:	d003      	beq.n	800b17a <VL53L0X_get_pal_range_status+0x2c2>
 800b172:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800b176:	2b01      	cmp	r3, #1
 800b178:	d103      	bne.n	800b182 <VL53L0X_get_pal_range_status+0x2ca>
					RangeIgnoreThresholdflag == 1) {
			*pPalRangeStatus = 2;  /* Signal Fail */
 800b17a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b17c:	2202      	movs	r2, #2
 800b17e:	701a      	strb	r2, [r3, #0]
 800b180:	e00a      	b.n	800b198 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (SigmaLimitflag == 1) {
 800b182:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 800b186:	2b01      	cmp	r3, #1
 800b188:	d103      	bne.n	800b192 <VL53L0X_get_pal_range_status+0x2da>
			*pPalRangeStatus = 1;  /* Sigma	 Fail */
 800b18a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b18c:	2201      	movs	r2, #1
 800b18e:	701a      	strb	r2, [r3, #0]
 800b190:	e002      	b.n	800b198 <VL53L0X_get_pal_range_status+0x2e0>
		} else {
			*pPalRangeStatus = 0; /* Range Valid */
 800b192:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b194:	2200      	movs	r2, #0
 800b196:	701a      	strb	r2, [r3, #0]
		}
	}

	/* DMAX only relevant during range error */
	if (*pPalRangeStatus == 0)
 800b198:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b19a:	781b      	ldrb	r3, [r3, #0]
 800b19c:	2b00      	cmp	r3, #0
 800b19e:	d102      	bne.n	800b1a6 <VL53L0X_get_pal_range_status+0x2ee>
		pRangingMeasurementData->RangeDMaxMilliMeter = 0;
 800b1a0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b1a2:	2200      	movs	r2, #0
 800b1a4:	815a      	strh	r2, [r3, #10]

	/* fill the Limit Check Status */

	Status =  VL53L0X_GetLimitCheckEnable(Dev,
 800b1a6:	f107 032a 	add.w	r3, r7, #42	; 0x2a
 800b1aa:	461a      	mov	r2, r3
 800b1ac:	2101      	movs	r1, #1
 800b1ae:	68f8      	ldr	r0, [r7, #12]
 800b1b0:	f7fc f89c 	bl	80072ec <VL53L0X_GetLimitCheckEnable>
 800b1b4:	4603      	mov	r3, r0
 800b1b6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
			&SignalRateFinalRangeLimitCheckEnable);

	if (Status == VL53L0X_ERROR_NONE) {
 800b1ba:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800b1be:	2b00      	cmp	r3, #0
 800b1c0:	d14f      	bne.n	800b262 <VL53L0X_get_pal_range_status+0x3aa>
		if ((SigmaLimitCheckEnable == 0) || (SigmaLimitflag == 1))
 800b1c2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800b1c6:	2b00      	cmp	r3, #0
 800b1c8:	d003      	beq.n	800b1d2 <VL53L0X_get_pal_range_status+0x31a>
 800b1ca:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 800b1ce:	2b01      	cmp	r3, #1
 800b1d0:	d103      	bne.n	800b1da <VL53L0X_get_pal_range_status+0x322>
			Temp8 = 1;
 800b1d2:	2301      	movs	r3, #1
 800b1d4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b1d8:	e002      	b.n	800b1e0 <VL53L0X_get_pal_range_status+0x328>
		else
			Temp8 = 0;
 800b1da:	2300      	movs	r3, #0
 800b1dc:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 800b1e0:	68fb      	ldr	r3, [r7, #12]
 800b1e2:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 800b1e6:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, Temp8);

		if ((DeviceRangeStatusInternal == 4) ||
 800b1ea:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800b1ee:	2b04      	cmp	r3, #4
 800b1f0:	d003      	beq.n	800b1fa <VL53L0X_get_pal_range_status+0x342>
				(SignalRateFinalRangeLimitCheckEnable == 0))
 800b1f2:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
		if ((DeviceRangeStatusInternal == 4) ||
 800b1f6:	2b00      	cmp	r3, #0
 800b1f8:	d103      	bne.n	800b202 <VL53L0X_get_pal_range_status+0x34a>
			Temp8 = 1;
 800b1fa:	2301      	movs	r3, #1
 800b1fc:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b200:	e002      	b.n	800b208 <VL53L0X_get_pal_range_status+0x350>
		else
			Temp8 = 0;
 800b202:	2300      	movs	r3, #0
 800b204:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 800b208:	68fb      	ldr	r3, [r7, #12]
 800b20a:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 800b20e:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
				VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
				Temp8);

		if ((SignalRefClipLimitCheckEnable == 0) ||
 800b212:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 800b216:	2b00      	cmp	r3, #0
 800b218:	d003      	beq.n	800b222 <VL53L0X_get_pal_range_status+0x36a>
 800b21a:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800b21e:	2b01      	cmp	r3, #1
 800b220:	d103      	bne.n	800b22a <VL53L0X_get_pal_range_status+0x372>
					(SignalRefClipflag == 1))
			Temp8 = 1;
 800b222:	2301      	movs	r3, #1
 800b224:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b228:	e002      	b.n	800b230 <VL53L0X_get_pal_range_status+0x378>
		else
			Temp8 = 0;
 800b22a:	2300      	movs	r3, #0
 800b22c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 800b230:	68fb      	ldr	r3, [r7, #12]
 800b232:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 800b236:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, Temp8);

		if ((RangeIgnoreThresholdLimitCheckEnable == 0) ||
 800b23a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800b23e:	2b00      	cmp	r3, #0
 800b240:	d003      	beq.n	800b24a <VL53L0X_get_pal_range_status+0x392>
 800b242:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800b246:	2b01      	cmp	r3, #1
 800b248:	d103      	bne.n	800b252 <VL53L0X_get_pal_range_status+0x39a>
				(RangeIgnoreThresholdflag == 1))
			Temp8 = 1;
 800b24a:	2301      	movs	r3, #1
 800b24c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b250:	e002      	b.n	800b258 <VL53L0X_get_pal_range_status+0x3a0>
		else
			Temp8 = 0;
 800b252:	2300      	movs	r3, #0
 800b254:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 800b258:	68fb      	ldr	r3, [r7, #12]
 800b25a:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 800b25e:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				Temp8);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800b262:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f

}
 800b266:	4618      	mov	r0, r3
 800b268:	3740      	adds	r7, #64	; 0x40
 800b26a:	46bd      	mov	sp, r7
 800b26c:	bd80      	pop	{r7, pc}

0800b26e <_I2CWrite>:
#endif


uint8_t _I2CBuffer[64];

int _I2CWrite(VL53L0X_DEV Dev, uint8_t *pdata, uint32_t count) {
 800b26e:	b580      	push	{r7, lr}
 800b270:	b088      	sub	sp, #32
 800b272:	af02      	add	r7, sp, #8
 800b274:	60f8      	str	r0, [r7, #12]
 800b276:	60b9      	str	r1, [r7, #8]
 800b278:	607a      	str	r2, [r7, #4]
    int status;
    int i2c_time_out = I2C_TIME_OUT_BASE+ count* I2C_TIME_OUT_BYTE;
 800b27a:	687b      	ldr	r3, [r7, #4]
 800b27c:	330a      	adds	r3, #10
 800b27e:	617b      	str	r3, [r7, #20]

    status = HAL_I2C_Master_Transmit(Dev->I2cHandle, Dev->I2cDevAddr, pdata, count, i2c_time_out);
 800b280:	68fb      	ldr	r3, [r7, #12]
 800b282:	f8d3 015c 	ldr.w	r0, [r3, #348]	; 0x15c
 800b286:	68fb      	ldr	r3, [r7, #12]
 800b288:	f893 3160 	ldrb.w	r3, [r3, #352]	; 0x160
 800b28c:	b299      	uxth	r1, r3
 800b28e:	687b      	ldr	r3, [r7, #4]
 800b290:	b29a      	uxth	r2, r3
 800b292:	697b      	ldr	r3, [r7, #20]
 800b294:	9300      	str	r3, [sp, #0]
 800b296:	4613      	mov	r3, r2
 800b298:	68ba      	ldr	r2, [r7, #8]
 800b29a:	f7f7 fba9 	bl	80029f0 <HAL_I2C_Master_Transmit>
 800b29e:	4603      	mov	r3, r0
 800b2a0:	613b      	str	r3, [r7, #16]
    if (status) {
        //VL6180x_ErrLog("I2C error 0x%x %d len", dev->I2cAddr, len);
        //XNUCLEO6180XA1_I2C1_Init(&hi2c1);
    }
    return status;
 800b2a2:	693b      	ldr	r3, [r7, #16]
}
 800b2a4:	4618      	mov	r0, r3
 800b2a6:	3718      	adds	r7, #24
 800b2a8:	46bd      	mov	sp, r7
 800b2aa:	bd80      	pop	{r7, pc}

0800b2ac <_I2CRead>:

int _I2CRead(VL53L0X_DEV Dev, uint8_t *pdata, uint32_t count) {
 800b2ac:	b580      	push	{r7, lr}
 800b2ae:	b088      	sub	sp, #32
 800b2b0:	af02      	add	r7, sp, #8
 800b2b2:	60f8      	str	r0, [r7, #12]
 800b2b4:	60b9      	str	r1, [r7, #8]
 800b2b6:	607a      	str	r2, [r7, #4]
    int status;
    int i2c_time_out = I2C_TIME_OUT_BASE+ count* I2C_TIME_OUT_BYTE;
 800b2b8:	687b      	ldr	r3, [r7, #4]
 800b2ba:	330a      	adds	r3, #10
 800b2bc:	617b      	str	r3, [r7, #20]

    status = HAL_I2C_Master_Receive(Dev->I2cHandle, Dev->I2cDevAddr|1, pdata, count, i2c_time_out);
 800b2be:	68fb      	ldr	r3, [r7, #12]
 800b2c0:	f8d3 015c 	ldr.w	r0, [r3, #348]	; 0x15c
 800b2c4:	68fb      	ldr	r3, [r7, #12]
 800b2c6:	f893 3160 	ldrb.w	r3, [r3, #352]	; 0x160
 800b2ca:	f043 0301 	orr.w	r3, r3, #1
 800b2ce:	b2db      	uxtb	r3, r3
 800b2d0:	b299      	uxth	r1, r3
 800b2d2:	687b      	ldr	r3, [r7, #4]
 800b2d4:	b29a      	uxth	r2, r3
 800b2d6:	697b      	ldr	r3, [r7, #20]
 800b2d8:	9300      	str	r3, [sp, #0]
 800b2da:	4613      	mov	r3, r2
 800b2dc:	68ba      	ldr	r2, [r7, #8]
 800b2de:	f7f7 fc7b 	bl	8002bd8 <HAL_I2C_Master_Receive>
 800b2e2:	4603      	mov	r3, r0
 800b2e4:	613b      	str	r3, [r7, #16]
    if (status) {
        //VL6180x_ErrLog("I2C error 0x%x %d len", dev->I2cAddr, len);
        //XNUCLEO6180XA1_I2C1_Init(&hi2c1);
    }
    return status;
 800b2e6:	693b      	ldr	r3, [r7, #16]
}
 800b2e8:	4618      	mov	r0, r3
 800b2ea:	3718      	adds	r7, #24
 800b2ec:	46bd      	mov	sp, r7
 800b2ee:	bd80      	pop	{r7, pc}

0800b2f0 <VL53L0X_WriteMulti>:

// the ranging_sensor_comms.dll will take care of the page selection
VL53L0X_Error VL53L0X_WriteMulti(VL53L0X_DEV Dev, uint8_t index, uint8_t *pdata, uint32_t count) {
 800b2f0:	b580      	push	{r7, lr}
 800b2f2:	b086      	sub	sp, #24
 800b2f4:	af00      	add	r7, sp, #0
 800b2f6:	60f8      	str	r0, [r7, #12]
 800b2f8:	607a      	str	r2, [r7, #4]
 800b2fa:	603b      	str	r3, [r7, #0]
 800b2fc:	460b      	mov	r3, r1
 800b2fe:	72fb      	strb	r3, [r7, #11]
    int status_int;
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b300:	2300      	movs	r3, #0
 800b302:	75fb      	strb	r3, [r7, #23]
    if (count > sizeof(_I2CBuffer) - 1) {
 800b304:	683b      	ldr	r3, [r7, #0]
 800b306:	2b3f      	cmp	r3, #63	; 0x3f
 800b308:	d902      	bls.n	800b310 <VL53L0X_WriteMulti+0x20>
        return VL53L0X_ERROR_INVALID_PARAMS;
 800b30a:	f06f 0303 	mvn.w	r3, #3
 800b30e:	e016      	b.n	800b33e <VL53L0X_WriteMulti+0x4e>
    }
    _I2CBuffer[0] = index;
 800b310:	4a0d      	ldr	r2, [pc, #52]	; (800b348 <VL53L0X_WriteMulti+0x58>)
 800b312:	7afb      	ldrb	r3, [r7, #11]
 800b314:	7013      	strb	r3, [r2, #0]
    memcpy(&_I2CBuffer[1], pdata, count);
 800b316:	683a      	ldr	r2, [r7, #0]
 800b318:	6879      	ldr	r1, [r7, #4]
 800b31a:	480c      	ldr	r0, [pc, #48]	; (800b34c <VL53L0X_WriteMulti+0x5c>)
 800b31c:	f000 f99e 	bl	800b65c <memcpy>
    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, count + 1);
 800b320:	683b      	ldr	r3, [r7, #0]
 800b322:	3301      	adds	r3, #1
 800b324:	461a      	mov	r2, r3
 800b326:	4908      	ldr	r1, [pc, #32]	; (800b348 <VL53L0X_WriteMulti+0x58>)
 800b328:	68f8      	ldr	r0, [r7, #12]
 800b32a:	f7ff ffa0 	bl	800b26e <_I2CWrite>
 800b32e:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800b330:	693b      	ldr	r3, [r7, #16]
 800b332:	2b00      	cmp	r3, #0
 800b334:	d001      	beq.n	800b33a <VL53L0X_WriteMulti+0x4a>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800b336:	23ec      	movs	r3, #236	; 0xec
 800b338:	75fb      	strb	r3, [r7, #23]
    }
    VL53L0X_PutI2cBus();
    return Status;
 800b33a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b33e:	4618      	mov	r0, r3
 800b340:	3718      	adds	r7, #24
 800b342:	46bd      	mov	sp, r7
 800b344:	bd80      	pop	{r7, pc}
 800b346:	bf00      	nop
 800b348:	20000658 	.word	0x20000658
 800b34c:	20000659 	.word	0x20000659

0800b350 <VL53L0X_ReadMulti>:

// the ranging_sensor_comms.dll will take care of the page selection
VL53L0X_Error VL53L0X_ReadMulti(VL53L0X_DEV Dev, uint8_t index, uint8_t *pdata, uint32_t count) {
 800b350:	b580      	push	{r7, lr}
 800b352:	b086      	sub	sp, #24
 800b354:	af00      	add	r7, sp, #0
 800b356:	60f8      	str	r0, [r7, #12]
 800b358:	607a      	str	r2, [r7, #4]
 800b35a:	603b      	str	r3, [r7, #0]
 800b35c:	460b      	mov	r3, r1
 800b35e:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b360:	2300      	movs	r3, #0
 800b362:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;
    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 800b364:	f107 030b 	add.w	r3, r7, #11
 800b368:	2201      	movs	r2, #1
 800b36a:	4619      	mov	r1, r3
 800b36c:	68f8      	ldr	r0, [r7, #12]
 800b36e:	f7ff ff7e 	bl	800b26e <_I2CWrite>
 800b372:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800b374:	693b      	ldr	r3, [r7, #16]
 800b376:	2b00      	cmp	r3, #0
 800b378:	d002      	beq.n	800b380 <VL53L0X_ReadMulti+0x30>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800b37a:	23ec      	movs	r3, #236	; 0xec
 800b37c:	75fb      	strb	r3, [r7, #23]
        goto done;
 800b37e:	e00c      	b.n	800b39a <VL53L0X_ReadMulti+0x4a>
    }
    status_int = _I2CRead(Dev, pdata, count);
 800b380:	683a      	ldr	r2, [r7, #0]
 800b382:	6879      	ldr	r1, [r7, #4]
 800b384:	68f8      	ldr	r0, [r7, #12]
 800b386:	f7ff ff91 	bl	800b2ac <_I2CRead>
 800b38a:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800b38c:	693b      	ldr	r3, [r7, #16]
 800b38e:	2b00      	cmp	r3, #0
 800b390:	d002      	beq.n	800b398 <VL53L0X_ReadMulti+0x48>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800b392:	23ec      	movs	r3, #236	; 0xec
 800b394:	75fb      	strb	r3, [r7, #23]
 800b396:	e000      	b.n	800b39a <VL53L0X_ReadMulti+0x4a>
    }
done:
 800b398:	bf00      	nop
    VL53L0X_PutI2cBus();
    return Status;
 800b39a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b39e:	4618      	mov	r0, r3
 800b3a0:	3718      	adds	r7, #24
 800b3a2:	46bd      	mov	sp, r7
 800b3a4:	bd80      	pop	{r7, pc}
	...

0800b3a8 <VL53L0X_WrByte>:

VL53L0X_Error VL53L0X_WrByte(VL53L0X_DEV Dev, uint8_t index, uint8_t data) {
 800b3a8:	b580      	push	{r7, lr}
 800b3aa:	b084      	sub	sp, #16
 800b3ac:	af00      	add	r7, sp, #0
 800b3ae:	6078      	str	r0, [r7, #4]
 800b3b0:	460b      	mov	r3, r1
 800b3b2:	70fb      	strb	r3, [r7, #3]
 800b3b4:	4613      	mov	r3, r2
 800b3b6:	70bb      	strb	r3, [r7, #2]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b3b8:	2300      	movs	r3, #0
 800b3ba:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;

    _I2CBuffer[0] = index;
 800b3bc:	4a0b      	ldr	r2, [pc, #44]	; (800b3ec <VL53L0X_WrByte+0x44>)
 800b3be:	78fb      	ldrb	r3, [r7, #3]
 800b3c0:	7013      	strb	r3, [r2, #0]
    _I2CBuffer[1] = data;
 800b3c2:	4a0a      	ldr	r2, [pc, #40]	; (800b3ec <VL53L0X_WrByte+0x44>)
 800b3c4:	78bb      	ldrb	r3, [r7, #2]
 800b3c6:	7053      	strb	r3, [r2, #1]

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 2);
 800b3c8:	2202      	movs	r2, #2
 800b3ca:	4908      	ldr	r1, [pc, #32]	; (800b3ec <VL53L0X_WrByte+0x44>)
 800b3cc:	6878      	ldr	r0, [r7, #4]
 800b3ce:	f7ff ff4e 	bl	800b26e <_I2CWrite>
 800b3d2:	60b8      	str	r0, [r7, #8]
    if (status_int != 0) {
 800b3d4:	68bb      	ldr	r3, [r7, #8]
 800b3d6:	2b00      	cmp	r3, #0
 800b3d8:	d001      	beq.n	800b3de <VL53L0X_WrByte+0x36>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800b3da:	23ec      	movs	r3, #236	; 0xec
 800b3dc:	73fb      	strb	r3, [r7, #15]
    }
    VL53L0X_PutI2cBus();
    return Status;
 800b3de:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b3e2:	4618      	mov	r0, r3
 800b3e4:	3710      	adds	r7, #16
 800b3e6:	46bd      	mov	sp, r7
 800b3e8:	bd80      	pop	{r7, pc}
 800b3ea:	bf00      	nop
 800b3ec:	20000658 	.word	0x20000658

0800b3f0 <VL53L0X_WrWord>:

VL53L0X_Error VL53L0X_WrWord(VL53L0X_DEV Dev, uint8_t index, uint16_t data) {
 800b3f0:	b580      	push	{r7, lr}
 800b3f2:	b084      	sub	sp, #16
 800b3f4:	af00      	add	r7, sp, #0
 800b3f6:	6078      	str	r0, [r7, #4]
 800b3f8:	460b      	mov	r3, r1
 800b3fa:	70fb      	strb	r3, [r7, #3]
 800b3fc:	4613      	mov	r3, r2
 800b3fe:	803b      	strh	r3, [r7, #0]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b400:	2300      	movs	r3, #0
 800b402:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;

    _I2CBuffer[0] = index;
 800b404:	4a0e      	ldr	r2, [pc, #56]	; (800b440 <VL53L0X_WrWord+0x50>)
 800b406:	78fb      	ldrb	r3, [r7, #3]
 800b408:	7013      	strb	r3, [r2, #0]
    _I2CBuffer[1] = data >> 8;
 800b40a:	883b      	ldrh	r3, [r7, #0]
 800b40c:	0a1b      	lsrs	r3, r3, #8
 800b40e:	b29b      	uxth	r3, r3
 800b410:	b2da      	uxtb	r2, r3
 800b412:	4b0b      	ldr	r3, [pc, #44]	; (800b440 <VL53L0X_WrWord+0x50>)
 800b414:	705a      	strb	r2, [r3, #1]
    _I2CBuffer[2] = data & 0x00FF;
 800b416:	883b      	ldrh	r3, [r7, #0]
 800b418:	b2da      	uxtb	r2, r3
 800b41a:	4b09      	ldr	r3, [pc, #36]	; (800b440 <VL53L0X_WrWord+0x50>)
 800b41c:	709a      	strb	r2, [r3, #2]

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 3);
 800b41e:	2203      	movs	r2, #3
 800b420:	4907      	ldr	r1, [pc, #28]	; (800b440 <VL53L0X_WrWord+0x50>)
 800b422:	6878      	ldr	r0, [r7, #4]
 800b424:	f7ff ff23 	bl	800b26e <_I2CWrite>
 800b428:	60b8      	str	r0, [r7, #8]
    if (status_int != 0) {
 800b42a:	68bb      	ldr	r3, [r7, #8]
 800b42c:	2b00      	cmp	r3, #0
 800b42e:	d001      	beq.n	800b434 <VL53L0X_WrWord+0x44>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800b430:	23ec      	movs	r3, #236	; 0xec
 800b432:	73fb      	strb	r3, [r7, #15]
    }
    VL53L0X_PutI2cBus();
    return Status;
 800b434:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b438:	4618      	mov	r0, r3
 800b43a:	3710      	adds	r7, #16
 800b43c:	46bd      	mov	sp, r7
 800b43e:	bd80      	pop	{r7, pc}
 800b440:	20000658 	.word	0x20000658

0800b444 <VL53L0X_UpdateByte>:
    }
    VL53L0X_PutI2cBus();
    return Status;
}

VL53L0X_Error VL53L0X_UpdateByte(VL53L0X_DEV Dev, uint8_t index, uint8_t AndData, uint8_t OrData) {
 800b444:	b580      	push	{r7, lr}
 800b446:	b084      	sub	sp, #16
 800b448:	af00      	add	r7, sp, #0
 800b44a:	6078      	str	r0, [r7, #4]
 800b44c:	4608      	mov	r0, r1
 800b44e:	4611      	mov	r1, r2
 800b450:	461a      	mov	r2, r3
 800b452:	4603      	mov	r3, r0
 800b454:	70fb      	strb	r3, [r7, #3]
 800b456:	460b      	mov	r3, r1
 800b458:	70bb      	strb	r3, [r7, #2]
 800b45a:	4613      	mov	r3, r2
 800b45c:	707b      	strb	r3, [r7, #1]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b45e:	2300      	movs	r3, #0
 800b460:	73fb      	strb	r3, [r7, #15]
    uint8_t data;

    Status = VL53L0X_RdByte(Dev, index, &data);
 800b462:	f107 020e 	add.w	r2, r7, #14
 800b466:	78fb      	ldrb	r3, [r7, #3]
 800b468:	4619      	mov	r1, r3
 800b46a:	6878      	ldr	r0, [r7, #4]
 800b46c:	f000 f81e 	bl	800b4ac <VL53L0X_RdByte>
 800b470:	4603      	mov	r3, r0
 800b472:	73fb      	strb	r3, [r7, #15]
    if (Status) {
 800b474:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b478:	2b00      	cmp	r3, #0
 800b47a:	d110      	bne.n	800b49e <VL53L0X_UpdateByte+0x5a>
        goto done;
    }
    data = (data & AndData) | OrData;
 800b47c:	7bba      	ldrb	r2, [r7, #14]
 800b47e:	78bb      	ldrb	r3, [r7, #2]
 800b480:	4013      	ands	r3, r2
 800b482:	b2da      	uxtb	r2, r3
 800b484:	787b      	ldrb	r3, [r7, #1]
 800b486:	4313      	orrs	r3, r2
 800b488:	b2db      	uxtb	r3, r3
 800b48a:	73bb      	strb	r3, [r7, #14]
    Status = VL53L0X_WrByte(Dev, index, data);
 800b48c:	7bba      	ldrb	r2, [r7, #14]
 800b48e:	78fb      	ldrb	r3, [r7, #3]
 800b490:	4619      	mov	r1, r3
 800b492:	6878      	ldr	r0, [r7, #4]
 800b494:	f7ff ff88 	bl	800b3a8 <VL53L0X_WrByte>
 800b498:	4603      	mov	r3, r0
 800b49a:	73fb      	strb	r3, [r7, #15]
 800b49c:	e000      	b.n	800b4a0 <VL53L0X_UpdateByte+0x5c>
        goto done;
 800b49e:	bf00      	nop
done:
    return Status;
 800b4a0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b4a4:	4618      	mov	r0, r3
 800b4a6:	3710      	adds	r7, #16
 800b4a8:	46bd      	mov	sp, r7
 800b4aa:	bd80      	pop	{r7, pc}

0800b4ac <VL53L0X_RdByte>:

VL53L0X_Error VL53L0X_RdByte(VL53L0X_DEV Dev, uint8_t index, uint8_t *data) {
 800b4ac:	b580      	push	{r7, lr}
 800b4ae:	b086      	sub	sp, #24
 800b4b0:	af00      	add	r7, sp, #0
 800b4b2:	60f8      	str	r0, [r7, #12]
 800b4b4:	460b      	mov	r3, r1
 800b4b6:	607a      	str	r2, [r7, #4]
 800b4b8:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b4ba:	2300      	movs	r3, #0
 800b4bc:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 800b4be:	f107 030b 	add.w	r3, r7, #11
 800b4c2:	2201      	movs	r2, #1
 800b4c4:	4619      	mov	r1, r3
 800b4c6:	68f8      	ldr	r0, [r7, #12]
 800b4c8:	f7ff fed1 	bl	800b26e <_I2CWrite>
 800b4cc:	6138      	str	r0, [r7, #16]
    if( status_int ){
 800b4ce:	693b      	ldr	r3, [r7, #16]
 800b4d0:	2b00      	cmp	r3, #0
 800b4d2:	d002      	beq.n	800b4da <VL53L0X_RdByte+0x2e>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800b4d4:	23ec      	movs	r3, #236	; 0xec
 800b4d6:	75fb      	strb	r3, [r7, #23]
        goto done;
 800b4d8:	e00c      	b.n	800b4f4 <VL53L0X_RdByte+0x48>
    }
    status_int = _I2CRead(Dev, data, 1);
 800b4da:	2201      	movs	r2, #1
 800b4dc:	6879      	ldr	r1, [r7, #4]
 800b4de:	68f8      	ldr	r0, [r7, #12]
 800b4e0:	f7ff fee4 	bl	800b2ac <_I2CRead>
 800b4e4:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800b4e6:	693b      	ldr	r3, [r7, #16]
 800b4e8:	2b00      	cmp	r3, #0
 800b4ea:	d002      	beq.n	800b4f2 <VL53L0X_RdByte+0x46>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800b4ec:	23ec      	movs	r3, #236	; 0xec
 800b4ee:	75fb      	strb	r3, [r7, #23]
 800b4f0:	e000      	b.n	800b4f4 <VL53L0X_RdByte+0x48>
    }
done:
 800b4f2:	bf00      	nop
    VL53L0X_PutI2cBus();
    return Status;
 800b4f4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b4f8:	4618      	mov	r0, r3
 800b4fa:	3718      	adds	r7, #24
 800b4fc:	46bd      	mov	sp, r7
 800b4fe:	bd80      	pop	{r7, pc}

0800b500 <VL53L0X_RdWord>:

VL53L0X_Error VL53L0X_RdWord(VL53L0X_DEV Dev, uint8_t index, uint16_t *data) {
 800b500:	b580      	push	{r7, lr}
 800b502:	b086      	sub	sp, #24
 800b504:	af00      	add	r7, sp, #0
 800b506:	60f8      	str	r0, [r7, #12]
 800b508:	460b      	mov	r3, r1
 800b50a:	607a      	str	r2, [r7, #4]
 800b50c:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b50e:	2300      	movs	r3, #0
 800b510:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 800b512:	f107 030b 	add.w	r3, r7, #11
 800b516:	2201      	movs	r2, #1
 800b518:	4619      	mov	r1, r3
 800b51a:	68f8      	ldr	r0, [r7, #12]
 800b51c:	f7ff fea7 	bl	800b26e <_I2CWrite>
 800b520:	6138      	str	r0, [r7, #16]

    if( status_int ){
 800b522:	693b      	ldr	r3, [r7, #16]
 800b524:	2b00      	cmp	r3, #0
 800b526:	d002      	beq.n	800b52e <VL53L0X_RdWord+0x2e>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800b528:	23ec      	movs	r3, #236	; 0xec
 800b52a:	75fb      	strb	r3, [r7, #23]
        goto done;
 800b52c:	e017      	b.n	800b55e <VL53L0X_RdWord+0x5e>
    }
    status_int = _I2CRead(Dev, _I2CBuffer, 2);
 800b52e:	2202      	movs	r2, #2
 800b530:	490e      	ldr	r1, [pc, #56]	; (800b56c <VL53L0X_RdWord+0x6c>)
 800b532:	68f8      	ldr	r0, [r7, #12]
 800b534:	f7ff feba 	bl	800b2ac <_I2CRead>
 800b538:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800b53a:	693b      	ldr	r3, [r7, #16]
 800b53c:	2b00      	cmp	r3, #0
 800b53e:	d002      	beq.n	800b546 <VL53L0X_RdWord+0x46>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800b540:	23ec      	movs	r3, #236	; 0xec
 800b542:	75fb      	strb	r3, [r7, #23]
        goto done;
 800b544:	e00b      	b.n	800b55e <VL53L0X_RdWord+0x5e>
    }

    *data = ((uint16_t)_I2CBuffer[0]<<8) + (uint16_t)_I2CBuffer[1];
 800b546:	4b09      	ldr	r3, [pc, #36]	; (800b56c <VL53L0X_RdWord+0x6c>)
 800b548:	781b      	ldrb	r3, [r3, #0]
 800b54a:	b29b      	uxth	r3, r3
 800b54c:	021b      	lsls	r3, r3, #8
 800b54e:	b29a      	uxth	r2, r3
 800b550:	4b06      	ldr	r3, [pc, #24]	; (800b56c <VL53L0X_RdWord+0x6c>)
 800b552:	785b      	ldrb	r3, [r3, #1]
 800b554:	b29b      	uxth	r3, r3
 800b556:	4413      	add	r3, r2
 800b558:	b29a      	uxth	r2, r3
 800b55a:	687b      	ldr	r3, [r7, #4]
 800b55c:	801a      	strh	r2, [r3, #0]
done:
    VL53L0X_PutI2cBus();
    return Status;
 800b55e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b562:	4618      	mov	r0, r3
 800b564:	3718      	adds	r7, #24
 800b566:	46bd      	mov	sp, r7
 800b568:	bd80      	pop	{r7, pc}
 800b56a:	bf00      	nop
 800b56c:	20000658 	.word	0x20000658

0800b570 <VL53L0X_RdDWord>:

VL53L0X_Error VL53L0X_RdDWord(VL53L0X_DEV Dev, uint8_t index, uint32_t *data) {
 800b570:	b580      	push	{r7, lr}
 800b572:	b086      	sub	sp, #24
 800b574:	af00      	add	r7, sp, #0
 800b576:	60f8      	str	r0, [r7, #12]
 800b578:	460b      	mov	r3, r1
 800b57a:	607a      	str	r2, [r7, #4]
 800b57c:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b57e:	2300      	movs	r3, #0
 800b580:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 800b582:	f107 030b 	add.w	r3, r7, #11
 800b586:	2201      	movs	r2, #1
 800b588:	4619      	mov	r1, r3
 800b58a:	68f8      	ldr	r0, [r7, #12]
 800b58c:	f7ff fe6f 	bl	800b26e <_I2CWrite>
 800b590:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800b592:	693b      	ldr	r3, [r7, #16]
 800b594:	2b00      	cmp	r3, #0
 800b596:	d002      	beq.n	800b59e <VL53L0X_RdDWord+0x2e>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800b598:	23ec      	movs	r3, #236	; 0xec
 800b59a:	75fb      	strb	r3, [r7, #23]
        goto done;
 800b59c:	e01b      	b.n	800b5d6 <VL53L0X_RdDWord+0x66>
    }
    status_int = _I2CRead(Dev, _I2CBuffer, 4);
 800b59e:	2204      	movs	r2, #4
 800b5a0:	4910      	ldr	r1, [pc, #64]	; (800b5e4 <VL53L0X_RdDWord+0x74>)
 800b5a2:	68f8      	ldr	r0, [r7, #12]
 800b5a4:	f7ff fe82 	bl	800b2ac <_I2CRead>
 800b5a8:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800b5aa:	693b      	ldr	r3, [r7, #16]
 800b5ac:	2b00      	cmp	r3, #0
 800b5ae:	d002      	beq.n	800b5b6 <VL53L0X_RdDWord+0x46>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800b5b0:	23ec      	movs	r3, #236	; 0xec
 800b5b2:	75fb      	strb	r3, [r7, #23]
        goto done;
 800b5b4:	e00f      	b.n	800b5d6 <VL53L0X_RdDWord+0x66>
    }

    *data = ((uint32_t)_I2CBuffer[0]<<24) + ((uint32_t)_I2CBuffer[1]<<16) + ((uint32_t)_I2CBuffer[2]<<8) + (uint32_t)_I2CBuffer[3];
 800b5b6:	4b0b      	ldr	r3, [pc, #44]	; (800b5e4 <VL53L0X_RdDWord+0x74>)
 800b5b8:	781b      	ldrb	r3, [r3, #0]
 800b5ba:	061a      	lsls	r2, r3, #24
 800b5bc:	4b09      	ldr	r3, [pc, #36]	; (800b5e4 <VL53L0X_RdDWord+0x74>)
 800b5be:	785b      	ldrb	r3, [r3, #1]
 800b5c0:	041b      	lsls	r3, r3, #16
 800b5c2:	441a      	add	r2, r3
 800b5c4:	4b07      	ldr	r3, [pc, #28]	; (800b5e4 <VL53L0X_RdDWord+0x74>)
 800b5c6:	789b      	ldrb	r3, [r3, #2]
 800b5c8:	021b      	lsls	r3, r3, #8
 800b5ca:	4413      	add	r3, r2
 800b5cc:	4a05      	ldr	r2, [pc, #20]	; (800b5e4 <VL53L0X_RdDWord+0x74>)
 800b5ce:	78d2      	ldrb	r2, [r2, #3]
 800b5d0:	441a      	add	r2, r3
 800b5d2:	687b      	ldr	r3, [r7, #4]
 800b5d4:	601a      	str	r2, [r3, #0]

done:
    VL53L0X_PutI2cBus();
    return Status;
 800b5d6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b5da:	4618      	mov	r0, r3
 800b5dc:	3718      	adds	r7, #24
 800b5de:	46bd      	mov	sp, r7
 800b5e0:	bd80      	pop	{r7, pc}
 800b5e2:	bf00      	nop
 800b5e4:	20000658 	.word	0x20000658

0800b5e8 <VL53L0X_PollingDelay>:

VL53L0X_Error VL53L0X_PollingDelay(VL53L0X_DEV Dev) {
 800b5e8:	b580      	push	{r7, lr}
 800b5ea:	b084      	sub	sp, #16
 800b5ec:	af00      	add	r7, sp, #0
 800b5ee:	6078      	str	r0, [r7, #4]
    VL53L0X_Error status = VL53L0X_ERROR_NONE;
 800b5f0:	2300      	movs	r3, #0
 800b5f2:	73fb      	strb	r3, [r7, #15]

    // do nothing
    VL53L0X_OsDelay();
 800b5f4:	2002      	movs	r0, #2
 800b5f6:	f7f6 fb47 	bl	8001c88 <HAL_Delay>
    return status;
 800b5fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b5fe:	4618      	mov	r0, r3
 800b600:	3710      	adds	r7, #16
 800b602:	46bd      	mov	sp, r7
 800b604:	bd80      	pop	{r7, pc}
	...

0800b608 <__errno>:
 800b608:	4b01      	ldr	r3, [pc, #4]	; (800b610 <__errno+0x8>)
 800b60a:	6818      	ldr	r0, [r3, #0]
 800b60c:	4770      	bx	lr
 800b60e:	bf00      	nop
 800b610:	200002c8 	.word	0x200002c8

0800b614 <__libc_init_array>:
 800b614:	b570      	push	{r4, r5, r6, lr}
 800b616:	4d0d      	ldr	r5, [pc, #52]	; (800b64c <__libc_init_array+0x38>)
 800b618:	4c0d      	ldr	r4, [pc, #52]	; (800b650 <__libc_init_array+0x3c>)
 800b61a:	1b64      	subs	r4, r4, r5
 800b61c:	10a4      	asrs	r4, r4, #2
 800b61e:	2600      	movs	r6, #0
 800b620:	42a6      	cmp	r6, r4
 800b622:	d109      	bne.n	800b638 <__libc_init_array+0x24>
 800b624:	4d0b      	ldr	r5, [pc, #44]	; (800b654 <__libc_init_array+0x40>)
 800b626:	4c0c      	ldr	r4, [pc, #48]	; (800b658 <__libc_init_array+0x44>)
 800b628:	f002 ff0c 	bl	800e444 <_init>
 800b62c:	1b64      	subs	r4, r4, r5
 800b62e:	10a4      	asrs	r4, r4, #2
 800b630:	2600      	movs	r6, #0
 800b632:	42a6      	cmp	r6, r4
 800b634:	d105      	bne.n	800b642 <__libc_init_array+0x2e>
 800b636:	bd70      	pop	{r4, r5, r6, pc}
 800b638:	f855 3b04 	ldr.w	r3, [r5], #4
 800b63c:	4798      	blx	r3
 800b63e:	3601      	adds	r6, #1
 800b640:	e7ee      	b.n	800b620 <__libc_init_array+0xc>
 800b642:	f855 3b04 	ldr.w	r3, [r5], #4
 800b646:	4798      	blx	r3
 800b648:	3601      	adds	r6, #1
 800b64a:	e7f2      	b.n	800b632 <__libc_init_array+0x1e>
 800b64c:	0800ea34 	.word	0x0800ea34
 800b650:	0800ea34 	.word	0x0800ea34
 800b654:	0800ea34 	.word	0x0800ea34
 800b658:	0800ea38 	.word	0x0800ea38

0800b65c <memcpy>:
 800b65c:	440a      	add	r2, r1
 800b65e:	4291      	cmp	r1, r2
 800b660:	f100 33ff 	add.w	r3, r0, #4294967295
 800b664:	d100      	bne.n	800b668 <memcpy+0xc>
 800b666:	4770      	bx	lr
 800b668:	b510      	push	{r4, lr}
 800b66a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b66e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b672:	4291      	cmp	r1, r2
 800b674:	d1f9      	bne.n	800b66a <memcpy+0xe>
 800b676:	bd10      	pop	{r4, pc}

0800b678 <memset>:
 800b678:	4402      	add	r2, r0
 800b67a:	4603      	mov	r3, r0
 800b67c:	4293      	cmp	r3, r2
 800b67e:	d100      	bne.n	800b682 <memset+0xa>
 800b680:	4770      	bx	lr
 800b682:	f803 1b01 	strb.w	r1, [r3], #1
 800b686:	e7f9      	b.n	800b67c <memset+0x4>

0800b688 <__cvt>:
 800b688:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b68c:	ec55 4b10 	vmov	r4, r5, d0
 800b690:	2d00      	cmp	r5, #0
 800b692:	460e      	mov	r6, r1
 800b694:	4619      	mov	r1, r3
 800b696:	462b      	mov	r3, r5
 800b698:	bfbb      	ittet	lt
 800b69a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800b69e:	461d      	movlt	r5, r3
 800b6a0:	2300      	movge	r3, #0
 800b6a2:	232d      	movlt	r3, #45	; 0x2d
 800b6a4:	700b      	strb	r3, [r1, #0]
 800b6a6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b6a8:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800b6ac:	4691      	mov	r9, r2
 800b6ae:	f023 0820 	bic.w	r8, r3, #32
 800b6b2:	bfbc      	itt	lt
 800b6b4:	4622      	movlt	r2, r4
 800b6b6:	4614      	movlt	r4, r2
 800b6b8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800b6bc:	d005      	beq.n	800b6ca <__cvt+0x42>
 800b6be:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800b6c2:	d100      	bne.n	800b6c6 <__cvt+0x3e>
 800b6c4:	3601      	adds	r6, #1
 800b6c6:	2102      	movs	r1, #2
 800b6c8:	e000      	b.n	800b6cc <__cvt+0x44>
 800b6ca:	2103      	movs	r1, #3
 800b6cc:	ab03      	add	r3, sp, #12
 800b6ce:	9301      	str	r3, [sp, #4]
 800b6d0:	ab02      	add	r3, sp, #8
 800b6d2:	9300      	str	r3, [sp, #0]
 800b6d4:	ec45 4b10 	vmov	d0, r4, r5
 800b6d8:	4653      	mov	r3, sl
 800b6da:	4632      	mov	r2, r6
 800b6dc:	f000 fcf4 	bl	800c0c8 <_dtoa_r>
 800b6e0:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800b6e4:	4607      	mov	r7, r0
 800b6e6:	d102      	bne.n	800b6ee <__cvt+0x66>
 800b6e8:	f019 0f01 	tst.w	r9, #1
 800b6ec:	d022      	beq.n	800b734 <__cvt+0xac>
 800b6ee:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800b6f2:	eb07 0906 	add.w	r9, r7, r6
 800b6f6:	d110      	bne.n	800b71a <__cvt+0x92>
 800b6f8:	783b      	ldrb	r3, [r7, #0]
 800b6fa:	2b30      	cmp	r3, #48	; 0x30
 800b6fc:	d10a      	bne.n	800b714 <__cvt+0x8c>
 800b6fe:	2200      	movs	r2, #0
 800b700:	2300      	movs	r3, #0
 800b702:	4620      	mov	r0, r4
 800b704:	4629      	mov	r1, r5
 800b706:	f7f5 f9ff 	bl	8000b08 <__aeabi_dcmpeq>
 800b70a:	b918      	cbnz	r0, 800b714 <__cvt+0x8c>
 800b70c:	f1c6 0601 	rsb	r6, r6, #1
 800b710:	f8ca 6000 	str.w	r6, [sl]
 800b714:	f8da 3000 	ldr.w	r3, [sl]
 800b718:	4499      	add	r9, r3
 800b71a:	2200      	movs	r2, #0
 800b71c:	2300      	movs	r3, #0
 800b71e:	4620      	mov	r0, r4
 800b720:	4629      	mov	r1, r5
 800b722:	f7f5 f9f1 	bl	8000b08 <__aeabi_dcmpeq>
 800b726:	b108      	cbz	r0, 800b72c <__cvt+0xa4>
 800b728:	f8cd 900c 	str.w	r9, [sp, #12]
 800b72c:	2230      	movs	r2, #48	; 0x30
 800b72e:	9b03      	ldr	r3, [sp, #12]
 800b730:	454b      	cmp	r3, r9
 800b732:	d307      	bcc.n	800b744 <__cvt+0xbc>
 800b734:	9b03      	ldr	r3, [sp, #12]
 800b736:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b738:	1bdb      	subs	r3, r3, r7
 800b73a:	4638      	mov	r0, r7
 800b73c:	6013      	str	r3, [r2, #0]
 800b73e:	b004      	add	sp, #16
 800b740:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b744:	1c59      	adds	r1, r3, #1
 800b746:	9103      	str	r1, [sp, #12]
 800b748:	701a      	strb	r2, [r3, #0]
 800b74a:	e7f0      	b.n	800b72e <__cvt+0xa6>

0800b74c <__exponent>:
 800b74c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b74e:	4603      	mov	r3, r0
 800b750:	2900      	cmp	r1, #0
 800b752:	bfb8      	it	lt
 800b754:	4249      	neglt	r1, r1
 800b756:	f803 2b02 	strb.w	r2, [r3], #2
 800b75a:	bfb4      	ite	lt
 800b75c:	222d      	movlt	r2, #45	; 0x2d
 800b75e:	222b      	movge	r2, #43	; 0x2b
 800b760:	2909      	cmp	r1, #9
 800b762:	7042      	strb	r2, [r0, #1]
 800b764:	dd2a      	ble.n	800b7bc <__exponent+0x70>
 800b766:	f10d 0407 	add.w	r4, sp, #7
 800b76a:	46a4      	mov	ip, r4
 800b76c:	270a      	movs	r7, #10
 800b76e:	46a6      	mov	lr, r4
 800b770:	460a      	mov	r2, r1
 800b772:	fb91 f6f7 	sdiv	r6, r1, r7
 800b776:	fb07 1516 	mls	r5, r7, r6, r1
 800b77a:	3530      	adds	r5, #48	; 0x30
 800b77c:	2a63      	cmp	r2, #99	; 0x63
 800b77e:	f104 34ff 	add.w	r4, r4, #4294967295
 800b782:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800b786:	4631      	mov	r1, r6
 800b788:	dcf1      	bgt.n	800b76e <__exponent+0x22>
 800b78a:	3130      	adds	r1, #48	; 0x30
 800b78c:	f1ae 0502 	sub.w	r5, lr, #2
 800b790:	f804 1c01 	strb.w	r1, [r4, #-1]
 800b794:	1c44      	adds	r4, r0, #1
 800b796:	4629      	mov	r1, r5
 800b798:	4561      	cmp	r1, ip
 800b79a:	d30a      	bcc.n	800b7b2 <__exponent+0x66>
 800b79c:	f10d 0209 	add.w	r2, sp, #9
 800b7a0:	eba2 020e 	sub.w	r2, r2, lr
 800b7a4:	4565      	cmp	r5, ip
 800b7a6:	bf88      	it	hi
 800b7a8:	2200      	movhi	r2, #0
 800b7aa:	4413      	add	r3, r2
 800b7ac:	1a18      	subs	r0, r3, r0
 800b7ae:	b003      	add	sp, #12
 800b7b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b7b2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b7b6:	f804 2f01 	strb.w	r2, [r4, #1]!
 800b7ba:	e7ed      	b.n	800b798 <__exponent+0x4c>
 800b7bc:	2330      	movs	r3, #48	; 0x30
 800b7be:	3130      	adds	r1, #48	; 0x30
 800b7c0:	7083      	strb	r3, [r0, #2]
 800b7c2:	70c1      	strb	r1, [r0, #3]
 800b7c4:	1d03      	adds	r3, r0, #4
 800b7c6:	e7f1      	b.n	800b7ac <__exponent+0x60>

0800b7c8 <_printf_float>:
 800b7c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b7cc:	ed2d 8b02 	vpush	{d8}
 800b7d0:	b08d      	sub	sp, #52	; 0x34
 800b7d2:	460c      	mov	r4, r1
 800b7d4:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800b7d8:	4616      	mov	r6, r2
 800b7da:	461f      	mov	r7, r3
 800b7dc:	4605      	mov	r5, r0
 800b7de:	f001 fa61 	bl	800cca4 <_localeconv_r>
 800b7e2:	f8d0 a000 	ldr.w	sl, [r0]
 800b7e6:	4650      	mov	r0, sl
 800b7e8:	f7f4 fd12 	bl	8000210 <strlen>
 800b7ec:	2300      	movs	r3, #0
 800b7ee:	930a      	str	r3, [sp, #40]	; 0x28
 800b7f0:	6823      	ldr	r3, [r4, #0]
 800b7f2:	9305      	str	r3, [sp, #20]
 800b7f4:	f8d8 3000 	ldr.w	r3, [r8]
 800b7f8:	f894 b018 	ldrb.w	fp, [r4, #24]
 800b7fc:	3307      	adds	r3, #7
 800b7fe:	f023 0307 	bic.w	r3, r3, #7
 800b802:	f103 0208 	add.w	r2, r3, #8
 800b806:	f8c8 2000 	str.w	r2, [r8]
 800b80a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b80e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800b812:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800b816:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800b81a:	9307      	str	r3, [sp, #28]
 800b81c:	f8cd 8018 	str.w	r8, [sp, #24]
 800b820:	ee08 0a10 	vmov	s16, r0
 800b824:	4b9f      	ldr	r3, [pc, #636]	; (800baa4 <_printf_float+0x2dc>)
 800b826:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b82a:	f04f 32ff 	mov.w	r2, #4294967295
 800b82e:	f7f5 f99d 	bl	8000b6c <__aeabi_dcmpun>
 800b832:	bb88      	cbnz	r0, 800b898 <_printf_float+0xd0>
 800b834:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b838:	4b9a      	ldr	r3, [pc, #616]	; (800baa4 <_printf_float+0x2dc>)
 800b83a:	f04f 32ff 	mov.w	r2, #4294967295
 800b83e:	f7f5 f977 	bl	8000b30 <__aeabi_dcmple>
 800b842:	bb48      	cbnz	r0, 800b898 <_printf_float+0xd0>
 800b844:	2200      	movs	r2, #0
 800b846:	2300      	movs	r3, #0
 800b848:	4640      	mov	r0, r8
 800b84a:	4649      	mov	r1, r9
 800b84c:	f7f5 f966 	bl	8000b1c <__aeabi_dcmplt>
 800b850:	b110      	cbz	r0, 800b858 <_printf_float+0x90>
 800b852:	232d      	movs	r3, #45	; 0x2d
 800b854:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b858:	4b93      	ldr	r3, [pc, #588]	; (800baa8 <_printf_float+0x2e0>)
 800b85a:	4894      	ldr	r0, [pc, #592]	; (800baac <_printf_float+0x2e4>)
 800b85c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800b860:	bf94      	ite	ls
 800b862:	4698      	movls	r8, r3
 800b864:	4680      	movhi	r8, r0
 800b866:	2303      	movs	r3, #3
 800b868:	6123      	str	r3, [r4, #16]
 800b86a:	9b05      	ldr	r3, [sp, #20]
 800b86c:	f023 0204 	bic.w	r2, r3, #4
 800b870:	6022      	str	r2, [r4, #0]
 800b872:	f04f 0900 	mov.w	r9, #0
 800b876:	9700      	str	r7, [sp, #0]
 800b878:	4633      	mov	r3, r6
 800b87a:	aa0b      	add	r2, sp, #44	; 0x2c
 800b87c:	4621      	mov	r1, r4
 800b87e:	4628      	mov	r0, r5
 800b880:	f000 f9d8 	bl	800bc34 <_printf_common>
 800b884:	3001      	adds	r0, #1
 800b886:	f040 8090 	bne.w	800b9aa <_printf_float+0x1e2>
 800b88a:	f04f 30ff 	mov.w	r0, #4294967295
 800b88e:	b00d      	add	sp, #52	; 0x34
 800b890:	ecbd 8b02 	vpop	{d8}
 800b894:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b898:	4642      	mov	r2, r8
 800b89a:	464b      	mov	r3, r9
 800b89c:	4640      	mov	r0, r8
 800b89e:	4649      	mov	r1, r9
 800b8a0:	f7f5 f964 	bl	8000b6c <__aeabi_dcmpun>
 800b8a4:	b140      	cbz	r0, 800b8b8 <_printf_float+0xf0>
 800b8a6:	464b      	mov	r3, r9
 800b8a8:	2b00      	cmp	r3, #0
 800b8aa:	bfbc      	itt	lt
 800b8ac:	232d      	movlt	r3, #45	; 0x2d
 800b8ae:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800b8b2:	487f      	ldr	r0, [pc, #508]	; (800bab0 <_printf_float+0x2e8>)
 800b8b4:	4b7f      	ldr	r3, [pc, #508]	; (800bab4 <_printf_float+0x2ec>)
 800b8b6:	e7d1      	b.n	800b85c <_printf_float+0x94>
 800b8b8:	6863      	ldr	r3, [r4, #4]
 800b8ba:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800b8be:	9206      	str	r2, [sp, #24]
 800b8c0:	1c5a      	adds	r2, r3, #1
 800b8c2:	d13f      	bne.n	800b944 <_printf_float+0x17c>
 800b8c4:	2306      	movs	r3, #6
 800b8c6:	6063      	str	r3, [r4, #4]
 800b8c8:	9b05      	ldr	r3, [sp, #20]
 800b8ca:	6861      	ldr	r1, [r4, #4]
 800b8cc:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800b8d0:	2300      	movs	r3, #0
 800b8d2:	9303      	str	r3, [sp, #12]
 800b8d4:	ab0a      	add	r3, sp, #40	; 0x28
 800b8d6:	e9cd b301 	strd	fp, r3, [sp, #4]
 800b8da:	ab09      	add	r3, sp, #36	; 0x24
 800b8dc:	ec49 8b10 	vmov	d0, r8, r9
 800b8e0:	9300      	str	r3, [sp, #0]
 800b8e2:	6022      	str	r2, [r4, #0]
 800b8e4:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800b8e8:	4628      	mov	r0, r5
 800b8ea:	f7ff fecd 	bl	800b688 <__cvt>
 800b8ee:	9b06      	ldr	r3, [sp, #24]
 800b8f0:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b8f2:	2b47      	cmp	r3, #71	; 0x47
 800b8f4:	4680      	mov	r8, r0
 800b8f6:	d108      	bne.n	800b90a <_printf_float+0x142>
 800b8f8:	1cc8      	adds	r0, r1, #3
 800b8fa:	db02      	blt.n	800b902 <_printf_float+0x13a>
 800b8fc:	6863      	ldr	r3, [r4, #4]
 800b8fe:	4299      	cmp	r1, r3
 800b900:	dd41      	ble.n	800b986 <_printf_float+0x1be>
 800b902:	f1ab 0b02 	sub.w	fp, fp, #2
 800b906:	fa5f fb8b 	uxtb.w	fp, fp
 800b90a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800b90e:	d820      	bhi.n	800b952 <_printf_float+0x18a>
 800b910:	3901      	subs	r1, #1
 800b912:	465a      	mov	r2, fp
 800b914:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800b918:	9109      	str	r1, [sp, #36]	; 0x24
 800b91a:	f7ff ff17 	bl	800b74c <__exponent>
 800b91e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b920:	1813      	adds	r3, r2, r0
 800b922:	2a01      	cmp	r2, #1
 800b924:	4681      	mov	r9, r0
 800b926:	6123      	str	r3, [r4, #16]
 800b928:	dc02      	bgt.n	800b930 <_printf_float+0x168>
 800b92a:	6822      	ldr	r2, [r4, #0]
 800b92c:	07d2      	lsls	r2, r2, #31
 800b92e:	d501      	bpl.n	800b934 <_printf_float+0x16c>
 800b930:	3301      	adds	r3, #1
 800b932:	6123      	str	r3, [r4, #16]
 800b934:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800b938:	2b00      	cmp	r3, #0
 800b93a:	d09c      	beq.n	800b876 <_printf_float+0xae>
 800b93c:	232d      	movs	r3, #45	; 0x2d
 800b93e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b942:	e798      	b.n	800b876 <_printf_float+0xae>
 800b944:	9a06      	ldr	r2, [sp, #24]
 800b946:	2a47      	cmp	r2, #71	; 0x47
 800b948:	d1be      	bne.n	800b8c8 <_printf_float+0x100>
 800b94a:	2b00      	cmp	r3, #0
 800b94c:	d1bc      	bne.n	800b8c8 <_printf_float+0x100>
 800b94e:	2301      	movs	r3, #1
 800b950:	e7b9      	b.n	800b8c6 <_printf_float+0xfe>
 800b952:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800b956:	d118      	bne.n	800b98a <_printf_float+0x1c2>
 800b958:	2900      	cmp	r1, #0
 800b95a:	6863      	ldr	r3, [r4, #4]
 800b95c:	dd0b      	ble.n	800b976 <_printf_float+0x1ae>
 800b95e:	6121      	str	r1, [r4, #16]
 800b960:	b913      	cbnz	r3, 800b968 <_printf_float+0x1a0>
 800b962:	6822      	ldr	r2, [r4, #0]
 800b964:	07d0      	lsls	r0, r2, #31
 800b966:	d502      	bpl.n	800b96e <_printf_float+0x1a6>
 800b968:	3301      	adds	r3, #1
 800b96a:	440b      	add	r3, r1
 800b96c:	6123      	str	r3, [r4, #16]
 800b96e:	65a1      	str	r1, [r4, #88]	; 0x58
 800b970:	f04f 0900 	mov.w	r9, #0
 800b974:	e7de      	b.n	800b934 <_printf_float+0x16c>
 800b976:	b913      	cbnz	r3, 800b97e <_printf_float+0x1b6>
 800b978:	6822      	ldr	r2, [r4, #0]
 800b97a:	07d2      	lsls	r2, r2, #31
 800b97c:	d501      	bpl.n	800b982 <_printf_float+0x1ba>
 800b97e:	3302      	adds	r3, #2
 800b980:	e7f4      	b.n	800b96c <_printf_float+0x1a4>
 800b982:	2301      	movs	r3, #1
 800b984:	e7f2      	b.n	800b96c <_printf_float+0x1a4>
 800b986:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800b98a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b98c:	4299      	cmp	r1, r3
 800b98e:	db05      	blt.n	800b99c <_printf_float+0x1d4>
 800b990:	6823      	ldr	r3, [r4, #0]
 800b992:	6121      	str	r1, [r4, #16]
 800b994:	07d8      	lsls	r0, r3, #31
 800b996:	d5ea      	bpl.n	800b96e <_printf_float+0x1a6>
 800b998:	1c4b      	adds	r3, r1, #1
 800b99a:	e7e7      	b.n	800b96c <_printf_float+0x1a4>
 800b99c:	2900      	cmp	r1, #0
 800b99e:	bfd4      	ite	le
 800b9a0:	f1c1 0202 	rsble	r2, r1, #2
 800b9a4:	2201      	movgt	r2, #1
 800b9a6:	4413      	add	r3, r2
 800b9a8:	e7e0      	b.n	800b96c <_printf_float+0x1a4>
 800b9aa:	6823      	ldr	r3, [r4, #0]
 800b9ac:	055a      	lsls	r2, r3, #21
 800b9ae:	d407      	bmi.n	800b9c0 <_printf_float+0x1f8>
 800b9b0:	6923      	ldr	r3, [r4, #16]
 800b9b2:	4642      	mov	r2, r8
 800b9b4:	4631      	mov	r1, r6
 800b9b6:	4628      	mov	r0, r5
 800b9b8:	47b8      	blx	r7
 800b9ba:	3001      	adds	r0, #1
 800b9bc:	d12c      	bne.n	800ba18 <_printf_float+0x250>
 800b9be:	e764      	b.n	800b88a <_printf_float+0xc2>
 800b9c0:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800b9c4:	f240 80e0 	bls.w	800bb88 <_printf_float+0x3c0>
 800b9c8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800b9cc:	2200      	movs	r2, #0
 800b9ce:	2300      	movs	r3, #0
 800b9d0:	f7f5 f89a 	bl	8000b08 <__aeabi_dcmpeq>
 800b9d4:	2800      	cmp	r0, #0
 800b9d6:	d034      	beq.n	800ba42 <_printf_float+0x27a>
 800b9d8:	4a37      	ldr	r2, [pc, #220]	; (800bab8 <_printf_float+0x2f0>)
 800b9da:	2301      	movs	r3, #1
 800b9dc:	4631      	mov	r1, r6
 800b9de:	4628      	mov	r0, r5
 800b9e0:	47b8      	blx	r7
 800b9e2:	3001      	adds	r0, #1
 800b9e4:	f43f af51 	beq.w	800b88a <_printf_float+0xc2>
 800b9e8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b9ec:	429a      	cmp	r2, r3
 800b9ee:	db02      	blt.n	800b9f6 <_printf_float+0x22e>
 800b9f0:	6823      	ldr	r3, [r4, #0]
 800b9f2:	07d8      	lsls	r0, r3, #31
 800b9f4:	d510      	bpl.n	800ba18 <_printf_float+0x250>
 800b9f6:	ee18 3a10 	vmov	r3, s16
 800b9fa:	4652      	mov	r2, sl
 800b9fc:	4631      	mov	r1, r6
 800b9fe:	4628      	mov	r0, r5
 800ba00:	47b8      	blx	r7
 800ba02:	3001      	adds	r0, #1
 800ba04:	f43f af41 	beq.w	800b88a <_printf_float+0xc2>
 800ba08:	f04f 0800 	mov.w	r8, #0
 800ba0c:	f104 091a 	add.w	r9, r4, #26
 800ba10:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ba12:	3b01      	subs	r3, #1
 800ba14:	4543      	cmp	r3, r8
 800ba16:	dc09      	bgt.n	800ba2c <_printf_float+0x264>
 800ba18:	6823      	ldr	r3, [r4, #0]
 800ba1a:	079b      	lsls	r3, r3, #30
 800ba1c:	f100 8105 	bmi.w	800bc2a <_printf_float+0x462>
 800ba20:	68e0      	ldr	r0, [r4, #12]
 800ba22:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ba24:	4298      	cmp	r0, r3
 800ba26:	bfb8      	it	lt
 800ba28:	4618      	movlt	r0, r3
 800ba2a:	e730      	b.n	800b88e <_printf_float+0xc6>
 800ba2c:	2301      	movs	r3, #1
 800ba2e:	464a      	mov	r2, r9
 800ba30:	4631      	mov	r1, r6
 800ba32:	4628      	mov	r0, r5
 800ba34:	47b8      	blx	r7
 800ba36:	3001      	adds	r0, #1
 800ba38:	f43f af27 	beq.w	800b88a <_printf_float+0xc2>
 800ba3c:	f108 0801 	add.w	r8, r8, #1
 800ba40:	e7e6      	b.n	800ba10 <_printf_float+0x248>
 800ba42:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ba44:	2b00      	cmp	r3, #0
 800ba46:	dc39      	bgt.n	800babc <_printf_float+0x2f4>
 800ba48:	4a1b      	ldr	r2, [pc, #108]	; (800bab8 <_printf_float+0x2f0>)
 800ba4a:	2301      	movs	r3, #1
 800ba4c:	4631      	mov	r1, r6
 800ba4e:	4628      	mov	r0, r5
 800ba50:	47b8      	blx	r7
 800ba52:	3001      	adds	r0, #1
 800ba54:	f43f af19 	beq.w	800b88a <_printf_float+0xc2>
 800ba58:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ba5c:	4313      	orrs	r3, r2
 800ba5e:	d102      	bne.n	800ba66 <_printf_float+0x29e>
 800ba60:	6823      	ldr	r3, [r4, #0]
 800ba62:	07d9      	lsls	r1, r3, #31
 800ba64:	d5d8      	bpl.n	800ba18 <_printf_float+0x250>
 800ba66:	ee18 3a10 	vmov	r3, s16
 800ba6a:	4652      	mov	r2, sl
 800ba6c:	4631      	mov	r1, r6
 800ba6e:	4628      	mov	r0, r5
 800ba70:	47b8      	blx	r7
 800ba72:	3001      	adds	r0, #1
 800ba74:	f43f af09 	beq.w	800b88a <_printf_float+0xc2>
 800ba78:	f04f 0900 	mov.w	r9, #0
 800ba7c:	f104 0a1a 	add.w	sl, r4, #26
 800ba80:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ba82:	425b      	negs	r3, r3
 800ba84:	454b      	cmp	r3, r9
 800ba86:	dc01      	bgt.n	800ba8c <_printf_float+0x2c4>
 800ba88:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ba8a:	e792      	b.n	800b9b2 <_printf_float+0x1ea>
 800ba8c:	2301      	movs	r3, #1
 800ba8e:	4652      	mov	r2, sl
 800ba90:	4631      	mov	r1, r6
 800ba92:	4628      	mov	r0, r5
 800ba94:	47b8      	blx	r7
 800ba96:	3001      	adds	r0, #1
 800ba98:	f43f aef7 	beq.w	800b88a <_printf_float+0xc2>
 800ba9c:	f109 0901 	add.w	r9, r9, #1
 800baa0:	e7ee      	b.n	800ba80 <_printf_float+0x2b8>
 800baa2:	bf00      	nop
 800baa4:	7fefffff 	.word	0x7fefffff
 800baa8:	0800e658 	.word	0x0800e658
 800baac:	0800e65c 	.word	0x0800e65c
 800bab0:	0800e664 	.word	0x0800e664
 800bab4:	0800e660 	.word	0x0800e660
 800bab8:	0800e668 	.word	0x0800e668
 800babc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800babe:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800bac0:	429a      	cmp	r2, r3
 800bac2:	bfa8      	it	ge
 800bac4:	461a      	movge	r2, r3
 800bac6:	2a00      	cmp	r2, #0
 800bac8:	4691      	mov	r9, r2
 800baca:	dc37      	bgt.n	800bb3c <_printf_float+0x374>
 800bacc:	f04f 0b00 	mov.w	fp, #0
 800bad0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800bad4:	f104 021a 	add.w	r2, r4, #26
 800bad8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800bada:	9305      	str	r3, [sp, #20]
 800badc:	eba3 0309 	sub.w	r3, r3, r9
 800bae0:	455b      	cmp	r3, fp
 800bae2:	dc33      	bgt.n	800bb4c <_printf_float+0x384>
 800bae4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800bae8:	429a      	cmp	r2, r3
 800baea:	db3b      	blt.n	800bb64 <_printf_float+0x39c>
 800baec:	6823      	ldr	r3, [r4, #0]
 800baee:	07da      	lsls	r2, r3, #31
 800baf0:	d438      	bmi.n	800bb64 <_printf_float+0x39c>
 800baf2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800baf4:	9a05      	ldr	r2, [sp, #20]
 800baf6:	9909      	ldr	r1, [sp, #36]	; 0x24
 800baf8:	1a9a      	subs	r2, r3, r2
 800bafa:	eba3 0901 	sub.w	r9, r3, r1
 800bafe:	4591      	cmp	r9, r2
 800bb00:	bfa8      	it	ge
 800bb02:	4691      	movge	r9, r2
 800bb04:	f1b9 0f00 	cmp.w	r9, #0
 800bb08:	dc35      	bgt.n	800bb76 <_printf_float+0x3ae>
 800bb0a:	f04f 0800 	mov.w	r8, #0
 800bb0e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800bb12:	f104 0a1a 	add.w	sl, r4, #26
 800bb16:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800bb1a:	1a9b      	subs	r3, r3, r2
 800bb1c:	eba3 0309 	sub.w	r3, r3, r9
 800bb20:	4543      	cmp	r3, r8
 800bb22:	f77f af79 	ble.w	800ba18 <_printf_float+0x250>
 800bb26:	2301      	movs	r3, #1
 800bb28:	4652      	mov	r2, sl
 800bb2a:	4631      	mov	r1, r6
 800bb2c:	4628      	mov	r0, r5
 800bb2e:	47b8      	blx	r7
 800bb30:	3001      	adds	r0, #1
 800bb32:	f43f aeaa 	beq.w	800b88a <_printf_float+0xc2>
 800bb36:	f108 0801 	add.w	r8, r8, #1
 800bb3a:	e7ec      	b.n	800bb16 <_printf_float+0x34e>
 800bb3c:	4613      	mov	r3, r2
 800bb3e:	4631      	mov	r1, r6
 800bb40:	4642      	mov	r2, r8
 800bb42:	4628      	mov	r0, r5
 800bb44:	47b8      	blx	r7
 800bb46:	3001      	adds	r0, #1
 800bb48:	d1c0      	bne.n	800bacc <_printf_float+0x304>
 800bb4a:	e69e      	b.n	800b88a <_printf_float+0xc2>
 800bb4c:	2301      	movs	r3, #1
 800bb4e:	4631      	mov	r1, r6
 800bb50:	4628      	mov	r0, r5
 800bb52:	9205      	str	r2, [sp, #20]
 800bb54:	47b8      	blx	r7
 800bb56:	3001      	adds	r0, #1
 800bb58:	f43f ae97 	beq.w	800b88a <_printf_float+0xc2>
 800bb5c:	9a05      	ldr	r2, [sp, #20]
 800bb5e:	f10b 0b01 	add.w	fp, fp, #1
 800bb62:	e7b9      	b.n	800bad8 <_printf_float+0x310>
 800bb64:	ee18 3a10 	vmov	r3, s16
 800bb68:	4652      	mov	r2, sl
 800bb6a:	4631      	mov	r1, r6
 800bb6c:	4628      	mov	r0, r5
 800bb6e:	47b8      	blx	r7
 800bb70:	3001      	adds	r0, #1
 800bb72:	d1be      	bne.n	800baf2 <_printf_float+0x32a>
 800bb74:	e689      	b.n	800b88a <_printf_float+0xc2>
 800bb76:	9a05      	ldr	r2, [sp, #20]
 800bb78:	464b      	mov	r3, r9
 800bb7a:	4442      	add	r2, r8
 800bb7c:	4631      	mov	r1, r6
 800bb7e:	4628      	mov	r0, r5
 800bb80:	47b8      	blx	r7
 800bb82:	3001      	adds	r0, #1
 800bb84:	d1c1      	bne.n	800bb0a <_printf_float+0x342>
 800bb86:	e680      	b.n	800b88a <_printf_float+0xc2>
 800bb88:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800bb8a:	2a01      	cmp	r2, #1
 800bb8c:	dc01      	bgt.n	800bb92 <_printf_float+0x3ca>
 800bb8e:	07db      	lsls	r3, r3, #31
 800bb90:	d538      	bpl.n	800bc04 <_printf_float+0x43c>
 800bb92:	2301      	movs	r3, #1
 800bb94:	4642      	mov	r2, r8
 800bb96:	4631      	mov	r1, r6
 800bb98:	4628      	mov	r0, r5
 800bb9a:	47b8      	blx	r7
 800bb9c:	3001      	adds	r0, #1
 800bb9e:	f43f ae74 	beq.w	800b88a <_printf_float+0xc2>
 800bba2:	ee18 3a10 	vmov	r3, s16
 800bba6:	4652      	mov	r2, sl
 800bba8:	4631      	mov	r1, r6
 800bbaa:	4628      	mov	r0, r5
 800bbac:	47b8      	blx	r7
 800bbae:	3001      	adds	r0, #1
 800bbb0:	f43f ae6b 	beq.w	800b88a <_printf_float+0xc2>
 800bbb4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800bbb8:	2200      	movs	r2, #0
 800bbba:	2300      	movs	r3, #0
 800bbbc:	f7f4 ffa4 	bl	8000b08 <__aeabi_dcmpeq>
 800bbc0:	b9d8      	cbnz	r0, 800bbfa <_printf_float+0x432>
 800bbc2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bbc4:	f108 0201 	add.w	r2, r8, #1
 800bbc8:	3b01      	subs	r3, #1
 800bbca:	4631      	mov	r1, r6
 800bbcc:	4628      	mov	r0, r5
 800bbce:	47b8      	blx	r7
 800bbd0:	3001      	adds	r0, #1
 800bbd2:	d10e      	bne.n	800bbf2 <_printf_float+0x42a>
 800bbd4:	e659      	b.n	800b88a <_printf_float+0xc2>
 800bbd6:	2301      	movs	r3, #1
 800bbd8:	4652      	mov	r2, sl
 800bbda:	4631      	mov	r1, r6
 800bbdc:	4628      	mov	r0, r5
 800bbde:	47b8      	blx	r7
 800bbe0:	3001      	adds	r0, #1
 800bbe2:	f43f ae52 	beq.w	800b88a <_printf_float+0xc2>
 800bbe6:	f108 0801 	add.w	r8, r8, #1
 800bbea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bbec:	3b01      	subs	r3, #1
 800bbee:	4543      	cmp	r3, r8
 800bbf0:	dcf1      	bgt.n	800bbd6 <_printf_float+0x40e>
 800bbf2:	464b      	mov	r3, r9
 800bbf4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800bbf8:	e6dc      	b.n	800b9b4 <_printf_float+0x1ec>
 800bbfa:	f04f 0800 	mov.w	r8, #0
 800bbfe:	f104 0a1a 	add.w	sl, r4, #26
 800bc02:	e7f2      	b.n	800bbea <_printf_float+0x422>
 800bc04:	2301      	movs	r3, #1
 800bc06:	4642      	mov	r2, r8
 800bc08:	e7df      	b.n	800bbca <_printf_float+0x402>
 800bc0a:	2301      	movs	r3, #1
 800bc0c:	464a      	mov	r2, r9
 800bc0e:	4631      	mov	r1, r6
 800bc10:	4628      	mov	r0, r5
 800bc12:	47b8      	blx	r7
 800bc14:	3001      	adds	r0, #1
 800bc16:	f43f ae38 	beq.w	800b88a <_printf_float+0xc2>
 800bc1a:	f108 0801 	add.w	r8, r8, #1
 800bc1e:	68e3      	ldr	r3, [r4, #12]
 800bc20:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800bc22:	1a5b      	subs	r3, r3, r1
 800bc24:	4543      	cmp	r3, r8
 800bc26:	dcf0      	bgt.n	800bc0a <_printf_float+0x442>
 800bc28:	e6fa      	b.n	800ba20 <_printf_float+0x258>
 800bc2a:	f04f 0800 	mov.w	r8, #0
 800bc2e:	f104 0919 	add.w	r9, r4, #25
 800bc32:	e7f4      	b.n	800bc1e <_printf_float+0x456>

0800bc34 <_printf_common>:
 800bc34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bc38:	4616      	mov	r6, r2
 800bc3a:	4699      	mov	r9, r3
 800bc3c:	688a      	ldr	r2, [r1, #8]
 800bc3e:	690b      	ldr	r3, [r1, #16]
 800bc40:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800bc44:	4293      	cmp	r3, r2
 800bc46:	bfb8      	it	lt
 800bc48:	4613      	movlt	r3, r2
 800bc4a:	6033      	str	r3, [r6, #0]
 800bc4c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800bc50:	4607      	mov	r7, r0
 800bc52:	460c      	mov	r4, r1
 800bc54:	b10a      	cbz	r2, 800bc5a <_printf_common+0x26>
 800bc56:	3301      	adds	r3, #1
 800bc58:	6033      	str	r3, [r6, #0]
 800bc5a:	6823      	ldr	r3, [r4, #0]
 800bc5c:	0699      	lsls	r1, r3, #26
 800bc5e:	bf42      	ittt	mi
 800bc60:	6833      	ldrmi	r3, [r6, #0]
 800bc62:	3302      	addmi	r3, #2
 800bc64:	6033      	strmi	r3, [r6, #0]
 800bc66:	6825      	ldr	r5, [r4, #0]
 800bc68:	f015 0506 	ands.w	r5, r5, #6
 800bc6c:	d106      	bne.n	800bc7c <_printf_common+0x48>
 800bc6e:	f104 0a19 	add.w	sl, r4, #25
 800bc72:	68e3      	ldr	r3, [r4, #12]
 800bc74:	6832      	ldr	r2, [r6, #0]
 800bc76:	1a9b      	subs	r3, r3, r2
 800bc78:	42ab      	cmp	r3, r5
 800bc7a:	dc26      	bgt.n	800bcca <_printf_common+0x96>
 800bc7c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800bc80:	1e13      	subs	r3, r2, #0
 800bc82:	6822      	ldr	r2, [r4, #0]
 800bc84:	bf18      	it	ne
 800bc86:	2301      	movne	r3, #1
 800bc88:	0692      	lsls	r2, r2, #26
 800bc8a:	d42b      	bmi.n	800bce4 <_printf_common+0xb0>
 800bc8c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800bc90:	4649      	mov	r1, r9
 800bc92:	4638      	mov	r0, r7
 800bc94:	47c0      	blx	r8
 800bc96:	3001      	adds	r0, #1
 800bc98:	d01e      	beq.n	800bcd8 <_printf_common+0xa4>
 800bc9a:	6823      	ldr	r3, [r4, #0]
 800bc9c:	68e5      	ldr	r5, [r4, #12]
 800bc9e:	6832      	ldr	r2, [r6, #0]
 800bca0:	f003 0306 	and.w	r3, r3, #6
 800bca4:	2b04      	cmp	r3, #4
 800bca6:	bf08      	it	eq
 800bca8:	1aad      	subeq	r5, r5, r2
 800bcaa:	68a3      	ldr	r3, [r4, #8]
 800bcac:	6922      	ldr	r2, [r4, #16]
 800bcae:	bf0c      	ite	eq
 800bcb0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800bcb4:	2500      	movne	r5, #0
 800bcb6:	4293      	cmp	r3, r2
 800bcb8:	bfc4      	itt	gt
 800bcba:	1a9b      	subgt	r3, r3, r2
 800bcbc:	18ed      	addgt	r5, r5, r3
 800bcbe:	2600      	movs	r6, #0
 800bcc0:	341a      	adds	r4, #26
 800bcc2:	42b5      	cmp	r5, r6
 800bcc4:	d11a      	bne.n	800bcfc <_printf_common+0xc8>
 800bcc6:	2000      	movs	r0, #0
 800bcc8:	e008      	b.n	800bcdc <_printf_common+0xa8>
 800bcca:	2301      	movs	r3, #1
 800bccc:	4652      	mov	r2, sl
 800bcce:	4649      	mov	r1, r9
 800bcd0:	4638      	mov	r0, r7
 800bcd2:	47c0      	blx	r8
 800bcd4:	3001      	adds	r0, #1
 800bcd6:	d103      	bne.n	800bce0 <_printf_common+0xac>
 800bcd8:	f04f 30ff 	mov.w	r0, #4294967295
 800bcdc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bce0:	3501      	adds	r5, #1
 800bce2:	e7c6      	b.n	800bc72 <_printf_common+0x3e>
 800bce4:	18e1      	adds	r1, r4, r3
 800bce6:	1c5a      	adds	r2, r3, #1
 800bce8:	2030      	movs	r0, #48	; 0x30
 800bcea:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800bcee:	4422      	add	r2, r4
 800bcf0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800bcf4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800bcf8:	3302      	adds	r3, #2
 800bcfa:	e7c7      	b.n	800bc8c <_printf_common+0x58>
 800bcfc:	2301      	movs	r3, #1
 800bcfe:	4622      	mov	r2, r4
 800bd00:	4649      	mov	r1, r9
 800bd02:	4638      	mov	r0, r7
 800bd04:	47c0      	blx	r8
 800bd06:	3001      	adds	r0, #1
 800bd08:	d0e6      	beq.n	800bcd8 <_printf_common+0xa4>
 800bd0a:	3601      	adds	r6, #1
 800bd0c:	e7d9      	b.n	800bcc2 <_printf_common+0x8e>
	...

0800bd10 <_printf_i>:
 800bd10:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800bd14:	7e0f      	ldrb	r7, [r1, #24]
 800bd16:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800bd18:	2f78      	cmp	r7, #120	; 0x78
 800bd1a:	4691      	mov	r9, r2
 800bd1c:	4680      	mov	r8, r0
 800bd1e:	460c      	mov	r4, r1
 800bd20:	469a      	mov	sl, r3
 800bd22:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800bd26:	d807      	bhi.n	800bd38 <_printf_i+0x28>
 800bd28:	2f62      	cmp	r7, #98	; 0x62
 800bd2a:	d80a      	bhi.n	800bd42 <_printf_i+0x32>
 800bd2c:	2f00      	cmp	r7, #0
 800bd2e:	f000 80d8 	beq.w	800bee2 <_printf_i+0x1d2>
 800bd32:	2f58      	cmp	r7, #88	; 0x58
 800bd34:	f000 80a3 	beq.w	800be7e <_printf_i+0x16e>
 800bd38:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800bd3c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800bd40:	e03a      	b.n	800bdb8 <_printf_i+0xa8>
 800bd42:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800bd46:	2b15      	cmp	r3, #21
 800bd48:	d8f6      	bhi.n	800bd38 <_printf_i+0x28>
 800bd4a:	a101      	add	r1, pc, #4	; (adr r1, 800bd50 <_printf_i+0x40>)
 800bd4c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800bd50:	0800bda9 	.word	0x0800bda9
 800bd54:	0800bdbd 	.word	0x0800bdbd
 800bd58:	0800bd39 	.word	0x0800bd39
 800bd5c:	0800bd39 	.word	0x0800bd39
 800bd60:	0800bd39 	.word	0x0800bd39
 800bd64:	0800bd39 	.word	0x0800bd39
 800bd68:	0800bdbd 	.word	0x0800bdbd
 800bd6c:	0800bd39 	.word	0x0800bd39
 800bd70:	0800bd39 	.word	0x0800bd39
 800bd74:	0800bd39 	.word	0x0800bd39
 800bd78:	0800bd39 	.word	0x0800bd39
 800bd7c:	0800bec9 	.word	0x0800bec9
 800bd80:	0800bded 	.word	0x0800bded
 800bd84:	0800beab 	.word	0x0800beab
 800bd88:	0800bd39 	.word	0x0800bd39
 800bd8c:	0800bd39 	.word	0x0800bd39
 800bd90:	0800beeb 	.word	0x0800beeb
 800bd94:	0800bd39 	.word	0x0800bd39
 800bd98:	0800bded 	.word	0x0800bded
 800bd9c:	0800bd39 	.word	0x0800bd39
 800bda0:	0800bd39 	.word	0x0800bd39
 800bda4:	0800beb3 	.word	0x0800beb3
 800bda8:	682b      	ldr	r3, [r5, #0]
 800bdaa:	1d1a      	adds	r2, r3, #4
 800bdac:	681b      	ldr	r3, [r3, #0]
 800bdae:	602a      	str	r2, [r5, #0]
 800bdb0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800bdb4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800bdb8:	2301      	movs	r3, #1
 800bdba:	e0a3      	b.n	800bf04 <_printf_i+0x1f4>
 800bdbc:	6820      	ldr	r0, [r4, #0]
 800bdbe:	6829      	ldr	r1, [r5, #0]
 800bdc0:	0606      	lsls	r6, r0, #24
 800bdc2:	f101 0304 	add.w	r3, r1, #4
 800bdc6:	d50a      	bpl.n	800bdde <_printf_i+0xce>
 800bdc8:	680e      	ldr	r6, [r1, #0]
 800bdca:	602b      	str	r3, [r5, #0]
 800bdcc:	2e00      	cmp	r6, #0
 800bdce:	da03      	bge.n	800bdd8 <_printf_i+0xc8>
 800bdd0:	232d      	movs	r3, #45	; 0x2d
 800bdd2:	4276      	negs	r6, r6
 800bdd4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bdd8:	485e      	ldr	r0, [pc, #376]	; (800bf54 <_printf_i+0x244>)
 800bdda:	230a      	movs	r3, #10
 800bddc:	e019      	b.n	800be12 <_printf_i+0x102>
 800bdde:	680e      	ldr	r6, [r1, #0]
 800bde0:	602b      	str	r3, [r5, #0]
 800bde2:	f010 0f40 	tst.w	r0, #64	; 0x40
 800bde6:	bf18      	it	ne
 800bde8:	b236      	sxthne	r6, r6
 800bdea:	e7ef      	b.n	800bdcc <_printf_i+0xbc>
 800bdec:	682b      	ldr	r3, [r5, #0]
 800bdee:	6820      	ldr	r0, [r4, #0]
 800bdf0:	1d19      	adds	r1, r3, #4
 800bdf2:	6029      	str	r1, [r5, #0]
 800bdf4:	0601      	lsls	r1, r0, #24
 800bdf6:	d501      	bpl.n	800bdfc <_printf_i+0xec>
 800bdf8:	681e      	ldr	r6, [r3, #0]
 800bdfa:	e002      	b.n	800be02 <_printf_i+0xf2>
 800bdfc:	0646      	lsls	r6, r0, #25
 800bdfe:	d5fb      	bpl.n	800bdf8 <_printf_i+0xe8>
 800be00:	881e      	ldrh	r6, [r3, #0]
 800be02:	4854      	ldr	r0, [pc, #336]	; (800bf54 <_printf_i+0x244>)
 800be04:	2f6f      	cmp	r7, #111	; 0x6f
 800be06:	bf0c      	ite	eq
 800be08:	2308      	moveq	r3, #8
 800be0a:	230a      	movne	r3, #10
 800be0c:	2100      	movs	r1, #0
 800be0e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800be12:	6865      	ldr	r5, [r4, #4]
 800be14:	60a5      	str	r5, [r4, #8]
 800be16:	2d00      	cmp	r5, #0
 800be18:	bfa2      	ittt	ge
 800be1a:	6821      	ldrge	r1, [r4, #0]
 800be1c:	f021 0104 	bicge.w	r1, r1, #4
 800be20:	6021      	strge	r1, [r4, #0]
 800be22:	b90e      	cbnz	r6, 800be28 <_printf_i+0x118>
 800be24:	2d00      	cmp	r5, #0
 800be26:	d04d      	beq.n	800bec4 <_printf_i+0x1b4>
 800be28:	4615      	mov	r5, r2
 800be2a:	fbb6 f1f3 	udiv	r1, r6, r3
 800be2e:	fb03 6711 	mls	r7, r3, r1, r6
 800be32:	5dc7      	ldrb	r7, [r0, r7]
 800be34:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800be38:	4637      	mov	r7, r6
 800be3a:	42bb      	cmp	r3, r7
 800be3c:	460e      	mov	r6, r1
 800be3e:	d9f4      	bls.n	800be2a <_printf_i+0x11a>
 800be40:	2b08      	cmp	r3, #8
 800be42:	d10b      	bne.n	800be5c <_printf_i+0x14c>
 800be44:	6823      	ldr	r3, [r4, #0]
 800be46:	07de      	lsls	r6, r3, #31
 800be48:	d508      	bpl.n	800be5c <_printf_i+0x14c>
 800be4a:	6923      	ldr	r3, [r4, #16]
 800be4c:	6861      	ldr	r1, [r4, #4]
 800be4e:	4299      	cmp	r1, r3
 800be50:	bfde      	ittt	le
 800be52:	2330      	movle	r3, #48	; 0x30
 800be54:	f805 3c01 	strble.w	r3, [r5, #-1]
 800be58:	f105 35ff 	addle.w	r5, r5, #4294967295
 800be5c:	1b52      	subs	r2, r2, r5
 800be5e:	6122      	str	r2, [r4, #16]
 800be60:	f8cd a000 	str.w	sl, [sp]
 800be64:	464b      	mov	r3, r9
 800be66:	aa03      	add	r2, sp, #12
 800be68:	4621      	mov	r1, r4
 800be6a:	4640      	mov	r0, r8
 800be6c:	f7ff fee2 	bl	800bc34 <_printf_common>
 800be70:	3001      	adds	r0, #1
 800be72:	d14c      	bne.n	800bf0e <_printf_i+0x1fe>
 800be74:	f04f 30ff 	mov.w	r0, #4294967295
 800be78:	b004      	add	sp, #16
 800be7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800be7e:	4835      	ldr	r0, [pc, #212]	; (800bf54 <_printf_i+0x244>)
 800be80:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800be84:	6829      	ldr	r1, [r5, #0]
 800be86:	6823      	ldr	r3, [r4, #0]
 800be88:	f851 6b04 	ldr.w	r6, [r1], #4
 800be8c:	6029      	str	r1, [r5, #0]
 800be8e:	061d      	lsls	r5, r3, #24
 800be90:	d514      	bpl.n	800bebc <_printf_i+0x1ac>
 800be92:	07df      	lsls	r7, r3, #31
 800be94:	bf44      	itt	mi
 800be96:	f043 0320 	orrmi.w	r3, r3, #32
 800be9a:	6023      	strmi	r3, [r4, #0]
 800be9c:	b91e      	cbnz	r6, 800bea6 <_printf_i+0x196>
 800be9e:	6823      	ldr	r3, [r4, #0]
 800bea0:	f023 0320 	bic.w	r3, r3, #32
 800bea4:	6023      	str	r3, [r4, #0]
 800bea6:	2310      	movs	r3, #16
 800bea8:	e7b0      	b.n	800be0c <_printf_i+0xfc>
 800beaa:	6823      	ldr	r3, [r4, #0]
 800beac:	f043 0320 	orr.w	r3, r3, #32
 800beb0:	6023      	str	r3, [r4, #0]
 800beb2:	2378      	movs	r3, #120	; 0x78
 800beb4:	4828      	ldr	r0, [pc, #160]	; (800bf58 <_printf_i+0x248>)
 800beb6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800beba:	e7e3      	b.n	800be84 <_printf_i+0x174>
 800bebc:	0659      	lsls	r1, r3, #25
 800bebe:	bf48      	it	mi
 800bec0:	b2b6      	uxthmi	r6, r6
 800bec2:	e7e6      	b.n	800be92 <_printf_i+0x182>
 800bec4:	4615      	mov	r5, r2
 800bec6:	e7bb      	b.n	800be40 <_printf_i+0x130>
 800bec8:	682b      	ldr	r3, [r5, #0]
 800beca:	6826      	ldr	r6, [r4, #0]
 800becc:	6961      	ldr	r1, [r4, #20]
 800bece:	1d18      	adds	r0, r3, #4
 800bed0:	6028      	str	r0, [r5, #0]
 800bed2:	0635      	lsls	r5, r6, #24
 800bed4:	681b      	ldr	r3, [r3, #0]
 800bed6:	d501      	bpl.n	800bedc <_printf_i+0x1cc>
 800bed8:	6019      	str	r1, [r3, #0]
 800beda:	e002      	b.n	800bee2 <_printf_i+0x1d2>
 800bedc:	0670      	lsls	r0, r6, #25
 800bede:	d5fb      	bpl.n	800bed8 <_printf_i+0x1c8>
 800bee0:	8019      	strh	r1, [r3, #0]
 800bee2:	2300      	movs	r3, #0
 800bee4:	6123      	str	r3, [r4, #16]
 800bee6:	4615      	mov	r5, r2
 800bee8:	e7ba      	b.n	800be60 <_printf_i+0x150>
 800beea:	682b      	ldr	r3, [r5, #0]
 800beec:	1d1a      	adds	r2, r3, #4
 800beee:	602a      	str	r2, [r5, #0]
 800bef0:	681d      	ldr	r5, [r3, #0]
 800bef2:	6862      	ldr	r2, [r4, #4]
 800bef4:	2100      	movs	r1, #0
 800bef6:	4628      	mov	r0, r5
 800bef8:	f7f4 f992 	bl	8000220 <memchr>
 800befc:	b108      	cbz	r0, 800bf02 <_printf_i+0x1f2>
 800befe:	1b40      	subs	r0, r0, r5
 800bf00:	6060      	str	r0, [r4, #4]
 800bf02:	6863      	ldr	r3, [r4, #4]
 800bf04:	6123      	str	r3, [r4, #16]
 800bf06:	2300      	movs	r3, #0
 800bf08:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bf0c:	e7a8      	b.n	800be60 <_printf_i+0x150>
 800bf0e:	6923      	ldr	r3, [r4, #16]
 800bf10:	462a      	mov	r2, r5
 800bf12:	4649      	mov	r1, r9
 800bf14:	4640      	mov	r0, r8
 800bf16:	47d0      	blx	sl
 800bf18:	3001      	adds	r0, #1
 800bf1a:	d0ab      	beq.n	800be74 <_printf_i+0x164>
 800bf1c:	6823      	ldr	r3, [r4, #0]
 800bf1e:	079b      	lsls	r3, r3, #30
 800bf20:	d413      	bmi.n	800bf4a <_printf_i+0x23a>
 800bf22:	68e0      	ldr	r0, [r4, #12]
 800bf24:	9b03      	ldr	r3, [sp, #12]
 800bf26:	4298      	cmp	r0, r3
 800bf28:	bfb8      	it	lt
 800bf2a:	4618      	movlt	r0, r3
 800bf2c:	e7a4      	b.n	800be78 <_printf_i+0x168>
 800bf2e:	2301      	movs	r3, #1
 800bf30:	4632      	mov	r2, r6
 800bf32:	4649      	mov	r1, r9
 800bf34:	4640      	mov	r0, r8
 800bf36:	47d0      	blx	sl
 800bf38:	3001      	adds	r0, #1
 800bf3a:	d09b      	beq.n	800be74 <_printf_i+0x164>
 800bf3c:	3501      	adds	r5, #1
 800bf3e:	68e3      	ldr	r3, [r4, #12]
 800bf40:	9903      	ldr	r1, [sp, #12]
 800bf42:	1a5b      	subs	r3, r3, r1
 800bf44:	42ab      	cmp	r3, r5
 800bf46:	dcf2      	bgt.n	800bf2e <_printf_i+0x21e>
 800bf48:	e7eb      	b.n	800bf22 <_printf_i+0x212>
 800bf4a:	2500      	movs	r5, #0
 800bf4c:	f104 0619 	add.w	r6, r4, #25
 800bf50:	e7f5      	b.n	800bf3e <_printf_i+0x22e>
 800bf52:	bf00      	nop
 800bf54:	0800e66a 	.word	0x0800e66a
 800bf58:	0800e67b 	.word	0x0800e67b

0800bf5c <siprintf>:
 800bf5c:	b40e      	push	{r1, r2, r3}
 800bf5e:	b500      	push	{lr}
 800bf60:	b09c      	sub	sp, #112	; 0x70
 800bf62:	ab1d      	add	r3, sp, #116	; 0x74
 800bf64:	9002      	str	r0, [sp, #8]
 800bf66:	9006      	str	r0, [sp, #24]
 800bf68:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800bf6c:	4809      	ldr	r0, [pc, #36]	; (800bf94 <siprintf+0x38>)
 800bf6e:	9107      	str	r1, [sp, #28]
 800bf70:	9104      	str	r1, [sp, #16]
 800bf72:	4909      	ldr	r1, [pc, #36]	; (800bf98 <siprintf+0x3c>)
 800bf74:	f853 2b04 	ldr.w	r2, [r3], #4
 800bf78:	9105      	str	r1, [sp, #20]
 800bf7a:	6800      	ldr	r0, [r0, #0]
 800bf7c:	9301      	str	r3, [sp, #4]
 800bf7e:	a902      	add	r1, sp, #8
 800bf80:	f001 fb72 	bl	800d668 <_svfiprintf_r>
 800bf84:	9b02      	ldr	r3, [sp, #8]
 800bf86:	2200      	movs	r2, #0
 800bf88:	701a      	strb	r2, [r3, #0]
 800bf8a:	b01c      	add	sp, #112	; 0x70
 800bf8c:	f85d eb04 	ldr.w	lr, [sp], #4
 800bf90:	b003      	add	sp, #12
 800bf92:	4770      	bx	lr
 800bf94:	200002c8 	.word	0x200002c8
 800bf98:	ffff0208 	.word	0xffff0208

0800bf9c <strcpy>:
 800bf9c:	4603      	mov	r3, r0
 800bf9e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800bfa2:	f803 2b01 	strb.w	r2, [r3], #1
 800bfa6:	2a00      	cmp	r2, #0
 800bfa8:	d1f9      	bne.n	800bf9e <strcpy+0x2>
 800bfaa:	4770      	bx	lr

0800bfac <quorem>:
 800bfac:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bfb0:	6903      	ldr	r3, [r0, #16]
 800bfb2:	690c      	ldr	r4, [r1, #16]
 800bfb4:	42a3      	cmp	r3, r4
 800bfb6:	4607      	mov	r7, r0
 800bfb8:	f2c0 8081 	blt.w	800c0be <quorem+0x112>
 800bfbc:	3c01      	subs	r4, #1
 800bfbe:	f101 0814 	add.w	r8, r1, #20
 800bfc2:	f100 0514 	add.w	r5, r0, #20
 800bfc6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800bfca:	9301      	str	r3, [sp, #4]
 800bfcc:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800bfd0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800bfd4:	3301      	adds	r3, #1
 800bfd6:	429a      	cmp	r2, r3
 800bfd8:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800bfdc:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800bfe0:	fbb2 f6f3 	udiv	r6, r2, r3
 800bfe4:	d331      	bcc.n	800c04a <quorem+0x9e>
 800bfe6:	f04f 0e00 	mov.w	lr, #0
 800bfea:	4640      	mov	r0, r8
 800bfec:	46ac      	mov	ip, r5
 800bfee:	46f2      	mov	sl, lr
 800bff0:	f850 2b04 	ldr.w	r2, [r0], #4
 800bff4:	b293      	uxth	r3, r2
 800bff6:	fb06 e303 	mla	r3, r6, r3, lr
 800bffa:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800bffe:	b29b      	uxth	r3, r3
 800c000:	ebaa 0303 	sub.w	r3, sl, r3
 800c004:	f8dc a000 	ldr.w	sl, [ip]
 800c008:	0c12      	lsrs	r2, r2, #16
 800c00a:	fa13 f38a 	uxtah	r3, r3, sl
 800c00e:	fb06 e202 	mla	r2, r6, r2, lr
 800c012:	9300      	str	r3, [sp, #0]
 800c014:	9b00      	ldr	r3, [sp, #0]
 800c016:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800c01a:	b292      	uxth	r2, r2
 800c01c:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800c020:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800c024:	f8bd 3000 	ldrh.w	r3, [sp]
 800c028:	4581      	cmp	r9, r0
 800c02a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c02e:	f84c 3b04 	str.w	r3, [ip], #4
 800c032:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800c036:	d2db      	bcs.n	800bff0 <quorem+0x44>
 800c038:	f855 300b 	ldr.w	r3, [r5, fp]
 800c03c:	b92b      	cbnz	r3, 800c04a <quorem+0x9e>
 800c03e:	9b01      	ldr	r3, [sp, #4]
 800c040:	3b04      	subs	r3, #4
 800c042:	429d      	cmp	r5, r3
 800c044:	461a      	mov	r2, r3
 800c046:	d32e      	bcc.n	800c0a6 <quorem+0xfa>
 800c048:	613c      	str	r4, [r7, #16]
 800c04a:	4638      	mov	r0, r7
 800c04c:	f001 f8b8 	bl	800d1c0 <__mcmp>
 800c050:	2800      	cmp	r0, #0
 800c052:	db24      	blt.n	800c09e <quorem+0xf2>
 800c054:	3601      	adds	r6, #1
 800c056:	4628      	mov	r0, r5
 800c058:	f04f 0c00 	mov.w	ip, #0
 800c05c:	f858 2b04 	ldr.w	r2, [r8], #4
 800c060:	f8d0 e000 	ldr.w	lr, [r0]
 800c064:	b293      	uxth	r3, r2
 800c066:	ebac 0303 	sub.w	r3, ip, r3
 800c06a:	0c12      	lsrs	r2, r2, #16
 800c06c:	fa13 f38e 	uxtah	r3, r3, lr
 800c070:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800c074:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800c078:	b29b      	uxth	r3, r3
 800c07a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c07e:	45c1      	cmp	r9, r8
 800c080:	f840 3b04 	str.w	r3, [r0], #4
 800c084:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800c088:	d2e8      	bcs.n	800c05c <quorem+0xb0>
 800c08a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c08e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c092:	b922      	cbnz	r2, 800c09e <quorem+0xf2>
 800c094:	3b04      	subs	r3, #4
 800c096:	429d      	cmp	r5, r3
 800c098:	461a      	mov	r2, r3
 800c09a:	d30a      	bcc.n	800c0b2 <quorem+0x106>
 800c09c:	613c      	str	r4, [r7, #16]
 800c09e:	4630      	mov	r0, r6
 800c0a0:	b003      	add	sp, #12
 800c0a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c0a6:	6812      	ldr	r2, [r2, #0]
 800c0a8:	3b04      	subs	r3, #4
 800c0aa:	2a00      	cmp	r2, #0
 800c0ac:	d1cc      	bne.n	800c048 <quorem+0x9c>
 800c0ae:	3c01      	subs	r4, #1
 800c0b0:	e7c7      	b.n	800c042 <quorem+0x96>
 800c0b2:	6812      	ldr	r2, [r2, #0]
 800c0b4:	3b04      	subs	r3, #4
 800c0b6:	2a00      	cmp	r2, #0
 800c0b8:	d1f0      	bne.n	800c09c <quorem+0xf0>
 800c0ba:	3c01      	subs	r4, #1
 800c0bc:	e7eb      	b.n	800c096 <quorem+0xea>
 800c0be:	2000      	movs	r0, #0
 800c0c0:	e7ee      	b.n	800c0a0 <quorem+0xf4>
 800c0c2:	0000      	movs	r0, r0
 800c0c4:	0000      	movs	r0, r0
	...

0800c0c8 <_dtoa_r>:
 800c0c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c0cc:	ed2d 8b04 	vpush	{d8-d9}
 800c0d0:	ec57 6b10 	vmov	r6, r7, d0
 800c0d4:	b093      	sub	sp, #76	; 0x4c
 800c0d6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800c0d8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800c0dc:	9106      	str	r1, [sp, #24]
 800c0de:	ee10 aa10 	vmov	sl, s0
 800c0e2:	4604      	mov	r4, r0
 800c0e4:	9209      	str	r2, [sp, #36]	; 0x24
 800c0e6:	930c      	str	r3, [sp, #48]	; 0x30
 800c0e8:	46bb      	mov	fp, r7
 800c0ea:	b975      	cbnz	r5, 800c10a <_dtoa_r+0x42>
 800c0ec:	2010      	movs	r0, #16
 800c0ee:	f000 fddd 	bl	800ccac <malloc>
 800c0f2:	4602      	mov	r2, r0
 800c0f4:	6260      	str	r0, [r4, #36]	; 0x24
 800c0f6:	b920      	cbnz	r0, 800c102 <_dtoa_r+0x3a>
 800c0f8:	4ba7      	ldr	r3, [pc, #668]	; (800c398 <_dtoa_r+0x2d0>)
 800c0fa:	21ea      	movs	r1, #234	; 0xea
 800c0fc:	48a7      	ldr	r0, [pc, #668]	; (800c39c <_dtoa_r+0x2d4>)
 800c0fe:	f001 fbc3 	bl	800d888 <__assert_func>
 800c102:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800c106:	6005      	str	r5, [r0, #0]
 800c108:	60c5      	str	r5, [r0, #12]
 800c10a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c10c:	6819      	ldr	r1, [r3, #0]
 800c10e:	b151      	cbz	r1, 800c126 <_dtoa_r+0x5e>
 800c110:	685a      	ldr	r2, [r3, #4]
 800c112:	604a      	str	r2, [r1, #4]
 800c114:	2301      	movs	r3, #1
 800c116:	4093      	lsls	r3, r2
 800c118:	608b      	str	r3, [r1, #8]
 800c11a:	4620      	mov	r0, r4
 800c11c:	f000 fe0e 	bl	800cd3c <_Bfree>
 800c120:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c122:	2200      	movs	r2, #0
 800c124:	601a      	str	r2, [r3, #0]
 800c126:	1e3b      	subs	r3, r7, #0
 800c128:	bfaa      	itet	ge
 800c12a:	2300      	movge	r3, #0
 800c12c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800c130:	f8c8 3000 	strge.w	r3, [r8]
 800c134:	4b9a      	ldr	r3, [pc, #616]	; (800c3a0 <_dtoa_r+0x2d8>)
 800c136:	bfbc      	itt	lt
 800c138:	2201      	movlt	r2, #1
 800c13a:	f8c8 2000 	strlt.w	r2, [r8]
 800c13e:	ea33 030b 	bics.w	r3, r3, fp
 800c142:	d11b      	bne.n	800c17c <_dtoa_r+0xb4>
 800c144:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c146:	f242 730f 	movw	r3, #9999	; 0x270f
 800c14a:	6013      	str	r3, [r2, #0]
 800c14c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800c150:	4333      	orrs	r3, r6
 800c152:	f000 8592 	beq.w	800cc7a <_dtoa_r+0xbb2>
 800c156:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c158:	b963      	cbnz	r3, 800c174 <_dtoa_r+0xac>
 800c15a:	4b92      	ldr	r3, [pc, #584]	; (800c3a4 <_dtoa_r+0x2dc>)
 800c15c:	e022      	b.n	800c1a4 <_dtoa_r+0xdc>
 800c15e:	4b92      	ldr	r3, [pc, #584]	; (800c3a8 <_dtoa_r+0x2e0>)
 800c160:	9301      	str	r3, [sp, #4]
 800c162:	3308      	adds	r3, #8
 800c164:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800c166:	6013      	str	r3, [r2, #0]
 800c168:	9801      	ldr	r0, [sp, #4]
 800c16a:	b013      	add	sp, #76	; 0x4c
 800c16c:	ecbd 8b04 	vpop	{d8-d9}
 800c170:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c174:	4b8b      	ldr	r3, [pc, #556]	; (800c3a4 <_dtoa_r+0x2dc>)
 800c176:	9301      	str	r3, [sp, #4]
 800c178:	3303      	adds	r3, #3
 800c17a:	e7f3      	b.n	800c164 <_dtoa_r+0x9c>
 800c17c:	2200      	movs	r2, #0
 800c17e:	2300      	movs	r3, #0
 800c180:	4650      	mov	r0, sl
 800c182:	4659      	mov	r1, fp
 800c184:	f7f4 fcc0 	bl	8000b08 <__aeabi_dcmpeq>
 800c188:	ec4b ab19 	vmov	d9, sl, fp
 800c18c:	4680      	mov	r8, r0
 800c18e:	b158      	cbz	r0, 800c1a8 <_dtoa_r+0xe0>
 800c190:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c192:	2301      	movs	r3, #1
 800c194:	6013      	str	r3, [r2, #0]
 800c196:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c198:	2b00      	cmp	r3, #0
 800c19a:	f000 856b 	beq.w	800cc74 <_dtoa_r+0xbac>
 800c19e:	4883      	ldr	r0, [pc, #524]	; (800c3ac <_dtoa_r+0x2e4>)
 800c1a0:	6018      	str	r0, [r3, #0]
 800c1a2:	1e43      	subs	r3, r0, #1
 800c1a4:	9301      	str	r3, [sp, #4]
 800c1a6:	e7df      	b.n	800c168 <_dtoa_r+0xa0>
 800c1a8:	ec4b ab10 	vmov	d0, sl, fp
 800c1ac:	aa10      	add	r2, sp, #64	; 0x40
 800c1ae:	a911      	add	r1, sp, #68	; 0x44
 800c1b0:	4620      	mov	r0, r4
 800c1b2:	f001 f8ab 	bl	800d30c <__d2b>
 800c1b6:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800c1ba:	ee08 0a10 	vmov	s16, r0
 800c1be:	2d00      	cmp	r5, #0
 800c1c0:	f000 8084 	beq.w	800c2cc <_dtoa_r+0x204>
 800c1c4:	ee19 3a90 	vmov	r3, s19
 800c1c8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c1cc:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800c1d0:	4656      	mov	r6, sl
 800c1d2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800c1d6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800c1da:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800c1de:	4b74      	ldr	r3, [pc, #464]	; (800c3b0 <_dtoa_r+0x2e8>)
 800c1e0:	2200      	movs	r2, #0
 800c1e2:	4630      	mov	r0, r6
 800c1e4:	4639      	mov	r1, r7
 800c1e6:	f7f4 f86f 	bl	80002c8 <__aeabi_dsub>
 800c1ea:	a365      	add	r3, pc, #404	; (adr r3, 800c380 <_dtoa_r+0x2b8>)
 800c1ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c1f0:	f7f4 fa22 	bl	8000638 <__aeabi_dmul>
 800c1f4:	a364      	add	r3, pc, #400	; (adr r3, 800c388 <_dtoa_r+0x2c0>)
 800c1f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c1fa:	f7f4 f867 	bl	80002cc <__adddf3>
 800c1fe:	4606      	mov	r6, r0
 800c200:	4628      	mov	r0, r5
 800c202:	460f      	mov	r7, r1
 800c204:	f7f4 f9ae 	bl	8000564 <__aeabi_i2d>
 800c208:	a361      	add	r3, pc, #388	; (adr r3, 800c390 <_dtoa_r+0x2c8>)
 800c20a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c20e:	f7f4 fa13 	bl	8000638 <__aeabi_dmul>
 800c212:	4602      	mov	r2, r0
 800c214:	460b      	mov	r3, r1
 800c216:	4630      	mov	r0, r6
 800c218:	4639      	mov	r1, r7
 800c21a:	f7f4 f857 	bl	80002cc <__adddf3>
 800c21e:	4606      	mov	r6, r0
 800c220:	460f      	mov	r7, r1
 800c222:	f7f4 fcb9 	bl	8000b98 <__aeabi_d2iz>
 800c226:	2200      	movs	r2, #0
 800c228:	9000      	str	r0, [sp, #0]
 800c22a:	2300      	movs	r3, #0
 800c22c:	4630      	mov	r0, r6
 800c22e:	4639      	mov	r1, r7
 800c230:	f7f4 fc74 	bl	8000b1c <__aeabi_dcmplt>
 800c234:	b150      	cbz	r0, 800c24c <_dtoa_r+0x184>
 800c236:	9800      	ldr	r0, [sp, #0]
 800c238:	f7f4 f994 	bl	8000564 <__aeabi_i2d>
 800c23c:	4632      	mov	r2, r6
 800c23e:	463b      	mov	r3, r7
 800c240:	f7f4 fc62 	bl	8000b08 <__aeabi_dcmpeq>
 800c244:	b910      	cbnz	r0, 800c24c <_dtoa_r+0x184>
 800c246:	9b00      	ldr	r3, [sp, #0]
 800c248:	3b01      	subs	r3, #1
 800c24a:	9300      	str	r3, [sp, #0]
 800c24c:	9b00      	ldr	r3, [sp, #0]
 800c24e:	2b16      	cmp	r3, #22
 800c250:	d85a      	bhi.n	800c308 <_dtoa_r+0x240>
 800c252:	9a00      	ldr	r2, [sp, #0]
 800c254:	4b57      	ldr	r3, [pc, #348]	; (800c3b4 <_dtoa_r+0x2ec>)
 800c256:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c25a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c25e:	ec51 0b19 	vmov	r0, r1, d9
 800c262:	f7f4 fc5b 	bl	8000b1c <__aeabi_dcmplt>
 800c266:	2800      	cmp	r0, #0
 800c268:	d050      	beq.n	800c30c <_dtoa_r+0x244>
 800c26a:	9b00      	ldr	r3, [sp, #0]
 800c26c:	3b01      	subs	r3, #1
 800c26e:	9300      	str	r3, [sp, #0]
 800c270:	2300      	movs	r3, #0
 800c272:	930b      	str	r3, [sp, #44]	; 0x2c
 800c274:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c276:	1b5d      	subs	r5, r3, r5
 800c278:	1e6b      	subs	r3, r5, #1
 800c27a:	9305      	str	r3, [sp, #20]
 800c27c:	bf45      	ittet	mi
 800c27e:	f1c5 0301 	rsbmi	r3, r5, #1
 800c282:	9304      	strmi	r3, [sp, #16]
 800c284:	2300      	movpl	r3, #0
 800c286:	2300      	movmi	r3, #0
 800c288:	bf4c      	ite	mi
 800c28a:	9305      	strmi	r3, [sp, #20]
 800c28c:	9304      	strpl	r3, [sp, #16]
 800c28e:	9b00      	ldr	r3, [sp, #0]
 800c290:	2b00      	cmp	r3, #0
 800c292:	db3d      	blt.n	800c310 <_dtoa_r+0x248>
 800c294:	9b05      	ldr	r3, [sp, #20]
 800c296:	9a00      	ldr	r2, [sp, #0]
 800c298:	920a      	str	r2, [sp, #40]	; 0x28
 800c29a:	4413      	add	r3, r2
 800c29c:	9305      	str	r3, [sp, #20]
 800c29e:	2300      	movs	r3, #0
 800c2a0:	9307      	str	r3, [sp, #28]
 800c2a2:	9b06      	ldr	r3, [sp, #24]
 800c2a4:	2b09      	cmp	r3, #9
 800c2a6:	f200 8089 	bhi.w	800c3bc <_dtoa_r+0x2f4>
 800c2aa:	2b05      	cmp	r3, #5
 800c2ac:	bfc4      	itt	gt
 800c2ae:	3b04      	subgt	r3, #4
 800c2b0:	9306      	strgt	r3, [sp, #24]
 800c2b2:	9b06      	ldr	r3, [sp, #24]
 800c2b4:	f1a3 0302 	sub.w	r3, r3, #2
 800c2b8:	bfcc      	ite	gt
 800c2ba:	2500      	movgt	r5, #0
 800c2bc:	2501      	movle	r5, #1
 800c2be:	2b03      	cmp	r3, #3
 800c2c0:	f200 8087 	bhi.w	800c3d2 <_dtoa_r+0x30a>
 800c2c4:	e8df f003 	tbb	[pc, r3]
 800c2c8:	59383a2d 	.word	0x59383a2d
 800c2cc:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800c2d0:	441d      	add	r5, r3
 800c2d2:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800c2d6:	2b20      	cmp	r3, #32
 800c2d8:	bfc1      	itttt	gt
 800c2da:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800c2de:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800c2e2:	fa0b f303 	lslgt.w	r3, fp, r3
 800c2e6:	fa26 f000 	lsrgt.w	r0, r6, r0
 800c2ea:	bfda      	itte	le
 800c2ec:	f1c3 0320 	rsble	r3, r3, #32
 800c2f0:	fa06 f003 	lslle.w	r0, r6, r3
 800c2f4:	4318      	orrgt	r0, r3
 800c2f6:	f7f4 f925 	bl	8000544 <__aeabi_ui2d>
 800c2fa:	2301      	movs	r3, #1
 800c2fc:	4606      	mov	r6, r0
 800c2fe:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800c302:	3d01      	subs	r5, #1
 800c304:	930e      	str	r3, [sp, #56]	; 0x38
 800c306:	e76a      	b.n	800c1de <_dtoa_r+0x116>
 800c308:	2301      	movs	r3, #1
 800c30a:	e7b2      	b.n	800c272 <_dtoa_r+0x1aa>
 800c30c:	900b      	str	r0, [sp, #44]	; 0x2c
 800c30e:	e7b1      	b.n	800c274 <_dtoa_r+0x1ac>
 800c310:	9b04      	ldr	r3, [sp, #16]
 800c312:	9a00      	ldr	r2, [sp, #0]
 800c314:	1a9b      	subs	r3, r3, r2
 800c316:	9304      	str	r3, [sp, #16]
 800c318:	4253      	negs	r3, r2
 800c31a:	9307      	str	r3, [sp, #28]
 800c31c:	2300      	movs	r3, #0
 800c31e:	930a      	str	r3, [sp, #40]	; 0x28
 800c320:	e7bf      	b.n	800c2a2 <_dtoa_r+0x1da>
 800c322:	2300      	movs	r3, #0
 800c324:	9308      	str	r3, [sp, #32]
 800c326:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c328:	2b00      	cmp	r3, #0
 800c32a:	dc55      	bgt.n	800c3d8 <_dtoa_r+0x310>
 800c32c:	2301      	movs	r3, #1
 800c32e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800c332:	461a      	mov	r2, r3
 800c334:	9209      	str	r2, [sp, #36]	; 0x24
 800c336:	e00c      	b.n	800c352 <_dtoa_r+0x28a>
 800c338:	2301      	movs	r3, #1
 800c33a:	e7f3      	b.n	800c324 <_dtoa_r+0x25c>
 800c33c:	2300      	movs	r3, #0
 800c33e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c340:	9308      	str	r3, [sp, #32]
 800c342:	9b00      	ldr	r3, [sp, #0]
 800c344:	4413      	add	r3, r2
 800c346:	9302      	str	r3, [sp, #8]
 800c348:	3301      	adds	r3, #1
 800c34a:	2b01      	cmp	r3, #1
 800c34c:	9303      	str	r3, [sp, #12]
 800c34e:	bfb8      	it	lt
 800c350:	2301      	movlt	r3, #1
 800c352:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800c354:	2200      	movs	r2, #0
 800c356:	6042      	str	r2, [r0, #4]
 800c358:	2204      	movs	r2, #4
 800c35a:	f102 0614 	add.w	r6, r2, #20
 800c35e:	429e      	cmp	r6, r3
 800c360:	6841      	ldr	r1, [r0, #4]
 800c362:	d93d      	bls.n	800c3e0 <_dtoa_r+0x318>
 800c364:	4620      	mov	r0, r4
 800c366:	f000 fca9 	bl	800ccbc <_Balloc>
 800c36a:	9001      	str	r0, [sp, #4]
 800c36c:	2800      	cmp	r0, #0
 800c36e:	d13b      	bne.n	800c3e8 <_dtoa_r+0x320>
 800c370:	4b11      	ldr	r3, [pc, #68]	; (800c3b8 <_dtoa_r+0x2f0>)
 800c372:	4602      	mov	r2, r0
 800c374:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800c378:	e6c0      	b.n	800c0fc <_dtoa_r+0x34>
 800c37a:	2301      	movs	r3, #1
 800c37c:	e7df      	b.n	800c33e <_dtoa_r+0x276>
 800c37e:	bf00      	nop
 800c380:	636f4361 	.word	0x636f4361
 800c384:	3fd287a7 	.word	0x3fd287a7
 800c388:	8b60c8b3 	.word	0x8b60c8b3
 800c38c:	3fc68a28 	.word	0x3fc68a28
 800c390:	509f79fb 	.word	0x509f79fb
 800c394:	3fd34413 	.word	0x3fd34413
 800c398:	0800e699 	.word	0x0800e699
 800c39c:	0800e6b0 	.word	0x0800e6b0
 800c3a0:	7ff00000 	.word	0x7ff00000
 800c3a4:	0800e695 	.word	0x0800e695
 800c3a8:	0800e68c 	.word	0x0800e68c
 800c3ac:	0800e669 	.word	0x0800e669
 800c3b0:	3ff80000 	.word	0x3ff80000
 800c3b4:	0800e7a0 	.word	0x0800e7a0
 800c3b8:	0800e70b 	.word	0x0800e70b
 800c3bc:	2501      	movs	r5, #1
 800c3be:	2300      	movs	r3, #0
 800c3c0:	9306      	str	r3, [sp, #24]
 800c3c2:	9508      	str	r5, [sp, #32]
 800c3c4:	f04f 33ff 	mov.w	r3, #4294967295
 800c3c8:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800c3cc:	2200      	movs	r2, #0
 800c3ce:	2312      	movs	r3, #18
 800c3d0:	e7b0      	b.n	800c334 <_dtoa_r+0x26c>
 800c3d2:	2301      	movs	r3, #1
 800c3d4:	9308      	str	r3, [sp, #32]
 800c3d6:	e7f5      	b.n	800c3c4 <_dtoa_r+0x2fc>
 800c3d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c3da:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800c3de:	e7b8      	b.n	800c352 <_dtoa_r+0x28a>
 800c3e0:	3101      	adds	r1, #1
 800c3e2:	6041      	str	r1, [r0, #4]
 800c3e4:	0052      	lsls	r2, r2, #1
 800c3e6:	e7b8      	b.n	800c35a <_dtoa_r+0x292>
 800c3e8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c3ea:	9a01      	ldr	r2, [sp, #4]
 800c3ec:	601a      	str	r2, [r3, #0]
 800c3ee:	9b03      	ldr	r3, [sp, #12]
 800c3f0:	2b0e      	cmp	r3, #14
 800c3f2:	f200 809d 	bhi.w	800c530 <_dtoa_r+0x468>
 800c3f6:	2d00      	cmp	r5, #0
 800c3f8:	f000 809a 	beq.w	800c530 <_dtoa_r+0x468>
 800c3fc:	9b00      	ldr	r3, [sp, #0]
 800c3fe:	2b00      	cmp	r3, #0
 800c400:	dd32      	ble.n	800c468 <_dtoa_r+0x3a0>
 800c402:	4ab7      	ldr	r2, [pc, #732]	; (800c6e0 <_dtoa_r+0x618>)
 800c404:	f003 030f 	and.w	r3, r3, #15
 800c408:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800c40c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800c410:	9b00      	ldr	r3, [sp, #0]
 800c412:	05d8      	lsls	r0, r3, #23
 800c414:	ea4f 1723 	mov.w	r7, r3, asr #4
 800c418:	d516      	bpl.n	800c448 <_dtoa_r+0x380>
 800c41a:	4bb2      	ldr	r3, [pc, #712]	; (800c6e4 <_dtoa_r+0x61c>)
 800c41c:	ec51 0b19 	vmov	r0, r1, d9
 800c420:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800c424:	f7f4 fa32 	bl	800088c <__aeabi_ddiv>
 800c428:	f007 070f 	and.w	r7, r7, #15
 800c42c:	4682      	mov	sl, r0
 800c42e:	468b      	mov	fp, r1
 800c430:	2503      	movs	r5, #3
 800c432:	4eac      	ldr	r6, [pc, #688]	; (800c6e4 <_dtoa_r+0x61c>)
 800c434:	b957      	cbnz	r7, 800c44c <_dtoa_r+0x384>
 800c436:	4642      	mov	r2, r8
 800c438:	464b      	mov	r3, r9
 800c43a:	4650      	mov	r0, sl
 800c43c:	4659      	mov	r1, fp
 800c43e:	f7f4 fa25 	bl	800088c <__aeabi_ddiv>
 800c442:	4682      	mov	sl, r0
 800c444:	468b      	mov	fp, r1
 800c446:	e028      	b.n	800c49a <_dtoa_r+0x3d2>
 800c448:	2502      	movs	r5, #2
 800c44a:	e7f2      	b.n	800c432 <_dtoa_r+0x36a>
 800c44c:	07f9      	lsls	r1, r7, #31
 800c44e:	d508      	bpl.n	800c462 <_dtoa_r+0x39a>
 800c450:	4640      	mov	r0, r8
 800c452:	4649      	mov	r1, r9
 800c454:	e9d6 2300 	ldrd	r2, r3, [r6]
 800c458:	f7f4 f8ee 	bl	8000638 <__aeabi_dmul>
 800c45c:	3501      	adds	r5, #1
 800c45e:	4680      	mov	r8, r0
 800c460:	4689      	mov	r9, r1
 800c462:	107f      	asrs	r7, r7, #1
 800c464:	3608      	adds	r6, #8
 800c466:	e7e5      	b.n	800c434 <_dtoa_r+0x36c>
 800c468:	f000 809b 	beq.w	800c5a2 <_dtoa_r+0x4da>
 800c46c:	9b00      	ldr	r3, [sp, #0]
 800c46e:	4f9d      	ldr	r7, [pc, #628]	; (800c6e4 <_dtoa_r+0x61c>)
 800c470:	425e      	negs	r6, r3
 800c472:	4b9b      	ldr	r3, [pc, #620]	; (800c6e0 <_dtoa_r+0x618>)
 800c474:	f006 020f 	and.w	r2, r6, #15
 800c478:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c47c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c480:	ec51 0b19 	vmov	r0, r1, d9
 800c484:	f7f4 f8d8 	bl	8000638 <__aeabi_dmul>
 800c488:	1136      	asrs	r6, r6, #4
 800c48a:	4682      	mov	sl, r0
 800c48c:	468b      	mov	fp, r1
 800c48e:	2300      	movs	r3, #0
 800c490:	2502      	movs	r5, #2
 800c492:	2e00      	cmp	r6, #0
 800c494:	d17a      	bne.n	800c58c <_dtoa_r+0x4c4>
 800c496:	2b00      	cmp	r3, #0
 800c498:	d1d3      	bne.n	800c442 <_dtoa_r+0x37a>
 800c49a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c49c:	2b00      	cmp	r3, #0
 800c49e:	f000 8082 	beq.w	800c5a6 <_dtoa_r+0x4de>
 800c4a2:	4b91      	ldr	r3, [pc, #580]	; (800c6e8 <_dtoa_r+0x620>)
 800c4a4:	2200      	movs	r2, #0
 800c4a6:	4650      	mov	r0, sl
 800c4a8:	4659      	mov	r1, fp
 800c4aa:	f7f4 fb37 	bl	8000b1c <__aeabi_dcmplt>
 800c4ae:	2800      	cmp	r0, #0
 800c4b0:	d079      	beq.n	800c5a6 <_dtoa_r+0x4de>
 800c4b2:	9b03      	ldr	r3, [sp, #12]
 800c4b4:	2b00      	cmp	r3, #0
 800c4b6:	d076      	beq.n	800c5a6 <_dtoa_r+0x4de>
 800c4b8:	9b02      	ldr	r3, [sp, #8]
 800c4ba:	2b00      	cmp	r3, #0
 800c4bc:	dd36      	ble.n	800c52c <_dtoa_r+0x464>
 800c4be:	9b00      	ldr	r3, [sp, #0]
 800c4c0:	4650      	mov	r0, sl
 800c4c2:	4659      	mov	r1, fp
 800c4c4:	1e5f      	subs	r7, r3, #1
 800c4c6:	2200      	movs	r2, #0
 800c4c8:	4b88      	ldr	r3, [pc, #544]	; (800c6ec <_dtoa_r+0x624>)
 800c4ca:	f7f4 f8b5 	bl	8000638 <__aeabi_dmul>
 800c4ce:	9e02      	ldr	r6, [sp, #8]
 800c4d0:	4682      	mov	sl, r0
 800c4d2:	468b      	mov	fp, r1
 800c4d4:	3501      	adds	r5, #1
 800c4d6:	4628      	mov	r0, r5
 800c4d8:	f7f4 f844 	bl	8000564 <__aeabi_i2d>
 800c4dc:	4652      	mov	r2, sl
 800c4de:	465b      	mov	r3, fp
 800c4e0:	f7f4 f8aa 	bl	8000638 <__aeabi_dmul>
 800c4e4:	4b82      	ldr	r3, [pc, #520]	; (800c6f0 <_dtoa_r+0x628>)
 800c4e6:	2200      	movs	r2, #0
 800c4e8:	f7f3 fef0 	bl	80002cc <__adddf3>
 800c4ec:	46d0      	mov	r8, sl
 800c4ee:	46d9      	mov	r9, fp
 800c4f0:	4682      	mov	sl, r0
 800c4f2:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800c4f6:	2e00      	cmp	r6, #0
 800c4f8:	d158      	bne.n	800c5ac <_dtoa_r+0x4e4>
 800c4fa:	4b7e      	ldr	r3, [pc, #504]	; (800c6f4 <_dtoa_r+0x62c>)
 800c4fc:	2200      	movs	r2, #0
 800c4fe:	4640      	mov	r0, r8
 800c500:	4649      	mov	r1, r9
 800c502:	f7f3 fee1 	bl	80002c8 <__aeabi_dsub>
 800c506:	4652      	mov	r2, sl
 800c508:	465b      	mov	r3, fp
 800c50a:	4680      	mov	r8, r0
 800c50c:	4689      	mov	r9, r1
 800c50e:	f7f4 fb23 	bl	8000b58 <__aeabi_dcmpgt>
 800c512:	2800      	cmp	r0, #0
 800c514:	f040 8295 	bne.w	800ca42 <_dtoa_r+0x97a>
 800c518:	4652      	mov	r2, sl
 800c51a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800c51e:	4640      	mov	r0, r8
 800c520:	4649      	mov	r1, r9
 800c522:	f7f4 fafb 	bl	8000b1c <__aeabi_dcmplt>
 800c526:	2800      	cmp	r0, #0
 800c528:	f040 8289 	bne.w	800ca3e <_dtoa_r+0x976>
 800c52c:	ec5b ab19 	vmov	sl, fp, d9
 800c530:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c532:	2b00      	cmp	r3, #0
 800c534:	f2c0 8148 	blt.w	800c7c8 <_dtoa_r+0x700>
 800c538:	9a00      	ldr	r2, [sp, #0]
 800c53a:	2a0e      	cmp	r2, #14
 800c53c:	f300 8144 	bgt.w	800c7c8 <_dtoa_r+0x700>
 800c540:	4b67      	ldr	r3, [pc, #412]	; (800c6e0 <_dtoa_r+0x618>)
 800c542:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c546:	e9d3 8900 	ldrd	r8, r9, [r3]
 800c54a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c54c:	2b00      	cmp	r3, #0
 800c54e:	f280 80d5 	bge.w	800c6fc <_dtoa_r+0x634>
 800c552:	9b03      	ldr	r3, [sp, #12]
 800c554:	2b00      	cmp	r3, #0
 800c556:	f300 80d1 	bgt.w	800c6fc <_dtoa_r+0x634>
 800c55a:	f040 826f 	bne.w	800ca3c <_dtoa_r+0x974>
 800c55e:	4b65      	ldr	r3, [pc, #404]	; (800c6f4 <_dtoa_r+0x62c>)
 800c560:	2200      	movs	r2, #0
 800c562:	4640      	mov	r0, r8
 800c564:	4649      	mov	r1, r9
 800c566:	f7f4 f867 	bl	8000638 <__aeabi_dmul>
 800c56a:	4652      	mov	r2, sl
 800c56c:	465b      	mov	r3, fp
 800c56e:	f7f4 fae9 	bl	8000b44 <__aeabi_dcmpge>
 800c572:	9e03      	ldr	r6, [sp, #12]
 800c574:	4637      	mov	r7, r6
 800c576:	2800      	cmp	r0, #0
 800c578:	f040 8245 	bne.w	800ca06 <_dtoa_r+0x93e>
 800c57c:	9d01      	ldr	r5, [sp, #4]
 800c57e:	2331      	movs	r3, #49	; 0x31
 800c580:	f805 3b01 	strb.w	r3, [r5], #1
 800c584:	9b00      	ldr	r3, [sp, #0]
 800c586:	3301      	adds	r3, #1
 800c588:	9300      	str	r3, [sp, #0]
 800c58a:	e240      	b.n	800ca0e <_dtoa_r+0x946>
 800c58c:	07f2      	lsls	r2, r6, #31
 800c58e:	d505      	bpl.n	800c59c <_dtoa_r+0x4d4>
 800c590:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c594:	f7f4 f850 	bl	8000638 <__aeabi_dmul>
 800c598:	3501      	adds	r5, #1
 800c59a:	2301      	movs	r3, #1
 800c59c:	1076      	asrs	r6, r6, #1
 800c59e:	3708      	adds	r7, #8
 800c5a0:	e777      	b.n	800c492 <_dtoa_r+0x3ca>
 800c5a2:	2502      	movs	r5, #2
 800c5a4:	e779      	b.n	800c49a <_dtoa_r+0x3d2>
 800c5a6:	9f00      	ldr	r7, [sp, #0]
 800c5a8:	9e03      	ldr	r6, [sp, #12]
 800c5aa:	e794      	b.n	800c4d6 <_dtoa_r+0x40e>
 800c5ac:	9901      	ldr	r1, [sp, #4]
 800c5ae:	4b4c      	ldr	r3, [pc, #304]	; (800c6e0 <_dtoa_r+0x618>)
 800c5b0:	4431      	add	r1, r6
 800c5b2:	910d      	str	r1, [sp, #52]	; 0x34
 800c5b4:	9908      	ldr	r1, [sp, #32]
 800c5b6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800c5ba:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800c5be:	2900      	cmp	r1, #0
 800c5c0:	d043      	beq.n	800c64a <_dtoa_r+0x582>
 800c5c2:	494d      	ldr	r1, [pc, #308]	; (800c6f8 <_dtoa_r+0x630>)
 800c5c4:	2000      	movs	r0, #0
 800c5c6:	f7f4 f961 	bl	800088c <__aeabi_ddiv>
 800c5ca:	4652      	mov	r2, sl
 800c5cc:	465b      	mov	r3, fp
 800c5ce:	f7f3 fe7b 	bl	80002c8 <__aeabi_dsub>
 800c5d2:	9d01      	ldr	r5, [sp, #4]
 800c5d4:	4682      	mov	sl, r0
 800c5d6:	468b      	mov	fp, r1
 800c5d8:	4649      	mov	r1, r9
 800c5da:	4640      	mov	r0, r8
 800c5dc:	f7f4 fadc 	bl	8000b98 <__aeabi_d2iz>
 800c5e0:	4606      	mov	r6, r0
 800c5e2:	f7f3 ffbf 	bl	8000564 <__aeabi_i2d>
 800c5e6:	4602      	mov	r2, r0
 800c5e8:	460b      	mov	r3, r1
 800c5ea:	4640      	mov	r0, r8
 800c5ec:	4649      	mov	r1, r9
 800c5ee:	f7f3 fe6b 	bl	80002c8 <__aeabi_dsub>
 800c5f2:	3630      	adds	r6, #48	; 0x30
 800c5f4:	f805 6b01 	strb.w	r6, [r5], #1
 800c5f8:	4652      	mov	r2, sl
 800c5fa:	465b      	mov	r3, fp
 800c5fc:	4680      	mov	r8, r0
 800c5fe:	4689      	mov	r9, r1
 800c600:	f7f4 fa8c 	bl	8000b1c <__aeabi_dcmplt>
 800c604:	2800      	cmp	r0, #0
 800c606:	d163      	bne.n	800c6d0 <_dtoa_r+0x608>
 800c608:	4642      	mov	r2, r8
 800c60a:	464b      	mov	r3, r9
 800c60c:	4936      	ldr	r1, [pc, #216]	; (800c6e8 <_dtoa_r+0x620>)
 800c60e:	2000      	movs	r0, #0
 800c610:	f7f3 fe5a 	bl	80002c8 <__aeabi_dsub>
 800c614:	4652      	mov	r2, sl
 800c616:	465b      	mov	r3, fp
 800c618:	f7f4 fa80 	bl	8000b1c <__aeabi_dcmplt>
 800c61c:	2800      	cmp	r0, #0
 800c61e:	f040 80b5 	bne.w	800c78c <_dtoa_r+0x6c4>
 800c622:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c624:	429d      	cmp	r5, r3
 800c626:	d081      	beq.n	800c52c <_dtoa_r+0x464>
 800c628:	4b30      	ldr	r3, [pc, #192]	; (800c6ec <_dtoa_r+0x624>)
 800c62a:	2200      	movs	r2, #0
 800c62c:	4650      	mov	r0, sl
 800c62e:	4659      	mov	r1, fp
 800c630:	f7f4 f802 	bl	8000638 <__aeabi_dmul>
 800c634:	4b2d      	ldr	r3, [pc, #180]	; (800c6ec <_dtoa_r+0x624>)
 800c636:	4682      	mov	sl, r0
 800c638:	468b      	mov	fp, r1
 800c63a:	4640      	mov	r0, r8
 800c63c:	4649      	mov	r1, r9
 800c63e:	2200      	movs	r2, #0
 800c640:	f7f3 fffa 	bl	8000638 <__aeabi_dmul>
 800c644:	4680      	mov	r8, r0
 800c646:	4689      	mov	r9, r1
 800c648:	e7c6      	b.n	800c5d8 <_dtoa_r+0x510>
 800c64a:	4650      	mov	r0, sl
 800c64c:	4659      	mov	r1, fp
 800c64e:	f7f3 fff3 	bl	8000638 <__aeabi_dmul>
 800c652:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c654:	9d01      	ldr	r5, [sp, #4]
 800c656:	930f      	str	r3, [sp, #60]	; 0x3c
 800c658:	4682      	mov	sl, r0
 800c65a:	468b      	mov	fp, r1
 800c65c:	4649      	mov	r1, r9
 800c65e:	4640      	mov	r0, r8
 800c660:	f7f4 fa9a 	bl	8000b98 <__aeabi_d2iz>
 800c664:	4606      	mov	r6, r0
 800c666:	f7f3 ff7d 	bl	8000564 <__aeabi_i2d>
 800c66a:	3630      	adds	r6, #48	; 0x30
 800c66c:	4602      	mov	r2, r0
 800c66e:	460b      	mov	r3, r1
 800c670:	4640      	mov	r0, r8
 800c672:	4649      	mov	r1, r9
 800c674:	f7f3 fe28 	bl	80002c8 <__aeabi_dsub>
 800c678:	f805 6b01 	strb.w	r6, [r5], #1
 800c67c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c67e:	429d      	cmp	r5, r3
 800c680:	4680      	mov	r8, r0
 800c682:	4689      	mov	r9, r1
 800c684:	f04f 0200 	mov.w	r2, #0
 800c688:	d124      	bne.n	800c6d4 <_dtoa_r+0x60c>
 800c68a:	4b1b      	ldr	r3, [pc, #108]	; (800c6f8 <_dtoa_r+0x630>)
 800c68c:	4650      	mov	r0, sl
 800c68e:	4659      	mov	r1, fp
 800c690:	f7f3 fe1c 	bl	80002cc <__adddf3>
 800c694:	4602      	mov	r2, r0
 800c696:	460b      	mov	r3, r1
 800c698:	4640      	mov	r0, r8
 800c69a:	4649      	mov	r1, r9
 800c69c:	f7f4 fa5c 	bl	8000b58 <__aeabi_dcmpgt>
 800c6a0:	2800      	cmp	r0, #0
 800c6a2:	d173      	bne.n	800c78c <_dtoa_r+0x6c4>
 800c6a4:	4652      	mov	r2, sl
 800c6a6:	465b      	mov	r3, fp
 800c6a8:	4913      	ldr	r1, [pc, #76]	; (800c6f8 <_dtoa_r+0x630>)
 800c6aa:	2000      	movs	r0, #0
 800c6ac:	f7f3 fe0c 	bl	80002c8 <__aeabi_dsub>
 800c6b0:	4602      	mov	r2, r0
 800c6b2:	460b      	mov	r3, r1
 800c6b4:	4640      	mov	r0, r8
 800c6b6:	4649      	mov	r1, r9
 800c6b8:	f7f4 fa30 	bl	8000b1c <__aeabi_dcmplt>
 800c6bc:	2800      	cmp	r0, #0
 800c6be:	f43f af35 	beq.w	800c52c <_dtoa_r+0x464>
 800c6c2:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800c6c4:	1e6b      	subs	r3, r5, #1
 800c6c6:	930f      	str	r3, [sp, #60]	; 0x3c
 800c6c8:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800c6cc:	2b30      	cmp	r3, #48	; 0x30
 800c6ce:	d0f8      	beq.n	800c6c2 <_dtoa_r+0x5fa>
 800c6d0:	9700      	str	r7, [sp, #0]
 800c6d2:	e049      	b.n	800c768 <_dtoa_r+0x6a0>
 800c6d4:	4b05      	ldr	r3, [pc, #20]	; (800c6ec <_dtoa_r+0x624>)
 800c6d6:	f7f3 ffaf 	bl	8000638 <__aeabi_dmul>
 800c6da:	4680      	mov	r8, r0
 800c6dc:	4689      	mov	r9, r1
 800c6de:	e7bd      	b.n	800c65c <_dtoa_r+0x594>
 800c6e0:	0800e7a0 	.word	0x0800e7a0
 800c6e4:	0800e778 	.word	0x0800e778
 800c6e8:	3ff00000 	.word	0x3ff00000
 800c6ec:	40240000 	.word	0x40240000
 800c6f0:	401c0000 	.word	0x401c0000
 800c6f4:	40140000 	.word	0x40140000
 800c6f8:	3fe00000 	.word	0x3fe00000
 800c6fc:	9d01      	ldr	r5, [sp, #4]
 800c6fe:	4656      	mov	r6, sl
 800c700:	465f      	mov	r7, fp
 800c702:	4642      	mov	r2, r8
 800c704:	464b      	mov	r3, r9
 800c706:	4630      	mov	r0, r6
 800c708:	4639      	mov	r1, r7
 800c70a:	f7f4 f8bf 	bl	800088c <__aeabi_ddiv>
 800c70e:	f7f4 fa43 	bl	8000b98 <__aeabi_d2iz>
 800c712:	4682      	mov	sl, r0
 800c714:	f7f3 ff26 	bl	8000564 <__aeabi_i2d>
 800c718:	4642      	mov	r2, r8
 800c71a:	464b      	mov	r3, r9
 800c71c:	f7f3 ff8c 	bl	8000638 <__aeabi_dmul>
 800c720:	4602      	mov	r2, r0
 800c722:	460b      	mov	r3, r1
 800c724:	4630      	mov	r0, r6
 800c726:	4639      	mov	r1, r7
 800c728:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800c72c:	f7f3 fdcc 	bl	80002c8 <__aeabi_dsub>
 800c730:	f805 6b01 	strb.w	r6, [r5], #1
 800c734:	9e01      	ldr	r6, [sp, #4]
 800c736:	9f03      	ldr	r7, [sp, #12]
 800c738:	1bae      	subs	r6, r5, r6
 800c73a:	42b7      	cmp	r7, r6
 800c73c:	4602      	mov	r2, r0
 800c73e:	460b      	mov	r3, r1
 800c740:	d135      	bne.n	800c7ae <_dtoa_r+0x6e6>
 800c742:	f7f3 fdc3 	bl	80002cc <__adddf3>
 800c746:	4642      	mov	r2, r8
 800c748:	464b      	mov	r3, r9
 800c74a:	4606      	mov	r6, r0
 800c74c:	460f      	mov	r7, r1
 800c74e:	f7f4 fa03 	bl	8000b58 <__aeabi_dcmpgt>
 800c752:	b9d0      	cbnz	r0, 800c78a <_dtoa_r+0x6c2>
 800c754:	4642      	mov	r2, r8
 800c756:	464b      	mov	r3, r9
 800c758:	4630      	mov	r0, r6
 800c75a:	4639      	mov	r1, r7
 800c75c:	f7f4 f9d4 	bl	8000b08 <__aeabi_dcmpeq>
 800c760:	b110      	cbz	r0, 800c768 <_dtoa_r+0x6a0>
 800c762:	f01a 0f01 	tst.w	sl, #1
 800c766:	d110      	bne.n	800c78a <_dtoa_r+0x6c2>
 800c768:	4620      	mov	r0, r4
 800c76a:	ee18 1a10 	vmov	r1, s16
 800c76e:	f000 fae5 	bl	800cd3c <_Bfree>
 800c772:	2300      	movs	r3, #0
 800c774:	9800      	ldr	r0, [sp, #0]
 800c776:	702b      	strb	r3, [r5, #0]
 800c778:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c77a:	3001      	adds	r0, #1
 800c77c:	6018      	str	r0, [r3, #0]
 800c77e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c780:	2b00      	cmp	r3, #0
 800c782:	f43f acf1 	beq.w	800c168 <_dtoa_r+0xa0>
 800c786:	601d      	str	r5, [r3, #0]
 800c788:	e4ee      	b.n	800c168 <_dtoa_r+0xa0>
 800c78a:	9f00      	ldr	r7, [sp, #0]
 800c78c:	462b      	mov	r3, r5
 800c78e:	461d      	mov	r5, r3
 800c790:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c794:	2a39      	cmp	r2, #57	; 0x39
 800c796:	d106      	bne.n	800c7a6 <_dtoa_r+0x6de>
 800c798:	9a01      	ldr	r2, [sp, #4]
 800c79a:	429a      	cmp	r2, r3
 800c79c:	d1f7      	bne.n	800c78e <_dtoa_r+0x6c6>
 800c79e:	9901      	ldr	r1, [sp, #4]
 800c7a0:	2230      	movs	r2, #48	; 0x30
 800c7a2:	3701      	adds	r7, #1
 800c7a4:	700a      	strb	r2, [r1, #0]
 800c7a6:	781a      	ldrb	r2, [r3, #0]
 800c7a8:	3201      	adds	r2, #1
 800c7aa:	701a      	strb	r2, [r3, #0]
 800c7ac:	e790      	b.n	800c6d0 <_dtoa_r+0x608>
 800c7ae:	4ba6      	ldr	r3, [pc, #664]	; (800ca48 <_dtoa_r+0x980>)
 800c7b0:	2200      	movs	r2, #0
 800c7b2:	f7f3 ff41 	bl	8000638 <__aeabi_dmul>
 800c7b6:	2200      	movs	r2, #0
 800c7b8:	2300      	movs	r3, #0
 800c7ba:	4606      	mov	r6, r0
 800c7bc:	460f      	mov	r7, r1
 800c7be:	f7f4 f9a3 	bl	8000b08 <__aeabi_dcmpeq>
 800c7c2:	2800      	cmp	r0, #0
 800c7c4:	d09d      	beq.n	800c702 <_dtoa_r+0x63a>
 800c7c6:	e7cf      	b.n	800c768 <_dtoa_r+0x6a0>
 800c7c8:	9a08      	ldr	r2, [sp, #32]
 800c7ca:	2a00      	cmp	r2, #0
 800c7cc:	f000 80d7 	beq.w	800c97e <_dtoa_r+0x8b6>
 800c7d0:	9a06      	ldr	r2, [sp, #24]
 800c7d2:	2a01      	cmp	r2, #1
 800c7d4:	f300 80ba 	bgt.w	800c94c <_dtoa_r+0x884>
 800c7d8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c7da:	2a00      	cmp	r2, #0
 800c7dc:	f000 80b2 	beq.w	800c944 <_dtoa_r+0x87c>
 800c7e0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800c7e4:	9e07      	ldr	r6, [sp, #28]
 800c7e6:	9d04      	ldr	r5, [sp, #16]
 800c7e8:	9a04      	ldr	r2, [sp, #16]
 800c7ea:	441a      	add	r2, r3
 800c7ec:	9204      	str	r2, [sp, #16]
 800c7ee:	9a05      	ldr	r2, [sp, #20]
 800c7f0:	2101      	movs	r1, #1
 800c7f2:	441a      	add	r2, r3
 800c7f4:	4620      	mov	r0, r4
 800c7f6:	9205      	str	r2, [sp, #20]
 800c7f8:	f000 fb58 	bl	800ceac <__i2b>
 800c7fc:	4607      	mov	r7, r0
 800c7fe:	2d00      	cmp	r5, #0
 800c800:	dd0c      	ble.n	800c81c <_dtoa_r+0x754>
 800c802:	9b05      	ldr	r3, [sp, #20]
 800c804:	2b00      	cmp	r3, #0
 800c806:	dd09      	ble.n	800c81c <_dtoa_r+0x754>
 800c808:	42ab      	cmp	r3, r5
 800c80a:	9a04      	ldr	r2, [sp, #16]
 800c80c:	bfa8      	it	ge
 800c80e:	462b      	movge	r3, r5
 800c810:	1ad2      	subs	r2, r2, r3
 800c812:	9204      	str	r2, [sp, #16]
 800c814:	9a05      	ldr	r2, [sp, #20]
 800c816:	1aed      	subs	r5, r5, r3
 800c818:	1ad3      	subs	r3, r2, r3
 800c81a:	9305      	str	r3, [sp, #20]
 800c81c:	9b07      	ldr	r3, [sp, #28]
 800c81e:	b31b      	cbz	r3, 800c868 <_dtoa_r+0x7a0>
 800c820:	9b08      	ldr	r3, [sp, #32]
 800c822:	2b00      	cmp	r3, #0
 800c824:	f000 80af 	beq.w	800c986 <_dtoa_r+0x8be>
 800c828:	2e00      	cmp	r6, #0
 800c82a:	dd13      	ble.n	800c854 <_dtoa_r+0x78c>
 800c82c:	4639      	mov	r1, r7
 800c82e:	4632      	mov	r2, r6
 800c830:	4620      	mov	r0, r4
 800c832:	f000 fbfb 	bl	800d02c <__pow5mult>
 800c836:	ee18 2a10 	vmov	r2, s16
 800c83a:	4601      	mov	r1, r0
 800c83c:	4607      	mov	r7, r0
 800c83e:	4620      	mov	r0, r4
 800c840:	f000 fb4a 	bl	800ced8 <__multiply>
 800c844:	ee18 1a10 	vmov	r1, s16
 800c848:	4680      	mov	r8, r0
 800c84a:	4620      	mov	r0, r4
 800c84c:	f000 fa76 	bl	800cd3c <_Bfree>
 800c850:	ee08 8a10 	vmov	s16, r8
 800c854:	9b07      	ldr	r3, [sp, #28]
 800c856:	1b9a      	subs	r2, r3, r6
 800c858:	d006      	beq.n	800c868 <_dtoa_r+0x7a0>
 800c85a:	ee18 1a10 	vmov	r1, s16
 800c85e:	4620      	mov	r0, r4
 800c860:	f000 fbe4 	bl	800d02c <__pow5mult>
 800c864:	ee08 0a10 	vmov	s16, r0
 800c868:	2101      	movs	r1, #1
 800c86a:	4620      	mov	r0, r4
 800c86c:	f000 fb1e 	bl	800ceac <__i2b>
 800c870:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c872:	2b00      	cmp	r3, #0
 800c874:	4606      	mov	r6, r0
 800c876:	f340 8088 	ble.w	800c98a <_dtoa_r+0x8c2>
 800c87a:	461a      	mov	r2, r3
 800c87c:	4601      	mov	r1, r0
 800c87e:	4620      	mov	r0, r4
 800c880:	f000 fbd4 	bl	800d02c <__pow5mult>
 800c884:	9b06      	ldr	r3, [sp, #24]
 800c886:	2b01      	cmp	r3, #1
 800c888:	4606      	mov	r6, r0
 800c88a:	f340 8081 	ble.w	800c990 <_dtoa_r+0x8c8>
 800c88e:	f04f 0800 	mov.w	r8, #0
 800c892:	6933      	ldr	r3, [r6, #16]
 800c894:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800c898:	6918      	ldr	r0, [r3, #16]
 800c89a:	f000 fab7 	bl	800ce0c <__hi0bits>
 800c89e:	f1c0 0020 	rsb	r0, r0, #32
 800c8a2:	9b05      	ldr	r3, [sp, #20]
 800c8a4:	4418      	add	r0, r3
 800c8a6:	f010 001f 	ands.w	r0, r0, #31
 800c8aa:	f000 8092 	beq.w	800c9d2 <_dtoa_r+0x90a>
 800c8ae:	f1c0 0320 	rsb	r3, r0, #32
 800c8b2:	2b04      	cmp	r3, #4
 800c8b4:	f340 808a 	ble.w	800c9cc <_dtoa_r+0x904>
 800c8b8:	f1c0 001c 	rsb	r0, r0, #28
 800c8bc:	9b04      	ldr	r3, [sp, #16]
 800c8be:	4403      	add	r3, r0
 800c8c0:	9304      	str	r3, [sp, #16]
 800c8c2:	9b05      	ldr	r3, [sp, #20]
 800c8c4:	4403      	add	r3, r0
 800c8c6:	4405      	add	r5, r0
 800c8c8:	9305      	str	r3, [sp, #20]
 800c8ca:	9b04      	ldr	r3, [sp, #16]
 800c8cc:	2b00      	cmp	r3, #0
 800c8ce:	dd07      	ble.n	800c8e0 <_dtoa_r+0x818>
 800c8d0:	ee18 1a10 	vmov	r1, s16
 800c8d4:	461a      	mov	r2, r3
 800c8d6:	4620      	mov	r0, r4
 800c8d8:	f000 fc02 	bl	800d0e0 <__lshift>
 800c8dc:	ee08 0a10 	vmov	s16, r0
 800c8e0:	9b05      	ldr	r3, [sp, #20]
 800c8e2:	2b00      	cmp	r3, #0
 800c8e4:	dd05      	ble.n	800c8f2 <_dtoa_r+0x82a>
 800c8e6:	4631      	mov	r1, r6
 800c8e8:	461a      	mov	r2, r3
 800c8ea:	4620      	mov	r0, r4
 800c8ec:	f000 fbf8 	bl	800d0e0 <__lshift>
 800c8f0:	4606      	mov	r6, r0
 800c8f2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c8f4:	2b00      	cmp	r3, #0
 800c8f6:	d06e      	beq.n	800c9d6 <_dtoa_r+0x90e>
 800c8f8:	ee18 0a10 	vmov	r0, s16
 800c8fc:	4631      	mov	r1, r6
 800c8fe:	f000 fc5f 	bl	800d1c0 <__mcmp>
 800c902:	2800      	cmp	r0, #0
 800c904:	da67      	bge.n	800c9d6 <_dtoa_r+0x90e>
 800c906:	9b00      	ldr	r3, [sp, #0]
 800c908:	3b01      	subs	r3, #1
 800c90a:	ee18 1a10 	vmov	r1, s16
 800c90e:	9300      	str	r3, [sp, #0]
 800c910:	220a      	movs	r2, #10
 800c912:	2300      	movs	r3, #0
 800c914:	4620      	mov	r0, r4
 800c916:	f000 fa33 	bl	800cd80 <__multadd>
 800c91a:	9b08      	ldr	r3, [sp, #32]
 800c91c:	ee08 0a10 	vmov	s16, r0
 800c920:	2b00      	cmp	r3, #0
 800c922:	f000 81b1 	beq.w	800cc88 <_dtoa_r+0xbc0>
 800c926:	2300      	movs	r3, #0
 800c928:	4639      	mov	r1, r7
 800c92a:	220a      	movs	r2, #10
 800c92c:	4620      	mov	r0, r4
 800c92e:	f000 fa27 	bl	800cd80 <__multadd>
 800c932:	9b02      	ldr	r3, [sp, #8]
 800c934:	2b00      	cmp	r3, #0
 800c936:	4607      	mov	r7, r0
 800c938:	f300 808e 	bgt.w	800ca58 <_dtoa_r+0x990>
 800c93c:	9b06      	ldr	r3, [sp, #24]
 800c93e:	2b02      	cmp	r3, #2
 800c940:	dc51      	bgt.n	800c9e6 <_dtoa_r+0x91e>
 800c942:	e089      	b.n	800ca58 <_dtoa_r+0x990>
 800c944:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c946:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800c94a:	e74b      	b.n	800c7e4 <_dtoa_r+0x71c>
 800c94c:	9b03      	ldr	r3, [sp, #12]
 800c94e:	1e5e      	subs	r6, r3, #1
 800c950:	9b07      	ldr	r3, [sp, #28]
 800c952:	42b3      	cmp	r3, r6
 800c954:	bfbf      	itttt	lt
 800c956:	9b07      	ldrlt	r3, [sp, #28]
 800c958:	9607      	strlt	r6, [sp, #28]
 800c95a:	1af2      	sublt	r2, r6, r3
 800c95c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800c95e:	bfb6      	itet	lt
 800c960:	189b      	addlt	r3, r3, r2
 800c962:	1b9e      	subge	r6, r3, r6
 800c964:	930a      	strlt	r3, [sp, #40]	; 0x28
 800c966:	9b03      	ldr	r3, [sp, #12]
 800c968:	bfb8      	it	lt
 800c96a:	2600      	movlt	r6, #0
 800c96c:	2b00      	cmp	r3, #0
 800c96e:	bfb7      	itett	lt
 800c970:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800c974:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800c978:	1a9d      	sublt	r5, r3, r2
 800c97a:	2300      	movlt	r3, #0
 800c97c:	e734      	b.n	800c7e8 <_dtoa_r+0x720>
 800c97e:	9e07      	ldr	r6, [sp, #28]
 800c980:	9d04      	ldr	r5, [sp, #16]
 800c982:	9f08      	ldr	r7, [sp, #32]
 800c984:	e73b      	b.n	800c7fe <_dtoa_r+0x736>
 800c986:	9a07      	ldr	r2, [sp, #28]
 800c988:	e767      	b.n	800c85a <_dtoa_r+0x792>
 800c98a:	9b06      	ldr	r3, [sp, #24]
 800c98c:	2b01      	cmp	r3, #1
 800c98e:	dc18      	bgt.n	800c9c2 <_dtoa_r+0x8fa>
 800c990:	f1ba 0f00 	cmp.w	sl, #0
 800c994:	d115      	bne.n	800c9c2 <_dtoa_r+0x8fa>
 800c996:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800c99a:	b993      	cbnz	r3, 800c9c2 <_dtoa_r+0x8fa>
 800c99c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800c9a0:	0d1b      	lsrs	r3, r3, #20
 800c9a2:	051b      	lsls	r3, r3, #20
 800c9a4:	b183      	cbz	r3, 800c9c8 <_dtoa_r+0x900>
 800c9a6:	9b04      	ldr	r3, [sp, #16]
 800c9a8:	3301      	adds	r3, #1
 800c9aa:	9304      	str	r3, [sp, #16]
 800c9ac:	9b05      	ldr	r3, [sp, #20]
 800c9ae:	3301      	adds	r3, #1
 800c9b0:	9305      	str	r3, [sp, #20]
 800c9b2:	f04f 0801 	mov.w	r8, #1
 800c9b6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c9b8:	2b00      	cmp	r3, #0
 800c9ba:	f47f af6a 	bne.w	800c892 <_dtoa_r+0x7ca>
 800c9be:	2001      	movs	r0, #1
 800c9c0:	e76f      	b.n	800c8a2 <_dtoa_r+0x7da>
 800c9c2:	f04f 0800 	mov.w	r8, #0
 800c9c6:	e7f6      	b.n	800c9b6 <_dtoa_r+0x8ee>
 800c9c8:	4698      	mov	r8, r3
 800c9ca:	e7f4      	b.n	800c9b6 <_dtoa_r+0x8ee>
 800c9cc:	f43f af7d 	beq.w	800c8ca <_dtoa_r+0x802>
 800c9d0:	4618      	mov	r0, r3
 800c9d2:	301c      	adds	r0, #28
 800c9d4:	e772      	b.n	800c8bc <_dtoa_r+0x7f4>
 800c9d6:	9b03      	ldr	r3, [sp, #12]
 800c9d8:	2b00      	cmp	r3, #0
 800c9da:	dc37      	bgt.n	800ca4c <_dtoa_r+0x984>
 800c9dc:	9b06      	ldr	r3, [sp, #24]
 800c9de:	2b02      	cmp	r3, #2
 800c9e0:	dd34      	ble.n	800ca4c <_dtoa_r+0x984>
 800c9e2:	9b03      	ldr	r3, [sp, #12]
 800c9e4:	9302      	str	r3, [sp, #8]
 800c9e6:	9b02      	ldr	r3, [sp, #8]
 800c9e8:	b96b      	cbnz	r3, 800ca06 <_dtoa_r+0x93e>
 800c9ea:	4631      	mov	r1, r6
 800c9ec:	2205      	movs	r2, #5
 800c9ee:	4620      	mov	r0, r4
 800c9f0:	f000 f9c6 	bl	800cd80 <__multadd>
 800c9f4:	4601      	mov	r1, r0
 800c9f6:	4606      	mov	r6, r0
 800c9f8:	ee18 0a10 	vmov	r0, s16
 800c9fc:	f000 fbe0 	bl	800d1c0 <__mcmp>
 800ca00:	2800      	cmp	r0, #0
 800ca02:	f73f adbb 	bgt.w	800c57c <_dtoa_r+0x4b4>
 800ca06:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ca08:	9d01      	ldr	r5, [sp, #4]
 800ca0a:	43db      	mvns	r3, r3
 800ca0c:	9300      	str	r3, [sp, #0]
 800ca0e:	f04f 0800 	mov.w	r8, #0
 800ca12:	4631      	mov	r1, r6
 800ca14:	4620      	mov	r0, r4
 800ca16:	f000 f991 	bl	800cd3c <_Bfree>
 800ca1a:	2f00      	cmp	r7, #0
 800ca1c:	f43f aea4 	beq.w	800c768 <_dtoa_r+0x6a0>
 800ca20:	f1b8 0f00 	cmp.w	r8, #0
 800ca24:	d005      	beq.n	800ca32 <_dtoa_r+0x96a>
 800ca26:	45b8      	cmp	r8, r7
 800ca28:	d003      	beq.n	800ca32 <_dtoa_r+0x96a>
 800ca2a:	4641      	mov	r1, r8
 800ca2c:	4620      	mov	r0, r4
 800ca2e:	f000 f985 	bl	800cd3c <_Bfree>
 800ca32:	4639      	mov	r1, r7
 800ca34:	4620      	mov	r0, r4
 800ca36:	f000 f981 	bl	800cd3c <_Bfree>
 800ca3a:	e695      	b.n	800c768 <_dtoa_r+0x6a0>
 800ca3c:	2600      	movs	r6, #0
 800ca3e:	4637      	mov	r7, r6
 800ca40:	e7e1      	b.n	800ca06 <_dtoa_r+0x93e>
 800ca42:	9700      	str	r7, [sp, #0]
 800ca44:	4637      	mov	r7, r6
 800ca46:	e599      	b.n	800c57c <_dtoa_r+0x4b4>
 800ca48:	40240000 	.word	0x40240000
 800ca4c:	9b08      	ldr	r3, [sp, #32]
 800ca4e:	2b00      	cmp	r3, #0
 800ca50:	f000 80ca 	beq.w	800cbe8 <_dtoa_r+0xb20>
 800ca54:	9b03      	ldr	r3, [sp, #12]
 800ca56:	9302      	str	r3, [sp, #8]
 800ca58:	2d00      	cmp	r5, #0
 800ca5a:	dd05      	ble.n	800ca68 <_dtoa_r+0x9a0>
 800ca5c:	4639      	mov	r1, r7
 800ca5e:	462a      	mov	r2, r5
 800ca60:	4620      	mov	r0, r4
 800ca62:	f000 fb3d 	bl	800d0e0 <__lshift>
 800ca66:	4607      	mov	r7, r0
 800ca68:	f1b8 0f00 	cmp.w	r8, #0
 800ca6c:	d05b      	beq.n	800cb26 <_dtoa_r+0xa5e>
 800ca6e:	6879      	ldr	r1, [r7, #4]
 800ca70:	4620      	mov	r0, r4
 800ca72:	f000 f923 	bl	800ccbc <_Balloc>
 800ca76:	4605      	mov	r5, r0
 800ca78:	b928      	cbnz	r0, 800ca86 <_dtoa_r+0x9be>
 800ca7a:	4b87      	ldr	r3, [pc, #540]	; (800cc98 <_dtoa_r+0xbd0>)
 800ca7c:	4602      	mov	r2, r0
 800ca7e:	f240 21ea 	movw	r1, #746	; 0x2ea
 800ca82:	f7ff bb3b 	b.w	800c0fc <_dtoa_r+0x34>
 800ca86:	693a      	ldr	r2, [r7, #16]
 800ca88:	3202      	adds	r2, #2
 800ca8a:	0092      	lsls	r2, r2, #2
 800ca8c:	f107 010c 	add.w	r1, r7, #12
 800ca90:	300c      	adds	r0, #12
 800ca92:	f7fe fde3 	bl	800b65c <memcpy>
 800ca96:	2201      	movs	r2, #1
 800ca98:	4629      	mov	r1, r5
 800ca9a:	4620      	mov	r0, r4
 800ca9c:	f000 fb20 	bl	800d0e0 <__lshift>
 800caa0:	9b01      	ldr	r3, [sp, #4]
 800caa2:	f103 0901 	add.w	r9, r3, #1
 800caa6:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800caaa:	4413      	add	r3, r2
 800caac:	9305      	str	r3, [sp, #20]
 800caae:	f00a 0301 	and.w	r3, sl, #1
 800cab2:	46b8      	mov	r8, r7
 800cab4:	9304      	str	r3, [sp, #16]
 800cab6:	4607      	mov	r7, r0
 800cab8:	4631      	mov	r1, r6
 800caba:	ee18 0a10 	vmov	r0, s16
 800cabe:	f7ff fa75 	bl	800bfac <quorem>
 800cac2:	4641      	mov	r1, r8
 800cac4:	9002      	str	r0, [sp, #8]
 800cac6:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800caca:	ee18 0a10 	vmov	r0, s16
 800cace:	f000 fb77 	bl	800d1c0 <__mcmp>
 800cad2:	463a      	mov	r2, r7
 800cad4:	9003      	str	r0, [sp, #12]
 800cad6:	4631      	mov	r1, r6
 800cad8:	4620      	mov	r0, r4
 800cada:	f000 fb8d 	bl	800d1f8 <__mdiff>
 800cade:	68c2      	ldr	r2, [r0, #12]
 800cae0:	f109 3bff 	add.w	fp, r9, #4294967295
 800cae4:	4605      	mov	r5, r0
 800cae6:	bb02      	cbnz	r2, 800cb2a <_dtoa_r+0xa62>
 800cae8:	4601      	mov	r1, r0
 800caea:	ee18 0a10 	vmov	r0, s16
 800caee:	f000 fb67 	bl	800d1c0 <__mcmp>
 800caf2:	4602      	mov	r2, r0
 800caf4:	4629      	mov	r1, r5
 800caf6:	4620      	mov	r0, r4
 800caf8:	9207      	str	r2, [sp, #28]
 800cafa:	f000 f91f 	bl	800cd3c <_Bfree>
 800cafe:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800cb02:	ea43 0102 	orr.w	r1, r3, r2
 800cb06:	9b04      	ldr	r3, [sp, #16]
 800cb08:	430b      	orrs	r3, r1
 800cb0a:	464d      	mov	r5, r9
 800cb0c:	d10f      	bne.n	800cb2e <_dtoa_r+0xa66>
 800cb0e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800cb12:	d02a      	beq.n	800cb6a <_dtoa_r+0xaa2>
 800cb14:	9b03      	ldr	r3, [sp, #12]
 800cb16:	2b00      	cmp	r3, #0
 800cb18:	dd02      	ble.n	800cb20 <_dtoa_r+0xa58>
 800cb1a:	9b02      	ldr	r3, [sp, #8]
 800cb1c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800cb20:	f88b a000 	strb.w	sl, [fp]
 800cb24:	e775      	b.n	800ca12 <_dtoa_r+0x94a>
 800cb26:	4638      	mov	r0, r7
 800cb28:	e7ba      	b.n	800caa0 <_dtoa_r+0x9d8>
 800cb2a:	2201      	movs	r2, #1
 800cb2c:	e7e2      	b.n	800caf4 <_dtoa_r+0xa2c>
 800cb2e:	9b03      	ldr	r3, [sp, #12]
 800cb30:	2b00      	cmp	r3, #0
 800cb32:	db04      	blt.n	800cb3e <_dtoa_r+0xa76>
 800cb34:	9906      	ldr	r1, [sp, #24]
 800cb36:	430b      	orrs	r3, r1
 800cb38:	9904      	ldr	r1, [sp, #16]
 800cb3a:	430b      	orrs	r3, r1
 800cb3c:	d122      	bne.n	800cb84 <_dtoa_r+0xabc>
 800cb3e:	2a00      	cmp	r2, #0
 800cb40:	ddee      	ble.n	800cb20 <_dtoa_r+0xa58>
 800cb42:	ee18 1a10 	vmov	r1, s16
 800cb46:	2201      	movs	r2, #1
 800cb48:	4620      	mov	r0, r4
 800cb4a:	f000 fac9 	bl	800d0e0 <__lshift>
 800cb4e:	4631      	mov	r1, r6
 800cb50:	ee08 0a10 	vmov	s16, r0
 800cb54:	f000 fb34 	bl	800d1c0 <__mcmp>
 800cb58:	2800      	cmp	r0, #0
 800cb5a:	dc03      	bgt.n	800cb64 <_dtoa_r+0xa9c>
 800cb5c:	d1e0      	bne.n	800cb20 <_dtoa_r+0xa58>
 800cb5e:	f01a 0f01 	tst.w	sl, #1
 800cb62:	d0dd      	beq.n	800cb20 <_dtoa_r+0xa58>
 800cb64:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800cb68:	d1d7      	bne.n	800cb1a <_dtoa_r+0xa52>
 800cb6a:	2339      	movs	r3, #57	; 0x39
 800cb6c:	f88b 3000 	strb.w	r3, [fp]
 800cb70:	462b      	mov	r3, r5
 800cb72:	461d      	mov	r5, r3
 800cb74:	3b01      	subs	r3, #1
 800cb76:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800cb7a:	2a39      	cmp	r2, #57	; 0x39
 800cb7c:	d071      	beq.n	800cc62 <_dtoa_r+0xb9a>
 800cb7e:	3201      	adds	r2, #1
 800cb80:	701a      	strb	r2, [r3, #0]
 800cb82:	e746      	b.n	800ca12 <_dtoa_r+0x94a>
 800cb84:	2a00      	cmp	r2, #0
 800cb86:	dd07      	ble.n	800cb98 <_dtoa_r+0xad0>
 800cb88:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800cb8c:	d0ed      	beq.n	800cb6a <_dtoa_r+0xaa2>
 800cb8e:	f10a 0301 	add.w	r3, sl, #1
 800cb92:	f88b 3000 	strb.w	r3, [fp]
 800cb96:	e73c      	b.n	800ca12 <_dtoa_r+0x94a>
 800cb98:	9b05      	ldr	r3, [sp, #20]
 800cb9a:	f809 ac01 	strb.w	sl, [r9, #-1]
 800cb9e:	4599      	cmp	r9, r3
 800cba0:	d047      	beq.n	800cc32 <_dtoa_r+0xb6a>
 800cba2:	ee18 1a10 	vmov	r1, s16
 800cba6:	2300      	movs	r3, #0
 800cba8:	220a      	movs	r2, #10
 800cbaa:	4620      	mov	r0, r4
 800cbac:	f000 f8e8 	bl	800cd80 <__multadd>
 800cbb0:	45b8      	cmp	r8, r7
 800cbb2:	ee08 0a10 	vmov	s16, r0
 800cbb6:	f04f 0300 	mov.w	r3, #0
 800cbba:	f04f 020a 	mov.w	r2, #10
 800cbbe:	4641      	mov	r1, r8
 800cbc0:	4620      	mov	r0, r4
 800cbc2:	d106      	bne.n	800cbd2 <_dtoa_r+0xb0a>
 800cbc4:	f000 f8dc 	bl	800cd80 <__multadd>
 800cbc8:	4680      	mov	r8, r0
 800cbca:	4607      	mov	r7, r0
 800cbcc:	f109 0901 	add.w	r9, r9, #1
 800cbd0:	e772      	b.n	800cab8 <_dtoa_r+0x9f0>
 800cbd2:	f000 f8d5 	bl	800cd80 <__multadd>
 800cbd6:	4639      	mov	r1, r7
 800cbd8:	4680      	mov	r8, r0
 800cbda:	2300      	movs	r3, #0
 800cbdc:	220a      	movs	r2, #10
 800cbde:	4620      	mov	r0, r4
 800cbe0:	f000 f8ce 	bl	800cd80 <__multadd>
 800cbe4:	4607      	mov	r7, r0
 800cbe6:	e7f1      	b.n	800cbcc <_dtoa_r+0xb04>
 800cbe8:	9b03      	ldr	r3, [sp, #12]
 800cbea:	9302      	str	r3, [sp, #8]
 800cbec:	9d01      	ldr	r5, [sp, #4]
 800cbee:	ee18 0a10 	vmov	r0, s16
 800cbf2:	4631      	mov	r1, r6
 800cbf4:	f7ff f9da 	bl	800bfac <quorem>
 800cbf8:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800cbfc:	9b01      	ldr	r3, [sp, #4]
 800cbfe:	f805 ab01 	strb.w	sl, [r5], #1
 800cc02:	1aea      	subs	r2, r5, r3
 800cc04:	9b02      	ldr	r3, [sp, #8]
 800cc06:	4293      	cmp	r3, r2
 800cc08:	dd09      	ble.n	800cc1e <_dtoa_r+0xb56>
 800cc0a:	ee18 1a10 	vmov	r1, s16
 800cc0e:	2300      	movs	r3, #0
 800cc10:	220a      	movs	r2, #10
 800cc12:	4620      	mov	r0, r4
 800cc14:	f000 f8b4 	bl	800cd80 <__multadd>
 800cc18:	ee08 0a10 	vmov	s16, r0
 800cc1c:	e7e7      	b.n	800cbee <_dtoa_r+0xb26>
 800cc1e:	9b02      	ldr	r3, [sp, #8]
 800cc20:	2b00      	cmp	r3, #0
 800cc22:	bfc8      	it	gt
 800cc24:	461d      	movgt	r5, r3
 800cc26:	9b01      	ldr	r3, [sp, #4]
 800cc28:	bfd8      	it	le
 800cc2a:	2501      	movle	r5, #1
 800cc2c:	441d      	add	r5, r3
 800cc2e:	f04f 0800 	mov.w	r8, #0
 800cc32:	ee18 1a10 	vmov	r1, s16
 800cc36:	2201      	movs	r2, #1
 800cc38:	4620      	mov	r0, r4
 800cc3a:	f000 fa51 	bl	800d0e0 <__lshift>
 800cc3e:	4631      	mov	r1, r6
 800cc40:	ee08 0a10 	vmov	s16, r0
 800cc44:	f000 fabc 	bl	800d1c0 <__mcmp>
 800cc48:	2800      	cmp	r0, #0
 800cc4a:	dc91      	bgt.n	800cb70 <_dtoa_r+0xaa8>
 800cc4c:	d102      	bne.n	800cc54 <_dtoa_r+0xb8c>
 800cc4e:	f01a 0f01 	tst.w	sl, #1
 800cc52:	d18d      	bne.n	800cb70 <_dtoa_r+0xaa8>
 800cc54:	462b      	mov	r3, r5
 800cc56:	461d      	mov	r5, r3
 800cc58:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800cc5c:	2a30      	cmp	r2, #48	; 0x30
 800cc5e:	d0fa      	beq.n	800cc56 <_dtoa_r+0xb8e>
 800cc60:	e6d7      	b.n	800ca12 <_dtoa_r+0x94a>
 800cc62:	9a01      	ldr	r2, [sp, #4]
 800cc64:	429a      	cmp	r2, r3
 800cc66:	d184      	bne.n	800cb72 <_dtoa_r+0xaaa>
 800cc68:	9b00      	ldr	r3, [sp, #0]
 800cc6a:	3301      	adds	r3, #1
 800cc6c:	9300      	str	r3, [sp, #0]
 800cc6e:	2331      	movs	r3, #49	; 0x31
 800cc70:	7013      	strb	r3, [r2, #0]
 800cc72:	e6ce      	b.n	800ca12 <_dtoa_r+0x94a>
 800cc74:	4b09      	ldr	r3, [pc, #36]	; (800cc9c <_dtoa_r+0xbd4>)
 800cc76:	f7ff ba95 	b.w	800c1a4 <_dtoa_r+0xdc>
 800cc7a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800cc7c:	2b00      	cmp	r3, #0
 800cc7e:	f47f aa6e 	bne.w	800c15e <_dtoa_r+0x96>
 800cc82:	4b07      	ldr	r3, [pc, #28]	; (800cca0 <_dtoa_r+0xbd8>)
 800cc84:	f7ff ba8e 	b.w	800c1a4 <_dtoa_r+0xdc>
 800cc88:	9b02      	ldr	r3, [sp, #8]
 800cc8a:	2b00      	cmp	r3, #0
 800cc8c:	dcae      	bgt.n	800cbec <_dtoa_r+0xb24>
 800cc8e:	9b06      	ldr	r3, [sp, #24]
 800cc90:	2b02      	cmp	r3, #2
 800cc92:	f73f aea8 	bgt.w	800c9e6 <_dtoa_r+0x91e>
 800cc96:	e7a9      	b.n	800cbec <_dtoa_r+0xb24>
 800cc98:	0800e70b 	.word	0x0800e70b
 800cc9c:	0800e668 	.word	0x0800e668
 800cca0:	0800e68c 	.word	0x0800e68c

0800cca4 <_localeconv_r>:
 800cca4:	4800      	ldr	r0, [pc, #0]	; (800cca8 <_localeconv_r+0x4>)
 800cca6:	4770      	bx	lr
 800cca8:	2000041c 	.word	0x2000041c

0800ccac <malloc>:
 800ccac:	4b02      	ldr	r3, [pc, #8]	; (800ccb8 <malloc+0xc>)
 800ccae:	4601      	mov	r1, r0
 800ccb0:	6818      	ldr	r0, [r3, #0]
 800ccb2:	f000 bc09 	b.w	800d4c8 <_malloc_r>
 800ccb6:	bf00      	nop
 800ccb8:	200002c8 	.word	0x200002c8

0800ccbc <_Balloc>:
 800ccbc:	b570      	push	{r4, r5, r6, lr}
 800ccbe:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800ccc0:	4604      	mov	r4, r0
 800ccc2:	460d      	mov	r5, r1
 800ccc4:	b976      	cbnz	r6, 800cce4 <_Balloc+0x28>
 800ccc6:	2010      	movs	r0, #16
 800ccc8:	f7ff fff0 	bl	800ccac <malloc>
 800cccc:	4602      	mov	r2, r0
 800ccce:	6260      	str	r0, [r4, #36]	; 0x24
 800ccd0:	b920      	cbnz	r0, 800ccdc <_Balloc+0x20>
 800ccd2:	4b18      	ldr	r3, [pc, #96]	; (800cd34 <_Balloc+0x78>)
 800ccd4:	4818      	ldr	r0, [pc, #96]	; (800cd38 <_Balloc+0x7c>)
 800ccd6:	2166      	movs	r1, #102	; 0x66
 800ccd8:	f000 fdd6 	bl	800d888 <__assert_func>
 800ccdc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800cce0:	6006      	str	r6, [r0, #0]
 800cce2:	60c6      	str	r6, [r0, #12]
 800cce4:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800cce6:	68f3      	ldr	r3, [r6, #12]
 800cce8:	b183      	cbz	r3, 800cd0c <_Balloc+0x50>
 800ccea:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ccec:	68db      	ldr	r3, [r3, #12]
 800ccee:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800ccf2:	b9b8      	cbnz	r0, 800cd24 <_Balloc+0x68>
 800ccf4:	2101      	movs	r1, #1
 800ccf6:	fa01 f605 	lsl.w	r6, r1, r5
 800ccfa:	1d72      	adds	r2, r6, #5
 800ccfc:	0092      	lsls	r2, r2, #2
 800ccfe:	4620      	mov	r0, r4
 800cd00:	f000 fb60 	bl	800d3c4 <_calloc_r>
 800cd04:	b160      	cbz	r0, 800cd20 <_Balloc+0x64>
 800cd06:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800cd0a:	e00e      	b.n	800cd2a <_Balloc+0x6e>
 800cd0c:	2221      	movs	r2, #33	; 0x21
 800cd0e:	2104      	movs	r1, #4
 800cd10:	4620      	mov	r0, r4
 800cd12:	f000 fb57 	bl	800d3c4 <_calloc_r>
 800cd16:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800cd18:	60f0      	str	r0, [r6, #12]
 800cd1a:	68db      	ldr	r3, [r3, #12]
 800cd1c:	2b00      	cmp	r3, #0
 800cd1e:	d1e4      	bne.n	800ccea <_Balloc+0x2e>
 800cd20:	2000      	movs	r0, #0
 800cd22:	bd70      	pop	{r4, r5, r6, pc}
 800cd24:	6802      	ldr	r2, [r0, #0]
 800cd26:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800cd2a:	2300      	movs	r3, #0
 800cd2c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800cd30:	e7f7      	b.n	800cd22 <_Balloc+0x66>
 800cd32:	bf00      	nop
 800cd34:	0800e699 	.word	0x0800e699
 800cd38:	0800e71c 	.word	0x0800e71c

0800cd3c <_Bfree>:
 800cd3c:	b570      	push	{r4, r5, r6, lr}
 800cd3e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800cd40:	4605      	mov	r5, r0
 800cd42:	460c      	mov	r4, r1
 800cd44:	b976      	cbnz	r6, 800cd64 <_Bfree+0x28>
 800cd46:	2010      	movs	r0, #16
 800cd48:	f7ff ffb0 	bl	800ccac <malloc>
 800cd4c:	4602      	mov	r2, r0
 800cd4e:	6268      	str	r0, [r5, #36]	; 0x24
 800cd50:	b920      	cbnz	r0, 800cd5c <_Bfree+0x20>
 800cd52:	4b09      	ldr	r3, [pc, #36]	; (800cd78 <_Bfree+0x3c>)
 800cd54:	4809      	ldr	r0, [pc, #36]	; (800cd7c <_Bfree+0x40>)
 800cd56:	218a      	movs	r1, #138	; 0x8a
 800cd58:	f000 fd96 	bl	800d888 <__assert_func>
 800cd5c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800cd60:	6006      	str	r6, [r0, #0]
 800cd62:	60c6      	str	r6, [r0, #12]
 800cd64:	b13c      	cbz	r4, 800cd76 <_Bfree+0x3a>
 800cd66:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800cd68:	6862      	ldr	r2, [r4, #4]
 800cd6a:	68db      	ldr	r3, [r3, #12]
 800cd6c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800cd70:	6021      	str	r1, [r4, #0]
 800cd72:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800cd76:	bd70      	pop	{r4, r5, r6, pc}
 800cd78:	0800e699 	.word	0x0800e699
 800cd7c:	0800e71c 	.word	0x0800e71c

0800cd80 <__multadd>:
 800cd80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cd84:	690d      	ldr	r5, [r1, #16]
 800cd86:	4607      	mov	r7, r0
 800cd88:	460c      	mov	r4, r1
 800cd8a:	461e      	mov	r6, r3
 800cd8c:	f101 0c14 	add.w	ip, r1, #20
 800cd90:	2000      	movs	r0, #0
 800cd92:	f8dc 3000 	ldr.w	r3, [ip]
 800cd96:	b299      	uxth	r1, r3
 800cd98:	fb02 6101 	mla	r1, r2, r1, r6
 800cd9c:	0c1e      	lsrs	r6, r3, #16
 800cd9e:	0c0b      	lsrs	r3, r1, #16
 800cda0:	fb02 3306 	mla	r3, r2, r6, r3
 800cda4:	b289      	uxth	r1, r1
 800cda6:	3001      	adds	r0, #1
 800cda8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800cdac:	4285      	cmp	r5, r0
 800cdae:	f84c 1b04 	str.w	r1, [ip], #4
 800cdb2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800cdb6:	dcec      	bgt.n	800cd92 <__multadd+0x12>
 800cdb8:	b30e      	cbz	r6, 800cdfe <__multadd+0x7e>
 800cdba:	68a3      	ldr	r3, [r4, #8]
 800cdbc:	42ab      	cmp	r3, r5
 800cdbe:	dc19      	bgt.n	800cdf4 <__multadd+0x74>
 800cdc0:	6861      	ldr	r1, [r4, #4]
 800cdc2:	4638      	mov	r0, r7
 800cdc4:	3101      	adds	r1, #1
 800cdc6:	f7ff ff79 	bl	800ccbc <_Balloc>
 800cdca:	4680      	mov	r8, r0
 800cdcc:	b928      	cbnz	r0, 800cdda <__multadd+0x5a>
 800cdce:	4602      	mov	r2, r0
 800cdd0:	4b0c      	ldr	r3, [pc, #48]	; (800ce04 <__multadd+0x84>)
 800cdd2:	480d      	ldr	r0, [pc, #52]	; (800ce08 <__multadd+0x88>)
 800cdd4:	21b5      	movs	r1, #181	; 0xb5
 800cdd6:	f000 fd57 	bl	800d888 <__assert_func>
 800cdda:	6922      	ldr	r2, [r4, #16]
 800cddc:	3202      	adds	r2, #2
 800cdde:	f104 010c 	add.w	r1, r4, #12
 800cde2:	0092      	lsls	r2, r2, #2
 800cde4:	300c      	adds	r0, #12
 800cde6:	f7fe fc39 	bl	800b65c <memcpy>
 800cdea:	4621      	mov	r1, r4
 800cdec:	4638      	mov	r0, r7
 800cdee:	f7ff ffa5 	bl	800cd3c <_Bfree>
 800cdf2:	4644      	mov	r4, r8
 800cdf4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800cdf8:	3501      	adds	r5, #1
 800cdfa:	615e      	str	r6, [r3, #20]
 800cdfc:	6125      	str	r5, [r4, #16]
 800cdfe:	4620      	mov	r0, r4
 800ce00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ce04:	0800e70b 	.word	0x0800e70b
 800ce08:	0800e71c 	.word	0x0800e71c

0800ce0c <__hi0bits>:
 800ce0c:	0c03      	lsrs	r3, r0, #16
 800ce0e:	041b      	lsls	r3, r3, #16
 800ce10:	b9d3      	cbnz	r3, 800ce48 <__hi0bits+0x3c>
 800ce12:	0400      	lsls	r0, r0, #16
 800ce14:	2310      	movs	r3, #16
 800ce16:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800ce1a:	bf04      	itt	eq
 800ce1c:	0200      	lsleq	r0, r0, #8
 800ce1e:	3308      	addeq	r3, #8
 800ce20:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800ce24:	bf04      	itt	eq
 800ce26:	0100      	lsleq	r0, r0, #4
 800ce28:	3304      	addeq	r3, #4
 800ce2a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800ce2e:	bf04      	itt	eq
 800ce30:	0080      	lsleq	r0, r0, #2
 800ce32:	3302      	addeq	r3, #2
 800ce34:	2800      	cmp	r0, #0
 800ce36:	db05      	blt.n	800ce44 <__hi0bits+0x38>
 800ce38:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800ce3c:	f103 0301 	add.w	r3, r3, #1
 800ce40:	bf08      	it	eq
 800ce42:	2320      	moveq	r3, #32
 800ce44:	4618      	mov	r0, r3
 800ce46:	4770      	bx	lr
 800ce48:	2300      	movs	r3, #0
 800ce4a:	e7e4      	b.n	800ce16 <__hi0bits+0xa>

0800ce4c <__lo0bits>:
 800ce4c:	6803      	ldr	r3, [r0, #0]
 800ce4e:	f013 0207 	ands.w	r2, r3, #7
 800ce52:	4601      	mov	r1, r0
 800ce54:	d00b      	beq.n	800ce6e <__lo0bits+0x22>
 800ce56:	07da      	lsls	r2, r3, #31
 800ce58:	d423      	bmi.n	800cea2 <__lo0bits+0x56>
 800ce5a:	0798      	lsls	r0, r3, #30
 800ce5c:	bf49      	itett	mi
 800ce5e:	085b      	lsrmi	r3, r3, #1
 800ce60:	089b      	lsrpl	r3, r3, #2
 800ce62:	2001      	movmi	r0, #1
 800ce64:	600b      	strmi	r3, [r1, #0]
 800ce66:	bf5c      	itt	pl
 800ce68:	600b      	strpl	r3, [r1, #0]
 800ce6a:	2002      	movpl	r0, #2
 800ce6c:	4770      	bx	lr
 800ce6e:	b298      	uxth	r0, r3
 800ce70:	b9a8      	cbnz	r0, 800ce9e <__lo0bits+0x52>
 800ce72:	0c1b      	lsrs	r3, r3, #16
 800ce74:	2010      	movs	r0, #16
 800ce76:	b2da      	uxtb	r2, r3
 800ce78:	b90a      	cbnz	r2, 800ce7e <__lo0bits+0x32>
 800ce7a:	3008      	adds	r0, #8
 800ce7c:	0a1b      	lsrs	r3, r3, #8
 800ce7e:	071a      	lsls	r2, r3, #28
 800ce80:	bf04      	itt	eq
 800ce82:	091b      	lsreq	r3, r3, #4
 800ce84:	3004      	addeq	r0, #4
 800ce86:	079a      	lsls	r2, r3, #30
 800ce88:	bf04      	itt	eq
 800ce8a:	089b      	lsreq	r3, r3, #2
 800ce8c:	3002      	addeq	r0, #2
 800ce8e:	07da      	lsls	r2, r3, #31
 800ce90:	d403      	bmi.n	800ce9a <__lo0bits+0x4e>
 800ce92:	085b      	lsrs	r3, r3, #1
 800ce94:	f100 0001 	add.w	r0, r0, #1
 800ce98:	d005      	beq.n	800cea6 <__lo0bits+0x5a>
 800ce9a:	600b      	str	r3, [r1, #0]
 800ce9c:	4770      	bx	lr
 800ce9e:	4610      	mov	r0, r2
 800cea0:	e7e9      	b.n	800ce76 <__lo0bits+0x2a>
 800cea2:	2000      	movs	r0, #0
 800cea4:	4770      	bx	lr
 800cea6:	2020      	movs	r0, #32
 800cea8:	4770      	bx	lr
	...

0800ceac <__i2b>:
 800ceac:	b510      	push	{r4, lr}
 800ceae:	460c      	mov	r4, r1
 800ceb0:	2101      	movs	r1, #1
 800ceb2:	f7ff ff03 	bl	800ccbc <_Balloc>
 800ceb6:	4602      	mov	r2, r0
 800ceb8:	b928      	cbnz	r0, 800cec6 <__i2b+0x1a>
 800ceba:	4b05      	ldr	r3, [pc, #20]	; (800ced0 <__i2b+0x24>)
 800cebc:	4805      	ldr	r0, [pc, #20]	; (800ced4 <__i2b+0x28>)
 800cebe:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800cec2:	f000 fce1 	bl	800d888 <__assert_func>
 800cec6:	2301      	movs	r3, #1
 800cec8:	6144      	str	r4, [r0, #20]
 800ceca:	6103      	str	r3, [r0, #16]
 800cecc:	bd10      	pop	{r4, pc}
 800cece:	bf00      	nop
 800ced0:	0800e70b 	.word	0x0800e70b
 800ced4:	0800e71c 	.word	0x0800e71c

0800ced8 <__multiply>:
 800ced8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cedc:	4691      	mov	r9, r2
 800cede:	690a      	ldr	r2, [r1, #16]
 800cee0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800cee4:	429a      	cmp	r2, r3
 800cee6:	bfb8      	it	lt
 800cee8:	460b      	movlt	r3, r1
 800ceea:	460c      	mov	r4, r1
 800ceec:	bfbc      	itt	lt
 800ceee:	464c      	movlt	r4, r9
 800cef0:	4699      	movlt	r9, r3
 800cef2:	6927      	ldr	r7, [r4, #16]
 800cef4:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800cef8:	68a3      	ldr	r3, [r4, #8]
 800cefa:	6861      	ldr	r1, [r4, #4]
 800cefc:	eb07 060a 	add.w	r6, r7, sl
 800cf00:	42b3      	cmp	r3, r6
 800cf02:	b085      	sub	sp, #20
 800cf04:	bfb8      	it	lt
 800cf06:	3101      	addlt	r1, #1
 800cf08:	f7ff fed8 	bl	800ccbc <_Balloc>
 800cf0c:	b930      	cbnz	r0, 800cf1c <__multiply+0x44>
 800cf0e:	4602      	mov	r2, r0
 800cf10:	4b44      	ldr	r3, [pc, #272]	; (800d024 <__multiply+0x14c>)
 800cf12:	4845      	ldr	r0, [pc, #276]	; (800d028 <__multiply+0x150>)
 800cf14:	f240 115d 	movw	r1, #349	; 0x15d
 800cf18:	f000 fcb6 	bl	800d888 <__assert_func>
 800cf1c:	f100 0514 	add.w	r5, r0, #20
 800cf20:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800cf24:	462b      	mov	r3, r5
 800cf26:	2200      	movs	r2, #0
 800cf28:	4543      	cmp	r3, r8
 800cf2a:	d321      	bcc.n	800cf70 <__multiply+0x98>
 800cf2c:	f104 0314 	add.w	r3, r4, #20
 800cf30:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800cf34:	f109 0314 	add.w	r3, r9, #20
 800cf38:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800cf3c:	9202      	str	r2, [sp, #8]
 800cf3e:	1b3a      	subs	r2, r7, r4
 800cf40:	3a15      	subs	r2, #21
 800cf42:	f022 0203 	bic.w	r2, r2, #3
 800cf46:	3204      	adds	r2, #4
 800cf48:	f104 0115 	add.w	r1, r4, #21
 800cf4c:	428f      	cmp	r7, r1
 800cf4e:	bf38      	it	cc
 800cf50:	2204      	movcc	r2, #4
 800cf52:	9201      	str	r2, [sp, #4]
 800cf54:	9a02      	ldr	r2, [sp, #8]
 800cf56:	9303      	str	r3, [sp, #12]
 800cf58:	429a      	cmp	r2, r3
 800cf5a:	d80c      	bhi.n	800cf76 <__multiply+0x9e>
 800cf5c:	2e00      	cmp	r6, #0
 800cf5e:	dd03      	ble.n	800cf68 <__multiply+0x90>
 800cf60:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800cf64:	2b00      	cmp	r3, #0
 800cf66:	d05a      	beq.n	800d01e <__multiply+0x146>
 800cf68:	6106      	str	r6, [r0, #16]
 800cf6a:	b005      	add	sp, #20
 800cf6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cf70:	f843 2b04 	str.w	r2, [r3], #4
 800cf74:	e7d8      	b.n	800cf28 <__multiply+0x50>
 800cf76:	f8b3 a000 	ldrh.w	sl, [r3]
 800cf7a:	f1ba 0f00 	cmp.w	sl, #0
 800cf7e:	d024      	beq.n	800cfca <__multiply+0xf2>
 800cf80:	f104 0e14 	add.w	lr, r4, #20
 800cf84:	46a9      	mov	r9, r5
 800cf86:	f04f 0c00 	mov.w	ip, #0
 800cf8a:	f85e 2b04 	ldr.w	r2, [lr], #4
 800cf8e:	f8d9 1000 	ldr.w	r1, [r9]
 800cf92:	fa1f fb82 	uxth.w	fp, r2
 800cf96:	b289      	uxth	r1, r1
 800cf98:	fb0a 110b 	mla	r1, sl, fp, r1
 800cf9c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800cfa0:	f8d9 2000 	ldr.w	r2, [r9]
 800cfa4:	4461      	add	r1, ip
 800cfa6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800cfaa:	fb0a c20b 	mla	r2, sl, fp, ip
 800cfae:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800cfb2:	b289      	uxth	r1, r1
 800cfb4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800cfb8:	4577      	cmp	r7, lr
 800cfba:	f849 1b04 	str.w	r1, [r9], #4
 800cfbe:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800cfc2:	d8e2      	bhi.n	800cf8a <__multiply+0xb2>
 800cfc4:	9a01      	ldr	r2, [sp, #4]
 800cfc6:	f845 c002 	str.w	ip, [r5, r2]
 800cfca:	9a03      	ldr	r2, [sp, #12]
 800cfcc:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800cfd0:	3304      	adds	r3, #4
 800cfd2:	f1b9 0f00 	cmp.w	r9, #0
 800cfd6:	d020      	beq.n	800d01a <__multiply+0x142>
 800cfd8:	6829      	ldr	r1, [r5, #0]
 800cfda:	f104 0c14 	add.w	ip, r4, #20
 800cfde:	46ae      	mov	lr, r5
 800cfe0:	f04f 0a00 	mov.w	sl, #0
 800cfe4:	f8bc b000 	ldrh.w	fp, [ip]
 800cfe8:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800cfec:	fb09 220b 	mla	r2, r9, fp, r2
 800cff0:	4492      	add	sl, r2
 800cff2:	b289      	uxth	r1, r1
 800cff4:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800cff8:	f84e 1b04 	str.w	r1, [lr], #4
 800cffc:	f85c 2b04 	ldr.w	r2, [ip], #4
 800d000:	f8be 1000 	ldrh.w	r1, [lr]
 800d004:	0c12      	lsrs	r2, r2, #16
 800d006:	fb09 1102 	mla	r1, r9, r2, r1
 800d00a:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800d00e:	4567      	cmp	r7, ip
 800d010:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800d014:	d8e6      	bhi.n	800cfe4 <__multiply+0x10c>
 800d016:	9a01      	ldr	r2, [sp, #4]
 800d018:	50a9      	str	r1, [r5, r2]
 800d01a:	3504      	adds	r5, #4
 800d01c:	e79a      	b.n	800cf54 <__multiply+0x7c>
 800d01e:	3e01      	subs	r6, #1
 800d020:	e79c      	b.n	800cf5c <__multiply+0x84>
 800d022:	bf00      	nop
 800d024:	0800e70b 	.word	0x0800e70b
 800d028:	0800e71c 	.word	0x0800e71c

0800d02c <__pow5mult>:
 800d02c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d030:	4615      	mov	r5, r2
 800d032:	f012 0203 	ands.w	r2, r2, #3
 800d036:	4606      	mov	r6, r0
 800d038:	460f      	mov	r7, r1
 800d03a:	d007      	beq.n	800d04c <__pow5mult+0x20>
 800d03c:	4c25      	ldr	r4, [pc, #148]	; (800d0d4 <__pow5mult+0xa8>)
 800d03e:	3a01      	subs	r2, #1
 800d040:	2300      	movs	r3, #0
 800d042:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800d046:	f7ff fe9b 	bl	800cd80 <__multadd>
 800d04a:	4607      	mov	r7, r0
 800d04c:	10ad      	asrs	r5, r5, #2
 800d04e:	d03d      	beq.n	800d0cc <__pow5mult+0xa0>
 800d050:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800d052:	b97c      	cbnz	r4, 800d074 <__pow5mult+0x48>
 800d054:	2010      	movs	r0, #16
 800d056:	f7ff fe29 	bl	800ccac <malloc>
 800d05a:	4602      	mov	r2, r0
 800d05c:	6270      	str	r0, [r6, #36]	; 0x24
 800d05e:	b928      	cbnz	r0, 800d06c <__pow5mult+0x40>
 800d060:	4b1d      	ldr	r3, [pc, #116]	; (800d0d8 <__pow5mult+0xac>)
 800d062:	481e      	ldr	r0, [pc, #120]	; (800d0dc <__pow5mult+0xb0>)
 800d064:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800d068:	f000 fc0e 	bl	800d888 <__assert_func>
 800d06c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800d070:	6004      	str	r4, [r0, #0]
 800d072:	60c4      	str	r4, [r0, #12]
 800d074:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800d078:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800d07c:	b94c      	cbnz	r4, 800d092 <__pow5mult+0x66>
 800d07e:	f240 2171 	movw	r1, #625	; 0x271
 800d082:	4630      	mov	r0, r6
 800d084:	f7ff ff12 	bl	800ceac <__i2b>
 800d088:	2300      	movs	r3, #0
 800d08a:	f8c8 0008 	str.w	r0, [r8, #8]
 800d08e:	4604      	mov	r4, r0
 800d090:	6003      	str	r3, [r0, #0]
 800d092:	f04f 0900 	mov.w	r9, #0
 800d096:	07eb      	lsls	r3, r5, #31
 800d098:	d50a      	bpl.n	800d0b0 <__pow5mult+0x84>
 800d09a:	4639      	mov	r1, r7
 800d09c:	4622      	mov	r2, r4
 800d09e:	4630      	mov	r0, r6
 800d0a0:	f7ff ff1a 	bl	800ced8 <__multiply>
 800d0a4:	4639      	mov	r1, r7
 800d0a6:	4680      	mov	r8, r0
 800d0a8:	4630      	mov	r0, r6
 800d0aa:	f7ff fe47 	bl	800cd3c <_Bfree>
 800d0ae:	4647      	mov	r7, r8
 800d0b0:	106d      	asrs	r5, r5, #1
 800d0b2:	d00b      	beq.n	800d0cc <__pow5mult+0xa0>
 800d0b4:	6820      	ldr	r0, [r4, #0]
 800d0b6:	b938      	cbnz	r0, 800d0c8 <__pow5mult+0x9c>
 800d0b8:	4622      	mov	r2, r4
 800d0ba:	4621      	mov	r1, r4
 800d0bc:	4630      	mov	r0, r6
 800d0be:	f7ff ff0b 	bl	800ced8 <__multiply>
 800d0c2:	6020      	str	r0, [r4, #0]
 800d0c4:	f8c0 9000 	str.w	r9, [r0]
 800d0c8:	4604      	mov	r4, r0
 800d0ca:	e7e4      	b.n	800d096 <__pow5mult+0x6a>
 800d0cc:	4638      	mov	r0, r7
 800d0ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d0d2:	bf00      	nop
 800d0d4:	0800e868 	.word	0x0800e868
 800d0d8:	0800e699 	.word	0x0800e699
 800d0dc:	0800e71c 	.word	0x0800e71c

0800d0e0 <__lshift>:
 800d0e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d0e4:	460c      	mov	r4, r1
 800d0e6:	6849      	ldr	r1, [r1, #4]
 800d0e8:	6923      	ldr	r3, [r4, #16]
 800d0ea:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800d0ee:	68a3      	ldr	r3, [r4, #8]
 800d0f0:	4607      	mov	r7, r0
 800d0f2:	4691      	mov	r9, r2
 800d0f4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800d0f8:	f108 0601 	add.w	r6, r8, #1
 800d0fc:	42b3      	cmp	r3, r6
 800d0fe:	db0b      	blt.n	800d118 <__lshift+0x38>
 800d100:	4638      	mov	r0, r7
 800d102:	f7ff fddb 	bl	800ccbc <_Balloc>
 800d106:	4605      	mov	r5, r0
 800d108:	b948      	cbnz	r0, 800d11e <__lshift+0x3e>
 800d10a:	4602      	mov	r2, r0
 800d10c:	4b2a      	ldr	r3, [pc, #168]	; (800d1b8 <__lshift+0xd8>)
 800d10e:	482b      	ldr	r0, [pc, #172]	; (800d1bc <__lshift+0xdc>)
 800d110:	f240 11d9 	movw	r1, #473	; 0x1d9
 800d114:	f000 fbb8 	bl	800d888 <__assert_func>
 800d118:	3101      	adds	r1, #1
 800d11a:	005b      	lsls	r3, r3, #1
 800d11c:	e7ee      	b.n	800d0fc <__lshift+0x1c>
 800d11e:	2300      	movs	r3, #0
 800d120:	f100 0114 	add.w	r1, r0, #20
 800d124:	f100 0210 	add.w	r2, r0, #16
 800d128:	4618      	mov	r0, r3
 800d12a:	4553      	cmp	r3, sl
 800d12c:	db37      	blt.n	800d19e <__lshift+0xbe>
 800d12e:	6920      	ldr	r0, [r4, #16]
 800d130:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800d134:	f104 0314 	add.w	r3, r4, #20
 800d138:	f019 091f 	ands.w	r9, r9, #31
 800d13c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800d140:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800d144:	d02f      	beq.n	800d1a6 <__lshift+0xc6>
 800d146:	f1c9 0e20 	rsb	lr, r9, #32
 800d14a:	468a      	mov	sl, r1
 800d14c:	f04f 0c00 	mov.w	ip, #0
 800d150:	681a      	ldr	r2, [r3, #0]
 800d152:	fa02 f209 	lsl.w	r2, r2, r9
 800d156:	ea42 020c 	orr.w	r2, r2, ip
 800d15a:	f84a 2b04 	str.w	r2, [sl], #4
 800d15e:	f853 2b04 	ldr.w	r2, [r3], #4
 800d162:	4298      	cmp	r0, r3
 800d164:	fa22 fc0e 	lsr.w	ip, r2, lr
 800d168:	d8f2      	bhi.n	800d150 <__lshift+0x70>
 800d16a:	1b03      	subs	r3, r0, r4
 800d16c:	3b15      	subs	r3, #21
 800d16e:	f023 0303 	bic.w	r3, r3, #3
 800d172:	3304      	adds	r3, #4
 800d174:	f104 0215 	add.w	r2, r4, #21
 800d178:	4290      	cmp	r0, r2
 800d17a:	bf38      	it	cc
 800d17c:	2304      	movcc	r3, #4
 800d17e:	f841 c003 	str.w	ip, [r1, r3]
 800d182:	f1bc 0f00 	cmp.w	ip, #0
 800d186:	d001      	beq.n	800d18c <__lshift+0xac>
 800d188:	f108 0602 	add.w	r6, r8, #2
 800d18c:	3e01      	subs	r6, #1
 800d18e:	4638      	mov	r0, r7
 800d190:	612e      	str	r6, [r5, #16]
 800d192:	4621      	mov	r1, r4
 800d194:	f7ff fdd2 	bl	800cd3c <_Bfree>
 800d198:	4628      	mov	r0, r5
 800d19a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d19e:	f842 0f04 	str.w	r0, [r2, #4]!
 800d1a2:	3301      	adds	r3, #1
 800d1a4:	e7c1      	b.n	800d12a <__lshift+0x4a>
 800d1a6:	3904      	subs	r1, #4
 800d1a8:	f853 2b04 	ldr.w	r2, [r3], #4
 800d1ac:	f841 2f04 	str.w	r2, [r1, #4]!
 800d1b0:	4298      	cmp	r0, r3
 800d1b2:	d8f9      	bhi.n	800d1a8 <__lshift+0xc8>
 800d1b4:	e7ea      	b.n	800d18c <__lshift+0xac>
 800d1b6:	bf00      	nop
 800d1b8:	0800e70b 	.word	0x0800e70b
 800d1bc:	0800e71c 	.word	0x0800e71c

0800d1c0 <__mcmp>:
 800d1c0:	b530      	push	{r4, r5, lr}
 800d1c2:	6902      	ldr	r2, [r0, #16]
 800d1c4:	690c      	ldr	r4, [r1, #16]
 800d1c6:	1b12      	subs	r2, r2, r4
 800d1c8:	d10e      	bne.n	800d1e8 <__mcmp+0x28>
 800d1ca:	f100 0314 	add.w	r3, r0, #20
 800d1ce:	3114      	adds	r1, #20
 800d1d0:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800d1d4:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800d1d8:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800d1dc:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800d1e0:	42a5      	cmp	r5, r4
 800d1e2:	d003      	beq.n	800d1ec <__mcmp+0x2c>
 800d1e4:	d305      	bcc.n	800d1f2 <__mcmp+0x32>
 800d1e6:	2201      	movs	r2, #1
 800d1e8:	4610      	mov	r0, r2
 800d1ea:	bd30      	pop	{r4, r5, pc}
 800d1ec:	4283      	cmp	r3, r0
 800d1ee:	d3f3      	bcc.n	800d1d8 <__mcmp+0x18>
 800d1f0:	e7fa      	b.n	800d1e8 <__mcmp+0x28>
 800d1f2:	f04f 32ff 	mov.w	r2, #4294967295
 800d1f6:	e7f7      	b.n	800d1e8 <__mcmp+0x28>

0800d1f8 <__mdiff>:
 800d1f8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d1fc:	460c      	mov	r4, r1
 800d1fe:	4606      	mov	r6, r0
 800d200:	4611      	mov	r1, r2
 800d202:	4620      	mov	r0, r4
 800d204:	4690      	mov	r8, r2
 800d206:	f7ff ffdb 	bl	800d1c0 <__mcmp>
 800d20a:	1e05      	subs	r5, r0, #0
 800d20c:	d110      	bne.n	800d230 <__mdiff+0x38>
 800d20e:	4629      	mov	r1, r5
 800d210:	4630      	mov	r0, r6
 800d212:	f7ff fd53 	bl	800ccbc <_Balloc>
 800d216:	b930      	cbnz	r0, 800d226 <__mdiff+0x2e>
 800d218:	4b3a      	ldr	r3, [pc, #232]	; (800d304 <__mdiff+0x10c>)
 800d21a:	4602      	mov	r2, r0
 800d21c:	f240 2132 	movw	r1, #562	; 0x232
 800d220:	4839      	ldr	r0, [pc, #228]	; (800d308 <__mdiff+0x110>)
 800d222:	f000 fb31 	bl	800d888 <__assert_func>
 800d226:	2301      	movs	r3, #1
 800d228:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800d22c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d230:	bfa4      	itt	ge
 800d232:	4643      	movge	r3, r8
 800d234:	46a0      	movge	r8, r4
 800d236:	4630      	mov	r0, r6
 800d238:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800d23c:	bfa6      	itte	ge
 800d23e:	461c      	movge	r4, r3
 800d240:	2500      	movge	r5, #0
 800d242:	2501      	movlt	r5, #1
 800d244:	f7ff fd3a 	bl	800ccbc <_Balloc>
 800d248:	b920      	cbnz	r0, 800d254 <__mdiff+0x5c>
 800d24a:	4b2e      	ldr	r3, [pc, #184]	; (800d304 <__mdiff+0x10c>)
 800d24c:	4602      	mov	r2, r0
 800d24e:	f44f 7110 	mov.w	r1, #576	; 0x240
 800d252:	e7e5      	b.n	800d220 <__mdiff+0x28>
 800d254:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800d258:	6926      	ldr	r6, [r4, #16]
 800d25a:	60c5      	str	r5, [r0, #12]
 800d25c:	f104 0914 	add.w	r9, r4, #20
 800d260:	f108 0514 	add.w	r5, r8, #20
 800d264:	f100 0e14 	add.w	lr, r0, #20
 800d268:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800d26c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800d270:	f108 0210 	add.w	r2, r8, #16
 800d274:	46f2      	mov	sl, lr
 800d276:	2100      	movs	r1, #0
 800d278:	f859 3b04 	ldr.w	r3, [r9], #4
 800d27c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800d280:	fa1f f883 	uxth.w	r8, r3
 800d284:	fa11 f18b 	uxtah	r1, r1, fp
 800d288:	0c1b      	lsrs	r3, r3, #16
 800d28a:	eba1 0808 	sub.w	r8, r1, r8
 800d28e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800d292:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800d296:	fa1f f888 	uxth.w	r8, r8
 800d29a:	1419      	asrs	r1, r3, #16
 800d29c:	454e      	cmp	r6, r9
 800d29e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800d2a2:	f84a 3b04 	str.w	r3, [sl], #4
 800d2a6:	d8e7      	bhi.n	800d278 <__mdiff+0x80>
 800d2a8:	1b33      	subs	r3, r6, r4
 800d2aa:	3b15      	subs	r3, #21
 800d2ac:	f023 0303 	bic.w	r3, r3, #3
 800d2b0:	3304      	adds	r3, #4
 800d2b2:	3415      	adds	r4, #21
 800d2b4:	42a6      	cmp	r6, r4
 800d2b6:	bf38      	it	cc
 800d2b8:	2304      	movcc	r3, #4
 800d2ba:	441d      	add	r5, r3
 800d2bc:	4473      	add	r3, lr
 800d2be:	469e      	mov	lr, r3
 800d2c0:	462e      	mov	r6, r5
 800d2c2:	4566      	cmp	r6, ip
 800d2c4:	d30e      	bcc.n	800d2e4 <__mdiff+0xec>
 800d2c6:	f10c 0203 	add.w	r2, ip, #3
 800d2ca:	1b52      	subs	r2, r2, r5
 800d2cc:	f022 0203 	bic.w	r2, r2, #3
 800d2d0:	3d03      	subs	r5, #3
 800d2d2:	45ac      	cmp	ip, r5
 800d2d4:	bf38      	it	cc
 800d2d6:	2200      	movcc	r2, #0
 800d2d8:	441a      	add	r2, r3
 800d2da:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800d2de:	b17b      	cbz	r3, 800d300 <__mdiff+0x108>
 800d2e0:	6107      	str	r7, [r0, #16]
 800d2e2:	e7a3      	b.n	800d22c <__mdiff+0x34>
 800d2e4:	f856 8b04 	ldr.w	r8, [r6], #4
 800d2e8:	fa11 f288 	uxtah	r2, r1, r8
 800d2ec:	1414      	asrs	r4, r2, #16
 800d2ee:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800d2f2:	b292      	uxth	r2, r2
 800d2f4:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800d2f8:	f84e 2b04 	str.w	r2, [lr], #4
 800d2fc:	1421      	asrs	r1, r4, #16
 800d2fe:	e7e0      	b.n	800d2c2 <__mdiff+0xca>
 800d300:	3f01      	subs	r7, #1
 800d302:	e7ea      	b.n	800d2da <__mdiff+0xe2>
 800d304:	0800e70b 	.word	0x0800e70b
 800d308:	0800e71c 	.word	0x0800e71c

0800d30c <__d2b>:
 800d30c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800d310:	4689      	mov	r9, r1
 800d312:	2101      	movs	r1, #1
 800d314:	ec57 6b10 	vmov	r6, r7, d0
 800d318:	4690      	mov	r8, r2
 800d31a:	f7ff fccf 	bl	800ccbc <_Balloc>
 800d31e:	4604      	mov	r4, r0
 800d320:	b930      	cbnz	r0, 800d330 <__d2b+0x24>
 800d322:	4602      	mov	r2, r0
 800d324:	4b25      	ldr	r3, [pc, #148]	; (800d3bc <__d2b+0xb0>)
 800d326:	4826      	ldr	r0, [pc, #152]	; (800d3c0 <__d2b+0xb4>)
 800d328:	f240 310a 	movw	r1, #778	; 0x30a
 800d32c:	f000 faac 	bl	800d888 <__assert_func>
 800d330:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800d334:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800d338:	bb35      	cbnz	r5, 800d388 <__d2b+0x7c>
 800d33a:	2e00      	cmp	r6, #0
 800d33c:	9301      	str	r3, [sp, #4]
 800d33e:	d028      	beq.n	800d392 <__d2b+0x86>
 800d340:	4668      	mov	r0, sp
 800d342:	9600      	str	r6, [sp, #0]
 800d344:	f7ff fd82 	bl	800ce4c <__lo0bits>
 800d348:	9900      	ldr	r1, [sp, #0]
 800d34a:	b300      	cbz	r0, 800d38e <__d2b+0x82>
 800d34c:	9a01      	ldr	r2, [sp, #4]
 800d34e:	f1c0 0320 	rsb	r3, r0, #32
 800d352:	fa02 f303 	lsl.w	r3, r2, r3
 800d356:	430b      	orrs	r3, r1
 800d358:	40c2      	lsrs	r2, r0
 800d35a:	6163      	str	r3, [r4, #20]
 800d35c:	9201      	str	r2, [sp, #4]
 800d35e:	9b01      	ldr	r3, [sp, #4]
 800d360:	61a3      	str	r3, [r4, #24]
 800d362:	2b00      	cmp	r3, #0
 800d364:	bf14      	ite	ne
 800d366:	2202      	movne	r2, #2
 800d368:	2201      	moveq	r2, #1
 800d36a:	6122      	str	r2, [r4, #16]
 800d36c:	b1d5      	cbz	r5, 800d3a4 <__d2b+0x98>
 800d36e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800d372:	4405      	add	r5, r0
 800d374:	f8c9 5000 	str.w	r5, [r9]
 800d378:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800d37c:	f8c8 0000 	str.w	r0, [r8]
 800d380:	4620      	mov	r0, r4
 800d382:	b003      	add	sp, #12
 800d384:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d388:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d38c:	e7d5      	b.n	800d33a <__d2b+0x2e>
 800d38e:	6161      	str	r1, [r4, #20]
 800d390:	e7e5      	b.n	800d35e <__d2b+0x52>
 800d392:	a801      	add	r0, sp, #4
 800d394:	f7ff fd5a 	bl	800ce4c <__lo0bits>
 800d398:	9b01      	ldr	r3, [sp, #4]
 800d39a:	6163      	str	r3, [r4, #20]
 800d39c:	2201      	movs	r2, #1
 800d39e:	6122      	str	r2, [r4, #16]
 800d3a0:	3020      	adds	r0, #32
 800d3a2:	e7e3      	b.n	800d36c <__d2b+0x60>
 800d3a4:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800d3a8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800d3ac:	f8c9 0000 	str.w	r0, [r9]
 800d3b0:	6918      	ldr	r0, [r3, #16]
 800d3b2:	f7ff fd2b 	bl	800ce0c <__hi0bits>
 800d3b6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800d3ba:	e7df      	b.n	800d37c <__d2b+0x70>
 800d3bc:	0800e70b 	.word	0x0800e70b
 800d3c0:	0800e71c 	.word	0x0800e71c

0800d3c4 <_calloc_r>:
 800d3c4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d3c6:	fba1 2402 	umull	r2, r4, r1, r2
 800d3ca:	b94c      	cbnz	r4, 800d3e0 <_calloc_r+0x1c>
 800d3cc:	4611      	mov	r1, r2
 800d3ce:	9201      	str	r2, [sp, #4]
 800d3d0:	f000 f87a 	bl	800d4c8 <_malloc_r>
 800d3d4:	9a01      	ldr	r2, [sp, #4]
 800d3d6:	4605      	mov	r5, r0
 800d3d8:	b930      	cbnz	r0, 800d3e8 <_calloc_r+0x24>
 800d3da:	4628      	mov	r0, r5
 800d3dc:	b003      	add	sp, #12
 800d3de:	bd30      	pop	{r4, r5, pc}
 800d3e0:	220c      	movs	r2, #12
 800d3e2:	6002      	str	r2, [r0, #0]
 800d3e4:	2500      	movs	r5, #0
 800d3e6:	e7f8      	b.n	800d3da <_calloc_r+0x16>
 800d3e8:	4621      	mov	r1, r4
 800d3ea:	f7fe f945 	bl	800b678 <memset>
 800d3ee:	e7f4      	b.n	800d3da <_calloc_r+0x16>

0800d3f0 <_free_r>:
 800d3f0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d3f2:	2900      	cmp	r1, #0
 800d3f4:	d044      	beq.n	800d480 <_free_r+0x90>
 800d3f6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d3fa:	9001      	str	r0, [sp, #4]
 800d3fc:	2b00      	cmp	r3, #0
 800d3fe:	f1a1 0404 	sub.w	r4, r1, #4
 800d402:	bfb8      	it	lt
 800d404:	18e4      	addlt	r4, r4, r3
 800d406:	f000 fa9b 	bl	800d940 <__malloc_lock>
 800d40a:	4a1e      	ldr	r2, [pc, #120]	; (800d484 <_free_r+0x94>)
 800d40c:	9801      	ldr	r0, [sp, #4]
 800d40e:	6813      	ldr	r3, [r2, #0]
 800d410:	b933      	cbnz	r3, 800d420 <_free_r+0x30>
 800d412:	6063      	str	r3, [r4, #4]
 800d414:	6014      	str	r4, [r2, #0]
 800d416:	b003      	add	sp, #12
 800d418:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d41c:	f000 ba96 	b.w	800d94c <__malloc_unlock>
 800d420:	42a3      	cmp	r3, r4
 800d422:	d908      	bls.n	800d436 <_free_r+0x46>
 800d424:	6825      	ldr	r5, [r4, #0]
 800d426:	1961      	adds	r1, r4, r5
 800d428:	428b      	cmp	r3, r1
 800d42a:	bf01      	itttt	eq
 800d42c:	6819      	ldreq	r1, [r3, #0]
 800d42e:	685b      	ldreq	r3, [r3, #4]
 800d430:	1949      	addeq	r1, r1, r5
 800d432:	6021      	streq	r1, [r4, #0]
 800d434:	e7ed      	b.n	800d412 <_free_r+0x22>
 800d436:	461a      	mov	r2, r3
 800d438:	685b      	ldr	r3, [r3, #4]
 800d43a:	b10b      	cbz	r3, 800d440 <_free_r+0x50>
 800d43c:	42a3      	cmp	r3, r4
 800d43e:	d9fa      	bls.n	800d436 <_free_r+0x46>
 800d440:	6811      	ldr	r1, [r2, #0]
 800d442:	1855      	adds	r5, r2, r1
 800d444:	42a5      	cmp	r5, r4
 800d446:	d10b      	bne.n	800d460 <_free_r+0x70>
 800d448:	6824      	ldr	r4, [r4, #0]
 800d44a:	4421      	add	r1, r4
 800d44c:	1854      	adds	r4, r2, r1
 800d44e:	42a3      	cmp	r3, r4
 800d450:	6011      	str	r1, [r2, #0]
 800d452:	d1e0      	bne.n	800d416 <_free_r+0x26>
 800d454:	681c      	ldr	r4, [r3, #0]
 800d456:	685b      	ldr	r3, [r3, #4]
 800d458:	6053      	str	r3, [r2, #4]
 800d45a:	4421      	add	r1, r4
 800d45c:	6011      	str	r1, [r2, #0]
 800d45e:	e7da      	b.n	800d416 <_free_r+0x26>
 800d460:	d902      	bls.n	800d468 <_free_r+0x78>
 800d462:	230c      	movs	r3, #12
 800d464:	6003      	str	r3, [r0, #0]
 800d466:	e7d6      	b.n	800d416 <_free_r+0x26>
 800d468:	6825      	ldr	r5, [r4, #0]
 800d46a:	1961      	adds	r1, r4, r5
 800d46c:	428b      	cmp	r3, r1
 800d46e:	bf04      	itt	eq
 800d470:	6819      	ldreq	r1, [r3, #0]
 800d472:	685b      	ldreq	r3, [r3, #4]
 800d474:	6063      	str	r3, [r4, #4]
 800d476:	bf04      	itt	eq
 800d478:	1949      	addeq	r1, r1, r5
 800d47a:	6021      	streq	r1, [r4, #0]
 800d47c:	6054      	str	r4, [r2, #4]
 800d47e:	e7ca      	b.n	800d416 <_free_r+0x26>
 800d480:	b003      	add	sp, #12
 800d482:	bd30      	pop	{r4, r5, pc}
 800d484:	20000698 	.word	0x20000698

0800d488 <sbrk_aligned>:
 800d488:	b570      	push	{r4, r5, r6, lr}
 800d48a:	4e0e      	ldr	r6, [pc, #56]	; (800d4c4 <sbrk_aligned+0x3c>)
 800d48c:	460c      	mov	r4, r1
 800d48e:	6831      	ldr	r1, [r6, #0]
 800d490:	4605      	mov	r5, r0
 800d492:	b911      	cbnz	r1, 800d49a <sbrk_aligned+0x12>
 800d494:	f000 f9e8 	bl	800d868 <_sbrk_r>
 800d498:	6030      	str	r0, [r6, #0]
 800d49a:	4621      	mov	r1, r4
 800d49c:	4628      	mov	r0, r5
 800d49e:	f000 f9e3 	bl	800d868 <_sbrk_r>
 800d4a2:	1c43      	adds	r3, r0, #1
 800d4a4:	d00a      	beq.n	800d4bc <sbrk_aligned+0x34>
 800d4a6:	1cc4      	adds	r4, r0, #3
 800d4a8:	f024 0403 	bic.w	r4, r4, #3
 800d4ac:	42a0      	cmp	r0, r4
 800d4ae:	d007      	beq.n	800d4c0 <sbrk_aligned+0x38>
 800d4b0:	1a21      	subs	r1, r4, r0
 800d4b2:	4628      	mov	r0, r5
 800d4b4:	f000 f9d8 	bl	800d868 <_sbrk_r>
 800d4b8:	3001      	adds	r0, #1
 800d4ba:	d101      	bne.n	800d4c0 <sbrk_aligned+0x38>
 800d4bc:	f04f 34ff 	mov.w	r4, #4294967295
 800d4c0:	4620      	mov	r0, r4
 800d4c2:	bd70      	pop	{r4, r5, r6, pc}
 800d4c4:	2000069c 	.word	0x2000069c

0800d4c8 <_malloc_r>:
 800d4c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d4cc:	1ccd      	adds	r5, r1, #3
 800d4ce:	f025 0503 	bic.w	r5, r5, #3
 800d4d2:	3508      	adds	r5, #8
 800d4d4:	2d0c      	cmp	r5, #12
 800d4d6:	bf38      	it	cc
 800d4d8:	250c      	movcc	r5, #12
 800d4da:	2d00      	cmp	r5, #0
 800d4dc:	4607      	mov	r7, r0
 800d4de:	db01      	blt.n	800d4e4 <_malloc_r+0x1c>
 800d4e0:	42a9      	cmp	r1, r5
 800d4e2:	d905      	bls.n	800d4f0 <_malloc_r+0x28>
 800d4e4:	230c      	movs	r3, #12
 800d4e6:	603b      	str	r3, [r7, #0]
 800d4e8:	2600      	movs	r6, #0
 800d4ea:	4630      	mov	r0, r6
 800d4ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d4f0:	4e2e      	ldr	r6, [pc, #184]	; (800d5ac <_malloc_r+0xe4>)
 800d4f2:	f000 fa25 	bl	800d940 <__malloc_lock>
 800d4f6:	6833      	ldr	r3, [r6, #0]
 800d4f8:	461c      	mov	r4, r3
 800d4fa:	bb34      	cbnz	r4, 800d54a <_malloc_r+0x82>
 800d4fc:	4629      	mov	r1, r5
 800d4fe:	4638      	mov	r0, r7
 800d500:	f7ff ffc2 	bl	800d488 <sbrk_aligned>
 800d504:	1c43      	adds	r3, r0, #1
 800d506:	4604      	mov	r4, r0
 800d508:	d14d      	bne.n	800d5a6 <_malloc_r+0xde>
 800d50a:	6834      	ldr	r4, [r6, #0]
 800d50c:	4626      	mov	r6, r4
 800d50e:	2e00      	cmp	r6, #0
 800d510:	d140      	bne.n	800d594 <_malloc_r+0xcc>
 800d512:	6823      	ldr	r3, [r4, #0]
 800d514:	4631      	mov	r1, r6
 800d516:	4638      	mov	r0, r7
 800d518:	eb04 0803 	add.w	r8, r4, r3
 800d51c:	f000 f9a4 	bl	800d868 <_sbrk_r>
 800d520:	4580      	cmp	r8, r0
 800d522:	d13a      	bne.n	800d59a <_malloc_r+0xd2>
 800d524:	6821      	ldr	r1, [r4, #0]
 800d526:	3503      	adds	r5, #3
 800d528:	1a6d      	subs	r5, r5, r1
 800d52a:	f025 0503 	bic.w	r5, r5, #3
 800d52e:	3508      	adds	r5, #8
 800d530:	2d0c      	cmp	r5, #12
 800d532:	bf38      	it	cc
 800d534:	250c      	movcc	r5, #12
 800d536:	4629      	mov	r1, r5
 800d538:	4638      	mov	r0, r7
 800d53a:	f7ff ffa5 	bl	800d488 <sbrk_aligned>
 800d53e:	3001      	adds	r0, #1
 800d540:	d02b      	beq.n	800d59a <_malloc_r+0xd2>
 800d542:	6823      	ldr	r3, [r4, #0]
 800d544:	442b      	add	r3, r5
 800d546:	6023      	str	r3, [r4, #0]
 800d548:	e00e      	b.n	800d568 <_malloc_r+0xa0>
 800d54a:	6822      	ldr	r2, [r4, #0]
 800d54c:	1b52      	subs	r2, r2, r5
 800d54e:	d41e      	bmi.n	800d58e <_malloc_r+0xc6>
 800d550:	2a0b      	cmp	r2, #11
 800d552:	d916      	bls.n	800d582 <_malloc_r+0xba>
 800d554:	1961      	adds	r1, r4, r5
 800d556:	42a3      	cmp	r3, r4
 800d558:	6025      	str	r5, [r4, #0]
 800d55a:	bf18      	it	ne
 800d55c:	6059      	strne	r1, [r3, #4]
 800d55e:	6863      	ldr	r3, [r4, #4]
 800d560:	bf08      	it	eq
 800d562:	6031      	streq	r1, [r6, #0]
 800d564:	5162      	str	r2, [r4, r5]
 800d566:	604b      	str	r3, [r1, #4]
 800d568:	4638      	mov	r0, r7
 800d56a:	f104 060b 	add.w	r6, r4, #11
 800d56e:	f000 f9ed 	bl	800d94c <__malloc_unlock>
 800d572:	f026 0607 	bic.w	r6, r6, #7
 800d576:	1d23      	adds	r3, r4, #4
 800d578:	1af2      	subs	r2, r6, r3
 800d57a:	d0b6      	beq.n	800d4ea <_malloc_r+0x22>
 800d57c:	1b9b      	subs	r3, r3, r6
 800d57e:	50a3      	str	r3, [r4, r2]
 800d580:	e7b3      	b.n	800d4ea <_malloc_r+0x22>
 800d582:	6862      	ldr	r2, [r4, #4]
 800d584:	42a3      	cmp	r3, r4
 800d586:	bf0c      	ite	eq
 800d588:	6032      	streq	r2, [r6, #0]
 800d58a:	605a      	strne	r2, [r3, #4]
 800d58c:	e7ec      	b.n	800d568 <_malloc_r+0xa0>
 800d58e:	4623      	mov	r3, r4
 800d590:	6864      	ldr	r4, [r4, #4]
 800d592:	e7b2      	b.n	800d4fa <_malloc_r+0x32>
 800d594:	4634      	mov	r4, r6
 800d596:	6876      	ldr	r6, [r6, #4]
 800d598:	e7b9      	b.n	800d50e <_malloc_r+0x46>
 800d59a:	230c      	movs	r3, #12
 800d59c:	603b      	str	r3, [r7, #0]
 800d59e:	4638      	mov	r0, r7
 800d5a0:	f000 f9d4 	bl	800d94c <__malloc_unlock>
 800d5a4:	e7a1      	b.n	800d4ea <_malloc_r+0x22>
 800d5a6:	6025      	str	r5, [r4, #0]
 800d5a8:	e7de      	b.n	800d568 <_malloc_r+0xa0>
 800d5aa:	bf00      	nop
 800d5ac:	20000698 	.word	0x20000698

0800d5b0 <__ssputs_r>:
 800d5b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d5b4:	688e      	ldr	r6, [r1, #8]
 800d5b6:	429e      	cmp	r6, r3
 800d5b8:	4682      	mov	sl, r0
 800d5ba:	460c      	mov	r4, r1
 800d5bc:	4690      	mov	r8, r2
 800d5be:	461f      	mov	r7, r3
 800d5c0:	d838      	bhi.n	800d634 <__ssputs_r+0x84>
 800d5c2:	898a      	ldrh	r2, [r1, #12]
 800d5c4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800d5c8:	d032      	beq.n	800d630 <__ssputs_r+0x80>
 800d5ca:	6825      	ldr	r5, [r4, #0]
 800d5cc:	6909      	ldr	r1, [r1, #16]
 800d5ce:	eba5 0901 	sub.w	r9, r5, r1
 800d5d2:	6965      	ldr	r5, [r4, #20]
 800d5d4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d5d8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800d5dc:	3301      	adds	r3, #1
 800d5de:	444b      	add	r3, r9
 800d5e0:	106d      	asrs	r5, r5, #1
 800d5e2:	429d      	cmp	r5, r3
 800d5e4:	bf38      	it	cc
 800d5e6:	461d      	movcc	r5, r3
 800d5e8:	0553      	lsls	r3, r2, #21
 800d5ea:	d531      	bpl.n	800d650 <__ssputs_r+0xa0>
 800d5ec:	4629      	mov	r1, r5
 800d5ee:	f7ff ff6b 	bl	800d4c8 <_malloc_r>
 800d5f2:	4606      	mov	r6, r0
 800d5f4:	b950      	cbnz	r0, 800d60c <__ssputs_r+0x5c>
 800d5f6:	230c      	movs	r3, #12
 800d5f8:	f8ca 3000 	str.w	r3, [sl]
 800d5fc:	89a3      	ldrh	r3, [r4, #12]
 800d5fe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d602:	81a3      	strh	r3, [r4, #12]
 800d604:	f04f 30ff 	mov.w	r0, #4294967295
 800d608:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d60c:	6921      	ldr	r1, [r4, #16]
 800d60e:	464a      	mov	r2, r9
 800d610:	f7fe f824 	bl	800b65c <memcpy>
 800d614:	89a3      	ldrh	r3, [r4, #12]
 800d616:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800d61a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d61e:	81a3      	strh	r3, [r4, #12]
 800d620:	6126      	str	r6, [r4, #16]
 800d622:	6165      	str	r5, [r4, #20]
 800d624:	444e      	add	r6, r9
 800d626:	eba5 0509 	sub.w	r5, r5, r9
 800d62a:	6026      	str	r6, [r4, #0]
 800d62c:	60a5      	str	r5, [r4, #8]
 800d62e:	463e      	mov	r6, r7
 800d630:	42be      	cmp	r6, r7
 800d632:	d900      	bls.n	800d636 <__ssputs_r+0x86>
 800d634:	463e      	mov	r6, r7
 800d636:	6820      	ldr	r0, [r4, #0]
 800d638:	4632      	mov	r2, r6
 800d63a:	4641      	mov	r1, r8
 800d63c:	f000 f966 	bl	800d90c <memmove>
 800d640:	68a3      	ldr	r3, [r4, #8]
 800d642:	1b9b      	subs	r3, r3, r6
 800d644:	60a3      	str	r3, [r4, #8]
 800d646:	6823      	ldr	r3, [r4, #0]
 800d648:	4433      	add	r3, r6
 800d64a:	6023      	str	r3, [r4, #0]
 800d64c:	2000      	movs	r0, #0
 800d64e:	e7db      	b.n	800d608 <__ssputs_r+0x58>
 800d650:	462a      	mov	r2, r5
 800d652:	f000 f981 	bl	800d958 <_realloc_r>
 800d656:	4606      	mov	r6, r0
 800d658:	2800      	cmp	r0, #0
 800d65a:	d1e1      	bne.n	800d620 <__ssputs_r+0x70>
 800d65c:	6921      	ldr	r1, [r4, #16]
 800d65e:	4650      	mov	r0, sl
 800d660:	f7ff fec6 	bl	800d3f0 <_free_r>
 800d664:	e7c7      	b.n	800d5f6 <__ssputs_r+0x46>
	...

0800d668 <_svfiprintf_r>:
 800d668:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d66c:	4698      	mov	r8, r3
 800d66e:	898b      	ldrh	r3, [r1, #12]
 800d670:	061b      	lsls	r3, r3, #24
 800d672:	b09d      	sub	sp, #116	; 0x74
 800d674:	4607      	mov	r7, r0
 800d676:	460d      	mov	r5, r1
 800d678:	4614      	mov	r4, r2
 800d67a:	d50e      	bpl.n	800d69a <_svfiprintf_r+0x32>
 800d67c:	690b      	ldr	r3, [r1, #16]
 800d67e:	b963      	cbnz	r3, 800d69a <_svfiprintf_r+0x32>
 800d680:	2140      	movs	r1, #64	; 0x40
 800d682:	f7ff ff21 	bl	800d4c8 <_malloc_r>
 800d686:	6028      	str	r0, [r5, #0]
 800d688:	6128      	str	r0, [r5, #16]
 800d68a:	b920      	cbnz	r0, 800d696 <_svfiprintf_r+0x2e>
 800d68c:	230c      	movs	r3, #12
 800d68e:	603b      	str	r3, [r7, #0]
 800d690:	f04f 30ff 	mov.w	r0, #4294967295
 800d694:	e0d1      	b.n	800d83a <_svfiprintf_r+0x1d2>
 800d696:	2340      	movs	r3, #64	; 0x40
 800d698:	616b      	str	r3, [r5, #20]
 800d69a:	2300      	movs	r3, #0
 800d69c:	9309      	str	r3, [sp, #36]	; 0x24
 800d69e:	2320      	movs	r3, #32
 800d6a0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d6a4:	f8cd 800c 	str.w	r8, [sp, #12]
 800d6a8:	2330      	movs	r3, #48	; 0x30
 800d6aa:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800d854 <_svfiprintf_r+0x1ec>
 800d6ae:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d6b2:	f04f 0901 	mov.w	r9, #1
 800d6b6:	4623      	mov	r3, r4
 800d6b8:	469a      	mov	sl, r3
 800d6ba:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d6be:	b10a      	cbz	r2, 800d6c4 <_svfiprintf_r+0x5c>
 800d6c0:	2a25      	cmp	r2, #37	; 0x25
 800d6c2:	d1f9      	bne.n	800d6b8 <_svfiprintf_r+0x50>
 800d6c4:	ebba 0b04 	subs.w	fp, sl, r4
 800d6c8:	d00b      	beq.n	800d6e2 <_svfiprintf_r+0x7a>
 800d6ca:	465b      	mov	r3, fp
 800d6cc:	4622      	mov	r2, r4
 800d6ce:	4629      	mov	r1, r5
 800d6d0:	4638      	mov	r0, r7
 800d6d2:	f7ff ff6d 	bl	800d5b0 <__ssputs_r>
 800d6d6:	3001      	adds	r0, #1
 800d6d8:	f000 80aa 	beq.w	800d830 <_svfiprintf_r+0x1c8>
 800d6dc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d6de:	445a      	add	r2, fp
 800d6e0:	9209      	str	r2, [sp, #36]	; 0x24
 800d6e2:	f89a 3000 	ldrb.w	r3, [sl]
 800d6e6:	2b00      	cmp	r3, #0
 800d6e8:	f000 80a2 	beq.w	800d830 <_svfiprintf_r+0x1c8>
 800d6ec:	2300      	movs	r3, #0
 800d6ee:	f04f 32ff 	mov.w	r2, #4294967295
 800d6f2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d6f6:	f10a 0a01 	add.w	sl, sl, #1
 800d6fa:	9304      	str	r3, [sp, #16]
 800d6fc:	9307      	str	r3, [sp, #28]
 800d6fe:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d702:	931a      	str	r3, [sp, #104]	; 0x68
 800d704:	4654      	mov	r4, sl
 800d706:	2205      	movs	r2, #5
 800d708:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d70c:	4851      	ldr	r0, [pc, #324]	; (800d854 <_svfiprintf_r+0x1ec>)
 800d70e:	f7f2 fd87 	bl	8000220 <memchr>
 800d712:	9a04      	ldr	r2, [sp, #16]
 800d714:	b9d8      	cbnz	r0, 800d74e <_svfiprintf_r+0xe6>
 800d716:	06d0      	lsls	r0, r2, #27
 800d718:	bf44      	itt	mi
 800d71a:	2320      	movmi	r3, #32
 800d71c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d720:	0711      	lsls	r1, r2, #28
 800d722:	bf44      	itt	mi
 800d724:	232b      	movmi	r3, #43	; 0x2b
 800d726:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d72a:	f89a 3000 	ldrb.w	r3, [sl]
 800d72e:	2b2a      	cmp	r3, #42	; 0x2a
 800d730:	d015      	beq.n	800d75e <_svfiprintf_r+0xf6>
 800d732:	9a07      	ldr	r2, [sp, #28]
 800d734:	4654      	mov	r4, sl
 800d736:	2000      	movs	r0, #0
 800d738:	f04f 0c0a 	mov.w	ip, #10
 800d73c:	4621      	mov	r1, r4
 800d73e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d742:	3b30      	subs	r3, #48	; 0x30
 800d744:	2b09      	cmp	r3, #9
 800d746:	d94e      	bls.n	800d7e6 <_svfiprintf_r+0x17e>
 800d748:	b1b0      	cbz	r0, 800d778 <_svfiprintf_r+0x110>
 800d74a:	9207      	str	r2, [sp, #28]
 800d74c:	e014      	b.n	800d778 <_svfiprintf_r+0x110>
 800d74e:	eba0 0308 	sub.w	r3, r0, r8
 800d752:	fa09 f303 	lsl.w	r3, r9, r3
 800d756:	4313      	orrs	r3, r2
 800d758:	9304      	str	r3, [sp, #16]
 800d75a:	46a2      	mov	sl, r4
 800d75c:	e7d2      	b.n	800d704 <_svfiprintf_r+0x9c>
 800d75e:	9b03      	ldr	r3, [sp, #12]
 800d760:	1d19      	adds	r1, r3, #4
 800d762:	681b      	ldr	r3, [r3, #0]
 800d764:	9103      	str	r1, [sp, #12]
 800d766:	2b00      	cmp	r3, #0
 800d768:	bfbb      	ittet	lt
 800d76a:	425b      	neglt	r3, r3
 800d76c:	f042 0202 	orrlt.w	r2, r2, #2
 800d770:	9307      	strge	r3, [sp, #28]
 800d772:	9307      	strlt	r3, [sp, #28]
 800d774:	bfb8      	it	lt
 800d776:	9204      	strlt	r2, [sp, #16]
 800d778:	7823      	ldrb	r3, [r4, #0]
 800d77a:	2b2e      	cmp	r3, #46	; 0x2e
 800d77c:	d10c      	bne.n	800d798 <_svfiprintf_r+0x130>
 800d77e:	7863      	ldrb	r3, [r4, #1]
 800d780:	2b2a      	cmp	r3, #42	; 0x2a
 800d782:	d135      	bne.n	800d7f0 <_svfiprintf_r+0x188>
 800d784:	9b03      	ldr	r3, [sp, #12]
 800d786:	1d1a      	adds	r2, r3, #4
 800d788:	681b      	ldr	r3, [r3, #0]
 800d78a:	9203      	str	r2, [sp, #12]
 800d78c:	2b00      	cmp	r3, #0
 800d78e:	bfb8      	it	lt
 800d790:	f04f 33ff 	movlt.w	r3, #4294967295
 800d794:	3402      	adds	r4, #2
 800d796:	9305      	str	r3, [sp, #20]
 800d798:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800d864 <_svfiprintf_r+0x1fc>
 800d79c:	7821      	ldrb	r1, [r4, #0]
 800d79e:	2203      	movs	r2, #3
 800d7a0:	4650      	mov	r0, sl
 800d7a2:	f7f2 fd3d 	bl	8000220 <memchr>
 800d7a6:	b140      	cbz	r0, 800d7ba <_svfiprintf_r+0x152>
 800d7a8:	2340      	movs	r3, #64	; 0x40
 800d7aa:	eba0 000a 	sub.w	r0, r0, sl
 800d7ae:	fa03 f000 	lsl.w	r0, r3, r0
 800d7b2:	9b04      	ldr	r3, [sp, #16]
 800d7b4:	4303      	orrs	r3, r0
 800d7b6:	3401      	adds	r4, #1
 800d7b8:	9304      	str	r3, [sp, #16]
 800d7ba:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d7be:	4826      	ldr	r0, [pc, #152]	; (800d858 <_svfiprintf_r+0x1f0>)
 800d7c0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d7c4:	2206      	movs	r2, #6
 800d7c6:	f7f2 fd2b 	bl	8000220 <memchr>
 800d7ca:	2800      	cmp	r0, #0
 800d7cc:	d038      	beq.n	800d840 <_svfiprintf_r+0x1d8>
 800d7ce:	4b23      	ldr	r3, [pc, #140]	; (800d85c <_svfiprintf_r+0x1f4>)
 800d7d0:	bb1b      	cbnz	r3, 800d81a <_svfiprintf_r+0x1b2>
 800d7d2:	9b03      	ldr	r3, [sp, #12]
 800d7d4:	3307      	adds	r3, #7
 800d7d6:	f023 0307 	bic.w	r3, r3, #7
 800d7da:	3308      	adds	r3, #8
 800d7dc:	9303      	str	r3, [sp, #12]
 800d7de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d7e0:	4433      	add	r3, r6
 800d7e2:	9309      	str	r3, [sp, #36]	; 0x24
 800d7e4:	e767      	b.n	800d6b6 <_svfiprintf_r+0x4e>
 800d7e6:	fb0c 3202 	mla	r2, ip, r2, r3
 800d7ea:	460c      	mov	r4, r1
 800d7ec:	2001      	movs	r0, #1
 800d7ee:	e7a5      	b.n	800d73c <_svfiprintf_r+0xd4>
 800d7f0:	2300      	movs	r3, #0
 800d7f2:	3401      	adds	r4, #1
 800d7f4:	9305      	str	r3, [sp, #20]
 800d7f6:	4619      	mov	r1, r3
 800d7f8:	f04f 0c0a 	mov.w	ip, #10
 800d7fc:	4620      	mov	r0, r4
 800d7fe:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d802:	3a30      	subs	r2, #48	; 0x30
 800d804:	2a09      	cmp	r2, #9
 800d806:	d903      	bls.n	800d810 <_svfiprintf_r+0x1a8>
 800d808:	2b00      	cmp	r3, #0
 800d80a:	d0c5      	beq.n	800d798 <_svfiprintf_r+0x130>
 800d80c:	9105      	str	r1, [sp, #20]
 800d80e:	e7c3      	b.n	800d798 <_svfiprintf_r+0x130>
 800d810:	fb0c 2101 	mla	r1, ip, r1, r2
 800d814:	4604      	mov	r4, r0
 800d816:	2301      	movs	r3, #1
 800d818:	e7f0      	b.n	800d7fc <_svfiprintf_r+0x194>
 800d81a:	ab03      	add	r3, sp, #12
 800d81c:	9300      	str	r3, [sp, #0]
 800d81e:	462a      	mov	r2, r5
 800d820:	4b0f      	ldr	r3, [pc, #60]	; (800d860 <_svfiprintf_r+0x1f8>)
 800d822:	a904      	add	r1, sp, #16
 800d824:	4638      	mov	r0, r7
 800d826:	f7fd ffcf 	bl	800b7c8 <_printf_float>
 800d82a:	1c42      	adds	r2, r0, #1
 800d82c:	4606      	mov	r6, r0
 800d82e:	d1d6      	bne.n	800d7de <_svfiprintf_r+0x176>
 800d830:	89ab      	ldrh	r3, [r5, #12]
 800d832:	065b      	lsls	r3, r3, #25
 800d834:	f53f af2c 	bmi.w	800d690 <_svfiprintf_r+0x28>
 800d838:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d83a:	b01d      	add	sp, #116	; 0x74
 800d83c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d840:	ab03      	add	r3, sp, #12
 800d842:	9300      	str	r3, [sp, #0]
 800d844:	462a      	mov	r2, r5
 800d846:	4b06      	ldr	r3, [pc, #24]	; (800d860 <_svfiprintf_r+0x1f8>)
 800d848:	a904      	add	r1, sp, #16
 800d84a:	4638      	mov	r0, r7
 800d84c:	f7fe fa60 	bl	800bd10 <_printf_i>
 800d850:	e7eb      	b.n	800d82a <_svfiprintf_r+0x1c2>
 800d852:	bf00      	nop
 800d854:	0800e874 	.word	0x0800e874
 800d858:	0800e87e 	.word	0x0800e87e
 800d85c:	0800b7c9 	.word	0x0800b7c9
 800d860:	0800d5b1 	.word	0x0800d5b1
 800d864:	0800e87a 	.word	0x0800e87a

0800d868 <_sbrk_r>:
 800d868:	b538      	push	{r3, r4, r5, lr}
 800d86a:	4d06      	ldr	r5, [pc, #24]	; (800d884 <_sbrk_r+0x1c>)
 800d86c:	2300      	movs	r3, #0
 800d86e:	4604      	mov	r4, r0
 800d870:	4608      	mov	r0, r1
 800d872:	602b      	str	r3, [r5, #0]
 800d874:	f7f4 f880 	bl	8001978 <_sbrk>
 800d878:	1c43      	adds	r3, r0, #1
 800d87a:	d102      	bne.n	800d882 <_sbrk_r+0x1a>
 800d87c:	682b      	ldr	r3, [r5, #0]
 800d87e:	b103      	cbz	r3, 800d882 <_sbrk_r+0x1a>
 800d880:	6023      	str	r3, [r4, #0]
 800d882:	bd38      	pop	{r3, r4, r5, pc}
 800d884:	200006a0 	.word	0x200006a0

0800d888 <__assert_func>:
 800d888:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d88a:	4614      	mov	r4, r2
 800d88c:	461a      	mov	r2, r3
 800d88e:	4b09      	ldr	r3, [pc, #36]	; (800d8b4 <__assert_func+0x2c>)
 800d890:	681b      	ldr	r3, [r3, #0]
 800d892:	4605      	mov	r5, r0
 800d894:	68d8      	ldr	r0, [r3, #12]
 800d896:	b14c      	cbz	r4, 800d8ac <__assert_func+0x24>
 800d898:	4b07      	ldr	r3, [pc, #28]	; (800d8b8 <__assert_func+0x30>)
 800d89a:	9100      	str	r1, [sp, #0]
 800d89c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800d8a0:	4906      	ldr	r1, [pc, #24]	; (800d8bc <__assert_func+0x34>)
 800d8a2:	462b      	mov	r3, r5
 800d8a4:	f000 f80e 	bl	800d8c4 <fiprintf>
 800d8a8:	f000 faac 	bl	800de04 <abort>
 800d8ac:	4b04      	ldr	r3, [pc, #16]	; (800d8c0 <__assert_func+0x38>)
 800d8ae:	461c      	mov	r4, r3
 800d8b0:	e7f3      	b.n	800d89a <__assert_func+0x12>
 800d8b2:	bf00      	nop
 800d8b4:	200002c8 	.word	0x200002c8
 800d8b8:	0800e885 	.word	0x0800e885
 800d8bc:	0800e892 	.word	0x0800e892
 800d8c0:	0800e8c0 	.word	0x0800e8c0

0800d8c4 <fiprintf>:
 800d8c4:	b40e      	push	{r1, r2, r3}
 800d8c6:	b503      	push	{r0, r1, lr}
 800d8c8:	4601      	mov	r1, r0
 800d8ca:	ab03      	add	r3, sp, #12
 800d8cc:	4805      	ldr	r0, [pc, #20]	; (800d8e4 <fiprintf+0x20>)
 800d8ce:	f853 2b04 	ldr.w	r2, [r3], #4
 800d8d2:	6800      	ldr	r0, [r0, #0]
 800d8d4:	9301      	str	r3, [sp, #4]
 800d8d6:	f000 f897 	bl	800da08 <_vfiprintf_r>
 800d8da:	b002      	add	sp, #8
 800d8dc:	f85d eb04 	ldr.w	lr, [sp], #4
 800d8e0:	b003      	add	sp, #12
 800d8e2:	4770      	bx	lr
 800d8e4:	200002c8 	.word	0x200002c8

0800d8e8 <__ascii_mbtowc>:
 800d8e8:	b082      	sub	sp, #8
 800d8ea:	b901      	cbnz	r1, 800d8ee <__ascii_mbtowc+0x6>
 800d8ec:	a901      	add	r1, sp, #4
 800d8ee:	b142      	cbz	r2, 800d902 <__ascii_mbtowc+0x1a>
 800d8f0:	b14b      	cbz	r3, 800d906 <__ascii_mbtowc+0x1e>
 800d8f2:	7813      	ldrb	r3, [r2, #0]
 800d8f4:	600b      	str	r3, [r1, #0]
 800d8f6:	7812      	ldrb	r2, [r2, #0]
 800d8f8:	1e10      	subs	r0, r2, #0
 800d8fa:	bf18      	it	ne
 800d8fc:	2001      	movne	r0, #1
 800d8fe:	b002      	add	sp, #8
 800d900:	4770      	bx	lr
 800d902:	4610      	mov	r0, r2
 800d904:	e7fb      	b.n	800d8fe <__ascii_mbtowc+0x16>
 800d906:	f06f 0001 	mvn.w	r0, #1
 800d90a:	e7f8      	b.n	800d8fe <__ascii_mbtowc+0x16>

0800d90c <memmove>:
 800d90c:	4288      	cmp	r0, r1
 800d90e:	b510      	push	{r4, lr}
 800d910:	eb01 0402 	add.w	r4, r1, r2
 800d914:	d902      	bls.n	800d91c <memmove+0x10>
 800d916:	4284      	cmp	r4, r0
 800d918:	4623      	mov	r3, r4
 800d91a:	d807      	bhi.n	800d92c <memmove+0x20>
 800d91c:	1e43      	subs	r3, r0, #1
 800d91e:	42a1      	cmp	r1, r4
 800d920:	d008      	beq.n	800d934 <memmove+0x28>
 800d922:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d926:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d92a:	e7f8      	b.n	800d91e <memmove+0x12>
 800d92c:	4402      	add	r2, r0
 800d92e:	4601      	mov	r1, r0
 800d930:	428a      	cmp	r2, r1
 800d932:	d100      	bne.n	800d936 <memmove+0x2a>
 800d934:	bd10      	pop	{r4, pc}
 800d936:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d93a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d93e:	e7f7      	b.n	800d930 <memmove+0x24>

0800d940 <__malloc_lock>:
 800d940:	4801      	ldr	r0, [pc, #4]	; (800d948 <__malloc_lock+0x8>)
 800d942:	f000 bc1f 	b.w	800e184 <__retarget_lock_acquire_recursive>
 800d946:	bf00      	nop
 800d948:	200006a4 	.word	0x200006a4

0800d94c <__malloc_unlock>:
 800d94c:	4801      	ldr	r0, [pc, #4]	; (800d954 <__malloc_unlock+0x8>)
 800d94e:	f000 bc1a 	b.w	800e186 <__retarget_lock_release_recursive>
 800d952:	bf00      	nop
 800d954:	200006a4 	.word	0x200006a4

0800d958 <_realloc_r>:
 800d958:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d95c:	4680      	mov	r8, r0
 800d95e:	4614      	mov	r4, r2
 800d960:	460e      	mov	r6, r1
 800d962:	b921      	cbnz	r1, 800d96e <_realloc_r+0x16>
 800d964:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d968:	4611      	mov	r1, r2
 800d96a:	f7ff bdad 	b.w	800d4c8 <_malloc_r>
 800d96e:	b92a      	cbnz	r2, 800d97c <_realloc_r+0x24>
 800d970:	f7ff fd3e 	bl	800d3f0 <_free_r>
 800d974:	4625      	mov	r5, r4
 800d976:	4628      	mov	r0, r5
 800d978:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d97c:	f000 fc6a 	bl	800e254 <_malloc_usable_size_r>
 800d980:	4284      	cmp	r4, r0
 800d982:	4607      	mov	r7, r0
 800d984:	d802      	bhi.n	800d98c <_realloc_r+0x34>
 800d986:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800d98a:	d812      	bhi.n	800d9b2 <_realloc_r+0x5a>
 800d98c:	4621      	mov	r1, r4
 800d98e:	4640      	mov	r0, r8
 800d990:	f7ff fd9a 	bl	800d4c8 <_malloc_r>
 800d994:	4605      	mov	r5, r0
 800d996:	2800      	cmp	r0, #0
 800d998:	d0ed      	beq.n	800d976 <_realloc_r+0x1e>
 800d99a:	42bc      	cmp	r4, r7
 800d99c:	4622      	mov	r2, r4
 800d99e:	4631      	mov	r1, r6
 800d9a0:	bf28      	it	cs
 800d9a2:	463a      	movcs	r2, r7
 800d9a4:	f7fd fe5a 	bl	800b65c <memcpy>
 800d9a8:	4631      	mov	r1, r6
 800d9aa:	4640      	mov	r0, r8
 800d9ac:	f7ff fd20 	bl	800d3f0 <_free_r>
 800d9b0:	e7e1      	b.n	800d976 <_realloc_r+0x1e>
 800d9b2:	4635      	mov	r5, r6
 800d9b4:	e7df      	b.n	800d976 <_realloc_r+0x1e>

0800d9b6 <__sfputc_r>:
 800d9b6:	6893      	ldr	r3, [r2, #8]
 800d9b8:	3b01      	subs	r3, #1
 800d9ba:	2b00      	cmp	r3, #0
 800d9bc:	b410      	push	{r4}
 800d9be:	6093      	str	r3, [r2, #8]
 800d9c0:	da08      	bge.n	800d9d4 <__sfputc_r+0x1e>
 800d9c2:	6994      	ldr	r4, [r2, #24]
 800d9c4:	42a3      	cmp	r3, r4
 800d9c6:	db01      	blt.n	800d9cc <__sfputc_r+0x16>
 800d9c8:	290a      	cmp	r1, #10
 800d9ca:	d103      	bne.n	800d9d4 <__sfputc_r+0x1e>
 800d9cc:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d9d0:	f000 b94a 	b.w	800dc68 <__swbuf_r>
 800d9d4:	6813      	ldr	r3, [r2, #0]
 800d9d6:	1c58      	adds	r0, r3, #1
 800d9d8:	6010      	str	r0, [r2, #0]
 800d9da:	7019      	strb	r1, [r3, #0]
 800d9dc:	4608      	mov	r0, r1
 800d9de:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d9e2:	4770      	bx	lr

0800d9e4 <__sfputs_r>:
 800d9e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d9e6:	4606      	mov	r6, r0
 800d9e8:	460f      	mov	r7, r1
 800d9ea:	4614      	mov	r4, r2
 800d9ec:	18d5      	adds	r5, r2, r3
 800d9ee:	42ac      	cmp	r4, r5
 800d9f0:	d101      	bne.n	800d9f6 <__sfputs_r+0x12>
 800d9f2:	2000      	movs	r0, #0
 800d9f4:	e007      	b.n	800da06 <__sfputs_r+0x22>
 800d9f6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d9fa:	463a      	mov	r2, r7
 800d9fc:	4630      	mov	r0, r6
 800d9fe:	f7ff ffda 	bl	800d9b6 <__sfputc_r>
 800da02:	1c43      	adds	r3, r0, #1
 800da04:	d1f3      	bne.n	800d9ee <__sfputs_r+0xa>
 800da06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800da08 <_vfiprintf_r>:
 800da08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800da0c:	460d      	mov	r5, r1
 800da0e:	b09d      	sub	sp, #116	; 0x74
 800da10:	4614      	mov	r4, r2
 800da12:	4698      	mov	r8, r3
 800da14:	4606      	mov	r6, r0
 800da16:	b118      	cbz	r0, 800da20 <_vfiprintf_r+0x18>
 800da18:	6983      	ldr	r3, [r0, #24]
 800da1a:	b90b      	cbnz	r3, 800da20 <_vfiprintf_r+0x18>
 800da1c:	f000 fb14 	bl	800e048 <__sinit>
 800da20:	4b89      	ldr	r3, [pc, #548]	; (800dc48 <_vfiprintf_r+0x240>)
 800da22:	429d      	cmp	r5, r3
 800da24:	d11b      	bne.n	800da5e <_vfiprintf_r+0x56>
 800da26:	6875      	ldr	r5, [r6, #4]
 800da28:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800da2a:	07d9      	lsls	r1, r3, #31
 800da2c:	d405      	bmi.n	800da3a <_vfiprintf_r+0x32>
 800da2e:	89ab      	ldrh	r3, [r5, #12]
 800da30:	059a      	lsls	r2, r3, #22
 800da32:	d402      	bmi.n	800da3a <_vfiprintf_r+0x32>
 800da34:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800da36:	f000 fba5 	bl	800e184 <__retarget_lock_acquire_recursive>
 800da3a:	89ab      	ldrh	r3, [r5, #12]
 800da3c:	071b      	lsls	r3, r3, #28
 800da3e:	d501      	bpl.n	800da44 <_vfiprintf_r+0x3c>
 800da40:	692b      	ldr	r3, [r5, #16]
 800da42:	b9eb      	cbnz	r3, 800da80 <_vfiprintf_r+0x78>
 800da44:	4629      	mov	r1, r5
 800da46:	4630      	mov	r0, r6
 800da48:	f000 f96e 	bl	800dd28 <__swsetup_r>
 800da4c:	b1c0      	cbz	r0, 800da80 <_vfiprintf_r+0x78>
 800da4e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800da50:	07dc      	lsls	r4, r3, #31
 800da52:	d50e      	bpl.n	800da72 <_vfiprintf_r+0x6a>
 800da54:	f04f 30ff 	mov.w	r0, #4294967295
 800da58:	b01d      	add	sp, #116	; 0x74
 800da5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800da5e:	4b7b      	ldr	r3, [pc, #492]	; (800dc4c <_vfiprintf_r+0x244>)
 800da60:	429d      	cmp	r5, r3
 800da62:	d101      	bne.n	800da68 <_vfiprintf_r+0x60>
 800da64:	68b5      	ldr	r5, [r6, #8]
 800da66:	e7df      	b.n	800da28 <_vfiprintf_r+0x20>
 800da68:	4b79      	ldr	r3, [pc, #484]	; (800dc50 <_vfiprintf_r+0x248>)
 800da6a:	429d      	cmp	r5, r3
 800da6c:	bf08      	it	eq
 800da6e:	68f5      	ldreq	r5, [r6, #12]
 800da70:	e7da      	b.n	800da28 <_vfiprintf_r+0x20>
 800da72:	89ab      	ldrh	r3, [r5, #12]
 800da74:	0598      	lsls	r0, r3, #22
 800da76:	d4ed      	bmi.n	800da54 <_vfiprintf_r+0x4c>
 800da78:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800da7a:	f000 fb84 	bl	800e186 <__retarget_lock_release_recursive>
 800da7e:	e7e9      	b.n	800da54 <_vfiprintf_r+0x4c>
 800da80:	2300      	movs	r3, #0
 800da82:	9309      	str	r3, [sp, #36]	; 0x24
 800da84:	2320      	movs	r3, #32
 800da86:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800da8a:	f8cd 800c 	str.w	r8, [sp, #12]
 800da8e:	2330      	movs	r3, #48	; 0x30
 800da90:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800dc54 <_vfiprintf_r+0x24c>
 800da94:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800da98:	f04f 0901 	mov.w	r9, #1
 800da9c:	4623      	mov	r3, r4
 800da9e:	469a      	mov	sl, r3
 800daa0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800daa4:	b10a      	cbz	r2, 800daaa <_vfiprintf_r+0xa2>
 800daa6:	2a25      	cmp	r2, #37	; 0x25
 800daa8:	d1f9      	bne.n	800da9e <_vfiprintf_r+0x96>
 800daaa:	ebba 0b04 	subs.w	fp, sl, r4
 800daae:	d00b      	beq.n	800dac8 <_vfiprintf_r+0xc0>
 800dab0:	465b      	mov	r3, fp
 800dab2:	4622      	mov	r2, r4
 800dab4:	4629      	mov	r1, r5
 800dab6:	4630      	mov	r0, r6
 800dab8:	f7ff ff94 	bl	800d9e4 <__sfputs_r>
 800dabc:	3001      	adds	r0, #1
 800dabe:	f000 80aa 	beq.w	800dc16 <_vfiprintf_r+0x20e>
 800dac2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800dac4:	445a      	add	r2, fp
 800dac6:	9209      	str	r2, [sp, #36]	; 0x24
 800dac8:	f89a 3000 	ldrb.w	r3, [sl]
 800dacc:	2b00      	cmp	r3, #0
 800dace:	f000 80a2 	beq.w	800dc16 <_vfiprintf_r+0x20e>
 800dad2:	2300      	movs	r3, #0
 800dad4:	f04f 32ff 	mov.w	r2, #4294967295
 800dad8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800dadc:	f10a 0a01 	add.w	sl, sl, #1
 800dae0:	9304      	str	r3, [sp, #16]
 800dae2:	9307      	str	r3, [sp, #28]
 800dae4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800dae8:	931a      	str	r3, [sp, #104]	; 0x68
 800daea:	4654      	mov	r4, sl
 800daec:	2205      	movs	r2, #5
 800daee:	f814 1b01 	ldrb.w	r1, [r4], #1
 800daf2:	4858      	ldr	r0, [pc, #352]	; (800dc54 <_vfiprintf_r+0x24c>)
 800daf4:	f7f2 fb94 	bl	8000220 <memchr>
 800daf8:	9a04      	ldr	r2, [sp, #16]
 800dafa:	b9d8      	cbnz	r0, 800db34 <_vfiprintf_r+0x12c>
 800dafc:	06d1      	lsls	r1, r2, #27
 800dafe:	bf44      	itt	mi
 800db00:	2320      	movmi	r3, #32
 800db02:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800db06:	0713      	lsls	r3, r2, #28
 800db08:	bf44      	itt	mi
 800db0a:	232b      	movmi	r3, #43	; 0x2b
 800db0c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800db10:	f89a 3000 	ldrb.w	r3, [sl]
 800db14:	2b2a      	cmp	r3, #42	; 0x2a
 800db16:	d015      	beq.n	800db44 <_vfiprintf_r+0x13c>
 800db18:	9a07      	ldr	r2, [sp, #28]
 800db1a:	4654      	mov	r4, sl
 800db1c:	2000      	movs	r0, #0
 800db1e:	f04f 0c0a 	mov.w	ip, #10
 800db22:	4621      	mov	r1, r4
 800db24:	f811 3b01 	ldrb.w	r3, [r1], #1
 800db28:	3b30      	subs	r3, #48	; 0x30
 800db2a:	2b09      	cmp	r3, #9
 800db2c:	d94e      	bls.n	800dbcc <_vfiprintf_r+0x1c4>
 800db2e:	b1b0      	cbz	r0, 800db5e <_vfiprintf_r+0x156>
 800db30:	9207      	str	r2, [sp, #28]
 800db32:	e014      	b.n	800db5e <_vfiprintf_r+0x156>
 800db34:	eba0 0308 	sub.w	r3, r0, r8
 800db38:	fa09 f303 	lsl.w	r3, r9, r3
 800db3c:	4313      	orrs	r3, r2
 800db3e:	9304      	str	r3, [sp, #16]
 800db40:	46a2      	mov	sl, r4
 800db42:	e7d2      	b.n	800daea <_vfiprintf_r+0xe2>
 800db44:	9b03      	ldr	r3, [sp, #12]
 800db46:	1d19      	adds	r1, r3, #4
 800db48:	681b      	ldr	r3, [r3, #0]
 800db4a:	9103      	str	r1, [sp, #12]
 800db4c:	2b00      	cmp	r3, #0
 800db4e:	bfbb      	ittet	lt
 800db50:	425b      	neglt	r3, r3
 800db52:	f042 0202 	orrlt.w	r2, r2, #2
 800db56:	9307      	strge	r3, [sp, #28]
 800db58:	9307      	strlt	r3, [sp, #28]
 800db5a:	bfb8      	it	lt
 800db5c:	9204      	strlt	r2, [sp, #16]
 800db5e:	7823      	ldrb	r3, [r4, #0]
 800db60:	2b2e      	cmp	r3, #46	; 0x2e
 800db62:	d10c      	bne.n	800db7e <_vfiprintf_r+0x176>
 800db64:	7863      	ldrb	r3, [r4, #1]
 800db66:	2b2a      	cmp	r3, #42	; 0x2a
 800db68:	d135      	bne.n	800dbd6 <_vfiprintf_r+0x1ce>
 800db6a:	9b03      	ldr	r3, [sp, #12]
 800db6c:	1d1a      	adds	r2, r3, #4
 800db6e:	681b      	ldr	r3, [r3, #0]
 800db70:	9203      	str	r2, [sp, #12]
 800db72:	2b00      	cmp	r3, #0
 800db74:	bfb8      	it	lt
 800db76:	f04f 33ff 	movlt.w	r3, #4294967295
 800db7a:	3402      	adds	r4, #2
 800db7c:	9305      	str	r3, [sp, #20]
 800db7e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800dc64 <_vfiprintf_r+0x25c>
 800db82:	7821      	ldrb	r1, [r4, #0]
 800db84:	2203      	movs	r2, #3
 800db86:	4650      	mov	r0, sl
 800db88:	f7f2 fb4a 	bl	8000220 <memchr>
 800db8c:	b140      	cbz	r0, 800dba0 <_vfiprintf_r+0x198>
 800db8e:	2340      	movs	r3, #64	; 0x40
 800db90:	eba0 000a 	sub.w	r0, r0, sl
 800db94:	fa03 f000 	lsl.w	r0, r3, r0
 800db98:	9b04      	ldr	r3, [sp, #16]
 800db9a:	4303      	orrs	r3, r0
 800db9c:	3401      	adds	r4, #1
 800db9e:	9304      	str	r3, [sp, #16]
 800dba0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dba4:	482c      	ldr	r0, [pc, #176]	; (800dc58 <_vfiprintf_r+0x250>)
 800dba6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800dbaa:	2206      	movs	r2, #6
 800dbac:	f7f2 fb38 	bl	8000220 <memchr>
 800dbb0:	2800      	cmp	r0, #0
 800dbb2:	d03f      	beq.n	800dc34 <_vfiprintf_r+0x22c>
 800dbb4:	4b29      	ldr	r3, [pc, #164]	; (800dc5c <_vfiprintf_r+0x254>)
 800dbb6:	bb1b      	cbnz	r3, 800dc00 <_vfiprintf_r+0x1f8>
 800dbb8:	9b03      	ldr	r3, [sp, #12]
 800dbba:	3307      	adds	r3, #7
 800dbbc:	f023 0307 	bic.w	r3, r3, #7
 800dbc0:	3308      	adds	r3, #8
 800dbc2:	9303      	str	r3, [sp, #12]
 800dbc4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dbc6:	443b      	add	r3, r7
 800dbc8:	9309      	str	r3, [sp, #36]	; 0x24
 800dbca:	e767      	b.n	800da9c <_vfiprintf_r+0x94>
 800dbcc:	fb0c 3202 	mla	r2, ip, r2, r3
 800dbd0:	460c      	mov	r4, r1
 800dbd2:	2001      	movs	r0, #1
 800dbd4:	e7a5      	b.n	800db22 <_vfiprintf_r+0x11a>
 800dbd6:	2300      	movs	r3, #0
 800dbd8:	3401      	adds	r4, #1
 800dbda:	9305      	str	r3, [sp, #20]
 800dbdc:	4619      	mov	r1, r3
 800dbde:	f04f 0c0a 	mov.w	ip, #10
 800dbe2:	4620      	mov	r0, r4
 800dbe4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800dbe8:	3a30      	subs	r2, #48	; 0x30
 800dbea:	2a09      	cmp	r2, #9
 800dbec:	d903      	bls.n	800dbf6 <_vfiprintf_r+0x1ee>
 800dbee:	2b00      	cmp	r3, #0
 800dbf0:	d0c5      	beq.n	800db7e <_vfiprintf_r+0x176>
 800dbf2:	9105      	str	r1, [sp, #20]
 800dbf4:	e7c3      	b.n	800db7e <_vfiprintf_r+0x176>
 800dbf6:	fb0c 2101 	mla	r1, ip, r1, r2
 800dbfa:	4604      	mov	r4, r0
 800dbfc:	2301      	movs	r3, #1
 800dbfe:	e7f0      	b.n	800dbe2 <_vfiprintf_r+0x1da>
 800dc00:	ab03      	add	r3, sp, #12
 800dc02:	9300      	str	r3, [sp, #0]
 800dc04:	462a      	mov	r2, r5
 800dc06:	4b16      	ldr	r3, [pc, #88]	; (800dc60 <_vfiprintf_r+0x258>)
 800dc08:	a904      	add	r1, sp, #16
 800dc0a:	4630      	mov	r0, r6
 800dc0c:	f7fd fddc 	bl	800b7c8 <_printf_float>
 800dc10:	4607      	mov	r7, r0
 800dc12:	1c78      	adds	r0, r7, #1
 800dc14:	d1d6      	bne.n	800dbc4 <_vfiprintf_r+0x1bc>
 800dc16:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800dc18:	07d9      	lsls	r1, r3, #31
 800dc1a:	d405      	bmi.n	800dc28 <_vfiprintf_r+0x220>
 800dc1c:	89ab      	ldrh	r3, [r5, #12]
 800dc1e:	059a      	lsls	r2, r3, #22
 800dc20:	d402      	bmi.n	800dc28 <_vfiprintf_r+0x220>
 800dc22:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800dc24:	f000 faaf 	bl	800e186 <__retarget_lock_release_recursive>
 800dc28:	89ab      	ldrh	r3, [r5, #12]
 800dc2a:	065b      	lsls	r3, r3, #25
 800dc2c:	f53f af12 	bmi.w	800da54 <_vfiprintf_r+0x4c>
 800dc30:	9809      	ldr	r0, [sp, #36]	; 0x24
 800dc32:	e711      	b.n	800da58 <_vfiprintf_r+0x50>
 800dc34:	ab03      	add	r3, sp, #12
 800dc36:	9300      	str	r3, [sp, #0]
 800dc38:	462a      	mov	r2, r5
 800dc3a:	4b09      	ldr	r3, [pc, #36]	; (800dc60 <_vfiprintf_r+0x258>)
 800dc3c:	a904      	add	r1, sp, #16
 800dc3e:	4630      	mov	r0, r6
 800dc40:	f7fe f866 	bl	800bd10 <_printf_i>
 800dc44:	e7e4      	b.n	800dc10 <_vfiprintf_r+0x208>
 800dc46:	bf00      	nop
 800dc48:	0800e9ec 	.word	0x0800e9ec
 800dc4c:	0800ea0c 	.word	0x0800ea0c
 800dc50:	0800e9cc 	.word	0x0800e9cc
 800dc54:	0800e874 	.word	0x0800e874
 800dc58:	0800e87e 	.word	0x0800e87e
 800dc5c:	0800b7c9 	.word	0x0800b7c9
 800dc60:	0800d9e5 	.word	0x0800d9e5
 800dc64:	0800e87a 	.word	0x0800e87a

0800dc68 <__swbuf_r>:
 800dc68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dc6a:	460e      	mov	r6, r1
 800dc6c:	4614      	mov	r4, r2
 800dc6e:	4605      	mov	r5, r0
 800dc70:	b118      	cbz	r0, 800dc7a <__swbuf_r+0x12>
 800dc72:	6983      	ldr	r3, [r0, #24]
 800dc74:	b90b      	cbnz	r3, 800dc7a <__swbuf_r+0x12>
 800dc76:	f000 f9e7 	bl	800e048 <__sinit>
 800dc7a:	4b21      	ldr	r3, [pc, #132]	; (800dd00 <__swbuf_r+0x98>)
 800dc7c:	429c      	cmp	r4, r3
 800dc7e:	d12b      	bne.n	800dcd8 <__swbuf_r+0x70>
 800dc80:	686c      	ldr	r4, [r5, #4]
 800dc82:	69a3      	ldr	r3, [r4, #24]
 800dc84:	60a3      	str	r3, [r4, #8]
 800dc86:	89a3      	ldrh	r3, [r4, #12]
 800dc88:	071a      	lsls	r2, r3, #28
 800dc8a:	d52f      	bpl.n	800dcec <__swbuf_r+0x84>
 800dc8c:	6923      	ldr	r3, [r4, #16]
 800dc8e:	b36b      	cbz	r3, 800dcec <__swbuf_r+0x84>
 800dc90:	6923      	ldr	r3, [r4, #16]
 800dc92:	6820      	ldr	r0, [r4, #0]
 800dc94:	1ac0      	subs	r0, r0, r3
 800dc96:	6963      	ldr	r3, [r4, #20]
 800dc98:	b2f6      	uxtb	r6, r6
 800dc9a:	4283      	cmp	r3, r0
 800dc9c:	4637      	mov	r7, r6
 800dc9e:	dc04      	bgt.n	800dcaa <__swbuf_r+0x42>
 800dca0:	4621      	mov	r1, r4
 800dca2:	4628      	mov	r0, r5
 800dca4:	f000 f93c 	bl	800df20 <_fflush_r>
 800dca8:	bb30      	cbnz	r0, 800dcf8 <__swbuf_r+0x90>
 800dcaa:	68a3      	ldr	r3, [r4, #8]
 800dcac:	3b01      	subs	r3, #1
 800dcae:	60a3      	str	r3, [r4, #8]
 800dcb0:	6823      	ldr	r3, [r4, #0]
 800dcb2:	1c5a      	adds	r2, r3, #1
 800dcb4:	6022      	str	r2, [r4, #0]
 800dcb6:	701e      	strb	r6, [r3, #0]
 800dcb8:	6963      	ldr	r3, [r4, #20]
 800dcba:	3001      	adds	r0, #1
 800dcbc:	4283      	cmp	r3, r0
 800dcbe:	d004      	beq.n	800dcca <__swbuf_r+0x62>
 800dcc0:	89a3      	ldrh	r3, [r4, #12]
 800dcc2:	07db      	lsls	r3, r3, #31
 800dcc4:	d506      	bpl.n	800dcd4 <__swbuf_r+0x6c>
 800dcc6:	2e0a      	cmp	r6, #10
 800dcc8:	d104      	bne.n	800dcd4 <__swbuf_r+0x6c>
 800dcca:	4621      	mov	r1, r4
 800dccc:	4628      	mov	r0, r5
 800dcce:	f000 f927 	bl	800df20 <_fflush_r>
 800dcd2:	b988      	cbnz	r0, 800dcf8 <__swbuf_r+0x90>
 800dcd4:	4638      	mov	r0, r7
 800dcd6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800dcd8:	4b0a      	ldr	r3, [pc, #40]	; (800dd04 <__swbuf_r+0x9c>)
 800dcda:	429c      	cmp	r4, r3
 800dcdc:	d101      	bne.n	800dce2 <__swbuf_r+0x7a>
 800dcde:	68ac      	ldr	r4, [r5, #8]
 800dce0:	e7cf      	b.n	800dc82 <__swbuf_r+0x1a>
 800dce2:	4b09      	ldr	r3, [pc, #36]	; (800dd08 <__swbuf_r+0xa0>)
 800dce4:	429c      	cmp	r4, r3
 800dce6:	bf08      	it	eq
 800dce8:	68ec      	ldreq	r4, [r5, #12]
 800dcea:	e7ca      	b.n	800dc82 <__swbuf_r+0x1a>
 800dcec:	4621      	mov	r1, r4
 800dcee:	4628      	mov	r0, r5
 800dcf0:	f000 f81a 	bl	800dd28 <__swsetup_r>
 800dcf4:	2800      	cmp	r0, #0
 800dcf6:	d0cb      	beq.n	800dc90 <__swbuf_r+0x28>
 800dcf8:	f04f 37ff 	mov.w	r7, #4294967295
 800dcfc:	e7ea      	b.n	800dcd4 <__swbuf_r+0x6c>
 800dcfe:	bf00      	nop
 800dd00:	0800e9ec 	.word	0x0800e9ec
 800dd04:	0800ea0c 	.word	0x0800ea0c
 800dd08:	0800e9cc 	.word	0x0800e9cc

0800dd0c <__ascii_wctomb>:
 800dd0c:	b149      	cbz	r1, 800dd22 <__ascii_wctomb+0x16>
 800dd0e:	2aff      	cmp	r2, #255	; 0xff
 800dd10:	bf85      	ittet	hi
 800dd12:	238a      	movhi	r3, #138	; 0x8a
 800dd14:	6003      	strhi	r3, [r0, #0]
 800dd16:	700a      	strbls	r2, [r1, #0]
 800dd18:	f04f 30ff 	movhi.w	r0, #4294967295
 800dd1c:	bf98      	it	ls
 800dd1e:	2001      	movls	r0, #1
 800dd20:	4770      	bx	lr
 800dd22:	4608      	mov	r0, r1
 800dd24:	4770      	bx	lr
	...

0800dd28 <__swsetup_r>:
 800dd28:	4b32      	ldr	r3, [pc, #200]	; (800ddf4 <__swsetup_r+0xcc>)
 800dd2a:	b570      	push	{r4, r5, r6, lr}
 800dd2c:	681d      	ldr	r5, [r3, #0]
 800dd2e:	4606      	mov	r6, r0
 800dd30:	460c      	mov	r4, r1
 800dd32:	b125      	cbz	r5, 800dd3e <__swsetup_r+0x16>
 800dd34:	69ab      	ldr	r3, [r5, #24]
 800dd36:	b913      	cbnz	r3, 800dd3e <__swsetup_r+0x16>
 800dd38:	4628      	mov	r0, r5
 800dd3a:	f000 f985 	bl	800e048 <__sinit>
 800dd3e:	4b2e      	ldr	r3, [pc, #184]	; (800ddf8 <__swsetup_r+0xd0>)
 800dd40:	429c      	cmp	r4, r3
 800dd42:	d10f      	bne.n	800dd64 <__swsetup_r+0x3c>
 800dd44:	686c      	ldr	r4, [r5, #4]
 800dd46:	89a3      	ldrh	r3, [r4, #12]
 800dd48:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800dd4c:	0719      	lsls	r1, r3, #28
 800dd4e:	d42c      	bmi.n	800ddaa <__swsetup_r+0x82>
 800dd50:	06dd      	lsls	r5, r3, #27
 800dd52:	d411      	bmi.n	800dd78 <__swsetup_r+0x50>
 800dd54:	2309      	movs	r3, #9
 800dd56:	6033      	str	r3, [r6, #0]
 800dd58:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800dd5c:	81a3      	strh	r3, [r4, #12]
 800dd5e:	f04f 30ff 	mov.w	r0, #4294967295
 800dd62:	e03e      	b.n	800dde2 <__swsetup_r+0xba>
 800dd64:	4b25      	ldr	r3, [pc, #148]	; (800ddfc <__swsetup_r+0xd4>)
 800dd66:	429c      	cmp	r4, r3
 800dd68:	d101      	bne.n	800dd6e <__swsetup_r+0x46>
 800dd6a:	68ac      	ldr	r4, [r5, #8]
 800dd6c:	e7eb      	b.n	800dd46 <__swsetup_r+0x1e>
 800dd6e:	4b24      	ldr	r3, [pc, #144]	; (800de00 <__swsetup_r+0xd8>)
 800dd70:	429c      	cmp	r4, r3
 800dd72:	bf08      	it	eq
 800dd74:	68ec      	ldreq	r4, [r5, #12]
 800dd76:	e7e6      	b.n	800dd46 <__swsetup_r+0x1e>
 800dd78:	0758      	lsls	r0, r3, #29
 800dd7a:	d512      	bpl.n	800dda2 <__swsetup_r+0x7a>
 800dd7c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800dd7e:	b141      	cbz	r1, 800dd92 <__swsetup_r+0x6a>
 800dd80:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800dd84:	4299      	cmp	r1, r3
 800dd86:	d002      	beq.n	800dd8e <__swsetup_r+0x66>
 800dd88:	4630      	mov	r0, r6
 800dd8a:	f7ff fb31 	bl	800d3f0 <_free_r>
 800dd8e:	2300      	movs	r3, #0
 800dd90:	6363      	str	r3, [r4, #52]	; 0x34
 800dd92:	89a3      	ldrh	r3, [r4, #12]
 800dd94:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800dd98:	81a3      	strh	r3, [r4, #12]
 800dd9a:	2300      	movs	r3, #0
 800dd9c:	6063      	str	r3, [r4, #4]
 800dd9e:	6923      	ldr	r3, [r4, #16]
 800dda0:	6023      	str	r3, [r4, #0]
 800dda2:	89a3      	ldrh	r3, [r4, #12]
 800dda4:	f043 0308 	orr.w	r3, r3, #8
 800dda8:	81a3      	strh	r3, [r4, #12]
 800ddaa:	6923      	ldr	r3, [r4, #16]
 800ddac:	b94b      	cbnz	r3, 800ddc2 <__swsetup_r+0x9a>
 800ddae:	89a3      	ldrh	r3, [r4, #12]
 800ddb0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800ddb4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ddb8:	d003      	beq.n	800ddc2 <__swsetup_r+0x9a>
 800ddba:	4621      	mov	r1, r4
 800ddbc:	4630      	mov	r0, r6
 800ddbe:	f000 fa09 	bl	800e1d4 <__smakebuf_r>
 800ddc2:	89a0      	ldrh	r0, [r4, #12]
 800ddc4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ddc8:	f010 0301 	ands.w	r3, r0, #1
 800ddcc:	d00a      	beq.n	800dde4 <__swsetup_r+0xbc>
 800ddce:	2300      	movs	r3, #0
 800ddd0:	60a3      	str	r3, [r4, #8]
 800ddd2:	6963      	ldr	r3, [r4, #20]
 800ddd4:	425b      	negs	r3, r3
 800ddd6:	61a3      	str	r3, [r4, #24]
 800ddd8:	6923      	ldr	r3, [r4, #16]
 800ddda:	b943      	cbnz	r3, 800ddee <__swsetup_r+0xc6>
 800dddc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800dde0:	d1ba      	bne.n	800dd58 <__swsetup_r+0x30>
 800dde2:	bd70      	pop	{r4, r5, r6, pc}
 800dde4:	0781      	lsls	r1, r0, #30
 800dde6:	bf58      	it	pl
 800dde8:	6963      	ldrpl	r3, [r4, #20]
 800ddea:	60a3      	str	r3, [r4, #8]
 800ddec:	e7f4      	b.n	800ddd8 <__swsetup_r+0xb0>
 800ddee:	2000      	movs	r0, #0
 800ddf0:	e7f7      	b.n	800dde2 <__swsetup_r+0xba>
 800ddf2:	bf00      	nop
 800ddf4:	200002c8 	.word	0x200002c8
 800ddf8:	0800e9ec 	.word	0x0800e9ec
 800ddfc:	0800ea0c 	.word	0x0800ea0c
 800de00:	0800e9cc 	.word	0x0800e9cc

0800de04 <abort>:
 800de04:	b508      	push	{r3, lr}
 800de06:	2006      	movs	r0, #6
 800de08:	f000 fa54 	bl	800e2b4 <raise>
 800de0c:	2001      	movs	r0, #1
 800de0e:	f7f3 fd3b 	bl	8001888 <_exit>
	...

0800de14 <__sflush_r>:
 800de14:	898a      	ldrh	r2, [r1, #12]
 800de16:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800de1a:	4605      	mov	r5, r0
 800de1c:	0710      	lsls	r0, r2, #28
 800de1e:	460c      	mov	r4, r1
 800de20:	d458      	bmi.n	800ded4 <__sflush_r+0xc0>
 800de22:	684b      	ldr	r3, [r1, #4]
 800de24:	2b00      	cmp	r3, #0
 800de26:	dc05      	bgt.n	800de34 <__sflush_r+0x20>
 800de28:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800de2a:	2b00      	cmp	r3, #0
 800de2c:	dc02      	bgt.n	800de34 <__sflush_r+0x20>
 800de2e:	2000      	movs	r0, #0
 800de30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800de34:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800de36:	2e00      	cmp	r6, #0
 800de38:	d0f9      	beq.n	800de2e <__sflush_r+0x1a>
 800de3a:	2300      	movs	r3, #0
 800de3c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800de40:	682f      	ldr	r7, [r5, #0]
 800de42:	602b      	str	r3, [r5, #0]
 800de44:	d032      	beq.n	800deac <__sflush_r+0x98>
 800de46:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800de48:	89a3      	ldrh	r3, [r4, #12]
 800de4a:	075a      	lsls	r2, r3, #29
 800de4c:	d505      	bpl.n	800de5a <__sflush_r+0x46>
 800de4e:	6863      	ldr	r3, [r4, #4]
 800de50:	1ac0      	subs	r0, r0, r3
 800de52:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800de54:	b10b      	cbz	r3, 800de5a <__sflush_r+0x46>
 800de56:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800de58:	1ac0      	subs	r0, r0, r3
 800de5a:	2300      	movs	r3, #0
 800de5c:	4602      	mov	r2, r0
 800de5e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800de60:	6a21      	ldr	r1, [r4, #32]
 800de62:	4628      	mov	r0, r5
 800de64:	47b0      	blx	r6
 800de66:	1c43      	adds	r3, r0, #1
 800de68:	89a3      	ldrh	r3, [r4, #12]
 800de6a:	d106      	bne.n	800de7a <__sflush_r+0x66>
 800de6c:	6829      	ldr	r1, [r5, #0]
 800de6e:	291d      	cmp	r1, #29
 800de70:	d82c      	bhi.n	800decc <__sflush_r+0xb8>
 800de72:	4a2a      	ldr	r2, [pc, #168]	; (800df1c <__sflush_r+0x108>)
 800de74:	40ca      	lsrs	r2, r1
 800de76:	07d6      	lsls	r6, r2, #31
 800de78:	d528      	bpl.n	800decc <__sflush_r+0xb8>
 800de7a:	2200      	movs	r2, #0
 800de7c:	6062      	str	r2, [r4, #4]
 800de7e:	04d9      	lsls	r1, r3, #19
 800de80:	6922      	ldr	r2, [r4, #16]
 800de82:	6022      	str	r2, [r4, #0]
 800de84:	d504      	bpl.n	800de90 <__sflush_r+0x7c>
 800de86:	1c42      	adds	r2, r0, #1
 800de88:	d101      	bne.n	800de8e <__sflush_r+0x7a>
 800de8a:	682b      	ldr	r3, [r5, #0]
 800de8c:	b903      	cbnz	r3, 800de90 <__sflush_r+0x7c>
 800de8e:	6560      	str	r0, [r4, #84]	; 0x54
 800de90:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800de92:	602f      	str	r7, [r5, #0]
 800de94:	2900      	cmp	r1, #0
 800de96:	d0ca      	beq.n	800de2e <__sflush_r+0x1a>
 800de98:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800de9c:	4299      	cmp	r1, r3
 800de9e:	d002      	beq.n	800dea6 <__sflush_r+0x92>
 800dea0:	4628      	mov	r0, r5
 800dea2:	f7ff faa5 	bl	800d3f0 <_free_r>
 800dea6:	2000      	movs	r0, #0
 800dea8:	6360      	str	r0, [r4, #52]	; 0x34
 800deaa:	e7c1      	b.n	800de30 <__sflush_r+0x1c>
 800deac:	6a21      	ldr	r1, [r4, #32]
 800deae:	2301      	movs	r3, #1
 800deb0:	4628      	mov	r0, r5
 800deb2:	47b0      	blx	r6
 800deb4:	1c41      	adds	r1, r0, #1
 800deb6:	d1c7      	bne.n	800de48 <__sflush_r+0x34>
 800deb8:	682b      	ldr	r3, [r5, #0]
 800deba:	2b00      	cmp	r3, #0
 800debc:	d0c4      	beq.n	800de48 <__sflush_r+0x34>
 800debe:	2b1d      	cmp	r3, #29
 800dec0:	d001      	beq.n	800dec6 <__sflush_r+0xb2>
 800dec2:	2b16      	cmp	r3, #22
 800dec4:	d101      	bne.n	800deca <__sflush_r+0xb6>
 800dec6:	602f      	str	r7, [r5, #0]
 800dec8:	e7b1      	b.n	800de2e <__sflush_r+0x1a>
 800deca:	89a3      	ldrh	r3, [r4, #12]
 800decc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ded0:	81a3      	strh	r3, [r4, #12]
 800ded2:	e7ad      	b.n	800de30 <__sflush_r+0x1c>
 800ded4:	690f      	ldr	r7, [r1, #16]
 800ded6:	2f00      	cmp	r7, #0
 800ded8:	d0a9      	beq.n	800de2e <__sflush_r+0x1a>
 800deda:	0793      	lsls	r3, r2, #30
 800dedc:	680e      	ldr	r6, [r1, #0]
 800dede:	bf08      	it	eq
 800dee0:	694b      	ldreq	r3, [r1, #20]
 800dee2:	600f      	str	r7, [r1, #0]
 800dee4:	bf18      	it	ne
 800dee6:	2300      	movne	r3, #0
 800dee8:	eba6 0807 	sub.w	r8, r6, r7
 800deec:	608b      	str	r3, [r1, #8]
 800deee:	f1b8 0f00 	cmp.w	r8, #0
 800def2:	dd9c      	ble.n	800de2e <__sflush_r+0x1a>
 800def4:	6a21      	ldr	r1, [r4, #32]
 800def6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800def8:	4643      	mov	r3, r8
 800defa:	463a      	mov	r2, r7
 800defc:	4628      	mov	r0, r5
 800defe:	47b0      	blx	r6
 800df00:	2800      	cmp	r0, #0
 800df02:	dc06      	bgt.n	800df12 <__sflush_r+0xfe>
 800df04:	89a3      	ldrh	r3, [r4, #12]
 800df06:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800df0a:	81a3      	strh	r3, [r4, #12]
 800df0c:	f04f 30ff 	mov.w	r0, #4294967295
 800df10:	e78e      	b.n	800de30 <__sflush_r+0x1c>
 800df12:	4407      	add	r7, r0
 800df14:	eba8 0800 	sub.w	r8, r8, r0
 800df18:	e7e9      	b.n	800deee <__sflush_r+0xda>
 800df1a:	bf00      	nop
 800df1c:	20400001 	.word	0x20400001

0800df20 <_fflush_r>:
 800df20:	b538      	push	{r3, r4, r5, lr}
 800df22:	690b      	ldr	r3, [r1, #16]
 800df24:	4605      	mov	r5, r0
 800df26:	460c      	mov	r4, r1
 800df28:	b913      	cbnz	r3, 800df30 <_fflush_r+0x10>
 800df2a:	2500      	movs	r5, #0
 800df2c:	4628      	mov	r0, r5
 800df2e:	bd38      	pop	{r3, r4, r5, pc}
 800df30:	b118      	cbz	r0, 800df3a <_fflush_r+0x1a>
 800df32:	6983      	ldr	r3, [r0, #24]
 800df34:	b90b      	cbnz	r3, 800df3a <_fflush_r+0x1a>
 800df36:	f000 f887 	bl	800e048 <__sinit>
 800df3a:	4b14      	ldr	r3, [pc, #80]	; (800df8c <_fflush_r+0x6c>)
 800df3c:	429c      	cmp	r4, r3
 800df3e:	d11b      	bne.n	800df78 <_fflush_r+0x58>
 800df40:	686c      	ldr	r4, [r5, #4]
 800df42:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800df46:	2b00      	cmp	r3, #0
 800df48:	d0ef      	beq.n	800df2a <_fflush_r+0xa>
 800df4a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800df4c:	07d0      	lsls	r0, r2, #31
 800df4e:	d404      	bmi.n	800df5a <_fflush_r+0x3a>
 800df50:	0599      	lsls	r1, r3, #22
 800df52:	d402      	bmi.n	800df5a <_fflush_r+0x3a>
 800df54:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800df56:	f000 f915 	bl	800e184 <__retarget_lock_acquire_recursive>
 800df5a:	4628      	mov	r0, r5
 800df5c:	4621      	mov	r1, r4
 800df5e:	f7ff ff59 	bl	800de14 <__sflush_r>
 800df62:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800df64:	07da      	lsls	r2, r3, #31
 800df66:	4605      	mov	r5, r0
 800df68:	d4e0      	bmi.n	800df2c <_fflush_r+0xc>
 800df6a:	89a3      	ldrh	r3, [r4, #12]
 800df6c:	059b      	lsls	r3, r3, #22
 800df6e:	d4dd      	bmi.n	800df2c <_fflush_r+0xc>
 800df70:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800df72:	f000 f908 	bl	800e186 <__retarget_lock_release_recursive>
 800df76:	e7d9      	b.n	800df2c <_fflush_r+0xc>
 800df78:	4b05      	ldr	r3, [pc, #20]	; (800df90 <_fflush_r+0x70>)
 800df7a:	429c      	cmp	r4, r3
 800df7c:	d101      	bne.n	800df82 <_fflush_r+0x62>
 800df7e:	68ac      	ldr	r4, [r5, #8]
 800df80:	e7df      	b.n	800df42 <_fflush_r+0x22>
 800df82:	4b04      	ldr	r3, [pc, #16]	; (800df94 <_fflush_r+0x74>)
 800df84:	429c      	cmp	r4, r3
 800df86:	bf08      	it	eq
 800df88:	68ec      	ldreq	r4, [r5, #12]
 800df8a:	e7da      	b.n	800df42 <_fflush_r+0x22>
 800df8c:	0800e9ec 	.word	0x0800e9ec
 800df90:	0800ea0c 	.word	0x0800ea0c
 800df94:	0800e9cc 	.word	0x0800e9cc

0800df98 <std>:
 800df98:	2300      	movs	r3, #0
 800df9a:	b510      	push	{r4, lr}
 800df9c:	4604      	mov	r4, r0
 800df9e:	e9c0 3300 	strd	r3, r3, [r0]
 800dfa2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800dfa6:	6083      	str	r3, [r0, #8]
 800dfa8:	8181      	strh	r1, [r0, #12]
 800dfaa:	6643      	str	r3, [r0, #100]	; 0x64
 800dfac:	81c2      	strh	r2, [r0, #14]
 800dfae:	6183      	str	r3, [r0, #24]
 800dfb0:	4619      	mov	r1, r3
 800dfb2:	2208      	movs	r2, #8
 800dfb4:	305c      	adds	r0, #92	; 0x5c
 800dfb6:	f7fd fb5f 	bl	800b678 <memset>
 800dfba:	4b05      	ldr	r3, [pc, #20]	; (800dfd0 <std+0x38>)
 800dfbc:	6263      	str	r3, [r4, #36]	; 0x24
 800dfbe:	4b05      	ldr	r3, [pc, #20]	; (800dfd4 <std+0x3c>)
 800dfc0:	62a3      	str	r3, [r4, #40]	; 0x28
 800dfc2:	4b05      	ldr	r3, [pc, #20]	; (800dfd8 <std+0x40>)
 800dfc4:	62e3      	str	r3, [r4, #44]	; 0x2c
 800dfc6:	4b05      	ldr	r3, [pc, #20]	; (800dfdc <std+0x44>)
 800dfc8:	6224      	str	r4, [r4, #32]
 800dfca:	6323      	str	r3, [r4, #48]	; 0x30
 800dfcc:	bd10      	pop	{r4, pc}
 800dfce:	bf00      	nop
 800dfd0:	0800e2ed 	.word	0x0800e2ed
 800dfd4:	0800e30f 	.word	0x0800e30f
 800dfd8:	0800e347 	.word	0x0800e347
 800dfdc:	0800e36b 	.word	0x0800e36b

0800dfe0 <_cleanup_r>:
 800dfe0:	4901      	ldr	r1, [pc, #4]	; (800dfe8 <_cleanup_r+0x8>)
 800dfe2:	f000 b8af 	b.w	800e144 <_fwalk_reent>
 800dfe6:	bf00      	nop
 800dfe8:	0800df21 	.word	0x0800df21

0800dfec <__sfmoreglue>:
 800dfec:	b570      	push	{r4, r5, r6, lr}
 800dfee:	2268      	movs	r2, #104	; 0x68
 800dff0:	1e4d      	subs	r5, r1, #1
 800dff2:	4355      	muls	r5, r2
 800dff4:	460e      	mov	r6, r1
 800dff6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800dffa:	f7ff fa65 	bl	800d4c8 <_malloc_r>
 800dffe:	4604      	mov	r4, r0
 800e000:	b140      	cbz	r0, 800e014 <__sfmoreglue+0x28>
 800e002:	2100      	movs	r1, #0
 800e004:	e9c0 1600 	strd	r1, r6, [r0]
 800e008:	300c      	adds	r0, #12
 800e00a:	60a0      	str	r0, [r4, #8]
 800e00c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800e010:	f7fd fb32 	bl	800b678 <memset>
 800e014:	4620      	mov	r0, r4
 800e016:	bd70      	pop	{r4, r5, r6, pc}

0800e018 <__sfp_lock_acquire>:
 800e018:	4801      	ldr	r0, [pc, #4]	; (800e020 <__sfp_lock_acquire+0x8>)
 800e01a:	f000 b8b3 	b.w	800e184 <__retarget_lock_acquire_recursive>
 800e01e:	bf00      	nop
 800e020:	200006a5 	.word	0x200006a5

0800e024 <__sfp_lock_release>:
 800e024:	4801      	ldr	r0, [pc, #4]	; (800e02c <__sfp_lock_release+0x8>)
 800e026:	f000 b8ae 	b.w	800e186 <__retarget_lock_release_recursive>
 800e02a:	bf00      	nop
 800e02c:	200006a5 	.word	0x200006a5

0800e030 <__sinit_lock_acquire>:
 800e030:	4801      	ldr	r0, [pc, #4]	; (800e038 <__sinit_lock_acquire+0x8>)
 800e032:	f000 b8a7 	b.w	800e184 <__retarget_lock_acquire_recursive>
 800e036:	bf00      	nop
 800e038:	200006a6 	.word	0x200006a6

0800e03c <__sinit_lock_release>:
 800e03c:	4801      	ldr	r0, [pc, #4]	; (800e044 <__sinit_lock_release+0x8>)
 800e03e:	f000 b8a2 	b.w	800e186 <__retarget_lock_release_recursive>
 800e042:	bf00      	nop
 800e044:	200006a6 	.word	0x200006a6

0800e048 <__sinit>:
 800e048:	b510      	push	{r4, lr}
 800e04a:	4604      	mov	r4, r0
 800e04c:	f7ff fff0 	bl	800e030 <__sinit_lock_acquire>
 800e050:	69a3      	ldr	r3, [r4, #24]
 800e052:	b11b      	cbz	r3, 800e05c <__sinit+0x14>
 800e054:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e058:	f7ff bff0 	b.w	800e03c <__sinit_lock_release>
 800e05c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800e060:	6523      	str	r3, [r4, #80]	; 0x50
 800e062:	4b13      	ldr	r3, [pc, #76]	; (800e0b0 <__sinit+0x68>)
 800e064:	4a13      	ldr	r2, [pc, #76]	; (800e0b4 <__sinit+0x6c>)
 800e066:	681b      	ldr	r3, [r3, #0]
 800e068:	62a2      	str	r2, [r4, #40]	; 0x28
 800e06a:	42a3      	cmp	r3, r4
 800e06c:	bf04      	itt	eq
 800e06e:	2301      	moveq	r3, #1
 800e070:	61a3      	streq	r3, [r4, #24]
 800e072:	4620      	mov	r0, r4
 800e074:	f000 f820 	bl	800e0b8 <__sfp>
 800e078:	6060      	str	r0, [r4, #4]
 800e07a:	4620      	mov	r0, r4
 800e07c:	f000 f81c 	bl	800e0b8 <__sfp>
 800e080:	60a0      	str	r0, [r4, #8]
 800e082:	4620      	mov	r0, r4
 800e084:	f000 f818 	bl	800e0b8 <__sfp>
 800e088:	2200      	movs	r2, #0
 800e08a:	60e0      	str	r0, [r4, #12]
 800e08c:	2104      	movs	r1, #4
 800e08e:	6860      	ldr	r0, [r4, #4]
 800e090:	f7ff ff82 	bl	800df98 <std>
 800e094:	68a0      	ldr	r0, [r4, #8]
 800e096:	2201      	movs	r2, #1
 800e098:	2109      	movs	r1, #9
 800e09a:	f7ff ff7d 	bl	800df98 <std>
 800e09e:	68e0      	ldr	r0, [r4, #12]
 800e0a0:	2202      	movs	r2, #2
 800e0a2:	2112      	movs	r1, #18
 800e0a4:	f7ff ff78 	bl	800df98 <std>
 800e0a8:	2301      	movs	r3, #1
 800e0aa:	61a3      	str	r3, [r4, #24]
 800e0ac:	e7d2      	b.n	800e054 <__sinit+0xc>
 800e0ae:	bf00      	nop
 800e0b0:	0800e654 	.word	0x0800e654
 800e0b4:	0800dfe1 	.word	0x0800dfe1

0800e0b8 <__sfp>:
 800e0b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e0ba:	4607      	mov	r7, r0
 800e0bc:	f7ff ffac 	bl	800e018 <__sfp_lock_acquire>
 800e0c0:	4b1e      	ldr	r3, [pc, #120]	; (800e13c <__sfp+0x84>)
 800e0c2:	681e      	ldr	r6, [r3, #0]
 800e0c4:	69b3      	ldr	r3, [r6, #24]
 800e0c6:	b913      	cbnz	r3, 800e0ce <__sfp+0x16>
 800e0c8:	4630      	mov	r0, r6
 800e0ca:	f7ff ffbd 	bl	800e048 <__sinit>
 800e0ce:	3648      	adds	r6, #72	; 0x48
 800e0d0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800e0d4:	3b01      	subs	r3, #1
 800e0d6:	d503      	bpl.n	800e0e0 <__sfp+0x28>
 800e0d8:	6833      	ldr	r3, [r6, #0]
 800e0da:	b30b      	cbz	r3, 800e120 <__sfp+0x68>
 800e0dc:	6836      	ldr	r6, [r6, #0]
 800e0de:	e7f7      	b.n	800e0d0 <__sfp+0x18>
 800e0e0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800e0e4:	b9d5      	cbnz	r5, 800e11c <__sfp+0x64>
 800e0e6:	4b16      	ldr	r3, [pc, #88]	; (800e140 <__sfp+0x88>)
 800e0e8:	60e3      	str	r3, [r4, #12]
 800e0ea:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800e0ee:	6665      	str	r5, [r4, #100]	; 0x64
 800e0f0:	f000 f847 	bl	800e182 <__retarget_lock_init_recursive>
 800e0f4:	f7ff ff96 	bl	800e024 <__sfp_lock_release>
 800e0f8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800e0fc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800e100:	6025      	str	r5, [r4, #0]
 800e102:	61a5      	str	r5, [r4, #24]
 800e104:	2208      	movs	r2, #8
 800e106:	4629      	mov	r1, r5
 800e108:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800e10c:	f7fd fab4 	bl	800b678 <memset>
 800e110:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800e114:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800e118:	4620      	mov	r0, r4
 800e11a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e11c:	3468      	adds	r4, #104	; 0x68
 800e11e:	e7d9      	b.n	800e0d4 <__sfp+0x1c>
 800e120:	2104      	movs	r1, #4
 800e122:	4638      	mov	r0, r7
 800e124:	f7ff ff62 	bl	800dfec <__sfmoreglue>
 800e128:	4604      	mov	r4, r0
 800e12a:	6030      	str	r0, [r6, #0]
 800e12c:	2800      	cmp	r0, #0
 800e12e:	d1d5      	bne.n	800e0dc <__sfp+0x24>
 800e130:	f7ff ff78 	bl	800e024 <__sfp_lock_release>
 800e134:	230c      	movs	r3, #12
 800e136:	603b      	str	r3, [r7, #0]
 800e138:	e7ee      	b.n	800e118 <__sfp+0x60>
 800e13a:	bf00      	nop
 800e13c:	0800e654 	.word	0x0800e654
 800e140:	ffff0001 	.word	0xffff0001

0800e144 <_fwalk_reent>:
 800e144:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e148:	4606      	mov	r6, r0
 800e14a:	4688      	mov	r8, r1
 800e14c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800e150:	2700      	movs	r7, #0
 800e152:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800e156:	f1b9 0901 	subs.w	r9, r9, #1
 800e15a:	d505      	bpl.n	800e168 <_fwalk_reent+0x24>
 800e15c:	6824      	ldr	r4, [r4, #0]
 800e15e:	2c00      	cmp	r4, #0
 800e160:	d1f7      	bne.n	800e152 <_fwalk_reent+0xe>
 800e162:	4638      	mov	r0, r7
 800e164:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e168:	89ab      	ldrh	r3, [r5, #12]
 800e16a:	2b01      	cmp	r3, #1
 800e16c:	d907      	bls.n	800e17e <_fwalk_reent+0x3a>
 800e16e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800e172:	3301      	adds	r3, #1
 800e174:	d003      	beq.n	800e17e <_fwalk_reent+0x3a>
 800e176:	4629      	mov	r1, r5
 800e178:	4630      	mov	r0, r6
 800e17a:	47c0      	blx	r8
 800e17c:	4307      	orrs	r7, r0
 800e17e:	3568      	adds	r5, #104	; 0x68
 800e180:	e7e9      	b.n	800e156 <_fwalk_reent+0x12>

0800e182 <__retarget_lock_init_recursive>:
 800e182:	4770      	bx	lr

0800e184 <__retarget_lock_acquire_recursive>:
 800e184:	4770      	bx	lr

0800e186 <__retarget_lock_release_recursive>:
 800e186:	4770      	bx	lr

0800e188 <__swhatbuf_r>:
 800e188:	b570      	push	{r4, r5, r6, lr}
 800e18a:	460e      	mov	r6, r1
 800e18c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e190:	2900      	cmp	r1, #0
 800e192:	b096      	sub	sp, #88	; 0x58
 800e194:	4614      	mov	r4, r2
 800e196:	461d      	mov	r5, r3
 800e198:	da08      	bge.n	800e1ac <__swhatbuf_r+0x24>
 800e19a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800e19e:	2200      	movs	r2, #0
 800e1a0:	602a      	str	r2, [r5, #0]
 800e1a2:	061a      	lsls	r2, r3, #24
 800e1a4:	d410      	bmi.n	800e1c8 <__swhatbuf_r+0x40>
 800e1a6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e1aa:	e00e      	b.n	800e1ca <__swhatbuf_r+0x42>
 800e1ac:	466a      	mov	r2, sp
 800e1ae:	f000 f903 	bl	800e3b8 <_fstat_r>
 800e1b2:	2800      	cmp	r0, #0
 800e1b4:	dbf1      	blt.n	800e19a <__swhatbuf_r+0x12>
 800e1b6:	9a01      	ldr	r2, [sp, #4]
 800e1b8:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800e1bc:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800e1c0:	425a      	negs	r2, r3
 800e1c2:	415a      	adcs	r2, r3
 800e1c4:	602a      	str	r2, [r5, #0]
 800e1c6:	e7ee      	b.n	800e1a6 <__swhatbuf_r+0x1e>
 800e1c8:	2340      	movs	r3, #64	; 0x40
 800e1ca:	2000      	movs	r0, #0
 800e1cc:	6023      	str	r3, [r4, #0]
 800e1ce:	b016      	add	sp, #88	; 0x58
 800e1d0:	bd70      	pop	{r4, r5, r6, pc}
	...

0800e1d4 <__smakebuf_r>:
 800e1d4:	898b      	ldrh	r3, [r1, #12]
 800e1d6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800e1d8:	079d      	lsls	r5, r3, #30
 800e1da:	4606      	mov	r6, r0
 800e1dc:	460c      	mov	r4, r1
 800e1de:	d507      	bpl.n	800e1f0 <__smakebuf_r+0x1c>
 800e1e0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800e1e4:	6023      	str	r3, [r4, #0]
 800e1e6:	6123      	str	r3, [r4, #16]
 800e1e8:	2301      	movs	r3, #1
 800e1ea:	6163      	str	r3, [r4, #20]
 800e1ec:	b002      	add	sp, #8
 800e1ee:	bd70      	pop	{r4, r5, r6, pc}
 800e1f0:	ab01      	add	r3, sp, #4
 800e1f2:	466a      	mov	r2, sp
 800e1f4:	f7ff ffc8 	bl	800e188 <__swhatbuf_r>
 800e1f8:	9900      	ldr	r1, [sp, #0]
 800e1fa:	4605      	mov	r5, r0
 800e1fc:	4630      	mov	r0, r6
 800e1fe:	f7ff f963 	bl	800d4c8 <_malloc_r>
 800e202:	b948      	cbnz	r0, 800e218 <__smakebuf_r+0x44>
 800e204:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e208:	059a      	lsls	r2, r3, #22
 800e20a:	d4ef      	bmi.n	800e1ec <__smakebuf_r+0x18>
 800e20c:	f023 0303 	bic.w	r3, r3, #3
 800e210:	f043 0302 	orr.w	r3, r3, #2
 800e214:	81a3      	strh	r3, [r4, #12]
 800e216:	e7e3      	b.n	800e1e0 <__smakebuf_r+0xc>
 800e218:	4b0d      	ldr	r3, [pc, #52]	; (800e250 <__smakebuf_r+0x7c>)
 800e21a:	62b3      	str	r3, [r6, #40]	; 0x28
 800e21c:	89a3      	ldrh	r3, [r4, #12]
 800e21e:	6020      	str	r0, [r4, #0]
 800e220:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e224:	81a3      	strh	r3, [r4, #12]
 800e226:	9b00      	ldr	r3, [sp, #0]
 800e228:	6163      	str	r3, [r4, #20]
 800e22a:	9b01      	ldr	r3, [sp, #4]
 800e22c:	6120      	str	r0, [r4, #16]
 800e22e:	b15b      	cbz	r3, 800e248 <__smakebuf_r+0x74>
 800e230:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e234:	4630      	mov	r0, r6
 800e236:	f000 f8d1 	bl	800e3dc <_isatty_r>
 800e23a:	b128      	cbz	r0, 800e248 <__smakebuf_r+0x74>
 800e23c:	89a3      	ldrh	r3, [r4, #12]
 800e23e:	f023 0303 	bic.w	r3, r3, #3
 800e242:	f043 0301 	orr.w	r3, r3, #1
 800e246:	81a3      	strh	r3, [r4, #12]
 800e248:	89a0      	ldrh	r0, [r4, #12]
 800e24a:	4305      	orrs	r5, r0
 800e24c:	81a5      	strh	r5, [r4, #12]
 800e24e:	e7cd      	b.n	800e1ec <__smakebuf_r+0x18>
 800e250:	0800dfe1 	.word	0x0800dfe1

0800e254 <_malloc_usable_size_r>:
 800e254:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e258:	1f18      	subs	r0, r3, #4
 800e25a:	2b00      	cmp	r3, #0
 800e25c:	bfbc      	itt	lt
 800e25e:	580b      	ldrlt	r3, [r1, r0]
 800e260:	18c0      	addlt	r0, r0, r3
 800e262:	4770      	bx	lr

0800e264 <_raise_r>:
 800e264:	291f      	cmp	r1, #31
 800e266:	b538      	push	{r3, r4, r5, lr}
 800e268:	4604      	mov	r4, r0
 800e26a:	460d      	mov	r5, r1
 800e26c:	d904      	bls.n	800e278 <_raise_r+0x14>
 800e26e:	2316      	movs	r3, #22
 800e270:	6003      	str	r3, [r0, #0]
 800e272:	f04f 30ff 	mov.w	r0, #4294967295
 800e276:	bd38      	pop	{r3, r4, r5, pc}
 800e278:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800e27a:	b112      	cbz	r2, 800e282 <_raise_r+0x1e>
 800e27c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800e280:	b94b      	cbnz	r3, 800e296 <_raise_r+0x32>
 800e282:	4620      	mov	r0, r4
 800e284:	f000 f830 	bl	800e2e8 <_getpid_r>
 800e288:	462a      	mov	r2, r5
 800e28a:	4601      	mov	r1, r0
 800e28c:	4620      	mov	r0, r4
 800e28e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e292:	f000 b817 	b.w	800e2c4 <_kill_r>
 800e296:	2b01      	cmp	r3, #1
 800e298:	d00a      	beq.n	800e2b0 <_raise_r+0x4c>
 800e29a:	1c59      	adds	r1, r3, #1
 800e29c:	d103      	bne.n	800e2a6 <_raise_r+0x42>
 800e29e:	2316      	movs	r3, #22
 800e2a0:	6003      	str	r3, [r0, #0]
 800e2a2:	2001      	movs	r0, #1
 800e2a4:	e7e7      	b.n	800e276 <_raise_r+0x12>
 800e2a6:	2400      	movs	r4, #0
 800e2a8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800e2ac:	4628      	mov	r0, r5
 800e2ae:	4798      	blx	r3
 800e2b0:	2000      	movs	r0, #0
 800e2b2:	e7e0      	b.n	800e276 <_raise_r+0x12>

0800e2b4 <raise>:
 800e2b4:	4b02      	ldr	r3, [pc, #8]	; (800e2c0 <raise+0xc>)
 800e2b6:	4601      	mov	r1, r0
 800e2b8:	6818      	ldr	r0, [r3, #0]
 800e2ba:	f7ff bfd3 	b.w	800e264 <_raise_r>
 800e2be:	bf00      	nop
 800e2c0:	200002c8 	.word	0x200002c8

0800e2c4 <_kill_r>:
 800e2c4:	b538      	push	{r3, r4, r5, lr}
 800e2c6:	4d07      	ldr	r5, [pc, #28]	; (800e2e4 <_kill_r+0x20>)
 800e2c8:	2300      	movs	r3, #0
 800e2ca:	4604      	mov	r4, r0
 800e2cc:	4608      	mov	r0, r1
 800e2ce:	4611      	mov	r1, r2
 800e2d0:	602b      	str	r3, [r5, #0]
 800e2d2:	f7f3 fac9 	bl	8001868 <_kill>
 800e2d6:	1c43      	adds	r3, r0, #1
 800e2d8:	d102      	bne.n	800e2e0 <_kill_r+0x1c>
 800e2da:	682b      	ldr	r3, [r5, #0]
 800e2dc:	b103      	cbz	r3, 800e2e0 <_kill_r+0x1c>
 800e2de:	6023      	str	r3, [r4, #0]
 800e2e0:	bd38      	pop	{r3, r4, r5, pc}
 800e2e2:	bf00      	nop
 800e2e4:	200006a0 	.word	0x200006a0

0800e2e8 <_getpid_r>:
 800e2e8:	f7f3 bab6 	b.w	8001858 <_getpid>

0800e2ec <__sread>:
 800e2ec:	b510      	push	{r4, lr}
 800e2ee:	460c      	mov	r4, r1
 800e2f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e2f4:	f000 f894 	bl	800e420 <_read_r>
 800e2f8:	2800      	cmp	r0, #0
 800e2fa:	bfab      	itete	ge
 800e2fc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800e2fe:	89a3      	ldrhlt	r3, [r4, #12]
 800e300:	181b      	addge	r3, r3, r0
 800e302:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800e306:	bfac      	ite	ge
 800e308:	6563      	strge	r3, [r4, #84]	; 0x54
 800e30a:	81a3      	strhlt	r3, [r4, #12]
 800e30c:	bd10      	pop	{r4, pc}

0800e30e <__swrite>:
 800e30e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e312:	461f      	mov	r7, r3
 800e314:	898b      	ldrh	r3, [r1, #12]
 800e316:	05db      	lsls	r3, r3, #23
 800e318:	4605      	mov	r5, r0
 800e31a:	460c      	mov	r4, r1
 800e31c:	4616      	mov	r6, r2
 800e31e:	d505      	bpl.n	800e32c <__swrite+0x1e>
 800e320:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e324:	2302      	movs	r3, #2
 800e326:	2200      	movs	r2, #0
 800e328:	f000 f868 	bl	800e3fc <_lseek_r>
 800e32c:	89a3      	ldrh	r3, [r4, #12]
 800e32e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e332:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800e336:	81a3      	strh	r3, [r4, #12]
 800e338:	4632      	mov	r2, r6
 800e33a:	463b      	mov	r3, r7
 800e33c:	4628      	mov	r0, r5
 800e33e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e342:	f000 b817 	b.w	800e374 <_write_r>

0800e346 <__sseek>:
 800e346:	b510      	push	{r4, lr}
 800e348:	460c      	mov	r4, r1
 800e34a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e34e:	f000 f855 	bl	800e3fc <_lseek_r>
 800e352:	1c43      	adds	r3, r0, #1
 800e354:	89a3      	ldrh	r3, [r4, #12]
 800e356:	bf15      	itete	ne
 800e358:	6560      	strne	r0, [r4, #84]	; 0x54
 800e35a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800e35e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800e362:	81a3      	strheq	r3, [r4, #12]
 800e364:	bf18      	it	ne
 800e366:	81a3      	strhne	r3, [r4, #12]
 800e368:	bd10      	pop	{r4, pc}

0800e36a <__sclose>:
 800e36a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e36e:	f000 b813 	b.w	800e398 <_close_r>
	...

0800e374 <_write_r>:
 800e374:	b538      	push	{r3, r4, r5, lr}
 800e376:	4d07      	ldr	r5, [pc, #28]	; (800e394 <_write_r+0x20>)
 800e378:	4604      	mov	r4, r0
 800e37a:	4608      	mov	r0, r1
 800e37c:	4611      	mov	r1, r2
 800e37e:	2200      	movs	r2, #0
 800e380:	602a      	str	r2, [r5, #0]
 800e382:	461a      	mov	r2, r3
 800e384:	f7f3 faa7 	bl	80018d6 <_write>
 800e388:	1c43      	adds	r3, r0, #1
 800e38a:	d102      	bne.n	800e392 <_write_r+0x1e>
 800e38c:	682b      	ldr	r3, [r5, #0]
 800e38e:	b103      	cbz	r3, 800e392 <_write_r+0x1e>
 800e390:	6023      	str	r3, [r4, #0]
 800e392:	bd38      	pop	{r3, r4, r5, pc}
 800e394:	200006a0 	.word	0x200006a0

0800e398 <_close_r>:
 800e398:	b538      	push	{r3, r4, r5, lr}
 800e39a:	4d06      	ldr	r5, [pc, #24]	; (800e3b4 <_close_r+0x1c>)
 800e39c:	2300      	movs	r3, #0
 800e39e:	4604      	mov	r4, r0
 800e3a0:	4608      	mov	r0, r1
 800e3a2:	602b      	str	r3, [r5, #0]
 800e3a4:	f7f3 fab3 	bl	800190e <_close>
 800e3a8:	1c43      	adds	r3, r0, #1
 800e3aa:	d102      	bne.n	800e3b2 <_close_r+0x1a>
 800e3ac:	682b      	ldr	r3, [r5, #0]
 800e3ae:	b103      	cbz	r3, 800e3b2 <_close_r+0x1a>
 800e3b0:	6023      	str	r3, [r4, #0]
 800e3b2:	bd38      	pop	{r3, r4, r5, pc}
 800e3b4:	200006a0 	.word	0x200006a0

0800e3b8 <_fstat_r>:
 800e3b8:	b538      	push	{r3, r4, r5, lr}
 800e3ba:	4d07      	ldr	r5, [pc, #28]	; (800e3d8 <_fstat_r+0x20>)
 800e3bc:	2300      	movs	r3, #0
 800e3be:	4604      	mov	r4, r0
 800e3c0:	4608      	mov	r0, r1
 800e3c2:	4611      	mov	r1, r2
 800e3c4:	602b      	str	r3, [r5, #0]
 800e3c6:	f7f3 faae 	bl	8001926 <_fstat>
 800e3ca:	1c43      	adds	r3, r0, #1
 800e3cc:	d102      	bne.n	800e3d4 <_fstat_r+0x1c>
 800e3ce:	682b      	ldr	r3, [r5, #0]
 800e3d0:	b103      	cbz	r3, 800e3d4 <_fstat_r+0x1c>
 800e3d2:	6023      	str	r3, [r4, #0]
 800e3d4:	bd38      	pop	{r3, r4, r5, pc}
 800e3d6:	bf00      	nop
 800e3d8:	200006a0 	.word	0x200006a0

0800e3dc <_isatty_r>:
 800e3dc:	b538      	push	{r3, r4, r5, lr}
 800e3de:	4d06      	ldr	r5, [pc, #24]	; (800e3f8 <_isatty_r+0x1c>)
 800e3e0:	2300      	movs	r3, #0
 800e3e2:	4604      	mov	r4, r0
 800e3e4:	4608      	mov	r0, r1
 800e3e6:	602b      	str	r3, [r5, #0]
 800e3e8:	f7f3 faad 	bl	8001946 <_isatty>
 800e3ec:	1c43      	adds	r3, r0, #1
 800e3ee:	d102      	bne.n	800e3f6 <_isatty_r+0x1a>
 800e3f0:	682b      	ldr	r3, [r5, #0]
 800e3f2:	b103      	cbz	r3, 800e3f6 <_isatty_r+0x1a>
 800e3f4:	6023      	str	r3, [r4, #0]
 800e3f6:	bd38      	pop	{r3, r4, r5, pc}
 800e3f8:	200006a0 	.word	0x200006a0

0800e3fc <_lseek_r>:
 800e3fc:	b538      	push	{r3, r4, r5, lr}
 800e3fe:	4d07      	ldr	r5, [pc, #28]	; (800e41c <_lseek_r+0x20>)
 800e400:	4604      	mov	r4, r0
 800e402:	4608      	mov	r0, r1
 800e404:	4611      	mov	r1, r2
 800e406:	2200      	movs	r2, #0
 800e408:	602a      	str	r2, [r5, #0]
 800e40a:	461a      	mov	r2, r3
 800e40c:	f7f3 faa6 	bl	800195c <_lseek>
 800e410:	1c43      	adds	r3, r0, #1
 800e412:	d102      	bne.n	800e41a <_lseek_r+0x1e>
 800e414:	682b      	ldr	r3, [r5, #0]
 800e416:	b103      	cbz	r3, 800e41a <_lseek_r+0x1e>
 800e418:	6023      	str	r3, [r4, #0]
 800e41a:	bd38      	pop	{r3, r4, r5, pc}
 800e41c:	200006a0 	.word	0x200006a0

0800e420 <_read_r>:
 800e420:	b538      	push	{r3, r4, r5, lr}
 800e422:	4d07      	ldr	r5, [pc, #28]	; (800e440 <_read_r+0x20>)
 800e424:	4604      	mov	r4, r0
 800e426:	4608      	mov	r0, r1
 800e428:	4611      	mov	r1, r2
 800e42a:	2200      	movs	r2, #0
 800e42c:	602a      	str	r2, [r5, #0]
 800e42e:	461a      	mov	r2, r3
 800e430:	f7f3 fa34 	bl	800189c <_read>
 800e434:	1c43      	adds	r3, r0, #1
 800e436:	d102      	bne.n	800e43e <_read_r+0x1e>
 800e438:	682b      	ldr	r3, [r5, #0]
 800e43a:	b103      	cbz	r3, 800e43e <_read_r+0x1e>
 800e43c:	6023      	str	r3, [r4, #0]
 800e43e:	bd38      	pop	{r3, r4, r5, pc}
 800e440:	200006a0 	.word	0x200006a0

0800e444 <_init>:
 800e444:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e446:	bf00      	nop
 800e448:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e44a:	bc08      	pop	{r3}
 800e44c:	469e      	mov	lr, r3
 800e44e:	4770      	bx	lr

0800e450 <_fini>:
 800e450:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e452:	bf00      	nop
 800e454:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e456:	bc08      	pop	{r3}
 800e458:	469e      	mov	lr, r3
 800e45a:	4770      	bx	lr
