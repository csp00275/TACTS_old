
test_stm32f746-disco.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e8bc  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005d4  0800ea90  0800ea90  0001ea90  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f064  0800f064  00029124  2**0
                  CONTENTS
  4 .ARM          00000008  0800f064  0800f064  0001f064  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f06c  0800f06c  00029124  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f06c  0800f06c  0001f06c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800f070  0800f070  0001f070  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00009124  20000000  0800f074  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000051c  20009124  08018198  00029124  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20009640  08018198  00029640  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00029124  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019d3e  00000000  00000000  00029154  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000302b  00000000  00000000  00042e92  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001160  00000000  00000000  00045ec0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001008  00000000  00000000  00047020  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028c38  00000000  00000000  00048028  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001808e  00000000  00000000  00070c60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f7de0  00000000  00000000  00088cee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00180ace  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005928  00000000  00000000  00180b20  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20009124 	.word	0x20009124
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800ea74 	.word	0x0800ea74

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20009128 	.word	0x20009128
 800020c:	0800ea74 	.word	0x0800ea74

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_uldivmod>:
 8000be8:	b953      	cbnz	r3, 8000c00 <__aeabi_uldivmod+0x18>
 8000bea:	b94a      	cbnz	r2, 8000c00 <__aeabi_uldivmod+0x18>
 8000bec:	2900      	cmp	r1, #0
 8000bee:	bf08      	it	eq
 8000bf0:	2800      	cmpeq	r0, #0
 8000bf2:	bf1c      	itt	ne
 8000bf4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bf8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bfc:	f000 b974 	b.w	8000ee8 <__aeabi_idiv0>
 8000c00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c08:	f000 f806 	bl	8000c18 <__udivmoddi4>
 8000c0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c14:	b004      	add	sp, #16
 8000c16:	4770      	bx	lr

08000c18 <__udivmoddi4>:
 8000c18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c1c:	9d08      	ldr	r5, [sp, #32]
 8000c1e:	4604      	mov	r4, r0
 8000c20:	468e      	mov	lr, r1
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d14d      	bne.n	8000cc2 <__udivmoddi4+0xaa>
 8000c26:	428a      	cmp	r2, r1
 8000c28:	4694      	mov	ip, r2
 8000c2a:	d969      	bls.n	8000d00 <__udivmoddi4+0xe8>
 8000c2c:	fab2 f282 	clz	r2, r2
 8000c30:	b152      	cbz	r2, 8000c48 <__udivmoddi4+0x30>
 8000c32:	fa01 f302 	lsl.w	r3, r1, r2
 8000c36:	f1c2 0120 	rsb	r1, r2, #32
 8000c3a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c3e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c42:	ea41 0e03 	orr.w	lr, r1, r3
 8000c46:	4094      	lsls	r4, r2
 8000c48:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c4c:	0c21      	lsrs	r1, r4, #16
 8000c4e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c52:	fa1f f78c 	uxth.w	r7, ip
 8000c56:	fb08 e316 	mls	r3, r8, r6, lr
 8000c5a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c5e:	fb06 f107 	mul.w	r1, r6, r7
 8000c62:	4299      	cmp	r1, r3
 8000c64:	d90a      	bls.n	8000c7c <__udivmoddi4+0x64>
 8000c66:	eb1c 0303 	adds.w	r3, ip, r3
 8000c6a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c6e:	f080 811f 	bcs.w	8000eb0 <__udivmoddi4+0x298>
 8000c72:	4299      	cmp	r1, r3
 8000c74:	f240 811c 	bls.w	8000eb0 <__udivmoddi4+0x298>
 8000c78:	3e02      	subs	r6, #2
 8000c7a:	4463      	add	r3, ip
 8000c7c:	1a5b      	subs	r3, r3, r1
 8000c7e:	b2a4      	uxth	r4, r4
 8000c80:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c84:	fb08 3310 	mls	r3, r8, r0, r3
 8000c88:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c8c:	fb00 f707 	mul.w	r7, r0, r7
 8000c90:	42a7      	cmp	r7, r4
 8000c92:	d90a      	bls.n	8000caa <__udivmoddi4+0x92>
 8000c94:	eb1c 0404 	adds.w	r4, ip, r4
 8000c98:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c9c:	f080 810a 	bcs.w	8000eb4 <__udivmoddi4+0x29c>
 8000ca0:	42a7      	cmp	r7, r4
 8000ca2:	f240 8107 	bls.w	8000eb4 <__udivmoddi4+0x29c>
 8000ca6:	4464      	add	r4, ip
 8000ca8:	3802      	subs	r0, #2
 8000caa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000cae:	1be4      	subs	r4, r4, r7
 8000cb0:	2600      	movs	r6, #0
 8000cb2:	b11d      	cbz	r5, 8000cbc <__udivmoddi4+0xa4>
 8000cb4:	40d4      	lsrs	r4, r2
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	e9c5 4300 	strd	r4, r3, [r5]
 8000cbc:	4631      	mov	r1, r6
 8000cbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cc2:	428b      	cmp	r3, r1
 8000cc4:	d909      	bls.n	8000cda <__udivmoddi4+0xc2>
 8000cc6:	2d00      	cmp	r5, #0
 8000cc8:	f000 80ef 	beq.w	8000eaa <__udivmoddi4+0x292>
 8000ccc:	2600      	movs	r6, #0
 8000cce:	e9c5 0100 	strd	r0, r1, [r5]
 8000cd2:	4630      	mov	r0, r6
 8000cd4:	4631      	mov	r1, r6
 8000cd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cda:	fab3 f683 	clz	r6, r3
 8000cde:	2e00      	cmp	r6, #0
 8000ce0:	d14a      	bne.n	8000d78 <__udivmoddi4+0x160>
 8000ce2:	428b      	cmp	r3, r1
 8000ce4:	d302      	bcc.n	8000cec <__udivmoddi4+0xd4>
 8000ce6:	4282      	cmp	r2, r0
 8000ce8:	f200 80f9 	bhi.w	8000ede <__udivmoddi4+0x2c6>
 8000cec:	1a84      	subs	r4, r0, r2
 8000cee:	eb61 0303 	sbc.w	r3, r1, r3
 8000cf2:	2001      	movs	r0, #1
 8000cf4:	469e      	mov	lr, r3
 8000cf6:	2d00      	cmp	r5, #0
 8000cf8:	d0e0      	beq.n	8000cbc <__udivmoddi4+0xa4>
 8000cfa:	e9c5 4e00 	strd	r4, lr, [r5]
 8000cfe:	e7dd      	b.n	8000cbc <__udivmoddi4+0xa4>
 8000d00:	b902      	cbnz	r2, 8000d04 <__udivmoddi4+0xec>
 8000d02:	deff      	udf	#255	; 0xff
 8000d04:	fab2 f282 	clz	r2, r2
 8000d08:	2a00      	cmp	r2, #0
 8000d0a:	f040 8092 	bne.w	8000e32 <__udivmoddi4+0x21a>
 8000d0e:	eba1 010c 	sub.w	r1, r1, ip
 8000d12:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d16:	fa1f fe8c 	uxth.w	lr, ip
 8000d1a:	2601      	movs	r6, #1
 8000d1c:	0c20      	lsrs	r0, r4, #16
 8000d1e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d22:	fb07 1113 	mls	r1, r7, r3, r1
 8000d26:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d2a:	fb0e f003 	mul.w	r0, lr, r3
 8000d2e:	4288      	cmp	r0, r1
 8000d30:	d908      	bls.n	8000d44 <__udivmoddi4+0x12c>
 8000d32:	eb1c 0101 	adds.w	r1, ip, r1
 8000d36:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d3a:	d202      	bcs.n	8000d42 <__udivmoddi4+0x12a>
 8000d3c:	4288      	cmp	r0, r1
 8000d3e:	f200 80cb 	bhi.w	8000ed8 <__udivmoddi4+0x2c0>
 8000d42:	4643      	mov	r3, r8
 8000d44:	1a09      	subs	r1, r1, r0
 8000d46:	b2a4      	uxth	r4, r4
 8000d48:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d4c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d50:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d54:	fb0e fe00 	mul.w	lr, lr, r0
 8000d58:	45a6      	cmp	lr, r4
 8000d5a:	d908      	bls.n	8000d6e <__udivmoddi4+0x156>
 8000d5c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d60:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d64:	d202      	bcs.n	8000d6c <__udivmoddi4+0x154>
 8000d66:	45a6      	cmp	lr, r4
 8000d68:	f200 80bb 	bhi.w	8000ee2 <__udivmoddi4+0x2ca>
 8000d6c:	4608      	mov	r0, r1
 8000d6e:	eba4 040e 	sub.w	r4, r4, lr
 8000d72:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d76:	e79c      	b.n	8000cb2 <__udivmoddi4+0x9a>
 8000d78:	f1c6 0720 	rsb	r7, r6, #32
 8000d7c:	40b3      	lsls	r3, r6
 8000d7e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d82:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d86:	fa20 f407 	lsr.w	r4, r0, r7
 8000d8a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d8e:	431c      	orrs	r4, r3
 8000d90:	40f9      	lsrs	r1, r7
 8000d92:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d96:	fa00 f306 	lsl.w	r3, r0, r6
 8000d9a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d9e:	0c20      	lsrs	r0, r4, #16
 8000da0:	fa1f fe8c 	uxth.w	lr, ip
 8000da4:	fb09 1118 	mls	r1, r9, r8, r1
 8000da8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dac:	fb08 f00e 	mul.w	r0, r8, lr
 8000db0:	4288      	cmp	r0, r1
 8000db2:	fa02 f206 	lsl.w	r2, r2, r6
 8000db6:	d90b      	bls.n	8000dd0 <__udivmoddi4+0x1b8>
 8000db8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dbc:	f108 3aff 	add.w	sl, r8, #4294967295
 8000dc0:	f080 8088 	bcs.w	8000ed4 <__udivmoddi4+0x2bc>
 8000dc4:	4288      	cmp	r0, r1
 8000dc6:	f240 8085 	bls.w	8000ed4 <__udivmoddi4+0x2bc>
 8000dca:	f1a8 0802 	sub.w	r8, r8, #2
 8000dce:	4461      	add	r1, ip
 8000dd0:	1a09      	subs	r1, r1, r0
 8000dd2:	b2a4      	uxth	r4, r4
 8000dd4:	fbb1 f0f9 	udiv	r0, r1, r9
 8000dd8:	fb09 1110 	mls	r1, r9, r0, r1
 8000ddc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000de0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000de4:	458e      	cmp	lr, r1
 8000de6:	d908      	bls.n	8000dfa <__udivmoddi4+0x1e2>
 8000de8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dec:	f100 34ff 	add.w	r4, r0, #4294967295
 8000df0:	d26c      	bcs.n	8000ecc <__udivmoddi4+0x2b4>
 8000df2:	458e      	cmp	lr, r1
 8000df4:	d96a      	bls.n	8000ecc <__udivmoddi4+0x2b4>
 8000df6:	3802      	subs	r0, #2
 8000df8:	4461      	add	r1, ip
 8000dfa:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000dfe:	fba0 9402 	umull	r9, r4, r0, r2
 8000e02:	eba1 010e 	sub.w	r1, r1, lr
 8000e06:	42a1      	cmp	r1, r4
 8000e08:	46c8      	mov	r8, r9
 8000e0a:	46a6      	mov	lr, r4
 8000e0c:	d356      	bcc.n	8000ebc <__udivmoddi4+0x2a4>
 8000e0e:	d053      	beq.n	8000eb8 <__udivmoddi4+0x2a0>
 8000e10:	b15d      	cbz	r5, 8000e2a <__udivmoddi4+0x212>
 8000e12:	ebb3 0208 	subs.w	r2, r3, r8
 8000e16:	eb61 010e 	sbc.w	r1, r1, lr
 8000e1a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e1e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e22:	40f1      	lsrs	r1, r6
 8000e24:	431f      	orrs	r7, r3
 8000e26:	e9c5 7100 	strd	r7, r1, [r5]
 8000e2a:	2600      	movs	r6, #0
 8000e2c:	4631      	mov	r1, r6
 8000e2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e32:	f1c2 0320 	rsb	r3, r2, #32
 8000e36:	40d8      	lsrs	r0, r3
 8000e38:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e3c:	fa21 f303 	lsr.w	r3, r1, r3
 8000e40:	4091      	lsls	r1, r2
 8000e42:	4301      	orrs	r1, r0
 8000e44:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e48:	fa1f fe8c 	uxth.w	lr, ip
 8000e4c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e50:	fb07 3610 	mls	r6, r7, r0, r3
 8000e54:	0c0b      	lsrs	r3, r1, #16
 8000e56:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e5a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e5e:	429e      	cmp	r6, r3
 8000e60:	fa04 f402 	lsl.w	r4, r4, r2
 8000e64:	d908      	bls.n	8000e78 <__udivmoddi4+0x260>
 8000e66:	eb1c 0303 	adds.w	r3, ip, r3
 8000e6a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e6e:	d22f      	bcs.n	8000ed0 <__udivmoddi4+0x2b8>
 8000e70:	429e      	cmp	r6, r3
 8000e72:	d92d      	bls.n	8000ed0 <__udivmoddi4+0x2b8>
 8000e74:	3802      	subs	r0, #2
 8000e76:	4463      	add	r3, ip
 8000e78:	1b9b      	subs	r3, r3, r6
 8000e7a:	b289      	uxth	r1, r1
 8000e7c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e80:	fb07 3316 	mls	r3, r7, r6, r3
 8000e84:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e88:	fb06 f30e 	mul.w	r3, r6, lr
 8000e8c:	428b      	cmp	r3, r1
 8000e8e:	d908      	bls.n	8000ea2 <__udivmoddi4+0x28a>
 8000e90:	eb1c 0101 	adds.w	r1, ip, r1
 8000e94:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e98:	d216      	bcs.n	8000ec8 <__udivmoddi4+0x2b0>
 8000e9a:	428b      	cmp	r3, r1
 8000e9c:	d914      	bls.n	8000ec8 <__udivmoddi4+0x2b0>
 8000e9e:	3e02      	subs	r6, #2
 8000ea0:	4461      	add	r1, ip
 8000ea2:	1ac9      	subs	r1, r1, r3
 8000ea4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000ea8:	e738      	b.n	8000d1c <__udivmoddi4+0x104>
 8000eaa:	462e      	mov	r6, r5
 8000eac:	4628      	mov	r0, r5
 8000eae:	e705      	b.n	8000cbc <__udivmoddi4+0xa4>
 8000eb0:	4606      	mov	r6, r0
 8000eb2:	e6e3      	b.n	8000c7c <__udivmoddi4+0x64>
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	e6f8      	b.n	8000caa <__udivmoddi4+0x92>
 8000eb8:	454b      	cmp	r3, r9
 8000eba:	d2a9      	bcs.n	8000e10 <__udivmoddi4+0x1f8>
 8000ebc:	ebb9 0802 	subs.w	r8, r9, r2
 8000ec0:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000ec4:	3801      	subs	r0, #1
 8000ec6:	e7a3      	b.n	8000e10 <__udivmoddi4+0x1f8>
 8000ec8:	4646      	mov	r6, r8
 8000eca:	e7ea      	b.n	8000ea2 <__udivmoddi4+0x28a>
 8000ecc:	4620      	mov	r0, r4
 8000ece:	e794      	b.n	8000dfa <__udivmoddi4+0x1e2>
 8000ed0:	4640      	mov	r0, r8
 8000ed2:	e7d1      	b.n	8000e78 <__udivmoddi4+0x260>
 8000ed4:	46d0      	mov	r8, sl
 8000ed6:	e77b      	b.n	8000dd0 <__udivmoddi4+0x1b8>
 8000ed8:	3b02      	subs	r3, #2
 8000eda:	4461      	add	r1, ip
 8000edc:	e732      	b.n	8000d44 <__udivmoddi4+0x12c>
 8000ede:	4630      	mov	r0, r6
 8000ee0:	e709      	b.n	8000cf6 <__udivmoddi4+0xde>
 8000ee2:	4464      	add	r4, ip
 8000ee4:	3802      	subs	r0, #2
 8000ee6:	e742      	b.n	8000d6e <__udivmoddi4+0x156>

08000ee8 <__aeabi_idiv0>:
 8000ee8:	4770      	bx	lr
 8000eea:	bf00      	nop

08000eec <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b08a      	sub	sp, #40	; 0x28
 8000ef0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ef2:	f107 0314 	add.w	r3, r7, #20
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	601a      	str	r2, [r3, #0]
 8000efa:	605a      	str	r2, [r3, #4]
 8000efc:	609a      	str	r2, [r3, #8]
 8000efe:	60da      	str	r2, [r3, #12]
 8000f00:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f02:	4b23      	ldr	r3, [pc, #140]	; (8000f90 <MX_GPIO_Init+0xa4>)
 8000f04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f06:	4a22      	ldr	r2, [pc, #136]	; (8000f90 <MX_GPIO_Init+0xa4>)
 8000f08:	f043 0302 	orr.w	r3, r3, #2
 8000f0c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f0e:	4b20      	ldr	r3, [pc, #128]	; (8000f90 <MX_GPIO_Init+0xa4>)
 8000f10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f12:	f003 0302 	and.w	r3, r3, #2
 8000f16:	613b      	str	r3, [r7, #16]
 8000f18:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000f1a:	4b1d      	ldr	r3, [pc, #116]	; (8000f90 <MX_GPIO_Init+0xa4>)
 8000f1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f1e:	4a1c      	ldr	r2, [pc, #112]	; (8000f90 <MX_GPIO_Init+0xa4>)
 8000f20:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f24:	6313      	str	r3, [r2, #48]	; 0x30
 8000f26:	4b1a      	ldr	r3, [pc, #104]	; (8000f90 <MX_GPIO_Init+0xa4>)
 8000f28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f2e:	60fb      	str	r3, [r7, #12]
 8000f30:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f32:	4b17      	ldr	r3, [pc, #92]	; (8000f90 <MX_GPIO_Init+0xa4>)
 8000f34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f36:	4a16      	ldr	r2, [pc, #88]	; (8000f90 <MX_GPIO_Init+0xa4>)
 8000f38:	f043 0301 	orr.w	r3, r3, #1
 8000f3c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f3e:	4b14      	ldr	r3, [pc, #80]	; (8000f90 <MX_GPIO_Init+0xa4>)
 8000f40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f42:	f003 0301 	and.w	r3, r3, #1
 8000f46:	60bb      	str	r3, [r7, #8]
 8000f48:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000f4a:	4b11      	ldr	r3, [pc, #68]	; (8000f90 <MX_GPIO_Init+0xa4>)
 8000f4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f4e:	4a10      	ldr	r2, [pc, #64]	; (8000f90 <MX_GPIO_Init+0xa4>)
 8000f50:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f54:	6313      	str	r3, [r2, #48]	; 0x30
 8000f56:	4b0e      	ldr	r3, [pc, #56]	; (8000f90 <MX_GPIO_Init+0xa4>)
 8000f58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f5e:	607b      	str	r3, [r7, #4]
 8000f60:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, GPIO_PIN_1, GPIO_PIN_RESET);
 8000f62:	2200      	movs	r2, #0
 8000f64:	2102      	movs	r1, #2
 8000f66:	480b      	ldr	r0, [pc, #44]	; (8000f94 <MX_GPIO_Init+0xa8>)
 8000f68:	f001 ff0e 	bl	8002d88 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PI1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000f6c:	2302      	movs	r3, #2
 8000f6e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f70:	2301      	movs	r3, #1
 8000f72:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f74:	2300      	movs	r3, #0
 8000f76:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8000f78:	2301      	movs	r3, #1
 8000f7a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000f7c:	f107 0314 	add.w	r3, r7, #20
 8000f80:	4619      	mov	r1, r3
 8000f82:	4804      	ldr	r0, [pc, #16]	; (8000f94 <MX_GPIO_Init+0xa8>)
 8000f84:	f001 fb90 	bl	80026a8 <HAL_GPIO_Init>

}
 8000f88:	bf00      	nop
 8000f8a:	3728      	adds	r7, #40	; 0x28
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	bd80      	pop	{r7, pc}
 8000f90:	40023800 	.word	0x40023800
 8000f94:	40022000 	.word	0x40022000

08000f98 <mat_mul_relu_first>:
float r5[3][1];


/* Hidden layer calculation function */

void mat_mul_relu_first(float w[64][24],float in[24][1],float r[64][1],float bias[64][1]) {
 8000f98:	b480      	push	{r7}
 8000f9a:	b089      	sub	sp, #36	; 0x24
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	60f8      	str	r0, [r7, #12]
 8000fa0:	60b9      	str	r1, [r7, #8]
 8000fa2:	607a      	str	r2, [r7, #4]
 8000fa4:	603b      	str	r3, [r7, #0]
	for (int i = 0; i < 64; i++) {
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	61fb      	str	r3, [r7, #28]
 8000faa:	e070      	b.n	800108e <mat_mul_relu_first+0xf6>
		for (int j = 0; j < 1; j++) {
 8000fac:	2300      	movs	r3, #0
 8000fae:	61bb      	str	r3, [r7, #24]
 8000fb0:	e041      	b.n	8001036 <mat_mul_relu_first+0x9e>
			r[i][j] = 0;
 8000fb2:	69fb      	ldr	r3, [r7, #28]
 8000fb4:	009b      	lsls	r3, r3, #2
 8000fb6:	687a      	ldr	r2, [r7, #4]
 8000fb8:	441a      	add	r2, r3
 8000fba:	69bb      	ldr	r3, [r7, #24]
 8000fbc:	009b      	lsls	r3, r3, #2
 8000fbe:	4413      	add	r3, r2
 8000fc0:	f04f 0200 	mov.w	r2, #0
 8000fc4:	601a      	str	r2, [r3, #0]
			for (int k = 0; k < 24; k++) {
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	617b      	str	r3, [r7, #20]
 8000fca:	e02e      	b.n	800102a <mat_mul_relu_first+0x92>
				r[i][j] += w[i][k] * in[k][j];
 8000fcc:	69fb      	ldr	r3, [r7, #28]
 8000fce:	009b      	lsls	r3, r3, #2
 8000fd0:	687a      	ldr	r2, [r7, #4]
 8000fd2:	441a      	add	r2, r3
 8000fd4:	69bb      	ldr	r3, [r7, #24]
 8000fd6:	009b      	lsls	r3, r3, #2
 8000fd8:	4413      	add	r3, r2
 8000fda:	ed93 7a00 	vldr	s14, [r3]
 8000fde:	69fa      	ldr	r2, [r7, #28]
 8000fe0:	4613      	mov	r3, r2
 8000fe2:	005b      	lsls	r3, r3, #1
 8000fe4:	4413      	add	r3, r2
 8000fe6:	015b      	lsls	r3, r3, #5
 8000fe8:	461a      	mov	r2, r3
 8000fea:	68fb      	ldr	r3, [r7, #12]
 8000fec:	441a      	add	r2, r3
 8000fee:	697b      	ldr	r3, [r7, #20]
 8000ff0:	009b      	lsls	r3, r3, #2
 8000ff2:	4413      	add	r3, r2
 8000ff4:	edd3 6a00 	vldr	s13, [r3]
 8000ff8:	697b      	ldr	r3, [r7, #20]
 8000ffa:	009b      	lsls	r3, r3, #2
 8000ffc:	68ba      	ldr	r2, [r7, #8]
 8000ffe:	441a      	add	r2, r3
 8001000:	69bb      	ldr	r3, [r7, #24]
 8001002:	009b      	lsls	r3, r3, #2
 8001004:	4413      	add	r3, r2
 8001006:	edd3 7a00 	vldr	s15, [r3]
 800100a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800100e:	69fb      	ldr	r3, [r7, #28]
 8001010:	009b      	lsls	r3, r3, #2
 8001012:	687a      	ldr	r2, [r7, #4]
 8001014:	441a      	add	r2, r3
 8001016:	ee77 7a27 	vadd.f32	s15, s14, s15
 800101a:	69bb      	ldr	r3, [r7, #24]
 800101c:	009b      	lsls	r3, r3, #2
 800101e:	4413      	add	r3, r2
 8001020:	edc3 7a00 	vstr	s15, [r3]
			for (int k = 0; k < 24; k++) {
 8001024:	697b      	ldr	r3, [r7, #20]
 8001026:	3301      	adds	r3, #1
 8001028:	617b      	str	r3, [r7, #20]
 800102a:	697b      	ldr	r3, [r7, #20]
 800102c:	2b17      	cmp	r3, #23
 800102e:	ddcd      	ble.n	8000fcc <mat_mul_relu_first+0x34>
		for (int j = 0; j < 1; j++) {
 8001030:	69bb      	ldr	r3, [r7, #24]
 8001032:	3301      	adds	r3, #1
 8001034:	61bb      	str	r3, [r7, #24]
 8001036:	69bb      	ldr	r3, [r7, #24]
 8001038:	2b00      	cmp	r3, #0
 800103a:	ddba      	ble.n	8000fb2 <mat_mul_relu_first+0x1a>
			}
		}
		r[i][0] += bias[i][0];
 800103c:	69fb      	ldr	r3, [r7, #28]
 800103e:	009b      	lsls	r3, r3, #2
 8001040:	687a      	ldr	r2, [r7, #4]
 8001042:	4413      	add	r3, r2
 8001044:	ed93 7a00 	vldr	s14, [r3]
 8001048:	69fb      	ldr	r3, [r7, #28]
 800104a:	009b      	lsls	r3, r3, #2
 800104c:	683a      	ldr	r2, [r7, #0]
 800104e:	4413      	add	r3, r2
 8001050:	edd3 7a00 	vldr	s15, [r3]
 8001054:	69fb      	ldr	r3, [r7, #28]
 8001056:	009b      	lsls	r3, r3, #2
 8001058:	687a      	ldr	r2, [r7, #4]
 800105a:	4413      	add	r3, r2
 800105c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001060:	edc3 7a00 	vstr	s15, [r3]
		if (r[i][0] < 0) {
 8001064:	69fb      	ldr	r3, [r7, #28]
 8001066:	009b      	lsls	r3, r3, #2
 8001068:	687a      	ldr	r2, [r7, #4]
 800106a:	4413      	add	r3, r2
 800106c:	edd3 7a00 	vldr	s15, [r3]
 8001070:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001074:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001078:	d506      	bpl.n	8001088 <mat_mul_relu_first+0xf0>
			r[i][0] = 0;
 800107a:	69fb      	ldr	r3, [r7, #28]
 800107c:	009b      	lsls	r3, r3, #2
 800107e:	687a      	ldr	r2, [r7, #4]
 8001080:	4413      	add	r3, r2
 8001082:	f04f 0200 	mov.w	r2, #0
 8001086:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < 64; i++) {
 8001088:	69fb      	ldr	r3, [r7, #28]
 800108a:	3301      	adds	r3, #1
 800108c:	61fb      	str	r3, [r7, #28]
 800108e:	69fb      	ldr	r3, [r7, #28]
 8001090:	2b3f      	cmp	r3, #63	; 0x3f
 8001092:	dd8b      	ble.n	8000fac <mat_mul_relu_first+0x14>
		}
	}
}
 8001094:	bf00      	nop
 8001096:	bf00      	nop
 8001098:	3724      	adds	r7, #36	; 0x24
 800109a:	46bd      	mov	sp, r7
 800109c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a0:	4770      	bx	lr

080010a2 <mat_mul_relu_second>:

void mat_mul_relu_second(
	float w[64][64],
	float in[64][1],
	float r[64][1],
	float bias[64][1]) {
 80010a2:	b480      	push	{r7}
 80010a4:	b089      	sub	sp, #36	; 0x24
 80010a6:	af00      	add	r7, sp, #0
 80010a8:	60f8      	str	r0, [r7, #12]
 80010aa:	60b9      	str	r1, [r7, #8]
 80010ac:	607a      	str	r2, [r7, #4]
 80010ae:	603b      	str	r3, [r7, #0]
	for (int i = 0; i < 64; i++) {
 80010b0:	2300      	movs	r3, #0
 80010b2:	61fb      	str	r3, [r7, #28]
 80010b4:	e06c      	b.n	8001190 <mat_mul_relu_second+0xee>
		for (int j = 0; j < 1; j++) {
 80010b6:	2300      	movs	r3, #0
 80010b8:	61bb      	str	r3, [r7, #24]
 80010ba:	e03d      	b.n	8001138 <mat_mul_relu_second+0x96>
			r[i][j] = 0;
 80010bc:	69fb      	ldr	r3, [r7, #28]
 80010be:	009b      	lsls	r3, r3, #2
 80010c0:	687a      	ldr	r2, [r7, #4]
 80010c2:	441a      	add	r2, r3
 80010c4:	69bb      	ldr	r3, [r7, #24]
 80010c6:	009b      	lsls	r3, r3, #2
 80010c8:	4413      	add	r3, r2
 80010ca:	f04f 0200 	mov.w	r2, #0
 80010ce:	601a      	str	r2, [r3, #0]
			for (int k = 0; k < 64; k++) {
 80010d0:	2300      	movs	r3, #0
 80010d2:	617b      	str	r3, [r7, #20]
 80010d4:	e02a      	b.n	800112c <mat_mul_relu_second+0x8a>
				r[i][j] += w[i][k] * in[k][j];
 80010d6:	69fb      	ldr	r3, [r7, #28]
 80010d8:	009b      	lsls	r3, r3, #2
 80010da:	687a      	ldr	r2, [r7, #4]
 80010dc:	441a      	add	r2, r3
 80010de:	69bb      	ldr	r3, [r7, #24]
 80010e0:	009b      	lsls	r3, r3, #2
 80010e2:	4413      	add	r3, r2
 80010e4:	ed93 7a00 	vldr	s14, [r3]
 80010e8:	69fb      	ldr	r3, [r7, #28]
 80010ea:	021b      	lsls	r3, r3, #8
 80010ec:	68fa      	ldr	r2, [r7, #12]
 80010ee:	441a      	add	r2, r3
 80010f0:	697b      	ldr	r3, [r7, #20]
 80010f2:	009b      	lsls	r3, r3, #2
 80010f4:	4413      	add	r3, r2
 80010f6:	edd3 6a00 	vldr	s13, [r3]
 80010fa:	697b      	ldr	r3, [r7, #20]
 80010fc:	009b      	lsls	r3, r3, #2
 80010fe:	68ba      	ldr	r2, [r7, #8]
 8001100:	441a      	add	r2, r3
 8001102:	69bb      	ldr	r3, [r7, #24]
 8001104:	009b      	lsls	r3, r3, #2
 8001106:	4413      	add	r3, r2
 8001108:	edd3 7a00 	vldr	s15, [r3]
 800110c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001110:	69fb      	ldr	r3, [r7, #28]
 8001112:	009b      	lsls	r3, r3, #2
 8001114:	687a      	ldr	r2, [r7, #4]
 8001116:	441a      	add	r2, r3
 8001118:	ee77 7a27 	vadd.f32	s15, s14, s15
 800111c:	69bb      	ldr	r3, [r7, #24]
 800111e:	009b      	lsls	r3, r3, #2
 8001120:	4413      	add	r3, r2
 8001122:	edc3 7a00 	vstr	s15, [r3]
			for (int k = 0; k < 64; k++) {
 8001126:	697b      	ldr	r3, [r7, #20]
 8001128:	3301      	adds	r3, #1
 800112a:	617b      	str	r3, [r7, #20]
 800112c:	697b      	ldr	r3, [r7, #20]
 800112e:	2b3f      	cmp	r3, #63	; 0x3f
 8001130:	ddd1      	ble.n	80010d6 <mat_mul_relu_second+0x34>
		for (int j = 0; j < 1; j++) {
 8001132:	69bb      	ldr	r3, [r7, #24]
 8001134:	3301      	adds	r3, #1
 8001136:	61bb      	str	r3, [r7, #24]
 8001138:	69bb      	ldr	r3, [r7, #24]
 800113a:	2b00      	cmp	r3, #0
 800113c:	ddbe      	ble.n	80010bc <mat_mul_relu_second+0x1a>
			}
		}
		r[i][0] += bias[i][0];
 800113e:	69fb      	ldr	r3, [r7, #28]
 8001140:	009b      	lsls	r3, r3, #2
 8001142:	687a      	ldr	r2, [r7, #4]
 8001144:	4413      	add	r3, r2
 8001146:	ed93 7a00 	vldr	s14, [r3]
 800114a:	69fb      	ldr	r3, [r7, #28]
 800114c:	009b      	lsls	r3, r3, #2
 800114e:	683a      	ldr	r2, [r7, #0]
 8001150:	4413      	add	r3, r2
 8001152:	edd3 7a00 	vldr	s15, [r3]
 8001156:	69fb      	ldr	r3, [r7, #28]
 8001158:	009b      	lsls	r3, r3, #2
 800115a:	687a      	ldr	r2, [r7, #4]
 800115c:	4413      	add	r3, r2
 800115e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001162:	edc3 7a00 	vstr	s15, [r3]
		if (r[i][0] < 0) {
 8001166:	69fb      	ldr	r3, [r7, #28]
 8001168:	009b      	lsls	r3, r3, #2
 800116a:	687a      	ldr	r2, [r7, #4]
 800116c:	4413      	add	r3, r2
 800116e:	edd3 7a00 	vldr	s15, [r3]
 8001172:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001176:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800117a:	d506      	bpl.n	800118a <mat_mul_relu_second+0xe8>
			r[i][0] = 0;
 800117c:	69fb      	ldr	r3, [r7, #28]
 800117e:	009b      	lsls	r3, r3, #2
 8001180:	687a      	ldr	r2, [r7, #4]
 8001182:	4413      	add	r3, r2
 8001184:	f04f 0200 	mov.w	r2, #0
 8001188:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < 64; i++) {
 800118a:	69fb      	ldr	r3, [r7, #28]
 800118c:	3301      	adds	r3, #1
 800118e:	61fb      	str	r3, [r7, #28]
 8001190:	69fb      	ldr	r3, [r7, #28]
 8001192:	2b3f      	cmp	r3, #63	; 0x3f
 8001194:	dd8f      	ble.n	80010b6 <mat_mul_relu_second+0x14>
		}
		// printf("{%.16f},", r[i][0]);
	}
}
 8001196:	bf00      	nop
 8001198:	bf00      	nop
 800119a:	3724      	adds	r7, #36	; 0x24
 800119c:	46bd      	mov	sp, r7
 800119e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a2:	4770      	bx	lr

080011a4 <mat_mul_relu_third>:

void mat_mul_relu_third(
	float w[32][64],
	float in[64][1],
	float r[32][1],
	float bias[32][1]) {
 80011a4:	b480      	push	{r7}
 80011a6:	b089      	sub	sp, #36	; 0x24
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	60f8      	str	r0, [r7, #12]
 80011ac:	60b9      	str	r1, [r7, #8]
 80011ae:	607a      	str	r2, [r7, #4]
 80011b0:	603b      	str	r3, [r7, #0]
	for (int i = 0; i < 32; i++) {
 80011b2:	2300      	movs	r3, #0
 80011b4:	61fb      	str	r3, [r7, #28]
 80011b6:	e06c      	b.n	8001292 <mat_mul_relu_third+0xee>
		for (int j = 0; j < 1; j++) {
 80011b8:	2300      	movs	r3, #0
 80011ba:	61bb      	str	r3, [r7, #24]
 80011bc:	e03d      	b.n	800123a <mat_mul_relu_third+0x96>
			r[i][j] = 0;
 80011be:	69fb      	ldr	r3, [r7, #28]
 80011c0:	009b      	lsls	r3, r3, #2
 80011c2:	687a      	ldr	r2, [r7, #4]
 80011c4:	441a      	add	r2, r3
 80011c6:	69bb      	ldr	r3, [r7, #24]
 80011c8:	009b      	lsls	r3, r3, #2
 80011ca:	4413      	add	r3, r2
 80011cc:	f04f 0200 	mov.w	r2, #0
 80011d0:	601a      	str	r2, [r3, #0]
			for (int k = 0; k < 64; k++) {
 80011d2:	2300      	movs	r3, #0
 80011d4:	617b      	str	r3, [r7, #20]
 80011d6:	e02a      	b.n	800122e <mat_mul_relu_third+0x8a>
				r[i][j] += w[i][k] * in[k][j];
 80011d8:	69fb      	ldr	r3, [r7, #28]
 80011da:	009b      	lsls	r3, r3, #2
 80011dc:	687a      	ldr	r2, [r7, #4]
 80011de:	441a      	add	r2, r3
 80011e0:	69bb      	ldr	r3, [r7, #24]
 80011e2:	009b      	lsls	r3, r3, #2
 80011e4:	4413      	add	r3, r2
 80011e6:	ed93 7a00 	vldr	s14, [r3]
 80011ea:	69fb      	ldr	r3, [r7, #28]
 80011ec:	021b      	lsls	r3, r3, #8
 80011ee:	68fa      	ldr	r2, [r7, #12]
 80011f0:	441a      	add	r2, r3
 80011f2:	697b      	ldr	r3, [r7, #20]
 80011f4:	009b      	lsls	r3, r3, #2
 80011f6:	4413      	add	r3, r2
 80011f8:	edd3 6a00 	vldr	s13, [r3]
 80011fc:	697b      	ldr	r3, [r7, #20]
 80011fe:	009b      	lsls	r3, r3, #2
 8001200:	68ba      	ldr	r2, [r7, #8]
 8001202:	441a      	add	r2, r3
 8001204:	69bb      	ldr	r3, [r7, #24]
 8001206:	009b      	lsls	r3, r3, #2
 8001208:	4413      	add	r3, r2
 800120a:	edd3 7a00 	vldr	s15, [r3]
 800120e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001212:	69fb      	ldr	r3, [r7, #28]
 8001214:	009b      	lsls	r3, r3, #2
 8001216:	687a      	ldr	r2, [r7, #4]
 8001218:	441a      	add	r2, r3
 800121a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800121e:	69bb      	ldr	r3, [r7, #24]
 8001220:	009b      	lsls	r3, r3, #2
 8001222:	4413      	add	r3, r2
 8001224:	edc3 7a00 	vstr	s15, [r3]
			for (int k = 0; k < 64; k++) {
 8001228:	697b      	ldr	r3, [r7, #20]
 800122a:	3301      	adds	r3, #1
 800122c:	617b      	str	r3, [r7, #20]
 800122e:	697b      	ldr	r3, [r7, #20]
 8001230:	2b3f      	cmp	r3, #63	; 0x3f
 8001232:	ddd1      	ble.n	80011d8 <mat_mul_relu_third+0x34>
		for (int j = 0; j < 1; j++) {
 8001234:	69bb      	ldr	r3, [r7, #24]
 8001236:	3301      	adds	r3, #1
 8001238:	61bb      	str	r3, [r7, #24]
 800123a:	69bb      	ldr	r3, [r7, #24]
 800123c:	2b00      	cmp	r3, #0
 800123e:	ddbe      	ble.n	80011be <mat_mul_relu_third+0x1a>
			}
		}
		r[i][0] += bias[i][0];
 8001240:	69fb      	ldr	r3, [r7, #28]
 8001242:	009b      	lsls	r3, r3, #2
 8001244:	687a      	ldr	r2, [r7, #4]
 8001246:	4413      	add	r3, r2
 8001248:	ed93 7a00 	vldr	s14, [r3]
 800124c:	69fb      	ldr	r3, [r7, #28]
 800124e:	009b      	lsls	r3, r3, #2
 8001250:	683a      	ldr	r2, [r7, #0]
 8001252:	4413      	add	r3, r2
 8001254:	edd3 7a00 	vldr	s15, [r3]
 8001258:	69fb      	ldr	r3, [r7, #28]
 800125a:	009b      	lsls	r3, r3, #2
 800125c:	687a      	ldr	r2, [r7, #4]
 800125e:	4413      	add	r3, r2
 8001260:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001264:	edc3 7a00 	vstr	s15, [r3]
		if (r[i][0] < 0) {
 8001268:	69fb      	ldr	r3, [r7, #28]
 800126a:	009b      	lsls	r3, r3, #2
 800126c:	687a      	ldr	r2, [r7, #4]
 800126e:	4413      	add	r3, r2
 8001270:	edd3 7a00 	vldr	s15, [r3]
 8001274:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001278:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800127c:	d506      	bpl.n	800128c <mat_mul_relu_third+0xe8>
			r[i][0] = 0;
 800127e:	69fb      	ldr	r3, [r7, #28]
 8001280:	009b      	lsls	r3, r3, #2
 8001282:	687a      	ldr	r2, [r7, #4]
 8001284:	4413      	add	r3, r2
 8001286:	f04f 0200 	mov.w	r2, #0
 800128a:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < 32; i++) {
 800128c:	69fb      	ldr	r3, [r7, #28]
 800128e:	3301      	adds	r3, #1
 8001290:	61fb      	str	r3, [r7, #28]
 8001292:	69fb      	ldr	r3, [r7, #28]
 8001294:	2b1f      	cmp	r3, #31
 8001296:	dd8f      	ble.n	80011b8 <mat_mul_relu_third+0x14>
		}
		// printf("{%.16f},", r[i][0]);
	}
}
 8001298:	bf00      	nop
 800129a:	bf00      	nop
 800129c:	3724      	adds	r7, #36	; 0x24
 800129e:	46bd      	mov	sp, r7
 80012a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a4:	4770      	bx	lr

080012a6 <mat_mul_relu_fourth>:

void mat_mul_relu_fourth(
	float w[32][32],
	float in[32][1],
	float r[32][1],
	float bias[32][1]) {
 80012a6:	b480      	push	{r7}
 80012a8:	b089      	sub	sp, #36	; 0x24
 80012aa:	af00      	add	r7, sp, #0
 80012ac:	60f8      	str	r0, [r7, #12]
 80012ae:	60b9      	str	r1, [r7, #8]
 80012b0:	607a      	str	r2, [r7, #4]
 80012b2:	603b      	str	r3, [r7, #0]
	for (int i = 0; i < 32; i++) {
 80012b4:	2300      	movs	r3, #0
 80012b6:	61fb      	str	r3, [r7, #28]
 80012b8:	e06c      	b.n	8001394 <mat_mul_relu_fourth+0xee>
		for (int j = 0; j < 1; j++) {
 80012ba:	2300      	movs	r3, #0
 80012bc:	61bb      	str	r3, [r7, #24]
 80012be:	e03d      	b.n	800133c <mat_mul_relu_fourth+0x96>
			r[i][j] = 0;
 80012c0:	69fb      	ldr	r3, [r7, #28]
 80012c2:	009b      	lsls	r3, r3, #2
 80012c4:	687a      	ldr	r2, [r7, #4]
 80012c6:	441a      	add	r2, r3
 80012c8:	69bb      	ldr	r3, [r7, #24]
 80012ca:	009b      	lsls	r3, r3, #2
 80012cc:	4413      	add	r3, r2
 80012ce:	f04f 0200 	mov.w	r2, #0
 80012d2:	601a      	str	r2, [r3, #0]
			for (int k = 0; k < 32; k++) {
 80012d4:	2300      	movs	r3, #0
 80012d6:	617b      	str	r3, [r7, #20]
 80012d8:	e02a      	b.n	8001330 <mat_mul_relu_fourth+0x8a>
				r[i][j] += w[i][k] * in[k][j];
 80012da:	69fb      	ldr	r3, [r7, #28]
 80012dc:	009b      	lsls	r3, r3, #2
 80012de:	687a      	ldr	r2, [r7, #4]
 80012e0:	441a      	add	r2, r3
 80012e2:	69bb      	ldr	r3, [r7, #24]
 80012e4:	009b      	lsls	r3, r3, #2
 80012e6:	4413      	add	r3, r2
 80012e8:	ed93 7a00 	vldr	s14, [r3]
 80012ec:	69fb      	ldr	r3, [r7, #28]
 80012ee:	01db      	lsls	r3, r3, #7
 80012f0:	68fa      	ldr	r2, [r7, #12]
 80012f2:	441a      	add	r2, r3
 80012f4:	697b      	ldr	r3, [r7, #20]
 80012f6:	009b      	lsls	r3, r3, #2
 80012f8:	4413      	add	r3, r2
 80012fa:	edd3 6a00 	vldr	s13, [r3]
 80012fe:	697b      	ldr	r3, [r7, #20]
 8001300:	009b      	lsls	r3, r3, #2
 8001302:	68ba      	ldr	r2, [r7, #8]
 8001304:	441a      	add	r2, r3
 8001306:	69bb      	ldr	r3, [r7, #24]
 8001308:	009b      	lsls	r3, r3, #2
 800130a:	4413      	add	r3, r2
 800130c:	edd3 7a00 	vldr	s15, [r3]
 8001310:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001314:	69fb      	ldr	r3, [r7, #28]
 8001316:	009b      	lsls	r3, r3, #2
 8001318:	687a      	ldr	r2, [r7, #4]
 800131a:	441a      	add	r2, r3
 800131c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001320:	69bb      	ldr	r3, [r7, #24]
 8001322:	009b      	lsls	r3, r3, #2
 8001324:	4413      	add	r3, r2
 8001326:	edc3 7a00 	vstr	s15, [r3]
			for (int k = 0; k < 32; k++) {
 800132a:	697b      	ldr	r3, [r7, #20]
 800132c:	3301      	adds	r3, #1
 800132e:	617b      	str	r3, [r7, #20]
 8001330:	697b      	ldr	r3, [r7, #20]
 8001332:	2b1f      	cmp	r3, #31
 8001334:	ddd1      	ble.n	80012da <mat_mul_relu_fourth+0x34>
		for (int j = 0; j < 1; j++) {
 8001336:	69bb      	ldr	r3, [r7, #24]
 8001338:	3301      	adds	r3, #1
 800133a:	61bb      	str	r3, [r7, #24]
 800133c:	69bb      	ldr	r3, [r7, #24]
 800133e:	2b00      	cmp	r3, #0
 8001340:	ddbe      	ble.n	80012c0 <mat_mul_relu_fourth+0x1a>
			}
		}
		r[i][0] += bias[i][0];
 8001342:	69fb      	ldr	r3, [r7, #28]
 8001344:	009b      	lsls	r3, r3, #2
 8001346:	687a      	ldr	r2, [r7, #4]
 8001348:	4413      	add	r3, r2
 800134a:	ed93 7a00 	vldr	s14, [r3]
 800134e:	69fb      	ldr	r3, [r7, #28]
 8001350:	009b      	lsls	r3, r3, #2
 8001352:	683a      	ldr	r2, [r7, #0]
 8001354:	4413      	add	r3, r2
 8001356:	edd3 7a00 	vldr	s15, [r3]
 800135a:	69fb      	ldr	r3, [r7, #28]
 800135c:	009b      	lsls	r3, r3, #2
 800135e:	687a      	ldr	r2, [r7, #4]
 8001360:	4413      	add	r3, r2
 8001362:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001366:	edc3 7a00 	vstr	s15, [r3]
		if (r[i][0] < 0) {
 800136a:	69fb      	ldr	r3, [r7, #28]
 800136c:	009b      	lsls	r3, r3, #2
 800136e:	687a      	ldr	r2, [r7, #4]
 8001370:	4413      	add	r3, r2
 8001372:	edd3 7a00 	vldr	s15, [r3]
 8001376:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800137a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800137e:	d506      	bpl.n	800138e <mat_mul_relu_fourth+0xe8>
			r[i][0] = 0;
 8001380:	69fb      	ldr	r3, [r7, #28]
 8001382:	009b      	lsls	r3, r3, #2
 8001384:	687a      	ldr	r2, [r7, #4]
 8001386:	4413      	add	r3, r2
 8001388:	f04f 0200 	mov.w	r2, #0
 800138c:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < 32; i++) {
 800138e:	69fb      	ldr	r3, [r7, #28]
 8001390:	3301      	adds	r3, #1
 8001392:	61fb      	str	r3, [r7, #28]
 8001394:	69fb      	ldr	r3, [r7, #28]
 8001396:	2b1f      	cmp	r3, #31
 8001398:	dd8f      	ble.n	80012ba <mat_mul_relu_fourth+0x14>
		}
		// printf("{%.16f},", r[i][0]);
	}
}
 800139a:	bf00      	nop
 800139c:	bf00      	nop
 800139e:	3724      	adds	r7, #36	; 0x24
 80013a0:	46bd      	mov	sp, r7
 80013a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a6:	4770      	bx	lr

080013a8 <mat_mul_output_fifth>:

void mat_mul_output_fifth(
	float w[3][32],
	float in[32][1],
	float r[3][1],
	float bias[3][1]) {
 80013a8:	b480      	push	{r7}
 80013aa:	b089      	sub	sp, #36	; 0x24
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	60f8      	str	r0, [r7, #12]
 80013b0:	60b9      	str	r1, [r7, #8]
 80013b2:	607a      	str	r2, [r7, #4]
 80013b4:	603b      	str	r3, [r7, #0]
	for (int i = 0; i < 3; i++) {
 80013b6:	2300      	movs	r3, #0
 80013b8:	61fb      	str	r3, [r7, #28]
 80013ba:	e05a      	b.n	8001472 <mat_mul_output_fifth+0xca>
		for (int j = 0; j < 1; j++) {
 80013bc:	2300      	movs	r3, #0
 80013be:	61bb      	str	r3, [r7, #24]
 80013c0:	e03d      	b.n	800143e <mat_mul_output_fifth+0x96>
			r[i][j] = 0;
 80013c2:	69fb      	ldr	r3, [r7, #28]
 80013c4:	009b      	lsls	r3, r3, #2
 80013c6:	687a      	ldr	r2, [r7, #4]
 80013c8:	441a      	add	r2, r3
 80013ca:	69bb      	ldr	r3, [r7, #24]
 80013cc:	009b      	lsls	r3, r3, #2
 80013ce:	4413      	add	r3, r2
 80013d0:	f04f 0200 	mov.w	r2, #0
 80013d4:	601a      	str	r2, [r3, #0]
			for (int k = 0; k < 32; k++) {
 80013d6:	2300      	movs	r3, #0
 80013d8:	617b      	str	r3, [r7, #20]
 80013da:	e02a      	b.n	8001432 <mat_mul_output_fifth+0x8a>
				r[i][j] += w[i][k] * in[k][j];
 80013dc:	69fb      	ldr	r3, [r7, #28]
 80013de:	009b      	lsls	r3, r3, #2
 80013e0:	687a      	ldr	r2, [r7, #4]
 80013e2:	441a      	add	r2, r3
 80013e4:	69bb      	ldr	r3, [r7, #24]
 80013e6:	009b      	lsls	r3, r3, #2
 80013e8:	4413      	add	r3, r2
 80013ea:	ed93 7a00 	vldr	s14, [r3]
 80013ee:	69fb      	ldr	r3, [r7, #28]
 80013f0:	01db      	lsls	r3, r3, #7
 80013f2:	68fa      	ldr	r2, [r7, #12]
 80013f4:	441a      	add	r2, r3
 80013f6:	697b      	ldr	r3, [r7, #20]
 80013f8:	009b      	lsls	r3, r3, #2
 80013fa:	4413      	add	r3, r2
 80013fc:	edd3 6a00 	vldr	s13, [r3]
 8001400:	697b      	ldr	r3, [r7, #20]
 8001402:	009b      	lsls	r3, r3, #2
 8001404:	68ba      	ldr	r2, [r7, #8]
 8001406:	441a      	add	r2, r3
 8001408:	69bb      	ldr	r3, [r7, #24]
 800140a:	009b      	lsls	r3, r3, #2
 800140c:	4413      	add	r3, r2
 800140e:	edd3 7a00 	vldr	s15, [r3]
 8001412:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001416:	69fb      	ldr	r3, [r7, #28]
 8001418:	009b      	lsls	r3, r3, #2
 800141a:	687a      	ldr	r2, [r7, #4]
 800141c:	441a      	add	r2, r3
 800141e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001422:	69bb      	ldr	r3, [r7, #24]
 8001424:	009b      	lsls	r3, r3, #2
 8001426:	4413      	add	r3, r2
 8001428:	edc3 7a00 	vstr	s15, [r3]
			for (int k = 0; k < 32; k++) {
 800142c:	697b      	ldr	r3, [r7, #20]
 800142e:	3301      	adds	r3, #1
 8001430:	617b      	str	r3, [r7, #20]
 8001432:	697b      	ldr	r3, [r7, #20]
 8001434:	2b1f      	cmp	r3, #31
 8001436:	ddd1      	ble.n	80013dc <mat_mul_output_fifth+0x34>
		for (int j = 0; j < 1; j++) {
 8001438:	69bb      	ldr	r3, [r7, #24]
 800143a:	3301      	adds	r3, #1
 800143c:	61bb      	str	r3, [r7, #24]
 800143e:	69bb      	ldr	r3, [r7, #24]
 8001440:	2b00      	cmp	r3, #0
 8001442:	ddbe      	ble.n	80013c2 <mat_mul_output_fifth+0x1a>
			}
		}
		r[i][0] += bias[i][0];
 8001444:	69fb      	ldr	r3, [r7, #28]
 8001446:	009b      	lsls	r3, r3, #2
 8001448:	687a      	ldr	r2, [r7, #4]
 800144a:	4413      	add	r3, r2
 800144c:	ed93 7a00 	vldr	s14, [r3]
 8001450:	69fb      	ldr	r3, [r7, #28]
 8001452:	009b      	lsls	r3, r3, #2
 8001454:	683a      	ldr	r2, [r7, #0]
 8001456:	4413      	add	r3, r2
 8001458:	edd3 7a00 	vldr	s15, [r3]
 800145c:	69fb      	ldr	r3, [r7, #28]
 800145e:	009b      	lsls	r3, r3, #2
 8001460:	687a      	ldr	r2, [r7, #4]
 8001462:	4413      	add	r3, r2
 8001464:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001468:	edc3 7a00 	vstr	s15, [r3]
	for (int i = 0; i < 3; i++) {
 800146c:	69fb      	ldr	r3, [r7, #28]
 800146e:	3301      	adds	r3, #1
 8001470:	61fb      	str	r3, [r7, #28]
 8001472:	69fb      	ldr	r3, [r7, #28]
 8001474:	2b02      	cmp	r3, #2
 8001476:	dda1      	ble.n	80013bc <mat_mul_output_fifth+0x14>
		// printf("{%.16f},", r[i][0]);
	}
}
 8001478:	bf00      	nop
 800147a:	bf00      	nop
 800147c:	3724      	adds	r7, #36	; 0x24
 800147e:	46bd      	mov	sp, r7
 8001480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001484:	4770      	bx	lr
	...

08001488 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800148c:	4b1b      	ldr	r3, [pc, #108]	; (80014fc <MX_I2C1_Init+0x74>)
 800148e:	4a1c      	ldr	r2, [pc, #112]	; (8001500 <MX_I2C1_Init+0x78>)
 8001490:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x6000030D;
 8001492:	4b1a      	ldr	r3, [pc, #104]	; (80014fc <MX_I2C1_Init+0x74>)
 8001494:	4a1b      	ldr	r2, [pc, #108]	; (8001504 <MX_I2C1_Init+0x7c>)
 8001496:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001498:	4b18      	ldr	r3, [pc, #96]	; (80014fc <MX_I2C1_Init+0x74>)
 800149a:	2200      	movs	r2, #0
 800149c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800149e:	4b17      	ldr	r3, [pc, #92]	; (80014fc <MX_I2C1_Init+0x74>)
 80014a0:	2201      	movs	r2, #1
 80014a2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80014a4:	4b15      	ldr	r3, [pc, #84]	; (80014fc <MX_I2C1_Init+0x74>)
 80014a6:	2200      	movs	r2, #0
 80014a8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80014aa:	4b14      	ldr	r3, [pc, #80]	; (80014fc <MX_I2C1_Init+0x74>)
 80014ac:	2200      	movs	r2, #0
 80014ae:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80014b0:	4b12      	ldr	r3, [pc, #72]	; (80014fc <MX_I2C1_Init+0x74>)
 80014b2:	2200      	movs	r2, #0
 80014b4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80014b6:	4b11      	ldr	r3, [pc, #68]	; (80014fc <MX_I2C1_Init+0x74>)
 80014b8:	2200      	movs	r2, #0
 80014ba:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80014bc:	4b0f      	ldr	r3, [pc, #60]	; (80014fc <MX_I2C1_Init+0x74>)
 80014be:	2200      	movs	r2, #0
 80014c0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80014c2:	480e      	ldr	r0, [pc, #56]	; (80014fc <MX_I2C1_Init+0x74>)
 80014c4:	f001 fc8c 	bl	8002de0 <HAL_I2C_Init>
 80014c8:	4603      	mov	r3, r0
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d001      	beq.n	80014d2 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80014ce:	f000 fc75 	bl	8001dbc <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80014d2:	2100      	movs	r1, #0
 80014d4:	4809      	ldr	r0, [pc, #36]	; (80014fc <MX_I2C1_Init+0x74>)
 80014d6:	f002 fa45 	bl	8003964 <HAL_I2CEx_ConfigAnalogFilter>
 80014da:	4603      	mov	r3, r0
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d001      	beq.n	80014e4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80014e0:	f000 fc6c 	bl	8001dbc <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80014e4:	2100      	movs	r1, #0
 80014e6:	4805      	ldr	r0, [pc, #20]	; (80014fc <MX_I2C1_Init+0x74>)
 80014e8:	f002 fab2 	bl	8003a50 <HAL_I2CEx_ConfigDigitalFilter>
 80014ec:	4603      	mov	r3, r0
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d001      	beq.n	80014f6 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80014f2:	f000 fc63 	bl	8001dbc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80014f6:	bf00      	nop
 80014f8:	bd80      	pop	{r7, pc}
 80014fa:	bf00      	nop
 80014fc:	200094ac 	.word	0x200094ac
 8001500:	40005400 	.word	0x40005400
 8001504:	6000030d 	.word	0x6000030d

08001508 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	b0aa      	sub	sp, #168	; 0xa8
 800150c:	af00      	add	r7, sp, #0
 800150e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001510:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001514:	2200      	movs	r2, #0
 8001516:	601a      	str	r2, [r3, #0]
 8001518:	605a      	str	r2, [r3, #4]
 800151a:	609a      	str	r2, [r3, #8]
 800151c:	60da      	str	r2, [r3, #12]
 800151e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001520:	f107 0310 	add.w	r3, r7, #16
 8001524:	2284      	movs	r2, #132	; 0x84
 8001526:	2100      	movs	r1, #0
 8001528:	4618      	mov	r0, r3
 800152a:	f00a fbbf 	bl	800bcac <memset>
  if(i2cHandle->Instance==I2C1)
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	4a22      	ldr	r2, [pc, #136]	; (80015bc <HAL_I2C_MspInit+0xb4>)
 8001534:	4293      	cmp	r3, r2
 8001536:	d13c      	bne.n	80015b2 <HAL_I2C_MspInit+0xaa>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001538:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800153c:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800153e:	2300      	movs	r3, #0
 8001540:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001542:	f107 0310 	add.w	r3, r7, #16
 8001546:	4618      	mov	r0, r3
 8001548:	f003 f942 	bl	80047d0 <HAL_RCCEx_PeriphCLKConfig>
 800154c:	4603      	mov	r3, r0
 800154e:	2b00      	cmp	r3, #0
 8001550:	d001      	beq.n	8001556 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8001552:	f000 fc33 	bl	8001dbc <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001556:	4b1a      	ldr	r3, [pc, #104]	; (80015c0 <HAL_I2C_MspInit+0xb8>)
 8001558:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800155a:	4a19      	ldr	r2, [pc, #100]	; (80015c0 <HAL_I2C_MspInit+0xb8>)
 800155c:	f043 0302 	orr.w	r3, r3, #2
 8001560:	6313      	str	r3, [r2, #48]	; 0x30
 8001562:	4b17      	ldr	r3, [pc, #92]	; (80015c0 <HAL_I2C_MspInit+0xb8>)
 8001564:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001566:	f003 0302 	and.w	r3, r3, #2
 800156a:	60fb      	str	r3, [r7, #12]
 800156c:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800156e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001572:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001576:	2312      	movs	r3, #18
 8001578:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800157c:	2300      	movs	r3, #0
 800157e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001582:	2303      	movs	r3, #3
 8001584:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001588:	2304      	movs	r3, #4
 800158a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800158e:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001592:	4619      	mov	r1, r3
 8001594:	480b      	ldr	r0, [pc, #44]	; (80015c4 <HAL_I2C_MspInit+0xbc>)
 8001596:	f001 f887 	bl	80026a8 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800159a:	4b09      	ldr	r3, [pc, #36]	; (80015c0 <HAL_I2C_MspInit+0xb8>)
 800159c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800159e:	4a08      	ldr	r2, [pc, #32]	; (80015c0 <HAL_I2C_MspInit+0xb8>)
 80015a0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80015a4:	6413      	str	r3, [r2, #64]	; 0x40
 80015a6:	4b06      	ldr	r3, [pc, #24]	; (80015c0 <HAL_I2C_MspInit+0xb8>)
 80015a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015aa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80015ae:	60bb      	str	r3, [r7, #8]
 80015b0:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80015b2:	bf00      	nop
 80015b4:	37a8      	adds	r7, #168	; 0xa8
 80015b6:	46bd      	mov	sp, r7
 80015b8:	bd80      	pop	{r7, pc}
 80015ba:	bf00      	nop
 80015bc:	40005400 	.word	0x40005400
 80015c0:	40023800 	.word	0x40023800
 80015c4:	40020400 	.word	0x40020400

080015c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	f5ad 5d18 	sub.w	sp, sp, #9728	; 0x2600
 80015ce:	b082      	sub	sp, #8
 80015d0:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80015d2:	f000 fe16 	bl	8002202 <HAL_Init>
  /* USER CODE BEGIN Init */


	// VL53L0X initialization stuff
	//
	uint32_t refSpadCount = 0;
 80015d6:	2300      	movs	r3, #0
 80015d8:	f507 5217 	add.w	r2, r7, #9664	; 0x25c0
 80015dc:	6013      	str	r3, [r2, #0]
	uint8_t isApertureSpads = 0;
 80015de:	2300      	movs	r3, #0
 80015e0:	f242 52bf 	movw	r2, #9663	; 0x25bf
 80015e4:	443a      	add	r2, r7
 80015e6:	7013      	strb	r3, [r2, #0]
	uint8_t VhvSettings = 0;
 80015e8:	2300      	movs	r3, #0
 80015ea:	f242 52be 	movw	r2, #9662	; 0x25be
 80015ee:	443a      	add	r2, r7
 80015f0:	7013      	strb	r3, [r2, #0]
	uint8_t PhaseCal = 0;
 80015f2:	2300      	movs	r3, #0
 80015f4:	f242 52bd 	movw	r2, #9661	; 0x25bd
 80015f8:	443a      	add	r2, r7
 80015fa:	7013      	strb	r3, [r2, #0]

	VL53L0X_Dev_t vl53l0x_s[NUM_SENSOR];
//	VL53L0X_Dev_t vl53l0x_s;

	VL53L0X_DEV Dev;
	uint16_t distance[NUM_SENSOR] = {0,};
 80015fc:	f507 63c0 	add.w	r3, r7, #1536	; 0x600
 8001600:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 8001604:	4618      	mov	r0, r3
 8001606:	2330      	movs	r3, #48	; 0x30
 8001608:	461a      	mov	r2, r3
 800160a:	2100      	movs	r1, #0
 800160c:	f00a fb4e 	bl	800bcac <memset>

	uint8_t tca_ch[8] = {0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80}; // control register of TCA9548A
 8001610:	f507 63c0 	add.w	r3, r7, #1536	; 0x600
 8001614:	f2a3 53fc 	subw	r3, r3, #1532	; 0x5fc
 8001618:	4a4f      	ldr	r2, [pc, #316]	; (8001758 <main+0x190>)
 800161a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800161e:	e883 0003 	stmia.w	r3, {r0, r1}
	uint8_t tca_ch_reset = 0x00;
 8001622:	f507 63c0 	add.w	r3, r7, #1536	; 0x600
 8001626:	f2a3 53fd 	subw	r3, r3, #1533	; 0x5fd
 800162a:	2200      	movs	r2, #0
 800162c:	701a      	strb	r2, [r3, #0]
    uint8_t tca_addr[] = {0x70, 0x71, 0x72};
 800162e:	f507 63c0 	add.w	r3, r7, #1536	; 0x600
 8001632:	f5a3 63c0 	sub.w	r3, r3, #1536	; 0x600
 8001636:	4a49      	ldr	r2, [pc, #292]	; (800175c <main+0x194>)
 8001638:	6812      	ldr	r2, [r2, #0]
 800163a:	4611      	mov	r1, r2
 800163c:	8019      	strh	r1, [r3, #0]
 800163e:	3302      	adds	r3, #2
 8001640:	0c12      	lsrs	r2, r2, #16
 8001642:	701a      	strb	r2, [r3, #0]
    int num_devices = sizeof(tca_addr);
 8001644:	2303      	movs	r3, #3
 8001646:	f242 52e4 	movw	r2, #9700	; 0x25e4
 800164a:	443a      	add	r2, r7
 800164c:	6013      	str	r3, [r2, #0]


  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800164e:	f000 fb47 	bl	8001ce0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001652:	f7ff fc4b 	bl	8000eec <MX_GPIO_Init>
  MX_I2C1_Init();
 8001656:	f7ff ff17 	bl	8001488 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 800165a:	f000 fcef 	bl	800203c <MX_USART1_UART_Init>




  /* UART interrupt initialization */
  MessageLen = sprintf((char*)Message, "JH VL53L0X test\n\r");
 800165e:	4940      	ldr	r1, [pc, #256]	; (8001760 <main+0x198>)
 8001660:	4840      	ldr	r0, [pc, #256]	; (8001764 <main+0x19c>)
 8001662:	f00a ff95 	bl	800c590 <siprintf>
 8001666:	4603      	mov	r3, r0
 8001668:	b2da      	uxtb	r2, r3
 800166a:	4b3f      	ldr	r3, [pc, #252]	; (8001768 <main+0x1a0>)
 800166c:	701a      	strb	r2, [r3, #0]

  HAL_UART_Transmit(&huart1, Message, MessageLen, 100);
 800166e:	4b3e      	ldr	r3, [pc, #248]	; (8001768 <main+0x1a0>)
 8001670:	781b      	ldrb	r3, [r3, #0]
 8001672:	b29a      	uxth	r2, r3
 8001674:	2364      	movs	r3, #100	; 0x64
 8001676:	493b      	ldr	r1, [pc, #236]	; (8001764 <main+0x19c>)
 8001678:	483c      	ldr	r0, [pc, #240]	; (800176c <main+0x1a4>)
 800167a:	f004 f94d 	bl	8005918 <HAL_UART_Transmit>



		for (int i = 0; i < num_devices; i++) {
 800167e:	2300      	movs	r3, #0
 8001680:	f242 52fc 	movw	r2, #9724	; 0x25fc
 8001684:	443a      	add	r2, r7
 8001686:	6013      	str	r3, [r2, #0]
 8001688:	e020      	b.n	80016cc <main+0x104>
		    HAL_I2C_Master_Transmit(&hi2c1, tca_addr[i] << 1, &tca_ch_reset, 1, 1000);
 800168a:	f507 63c0 	add.w	r3, r7, #1536	; 0x600
 800168e:	f5a3 62c0 	sub.w	r2, r3, #1536	; 0x600
 8001692:	f242 53fc 	movw	r3, #9724	; 0x25fc
 8001696:	443b      	add	r3, r7
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	4413      	add	r3, r2
 800169c:	781b      	ldrb	r3, [r3, #0]
 800169e:	b29b      	uxth	r3, r3
 80016a0:	005b      	lsls	r3, r3, #1
 80016a2:	b299      	uxth	r1, r3
 80016a4:	4a32      	ldr	r2, [pc, #200]	; (8001770 <main+0x1a8>)
 80016a6:	f502 5318 	add.w	r3, r2, #9728	; 0x2600
 80016aa:	19da      	adds	r2, r3, r7
 80016ac:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80016b0:	9300      	str	r3, [sp, #0]
 80016b2:	2301      	movs	r3, #1
 80016b4:	482f      	ldr	r0, [pc, #188]	; (8001774 <main+0x1ac>)
 80016b6:	f001 fcb5 	bl	8003024 <HAL_I2C_Master_Transmit>
		for (int i = 0; i < num_devices; i++) {
 80016ba:	f242 53fc 	movw	r3, #9724	; 0x25fc
 80016be:	443b      	add	r3, r7
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	3301      	adds	r3, #1
 80016c4:	f242 52fc 	movw	r2, #9724	; 0x25fc
 80016c8:	443a      	add	r2, r7
 80016ca:	6013      	str	r3, [r2, #0]
 80016cc:	f242 53fc 	movw	r3, #9724	; 0x25fc
 80016d0:	443b      	add	r3, r7
 80016d2:	681a      	ldr	r2, [r3, #0]
 80016d4:	f242 53e4 	movw	r3, #9700	; 0x25e4
 80016d8:	443b      	add	r3, r7
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	429a      	cmp	r2, r3
 80016de:	dbd4      	blt.n	800168a <main+0xc2>
		}

		for (int i = 0; i < NUM_SENSOR; i++) {
 80016e0:	2300      	movs	r3, #0
 80016e2:	f242 52f8 	movw	r2, #9720	; 0x25f8
 80016e6:	443a      	add	r2, r7
 80016e8:	6013      	str	r3, [r2, #0]
 80016ea:	e11e      	b.n	800192a <main+0x362>

			uint8_t q = i / 8;
 80016ec:	f242 53f8 	movw	r3, #9720	; 0x25f8
 80016f0:	443b      	add	r3, r7
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	da00      	bge.n	80016fa <main+0x132>
 80016f8:	3307      	adds	r3, #7
 80016fa:	10db      	asrs	r3, r3, #3
 80016fc:	f242 52cb 	movw	r2, #9675	; 0x25cb
 8001700:	443a      	add	r2, r7
 8001702:	7013      	strb	r3, [r2, #0]
			uint8_t r = i % 8;
 8001704:	f242 53f8 	movw	r3, #9720	; 0x25f8
 8001708:	443b      	add	r3, r7
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	425a      	negs	r2, r3
 800170e:	f003 0307 	and.w	r3, r3, #7
 8001712:	f002 0207 	and.w	r2, r2, #7
 8001716:	bf58      	it	pl
 8001718:	4253      	negpl	r3, r2
 800171a:	f242 52ca 	movw	r2, #9674	; 0x25ca
 800171e:	443a      	add	r2, r7
 8001720:	7013      	strb	r3, [r2, #0]

		    for (int j = 0; j < 3; j++) {
 8001722:	2300      	movs	r3, #0
 8001724:	f242 52f4 	movw	r2, #9716	; 0x25f4
 8001728:	443a      	add	r2, r7
 800172a:	6013      	str	r3, [r2, #0]
 800172c:	e04f      	b.n	80017ce <main+0x206>
		        uint8_t *channel = (j == q) ? &tca_ch[r] : &tca_ch_reset;
 800172e:	f242 53cb 	movw	r3, #9675	; 0x25cb
 8001732:	443b      	add	r3, r7
 8001734:	781b      	ldrb	r3, [r3, #0]
 8001736:	f242 52f4 	movw	r2, #9716	; 0x25f4
 800173a:	443a      	add	r2, r7
 800173c:	6812      	ldr	r2, [r2, #0]
 800173e:	429a      	cmp	r2, r3
 8001740:	d11c      	bne.n	800177c <main+0x1b4>
 8001742:	f242 53ca 	movw	r3, #9674	; 0x25ca
 8001746:	443b      	add	r3, r7
 8001748:	781a      	ldrb	r2, [r3, #0]
 800174a:	4b0b      	ldr	r3, [pc, #44]	; (8001778 <main+0x1b0>)
 800174c:	f503 5318 	add.w	r3, r3, #9728	; 0x2600
 8001750:	443b      	add	r3, r7
 8001752:	4413      	add	r3, r2
 8001754:	e016      	b.n	8001784 <main+0x1bc>
 8001756:	bf00      	nop
 8001758:	0800eacc 	.word	0x0800eacc
 800175c:	0800ead4 	.word	0x0800ead4
 8001760:	0800ea90 	.word	0x0800ea90
 8001764:	20009500 	.word	0x20009500
 8001768:	20009540 	.word	0x20009540
 800176c:	20009564 	.word	0x20009564
 8001770:	ffffda03 	.word	0xffffda03
 8001774:	200094ac 	.word	0x200094ac
 8001778:	ffffda04 	.word	0xffffda04
 800177c:	4b8f      	ldr	r3, [pc, #572]	; (80019bc <main+0x3f4>)
 800177e:	f503 5318 	add.w	r3, r3, #9728	; 0x2600
 8001782:	443b      	add	r3, r7
 8001784:	f242 52c4 	movw	r2, #9668	; 0x25c4
 8001788:	443a      	add	r2, r7
 800178a:	6013      	str	r3, [r2, #0]
		        HAL_I2C_Master_Transmit(&hi2c1, tca_addr[j] << 1, channel, 1, 1000);
 800178c:	f507 63c0 	add.w	r3, r7, #1536	; 0x600
 8001790:	f5a3 62c0 	sub.w	r2, r3, #1536	; 0x600
 8001794:	f242 53f4 	movw	r3, #9716	; 0x25f4
 8001798:	443b      	add	r3, r7
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	4413      	add	r3, r2
 800179e:	781b      	ldrb	r3, [r3, #0]
 80017a0:	b29b      	uxth	r3, r3
 80017a2:	005b      	lsls	r3, r3, #1
 80017a4:	b299      	uxth	r1, r3
 80017a6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80017aa:	9300      	str	r3, [sp, #0]
 80017ac:	2301      	movs	r3, #1
 80017ae:	f242 52c4 	movw	r2, #9668	; 0x25c4
 80017b2:	443a      	add	r2, r7
 80017b4:	6812      	ldr	r2, [r2, #0]
 80017b6:	4882      	ldr	r0, [pc, #520]	; (80019c0 <main+0x3f8>)
 80017b8:	f001 fc34 	bl	8003024 <HAL_I2C_Master_Transmit>
		    for (int j = 0; j < 3; j++) {
 80017bc:	f242 53f4 	movw	r3, #9716	; 0x25f4
 80017c0:	443b      	add	r3, r7
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	3301      	adds	r3, #1
 80017c6:	f242 52f4 	movw	r2, #9716	; 0x25f4
 80017ca:	443a      	add	r2, r7
 80017cc:	6013      	str	r3, [r2, #0]
 80017ce:	f242 53f4 	movw	r3, #9716	; 0x25f4
 80017d2:	443b      	add	r3, r7
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	2b02      	cmp	r3, #2
 80017d8:	dda9      	ble.n	800172e <main+0x166>
		    }

			Dev = &vl53l0x_s[i];
 80017da:	4b7a      	ldr	r3, [pc, #488]	; (80019c4 <main+0x3fc>)
 80017dc:	f503 5318 	add.w	r3, r3, #9728	; 0x2600
 80017e0:	443b      	add	r3, r7
 80017e2:	f242 52f8 	movw	r2, #9720	; 0x25f8
 80017e6:	443a      	add	r2, r7
 80017e8:	6812      	ldr	r2, [r2, #0]
 80017ea:	f44f 71c8 	mov.w	r1, #400	; 0x190
 80017ee:	fb01 f202 	mul.w	r2, r1, r2
 80017f2:	4413      	add	r3, r2
 80017f4:	f242 52d0 	movw	r2, #9680	; 0x25d0
 80017f8:	443a      	add	r2, r7
 80017fa:	6013      	str	r3, [r2, #0]
			Dev->I2cHandle = &hi2c1;
 80017fc:	f242 53d0 	movw	r3, #9680	; 0x25d0
 8001800:	443b      	add	r3, r7
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	4a6e      	ldr	r2, [pc, #440]	; (80019c0 <main+0x3f8>)
 8001806:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
			Dev->I2cDevAddr = VL53L0X_ADDR;
 800180a:	f242 53d0 	movw	r3, #9680	; 0x25d0
 800180e:	443b      	add	r3, r7
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	2252      	movs	r2, #82	; 0x52
 8001814:	f883 2160 	strb.w	r2, [r3, #352]	; 0x160

			VL53L0X_WaitDeviceBooted( Dev );
 8001818:	f242 53d0 	movw	r3, #9680	; 0x25d0
 800181c:	443b      	add	r3, r7
 800181e:	6818      	ldr	r0, [r3, #0]
 8001820:	f005 fcd8 	bl	80071d4 <VL53L0X_WaitDeviceBooted>
			VL53L0X_DataInit( Dev );
 8001824:	f242 53d0 	movw	r3, #9680	; 0x25d0
 8001828:	443b      	add	r3, r7
 800182a:	6818      	ldr	r0, [r3, #0]
 800182c:	f005 f9ec 	bl	8006c08 <VL53L0X_DataInit>
			VL53L0X_StaticInit( Dev );
 8001830:	f242 53d0 	movw	r3, #9680	; 0x25d0
 8001834:	443b      	add	r3, r7
 8001836:	6818      	ldr	r0, [r3, #0]
 8001838:	f005 fb4a 	bl	8006ed0 <VL53L0X_StaticInit>
			VL53L0X_SetDeviceMode(Dev, VL53L0X_DEVICEMODE_CONTINUOUS_RANGING);
 800183c:	2101      	movs	r1, #1
 800183e:	f242 53d0 	movw	r3, #9680	; 0x25d0
 8001842:	443b      	add	r3, r7
 8001844:	6818      	ldr	r0, [r3, #0]
 8001846:	f005 fd63 	bl	8007310 <VL53L0X_SetDeviceMode>
			VL53L0X_PerformRefCalibration( Dev, &VhvSettings, &PhaseCal);
 800184a:	f242 52bd 	movw	r2, #9661	; 0x25bd
 800184e:	443a      	add	r2, r7
 8001850:	f242 53be 	movw	r3, #9662	; 0x25be
 8001854:	443b      	add	r3, r7
 8001856:	4619      	mov	r1, r3
 8001858:	f242 53d0 	movw	r3, #9680	; 0x25d0
 800185c:	443b      	add	r3, r7
 800185e:	6818      	ldr	r0, [r3, #0]
 8001860:	f006 f9d8 	bl	8007c14 <VL53L0X_PerformRefCalibration>
			VL53L0X_PerformRefSpadManagement( Dev, &refSpadCount, &isApertureSpads);
 8001864:	f242 52bf 	movw	r2, #9663	; 0x25bf
 8001868:	443a      	add	r2, r7
 800186a:	f507 5317 	add.w	r3, r7, #9664	; 0x25c0
 800186e:	4619      	mov	r1, r3
 8001870:	f242 53d0 	movw	r3, #9680	; 0x25d0
 8001874:	443b      	add	r3, r7
 8001876:	6818      	ldr	r0, [r3, #0]
 8001878:	f006 fe5a 	bl	8008530 <VL53L0X_PerformRefSpadManagement>
			VL53L0X_SetLimitCheckEnable( Dev, VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, 1);
 800187c:	2201      	movs	r2, #1
 800187e:	2100      	movs	r1, #0
 8001880:	f242 53d0 	movw	r3, #9680	; 0x25d0
 8001884:	443b      	add	r3, r7
 8001886:	6818      	ldr	r0, [r3, #0]
 8001888:	f005 ffbe 	bl	8007808 <VL53L0X_SetLimitCheckEnable>
			VL53L0X_SetLimitCheckEnable( Dev, VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE, 1);
 800188c:	2201      	movs	r2, #1
 800188e:	2101      	movs	r1, #1
 8001890:	f242 53d0 	movw	r3, #9680	; 0x25d0
 8001894:	443b      	add	r3, r7
 8001896:	6818      	ldr	r0, [r3, #0]
 8001898:	f005 ffb6 	bl	8007808 <VL53L0X_SetLimitCheckEnable>
			VL53L0X_SetLimitCheckValue( Dev, VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE, (FixPoint1616_t)(0.1*65536));
 800189c:	f641 1299 	movw	r2, #6553	; 0x1999
 80018a0:	2101      	movs	r1, #1
 80018a2:	f242 53d0 	movw	r3, #9680	; 0x25d0
 80018a6:	443b      	add	r3, r7
 80018a8:	6818      	ldr	r0, [r3, #0]
 80018aa:	f006 f85d 	bl	8007968 <VL53L0X_SetLimitCheckValue>
			VL53L0X_SetLimitCheckValue( Dev, VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, (FixPoint1616_t)(60*65536));
 80018ae:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 80018b2:	2100      	movs	r1, #0
 80018b4:	f242 53d0 	movw	r3, #9680	; 0x25d0
 80018b8:	443b      	add	r3, r7
 80018ba:	6818      	ldr	r0, [r3, #0]
 80018bc:	f006 f854 	bl	8007968 <VL53L0X_SetLimitCheckValue>
			VL53L0X_SetMeasurementTimingBudgetMicroSeconds( Dev, 33000);
 80018c0:	f248 01e8 	movw	r1, #33000	; 0x80e8
 80018c4:	f242 53d0 	movw	r3, #9680	; 0x25d0
 80018c8:	443b      	add	r3, r7
 80018ca:	6818      	ldr	r0, [r3, #0]
 80018cc:	f005 fd7e 	bl	80073cc <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>
			VL53L0X_SetVcselPulsePeriod( Dev, VL53L0X_VCSEL_PERIOD_PRE_RANGE, 18);
 80018d0:	2212      	movs	r2, #18
 80018d2:	2100      	movs	r1, #0
 80018d4:	f242 53d0 	movw	r3, #9680	; 0x25d0
 80018d8:	443b      	add	r3, r7
 80018da:	6818      	ldr	r0, [r3, #0]
 80018dc:	f005 fd9c 	bl	8007418 <VL53L0X_SetVcselPulsePeriod>
			VL53L0X_SetVcselPulsePeriod( Dev, VL53L0X_VCSEL_PERIOD_FINAL_RANGE, 14);
 80018e0:	220e      	movs	r2, #14
 80018e2:	2101      	movs	r1, #1
 80018e4:	f242 53d0 	movw	r3, #9680	; 0x25d0
 80018e8:	443b      	add	r3, r7
 80018ea:	6818      	ldr	r0, [r3, #0]
 80018ec:	f005 fd94 	bl	8007418 <VL53L0X_SetVcselPulsePeriod>

			MessageLen = sprintf((char*)Message, "%d complete \n\r",i);
 80018f0:	f242 53f8 	movw	r3, #9720	; 0x25f8
 80018f4:	443b      	add	r3, r7
 80018f6:	681a      	ldr	r2, [r3, #0]
 80018f8:	4933      	ldr	r1, [pc, #204]	; (80019c8 <main+0x400>)
 80018fa:	4834      	ldr	r0, [pc, #208]	; (80019cc <main+0x404>)
 80018fc:	f00a fe48 	bl	800c590 <siprintf>
 8001900:	4603      	mov	r3, r0
 8001902:	b2da      	uxtb	r2, r3
 8001904:	4b32      	ldr	r3, [pc, #200]	; (80019d0 <main+0x408>)
 8001906:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit(&huart1, Message, MessageLen, 100);
 8001908:	4b31      	ldr	r3, [pc, #196]	; (80019d0 <main+0x408>)
 800190a:	781b      	ldrb	r3, [r3, #0]
 800190c:	b29a      	uxth	r2, r3
 800190e:	2364      	movs	r3, #100	; 0x64
 8001910:	492e      	ldr	r1, [pc, #184]	; (80019cc <main+0x404>)
 8001912:	4830      	ldr	r0, [pc, #192]	; (80019d4 <main+0x40c>)
 8001914:	f004 f800 	bl	8005918 <HAL_UART_Transmit>
		for (int i = 0; i < NUM_SENSOR; i++) {
 8001918:	f242 53f8 	movw	r3, #9720	; 0x25f8
 800191c:	443b      	add	r3, r7
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	3301      	adds	r3, #1
 8001922:	f242 52f8 	movw	r2, #9720	; 0x25f8
 8001926:	443a      	add	r2, r7
 8001928:	6013      	str	r3, [r2, #0]
 800192a:	f242 53f8 	movw	r3, #9720	; 0x25f8
 800192e:	443b      	add	r3, r7
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	2b17      	cmp	r3, #23
 8001934:	f77f aeda 	ble.w	80016ec <main+0x124>


  while (1)
  {

  	  uint32_t start = HAL_GetTick();
 8001938:	f000 fcb4 	bl	80022a4 <HAL_GetTick>
 800193c:	f242 53e0 	movw	r3, #9696	; 0x25e0
 8001940:	443b      	add	r3, r7
 8001942:	6018      	str	r0, [r3, #0]


		   for (int i = 0; i < NUM_SENSOR; i++) {
 8001944:	2300      	movs	r3, #0
 8001946:	f242 52f0 	movw	r2, #9712	; 0x25f0
 800194a:	443a      	add	r2, r7
 800194c:	6013      	str	r3, [r2, #0]
 800194e:	e0e4      	b.n	8001b1a <main+0x552>

				uint8_t q = i / 8;
 8001950:	f242 53f0 	movw	r3, #9712	; 0x25f0
 8001954:	443b      	add	r3, r7
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	2b00      	cmp	r3, #0
 800195a:	da00      	bge.n	800195e <main+0x396>
 800195c:	3307      	adds	r3, #7
 800195e:	10db      	asrs	r3, r3, #3
 8001960:	f242 52d7 	movw	r2, #9687	; 0x25d7
 8001964:	443a      	add	r2, r7
 8001966:	7013      	strb	r3, [r2, #0]
				uint8_t r = i % 8;
 8001968:	f242 53f0 	movw	r3, #9712	; 0x25f0
 800196c:	443b      	add	r3, r7
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	425a      	negs	r2, r3
 8001972:	f003 0307 	and.w	r3, r3, #7
 8001976:	f002 0207 	and.w	r2, r2, #7
 800197a:	bf58      	it	pl
 800197c:	4253      	negpl	r3, r2
 800197e:	f242 52d6 	movw	r2, #9686	; 0x25d6
 8001982:	443a      	add	r2, r7
 8001984:	7013      	strb	r3, [r2, #0]

			    for (int j = 0; j < 3; j++) {
 8001986:	2300      	movs	r3, #0
 8001988:	f242 52ec 	movw	r2, #9708	; 0x25ec
 800198c:	443a      	add	r2, r7
 800198e:	6013      	str	r3, [r2, #0]
 8001990:	e04d      	b.n	8001a2e <main+0x466>
			        uint8_t *channel = (j == q) ? &tca_ch[r] : &tca_ch_reset;
 8001992:	f242 53d7 	movw	r3, #9687	; 0x25d7
 8001996:	443b      	add	r3, r7
 8001998:	781b      	ldrb	r3, [r3, #0]
 800199a:	f242 52ec 	movw	r2, #9708	; 0x25ec
 800199e:	443a      	add	r2, r7
 80019a0:	6812      	ldr	r2, [r2, #0]
 80019a2:	429a      	cmp	r2, r3
 80019a4:	d11a      	bne.n	80019dc <main+0x414>
 80019a6:	f242 53d6 	movw	r3, #9686	; 0x25d6
 80019aa:	443b      	add	r3, r7
 80019ac:	781a      	ldrb	r2, [r3, #0]
 80019ae:	4b0a      	ldr	r3, [pc, #40]	; (80019d8 <main+0x410>)
 80019b0:	f503 5318 	add.w	r3, r3, #9728	; 0x2600
 80019b4:	443b      	add	r3, r7
 80019b6:	4413      	add	r3, r2
 80019b8:	e014      	b.n	80019e4 <main+0x41c>
 80019ba:	bf00      	nop
 80019bc:	ffffda03 	.word	0xffffda03
 80019c0:	200094ac 	.word	0x200094ac
 80019c4:	ffffda3c 	.word	0xffffda3c
 80019c8:	0800eaa4 	.word	0x0800eaa4
 80019cc:	20009500 	.word	0x20009500
 80019d0:	20009540 	.word	0x20009540
 80019d4:	20009564 	.word	0x20009564
 80019d8:	ffffda04 	.word	0xffffda04
 80019dc:	4ba5      	ldr	r3, [pc, #660]	; (8001c74 <main+0x6ac>)
 80019de:	f503 5318 	add.w	r3, r3, #9728	; 0x2600
 80019e2:	443b      	add	r3, r7
 80019e4:	f242 52cc 	movw	r2, #9676	; 0x25cc
 80019e8:	443a      	add	r2, r7
 80019ea:	6013      	str	r3, [r2, #0]
			        HAL_I2C_Master_Transmit(&hi2c1, tca_addr[j] << 1, channel, 1, 1000);
 80019ec:	f507 63c0 	add.w	r3, r7, #1536	; 0x600
 80019f0:	f5a3 62c0 	sub.w	r2, r3, #1536	; 0x600
 80019f4:	f242 53ec 	movw	r3, #9708	; 0x25ec
 80019f8:	443b      	add	r3, r7
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	4413      	add	r3, r2
 80019fe:	781b      	ldrb	r3, [r3, #0]
 8001a00:	b29b      	uxth	r3, r3
 8001a02:	005b      	lsls	r3, r3, #1
 8001a04:	b299      	uxth	r1, r3
 8001a06:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a0a:	9300      	str	r3, [sp, #0]
 8001a0c:	2301      	movs	r3, #1
 8001a0e:	f242 52cc 	movw	r2, #9676	; 0x25cc
 8001a12:	443a      	add	r2, r7
 8001a14:	6812      	ldr	r2, [r2, #0]
 8001a16:	4898      	ldr	r0, [pc, #608]	; (8001c78 <main+0x6b0>)
 8001a18:	f001 fb04 	bl	8003024 <HAL_I2C_Master_Transmit>
			    for (int j = 0; j < 3; j++) {
 8001a1c:	f242 53ec 	movw	r3, #9708	; 0x25ec
 8001a20:	443b      	add	r3, r7
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	3301      	adds	r3, #1
 8001a26:	f242 52ec 	movw	r2, #9708	; 0x25ec
 8001a2a:	443a      	add	r2, r7
 8001a2c:	6013      	str	r3, [r2, #0]
 8001a2e:	f242 53ec 	movw	r3, #9708	; 0x25ec
 8001a32:	443b      	add	r3, r7
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	2b02      	cmp	r3, #2
 8001a38:	ddab      	ble.n	8001992 <main+0x3ca>
			    }

		       Dev = &vl53l0x_s[i];
 8001a3a:	4b90      	ldr	r3, [pc, #576]	; (8001c7c <main+0x6b4>)
 8001a3c:	f503 5318 	add.w	r3, r3, #9728	; 0x2600
 8001a40:	443b      	add	r3, r7
 8001a42:	f242 52f0 	movw	r2, #9712	; 0x25f0
 8001a46:	443a      	add	r2, r7
 8001a48:	6812      	ldr	r2, [r2, #0]
 8001a4a:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8001a4e:	fb01 f202 	mul.w	r2, r1, r2
 8001a52:	4413      	add	r3, r2
 8001a54:	f242 52d0 	movw	r2, #9680	; 0x25d0
 8001a58:	443a      	add	r2, r7
 8001a5a:	6013      	str	r3, [r2, #0]

		       VL53L0X_PerformContinuousRangingMeasurement(Dev, &RangingData); // 1500us
 8001a5c:	4988      	ldr	r1, [pc, #544]	; (8001c80 <main+0x6b8>)
 8001a5e:	f242 53d0 	movw	r3, #9680	; 0x25d0
 8001a62:	443b      	add	r3, r7
 8001a64:	6818      	ldr	r0, [r3, #0]
 8001a66:	f006 fd78 	bl	800855a <VL53L0X_PerformContinuousRangingMeasurement>
		       if (RangingData.RangeStatus == 0) {
 8001a6a:	4b85      	ldr	r3, [pc, #532]	; (8001c80 <main+0x6b8>)
 8001a6c:	7e1b      	ldrb	r3, [r3, #24]
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d10c      	bne.n	8001a8c <main+0x4c4>
		    	   distance[i] = RangingData.RangeMilliMeter;
 8001a72:	4b83      	ldr	r3, [pc, #524]	; (8001c80 <main+0x6b8>)
 8001a74:	8919      	ldrh	r1, [r3, #8]
 8001a76:	f507 63c0 	add.w	r3, r7, #1536	; 0x600
 8001a7a:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 8001a7e:	f242 52f0 	movw	r2, #9712	; 0x25f0
 8001a82:	443a      	add	r2, r7
 8001a84:	6812      	ldr	r2, [r2, #0]
 8001a86:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
 8001a8a:	e00a      	b.n	8001aa2 <main+0x4da>
		       }else{
		    	   distance[i] = 0;
 8001a8c:	f507 63c0 	add.w	r3, r7, #1536	; 0x600
 8001a90:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 8001a94:	f242 52f0 	movw	r2, #9712	; 0x25f0
 8001a98:	443a      	add	r2, r7
 8001a9a:	6812      	ldr	r2, [r2, #0]
 8001a9c:	2100      	movs	r1, #0
 8001a9e:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
		       }
	           MessageLen = sprintf((char*)Message, "%d ",distance[i]);
 8001aa2:	f507 63c0 	add.w	r3, r7, #1536	; 0x600
 8001aa6:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 8001aaa:	f242 52f0 	movw	r2, #9712	; 0x25f0
 8001aae:	443a      	add	r2, r7
 8001ab0:	6812      	ldr	r2, [r2, #0]
 8001ab2:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8001ab6:	461a      	mov	r2, r3
 8001ab8:	4972      	ldr	r1, [pc, #456]	; (8001c84 <main+0x6bc>)
 8001aba:	4873      	ldr	r0, [pc, #460]	; (8001c88 <main+0x6c0>)
 8001abc:	f00a fd68 	bl	800c590 <siprintf>
 8001ac0:	4603      	mov	r3, r0
 8001ac2:	b2da      	uxtb	r2, r3
 8001ac4:	4b71      	ldr	r3, [pc, #452]	; (8001c8c <main+0x6c4>)
 8001ac6:	701a      	strb	r2, [r3, #0]
	           HAL_UART_Transmit(&huart1, Message, MessageLen, 1000);
 8001ac8:	4b70      	ldr	r3, [pc, #448]	; (8001c8c <main+0x6c4>)
 8001aca:	781b      	ldrb	r3, [r3, #0]
 8001acc:	b29a      	uxth	r2, r3
 8001ace:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001ad2:	496d      	ldr	r1, [pc, #436]	; (8001c88 <main+0x6c0>)
 8001ad4:	486e      	ldr	r0, [pc, #440]	; (8001c90 <main+0x6c8>)
 8001ad6:	f003 ff1f 	bl	8005918 <HAL_UART_Transmit>

		       in[i][0] = distance[i];
 8001ada:	f507 63c0 	add.w	r3, r7, #1536	; 0x600
 8001ade:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 8001ae2:	f242 52f0 	movw	r2, #9712	; 0x25f0
 8001ae6:	443a      	add	r2, r7
 8001ae8:	6812      	ldr	r2, [r2, #0]
 8001aea:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8001aee:	ee07 3a90 	vmov	s15, r3
 8001af2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001af6:	4a67      	ldr	r2, [pc, #412]	; (8001c94 <main+0x6cc>)
 8001af8:	f242 53f0 	movw	r3, #9712	; 0x25f0
 8001afc:	443b      	add	r3, r7
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	009b      	lsls	r3, r3, #2
 8001b02:	4413      	add	r3, r2
 8001b04:	edc3 7a00 	vstr	s15, [r3]
		   for (int i = 0; i < NUM_SENSOR; i++) {
 8001b08:	f242 53f0 	movw	r3, #9712	; 0x25f0
 8001b0c:	443b      	add	r3, r7
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	3301      	adds	r3, #1
 8001b12:	f242 52f0 	movw	r2, #9712	; 0x25f0
 8001b16:	443a      	add	r2, r7
 8001b18:	6013      	str	r3, [r2, #0]
 8001b1a:	f242 53f0 	movw	r3, #9712	; 0x25f0
 8001b1e:	443b      	add	r3, r7
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	2b17      	cmp	r3, #23
 8001b24:	f77f af14 	ble.w	8001950 <main+0x388>

		   }

			uint32_t end = HAL_GetTick();
 8001b28:	f000 fbbc 	bl	80022a4 <HAL_GetTick>
 8001b2c:	f242 53dc 	movw	r3, #9692	; 0x25dc
 8001b30:	443b      	add	r3, r7
 8001b32:	6018      	str	r0, [r3, #0]


			mat_mul_relu_first(w1, in, r1, b1);
 8001b34:	4b58      	ldr	r3, [pc, #352]	; (8001c98 <main+0x6d0>)
 8001b36:	4a59      	ldr	r2, [pc, #356]	; (8001c9c <main+0x6d4>)
 8001b38:	4956      	ldr	r1, [pc, #344]	; (8001c94 <main+0x6cc>)
 8001b3a:	4859      	ldr	r0, [pc, #356]	; (8001ca0 <main+0x6d8>)
 8001b3c:	f7ff fa2c 	bl	8000f98 <mat_mul_relu_first>
			mat_mul_relu_second(w2, r1, r2, b2);
 8001b40:	4b58      	ldr	r3, [pc, #352]	; (8001ca4 <main+0x6dc>)
 8001b42:	4a59      	ldr	r2, [pc, #356]	; (8001ca8 <main+0x6e0>)
 8001b44:	4955      	ldr	r1, [pc, #340]	; (8001c9c <main+0x6d4>)
 8001b46:	4859      	ldr	r0, [pc, #356]	; (8001cac <main+0x6e4>)
 8001b48:	f7ff faab 	bl	80010a2 <mat_mul_relu_second>
			mat_mul_relu_third(w3, r2, r3, b3);
 8001b4c:	4b58      	ldr	r3, [pc, #352]	; (8001cb0 <main+0x6e8>)
 8001b4e:	4a59      	ldr	r2, [pc, #356]	; (8001cb4 <main+0x6ec>)
 8001b50:	4955      	ldr	r1, [pc, #340]	; (8001ca8 <main+0x6e0>)
 8001b52:	4859      	ldr	r0, [pc, #356]	; (8001cb8 <main+0x6f0>)
 8001b54:	f7ff fb26 	bl	80011a4 <mat_mul_relu_third>
			mat_mul_relu_fourth(w4, r3, r4, b4);
 8001b58:	4b58      	ldr	r3, [pc, #352]	; (8001cbc <main+0x6f4>)
 8001b5a:	4a59      	ldr	r2, [pc, #356]	; (8001cc0 <main+0x6f8>)
 8001b5c:	4955      	ldr	r1, [pc, #340]	; (8001cb4 <main+0x6ec>)
 8001b5e:	4859      	ldr	r0, [pc, #356]	; (8001cc4 <main+0x6fc>)
 8001b60:	f7ff fba1 	bl	80012a6 <mat_mul_relu_fourth>
			mat_mul_output_fifth(w5, r4, r5, b5);
 8001b64:	4b58      	ldr	r3, [pc, #352]	; (8001cc8 <main+0x700>)
 8001b66:	4a59      	ldr	r2, [pc, #356]	; (8001ccc <main+0x704>)
 8001b68:	4955      	ldr	r1, [pc, #340]	; (8001cc0 <main+0x6f8>)
 8001b6a:	4859      	ldr	r0, [pc, #356]	; (8001cd0 <main+0x708>)
 8001b6c:	f7ff fc1c 	bl	80013a8 <mat_mul_output_fifth>

			uint32_t end2 = HAL_GetTick();
 8001b70:	f000 fb98 	bl	80022a4 <HAL_GetTick>
 8001b74:	f242 53d8 	movw	r3, #9688	; 0x25d8
 8001b78:	443b      	add	r3, r7
 8001b7a:	6018      	str	r0, [r3, #0]



		for(int i=0; i<3; i++){
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	f242 52e8 	movw	r2, #9704	; 0x25e8
 8001b82:	443a      	add	r2, r7
 8001b84:	6013      	str	r3, [r2, #0]
 8001b86:	e026      	b.n	8001bd6 <main+0x60e>
			MessageLen = sprintf((char*)Message, "%.8f ",r5[i][0]);
 8001b88:	4a50      	ldr	r2, [pc, #320]	; (8001ccc <main+0x704>)
 8001b8a:	f242 53e8 	movw	r3, #9704	; 0x25e8
 8001b8e:	443b      	add	r3, r7
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	009b      	lsls	r3, r3, #2
 8001b94:	4413      	add	r3, r2
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	4618      	mov	r0, r3
 8001b9a:	f7fe fcf5 	bl	8000588 <__aeabi_f2d>
 8001b9e:	4602      	mov	r2, r0
 8001ba0:	460b      	mov	r3, r1
 8001ba2:	494c      	ldr	r1, [pc, #304]	; (8001cd4 <main+0x70c>)
 8001ba4:	4838      	ldr	r0, [pc, #224]	; (8001c88 <main+0x6c0>)
 8001ba6:	f00a fcf3 	bl	800c590 <siprintf>
 8001baa:	4603      	mov	r3, r0
 8001bac:	b2da      	uxtb	r2, r3
 8001bae:	4b37      	ldr	r3, [pc, #220]	; (8001c8c <main+0x6c4>)
 8001bb0:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit(&huart1, Message, MessageLen, 1000);
 8001bb2:	4b36      	ldr	r3, [pc, #216]	; (8001c8c <main+0x6c4>)
 8001bb4:	781b      	ldrb	r3, [r3, #0]
 8001bb6:	b29a      	uxth	r2, r3
 8001bb8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001bbc:	4932      	ldr	r1, [pc, #200]	; (8001c88 <main+0x6c0>)
 8001bbe:	4834      	ldr	r0, [pc, #208]	; (8001c90 <main+0x6c8>)
 8001bc0:	f003 feaa 	bl	8005918 <HAL_UART_Transmit>
		for(int i=0; i<3; i++){
 8001bc4:	f242 53e8 	movw	r3, #9704	; 0x25e8
 8001bc8:	443b      	add	r3, r7
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	3301      	adds	r3, #1
 8001bce:	f242 52e8 	movw	r2, #9704	; 0x25e8
 8001bd2:	443a      	add	r2, r7
 8001bd4:	6013      	str	r3, [r2, #0]
 8001bd6:	f242 53e8 	movw	r3, #9704	; 0x25e8
 8001bda:	443b      	add	r3, r7
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	2b02      	cmp	r3, #2
 8001be0:	ddd2      	ble.n	8001b88 <main+0x5c0>
		}

		MessageLen = sprintf((char*)Message, "\n");
 8001be2:	493d      	ldr	r1, [pc, #244]	; (8001cd8 <main+0x710>)
 8001be4:	4828      	ldr	r0, [pc, #160]	; (8001c88 <main+0x6c0>)
 8001be6:	f00a fcd3 	bl	800c590 <siprintf>
 8001bea:	4603      	mov	r3, r0
 8001bec:	b2da      	uxtb	r2, r3
 8001bee:	4b27      	ldr	r3, [pc, #156]	; (8001c8c <main+0x6c4>)
 8001bf0:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit(&huart1, Message, MessageLen, 1000);
 8001bf2:	4b26      	ldr	r3, [pc, #152]	; (8001c8c <main+0x6c4>)
 8001bf4:	781b      	ldrb	r3, [r3, #0]
 8001bf6:	b29a      	uxth	r2, r3
 8001bf8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001bfc:	4922      	ldr	r1, [pc, #136]	; (8001c88 <main+0x6c0>)
 8001bfe:	4824      	ldr	r0, [pc, #144]	; (8001c90 <main+0x6c8>)
 8001c00:	f003 fe8a 	bl	8005918 <HAL_UART_Transmit>

		MessageLen = sprintf((char*)Message, "%d ms\n",end-start);
 8001c04:	f242 53dc 	movw	r3, #9692	; 0x25dc
 8001c08:	443b      	add	r3, r7
 8001c0a:	681a      	ldr	r2, [r3, #0]
 8001c0c:	f242 53e0 	movw	r3, #9696	; 0x25e0
 8001c10:	443b      	add	r3, r7
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	1ad3      	subs	r3, r2, r3
 8001c16:	461a      	mov	r2, r3
 8001c18:	4930      	ldr	r1, [pc, #192]	; (8001cdc <main+0x714>)
 8001c1a:	481b      	ldr	r0, [pc, #108]	; (8001c88 <main+0x6c0>)
 8001c1c:	f00a fcb8 	bl	800c590 <siprintf>
 8001c20:	4603      	mov	r3, r0
 8001c22:	b2da      	uxtb	r2, r3
 8001c24:	4b19      	ldr	r3, [pc, #100]	; (8001c8c <main+0x6c4>)
 8001c26:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit(&huart1, Message, MessageLen, 1000);
 8001c28:	4b18      	ldr	r3, [pc, #96]	; (8001c8c <main+0x6c4>)
 8001c2a:	781b      	ldrb	r3, [r3, #0]
 8001c2c:	b29a      	uxth	r2, r3
 8001c2e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c32:	4915      	ldr	r1, [pc, #84]	; (8001c88 <main+0x6c0>)
 8001c34:	4816      	ldr	r0, [pc, #88]	; (8001c90 <main+0x6c8>)
 8001c36:	f003 fe6f 	bl	8005918 <HAL_UART_Transmit>

		MessageLen = sprintf((char*)Message, "%d ms\n",end2-end);
 8001c3a:	f242 53d8 	movw	r3, #9688	; 0x25d8
 8001c3e:	443b      	add	r3, r7
 8001c40:	681a      	ldr	r2, [r3, #0]
 8001c42:	f242 53dc 	movw	r3, #9692	; 0x25dc
 8001c46:	443b      	add	r3, r7
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	1ad3      	subs	r3, r2, r3
 8001c4c:	461a      	mov	r2, r3
 8001c4e:	4923      	ldr	r1, [pc, #140]	; (8001cdc <main+0x714>)
 8001c50:	480d      	ldr	r0, [pc, #52]	; (8001c88 <main+0x6c0>)
 8001c52:	f00a fc9d 	bl	800c590 <siprintf>
 8001c56:	4603      	mov	r3, r0
 8001c58:	b2da      	uxtb	r2, r3
 8001c5a:	4b0c      	ldr	r3, [pc, #48]	; (8001c8c <main+0x6c4>)
 8001c5c:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit(&huart1, Message, MessageLen, 1000);
 8001c5e:	4b0b      	ldr	r3, [pc, #44]	; (8001c8c <main+0x6c4>)
 8001c60:	781b      	ldrb	r3, [r3, #0]
 8001c62:	b29a      	uxth	r2, r3
 8001c64:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c68:	4907      	ldr	r1, [pc, #28]	; (8001c88 <main+0x6c0>)
 8001c6a:	4809      	ldr	r0, [pc, #36]	; (8001c90 <main+0x6c8>)
 8001c6c:	f003 fe54 	bl	8005918 <HAL_UART_Transmit>
  {
 8001c70:	e662      	b.n	8001938 <main+0x370>
 8001c72:	bf00      	nop
 8001c74:	ffffda03 	.word	0xffffda03
 8001c78:	200094ac 	.word	0x200094ac
 8001c7c:	ffffda3c 	.word	0xffffda3c
 8001c80:	20009544 	.word	0x20009544
 8001c84:	0800eab4 	.word	0x0800eab4
 8001c88:	20009500 	.word	0x20009500
 8001c8c:	20009540 	.word	0x20009540
 8001c90:	20009564 	.word	0x20009564
 8001c94:	20009140 	.word	0x20009140
 8001c98:	20001800 	.word	0x20001800
 8001c9c:	200091a0 	.word	0x200091a0
 8001ca0:	20000000 	.word	0x20000000
 8001ca4:	20005900 	.word	0x20005900
 8001ca8:	200092a0 	.word	0x200092a0
 8001cac:	20001900 	.word	0x20001900
 8001cb0:	20007a00 	.word	0x20007a00
 8001cb4:	200093a0 	.word	0x200093a0
 8001cb8:	20005a00 	.word	0x20005a00
 8001cbc:	20008a80 	.word	0x20008a80
 8001cc0:	20009420 	.word	0x20009420
 8001cc4:	20007a80 	.word	0x20007a80
 8001cc8:	20008c80 	.word	0x20008c80
 8001ccc:	200094a0 	.word	0x200094a0
 8001cd0:	20008b00 	.word	0x20008b00
 8001cd4:	0800eab8 	.word	0x0800eab8
 8001cd8:	0800eac0 	.word	0x0800eac0
 8001cdc:	0800eac4 	.word	0x0800eac4

08001ce0 <SystemClock_Config>:
  * @brief System Clock Configuration
  * @retval None
  */

void SystemClock_Config(void)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b094      	sub	sp, #80	; 0x50
 8001ce4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001ce6:	f107 0320 	add.w	r3, r7, #32
 8001cea:	2230      	movs	r2, #48	; 0x30
 8001cec:	2100      	movs	r1, #0
 8001cee:	4618      	mov	r0, r3
 8001cf0:	f009 ffdc 	bl	800bcac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001cf4:	f107 030c 	add.w	r3, r7, #12
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	601a      	str	r2, [r3, #0]
 8001cfc:	605a      	str	r2, [r3, #4]
 8001cfe:	609a      	str	r2, [r3, #8]
 8001d00:	60da      	str	r2, [r3, #12]
 8001d02:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d04:	4b2b      	ldr	r3, [pc, #172]	; (8001db4 <SystemClock_Config+0xd4>)
 8001d06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d08:	4a2a      	ldr	r2, [pc, #168]	; (8001db4 <SystemClock_Config+0xd4>)
 8001d0a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d0e:	6413      	str	r3, [r2, #64]	; 0x40
 8001d10:	4b28      	ldr	r3, [pc, #160]	; (8001db4 <SystemClock_Config+0xd4>)
 8001d12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d14:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d18:	60bb      	str	r3, [r7, #8]
 8001d1a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001d1c:	4b26      	ldr	r3, [pc, #152]	; (8001db8 <SystemClock_Config+0xd8>)
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	4a25      	ldr	r2, [pc, #148]	; (8001db8 <SystemClock_Config+0xd8>)
 8001d22:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001d26:	6013      	str	r3, [r2, #0]
 8001d28:	4b23      	ldr	r3, [pc, #140]	; (8001db8 <SystemClock_Config+0xd8>)
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001d30:	607b      	str	r3, [r7, #4]
 8001d32:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001d34:	2301      	movs	r3, #1
 8001d36:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001d38:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001d3c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001d3e:	2302      	movs	r3, #2
 8001d40:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001d42:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001d46:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8001d48:	2319      	movs	r3, #25
 8001d4a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 432;
 8001d4c:	f44f 73d8 	mov.w	r3, #432	; 0x1b0
 8001d50:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001d52:	2302      	movs	r3, #2
 8001d54:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001d56:	2302      	movs	r3, #2
 8001d58:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001d5a:	f107 0320 	add.w	r3, r7, #32
 8001d5e:	4618      	mov	r0, r3
 8001d60:	f001 ff3a 	bl	8003bd8 <HAL_RCC_OscConfig>
 8001d64:	4603      	mov	r3, r0
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d001      	beq.n	8001d6e <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8001d6a:	f000 f827 	bl	8001dbc <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001d6e:	f001 fee3 	bl	8003b38 <HAL_PWREx_EnableOverDrive>
 8001d72:	4603      	mov	r3, r0
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d001      	beq.n	8001d7c <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8001d78:	f000 f820 	bl	8001dbc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001d7c:	230f      	movs	r3, #15
 8001d7e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001d80:	2302      	movs	r3, #2
 8001d82:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001d84:	2300      	movs	r3, #0
 8001d86:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001d88:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001d8c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001d8e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d92:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8001d94:	f107 030c 	add.w	r3, r7, #12
 8001d98:	2107      	movs	r1, #7
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	f002 fa76 	bl	800428c <HAL_RCC_ClockConfig>
 8001da0:	4603      	mov	r3, r0
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d001      	beq.n	8001daa <SystemClock_Config+0xca>
  {
    Error_Handler();
 8001da6:	f000 f809 	bl	8001dbc <Error_Handler>
  }
}
 8001daa:	bf00      	nop
 8001dac:	3750      	adds	r7, #80	; 0x50
 8001dae:	46bd      	mov	sp, r7
 8001db0:	bd80      	pop	{r7, pc}
 8001db2:	bf00      	nop
 8001db4:	40023800 	.word	0x40023800
 8001db8:	40007000 	.word	0x40007000

08001dbc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001dbc:	b480      	push	{r7}
 8001dbe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001dc0:	b672      	cpsid	i
}
 8001dc2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001dc4:	e7fe      	b.n	8001dc4 <Error_Handler+0x8>

08001dc6 <assert_failed>:
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
 8001dc6:	b480      	push	{r7}
 8001dc8:	b083      	sub	sp, #12
 8001dca:	af00      	add	r7, sp, #0
 8001dcc:	6078      	str	r0, [r7, #4]
 8001dce:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
 8001dd0:	bf00      	nop
 8001dd2:	370c      	adds	r7, #12
 8001dd4:	46bd      	mov	sp, r7
 8001dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dda:	4770      	bx	lr

08001ddc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ddc:	b480      	push	{r7}
 8001dde:	b083      	sub	sp, #12
 8001de0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001de2:	4b0f      	ldr	r3, [pc, #60]	; (8001e20 <HAL_MspInit+0x44>)
 8001de4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001de6:	4a0e      	ldr	r2, [pc, #56]	; (8001e20 <HAL_MspInit+0x44>)
 8001de8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001dec:	6413      	str	r3, [r2, #64]	; 0x40
 8001dee:	4b0c      	ldr	r3, [pc, #48]	; (8001e20 <HAL_MspInit+0x44>)
 8001df0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001df2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001df6:	607b      	str	r3, [r7, #4]
 8001df8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001dfa:	4b09      	ldr	r3, [pc, #36]	; (8001e20 <HAL_MspInit+0x44>)
 8001dfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dfe:	4a08      	ldr	r2, [pc, #32]	; (8001e20 <HAL_MspInit+0x44>)
 8001e00:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e04:	6453      	str	r3, [r2, #68]	; 0x44
 8001e06:	4b06      	ldr	r3, [pc, #24]	; (8001e20 <HAL_MspInit+0x44>)
 8001e08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e0a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e0e:	603b      	str	r3, [r7, #0]
 8001e10:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001e12:	bf00      	nop
 8001e14:	370c      	adds	r7, #12
 8001e16:	46bd      	mov	sp, r7
 8001e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1c:	4770      	bx	lr
 8001e1e:	bf00      	nop
 8001e20:	40023800 	.word	0x40023800

08001e24 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001e24:	b480      	push	{r7}
 8001e26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001e28:	e7fe      	b.n	8001e28 <NMI_Handler+0x4>

08001e2a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001e2a:	b480      	push	{r7}
 8001e2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001e2e:	e7fe      	b.n	8001e2e <HardFault_Handler+0x4>

08001e30 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001e30:	b480      	push	{r7}
 8001e32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001e34:	e7fe      	b.n	8001e34 <MemManage_Handler+0x4>

08001e36 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001e36:	b480      	push	{r7}
 8001e38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001e3a:	e7fe      	b.n	8001e3a <BusFault_Handler+0x4>

08001e3c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001e3c:	b480      	push	{r7}
 8001e3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001e40:	e7fe      	b.n	8001e40 <UsageFault_Handler+0x4>

08001e42 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001e42:	b480      	push	{r7}
 8001e44:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001e46:	bf00      	nop
 8001e48:	46bd      	mov	sp, r7
 8001e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4e:	4770      	bx	lr

08001e50 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001e50:	b480      	push	{r7}
 8001e52:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001e54:	bf00      	nop
 8001e56:	46bd      	mov	sp, r7
 8001e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5c:	4770      	bx	lr

08001e5e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001e5e:	b480      	push	{r7}
 8001e60:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001e62:	bf00      	nop
 8001e64:	46bd      	mov	sp, r7
 8001e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6a:	4770      	bx	lr

08001e6c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001e70:	f000 fa04 	bl	800227c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001e74:	bf00      	nop
 8001e76:	bd80      	pop	{r7, pc}

08001e78 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001e7c:	4802      	ldr	r0, [pc, #8]	; (8001e88 <USART1_IRQHandler+0x10>)
 8001e7e:	f003 fdcf 	bl	8005a20 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001e82:	bf00      	nop
 8001e84:	bd80      	pop	{r7, pc}
 8001e86:	bf00      	nop
 8001e88:	20009564 	.word	0x20009564

08001e8c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001e8c:	b480      	push	{r7}
 8001e8e:	af00      	add	r7, sp, #0
	return 1;
 8001e90:	2301      	movs	r3, #1
}
 8001e92:	4618      	mov	r0, r3
 8001e94:	46bd      	mov	sp, r7
 8001e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e9a:	4770      	bx	lr

08001e9c <_kill>:

int _kill(int pid, int sig)
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	b082      	sub	sp, #8
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	6078      	str	r0, [r7, #4]
 8001ea4:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001ea6:	f009 fec9 	bl	800bc3c <__errno>
 8001eaa:	4603      	mov	r3, r0
 8001eac:	2216      	movs	r2, #22
 8001eae:	601a      	str	r2, [r3, #0]
	return -1;
 8001eb0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001eb4:	4618      	mov	r0, r3
 8001eb6:	3708      	adds	r7, #8
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	bd80      	pop	{r7, pc}

08001ebc <_exit>:

void _exit (int status)
{
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	b082      	sub	sp, #8
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001ec4:	f04f 31ff 	mov.w	r1, #4294967295
 8001ec8:	6878      	ldr	r0, [r7, #4]
 8001eca:	f7ff ffe7 	bl	8001e9c <_kill>
	while (1) {}		/* Make sure we hang here */
 8001ece:	e7fe      	b.n	8001ece <_exit+0x12>

08001ed0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	b086      	sub	sp, #24
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	60f8      	str	r0, [r7, #12]
 8001ed8:	60b9      	str	r1, [r7, #8]
 8001eda:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001edc:	2300      	movs	r3, #0
 8001ede:	617b      	str	r3, [r7, #20]
 8001ee0:	e00a      	b.n	8001ef8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001ee2:	f3af 8000 	nop.w
 8001ee6:	4601      	mov	r1, r0
 8001ee8:	68bb      	ldr	r3, [r7, #8]
 8001eea:	1c5a      	adds	r2, r3, #1
 8001eec:	60ba      	str	r2, [r7, #8]
 8001eee:	b2ca      	uxtb	r2, r1
 8001ef0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ef2:	697b      	ldr	r3, [r7, #20]
 8001ef4:	3301      	adds	r3, #1
 8001ef6:	617b      	str	r3, [r7, #20]
 8001ef8:	697a      	ldr	r2, [r7, #20]
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	429a      	cmp	r2, r3
 8001efe:	dbf0      	blt.n	8001ee2 <_read+0x12>
	}

return len;
 8001f00:	687b      	ldr	r3, [r7, #4]
}
 8001f02:	4618      	mov	r0, r3
 8001f04:	3718      	adds	r7, #24
 8001f06:	46bd      	mov	sp, r7
 8001f08:	bd80      	pop	{r7, pc}

08001f0a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001f0a:	b580      	push	{r7, lr}
 8001f0c:	b086      	sub	sp, #24
 8001f0e:	af00      	add	r7, sp, #0
 8001f10:	60f8      	str	r0, [r7, #12]
 8001f12:	60b9      	str	r1, [r7, #8]
 8001f14:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f16:	2300      	movs	r3, #0
 8001f18:	617b      	str	r3, [r7, #20]
 8001f1a:	e009      	b.n	8001f30 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001f1c:	68bb      	ldr	r3, [r7, #8]
 8001f1e:	1c5a      	adds	r2, r3, #1
 8001f20:	60ba      	str	r2, [r7, #8]
 8001f22:	781b      	ldrb	r3, [r3, #0]
 8001f24:	4618      	mov	r0, r3
 8001f26:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f2a:	697b      	ldr	r3, [r7, #20]
 8001f2c:	3301      	adds	r3, #1
 8001f2e:	617b      	str	r3, [r7, #20]
 8001f30:	697a      	ldr	r2, [r7, #20]
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	429a      	cmp	r2, r3
 8001f36:	dbf1      	blt.n	8001f1c <_write+0x12>
	}
	return len;
 8001f38:	687b      	ldr	r3, [r7, #4]
}
 8001f3a:	4618      	mov	r0, r3
 8001f3c:	3718      	adds	r7, #24
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	bd80      	pop	{r7, pc}

08001f42 <_close>:

int _close(int file)
{
 8001f42:	b480      	push	{r7}
 8001f44:	b083      	sub	sp, #12
 8001f46:	af00      	add	r7, sp, #0
 8001f48:	6078      	str	r0, [r7, #4]
	return -1;
 8001f4a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001f4e:	4618      	mov	r0, r3
 8001f50:	370c      	adds	r7, #12
 8001f52:	46bd      	mov	sp, r7
 8001f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f58:	4770      	bx	lr

08001f5a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001f5a:	b480      	push	{r7}
 8001f5c:	b083      	sub	sp, #12
 8001f5e:	af00      	add	r7, sp, #0
 8001f60:	6078      	str	r0, [r7, #4]
 8001f62:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001f64:	683b      	ldr	r3, [r7, #0]
 8001f66:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001f6a:	605a      	str	r2, [r3, #4]
	return 0;
 8001f6c:	2300      	movs	r3, #0
}
 8001f6e:	4618      	mov	r0, r3
 8001f70:	370c      	adds	r7, #12
 8001f72:	46bd      	mov	sp, r7
 8001f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f78:	4770      	bx	lr

08001f7a <_isatty>:

int _isatty(int file)
{
 8001f7a:	b480      	push	{r7}
 8001f7c:	b083      	sub	sp, #12
 8001f7e:	af00      	add	r7, sp, #0
 8001f80:	6078      	str	r0, [r7, #4]
	return 1;
 8001f82:	2301      	movs	r3, #1
}
 8001f84:	4618      	mov	r0, r3
 8001f86:	370c      	adds	r7, #12
 8001f88:	46bd      	mov	sp, r7
 8001f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8e:	4770      	bx	lr

08001f90 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001f90:	b480      	push	{r7}
 8001f92:	b085      	sub	sp, #20
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	60f8      	str	r0, [r7, #12]
 8001f98:	60b9      	str	r1, [r7, #8]
 8001f9a:	607a      	str	r2, [r7, #4]
	return 0;
 8001f9c:	2300      	movs	r3, #0
}
 8001f9e:	4618      	mov	r0, r3
 8001fa0:	3714      	adds	r7, #20
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa8:	4770      	bx	lr
	...

08001fac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001fac:	b580      	push	{r7, lr}
 8001fae:	b086      	sub	sp, #24
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001fb4:	4a14      	ldr	r2, [pc, #80]	; (8002008 <_sbrk+0x5c>)
 8001fb6:	4b15      	ldr	r3, [pc, #84]	; (800200c <_sbrk+0x60>)
 8001fb8:	1ad3      	subs	r3, r2, r3
 8001fba:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001fbc:	697b      	ldr	r3, [r7, #20]
 8001fbe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001fc0:	4b13      	ldr	r3, [pc, #76]	; (8002010 <_sbrk+0x64>)
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d102      	bne.n	8001fce <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001fc8:	4b11      	ldr	r3, [pc, #68]	; (8002010 <_sbrk+0x64>)
 8001fca:	4a12      	ldr	r2, [pc, #72]	; (8002014 <_sbrk+0x68>)
 8001fcc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001fce:	4b10      	ldr	r3, [pc, #64]	; (8002010 <_sbrk+0x64>)
 8001fd0:	681a      	ldr	r2, [r3, #0]
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	4413      	add	r3, r2
 8001fd6:	693a      	ldr	r2, [r7, #16]
 8001fd8:	429a      	cmp	r2, r3
 8001fda:	d207      	bcs.n	8001fec <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001fdc:	f009 fe2e 	bl	800bc3c <__errno>
 8001fe0:	4603      	mov	r3, r0
 8001fe2:	220c      	movs	r2, #12
 8001fe4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001fe6:	f04f 33ff 	mov.w	r3, #4294967295
 8001fea:	e009      	b.n	8002000 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001fec:	4b08      	ldr	r3, [pc, #32]	; (8002010 <_sbrk+0x64>)
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001ff2:	4b07      	ldr	r3, [pc, #28]	; (8002010 <_sbrk+0x64>)
 8001ff4:	681a      	ldr	r2, [r3, #0]
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	4413      	add	r3, r2
 8001ffa:	4a05      	ldr	r2, [pc, #20]	; (8002010 <_sbrk+0x64>)
 8001ffc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001ffe:	68fb      	ldr	r3, [r7, #12]
}
 8002000:	4618      	mov	r0, r3
 8002002:	3718      	adds	r7, #24
 8002004:	46bd      	mov	sp, r7
 8002006:	bd80      	pop	{r7, pc}
 8002008:	20050000 	.word	0x20050000
 800200c:	00000400 	.word	0x00000400
 8002010:	20009560 	.word	0x20009560
 8002014:	20009640 	.word	0x20009640

08002018 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002018:	b480      	push	{r7}
 800201a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800201c:	4b06      	ldr	r3, [pc, #24]	; (8002038 <SystemInit+0x20>)
 800201e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002022:	4a05      	ldr	r2, [pc, #20]	; (8002038 <SystemInit+0x20>)
 8002024:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002028:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800202c:	bf00      	nop
 800202e:	46bd      	mov	sp, r7
 8002030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002034:	4770      	bx	lr
 8002036:	bf00      	nop
 8002038:	e000ed00 	.word	0xe000ed00

0800203c <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800203c:	b580      	push	{r7, lr}
 800203e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002040:	4b14      	ldr	r3, [pc, #80]	; (8002094 <MX_USART1_UART_Init+0x58>)
 8002042:	4a15      	ldr	r2, [pc, #84]	; (8002098 <MX_USART1_UART_Init+0x5c>)
 8002044:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002046:	4b13      	ldr	r3, [pc, #76]	; (8002094 <MX_USART1_UART_Init+0x58>)
 8002048:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800204c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800204e:	4b11      	ldr	r3, [pc, #68]	; (8002094 <MX_USART1_UART_Init+0x58>)
 8002050:	2200      	movs	r2, #0
 8002052:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002054:	4b0f      	ldr	r3, [pc, #60]	; (8002094 <MX_USART1_UART_Init+0x58>)
 8002056:	2200      	movs	r2, #0
 8002058:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800205a:	4b0e      	ldr	r3, [pc, #56]	; (8002094 <MX_USART1_UART_Init+0x58>)
 800205c:	2200      	movs	r2, #0
 800205e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002060:	4b0c      	ldr	r3, [pc, #48]	; (8002094 <MX_USART1_UART_Init+0x58>)
 8002062:	220c      	movs	r2, #12
 8002064:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002066:	4b0b      	ldr	r3, [pc, #44]	; (8002094 <MX_USART1_UART_Init+0x58>)
 8002068:	2200      	movs	r2, #0
 800206a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800206c:	4b09      	ldr	r3, [pc, #36]	; (8002094 <MX_USART1_UART_Init+0x58>)
 800206e:	2200      	movs	r2, #0
 8002070:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002072:	4b08      	ldr	r3, [pc, #32]	; (8002094 <MX_USART1_UART_Init+0x58>)
 8002074:	2200      	movs	r2, #0
 8002076:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002078:	4b06      	ldr	r3, [pc, #24]	; (8002094 <MX_USART1_UART_Init+0x58>)
 800207a:	2200      	movs	r2, #0
 800207c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800207e:	4805      	ldr	r0, [pc, #20]	; (8002094 <MX_USART1_UART_Init+0x58>)
 8002080:	f003 fb8a 	bl	8005798 <HAL_UART_Init>
 8002084:	4603      	mov	r3, r0
 8002086:	2b00      	cmp	r3, #0
 8002088:	d001      	beq.n	800208e <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800208a:	f7ff fe97 	bl	8001dbc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800208e:	bf00      	nop
 8002090:	bd80      	pop	{r7, pc}
 8002092:	bf00      	nop
 8002094:	20009564 	.word	0x20009564
 8002098:	40011000 	.word	0x40011000

0800209c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800209c:	b580      	push	{r7, lr}
 800209e:	b0ac      	sub	sp, #176	; 0xb0
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020a4:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80020a8:	2200      	movs	r2, #0
 80020aa:	601a      	str	r2, [r3, #0]
 80020ac:	605a      	str	r2, [r3, #4]
 80020ae:	609a      	str	r2, [r3, #8]
 80020b0:	60da      	str	r2, [r3, #12]
 80020b2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80020b4:	f107 0318 	add.w	r3, r7, #24
 80020b8:	2284      	movs	r2, #132	; 0x84
 80020ba:	2100      	movs	r1, #0
 80020bc:	4618      	mov	r0, r3
 80020be:	f009 fdf5 	bl	800bcac <memset>
  if(uartHandle->Instance==USART1)
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	4a36      	ldr	r2, [pc, #216]	; (80021a0 <HAL_UART_MspInit+0x104>)
 80020c8:	4293      	cmp	r3, r2
 80020ca:	d164      	bne.n	8002196 <HAL_UART_MspInit+0xfa>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80020cc:	2340      	movs	r3, #64	; 0x40
 80020ce:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80020d0:	2300      	movs	r3, #0
 80020d2:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80020d4:	f107 0318 	add.w	r3, r7, #24
 80020d8:	4618      	mov	r0, r3
 80020da:	f002 fb79 	bl	80047d0 <HAL_RCCEx_PeriphCLKConfig>
 80020de:	4603      	mov	r3, r0
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d001      	beq.n	80020e8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80020e4:	f7ff fe6a 	bl	8001dbc <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80020e8:	4b2e      	ldr	r3, [pc, #184]	; (80021a4 <HAL_UART_MspInit+0x108>)
 80020ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020ec:	4a2d      	ldr	r2, [pc, #180]	; (80021a4 <HAL_UART_MspInit+0x108>)
 80020ee:	f043 0310 	orr.w	r3, r3, #16
 80020f2:	6453      	str	r3, [r2, #68]	; 0x44
 80020f4:	4b2b      	ldr	r3, [pc, #172]	; (80021a4 <HAL_UART_MspInit+0x108>)
 80020f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020f8:	f003 0310 	and.w	r3, r3, #16
 80020fc:	617b      	str	r3, [r7, #20]
 80020fe:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002100:	4b28      	ldr	r3, [pc, #160]	; (80021a4 <HAL_UART_MspInit+0x108>)
 8002102:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002104:	4a27      	ldr	r2, [pc, #156]	; (80021a4 <HAL_UART_MspInit+0x108>)
 8002106:	f043 0302 	orr.w	r3, r3, #2
 800210a:	6313      	str	r3, [r2, #48]	; 0x30
 800210c:	4b25      	ldr	r3, [pc, #148]	; (80021a4 <HAL_UART_MspInit+0x108>)
 800210e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002110:	f003 0302 	and.w	r3, r3, #2
 8002114:	613b      	str	r3, [r7, #16]
 8002116:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002118:	4b22      	ldr	r3, [pc, #136]	; (80021a4 <HAL_UART_MspInit+0x108>)
 800211a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800211c:	4a21      	ldr	r2, [pc, #132]	; (80021a4 <HAL_UART_MspInit+0x108>)
 800211e:	f043 0301 	orr.w	r3, r3, #1
 8002122:	6313      	str	r3, [r2, #48]	; 0x30
 8002124:	4b1f      	ldr	r3, [pc, #124]	; (80021a4 <HAL_UART_MspInit+0x108>)
 8002126:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002128:	f003 0301 	and.w	r3, r3, #1
 800212c:	60fb      	str	r3, [r7, #12]
 800212e:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002130:	2380      	movs	r3, #128	; 0x80
 8002132:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002136:	2302      	movs	r3, #2
 8002138:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800213c:	2300      	movs	r3, #0
 800213e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002142:	2303      	movs	r3, #3
 8002144:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002148:	2307      	movs	r3, #7
 800214a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800214e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002152:	4619      	mov	r1, r3
 8002154:	4814      	ldr	r0, [pc, #80]	; (80021a8 <HAL_UART_MspInit+0x10c>)
 8002156:	f000 faa7 	bl	80026a8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800215a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800215e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002162:	2302      	movs	r3, #2
 8002164:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002168:	2300      	movs	r3, #0
 800216a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800216e:	2303      	movs	r3, #3
 8002170:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002174:	2307      	movs	r3, #7
 8002176:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800217a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800217e:	4619      	mov	r1, r3
 8002180:	480a      	ldr	r0, [pc, #40]	; (80021ac <HAL_UART_MspInit+0x110>)
 8002182:	f000 fa91 	bl	80026a8 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002186:	2200      	movs	r2, #0
 8002188:	2100      	movs	r1, #0
 800218a:	2025      	movs	r0, #37	; 0x25
 800218c:	f000 f9aa 	bl	80024e4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002190:	2025      	movs	r0, #37	; 0x25
 8002192:	f000 f9d3 	bl	800253c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8002196:	bf00      	nop
 8002198:	37b0      	adds	r7, #176	; 0xb0
 800219a:	46bd      	mov	sp, r7
 800219c:	bd80      	pop	{r7, pc}
 800219e:	bf00      	nop
 80021a0:	40011000 	.word	0x40011000
 80021a4:	40023800 	.word	0x40023800
 80021a8:	40020400 	.word	0x40020400
 80021ac:	40020000 	.word	0x40020000

080021b0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80021b0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80021e8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80021b4:	480d      	ldr	r0, [pc, #52]	; (80021ec <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80021b6:	490e      	ldr	r1, [pc, #56]	; (80021f0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80021b8:	4a0e      	ldr	r2, [pc, #56]	; (80021f4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80021ba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80021bc:	e002      	b.n	80021c4 <LoopCopyDataInit>

080021be <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80021be:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80021c0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80021c2:	3304      	adds	r3, #4

080021c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80021c4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80021c6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80021c8:	d3f9      	bcc.n	80021be <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80021ca:	4a0b      	ldr	r2, [pc, #44]	; (80021f8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80021cc:	4c0b      	ldr	r4, [pc, #44]	; (80021fc <LoopFillZerobss+0x26>)
  movs r3, #0
 80021ce:	2300      	movs	r3, #0
  b LoopFillZerobss
 80021d0:	e001      	b.n	80021d6 <LoopFillZerobss>

080021d2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80021d2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80021d4:	3204      	adds	r2, #4

080021d6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80021d6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80021d8:	d3fb      	bcc.n	80021d2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80021da:	f7ff ff1d 	bl	8002018 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80021de:	f009 fd33 	bl	800bc48 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80021e2:	f7ff f9f1 	bl	80015c8 <main>
  bx  lr    
 80021e6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80021e8:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 80021ec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80021f0:	20009124 	.word	0x20009124
  ldr r2, =_sidata
 80021f4:	0800f074 	.word	0x0800f074
  ldr r2, =_sbss
 80021f8:	20009124 	.word	0x20009124
  ldr r4, =_ebss
 80021fc:	20009640 	.word	0x20009640

08002200 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002200:	e7fe      	b.n	8002200 <ADC_IRQHandler>

08002202 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002202:	b580      	push	{r7, lr}
 8002204:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002206:	2003      	movs	r0, #3
 8002208:	f000 f94c 	bl	80024a4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800220c:	200f      	movs	r0, #15
 800220e:	f000 f805 	bl	800221c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002212:	f7ff fde3 	bl	8001ddc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002216:	2300      	movs	r3, #0
}
 8002218:	4618      	mov	r0, r3
 800221a:	bd80      	pop	{r7, pc}

0800221c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800221c:	b580      	push	{r7, lr}
 800221e:	b082      	sub	sp, #8
 8002220:	af00      	add	r7, sp, #0
 8002222:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002224:	4b12      	ldr	r3, [pc, #72]	; (8002270 <HAL_InitTick+0x54>)
 8002226:	681a      	ldr	r2, [r3, #0]
 8002228:	4b12      	ldr	r3, [pc, #72]	; (8002274 <HAL_InitTick+0x58>)
 800222a:	781b      	ldrb	r3, [r3, #0]
 800222c:	4619      	mov	r1, r3
 800222e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002232:	fbb3 f3f1 	udiv	r3, r3, r1
 8002236:	fbb2 f3f3 	udiv	r3, r2, r3
 800223a:	4618      	mov	r0, r3
 800223c:	f000 f996 	bl	800256c <HAL_SYSTICK_Config>
 8002240:	4603      	mov	r3, r0
 8002242:	2b00      	cmp	r3, #0
 8002244:	d001      	beq.n	800224a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002246:	2301      	movs	r3, #1
 8002248:	e00e      	b.n	8002268 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	2b0f      	cmp	r3, #15
 800224e:	d80a      	bhi.n	8002266 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002250:	2200      	movs	r2, #0
 8002252:	6879      	ldr	r1, [r7, #4]
 8002254:	f04f 30ff 	mov.w	r0, #4294967295
 8002258:	f000 f944 	bl	80024e4 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800225c:	4a06      	ldr	r2, [pc, #24]	; (8002278 <HAL_InitTick+0x5c>)
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002262:	2300      	movs	r3, #0
 8002264:	e000      	b.n	8002268 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002266:	2301      	movs	r3, #1
}
 8002268:	4618      	mov	r0, r3
 800226a:	3708      	adds	r7, #8
 800226c:	46bd      	mov	sp, r7
 800226e:	bd80      	pop	{r7, pc}
 8002270:	20008c8c 	.word	0x20008c8c
 8002274:	20008c94 	.word	0x20008c94
 8002278:	20008c90 	.word	0x20008c90

0800227c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800227c:	b480      	push	{r7}
 800227e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002280:	4b06      	ldr	r3, [pc, #24]	; (800229c <HAL_IncTick+0x20>)
 8002282:	781b      	ldrb	r3, [r3, #0]
 8002284:	461a      	mov	r2, r3
 8002286:	4b06      	ldr	r3, [pc, #24]	; (80022a0 <HAL_IncTick+0x24>)
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	4413      	add	r3, r2
 800228c:	4a04      	ldr	r2, [pc, #16]	; (80022a0 <HAL_IncTick+0x24>)
 800228e:	6013      	str	r3, [r2, #0]
}
 8002290:	bf00      	nop
 8002292:	46bd      	mov	sp, r7
 8002294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002298:	4770      	bx	lr
 800229a:	bf00      	nop
 800229c:	20008c94 	.word	0x20008c94
 80022a0:	200095ec 	.word	0x200095ec

080022a4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80022a4:	b480      	push	{r7}
 80022a6:	af00      	add	r7, sp, #0
  return uwTick;
 80022a8:	4b03      	ldr	r3, [pc, #12]	; (80022b8 <HAL_GetTick+0x14>)
 80022aa:	681b      	ldr	r3, [r3, #0]
}
 80022ac:	4618      	mov	r0, r3
 80022ae:	46bd      	mov	sp, r7
 80022b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b4:	4770      	bx	lr
 80022b6:	bf00      	nop
 80022b8:	200095ec 	.word	0x200095ec

080022bc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80022bc:	b580      	push	{r7, lr}
 80022be:	b084      	sub	sp, #16
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80022c4:	f7ff ffee 	bl	80022a4 <HAL_GetTick>
 80022c8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022d4:	d005      	beq.n	80022e2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80022d6:	4b0a      	ldr	r3, [pc, #40]	; (8002300 <HAL_Delay+0x44>)
 80022d8:	781b      	ldrb	r3, [r3, #0]
 80022da:	461a      	mov	r2, r3
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	4413      	add	r3, r2
 80022e0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80022e2:	bf00      	nop
 80022e4:	f7ff ffde 	bl	80022a4 <HAL_GetTick>
 80022e8:	4602      	mov	r2, r0
 80022ea:	68bb      	ldr	r3, [r7, #8]
 80022ec:	1ad3      	subs	r3, r2, r3
 80022ee:	68fa      	ldr	r2, [r7, #12]
 80022f0:	429a      	cmp	r2, r3
 80022f2:	d8f7      	bhi.n	80022e4 <HAL_Delay+0x28>
  {
  }
}
 80022f4:	bf00      	nop
 80022f6:	bf00      	nop
 80022f8:	3710      	adds	r7, #16
 80022fa:	46bd      	mov	sp, r7
 80022fc:	bd80      	pop	{r7, pc}
 80022fe:	bf00      	nop
 8002300:	20008c94 	.word	0x20008c94

08002304 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002304:	b480      	push	{r7}
 8002306:	b085      	sub	sp, #20
 8002308:	af00      	add	r7, sp, #0
 800230a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	f003 0307 	and.w	r3, r3, #7
 8002312:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002314:	4b0b      	ldr	r3, [pc, #44]	; (8002344 <__NVIC_SetPriorityGrouping+0x40>)
 8002316:	68db      	ldr	r3, [r3, #12]
 8002318:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800231a:	68ba      	ldr	r2, [r7, #8]
 800231c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002320:	4013      	ands	r3, r2
 8002322:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002328:	68bb      	ldr	r3, [r7, #8]
 800232a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800232c:	4b06      	ldr	r3, [pc, #24]	; (8002348 <__NVIC_SetPriorityGrouping+0x44>)
 800232e:	4313      	orrs	r3, r2
 8002330:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002332:	4a04      	ldr	r2, [pc, #16]	; (8002344 <__NVIC_SetPriorityGrouping+0x40>)
 8002334:	68bb      	ldr	r3, [r7, #8]
 8002336:	60d3      	str	r3, [r2, #12]
}
 8002338:	bf00      	nop
 800233a:	3714      	adds	r7, #20
 800233c:	46bd      	mov	sp, r7
 800233e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002342:	4770      	bx	lr
 8002344:	e000ed00 	.word	0xe000ed00
 8002348:	05fa0000 	.word	0x05fa0000

0800234c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800234c:	b480      	push	{r7}
 800234e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002350:	4b04      	ldr	r3, [pc, #16]	; (8002364 <__NVIC_GetPriorityGrouping+0x18>)
 8002352:	68db      	ldr	r3, [r3, #12]
 8002354:	0a1b      	lsrs	r3, r3, #8
 8002356:	f003 0307 	and.w	r3, r3, #7
}
 800235a:	4618      	mov	r0, r3
 800235c:	46bd      	mov	sp, r7
 800235e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002362:	4770      	bx	lr
 8002364:	e000ed00 	.word	0xe000ed00

08002368 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002368:	b480      	push	{r7}
 800236a:	b083      	sub	sp, #12
 800236c:	af00      	add	r7, sp, #0
 800236e:	4603      	mov	r3, r0
 8002370:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002372:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002376:	2b00      	cmp	r3, #0
 8002378:	db0b      	blt.n	8002392 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800237a:	79fb      	ldrb	r3, [r7, #7]
 800237c:	f003 021f 	and.w	r2, r3, #31
 8002380:	4907      	ldr	r1, [pc, #28]	; (80023a0 <__NVIC_EnableIRQ+0x38>)
 8002382:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002386:	095b      	lsrs	r3, r3, #5
 8002388:	2001      	movs	r0, #1
 800238a:	fa00 f202 	lsl.w	r2, r0, r2
 800238e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002392:	bf00      	nop
 8002394:	370c      	adds	r7, #12
 8002396:	46bd      	mov	sp, r7
 8002398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800239c:	4770      	bx	lr
 800239e:	bf00      	nop
 80023a0:	e000e100 	.word	0xe000e100

080023a4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80023a4:	b480      	push	{r7}
 80023a6:	b083      	sub	sp, #12
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	4603      	mov	r3, r0
 80023ac:	6039      	str	r1, [r7, #0]
 80023ae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	db0a      	blt.n	80023ce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023b8:	683b      	ldr	r3, [r7, #0]
 80023ba:	b2da      	uxtb	r2, r3
 80023bc:	490c      	ldr	r1, [pc, #48]	; (80023f0 <__NVIC_SetPriority+0x4c>)
 80023be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023c2:	0112      	lsls	r2, r2, #4
 80023c4:	b2d2      	uxtb	r2, r2
 80023c6:	440b      	add	r3, r1
 80023c8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80023cc:	e00a      	b.n	80023e4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023ce:	683b      	ldr	r3, [r7, #0]
 80023d0:	b2da      	uxtb	r2, r3
 80023d2:	4908      	ldr	r1, [pc, #32]	; (80023f4 <__NVIC_SetPriority+0x50>)
 80023d4:	79fb      	ldrb	r3, [r7, #7]
 80023d6:	f003 030f 	and.w	r3, r3, #15
 80023da:	3b04      	subs	r3, #4
 80023dc:	0112      	lsls	r2, r2, #4
 80023de:	b2d2      	uxtb	r2, r2
 80023e0:	440b      	add	r3, r1
 80023e2:	761a      	strb	r2, [r3, #24]
}
 80023e4:	bf00      	nop
 80023e6:	370c      	adds	r7, #12
 80023e8:	46bd      	mov	sp, r7
 80023ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ee:	4770      	bx	lr
 80023f0:	e000e100 	.word	0xe000e100
 80023f4:	e000ed00 	.word	0xe000ed00

080023f8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80023f8:	b480      	push	{r7}
 80023fa:	b089      	sub	sp, #36	; 0x24
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	60f8      	str	r0, [r7, #12]
 8002400:	60b9      	str	r1, [r7, #8]
 8002402:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	f003 0307 	and.w	r3, r3, #7
 800240a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800240c:	69fb      	ldr	r3, [r7, #28]
 800240e:	f1c3 0307 	rsb	r3, r3, #7
 8002412:	2b04      	cmp	r3, #4
 8002414:	bf28      	it	cs
 8002416:	2304      	movcs	r3, #4
 8002418:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800241a:	69fb      	ldr	r3, [r7, #28]
 800241c:	3304      	adds	r3, #4
 800241e:	2b06      	cmp	r3, #6
 8002420:	d902      	bls.n	8002428 <NVIC_EncodePriority+0x30>
 8002422:	69fb      	ldr	r3, [r7, #28]
 8002424:	3b03      	subs	r3, #3
 8002426:	e000      	b.n	800242a <NVIC_EncodePriority+0x32>
 8002428:	2300      	movs	r3, #0
 800242a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800242c:	f04f 32ff 	mov.w	r2, #4294967295
 8002430:	69bb      	ldr	r3, [r7, #24]
 8002432:	fa02 f303 	lsl.w	r3, r2, r3
 8002436:	43da      	mvns	r2, r3
 8002438:	68bb      	ldr	r3, [r7, #8]
 800243a:	401a      	ands	r2, r3
 800243c:	697b      	ldr	r3, [r7, #20]
 800243e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002440:	f04f 31ff 	mov.w	r1, #4294967295
 8002444:	697b      	ldr	r3, [r7, #20]
 8002446:	fa01 f303 	lsl.w	r3, r1, r3
 800244a:	43d9      	mvns	r1, r3
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002450:	4313      	orrs	r3, r2
         );
}
 8002452:	4618      	mov	r0, r3
 8002454:	3724      	adds	r7, #36	; 0x24
 8002456:	46bd      	mov	sp, r7
 8002458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800245c:	4770      	bx	lr
	...

08002460 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002460:	b580      	push	{r7, lr}
 8002462:	b082      	sub	sp, #8
 8002464:	af00      	add	r7, sp, #0
 8002466:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	3b01      	subs	r3, #1
 800246c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002470:	d301      	bcc.n	8002476 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002472:	2301      	movs	r3, #1
 8002474:	e00f      	b.n	8002496 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002476:	4a0a      	ldr	r2, [pc, #40]	; (80024a0 <SysTick_Config+0x40>)
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	3b01      	subs	r3, #1
 800247c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800247e:	210f      	movs	r1, #15
 8002480:	f04f 30ff 	mov.w	r0, #4294967295
 8002484:	f7ff ff8e 	bl	80023a4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002488:	4b05      	ldr	r3, [pc, #20]	; (80024a0 <SysTick_Config+0x40>)
 800248a:	2200      	movs	r2, #0
 800248c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800248e:	4b04      	ldr	r3, [pc, #16]	; (80024a0 <SysTick_Config+0x40>)
 8002490:	2207      	movs	r2, #7
 8002492:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002494:	2300      	movs	r3, #0
}
 8002496:	4618      	mov	r0, r3
 8002498:	3708      	adds	r7, #8
 800249a:	46bd      	mov	sp, r7
 800249c:	bd80      	pop	{r7, pc}
 800249e:	bf00      	nop
 80024a0:	e000e010 	.word	0xe000e010

080024a4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80024a4:	b580      	push	{r7, lr}
 80024a6:	b082      	sub	sp, #8
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	2b07      	cmp	r3, #7
 80024b0:	d00f      	beq.n	80024d2 <HAL_NVIC_SetPriorityGrouping+0x2e>
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	2b06      	cmp	r3, #6
 80024b6:	d00c      	beq.n	80024d2 <HAL_NVIC_SetPriorityGrouping+0x2e>
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	2b05      	cmp	r3, #5
 80024bc:	d009      	beq.n	80024d2 <HAL_NVIC_SetPriorityGrouping+0x2e>
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	2b04      	cmp	r3, #4
 80024c2:	d006      	beq.n	80024d2 <HAL_NVIC_SetPriorityGrouping+0x2e>
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	2b03      	cmp	r3, #3
 80024c8:	d003      	beq.n	80024d2 <HAL_NVIC_SetPriorityGrouping+0x2e>
 80024ca:	2191      	movs	r1, #145	; 0x91
 80024cc:	4804      	ldr	r0, [pc, #16]	; (80024e0 <HAL_NVIC_SetPriorityGrouping+0x3c>)
 80024ce:	f7ff fc7a 	bl	8001dc6 <assert_failed>
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80024d2:	6878      	ldr	r0, [r7, #4]
 80024d4:	f7ff ff16 	bl	8002304 <__NVIC_SetPriorityGrouping>
}
 80024d8:	bf00      	nop
 80024da:	3708      	adds	r7, #8
 80024dc:	46bd      	mov	sp, r7
 80024de:	bd80      	pop	{r7, pc}
 80024e0:	0800ead8 	.word	0x0800ead8

080024e4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80024e4:	b580      	push	{r7, lr}
 80024e6:	b086      	sub	sp, #24
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	4603      	mov	r3, r0
 80024ec:	60b9      	str	r1, [r7, #8]
 80024ee:	607a      	str	r2, [r7, #4]
 80024f0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80024f2:	2300      	movs	r3, #0
 80024f4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	2b0f      	cmp	r3, #15
 80024fa:	d903      	bls.n	8002504 <HAL_NVIC_SetPriority+0x20>
 80024fc:	21a9      	movs	r1, #169	; 0xa9
 80024fe:	480e      	ldr	r0, [pc, #56]	; (8002538 <HAL_NVIC_SetPriority+0x54>)
 8002500:	f7ff fc61 	bl	8001dc6 <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 8002504:	68bb      	ldr	r3, [r7, #8]
 8002506:	2b0f      	cmp	r3, #15
 8002508:	d903      	bls.n	8002512 <HAL_NVIC_SetPriority+0x2e>
 800250a:	21aa      	movs	r1, #170	; 0xaa
 800250c:	480a      	ldr	r0, [pc, #40]	; (8002538 <HAL_NVIC_SetPriority+0x54>)
 800250e:	f7ff fc5a 	bl	8001dc6 <assert_failed>
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002512:	f7ff ff1b 	bl	800234c <__NVIC_GetPriorityGrouping>
 8002516:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002518:	687a      	ldr	r2, [r7, #4]
 800251a:	68b9      	ldr	r1, [r7, #8]
 800251c:	6978      	ldr	r0, [r7, #20]
 800251e:	f7ff ff6b 	bl	80023f8 <NVIC_EncodePriority>
 8002522:	4602      	mov	r2, r0
 8002524:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002528:	4611      	mov	r1, r2
 800252a:	4618      	mov	r0, r3
 800252c:	f7ff ff3a 	bl	80023a4 <__NVIC_SetPriority>
}
 8002530:	bf00      	nop
 8002532:	3718      	adds	r7, #24
 8002534:	46bd      	mov	sp, r7
 8002536:	bd80      	pop	{r7, pc}
 8002538:	0800ead8 	.word	0x0800ead8

0800253c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800253c:	b580      	push	{r7, lr}
 800253e:	b082      	sub	sp, #8
 8002540:	af00      	add	r7, sp, #0
 8002542:	4603      	mov	r3, r0
 8002544:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 8002546:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800254a:	2b00      	cmp	r3, #0
 800254c:	da03      	bge.n	8002556 <HAL_NVIC_EnableIRQ+0x1a>
 800254e:	21bd      	movs	r1, #189	; 0xbd
 8002550:	4805      	ldr	r0, [pc, #20]	; (8002568 <HAL_NVIC_EnableIRQ+0x2c>)
 8002552:	f7ff fc38 	bl	8001dc6 <assert_failed>
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002556:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800255a:	4618      	mov	r0, r3
 800255c:	f7ff ff04 	bl	8002368 <__NVIC_EnableIRQ>
}
 8002560:	bf00      	nop
 8002562:	3708      	adds	r7, #8
 8002564:	46bd      	mov	sp, r7
 8002566:	bd80      	pop	{r7, pc}
 8002568:	0800ead8 	.word	0x0800ead8

0800256c <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800256c:	b580      	push	{r7, lr}
 800256e:	b082      	sub	sp, #8
 8002570:	af00      	add	r7, sp, #0
 8002572:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002574:	6878      	ldr	r0, [r7, #4]
 8002576:	f7ff ff73 	bl	8002460 <SysTick_Config>
 800257a:	4603      	mov	r3, r0
}
 800257c:	4618      	mov	r0, r3
 800257e:	3708      	adds	r7, #8
 8002580:	46bd      	mov	sp, r7
 8002582:	bd80      	pop	{r7, pc}

08002584 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002584:	b580      	push	{r7, lr}
 8002586:	b084      	sub	sp, #16
 8002588:	af00      	add	r7, sp, #0
 800258a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002590:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002592:	f7ff fe87 	bl	80022a4 <HAL_GetTick>
 8002596:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800259e:	b2db      	uxtb	r3, r3
 80025a0:	2b02      	cmp	r3, #2
 80025a2:	d008      	beq.n	80025b6 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	2280      	movs	r2, #128	; 0x80
 80025a8:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	2200      	movs	r2, #0
 80025ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80025b2:	2301      	movs	r3, #1
 80025b4:	e052      	b.n	800265c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	681a      	ldr	r2, [r3, #0]
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f022 0216 	bic.w	r2, r2, #22
 80025c4:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	695a      	ldr	r2, [r3, #20]
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80025d4:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d103      	bne.n	80025e6 <HAL_DMA_Abort+0x62>
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d007      	beq.n	80025f6 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	681a      	ldr	r2, [r3, #0]
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	f022 0208 	bic.w	r2, r2, #8
 80025f4:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	681a      	ldr	r2, [r3, #0]
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f022 0201 	bic.w	r2, r2, #1
 8002604:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002606:	e013      	b.n	8002630 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002608:	f7ff fe4c 	bl	80022a4 <HAL_GetTick>
 800260c:	4602      	mov	r2, r0
 800260e:	68bb      	ldr	r3, [r7, #8]
 8002610:	1ad3      	subs	r3, r2, r3
 8002612:	2b05      	cmp	r3, #5
 8002614:	d90c      	bls.n	8002630 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	2220      	movs	r2, #32
 800261a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	2203      	movs	r2, #3
 8002620:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	2200      	movs	r2, #0
 8002628:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 800262c:	2303      	movs	r3, #3
 800262e:	e015      	b.n	800265c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	f003 0301 	and.w	r3, r3, #1
 800263a:	2b00      	cmp	r3, #0
 800263c:	d1e4      	bne.n	8002608 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002642:	223f      	movs	r2, #63	; 0x3f
 8002644:	409a      	lsls	r2, r3
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	2201      	movs	r2, #1
 800264e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	2200      	movs	r2, #0
 8002656:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 800265a:	2300      	movs	r3, #0
}
 800265c:	4618      	mov	r0, r3
 800265e:	3710      	adds	r7, #16
 8002660:	46bd      	mov	sp, r7
 8002662:	bd80      	pop	{r7, pc}

08002664 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002664:	b480      	push	{r7}
 8002666:	b083      	sub	sp, #12
 8002668:	af00      	add	r7, sp, #0
 800266a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002672:	b2db      	uxtb	r3, r3
 8002674:	2b02      	cmp	r3, #2
 8002676:	d004      	beq.n	8002682 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	2280      	movs	r2, #128	; 0x80
 800267c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800267e:	2301      	movs	r3, #1
 8002680:	e00c      	b.n	800269c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	2205      	movs	r2, #5
 8002686:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	681a      	ldr	r2, [r3, #0]
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	f022 0201 	bic.w	r2, r2, #1
 8002698:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800269a:	2300      	movs	r3, #0
}
 800269c:	4618      	mov	r0, r3
 800269e:	370c      	adds	r7, #12
 80026a0:	46bd      	mov	sp, r7
 80026a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a6:	4770      	bx	lr

080026a8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80026a8:	b580      	push	{r7, lr}
 80026aa:	b088      	sub	sp, #32
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	6078      	str	r0, [r7, #4]
 80026b0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80026b2:	2300      	movs	r3, #0
 80026b4:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80026b6:	2300      	movs	r3, #0
 80026b8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80026ba:	2300      	movs	r3, #0
 80026bc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80026be:	2300      	movs	r3, #0
 80026c0:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	4a3a      	ldr	r2, [pc, #232]	; (80027b0 <HAL_GPIO_Init+0x108>)
 80026c6:	4293      	cmp	r3, r2
 80026c8:	d02b      	beq.n	8002722 <HAL_GPIO_Init+0x7a>
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	4a39      	ldr	r2, [pc, #228]	; (80027b4 <HAL_GPIO_Init+0x10c>)
 80026ce:	4293      	cmp	r3, r2
 80026d0:	d027      	beq.n	8002722 <HAL_GPIO_Init+0x7a>
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	4a38      	ldr	r2, [pc, #224]	; (80027b8 <HAL_GPIO_Init+0x110>)
 80026d6:	4293      	cmp	r3, r2
 80026d8:	d023      	beq.n	8002722 <HAL_GPIO_Init+0x7a>
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	4a37      	ldr	r2, [pc, #220]	; (80027bc <HAL_GPIO_Init+0x114>)
 80026de:	4293      	cmp	r3, r2
 80026e0:	d01f      	beq.n	8002722 <HAL_GPIO_Init+0x7a>
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	4a36      	ldr	r2, [pc, #216]	; (80027c0 <HAL_GPIO_Init+0x118>)
 80026e6:	4293      	cmp	r3, r2
 80026e8:	d01b      	beq.n	8002722 <HAL_GPIO_Init+0x7a>
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	4a35      	ldr	r2, [pc, #212]	; (80027c4 <HAL_GPIO_Init+0x11c>)
 80026ee:	4293      	cmp	r3, r2
 80026f0:	d017      	beq.n	8002722 <HAL_GPIO_Init+0x7a>
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	4a34      	ldr	r2, [pc, #208]	; (80027c8 <HAL_GPIO_Init+0x120>)
 80026f6:	4293      	cmp	r3, r2
 80026f8:	d013      	beq.n	8002722 <HAL_GPIO_Init+0x7a>
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	4a33      	ldr	r2, [pc, #204]	; (80027cc <HAL_GPIO_Init+0x124>)
 80026fe:	4293      	cmp	r3, r2
 8002700:	d00f      	beq.n	8002722 <HAL_GPIO_Init+0x7a>
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	4a32      	ldr	r2, [pc, #200]	; (80027d0 <HAL_GPIO_Init+0x128>)
 8002706:	4293      	cmp	r3, r2
 8002708:	d00b      	beq.n	8002722 <HAL_GPIO_Init+0x7a>
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	4a31      	ldr	r2, [pc, #196]	; (80027d4 <HAL_GPIO_Init+0x12c>)
 800270e:	4293      	cmp	r3, r2
 8002710:	d007      	beq.n	8002722 <HAL_GPIO_Init+0x7a>
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	4a30      	ldr	r2, [pc, #192]	; (80027d8 <HAL_GPIO_Init+0x130>)
 8002716:	4293      	cmp	r3, r2
 8002718:	d003      	beq.n	8002722 <HAL_GPIO_Init+0x7a>
 800271a:	21aa      	movs	r1, #170	; 0xaa
 800271c:	482f      	ldr	r0, [pc, #188]	; (80027dc <HAL_GPIO_Init+0x134>)
 800271e:	f7ff fb52 	bl	8001dc6 <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 8002722:	683b      	ldr	r3, [r7, #0]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	b29b      	uxth	r3, r3
 8002728:	2b00      	cmp	r3, #0
 800272a:	d103      	bne.n	8002734 <HAL_GPIO_Init+0x8c>
 800272c:	21ab      	movs	r1, #171	; 0xab
 800272e:	482b      	ldr	r0, [pc, #172]	; (80027dc <HAL_GPIO_Init+0x134>)
 8002730:	f7ff fb49 	bl	8001dc6 <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 8002734:	683b      	ldr	r3, [r7, #0]
 8002736:	685b      	ldr	r3, [r3, #4]
 8002738:	2b00      	cmp	r3, #0
 800273a:	d035      	beq.n	80027a8 <HAL_GPIO_Init+0x100>
 800273c:	683b      	ldr	r3, [r7, #0]
 800273e:	685b      	ldr	r3, [r3, #4]
 8002740:	2b01      	cmp	r3, #1
 8002742:	d031      	beq.n	80027a8 <HAL_GPIO_Init+0x100>
 8002744:	683b      	ldr	r3, [r7, #0]
 8002746:	685b      	ldr	r3, [r3, #4]
 8002748:	2b11      	cmp	r3, #17
 800274a:	d02d      	beq.n	80027a8 <HAL_GPIO_Init+0x100>
 800274c:	683b      	ldr	r3, [r7, #0]
 800274e:	685b      	ldr	r3, [r3, #4]
 8002750:	2b02      	cmp	r3, #2
 8002752:	d029      	beq.n	80027a8 <HAL_GPIO_Init+0x100>
 8002754:	683b      	ldr	r3, [r7, #0]
 8002756:	685b      	ldr	r3, [r3, #4]
 8002758:	2b12      	cmp	r3, #18
 800275a:	d025      	beq.n	80027a8 <HAL_GPIO_Init+0x100>
 800275c:	683b      	ldr	r3, [r7, #0]
 800275e:	685b      	ldr	r3, [r3, #4]
 8002760:	f5b3 1f88 	cmp.w	r3, #1114112	; 0x110000
 8002764:	d020      	beq.n	80027a8 <HAL_GPIO_Init+0x100>
 8002766:	683b      	ldr	r3, [r7, #0]
 8002768:	685b      	ldr	r3, [r3, #4]
 800276a:	f5b3 1f04 	cmp.w	r3, #2162688	; 0x210000
 800276e:	d01b      	beq.n	80027a8 <HAL_GPIO_Init+0x100>
 8002770:	683b      	ldr	r3, [r7, #0]
 8002772:	685b      	ldr	r3, [r3, #4]
 8002774:	f5b3 1f44 	cmp.w	r3, #3211264	; 0x310000
 8002778:	d016      	beq.n	80027a8 <HAL_GPIO_Init+0x100>
 800277a:	683b      	ldr	r3, [r7, #0]
 800277c:	685b      	ldr	r3, [r3, #4]
 800277e:	f5b3 1f90 	cmp.w	r3, #1179648	; 0x120000
 8002782:	d011      	beq.n	80027a8 <HAL_GPIO_Init+0x100>
 8002784:	683b      	ldr	r3, [r7, #0]
 8002786:	685b      	ldr	r3, [r3, #4]
 8002788:	f5b3 1f08 	cmp.w	r3, #2228224	; 0x220000
 800278c:	d00c      	beq.n	80027a8 <HAL_GPIO_Init+0x100>
 800278e:	683b      	ldr	r3, [r7, #0]
 8002790:	685b      	ldr	r3, [r3, #4]
 8002792:	f5b3 1f48 	cmp.w	r3, #3276800	; 0x320000
 8002796:	d007      	beq.n	80027a8 <HAL_GPIO_Init+0x100>
 8002798:	683b      	ldr	r3, [r7, #0]
 800279a:	685b      	ldr	r3, [r3, #4]
 800279c:	2b03      	cmp	r3, #3
 800279e:	d003      	beq.n	80027a8 <HAL_GPIO_Init+0x100>
 80027a0:	21ac      	movs	r1, #172	; 0xac
 80027a2:	480e      	ldr	r0, [pc, #56]	; (80027dc <HAL_GPIO_Init+0x134>)
 80027a4:	f7ff fb0f 	bl	8001dc6 <assert_failed>

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80027a8:	2300      	movs	r3, #0
 80027aa:	61fb      	str	r3, [r7, #28]
 80027ac:	e2c7      	b.n	8002d3e <HAL_GPIO_Init+0x696>
 80027ae:	bf00      	nop
 80027b0:	40020000 	.word	0x40020000
 80027b4:	40020400 	.word	0x40020400
 80027b8:	40020800 	.word	0x40020800
 80027bc:	40020c00 	.word	0x40020c00
 80027c0:	40021000 	.word	0x40021000
 80027c4:	40021400 	.word	0x40021400
 80027c8:	40021800 	.word	0x40021800
 80027cc:	40021c00 	.word	0x40021c00
 80027d0:	40022000 	.word	0x40022000
 80027d4:	40022400 	.word	0x40022400
 80027d8:	40022800 	.word	0x40022800
 80027dc:	0800eb14 	.word	0x0800eb14
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80027e0:	2201      	movs	r2, #1
 80027e2:	69fb      	ldr	r3, [r7, #28]
 80027e4:	fa02 f303 	lsl.w	r3, r2, r3
 80027e8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80027ea:	683b      	ldr	r3, [r7, #0]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	697a      	ldr	r2, [r7, #20]
 80027f0:	4013      	ands	r3, r2
 80027f2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80027f4:	693a      	ldr	r2, [r7, #16]
 80027f6:	697b      	ldr	r3, [r7, #20]
 80027f8:	429a      	cmp	r2, r3
 80027fa:	f040 829d 	bne.w	8002d38 <HAL_GPIO_Init+0x690>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80027fe:	683b      	ldr	r3, [r7, #0]
 8002800:	685b      	ldr	r3, [r3, #4]
 8002802:	f003 0303 	and.w	r3, r3, #3
 8002806:	2b01      	cmp	r3, #1
 8002808:	d005      	beq.n	8002816 <HAL_GPIO_Init+0x16e>
 800280a:	683b      	ldr	r3, [r7, #0]
 800280c:	685b      	ldr	r3, [r3, #4]
 800280e:	f003 0303 	and.w	r3, r3, #3
 8002812:	2b02      	cmp	r3, #2
 8002814:	d144      	bne.n	80028a0 <HAL_GPIO_Init+0x1f8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8002816:	683b      	ldr	r3, [r7, #0]
 8002818:	68db      	ldr	r3, [r3, #12]
 800281a:	2b00      	cmp	r3, #0
 800281c:	d00f      	beq.n	800283e <HAL_GPIO_Init+0x196>
 800281e:	683b      	ldr	r3, [r7, #0]
 8002820:	68db      	ldr	r3, [r3, #12]
 8002822:	2b01      	cmp	r3, #1
 8002824:	d00b      	beq.n	800283e <HAL_GPIO_Init+0x196>
 8002826:	683b      	ldr	r3, [r7, #0]
 8002828:	68db      	ldr	r3, [r3, #12]
 800282a:	2b02      	cmp	r3, #2
 800282c:	d007      	beq.n	800283e <HAL_GPIO_Init+0x196>
 800282e:	683b      	ldr	r3, [r7, #0]
 8002830:	68db      	ldr	r3, [r3, #12]
 8002832:	2b03      	cmp	r3, #3
 8002834:	d003      	beq.n	800283e <HAL_GPIO_Init+0x196>
 8002836:	21bd      	movs	r1, #189	; 0xbd
 8002838:	4831      	ldr	r0, [pc, #196]	; (8002900 <HAL_GPIO_Init+0x258>)
 800283a:	f7ff fac4 	bl	8001dc6 <assert_failed>
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	689b      	ldr	r3, [r3, #8]
 8002842:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002844:	69fb      	ldr	r3, [r7, #28]
 8002846:	005b      	lsls	r3, r3, #1
 8002848:	2203      	movs	r2, #3
 800284a:	fa02 f303 	lsl.w	r3, r2, r3
 800284e:	43db      	mvns	r3, r3
 8002850:	69ba      	ldr	r2, [r7, #24]
 8002852:	4013      	ands	r3, r2
 8002854:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002856:	683b      	ldr	r3, [r7, #0]
 8002858:	68da      	ldr	r2, [r3, #12]
 800285a:	69fb      	ldr	r3, [r7, #28]
 800285c:	005b      	lsls	r3, r3, #1
 800285e:	fa02 f303 	lsl.w	r3, r2, r3
 8002862:	69ba      	ldr	r2, [r7, #24]
 8002864:	4313      	orrs	r3, r2
 8002866:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	69ba      	ldr	r2, [r7, #24]
 800286c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	685b      	ldr	r3, [r3, #4]
 8002872:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002874:	2201      	movs	r2, #1
 8002876:	69fb      	ldr	r3, [r7, #28]
 8002878:	fa02 f303 	lsl.w	r3, r2, r3
 800287c:	43db      	mvns	r3, r3
 800287e:	69ba      	ldr	r2, [r7, #24]
 8002880:	4013      	ands	r3, r2
 8002882:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002884:	683b      	ldr	r3, [r7, #0]
 8002886:	685b      	ldr	r3, [r3, #4]
 8002888:	091b      	lsrs	r3, r3, #4
 800288a:	f003 0201 	and.w	r2, r3, #1
 800288e:	69fb      	ldr	r3, [r7, #28]
 8002890:	fa02 f303 	lsl.w	r3, r2, r3
 8002894:	69ba      	ldr	r2, [r7, #24]
 8002896:	4313      	orrs	r3, r2
 8002898:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	69ba      	ldr	r2, [r7, #24]
 800289e:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80028a0:	683b      	ldr	r3, [r7, #0]
 80028a2:	685b      	ldr	r3, [r3, #4]
 80028a4:	f003 0303 	and.w	r3, r3, #3
 80028a8:	2b03      	cmp	r3, #3
 80028aa:	d02b      	beq.n	8002904 <HAL_GPIO_Init+0x25c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 80028ac:	683b      	ldr	r3, [r7, #0]
 80028ae:	689b      	ldr	r3, [r3, #8]
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d00b      	beq.n	80028cc <HAL_GPIO_Init+0x224>
 80028b4:	683b      	ldr	r3, [r7, #0]
 80028b6:	689b      	ldr	r3, [r3, #8]
 80028b8:	2b01      	cmp	r3, #1
 80028ba:	d007      	beq.n	80028cc <HAL_GPIO_Init+0x224>
 80028bc:	683b      	ldr	r3, [r7, #0]
 80028be:	689b      	ldr	r3, [r3, #8]
 80028c0:	2b02      	cmp	r3, #2
 80028c2:	d003      	beq.n	80028cc <HAL_GPIO_Init+0x224>
 80028c4:	21ce      	movs	r1, #206	; 0xce
 80028c6:	480e      	ldr	r0, [pc, #56]	; (8002900 <HAL_GPIO_Init+0x258>)
 80028c8:	f7ff fa7d 	bl	8001dc6 <assert_failed>

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	68db      	ldr	r3, [r3, #12]
 80028d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80028d2:	69fb      	ldr	r3, [r7, #28]
 80028d4:	005b      	lsls	r3, r3, #1
 80028d6:	2203      	movs	r2, #3
 80028d8:	fa02 f303 	lsl.w	r3, r2, r3
 80028dc:	43db      	mvns	r3, r3
 80028de:	69ba      	ldr	r2, [r7, #24]
 80028e0:	4013      	ands	r3, r2
 80028e2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80028e4:	683b      	ldr	r3, [r7, #0]
 80028e6:	689a      	ldr	r2, [r3, #8]
 80028e8:	69fb      	ldr	r3, [r7, #28]
 80028ea:	005b      	lsls	r3, r3, #1
 80028ec:	fa02 f303 	lsl.w	r3, r2, r3
 80028f0:	69ba      	ldr	r2, [r7, #24]
 80028f2:	4313      	orrs	r3, r2
 80028f4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	69ba      	ldr	r2, [r7, #24]
 80028fa:	60da      	str	r2, [r3, #12]
 80028fc:	e002      	b.n	8002904 <HAL_GPIO_Init+0x25c>
 80028fe:	bf00      	nop
 8002900:	0800eb14 	.word	0x0800eb14
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002904:	683b      	ldr	r3, [r7, #0]
 8002906:	685b      	ldr	r3, [r3, #4]
 8002908:	f003 0303 	and.w	r3, r3, #3
 800290c:	2b02      	cmp	r3, #2
 800290e:	f040 8134 	bne.w	8002b7a <HAL_GPIO_Init+0x4d2>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 8002912:	683b      	ldr	r3, [r7, #0]
 8002914:	691b      	ldr	r3, [r3, #16]
 8002916:	2b00      	cmp	r3, #0
 8002918:	f000 810b 	beq.w	8002b32 <HAL_GPIO_Init+0x48a>
 800291c:	683b      	ldr	r3, [r7, #0]
 800291e:	691b      	ldr	r3, [r3, #16]
 8002920:	2b01      	cmp	r3, #1
 8002922:	f000 8106 	beq.w	8002b32 <HAL_GPIO_Init+0x48a>
 8002926:	683b      	ldr	r3, [r7, #0]
 8002928:	691b      	ldr	r3, [r3, #16]
 800292a:	2b00      	cmp	r3, #0
 800292c:	f000 8101 	beq.w	8002b32 <HAL_GPIO_Init+0x48a>
 8002930:	683b      	ldr	r3, [r7, #0]
 8002932:	691b      	ldr	r3, [r3, #16]
 8002934:	2b00      	cmp	r3, #0
 8002936:	f000 80fc 	beq.w	8002b32 <HAL_GPIO_Init+0x48a>
 800293a:	683b      	ldr	r3, [r7, #0]
 800293c:	691b      	ldr	r3, [r3, #16]
 800293e:	2b00      	cmp	r3, #0
 8002940:	f000 80f7 	beq.w	8002b32 <HAL_GPIO_Init+0x48a>
 8002944:	683b      	ldr	r3, [r7, #0]
 8002946:	691b      	ldr	r3, [r3, #16]
 8002948:	2b01      	cmp	r3, #1
 800294a:	f000 80f2 	beq.w	8002b32 <HAL_GPIO_Init+0x48a>
 800294e:	683b      	ldr	r3, [r7, #0]
 8002950:	691b      	ldr	r3, [r3, #16]
 8002952:	2b02      	cmp	r3, #2
 8002954:	f000 80ed 	beq.w	8002b32 <HAL_GPIO_Init+0x48a>
 8002958:	683b      	ldr	r3, [r7, #0]
 800295a:	691b      	ldr	r3, [r3, #16]
 800295c:	2b02      	cmp	r3, #2
 800295e:	f000 80e8 	beq.w	8002b32 <HAL_GPIO_Init+0x48a>
 8002962:	683b      	ldr	r3, [r7, #0]
 8002964:	691b      	ldr	r3, [r3, #16]
 8002966:	2b02      	cmp	r3, #2
 8002968:	f000 80e3 	beq.w	8002b32 <HAL_GPIO_Init+0x48a>
 800296c:	683b      	ldr	r3, [r7, #0]
 800296e:	691b      	ldr	r3, [r3, #16]
 8002970:	2b03      	cmp	r3, #3
 8002972:	f000 80de 	beq.w	8002b32 <HAL_GPIO_Init+0x48a>
 8002976:	683b      	ldr	r3, [r7, #0]
 8002978:	691b      	ldr	r3, [r3, #16]
 800297a:	2b03      	cmp	r3, #3
 800297c:	f000 80d9 	beq.w	8002b32 <HAL_GPIO_Init+0x48a>
 8002980:	683b      	ldr	r3, [r7, #0]
 8002982:	691b      	ldr	r3, [r3, #16]
 8002984:	2b03      	cmp	r3, #3
 8002986:	f000 80d4 	beq.w	8002b32 <HAL_GPIO_Init+0x48a>
 800298a:	683b      	ldr	r3, [r7, #0]
 800298c:	691b      	ldr	r3, [r3, #16]
 800298e:	2b03      	cmp	r3, #3
 8002990:	f000 80cf 	beq.w	8002b32 <HAL_GPIO_Init+0x48a>
 8002994:	683b      	ldr	r3, [r7, #0]
 8002996:	691b      	ldr	r3, [r3, #16]
 8002998:	2b03      	cmp	r3, #3
 800299a:	f000 80ca 	beq.w	8002b32 <HAL_GPIO_Init+0x48a>
 800299e:	683b      	ldr	r3, [r7, #0]
 80029a0:	691b      	ldr	r3, [r3, #16]
 80029a2:	2b03      	cmp	r3, #3
 80029a4:	f000 80c5 	beq.w	8002b32 <HAL_GPIO_Init+0x48a>
 80029a8:	683b      	ldr	r3, [r7, #0]
 80029aa:	691b      	ldr	r3, [r3, #16]
 80029ac:	2b04      	cmp	r3, #4
 80029ae:	f000 80c0 	beq.w	8002b32 <HAL_GPIO_Init+0x48a>
 80029b2:	683b      	ldr	r3, [r7, #0]
 80029b4:	691b      	ldr	r3, [r3, #16]
 80029b6:	2b04      	cmp	r3, #4
 80029b8:	f000 80bb 	beq.w	8002b32 <HAL_GPIO_Init+0x48a>
 80029bc:	683b      	ldr	r3, [r7, #0]
 80029be:	691b      	ldr	r3, [r3, #16]
 80029c0:	2b04      	cmp	r3, #4
 80029c2:	f000 80b6 	beq.w	8002b32 <HAL_GPIO_Init+0x48a>
 80029c6:	683b      	ldr	r3, [r7, #0]
 80029c8:	691b      	ldr	r3, [r3, #16]
 80029ca:	2b04      	cmp	r3, #4
 80029cc:	f000 80b1 	beq.w	8002b32 <HAL_GPIO_Init+0x48a>
 80029d0:	683b      	ldr	r3, [r7, #0]
 80029d2:	691b      	ldr	r3, [r3, #16]
 80029d4:	2b04      	cmp	r3, #4
 80029d6:	f000 80ac 	beq.w	8002b32 <HAL_GPIO_Init+0x48a>
 80029da:	683b      	ldr	r3, [r7, #0]
 80029dc:	691b      	ldr	r3, [r3, #16]
 80029de:	2b05      	cmp	r3, #5
 80029e0:	f000 80a7 	beq.w	8002b32 <HAL_GPIO_Init+0x48a>
 80029e4:	683b      	ldr	r3, [r7, #0]
 80029e6:	691b      	ldr	r3, [r3, #16]
 80029e8:	2b05      	cmp	r3, #5
 80029ea:	f000 80a2 	beq.w	8002b32 <HAL_GPIO_Init+0x48a>
 80029ee:	683b      	ldr	r3, [r7, #0]
 80029f0:	691b      	ldr	r3, [r3, #16]
 80029f2:	2b05      	cmp	r3, #5
 80029f4:	f000 809d 	beq.w	8002b32 <HAL_GPIO_Init+0x48a>
 80029f8:	683b      	ldr	r3, [r7, #0]
 80029fa:	691b      	ldr	r3, [r3, #16]
 80029fc:	2b05      	cmp	r3, #5
 80029fe:	f000 8098 	beq.w	8002b32 <HAL_GPIO_Init+0x48a>
 8002a02:	683b      	ldr	r3, [r7, #0]
 8002a04:	691b      	ldr	r3, [r3, #16]
 8002a06:	2b05      	cmp	r3, #5
 8002a08:	f000 8093 	beq.w	8002b32 <HAL_GPIO_Init+0x48a>
 8002a0c:	683b      	ldr	r3, [r7, #0]
 8002a0e:	691b      	ldr	r3, [r3, #16]
 8002a10:	2b05      	cmp	r3, #5
 8002a12:	f000 808e 	beq.w	8002b32 <HAL_GPIO_Init+0x48a>
 8002a16:	683b      	ldr	r3, [r7, #0]
 8002a18:	691b      	ldr	r3, [r3, #16]
 8002a1a:	2b06      	cmp	r3, #6
 8002a1c:	f000 8089 	beq.w	8002b32 <HAL_GPIO_Init+0x48a>
 8002a20:	683b      	ldr	r3, [r7, #0]
 8002a22:	691b      	ldr	r3, [r3, #16]
 8002a24:	2b06      	cmp	r3, #6
 8002a26:	f000 8084 	beq.w	8002b32 <HAL_GPIO_Init+0x48a>
 8002a2a:	683b      	ldr	r3, [r7, #0]
 8002a2c:	691b      	ldr	r3, [r3, #16]
 8002a2e:	2b07      	cmp	r3, #7
 8002a30:	d07f      	beq.n	8002b32 <HAL_GPIO_Init+0x48a>
 8002a32:	683b      	ldr	r3, [r7, #0]
 8002a34:	691b      	ldr	r3, [r3, #16]
 8002a36:	2b07      	cmp	r3, #7
 8002a38:	d07b      	beq.n	8002b32 <HAL_GPIO_Init+0x48a>
 8002a3a:	683b      	ldr	r3, [r7, #0]
 8002a3c:	691b      	ldr	r3, [r3, #16]
 8002a3e:	2b07      	cmp	r3, #7
 8002a40:	d077      	beq.n	8002b32 <HAL_GPIO_Init+0x48a>
 8002a42:	683b      	ldr	r3, [r7, #0]
 8002a44:	691b      	ldr	r3, [r3, #16]
 8002a46:	2b07      	cmp	r3, #7
 8002a48:	d073      	beq.n	8002b32 <HAL_GPIO_Init+0x48a>
 8002a4a:	683b      	ldr	r3, [r7, #0]
 8002a4c:	691b      	ldr	r3, [r3, #16]
 8002a4e:	2b07      	cmp	r3, #7
 8002a50:	d06f      	beq.n	8002b32 <HAL_GPIO_Init+0x48a>
 8002a52:	683b      	ldr	r3, [r7, #0]
 8002a54:	691b      	ldr	r3, [r3, #16]
 8002a56:	2b07      	cmp	r3, #7
 8002a58:	d06b      	beq.n	8002b32 <HAL_GPIO_Init+0x48a>
 8002a5a:	683b      	ldr	r3, [r7, #0]
 8002a5c:	691b      	ldr	r3, [r3, #16]
 8002a5e:	2b07      	cmp	r3, #7
 8002a60:	d067      	beq.n	8002b32 <HAL_GPIO_Init+0x48a>
 8002a62:	683b      	ldr	r3, [r7, #0]
 8002a64:	691b      	ldr	r3, [r3, #16]
 8002a66:	2b08      	cmp	r3, #8
 8002a68:	d063      	beq.n	8002b32 <HAL_GPIO_Init+0x48a>
 8002a6a:	683b      	ldr	r3, [r7, #0]
 8002a6c:	691b      	ldr	r3, [r3, #16]
 8002a6e:	2b08      	cmp	r3, #8
 8002a70:	d05f      	beq.n	8002b32 <HAL_GPIO_Init+0x48a>
 8002a72:	683b      	ldr	r3, [r7, #0]
 8002a74:	691b      	ldr	r3, [r3, #16]
 8002a76:	2b08      	cmp	r3, #8
 8002a78:	d05b      	beq.n	8002b32 <HAL_GPIO_Init+0x48a>
 8002a7a:	683b      	ldr	r3, [r7, #0]
 8002a7c:	691b      	ldr	r3, [r3, #16]
 8002a7e:	2b08      	cmp	r3, #8
 8002a80:	d057      	beq.n	8002b32 <HAL_GPIO_Init+0x48a>
 8002a82:	683b      	ldr	r3, [r7, #0]
 8002a84:	691b      	ldr	r3, [r3, #16]
 8002a86:	2b08      	cmp	r3, #8
 8002a88:	d053      	beq.n	8002b32 <HAL_GPIO_Init+0x48a>
 8002a8a:	683b      	ldr	r3, [r7, #0]
 8002a8c:	691b      	ldr	r3, [r3, #16]
 8002a8e:	2b08      	cmp	r3, #8
 8002a90:	d04f      	beq.n	8002b32 <HAL_GPIO_Init+0x48a>
 8002a92:	683b      	ldr	r3, [r7, #0]
 8002a94:	691b      	ldr	r3, [r3, #16]
 8002a96:	2b08      	cmp	r3, #8
 8002a98:	d04b      	beq.n	8002b32 <HAL_GPIO_Init+0x48a>
 8002a9a:	683b      	ldr	r3, [r7, #0]
 8002a9c:	691b      	ldr	r3, [r3, #16]
 8002a9e:	2b09      	cmp	r3, #9
 8002aa0:	d047      	beq.n	8002b32 <HAL_GPIO_Init+0x48a>
 8002aa2:	683b      	ldr	r3, [r7, #0]
 8002aa4:	691b      	ldr	r3, [r3, #16]
 8002aa6:	2b09      	cmp	r3, #9
 8002aa8:	d043      	beq.n	8002b32 <HAL_GPIO_Init+0x48a>
 8002aaa:	683b      	ldr	r3, [r7, #0]
 8002aac:	691b      	ldr	r3, [r3, #16]
 8002aae:	2b09      	cmp	r3, #9
 8002ab0:	d03f      	beq.n	8002b32 <HAL_GPIO_Init+0x48a>
 8002ab2:	683b      	ldr	r3, [r7, #0]
 8002ab4:	691b      	ldr	r3, [r3, #16]
 8002ab6:	2b09      	cmp	r3, #9
 8002ab8:	d03b      	beq.n	8002b32 <HAL_GPIO_Init+0x48a>
 8002aba:	683b      	ldr	r3, [r7, #0]
 8002abc:	691b      	ldr	r3, [r3, #16]
 8002abe:	2b09      	cmp	r3, #9
 8002ac0:	d037      	beq.n	8002b32 <HAL_GPIO_Init+0x48a>
 8002ac2:	683b      	ldr	r3, [r7, #0]
 8002ac4:	691b      	ldr	r3, [r3, #16]
 8002ac6:	2b09      	cmp	r3, #9
 8002ac8:	d033      	beq.n	8002b32 <HAL_GPIO_Init+0x48a>
 8002aca:	683b      	ldr	r3, [r7, #0]
 8002acc:	691b      	ldr	r3, [r3, #16]
 8002ace:	2b09      	cmp	r3, #9
 8002ad0:	d02f      	beq.n	8002b32 <HAL_GPIO_Init+0x48a>
 8002ad2:	683b      	ldr	r3, [r7, #0]
 8002ad4:	691b      	ldr	r3, [r3, #16]
 8002ad6:	2b0a      	cmp	r3, #10
 8002ad8:	d02b      	beq.n	8002b32 <HAL_GPIO_Init+0x48a>
 8002ada:	683b      	ldr	r3, [r7, #0]
 8002adc:	691b      	ldr	r3, [r3, #16]
 8002ade:	2b0a      	cmp	r3, #10
 8002ae0:	d027      	beq.n	8002b32 <HAL_GPIO_Init+0x48a>
 8002ae2:	683b      	ldr	r3, [r7, #0]
 8002ae4:	691b      	ldr	r3, [r3, #16]
 8002ae6:	2b0a      	cmp	r3, #10
 8002ae8:	d023      	beq.n	8002b32 <HAL_GPIO_Init+0x48a>
 8002aea:	683b      	ldr	r3, [r7, #0]
 8002aec:	691b      	ldr	r3, [r3, #16]
 8002aee:	2b0a      	cmp	r3, #10
 8002af0:	d01f      	beq.n	8002b32 <HAL_GPIO_Init+0x48a>
 8002af2:	683b      	ldr	r3, [r7, #0]
 8002af4:	691b      	ldr	r3, [r3, #16]
 8002af6:	2b0b      	cmp	r3, #11
 8002af8:	d01b      	beq.n	8002b32 <HAL_GPIO_Init+0x48a>
 8002afa:	683b      	ldr	r3, [r7, #0]
 8002afc:	691b      	ldr	r3, [r3, #16]
 8002afe:	2b0c      	cmp	r3, #12
 8002b00:	d017      	beq.n	8002b32 <HAL_GPIO_Init+0x48a>
 8002b02:	683b      	ldr	r3, [r7, #0]
 8002b04:	691b      	ldr	r3, [r3, #16]
 8002b06:	2b0c      	cmp	r3, #12
 8002b08:	d013      	beq.n	8002b32 <HAL_GPIO_Init+0x48a>
 8002b0a:	683b      	ldr	r3, [r7, #0]
 8002b0c:	691b      	ldr	r3, [r3, #16]
 8002b0e:	2b0c      	cmp	r3, #12
 8002b10:	d00f      	beq.n	8002b32 <HAL_GPIO_Init+0x48a>
 8002b12:	683b      	ldr	r3, [r7, #0]
 8002b14:	691b      	ldr	r3, [r3, #16]
 8002b16:	2b0f      	cmp	r3, #15
 8002b18:	d00b      	beq.n	8002b32 <HAL_GPIO_Init+0x48a>
 8002b1a:	683b      	ldr	r3, [r7, #0]
 8002b1c:	691b      	ldr	r3, [r3, #16]
 8002b1e:	2b0d      	cmp	r3, #13
 8002b20:	d007      	beq.n	8002b32 <HAL_GPIO_Init+0x48a>
 8002b22:	683b      	ldr	r3, [r7, #0]
 8002b24:	691b      	ldr	r3, [r3, #16]
 8002b26:	2b0e      	cmp	r3, #14
 8002b28:	d003      	beq.n	8002b32 <HAL_GPIO_Init+0x48a>
 8002b2a:	21db      	movs	r1, #219	; 0xdb
 8002b2c:	4888      	ldr	r0, [pc, #544]	; (8002d50 <HAL_GPIO_Init+0x6a8>)
 8002b2e:	f7ff f94a 	bl	8001dc6 <assert_failed>

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002b32:	69fb      	ldr	r3, [r7, #28]
 8002b34:	08da      	lsrs	r2, r3, #3
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	3208      	adds	r2, #8
 8002b3a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002b3e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002b40:	69fb      	ldr	r3, [r7, #28]
 8002b42:	f003 0307 	and.w	r3, r3, #7
 8002b46:	009b      	lsls	r3, r3, #2
 8002b48:	220f      	movs	r2, #15
 8002b4a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b4e:	43db      	mvns	r3, r3
 8002b50:	69ba      	ldr	r2, [r7, #24]
 8002b52:	4013      	ands	r3, r2
 8002b54:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002b56:	683b      	ldr	r3, [r7, #0]
 8002b58:	691a      	ldr	r2, [r3, #16]
 8002b5a:	69fb      	ldr	r3, [r7, #28]
 8002b5c:	f003 0307 	and.w	r3, r3, #7
 8002b60:	009b      	lsls	r3, r3, #2
 8002b62:	fa02 f303 	lsl.w	r3, r2, r3
 8002b66:	69ba      	ldr	r2, [r7, #24]
 8002b68:	4313      	orrs	r3, r2
 8002b6a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002b6c:	69fb      	ldr	r3, [r7, #28]
 8002b6e:	08da      	lsrs	r2, r3, #3
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	3208      	adds	r2, #8
 8002b74:	69b9      	ldr	r1, [r7, #24]
 8002b76:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002b80:	69fb      	ldr	r3, [r7, #28]
 8002b82:	005b      	lsls	r3, r3, #1
 8002b84:	2203      	movs	r2, #3
 8002b86:	fa02 f303 	lsl.w	r3, r2, r3
 8002b8a:	43db      	mvns	r3, r3
 8002b8c:	69ba      	ldr	r2, [r7, #24]
 8002b8e:	4013      	ands	r3, r2
 8002b90:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002b92:	683b      	ldr	r3, [r7, #0]
 8002b94:	685b      	ldr	r3, [r3, #4]
 8002b96:	f003 0203 	and.w	r2, r3, #3
 8002b9a:	69fb      	ldr	r3, [r7, #28]
 8002b9c:	005b      	lsls	r3, r3, #1
 8002b9e:	fa02 f303 	lsl.w	r3, r2, r3
 8002ba2:	69ba      	ldr	r2, [r7, #24]
 8002ba4:	4313      	orrs	r3, r2
 8002ba6:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	69ba      	ldr	r2, [r7, #24]
 8002bac:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002bae:	683b      	ldr	r3, [r7, #0]
 8002bb0:	685b      	ldr	r3, [r3, #4]
 8002bb2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	f000 80be 	beq.w	8002d38 <HAL_GPIO_Init+0x690>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002bbc:	4b65      	ldr	r3, [pc, #404]	; (8002d54 <HAL_GPIO_Init+0x6ac>)
 8002bbe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bc0:	4a64      	ldr	r2, [pc, #400]	; (8002d54 <HAL_GPIO_Init+0x6ac>)
 8002bc2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002bc6:	6453      	str	r3, [r2, #68]	; 0x44
 8002bc8:	4b62      	ldr	r3, [pc, #392]	; (8002d54 <HAL_GPIO_Init+0x6ac>)
 8002bca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bcc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002bd0:	60fb      	str	r3, [r7, #12]
 8002bd2:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002bd4:	4a60      	ldr	r2, [pc, #384]	; (8002d58 <HAL_GPIO_Init+0x6b0>)
 8002bd6:	69fb      	ldr	r3, [r7, #28]
 8002bd8:	089b      	lsrs	r3, r3, #2
 8002bda:	3302      	adds	r3, #2
 8002bdc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002be0:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002be2:	69fb      	ldr	r3, [r7, #28]
 8002be4:	f003 0303 	and.w	r3, r3, #3
 8002be8:	009b      	lsls	r3, r3, #2
 8002bea:	220f      	movs	r2, #15
 8002bec:	fa02 f303 	lsl.w	r3, r2, r3
 8002bf0:	43db      	mvns	r3, r3
 8002bf2:	69ba      	ldr	r2, [r7, #24]
 8002bf4:	4013      	ands	r3, r2
 8002bf6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	4a58      	ldr	r2, [pc, #352]	; (8002d5c <HAL_GPIO_Init+0x6b4>)
 8002bfc:	4293      	cmp	r3, r2
 8002bfe:	d037      	beq.n	8002c70 <HAL_GPIO_Init+0x5c8>
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	4a57      	ldr	r2, [pc, #348]	; (8002d60 <HAL_GPIO_Init+0x6b8>)
 8002c04:	4293      	cmp	r3, r2
 8002c06:	d031      	beq.n	8002c6c <HAL_GPIO_Init+0x5c4>
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	4a56      	ldr	r2, [pc, #344]	; (8002d64 <HAL_GPIO_Init+0x6bc>)
 8002c0c:	4293      	cmp	r3, r2
 8002c0e:	d02b      	beq.n	8002c68 <HAL_GPIO_Init+0x5c0>
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	4a55      	ldr	r2, [pc, #340]	; (8002d68 <HAL_GPIO_Init+0x6c0>)
 8002c14:	4293      	cmp	r3, r2
 8002c16:	d025      	beq.n	8002c64 <HAL_GPIO_Init+0x5bc>
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	4a54      	ldr	r2, [pc, #336]	; (8002d6c <HAL_GPIO_Init+0x6c4>)
 8002c1c:	4293      	cmp	r3, r2
 8002c1e:	d01f      	beq.n	8002c60 <HAL_GPIO_Init+0x5b8>
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	4a53      	ldr	r2, [pc, #332]	; (8002d70 <HAL_GPIO_Init+0x6c8>)
 8002c24:	4293      	cmp	r3, r2
 8002c26:	d019      	beq.n	8002c5c <HAL_GPIO_Init+0x5b4>
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	4a52      	ldr	r2, [pc, #328]	; (8002d74 <HAL_GPIO_Init+0x6cc>)
 8002c2c:	4293      	cmp	r3, r2
 8002c2e:	d013      	beq.n	8002c58 <HAL_GPIO_Init+0x5b0>
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	4a51      	ldr	r2, [pc, #324]	; (8002d78 <HAL_GPIO_Init+0x6d0>)
 8002c34:	4293      	cmp	r3, r2
 8002c36:	d00d      	beq.n	8002c54 <HAL_GPIO_Init+0x5ac>
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	4a50      	ldr	r2, [pc, #320]	; (8002d7c <HAL_GPIO_Init+0x6d4>)
 8002c3c:	4293      	cmp	r3, r2
 8002c3e:	d007      	beq.n	8002c50 <HAL_GPIO_Init+0x5a8>
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	4a4f      	ldr	r2, [pc, #316]	; (8002d80 <HAL_GPIO_Init+0x6d8>)
 8002c44:	4293      	cmp	r3, r2
 8002c46:	d101      	bne.n	8002c4c <HAL_GPIO_Init+0x5a4>
 8002c48:	2309      	movs	r3, #9
 8002c4a:	e012      	b.n	8002c72 <HAL_GPIO_Init+0x5ca>
 8002c4c:	230a      	movs	r3, #10
 8002c4e:	e010      	b.n	8002c72 <HAL_GPIO_Init+0x5ca>
 8002c50:	2308      	movs	r3, #8
 8002c52:	e00e      	b.n	8002c72 <HAL_GPIO_Init+0x5ca>
 8002c54:	2307      	movs	r3, #7
 8002c56:	e00c      	b.n	8002c72 <HAL_GPIO_Init+0x5ca>
 8002c58:	2306      	movs	r3, #6
 8002c5a:	e00a      	b.n	8002c72 <HAL_GPIO_Init+0x5ca>
 8002c5c:	2305      	movs	r3, #5
 8002c5e:	e008      	b.n	8002c72 <HAL_GPIO_Init+0x5ca>
 8002c60:	2304      	movs	r3, #4
 8002c62:	e006      	b.n	8002c72 <HAL_GPIO_Init+0x5ca>
 8002c64:	2303      	movs	r3, #3
 8002c66:	e004      	b.n	8002c72 <HAL_GPIO_Init+0x5ca>
 8002c68:	2302      	movs	r3, #2
 8002c6a:	e002      	b.n	8002c72 <HAL_GPIO_Init+0x5ca>
 8002c6c:	2301      	movs	r3, #1
 8002c6e:	e000      	b.n	8002c72 <HAL_GPIO_Init+0x5ca>
 8002c70:	2300      	movs	r3, #0
 8002c72:	69fa      	ldr	r2, [r7, #28]
 8002c74:	f002 0203 	and.w	r2, r2, #3
 8002c78:	0092      	lsls	r2, r2, #2
 8002c7a:	4093      	lsls	r3, r2
 8002c7c:	69ba      	ldr	r2, [r7, #24]
 8002c7e:	4313      	orrs	r3, r2
 8002c80:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002c82:	4935      	ldr	r1, [pc, #212]	; (8002d58 <HAL_GPIO_Init+0x6b0>)
 8002c84:	69fb      	ldr	r3, [r7, #28]
 8002c86:	089b      	lsrs	r3, r3, #2
 8002c88:	3302      	adds	r3, #2
 8002c8a:	69ba      	ldr	r2, [r7, #24]
 8002c8c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002c90:	4b3c      	ldr	r3, [pc, #240]	; (8002d84 <HAL_GPIO_Init+0x6dc>)
 8002c92:	689b      	ldr	r3, [r3, #8]
 8002c94:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c96:	693b      	ldr	r3, [r7, #16]
 8002c98:	43db      	mvns	r3, r3
 8002c9a:	69ba      	ldr	r2, [r7, #24]
 8002c9c:	4013      	ands	r3, r2
 8002c9e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002ca0:	683b      	ldr	r3, [r7, #0]
 8002ca2:	685b      	ldr	r3, [r3, #4]
 8002ca4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d003      	beq.n	8002cb4 <HAL_GPIO_Init+0x60c>
        {
          temp |= iocurrent;
 8002cac:	69ba      	ldr	r2, [r7, #24]
 8002cae:	693b      	ldr	r3, [r7, #16]
 8002cb0:	4313      	orrs	r3, r2
 8002cb2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002cb4:	4a33      	ldr	r2, [pc, #204]	; (8002d84 <HAL_GPIO_Init+0x6dc>)
 8002cb6:	69bb      	ldr	r3, [r7, #24]
 8002cb8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002cba:	4b32      	ldr	r3, [pc, #200]	; (8002d84 <HAL_GPIO_Init+0x6dc>)
 8002cbc:	68db      	ldr	r3, [r3, #12]
 8002cbe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002cc0:	693b      	ldr	r3, [r7, #16]
 8002cc2:	43db      	mvns	r3, r3
 8002cc4:	69ba      	ldr	r2, [r7, #24]
 8002cc6:	4013      	ands	r3, r2
 8002cc8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002cca:	683b      	ldr	r3, [r7, #0]
 8002ccc:	685b      	ldr	r3, [r3, #4]
 8002cce:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d003      	beq.n	8002cde <HAL_GPIO_Init+0x636>
        {
          temp |= iocurrent;
 8002cd6:	69ba      	ldr	r2, [r7, #24]
 8002cd8:	693b      	ldr	r3, [r7, #16]
 8002cda:	4313      	orrs	r3, r2
 8002cdc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002cde:	4a29      	ldr	r2, [pc, #164]	; (8002d84 <HAL_GPIO_Init+0x6dc>)
 8002ce0:	69bb      	ldr	r3, [r7, #24]
 8002ce2:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002ce4:	4b27      	ldr	r3, [pc, #156]	; (8002d84 <HAL_GPIO_Init+0x6dc>)
 8002ce6:	685b      	ldr	r3, [r3, #4]
 8002ce8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002cea:	693b      	ldr	r3, [r7, #16]
 8002cec:	43db      	mvns	r3, r3
 8002cee:	69ba      	ldr	r2, [r7, #24]
 8002cf0:	4013      	ands	r3, r2
 8002cf2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002cf4:	683b      	ldr	r3, [r7, #0]
 8002cf6:	685b      	ldr	r3, [r3, #4]
 8002cf8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d003      	beq.n	8002d08 <HAL_GPIO_Init+0x660>
        {
          temp |= iocurrent;
 8002d00:	69ba      	ldr	r2, [r7, #24]
 8002d02:	693b      	ldr	r3, [r7, #16]
 8002d04:	4313      	orrs	r3, r2
 8002d06:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002d08:	4a1e      	ldr	r2, [pc, #120]	; (8002d84 <HAL_GPIO_Init+0x6dc>)
 8002d0a:	69bb      	ldr	r3, [r7, #24]
 8002d0c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002d0e:	4b1d      	ldr	r3, [pc, #116]	; (8002d84 <HAL_GPIO_Init+0x6dc>)
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d14:	693b      	ldr	r3, [r7, #16]
 8002d16:	43db      	mvns	r3, r3
 8002d18:	69ba      	ldr	r2, [r7, #24]
 8002d1a:	4013      	ands	r3, r2
 8002d1c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002d1e:	683b      	ldr	r3, [r7, #0]
 8002d20:	685b      	ldr	r3, [r3, #4]
 8002d22:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d003      	beq.n	8002d32 <HAL_GPIO_Init+0x68a>
        {
          temp |= iocurrent;
 8002d2a:	69ba      	ldr	r2, [r7, #24]
 8002d2c:	693b      	ldr	r3, [r7, #16]
 8002d2e:	4313      	orrs	r3, r2
 8002d30:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002d32:	4a14      	ldr	r2, [pc, #80]	; (8002d84 <HAL_GPIO_Init+0x6dc>)
 8002d34:	69bb      	ldr	r3, [r7, #24]
 8002d36:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8002d38:	69fb      	ldr	r3, [r7, #28]
 8002d3a:	3301      	adds	r3, #1
 8002d3c:	61fb      	str	r3, [r7, #28]
 8002d3e:	69fb      	ldr	r3, [r7, #28]
 8002d40:	2b0f      	cmp	r3, #15
 8002d42:	f67f ad4d 	bls.w	80027e0 <HAL_GPIO_Init+0x138>
      }
    }
  }
}
 8002d46:	bf00      	nop
 8002d48:	bf00      	nop
 8002d4a:	3720      	adds	r7, #32
 8002d4c:	46bd      	mov	sp, r7
 8002d4e:	bd80      	pop	{r7, pc}
 8002d50:	0800eb14 	.word	0x0800eb14
 8002d54:	40023800 	.word	0x40023800
 8002d58:	40013800 	.word	0x40013800
 8002d5c:	40020000 	.word	0x40020000
 8002d60:	40020400 	.word	0x40020400
 8002d64:	40020800 	.word	0x40020800
 8002d68:	40020c00 	.word	0x40020c00
 8002d6c:	40021000 	.word	0x40021000
 8002d70:	40021400 	.word	0x40021400
 8002d74:	40021800 	.word	0x40021800
 8002d78:	40021c00 	.word	0x40021c00
 8002d7c:	40022000 	.word	0x40022000
 8002d80:	40022400 	.word	0x40022400
 8002d84:	40013c00 	.word	0x40013c00

08002d88 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002d88:	b580      	push	{r7, lr}
 8002d8a:	b082      	sub	sp, #8
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	6078      	str	r0, [r7, #4]
 8002d90:	460b      	mov	r3, r1
 8002d92:	807b      	strh	r3, [r7, #2]
 8002d94:	4613      	mov	r3, r2
 8002d96:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8002d98:	887b      	ldrh	r3, [r7, #2]
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d104      	bne.n	8002da8 <HAL_GPIO_WritePin+0x20>
 8002d9e:	f240 1197 	movw	r1, #407	; 0x197
 8002da2:	480e      	ldr	r0, [pc, #56]	; (8002ddc <HAL_GPIO_WritePin+0x54>)
 8002da4:	f7ff f80f 	bl	8001dc6 <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 8002da8:	787b      	ldrb	r3, [r7, #1]
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d007      	beq.n	8002dbe <HAL_GPIO_WritePin+0x36>
 8002dae:	787b      	ldrb	r3, [r7, #1]
 8002db0:	2b01      	cmp	r3, #1
 8002db2:	d004      	beq.n	8002dbe <HAL_GPIO_WritePin+0x36>
 8002db4:	f44f 71cc 	mov.w	r1, #408	; 0x198
 8002db8:	4808      	ldr	r0, [pc, #32]	; (8002ddc <HAL_GPIO_WritePin+0x54>)
 8002dba:	f7ff f804 	bl	8001dc6 <assert_failed>

  if(PinState != GPIO_PIN_RESET)
 8002dbe:	787b      	ldrb	r3, [r7, #1]
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d003      	beq.n	8002dcc <HAL_GPIO_WritePin+0x44>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002dc4:	887a      	ldrh	r2, [r7, #2]
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002dca:	e003      	b.n	8002dd4 <HAL_GPIO_WritePin+0x4c>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002dcc:	887b      	ldrh	r3, [r7, #2]
 8002dce:	041a      	lsls	r2, r3, #16
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	619a      	str	r2, [r3, #24]
}
 8002dd4:	bf00      	nop
 8002dd6:	3708      	adds	r7, #8
 8002dd8:	46bd      	mov	sp, r7
 8002dda:	bd80      	pop	{r7, pc}
 8002ddc:	0800eb14 	.word	0x0800eb14

08002de0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002de0:	b580      	push	{r7, lr}
 8002de2:	b082      	sub	sp, #8
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d101      	bne.n	8002df2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002dee:	2301      	movs	r3, #1
 8002df0:	e107      	b.n	8003002 <HAL_I2C_Init+0x222>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	4a85      	ldr	r2, [pc, #532]	; (800300c <HAL_I2C_Init+0x22c>)
 8002df8:	4293      	cmp	r3, r2
 8002dfa:	d013      	beq.n	8002e24 <HAL_I2C_Init+0x44>
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	4a83      	ldr	r2, [pc, #524]	; (8003010 <HAL_I2C_Init+0x230>)
 8002e02:	4293      	cmp	r3, r2
 8002e04:	d00e      	beq.n	8002e24 <HAL_I2C_Init+0x44>
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	4a82      	ldr	r2, [pc, #520]	; (8003014 <HAL_I2C_Init+0x234>)
 8002e0c:	4293      	cmp	r3, r2
 8002e0e:	d009      	beq.n	8002e24 <HAL_I2C_Init+0x44>
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	4a80      	ldr	r2, [pc, #512]	; (8003018 <HAL_I2C_Init+0x238>)
 8002e16:	4293      	cmp	r3, r2
 8002e18:	d004      	beq.n	8002e24 <HAL_I2C_Init+0x44>
 8002e1a:	f240 2119 	movw	r1, #537	; 0x219
 8002e1e:	487f      	ldr	r0, [pc, #508]	; (800301c <HAL_I2C_Init+0x23c>)
 8002e20:	f7fe ffd1 	bl	8001dc6 <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS1(hi2c->Init.OwnAddress1));
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	689b      	ldr	r3, [r3, #8]
 8002e28:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e2c:	d304      	bcc.n	8002e38 <HAL_I2C_Init+0x58>
 8002e2e:	f240 211a 	movw	r1, #538	; 0x21a
 8002e32:	487a      	ldr	r0, [pc, #488]	; (800301c <HAL_I2C_Init+0x23c>)
 8002e34:	f7fe ffc7 	bl	8001dc6 <assert_failed>
  assert_param(IS_I2C_ADDRESSING_MODE(hi2c->Init.AddressingMode));
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	68db      	ldr	r3, [r3, #12]
 8002e3c:	2b01      	cmp	r3, #1
 8002e3e:	d008      	beq.n	8002e52 <HAL_I2C_Init+0x72>
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	68db      	ldr	r3, [r3, #12]
 8002e44:	2b02      	cmp	r3, #2
 8002e46:	d004      	beq.n	8002e52 <HAL_I2C_Init+0x72>
 8002e48:	f240 211b 	movw	r1, #539	; 0x21b
 8002e4c:	4873      	ldr	r0, [pc, #460]	; (800301c <HAL_I2C_Init+0x23c>)
 8002e4e:	f7fe ffba 	bl	8001dc6 <assert_failed>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	691b      	ldr	r3, [r3, #16]
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d009      	beq.n	8002e6e <HAL_I2C_Init+0x8e>
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	691b      	ldr	r3, [r3, #16]
 8002e5e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002e62:	d004      	beq.n	8002e6e <HAL_I2C_Init+0x8e>
 8002e64:	f44f 7107 	mov.w	r1, #540	; 0x21c
 8002e68:	486c      	ldr	r0, [pc, #432]	; (800301c <HAL_I2C_Init+0x23c>)
 8002e6a:	f7fe ffac 	bl	8001dc6 <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	695b      	ldr	r3, [r3, #20]
 8002e72:	2bff      	cmp	r3, #255	; 0xff
 8002e74:	d904      	bls.n	8002e80 <HAL_I2C_Init+0xa0>
 8002e76:	f240 211d 	movw	r1, #541	; 0x21d
 8002e7a:	4868      	ldr	r0, [pc, #416]	; (800301c <HAL_I2C_Init+0x23c>)
 8002e7c:	f7fe ffa3 	bl	8001dc6 <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	699b      	ldr	r3, [r3, #24]
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d020      	beq.n	8002eca <HAL_I2C_Init+0xea>
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	699b      	ldr	r3, [r3, #24]
 8002e8c:	2b01      	cmp	r3, #1
 8002e8e:	d01c      	beq.n	8002eca <HAL_I2C_Init+0xea>
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	699b      	ldr	r3, [r3, #24]
 8002e94:	2b02      	cmp	r3, #2
 8002e96:	d018      	beq.n	8002eca <HAL_I2C_Init+0xea>
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	699b      	ldr	r3, [r3, #24]
 8002e9c:	2b03      	cmp	r3, #3
 8002e9e:	d014      	beq.n	8002eca <HAL_I2C_Init+0xea>
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	699b      	ldr	r3, [r3, #24]
 8002ea4:	2b04      	cmp	r3, #4
 8002ea6:	d010      	beq.n	8002eca <HAL_I2C_Init+0xea>
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	699b      	ldr	r3, [r3, #24]
 8002eac:	2b05      	cmp	r3, #5
 8002eae:	d00c      	beq.n	8002eca <HAL_I2C_Init+0xea>
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	699b      	ldr	r3, [r3, #24]
 8002eb4:	2b06      	cmp	r3, #6
 8002eb6:	d008      	beq.n	8002eca <HAL_I2C_Init+0xea>
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	699b      	ldr	r3, [r3, #24]
 8002ebc:	2b07      	cmp	r3, #7
 8002ebe:	d004      	beq.n	8002eca <HAL_I2C_Init+0xea>
 8002ec0:	f240 211e 	movw	r1, #542	; 0x21e
 8002ec4:	4855      	ldr	r0, [pc, #340]	; (800301c <HAL_I2C_Init+0x23c>)
 8002ec6:	f7fe ff7e 	bl	8001dc6 <assert_failed>
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	69db      	ldr	r3, [r3, #28]
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d009      	beq.n	8002ee6 <HAL_I2C_Init+0x106>
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	69db      	ldr	r3, [r3, #28]
 8002ed6:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002eda:	d004      	beq.n	8002ee6 <HAL_I2C_Init+0x106>
 8002edc:	f240 211f 	movw	r1, #543	; 0x21f
 8002ee0:	484e      	ldr	r0, [pc, #312]	; (800301c <HAL_I2C_Init+0x23c>)
 8002ee2:	f7fe ff70 	bl	8001dc6 <assert_failed>
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	6a1b      	ldr	r3, [r3, #32]
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d009      	beq.n	8002f02 <HAL_I2C_Init+0x122>
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	6a1b      	ldr	r3, [r3, #32]
 8002ef2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002ef6:	d004      	beq.n	8002f02 <HAL_I2C_Init+0x122>
 8002ef8:	f44f 7108 	mov.w	r1, #544	; 0x220
 8002efc:	4847      	ldr	r0, [pc, #284]	; (800301c <HAL_I2C_Init+0x23c>)
 8002efe:	f7fe ff62 	bl	8001dc6 <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002f08:	b2db      	uxtb	r3, r3
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d106      	bne.n	8002f1c <HAL_I2C_Init+0x13c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	2200      	movs	r2, #0
 8002f12:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002f16:	6878      	ldr	r0, [r7, #4]
 8002f18:	f7fe faf6 	bl	8001508 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	2224      	movs	r2, #36	; 0x24
 8002f20:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	681a      	ldr	r2, [r3, #0]
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	f022 0201 	bic.w	r2, r2, #1
 8002f32:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	685a      	ldr	r2, [r3, #4]
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002f40:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	689a      	ldr	r2, [r3, #8]
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002f50:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	68db      	ldr	r3, [r3, #12]
 8002f56:	2b01      	cmp	r3, #1
 8002f58:	d107      	bne.n	8002f6a <HAL_I2C_Init+0x18a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	689a      	ldr	r2, [r3, #8]
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002f66:	609a      	str	r2, [r3, #8]
 8002f68:	e006      	b.n	8002f78 <HAL_I2C_Init+0x198>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	689a      	ldr	r2, [r3, #8]
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002f76:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	68db      	ldr	r3, [r3, #12]
 8002f7c:	2b02      	cmp	r3, #2
 8002f7e:	d104      	bne.n	8002f8a <HAL_I2C_Init+0x1aa>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002f88:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	6859      	ldr	r1, [r3, #4]
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681a      	ldr	r2, [r3, #0]
 8002f94:	4b22      	ldr	r3, [pc, #136]	; (8003020 <HAL_I2C_Init+0x240>)
 8002f96:	430b      	orrs	r3, r1
 8002f98:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	68da      	ldr	r2, [r3, #12]
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002fa8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	691a      	ldr	r2, [r3, #16]
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	695b      	ldr	r3, [r3, #20]
 8002fb2:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	699b      	ldr	r3, [r3, #24]
 8002fba:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	430a      	orrs	r2, r1
 8002fc2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	69d9      	ldr	r1, [r3, #28]
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	6a1a      	ldr	r2, [r3, #32]
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	430a      	orrs	r2, r1
 8002fd2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	681a      	ldr	r2, [r3, #0]
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f042 0201 	orr.w	r2, r2, #1
 8002fe2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	2200      	movs	r2, #0
 8002fe8:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	2220      	movs	r2, #32
 8002fee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	2200      	movs	r2, #0
 8002ff6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	2200      	movs	r2, #0
 8002ffc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8003000:	2300      	movs	r3, #0
}
 8003002:	4618      	mov	r0, r3
 8003004:	3708      	adds	r7, #8
 8003006:	46bd      	mov	sp, r7
 8003008:	bd80      	pop	{r7, pc}
 800300a:	bf00      	nop
 800300c:	40005400 	.word	0x40005400
 8003010:	40005800 	.word	0x40005800
 8003014:	40005c00 	.word	0x40005c00
 8003018:	40006000 	.word	0x40006000
 800301c:	0800eb50 	.word	0x0800eb50
 8003020:	02008000 	.word	0x02008000

08003024 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8003024:	b580      	push	{r7, lr}
 8003026:	b088      	sub	sp, #32
 8003028:	af02      	add	r7, sp, #8
 800302a:	60f8      	str	r0, [r7, #12]
 800302c:	607a      	str	r2, [r7, #4]
 800302e:	461a      	mov	r2, r3
 8003030:	460b      	mov	r3, r1
 8003032:	817b      	strh	r3, [r7, #10]
 8003034:	4613      	mov	r3, r2
 8003036:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800303e:	b2db      	uxtb	r3, r3
 8003040:	2b20      	cmp	r3, #32
 8003042:	f040 80da 	bne.w	80031fa <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800304c:	2b01      	cmp	r3, #1
 800304e:	d101      	bne.n	8003054 <HAL_I2C_Master_Transmit+0x30>
 8003050:	2302      	movs	r3, #2
 8003052:	e0d3      	b.n	80031fc <HAL_I2C_Master_Transmit+0x1d8>
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	2201      	movs	r2, #1
 8003058:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800305c:	f7ff f922 	bl	80022a4 <HAL_GetTick>
 8003060:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003062:	697b      	ldr	r3, [r7, #20]
 8003064:	9300      	str	r3, [sp, #0]
 8003066:	2319      	movs	r3, #25
 8003068:	2201      	movs	r2, #1
 800306a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800306e:	68f8      	ldr	r0, [r7, #12]
 8003070:	f000 f9e6 	bl	8003440 <I2C_WaitOnFlagUntilTimeout>
 8003074:	4603      	mov	r3, r0
 8003076:	2b00      	cmp	r3, #0
 8003078:	d001      	beq.n	800307e <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 800307a:	2301      	movs	r3, #1
 800307c:	e0be      	b.n	80031fc <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	2221      	movs	r2, #33	; 0x21
 8003082:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	2210      	movs	r2, #16
 800308a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	2200      	movs	r2, #0
 8003092:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	687a      	ldr	r2, [r7, #4]
 8003098:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	893a      	ldrh	r2, [r7, #8]
 800309e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	2200      	movs	r2, #0
 80030a4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030aa:	b29b      	uxth	r3, r3
 80030ac:	2bff      	cmp	r3, #255	; 0xff
 80030ae:	d90e      	bls.n	80030ce <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	22ff      	movs	r2, #255	; 0xff
 80030b4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030ba:	b2da      	uxtb	r2, r3
 80030bc:	8979      	ldrh	r1, [r7, #10]
 80030be:	4b51      	ldr	r3, [pc, #324]	; (8003204 <HAL_I2C_Master_Transmit+0x1e0>)
 80030c0:	9300      	str	r3, [sp, #0]
 80030c2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80030c6:	68f8      	ldr	r0, [r7, #12]
 80030c8:	f000 fbd0 	bl	800386c <I2C_TransferConfig>
 80030cc:	e06c      	b.n	80031a8 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030d2:	b29a      	uxth	r2, r3
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030dc:	b2da      	uxtb	r2, r3
 80030de:	8979      	ldrh	r1, [r7, #10]
 80030e0:	4b48      	ldr	r3, [pc, #288]	; (8003204 <HAL_I2C_Master_Transmit+0x1e0>)
 80030e2:	9300      	str	r3, [sp, #0]
 80030e4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80030e8:	68f8      	ldr	r0, [r7, #12]
 80030ea:	f000 fbbf 	bl	800386c <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80030ee:	e05b      	b.n	80031a8 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80030f0:	697a      	ldr	r2, [r7, #20]
 80030f2:	6a39      	ldr	r1, [r7, #32]
 80030f4:	68f8      	ldr	r0, [r7, #12]
 80030f6:	f000 f9e3 	bl	80034c0 <I2C_WaitOnTXISFlagUntilTimeout>
 80030fa:	4603      	mov	r3, r0
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d001      	beq.n	8003104 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8003100:	2301      	movs	r3, #1
 8003102:	e07b      	b.n	80031fc <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003108:	781a      	ldrb	r2, [r3, #0]
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003114:	1c5a      	adds	r2, r3, #1
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800311e:	b29b      	uxth	r3, r3
 8003120:	3b01      	subs	r3, #1
 8003122:	b29a      	uxth	r2, r3
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800312c:	3b01      	subs	r3, #1
 800312e:	b29a      	uxth	r2, r3
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003138:	b29b      	uxth	r3, r3
 800313a:	2b00      	cmp	r3, #0
 800313c:	d034      	beq.n	80031a8 <HAL_I2C_Master_Transmit+0x184>
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003142:	2b00      	cmp	r3, #0
 8003144:	d130      	bne.n	80031a8 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003146:	697b      	ldr	r3, [r7, #20]
 8003148:	9300      	str	r3, [sp, #0]
 800314a:	6a3b      	ldr	r3, [r7, #32]
 800314c:	2200      	movs	r2, #0
 800314e:	2180      	movs	r1, #128	; 0x80
 8003150:	68f8      	ldr	r0, [r7, #12]
 8003152:	f000 f975 	bl	8003440 <I2C_WaitOnFlagUntilTimeout>
 8003156:	4603      	mov	r3, r0
 8003158:	2b00      	cmp	r3, #0
 800315a:	d001      	beq.n	8003160 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 800315c:	2301      	movs	r3, #1
 800315e:	e04d      	b.n	80031fc <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003164:	b29b      	uxth	r3, r3
 8003166:	2bff      	cmp	r3, #255	; 0xff
 8003168:	d90e      	bls.n	8003188 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	22ff      	movs	r2, #255	; 0xff
 800316e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003174:	b2da      	uxtb	r2, r3
 8003176:	8979      	ldrh	r1, [r7, #10]
 8003178:	2300      	movs	r3, #0
 800317a:	9300      	str	r3, [sp, #0]
 800317c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003180:	68f8      	ldr	r0, [r7, #12]
 8003182:	f000 fb73 	bl	800386c <I2C_TransferConfig>
 8003186:	e00f      	b.n	80031a8 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800318c:	b29a      	uxth	r2, r3
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003196:	b2da      	uxtb	r2, r3
 8003198:	8979      	ldrh	r1, [r7, #10]
 800319a:	2300      	movs	r3, #0
 800319c:	9300      	str	r3, [sp, #0]
 800319e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80031a2:	68f8      	ldr	r0, [r7, #12]
 80031a4:	f000 fb62 	bl	800386c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031ac:	b29b      	uxth	r3, r3
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d19e      	bne.n	80030f0 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80031b2:	697a      	ldr	r2, [r7, #20]
 80031b4:	6a39      	ldr	r1, [r7, #32]
 80031b6:	68f8      	ldr	r0, [r7, #12]
 80031b8:	f000 f9c2 	bl	8003540 <I2C_WaitOnSTOPFlagUntilTimeout>
 80031bc:	4603      	mov	r3, r0
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d001      	beq.n	80031c6 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 80031c2:	2301      	movs	r3, #1
 80031c4:	e01a      	b.n	80031fc <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	2220      	movs	r2, #32
 80031cc:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	6859      	ldr	r1, [r3, #4]
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	681a      	ldr	r2, [r3, #0]
 80031d8:	4b0b      	ldr	r3, [pc, #44]	; (8003208 <HAL_I2C_Master_Transmit+0x1e4>)
 80031da:	400b      	ands	r3, r1
 80031dc:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	2220      	movs	r2, #32
 80031e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	2200      	movs	r2, #0
 80031ea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	2200      	movs	r2, #0
 80031f2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80031f6:	2300      	movs	r3, #0
 80031f8:	e000      	b.n	80031fc <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 80031fa:	2302      	movs	r3, #2
  }
}
 80031fc:	4618      	mov	r0, r3
 80031fe:	3718      	adds	r7, #24
 8003200:	46bd      	mov	sp, r7
 8003202:	bd80      	pop	{r7, pc}
 8003204:	80002000 	.word	0x80002000
 8003208:	fe00e800 	.word	0xfe00e800

0800320c <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 800320c:	b580      	push	{r7, lr}
 800320e:	b088      	sub	sp, #32
 8003210:	af02      	add	r7, sp, #8
 8003212:	60f8      	str	r0, [r7, #12]
 8003214:	607a      	str	r2, [r7, #4]
 8003216:	461a      	mov	r2, r3
 8003218:	460b      	mov	r3, r1
 800321a:	817b      	strh	r3, [r7, #10]
 800321c:	4613      	mov	r3, r2
 800321e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003226:	b2db      	uxtb	r3, r3
 8003228:	2b20      	cmp	r3, #32
 800322a:	f040 80db 	bne.w	80033e4 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003234:	2b01      	cmp	r3, #1
 8003236:	d101      	bne.n	800323c <HAL_I2C_Master_Receive+0x30>
 8003238:	2302      	movs	r3, #2
 800323a:	e0d4      	b.n	80033e6 <HAL_I2C_Master_Receive+0x1da>
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	2201      	movs	r2, #1
 8003240:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003244:	f7ff f82e 	bl	80022a4 <HAL_GetTick>
 8003248:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800324a:	697b      	ldr	r3, [r7, #20]
 800324c:	9300      	str	r3, [sp, #0]
 800324e:	2319      	movs	r3, #25
 8003250:	2201      	movs	r2, #1
 8003252:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003256:	68f8      	ldr	r0, [r7, #12]
 8003258:	f000 f8f2 	bl	8003440 <I2C_WaitOnFlagUntilTimeout>
 800325c:	4603      	mov	r3, r0
 800325e:	2b00      	cmp	r3, #0
 8003260:	d001      	beq.n	8003266 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8003262:	2301      	movs	r3, #1
 8003264:	e0bf      	b.n	80033e6 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	2222      	movs	r2, #34	; 0x22
 800326a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	2210      	movs	r2, #16
 8003272:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	2200      	movs	r2, #0
 800327a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	687a      	ldr	r2, [r7, #4]
 8003280:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	893a      	ldrh	r2, [r7, #8]
 8003286:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	2200      	movs	r2, #0
 800328c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003292:	b29b      	uxth	r3, r3
 8003294:	2bff      	cmp	r3, #255	; 0xff
 8003296:	d90e      	bls.n	80032b6 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	22ff      	movs	r2, #255	; 0xff
 800329c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032a2:	b2da      	uxtb	r2, r3
 80032a4:	8979      	ldrh	r1, [r7, #10]
 80032a6:	4b52      	ldr	r3, [pc, #328]	; (80033f0 <HAL_I2C_Master_Receive+0x1e4>)
 80032a8:	9300      	str	r3, [sp, #0]
 80032aa:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80032ae:	68f8      	ldr	r0, [r7, #12]
 80032b0:	f000 fadc 	bl	800386c <I2C_TransferConfig>
 80032b4:	e06d      	b.n	8003392 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032ba:	b29a      	uxth	r2, r3
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032c4:	b2da      	uxtb	r2, r3
 80032c6:	8979      	ldrh	r1, [r7, #10]
 80032c8:	4b49      	ldr	r3, [pc, #292]	; (80033f0 <HAL_I2C_Master_Receive+0x1e4>)
 80032ca:	9300      	str	r3, [sp, #0]
 80032cc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80032d0:	68f8      	ldr	r0, [r7, #12]
 80032d2:	f000 facb 	bl	800386c <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 80032d6:	e05c      	b.n	8003392 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80032d8:	697a      	ldr	r2, [r7, #20]
 80032da:	6a39      	ldr	r1, [r7, #32]
 80032dc:	68f8      	ldr	r0, [r7, #12]
 80032de:	f000 f96b 	bl	80035b8 <I2C_WaitOnRXNEFlagUntilTimeout>
 80032e2:	4603      	mov	r3, r0
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d001      	beq.n	80032ec <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 80032e8:	2301      	movs	r3, #1
 80032ea:	e07c      	b.n	80033e6 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032f6:	b2d2      	uxtb	r2, r2
 80032f8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032fe:	1c5a      	adds	r2, r3, #1
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003308:	3b01      	subs	r3, #1
 800330a:	b29a      	uxth	r2, r3
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003314:	b29b      	uxth	r3, r3
 8003316:	3b01      	subs	r3, #1
 8003318:	b29a      	uxth	r2, r3
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003322:	b29b      	uxth	r3, r3
 8003324:	2b00      	cmp	r3, #0
 8003326:	d034      	beq.n	8003392 <HAL_I2C_Master_Receive+0x186>
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800332c:	2b00      	cmp	r3, #0
 800332e:	d130      	bne.n	8003392 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003330:	697b      	ldr	r3, [r7, #20]
 8003332:	9300      	str	r3, [sp, #0]
 8003334:	6a3b      	ldr	r3, [r7, #32]
 8003336:	2200      	movs	r2, #0
 8003338:	2180      	movs	r1, #128	; 0x80
 800333a:	68f8      	ldr	r0, [r7, #12]
 800333c:	f000 f880 	bl	8003440 <I2C_WaitOnFlagUntilTimeout>
 8003340:	4603      	mov	r3, r0
 8003342:	2b00      	cmp	r3, #0
 8003344:	d001      	beq.n	800334a <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8003346:	2301      	movs	r3, #1
 8003348:	e04d      	b.n	80033e6 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800334e:	b29b      	uxth	r3, r3
 8003350:	2bff      	cmp	r3, #255	; 0xff
 8003352:	d90e      	bls.n	8003372 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	22ff      	movs	r2, #255	; 0xff
 8003358:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800335e:	b2da      	uxtb	r2, r3
 8003360:	8979      	ldrh	r1, [r7, #10]
 8003362:	2300      	movs	r3, #0
 8003364:	9300      	str	r3, [sp, #0]
 8003366:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800336a:	68f8      	ldr	r0, [r7, #12]
 800336c:	f000 fa7e 	bl	800386c <I2C_TransferConfig>
 8003370:	e00f      	b.n	8003392 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003376:	b29a      	uxth	r2, r3
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003380:	b2da      	uxtb	r2, r3
 8003382:	8979      	ldrh	r1, [r7, #10]
 8003384:	2300      	movs	r3, #0
 8003386:	9300      	str	r3, [sp, #0]
 8003388:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800338c:	68f8      	ldr	r0, [r7, #12]
 800338e:	f000 fa6d 	bl	800386c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003396:	b29b      	uxth	r3, r3
 8003398:	2b00      	cmp	r3, #0
 800339a:	d19d      	bne.n	80032d8 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800339c:	697a      	ldr	r2, [r7, #20]
 800339e:	6a39      	ldr	r1, [r7, #32]
 80033a0:	68f8      	ldr	r0, [r7, #12]
 80033a2:	f000 f8cd 	bl	8003540 <I2C_WaitOnSTOPFlagUntilTimeout>
 80033a6:	4603      	mov	r3, r0
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d001      	beq.n	80033b0 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 80033ac:	2301      	movs	r3, #1
 80033ae:	e01a      	b.n	80033e6 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	2220      	movs	r2, #32
 80033b6:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	6859      	ldr	r1, [r3, #4]
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	681a      	ldr	r2, [r3, #0]
 80033c2:	4b0c      	ldr	r3, [pc, #48]	; (80033f4 <HAL_I2C_Master_Receive+0x1e8>)
 80033c4:	400b      	ands	r3, r1
 80033c6:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	2220      	movs	r2, #32
 80033cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	2200      	movs	r2, #0
 80033d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	2200      	movs	r2, #0
 80033dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80033e0:	2300      	movs	r3, #0
 80033e2:	e000      	b.n	80033e6 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 80033e4:	2302      	movs	r3, #2
  }
}
 80033e6:	4618      	mov	r0, r3
 80033e8:	3718      	adds	r7, #24
 80033ea:	46bd      	mov	sp, r7
 80033ec:	bd80      	pop	{r7, pc}
 80033ee:	bf00      	nop
 80033f0:	80002400 	.word	0x80002400
 80033f4:	fe00e800 	.word	0xfe00e800

080033f8 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80033f8:	b480      	push	{r7}
 80033fa:	b083      	sub	sp, #12
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	699b      	ldr	r3, [r3, #24]
 8003406:	f003 0302 	and.w	r3, r3, #2
 800340a:	2b02      	cmp	r3, #2
 800340c:	d103      	bne.n	8003416 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	2200      	movs	r2, #0
 8003414:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	699b      	ldr	r3, [r3, #24]
 800341c:	f003 0301 	and.w	r3, r3, #1
 8003420:	2b01      	cmp	r3, #1
 8003422:	d007      	beq.n	8003434 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	699a      	ldr	r2, [r3, #24]
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	f042 0201 	orr.w	r2, r2, #1
 8003432:	619a      	str	r2, [r3, #24]
  }
}
 8003434:	bf00      	nop
 8003436:	370c      	adds	r7, #12
 8003438:	46bd      	mov	sp, r7
 800343a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800343e:	4770      	bx	lr

08003440 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003440:	b580      	push	{r7, lr}
 8003442:	b084      	sub	sp, #16
 8003444:	af00      	add	r7, sp, #0
 8003446:	60f8      	str	r0, [r7, #12]
 8003448:	60b9      	str	r1, [r7, #8]
 800344a:	603b      	str	r3, [r7, #0]
 800344c:	4613      	mov	r3, r2
 800344e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003450:	e022      	b.n	8003498 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003452:	683b      	ldr	r3, [r7, #0]
 8003454:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003458:	d01e      	beq.n	8003498 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800345a:	f7fe ff23 	bl	80022a4 <HAL_GetTick>
 800345e:	4602      	mov	r2, r0
 8003460:	69bb      	ldr	r3, [r7, #24]
 8003462:	1ad3      	subs	r3, r2, r3
 8003464:	683a      	ldr	r2, [r7, #0]
 8003466:	429a      	cmp	r2, r3
 8003468:	d302      	bcc.n	8003470 <I2C_WaitOnFlagUntilTimeout+0x30>
 800346a:	683b      	ldr	r3, [r7, #0]
 800346c:	2b00      	cmp	r3, #0
 800346e:	d113      	bne.n	8003498 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003474:	f043 0220 	orr.w	r2, r3, #32
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	2220      	movs	r2, #32
 8003480:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	2200      	movs	r2, #0
 8003488:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	2200      	movs	r2, #0
 8003490:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8003494:	2301      	movs	r3, #1
 8003496:	e00f      	b.n	80034b8 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	699a      	ldr	r2, [r3, #24]
 800349e:	68bb      	ldr	r3, [r7, #8]
 80034a0:	4013      	ands	r3, r2
 80034a2:	68ba      	ldr	r2, [r7, #8]
 80034a4:	429a      	cmp	r2, r3
 80034a6:	bf0c      	ite	eq
 80034a8:	2301      	moveq	r3, #1
 80034aa:	2300      	movne	r3, #0
 80034ac:	b2db      	uxtb	r3, r3
 80034ae:	461a      	mov	r2, r3
 80034b0:	79fb      	ldrb	r3, [r7, #7]
 80034b2:	429a      	cmp	r2, r3
 80034b4:	d0cd      	beq.n	8003452 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80034b6:	2300      	movs	r3, #0
}
 80034b8:	4618      	mov	r0, r3
 80034ba:	3710      	adds	r7, #16
 80034bc:	46bd      	mov	sp, r7
 80034be:	bd80      	pop	{r7, pc}

080034c0 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80034c0:	b580      	push	{r7, lr}
 80034c2:	b084      	sub	sp, #16
 80034c4:	af00      	add	r7, sp, #0
 80034c6:	60f8      	str	r0, [r7, #12]
 80034c8:	60b9      	str	r1, [r7, #8]
 80034ca:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80034cc:	e02c      	b.n	8003528 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80034ce:	687a      	ldr	r2, [r7, #4]
 80034d0:	68b9      	ldr	r1, [r7, #8]
 80034d2:	68f8      	ldr	r0, [r7, #12]
 80034d4:	f000 f8ea 	bl	80036ac <I2C_IsErrorOccurred>
 80034d8:	4603      	mov	r3, r0
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d001      	beq.n	80034e2 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80034de:	2301      	movs	r3, #1
 80034e0:	e02a      	b.n	8003538 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80034e2:	68bb      	ldr	r3, [r7, #8]
 80034e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034e8:	d01e      	beq.n	8003528 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80034ea:	f7fe fedb 	bl	80022a4 <HAL_GetTick>
 80034ee:	4602      	mov	r2, r0
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	1ad3      	subs	r3, r2, r3
 80034f4:	68ba      	ldr	r2, [r7, #8]
 80034f6:	429a      	cmp	r2, r3
 80034f8:	d302      	bcc.n	8003500 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80034fa:	68bb      	ldr	r3, [r7, #8]
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d113      	bne.n	8003528 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003504:	f043 0220 	orr.w	r2, r3, #32
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	2220      	movs	r2, #32
 8003510:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	2200      	movs	r2, #0
 8003518:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	2200      	movs	r2, #0
 8003520:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8003524:	2301      	movs	r3, #1
 8003526:	e007      	b.n	8003538 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	699b      	ldr	r3, [r3, #24]
 800352e:	f003 0302 	and.w	r3, r3, #2
 8003532:	2b02      	cmp	r3, #2
 8003534:	d1cb      	bne.n	80034ce <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003536:	2300      	movs	r3, #0
}
 8003538:	4618      	mov	r0, r3
 800353a:	3710      	adds	r7, #16
 800353c:	46bd      	mov	sp, r7
 800353e:	bd80      	pop	{r7, pc}

08003540 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003540:	b580      	push	{r7, lr}
 8003542:	b084      	sub	sp, #16
 8003544:	af00      	add	r7, sp, #0
 8003546:	60f8      	str	r0, [r7, #12]
 8003548:	60b9      	str	r1, [r7, #8]
 800354a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800354c:	e028      	b.n	80035a0 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800354e:	687a      	ldr	r2, [r7, #4]
 8003550:	68b9      	ldr	r1, [r7, #8]
 8003552:	68f8      	ldr	r0, [r7, #12]
 8003554:	f000 f8aa 	bl	80036ac <I2C_IsErrorOccurred>
 8003558:	4603      	mov	r3, r0
 800355a:	2b00      	cmp	r3, #0
 800355c:	d001      	beq.n	8003562 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800355e:	2301      	movs	r3, #1
 8003560:	e026      	b.n	80035b0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003562:	f7fe fe9f 	bl	80022a4 <HAL_GetTick>
 8003566:	4602      	mov	r2, r0
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	1ad3      	subs	r3, r2, r3
 800356c:	68ba      	ldr	r2, [r7, #8]
 800356e:	429a      	cmp	r2, r3
 8003570:	d302      	bcc.n	8003578 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003572:	68bb      	ldr	r3, [r7, #8]
 8003574:	2b00      	cmp	r3, #0
 8003576:	d113      	bne.n	80035a0 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800357c:	f043 0220 	orr.w	r2, r3, #32
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	2220      	movs	r2, #32
 8003588:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	2200      	movs	r2, #0
 8003590:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	2200      	movs	r2, #0
 8003598:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800359c:	2301      	movs	r3, #1
 800359e:	e007      	b.n	80035b0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	699b      	ldr	r3, [r3, #24]
 80035a6:	f003 0320 	and.w	r3, r3, #32
 80035aa:	2b20      	cmp	r3, #32
 80035ac:	d1cf      	bne.n	800354e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80035ae:	2300      	movs	r3, #0
}
 80035b0:	4618      	mov	r0, r3
 80035b2:	3710      	adds	r7, #16
 80035b4:	46bd      	mov	sp, r7
 80035b6:	bd80      	pop	{r7, pc}

080035b8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80035b8:	b580      	push	{r7, lr}
 80035ba:	b084      	sub	sp, #16
 80035bc:	af00      	add	r7, sp, #0
 80035be:	60f8      	str	r0, [r7, #12]
 80035c0:	60b9      	str	r1, [r7, #8]
 80035c2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80035c4:	e064      	b.n	8003690 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80035c6:	687a      	ldr	r2, [r7, #4]
 80035c8:	68b9      	ldr	r1, [r7, #8]
 80035ca:	68f8      	ldr	r0, [r7, #12]
 80035cc:	f000 f86e 	bl	80036ac <I2C_IsErrorOccurred>
 80035d0:	4603      	mov	r3, r0
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d001      	beq.n	80035da <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80035d6:	2301      	movs	r3, #1
 80035d8:	e062      	b.n	80036a0 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	699b      	ldr	r3, [r3, #24]
 80035e0:	f003 0320 	and.w	r3, r3, #32
 80035e4:	2b20      	cmp	r3, #32
 80035e6:	d138      	bne.n	800365a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	699b      	ldr	r3, [r3, #24]
 80035ee:	f003 0304 	and.w	r3, r3, #4
 80035f2:	2b04      	cmp	r3, #4
 80035f4:	d105      	bne.n	8003602 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d001      	beq.n	8003602 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 80035fe:	2300      	movs	r3, #0
 8003600:	e04e      	b.n	80036a0 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	699b      	ldr	r3, [r3, #24]
 8003608:	f003 0310 	and.w	r3, r3, #16
 800360c:	2b10      	cmp	r3, #16
 800360e:	d107      	bne.n	8003620 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	2210      	movs	r2, #16
 8003616:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	2204      	movs	r2, #4
 800361c:	645a      	str	r2, [r3, #68]	; 0x44
 800361e:	e002      	b.n	8003626 <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	2200      	movs	r2, #0
 8003624:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	2220      	movs	r2, #32
 800362c:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	6859      	ldr	r1, [r3, #4]
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	681a      	ldr	r2, [r3, #0]
 8003638:	4b1b      	ldr	r3, [pc, #108]	; (80036a8 <I2C_WaitOnRXNEFlagUntilTimeout+0xf0>)
 800363a:	400b      	ands	r3, r1
 800363c:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	2220      	movs	r2, #32
 8003642:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	2200      	movs	r2, #0
 800364a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	2200      	movs	r2, #0
 8003652:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8003656:	2301      	movs	r3, #1
 8003658:	e022      	b.n	80036a0 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800365a:	f7fe fe23 	bl	80022a4 <HAL_GetTick>
 800365e:	4602      	mov	r2, r0
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	1ad3      	subs	r3, r2, r3
 8003664:	68ba      	ldr	r2, [r7, #8]
 8003666:	429a      	cmp	r2, r3
 8003668:	d302      	bcc.n	8003670 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 800366a:	68bb      	ldr	r3, [r7, #8]
 800366c:	2b00      	cmp	r3, #0
 800366e:	d10f      	bne.n	8003690 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003674:	f043 0220 	orr.w	r2, r3, #32
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	2220      	movs	r2, #32
 8003680:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	2200      	movs	r2, #0
 8003688:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800368c:	2301      	movs	r3, #1
 800368e:	e007      	b.n	80036a0 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	699b      	ldr	r3, [r3, #24]
 8003696:	f003 0304 	and.w	r3, r3, #4
 800369a:	2b04      	cmp	r3, #4
 800369c:	d193      	bne.n	80035c6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800369e:	2300      	movs	r3, #0
}
 80036a0:	4618      	mov	r0, r3
 80036a2:	3710      	adds	r7, #16
 80036a4:	46bd      	mov	sp, r7
 80036a6:	bd80      	pop	{r7, pc}
 80036a8:	fe00e800 	.word	0xfe00e800

080036ac <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80036ac:	b580      	push	{r7, lr}
 80036ae:	b08a      	sub	sp, #40	; 0x28
 80036b0:	af00      	add	r7, sp, #0
 80036b2:	60f8      	str	r0, [r7, #12]
 80036b4:	60b9      	str	r1, [r7, #8]
 80036b6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80036b8:	2300      	movs	r3, #0
 80036ba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	699b      	ldr	r3, [r3, #24]
 80036c4:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80036c6:	2300      	movs	r3, #0
 80036c8:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80036ce:	69bb      	ldr	r3, [r7, #24]
 80036d0:	f003 0310 	and.w	r3, r3, #16
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d068      	beq.n	80037aa <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	2210      	movs	r2, #16
 80036de:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80036e0:	e049      	b.n	8003776 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80036e2:	68bb      	ldr	r3, [r7, #8]
 80036e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036e8:	d045      	beq.n	8003776 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80036ea:	f7fe fddb 	bl	80022a4 <HAL_GetTick>
 80036ee:	4602      	mov	r2, r0
 80036f0:	69fb      	ldr	r3, [r7, #28]
 80036f2:	1ad3      	subs	r3, r2, r3
 80036f4:	68ba      	ldr	r2, [r7, #8]
 80036f6:	429a      	cmp	r2, r3
 80036f8:	d302      	bcc.n	8003700 <I2C_IsErrorOccurred+0x54>
 80036fa:	68bb      	ldr	r3, [r7, #8]
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d13a      	bne.n	8003776 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	685b      	ldr	r3, [r3, #4]
 8003706:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800370a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003712:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	699b      	ldr	r3, [r3, #24]
 800371a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800371e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003722:	d121      	bne.n	8003768 <I2C_IsErrorOccurred+0xbc>
 8003724:	697b      	ldr	r3, [r7, #20]
 8003726:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800372a:	d01d      	beq.n	8003768 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 800372c:	7cfb      	ldrb	r3, [r7, #19]
 800372e:	2b20      	cmp	r3, #32
 8003730:	d01a      	beq.n	8003768 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	685a      	ldr	r2, [r3, #4]
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003740:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8003742:	f7fe fdaf 	bl	80022a4 <HAL_GetTick>
 8003746:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003748:	e00e      	b.n	8003768 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800374a:	f7fe fdab 	bl	80022a4 <HAL_GetTick>
 800374e:	4602      	mov	r2, r0
 8003750:	69fb      	ldr	r3, [r7, #28]
 8003752:	1ad3      	subs	r3, r2, r3
 8003754:	2b19      	cmp	r3, #25
 8003756:	d907      	bls.n	8003768 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 8003758:	6a3b      	ldr	r3, [r7, #32]
 800375a:	f043 0320 	orr.w	r3, r3, #32
 800375e:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8003760:	2301      	movs	r3, #1
 8003762:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8003766:	e006      	b.n	8003776 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	699b      	ldr	r3, [r3, #24]
 800376e:	f003 0320 	and.w	r3, r3, #32
 8003772:	2b20      	cmp	r3, #32
 8003774:	d1e9      	bne.n	800374a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	699b      	ldr	r3, [r3, #24]
 800377c:	f003 0320 	and.w	r3, r3, #32
 8003780:	2b20      	cmp	r3, #32
 8003782:	d003      	beq.n	800378c <I2C_IsErrorOccurred+0xe0>
 8003784:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003788:	2b00      	cmp	r3, #0
 800378a:	d0aa      	beq.n	80036e2 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800378c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003790:	2b00      	cmp	r3, #0
 8003792:	d103      	bne.n	800379c <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	2220      	movs	r2, #32
 800379a:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800379c:	6a3b      	ldr	r3, [r7, #32]
 800379e:	f043 0304 	orr.w	r3, r3, #4
 80037a2:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80037a4:	2301      	movs	r3, #1
 80037a6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	699b      	ldr	r3, [r3, #24]
 80037b0:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80037b2:	69bb      	ldr	r3, [r7, #24]
 80037b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d00b      	beq.n	80037d4 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80037bc:	6a3b      	ldr	r3, [r7, #32]
 80037be:	f043 0301 	orr.w	r3, r3, #1
 80037c2:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80037cc:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80037ce:	2301      	movs	r3, #1
 80037d0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80037d4:	69bb      	ldr	r3, [r7, #24]
 80037d6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d00b      	beq.n	80037f6 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80037de:	6a3b      	ldr	r3, [r7, #32]
 80037e0:	f043 0308 	orr.w	r3, r3, #8
 80037e4:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80037ee:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80037f0:	2301      	movs	r3, #1
 80037f2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80037f6:	69bb      	ldr	r3, [r7, #24]
 80037f8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d00b      	beq.n	8003818 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8003800:	6a3b      	ldr	r3, [r7, #32]
 8003802:	f043 0302 	orr.w	r3, r3, #2
 8003806:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003810:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003812:	2301      	movs	r3, #1
 8003814:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8003818:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800381c:	2b00      	cmp	r3, #0
 800381e:	d01c      	beq.n	800385a <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003820:	68f8      	ldr	r0, [r7, #12]
 8003822:	f7ff fde9 	bl	80033f8 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	6859      	ldr	r1, [r3, #4]
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	681a      	ldr	r2, [r3, #0]
 8003830:	4b0d      	ldr	r3, [pc, #52]	; (8003868 <I2C_IsErrorOccurred+0x1bc>)
 8003832:	400b      	ands	r3, r1
 8003834:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800383a:	6a3b      	ldr	r3, [r7, #32]
 800383c:	431a      	orrs	r2, r3
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	2220      	movs	r2, #32
 8003846:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	2200      	movs	r2, #0
 800384e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	2200      	movs	r2, #0
 8003856:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 800385a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800385e:	4618      	mov	r0, r3
 8003860:	3728      	adds	r7, #40	; 0x28
 8003862:	46bd      	mov	sp, r7
 8003864:	bd80      	pop	{r7, pc}
 8003866:	bf00      	nop
 8003868:	fe00e800 	.word	0xfe00e800

0800386c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800386c:	b580      	push	{r7, lr}
 800386e:	b086      	sub	sp, #24
 8003870:	af00      	add	r7, sp, #0
 8003872:	60f8      	str	r0, [r7, #12]
 8003874:	607b      	str	r3, [r7, #4]
 8003876:	460b      	mov	r3, r1
 8003878:	817b      	strh	r3, [r7, #10]
 800387a:	4613      	mov	r3, r2
 800387c:	727b      	strb	r3, [r7, #9]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	4a2f      	ldr	r2, [pc, #188]	; (8003940 <I2C_TransferConfig+0xd4>)
 8003884:	4293      	cmp	r3, r2
 8003886:	d013      	beq.n	80038b0 <I2C_TransferConfig+0x44>
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	4a2d      	ldr	r2, [pc, #180]	; (8003944 <I2C_TransferConfig+0xd8>)
 800388e:	4293      	cmp	r3, r2
 8003890:	d00e      	beq.n	80038b0 <I2C_TransferConfig+0x44>
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	4a2c      	ldr	r2, [pc, #176]	; (8003948 <I2C_TransferConfig+0xdc>)
 8003898:	4293      	cmp	r3, r2
 800389a:	d009      	beq.n	80038b0 <I2C_TransferConfig+0x44>
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	4a2a      	ldr	r2, [pc, #168]	; (800394c <I2C_TransferConfig+0xe0>)
 80038a2:	4293      	cmp	r3, r2
 80038a4:	d004      	beq.n	80038b0 <I2C_TransferConfig+0x44>
 80038a6:	f641 3147 	movw	r1, #6983	; 0x1b47
 80038aa:	4829      	ldr	r0, [pc, #164]	; (8003950 <I2C_TransferConfig+0xe4>)
 80038ac:	f7fe fa8b 	bl	8001dc6 <assert_failed>
  assert_param(IS_TRANSFER_MODE(Mode));
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80038b6:	d00b      	beq.n	80038d0 <I2C_TransferConfig+0x64>
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80038be:	d007      	beq.n	80038d0 <I2C_TransferConfig+0x64>
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d004      	beq.n	80038d0 <I2C_TransferConfig+0x64>
 80038c6:	f641 3148 	movw	r1, #6984	; 0x1b48
 80038ca:	4821      	ldr	r0, [pc, #132]	; (8003950 <I2C_TransferConfig+0xe4>)
 80038cc:	f7fe fa7b 	bl	8001dc6 <assert_failed>
  assert_param(IS_TRANSFER_REQUEST(Request));
 80038d0:	6a3b      	ldr	r3, [r7, #32]
 80038d2:	4a20      	ldr	r2, [pc, #128]	; (8003954 <I2C_TransferConfig+0xe8>)
 80038d4:	4293      	cmp	r3, r2
 80038d6:	d00f      	beq.n	80038f8 <I2C_TransferConfig+0x8c>
 80038d8:	6a3b      	ldr	r3, [r7, #32]
 80038da:	4a1f      	ldr	r2, [pc, #124]	; (8003958 <I2C_TransferConfig+0xec>)
 80038dc:	4293      	cmp	r3, r2
 80038de:	d00b      	beq.n	80038f8 <I2C_TransferConfig+0x8c>
 80038e0:	6a3b      	ldr	r3, [r7, #32]
 80038e2:	4a1e      	ldr	r2, [pc, #120]	; (800395c <I2C_TransferConfig+0xf0>)
 80038e4:	4293      	cmp	r3, r2
 80038e6:	d007      	beq.n	80038f8 <I2C_TransferConfig+0x8c>
 80038e8:	6a3b      	ldr	r3, [r7, #32]
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d004      	beq.n	80038f8 <I2C_TransferConfig+0x8c>
 80038ee:	f641 3149 	movw	r1, #6985	; 0x1b49
 80038f2:	4817      	ldr	r0, [pc, #92]	; (8003950 <I2C_TransferConfig+0xe4>)
 80038f4:	f7fe fa67 	bl	8001dc6 <assert_failed>

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80038f8:	897b      	ldrh	r3, [r7, #10]
 80038fa:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80038fe:	7a7b      	ldrb	r3, [r7, #9]
 8003900:	041b      	lsls	r3, r3, #16
 8003902:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003906:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800390c:	6a3b      	ldr	r3, [r7, #32]
 800390e:	4313      	orrs	r3, r2
 8003910:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003914:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	685a      	ldr	r2, [r3, #4]
 800391c:	6a3b      	ldr	r3, [r7, #32]
 800391e:	0d5b      	lsrs	r3, r3, #21
 8003920:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8003924:	4b0e      	ldr	r3, [pc, #56]	; (8003960 <I2C_TransferConfig+0xf4>)
 8003926:	430b      	orrs	r3, r1
 8003928:	43db      	mvns	r3, r3
 800392a:	ea02 0103 	and.w	r1, r2, r3
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	697a      	ldr	r2, [r7, #20]
 8003934:	430a      	orrs	r2, r1
 8003936:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8003938:	bf00      	nop
 800393a:	3718      	adds	r7, #24
 800393c:	46bd      	mov	sp, r7
 800393e:	bd80      	pop	{r7, pc}
 8003940:	40005400 	.word	0x40005400
 8003944:	40005800 	.word	0x40005800
 8003948:	40005c00 	.word	0x40005c00
 800394c:	40006000 	.word	0x40006000
 8003950:	0800eb50 	.word	0x0800eb50
 8003954:	80004000 	.word	0x80004000
 8003958:	80002400 	.word	0x80002400
 800395c:	80002000 	.word	0x80002000
 8003960:	03ff63ff 	.word	0x03ff63ff

08003964 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003964:	b580      	push	{r7, lr}
 8003966:	b082      	sub	sp, #8
 8003968:	af00      	add	r7, sp, #0
 800396a:	6078      	str	r0, [r7, #4]
 800396c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	4a32      	ldr	r2, [pc, #200]	; (8003a3c <HAL_I2CEx_ConfigAnalogFilter+0xd8>)
 8003974:	4293      	cmp	r3, r2
 8003976:	d012      	beq.n	800399e <HAL_I2CEx_ConfigAnalogFilter+0x3a>
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	4a30      	ldr	r2, [pc, #192]	; (8003a40 <HAL_I2CEx_ConfigAnalogFilter+0xdc>)
 800397e:	4293      	cmp	r3, r2
 8003980:	d00d      	beq.n	800399e <HAL_I2CEx_ConfigAnalogFilter+0x3a>
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	4a2f      	ldr	r2, [pc, #188]	; (8003a44 <HAL_I2CEx_ConfigAnalogFilter+0xe0>)
 8003988:	4293      	cmp	r3, r2
 800398a:	d008      	beq.n	800399e <HAL_I2CEx_ConfigAnalogFilter+0x3a>
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	4a2d      	ldr	r2, [pc, #180]	; (8003a48 <HAL_I2CEx_ConfigAnalogFilter+0xe4>)
 8003992:	4293      	cmp	r3, r2
 8003994:	d003      	beq.n	800399e <HAL_I2CEx_ConfigAnalogFilter+0x3a>
 8003996:	215e      	movs	r1, #94	; 0x5e
 8003998:	482c      	ldr	r0, [pc, #176]	; (8003a4c <HAL_I2CEx_ConfigAnalogFilter+0xe8>)
 800399a:	f7fe fa14 	bl	8001dc6 <assert_failed>
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));
 800399e:	683b      	ldr	r3, [r7, #0]
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d007      	beq.n	80039b4 <HAL_I2CEx_ConfigAnalogFilter+0x50>
 80039a4:	683b      	ldr	r3, [r7, #0]
 80039a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80039aa:	d003      	beq.n	80039b4 <HAL_I2CEx_ConfigAnalogFilter+0x50>
 80039ac:	215f      	movs	r1, #95	; 0x5f
 80039ae:	4827      	ldr	r0, [pc, #156]	; (8003a4c <HAL_I2CEx_ConfigAnalogFilter+0xe8>)
 80039b0:	f7fe fa09 	bl	8001dc6 <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_READY)
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80039ba:	b2db      	uxtb	r3, r3
 80039bc:	2b20      	cmp	r3, #32
 80039be:	d138      	bne.n	8003a32 <HAL_I2CEx_ConfigAnalogFilter+0xce>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80039c6:	2b01      	cmp	r3, #1
 80039c8:	d101      	bne.n	80039ce <HAL_I2CEx_ConfigAnalogFilter+0x6a>
 80039ca:	2302      	movs	r3, #2
 80039cc:	e032      	b.n	8003a34 <HAL_I2CEx_ConfigAnalogFilter+0xd0>
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	2201      	movs	r2, #1
 80039d2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	2224      	movs	r2, #36	; 0x24
 80039da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	681a      	ldr	r2, [r3, #0]
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	f022 0201 	bic.w	r2, r2, #1
 80039ec:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	681a      	ldr	r2, [r3, #0]
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80039fc:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	6819      	ldr	r1, [r3, #0]
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	683a      	ldr	r2, [r7, #0]
 8003a0a:	430a      	orrs	r2, r1
 8003a0c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	681a      	ldr	r2, [r3, #0]
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	f042 0201 	orr.w	r2, r2, #1
 8003a1c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	2220      	movs	r2, #32
 8003a22:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	2200      	movs	r2, #0
 8003a2a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003a2e:	2300      	movs	r3, #0
 8003a30:	e000      	b.n	8003a34 <HAL_I2CEx_ConfigAnalogFilter+0xd0>
  }
  else
  {
    return HAL_BUSY;
 8003a32:	2302      	movs	r3, #2
  }
}
 8003a34:	4618      	mov	r0, r3
 8003a36:	3708      	adds	r7, #8
 8003a38:	46bd      	mov	sp, r7
 8003a3a:	bd80      	pop	{r7, pc}
 8003a3c:	40005400 	.word	0x40005400
 8003a40:	40005800 	.word	0x40005800
 8003a44:	40005c00 	.word	0x40005c00
 8003a48:	40006000 	.word	0x40006000
 8003a4c:	0800eb88 	.word	0x0800eb88

08003a50 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003a50:	b580      	push	{r7, lr}
 8003a52:	b084      	sub	sp, #16
 8003a54:	af00      	add	r7, sp, #0
 8003a56:	6078      	str	r0, [r7, #4]
 8003a58:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg;

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	4a31      	ldr	r2, [pc, #196]	; (8003b24 <HAL_I2CEx_ConfigDigitalFilter+0xd4>)
 8003a60:	4293      	cmp	r3, r2
 8003a62:	d012      	beq.n	8003a8a <HAL_I2CEx_ConfigDigitalFilter+0x3a>
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	4a2f      	ldr	r2, [pc, #188]	; (8003b28 <HAL_I2CEx_ConfigDigitalFilter+0xd8>)
 8003a6a:	4293      	cmp	r3, r2
 8003a6c:	d00d      	beq.n	8003a8a <HAL_I2CEx_ConfigDigitalFilter+0x3a>
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	4a2e      	ldr	r2, [pc, #184]	; (8003b2c <HAL_I2CEx_ConfigDigitalFilter+0xdc>)
 8003a74:	4293      	cmp	r3, r2
 8003a76:	d008      	beq.n	8003a8a <HAL_I2CEx_ConfigDigitalFilter+0x3a>
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	4a2c      	ldr	r2, [pc, #176]	; (8003b30 <HAL_I2CEx_ConfigDigitalFilter+0xe0>)
 8003a7e:	4293      	cmp	r3, r2
 8003a80:	d003      	beq.n	8003a8a <HAL_I2CEx_ConfigDigitalFilter+0x3a>
 8003a82:	218c      	movs	r1, #140	; 0x8c
 8003a84:	482b      	ldr	r0, [pc, #172]	; (8003b34 <HAL_I2CEx_ConfigDigitalFilter+0xe4>)
 8003a86:	f7fe f99e 	bl	8001dc6 <assert_failed>
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));
 8003a8a:	683b      	ldr	r3, [r7, #0]
 8003a8c:	2b0f      	cmp	r3, #15
 8003a8e:	d903      	bls.n	8003a98 <HAL_I2CEx_ConfigDigitalFilter+0x48>
 8003a90:	218d      	movs	r1, #141	; 0x8d
 8003a92:	4828      	ldr	r0, [pc, #160]	; (8003b34 <HAL_I2CEx_ConfigDigitalFilter+0xe4>)
 8003a94:	f7fe f997 	bl	8001dc6 <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003a9e:	b2db      	uxtb	r3, r3
 8003aa0:	2b20      	cmp	r3, #32
 8003aa2:	d139      	bne.n	8003b18 <HAL_I2CEx_ConfigDigitalFilter+0xc8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003aaa:	2b01      	cmp	r3, #1
 8003aac:	d101      	bne.n	8003ab2 <HAL_I2CEx_ConfigDigitalFilter+0x62>
 8003aae:	2302      	movs	r3, #2
 8003ab0:	e033      	b.n	8003b1a <HAL_I2CEx_ConfigDigitalFilter+0xca>
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	2201      	movs	r2, #1
 8003ab6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	2224      	movs	r2, #36	; 0x24
 8003abe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	681a      	ldr	r2, [r3, #0]
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	f022 0201 	bic.w	r2, r2, #1
 8003ad0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003ae0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003ae2:	683b      	ldr	r3, [r7, #0]
 8003ae4:	021b      	lsls	r3, r3, #8
 8003ae6:	68fa      	ldr	r2, [r7, #12]
 8003ae8:	4313      	orrs	r3, r2
 8003aea:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	68fa      	ldr	r2, [r7, #12]
 8003af2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	681a      	ldr	r2, [r3, #0]
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	f042 0201 	orr.w	r2, r2, #1
 8003b02:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	2220      	movs	r2, #32
 8003b08:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	2200      	movs	r2, #0
 8003b10:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003b14:	2300      	movs	r3, #0
 8003b16:	e000      	b.n	8003b1a <HAL_I2CEx_ConfigDigitalFilter+0xca>
  }
  else
  {
    return HAL_BUSY;
 8003b18:	2302      	movs	r3, #2
  }
}
 8003b1a:	4618      	mov	r0, r3
 8003b1c:	3710      	adds	r7, #16
 8003b1e:	46bd      	mov	sp, r7
 8003b20:	bd80      	pop	{r7, pc}
 8003b22:	bf00      	nop
 8003b24:	40005400 	.word	0x40005400
 8003b28:	40005800 	.word	0x40005800
 8003b2c:	40005c00 	.word	0x40005c00
 8003b30:	40006000 	.word	0x40006000
 8003b34:	0800eb88 	.word	0x0800eb88

08003b38 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003b38:	b580      	push	{r7, lr}
 8003b3a:	b082      	sub	sp, #8
 8003b3c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8003b3e:	2300      	movs	r3, #0
 8003b40:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8003b42:	4b23      	ldr	r3, [pc, #140]	; (8003bd0 <HAL_PWREx_EnableOverDrive+0x98>)
 8003b44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b46:	4a22      	ldr	r2, [pc, #136]	; (8003bd0 <HAL_PWREx_EnableOverDrive+0x98>)
 8003b48:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b4c:	6413      	str	r3, [r2, #64]	; 0x40
 8003b4e:	4b20      	ldr	r3, [pc, #128]	; (8003bd0 <HAL_PWREx_EnableOverDrive+0x98>)
 8003b50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b56:	603b      	str	r3, [r7, #0]
 8003b58:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8003b5a:	4b1e      	ldr	r3, [pc, #120]	; (8003bd4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	4a1d      	ldr	r2, [pc, #116]	; (8003bd4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003b60:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b64:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003b66:	f7fe fb9d 	bl	80022a4 <HAL_GetTick>
 8003b6a:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003b6c:	e009      	b.n	8003b82 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003b6e:	f7fe fb99 	bl	80022a4 <HAL_GetTick>
 8003b72:	4602      	mov	r2, r0
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	1ad3      	subs	r3, r2, r3
 8003b78:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003b7c:	d901      	bls.n	8003b82 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8003b7e:	2303      	movs	r3, #3
 8003b80:	e022      	b.n	8003bc8 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003b82:	4b14      	ldr	r3, [pc, #80]	; (8003bd4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003b84:	685b      	ldr	r3, [r3, #4]
 8003b86:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b8a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b8e:	d1ee      	bne.n	8003b6e <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003b90:	4b10      	ldr	r3, [pc, #64]	; (8003bd4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	4a0f      	ldr	r2, [pc, #60]	; (8003bd4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003b96:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003b9a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003b9c:	f7fe fb82 	bl	80022a4 <HAL_GetTick>
 8003ba0:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003ba2:	e009      	b.n	8003bb8 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003ba4:	f7fe fb7e 	bl	80022a4 <HAL_GetTick>
 8003ba8:	4602      	mov	r2, r0
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	1ad3      	subs	r3, r2, r3
 8003bae:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003bb2:	d901      	bls.n	8003bb8 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8003bb4:	2303      	movs	r3, #3
 8003bb6:	e007      	b.n	8003bc8 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003bb8:	4b06      	ldr	r3, [pc, #24]	; (8003bd4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003bba:	685b      	ldr	r3, [r3, #4]
 8003bbc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bc0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003bc4:	d1ee      	bne.n	8003ba4 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8003bc6:	2300      	movs	r3, #0
}
 8003bc8:	4618      	mov	r0, r3
 8003bca:	3708      	adds	r7, #8
 8003bcc:	46bd      	mov	sp, r7
 8003bce:	bd80      	pop	{r7, pc}
 8003bd0:	40023800 	.word	0x40023800
 8003bd4:	40007000 	.word	0x40007000

08003bd8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003bd8:	b580      	push	{r7, lr}
 8003bda:	b086      	sub	sp, #24
 8003bdc:	af00      	add	r7, sp, #0
 8003bde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8003be0:	2300      	movs	r3, #0
 8003be2:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d101      	bne.n	8003bee <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8003bea:	2301      	movs	r3, #1
 8003bec:	e345      	b.n	800427a <HAL_RCC_OscConfig+0x6a2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	2b0f      	cmp	r3, #15
 8003bf4:	d904      	bls.n	8003c00 <HAL_RCC_OscConfig+0x28>
 8003bf6:	f240 1163 	movw	r1, #355	; 0x163
 8003bfa:	4892      	ldr	r0, [pc, #584]	; (8003e44 <HAL_RCC_OscConfig+0x26c>)
 8003bfc:	f7fe f8e3 	bl	8001dc6 <assert_failed>

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	f003 0301 	and.w	r3, r3, #1
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	f000 809a 	beq.w	8003d42 <HAL_RCC_OscConfig+0x16a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	685b      	ldr	r3, [r3, #4]
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d00e      	beq.n	8003c34 <HAL_RCC_OscConfig+0x5c>
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	685b      	ldr	r3, [r3, #4]
 8003c1a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c1e:	d009      	beq.n	8003c34 <HAL_RCC_OscConfig+0x5c>
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	685b      	ldr	r3, [r3, #4]
 8003c24:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003c28:	d004      	beq.n	8003c34 <HAL_RCC_OscConfig+0x5c>
 8003c2a:	f240 1169 	movw	r1, #361	; 0x169
 8003c2e:	4885      	ldr	r0, [pc, #532]	; (8003e44 <HAL_RCC_OscConfig+0x26c>)
 8003c30:	f7fe f8c9 	bl	8001dc6 <assert_failed>
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003c34:	4b84      	ldr	r3, [pc, #528]	; (8003e48 <HAL_RCC_OscConfig+0x270>)
 8003c36:	689b      	ldr	r3, [r3, #8]
 8003c38:	f003 030c 	and.w	r3, r3, #12
 8003c3c:	2b04      	cmp	r3, #4
 8003c3e:	d00c      	beq.n	8003c5a <HAL_RCC_OscConfig+0x82>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003c40:	4b81      	ldr	r3, [pc, #516]	; (8003e48 <HAL_RCC_OscConfig+0x270>)
 8003c42:	689b      	ldr	r3, [r3, #8]
 8003c44:	f003 030c 	and.w	r3, r3, #12
 8003c48:	2b08      	cmp	r3, #8
 8003c4a:	d112      	bne.n	8003c72 <HAL_RCC_OscConfig+0x9a>
 8003c4c:	4b7e      	ldr	r3, [pc, #504]	; (8003e48 <HAL_RCC_OscConfig+0x270>)
 8003c4e:	685b      	ldr	r3, [r3, #4]
 8003c50:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c54:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003c58:	d10b      	bne.n	8003c72 <HAL_RCC_OscConfig+0x9a>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c5a:	4b7b      	ldr	r3, [pc, #492]	; (8003e48 <HAL_RCC_OscConfig+0x270>)
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d06c      	beq.n	8003d40 <HAL_RCC_OscConfig+0x168>
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	685b      	ldr	r3, [r3, #4]
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d168      	bne.n	8003d40 <HAL_RCC_OscConfig+0x168>
      {
        return HAL_ERROR;
 8003c6e:	2301      	movs	r3, #1
 8003c70:	e303      	b.n	800427a <HAL_RCC_OscConfig+0x6a2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	685b      	ldr	r3, [r3, #4]
 8003c76:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c7a:	d106      	bne.n	8003c8a <HAL_RCC_OscConfig+0xb2>
 8003c7c:	4b72      	ldr	r3, [pc, #456]	; (8003e48 <HAL_RCC_OscConfig+0x270>)
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	4a71      	ldr	r2, [pc, #452]	; (8003e48 <HAL_RCC_OscConfig+0x270>)
 8003c82:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c86:	6013      	str	r3, [r2, #0]
 8003c88:	e02e      	b.n	8003ce8 <HAL_RCC_OscConfig+0x110>
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	685b      	ldr	r3, [r3, #4]
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d10c      	bne.n	8003cac <HAL_RCC_OscConfig+0xd4>
 8003c92:	4b6d      	ldr	r3, [pc, #436]	; (8003e48 <HAL_RCC_OscConfig+0x270>)
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	4a6c      	ldr	r2, [pc, #432]	; (8003e48 <HAL_RCC_OscConfig+0x270>)
 8003c98:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c9c:	6013      	str	r3, [r2, #0]
 8003c9e:	4b6a      	ldr	r3, [pc, #424]	; (8003e48 <HAL_RCC_OscConfig+0x270>)
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	4a69      	ldr	r2, [pc, #420]	; (8003e48 <HAL_RCC_OscConfig+0x270>)
 8003ca4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003ca8:	6013      	str	r3, [r2, #0]
 8003caa:	e01d      	b.n	8003ce8 <HAL_RCC_OscConfig+0x110>
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	685b      	ldr	r3, [r3, #4]
 8003cb0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003cb4:	d10c      	bne.n	8003cd0 <HAL_RCC_OscConfig+0xf8>
 8003cb6:	4b64      	ldr	r3, [pc, #400]	; (8003e48 <HAL_RCC_OscConfig+0x270>)
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	4a63      	ldr	r2, [pc, #396]	; (8003e48 <HAL_RCC_OscConfig+0x270>)
 8003cbc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003cc0:	6013      	str	r3, [r2, #0]
 8003cc2:	4b61      	ldr	r3, [pc, #388]	; (8003e48 <HAL_RCC_OscConfig+0x270>)
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	4a60      	ldr	r2, [pc, #384]	; (8003e48 <HAL_RCC_OscConfig+0x270>)
 8003cc8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ccc:	6013      	str	r3, [r2, #0]
 8003cce:	e00b      	b.n	8003ce8 <HAL_RCC_OscConfig+0x110>
 8003cd0:	4b5d      	ldr	r3, [pc, #372]	; (8003e48 <HAL_RCC_OscConfig+0x270>)
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	4a5c      	ldr	r2, [pc, #368]	; (8003e48 <HAL_RCC_OscConfig+0x270>)
 8003cd6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003cda:	6013      	str	r3, [r2, #0]
 8003cdc:	4b5a      	ldr	r3, [pc, #360]	; (8003e48 <HAL_RCC_OscConfig+0x270>)
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	4a59      	ldr	r2, [pc, #356]	; (8003e48 <HAL_RCC_OscConfig+0x270>)
 8003ce2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003ce6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	685b      	ldr	r3, [r3, #4]
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d013      	beq.n	8003d18 <HAL_RCC_OscConfig+0x140>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cf0:	f7fe fad8 	bl	80022a4 <HAL_GetTick>
 8003cf4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003cf6:	e008      	b.n	8003d0a <HAL_RCC_OscConfig+0x132>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003cf8:	f7fe fad4 	bl	80022a4 <HAL_GetTick>
 8003cfc:	4602      	mov	r2, r0
 8003cfe:	693b      	ldr	r3, [r7, #16]
 8003d00:	1ad3      	subs	r3, r2, r3
 8003d02:	2b64      	cmp	r3, #100	; 0x64
 8003d04:	d901      	bls.n	8003d0a <HAL_RCC_OscConfig+0x132>
          {
            return HAL_TIMEOUT;
 8003d06:	2303      	movs	r3, #3
 8003d08:	e2b7      	b.n	800427a <HAL_RCC_OscConfig+0x6a2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d0a:	4b4f      	ldr	r3, [pc, #316]	; (8003e48 <HAL_RCC_OscConfig+0x270>)
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d0f0      	beq.n	8003cf8 <HAL_RCC_OscConfig+0x120>
 8003d16:	e014      	b.n	8003d42 <HAL_RCC_OscConfig+0x16a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d18:	f7fe fac4 	bl	80022a4 <HAL_GetTick>
 8003d1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003d1e:	e008      	b.n	8003d32 <HAL_RCC_OscConfig+0x15a>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003d20:	f7fe fac0 	bl	80022a4 <HAL_GetTick>
 8003d24:	4602      	mov	r2, r0
 8003d26:	693b      	ldr	r3, [r7, #16]
 8003d28:	1ad3      	subs	r3, r2, r3
 8003d2a:	2b64      	cmp	r3, #100	; 0x64
 8003d2c:	d901      	bls.n	8003d32 <HAL_RCC_OscConfig+0x15a>
          {
            return HAL_TIMEOUT;
 8003d2e:	2303      	movs	r3, #3
 8003d30:	e2a3      	b.n	800427a <HAL_RCC_OscConfig+0x6a2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003d32:	4b45      	ldr	r3, [pc, #276]	; (8003e48 <HAL_RCC_OscConfig+0x270>)
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d1f0      	bne.n	8003d20 <HAL_RCC_OscConfig+0x148>
 8003d3e:	e000      	b.n	8003d42 <HAL_RCC_OscConfig+0x16a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d40:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	f003 0302 	and.w	r3, r3, #2
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	f000 8084 	beq.w	8003e58 <HAL_RCC_OscConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	68db      	ldr	r3, [r3, #12]
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d008      	beq.n	8003d6a <HAL_RCC_OscConfig+0x192>
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	68db      	ldr	r3, [r3, #12]
 8003d5c:	2b01      	cmp	r3, #1
 8003d5e:	d004      	beq.n	8003d6a <HAL_RCC_OscConfig+0x192>
 8003d60:	f240 119b 	movw	r1, #411	; 0x19b
 8003d64:	4837      	ldr	r0, [pc, #220]	; (8003e44 <HAL_RCC_OscConfig+0x26c>)
 8003d66:	f7fe f82e 	bl	8001dc6 <assert_failed>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	691b      	ldr	r3, [r3, #16]
 8003d6e:	2b1f      	cmp	r3, #31
 8003d70:	d904      	bls.n	8003d7c <HAL_RCC_OscConfig+0x1a4>
 8003d72:	f44f 71ce 	mov.w	r1, #412	; 0x19c
 8003d76:	4833      	ldr	r0, [pc, #204]	; (8003e44 <HAL_RCC_OscConfig+0x26c>)
 8003d78:	f7fe f825 	bl	8001dc6 <assert_failed>

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003d7c:	4b32      	ldr	r3, [pc, #200]	; (8003e48 <HAL_RCC_OscConfig+0x270>)
 8003d7e:	689b      	ldr	r3, [r3, #8]
 8003d80:	f003 030c 	and.w	r3, r3, #12
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d00b      	beq.n	8003da0 <HAL_RCC_OscConfig+0x1c8>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003d88:	4b2f      	ldr	r3, [pc, #188]	; (8003e48 <HAL_RCC_OscConfig+0x270>)
 8003d8a:	689b      	ldr	r3, [r3, #8]
 8003d8c:	f003 030c 	and.w	r3, r3, #12
 8003d90:	2b08      	cmp	r3, #8
 8003d92:	d11c      	bne.n	8003dce <HAL_RCC_OscConfig+0x1f6>
 8003d94:	4b2c      	ldr	r3, [pc, #176]	; (8003e48 <HAL_RCC_OscConfig+0x270>)
 8003d96:	685b      	ldr	r3, [r3, #4]
 8003d98:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d116      	bne.n	8003dce <HAL_RCC_OscConfig+0x1f6>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003da0:	4b29      	ldr	r3, [pc, #164]	; (8003e48 <HAL_RCC_OscConfig+0x270>)
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	f003 0302 	and.w	r3, r3, #2
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d005      	beq.n	8003db8 <HAL_RCC_OscConfig+0x1e0>
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	68db      	ldr	r3, [r3, #12]
 8003db0:	2b01      	cmp	r3, #1
 8003db2:	d001      	beq.n	8003db8 <HAL_RCC_OscConfig+0x1e0>
      {
        return HAL_ERROR;
 8003db4:	2301      	movs	r3, #1
 8003db6:	e260      	b.n	800427a <HAL_RCC_OscConfig+0x6a2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003db8:	4b23      	ldr	r3, [pc, #140]	; (8003e48 <HAL_RCC_OscConfig+0x270>)
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	691b      	ldr	r3, [r3, #16]
 8003dc4:	00db      	lsls	r3, r3, #3
 8003dc6:	4920      	ldr	r1, [pc, #128]	; (8003e48 <HAL_RCC_OscConfig+0x270>)
 8003dc8:	4313      	orrs	r3, r2
 8003dca:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003dcc:	e044      	b.n	8003e58 <HAL_RCC_OscConfig+0x280>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	68db      	ldr	r3, [r3, #12]
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d023      	beq.n	8003e1e <HAL_RCC_OscConfig+0x246>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003dd6:	4b1c      	ldr	r3, [pc, #112]	; (8003e48 <HAL_RCC_OscConfig+0x270>)
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	4a1b      	ldr	r2, [pc, #108]	; (8003e48 <HAL_RCC_OscConfig+0x270>)
 8003ddc:	f043 0301 	orr.w	r3, r3, #1
 8003de0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003de2:	f7fe fa5f 	bl	80022a4 <HAL_GetTick>
 8003de6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003de8:	e008      	b.n	8003dfc <HAL_RCC_OscConfig+0x224>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003dea:	f7fe fa5b 	bl	80022a4 <HAL_GetTick>
 8003dee:	4602      	mov	r2, r0
 8003df0:	693b      	ldr	r3, [r7, #16]
 8003df2:	1ad3      	subs	r3, r2, r3
 8003df4:	2b02      	cmp	r3, #2
 8003df6:	d901      	bls.n	8003dfc <HAL_RCC_OscConfig+0x224>
          {
            return HAL_TIMEOUT;
 8003df8:	2303      	movs	r3, #3
 8003dfa:	e23e      	b.n	800427a <HAL_RCC_OscConfig+0x6a2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003dfc:	4b12      	ldr	r3, [pc, #72]	; (8003e48 <HAL_RCC_OscConfig+0x270>)
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	f003 0302 	and.w	r3, r3, #2
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d0f0      	beq.n	8003dea <HAL_RCC_OscConfig+0x212>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e08:	4b0f      	ldr	r3, [pc, #60]	; (8003e48 <HAL_RCC_OscConfig+0x270>)
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	691b      	ldr	r3, [r3, #16]
 8003e14:	00db      	lsls	r3, r3, #3
 8003e16:	490c      	ldr	r1, [pc, #48]	; (8003e48 <HAL_RCC_OscConfig+0x270>)
 8003e18:	4313      	orrs	r3, r2
 8003e1a:	600b      	str	r3, [r1, #0]
 8003e1c:	e01c      	b.n	8003e58 <HAL_RCC_OscConfig+0x280>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003e1e:	4b0a      	ldr	r3, [pc, #40]	; (8003e48 <HAL_RCC_OscConfig+0x270>)
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	4a09      	ldr	r2, [pc, #36]	; (8003e48 <HAL_RCC_OscConfig+0x270>)
 8003e24:	f023 0301 	bic.w	r3, r3, #1
 8003e28:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e2a:	f7fe fa3b 	bl	80022a4 <HAL_GetTick>
 8003e2e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003e30:	e00c      	b.n	8003e4c <HAL_RCC_OscConfig+0x274>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003e32:	f7fe fa37 	bl	80022a4 <HAL_GetTick>
 8003e36:	4602      	mov	r2, r0
 8003e38:	693b      	ldr	r3, [r7, #16]
 8003e3a:	1ad3      	subs	r3, r2, r3
 8003e3c:	2b02      	cmp	r3, #2
 8003e3e:	d905      	bls.n	8003e4c <HAL_RCC_OscConfig+0x274>
          {
            return HAL_TIMEOUT;
 8003e40:	2303      	movs	r3, #3
 8003e42:	e21a      	b.n	800427a <HAL_RCC_OscConfig+0x6a2>
 8003e44:	0800ebc4 	.word	0x0800ebc4
 8003e48:	40023800 	.word	0x40023800
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003e4c:	4b7e      	ldr	r3, [pc, #504]	; (8004048 <HAL_RCC_OscConfig+0x470>)
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	f003 0302 	and.w	r3, r3, #2
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d1ec      	bne.n	8003e32 <HAL_RCC_OscConfig+0x25a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	f003 0308 	and.w	r3, r3, #8
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d043      	beq.n	8003eec <HAL_RCC_OscConfig+0x314>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	695b      	ldr	r3, [r3, #20]
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d008      	beq.n	8003e7e <HAL_RCC_OscConfig+0x2a6>
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	695b      	ldr	r3, [r3, #20]
 8003e70:	2b01      	cmp	r3, #1
 8003e72:	d004      	beq.n	8003e7e <HAL_RCC_OscConfig+0x2a6>
 8003e74:	f44f 71ee 	mov.w	r1, #476	; 0x1dc
 8003e78:	4874      	ldr	r0, [pc, #464]	; (800404c <HAL_RCC_OscConfig+0x474>)
 8003e7a:	f7fd ffa4 	bl	8001dc6 <assert_failed>

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	695b      	ldr	r3, [r3, #20]
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d019      	beq.n	8003eba <HAL_RCC_OscConfig+0x2e2>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003e86:	4b70      	ldr	r3, [pc, #448]	; (8004048 <HAL_RCC_OscConfig+0x470>)
 8003e88:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e8a:	4a6f      	ldr	r2, [pc, #444]	; (8004048 <HAL_RCC_OscConfig+0x470>)
 8003e8c:	f043 0301 	orr.w	r3, r3, #1
 8003e90:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e92:	f7fe fa07 	bl	80022a4 <HAL_GetTick>
 8003e96:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003e98:	e008      	b.n	8003eac <HAL_RCC_OscConfig+0x2d4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003e9a:	f7fe fa03 	bl	80022a4 <HAL_GetTick>
 8003e9e:	4602      	mov	r2, r0
 8003ea0:	693b      	ldr	r3, [r7, #16]
 8003ea2:	1ad3      	subs	r3, r2, r3
 8003ea4:	2b02      	cmp	r3, #2
 8003ea6:	d901      	bls.n	8003eac <HAL_RCC_OscConfig+0x2d4>
        {
          return HAL_TIMEOUT;
 8003ea8:	2303      	movs	r3, #3
 8003eaa:	e1e6      	b.n	800427a <HAL_RCC_OscConfig+0x6a2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003eac:	4b66      	ldr	r3, [pc, #408]	; (8004048 <HAL_RCC_OscConfig+0x470>)
 8003eae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003eb0:	f003 0302 	and.w	r3, r3, #2
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d0f0      	beq.n	8003e9a <HAL_RCC_OscConfig+0x2c2>
 8003eb8:	e018      	b.n	8003eec <HAL_RCC_OscConfig+0x314>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003eba:	4b63      	ldr	r3, [pc, #396]	; (8004048 <HAL_RCC_OscConfig+0x470>)
 8003ebc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ebe:	4a62      	ldr	r2, [pc, #392]	; (8004048 <HAL_RCC_OscConfig+0x470>)
 8003ec0:	f023 0301 	bic.w	r3, r3, #1
 8003ec4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ec6:	f7fe f9ed 	bl	80022a4 <HAL_GetTick>
 8003eca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003ecc:	e008      	b.n	8003ee0 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003ece:	f7fe f9e9 	bl	80022a4 <HAL_GetTick>
 8003ed2:	4602      	mov	r2, r0
 8003ed4:	693b      	ldr	r3, [r7, #16]
 8003ed6:	1ad3      	subs	r3, r2, r3
 8003ed8:	2b02      	cmp	r3, #2
 8003eda:	d901      	bls.n	8003ee0 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8003edc:	2303      	movs	r3, #3
 8003ede:	e1cc      	b.n	800427a <HAL_RCC_OscConfig+0x6a2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003ee0:	4b59      	ldr	r3, [pc, #356]	; (8004048 <HAL_RCC_OscConfig+0x470>)
 8003ee2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ee4:	f003 0302 	and.w	r3, r3, #2
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d1f0      	bne.n	8003ece <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	f003 0304 	and.w	r3, r3, #4
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	f000 80bc 	beq.w	8004072 <HAL_RCC_OscConfig+0x49a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	689b      	ldr	r3, [r3, #8]
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d00c      	beq.n	8003f1c <HAL_RCC_OscConfig+0x344>
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	689b      	ldr	r3, [r3, #8]
 8003f06:	2b01      	cmp	r3, #1
 8003f08:	d008      	beq.n	8003f1c <HAL_RCC_OscConfig+0x344>
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	689b      	ldr	r3, [r3, #8]
 8003f0e:	2b05      	cmp	r3, #5
 8003f10:	d004      	beq.n	8003f1c <HAL_RCC_OscConfig+0x344>
 8003f12:	f240 2106 	movw	r1, #518	; 0x206
 8003f16:	484d      	ldr	r0, [pc, #308]	; (800404c <HAL_RCC_OscConfig+0x474>)
 8003f18:	f7fd ff55 	bl	8001dc6 <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003f1c:	4b4a      	ldr	r3, [pc, #296]	; (8004048 <HAL_RCC_OscConfig+0x470>)
 8003f1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f20:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d10d      	bne.n	8003f44 <HAL_RCC_OscConfig+0x36c>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8003f28:	4b47      	ldr	r3, [pc, #284]	; (8004048 <HAL_RCC_OscConfig+0x470>)
 8003f2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f2c:	4a46      	ldr	r2, [pc, #280]	; (8004048 <HAL_RCC_OscConfig+0x470>)
 8003f2e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f32:	6413      	str	r3, [r2, #64]	; 0x40
 8003f34:	4b44      	ldr	r3, [pc, #272]	; (8004048 <HAL_RCC_OscConfig+0x470>)
 8003f36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f38:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f3c:	60bb      	str	r3, [r7, #8]
 8003f3e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003f40:	2301      	movs	r3, #1
 8003f42:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003f44:	4b42      	ldr	r3, [pc, #264]	; (8004050 <HAL_RCC_OscConfig+0x478>)
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d118      	bne.n	8003f82 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8003f50:	4b3f      	ldr	r3, [pc, #252]	; (8004050 <HAL_RCC_OscConfig+0x478>)
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	4a3e      	ldr	r2, [pc, #248]	; (8004050 <HAL_RCC_OscConfig+0x478>)
 8003f56:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f5a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003f5c:	f7fe f9a2 	bl	80022a4 <HAL_GetTick>
 8003f60:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003f62:	e008      	b.n	8003f76 <HAL_RCC_OscConfig+0x39e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003f64:	f7fe f99e 	bl	80022a4 <HAL_GetTick>
 8003f68:	4602      	mov	r2, r0
 8003f6a:	693b      	ldr	r3, [r7, #16]
 8003f6c:	1ad3      	subs	r3, r2, r3
 8003f6e:	2b64      	cmp	r3, #100	; 0x64
 8003f70:	d901      	bls.n	8003f76 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8003f72:	2303      	movs	r3, #3
 8003f74:	e181      	b.n	800427a <HAL_RCC_OscConfig+0x6a2>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003f76:	4b36      	ldr	r3, [pc, #216]	; (8004050 <HAL_RCC_OscConfig+0x478>)
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d0f0      	beq.n	8003f64 <HAL_RCC_OscConfig+0x38c>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	689b      	ldr	r3, [r3, #8]
 8003f86:	2b01      	cmp	r3, #1
 8003f88:	d106      	bne.n	8003f98 <HAL_RCC_OscConfig+0x3c0>
 8003f8a:	4b2f      	ldr	r3, [pc, #188]	; (8004048 <HAL_RCC_OscConfig+0x470>)
 8003f8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f8e:	4a2e      	ldr	r2, [pc, #184]	; (8004048 <HAL_RCC_OscConfig+0x470>)
 8003f90:	f043 0301 	orr.w	r3, r3, #1
 8003f94:	6713      	str	r3, [r2, #112]	; 0x70
 8003f96:	e02d      	b.n	8003ff4 <HAL_RCC_OscConfig+0x41c>
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	689b      	ldr	r3, [r3, #8]
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d10c      	bne.n	8003fba <HAL_RCC_OscConfig+0x3e2>
 8003fa0:	4b29      	ldr	r3, [pc, #164]	; (8004048 <HAL_RCC_OscConfig+0x470>)
 8003fa2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fa4:	4a28      	ldr	r2, [pc, #160]	; (8004048 <HAL_RCC_OscConfig+0x470>)
 8003fa6:	f023 0301 	bic.w	r3, r3, #1
 8003faa:	6713      	str	r3, [r2, #112]	; 0x70
 8003fac:	4b26      	ldr	r3, [pc, #152]	; (8004048 <HAL_RCC_OscConfig+0x470>)
 8003fae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fb0:	4a25      	ldr	r2, [pc, #148]	; (8004048 <HAL_RCC_OscConfig+0x470>)
 8003fb2:	f023 0304 	bic.w	r3, r3, #4
 8003fb6:	6713      	str	r3, [r2, #112]	; 0x70
 8003fb8:	e01c      	b.n	8003ff4 <HAL_RCC_OscConfig+0x41c>
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	689b      	ldr	r3, [r3, #8]
 8003fbe:	2b05      	cmp	r3, #5
 8003fc0:	d10c      	bne.n	8003fdc <HAL_RCC_OscConfig+0x404>
 8003fc2:	4b21      	ldr	r3, [pc, #132]	; (8004048 <HAL_RCC_OscConfig+0x470>)
 8003fc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fc6:	4a20      	ldr	r2, [pc, #128]	; (8004048 <HAL_RCC_OscConfig+0x470>)
 8003fc8:	f043 0304 	orr.w	r3, r3, #4
 8003fcc:	6713      	str	r3, [r2, #112]	; 0x70
 8003fce:	4b1e      	ldr	r3, [pc, #120]	; (8004048 <HAL_RCC_OscConfig+0x470>)
 8003fd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fd2:	4a1d      	ldr	r2, [pc, #116]	; (8004048 <HAL_RCC_OscConfig+0x470>)
 8003fd4:	f043 0301 	orr.w	r3, r3, #1
 8003fd8:	6713      	str	r3, [r2, #112]	; 0x70
 8003fda:	e00b      	b.n	8003ff4 <HAL_RCC_OscConfig+0x41c>
 8003fdc:	4b1a      	ldr	r3, [pc, #104]	; (8004048 <HAL_RCC_OscConfig+0x470>)
 8003fde:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fe0:	4a19      	ldr	r2, [pc, #100]	; (8004048 <HAL_RCC_OscConfig+0x470>)
 8003fe2:	f023 0301 	bic.w	r3, r3, #1
 8003fe6:	6713      	str	r3, [r2, #112]	; 0x70
 8003fe8:	4b17      	ldr	r3, [pc, #92]	; (8004048 <HAL_RCC_OscConfig+0x470>)
 8003fea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fec:	4a16      	ldr	r2, [pc, #88]	; (8004048 <HAL_RCC_OscConfig+0x470>)
 8003fee:	f023 0304 	bic.w	r3, r3, #4
 8003ff2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	689b      	ldr	r3, [r3, #8]
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d015      	beq.n	8004028 <HAL_RCC_OscConfig+0x450>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ffc:	f7fe f952 	bl	80022a4 <HAL_GetTick>
 8004000:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004002:	e00a      	b.n	800401a <HAL_RCC_OscConfig+0x442>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004004:	f7fe f94e 	bl	80022a4 <HAL_GetTick>
 8004008:	4602      	mov	r2, r0
 800400a:	693b      	ldr	r3, [r7, #16]
 800400c:	1ad3      	subs	r3, r2, r3
 800400e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004012:	4293      	cmp	r3, r2
 8004014:	d901      	bls.n	800401a <HAL_RCC_OscConfig+0x442>
        {
          return HAL_TIMEOUT;
 8004016:	2303      	movs	r3, #3
 8004018:	e12f      	b.n	800427a <HAL_RCC_OscConfig+0x6a2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800401a:	4b0b      	ldr	r3, [pc, #44]	; (8004048 <HAL_RCC_OscConfig+0x470>)
 800401c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800401e:	f003 0302 	and.w	r3, r3, #2
 8004022:	2b00      	cmp	r3, #0
 8004024:	d0ee      	beq.n	8004004 <HAL_RCC_OscConfig+0x42c>
 8004026:	e01b      	b.n	8004060 <HAL_RCC_OscConfig+0x488>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004028:	f7fe f93c 	bl	80022a4 <HAL_GetTick>
 800402c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800402e:	e011      	b.n	8004054 <HAL_RCC_OscConfig+0x47c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004030:	f7fe f938 	bl	80022a4 <HAL_GetTick>
 8004034:	4602      	mov	r2, r0
 8004036:	693b      	ldr	r3, [r7, #16]
 8004038:	1ad3      	subs	r3, r2, r3
 800403a:	f241 3288 	movw	r2, #5000	; 0x1388
 800403e:	4293      	cmp	r3, r2
 8004040:	d908      	bls.n	8004054 <HAL_RCC_OscConfig+0x47c>
        {
          return HAL_TIMEOUT;
 8004042:	2303      	movs	r3, #3
 8004044:	e119      	b.n	800427a <HAL_RCC_OscConfig+0x6a2>
 8004046:	bf00      	nop
 8004048:	40023800 	.word	0x40023800
 800404c:	0800ebc4 	.word	0x0800ebc4
 8004050:	40007000 	.word	0x40007000
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004054:	4b8b      	ldr	r3, [pc, #556]	; (8004284 <HAL_RCC_OscConfig+0x6ac>)
 8004056:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004058:	f003 0302 	and.w	r3, r3, #2
 800405c:	2b00      	cmp	r3, #0
 800405e:	d1e7      	bne.n	8004030 <HAL_RCC_OscConfig+0x458>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004060:	7dfb      	ldrb	r3, [r7, #23]
 8004062:	2b01      	cmp	r3, #1
 8004064:	d105      	bne.n	8004072 <HAL_RCC_OscConfig+0x49a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004066:	4b87      	ldr	r3, [pc, #540]	; (8004284 <HAL_RCC_OscConfig+0x6ac>)
 8004068:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800406a:	4a86      	ldr	r2, [pc, #536]	; (8004284 <HAL_RCC_OscConfig+0x6ac>)
 800406c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004070:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	699b      	ldr	r3, [r3, #24]
 8004076:	2b00      	cmp	r3, #0
 8004078:	d00c      	beq.n	8004094 <HAL_RCC_OscConfig+0x4bc>
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	699b      	ldr	r3, [r3, #24]
 800407e:	2b01      	cmp	r3, #1
 8004080:	d008      	beq.n	8004094 <HAL_RCC_OscConfig+0x4bc>
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	699b      	ldr	r3, [r3, #24]
 8004086:	2b02      	cmp	r3, #2
 8004088:	d004      	beq.n	8004094 <HAL_RCC_OscConfig+0x4bc>
 800408a:	f240 214a 	movw	r1, #586	; 0x24a
 800408e:	487e      	ldr	r0, [pc, #504]	; (8004288 <HAL_RCC_OscConfig+0x6b0>)
 8004090:	f7fd fe99 	bl	8001dc6 <assert_failed>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	699b      	ldr	r3, [r3, #24]
 8004098:	2b00      	cmp	r3, #0
 800409a:	f000 80ed 	beq.w	8004278 <HAL_RCC_OscConfig+0x6a0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800409e:	4b79      	ldr	r3, [pc, #484]	; (8004284 <HAL_RCC_OscConfig+0x6ac>)
 80040a0:	689b      	ldr	r3, [r3, #8]
 80040a2:	f003 030c 	and.w	r3, r3, #12
 80040a6:	2b08      	cmp	r3, #8
 80040a8:	f000 80b4 	beq.w	8004214 <HAL_RCC_OscConfig+0x63c>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	699b      	ldr	r3, [r3, #24]
 80040b0:	2b02      	cmp	r3, #2
 80040b2:	f040 8095 	bne.w	80041e0 <HAL_RCC_OscConfig+0x608>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	69db      	ldr	r3, [r3, #28]
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d009      	beq.n	80040d2 <HAL_RCC_OscConfig+0x4fa>
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	69db      	ldr	r3, [r3, #28]
 80040c2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80040c6:	d004      	beq.n	80040d2 <HAL_RCC_OscConfig+0x4fa>
 80040c8:	f240 2153 	movw	r1, #595	; 0x253
 80040cc:	486e      	ldr	r0, [pc, #440]	; (8004288 <HAL_RCC_OscConfig+0x6b0>)
 80040ce:	f7fd fe7a 	bl	8001dc6 <assert_failed>
        assert_param(IS_RCC_PLLM_VALUE(RCC_OscInitStruct->PLL.PLLM));
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	6a1b      	ldr	r3, [r3, #32]
 80040d6:	2b01      	cmp	r3, #1
 80040d8:	d903      	bls.n	80040e2 <HAL_RCC_OscConfig+0x50a>
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	6a1b      	ldr	r3, [r3, #32]
 80040de:	2b3f      	cmp	r3, #63	; 0x3f
 80040e0:	d904      	bls.n	80040ec <HAL_RCC_OscConfig+0x514>
 80040e2:	f44f 7115 	mov.w	r1, #596	; 0x254
 80040e6:	4868      	ldr	r0, [pc, #416]	; (8004288 <HAL_RCC_OscConfig+0x6b0>)
 80040e8:	f7fd fe6d 	bl	8001dc6 <assert_failed>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040f0:	2b31      	cmp	r3, #49	; 0x31
 80040f2:	d904      	bls.n	80040fe <HAL_RCC_OscConfig+0x526>
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040f8:	f5b3 7fd8 	cmp.w	r3, #432	; 0x1b0
 80040fc:	d904      	bls.n	8004108 <HAL_RCC_OscConfig+0x530>
 80040fe:	f240 2155 	movw	r1, #597	; 0x255
 8004102:	4861      	ldr	r0, [pc, #388]	; (8004288 <HAL_RCC_OscConfig+0x6b0>)
 8004104:	f7fd fe5f 	bl	8001dc6 <assert_failed>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800410c:	2b02      	cmp	r3, #2
 800410e:	d010      	beq.n	8004132 <HAL_RCC_OscConfig+0x55a>
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004114:	2b04      	cmp	r3, #4
 8004116:	d00c      	beq.n	8004132 <HAL_RCC_OscConfig+0x55a>
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800411c:	2b06      	cmp	r3, #6
 800411e:	d008      	beq.n	8004132 <HAL_RCC_OscConfig+0x55a>
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004124:	2b08      	cmp	r3, #8
 8004126:	d004      	beq.n	8004132 <HAL_RCC_OscConfig+0x55a>
 8004128:	f240 2156 	movw	r1, #598	; 0x256
 800412c:	4856      	ldr	r0, [pc, #344]	; (8004288 <HAL_RCC_OscConfig+0x6b0>)
 800412e:	f7fd fe4a 	bl	8001dc6 <assert_failed>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004136:	2b01      	cmp	r3, #1
 8004138:	d903      	bls.n	8004142 <HAL_RCC_OscConfig+0x56a>
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800413e:	2b0f      	cmp	r3, #15
 8004140:	d904      	bls.n	800414c <HAL_RCC_OscConfig+0x574>
 8004142:	f240 2157 	movw	r1, #599	; 0x257
 8004146:	4850      	ldr	r0, [pc, #320]	; (8004288 <HAL_RCC_OscConfig+0x6b0>)
 8004148:	f7fd fe3d 	bl	8001dc6 <assert_failed>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800414c:	4b4d      	ldr	r3, [pc, #308]	; (8004284 <HAL_RCC_OscConfig+0x6ac>)
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	4a4c      	ldr	r2, [pc, #304]	; (8004284 <HAL_RCC_OscConfig+0x6ac>)
 8004152:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004156:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004158:	f7fe f8a4 	bl	80022a4 <HAL_GetTick>
 800415c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800415e:	e008      	b.n	8004172 <HAL_RCC_OscConfig+0x59a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004160:	f7fe f8a0 	bl	80022a4 <HAL_GetTick>
 8004164:	4602      	mov	r2, r0
 8004166:	693b      	ldr	r3, [r7, #16]
 8004168:	1ad3      	subs	r3, r2, r3
 800416a:	2b02      	cmp	r3, #2
 800416c:	d901      	bls.n	8004172 <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 800416e:	2303      	movs	r3, #3
 8004170:	e083      	b.n	800427a <HAL_RCC_OscConfig+0x6a2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004172:	4b44      	ldr	r3, [pc, #272]	; (8004284 <HAL_RCC_OscConfig+0x6ac>)
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800417a:	2b00      	cmp	r3, #0
 800417c:	d1f0      	bne.n	8004160 <HAL_RCC_OscConfig+0x588>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	69da      	ldr	r2, [r3, #28]
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	6a1b      	ldr	r3, [r3, #32]
 8004186:	431a      	orrs	r2, r3
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800418c:	019b      	lsls	r3, r3, #6
 800418e:	431a      	orrs	r2, r3
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004194:	085b      	lsrs	r3, r3, #1
 8004196:	3b01      	subs	r3, #1
 8004198:	041b      	lsls	r3, r3, #16
 800419a:	431a      	orrs	r2, r3
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041a0:	061b      	lsls	r3, r3, #24
 80041a2:	4313      	orrs	r3, r2
 80041a4:	4a37      	ldr	r2, [pc, #220]	; (8004284 <HAL_RCC_OscConfig+0x6ac>)
 80041a6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80041aa:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80041ac:	4b35      	ldr	r3, [pc, #212]	; (8004284 <HAL_RCC_OscConfig+0x6ac>)
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	4a34      	ldr	r2, [pc, #208]	; (8004284 <HAL_RCC_OscConfig+0x6ac>)
 80041b2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80041b6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041b8:	f7fe f874 	bl	80022a4 <HAL_GetTick>
 80041bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80041be:	e008      	b.n	80041d2 <HAL_RCC_OscConfig+0x5fa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80041c0:	f7fe f870 	bl	80022a4 <HAL_GetTick>
 80041c4:	4602      	mov	r2, r0
 80041c6:	693b      	ldr	r3, [r7, #16]
 80041c8:	1ad3      	subs	r3, r2, r3
 80041ca:	2b02      	cmp	r3, #2
 80041cc:	d901      	bls.n	80041d2 <HAL_RCC_OscConfig+0x5fa>
          {
            return HAL_TIMEOUT;
 80041ce:	2303      	movs	r3, #3
 80041d0:	e053      	b.n	800427a <HAL_RCC_OscConfig+0x6a2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80041d2:	4b2c      	ldr	r3, [pc, #176]	; (8004284 <HAL_RCC_OscConfig+0x6ac>)
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d0f0      	beq.n	80041c0 <HAL_RCC_OscConfig+0x5e8>
 80041de:	e04b      	b.n	8004278 <HAL_RCC_OscConfig+0x6a0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80041e0:	4b28      	ldr	r3, [pc, #160]	; (8004284 <HAL_RCC_OscConfig+0x6ac>)
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	4a27      	ldr	r2, [pc, #156]	; (8004284 <HAL_RCC_OscConfig+0x6ac>)
 80041e6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80041ea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041ec:	f7fe f85a 	bl	80022a4 <HAL_GetTick>
 80041f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80041f2:	e008      	b.n	8004206 <HAL_RCC_OscConfig+0x62e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80041f4:	f7fe f856 	bl	80022a4 <HAL_GetTick>
 80041f8:	4602      	mov	r2, r0
 80041fa:	693b      	ldr	r3, [r7, #16]
 80041fc:	1ad3      	subs	r3, r2, r3
 80041fe:	2b02      	cmp	r3, #2
 8004200:	d901      	bls.n	8004206 <HAL_RCC_OscConfig+0x62e>
          {
            return HAL_TIMEOUT;
 8004202:	2303      	movs	r3, #3
 8004204:	e039      	b.n	800427a <HAL_RCC_OscConfig+0x6a2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004206:	4b1f      	ldr	r3, [pc, #124]	; (8004284 <HAL_RCC_OscConfig+0x6ac>)
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800420e:	2b00      	cmp	r3, #0
 8004210:	d1f0      	bne.n	80041f4 <HAL_RCC_OscConfig+0x61c>
 8004212:	e031      	b.n	8004278 <HAL_RCC_OscConfig+0x6a0>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8004214:	4b1b      	ldr	r3, [pc, #108]	; (8004284 <HAL_RCC_OscConfig+0x6ac>)
 8004216:	685b      	ldr	r3, [r3, #4]
 8004218:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	699b      	ldr	r3, [r3, #24]
 800421e:	2b01      	cmp	r3, #1
 8004220:	d028      	beq.n	8004274 <HAL_RCC_OscConfig+0x69c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800422c:	429a      	cmp	r2, r3
 800422e:	d121      	bne.n	8004274 <HAL_RCC_OscConfig+0x69c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800423a:	429a      	cmp	r2, r3
 800423c:	d11a      	bne.n	8004274 <HAL_RCC_OscConfig+0x69c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800423e:	68fa      	ldr	r2, [r7, #12]
 8004240:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004244:	4013      	ands	r3, r2
 8004246:	687a      	ldr	r2, [r7, #4]
 8004248:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800424a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800424c:	4293      	cmp	r3, r2
 800424e:	d111      	bne.n	8004274 <HAL_RCC_OscConfig+0x69c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800425a:	085b      	lsrs	r3, r3, #1
 800425c:	3b01      	subs	r3, #1
 800425e:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004260:	429a      	cmp	r2, r3
 8004262:	d107      	bne.n	8004274 <HAL_RCC_OscConfig+0x69c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800426e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004270:	429a      	cmp	r2, r3
 8004272:	d001      	beq.n	8004278 <HAL_RCC_OscConfig+0x6a0>
#endif
      {
        return HAL_ERROR;
 8004274:	2301      	movs	r3, #1
 8004276:	e000      	b.n	800427a <HAL_RCC_OscConfig+0x6a2>
      }
    }
  }
  return HAL_OK;
 8004278:	2300      	movs	r3, #0
}
 800427a:	4618      	mov	r0, r3
 800427c:	3718      	adds	r7, #24
 800427e:	46bd      	mov	sp, r7
 8004280:	bd80      	pop	{r7, pc}
 8004282:	bf00      	nop
 8004284:	40023800 	.word	0x40023800
 8004288:	0800ebc4 	.word	0x0800ebc4

0800428c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800428c:	b580      	push	{r7, lr}
 800428e:	b084      	sub	sp, #16
 8004290:	af00      	add	r7, sp, #0
 8004292:	6078      	str	r0, [r7, #4]
 8004294:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8004296:	2300      	movs	r3, #0
 8004298:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	2b00      	cmp	r3, #0
 800429e:	d101      	bne.n	80042a4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80042a0:	2301      	movs	r3, #1
 80042a2:	e18c      	b.n	80045be <HAL_RCC_ClockConfig+0x332>
  }

  /* Check the parameters */
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d003      	beq.n	80042b4 <HAL_RCC_ClockConfig+0x28>
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	2b0f      	cmp	r3, #15
 80042b2:	d904      	bls.n	80042be <HAL_RCC_ClockConfig+0x32>
 80042b4:	f240 21dd 	movw	r1, #733	; 0x2dd
 80042b8:	4887      	ldr	r0, [pc, #540]	; (80044d8 <HAL_RCC_ClockConfig+0x24c>)
 80042ba:	f7fd fd84 	bl	8001dc6 <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 80042be:	683b      	ldr	r3, [r7, #0]
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d031      	beq.n	8004328 <HAL_RCC_ClockConfig+0x9c>
 80042c4:	683b      	ldr	r3, [r7, #0]
 80042c6:	2b01      	cmp	r3, #1
 80042c8:	d02e      	beq.n	8004328 <HAL_RCC_ClockConfig+0x9c>
 80042ca:	683b      	ldr	r3, [r7, #0]
 80042cc:	2b02      	cmp	r3, #2
 80042ce:	d02b      	beq.n	8004328 <HAL_RCC_ClockConfig+0x9c>
 80042d0:	683b      	ldr	r3, [r7, #0]
 80042d2:	2b03      	cmp	r3, #3
 80042d4:	d028      	beq.n	8004328 <HAL_RCC_ClockConfig+0x9c>
 80042d6:	683b      	ldr	r3, [r7, #0]
 80042d8:	2b04      	cmp	r3, #4
 80042da:	d025      	beq.n	8004328 <HAL_RCC_ClockConfig+0x9c>
 80042dc:	683b      	ldr	r3, [r7, #0]
 80042de:	2b05      	cmp	r3, #5
 80042e0:	d022      	beq.n	8004328 <HAL_RCC_ClockConfig+0x9c>
 80042e2:	683b      	ldr	r3, [r7, #0]
 80042e4:	2b06      	cmp	r3, #6
 80042e6:	d01f      	beq.n	8004328 <HAL_RCC_ClockConfig+0x9c>
 80042e8:	683b      	ldr	r3, [r7, #0]
 80042ea:	2b07      	cmp	r3, #7
 80042ec:	d01c      	beq.n	8004328 <HAL_RCC_ClockConfig+0x9c>
 80042ee:	683b      	ldr	r3, [r7, #0]
 80042f0:	2b08      	cmp	r3, #8
 80042f2:	d019      	beq.n	8004328 <HAL_RCC_ClockConfig+0x9c>
 80042f4:	683b      	ldr	r3, [r7, #0]
 80042f6:	2b09      	cmp	r3, #9
 80042f8:	d016      	beq.n	8004328 <HAL_RCC_ClockConfig+0x9c>
 80042fa:	683b      	ldr	r3, [r7, #0]
 80042fc:	2b0a      	cmp	r3, #10
 80042fe:	d013      	beq.n	8004328 <HAL_RCC_ClockConfig+0x9c>
 8004300:	683b      	ldr	r3, [r7, #0]
 8004302:	2b0b      	cmp	r3, #11
 8004304:	d010      	beq.n	8004328 <HAL_RCC_ClockConfig+0x9c>
 8004306:	683b      	ldr	r3, [r7, #0]
 8004308:	2b0c      	cmp	r3, #12
 800430a:	d00d      	beq.n	8004328 <HAL_RCC_ClockConfig+0x9c>
 800430c:	683b      	ldr	r3, [r7, #0]
 800430e:	2b0d      	cmp	r3, #13
 8004310:	d00a      	beq.n	8004328 <HAL_RCC_ClockConfig+0x9c>
 8004312:	683b      	ldr	r3, [r7, #0]
 8004314:	2b0e      	cmp	r3, #14
 8004316:	d007      	beq.n	8004328 <HAL_RCC_ClockConfig+0x9c>
 8004318:	683b      	ldr	r3, [r7, #0]
 800431a:	2b0f      	cmp	r3, #15
 800431c:	d004      	beq.n	8004328 <HAL_RCC_ClockConfig+0x9c>
 800431e:	f240 21de 	movw	r1, #734	; 0x2de
 8004322:	486d      	ldr	r0, [pc, #436]	; (80044d8 <HAL_RCC_ClockConfig+0x24c>)
 8004324:	f7fd fd4f 	bl	8001dc6 <assert_failed>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004328:	4b6c      	ldr	r3, [pc, #432]	; (80044dc <HAL_RCC_ClockConfig+0x250>)
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	f003 030f 	and.w	r3, r3, #15
 8004330:	683a      	ldr	r2, [r7, #0]
 8004332:	429a      	cmp	r2, r3
 8004334:	d910      	bls.n	8004358 <HAL_RCC_ClockConfig+0xcc>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004336:	4b69      	ldr	r3, [pc, #420]	; (80044dc <HAL_RCC_ClockConfig+0x250>)
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	f023 020f 	bic.w	r2, r3, #15
 800433e:	4967      	ldr	r1, [pc, #412]	; (80044dc <HAL_RCC_ClockConfig+0x250>)
 8004340:	683b      	ldr	r3, [r7, #0]
 8004342:	4313      	orrs	r3, r2
 8004344:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004346:	4b65      	ldr	r3, [pc, #404]	; (80044dc <HAL_RCC_ClockConfig+0x250>)
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	f003 030f 	and.w	r3, r3, #15
 800434e:	683a      	ldr	r2, [r7, #0]
 8004350:	429a      	cmp	r2, r3
 8004352:	d001      	beq.n	8004358 <HAL_RCC_ClockConfig+0xcc>
    {
      return HAL_ERROR;
 8004354:	2301      	movs	r3, #1
 8004356:	e132      	b.n	80045be <HAL_RCC_ClockConfig+0x332>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	f003 0302 	and.w	r3, r3, #2
 8004360:	2b00      	cmp	r3, #0
 8004362:	d049      	beq.n	80043f8 <HAL_RCC_ClockConfig+0x16c>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	f003 0304 	and.w	r3, r3, #4
 800436c:	2b00      	cmp	r3, #0
 800436e:	d005      	beq.n	800437c <HAL_RCC_ClockConfig+0xf0>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004370:	4b5b      	ldr	r3, [pc, #364]	; (80044e0 <HAL_RCC_ClockConfig+0x254>)
 8004372:	689b      	ldr	r3, [r3, #8]
 8004374:	4a5a      	ldr	r2, [pc, #360]	; (80044e0 <HAL_RCC_ClockConfig+0x254>)
 8004376:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800437a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	f003 0308 	and.w	r3, r3, #8
 8004384:	2b00      	cmp	r3, #0
 8004386:	d005      	beq.n	8004394 <HAL_RCC_ClockConfig+0x108>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004388:	4b55      	ldr	r3, [pc, #340]	; (80044e0 <HAL_RCC_ClockConfig+0x254>)
 800438a:	689b      	ldr	r3, [r3, #8]
 800438c:	4a54      	ldr	r2, [pc, #336]	; (80044e0 <HAL_RCC_ClockConfig+0x254>)
 800438e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004392:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	689b      	ldr	r3, [r3, #8]
 8004398:	2b00      	cmp	r3, #0
 800439a:	d024      	beq.n	80043e6 <HAL_RCC_ClockConfig+0x15a>
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	689b      	ldr	r3, [r3, #8]
 80043a0:	2b80      	cmp	r3, #128	; 0x80
 80043a2:	d020      	beq.n	80043e6 <HAL_RCC_ClockConfig+0x15a>
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	689b      	ldr	r3, [r3, #8]
 80043a8:	2b90      	cmp	r3, #144	; 0x90
 80043aa:	d01c      	beq.n	80043e6 <HAL_RCC_ClockConfig+0x15a>
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	689b      	ldr	r3, [r3, #8]
 80043b0:	2ba0      	cmp	r3, #160	; 0xa0
 80043b2:	d018      	beq.n	80043e6 <HAL_RCC_ClockConfig+0x15a>
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	689b      	ldr	r3, [r3, #8]
 80043b8:	2bb0      	cmp	r3, #176	; 0xb0
 80043ba:	d014      	beq.n	80043e6 <HAL_RCC_ClockConfig+0x15a>
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	689b      	ldr	r3, [r3, #8]
 80043c0:	2bc0      	cmp	r3, #192	; 0xc0
 80043c2:	d010      	beq.n	80043e6 <HAL_RCC_ClockConfig+0x15a>
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	689b      	ldr	r3, [r3, #8]
 80043c8:	2bd0      	cmp	r3, #208	; 0xd0
 80043ca:	d00c      	beq.n	80043e6 <HAL_RCC_ClockConfig+0x15a>
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	689b      	ldr	r3, [r3, #8]
 80043d0:	2be0      	cmp	r3, #224	; 0xe0
 80043d2:	d008      	beq.n	80043e6 <HAL_RCC_ClockConfig+0x15a>
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	689b      	ldr	r3, [r3, #8]
 80043d8:	2bf0      	cmp	r3, #240	; 0xf0
 80043da:	d004      	beq.n	80043e6 <HAL_RCC_ClockConfig+0x15a>
 80043dc:	f240 3102 	movw	r1, #770	; 0x302
 80043e0:	483d      	ldr	r0, [pc, #244]	; (80044d8 <HAL_RCC_ClockConfig+0x24c>)
 80043e2:	f7fd fcf0 	bl	8001dc6 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80043e6:	4b3e      	ldr	r3, [pc, #248]	; (80044e0 <HAL_RCC_ClockConfig+0x254>)
 80043e8:	689b      	ldr	r3, [r3, #8]
 80043ea:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	689b      	ldr	r3, [r3, #8]
 80043f2:	493b      	ldr	r1, [pc, #236]	; (80044e0 <HAL_RCC_ClockConfig+0x254>)
 80043f4:	4313      	orrs	r3, r2
 80043f6:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	f003 0301 	and.w	r3, r3, #1
 8004400:	2b00      	cmp	r3, #0
 8004402:	d051      	beq.n	80044a8 <HAL_RCC_ClockConfig+0x21c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	685b      	ldr	r3, [r3, #4]
 8004408:	2b00      	cmp	r3, #0
 800440a:	d00c      	beq.n	8004426 <HAL_RCC_ClockConfig+0x19a>
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	685b      	ldr	r3, [r3, #4]
 8004410:	2b01      	cmp	r3, #1
 8004412:	d008      	beq.n	8004426 <HAL_RCC_ClockConfig+0x19a>
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	685b      	ldr	r3, [r3, #4]
 8004418:	2b02      	cmp	r3, #2
 800441a:	d004      	beq.n	8004426 <HAL_RCC_ClockConfig+0x19a>
 800441c:	f240 3109 	movw	r1, #777	; 0x309
 8004420:	482d      	ldr	r0, [pc, #180]	; (80044d8 <HAL_RCC_ClockConfig+0x24c>)
 8004422:	f7fd fcd0 	bl	8001dc6 <assert_failed>

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	685b      	ldr	r3, [r3, #4]
 800442a:	2b01      	cmp	r3, #1
 800442c:	d107      	bne.n	800443e <HAL_RCC_ClockConfig+0x1b2>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800442e:	4b2c      	ldr	r3, [pc, #176]	; (80044e0 <HAL_RCC_ClockConfig+0x254>)
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004436:	2b00      	cmp	r3, #0
 8004438:	d115      	bne.n	8004466 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800443a:	2301      	movs	r3, #1
 800443c:	e0bf      	b.n	80045be <HAL_RCC_ClockConfig+0x332>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	685b      	ldr	r3, [r3, #4]
 8004442:	2b02      	cmp	r3, #2
 8004444:	d107      	bne.n	8004456 <HAL_RCC_ClockConfig+0x1ca>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004446:	4b26      	ldr	r3, [pc, #152]	; (80044e0 <HAL_RCC_ClockConfig+0x254>)
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800444e:	2b00      	cmp	r3, #0
 8004450:	d109      	bne.n	8004466 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8004452:	2301      	movs	r3, #1
 8004454:	e0b3      	b.n	80045be <HAL_RCC_ClockConfig+0x332>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004456:	4b22      	ldr	r3, [pc, #136]	; (80044e0 <HAL_RCC_ClockConfig+0x254>)
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	f003 0302 	and.w	r3, r3, #2
 800445e:	2b00      	cmp	r3, #0
 8004460:	d101      	bne.n	8004466 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8004462:	2301      	movs	r3, #1
 8004464:	e0ab      	b.n	80045be <HAL_RCC_ClockConfig+0x332>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004466:	4b1e      	ldr	r3, [pc, #120]	; (80044e0 <HAL_RCC_ClockConfig+0x254>)
 8004468:	689b      	ldr	r3, [r3, #8]
 800446a:	f023 0203 	bic.w	r2, r3, #3
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	685b      	ldr	r3, [r3, #4]
 8004472:	491b      	ldr	r1, [pc, #108]	; (80044e0 <HAL_RCC_ClockConfig+0x254>)
 8004474:	4313      	orrs	r3, r2
 8004476:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004478:	f7fd ff14 	bl	80022a4 <HAL_GetTick>
 800447c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800447e:	e00a      	b.n	8004496 <HAL_RCC_ClockConfig+0x20a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004480:	f7fd ff10 	bl	80022a4 <HAL_GetTick>
 8004484:	4602      	mov	r2, r0
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	1ad3      	subs	r3, r2, r3
 800448a:	f241 3288 	movw	r2, #5000	; 0x1388
 800448e:	4293      	cmp	r3, r2
 8004490:	d901      	bls.n	8004496 <HAL_RCC_ClockConfig+0x20a>
      {
        return HAL_TIMEOUT;
 8004492:	2303      	movs	r3, #3
 8004494:	e093      	b.n	80045be <HAL_RCC_ClockConfig+0x332>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004496:	4b12      	ldr	r3, [pc, #72]	; (80044e0 <HAL_RCC_ClockConfig+0x254>)
 8004498:	689b      	ldr	r3, [r3, #8]
 800449a:	f003 020c 	and.w	r2, r3, #12
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	685b      	ldr	r3, [r3, #4]
 80044a2:	009b      	lsls	r3, r3, #2
 80044a4:	429a      	cmp	r2, r3
 80044a6:	d1eb      	bne.n	8004480 <HAL_RCC_ClockConfig+0x1f4>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80044a8:	4b0c      	ldr	r3, [pc, #48]	; (80044dc <HAL_RCC_ClockConfig+0x250>)
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	f003 030f 	and.w	r3, r3, #15
 80044b0:	683a      	ldr	r2, [r7, #0]
 80044b2:	429a      	cmp	r2, r3
 80044b4:	d216      	bcs.n	80044e4 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80044b6:	4b09      	ldr	r3, [pc, #36]	; (80044dc <HAL_RCC_ClockConfig+0x250>)
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	f023 020f 	bic.w	r2, r3, #15
 80044be:	4907      	ldr	r1, [pc, #28]	; (80044dc <HAL_RCC_ClockConfig+0x250>)
 80044c0:	683b      	ldr	r3, [r7, #0]
 80044c2:	4313      	orrs	r3, r2
 80044c4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80044c6:	4b05      	ldr	r3, [pc, #20]	; (80044dc <HAL_RCC_ClockConfig+0x250>)
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	f003 030f 	and.w	r3, r3, #15
 80044ce:	683a      	ldr	r2, [r7, #0]
 80044d0:	429a      	cmp	r2, r3
 80044d2:	d007      	beq.n	80044e4 <HAL_RCC_ClockConfig+0x258>
    {
      return HAL_ERROR;
 80044d4:	2301      	movs	r3, #1
 80044d6:	e072      	b.n	80045be <HAL_RCC_ClockConfig+0x332>
 80044d8:	0800ebc4 	.word	0x0800ebc4
 80044dc:	40023c00 	.word	0x40023c00
 80044e0:	40023800 	.word	0x40023800
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	f003 0304 	and.w	r3, r3, #4
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d025      	beq.n	800453c <HAL_RCC_ClockConfig+0x2b0>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	68db      	ldr	r3, [r3, #12]
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d018      	beq.n	800452a <HAL_RCC_ClockConfig+0x29e>
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	68db      	ldr	r3, [r3, #12]
 80044fc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004500:	d013      	beq.n	800452a <HAL_RCC_ClockConfig+0x29e>
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	68db      	ldr	r3, [r3, #12]
 8004506:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800450a:	d00e      	beq.n	800452a <HAL_RCC_ClockConfig+0x29e>
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	68db      	ldr	r3, [r3, #12]
 8004510:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8004514:	d009      	beq.n	800452a <HAL_RCC_ClockConfig+0x29e>
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	68db      	ldr	r3, [r3, #12]
 800451a:	f5b3 5fe0 	cmp.w	r3, #7168	; 0x1c00
 800451e:	d004      	beq.n	800452a <HAL_RCC_ClockConfig+0x29e>
 8004520:	f240 3146 	movw	r1, #838	; 0x346
 8004524:	4828      	ldr	r0, [pc, #160]	; (80045c8 <HAL_RCC_ClockConfig+0x33c>)
 8004526:	f7fd fc4e 	bl	8001dc6 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800452a:	4b28      	ldr	r3, [pc, #160]	; (80045cc <HAL_RCC_ClockConfig+0x340>)
 800452c:	689b      	ldr	r3, [r3, #8]
 800452e:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	68db      	ldr	r3, [r3, #12]
 8004536:	4925      	ldr	r1, [pc, #148]	; (80045cc <HAL_RCC_ClockConfig+0x340>)
 8004538:	4313      	orrs	r3, r2
 800453a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	f003 0308 	and.w	r3, r3, #8
 8004544:	2b00      	cmp	r3, #0
 8004546:	d026      	beq.n	8004596 <HAL_RCC_ClockConfig+0x30a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	691b      	ldr	r3, [r3, #16]
 800454c:	2b00      	cmp	r3, #0
 800454e:	d018      	beq.n	8004582 <HAL_RCC_ClockConfig+0x2f6>
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	691b      	ldr	r3, [r3, #16]
 8004554:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004558:	d013      	beq.n	8004582 <HAL_RCC_ClockConfig+0x2f6>
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	691b      	ldr	r3, [r3, #16]
 800455e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8004562:	d00e      	beq.n	8004582 <HAL_RCC_ClockConfig+0x2f6>
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	691b      	ldr	r3, [r3, #16]
 8004568:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 800456c:	d009      	beq.n	8004582 <HAL_RCC_ClockConfig+0x2f6>
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	691b      	ldr	r3, [r3, #16]
 8004572:	f5b3 5fe0 	cmp.w	r3, #7168	; 0x1c00
 8004576:	d004      	beq.n	8004582 <HAL_RCC_ClockConfig+0x2f6>
 8004578:	f240 314d 	movw	r1, #845	; 0x34d
 800457c:	4812      	ldr	r0, [pc, #72]	; (80045c8 <HAL_RCC_ClockConfig+0x33c>)
 800457e:	f7fd fc22 	bl	8001dc6 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004582:	4b12      	ldr	r3, [pc, #72]	; (80045cc <HAL_RCC_ClockConfig+0x340>)
 8004584:	689b      	ldr	r3, [r3, #8]
 8004586:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	691b      	ldr	r3, [r3, #16]
 800458e:	00db      	lsls	r3, r3, #3
 8004590:	490e      	ldr	r1, [pc, #56]	; (80045cc <HAL_RCC_ClockConfig+0x340>)
 8004592:	4313      	orrs	r3, r2
 8004594:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004596:	f000 f821 	bl	80045dc <HAL_RCC_GetSysClockFreq>
 800459a:	4602      	mov	r2, r0
 800459c:	4b0b      	ldr	r3, [pc, #44]	; (80045cc <HAL_RCC_ClockConfig+0x340>)
 800459e:	689b      	ldr	r3, [r3, #8]
 80045a0:	091b      	lsrs	r3, r3, #4
 80045a2:	f003 030f 	and.w	r3, r3, #15
 80045a6:	490a      	ldr	r1, [pc, #40]	; (80045d0 <HAL_RCC_ClockConfig+0x344>)
 80045a8:	5ccb      	ldrb	r3, [r1, r3]
 80045aa:	fa22 f303 	lsr.w	r3, r2, r3
 80045ae:	4a09      	ldr	r2, [pc, #36]	; (80045d4 <HAL_RCC_ClockConfig+0x348>)
 80045b0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80045b2:	4b09      	ldr	r3, [pc, #36]	; (80045d8 <HAL_RCC_ClockConfig+0x34c>)
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	4618      	mov	r0, r3
 80045b8:	f7fd fe30 	bl	800221c <HAL_InitTick>

  return HAL_OK;
 80045bc:	2300      	movs	r3, #0
}
 80045be:	4618      	mov	r0, r3
 80045c0:	3710      	adds	r7, #16
 80045c2:	46bd      	mov	sp, r7
 80045c4:	bd80      	pop	{r7, pc}
 80045c6:	bf00      	nop
 80045c8:	0800ebc4 	.word	0x0800ebc4
 80045cc:	40023800 	.word	0x40023800
 80045d0:	0800ec74 	.word	0x0800ec74
 80045d4:	20008c8c 	.word	0x20008c8c
 80045d8:	20008c90 	.word	0x20008c90

080045dc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80045dc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80045e0:	b090      	sub	sp, #64	; 0x40
 80045e2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80045e4:	2300      	movs	r3, #0
 80045e6:	637b      	str	r3, [r7, #52]	; 0x34
 80045e8:	2300      	movs	r3, #0
 80045ea:	63fb      	str	r3, [r7, #60]	; 0x3c
 80045ec:	2300      	movs	r3, #0
 80045ee:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0;
 80045f0:	2300      	movs	r3, #0
 80045f2:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80045f4:	4b59      	ldr	r3, [pc, #356]	; (800475c <HAL_RCC_GetSysClockFreq+0x180>)
 80045f6:	689b      	ldr	r3, [r3, #8]
 80045f8:	f003 030c 	and.w	r3, r3, #12
 80045fc:	2b08      	cmp	r3, #8
 80045fe:	d00d      	beq.n	800461c <HAL_RCC_GetSysClockFreq+0x40>
 8004600:	2b08      	cmp	r3, #8
 8004602:	f200 80a1 	bhi.w	8004748 <HAL_RCC_GetSysClockFreq+0x16c>
 8004606:	2b00      	cmp	r3, #0
 8004608:	d002      	beq.n	8004610 <HAL_RCC_GetSysClockFreq+0x34>
 800460a:	2b04      	cmp	r3, #4
 800460c:	d003      	beq.n	8004616 <HAL_RCC_GetSysClockFreq+0x3a>
 800460e:	e09b      	b.n	8004748 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004610:	4b53      	ldr	r3, [pc, #332]	; (8004760 <HAL_RCC_GetSysClockFreq+0x184>)
 8004612:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004614:	e09b      	b.n	800474e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004616:	4b53      	ldr	r3, [pc, #332]	; (8004764 <HAL_RCC_GetSysClockFreq+0x188>)
 8004618:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800461a:	e098      	b.n	800474e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800461c:	4b4f      	ldr	r3, [pc, #316]	; (800475c <HAL_RCC_GetSysClockFreq+0x180>)
 800461e:	685b      	ldr	r3, [r3, #4]
 8004620:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004624:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8004626:	4b4d      	ldr	r3, [pc, #308]	; (800475c <HAL_RCC_GetSysClockFreq+0x180>)
 8004628:	685b      	ldr	r3, [r3, #4]
 800462a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800462e:	2b00      	cmp	r3, #0
 8004630:	d028      	beq.n	8004684 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004632:	4b4a      	ldr	r3, [pc, #296]	; (800475c <HAL_RCC_GetSysClockFreq+0x180>)
 8004634:	685b      	ldr	r3, [r3, #4]
 8004636:	099b      	lsrs	r3, r3, #6
 8004638:	2200      	movs	r2, #0
 800463a:	623b      	str	r3, [r7, #32]
 800463c:	627a      	str	r2, [r7, #36]	; 0x24
 800463e:	6a3b      	ldr	r3, [r7, #32]
 8004640:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8004644:	2100      	movs	r1, #0
 8004646:	4b47      	ldr	r3, [pc, #284]	; (8004764 <HAL_RCC_GetSysClockFreq+0x188>)
 8004648:	fb03 f201 	mul.w	r2, r3, r1
 800464c:	2300      	movs	r3, #0
 800464e:	fb00 f303 	mul.w	r3, r0, r3
 8004652:	4413      	add	r3, r2
 8004654:	4a43      	ldr	r2, [pc, #268]	; (8004764 <HAL_RCC_GetSysClockFreq+0x188>)
 8004656:	fba0 1202 	umull	r1, r2, r0, r2
 800465a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800465c:	460a      	mov	r2, r1
 800465e:	62ba      	str	r2, [r7, #40]	; 0x28
 8004660:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004662:	4413      	add	r3, r2
 8004664:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004666:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004668:	2200      	movs	r2, #0
 800466a:	61bb      	str	r3, [r7, #24]
 800466c:	61fa      	str	r2, [r7, #28]
 800466e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004672:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8004676:	f7fc fab7 	bl	8000be8 <__aeabi_uldivmod>
 800467a:	4602      	mov	r2, r0
 800467c:	460b      	mov	r3, r1
 800467e:	4613      	mov	r3, r2
 8004680:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004682:	e053      	b.n	800472c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004684:	4b35      	ldr	r3, [pc, #212]	; (800475c <HAL_RCC_GetSysClockFreq+0x180>)
 8004686:	685b      	ldr	r3, [r3, #4]
 8004688:	099b      	lsrs	r3, r3, #6
 800468a:	2200      	movs	r2, #0
 800468c:	613b      	str	r3, [r7, #16]
 800468e:	617a      	str	r2, [r7, #20]
 8004690:	693b      	ldr	r3, [r7, #16]
 8004692:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8004696:	f04f 0b00 	mov.w	fp, #0
 800469a:	4652      	mov	r2, sl
 800469c:	465b      	mov	r3, fp
 800469e:	f04f 0000 	mov.w	r0, #0
 80046a2:	f04f 0100 	mov.w	r1, #0
 80046a6:	0159      	lsls	r1, r3, #5
 80046a8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80046ac:	0150      	lsls	r0, r2, #5
 80046ae:	4602      	mov	r2, r0
 80046b0:	460b      	mov	r3, r1
 80046b2:	ebb2 080a 	subs.w	r8, r2, sl
 80046b6:	eb63 090b 	sbc.w	r9, r3, fp
 80046ba:	f04f 0200 	mov.w	r2, #0
 80046be:	f04f 0300 	mov.w	r3, #0
 80046c2:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80046c6:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80046ca:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80046ce:	ebb2 0408 	subs.w	r4, r2, r8
 80046d2:	eb63 0509 	sbc.w	r5, r3, r9
 80046d6:	f04f 0200 	mov.w	r2, #0
 80046da:	f04f 0300 	mov.w	r3, #0
 80046de:	00eb      	lsls	r3, r5, #3
 80046e0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80046e4:	00e2      	lsls	r2, r4, #3
 80046e6:	4614      	mov	r4, r2
 80046e8:	461d      	mov	r5, r3
 80046ea:	eb14 030a 	adds.w	r3, r4, sl
 80046ee:	603b      	str	r3, [r7, #0]
 80046f0:	eb45 030b 	adc.w	r3, r5, fp
 80046f4:	607b      	str	r3, [r7, #4]
 80046f6:	f04f 0200 	mov.w	r2, #0
 80046fa:	f04f 0300 	mov.w	r3, #0
 80046fe:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004702:	4629      	mov	r1, r5
 8004704:	028b      	lsls	r3, r1, #10
 8004706:	4621      	mov	r1, r4
 8004708:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800470c:	4621      	mov	r1, r4
 800470e:	028a      	lsls	r2, r1, #10
 8004710:	4610      	mov	r0, r2
 8004712:	4619      	mov	r1, r3
 8004714:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004716:	2200      	movs	r2, #0
 8004718:	60bb      	str	r3, [r7, #8]
 800471a:	60fa      	str	r2, [r7, #12]
 800471c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004720:	f7fc fa62 	bl	8000be8 <__aeabi_uldivmod>
 8004724:	4602      	mov	r2, r0
 8004726:	460b      	mov	r3, r1
 8004728:	4613      	mov	r3, r2
 800472a:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800472c:	4b0b      	ldr	r3, [pc, #44]	; (800475c <HAL_RCC_GetSysClockFreq+0x180>)
 800472e:	685b      	ldr	r3, [r3, #4]
 8004730:	0c1b      	lsrs	r3, r3, #16
 8004732:	f003 0303 	and.w	r3, r3, #3
 8004736:	3301      	adds	r3, #1
 8004738:	005b      	lsls	r3, r3, #1
 800473a:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 800473c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800473e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004740:	fbb2 f3f3 	udiv	r3, r2, r3
 8004744:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004746:	e002      	b.n	800474e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004748:	4b05      	ldr	r3, [pc, #20]	; (8004760 <HAL_RCC_GetSysClockFreq+0x184>)
 800474a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800474c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800474e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8004750:	4618      	mov	r0, r3
 8004752:	3740      	adds	r7, #64	; 0x40
 8004754:	46bd      	mov	sp, r7
 8004756:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800475a:	bf00      	nop
 800475c:	40023800 	.word	0x40023800
 8004760:	00f42400 	.word	0x00f42400
 8004764:	017d7840 	.word	0x017d7840

08004768 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004768:	b480      	push	{r7}
 800476a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800476c:	4b03      	ldr	r3, [pc, #12]	; (800477c <HAL_RCC_GetHCLKFreq+0x14>)
 800476e:	681b      	ldr	r3, [r3, #0]
}
 8004770:	4618      	mov	r0, r3
 8004772:	46bd      	mov	sp, r7
 8004774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004778:	4770      	bx	lr
 800477a:	bf00      	nop
 800477c:	20008c8c 	.word	0x20008c8c

08004780 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004780:	b580      	push	{r7, lr}
 8004782:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004784:	f7ff fff0 	bl	8004768 <HAL_RCC_GetHCLKFreq>
 8004788:	4602      	mov	r2, r0
 800478a:	4b05      	ldr	r3, [pc, #20]	; (80047a0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800478c:	689b      	ldr	r3, [r3, #8]
 800478e:	0a9b      	lsrs	r3, r3, #10
 8004790:	f003 0307 	and.w	r3, r3, #7
 8004794:	4903      	ldr	r1, [pc, #12]	; (80047a4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004796:	5ccb      	ldrb	r3, [r1, r3]
 8004798:	fa22 f303 	lsr.w	r3, r2, r3
}
 800479c:	4618      	mov	r0, r3
 800479e:	bd80      	pop	{r7, pc}
 80047a0:	40023800 	.word	0x40023800
 80047a4:	0800ec84 	.word	0x0800ec84

080047a8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80047a8:	b580      	push	{r7, lr}
 80047aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80047ac:	f7ff ffdc 	bl	8004768 <HAL_RCC_GetHCLKFreq>
 80047b0:	4602      	mov	r2, r0
 80047b2:	4b05      	ldr	r3, [pc, #20]	; (80047c8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80047b4:	689b      	ldr	r3, [r3, #8]
 80047b6:	0b5b      	lsrs	r3, r3, #13
 80047b8:	f003 0307 	and.w	r3, r3, #7
 80047bc:	4903      	ldr	r1, [pc, #12]	; (80047cc <HAL_RCC_GetPCLK2Freq+0x24>)
 80047be:	5ccb      	ldrb	r3, [r1, r3]
 80047c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80047c4:	4618      	mov	r0, r3
 80047c6:	bd80      	pop	{r7, pc}
 80047c8:	40023800 	.word	0x40023800
 80047cc:	0800ec84 	.word	0x0800ec84

080047d0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80047d0:	b580      	push	{r7, lr}
 80047d2:	b088      	sub	sp, #32
 80047d4:	af00      	add	r7, sp, #0
 80047d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80047d8:	2300      	movs	r3, #0
 80047da:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80047dc:	2300      	movs	r3, #0
 80047de:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80047e0:	2300      	movs	r3, #0
 80047e2:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80047e4:	2300      	movs	r3, #0
 80047e6:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80047e8:	2300      	movs	r3, #0
 80047ea:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	f003 0301 	and.w	r3, r3, #1
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	f040 8089 	bne.w	800490c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	f003 0308 	and.w	r3, r3, #8
 8004802:	2b00      	cmp	r3, #0
 8004804:	f040 8082 	bne.w	800490c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	f003 0310 	and.w	r3, r3, #16
 8004810:	2b00      	cmp	r3, #0
 8004812:	d17b      	bne.n	800490c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800481c:	2b00      	cmp	r3, #0
 800481e:	d175      	bne.n	800490c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004828:	2b00      	cmp	r3, #0
 800482a:	d16f      	bne.n	800490c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004834:	2b00      	cmp	r3, #0
 8004836:	d169      	bne.n	800490c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004840:	2b00      	cmp	r3, #0
 8004842:	d163      	bne.n	800490c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800484c:	2b00      	cmp	r3, #0
 800484e:	d15d      	bne.n	800490c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004858:	2b00      	cmp	r3, #0
 800485a:	d157      	bne.n	800490c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004864:	2b00      	cmp	r3, #0
 8004866:	d151      	bne.n	800490c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004870:	2b00      	cmp	r3, #0
 8004872:	d14b      	bne.n	800490c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800487c:	2b00      	cmp	r3, #0
 800487e:	d145      	bne.n	800490c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004888:	2b00      	cmp	r3, #0
 800488a:	d13f      	bne.n	800490c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004894:	2b00      	cmp	r3, #0
 8004896:	d139      	bne.n	800490c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d133      	bne.n	800490c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d12d      	bne.n	800490c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d127      	bne.n	800490c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d121      	bne.n	800490c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d11b      	bne.n	800490c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d115      	bne.n	800490c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d10f      	bne.n	800490c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d109      	bne.n	800490c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	f003 0320 	and.w	r3, r3, #32
 8004900:	2b00      	cmp	r3, #0
 8004902:	d103      	bne.n	800490c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8004904:	2172      	movs	r1, #114	; 0x72
 8004906:	4895      	ldr	r0, [pc, #596]	; (8004b5c <HAL_RCCEx_PeriphCLKConfig+0x38c>)
 8004908:	f7fd fa5d 	bl	8001dc6 <assert_failed>

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	f003 0301 	and.w	r3, r3, #1
 8004914:	2b00      	cmp	r3, #0
 8004916:	d01f      	beq.n	8004958 <HAL_RCCEx_PeriphCLKConfig+0x188>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800491c:	2b00      	cmp	r3, #0
 800491e:	d008      	beq.n	8004932 <HAL_RCCEx_PeriphCLKConfig+0x162>
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004924:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004928:	d003      	beq.n	8004932 <HAL_RCCEx_PeriphCLKConfig+0x162>
 800492a:	2178      	movs	r1, #120	; 0x78
 800492c:	488b      	ldr	r0, [pc, #556]	; (8004b5c <HAL_RCCEx_PeriphCLKConfig+0x38c>)
 800492e:	f7fd fa4a 	bl	8001dc6 <assert_failed>

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004932:	4b8b      	ldr	r3, [pc, #556]	; (8004b60 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 8004934:	689b      	ldr	r3, [r3, #8]
 8004936:	4a8a      	ldr	r2, [pc, #552]	; (8004b60 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 8004938:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800493c:	6093      	str	r3, [r2, #8]
 800493e:	4b88      	ldr	r3, [pc, #544]	; (8004b60 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 8004940:	689a      	ldr	r2, [r3, #8]
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004946:	4986      	ldr	r1, [pc, #536]	; (8004b60 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 8004948:	4313      	orrs	r3, r2
 800494a:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004950:	2b00      	cmp	r3, #0
 8004952:	d101      	bne.n	8004958 <HAL_RCCEx_PeriphCLKConfig+0x188>
    {
      plli2sused = 1;
 8004954:	2301      	movs	r3, #1
 8004956:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004960:	2b00      	cmp	r3, #0
 8004962:	d029      	beq.n	80049b8 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004968:	2b00      	cmp	r3, #0
 800496a:	d00d      	beq.n	8004988 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004970:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004974:	d008      	beq.n	8004988 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800497a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800497e:	d003      	beq.n	8004988 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8004980:	2188      	movs	r1, #136	; 0x88
 8004982:	4876      	ldr	r0, [pc, #472]	; (8004b5c <HAL_RCCEx_PeriphCLKConfig+0x38c>)
 8004984:	f7fd fa1f 	bl	8001dc6 <assert_failed>

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004988:	4b75      	ldr	r3, [pc, #468]	; (8004b60 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 800498a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800498e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004996:	4972      	ldr	r1, [pc, #456]	; (8004b60 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 8004998:	4313      	orrs	r3, r2
 800499a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049a2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80049a6:	d101      	bne.n	80049ac <HAL_RCCEx_PeriphCLKConfig+0x1dc>
    {
      plli2sused = 1;
 80049a8:	2301      	movs	r3, #1
 80049aa:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d101      	bne.n	80049b8 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
    {
      pllsaiused = 1;
 80049b4:	2301      	movs	r3, #1
 80049b6:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d029      	beq.n	8004a18 <HAL_RCCEx_PeriphCLKConfig+0x248>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d00d      	beq.n	80049e8 <HAL_RCCEx_PeriphCLKConfig+0x218>
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049d0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80049d4:	d008      	beq.n	80049e8 <HAL_RCCEx_PeriphCLKConfig+0x218>
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049da:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80049de:	d003      	beq.n	80049e8 <HAL_RCCEx_PeriphCLKConfig+0x218>
 80049e0:	219c      	movs	r1, #156	; 0x9c
 80049e2:	485e      	ldr	r0, [pc, #376]	; (8004b5c <HAL_RCCEx_PeriphCLKConfig+0x38c>)
 80049e4:	f7fd f9ef 	bl	8001dc6 <assert_failed>

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80049e8:	4b5d      	ldr	r3, [pc, #372]	; (8004b60 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 80049ea:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80049ee:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049f6:	495a      	ldr	r1, [pc, #360]	; (8004b60 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 80049f8:	4313      	orrs	r3, r2
 80049fa:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a02:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004a06:	d101      	bne.n	8004a0c <HAL_RCCEx_PeriphCLKConfig+0x23c>
    {
      plli2sused = 1;
 8004a08:	2301      	movs	r3, #1
 8004a0a:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d101      	bne.n	8004a18 <HAL_RCCEx_PeriphCLKConfig+0x248>
    {
      pllsaiused = 1;
 8004a14:	2301      	movs	r3, #1
 8004a16:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d001      	beq.n	8004a28 <HAL_RCCEx_PeriphCLKConfig+0x258>
  {
      plli2sused = 1;
 8004a24:	2301      	movs	r3, #1
 8004a26:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	f003 0320 	and.w	r3, r3, #32
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	f000 8186 	beq.w	8004d42 <HAL_RCCEx_PeriphCLKConfig+0x572>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a3a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004a3e:	f000 80e4 	beq.w	8004c0a <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a46:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004a4a:	f000 80de 	beq.w	8004c0a <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a52:	4a44      	ldr	r2, [pc, #272]	; (8004b64 <HAL_RCCEx_PeriphCLKConfig+0x394>)
 8004a54:	4293      	cmp	r3, r2
 8004a56:	f000 80d8 	beq.w	8004c0a <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a5e:	4a42      	ldr	r2, [pc, #264]	; (8004b68 <HAL_RCCEx_PeriphCLKConfig+0x398>)
 8004a60:	4293      	cmp	r3, r2
 8004a62:	f000 80d2 	beq.w	8004c0a <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a6a:	4a40      	ldr	r2, [pc, #256]	; (8004b6c <HAL_RCCEx_PeriphCLKConfig+0x39c>)
 8004a6c:	4293      	cmp	r3, r2
 8004a6e:	f000 80cc 	beq.w	8004c0a <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a76:	4a3e      	ldr	r2, [pc, #248]	; (8004b70 <HAL_RCCEx_PeriphCLKConfig+0x3a0>)
 8004a78:	4293      	cmp	r3, r2
 8004a7a:	f000 80c6 	beq.w	8004c0a <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a82:	4a3c      	ldr	r2, [pc, #240]	; (8004b74 <HAL_RCCEx_PeriphCLKConfig+0x3a4>)
 8004a84:	4293      	cmp	r3, r2
 8004a86:	f000 80c0 	beq.w	8004c0a <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a8e:	4a3a      	ldr	r2, [pc, #232]	; (8004b78 <HAL_RCCEx_PeriphCLKConfig+0x3a8>)
 8004a90:	4293      	cmp	r3, r2
 8004a92:	f000 80ba 	beq.w	8004c0a <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a9a:	4a38      	ldr	r2, [pc, #224]	; (8004b7c <HAL_RCCEx_PeriphCLKConfig+0x3ac>)
 8004a9c:	4293      	cmp	r3, r2
 8004a9e:	f000 80b4 	beq.w	8004c0a <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004aa6:	4a36      	ldr	r2, [pc, #216]	; (8004b80 <HAL_RCCEx_PeriphCLKConfig+0x3b0>)
 8004aa8:	4293      	cmp	r3, r2
 8004aaa:	f000 80ae 	beq.w	8004c0a <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ab2:	4a34      	ldr	r2, [pc, #208]	; (8004b84 <HAL_RCCEx_PeriphCLKConfig+0x3b4>)
 8004ab4:	4293      	cmp	r3, r2
 8004ab6:	f000 80a8 	beq.w	8004c0a <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004abe:	4a32      	ldr	r2, [pc, #200]	; (8004b88 <HAL_RCCEx_PeriphCLKConfig+0x3b8>)
 8004ac0:	4293      	cmp	r3, r2
 8004ac2:	f000 80a2 	beq.w	8004c0a <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004aca:	4a30      	ldr	r2, [pc, #192]	; (8004b8c <HAL_RCCEx_PeriphCLKConfig+0x3bc>)
 8004acc:	4293      	cmp	r3, r2
 8004ace:	f000 809c 	beq.w	8004c0a <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ad6:	4a2e      	ldr	r2, [pc, #184]	; (8004b90 <HAL_RCCEx_PeriphCLKConfig+0x3c0>)
 8004ad8:	4293      	cmp	r3, r2
 8004ada:	f000 8096 	beq.w	8004c0a <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ae2:	4a2c      	ldr	r2, [pc, #176]	; (8004b94 <HAL_RCCEx_PeriphCLKConfig+0x3c4>)
 8004ae4:	4293      	cmp	r3, r2
 8004ae6:	f000 8090 	beq.w	8004c0a <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004aee:	4a2a      	ldr	r2, [pc, #168]	; (8004b98 <HAL_RCCEx_PeriphCLKConfig+0x3c8>)
 8004af0:	4293      	cmp	r3, r2
 8004af2:	f000 808a 	beq.w	8004c0a <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004afa:	4a28      	ldr	r2, [pc, #160]	; (8004b9c <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8004afc:	4293      	cmp	r3, r2
 8004afe:	f000 8084 	beq.w	8004c0a <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b06:	4a26      	ldr	r2, [pc, #152]	; (8004ba0 <HAL_RCCEx_PeriphCLKConfig+0x3d0>)
 8004b08:	4293      	cmp	r3, r2
 8004b0a:	d07e      	beq.n	8004c0a <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b10:	4a24      	ldr	r2, [pc, #144]	; (8004ba4 <HAL_RCCEx_PeriphCLKConfig+0x3d4>)
 8004b12:	4293      	cmp	r3, r2
 8004b14:	d079      	beq.n	8004c0a <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b1a:	4a23      	ldr	r2, [pc, #140]	; (8004ba8 <HAL_RCCEx_PeriphCLKConfig+0x3d8>)
 8004b1c:	4293      	cmp	r3, r2
 8004b1e:	d074      	beq.n	8004c0a <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b24:	4a21      	ldr	r2, [pc, #132]	; (8004bac <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004b26:	4293      	cmp	r3, r2
 8004b28:	d06f      	beq.n	8004c0a <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b2e:	4a20      	ldr	r2, [pc, #128]	; (8004bb0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004b30:	4293      	cmp	r3, r2
 8004b32:	d06a      	beq.n	8004c0a <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b38:	4a1e      	ldr	r2, [pc, #120]	; (8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004b3a:	4293      	cmp	r3, r2
 8004b3c:	d065      	beq.n	8004c0a <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b42:	4a1d      	ldr	r2, [pc, #116]	; (8004bb8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004b44:	4293      	cmp	r3, r2
 8004b46:	d060      	beq.n	8004c0a <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b4c:	4a1b      	ldr	r2, [pc, #108]	; (8004bbc <HAL_RCCEx_PeriphCLKConfig+0x3ec>)
 8004b4e:	4293      	cmp	r3, r2
 8004b50:	d05b      	beq.n	8004c0a <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b56:	4a1a      	ldr	r2, [pc, #104]	; (8004bc0 <HAL_RCCEx_PeriphCLKConfig+0x3f0>)
 8004b58:	4293      	cmp	r3, r2
 8004b5a:	e033      	b.n	8004bc4 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
 8004b5c:	0800ebfc 	.word	0x0800ebfc
 8004b60:	40023800 	.word	0x40023800
 8004b64:	00020300 	.word	0x00020300
 8004b68:	00030300 	.word	0x00030300
 8004b6c:	00040300 	.word	0x00040300
 8004b70:	00050300 	.word	0x00050300
 8004b74:	00060300 	.word	0x00060300
 8004b78:	00070300 	.word	0x00070300
 8004b7c:	00080300 	.word	0x00080300
 8004b80:	00090300 	.word	0x00090300
 8004b84:	000a0300 	.word	0x000a0300
 8004b88:	000b0300 	.word	0x000b0300
 8004b8c:	000c0300 	.word	0x000c0300
 8004b90:	000d0300 	.word	0x000d0300
 8004b94:	000e0300 	.word	0x000e0300
 8004b98:	000f0300 	.word	0x000f0300
 8004b9c:	00100300 	.word	0x00100300
 8004ba0:	00110300 	.word	0x00110300
 8004ba4:	00120300 	.word	0x00120300
 8004ba8:	00130300 	.word	0x00130300
 8004bac:	00140300 	.word	0x00140300
 8004bb0:	00150300 	.word	0x00150300
 8004bb4:	00160300 	.word	0x00160300
 8004bb8:	00170300 	.word	0x00170300
 8004bbc:	00180300 	.word	0x00180300
 8004bc0:	00190300 	.word	0x00190300
 8004bc4:	d021      	beq.n	8004c0a <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bca:	4a4c      	ldr	r2, [pc, #304]	; (8004cfc <HAL_RCCEx_PeriphCLKConfig+0x52c>)
 8004bcc:	4293      	cmp	r3, r2
 8004bce:	d01c      	beq.n	8004c0a <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bd4:	4a4a      	ldr	r2, [pc, #296]	; (8004d00 <HAL_RCCEx_PeriphCLKConfig+0x530>)
 8004bd6:	4293      	cmp	r3, r2
 8004bd8:	d017      	beq.n	8004c0a <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bde:	4a49      	ldr	r2, [pc, #292]	; (8004d04 <HAL_RCCEx_PeriphCLKConfig+0x534>)
 8004be0:	4293      	cmp	r3, r2
 8004be2:	d012      	beq.n	8004c0a <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004be8:	4a47      	ldr	r2, [pc, #284]	; (8004d08 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8004bea:	4293      	cmp	r3, r2
 8004bec:	d00d      	beq.n	8004c0a <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bf2:	4a46      	ldr	r2, [pc, #280]	; (8004d0c <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 8004bf4:	4293      	cmp	r3, r2
 8004bf6:	d008      	beq.n	8004c0a <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bfc:	4a44      	ldr	r2, [pc, #272]	; (8004d10 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8004bfe:	4293      	cmp	r3, r2
 8004c00:	d003      	beq.n	8004c0a <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8004c02:	21b7      	movs	r1, #183	; 0xb7
 8004c04:	4843      	ldr	r0, [pc, #268]	; (8004d14 <HAL_RCCEx_PeriphCLKConfig+0x544>)
 8004c06:	f7fd f8de 	bl	8001dc6 <assert_failed>

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004c0a:	4b43      	ldr	r3, [pc, #268]	; (8004d18 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004c0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c0e:	4a42      	ldr	r2, [pc, #264]	; (8004d18 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004c10:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004c14:	6413      	str	r3, [r2, #64]	; 0x40
 8004c16:	4b40      	ldr	r3, [pc, #256]	; (8004d18 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004c18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c1e:	60bb      	str	r3, [r7, #8]
 8004c20:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004c22:	4b3e      	ldr	r3, [pc, #248]	; (8004d1c <HAL_RCCEx_PeriphCLKConfig+0x54c>)
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	4a3d      	ldr	r2, [pc, #244]	; (8004d1c <HAL_RCCEx_PeriphCLKConfig+0x54c>)
 8004c28:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004c2c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004c2e:	f7fd fb39 	bl	80022a4 <HAL_GetTick>
 8004c32:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004c34:	e009      	b.n	8004c4a <HAL_RCCEx_PeriphCLKConfig+0x47a>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004c36:	f7fd fb35 	bl	80022a4 <HAL_GetTick>
 8004c3a:	4602      	mov	r2, r0
 8004c3c:	697b      	ldr	r3, [r7, #20]
 8004c3e:	1ad3      	subs	r3, r2, r3
 8004c40:	2b64      	cmp	r3, #100	; 0x64
 8004c42:	d902      	bls.n	8004c4a <HAL_RCCEx_PeriphCLKConfig+0x47a>
      {
        return HAL_TIMEOUT;
 8004c44:	2303      	movs	r3, #3
 8004c46:	f000 bd9f 	b.w	8005788 <HAL_RCCEx_PeriphCLKConfig+0xfb8>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004c4a:	4b34      	ldr	r3, [pc, #208]	; (8004d1c <HAL_RCCEx_PeriphCLKConfig+0x54c>)
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d0ef      	beq.n	8004c36 <HAL_RCCEx_PeriphCLKConfig+0x466>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004c56:	4b30      	ldr	r3, [pc, #192]	; (8004d18 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004c58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c5a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004c5e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004c60:	693b      	ldr	r3, [r7, #16]
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d036      	beq.n	8004cd4 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c6a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004c6e:	693a      	ldr	r2, [r7, #16]
 8004c70:	429a      	cmp	r2, r3
 8004c72:	d02f      	beq.n	8004cd4 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004c74:	4b28      	ldr	r3, [pc, #160]	; (8004d18 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004c76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c78:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004c7c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004c7e:	4b26      	ldr	r3, [pc, #152]	; (8004d18 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004c80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c82:	4a25      	ldr	r2, [pc, #148]	; (8004d18 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004c84:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004c88:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004c8a:	4b23      	ldr	r3, [pc, #140]	; (8004d18 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004c8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c8e:	4a22      	ldr	r2, [pc, #136]	; (8004d18 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004c90:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004c94:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8004c96:	4a20      	ldr	r2, [pc, #128]	; (8004d18 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004c98:	693b      	ldr	r3, [r7, #16]
 8004c9a:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004c9c:	4b1e      	ldr	r3, [pc, #120]	; (8004d18 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004c9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ca0:	f003 0301 	and.w	r3, r3, #1
 8004ca4:	2b01      	cmp	r3, #1
 8004ca6:	d115      	bne.n	8004cd4 <HAL_RCCEx_PeriphCLKConfig+0x504>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ca8:	f7fd fafc 	bl	80022a4 <HAL_GetTick>
 8004cac:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004cae:	e00b      	b.n	8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x4f8>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004cb0:	f7fd faf8 	bl	80022a4 <HAL_GetTick>
 8004cb4:	4602      	mov	r2, r0
 8004cb6:	697b      	ldr	r3, [r7, #20]
 8004cb8:	1ad3      	subs	r3, r2, r3
 8004cba:	f241 3288 	movw	r2, #5000	; 0x1388
 8004cbe:	4293      	cmp	r3, r2
 8004cc0:	d902      	bls.n	8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x4f8>
          {
            return HAL_TIMEOUT;
 8004cc2:	2303      	movs	r3, #3
 8004cc4:	f000 bd60 	b.w	8005788 <HAL_RCCEx_PeriphCLKConfig+0xfb8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004cc8:	4b13      	ldr	r3, [pc, #76]	; (8004d18 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004cca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ccc:	f003 0302 	and.w	r3, r3, #2
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d0ed      	beq.n	8004cb0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cd8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004cdc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004ce0:	d120      	bne.n	8004d24 <HAL_RCCEx_PeriphCLKConfig+0x554>
 8004ce2:	4b0d      	ldr	r3, [pc, #52]	; (8004d18 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004ce4:	689b      	ldr	r3, [r3, #8]
 8004ce6:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004cee:	4b0c      	ldr	r3, [pc, #48]	; (8004d20 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 8004cf0:	400b      	ands	r3, r1
 8004cf2:	4909      	ldr	r1, [pc, #36]	; (8004d18 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8004cf4:	4313      	orrs	r3, r2
 8004cf6:	608b      	str	r3, [r1, #8]
 8004cf8:	e01a      	b.n	8004d30 <HAL_RCCEx_PeriphCLKConfig+0x560>
 8004cfa:	bf00      	nop
 8004cfc:	001a0300 	.word	0x001a0300
 8004d00:	001b0300 	.word	0x001b0300
 8004d04:	001c0300 	.word	0x001c0300
 8004d08:	001d0300 	.word	0x001d0300
 8004d0c:	001e0300 	.word	0x001e0300
 8004d10:	001f0300 	.word	0x001f0300
 8004d14:	0800ebfc 	.word	0x0800ebfc
 8004d18:	40023800 	.word	0x40023800
 8004d1c:	40007000 	.word	0x40007000
 8004d20:	0ffffcff 	.word	0x0ffffcff
 8004d24:	4b9a      	ldr	r3, [pc, #616]	; (8004f90 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8004d26:	689b      	ldr	r3, [r3, #8]
 8004d28:	4a99      	ldr	r2, [pc, #612]	; (8004f90 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8004d2a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004d2e:	6093      	str	r3, [r2, #8]
 8004d30:	4b97      	ldr	r3, [pc, #604]	; (8004f90 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8004d32:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d38:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004d3c:	4994      	ldr	r1, [pc, #592]	; (8004f90 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8004d3e:	4313      	orrs	r3, r2
 8004d40:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	f003 0310 	and.w	r3, r3, #16
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d01d      	beq.n	8004d8a <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d008      	beq.n	8004d68 <HAL_RCCEx_PeriphCLKConfig+0x598>
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d5a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004d5e:	d003      	beq.n	8004d68 <HAL_RCCEx_PeriphCLKConfig+0x598>
 8004d60:	21f1      	movs	r1, #241	; 0xf1
 8004d62:	488c      	ldr	r0, [pc, #560]	; (8004f94 <HAL_RCCEx_PeriphCLKConfig+0x7c4>)
 8004d64:	f7fd f82f 	bl	8001dc6 <assert_failed>

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004d68:	4b89      	ldr	r3, [pc, #548]	; (8004f90 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8004d6a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004d6e:	4a88      	ldr	r2, [pc, #544]	; (8004f90 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8004d70:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004d74:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8004d78:	4b85      	ldr	r3, [pc, #532]	; (8004f90 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8004d7a:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d82:	4983      	ldr	r1, [pc, #524]	; (8004f90 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8004d84:	4313      	orrs	r3, r2
 8004d86:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d01c      	beq.n	8004dd0 <HAL_RCCEx_PeriphCLKConfig+0x600>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d00d      	beq.n	8004dba <HAL_RCCEx_PeriphCLKConfig+0x5ea>
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004da2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004da6:	d008      	beq.n	8004dba <HAL_RCCEx_PeriphCLKConfig+0x5ea>
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004dac:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004db0:	d003      	beq.n	8004dba <HAL_RCCEx_PeriphCLKConfig+0x5ea>
 8004db2:	21fb      	movs	r1, #251	; 0xfb
 8004db4:	4877      	ldr	r0, [pc, #476]	; (8004f94 <HAL_RCCEx_PeriphCLKConfig+0x7c4>)
 8004db6:	f7fd f806 	bl	8001dc6 <assert_failed>

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004dba:	4b75      	ldr	r3, [pc, #468]	; (8004f90 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8004dbc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004dc0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004dc8:	4971      	ldr	r1, [pc, #452]	; (8004f90 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8004dca:	4313      	orrs	r3, r2
 8004dcc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d01d      	beq.n	8004e18 <HAL_RCCEx_PeriphCLKConfig+0x648>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d00e      	beq.n	8004e02 <HAL_RCCEx_PeriphCLKConfig+0x632>
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004de8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004dec:	d009      	beq.n	8004e02 <HAL_RCCEx_PeriphCLKConfig+0x632>
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004df2:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004df6:	d004      	beq.n	8004e02 <HAL_RCCEx_PeriphCLKConfig+0x632>
 8004df8:	f240 1105 	movw	r1, #261	; 0x105
 8004dfc:	4865      	ldr	r0, [pc, #404]	; (8004f94 <HAL_RCCEx_PeriphCLKConfig+0x7c4>)
 8004dfe:	f7fc ffe2 	bl	8001dc6 <assert_failed>

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004e02:	4b63      	ldr	r3, [pc, #396]	; (8004f90 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8004e04:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e08:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004e10:	495f      	ldr	r1, [pc, #380]	; (8004f90 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8004e12:	4313      	orrs	r3, r2
 8004e14:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d01d      	beq.n	8004e60 <HAL_RCCEx_PeriphCLKConfig+0x690>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d00e      	beq.n	8004e4a <HAL_RCCEx_PeriphCLKConfig+0x67a>
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004e30:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004e34:	d009      	beq.n	8004e4a <HAL_RCCEx_PeriphCLKConfig+0x67a>
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004e3a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004e3e:	d004      	beq.n	8004e4a <HAL_RCCEx_PeriphCLKConfig+0x67a>
 8004e40:	f240 110f 	movw	r1, #271	; 0x10f
 8004e44:	4853      	ldr	r0, [pc, #332]	; (8004f94 <HAL_RCCEx_PeriphCLKConfig+0x7c4>)
 8004e46:	f7fc ffbe 	bl	8001dc6 <assert_failed>

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004e4a:	4b51      	ldr	r3, [pc, #324]	; (8004f90 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8004e4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e50:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004e58:	494d      	ldr	r1, [pc, #308]	; (8004f90 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8004e5a:	4313      	orrs	r3, r2
 8004e5c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d01d      	beq.n	8004ea8 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d00e      	beq.n	8004e92 <HAL_RCCEx_PeriphCLKConfig+0x6c2>
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e78:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004e7c:	d009      	beq.n	8004e92 <HAL_RCCEx_PeriphCLKConfig+0x6c2>
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e82:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004e86:	d004      	beq.n	8004e92 <HAL_RCCEx_PeriphCLKConfig+0x6c2>
 8004e88:	f240 1119 	movw	r1, #281	; 0x119
 8004e8c:	4841      	ldr	r0, [pc, #260]	; (8004f94 <HAL_RCCEx_PeriphCLKConfig+0x7c4>)
 8004e8e:	f7fc ff9a 	bl	8001dc6 <assert_failed>

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004e92:	4b3f      	ldr	r3, [pc, #252]	; (8004f90 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8004e94:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e98:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ea0:	493b      	ldr	r1, [pc, #236]	; (8004f90 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8004ea2:	4313      	orrs	r3, r2
 8004ea4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d01f      	beq.n	8004ef4 <HAL_RCCEx_PeriphCLKConfig+0x724>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d010      	beq.n	8004ede <HAL_RCCEx_PeriphCLKConfig+0x70e>
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ec0:	2b01      	cmp	r3, #1
 8004ec2:	d00c      	beq.n	8004ede <HAL_RCCEx_PeriphCLKConfig+0x70e>
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ec8:	2b03      	cmp	r3, #3
 8004eca:	d008      	beq.n	8004ede <HAL_RCCEx_PeriphCLKConfig+0x70e>
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ed0:	2b02      	cmp	r3, #2
 8004ed2:	d004      	beq.n	8004ede <HAL_RCCEx_PeriphCLKConfig+0x70e>
 8004ed4:	f240 1123 	movw	r1, #291	; 0x123
 8004ed8:	482e      	ldr	r0, [pc, #184]	; (8004f94 <HAL_RCCEx_PeriphCLKConfig+0x7c4>)
 8004eda:	f7fc ff74 	bl	8001dc6 <assert_failed>

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004ede:	4b2c      	ldr	r3, [pc, #176]	; (8004f90 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8004ee0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ee4:	f023 0203 	bic.w	r2, r3, #3
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004eec:	4928      	ldr	r1, [pc, #160]	; (8004f90 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8004eee:	4313      	orrs	r3, r2
 8004ef0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d01f      	beq.n	8004f40 <HAL_RCCEx_PeriphCLKConfig+0x770>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d010      	beq.n	8004f2a <HAL_RCCEx_PeriphCLKConfig+0x75a>
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004f0c:	2b04      	cmp	r3, #4
 8004f0e:	d00c      	beq.n	8004f2a <HAL_RCCEx_PeriphCLKConfig+0x75a>
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004f14:	2b0c      	cmp	r3, #12
 8004f16:	d008      	beq.n	8004f2a <HAL_RCCEx_PeriphCLKConfig+0x75a>
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004f1c:	2b08      	cmp	r3, #8
 8004f1e:	d004      	beq.n	8004f2a <HAL_RCCEx_PeriphCLKConfig+0x75a>
 8004f20:	f240 112d 	movw	r1, #301	; 0x12d
 8004f24:	481b      	ldr	r0, [pc, #108]	; (8004f94 <HAL_RCCEx_PeriphCLKConfig+0x7c4>)
 8004f26:	f7fc ff4e 	bl	8001dc6 <assert_failed>

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004f2a:	4b19      	ldr	r3, [pc, #100]	; (8004f90 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8004f2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f30:	f023 020c 	bic.w	r2, r3, #12
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004f38:	4915      	ldr	r1, [pc, #84]	; (8004f90 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8004f3a:	4313      	orrs	r3, r2
 8004f3c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d025      	beq.n	8004f98 <HAL_RCCEx_PeriphCLKConfig+0x7c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d010      	beq.n	8004f76 <HAL_RCCEx_PeriphCLKConfig+0x7a6>
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f58:	2b10      	cmp	r3, #16
 8004f5a:	d00c      	beq.n	8004f76 <HAL_RCCEx_PeriphCLKConfig+0x7a6>
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f60:	2b30      	cmp	r3, #48	; 0x30
 8004f62:	d008      	beq.n	8004f76 <HAL_RCCEx_PeriphCLKConfig+0x7a6>
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f68:	2b20      	cmp	r3, #32
 8004f6a:	d004      	beq.n	8004f76 <HAL_RCCEx_PeriphCLKConfig+0x7a6>
 8004f6c:	f240 1137 	movw	r1, #311	; 0x137
 8004f70:	4808      	ldr	r0, [pc, #32]	; (8004f94 <HAL_RCCEx_PeriphCLKConfig+0x7c4>)
 8004f72:	f7fc ff28 	bl	8001dc6 <assert_failed>

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004f76:	4b06      	ldr	r3, [pc, #24]	; (8004f90 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8004f78:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f7c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f84:	4902      	ldr	r1, [pc, #8]	; (8004f90 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8004f86:	4313      	orrs	r3, r2
 8004f88:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004f8c:	e004      	b.n	8004f98 <HAL_RCCEx_PeriphCLKConfig+0x7c8>
 8004f8e:	bf00      	nop
 8004f90:	40023800 	.word	0x40023800
 8004f94:	0800ebfc 	.word	0x0800ebfc
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d01f      	beq.n	8004fe4 <HAL_RCCEx_PeriphCLKConfig+0x814>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d010      	beq.n	8004fce <HAL_RCCEx_PeriphCLKConfig+0x7fe>
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004fb0:	2b40      	cmp	r3, #64	; 0x40
 8004fb2:	d00c      	beq.n	8004fce <HAL_RCCEx_PeriphCLKConfig+0x7fe>
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004fb8:	2bc0      	cmp	r3, #192	; 0xc0
 8004fba:	d008      	beq.n	8004fce <HAL_RCCEx_PeriphCLKConfig+0x7fe>
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004fc0:	2b80      	cmp	r3, #128	; 0x80
 8004fc2:	d004      	beq.n	8004fce <HAL_RCCEx_PeriphCLKConfig+0x7fe>
 8004fc4:	f240 1141 	movw	r1, #321	; 0x141
 8004fc8:	48a0      	ldr	r0, [pc, #640]	; (800524c <HAL_RCCEx_PeriphCLKConfig+0xa7c>)
 8004fca:	f7fc fefc 	bl	8001dc6 <assert_failed>

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004fce:	4ba0      	ldr	r3, [pc, #640]	; (8005250 <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 8004fd0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004fd4:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004fdc:	499c      	ldr	r1, [pc, #624]	; (8005250 <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 8004fde:	4313      	orrs	r3, r2
 8004fe0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d022      	beq.n	8005036 <HAL_RCCEx_PeriphCLKConfig+0x866>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d013      	beq.n	8005020 <HAL_RCCEx_PeriphCLKConfig+0x850>
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ffc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005000:	d00e      	beq.n	8005020 <HAL_RCCEx_PeriphCLKConfig+0x850>
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005006:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800500a:	d009      	beq.n	8005020 <HAL_RCCEx_PeriphCLKConfig+0x850>
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005010:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005014:	d004      	beq.n	8005020 <HAL_RCCEx_PeriphCLKConfig+0x850>
 8005016:	f240 114b 	movw	r1, #331	; 0x14b
 800501a:	488c      	ldr	r0, [pc, #560]	; (800524c <HAL_RCCEx_PeriphCLKConfig+0xa7c>)
 800501c:	f7fc fed3 	bl	8001dc6 <assert_failed>

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005020:	4b8b      	ldr	r3, [pc, #556]	; (8005250 <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 8005022:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005026:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800502e:	4988      	ldr	r1, [pc, #544]	; (8005250 <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 8005030:	4313      	orrs	r3, r2
 8005032:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800503e:	2b00      	cmp	r3, #0
 8005040:	d022      	beq.n	8005088 <HAL_RCCEx_PeriphCLKConfig+0x8b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005046:	2b00      	cmp	r3, #0
 8005048:	d013      	beq.n	8005072 <HAL_RCCEx_PeriphCLKConfig+0x8a2>
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800504e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005052:	d00e      	beq.n	8005072 <HAL_RCCEx_PeriphCLKConfig+0x8a2>
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005058:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800505c:	d009      	beq.n	8005072 <HAL_RCCEx_PeriphCLKConfig+0x8a2>
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005062:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005066:	d004      	beq.n	8005072 <HAL_RCCEx_PeriphCLKConfig+0x8a2>
 8005068:	f240 1155 	movw	r1, #341	; 0x155
 800506c:	4877      	ldr	r0, [pc, #476]	; (800524c <HAL_RCCEx_PeriphCLKConfig+0xa7c>)
 800506e:	f7fc feaa 	bl	8001dc6 <assert_failed>

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8005072:	4b77      	ldr	r3, [pc, #476]	; (8005250 <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 8005074:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005078:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005080:	4973      	ldr	r1, [pc, #460]	; (8005250 <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 8005082:	4313      	orrs	r3, r2
 8005084:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005090:	2b00      	cmp	r3, #0
 8005092:	d022      	beq.n	80050da <HAL_RCCEx_PeriphCLKConfig+0x90a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005098:	2b00      	cmp	r3, #0
 800509a:	d013      	beq.n	80050c4 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80050a0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80050a4:	d00e      	beq.n	80050c4 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80050aa:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80050ae:	d009      	beq.n	80050c4 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80050b4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80050b8:	d004      	beq.n	80050c4 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
 80050ba:	f240 115f 	movw	r1, #351	; 0x15f
 80050be:	4863      	ldr	r0, [pc, #396]	; (800524c <HAL_RCCEx_PeriphCLKConfig+0xa7c>)
 80050c0:	f7fc fe81 	bl	8001dc6 <assert_failed>

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80050c4:	4b62      	ldr	r3, [pc, #392]	; (8005250 <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 80050c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050ca:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80050d2:	495f      	ldr	r1, [pc, #380]	; (8005250 <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 80050d4:	4313      	orrs	r3, r2
 80050d6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d022      	beq.n	800512c <HAL_RCCEx_PeriphCLKConfig+0x95c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d013      	beq.n	8005116 <HAL_RCCEx_PeriphCLKConfig+0x946>
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80050f2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80050f6:	d00e      	beq.n	8005116 <HAL_RCCEx_PeriphCLKConfig+0x946>
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80050fc:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8005100:	d009      	beq.n	8005116 <HAL_RCCEx_PeriphCLKConfig+0x946>
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005106:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800510a:	d004      	beq.n	8005116 <HAL_RCCEx_PeriphCLKConfig+0x946>
 800510c:	f240 1169 	movw	r1, #361	; 0x169
 8005110:	484e      	ldr	r0, [pc, #312]	; (800524c <HAL_RCCEx_PeriphCLKConfig+0xa7c>)
 8005112:	f7fc fe58 	bl	8001dc6 <assert_failed>

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8005116:	4b4e      	ldr	r3, [pc, #312]	; (8005250 <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 8005118:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800511c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005124:	494a      	ldr	r1, [pc, #296]	; (8005250 <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 8005126:	4313      	orrs	r3, r2
 8005128:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005134:	2b00      	cmp	r3, #0
 8005136:	d018      	beq.n	800516a <HAL_RCCEx_PeriphCLKConfig+0x99a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800513c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005140:	d008      	beq.n	8005154 <HAL_RCCEx_PeriphCLKConfig+0x984>
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005146:	2b00      	cmp	r3, #0
 8005148:	d004      	beq.n	8005154 <HAL_RCCEx_PeriphCLKConfig+0x984>
 800514a:	f240 1173 	movw	r1, #371	; 0x173
 800514e:	483f      	ldr	r0, [pc, #252]	; (800524c <HAL_RCCEx_PeriphCLKConfig+0xa7c>)
 8005150:	f7fc fe39 	bl	8001dc6 <assert_failed>

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005154:	4b3e      	ldr	r3, [pc, #248]	; (8005250 <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 8005156:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800515a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005162:	493b      	ldr	r1, [pc, #236]	; (8005250 <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 8005164:	4313      	orrs	r3, r2
 8005166:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005172:	2b00      	cmp	r3, #0
 8005174:	d01f      	beq.n	80051b6 <HAL_RCCEx_PeriphCLKConfig+0x9e6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800517a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800517e:	d008      	beq.n	8005192 <HAL_RCCEx_PeriphCLKConfig+0x9c2>
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005184:	2b00      	cmp	r3, #0
 8005186:	d004      	beq.n	8005192 <HAL_RCCEx_PeriphCLKConfig+0x9c2>
 8005188:	f240 117d 	movw	r1, #381	; 0x17d
 800518c:	482f      	ldr	r0, [pc, #188]	; (800524c <HAL_RCCEx_PeriphCLKConfig+0xa7c>)
 800518e:	f7fc fe1a 	bl	8001dc6 <assert_failed>

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8005192:	4b2f      	ldr	r3, [pc, #188]	; (8005250 <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 8005194:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005198:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80051a0:	492b      	ldr	r1, [pc, #172]	; (8005250 <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 80051a2:	4313      	orrs	r3, r2
 80051a4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80051ac:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80051b0:	d101      	bne.n	80051b6 <HAL_RCCEx_PeriphCLKConfig+0x9e6>
    {
      pllsaiused = 1;
 80051b2:	2301      	movs	r3, #1
 80051b4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	f003 0308 	and.w	r3, r3, #8
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d001      	beq.n	80051c6 <HAL_RCCEx_PeriphCLKConfig+0x9f6>
  {
    pllsaiused = 1;
 80051c2:	2301      	movs	r3, #1
 80051c4:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d022      	beq.n	8005218 <HAL_RCCEx_PeriphCLKConfig+0xa48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d013      	beq.n	8005202 <HAL_RCCEx_PeriphCLKConfig+0xa32>
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80051de:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80051e2:	d00e      	beq.n	8005202 <HAL_RCCEx_PeriphCLKConfig+0xa32>
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80051e8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80051ec:	d009      	beq.n	8005202 <HAL_RCCEx_PeriphCLKConfig+0xa32>
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80051f2:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80051f6:	d004      	beq.n	8005202 <HAL_RCCEx_PeriphCLKConfig+0xa32>
 80051f8:	f240 1195 	movw	r1, #405	; 0x195
 80051fc:	4813      	ldr	r0, [pc, #76]	; (800524c <HAL_RCCEx_PeriphCLKConfig+0xa7c>)
 80051fe:	f7fc fde2 	bl	8001dc6 <assert_failed>

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005202:	4b13      	ldr	r3, [pc, #76]	; (8005250 <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 8005204:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005208:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005210:	490f      	ldr	r1, [pc, #60]	; (8005250 <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 8005212:	4313      	orrs	r3, r2
 8005214:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005220:	2b00      	cmp	r3, #0
 8005222:	d020      	beq.n	8005266 <HAL_RCCEx_PeriphCLKConfig+0xa96>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800522a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800522e:	d009      	beq.n	8005244 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005236:	2b00      	cmp	r3, #0
 8005238:	d004      	beq.n	8005244 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 800523a:	f240 119f 	movw	r1, #415	; 0x19f
 800523e:	4803      	ldr	r0, [pc, #12]	; (800524c <HAL_RCCEx_PeriphCLKConfig+0xa7c>)
 8005240:	f7fc fdc1 	bl	8001dc6 <assert_failed>

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005244:	4b02      	ldr	r3, [pc, #8]	; (8005250 <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 8005246:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800524a:	e003      	b.n	8005254 <HAL_RCCEx_PeriphCLKConfig+0xa84>
 800524c:	0800ebfc 	.word	0x0800ebfc
 8005250:	40023800 	.word	0x40023800
 8005254:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800525e:	4910      	ldr	r1, [pc, #64]	; (80052a0 <HAL_RCCEx_PeriphCLKConfig+0xad0>)
 8005260:	4313      	orrs	r3, r2
 8005262:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005266:	69fb      	ldr	r3, [r7, #28]
 8005268:	2b01      	cmp	r3, #1
 800526a:	d006      	beq.n	800527a <HAL_RCCEx_PeriphCLKConfig+0xaaa>
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005274:	2b00      	cmp	r3, #0
 8005276:	f000 8155 	beq.w	8005524 <HAL_RCCEx_PeriphCLKConfig+0xd54>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800527a:	4b09      	ldr	r3, [pc, #36]	; (80052a0 <HAL_RCCEx_PeriphCLKConfig+0xad0>)
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	4a08      	ldr	r2, [pc, #32]	; (80052a0 <HAL_RCCEx_PeriphCLKConfig+0xad0>)
 8005280:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005284:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005286:	f7fd f80d 	bl	80022a4 <HAL_GetTick>
 800528a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800528c:	e00a      	b.n	80052a4 <HAL_RCCEx_PeriphCLKConfig+0xad4>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800528e:	f7fd f809 	bl	80022a4 <HAL_GetTick>
 8005292:	4602      	mov	r2, r0
 8005294:	697b      	ldr	r3, [r7, #20]
 8005296:	1ad3      	subs	r3, r2, r3
 8005298:	2b64      	cmp	r3, #100	; 0x64
 800529a:	d903      	bls.n	80052a4 <HAL_RCCEx_PeriphCLKConfig+0xad4>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800529c:	2303      	movs	r3, #3
 800529e:	e273      	b.n	8005788 <HAL_RCCEx_PeriphCLKConfig+0xfb8>
 80052a0:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80052a4:	4b9a      	ldr	r3, [pc, #616]	; (8005510 <HAL_RCCEx_PeriphCLKConfig+0xd40>)
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d1ee      	bne.n	800528e <HAL_RCCEx_PeriphCLKConfig+0xabe>
      }
    }

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	685b      	ldr	r3, [r3, #4]
 80052b4:	2b31      	cmp	r3, #49	; 0x31
 80052b6:	d904      	bls.n	80052c2 <HAL_RCCEx_PeriphCLKConfig+0xaf2>
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	685b      	ldr	r3, [r3, #4]
 80052bc:	f5b3 7fd8 	cmp.w	r3, #432	; 0x1b0
 80052c0:	d904      	bls.n	80052cc <HAL_RCCEx_PeriphCLKConfig+0xafc>
 80052c2:	f44f 71ed 	mov.w	r1, #474	; 0x1da
 80052c6:	4893      	ldr	r0, [pc, #588]	; (8005514 <HAL_RCCEx_PeriphCLKConfig+0xd44>)
 80052c8:	f7fc fd7d 	bl	8001dc6 <assert_failed>

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	f003 0301 	and.w	r3, r3, #1
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d02e      	beq.n	8005336 <HAL_RCCEx_PeriphCLKConfig+0xb66>
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d12a      	bne.n	8005336 <HAL_RCCEx_PeriphCLKConfig+0xb66>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	689b      	ldr	r3, [r3, #8]
 80052e4:	2b01      	cmp	r3, #1
 80052e6:	d903      	bls.n	80052f0 <HAL_RCCEx_PeriphCLKConfig+0xb20>
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	689b      	ldr	r3, [r3, #8]
 80052ec:	2b07      	cmp	r3, #7
 80052ee:	d904      	bls.n	80052fa <HAL_RCCEx_PeriphCLKConfig+0xb2a>
 80052f0:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 80052f4:	4887      	ldr	r0, [pc, #540]	; (8005514 <HAL_RCCEx_PeriphCLKConfig+0xd44>)
 80052f6:	f7fc fd66 	bl	8001dc6 <assert_failed>

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80052fa:	4b85      	ldr	r3, [pc, #532]	; (8005510 <HAL_RCCEx_PeriphCLKConfig+0xd40>)
 80052fc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005300:	0c1b      	lsrs	r3, r3, #16
 8005302:	f003 0303 	and.w	r3, r3, #3
 8005306:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8005308:	4b81      	ldr	r3, [pc, #516]	; (8005510 <HAL_RCCEx_PeriphCLKConfig+0xd40>)
 800530a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800530e:	0e1b      	lsrs	r3, r3, #24
 8005310:	f003 030f 	and.w	r3, r3, #15
 8005314:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	685b      	ldr	r3, [r3, #4]
 800531a:	019a      	lsls	r2, r3, #6
 800531c:	693b      	ldr	r3, [r7, #16]
 800531e:	041b      	lsls	r3, r3, #16
 8005320:	431a      	orrs	r2, r3
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	061b      	lsls	r3, r3, #24
 8005326:	431a      	orrs	r2, r3
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	689b      	ldr	r3, [r3, #8]
 800532c:	071b      	lsls	r3, r3, #28
 800532e:	4978      	ldr	r1, [pc, #480]	; (8005510 <HAL_RCCEx_PeriphCLKConfig+0xd40>)
 8005330:	4313      	orrs	r3, r2
 8005332:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800533e:	2b00      	cmp	r3, #0
 8005340:	d004      	beq.n	800534c <HAL_RCCEx_PeriphCLKConfig+0xb7c>
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005346:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800534a:	d00a      	beq.n	8005362 <HAL_RCCEx_PeriphCLKConfig+0xb92>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005354:	2b00      	cmp	r3, #0
 8005356:	d048      	beq.n	80053ea <HAL_RCCEx_PeriphCLKConfig+0xc1a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800535c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005360:	d143      	bne.n	80053ea <HAL_RCCEx_PeriphCLKConfig+0xc1a>
    {
      /* Check for PLLI2S Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	68db      	ldr	r3, [r3, #12]
 8005366:	2b01      	cmp	r3, #1
 8005368:	d903      	bls.n	8005372 <HAL_RCCEx_PeriphCLKConfig+0xba2>
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	68db      	ldr	r3, [r3, #12]
 800536e:	2b0f      	cmp	r3, #15
 8005370:	d904      	bls.n	800537c <HAL_RCCEx_PeriphCLKConfig+0xbac>
 8005372:	f44f 71f8 	mov.w	r1, #496	; 0x1f0
 8005376:	4867      	ldr	r0, [pc, #412]	; (8005514 <HAL_RCCEx_PeriphCLKConfig+0xd44>)
 8005378:	f7fc fd25 	bl	8001dc6 <assert_failed>
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005380:	2b00      	cmp	r3, #0
 8005382:	d003      	beq.n	800538c <HAL_RCCEx_PeriphCLKConfig+0xbbc>
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005388:	2b20      	cmp	r3, #32
 800538a:	d904      	bls.n	8005396 <HAL_RCCEx_PeriphCLKConfig+0xbc6>
 800538c:	f44f 71f9 	mov.w	r1, #498	; 0x1f2
 8005390:	4860      	ldr	r0, [pc, #384]	; (8005514 <HAL_RCCEx_PeriphCLKConfig+0xd44>)
 8005392:	f7fc fd18 	bl	8001dc6 <assert_failed>

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8005396:	4b5e      	ldr	r3, [pc, #376]	; (8005510 <HAL_RCCEx_PeriphCLKConfig+0xd40>)
 8005398:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800539c:	0c1b      	lsrs	r3, r3, #16
 800539e:	f003 0303 	and.w	r3, r3, #3
 80053a2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80053a4:	4b5a      	ldr	r3, [pc, #360]	; (8005510 <HAL_RCCEx_PeriphCLKConfig+0xd40>)
 80053a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80053aa:	0f1b      	lsrs	r3, r3, #28
 80053ac:	f003 0307 	and.w	r3, r3, #7
 80053b0:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	685b      	ldr	r3, [r3, #4]
 80053b6:	019a      	lsls	r2, r3, #6
 80053b8:	693b      	ldr	r3, [r7, #16]
 80053ba:	041b      	lsls	r3, r3, #16
 80053bc:	431a      	orrs	r2, r3
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	68db      	ldr	r3, [r3, #12]
 80053c2:	061b      	lsls	r3, r3, #24
 80053c4:	431a      	orrs	r2, r3
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	071b      	lsls	r3, r3, #28
 80053ca:	4951      	ldr	r1, [pc, #324]	; (8005510 <HAL_RCCEx_PeriphCLKConfig+0xd40>)
 80053cc:	4313      	orrs	r3, r2
 80053ce:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80053d2:	4b4f      	ldr	r3, [pc, #316]	; (8005510 <HAL_RCCEx_PeriphCLKConfig+0xd40>)
 80053d4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80053d8:	f023 021f 	bic.w	r2, r3, #31
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053e0:	3b01      	subs	r3, #1
 80053e2:	494b      	ldr	r1, [pc, #300]	; (8005510 <HAL_RCCEx_PeriphCLKConfig+0xd40>)
 80053e4:	4313      	orrs	r3, r2
 80053e6:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d032      	beq.n	800545c <HAL_RCCEx_PeriphCLKConfig+0xc8c>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	691b      	ldr	r3, [r3, #16]
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d010      	beq.n	8005420 <HAL_RCCEx_PeriphCLKConfig+0xc50>
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	691b      	ldr	r3, [r3, #16]
 8005402:	2b01      	cmp	r3, #1
 8005404:	d00c      	beq.n	8005420 <HAL_RCCEx_PeriphCLKConfig+0xc50>
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	691b      	ldr	r3, [r3, #16]
 800540a:	2b02      	cmp	r3, #2
 800540c:	d008      	beq.n	8005420 <HAL_RCCEx_PeriphCLKConfig+0xc50>
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	691b      	ldr	r3, [r3, #16]
 8005412:	2b03      	cmp	r3, #3
 8005414:	d004      	beq.n	8005420 <HAL_RCCEx_PeriphCLKConfig+0xc50>
 8005416:	f240 2105 	movw	r1, #517	; 0x205
 800541a:	483e      	ldr	r0, [pc, #248]	; (8005514 <HAL_RCCEx_PeriphCLKConfig+0xd44>)
 800541c:	f7fc fcd3 	bl	8001dc6 <assert_failed>

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8005420:	4b3b      	ldr	r3, [pc, #236]	; (8005510 <HAL_RCCEx_PeriphCLKConfig+0xd40>)
 8005422:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005426:	0e1b      	lsrs	r3, r3, #24
 8005428:	f003 030f 	and.w	r3, r3, #15
 800542c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800542e:	4b38      	ldr	r3, [pc, #224]	; (8005510 <HAL_RCCEx_PeriphCLKConfig+0xd40>)
 8005430:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005434:	0f1b      	lsrs	r3, r3, #28
 8005436:	f003 0307 	and.w	r3, r3, #7
 800543a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	685b      	ldr	r3, [r3, #4]
 8005440:	019a      	lsls	r2, r3, #6
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	691b      	ldr	r3, [r3, #16]
 8005446:	041b      	lsls	r3, r3, #16
 8005448:	431a      	orrs	r2, r3
 800544a:	693b      	ldr	r3, [r7, #16]
 800544c:	061b      	lsls	r3, r3, #24
 800544e:	431a      	orrs	r2, r3
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	071b      	lsls	r3, r3, #28
 8005454:	492e      	ldr	r1, [pc, #184]	; (8005510 <HAL_RCCEx_PeriphCLKConfig+0xd40>)
 8005456:	4313      	orrs	r3, r2
 8005458:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005464:	2b00      	cmp	r3, #0
 8005466:	d040      	beq.n	80054ea <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    {
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	691b      	ldr	r3, [r3, #16]
 800546c:	2b00      	cmp	r3, #0
 800546e:	d010      	beq.n	8005492 <HAL_RCCEx_PeriphCLKConfig+0xcc2>
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	691b      	ldr	r3, [r3, #16]
 8005474:	2b01      	cmp	r3, #1
 8005476:	d00c      	beq.n	8005492 <HAL_RCCEx_PeriphCLKConfig+0xcc2>
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	691b      	ldr	r3, [r3, #16]
 800547c:	2b02      	cmp	r3, #2
 800547e:	d008      	beq.n	8005492 <HAL_RCCEx_PeriphCLKConfig+0xcc2>
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	691b      	ldr	r3, [r3, #16]
 8005484:	2b03      	cmp	r3, #3
 8005486:	d004      	beq.n	8005492 <HAL_RCCEx_PeriphCLKConfig+0xcc2>
 8005488:	f44f 7105 	mov.w	r1, #532	; 0x214
 800548c:	4821      	ldr	r0, [pc, #132]	; (8005514 <HAL_RCCEx_PeriphCLKConfig+0xd44>)
 800548e:	f7fc fc9a 	bl	8001dc6 <assert_failed>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	689b      	ldr	r3, [r3, #8]
 8005496:	2b01      	cmp	r3, #1
 8005498:	d903      	bls.n	80054a2 <HAL_RCCEx_PeriphCLKConfig+0xcd2>
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	689b      	ldr	r3, [r3, #8]
 800549e:	2b07      	cmp	r3, #7
 80054a0:	d904      	bls.n	80054ac <HAL_RCCEx_PeriphCLKConfig+0xcdc>
 80054a2:	f240 2115 	movw	r1, #533	; 0x215
 80054a6:	481b      	ldr	r0, [pc, #108]	; (8005514 <HAL_RCCEx_PeriphCLKConfig+0xd44>)
 80054a8:	f7fc fc8d 	bl	8001dc6 <assert_failed>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	68db      	ldr	r3, [r3, #12]
 80054b0:	2b01      	cmp	r3, #1
 80054b2:	d903      	bls.n	80054bc <HAL_RCCEx_PeriphCLKConfig+0xcec>
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	68db      	ldr	r3, [r3, #12]
 80054b8:	2b0f      	cmp	r3, #15
 80054ba:	d904      	bls.n	80054c6 <HAL_RCCEx_PeriphCLKConfig+0xcf6>
 80054bc:	f240 2116 	movw	r1, #534	; 0x216
 80054c0:	4814      	ldr	r0, [pc, #80]	; (8005514 <HAL_RCCEx_PeriphCLKConfig+0xd44>)
 80054c2:	f7fc fc80 	bl	8001dc6 <assert_failed>

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	685b      	ldr	r3, [r3, #4]
 80054ca:	019a      	lsls	r2, r3, #6
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	691b      	ldr	r3, [r3, #16]
 80054d0:	041b      	lsls	r3, r3, #16
 80054d2:	431a      	orrs	r2, r3
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	68db      	ldr	r3, [r3, #12]
 80054d8:	061b      	lsls	r3, r3, #24
 80054da:	431a      	orrs	r2, r3
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	689b      	ldr	r3, [r3, #8]
 80054e0:	071b      	lsls	r3, r3, #28
 80054e2:	490b      	ldr	r1, [pc, #44]	; (8005510 <HAL_RCCEx_PeriphCLKConfig+0xd40>)
 80054e4:	4313      	orrs	r3, r2
 80054e6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80054ea:	4b09      	ldr	r3, [pc, #36]	; (8005510 <HAL_RCCEx_PeriphCLKConfig+0xd40>)
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	4a08      	ldr	r2, [pc, #32]	; (8005510 <HAL_RCCEx_PeriphCLKConfig+0xd40>)
 80054f0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80054f4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80054f6:	f7fc fed5 	bl	80022a4 <HAL_GetTick>
 80054fa:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80054fc:	e00c      	b.n	8005518 <HAL_RCCEx_PeriphCLKConfig+0xd48>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80054fe:	f7fc fed1 	bl	80022a4 <HAL_GetTick>
 8005502:	4602      	mov	r2, r0
 8005504:	697b      	ldr	r3, [r7, #20]
 8005506:	1ad3      	subs	r3, r2, r3
 8005508:	2b64      	cmp	r3, #100	; 0x64
 800550a:	d905      	bls.n	8005518 <HAL_RCCEx_PeriphCLKConfig+0xd48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800550c:	2303      	movs	r3, #3
 800550e:	e13b      	b.n	8005788 <HAL_RCCEx_PeriphCLKConfig+0xfb8>
 8005510:	40023800 	.word	0x40023800
 8005514:	0800ebfc 	.word	0x0800ebfc
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005518:	4b9d      	ldr	r3, [pc, #628]	; (8005790 <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005520:	2b00      	cmp	r3, #0
 8005522:	d0ec      	beq.n	80054fe <HAL_RCCEx_PeriphCLKConfig+0xd2e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8005524:	69bb      	ldr	r3, [r7, #24]
 8005526:	2b01      	cmp	r3, #1
 8005528:	f040 812d 	bne.w	8005786 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800552c:	4b98      	ldr	r3, [pc, #608]	; (8005790 <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	4a97      	ldr	r2, [pc, #604]	; (8005790 <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 8005532:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005536:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005538:	f7fc feb4 	bl	80022a4 <HAL_GetTick>
 800553c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800553e:	e008      	b.n	8005552 <HAL_RCCEx_PeriphCLKConfig+0xd82>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005540:	f7fc feb0 	bl	80022a4 <HAL_GetTick>
 8005544:	4602      	mov	r2, r0
 8005546:	697b      	ldr	r3, [r7, #20]
 8005548:	1ad3      	subs	r3, r2, r3
 800554a:	2b64      	cmp	r3, #100	; 0x64
 800554c:	d901      	bls.n	8005552 <HAL_RCCEx_PeriphCLKConfig+0xd82>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800554e:	2303      	movs	r3, #3
 8005550:	e11a      	b.n	8005788 <HAL_RCCEx_PeriphCLKConfig+0xfb8>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005552:	4b8f      	ldr	r3, [pc, #572]	; (8005790 <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800555a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800555e:	d0ef      	beq.n	8005540 <HAL_RCCEx_PeriphCLKConfig+0xd70>
      }
    }

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	695b      	ldr	r3, [r3, #20]
 8005564:	2b31      	cmp	r3, #49	; 0x31
 8005566:	d904      	bls.n	8005572 <HAL_RCCEx_PeriphCLKConfig+0xda2>
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	695b      	ldr	r3, [r3, #20]
 800556c:	f5b3 7fd8 	cmp.w	r3, #432	; 0x1b0
 8005570:	d904      	bls.n	800557c <HAL_RCCEx_PeriphCLKConfig+0xdac>
 8005572:	f44f 7111 	mov.w	r1, #580	; 0x244
 8005576:	4887      	ldr	r0, [pc, #540]	; (8005794 <HAL_RCCEx_PeriphCLKConfig+0xfc4>)
 8005578:	f7fc fc25 	bl	8001dc6 <assert_failed>

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005584:	2b00      	cmp	r3, #0
 8005586:	d003      	beq.n	8005590 <HAL_RCCEx_PeriphCLKConfig+0xdc0>
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800558c:	2b00      	cmp	r3, #0
 800558e:	d009      	beq.n	80055a4 <HAL_RCCEx_PeriphCLKConfig+0xdd4>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8005598:	2b00      	cmp	r3, #0
 800559a:	d048      	beq.n	800562e <HAL_RCCEx_PeriphCLKConfig+0xe5e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d144      	bne.n	800562e <HAL_RCCEx_PeriphCLKConfig+0xe5e>
    {
      /* check for PLLSAIQ Parameter */
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	699b      	ldr	r3, [r3, #24]
 80055a8:	2b01      	cmp	r3, #1
 80055aa:	d903      	bls.n	80055b4 <HAL_RCCEx_PeriphCLKConfig+0xde4>
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	699b      	ldr	r3, [r3, #24]
 80055b0:	2b0f      	cmp	r3, #15
 80055b2:	d904      	bls.n	80055be <HAL_RCCEx_PeriphCLKConfig+0xdee>
 80055b4:	f240 214b 	movw	r1, #587	; 0x24b
 80055b8:	4876      	ldr	r0, [pc, #472]	; (8005794 <HAL_RCCEx_PeriphCLKConfig+0xfc4>)
 80055ba:	f7fc fc04 	bl	8001dc6 <assert_failed>
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d003      	beq.n	80055ce <HAL_RCCEx_PeriphCLKConfig+0xdfe>
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055ca:	2b20      	cmp	r3, #32
 80055cc:	d904      	bls.n	80055d8 <HAL_RCCEx_PeriphCLKConfig+0xe08>
 80055ce:	f240 214d 	movw	r1, #589	; 0x24d
 80055d2:	4870      	ldr	r0, [pc, #448]	; (8005794 <HAL_RCCEx_PeriphCLKConfig+0xfc4>)
 80055d4:	f7fc fbf7 	bl	8001dc6 <assert_failed>

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80055d8:	4b6d      	ldr	r3, [pc, #436]	; (8005790 <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 80055da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80055de:	0c1b      	lsrs	r3, r3, #16
 80055e0:	f003 0303 	and.w	r3, r3, #3
 80055e4:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80055e6:	4b6a      	ldr	r3, [pc, #424]	; (8005790 <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 80055e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80055ec:	0f1b      	lsrs	r3, r3, #28
 80055ee:	f003 0307 	and.w	r3, r3, #7
 80055f2:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	695b      	ldr	r3, [r3, #20]
 80055f8:	019a      	lsls	r2, r3, #6
 80055fa:	693b      	ldr	r3, [r7, #16]
 80055fc:	041b      	lsls	r3, r3, #16
 80055fe:	431a      	orrs	r2, r3
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	699b      	ldr	r3, [r3, #24]
 8005604:	061b      	lsls	r3, r3, #24
 8005606:	431a      	orrs	r2, r3
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	071b      	lsls	r3, r3, #28
 800560c:	4960      	ldr	r1, [pc, #384]	; (8005790 <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 800560e:	4313      	orrs	r3, r2
 8005610:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8005614:	4b5e      	ldr	r3, [pc, #376]	; (8005790 <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 8005616:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800561a:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005622:	3b01      	subs	r3, #1
 8005624:	021b      	lsls	r3, r3, #8
 8005626:	495a      	ldr	r1, [pc, #360]	; (8005790 <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 8005628:	4313      	orrs	r3, r2
 800562a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005636:	2b00      	cmp	r3, #0
 8005638:	d037      	beq.n	80056aa <HAL_RCCEx_PeriphCLKConfig+0xeda>
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800563e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005642:	d132      	bne.n	80056aa <HAL_RCCEx_PeriphCLKConfig+0xeda>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	6a1b      	ldr	r3, [r3, #32]
 8005648:	2b00      	cmp	r3, #0
 800564a:	d010      	beq.n	800566e <HAL_RCCEx_PeriphCLKConfig+0xe9e>
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	6a1b      	ldr	r3, [r3, #32]
 8005650:	2b01      	cmp	r3, #1
 8005652:	d00c      	beq.n	800566e <HAL_RCCEx_PeriphCLKConfig+0xe9e>
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	6a1b      	ldr	r3, [r3, #32]
 8005658:	2b02      	cmp	r3, #2
 800565a:	d008      	beq.n	800566e <HAL_RCCEx_PeriphCLKConfig+0xe9e>
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	6a1b      	ldr	r3, [r3, #32]
 8005660:	2b03      	cmp	r3, #3
 8005662:	d004      	beq.n	800566e <HAL_RCCEx_PeriphCLKConfig+0xe9e>
 8005664:	f44f 7118 	mov.w	r1, #608	; 0x260
 8005668:	484a      	ldr	r0, [pc, #296]	; (8005794 <HAL_RCCEx_PeriphCLKConfig+0xfc4>)
 800566a:	f7fc fbac 	bl	8001dc6 <assert_failed>
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800566e:	4b48      	ldr	r3, [pc, #288]	; (8005790 <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 8005670:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005674:	0e1b      	lsrs	r3, r3, #24
 8005676:	f003 030f 	and.w	r3, r3, #15
 800567a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800567c:	4b44      	ldr	r3, [pc, #272]	; (8005790 <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 800567e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005682:	0f1b      	lsrs	r3, r3, #28
 8005684:	f003 0307 	and.w	r3, r3, #7
 8005688:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	695b      	ldr	r3, [r3, #20]
 800568e:	019a      	lsls	r2, r3, #6
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	6a1b      	ldr	r3, [r3, #32]
 8005694:	041b      	lsls	r3, r3, #16
 8005696:	431a      	orrs	r2, r3
 8005698:	693b      	ldr	r3, [r7, #16]
 800569a:	061b      	lsls	r3, r3, #24
 800569c:	431a      	orrs	r2, r3
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	071b      	lsls	r3, r3, #28
 80056a2:	493b      	ldr	r1, [pc, #236]	; (8005790 <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 80056a4:	4313      	orrs	r3, r2
 80056a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	f003 0308 	and.w	r3, r3, #8
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d04d      	beq.n	8005752 <HAL_RCCEx_PeriphCLKConfig+0xf82>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	69db      	ldr	r3, [r3, #28]
 80056ba:	2b01      	cmp	r3, #1
 80056bc:	d903      	bls.n	80056c6 <HAL_RCCEx_PeriphCLKConfig+0xef6>
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	69db      	ldr	r3, [r3, #28]
 80056c2:	2b07      	cmp	r3, #7
 80056c4:	d904      	bls.n	80056d0 <HAL_RCCEx_PeriphCLKConfig+0xf00>
 80056c6:	f240 216f 	movw	r1, #623	; 0x26f
 80056ca:	4832      	ldr	r0, [pc, #200]	; (8005794 <HAL_RCCEx_PeriphCLKConfig+0xfc4>)
 80056cc:	f7fc fb7b 	bl	8001dc6 <assert_failed>
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d013      	beq.n	8005700 <HAL_RCCEx_PeriphCLKConfig+0xf30>
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80056e0:	d00e      	beq.n	8005700 <HAL_RCCEx_PeriphCLKConfig+0xf30>
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056e6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80056ea:	d009      	beq.n	8005700 <HAL_RCCEx_PeriphCLKConfig+0xf30>
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056f0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80056f4:	d004      	beq.n	8005700 <HAL_RCCEx_PeriphCLKConfig+0xf30>
 80056f6:	f44f 711c 	mov.w	r1, #624	; 0x270
 80056fa:	4826      	ldr	r0, [pc, #152]	; (8005794 <HAL_RCCEx_PeriphCLKConfig+0xfc4>)
 80056fc:	f7fc fb63 	bl	8001dc6 <assert_failed>

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005700:	4b23      	ldr	r3, [pc, #140]	; (8005790 <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 8005702:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005706:	0e1b      	lsrs	r3, r3, #24
 8005708:	f003 030f 	and.w	r3, r3, #15
 800570c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800570e:	4b20      	ldr	r3, [pc, #128]	; (8005790 <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 8005710:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005714:	0c1b      	lsrs	r3, r3, #16
 8005716:	f003 0303 	and.w	r3, r3, #3
 800571a:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	695b      	ldr	r3, [r3, #20]
 8005720:	019a      	lsls	r2, r3, #6
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	041b      	lsls	r3, r3, #16
 8005726:	431a      	orrs	r2, r3
 8005728:	693b      	ldr	r3, [r7, #16]
 800572a:	061b      	lsls	r3, r3, #24
 800572c:	431a      	orrs	r2, r3
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	69db      	ldr	r3, [r3, #28]
 8005732:	071b      	lsls	r3, r3, #28
 8005734:	4916      	ldr	r1, [pc, #88]	; (8005790 <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 8005736:	4313      	orrs	r3, r2
 8005738:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800573c:	4b14      	ldr	r3, [pc, #80]	; (8005790 <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 800573e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005742:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800574a:	4911      	ldr	r1, [pc, #68]	; (8005790 <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 800574c:	4313      	orrs	r3, r2
 800574e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8005752:	4b0f      	ldr	r3, [pc, #60]	; (8005790 <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	4a0e      	ldr	r2, [pc, #56]	; (8005790 <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 8005758:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800575c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800575e:	f7fc fda1 	bl	80022a4 <HAL_GetTick>
 8005762:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005764:	e008      	b.n	8005778 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005766:	f7fc fd9d 	bl	80022a4 <HAL_GetTick>
 800576a:	4602      	mov	r2, r0
 800576c:	697b      	ldr	r3, [r7, #20]
 800576e:	1ad3      	subs	r3, r2, r3
 8005770:	2b64      	cmp	r3, #100	; 0x64
 8005772:	d901      	bls.n	8005778 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005774:	2303      	movs	r3, #3
 8005776:	e007      	b.n	8005788 <HAL_RCCEx_PeriphCLKConfig+0xfb8>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005778:	4b05      	ldr	r3, [pc, #20]	; (8005790 <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005780:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005784:	d1ef      	bne.n	8005766 <HAL_RCCEx_PeriphCLKConfig+0xf96>
      }
    }
  }
  return HAL_OK;
 8005786:	2300      	movs	r3, #0
}
 8005788:	4618      	mov	r0, r3
 800578a:	3720      	adds	r7, #32
 800578c:	46bd      	mov	sp, r7
 800578e:	bd80      	pop	{r7, pc}
 8005790:	40023800 	.word	0x40023800
 8005794:	0800ebfc 	.word	0x0800ebfc

08005798 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005798:	b580      	push	{r7, lr}
 800579a:	b082      	sub	sp, #8
 800579c:	af00      	add	r7, sp, #0
 800579e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d101      	bne.n	80057aa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80057a6:	2301      	movs	r3, #1
 80057a8:	e09f      	b.n	80058ea <HAL_UART_Init+0x152>
  }

  if (huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	699b      	ldr	r3, [r3, #24]
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d02d      	beq.n	800580e <HAL_UART_Init+0x76>
  {
    /* Check the parameters */
    assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	4a4f      	ldr	r2, [pc, #316]	; (80058f4 <HAL_UART_Init+0x15c>)
 80057b8:	4293      	cmp	r3, r2
 80057ba:	d055      	beq.n	8005868 <HAL_UART_Init+0xd0>
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	4a4d      	ldr	r2, [pc, #308]	; (80058f8 <HAL_UART_Init+0x160>)
 80057c2:	4293      	cmp	r3, r2
 80057c4:	d050      	beq.n	8005868 <HAL_UART_Init+0xd0>
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	4a4c      	ldr	r2, [pc, #304]	; (80058fc <HAL_UART_Init+0x164>)
 80057cc:	4293      	cmp	r3, r2
 80057ce:	d04b      	beq.n	8005868 <HAL_UART_Init+0xd0>
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	4a4a      	ldr	r2, [pc, #296]	; (8005900 <HAL_UART_Init+0x168>)
 80057d6:	4293      	cmp	r3, r2
 80057d8:	d046      	beq.n	8005868 <HAL_UART_Init+0xd0>
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	4a49      	ldr	r2, [pc, #292]	; (8005904 <HAL_UART_Init+0x16c>)
 80057e0:	4293      	cmp	r3, r2
 80057e2:	d041      	beq.n	8005868 <HAL_UART_Init+0xd0>
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	4a47      	ldr	r2, [pc, #284]	; (8005908 <HAL_UART_Init+0x170>)
 80057ea:	4293      	cmp	r3, r2
 80057ec:	d03c      	beq.n	8005868 <HAL_UART_Init+0xd0>
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	4a46      	ldr	r2, [pc, #280]	; (800590c <HAL_UART_Init+0x174>)
 80057f4:	4293      	cmp	r3, r2
 80057f6:	d037      	beq.n	8005868 <HAL_UART_Init+0xd0>
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	4a44      	ldr	r2, [pc, #272]	; (8005910 <HAL_UART_Init+0x178>)
 80057fe:	4293      	cmp	r3, r2
 8005800:	d032      	beq.n	8005868 <HAL_UART_Init+0xd0>
 8005802:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8005806:	4843      	ldr	r0, [pc, #268]	; (8005914 <HAL_UART_Init+0x17c>)
 8005808:	f7fc fadd 	bl	8001dc6 <assert_failed>
 800580c:	e02c      	b.n	8005868 <HAL_UART_Init+0xd0>
  }
  else
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	4a38      	ldr	r2, [pc, #224]	; (80058f4 <HAL_UART_Init+0x15c>)
 8005814:	4293      	cmp	r3, r2
 8005816:	d027      	beq.n	8005868 <HAL_UART_Init+0xd0>
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	4a36      	ldr	r2, [pc, #216]	; (80058f8 <HAL_UART_Init+0x160>)
 800581e:	4293      	cmp	r3, r2
 8005820:	d022      	beq.n	8005868 <HAL_UART_Init+0xd0>
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	4a35      	ldr	r2, [pc, #212]	; (80058fc <HAL_UART_Init+0x164>)
 8005828:	4293      	cmp	r3, r2
 800582a:	d01d      	beq.n	8005868 <HAL_UART_Init+0xd0>
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	4a33      	ldr	r2, [pc, #204]	; (8005900 <HAL_UART_Init+0x168>)
 8005832:	4293      	cmp	r3, r2
 8005834:	d018      	beq.n	8005868 <HAL_UART_Init+0xd0>
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	4a32      	ldr	r2, [pc, #200]	; (8005904 <HAL_UART_Init+0x16c>)
 800583c:	4293      	cmp	r3, r2
 800583e:	d013      	beq.n	8005868 <HAL_UART_Init+0xd0>
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	4a30      	ldr	r2, [pc, #192]	; (8005908 <HAL_UART_Init+0x170>)
 8005846:	4293      	cmp	r3, r2
 8005848:	d00e      	beq.n	8005868 <HAL_UART_Init+0xd0>
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	4a2f      	ldr	r2, [pc, #188]	; (800590c <HAL_UART_Init+0x174>)
 8005850:	4293      	cmp	r3, r2
 8005852:	d009      	beq.n	8005868 <HAL_UART_Init+0xd0>
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	4a2d      	ldr	r2, [pc, #180]	; (8005910 <HAL_UART_Init+0x178>)
 800585a:	4293      	cmp	r3, r2
 800585c:	d004      	beq.n	8005868 <HAL_UART_Init+0xd0>
 800585e:	f240 1131 	movw	r1, #305	; 0x131
 8005862:	482c      	ldr	r0, [pc, #176]	; (8005914 <HAL_UART_Init+0x17c>)
 8005864:	f7fc faaf 	bl	8001dc6 <assert_failed>
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800586c:	2b00      	cmp	r3, #0
 800586e:	d106      	bne.n	800587e <HAL_UART_Init+0xe6>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	2200      	movs	r2, #0
 8005874:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005878:	6878      	ldr	r0, [r7, #4]
 800587a:	f7fc fc0f 	bl	800209c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	2224      	movs	r2, #36	; 0x24
 8005882:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	681a      	ldr	r2, [r3, #0]
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	f022 0201 	bic.w	r2, r2, #1
 8005892:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005894:	6878      	ldr	r0, [r7, #4]
 8005896:	f000 fbb5 	bl	8006004 <UART_SetConfig>
 800589a:	4603      	mov	r3, r0
 800589c:	2b01      	cmp	r3, #1
 800589e:	d101      	bne.n	80058a4 <HAL_UART_Init+0x10c>
  {
    return HAL_ERROR;
 80058a0:	2301      	movs	r3, #1
 80058a2:	e022      	b.n	80058ea <HAL_UART_Init+0x152>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d002      	beq.n	80058b2 <HAL_UART_Init+0x11a>
  {
    UART_AdvFeatureConfig(huart);
 80058ac:	6878      	ldr	r0, [r7, #4]
 80058ae:	f000 fe9f 	bl	80065f0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	685a      	ldr	r2, [r3, #4]
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80058c0:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	689a      	ldr	r2, [r3, #8]
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80058d0:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	681a      	ldr	r2, [r3, #0]
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	f042 0201 	orr.w	r2, r2, #1
 80058e0:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80058e2:	6878      	ldr	r0, [r7, #4]
 80058e4:	f000 ffdc 	bl	80068a0 <UART_CheckIdleState>
 80058e8:	4603      	mov	r3, r0
}
 80058ea:	4618      	mov	r0, r3
 80058ec:	3708      	adds	r7, #8
 80058ee:	46bd      	mov	sp, r7
 80058f0:	bd80      	pop	{r7, pc}
 80058f2:	bf00      	nop
 80058f4:	40011000 	.word	0x40011000
 80058f8:	40004400 	.word	0x40004400
 80058fc:	40004800 	.word	0x40004800
 8005900:	40004c00 	.word	0x40004c00
 8005904:	40005000 	.word	0x40005000
 8005908:	40011400 	.word	0x40011400
 800590c:	40007800 	.word	0x40007800
 8005910:	40007c00 	.word	0x40007c00
 8005914:	0800ec38 	.word	0x0800ec38

08005918 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005918:	b580      	push	{r7, lr}
 800591a:	b08a      	sub	sp, #40	; 0x28
 800591c:	af02      	add	r7, sp, #8
 800591e:	60f8      	str	r0, [r7, #12]
 8005920:	60b9      	str	r1, [r7, #8]
 8005922:	603b      	str	r3, [r7, #0]
 8005924:	4613      	mov	r3, r2
 8005926:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800592c:	2b20      	cmp	r3, #32
 800592e:	d171      	bne.n	8005a14 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8005930:	68bb      	ldr	r3, [r7, #8]
 8005932:	2b00      	cmp	r3, #0
 8005934:	d002      	beq.n	800593c <HAL_UART_Transmit+0x24>
 8005936:	88fb      	ldrh	r3, [r7, #6]
 8005938:	2b00      	cmp	r3, #0
 800593a:	d101      	bne.n	8005940 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 800593c:	2301      	movs	r3, #1
 800593e:	e06a      	b.n	8005a16 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	2200      	movs	r2, #0
 8005944:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	2221      	movs	r2, #33	; 0x21
 800594c:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800594e:	f7fc fca9 	bl	80022a4 <HAL_GetTick>
 8005952:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	88fa      	ldrh	r2, [r7, #6]
 8005958:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	88fa      	ldrh	r2, [r7, #6]
 8005960:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	689b      	ldr	r3, [r3, #8]
 8005968:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800596c:	d108      	bne.n	8005980 <HAL_UART_Transmit+0x68>
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	691b      	ldr	r3, [r3, #16]
 8005972:	2b00      	cmp	r3, #0
 8005974:	d104      	bne.n	8005980 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8005976:	2300      	movs	r3, #0
 8005978:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800597a:	68bb      	ldr	r3, [r7, #8]
 800597c:	61bb      	str	r3, [r7, #24]
 800597e:	e003      	b.n	8005988 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8005980:	68bb      	ldr	r3, [r7, #8]
 8005982:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005984:	2300      	movs	r3, #0
 8005986:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005988:	e02c      	b.n	80059e4 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800598a:	683b      	ldr	r3, [r7, #0]
 800598c:	9300      	str	r3, [sp, #0]
 800598e:	697b      	ldr	r3, [r7, #20]
 8005990:	2200      	movs	r2, #0
 8005992:	2180      	movs	r1, #128	; 0x80
 8005994:	68f8      	ldr	r0, [r7, #12]
 8005996:	f000 ffba 	bl	800690e <UART_WaitOnFlagUntilTimeout>
 800599a:	4603      	mov	r3, r0
 800599c:	2b00      	cmp	r3, #0
 800599e:	d001      	beq.n	80059a4 <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 80059a0:	2303      	movs	r3, #3
 80059a2:	e038      	b.n	8005a16 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 80059a4:	69fb      	ldr	r3, [r7, #28]
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d10b      	bne.n	80059c2 <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80059aa:	69bb      	ldr	r3, [r7, #24]
 80059ac:	881b      	ldrh	r3, [r3, #0]
 80059ae:	461a      	mov	r2, r3
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80059b8:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80059ba:	69bb      	ldr	r3, [r7, #24]
 80059bc:	3302      	adds	r3, #2
 80059be:	61bb      	str	r3, [r7, #24]
 80059c0:	e007      	b.n	80059d2 <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80059c2:	69fb      	ldr	r3, [r7, #28]
 80059c4:	781a      	ldrb	r2, [r3, #0]
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80059cc:	69fb      	ldr	r3, [r7, #28]
 80059ce:	3301      	adds	r3, #1
 80059d0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80059d8:	b29b      	uxth	r3, r3
 80059da:	3b01      	subs	r3, #1
 80059dc:	b29a      	uxth	r2, r3
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80059ea:	b29b      	uxth	r3, r3
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d1cc      	bne.n	800598a <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80059f0:	683b      	ldr	r3, [r7, #0]
 80059f2:	9300      	str	r3, [sp, #0]
 80059f4:	697b      	ldr	r3, [r7, #20]
 80059f6:	2200      	movs	r2, #0
 80059f8:	2140      	movs	r1, #64	; 0x40
 80059fa:	68f8      	ldr	r0, [r7, #12]
 80059fc:	f000 ff87 	bl	800690e <UART_WaitOnFlagUntilTimeout>
 8005a00:	4603      	mov	r3, r0
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d001      	beq.n	8005a0a <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 8005a06:	2303      	movs	r3, #3
 8005a08:	e005      	b.n	8005a16 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	2220      	movs	r2, #32
 8005a0e:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8005a10:	2300      	movs	r3, #0
 8005a12:	e000      	b.n	8005a16 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8005a14:	2302      	movs	r3, #2
  }
}
 8005a16:	4618      	mov	r0, r3
 8005a18:	3720      	adds	r7, #32
 8005a1a:	46bd      	mov	sp, r7
 8005a1c:	bd80      	pop	{r7, pc}
	...

08005a20 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005a20:	b580      	push	{r7, lr}
 8005a22:	b0ba      	sub	sp, #232	; 0xe8
 8005a24:	af00      	add	r7, sp, #0
 8005a26:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	69db      	ldr	r3, [r3, #28]
 8005a2e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	689b      	ldr	r3, [r3, #8]
 8005a42:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005a46:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8005a4a:	f640 030f 	movw	r3, #2063	; 0x80f
 8005a4e:	4013      	ands	r3, r2
 8005a50:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8005a54:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d115      	bne.n	8005a88 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8005a5c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005a60:	f003 0320 	and.w	r3, r3, #32
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d00f      	beq.n	8005a88 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005a68:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005a6c:	f003 0320 	and.w	r3, r3, #32
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d009      	beq.n	8005a88 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	f000 8297 	beq.w	8005fac <HAL_UART_IRQHandler+0x58c>
      {
        huart->RxISR(huart);
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005a82:	6878      	ldr	r0, [r7, #4]
 8005a84:	4798      	blx	r3
      }
      return;
 8005a86:	e291      	b.n	8005fac <HAL_UART_IRQHandler+0x58c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8005a88:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	f000 8117 	beq.w	8005cc0 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8005a92:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005a96:	f003 0301 	and.w	r3, r3, #1
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d106      	bne.n	8005aac <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8005a9e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8005aa2:	4b85      	ldr	r3, [pc, #532]	; (8005cb8 <HAL_UART_IRQHandler+0x298>)
 8005aa4:	4013      	ands	r3, r2
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	f000 810a 	beq.w	8005cc0 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005aac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005ab0:	f003 0301 	and.w	r3, r3, #1
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d011      	beq.n	8005adc <HAL_UART_IRQHandler+0xbc>
 8005ab8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005abc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d00b      	beq.n	8005adc <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	2201      	movs	r2, #1
 8005aca:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005ad2:	f043 0201 	orr.w	r2, r3, #1
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005adc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005ae0:	f003 0302 	and.w	r3, r3, #2
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d011      	beq.n	8005b0c <HAL_UART_IRQHandler+0xec>
 8005ae8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005aec:	f003 0301 	and.w	r3, r3, #1
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d00b      	beq.n	8005b0c <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	2202      	movs	r2, #2
 8005afa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005b02:	f043 0204 	orr.w	r2, r3, #4
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005b0c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005b10:	f003 0304 	and.w	r3, r3, #4
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d011      	beq.n	8005b3c <HAL_UART_IRQHandler+0x11c>
 8005b18:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005b1c:	f003 0301 	and.w	r3, r3, #1
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d00b      	beq.n	8005b3c <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	2204      	movs	r2, #4
 8005b2a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005b32:	f043 0202 	orr.w	r2, r3, #2
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005b3c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005b40:	f003 0308 	and.w	r3, r3, #8
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d017      	beq.n	8005b78 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005b48:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005b4c:	f003 0320 	and.w	r3, r3, #32
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d105      	bne.n	8005b60 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8005b54:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005b58:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d00b      	beq.n	8005b78 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	2208      	movs	r2, #8
 8005b66:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005b6e:	f043 0208 	orr.w	r2, r3, #8
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005b78:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005b7c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d012      	beq.n	8005baa <HAL_UART_IRQHandler+0x18a>
 8005b84:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005b88:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d00c      	beq.n	8005baa <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005b98:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005ba0:	f043 0220 	orr.w	r2, r3, #32
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	f000 81fd 	beq.w	8005fb0 <HAL_UART_IRQHandler+0x590>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8005bb6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005bba:	f003 0320 	and.w	r3, r3, #32
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d00d      	beq.n	8005bde <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005bc2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005bc6:	f003 0320 	and.w	r3, r3, #32
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d007      	beq.n	8005bde <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d003      	beq.n	8005bde <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005bda:	6878      	ldr	r0, [r7, #4]
 8005bdc:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005be4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	689b      	ldr	r3, [r3, #8]
 8005bee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005bf2:	2b40      	cmp	r3, #64	; 0x40
 8005bf4:	d005      	beq.n	8005c02 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005bf6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005bfa:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d04f      	beq.n	8005ca2 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005c02:	6878      	ldr	r0, [r7, #4]
 8005c04:	f000 ff49 	bl	8006a9a <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	689b      	ldr	r3, [r3, #8]
 8005c0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c12:	2b40      	cmp	r3, #64	; 0x40
 8005c14:	d141      	bne.n	8005c9a <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	3308      	adds	r3, #8
 8005c1c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c20:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005c24:	e853 3f00 	ldrex	r3, [r3]
 8005c28:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005c2c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005c30:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005c34:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	3308      	adds	r3, #8
 8005c3e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005c42:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005c46:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c4a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005c4e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005c52:	e841 2300 	strex	r3, r2, [r1]
 8005c56:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005c5a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d1d9      	bne.n	8005c16 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d013      	beq.n	8005c92 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005c6e:	4a13      	ldr	r2, [pc, #76]	; (8005cbc <HAL_UART_IRQHandler+0x29c>)
 8005c70:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005c76:	4618      	mov	r0, r3
 8005c78:	f7fc fcf4 	bl	8002664 <HAL_DMA_Abort_IT>
 8005c7c:	4603      	mov	r3, r0
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d017      	beq.n	8005cb2 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005c86:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005c88:	687a      	ldr	r2, [r7, #4]
 8005c8a:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8005c8c:	4610      	mov	r0, r2
 8005c8e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005c90:	e00f      	b.n	8005cb2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005c92:	6878      	ldr	r0, [r7, #4]
 8005c94:	f000 f9a0 	bl	8005fd8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005c98:	e00b      	b.n	8005cb2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005c9a:	6878      	ldr	r0, [r7, #4]
 8005c9c:	f000 f99c 	bl	8005fd8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ca0:	e007      	b.n	8005cb2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005ca2:	6878      	ldr	r0, [r7, #4]
 8005ca4:	f000 f998 	bl	8005fd8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	2200      	movs	r2, #0
 8005cac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8005cb0:	e17e      	b.n	8005fb0 <HAL_UART_IRQHandler+0x590>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005cb2:	bf00      	nop
    return;
 8005cb4:	e17c      	b.n	8005fb0 <HAL_UART_IRQHandler+0x590>
 8005cb6:	bf00      	nop
 8005cb8:	04000120 	.word	0x04000120
 8005cbc:	08006b63 	.word	0x08006b63

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005cc4:	2b01      	cmp	r3, #1
 8005cc6:	f040 814c 	bne.w	8005f62 <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8005cca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005cce:	f003 0310 	and.w	r3, r3, #16
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	f000 8145 	beq.w	8005f62 <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005cd8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005cdc:	f003 0310 	and.w	r3, r3, #16
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	f000 813e 	beq.w	8005f62 <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	2210      	movs	r2, #16
 8005cec:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	689b      	ldr	r3, [r3, #8]
 8005cf4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005cf8:	2b40      	cmp	r3, #64	; 0x40
 8005cfa:	f040 80b6 	bne.w	8005e6a <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	685b      	ldr	r3, [r3, #4]
 8005d06:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005d0a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	f000 8150 	beq.w	8005fb4 <HAL_UART_IRQHandler+0x594>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8005d1a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005d1e:	429a      	cmp	r2, r3
 8005d20:	f080 8148 	bcs.w	8005fb4 <HAL_UART_IRQHandler+0x594>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005d2a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005d32:	69db      	ldr	r3, [r3, #28]
 8005d34:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005d38:	f000 8086 	beq.w	8005e48 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d44:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005d48:	e853 3f00 	ldrex	r3, [r3]
 8005d4c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005d50:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005d54:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005d58:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	461a      	mov	r2, r3
 8005d62:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005d66:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8005d6a:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d6e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005d72:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005d76:	e841 2300 	strex	r3, r2, [r1]
 8005d7a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005d7e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d1da      	bne.n	8005d3c <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	3308      	adds	r3, #8
 8005d8c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d8e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005d90:	e853 3f00 	ldrex	r3, [r3]
 8005d94:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005d96:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005d98:	f023 0301 	bic.w	r3, r3, #1
 8005d9c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	3308      	adds	r3, #8
 8005da6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005daa:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005dae:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005db0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005db2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005db6:	e841 2300 	strex	r3, r2, [r1]
 8005dba:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005dbc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d1e1      	bne.n	8005d86 <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	3308      	adds	r3, #8
 8005dc8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005dca:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005dcc:	e853 3f00 	ldrex	r3, [r3]
 8005dd0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005dd2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005dd4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005dd8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	3308      	adds	r3, #8
 8005de2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005de6:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005de8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005dea:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005dec:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005dee:	e841 2300 	strex	r3, r2, [r1]
 8005df2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005df4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d1e3      	bne.n	8005dc2 <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	2220      	movs	r2, #32
 8005dfe:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	2200      	movs	r2, #0
 8005e06:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e0e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005e10:	e853 3f00 	ldrex	r3, [r3]
 8005e14:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005e16:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005e18:	f023 0310 	bic.w	r3, r3, #16
 8005e1c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	461a      	mov	r2, r3
 8005e26:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005e2a:	65bb      	str	r3, [r7, #88]	; 0x58
 8005e2c:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e2e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005e30:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005e32:	e841 2300 	strex	r3, r2, [r1]
 8005e36:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005e38:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d1e4      	bne.n	8005e08 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005e42:	4618      	mov	r0, r3
 8005e44:	f7fc fb9e 	bl	8002584 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	2202      	movs	r2, #2
 8005e4c:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005e5a:	b29b      	uxth	r3, r3
 8005e5c:	1ad3      	subs	r3, r2, r3
 8005e5e:	b29b      	uxth	r3, r3
 8005e60:	4619      	mov	r1, r3
 8005e62:	6878      	ldr	r0, [r7, #4]
 8005e64:	f000 f8c2 	bl	8005fec <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005e68:	e0a4      	b.n	8005fb4 <HAL_UART_IRQHandler+0x594>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005e76:	b29b      	uxth	r3, r3
 8005e78:	1ad3      	subs	r3, r2, r3
 8005e7a:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005e84:	b29b      	uxth	r3, r3
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	f000 8096 	beq.w	8005fb8 <HAL_UART_IRQHandler+0x598>
          && (nb_rx_data > 0U))
 8005e8c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	f000 8091 	beq.w	8005fb8 <HAL_UART_IRQHandler+0x598>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e9e:	e853 3f00 	ldrex	r3, [r3]
 8005ea2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005ea4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ea6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005eaa:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	461a      	mov	r2, r3
 8005eb4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005eb8:	647b      	str	r3, [r7, #68]	; 0x44
 8005eba:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ebc:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005ebe:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005ec0:	e841 2300 	strex	r3, r2, [r1]
 8005ec4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005ec6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d1e4      	bne.n	8005e96 <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	3308      	adds	r3, #8
 8005ed2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ed4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ed6:	e853 3f00 	ldrex	r3, [r3]
 8005eda:	623b      	str	r3, [r7, #32]
   return(result);
 8005edc:	6a3b      	ldr	r3, [r7, #32]
 8005ede:	f023 0301 	bic.w	r3, r3, #1
 8005ee2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	3308      	adds	r3, #8
 8005eec:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005ef0:	633a      	str	r2, [r7, #48]	; 0x30
 8005ef2:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ef4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005ef6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005ef8:	e841 2300 	strex	r3, r2, [r1]
 8005efc:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005efe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d1e3      	bne.n	8005ecc <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	2220      	movs	r2, #32
 8005f08:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	2200      	movs	r2, #0
 8005f10:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	2200      	movs	r2, #0
 8005f16:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f1e:	693b      	ldr	r3, [r7, #16]
 8005f20:	e853 3f00 	ldrex	r3, [r3]
 8005f24:	60fb      	str	r3, [r7, #12]
   return(result);
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	f023 0310 	bic.w	r3, r3, #16
 8005f2c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	461a      	mov	r2, r3
 8005f36:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005f3a:	61fb      	str	r3, [r7, #28]
 8005f3c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f3e:	69b9      	ldr	r1, [r7, #24]
 8005f40:	69fa      	ldr	r2, [r7, #28]
 8005f42:	e841 2300 	strex	r3, r2, [r1]
 8005f46:	617b      	str	r3, [r7, #20]
   return(result);
 8005f48:	697b      	ldr	r3, [r7, #20]
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d1e4      	bne.n	8005f18 <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	2202      	movs	r2, #2
 8005f52:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005f54:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005f58:	4619      	mov	r1, r3
 8005f5a:	6878      	ldr	r0, [r7, #4]
 8005f5c:	f000 f846 	bl	8005fec <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005f60:	e02a      	b.n	8005fb8 <HAL_UART_IRQHandler+0x598>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8005f62:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005f66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d00e      	beq.n	8005f8c <HAL_UART_IRQHandler+0x56c>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8005f6e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005f72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d008      	beq.n	8005f8c <HAL_UART_IRQHandler+0x56c>
  {
    if (huart->TxISR != NULL)
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d01c      	beq.n	8005fbc <HAL_UART_IRQHandler+0x59c>
    {
      huart->TxISR(huart);
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005f86:	6878      	ldr	r0, [r7, #4]
 8005f88:	4798      	blx	r3
    }
    return;
 8005f8a:	e017      	b.n	8005fbc <HAL_UART_IRQHandler+0x59c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005f8c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005f90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d012      	beq.n	8005fbe <HAL_UART_IRQHandler+0x59e>
 8005f98:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005f9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d00c      	beq.n	8005fbe <HAL_UART_IRQHandler+0x59e>
  {
    UART_EndTransmit_IT(huart);
 8005fa4:	6878      	ldr	r0, [r7, #4]
 8005fa6:	f000 fdf2 	bl	8006b8e <UART_EndTransmit_IT>
    return;
 8005faa:	e008      	b.n	8005fbe <HAL_UART_IRQHandler+0x59e>
      return;
 8005fac:	bf00      	nop
 8005fae:	e006      	b.n	8005fbe <HAL_UART_IRQHandler+0x59e>
    return;
 8005fb0:	bf00      	nop
 8005fb2:	e004      	b.n	8005fbe <HAL_UART_IRQHandler+0x59e>
      return;
 8005fb4:	bf00      	nop
 8005fb6:	e002      	b.n	8005fbe <HAL_UART_IRQHandler+0x59e>
      return;
 8005fb8:	bf00      	nop
 8005fba:	e000      	b.n	8005fbe <HAL_UART_IRQHandler+0x59e>
    return;
 8005fbc:	bf00      	nop
  }

}
 8005fbe:	37e8      	adds	r7, #232	; 0xe8
 8005fc0:	46bd      	mov	sp, r7
 8005fc2:	bd80      	pop	{r7, pc}

08005fc4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005fc4:	b480      	push	{r7}
 8005fc6:	b083      	sub	sp, #12
 8005fc8:	af00      	add	r7, sp, #0
 8005fca:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005fcc:	bf00      	nop
 8005fce:	370c      	adds	r7, #12
 8005fd0:	46bd      	mov	sp, r7
 8005fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fd6:	4770      	bx	lr

08005fd8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005fd8:	b480      	push	{r7}
 8005fda:	b083      	sub	sp, #12
 8005fdc:	af00      	add	r7, sp, #0
 8005fde:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005fe0:	bf00      	nop
 8005fe2:	370c      	adds	r7, #12
 8005fe4:	46bd      	mov	sp, r7
 8005fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fea:	4770      	bx	lr

08005fec <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005fec:	b480      	push	{r7}
 8005fee:	b083      	sub	sp, #12
 8005ff0:	af00      	add	r7, sp, #0
 8005ff2:	6078      	str	r0, [r7, #4]
 8005ff4:	460b      	mov	r3, r1
 8005ff6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005ff8:	bf00      	nop
 8005ffa:	370c      	adds	r7, #12
 8005ffc:	46bd      	mov	sp, r7
 8005ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006002:	4770      	bx	lr

08006004 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006004:	b580      	push	{r7, lr}
 8006006:	b088      	sub	sp, #32
 8006008:	af00      	add	r7, sp, #0
 800600a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800600c:	2300      	movs	r3, #0
 800600e:	77bb      	strb	r3, [r7, #30]
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	685b      	ldr	r3, [r3, #4]
 8006014:	4aa0      	ldr	r2, [pc, #640]	; (8006298 <UART_SetConfig+0x294>)
 8006016:	4293      	cmp	r3, r2
 8006018:	d904      	bls.n	8006024 <UART_SetConfig+0x20>
 800601a:	f640 315d 	movw	r1, #2909	; 0xb5d
 800601e:	489f      	ldr	r0, [pc, #636]	; (800629c <UART_SetConfig+0x298>)
 8006020:	f7fb fed1 	bl	8001dc6 <assert_failed>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	689b      	ldr	r3, [r3, #8]
 8006028:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800602c:	d00d      	beq.n	800604a <UART_SetConfig+0x46>
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	689b      	ldr	r3, [r3, #8]
 8006032:	2b00      	cmp	r3, #0
 8006034:	d009      	beq.n	800604a <UART_SetConfig+0x46>
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	689b      	ldr	r3, [r3, #8]
 800603a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800603e:	d004      	beq.n	800604a <UART_SetConfig+0x46>
 8006040:	f640 315e 	movw	r1, #2910	; 0xb5e
 8006044:	4895      	ldr	r0, [pc, #596]	; (800629c <UART_SetConfig+0x298>)
 8006046:	f7fb febe 	bl	8001dc6 <assert_failed>
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	68db      	ldr	r3, [r3, #12]
 800604e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006052:	d012      	beq.n	800607a <UART_SetConfig+0x76>
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	68db      	ldr	r3, [r3, #12]
 8006058:	2b00      	cmp	r3, #0
 800605a:	d00e      	beq.n	800607a <UART_SetConfig+0x76>
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	68db      	ldr	r3, [r3, #12]
 8006060:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006064:	d009      	beq.n	800607a <UART_SetConfig+0x76>
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	68db      	ldr	r3, [r3, #12]
 800606a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800606e:	d004      	beq.n	800607a <UART_SetConfig+0x76>
 8006070:	f640 315f 	movw	r1, #2911	; 0xb5f
 8006074:	4889      	ldr	r0, [pc, #548]	; (800629c <UART_SetConfig+0x298>)
 8006076:	f7fb fea6 	bl	8001dc6 <assert_failed>
  assert_param(IS_UART_ONE_BIT_SAMPLE(huart->Init.OneBitSampling));
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	6a1b      	ldr	r3, [r3, #32]
 800607e:	2b00      	cmp	r3, #0
 8006080:	d009      	beq.n	8006096 <UART_SetConfig+0x92>
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	6a1b      	ldr	r3, [r3, #32]
 8006086:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800608a:	d004      	beq.n	8006096 <UART_SetConfig+0x92>
 800608c:	f44f 6136 	mov.w	r1, #2912	; 0xb60
 8006090:	4882      	ldr	r0, [pc, #520]	; (800629c <UART_SetConfig+0x298>)
 8006092:	f7fb fe98 	bl	8001dc6 <assert_failed>

  assert_param(IS_UART_PARITY(huart->Init.Parity));
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	691b      	ldr	r3, [r3, #16]
 800609a:	2b00      	cmp	r3, #0
 800609c:	d00e      	beq.n	80060bc <UART_SetConfig+0xb8>
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	691b      	ldr	r3, [r3, #16]
 80060a2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80060a6:	d009      	beq.n	80060bc <UART_SetConfig+0xb8>
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	691b      	ldr	r3, [r3, #16]
 80060ac:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80060b0:	d004      	beq.n	80060bc <UART_SetConfig+0xb8>
 80060b2:	f640 3162 	movw	r1, #2914	; 0xb62
 80060b6:	4879      	ldr	r0, [pc, #484]	; (800629c <UART_SetConfig+0x298>)
 80060b8:	f7fb fe85 	bl	8001dc6 <assert_failed>
  assert_param(IS_UART_MODE(huart->Init.Mode));
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	695b      	ldr	r3, [r3, #20]
 80060c0:	f023 030c 	bic.w	r3, r3, #12
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d103      	bne.n	80060d0 <UART_SetConfig+0xcc>
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	695b      	ldr	r3, [r3, #20]
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d104      	bne.n	80060da <UART_SetConfig+0xd6>
 80060d0:	f640 3163 	movw	r1, #2915	; 0xb63
 80060d4:	4871      	ldr	r0, [pc, #452]	; (800629c <UART_SetConfig+0x298>)
 80060d6:	f7fb fe76 	bl	8001dc6 <assert_failed>
  assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	699b      	ldr	r3, [r3, #24]
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d013      	beq.n	800610a <UART_SetConfig+0x106>
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	699b      	ldr	r3, [r3, #24]
 80060e6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80060ea:	d00e      	beq.n	800610a <UART_SetConfig+0x106>
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	699b      	ldr	r3, [r3, #24]
 80060f0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80060f4:	d009      	beq.n	800610a <UART_SetConfig+0x106>
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	699b      	ldr	r3, [r3, #24]
 80060fa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80060fe:	d004      	beq.n	800610a <UART_SetConfig+0x106>
 8006100:	f640 3164 	movw	r1, #2916	; 0xb64
 8006104:	4865      	ldr	r0, [pc, #404]	; (800629c <UART_SetConfig+0x298>)
 8006106:	f7fb fe5e 	bl	8001dc6 <assert_failed>
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	69db      	ldr	r3, [r3, #28]
 800610e:	2b00      	cmp	r3, #0
 8006110:	d009      	beq.n	8006126 <UART_SetConfig+0x122>
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	69db      	ldr	r3, [r3, #28]
 8006116:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800611a:	d004      	beq.n	8006126 <UART_SetConfig+0x122>
 800611c:	f640 3165 	movw	r1, #2917	; 0xb65
 8006120:	485e      	ldr	r0, [pc, #376]	; (800629c <UART_SetConfig+0x298>)
 8006122:	f7fb fe50 	bl	8001dc6 <assert_failed>
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	689a      	ldr	r2, [r3, #8]
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	691b      	ldr	r3, [r3, #16]
 800612e:	431a      	orrs	r2, r3
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	695b      	ldr	r3, [r3, #20]
 8006134:	431a      	orrs	r2, r3
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	69db      	ldr	r3, [r3, #28]
 800613a:	4313      	orrs	r3, r2
 800613c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	681a      	ldr	r2, [r3, #0]
 8006144:	4b56      	ldr	r3, [pc, #344]	; (80062a0 <UART_SetConfig+0x29c>)
 8006146:	4013      	ands	r3, r2
 8006148:	687a      	ldr	r2, [r7, #4]
 800614a:	6812      	ldr	r2, [r2, #0]
 800614c:	6979      	ldr	r1, [r7, #20]
 800614e:	430b      	orrs	r3, r1
 8006150:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	685b      	ldr	r3, [r3, #4]
 8006158:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	68da      	ldr	r2, [r3, #12]
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	430a      	orrs	r2, r1
 8006166:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	699b      	ldr	r3, [r3, #24]
 800616c:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	6a1b      	ldr	r3, [r3, #32]
 8006172:	697a      	ldr	r2, [r7, #20]
 8006174:	4313      	orrs	r3, r2
 8006176:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	689b      	ldr	r3, [r3, #8]
 800617e:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	697a      	ldr	r2, [r7, #20]
 8006188:	430a      	orrs	r2, r1
 800618a:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	4a44      	ldr	r2, [pc, #272]	; (80062a4 <UART_SetConfig+0x2a0>)
 8006192:	4293      	cmp	r3, r2
 8006194:	d121      	bne.n	80061da <UART_SetConfig+0x1d6>
 8006196:	4b44      	ldr	r3, [pc, #272]	; (80062a8 <UART_SetConfig+0x2a4>)
 8006198:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800619c:	f003 0303 	and.w	r3, r3, #3
 80061a0:	2b03      	cmp	r3, #3
 80061a2:	d817      	bhi.n	80061d4 <UART_SetConfig+0x1d0>
 80061a4:	a201      	add	r2, pc, #4	; (adr r2, 80061ac <UART_SetConfig+0x1a8>)
 80061a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061aa:	bf00      	nop
 80061ac:	080061bd 	.word	0x080061bd
 80061b0:	080061c9 	.word	0x080061c9
 80061b4:	080061c3 	.word	0x080061c3
 80061b8:	080061cf 	.word	0x080061cf
 80061bc:	2301      	movs	r3, #1
 80061be:	77fb      	strb	r3, [r7, #31]
 80061c0:	e14c      	b.n	800645c <UART_SetConfig+0x458>
 80061c2:	2302      	movs	r3, #2
 80061c4:	77fb      	strb	r3, [r7, #31]
 80061c6:	e149      	b.n	800645c <UART_SetConfig+0x458>
 80061c8:	2304      	movs	r3, #4
 80061ca:	77fb      	strb	r3, [r7, #31]
 80061cc:	e146      	b.n	800645c <UART_SetConfig+0x458>
 80061ce:	2308      	movs	r3, #8
 80061d0:	77fb      	strb	r3, [r7, #31]
 80061d2:	e143      	b.n	800645c <UART_SetConfig+0x458>
 80061d4:	2310      	movs	r3, #16
 80061d6:	77fb      	strb	r3, [r7, #31]
 80061d8:	e140      	b.n	800645c <UART_SetConfig+0x458>
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	4a33      	ldr	r2, [pc, #204]	; (80062ac <UART_SetConfig+0x2a8>)
 80061e0:	4293      	cmp	r3, r2
 80061e2:	d132      	bne.n	800624a <UART_SetConfig+0x246>
 80061e4:	4b30      	ldr	r3, [pc, #192]	; (80062a8 <UART_SetConfig+0x2a4>)
 80061e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80061ea:	f003 030c 	and.w	r3, r3, #12
 80061ee:	2b0c      	cmp	r3, #12
 80061f0:	d828      	bhi.n	8006244 <UART_SetConfig+0x240>
 80061f2:	a201      	add	r2, pc, #4	; (adr r2, 80061f8 <UART_SetConfig+0x1f4>)
 80061f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061f8:	0800622d 	.word	0x0800622d
 80061fc:	08006245 	.word	0x08006245
 8006200:	08006245 	.word	0x08006245
 8006204:	08006245 	.word	0x08006245
 8006208:	08006239 	.word	0x08006239
 800620c:	08006245 	.word	0x08006245
 8006210:	08006245 	.word	0x08006245
 8006214:	08006245 	.word	0x08006245
 8006218:	08006233 	.word	0x08006233
 800621c:	08006245 	.word	0x08006245
 8006220:	08006245 	.word	0x08006245
 8006224:	08006245 	.word	0x08006245
 8006228:	0800623f 	.word	0x0800623f
 800622c:	2300      	movs	r3, #0
 800622e:	77fb      	strb	r3, [r7, #31]
 8006230:	e114      	b.n	800645c <UART_SetConfig+0x458>
 8006232:	2302      	movs	r3, #2
 8006234:	77fb      	strb	r3, [r7, #31]
 8006236:	e111      	b.n	800645c <UART_SetConfig+0x458>
 8006238:	2304      	movs	r3, #4
 800623a:	77fb      	strb	r3, [r7, #31]
 800623c:	e10e      	b.n	800645c <UART_SetConfig+0x458>
 800623e:	2308      	movs	r3, #8
 8006240:	77fb      	strb	r3, [r7, #31]
 8006242:	e10b      	b.n	800645c <UART_SetConfig+0x458>
 8006244:	2310      	movs	r3, #16
 8006246:	77fb      	strb	r3, [r7, #31]
 8006248:	e108      	b.n	800645c <UART_SetConfig+0x458>
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	4a18      	ldr	r2, [pc, #96]	; (80062b0 <UART_SetConfig+0x2ac>)
 8006250:	4293      	cmp	r3, r2
 8006252:	d12f      	bne.n	80062b4 <UART_SetConfig+0x2b0>
 8006254:	4b14      	ldr	r3, [pc, #80]	; (80062a8 <UART_SetConfig+0x2a4>)
 8006256:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800625a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800625e:	2b30      	cmp	r3, #48	; 0x30
 8006260:	d013      	beq.n	800628a <UART_SetConfig+0x286>
 8006262:	2b30      	cmp	r3, #48	; 0x30
 8006264:	d814      	bhi.n	8006290 <UART_SetConfig+0x28c>
 8006266:	2b20      	cmp	r3, #32
 8006268:	d009      	beq.n	800627e <UART_SetConfig+0x27a>
 800626a:	2b20      	cmp	r3, #32
 800626c:	d810      	bhi.n	8006290 <UART_SetConfig+0x28c>
 800626e:	2b00      	cmp	r3, #0
 8006270:	d002      	beq.n	8006278 <UART_SetConfig+0x274>
 8006272:	2b10      	cmp	r3, #16
 8006274:	d006      	beq.n	8006284 <UART_SetConfig+0x280>
 8006276:	e00b      	b.n	8006290 <UART_SetConfig+0x28c>
 8006278:	2300      	movs	r3, #0
 800627a:	77fb      	strb	r3, [r7, #31]
 800627c:	e0ee      	b.n	800645c <UART_SetConfig+0x458>
 800627e:	2302      	movs	r3, #2
 8006280:	77fb      	strb	r3, [r7, #31]
 8006282:	e0eb      	b.n	800645c <UART_SetConfig+0x458>
 8006284:	2304      	movs	r3, #4
 8006286:	77fb      	strb	r3, [r7, #31]
 8006288:	e0e8      	b.n	800645c <UART_SetConfig+0x458>
 800628a:	2308      	movs	r3, #8
 800628c:	77fb      	strb	r3, [r7, #31]
 800628e:	e0e5      	b.n	800645c <UART_SetConfig+0x458>
 8006290:	2310      	movs	r3, #16
 8006292:	77fb      	strb	r3, [r7, #31]
 8006294:	e0e2      	b.n	800645c <UART_SetConfig+0x458>
 8006296:	bf00      	nop
 8006298:	019bfcc0 	.word	0x019bfcc0
 800629c:	0800ec38 	.word	0x0800ec38
 80062a0:	efff69f3 	.word	0xefff69f3
 80062a4:	40011000 	.word	0x40011000
 80062a8:	40023800 	.word	0x40023800
 80062ac:	40004400 	.word	0x40004400
 80062b0:	40004800 	.word	0x40004800
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	4aa5      	ldr	r2, [pc, #660]	; (8006550 <UART_SetConfig+0x54c>)
 80062ba:	4293      	cmp	r3, r2
 80062bc:	d120      	bne.n	8006300 <UART_SetConfig+0x2fc>
 80062be:	4ba5      	ldr	r3, [pc, #660]	; (8006554 <UART_SetConfig+0x550>)
 80062c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80062c4:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80062c8:	2bc0      	cmp	r3, #192	; 0xc0
 80062ca:	d013      	beq.n	80062f4 <UART_SetConfig+0x2f0>
 80062cc:	2bc0      	cmp	r3, #192	; 0xc0
 80062ce:	d814      	bhi.n	80062fa <UART_SetConfig+0x2f6>
 80062d0:	2b80      	cmp	r3, #128	; 0x80
 80062d2:	d009      	beq.n	80062e8 <UART_SetConfig+0x2e4>
 80062d4:	2b80      	cmp	r3, #128	; 0x80
 80062d6:	d810      	bhi.n	80062fa <UART_SetConfig+0x2f6>
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d002      	beq.n	80062e2 <UART_SetConfig+0x2de>
 80062dc:	2b40      	cmp	r3, #64	; 0x40
 80062de:	d006      	beq.n	80062ee <UART_SetConfig+0x2ea>
 80062e0:	e00b      	b.n	80062fa <UART_SetConfig+0x2f6>
 80062e2:	2300      	movs	r3, #0
 80062e4:	77fb      	strb	r3, [r7, #31]
 80062e6:	e0b9      	b.n	800645c <UART_SetConfig+0x458>
 80062e8:	2302      	movs	r3, #2
 80062ea:	77fb      	strb	r3, [r7, #31]
 80062ec:	e0b6      	b.n	800645c <UART_SetConfig+0x458>
 80062ee:	2304      	movs	r3, #4
 80062f0:	77fb      	strb	r3, [r7, #31]
 80062f2:	e0b3      	b.n	800645c <UART_SetConfig+0x458>
 80062f4:	2308      	movs	r3, #8
 80062f6:	77fb      	strb	r3, [r7, #31]
 80062f8:	e0b0      	b.n	800645c <UART_SetConfig+0x458>
 80062fa:	2310      	movs	r3, #16
 80062fc:	77fb      	strb	r3, [r7, #31]
 80062fe:	e0ad      	b.n	800645c <UART_SetConfig+0x458>
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	4a94      	ldr	r2, [pc, #592]	; (8006558 <UART_SetConfig+0x554>)
 8006306:	4293      	cmp	r3, r2
 8006308:	d125      	bne.n	8006356 <UART_SetConfig+0x352>
 800630a:	4b92      	ldr	r3, [pc, #584]	; (8006554 <UART_SetConfig+0x550>)
 800630c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006310:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006314:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006318:	d017      	beq.n	800634a <UART_SetConfig+0x346>
 800631a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800631e:	d817      	bhi.n	8006350 <UART_SetConfig+0x34c>
 8006320:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006324:	d00b      	beq.n	800633e <UART_SetConfig+0x33a>
 8006326:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800632a:	d811      	bhi.n	8006350 <UART_SetConfig+0x34c>
 800632c:	2b00      	cmp	r3, #0
 800632e:	d003      	beq.n	8006338 <UART_SetConfig+0x334>
 8006330:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006334:	d006      	beq.n	8006344 <UART_SetConfig+0x340>
 8006336:	e00b      	b.n	8006350 <UART_SetConfig+0x34c>
 8006338:	2300      	movs	r3, #0
 800633a:	77fb      	strb	r3, [r7, #31]
 800633c:	e08e      	b.n	800645c <UART_SetConfig+0x458>
 800633e:	2302      	movs	r3, #2
 8006340:	77fb      	strb	r3, [r7, #31]
 8006342:	e08b      	b.n	800645c <UART_SetConfig+0x458>
 8006344:	2304      	movs	r3, #4
 8006346:	77fb      	strb	r3, [r7, #31]
 8006348:	e088      	b.n	800645c <UART_SetConfig+0x458>
 800634a:	2308      	movs	r3, #8
 800634c:	77fb      	strb	r3, [r7, #31]
 800634e:	e085      	b.n	800645c <UART_SetConfig+0x458>
 8006350:	2310      	movs	r3, #16
 8006352:	77fb      	strb	r3, [r7, #31]
 8006354:	e082      	b.n	800645c <UART_SetConfig+0x458>
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	4a80      	ldr	r2, [pc, #512]	; (800655c <UART_SetConfig+0x558>)
 800635c:	4293      	cmp	r3, r2
 800635e:	d125      	bne.n	80063ac <UART_SetConfig+0x3a8>
 8006360:	4b7c      	ldr	r3, [pc, #496]	; (8006554 <UART_SetConfig+0x550>)
 8006362:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006366:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800636a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800636e:	d017      	beq.n	80063a0 <UART_SetConfig+0x39c>
 8006370:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006374:	d817      	bhi.n	80063a6 <UART_SetConfig+0x3a2>
 8006376:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800637a:	d00b      	beq.n	8006394 <UART_SetConfig+0x390>
 800637c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006380:	d811      	bhi.n	80063a6 <UART_SetConfig+0x3a2>
 8006382:	2b00      	cmp	r3, #0
 8006384:	d003      	beq.n	800638e <UART_SetConfig+0x38a>
 8006386:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800638a:	d006      	beq.n	800639a <UART_SetConfig+0x396>
 800638c:	e00b      	b.n	80063a6 <UART_SetConfig+0x3a2>
 800638e:	2301      	movs	r3, #1
 8006390:	77fb      	strb	r3, [r7, #31]
 8006392:	e063      	b.n	800645c <UART_SetConfig+0x458>
 8006394:	2302      	movs	r3, #2
 8006396:	77fb      	strb	r3, [r7, #31]
 8006398:	e060      	b.n	800645c <UART_SetConfig+0x458>
 800639a:	2304      	movs	r3, #4
 800639c:	77fb      	strb	r3, [r7, #31]
 800639e:	e05d      	b.n	800645c <UART_SetConfig+0x458>
 80063a0:	2308      	movs	r3, #8
 80063a2:	77fb      	strb	r3, [r7, #31]
 80063a4:	e05a      	b.n	800645c <UART_SetConfig+0x458>
 80063a6:	2310      	movs	r3, #16
 80063a8:	77fb      	strb	r3, [r7, #31]
 80063aa:	e057      	b.n	800645c <UART_SetConfig+0x458>
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	4a6b      	ldr	r2, [pc, #428]	; (8006560 <UART_SetConfig+0x55c>)
 80063b2:	4293      	cmp	r3, r2
 80063b4:	d125      	bne.n	8006402 <UART_SetConfig+0x3fe>
 80063b6:	4b67      	ldr	r3, [pc, #412]	; (8006554 <UART_SetConfig+0x550>)
 80063b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80063bc:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80063c0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80063c4:	d017      	beq.n	80063f6 <UART_SetConfig+0x3f2>
 80063c6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80063ca:	d817      	bhi.n	80063fc <UART_SetConfig+0x3f8>
 80063cc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80063d0:	d00b      	beq.n	80063ea <UART_SetConfig+0x3e6>
 80063d2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80063d6:	d811      	bhi.n	80063fc <UART_SetConfig+0x3f8>
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d003      	beq.n	80063e4 <UART_SetConfig+0x3e0>
 80063dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80063e0:	d006      	beq.n	80063f0 <UART_SetConfig+0x3ec>
 80063e2:	e00b      	b.n	80063fc <UART_SetConfig+0x3f8>
 80063e4:	2300      	movs	r3, #0
 80063e6:	77fb      	strb	r3, [r7, #31]
 80063e8:	e038      	b.n	800645c <UART_SetConfig+0x458>
 80063ea:	2302      	movs	r3, #2
 80063ec:	77fb      	strb	r3, [r7, #31]
 80063ee:	e035      	b.n	800645c <UART_SetConfig+0x458>
 80063f0:	2304      	movs	r3, #4
 80063f2:	77fb      	strb	r3, [r7, #31]
 80063f4:	e032      	b.n	800645c <UART_SetConfig+0x458>
 80063f6:	2308      	movs	r3, #8
 80063f8:	77fb      	strb	r3, [r7, #31]
 80063fa:	e02f      	b.n	800645c <UART_SetConfig+0x458>
 80063fc:	2310      	movs	r3, #16
 80063fe:	77fb      	strb	r3, [r7, #31]
 8006400:	e02c      	b.n	800645c <UART_SetConfig+0x458>
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	4a57      	ldr	r2, [pc, #348]	; (8006564 <UART_SetConfig+0x560>)
 8006408:	4293      	cmp	r3, r2
 800640a:	d125      	bne.n	8006458 <UART_SetConfig+0x454>
 800640c:	4b51      	ldr	r3, [pc, #324]	; (8006554 <UART_SetConfig+0x550>)
 800640e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006412:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8006416:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800641a:	d017      	beq.n	800644c <UART_SetConfig+0x448>
 800641c:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8006420:	d817      	bhi.n	8006452 <UART_SetConfig+0x44e>
 8006422:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006426:	d00b      	beq.n	8006440 <UART_SetConfig+0x43c>
 8006428:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800642c:	d811      	bhi.n	8006452 <UART_SetConfig+0x44e>
 800642e:	2b00      	cmp	r3, #0
 8006430:	d003      	beq.n	800643a <UART_SetConfig+0x436>
 8006432:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006436:	d006      	beq.n	8006446 <UART_SetConfig+0x442>
 8006438:	e00b      	b.n	8006452 <UART_SetConfig+0x44e>
 800643a:	2300      	movs	r3, #0
 800643c:	77fb      	strb	r3, [r7, #31]
 800643e:	e00d      	b.n	800645c <UART_SetConfig+0x458>
 8006440:	2302      	movs	r3, #2
 8006442:	77fb      	strb	r3, [r7, #31]
 8006444:	e00a      	b.n	800645c <UART_SetConfig+0x458>
 8006446:	2304      	movs	r3, #4
 8006448:	77fb      	strb	r3, [r7, #31]
 800644a:	e007      	b.n	800645c <UART_SetConfig+0x458>
 800644c:	2308      	movs	r3, #8
 800644e:	77fb      	strb	r3, [r7, #31]
 8006450:	e004      	b.n	800645c <UART_SetConfig+0x458>
 8006452:	2310      	movs	r3, #16
 8006454:	77fb      	strb	r3, [r7, #31]
 8006456:	e001      	b.n	800645c <UART_SetConfig+0x458>
 8006458:	2310      	movs	r3, #16
 800645a:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	69db      	ldr	r3, [r3, #28]
 8006460:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006464:	d15c      	bne.n	8006520 <UART_SetConfig+0x51c>
  {
    switch (clocksource)
 8006466:	7ffb      	ldrb	r3, [r7, #31]
 8006468:	2b08      	cmp	r3, #8
 800646a:	d828      	bhi.n	80064be <UART_SetConfig+0x4ba>
 800646c:	a201      	add	r2, pc, #4	; (adr r2, 8006474 <UART_SetConfig+0x470>)
 800646e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006472:	bf00      	nop
 8006474:	08006499 	.word	0x08006499
 8006478:	080064a1 	.word	0x080064a1
 800647c:	080064a9 	.word	0x080064a9
 8006480:	080064bf 	.word	0x080064bf
 8006484:	080064af 	.word	0x080064af
 8006488:	080064bf 	.word	0x080064bf
 800648c:	080064bf 	.word	0x080064bf
 8006490:	080064bf 	.word	0x080064bf
 8006494:	080064b7 	.word	0x080064b7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006498:	f7fe f972 	bl	8004780 <HAL_RCC_GetPCLK1Freq>
 800649c:	61b8      	str	r0, [r7, #24]
        break;
 800649e:	e013      	b.n	80064c8 <UART_SetConfig+0x4c4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80064a0:	f7fe f982 	bl	80047a8 <HAL_RCC_GetPCLK2Freq>
 80064a4:	61b8      	str	r0, [r7, #24]
        break;
 80064a6:	e00f      	b.n	80064c8 <UART_SetConfig+0x4c4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80064a8:	4b2f      	ldr	r3, [pc, #188]	; (8006568 <UART_SetConfig+0x564>)
 80064aa:	61bb      	str	r3, [r7, #24]
        break;
 80064ac:	e00c      	b.n	80064c8 <UART_SetConfig+0x4c4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80064ae:	f7fe f895 	bl	80045dc <HAL_RCC_GetSysClockFreq>
 80064b2:	61b8      	str	r0, [r7, #24]
        break;
 80064b4:	e008      	b.n	80064c8 <UART_SetConfig+0x4c4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80064b6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80064ba:	61bb      	str	r3, [r7, #24]
        break;
 80064bc:	e004      	b.n	80064c8 <UART_SetConfig+0x4c4>
      default:
        pclk = 0U;
 80064be:	2300      	movs	r3, #0
 80064c0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80064c2:	2301      	movs	r3, #1
 80064c4:	77bb      	strb	r3, [r7, #30]
        break;
 80064c6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80064c8:	69bb      	ldr	r3, [r7, #24]
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	f000 8082 	beq.w	80065d4 <UART_SetConfig+0x5d0>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80064d0:	69bb      	ldr	r3, [r7, #24]
 80064d2:	005a      	lsls	r2, r3, #1
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	685b      	ldr	r3, [r3, #4]
 80064d8:	085b      	lsrs	r3, r3, #1
 80064da:	441a      	add	r2, r3
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	685b      	ldr	r3, [r3, #4]
 80064e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80064e4:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80064e6:	693b      	ldr	r3, [r7, #16]
 80064e8:	2b0f      	cmp	r3, #15
 80064ea:	d916      	bls.n	800651a <UART_SetConfig+0x516>
 80064ec:	693b      	ldr	r3, [r7, #16]
 80064ee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80064f2:	d212      	bcs.n	800651a <UART_SetConfig+0x516>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80064f4:	693b      	ldr	r3, [r7, #16]
 80064f6:	b29b      	uxth	r3, r3
 80064f8:	f023 030f 	bic.w	r3, r3, #15
 80064fc:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80064fe:	693b      	ldr	r3, [r7, #16]
 8006500:	085b      	lsrs	r3, r3, #1
 8006502:	b29b      	uxth	r3, r3
 8006504:	f003 0307 	and.w	r3, r3, #7
 8006508:	b29a      	uxth	r2, r3
 800650a:	89fb      	ldrh	r3, [r7, #14]
 800650c:	4313      	orrs	r3, r2
 800650e:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	89fa      	ldrh	r2, [r7, #14]
 8006516:	60da      	str	r2, [r3, #12]
 8006518:	e05c      	b.n	80065d4 <UART_SetConfig+0x5d0>
      }
      else
      {
        ret = HAL_ERROR;
 800651a:	2301      	movs	r3, #1
 800651c:	77bb      	strb	r3, [r7, #30]
 800651e:	e059      	b.n	80065d4 <UART_SetConfig+0x5d0>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006520:	7ffb      	ldrb	r3, [r7, #31]
 8006522:	2b08      	cmp	r3, #8
 8006524:	d835      	bhi.n	8006592 <UART_SetConfig+0x58e>
 8006526:	a201      	add	r2, pc, #4	; (adr r2, 800652c <UART_SetConfig+0x528>)
 8006528:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800652c:	0800656d 	.word	0x0800656d
 8006530:	08006575 	.word	0x08006575
 8006534:	0800657d 	.word	0x0800657d
 8006538:	08006593 	.word	0x08006593
 800653c:	08006583 	.word	0x08006583
 8006540:	08006593 	.word	0x08006593
 8006544:	08006593 	.word	0x08006593
 8006548:	08006593 	.word	0x08006593
 800654c:	0800658b 	.word	0x0800658b
 8006550:	40004c00 	.word	0x40004c00
 8006554:	40023800 	.word	0x40023800
 8006558:	40005000 	.word	0x40005000
 800655c:	40011400 	.word	0x40011400
 8006560:	40007800 	.word	0x40007800
 8006564:	40007c00 	.word	0x40007c00
 8006568:	00f42400 	.word	0x00f42400
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800656c:	f7fe f908 	bl	8004780 <HAL_RCC_GetPCLK1Freq>
 8006570:	61b8      	str	r0, [r7, #24]
        break;
 8006572:	e013      	b.n	800659c <UART_SetConfig+0x598>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006574:	f7fe f918 	bl	80047a8 <HAL_RCC_GetPCLK2Freq>
 8006578:	61b8      	str	r0, [r7, #24]
        break;
 800657a:	e00f      	b.n	800659c <UART_SetConfig+0x598>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800657c:	4b1b      	ldr	r3, [pc, #108]	; (80065ec <UART_SetConfig+0x5e8>)
 800657e:	61bb      	str	r3, [r7, #24]
        break;
 8006580:	e00c      	b.n	800659c <UART_SetConfig+0x598>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006582:	f7fe f82b 	bl	80045dc <HAL_RCC_GetSysClockFreq>
 8006586:	61b8      	str	r0, [r7, #24]
        break;
 8006588:	e008      	b.n	800659c <UART_SetConfig+0x598>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800658a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800658e:	61bb      	str	r3, [r7, #24]
        break;
 8006590:	e004      	b.n	800659c <UART_SetConfig+0x598>
      default:
        pclk = 0U;
 8006592:	2300      	movs	r3, #0
 8006594:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006596:	2301      	movs	r3, #1
 8006598:	77bb      	strb	r3, [r7, #30]
        break;
 800659a:	bf00      	nop
    }

    if (pclk != 0U)
 800659c:	69bb      	ldr	r3, [r7, #24]
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d018      	beq.n	80065d4 <UART_SetConfig+0x5d0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	685b      	ldr	r3, [r3, #4]
 80065a6:	085a      	lsrs	r2, r3, #1
 80065a8:	69bb      	ldr	r3, [r7, #24]
 80065aa:	441a      	add	r2, r3
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	685b      	ldr	r3, [r3, #4]
 80065b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80065b4:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80065b6:	693b      	ldr	r3, [r7, #16]
 80065b8:	2b0f      	cmp	r3, #15
 80065ba:	d909      	bls.n	80065d0 <UART_SetConfig+0x5cc>
 80065bc:	693b      	ldr	r3, [r7, #16]
 80065be:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80065c2:	d205      	bcs.n	80065d0 <UART_SetConfig+0x5cc>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80065c4:	693b      	ldr	r3, [r7, #16]
 80065c6:	b29a      	uxth	r2, r3
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	60da      	str	r2, [r3, #12]
 80065ce:	e001      	b.n	80065d4 <UART_SetConfig+0x5d0>
      }
      else
      {
        ret = HAL_ERROR;
 80065d0:	2301      	movs	r3, #1
 80065d2:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	2200      	movs	r2, #0
 80065d8:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	2200      	movs	r2, #0
 80065de:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80065e0:	7fbb      	ldrb	r3, [r7, #30]
}
 80065e2:	4618      	mov	r0, r3
 80065e4:	3720      	adds	r7, #32
 80065e6:	46bd      	mov	sp, r7
 80065e8:	bd80      	pop	{r7, pc}
 80065ea:	bf00      	nop
 80065ec:	00f42400 	.word	0x00f42400

080065f0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80065f0:	b580      	push	{r7, lr}
 80065f2:	b082      	sub	sp, #8
 80065f4:	af00      	add	r7, sp, #0
 80065f6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065fc:	2bff      	cmp	r3, #255	; 0xff
 80065fe:	d904      	bls.n	800660a <UART_AdvFeatureConfig+0x1a>
 8006600:	f640 31e6 	movw	r1, #3046	; 0xbe6
 8006604:	488e      	ldr	r0, [pc, #568]	; (8006840 <UART_AdvFeatureConfig+0x250>)
 8006606:	f7fb fbde 	bl	8001dc6 <assert_failed>

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800660e:	f003 0301 	and.w	r3, r3, #1
 8006612:	2b00      	cmp	r3, #0
 8006614:	d018      	beq.n	8006648 <UART_AdvFeatureConfig+0x58>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800661a:	2b00      	cmp	r3, #0
 800661c:	d009      	beq.n	8006632 <UART_AdvFeatureConfig+0x42>
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006622:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006626:	d004      	beq.n	8006632 <UART_AdvFeatureConfig+0x42>
 8006628:	f640 31eb 	movw	r1, #3051	; 0xbeb
 800662c:	4884      	ldr	r0, [pc, #528]	; (8006840 <UART_AdvFeatureConfig+0x250>)
 800662e:	f7fb fbca 	bl	8001dc6 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	685b      	ldr	r3, [r3, #4]
 8006638:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	430a      	orrs	r2, r1
 8006646:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800664c:	f003 0302 	and.w	r3, r3, #2
 8006650:	2b00      	cmp	r3, #0
 8006652:	d018      	beq.n	8006686 <UART_AdvFeatureConfig+0x96>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006658:	2b00      	cmp	r3, #0
 800665a:	d009      	beq.n	8006670 <UART_AdvFeatureConfig+0x80>
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006660:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006664:	d004      	beq.n	8006670 <UART_AdvFeatureConfig+0x80>
 8006666:	f640 31f2 	movw	r1, #3058	; 0xbf2
 800666a:	4875      	ldr	r0, [pc, #468]	; (8006840 <UART_AdvFeatureConfig+0x250>)
 800666c:	f7fb fbab 	bl	8001dc6 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	685b      	ldr	r3, [r3, #4]
 8006676:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	430a      	orrs	r2, r1
 8006684:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800668a:	f003 0304 	and.w	r3, r3, #4
 800668e:	2b00      	cmp	r3, #0
 8006690:	d018      	beq.n	80066c4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006696:	2b00      	cmp	r3, #0
 8006698:	d009      	beq.n	80066ae <UART_AdvFeatureConfig+0xbe>
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800669e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80066a2:	d004      	beq.n	80066ae <UART_AdvFeatureConfig+0xbe>
 80066a4:	f640 31f9 	movw	r1, #3065	; 0xbf9
 80066a8:	4865      	ldr	r0, [pc, #404]	; (8006840 <UART_AdvFeatureConfig+0x250>)
 80066aa:	f7fb fb8c 	bl	8001dc6 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	685b      	ldr	r3, [r3, #4]
 80066b4:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	430a      	orrs	r2, r1
 80066c2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066c8:	f003 0308 	and.w	r3, r3, #8
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d018      	beq.n	8006702 <UART_AdvFeatureConfig+0x112>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d009      	beq.n	80066ec <UART_AdvFeatureConfig+0xfc>
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80066dc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80066e0:	d004      	beq.n	80066ec <UART_AdvFeatureConfig+0xfc>
 80066e2:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 80066e6:	4856      	ldr	r0, [pc, #344]	; (8006840 <UART_AdvFeatureConfig+0x250>)
 80066e8:	f7fb fb6d 	bl	8001dc6 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	685b      	ldr	r3, [r3, #4]
 80066f2:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	430a      	orrs	r2, r1
 8006700:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006706:	f003 0310 	and.w	r3, r3, #16
 800670a:	2b00      	cmp	r3, #0
 800670c:	d018      	beq.n	8006740 <UART_AdvFeatureConfig+0x150>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006712:	2b00      	cmp	r3, #0
 8006714:	d009      	beq.n	800672a <UART_AdvFeatureConfig+0x13a>
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800671a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800671e:	d004      	beq.n	800672a <UART_AdvFeatureConfig+0x13a>
 8006720:	f640 4107 	movw	r1, #3079	; 0xc07
 8006724:	4846      	ldr	r0, [pc, #280]	; (8006840 <UART_AdvFeatureConfig+0x250>)
 8006726:	f7fb fb4e 	bl	8001dc6 <assert_failed>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	689b      	ldr	r3, [r3, #8]
 8006730:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	430a      	orrs	r2, r1
 800673e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006744:	f003 0320 	and.w	r3, r3, #32
 8006748:	2b00      	cmp	r3, #0
 800674a:	d018      	beq.n	800677e <UART_AdvFeatureConfig+0x18e>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006750:	2b00      	cmp	r3, #0
 8006752:	d009      	beq.n	8006768 <UART_AdvFeatureConfig+0x178>
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006758:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800675c:	d004      	beq.n	8006768 <UART_AdvFeatureConfig+0x178>
 800675e:	f640 410e 	movw	r1, #3086	; 0xc0e
 8006762:	4837      	ldr	r0, [pc, #220]	; (8006840 <UART_AdvFeatureConfig+0x250>)
 8006764:	f7fb fb2f 	bl	8001dc6 <assert_failed>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	689b      	ldr	r3, [r3, #8]
 800676e:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	430a      	orrs	r2, r1
 800677c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006782:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006786:	2b00      	cmp	r3, #0
 8006788:	d064      	beq.n	8006854 <UART_AdvFeatureConfig+0x264>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	4a2d      	ldr	r2, [pc, #180]	; (8006844 <UART_AdvFeatureConfig+0x254>)
 8006790:	4293      	cmp	r3, r2
 8006792:	d013      	beq.n	80067bc <UART_AdvFeatureConfig+0x1cc>
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	4a2b      	ldr	r2, [pc, #172]	; (8006848 <UART_AdvFeatureConfig+0x258>)
 800679a:	4293      	cmp	r3, r2
 800679c:	d00e      	beq.n	80067bc <UART_AdvFeatureConfig+0x1cc>
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	4a2a      	ldr	r2, [pc, #168]	; (800684c <UART_AdvFeatureConfig+0x25c>)
 80067a4:	4293      	cmp	r3, r2
 80067a6:	d009      	beq.n	80067bc <UART_AdvFeatureConfig+0x1cc>
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	4a28      	ldr	r2, [pc, #160]	; (8006850 <UART_AdvFeatureConfig+0x260>)
 80067ae:	4293      	cmp	r3, r2
 80067b0:	d004      	beq.n	80067bc <UART_AdvFeatureConfig+0x1cc>
 80067b2:	f640 4115 	movw	r1, #3093	; 0xc15
 80067b6:	4822      	ldr	r0, [pc, #136]	; (8006840 <UART_AdvFeatureConfig+0x250>)
 80067b8:	f7fb fb05 	bl	8001dc6 <assert_failed>
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d009      	beq.n	80067d8 <UART_AdvFeatureConfig+0x1e8>
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067c8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80067cc:	d004      	beq.n	80067d8 <UART_AdvFeatureConfig+0x1e8>
 80067ce:	f640 4116 	movw	r1, #3094	; 0xc16
 80067d2:	481b      	ldr	r0, [pc, #108]	; (8006840 <UART_AdvFeatureConfig+0x250>)
 80067d4:	f7fb faf7 	bl	8001dc6 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	685b      	ldr	r3, [r3, #4]
 80067de:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	430a      	orrs	r2, r1
 80067ec:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067f2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80067f6:	d12d      	bne.n	8006854 <UART_AdvFeatureConfig+0x264>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d013      	beq.n	8006828 <UART_AdvFeatureConfig+0x238>
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006804:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006808:	d00e      	beq.n	8006828 <UART_AdvFeatureConfig+0x238>
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800680e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006812:	d009      	beq.n	8006828 <UART_AdvFeatureConfig+0x238>
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006818:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800681c:	d004      	beq.n	8006828 <UART_AdvFeatureConfig+0x238>
 800681e:	f640 411b 	movw	r1, #3099	; 0xc1b
 8006822:	4807      	ldr	r0, [pc, #28]	; (8006840 <UART_AdvFeatureConfig+0x250>)
 8006824:	f7fb facf 	bl	8001dc6 <assert_failed>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	685b      	ldr	r3, [r3, #4]
 800682e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	430a      	orrs	r2, r1
 800683c:	605a      	str	r2, [r3, #4]
 800683e:	e009      	b.n	8006854 <UART_AdvFeatureConfig+0x264>
 8006840:	0800ec38 	.word	0x0800ec38
 8006844:	40011000 	.word	0x40011000
 8006848:	40004400 	.word	0x40004400
 800684c:	40004800 	.word	0x40004800
 8006850:	40011400 	.word	0x40011400
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006858:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800685c:	2b00      	cmp	r3, #0
 800685e:	d018      	beq.n	8006892 <UART_AdvFeatureConfig+0x2a2>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006864:	2b00      	cmp	r3, #0
 8006866:	d009      	beq.n	800687c <UART_AdvFeatureConfig+0x28c>
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800686c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8006870:	d004      	beq.n	800687c <UART_AdvFeatureConfig+0x28c>
 8006872:	f640 4123 	movw	r1, #3107	; 0xc23
 8006876:	4809      	ldr	r0, [pc, #36]	; (800689c <UART_AdvFeatureConfig+0x2ac>)
 8006878:	f7fb faa5 	bl	8001dc6 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	685b      	ldr	r3, [r3, #4]
 8006882:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	430a      	orrs	r2, r1
 8006890:	605a      	str	r2, [r3, #4]
  }
}
 8006892:	bf00      	nop
 8006894:	3708      	adds	r7, #8
 8006896:	46bd      	mov	sp, r7
 8006898:	bd80      	pop	{r7, pc}
 800689a:	bf00      	nop
 800689c:	0800ec38 	.word	0x0800ec38

080068a0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80068a0:	b580      	push	{r7, lr}
 80068a2:	b086      	sub	sp, #24
 80068a4:	af02      	add	r7, sp, #8
 80068a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	2200      	movs	r2, #0
 80068ac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80068b0:	f7fb fcf8 	bl	80022a4 <HAL_GetTick>
 80068b4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	f003 0308 	and.w	r3, r3, #8
 80068c0:	2b08      	cmp	r3, #8
 80068c2:	d10e      	bne.n	80068e2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80068c4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80068c8:	9300      	str	r3, [sp, #0]
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	2200      	movs	r2, #0
 80068ce:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80068d2:	6878      	ldr	r0, [r7, #4]
 80068d4:	f000 f81b 	bl	800690e <UART_WaitOnFlagUntilTimeout>
 80068d8:	4603      	mov	r3, r0
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d001      	beq.n	80068e2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80068de:	2303      	movs	r3, #3
 80068e0:	e011      	b.n	8006906 <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	2220      	movs	r2, #32
 80068e6:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	2220      	movs	r2, #32
 80068ec:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	2200      	movs	r2, #0
 80068f4:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	2200      	movs	r2, #0
 80068fa:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	2200      	movs	r2, #0
 8006900:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8006904:	2300      	movs	r3, #0
}
 8006906:	4618      	mov	r0, r3
 8006908:	3710      	adds	r7, #16
 800690a:	46bd      	mov	sp, r7
 800690c:	bd80      	pop	{r7, pc}

0800690e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800690e:	b580      	push	{r7, lr}
 8006910:	b09c      	sub	sp, #112	; 0x70
 8006912:	af00      	add	r7, sp, #0
 8006914:	60f8      	str	r0, [r7, #12]
 8006916:	60b9      	str	r1, [r7, #8]
 8006918:	603b      	str	r3, [r7, #0]
 800691a:	4613      	mov	r3, r2
 800691c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800691e:	e0a7      	b.n	8006a70 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006920:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006922:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006926:	f000 80a3 	beq.w	8006a70 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800692a:	f7fb fcbb 	bl	80022a4 <HAL_GetTick>
 800692e:	4602      	mov	r2, r0
 8006930:	683b      	ldr	r3, [r7, #0]
 8006932:	1ad3      	subs	r3, r2, r3
 8006934:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8006936:	429a      	cmp	r2, r3
 8006938:	d302      	bcc.n	8006940 <UART_WaitOnFlagUntilTimeout+0x32>
 800693a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800693c:	2b00      	cmp	r3, #0
 800693e:	d13f      	bne.n	80069c0 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006946:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006948:	e853 3f00 	ldrex	r3, [r3]
 800694c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800694e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006950:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006954:	667b      	str	r3, [r7, #100]	; 0x64
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	461a      	mov	r2, r3
 800695c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800695e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006960:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006962:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006964:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006966:	e841 2300 	strex	r3, r2, [r1]
 800696a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800696c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800696e:	2b00      	cmp	r3, #0
 8006970:	d1e6      	bne.n	8006940 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	3308      	adds	r3, #8
 8006978:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800697a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800697c:	e853 3f00 	ldrex	r3, [r3]
 8006980:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006982:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006984:	f023 0301 	bic.w	r3, r3, #1
 8006988:	663b      	str	r3, [r7, #96]	; 0x60
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	3308      	adds	r3, #8
 8006990:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006992:	64ba      	str	r2, [r7, #72]	; 0x48
 8006994:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006996:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006998:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800699a:	e841 2300 	strex	r3, r2, [r1]
 800699e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80069a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d1e5      	bne.n	8006972 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	2220      	movs	r2, #32
 80069aa:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	2220      	movs	r2, #32
 80069b0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	2200      	movs	r2, #0
 80069b8:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 80069bc:	2303      	movs	r3, #3
 80069be:	e068      	b.n	8006a92 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	f003 0304 	and.w	r3, r3, #4
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d050      	beq.n	8006a70 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	69db      	ldr	r3, [r3, #28]
 80069d4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80069d8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80069dc:	d148      	bne.n	8006a70 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80069e6:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069f0:	e853 3f00 	ldrex	r3, [r3]
 80069f4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80069f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069f8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80069fc:	66fb      	str	r3, [r7, #108]	; 0x6c
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	461a      	mov	r2, r3
 8006a04:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006a06:	637b      	str	r3, [r7, #52]	; 0x34
 8006a08:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a0a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006a0c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006a0e:	e841 2300 	strex	r3, r2, [r1]
 8006a12:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006a14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d1e6      	bne.n	80069e8 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	3308      	adds	r3, #8
 8006a20:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a22:	697b      	ldr	r3, [r7, #20]
 8006a24:	e853 3f00 	ldrex	r3, [r3]
 8006a28:	613b      	str	r3, [r7, #16]
   return(result);
 8006a2a:	693b      	ldr	r3, [r7, #16]
 8006a2c:	f023 0301 	bic.w	r3, r3, #1
 8006a30:	66bb      	str	r3, [r7, #104]	; 0x68
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	3308      	adds	r3, #8
 8006a38:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006a3a:	623a      	str	r2, [r7, #32]
 8006a3c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a3e:	69f9      	ldr	r1, [r7, #28]
 8006a40:	6a3a      	ldr	r2, [r7, #32]
 8006a42:	e841 2300 	strex	r3, r2, [r1]
 8006a46:	61bb      	str	r3, [r7, #24]
   return(result);
 8006a48:	69bb      	ldr	r3, [r7, #24]
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d1e5      	bne.n	8006a1a <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	2220      	movs	r2, #32
 8006a52:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	2220      	movs	r2, #32
 8006a58:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	2220      	movs	r2, #32
 8006a60:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	2200      	movs	r2, #0
 8006a68:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8006a6c:	2303      	movs	r3, #3
 8006a6e:	e010      	b.n	8006a92 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	69da      	ldr	r2, [r3, #28]
 8006a76:	68bb      	ldr	r3, [r7, #8]
 8006a78:	4013      	ands	r3, r2
 8006a7a:	68ba      	ldr	r2, [r7, #8]
 8006a7c:	429a      	cmp	r2, r3
 8006a7e:	bf0c      	ite	eq
 8006a80:	2301      	moveq	r3, #1
 8006a82:	2300      	movne	r3, #0
 8006a84:	b2db      	uxtb	r3, r3
 8006a86:	461a      	mov	r2, r3
 8006a88:	79fb      	ldrb	r3, [r7, #7]
 8006a8a:	429a      	cmp	r2, r3
 8006a8c:	f43f af48 	beq.w	8006920 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006a90:	2300      	movs	r3, #0
}
 8006a92:	4618      	mov	r0, r3
 8006a94:	3770      	adds	r7, #112	; 0x70
 8006a96:	46bd      	mov	sp, r7
 8006a98:	bd80      	pop	{r7, pc}

08006a9a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006a9a:	b480      	push	{r7}
 8006a9c:	b095      	sub	sp, #84	; 0x54
 8006a9e:	af00      	add	r7, sp, #0
 8006aa0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006aa8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006aaa:	e853 3f00 	ldrex	r3, [r3]
 8006aae:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006ab0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ab2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006ab6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	461a      	mov	r2, r3
 8006abe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006ac0:	643b      	str	r3, [r7, #64]	; 0x40
 8006ac2:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ac4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006ac6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006ac8:	e841 2300 	strex	r3, r2, [r1]
 8006acc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006ace:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d1e6      	bne.n	8006aa2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	3308      	adds	r3, #8
 8006ada:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006adc:	6a3b      	ldr	r3, [r7, #32]
 8006ade:	e853 3f00 	ldrex	r3, [r3]
 8006ae2:	61fb      	str	r3, [r7, #28]
   return(result);
 8006ae4:	69fb      	ldr	r3, [r7, #28]
 8006ae6:	f023 0301 	bic.w	r3, r3, #1
 8006aea:	64bb      	str	r3, [r7, #72]	; 0x48
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	3308      	adds	r3, #8
 8006af2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006af4:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006af6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006af8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006afa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006afc:	e841 2300 	strex	r3, r2, [r1]
 8006b00:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006b02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d1e5      	bne.n	8006ad4 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006b0c:	2b01      	cmp	r3, #1
 8006b0e:	d118      	bne.n	8006b42 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	e853 3f00 	ldrex	r3, [r3]
 8006b1c:	60bb      	str	r3, [r7, #8]
   return(result);
 8006b1e:	68bb      	ldr	r3, [r7, #8]
 8006b20:	f023 0310 	bic.w	r3, r3, #16
 8006b24:	647b      	str	r3, [r7, #68]	; 0x44
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	461a      	mov	r2, r3
 8006b2c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006b2e:	61bb      	str	r3, [r7, #24]
 8006b30:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b32:	6979      	ldr	r1, [r7, #20]
 8006b34:	69ba      	ldr	r2, [r7, #24]
 8006b36:	e841 2300 	strex	r3, r2, [r1]
 8006b3a:	613b      	str	r3, [r7, #16]
   return(result);
 8006b3c:	693b      	ldr	r3, [r7, #16]
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d1e6      	bne.n	8006b10 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	2220      	movs	r2, #32
 8006b46:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	2200      	movs	r2, #0
 8006b4e:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	2200      	movs	r2, #0
 8006b54:	669a      	str	r2, [r3, #104]	; 0x68
}
 8006b56:	bf00      	nop
 8006b58:	3754      	adds	r7, #84	; 0x54
 8006b5a:	46bd      	mov	sp, r7
 8006b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b60:	4770      	bx	lr

08006b62 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006b62:	b580      	push	{r7, lr}
 8006b64:	b084      	sub	sp, #16
 8006b66:	af00      	add	r7, sp, #0
 8006b68:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b6e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	2200      	movs	r2, #0
 8006b74:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	2200      	movs	r2, #0
 8006b7c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006b80:	68f8      	ldr	r0, [r7, #12]
 8006b82:	f7ff fa29 	bl	8005fd8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006b86:	bf00      	nop
 8006b88:	3710      	adds	r7, #16
 8006b8a:	46bd      	mov	sp, r7
 8006b8c:	bd80      	pop	{r7, pc}

08006b8e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006b8e:	b580      	push	{r7, lr}
 8006b90:	b088      	sub	sp, #32
 8006b92:	af00      	add	r7, sp, #0
 8006b94:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	e853 3f00 	ldrex	r3, [r3]
 8006ba2:	60bb      	str	r3, [r7, #8]
   return(result);
 8006ba4:	68bb      	ldr	r3, [r7, #8]
 8006ba6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006baa:	61fb      	str	r3, [r7, #28]
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	461a      	mov	r2, r3
 8006bb2:	69fb      	ldr	r3, [r7, #28]
 8006bb4:	61bb      	str	r3, [r7, #24]
 8006bb6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bb8:	6979      	ldr	r1, [r7, #20]
 8006bba:	69ba      	ldr	r2, [r7, #24]
 8006bbc:	e841 2300 	strex	r3, r2, [r1]
 8006bc0:	613b      	str	r3, [r7, #16]
   return(result);
 8006bc2:	693b      	ldr	r3, [r7, #16]
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d1e6      	bne.n	8006b96 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	2220      	movs	r2, #32
 8006bcc:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	2200      	movs	r2, #0
 8006bd2:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006bd4:	6878      	ldr	r0, [r7, #4]
 8006bd6:	f7ff f9f5 	bl	8005fc4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006bda:	bf00      	nop
 8006bdc:	3720      	adds	r7, #32
 8006bde:	46bd      	mov	sp, r7
 8006be0:	bd80      	pop	{r7, pc}

08006be2 <VL53L0X_GetOffsetCalibrationDataMicroMeter>:
	return Status;
}

VL53L0X_Error VL53L0X_GetOffsetCalibrationDataMicroMeter(VL53L0X_DEV Dev,
	int32_t *pOffsetCalibrationDataMicroMeter)
{
 8006be2:	b580      	push	{r7, lr}
 8006be4:	b084      	sub	sp, #16
 8006be6:	af00      	add	r7, sp, #0
 8006be8:	6078      	str	r0, [r7, #4]
 8006bea:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006bec:	2300      	movs	r3, #0
 8006bee:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_offset_calibration_data_micro_meter(Dev,
 8006bf0:	6839      	ldr	r1, [r7, #0]
 8006bf2:	6878      	ldr	r0, [r7, #4]
 8006bf4:	f001 fce1 	bl	80085ba <VL53L0X_get_offset_calibration_data_micro_meter>
 8006bf8:	4603      	mov	r3, r0
 8006bfa:	73fb      	strb	r3, [r7, #15]
		pOffsetCalibrationDataMicroMeter);

	LOG_FUNCTION_END(Status);
	return Status;
 8006bfc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006c00:	4618      	mov	r0, r3
 8006c02:	3710      	adds	r7, #16
 8006c04:	46bd      	mov	sp, r7
 8006c06:	bd80      	pop	{r7, pc}

08006c08 <VL53L0X_DataInit>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_DataInit(VL53L0X_DEV Dev)
{
 8006c08:	b5b0      	push	{r4, r5, r7, lr}
 8006c0a:	b096      	sub	sp, #88	; 0x58
 8006c0c:	af00      	add	r7, sp, #0
 8006c0e:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006c10:	2300      	movs	r3, #0
 8006c12:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		0xFE,
		0x01);
#endif

	/* Set I2C standard mode */
	if (Status == VL53L0X_ERROR_NONE)
 8006c16:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d107      	bne.n	8006c2e <VL53L0X_DataInit+0x26>
		Status = VL53L0X_WrByte(Dev, 0x88, 0x00);
 8006c1e:	2200      	movs	r2, #0
 8006c20:	2188      	movs	r1, #136	; 0x88
 8006c22:	6878      	ldr	r0, [r7, #4]
 8006c24:	f004 feda 	bl	800b9dc <VL53L0X_WrByte>
 8006c28:	4603      	mov	r3, r0
 8006c2a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, ReadDataFromDeviceDone, 0);
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	2200      	movs	r2, #0
 8006c32:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
	if (Status == VL53L0X_ERROR_NONE)
		Status = VL53L0X_apply_offset_adjustment(Dev);
#endif

	/* Default value is 1000 for Linearity Corrective Gain */
	PALDevDataSet(Dev, LinearityCorrectiveGain, 1000);
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006c3c:	f8a3 2152 	strh.w	r2, [r3, #338]	; 0x152

	/* Dmax default Parameter */
	PALDevDataSet(Dev, DmaxCalRangeMilliMeter, 400);
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8006c46:	f8a3 2154 	strh.w	r2, [r3, #340]	; 0x154
	PALDevDataSet(Dev, DmaxCalSignalRateRtnMegaCps,
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	4a9e      	ldr	r2, [pc, #632]	; (8006ec8 <VL53L0X_DataInit+0x2c0>)
 8006c4e:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
		(FixPoint1616_t)((0x00016B85))); /* 1.42 No Cover Glass*/

	/* Set Default static parameters
	 *set first temporary values 9.44MHz * 65536 = 618660 */
	VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, OscFrequencyMHz, 618660);
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	4a9d      	ldr	r2, [pc, #628]	; (8006ecc <VL53L0X_DataInit+0x2c4>)
 8006c56:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4

	/* Set Default XTalkCompensationRateMegaCps to 0  */
	VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationRateMegaCps, 0);
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	2200      	movs	r2, #0
 8006c5e:	621a      	str	r2, [r3, #32]

	/* Get default parameters */
	Status = VL53L0X_GetDeviceParameters(Dev, &CurrentParameters);
 8006c60:	f107 0310 	add.w	r3, r7, #16
 8006c64:	4619      	mov	r1, r3
 8006c66:	6878      	ldr	r0, [r7, #4]
 8006c68:	f000 fac2 	bl	80071f0 <VL53L0X_GetDeviceParameters>
 8006c6c:	4603      	mov	r3, r0
 8006c6e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (Status == VL53L0X_ERROR_NONE) {
 8006c72:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d112      	bne.n	8006ca0 <VL53L0X_DataInit+0x98>
		/* initialize PAL values */
		CurrentParameters.DeviceMode = VL53L0X_DEVICEMODE_SINGLE_RANGING;
 8006c7a:	2300      	movs	r3, #0
 8006c7c:	743b      	strb	r3, [r7, #16]
		CurrentParameters.HistogramMode = VL53L0X_HISTOGRAMMODE_DISABLED;
 8006c7e:	2300      	movs	r3, #0
 8006c80:	747b      	strb	r3, [r7, #17]
		PALDevDataSet(Dev, CurrentParameters, CurrentParameters);
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	f103 0410 	add.w	r4, r3, #16
 8006c88:	f107 0510 	add.w	r5, r7, #16
 8006c8c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006c8e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006c90:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006c92:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006c94:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006c96:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006c98:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8006c9c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	}

	/* Sigma estimator variable */
	PALDevDataSet(Dev, SigmaEstRefArray, 100);
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	2264      	movs	r2, #100	; 0x64
 8006ca4:	f8a3 2134 	strh.w	r2, [r3, #308]	; 0x134
	PALDevDataSet(Dev, SigmaEstEffPulseWidth, 900);
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	f44f 7261 	mov.w	r2, #900	; 0x384
 8006cae:	f8a3 2136 	strh.w	r2, [r3, #310]	; 0x136
	PALDevDataSet(Dev, SigmaEstEffAmbWidth, 500);
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8006cb8:	f8a3 2138 	strh.w	r2, [r3, #312]	; 0x138
	PALDevDataSet(Dev, targetRefRate, 0x0A00); /* 20 MCPS in 9:7 format */
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 8006cc2:	f8a3 213c 	strh.w	r2, [r3, #316]	; 0x13c

	/* Use internal default settings */
	PALDevDataSet(Dev, UseInternalTuningSettings, 1);
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	2201      	movs	r2, #1
 8006cca:	f883 2150 	strb.w	r2, [r3, #336]	; 0x150

	Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 8006cce:	2201      	movs	r2, #1
 8006cd0:	2180      	movs	r1, #128	; 0x80
 8006cd2:	6878      	ldr	r0, [r7, #4]
 8006cd4:	f004 fe82 	bl	800b9dc <VL53L0X_WrByte>
 8006cd8:	4603      	mov	r3, r0
 8006cda:	461a      	mov	r2, r3
 8006cdc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006ce0:	4313      	orrs	r3, r2
 8006ce2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8006ce6:	2201      	movs	r2, #1
 8006ce8:	21ff      	movs	r1, #255	; 0xff
 8006cea:	6878      	ldr	r0, [r7, #4]
 8006cec:	f004 fe76 	bl	800b9dc <VL53L0X_WrByte>
 8006cf0:	4603      	mov	r3, r0
 8006cf2:	461a      	mov	r2, r3
 8006cf4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006cf8:	4313      	orrs	r3, r2
 8006cfa:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 8006cfe:	2200      	movs	r2, #0
 8006d00:	2100      	movs	r1, #0
 8006d02:	6878      	ldr	r0, [r7, #4]
 8006d04:	f004 fe6a 	bl	800b9dc <VL53L0X_WrByte>
 8006d08:	4603      	mov	r3, r0
 8006d0a:	461a      	mov	r2, r3
 8006d0c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006d10:	4313      	orrs	r3, r2
 8006d12:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_RdByte(Dev, 0x91, &StopVariable);
 8006d16:	f107 030f 	add.w	r3, r7, #15
 8006d1a:	461a      	mov	r2, r3
 8006d1c:	2191      	movs	r1, #145	; 0x91
 8006d1e:	6878      	ldr	r0, [r7, #4]
 8006d20:	f004 fede 	bl	800bae0 <VL53L0X_RdByte>
 8006d24:	4603      	mov	r3, r0
 8006d26:	461a      	mov	r2, r3
 8006d28:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006d2c:	4313      	orrs	r3, r2
 8006d2e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	PALDevDataSet(Dev, StopVariable, StopVariable);
 8006d32:	7bfa      	ldrb	r2, [r7, #15]
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	f883 213a 	strb.w	r2, [r3, #314]	; 0x13a
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 8006d3a:	2201      	movs	r2, #1
 8006d3c:	2100      	movs	r1, #0
 8006d3e:	6878      	ldr	r0, [r7, #4]
 8006d40:	f004 fe4c 	bl	800b9dc <VL53L0X_WrByte>
 8006d44:	4603      	mov	r3, r0
 8006d46:	461a      	mov	r2, r3
 8006d48:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006d4c:	4313      	orrs	r3, r2
 8006d4e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8006d52:	2200      	movs	r2, #0
 8006d54:	21ff      	movs	r1, #255	; 0xff
 8006d56:	6878      	ldr	r0, [r7, #4]
 8006d58:	f004 fe40 	bl	800b9dc <VL53L0X_WrByte>
 8006d5c:	4603      	mov	r3, r0
 8006d5e:	461a      	mov	r2, r3
 8006d60:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006d64:	4313      	orrs	r3, r2
 8006d66:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 8006d6a:	2200      	movs	r2, #0
 8006d6c:	2180      	movs	r1, #128	; 0x80
 8006d6e:	6878      	ldr	r0, [r7, #4]
 8006d70:	f004 fe34 	bl	800b9dc <VL53L0X_WrByte>
 8006d74:	4603      	mov	r3, r0
 8006d76:	461a      	mov	r2, r3
 8006d78:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006d7c:	4313      	orrs	r3, r2
 8006d7e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	/* Enable all check */
	for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8006d82:	2300      	movs	r3, #0
 8006d84:	653b      	str	r3, [r7, #80]	; 0x50
 8006d86:	e014      	b.n	8006db2 <VL53L0X_DataInit+0x1aa>
		if (Status == VL53L0X_ERROR_NONE)
 8006d88:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	d114      	bne.n	8006dba <VL53L0X_DataInit+0x1b2>
			Status |= VL53L0X_SetLimitCheckEnable(Dev, i, 1);
 8006d90:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006d92:	b29b      	uxth	r3, r3
 8006d94:	2201      	movs	r2, #1
 8006d96:	4619      	mov	r1, r3
 8006d98:	6878      	ldr	r0, [r7, #4]
 8006d9a:	f000 fd35 	bl	8007808 <VL53L0X_SetLimitCheckEnable>
 8006d9e:	4603      	mov	r3, r0
 8006da0:	461a      	mov	r2, r3
 8006da2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006da6:	4313      	orrs	r3, r2
 8006da8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8006dac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006dae:	3301      	adds	r3, #1
 8006db0:	653b      	str	r3, [r7, #80]	; 0x50
 8006db2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006db4:	2b05      	cmp	r3, #5
 8006db6:	dde7      	ble.n	8006d88 <VL53L0X_DataInit+0x180>
 8006db8:	e000      	b.n	8006dbc <VL53L0X_DataInit+0x1b4>
		else
			break;
 8006dba:	bf00      	nop

	}

	/* Disable the following checks */
	if (Status == VL53L0X_ERROR_NONE)
 8006dbc:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	d107      	bne.n	8006dd4 <VL53L0X_DataInit+0x1cc>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 8006dc4:	2200      	movs	r2, #0
 8006dc6:	2102      	movs	r1, #2
 8006dc8:	6878      	ldr	r0, [r7, #4]
 8006dca:	f000 fd1d 	bl	8007808 <VL53L0X_SetLimitCheckEnable>
 8006dce:	4603      	mov	r3, r0
 8006dd0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, 0);

	if (Status == VL53L0X_ERROR_NONE)
 8006dd4:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	d107      	bne.n	8006dec <VL53L0X_DataInit+0x1e4>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 8006ddc:	2200      	movs	r2, #0
 8006dde:	2103      	movs	r1, #3
 8006de0:	6878      	ldr	r0, [r7, #4]
 8006de2:	f000 fd11 	bl	8007808 <VL53L0X_SetLimitCheckEnable>
 8006de6:	4603      	mov	r3, r0
 8006de8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD, 0);

	if (Status == VL53L0X_ERROR_NONE)
 8006dec:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	d107      	bne.n	8006e04 <VL53L0X_DataInit+0x1fc>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 8006df4:	2200      	movs	r2, #0
 8006df6:	2104      	movs	r1, #4
 8006df8:	6878      	ldr	r0, [r7, #4]
 8006dfa:	f000 fd05 	bl	8007808 <VL53L0X_SetLimitCheckEnable>
 8006dfe:	4603      	mov	r3, r0
 8006e00:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC, 0);

	if (Status == VL53L0X_ERROR_NONE)
 8006e04:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	d107      	bne.n	8006e1c <VL53L0X_DataInit+0x214>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 8006e0c:	2200      	movs	r2, #0
 8006e0e:	2105      	movs	r1, #5
 8006e10:	6878      	ldr	r0, [r7, #4]
 8006e12:	f000 fcf9 	bl	8007808 <VL53L0X_SetLimitCheckEnable>
 8006e16:	4603      	mov	r3, r0
 8006e18:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE, 0);

	/* Limit default values */
	if (Status == VL53L0X_ERROR_NONE) {
 8006e1c:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	d108      	bne.n	8006e36 <VL53L0X_DataInit+0x22e>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 8006e24:	f44f 1290 	mov.w	r2, #1179648	; 0x120000
 8006e28:	2100      	movs	r1, #0
 8006e2a:	6878      	ldr	r0, [r7, #4]
 8006e2c:	f000 fd9c 	bl	8007968 <VL53L0X_SetLimitCheckValue>
 8006e30:	4603      	mov	r3, r0
 8006e32:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				(FixPoint1616_t)(18 * 65536));
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8006e36:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d108      	bne.n	8006e50 <VL53L0X_DataInit+0x248>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 8006e3e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8006e42:	2101      	movs	r1, #1
 8006e44:	6878      	ldr	r0, [r7, #4]
 8006e46:	f000 fd8f 	bl	8007968 <VL53L0X_SetLimitCheckValue>
 8006e4a:	4603      	mov	r3, r0
 8006e4c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
				(FixPoint1616_t)(25 * 65536 / 100));
				/* 0.25 * 65536 */
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8006e50:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	d108      	bne.n	8006e6a <VL53L0X_DataInit+0x262>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 8006e58:	f44f 120c 	mov.w	r2, #2293760	; 0x230000
 8006e5c:	2102      	movs	r1, #2
 8006e5e:	6878      	ldr	r0, [r7, #4]
 8006e60:	f000 fd82 	bl	8007968 <VL53L0X_SetLimitCheckValue>
 8006e64:	4603      	mov	r3, r0
 8006e66:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				(FixPoint1616_t)(35 * 65536));
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8006e6a:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d107      	bne.n	8006e82 <VL53L0X_DataInit+0x27a>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 8006e72:	2200      	movs	r2, #0
 8006e74:	2103      	movs	r1, #3
 8006e76:	6878      	ldr	r0, [r7, #4]
 8006e78:	f000 fd76 	bl	8007968 <VL53L0X_SetLimitCheckValue>
 8006e7c:	4603      	mov	r3, r0
 8006e7e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				(FixPoint1616_t)(0 * 65536));
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8006e82:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d10f      	bne.n	8006eaa <VL53L0X_DataInit+0x2a2>

		PALDevDataSet(Dev, SequenceConfig, 0xFF);
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	22ff      	movs	r2, #255	; 0xff
 8006e8e:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8006e92:	22ff      	movs	r2, #255	; 0xff
 8006e94:	2101      	movs	r1, #1
 8006e96:	6878      	ldr	r0, [r7, #4]
 8006e98:	f004 fda0 	bl	800b9dc <VL53L0X_WrByte>
 8006e9c:	4603      	mov	r3, r0
 8006e9e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			0xFF);

		/* Set PAL state to tell that we are waiting for call to
		 * VL53L0X_StaticInit */
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_WAIT_STATICINIT);
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	2201      	movs	r2, #1
 8006ea6:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
	}

	if (Status == VL53L0X_ERROR_NONE)
 8006eaa:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d103      	bne.n	8006eba <VL53L0X_DataInit+0x2b2>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 0);
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	2200      	movs	r2, #0
 8006eb6:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115


	LOG_FUNCTION_END(Status);
	return Status;
 8006eba:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
}
 8006ebe:	4618      	mov	r0, r3
 8006ec0:	3758      	adds	r7, #88	; 0x58
 8006ec2:	46bd      	mov	sp, r7
 8006ec4:	bdb0      	pop	{r4, r5, r7, pc}
 8006ec6:	bf00      	nop
 8006ec8:	00016b85 	.word	0x00016b85
 8006ecc:	000970a4 	.word	0x000970a4

08006ed0 <VL53L0X_StaticInit>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_StaticInit(VL53L0X_DEV Dev)
{
 8006ed0:	b5b0      	push	{r4, r5, r7, lr}
 8006ed2:	b09e      	sub	sp, #120	; 0x78
 8006ed4:	af02      	add	r7, sp, #8
 8006ed6:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006ed8:	2300      	movs	r3, #0
 8006eda:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	VL53L0X_DeviceParameters_t CurrentParameters = {0};
 8006ede:	f107 031c 	add.w	r3, r7, #28
 8006ee2:	2240      	movs	r2, #64	; 0x40
 8006ee4:	2100      	movs	r1, #0
 8006ee6:	4618      	mov	r0, r3
 8006ee8:	f004 fee0 	bl	800bcac <memset>
	uint8_t *pTuningSettingBuffer;
	uint16_t tempword = 0;
 8006eec:	2300      	movs	r3, #0
 8006eee:	837b      	strh	r3, [r7, #26]
	uint8_t tempbyte = 0;
 8006ef0:	2300      	movs	r3, #0
 8006ef2:	767b      	strb	r3, [r7, #25]
	uint8_t UseInternalTuningSettings = 0;
 8006ef4:	2300      	movs	r3, #0
 8006ef6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	uint32_t count = 0;
 8006efa:	2300      	movs	r3, #0
 8006efc:	663b      	str	r3, [r7, #96]	; 0x60
	uint8_t isApertureSpads = 0;
 8006efe:	2300      	movs	r3, #0
 8006f00:	763b      	strb	r3, [r7, #24]
	uint32_t refSpadCount = 0;
 8006f02:	2300      	movs	r3, #0
 8006f04:	617b      	str	r3, [r7, #20]
	uint8_t ApertureSpads = 0;
 8006f06:	2300      	movs	r3, #0
 8006f08:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	uint8_t vcselPulsePeriodPCLK;
	uint32_t seqTimeoutMicroSecs;

	LOG_FUNCTION_START("");

	Status = VL53L0X_get_info_from_device(Dev, 1);
 8006f0c:	2101      	movs	r1, #1
 8006f0e:	6878      	ldr	r0, [r7, #4]
 8006f10:	f002 faa9 	bl	8009466 <VL53L0X_get_info_from_device>
 8006f14:	4603      	mov	r3, r0
 8006f16:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f

	/* set the ref spad from NVM */
	count	= (uint32_t)VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	f893 3113 	ldrb.w	r3, [r3, #275]	; 0x113
 8006f20:	663b      	str	r3, [r7, #96]	; 0x60
		ReferenceSpadCount);
	ApertureSpads = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	f893 3114 	ldrb.w	r3, [r3, #276]	; 0x114
 8006f28:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		ReferenceSpadType);

	/* NVM value invalid */
	if ((ApertureSpads > 1) ||
 8006f2c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006f30:	2b01      	cmp	r3, #1
 8006f32:	d80d      	bhi.n	8006f50 <VL53L0X_StaticInit+0x80>
 8006f34:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006f38:	2b01      	cmp	r3, #1
 8006f3a:	d102      	bne.n	8006f42 <VL53L0X_StaticInit+0x72>
		((ApertureSpads == 1) && (count > 32)) ||
 8006f3c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006f3e:	2b20      	cmp	r3, #32
 8006f40:	d806      	bhi.n	8006f50 <VL53L0X_StaticInit+0x80>
 8006f42:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	d10e      	bne.n	8006f68 <VL53L0X_StaticInit+0x98>
		((ApertureSpads == 0) && (count > 12)))
 8006f4a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006f4c:	2b0c      	cmp	r3, #12
 8006f4e:	d90b      	bls.n	8006f68 <VL53L0X_StaticInit+0x98>
		Status = VL53L0X_perform_ref_spad_management(Dev, &refSpadCount,
 8006f50:	f107 0218 	add.w	r2, r7, #24
 8006f54:	f107 0314 	add.w	r3, r7, #20
 8006f58:	4619      	mov	r1, r3
 8006f5a:	6878      	ldr	r0, [r7, #4]
 8006f5c:	f001 fd28 	bl	80089b0 <VL53L0X_perform_ref_spad_management>
 8006f60:	4603      	mov	r3, r0
 8006f62:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 8006f66:	e009      	b.n	8006f7c <VL53L0X_StaticInit+0xac>
			&isApertureSpads);
	else
		Status = VL53L0X_set_reference_spads(Dev, count, ApertureSpads);
 8006f68:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006f6c:	461a      	mov	r2, r3
 8006f6e:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8006f70:	6878      	ldr	r0, [r7, #4]
 8006f72:	f001 ff29 	bl	8008dc8 <VL53L0X_set_reference_spads>
 8006f76:	4603      	mov	r3, r0
 8006f78:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f


	/* Initialize tuning settings buffer to prevent compiler warning. */
	pTuningSettingBuffer = DefaultTuningSettings;
 8006f7c:	4b94      	ldr	r3, [pc, #592]	; (80071d0 <VL53L0X_StaticInit+0x300>)
 8006f7e:	66bb      	str	r3, [r7, #104]	; 0x68

	if (Status == VL53L0X_ERROR_NONE) {
 8006f80:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d10f      	bne.n	8006fa8 <VL53L0X_StaticInit+0xd8>
		UseInternalTuningSettings = PALDevDataGet(Dev,
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	f893 3150 	ldrb.w	r3, [r3, #336]	; 0x150
 8006f8e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			UseInternalTuningSettings);

		if (UseInternalTuningSettings == 0)
 8006f92:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d104      	bne.n	8006fa4 <VL53L0X_StaticInit+0xd4>
			pTuningSettingBuffer = PALDevDataGet(Dev,
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 8006fa0:	66bb      	str	r3, [r7, #104]	; 0x68
 8006fa2:	e001      	b.n	8006fa8 <VL53L0X_StaticInit+0xd8>
				pTuningSettingsPointer);
		else
			pTuningSettingBuffer = DefaultTuningSettings;
 8006fa4:	4b8a      	ldr	r3, [pc, #552]	; (80071d0 <VL53L0X_StaticInit+0x300>)
 8006fa6:	66bb      	str	r3, [r7, #104]	; 0x68

	}

	if (Status == VL53L0X_ERROR_NONE)
 8006fa8:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d106      	bne.n	8006fbe <VL53L0X_StaticInit+0xee>
		Status = VL53L0X_load_tuning_settings(Dev, pTuningSettingBuffer);
 8006fb0:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006fb2:	6878      	ldr	r0, [r7, #4]
 8006fb4:	f003 fdfc 	bl	800abb0 <VL53L0X_load_tuning_settings>
 8006fb8:	4603      	mov	r3, r0
 8006fba:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f


	/* Set interrupt config to new sample ready */
	if (Status == VL53L0X_ERROR_NONE) {
 8006fbe:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d10a      	bne.n	8006fdc <VL53L0X_StaticInit+0x10c>
		Status = VL53L0X_SetGpioConfig(Dev, 0, 0,
 8006fc6:	2300      	movs	r3, #0
 8006fc8:	9300      	str	r3, [sp, #0]
 8006fca:	2304      	movs	r3, #4
 8006fcc:	2200      	movs	r2, #0
 8006fce:	2100      	movs	r1, #0
 8006fd0:	6878      	ldr	r0, [r7, #4]
 8006fd2:	f001 f8f1 	bl	80081b8 <VL53L0X_SetGpioConfig>
 8006fd6:	4603      	mov	r3, r0
 8006fd8:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY,
		VL53L0X_INTERRUPTPOLARITY_LOW);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8006fdc:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	d121      	bne.n	8007028 <VL53L0X_StaticInit+0x158>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8006fe4:	2201      	movs	r2, #1
 8006fe6:	21ff      	movs	r1, #255	; 0xff
 8006fe8:	6878      	ldr	r0, [r7, #4]
 8006fea:	f004 fcf7 	bl	800b9dc <VL53L0X_WrByte>
 8006fee:	4603      	mov	r3, r0
 8006ff0:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		Status |= VL53L0X_RdWord(Dev, 0x84, &tempword);
 8006ff4:	f107 031a 	add.w	r3, r7, #26
 8006ff8:	461a      	mov	r2, r3
 8006ffa:	2184      	movs	r1, #132	; 0x84
 8006ffc:	6878      	ldr	r0, [r7, #4]
 8006ffe:	f004 fd99 	bl	800bb34 <VL53L0X_RdWord>
 8007002:	4603      	mov	r3, r0
 8007004:	461a      	mov	r2, r3
 8007006:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800700a:	4313      	orrs	r3, r2
 800700c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8007010:	2200      	movs	r2, #0
 8007012:	21ff      	movs	r1, #255	; 0xff
 8007014:	6878      	ldr	r0, [r7, #4]
 8007016:	f004 fce1 	bl	800b9dc <VL53L0X_WrByte>
 800701a:	4603      	mov	r3, r0
 800701c:	461a      	mov	r2, r3
 800701e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8007022:	4313      	orrs	r3, r2
 8007024:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8007028:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800702c:	2b00      	cmp	r3, #0
 800702e:	d105      	bne.n	800703c <VL53L0X_StaticInit+0x16c>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, OscFrequencyMHz,
 8007030:	8b7b      	ldrh	r3, [r7, #26]
 8007032:	011b      	lsls	r3, r3, #4
 8007034:	461a      	mov	r2, r3
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
			VL53L0X_FIXPOINT412TOFIXPOINT1616(tempword));
	}

	/* After static init, some device parameters may be changed,
	 * so update them */
	if (Status == VL53L0X_ERROR_NONE)
 800703c:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8007040:	2b00      	cmp	r3, #0
 8007042:	d108      	bne.n	8007056 <VL53L0X_StaticInit+0x186>
		Status = VL53L0X_GetDeviceParameters(Dev, &CurrentParameters);
 8007044:	f107 031c 	add.w	r3, r7, #28
 8007048:	4619      	mov	r1, r3
 800704a:	6878      	ldr	r0, [r7, #4]
 800704c:	f000 f8d0 	bl	80071f0 <VL53L0X_GetDeviceParameters>
 8007050:	4603      	mov	r3, r0
 8007052:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f


	if (Status == VL53L0X_ERROR_NONE) {
 8007056:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800705a:	2b00      	cmp	r3, #0
 800705c:	d110      	bne.n	8007080 <VL53L0X_StaticInit+0x1b0>
		Status = VL53L0X_GetFractionEnable(Dev, &tempbyte);
 800705e:	f107 0319 	add.w	r3, r7, #25
 8007062:	4619      	mov	r1, r3
 8007064:	6878      	ldr	r0, [r7, #4]
 8007066:	f000 f992 	bl	800738e <VL53L0X_GetFractionEnable>
 800706a:	4603      	mov	r3, r0
 800706c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		if (Status == VL53L0X_ERROR_NONE)
 8007070:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8007074:	2b00      	cmp	r3, #0
 8007076:	d103      	bne.n	8007080 <VL53L0X_StaticInit+0x1b0>
			PALDevDataSet(Dev, RangeFractionalEnable, tempbyte);
 8007078:	7e7a      	ldrb	r2, [r7, #25]
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	f883 2131 	strb.w	r2, [r3, #305]	; 0x131

	}

	if (Status == VL53L0X_ERROR_NONE)
 8007080:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8007084:	2b00      	cmp	r3, #0
 8007086:	d10e      	bne.n	80070a6 <VL53L0X_StaticInit+0x1d6>
		PALDevDataSet(Dev, CurrentParameters, CurrentParameters);
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	f103 0410 	add.w	r4, r3, #16
 800708e:	f107 051c 	add.w	r5, r7, #28
 8007092:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007094:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007096:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007098:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800709a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800709c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800709e:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80070a2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}


	/* read the sequence config and save it */
	if (Status == VL53L0X_ERROR_NONE) {
 80070a6:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d111      	bne.n	80070d2 <VL53L0X_StaticInit+0x202>
		Status = VL53L0X_RdByte(Dev,
 80070ae:	f107 0319 	add.w	r3, r7, #25
 80070b2:	461a      	mov	r2, r3
 80070b4:	2101      	movs	r1, #1
 80070b6:	6878      	ldr	r0, [r7, #4]
 80070b8:	f004 fd12 	bl	800bae0 <VL53L0X_RdByte>
 80070bc:	4603      	mov	r3, r0
 80070be:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, &tempbyte);
		if (Status == VL53L0X_ERROR_NONE)
 80070c2:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d103      	bne.n	80070d2 <VL53L0X_StaticInit+0x202>
			PALDevDataSet(Dev, SequenceConfig, tempbyte);
 80070ca:	7e7a      	ldrb	r2, [r7, #25]
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	/* Disable MSRC and TCC by default */
	if (Status == VL53L0X_ERROR_NONE)
 80070d2:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d107      	bne.n	80070ea <VL53L0X_StaticInit+0x21a>
		Status = VL53L0X_SetSequenceStepEnable(Dev,
 80070da:	2200      	movs	r2, #0
 80070dc:	2100      	movs	r1, #0
 80070de:	6878      	ldr	r0, [r7, #4]
 80070e0:	f000 f9ca 	bl	8007478 <VL53L0X_SetSequenceStepEnable>
 80070e4:	4603      	mov	r3, r0
 80070e6:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
					VL53L0X_SEQUENCESTEP_TCC, 0);


	if (Status == VL53L0X_ERROR_NONE)
 80070ea:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	d107      	bne.n	8007102 <VL53L0X_StaticInit+0x232>
		Status = VL53L0X_SetSequenceStepEnable(Dev,
 80070f2:	2200      	movs	r2, #0
 80070f4:	2102      	movs	r1, #2
 80070f6:	6878      	ldr	r0, [r7, #4]
 80070f8:	f000 f9be 	bl	8007478 <VL53L0X_SetSequenceStepEnable>
 80070fc:	4603      	mov	r3, r0
 80070fe:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		VL53L0X_SEQUENCESTEP_MSRC, 0);


	/* Set PAL State to standby */
	if (Status == VL53L0X_ERROR_NONE)
 8007102:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8007106:	2b00      	cmp	r3, #0
 8007108:	d103      	bne.n	8007112 <VL53L0X_StaticInit+0x242>
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_IDLE);
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	2203      	movs	r2, #3
 800710e:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132



	/* Store pre-range vcsel period */
	if (Status == VL53L0X_ERROR_NONE) {
 8007112:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8007116:	2b00      	cmp	r3, #0
 8007118:	d109      	bne.n	800712e <VL53L0X_StaticInit+0x25e>
		Status = VL53L0X_GetVcselPulsePeriod(
 800711a:	f107 0313 	add.w	r3, r7, #19
 800711e:	461a      	mov	r2, r3
 8007120:	2100      	movs	r1, #0
 8007122:	6878      	ldr	r0, [r7, #4]
 8007124:	f000 f990 	bl	8007448 <VL53L0X_GetVcselPulsePeriod>
 8007128:	4603      	mov	r3, r0
 800712a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_VCSEL_PERIOD_PRE_RANGE,
			&vcselPulsePeriodPCLK);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800712e:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8007132:	2b00      	cmp	r3, #0
 8007134:	d103      	bne.n	800713e <VL53L0X_StaticInit+0x26e>
			VL53L0X_SETDEVICESPECIFICPARAMETER(
 8007136:	7cfa      	ldrb	r2, [r7, #19]
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	f883 20e8 	strb.w	r2, [r3, #232]	; 0xe8
				PreRangeVcselPulsePeriod,
				vcselPulsePeriodPCLK);
	}

	/* Store final-range vcsel period */
	if (Status == VL53L0X_ERROR_NONE) {
 800713e:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8007142:	2b00      	cmp	r3, #0
 8007144:	d109      	bne.n	800715a <VL53L0X_StaticInit+0x28a>
		Status = VL53L0X_GetVcselPulsePeriod(
 8007146:	f107 0313 	add.w	r3, r7, #19
 800714a:	461a      	mov	r2, r3
 800714c:	2101      	movs	r1, #1
 800714e:	6878      	ldr	r0, [r7, #4]
 8007150:	f000 f97a 	bl	8007448 <VL53L0X_GetVcselPulsePeriod>
 8007154:	4603      	mov	r3, r0
 8007156:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
			&vcselPulsePeriodPCLK);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800715a:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800715e:	2b00      	cmp	r3, #0
 8007160:	d103      	bne.n	800716a <VL53L0X_StaticInit+0x29a>
			VL53L0X_SETDEVICESPECIFICPARAMETER(
 8007162:	7cfa      	ldrb	r2, [r7, #19]
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
				FinalRangeVcselPulsePeriod,
				vcselPulsePeriodPCLK);
	}

	/* Store pre-range timeout */
	if (Status == VL53L0X_ERROR_NONE) {
 800716a:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800716e:	2b00      	cmp	r3, #0
 8007170:	d109      	bne.n	8007186 <VL53L0X_StaticInit+0x2b6>
		Status = get_sequence_step_timeout(
 8007172:	f107 030c 	add.w	r3, r7, #12
 8007176:	461a      	mov	r2, r3
 8007178:	2103      	movs	r1, #3
 800717a:	6878      	ldr	r0, [r7, #4]
 800717c:	f002 fef4 	bl	8009f68 <get_sequence_step_timeout>
 8007180:	4603      	mov	r3, r0
 8007182:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_SEQUENCESTEP_PRE_RANGE,
			&seqTimeoutMicroSecs);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8007186:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800718a:	2b00      	cmp	r3, #0
 800718c:	d103      	bne.n	8007196 <VL53L0X_StaticInit+0x2c6>
		VL53L0X_SETDEVICESPECIFICPARAMETER(
 800718e:	68fa      	ldr	r2, [r7, #12]
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
			PreRangeTimeoutMicroSecs,
			seqTimeoutMicroSecs);
	}

	/* Store final-range timeout */
	if (Status == VL53L0X_ERROR_NONE) {
 8007196:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800719a:	2b00      	cmp	r3, #0
 800719c:	d109      	bne.n	80071b2 <VL53L0X_StaticInit+0x2e2>
		Status = get_sequence_step_timeout(
 800719e:	f107 030c 	add.w	r3, r7, #12
 80071a2:	461a      	mov	r2, r3
 80071a4:	2104      	movs	r1, #4
 80071a6:	6878      	ldr	r0, [r7, #4]
 80071a8:	f002 fede 	bl	8009f68 <get_sequence_step_timeout>
 80071ac:	4603      	mov	r3, r0
 80071ae:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_SEQUENCESTEP_FINAL_RANGE,
			&seqTimeoutMicroSecs);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 80071b2:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d103      	bne.n	80071c2 <VL53L0X_StaticInit+0x2f2>
		VL53L0X_SETDEVICESPECIFICPARAMETER(
 80071ba:	68fa      	ldr	r2, [r7, #12]
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
			FinalRangeTimeoutMicroSecs,
			seqTimeoutMicroSecs);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80071c2:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
}
 80071c6:	4618      	mov	r0, r3
 80071c8:	3770      	adds	r7, #112	; 0x70
 80071ca:	46bd      	mov	sp, r7
 80071cc:	bdb0      	pop	{r4, r5, r7, pc}
 80071ce:	bf00      	nop
 80071d0:	20008c98 	.word	0x20008c98

080071d4 <VL53L0X_WaitDeviceBooted>:

VL53L0X_Error VL53L0X_WaitDeviceBooted(VL53L0X_DEV Dev)
{
 80071d4:	b480      	push	{r7}
 80071d6:	b085      	sub	sp, #20
 80071d8:	af00      	add	r7, sp, #0
 80071da:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NOT_IMPLEMENTED;
 80071dc:	239d      	movs	r3, #157	; 0x9d
 80071de:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	/* not implemented on VL53L0X */

	LOG_FUNCTION_END(Status);
	return Status;
 80071e0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80071e4:	4618      	mov	r0, r3
 80071e6:	3714      	adds	r7, #20
 80071e8:	46bd      	mov	sp, r7
 80071ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ee:	4770      	bx	lr

080071f0 <VL53L0X_GetDeviceParameters>:
	return Status;
}

VL53L0X_Error VL53L0X_GetDeviceParameters(VL53L0X_DEV Dev,
	VL53L0X_DeviceParameters_t *pDeviceParameters)
{
 80071f0:	b580      	push	{r7, lr}
 80071f2:	b084      	sub	sp, #16
 80071f4:	af00      	add	r7, sp, #0
 80071f6:	6078      	str	r0, [r7, #4]
 80071f8:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80071fa:	2300      	movs	r3, #0
 80071fc:	73fb      	strb	r3, [r7, #15]
	int i;

	LOG_FUNCTION_START("");

	Status = VL53L0X_GetDeviceMode(Dev, &(pDeviceParameters->DeviceMode));
 80071fe:	683b      	ldr	r3, [r7, #0]
 8007200:	4619      	mov	r1, r3
 8007202:	6878      	ldr	r0, [r7, #4]
 8007204:	f000 f8b0 	bl	8007368 <VL53L0X_GetDeviceMode>
 8007208:	4603      	mov	r3, r0
 800720a:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 800720c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007210:	2b00      	cmp	r3, #0
 8007212:	d107      	bne.n	8007224 <VL53L0X_GetDeviceParameters+0x34>
		Status = VL53L0X_GetInterMeasurementPeriodMilliSeconds(Dev,
 8007214:	683b      	ldr	r3, [r7, #0]
 8007216:	3308      	adds	r3, #8
 8007218:	4619      	mov	r1, r3
 800721a:	6878      	ldr	r0, [r7, #4]
 800721c:	f000 fa78 	bl	8007710 <VL53L0X_GetInterMeasurementPeriodMilliSeconds>
 8007220:	4603      	mov	r3, r0
 8007222:	73fb      	strb	r3, [r7, #15]
		&(pDeviceParameters->InterMeasurementPeriodMilliSeconds));


	if (Status == VL53L0X_ERROR_NONE)
 8007224:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007228:	2b00      	cmp	r3, #0
 800722a:	d102      	bne.n	8007232 <VL53L0X_GetDeviceParameters+0x42>
		pDeviceParameters->XTalkCompensationEnable = 0;
 800722c:	683b      	ldr	r3, [r7, #0]
 800722e:	2200      	movs	r2, #0
 8007230:	731a      	strb	r2, [r3, #12]

	if (Status == VL53L0X_ERROR_NONE)
 8007232:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007236:	2b00      	cmp	r3, #0
 8007238:	d107      	bne.n	800724a <VL53L0X_GetDeviceParameters+0x5a>
		Status = VL53L0X_GetXTalkCompensationRateMegaCps(Dev,
 800723a:	683b      	ldr	r3, [r7, #0]
 800723c:	3310      	adds	r3, #16
 800723e:	4619      	mov	r1, r3
 8007240:	6878      	ldr	r0, [r7, #4]
 8007242:	f000 faae 	bl	80077a2 <VL53L0X_GetXTalkCompensationRateMegaCps>
 8007246:	4603      	mov	r3, r0
 8007248:	73fb      	strb	r3, [r7, #15]
			&(pDeviceParameters->XTalkCompensationRateMegaCps));


	if (Status == VL53L0X_ERROR_NONE)
 800724a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800724e:	2b00      	cmp	r3, #0
 8007250:	d107      	bne.n	8007262 <VL53L0X_GetDeviceParameters+0x72>
		Status = VL53L0X_GetOffsetCalibrationDataMicroMeter(Dev,
 8007252:	683b      	ldr	r3, [r7, #0]
 8007254:	3314      	adds	r3, #20
 8007256:	4619      	mov	r1, r3
 8007258:	6878      	ldr	r0, [r7, #4]
 800725a:	f7ff fcc2 	bl	8006be2 <VL53L0X_GetOffsetCalibrationDataMicroMeter>
 800725e:	4603      	mov	r3, r0
 8007260:	73fb      	strb	r3, [r7, #15]
			&(pDeviceParameters->RangeOffsetMicroMeters));


	if (Status == VL53L0X_ERROR_NONE) {
 8007262:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007266:	2b00      	cmp	r3, #0
 8007268:	d134      	bne.n	80072d4 <VL53L0X_GetDeviceParameters+0xe4>
		for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 800726a:	2300      	movs	r3, #0
 800726c:	60bb      	str	r3, [r7, #8]
 800726e:	e02a      	b.n	80072c6 <VL53L0X_GetDeviceParameters+0xd6>
			/* get first the values, then the enables.
			 * VL53L0X_GetLimitCheckValue will modify the enable
			 * flags
			 */
			if (Status == VL53L0X_ERROR_NONE) {
 8007270:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007274:	2b00      	cmp	r3, #0
 8007276:	d12a      	bne.n	80072ce <VL53L0X_GetDeviceParameters+0xde>
				Status |= VL53L0X_GetLimitCheckValue(Dev, i,
 8007278:	68bb      	ldr	r3, [r7, #8]
 800727a:	b299      	uxth	r1, r3
 800727c:	68bb      	ldr	r3, [r7, #8]
 800727e:	3308      	adds	r3, #8
 8007280:	009b      	lsls	r3, r3, #2
 8007282:	683a      	ldr	r2, [r7, #0]
 8007284:	4413      	add	r3, r2
 8007286:	3304      	adds	r3, #4
 8007288:	461a      	mov	r2, r3
 800728a:	6878      	ldr	r0, [r7, #4]
 800728c:	f000 fbce 	bl	8007a2c <VL53L0X_GetLimitCheckValue>
 8007290:	4603      	mov	r3, r0
 8007292:	461a      	mov	r2, r3
 8007294:	7bfb      	ldrb	r3, [r7, #15]
 8007296:	4313      	orrs	r3, r2
 8007298:	73fb      	strb	r3, [r7, #15]
				&(pDeviceParameters->LimitChecksValue[i]));
			} else {
				break;
			}
			if (Status == VL53L0X_ERROR_NONE) {
 800729a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d117      	bne.n	80072d2 <VL53L0X_GetDeviceParameters+0xe2>
				Status |= VL53L0X_GetLimitCheckEnable(Dev, i,
 80072a2:	68bb      	ldr	r3, [r7, #8]
 80072a4:	b299      	uxth	r1, r3
 80072a6:	68bb      	ldr	r3, [r7, #8]
 80072a8:	3318      	adds	r3, #24
 80072aa:	683a      	ldr	r2, [r7, #0]
 80072ac:	4413      	add	r3, r2
 80072ae:	461a      	mov	r2, r3
 80072b0:	6878      	ldr	r0, [r7, #4]
 80072b2:	f000 fb35 	bl	8007920 <VL53L0X_GetLimitCheckEnable>
 80072b6:	4603      	mov	r3, r0
 80072b8:	461a      	mov	r2, r3
 80072ba:	7bfb      	ldrb	r3, [r7, #15]
 80072bc:	4313      	orrs	r3, r2
 80072be:	73fb      	strb	r3, [r7, #15]
		for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 80072c0:	68bb      	ldr	r3, [r7, #8]
 80072c2:	3301      	adds	r3, #1
 80072c4:	60bb      	str	r3, [r7, #8]
 80072c6:	68bb      	ldr	r3, [r7, #8]
 80072c8:	2b05      	cmp	r3, #5
 80072ca:	ddd1      	ble.n	8007270 <VL53L0X_GetDeviceParameters+0x80>
 80072cc:	e002      	b.n	80072d4 <VL53L0X_GetDeviceParameters+0xe4>
				break;
 80072ce:	bf00      	nop
 80072d0:	e000      	b.n	80072d4 <VL53L0X_GetDeviceParameters+0xe4>
				&(pDeviceParameters->LimitChecksEnable[i]));
			} else {
				break;
 80072d2:	bf00      	nop
			}
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 80072d4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80072d8:	2b00      	cmp	r3, #0
 80072da:	d107      	bne.n	80072ec <VL53L0X_GetDeviceParameters+0xfc>
		Status = VL53L0X_GetWrapAroundCheckEnable(Dev,
 80072dc:	683b      	ldr	r3, [r7, #0]
 80072de:	333c      	adds	r3, #60	; 0x3c
 80072e0:	4619      	mov	r1, r3
 80072e2:	6878      	ldr	r0, [r7, #4]
 80072e4:	f000 fc30 	bl	8007b48 <VL53L0X_GetWrapAroundCheckEnable>
 80072e8:	4603      	mov	r3, r0
 80072ea:	73fb      	strb	r3, [r7, #15]
			&(pDeviceParameters->WrapAroundCheckEnable));
	}

	/* Need to be done at the end as it uses VCSELPulsePeriod */
	if (Status == VL53L0X_ERROR_NONE) {
 80072ec:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	d107      	bne.n	8007304 <VL53L0X_GetDeviceParameters+0x114>
		Status = VL53L0X_GetMeasurementTimingBudgetMicroSeconds(Dev,
 80072f4:	683b      	ldr	r3, [r7, #0]
 80072f6:	3304      	adds	r3, #4
 80072f8:	4619      	mov	r1, r3
 80072fa:	6878      	ldr	r0, [r7, #4]
 80072fc:	f000 f879 	bl	80073f2 <VL53L0X_GetMeasurementTimingBudgetMicroSeconds>
 8007300:	4603      	mov	r3, r0
 8007302:	73fb      	strb	r3, [r7, #15]
		&(pDeviceParameters->MeasurementTimingBudgetMicroSeconds));
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8007304:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007308:	4618      	mov	r0, r3
 800730a:	3710      	adds	r7, #16
 800730c:	46bd      	mov	sp, r7
 800730e:	bd80      	pop	{r7, pc}

08007310 <VL53L0X_SetDeviceMode>:

VL53L0X_Error VL53L0X_SetDeviceMode(VL53L0X_DEV Dev, VL53L0X_DeviceModes DeviceMode)
{
 8007310:	b480      	push	{r7}
 8007312:	b085      	sub	sp, #20
 8007314:	af00      	add	r7, sp, #0
 8007316:	6078      	str	r0, [r7, #4]
 8007318:	460b      	mov	r3, r1
 800731a:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800731c:	2300      	movs	r3, #0
 800731e:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("%d", (int)DeviceMode);

	switch (DeviceMode) {
 8007320:	78fb      	ldrb	r3, [r7, #3]
 8007322:	2b15      	cmp	r3, #21
 8007324:	bf8c      	ite	hi
 8007326:	2201      	movhi	r2, #1
 8007328:	2200      	movls	r2, #0
 800732a:	b2d2      	uxtb	r2, r2
 800732c:	2a00      	cmp	r2, #0
 800732e:	d10e      	bne.n	800734e <VL53L0X_SetDeviceMode+0x3e>
 8007330:	2201      	movs	r2, #1
 8007332:	409a      	lsls	r2, r3
 8007334:	4b0b      	ldr	r3, [pc, #44]	; (8007364 <VL53L0X_SetDeviceMode+0x54>)
 8007336:	4013      	ands	r3, r2
 8007338:	2b00      	cmp	r3, #0
 800733a:	bf14      	ite	ne
 800733c:	2301      	movne	r3, #1
 800733e:	2300      	moveq	r3, #0
 8007340:	b2db      	uxtb	r3, r3
 8007342:	2b00      	cmp	r3, #0
 8007344:	d003      	beq.n	800734e <VL53L0X_SetDeviceMode+0x3e>
	case VL53L0X_DEVICEMODE_CONTINUOUS_RANGING:
	case VL53L0X_DEVICEMODE_CONTINUOUS_TIMED_RANGING:
	case VL53L0X_DEVICEMODE_GPIO_DRIVE:
	case VL53L0X_DEVICEMODE_GPIO_OSC:
		/* Supported modes */
		VL53L0X_SETPARAMETERFIELD(Dev, DeviceMode, DeviceMode);
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	78fa      	ldrb	r2, [r7, #3]
 800734a:	741a      	strb	r2, [r3, #16]
		break;
 800734c:	e001      	b.n	8007352 <VL53L0X_SetDeviceMode+0x42>
	default:
		/* Unsupported mode */
		Status = VL53L0X_ERROR_MODE_NOT_SUPPORTED;
 800734e:	23f8      	movs	r3, #248	; 0xf8
 8007350:	73fb      	strb	r3, [r7, #15]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8007352:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007356:	4618      	mov	r0, r3
 8007358:	3714      	adds	r7, #20
 800735a:	46bd      	mov	sp, r7
 800735c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007360:	4770      	bx	lr
 8007362:	bf00      	nop
 8007364:	0030000b 	.word	0x0030000b

08007368 <VL53L0X_GetDeviceMode>:

VL53L0X_Error VL53L0X_GetDeviceMode(VL53L0X_DEV Dev,
	VL53L0X_DeviceModes *pDeviceMode)
{
 8007368:	b480      	push	{r7}
 800736a:	b085      	sub	sp, #20
 800736c:	af00      	add	r7, sp, #0
 800736e:	6078      	str	r0, [r7, #4]
 8007370:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007372:	2300      	movs	r3, #0
 8007374:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, DeviceMode, *pDeviceMode);
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	7c1a      	ldrb	r2, [r3, #16]
 800737a:	683b      	ldr	r3, [r7, #0]
 800737c:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 800737e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007382:	4618      	mov	r0, r3
 8007384:	3714      	adds	r7, #20
 8007386:	46bd      	mov	sp, r7
 8007388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800738c:	4770      	bx	lr

0800738e <VL53L0X_GetFractionEnable>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_GetFractionEnable(VL53L0X_DEV Dev, uint8_t *pEnabled)
{
 800738e:	b580      	push	{r7, lr}
 8007390:	b084      	sub	sp, #16
 8007392:	af00      	add	r7, sp, #0
 8007394:	6078      	str	r0, [r7, #4]
 8007396:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007398:	2300      	movs	r3, #0
 800739a:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_RANGE_CONFIG, pEnabled);
 800739c:	683a      	ldr	r2, [r7, #0]
 800739e:	2109      	movs	r1, #9
 80073a0:	6878      	ldr	r0, [r7, #4]
 80073a2:	f004 fb9d 	bl	800bae0 <VL53L0X_RdByte>
 80073a6:	4603      	mov	r3, r0
 80073a8:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 80073aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d106      	bne.n	80073c0 <VL53L0X_GetFractionEnable+0x32>
		*pEnabled = (*pEnabled & 1);
 80073b2:	683b      	ldr	r3, [r7, #0]
 80073b4:	781b      	ldrb	r3, [r3, #0]
 80073b6:	f003 0301 	and.w	r3, r3, #1
 80073ba:	b2da      	uxtb	r2, r3
 80073bc:	683b      	ldr	r3, [r7, #0]
 80073be:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 80073c0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80073c4:	4618      	mov	r0, r3
 80073c6:	3710      	adds	r7, #16
 80073c8:	46bd      	mov	sp, r7
 80073ca:	bd80      	pop	{r7, pc}

080073cc <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>:
	return Status;
}

VL53L0X_Error VL53L0X_SetMeasurementTimingBudgetMicroSeconds(VL53L0X_DEV Dev,
	uint32_t MeasurementTimingBudgetMicroSeconds)
{
 80073cc:	b580      	push	{r7, lr}
 80073ce:	b084      	sub	sp, #16
 80073d0:	af00      	add	r7, sp, #0
 80073d2:	6078      	str	r0, [r7, #4]
 80073d4:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80073d6:	2300      	movs	r3, #0
 80073d8:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_set_measurement_timing_budget_micro_seconds(Dev,
 80073da:	6839      	ldr	r1, [r7, #0]
 80073dc:	6878      	ldr	r0, [r7, #4]
 80073de:	f003 fa56 	bl	800a88e <VL53L0X_set_measurement_timing_budget_micro_seconds>
 80073e2:	4603      	mov	r3, r0
 80073e4:	73fb      	strb	r3, [r7, #15]
		MeasurementTimingBudgetMicroSeconds);

	LOG_FUNCTION_END(Status);

	return Status;
 80073e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80073ea:	4618      	mov	r0, r3
 80073ec:	3710      	adds	r7, #16
 80073ee:	46bd      	mov	sp, r7
 80073f0:	bd80      	pop	{r7, pc}

080073f2 <VL53L0X_GetMeasurementTimingBudgetMicroSeconds>:

VL53L0X_Error VL53L0X_GetMeasurementTimingBudgetMicroSeconds(VL53L0X_DEV Dev,
	uint32_t *pMeasurementTimingBudgetMicroSeconds)
{
 80073f2:	b580      	push	{r7, lr}
 80073f4:	b084      	sub	sp, #16
 80073f6:	af00      	add	r7, sp, #0
 80073f8:	6078      	str	r0, [r7, #4]
 80073fa:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80073fc:	2300      	movs	r3, #0
 80073fe:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_measurement_timing_budget_micro_seconds(Dev,
 8007400:	6839      	ldr	r1, [r7, #0]
 8007402:	6878      	ldr	r0, [r7, #4]
 8007404:	f003 fb23 	bl	800aa4e <VL53L0X_get_measurement_timing_budget_micro_seconds>
 8007408:	4603      	mov	r3, r0
 800740a:	73fb      	strb	r3, [r7, #15]
		pMeasurementTimingBudgetMicroSeconds);

	LOG_FUNCTION_END(Status);
	return Status;
 800740c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007410:	4618      	mov	r0, r3
 8007412:	3710      	adds	r7, #16
 8007414:	46bd      	mov	sp, r7
 8007416:	bd80      	pop	{r7, pc}

08007418 <VL53L0X_SetVcselPulsePeriod>:

VL53L0X_Error VL53L0X_SetVcselPulsePeriod(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t VCSELPulsePeriodPCLK)
{
 8007418:	b580      	push	{r7, lr}
 800741a:	b084      	sub	sp, #16
 800741c:	af00      	add	r7, sp, #0
 800741e:	6078      	str	r0, [r7, #4]
 8007420:	460b      	mov	r3, r1
 8007422:	70fb      	strb	r3, [r7, #3]
 8007424:	4613      	mov	r3, r2
 8007426:	70bb      	strb	r3, [r7, #2]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007428:	2300      	movs	r3, #0
 800742a:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_set_vcsel_pulse_period(Dev, VcselPeriodType,
 800742c:	78ba      	ldrb	r2, [r7, #2]
 800742e:	78fb      	ldrb	r3, [r7, #3]
 8007430:	4619      	mov	r1, r3
 8007432:	6878      	ldr	r0, [r7, #4]
 8007434:	f002 ff6b 	bl	800a30e <VL53L0X_set_vcsel_pulse_period>
 8007438:	4603      	mov	r3, r0
 800743a:	73fb      	strb	r3, [r7, #15]
		VCSELPulsePeriodPCLK);

	LOG_FUNCTION_END(Status);
	return Status;
 800743c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007440:	4618      	mov	r0, r3
 8007442:	3710      	adds	r7, #16
 8007444:	46bd      	mov	sp, r7
 8007446:	bd80      	pop	{r7, pc}

08007448 <VL53L0X_GetVcselPulsePeriod>:

VL53L0X_Error VL53L0X_GetVcselPulsePeriod(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t *pVCSELPulsePeriodPCLK)
{
 8007448:	b580      	push	{r7, lr}
 800744a:	b086      	sub	sp, #24
 800744c:	af00      	add	r7, sp, #0
 800744e:	60f8      	str	r0, [r7, #12]
 8007450:	460b      	mov	r3, r1
 8007452:	607a      	str	r2, [r7, #4]
 8007454:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007456:	2300      	movs	r3, #0
 8007458:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_vcsel_pulse_period(Dev, VcselPeriodType,
 800745a:	7afb      	ldrb	r3, [r7, #11]
 800745c:	687a      	ldr	r2, [r7, #4]
 800745e:	4619      	mov	r1, r3
 8007460:	68f8      	ldr	r0, [r7, #12]
 8007462:	f003 f9dd 	bl	800a820 <VL53L0X_get_vcsel_pulse_period>
 8007466:	4603      	mov	r3, r0
 8007468:	75fb      	strb	r3, [r7, #23]
		pVCSELPulsePeriodPCLK);

	LOG_FUNCTION_END(Status);
	return Status;
 800746a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800746e:	4618      	mov	r0, r3
 8007470:	3718      	adds	r7, #24
 8007472:	46bd      	mov	sp, r7
 8007474:	bd80      	pop	{r7, pc}
	...

08007478 <VL53L0X_SetSequenceStepEnable>:

VL53L0X_Error VL53L0X_SetSequenceStepEnable(VL53L0X_DEV Dev,
	VL53L0X_SequenceStepId SequenceStepId, uint8_t SequenceStepEnabled)
{
 8007478:	b580      	push	{r7, lr}
 800747a:	b086      	sub	sp, #24
 800747c:	af00      	add	r7, sp, #0
 800747e:	6078      	str	r0, [r7, #4]
 8007480:	460b      	mov	r3, r1
 8007482:	70fb      	strb	r3, [r7, #3]
 8007484:	4613      	mov	r3, r2
 8007486:	70bb      	strb	r3, [r7, #2]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007488:	2300      	movs	r3, #0
 800748a:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 800748c:	2300      	movs	r3, #0
 800748e:	73fb      	strb	r3, [r7, #15]
	uint8_t SequenceConfigNew = 0;
 8007490:	2300      	movs	r3, #0
 8007492:	75bb      	strb	r3, [r7, #22]
	uint32_t MeasurementTimingBudgetMicroSeconds;
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8007494:	f107 030f 	add.w	r3, r7, #15
 8007498:	461a      	mov	r2, r3
 800749a:	2101      	movs	r1, #1
 800749c:	6878      	ldr	r0, [r7, #4]
 800749e:	f004 fb1f 	bl	800bae0 <VL53L0X_RdByte>
 80074a2:	4603      	mov	r3, r0
 80074a4:	75fb      	strb	r3, [r7, #23]
		&SequenceConfig);

	SequenceConfigNew = SequenceConfig;
 80074a6:	7bfb      	ldrb	r3, [r7, #15]
 80074a8:	75bb      	strb	r3, [r7, #22]

	if (Status == VL53L0X_ERROR_NONE) {
 80074aa:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d15a      	bne.n	8007568 <VL53L0X_SetSequenceStepEnable+0xf0>
		if (SequenceStepEnabled == 1) {
 80074b2:	78bb      	ldrb	r3, [r7, #2]
 80074b4:	2b01      	cmp	r3, #1
 80074b6:	d12b      	bne.n	8007510 <VL53L0X_SetSequenceStepEnable+0x98>

			/* Enable requested sequence step
			 */
			switch (SequenceStepId) {
 80074b8:	78fb      	ldrb	r3, [r7, #3]
 80074ba:	2b04      	cmp	r3, #4
 80074bc:	d825      	bhi.n	800750a <VL53L0X_SetSequenceStepEnable+0x92>
 80074be:	a201      	add	r2, pc, #4	; (adr r2, 80074c4 <VL53L0X_SetSequenceStepEnable+0x4c>)
 80074c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074c4:	080074d9 	.word	0x080074d9
 80074c8:	080074e3 	.word	0x080074e3
 80074cc:	080074ed 	.word	0x080074ed
 80074d0:	080074f7 	.word	0x080074f7
 80074d4:	08007501 	.word	0x08007501
			case VL53L0X_SEQUENCESTEP_TCC:
				SequenceConfigNew |= 0x10;
 80074d8:	7dbb      	ldrb	r3, [r7, #22]
 80074da:	f043 0310 	orr.w	r3, r3, #16
 80074de:	75bb      	strb	r3, [r7, #22]
				break;
 80074e0:	e043      	b.n	800756a <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_DSS:
				SequenceConfigNew |= 0x28;
 80074e2:	7dbb      	ldrb	r3, [r7, #22]
 80074e4:	f043 0328 	orr.w	r3, r3, #40	; 0x28
 80074e8:	75bb      	strb	r3, [r7, #22]
				break;
 80074ea:	e03e      	b.n	800756a <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_MSRC:
				SequenceConfigNew |= 0x04;
 80074ec:	7dbb      	ldrb	r3, [r7, #22]
 80074ee:	f043 0304 	orr.w	r3, r3, #4
 80074f2:	75bb      	strb	r3, [r7, #22]
				break;
 80074f4:	e039      	b.n	800756a <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_PRE_RANGE:
				SequenceConfigNew |= 0x40;
 80074f6:	7dbb      	ldrb	r3, [r7, #22]
 80074f8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80074fc:	75bb      	strb	r3, [r7, #22]
				break;
 80074fe:	e034      	b.n	800756a <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
				SequenceConfigNew |= 0x80;
 8007500:	7dbb      	ldrb	r3, [r7, #22]
 8007502:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007506:	75bb      	strb	r3, [r7, #22]
				break;
 8007508:	e02f      	b.n	800756a <VL53L0X_SetSequenceStepEnable+0xf2>
			default:
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 800750a:	23fc      	movs	r3, #252	; 0xfc
 800750c:	75fb      	strb	r3, [r7, #23]
 800750e:	e02c      	b.n	800756a <VL53L0X_SetSequenceStepEnable+0xf2>
			}
		} else {
			/* Disable requested sequence step
			 */
			switch (SequenceStepId) {
 8007510:	78fb      	ldrb	r3, [r7, #3]
 8007512:	2b04      	cmp	r3, #4
 8007514:	d825      	bhi.n	8007562 <VL53L0X_SetSequenceStepEnable+0xea>
 8007516:	a201      	add	r2, pc, #4	; (adr r2, 800751c <VL53L0X_SetSequenceStepEnable+0xa4>)
 8007518:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800751c:	08007531 	.word	0x08007531
 8007520:	0800753b 	.word	0x0800753b
 8007524:	08007545 	.word	0x08007545
 8007528:	0800754f 	.word	0x0800754f
 800752c:	08007559 	.word	0x08007559
			case VL53L0X_SEQUENCESTEP_TCC:
				SequenceConfigNew &= 0xef;
 8007530:	7dbb      	ldrb	r3, [r7, #22]
 8007532:	f023 0310 	bic.w	r3, r3, #16
 8007536:	75bb      	strb	r3, [r7, #22]
				break;
 8007538:	e017      	b.n	800756a <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_DSS:
				SequenceConfigNew &= 0xd7;
 800753a:	7dbb      	ldrb	r3, [r7, #22]
 800753c:	f023 0328 	bic.w	r3, r3, #40	; 0x28
 8007540:	75bb      	strb	r3, [r7, #22]
				break;
 8007542:	e012      	b.n	800756a <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_MSRC:
				SequenceConfigNew &= 0xfb;
 8007544:	7dbb      	ldrb	r3, [r7, #22]
 8007546:	f023 0304 	bic.w	r3, r3, #4
 800754a:	75bb      	strb	r3, [r7, #22]
				break;
 800754c:	e00d      	b.n	800756a <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_PRE_RANGE:
				SequenceConfigNew &= 0xbf;
 800754e:	7dbb      	ldrb	r3, [r7, #22]
 8007550:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007554:	75bb      	strb	r3, [r7, #22]
				break;
 8007556:	e008      	b.n	800756a <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
				SequenceConfigNew &= 0x7f;
 8007558:	7dbb      	ldrb	r3, [r7, #22]
 800755a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800755e:	75bb      	strb	r3, [r7, #22]
				break;
 8007560:	e003      	b.n	800756a <VL53L0X_SetSequenceStepEnable+0xf2>
			default:
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 8007562:	23fc      	movs	r3, #252	; 0xfc
 8007564:	75fb      	strb	r3, [r7, #23]
 8007566:	e000      	b.n	800756a <VL53L0X_SetSequenceStepEnable+0xf2>
			}
		}
 8007568:	bf00      	nop
	}

	if (SequenceConfigNew != SequenceConfig) {
 800756a:	7bfb      	ldrb	r3, [r7, #15]
 800756c:	7dba      	ldrb	r2, [r7, #22]
 800756e:	429a      	cmp	r2, r3
 8007570:	d01e      	beq.n	80075b0 <VL53L0X_SetSequenceStepEnable+0x138>
		/* Apply New Setting */
		if (Status == VL53L0X_ERROR_NONE) {
 8007572:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007576:	2b00      	cmp	r3, #0
 8007578:	d107      	bne.n	800758a <VL53L0X_SetSequenceStepEnable+0x112>
			Status = VL53L0X_WrByte(Dev,
 800757a:	7dbb      	ldrb	r3, [r7, #22]
 800757c:	461a      	mov	r2, r3
 800757e:	2101      	movs	r1, #1
 8007580:	6878      	ldr	r0, [r7, #4]
 8007582:	f004 fa2b 	bl	800b9dc <VL53L0X_WrByte>
 8007586:	4603      	mov	r3, r0
 8007588:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, SequenceConfigNew);
		}
		if (Status == VL53L0X_ERROR_NONE)
 800758a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800758e:	2b00      	cmp	r3, #0
 8007590:	d103      	bne.n	800759a <VL53L0X_SetSequenceStepEnable+0x122>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfigNew);
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	7dba      	ldrb	r2, [r7, #22]
 8007596:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130


		/* Recalculate timing budget */
		if (Status == VL53L0X_ERROR_NONE) {
 800759a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d106      	bne.n	80075b0 <VL53L0X_SetSequenceStepEnable+0x138>
			VL53L0X_GETPARAMETERFIELD(Dev,
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	695b      	ldr	r3, [r3, #20]
 80075a6:	613b      	str	r3, [r7, #16]
				MeasurementTimingBudgetMicroSeconds,
				MeasurementTimingBudgetMicroSeconds);

			VL53L0X_SetMeasurementTimingBudgetMicroSeconds(Dev,
 80075a8:	6939      	ldr	r1, [r7, #16]
 80075aa:	6878      	ldr	r0, [r7, #4]
 80075ac:	f7ff ff0e 	bl	80073cc <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>
		}
	}

	LOG_FUNCTION_END(Status);

	return Status;
 80075b0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80075b4:	4618      	mov	r0, r3
 80075b6:	3718      	adds	r7, #24
 80075b8:	46bd      	mov	sp, r7
 80075ba:	bd80      	pop	{r7, pc}

080075bc <sequence_step_enabled>:

VL53L0X_Error sequence_step_enabled(VL53L0X_DEV Dev,
	VL53L0X_SequenceStepId SequenceStepId, uint8_t SequenceConfig,
	uint8_t *pSequenceStepEnabled)
{
 80075bc:	b480      	push	{r7}
 80075be:	b087      	sub	sp, #28
 80075c0:	af00      	add	r7, sp, #0
 80075c2:	60f8      	str	r0, [r7, #12]
 80075c4:	607b      	str	r3, [r7, #4]
 80075c6:	460b      	mov	r3, r1
 80075c8:	72fb      	strb	r3, [r7, #11]
 80075ca:	4613      	mov	r3, r2
 80075cc:	72bb      	strb	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80075ce:	2300      	movs	r3, #0
 80075d0:	75fb      	strb	r3, [r7, #23]
	*pSequenceStepEnabled = 0;
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	2200      	movs	r2, #0
 80075d6:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_START("");

	switch (SequenceStepId) {
 80075d8:	7afb      	ldrb	r3, [r7, #11]
 80075da:	2b04      	cmp	r3, #4
 80075dc:	d836      	bhi.n	800764c <sequence_step_enabled+0x90>
 80075de:	a201      	add	r2, pc, #4	; (adr r2, 80075e4 <sequence_step_enabled+0x28>)
 80075e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075e4:	080075f9 	.word	0x080075f9
 80075e8:	0800760b 	.word	0x0800760b
 80075ec:	0800761d 	.word	0x0800761d
 80075f0:	0800762f 	.word	0x0800762f
 80075f4:	08007641 	.word	0x08007641
	case VL53L0X_SEQUENCESTEP_TCC:
		*pSequenceStepEnabled = (SequenceConfig & 0x10) >> 4;
 80075f8:	7abb      	ldrb	r3, [r7, #10]
 80075fa:	111b      	asrs	r3, r3, #4
 80075fc:	b2db      	uxtb	r3, r3
 80075fe:	f003 0301 	and.w	r3, r3, #1
 8007602:	b2da      	uxtb	r2, r3
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	701a      	strb	r2, [r3, #0]
		break;
 8007608:	e022      	b.n	8007650 <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_DSS:
		*pSequenceStepEnabled = (SequenceConfig & 0x08) >> 3;
 800760a:	7abb      	ldrb	r3, [r7, #10]
 800760c:	10db      	asrs	r3, r3, #3
 800760e:	b2db      	uxtb	r3, r3
 8007610:	f003 0301 	and.w	r3, r3, #1
 8007614:	b2da      	uxtb	r2, r3
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	701a      	strb	r2, [r3, #0]
		break;
 800761a:	e019      	b.n	8007650 <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_MSRC:
		*pSequenceStepEnabled = (SequenceConfig & 0x04) >> 2;
 800761c:	7abb      	ldrb	r3, [r7, #10]
 800761e:	109b      	asrs	r3, r3, #2
 8007620:	b2db      	uxtb	r3, r3
 8007622:	f003 0301 	and.w	r3, r3, #1
 8007626:	b2da      	uxtb	r2, r3
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	701a      	strb	r2, [r3, #0]
		break;
 800762c:	e010      	b.n	8007650 <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_PRE_RANGE:
		*pSequenceStepEnabled = (SequenceConfig & 0x40) >> 6;
 800762e:	7abb      	ldrb	r3, [r7, #10]
 8007630:	119b      	asrs	r3, r3, #6
 8007632:	b2db      	uxtb	r3, r3
 8007634:	f003 0301 	and.w	r3, r3, #1
 8007638:	b2da      	uxtb	r2, r3
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	701a      	strb	r2, [r3, #0]
		break;
 800763e:	e007      	b.n	8007650 <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
		*pSequenceStepEnabled = (SequenceConfig & 0x80) >> 7;
 8007640:	7abb      	ldrb	r3, [r7, #10]
 8007642:	09db      	lsrs	r3, r3, #7
 8007644:	b2da      	uxtb	r2, r3
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	701a      	strb	r2, [r3, #0]
		break;
 800764a:	e001      	b.n	8007650 <sequence_step_enabled+0x94>
	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800764c:	23fc      	movs	r3, #252	; 0xfc
 800764e:	75fb      	strb	r3, [r7, #23]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8007650:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007654:	4618      	mov	r0, r3
 8007656:	371c      	adds	r7, #28
 8007658:	46bd      	mov	sp, r7
 800765a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800765e:	4770      	bx	lr

08007660 <VL53L0X_GetSequenceStepEnables>:
	return Status;
}

VL53L0X_Error VL53L0X_GetSequenceStepEnables(VL53L0X_DEV Dev,
	VL53L0X_SchedulerSequenceSteps_t *pSchedulerSequenceSteps)
{
 8007660:	b580      	push	{r7, lr}
 8007662:	b084      	sub	sp, #16
 8007664:	af00      	add	r7, sp, #0
 8007666:	6078      	str	r0, [r7, #4]
 8007668:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800766a:	2300      	movs	r3, #0
 800766c:	73fb      	strb	r3, [r7, #15]
	uint8_t SequenceConfig = 0;
 800766e:	2300      	movs	r3, #0
 8007670:	73bb      	strb	r3, [r7, #14]
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8007672:	f107 030e 	add.w	r3, r7, #14
 8007676:	461a      	mov	r2, r3
 8007678:	2101      	movs	r1, #1
 800767a:	6878      	ldr	r0, [r7, #4]
 800767c:	f004 fa30 	bl	800bae0 <VL53L0X_RdByte>
 8007680:	4603      	mov	r3, r0
 8007682:	73fb      	strb	r3, [r7, #15]
		&SequenceConfig);

	if (Status == VL53L0X_ERROR_NONE) {
 8007684:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007688:	2b00      	cmp	r3, #0
 800768a:	d107      	bne.n	800769c <VL53L0X_GetSequenceStepEnables+0x3c>
		Status = sequence_step_enabled(Dev,
 800768c:	7bba      	ldrb	r2, [r7, #14]
 800768e:	683b      	ldr	r3, [r7, #0]
 8007690:	2100      	movs	r1, #0
 8007692:	6878      	ldr	r0, [r7, #4]
 8007694:	f7ff ff92 	bl	80075bc <sequence_step_enabled>
 8007698:	4603      	mov	r3, r0
 800769a:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_TCC, SequenceConfig,
			&pSchedulerSequenceSteps->TccOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 800769c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	d108      	bne.n	80076b6 <VL53L0X_GetSequenceStepEnables+0x56>
		Status = sequence_step_enabled(Dev,
 80076a4:	7bba      	ldrb	r2, [r7, #14]
 80076a6:	683b      	ldr	r3, [r7, #0]
 80076a8:	3302      	adds	r3, #2
 80076aa:	2101      	movs	r1, #1
 80076ac:	6878      	ldr	r0, [r7, #4]
 80076ae:	f7ff ff85 	bl	80075bc <sequence_step_enabled>
 80076b2:	4603      	mov	r3, r0
 80076b4:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_DSS, SequenceConfig,
			&pSchedulerSequenceSteps->DssOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 80076b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	d108      	bne.n	80076d0 <VL53L0X_GetSequenceStepEnables+0x70>
		Status = sequence_step_enabled(Dev,
 80076be:	7bba      	ldrb	r2, [r7, #14]
 80076c0:	683b      	ldr	r3, [r7, #0]
 80076c2:	3301      	adds	r3, #1
 80076c4:	2102      	movs	r1, #2
 80076c6:	6878      	ldr	r0, [r7, #4]
 80076c8:	f7ff ff78 	bl	80075bc <sequence_step_enabled>
 80076cc:	4603      	mov	r3, r0
 80076ce:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_MSRC, SequenceConfig,
			&pSchedulerSequenceSteps->MsrcOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 80076d0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	d108      	bne.n	80076ea <VL53L0X_GetSequenceStepEnables+0x8a>
		Status = sequence_step_enabled(Dev,
 80076d8:	7bba      	ldrb	r2, [r7, #14]
 80076da:	683b      	ldr	r3, [r7, #0]
 80076dc:	3303      	adds	r3, #3
 80076de:	2103      	movs	r1, #3
 80076e0:	6878      	ldr	r0, [r7, #4]
 80076e2:	f7ff ff6b 	bl	80075bc <sequence_step_enabled>
 80076e6:	4603      	mov	r3, r0
 80076e8:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_PRE_RANGE, SequenceConfig,
			&pSchedulerSequenceSteps->PreRangeOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 80076ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	d108      	bne.n	8007704 <VL53L0X_GetSequenceStepEnables+0xa4>
		Status = sequence_step_enabled(Dev,
 80076f2:	7bba      	ldrb	r2, [r7, #14]
 80076f4:	683b      	ldr	r3, [r7, #0]
 80076f6:	3304      	adds	r3, #4
 80076f8:	2104      	movs	r1, #4
 80076fa:	6878      	ldr	r0, [r7, #4]
 80076fc:	f7ff ff5e 	bl	80075bc <sequence_step_enabled>
 8007700:	4603      	mov	r3, r0
 8007702:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_FINAL_RANGE, SequenceConfig,
			&pSchedulerSequenceSteps->FinalRangeOn);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8007704:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007708:	4618      	mov	r0, r3
 800770a:	3710      	adds	r7, #16
 800770c:	46bd      	mov	sp, r7
 800770e:	bd80      	pop	{r7, pc}

08007710 <VL53L0X_GetInterMeasurementPeriodMilliSeconds>:
	return Status;
}

VL53L0X_Error VL53L0X_GetInterMeasurementPeriodMilliSeconds(VL53L0X_DEV Dev,
	uint32_t *pInterMeasurementPeriodMilliSeconds)
{
 8007710:	b580      	push	{r7, lr}
 8007712:	b084      	sub	sp, #16
 8007714:	af00      	add	r7, sp, #0
 8007716:	6078      	str	r0, [r7, #4]
 8007718:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800771a:	2300      	movs	r3, #0
 800771c:	73fb      	strb	r3, [r7, #15]
	uint16_t osc_calibrate_val;
	uint32_t IMPeriodMilliSeconds;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdWord(Dev, VL53L0X_REG_OSC_CALIBRATE_VAL,
 800771e:	f107 030c 	add.w	r3, r7, #12
 8007722:	461a      	mov	r2, r3
 8007724:	21f8      	movs	r1, #248	; 0xf8
 8007726:	6878      	ldr	r0, [r7, #4]
 8007728:	f004 fa04 	bl	800bb34 <VL53L0X_RdWord>
 800772c:	4603      	mov	r3, r0
 800772e:	73fb      	strb	r3, [r7, #15]
		&osc_calibrate_val);

	if (Status == VL53L0X_ERROR_NONE) {
 8007730:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007734:	2b00      	cmp	r3, #0
 8007736:	d108      	bne.n	800774a <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x3a>
		Status = VL53L0X_RdDWord(Dev,
 8007738:	f107 0308 	add.w	r3, r7, #8
 800773c:	461a      	mov	r2, r3
 800773e:	2104      	movs	r1, #4
 8007740:	6878      	ldr	r0, [r7, #4]
 8007742:	f004 fa2f 	bl	800bba4 <VL53L0X_RdDWord>
 8007746:	4603      	mov	r3, r0
 8007748:	73fb      	strb	r3, [r7, #15]
		VL53L0X_REG_SYSTEM_INTERMEASUREMENT_PERIOD,
			&IMPeriodMilliSeconds);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800774a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800774e:	2b00      	cmp	r3, #0
 8007750:	d10c      	bne.n	800776c <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x5c>
		if (osc_calibrate_val != 0) {
 8007752:	89bb      	ldrh	r3, [r7, #12]
 8007754:	2b00      	cmp	r3, #0
 8007756:	d005      	beq.n	8007764 <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x54>
			*pInterMeasurementPeriodMilliSeconds =
				IMPeriodMilliSeconds / osc_calibrate_val;
 8007758:	68bb      	ldr	r3, [r7, #8]
 800775a:	89ba      	ldrh	r2, [r7, #12]
 800775c:	fbb3 f2f2 	udiv	r2, r3, r2
			*pInterMeasurementPeriodMilliSeconds =
 8007760:	683b      	ldr	r3, [r7, #0]
 8007762:	601a      	str	r2, [r3, #0]
		}
		VL53L0X_SETPARAMETERFIELD(Dev,
 8007764:	683b      	ldr	r3, [r7, #0]
 8007766:	681a      	ldr	r2, [r3, #0]
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	619a      	str	r2, [r3, #24]
			InterMeasurementPeriodMilliSeconds,
			*pInterMeasurementPeriodMilliSeconds);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800776c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007770:	4618      	mov	r0, r3
 8007772:	3710      	adds	r7, #16
 8007774:	46bd      	mov	sp, r7
 8007776:	bd80      	pop	{r7, pc}

08007778 <VL53L0X_GetXTalkCompensationEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_GetXTalkCompensationEnable(VL53L0X_DEV Dev,
	uint8_t *pXTalkCompensationEnable)
{
 8007778:	b480      	push	{r7}
 800777a:	b085      	sub	sp, #20
 800777c:	af00      	add	r7, sp, #0
 800777e:	6078      	str	r0, [r7, #4]
 8007780:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007782:	2300      	movs	r3, #0
 8007784:	73fb      	strb	r3, [r7, #15]
	uint8_t Temp8;
	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationEnable, Temp8);
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	7f1b      	ldrb	r3, [r3, #28]
 800778a:	73bb      	strb	r3, [r7, #14]
	*pXTalkCompensationEnable = Temp8;
 800778c:	683b      	ldr	r3, [r7, #0]
 800778e:	7bba      	ldrb	r2, [r7, #14]
 8007790:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 8007792:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007796:	4618      	mov	r0, r3
 8007798:	3714      	adds	r7, #20
 800779a:	46bd      	mov	sp, r7
 800779c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077a0:	4770      	bx	lr

080077a2 <VL53L0X_GetXTalkCompensationRateMegaCps>:
	return Status;
}

VL53L0X_Error VL53L0X_GetXTalkCompensationRateMegaCps(VL53L0X_DEV Dev,
	FixPoint1616_t *pXTalkCompensationRateMegaCps)
{
 80077a2:	b580      	push	{r7, lr}
 80077a4:	b086      	sub	sp, #24
 80077a6:	af00      	add	r7, sp, #0
 80077a8:	6078      	str	r0, [r7, #4]
 80077aa:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80077ac:	2300      	movs	r3, #0
 80077ae:	75fb      	strb	r3, [r7, #23]
	uint16_t Value;
	FixPoint1616_t TempFix1616;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdWord(Dev,
 80077b0:	f107 030e 	add.w	r3, r7, #14
 80077b4:	461a      	mov	r2, r3
 80077b6:	2120      	movs	r1, #32
 80077b8:	6878      	ldr	r0, [r7, #4]
 80077ba:	f004 f9bb 	bl	800bb34 <VL53L0X_RdWord>
 80077be:	4603      	mov	r3, r0
 80077c0:	75fb      	strb	r3, [r7, #23]
	VL53L0X_REG_CROSSTALK_COMPENSATION_PEAK_RATE_MCPS, (uint16_t *)&Value);
	if (Status == VL53L0X_ERROR_NONE) {
 80077c2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	d118      	bne.n	80077fc <VL53L0X_GetXTalkCompensationRateMegaCps+0x5a>
		if (Value == 0) {
 80077ca:	89fb      	ldrh	r3, [r7, #14]
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	d109      	bne.n	80077e4 <VL53L0X_GetXTalkCompensationRateMegaCps+0x42>
			/* the Xtalk is disabled return value from memory */
			VL53L0X_GETPARAMETERFIELD(Dev,
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	6a1b      	ldr	r3, [r3, #32]
 80077d4:	613b      	str	r3, [r7, #16]
				XTalkCompensationRateMegaCps, TempFix1616);
			*pXTalkCompensationRateMegaCps = TempFix1616;
 80077d6:	683b      	ldr	r3, [r7, #0]
 80077d8:	693a      	ldr	r2, [r7, #16]
 80077da:	601a      	str	r2, [r3, #0]
			VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	2200      	movs	r2, #0
 80077e0:	771a      	strb	r2, [r3, #28]
 80077e2:	e00b      	b.n	80077fc <VL53L0X_GetXTalkCompensationRateMegaCps+0x5a>
				0);
		} else {
			TempFix1616 = VL53L0X_FIXPOINT313TOFIXPOINT1616(Value);
 80077e4:	89fb      	ldrh	r3, [r7, #14]
 80077e6:	00db      	lsls	r3, r3, #3
 80077e8:	613b      	str	r3, [r7, #16]
			*pXTalkCompensationRateMegaCps = TempFix1616;
 80077ea:	683b      	ldr	r3, [r7, #0]
 80077ec:	693a      	ldr	r2, [r7, #16]
 80077ee:	601a      	str	r2, [r3, #0]
			VL53L0X_SETPARAMETERFIELD(Dev,
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	693a      	ldr	r2, [r7, #16]
 80077f4:	621a      	str	r2, [r3, #32]
				XTalkCompensationRateMegaCps, TempFix1616);
			VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	2201      	movs	r2, #1
 80077fa:	771a      	strb	r2, [r3, #28]
				1);
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80077fc:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007800:	4618      	mov	r0, r3
 8007802:	3718      	adds	r7, #24
 8007804:	46bd      	mov	sp, r7
 8007806:	bd80      	pop	{r7, pc}

08007808 <VL53L0X_SetLimitCheckEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_SetLimitCheckEnable(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	uint8_t LimitCheckEnable)
{
 8007808:	b580      	push	{r7, lr}
 800780a:	b086      	sub	sp, #24
 800780c:	af00      	add	r7, sp, #0
 800780e:	6078      	str	r0, [r7, #4]
 8007810:	460b      	mov	r3, r1
 8007812:	807b      	strh	r3, [r7, #2]
 8007814:	4613      	mov	r3, r2
 8007816:	707b      	strb	r3, [r7, #1]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007818:	2300      	movs	r3, #0
 800781a:	75fb      	strb	r3, [r7, #23]
	FixPoint1616_t TempFix1616 = 0;
 800781c:	2300      	movs	r3, #0
 800781e:	613b      	str	r3, [r7, #16]
	uint8_t LimitCheckEnableInt = 0;
 8007820:	2300      	movs	r3, #0
 8007822:	73fb      	strb	r3, [r7, #15]
	uint8_t LimitCheckDisable = 0;
 8007824:	2300      	movs	r3, #0
 8007826:	73bb      	strb	r3, [r7, #14]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	if (LimitCheckId >= VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS) {
 8007828:	887b      	ldrh	r3, [r7, #2]
 800782a:	2b05      	cmp	r3, #5
 800782c:	d902      	bls.n	8007834 <VL53L0X_SetLimitCheckEnable+0x2c>
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800782e:	23fc      	movs	r3, #252	; 0xfc
 8007830:	75fb      	strb	r3, [r7, #23]
 8007832:	e05b      	b.n	80078ec <VL53L0X_SetLimitCheckEnable+0xe4>
	} else {
		if (LimitCheckEnable == 0) {
 8007834:	787b      	ldrb	r3, [r7, #1]
 8007836:	2b00      	cmp	r3, #0
 8007838:	d106      	bne.n	8007848 <VL53L0X_SetLimitCheckEnable+0x40>
			TempFix1616 = 0;
 800783a:	2300      	movs	r3, #0
 800783c:	613b      	str	r3, [r7, #16]
			LimitCheckEnableInt = 0;
 800783e:	2300      	movs	r3, #0
 8007840:	73fb      	strb	r3, [r7, #15]
			LimitCheckDisable = 1;
 8007842:	2301      	movs	r3, #1
 8007844:	73bb      	strb	r3, [r7, #14]
 8007846:	e00a      	b.n	800785e <VL53L0X_SetLimitCheckEnable+0x56>

		} else {
			VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8007848:	887b      	ldrh	r3, [r7, #2]
 800784a:	687a      	ldr	r2, [r7, #4]
 800784c:	330c      	adds	r3, #12
 800784e:	009b      	lsls	r3, r3, #2
 8007850:	4413      	add	r3, r2
 8007852:	685b      	ldr	r3, [r3, #4]
 8007854:	613b      	str	r3, [r7, #16]
				LimitCheckId, TempFix1616);
			LimitCheckDisable = 0;
 8007856:	2300      	movs	r3, #0
 8007858:	73bb      	strb	r3, [r7, #14]
			/* this to be sure to have either 0 or 1 */
			LimitCheckEnableInt = 1;
 800785a:	2301      	movs	r3, #1
 800785c:	73fb      	strb	r3, [r7, #15]
		}

		switch (LimitCheckId) {
 800785e:	887b      	ldrh	r3, [r7, #2]
 8007860:	2b05      	cmp	r3, #5
 8007862:	d841      	bhi.n	80078e8 <VL53L0X_SetLimitCheckEnable+0xe0>
 8007864:	a201      	add	r2, pc, #4	; (adr r2, 800786c <VL53L0X_SetLimitCheckEnable+0x64>)
 8007866:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800786a:	bf00      	nop
 800786c:	08007885 	.word	0x08007885
 8007870:	0800788f 	.word	0x0800788f
 8007874:	080078a5 	.word	0x080078a5
 8007878:	080078af 	.word	0x080078af
 800787c:	080078b9 	.word	0x080078b9
 8007880:	080078d1 	.word	0x080078d1

		case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	7bfa      	ldrb	r2, [r7, #15]
 8007888:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				LimitCheckEnableInt);

			break;
 800788c:	e02e      	b.n	80078ec <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:

			Status = VL53L0X_WrWord(Dev,
			VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(TempFix1616));
 800788e:	693b      	ldr	r3, [r7, #16]
 8007890:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 8007892:	b29b      	uxth	r3, r3
 8007894:	461a      	mov	r2, r3
 8007896:	2144      	movs	r1, #68	; 0x44
 8007898:	6878      	ldr	r0, [r7, #4]
 800789a:	f004 f8c3 	bl	800ba24 <VL53L0X_WrWord>
 800789e:	4603      	mov	r3, r0
 80078a0:	75fb      	strb	r3, [r7, #23]

			break;
 80078a2:	e023      	b.n	80078ec <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	7bfa      	ldrb	r2, [r7, #15]
 80078a8:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				LimitCheckEnableInt);

			break;
 80078ac:	e01e      	b.n	80078ec <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	7bfa      	ldrb	r2, [r7, #15]
 80078b2:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				LimitCheckEnableInt);

			break;
 80078b6:	e019      	b.n	80078ec <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:

			Temp8 = (uint8_t)(LimitCheckDisable << 1);
 80078b8:	7bbb      	ldrb	r3, [r7, #14]
 80078ba:	005b      	lsls	r3, r3, #1
 80078bc:	737b      	strb	r3, [r7, #13]
			Status = VL53L0X_UpdateByte(Dev,
 80078be:	7b7b      	ldrb	r3, [r7, #13]
 80078c0:	22fe      	movs	r2, #254	; 0xfe
 80078c2:	2160      	movs	r1, #96	; 0x60
 80078c4:	6878      	ldr	r0, [r7, #4]
 80078c6:	f004 f8d7 	bl	800ba78 <VL53L0X_UpdateByte>
 80078ca:	4603      	mov	r3, r0
 80078cc:	75fb      	strb	r3, [r7, #23]
				VL53L0X_REG_MSRC_CONFIG_CONTROL,
				0xFE, Temp8);

			break;
 80078ce:	e00d      	b.n	80078ec <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:

			Temp8 = (uint8_t)(LimitCheckDisable << 4);
 80078d0:	7bbb      	ldrb	r3, [r7, #14]
 80078d2:	011b      	lsls	r3, r3, #4
 80078d4:	737b      	strb	r3, [r7, #13]
			Status = VL53L0X_UpdateByte(Dev,
 80078d6:	7b7b      	ldrb	r3, [r7, #13]
 80078d8:	22ef      	movs	r2, #239	; 0xef
 80078da:	2160      	movs	r1, #96	; 0x60
 80078dc:	6878      	ldr	r0, [r7, #4]
 80078de:	f004 f8cb 	bl	800ba78 <VL53L0X_UpdateByte>
 80078e2:	4603      	mov	r3, r0
 80078e4:	75fb      	strb	r3, [r7, #23]
				VL53L0X_REG_MSRC_CONFIG_CONTROL,
				0xEF, Temp8);

			break;
 80078e6:	e001      	b.n	80078ec <VL53L0X_SetLimitCheckEnable+0xe4>


		default:
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 80078e8:	23fc      	movs	r3, #252	; 0xfc
 80078ea:	75fb      	strb	r3, [r7, #23]

		}

	}

	if (Status == VL53L0X_ERROR_NONE) {
 80078ec:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	d10f      	bne.n	8007914 <VL53L0X_SetLimitCheckEnable+0x10c>
		if (LimitCheckEnable == 0) {
 80078f4:	787b      	ldrb	r3, [r7, #1]
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	d106      	bne.n	8007908 <VL53L0X_SetLimitCheckEnable+0x100>
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 80078fa:	887b      	ldrh	r3, [r7, #2]
 80078fc:	687a      	ldr	r2, [r7, #4]
 80078fe:	4413      	add	r3, r2
 8007900:	2200      	movs	r2, #0
 8007902:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8007906:	e005      	b.n	8007914 <VL53L0X_SetLimitCheckEnable+0x10c>
				LimitCheckId, 0);
		} else {
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8007908:	887b      	ldrh	r3, [r7, #2]
 800790a:	687a      	ldr	r2, [r7, #4]
 800790c:	4413      	add	r3, r2
 800790e:	2201      	movs	r2, #1
 8007910:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
				LimitCheckId, 1);
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8007914:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007918:	4618      	mov	r0, r3
 800791a:	3718      	adds	r7, #24
 800791c:	46bd      	mov	sp, r7
 800791e:	bd80      	pop	{r7, pc}

08007920 <VL53L0X_GetLimitCheckEnable>:

VL53L0X_Error VL53L0X_GetLimitCheckEnable(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	uint8_t *pLimitCheckEnable)
{
 8007920:	b480      	push	{r7}
 8007922:	b087      	sub	sp, #28
 8007924:	af00      	add	r7, sp, #0
 8007926:	60f8      	str	r0, [r7, #12]
 8007928:	460b      	mov	r3, r1
 800792a:	607a      	str	r2, [r7, #4]
 800792c:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800792e:	2300      	movs	r3, #0
 8007930:	75fb      	strb	r3, [r7, #23]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	if (LimitCheckId >= VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS) {
 8007932:	897b      	ldrh	r3, [r7, #10]
 8007934:	2b05      	cmp	r3, #5
 8007936:	d905      	bls.n	8007944 <VL53L0X_GetLimitCheckEnable+0x24>
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8007938:	23fc      	movs	r3, #252	; 0xfc
 800793a:	75fb      	strb	r3, [r7, #23]
		*pLimitCheckEnable = 0;
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	2200      	movs	r2, #0
 8007940:	701a      	strb	r2, [r3, #0]
 8007942:	e008      	b.n	8007956 <VL53L0X_GetLimitCheckEnable+0x36>
	} else {
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8007944:	897b      	ldrh	r3, [r7, #10]
 8007946:	68fa      	ldr	r2, [r7, #12]
 8007948:	4413      	add	r3, r2
 800794a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800794e:	75bb      	strb	r3, [r7, #22]
			LimitCheckId, Temp8);
		*pLimitCheckEnable = Temp8;
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	7dba      	ldrb	r2, [r7, #22]
 8007954:	701a      	strb	r2, [r3, #0]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8007956:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800795a:	4618      	mov	r0, r3
 800795c:	371c      	adds	r7, #28
 800795e:	46bd      	mov	sp, r7
 8007960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007964:	4770      	bx	lr
	...

08007968 <VL53L0X_SetLimitCheckValue>:

VL53L0X_Error VL53L0X_SetLimitCheckValue(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	FixPoint1616_t LimitCheckValue)
{
 8007968:	b580      	push	{r7, lr}
 800796a:	b086      	sub	sp, #24
 800796c:	af00      	add	r7, sp, #0
 800796e:	60f8      	str	r0, [r7, #12]
 8007970:	460b      	mov	r3, r1
 8007972:	607a      	str	r2, [r7, #4]
 8007974:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007976:	2300      	movs	r3, #0
 8007978:	75fb      	strb	r3, [r7, #23]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksEnable, LimitCheckId,
 800797a:	897b      	ldrh	r3, [r7, #10]
 800797c:	68fa      	ldr	r2, [r7, #12]
 800797e:	4413      	add	r3, r2
 8007980:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007984:	75bb      	strb	r3, [r7, #22]
		Temp8);

	if (Temp8 == 0) { /* disabled write only internal value */
 8007986:	7dbb      	ldrb	r3, [r7, #22]
 8007988:	2b00      	cmp	r3, #0
 800798a:	d107      	bne.n	800799c <VL53L0X_SetLimitCheckValue+0x34>
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 800798c:	897b      	ldrh	r3, [r7, #10]
 800798e:	68fa      	ldr	r2, [r7, #12]
 8007990:	330c      	adds	r3, #12
 8007992:	009b      	lsls	r3, r3, #2
 8007994:	4413      	add	r3, r2
 8007996:	687a      	ldr	r2, [r7, #4]
 8007998:	605a      	str	r2, [r3, #4]
 800799a:	e040      	b.n	8007a1e <VL53L0X_SetLimitCheckValue+0xb6>
			LimitCheckId, LimitCheckValue);
	} else {

		switch (LimitCheckId) {
 800799c:	897b      	ldrh	r3, [r7, #10]
 800799e:	2b05      	cmp	r3, #5
 80079a0:	d830      	bhi.n	8007a04 <VL53L0X_SetLimitCheckValue+0x9c>
 80079a2:	a201      	add	r2, pc, #4	; (adr r2, 80079a8 <VL53L0X_SetLimitCheckValue+0x40>)
 80079a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079a8:	080079c1 	.word	0x080079c1
 80079ac:	080079c9 	.word	0x080079c9
 80079b0:	080079df 	.word	0x080079df
 80079b4:	080079e7 	.word	0x080079e7
 80079b8:	080079ef 	.word	0x080079ef
 80079bc:	080079ef 	.word	0x080079ef

		case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 80079c0:	68fb      	ldr	r3, [r7, #12]
 80079c2:	687a      	ldr	r2, [r7, #4]
 80079c4:	635a      	str	r2, [r3, #52]	; 0x34
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				LimitCheckValue);
			break;
 80079c6:	e01f      	b.n	8007a08 <VL53L0X_SetLimitCheckValue+0xa0>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:

			Status = VL53L0X_WrWord(Dev,
			VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 80079cc:	b29b      	uxth	r3, r3
 80079ce:	461a      	mov	r2, r3
 80079d0:	2144      	movs	r1, #68	; 0x44
 80079d2:	68f8      	ldr	r0, [r7, #12]
 80079d4:	f004 f826 	bl	800ba24 <VL53L0X_WrWord>
 80079d8:	4603      	mov	r3, r0
 80079da:	75fb      	strb	r3, [r7, #23]
					LimitCheckValue));

			break;
 80079dc:	e014      	b.n	8007a08 <VL53L0X_SetLimitCheckValue+0xa0>

		case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 80079de:	68fb      	ldr	r3, [r7, #12]
 80079e0:	687a      	ldr	r2, [r7, #4]
 80079e2:	63da      	str	r2, [r3, #60]	; 0x3c
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				LimitCheckValue);

			break;
 80079e4:	e010      	b.n	8007a08 <VL53L0X_SetLimitCheckValue+0xa0>

		case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	687a      	ldr	r2, [r7, #4]
 80079ea:	641a      	str	r2, [r3, #64]	; 0x40
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				LimitCheckValue);

			break;
 80079ec:	e00c      	b.n	8007a08 <VL53L0X_SetLimitCheckValue+0xa0>
		case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:
		case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:

			Status = VL53L0X_WrWord(Dev,
				VL53L0X_REG_PRE_RANGE_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 80079f2:	b29b      	uxth	r3, r3
 80079f4:	461a      	mov	r2, r3
 80079f6:	2164      	movs	r1, #100	; 0x64
 80079f8:	68f8      	ldr	r0, [r7, #12]
 80079fa:	f004 f813 	bl	800ba24 <VL53L0X_WrWord>
 80079fe:	4603      	mov	r3, r0
 8007a00:	75fb      	strb	r3, [r7, #23]
					LimitCheckValue));

			break;
 8007a02:	e001      	b.n	8007a08 <VL53L0X_SetLimitCheckValue+0xa0>

		default:
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 8007a04:	23fc      	movs	r3, #252	; 0xfc
 8007a06:	75fb      	strb	r3, [r7, #23]

		}

		if (Status == VL53L0X_ERROR_NONE) {
 8007a08:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	d106      	bne.n	8007a1e <VL53L0X_SetLimitCheckValue+0xb6>
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8007a10:	897b      	ldrh	r3, [r7, #10]
 8007a12:	68fa      	ldr	r2, [r7, #12]
 8007a14:	330c      	adds	r3, #12
 8007a16:	009b      	lsls	r3, r3, #2
 8007a18:	4413      	add	r3, r2
 8007a1a:	687a      	ldr	r2, [r7, #4]
 8007a1c:	605a      	str	r2, [r3, #4]
				LimitCheckId, LimitCheckValue);
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8007a1e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007a22:	4618      	mov	r0, r3
 8007a24:	3718      	adds	r7, #24
 8007a26:	46bd      	mov	sp, r7
 8007a28:	bd80      	pop	{r7, pc}
 8007a2a:	bf00      	nop

08007a2c <VL53L0X_GetLimitCheckValue>:

VL53L0X_Error VL53L0X_GetLimitCheckValue(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	FixPoint1616_t *pLimitCheckValue)
{
 8007a2c:	b580      	push	{r7, lr}
 8007a2e:	b088      	sub	sp, #32
 8007a30:	af00      	add	r7, sp, #0
 8007a32:	60f8      	str	r0, [r7, #12]
 8007a34:	460b      	mov	r3, r1
 8007a36:	607a      	str	r2, [r7, #4]
 8007a38:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007a3a:	2300      	movs	r3, #0
 8007a3c:	77fb      	strb	r3, [r7, #31]
	uint8_t EnableZeroValue = 0;
 8007a3e:	2300      	movs	r3, #0
 8007a40:	77bb      	strb	r3, [r7, #30]
	uint16_t Temp16;
	FixPoint1616_t TempFix1616;

	LOG_FUNCTION_START("");

	switch (LimitCheckId) {
 8007a42:	897b      	ldrh	r3, [r7, #10]
 8007a44:	2b05      	cmp	r3, #5
 8007a46:	d847      	bhi.n	8007ad8 <VL53L0X_GetLimitCheckValue+0xac>
 8007a48:	a201      	add	r2, pc, #4	; (adr r2, 8007a50 <VL53L0X_GetLimitCheckValue+0x24>)
 8007a4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a4e:	bf00      	nop
 8007a50:	08007a69 	.word	0x08007a69
 8007a54:	08007a75 	.word	0x08007a75
 8007a58:	08007a9b 	.word	0x08007a9b
 8007a5c:	08007aa7 	.word	0x08007aa7
 8007a60:	08007ab3 	.word	0x08007ab3
 8007a64:	08007ab3 	.word	0x08007ab3

	case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007a6c:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, TempFix1616);
		EnableZeroValue = 0;
 8007a6e:	2300      	movs	r3, #0
 8007a70:	77bb      	strb	r3, [r7, #30]
		break;
 8007a72:	e033      	b.n	8007adc <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:
		Status = VL53L0X_RdWord(Dev,
 8007a74:	f107 0316 	add.w	r3, r7, #22
 8007a78:	461a      	mov	r2, r3
 8007a7a:	2144      	movs	r1, #68	; 0x44
 8007a7c:	68f8      	ldr	r0, [r7, #12]
 8007a7e:	f004 f859 	bl	800bb34 <VL53L0X_RdWord>
 8007a82:	4603      	mov	r3, r0
 8007a84:	77fb      	strb	r3, [r7, #31]
		VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
			&Temp16);
		if (Status == VL53L0X_ERROR_NONE)
 8007a86:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	d102      	bne.n	8007a94 <VL53L0X_GetLimitCheckValue+0x68>
			TempFix1616 = VL53L0X_FIXPOINT97TOFIXPOINT1616(Temp16);
 8007a8e:	8afb      	ldrh	r3, [r7, #22]
 8007a90:	025b      	lsls	r3, r3, #9
 8007a92:	61bb      	str	r3, [r7, #24]


		EnableZeroValue = 1;
 8007a94:	2301      	movs	r3, #1
 8007a96:	77bb      	strb	r3, [r7, #30]
		break;
 8007a98:	e020      	b.n	8007adc <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8007a9a:	68fb      	ldr	r3, [r7, #12]
 8007a9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a9e:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, TempFix1616);
		EnableZeroValue = 0;
 8007aa0:	2300      	movs	r3, #0
 8007aa2:	77bb      	strb	r3, [r7, #30]
		break;
 8007aa4:	e01a      	b.n	8007adc <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8007aa6:	68fb      	ldr	r3, [r7, #12]
 8007aa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007aaa:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD, TempFix1616);
		EnableZeroValue = 0;
 8007aac:	2300      	movs	r3, #0
 8007aae:	77bb      	strb	r3, [r7, #30]
		break;
 8007ab0:	e014      	b.n	8007adc <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:
	case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:
		Status = VL53L0X_RdWord(Dev,
 8007ab2:	f107 0316 	add.w	r3, r7, #22
 8007ab6:	461a      	mov	r2, r3
 8007ab8:	2164      	movs	r1, #100	; 0x64
 8007aba:	68f8      	ldr	r0, [r7, #12]
 8007abc:	f004 f83a 	bl	800bb34 <VL53L0X_RdWord>
 8007ac0:	4603      	mov	r3, r0
 8007ac2:	77fb      	strb	r3, [r7, #31]
			VL53L0X_REG_PRE_RANGE_MIN_COUNT_RATE_RTN_LIMIT,
			&Temp16);
		if (Status == VL53L0X_ERROR_NONE)
 8007ac4:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	d102      	bne.n	8007ad2 <VL53L0X_GetLimitCheckValue+0xa6>
			TempFix1616 = VL53L0X_FIXPOINT97TOFIXPOINT1616(Temp16);
 8007acc:	8afb      	ldrh	r3, [r7, #22]
 8007ace:	025b      	lsls	r3, r3, #9
 8007ad0:	61bb      	str	r3, [r7, #24]


		EnableZeroValue = 0;
 8007ad2:	2300      	movs	r3, #0
 8007ad4:	77bb      	strb	r3, [r7, #30]
		break;
 8007ad6:	e001      	b.n	8007adc <VL53L0X_GetLimitCheckValue+0xb0>

	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8007ad8:	23fc      	movs	r3, #252	; 0xfc
 8007ada:	77fb      	strb	r3, [r7, #31]

	}

	if (Status == VL53L0X_ERROR_NONE) {
 8007adc:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	d12a      	bne.n	8007b3a <VL53L0X_GetLimitCheckValue+0x10e>

		if (EnableZeroValue == 1) {
 8007ae4:	7fbb      	ldrb	r3, [r7, #30]
 8007ae6:	2b01      	cmp	r3, #1
 8007ae8:	d124      	bne.n	8007b34 <VL53L0X_GetLimitCheckValue+0x108>

			if (TempFix1616 == 0) {
 8007aea:	69bb      	ldr	r3, [r7, #24]
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	d110      	bne.n	8007b12 <VL53L0X_GetLimitCheckValue+0xe6>
				/* disabled: return value from memory */
				VL53L0X_GETARRAYPARAMETERFIELD(Dev,
 8007af0:	897b      	ldrh	r3, [r7, #10]
 8007af2:	68fa      	ldr	r2, [r7, #12]
 8007af4:	330c      	adds	r3, #12
 8007af6:	009b      	lsls	r3, r3, #2
 8007af8:	4413      	add	r3, r2
 8007afa:	685b      	ldr	r3, [r3, #4]
 8007afc:	61bb      	str	r3, [r7, #24]
					LimitChecksValue, LimitCheckId,
					TempFix1616);
				*pLimitCheckValue = TempFix1616;
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	69ba      	ldr	r2, [r7, #24]
 8007b02:	601a      	str	r2, [r3, #0]
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 8007b04:	897b      	ldrh	r3, [r7, #10]
 8007b06:	68fa      	ldr	r2, [r7, #12]
 8007b08:	4413      	add	r3, r2
 8007b0a:	2200      	movs	r2, #0
 8007b0c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8007b10:	e013      	b.n	8007b3a <VL53L0X_GetLimitCheckValue+0x10e>
					LimitChecksEnable, LimitCheckId, 0);
			} else {
				*pLimitCheckValue = TempFix1616;
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	69ba      	ldr	r2, [r7, #24]
 8007b16:	601a      	str	r2, [r3, #0]
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 8007b18:	897b      	ldrh	r3, [r7, #10]
 8007b1a:	68fa      	ldr	r2, [r7, #12]
 8007b1c:	330c      	adds	r3, #12
 8007b1e:	009b      	lsls	r3, r3, #2
 8007b20:	4413      	add	r3, r2
 8007b22:	69ba      	ldr	r2, [r7, #24]
 8007b24:	605a      	str	r2, [r3, #4]
					LimitChecksValue, LimitCheckId,
					TempFix1616);
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 8007b26:	897b      	ldrh	r3, [r7, #10]
 8007b28:	68fa      	ldr	r2, [r7, #12]
 8007b2a:	4413      	add	r3, r2
 8007b2c:	2201      	movs	r2, #1
 8007b2e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8007b32:	e002      	b.n	8007b3a <VL53L0X_GetLimitCheckValue+0x10e>
					LimitChecksEnable, LimitCheckId, 1);
			}
		} else {
			*pLimitCheckValue = TempFix1616;
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	69ba      	ldr	r2, [r7, #24]
 8007b38:	601a      	str	r2, [r3, #0]
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8007b3a:	f997 301f 	ldrsb.w	r3, [r7, #31]

}
 8007b3e:	4618      	mov	r0, r3
 8007b40:	3720      	adds	r7, #32
 8007b42:	46bd      	mov	sp, r7
 8007b44:	bd80      	pop	{r7, pc}
 8007b46:	bf00      	nop

08007b48 <VL53L0X_GetWrapAroundCheckEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_GetWrapAroundCheckEnable(VL53L0X_DEV Dev,
	uint8_t *pWrapAroundCheckEnable)
{
 8007b48:	b580      	push	{r7, lr}
 8007b4a:	b084      	sub	sp, #16
 8007b4c:	af00      	add	r7, sp, #0
 8007b4e:	6078      	str	r0, [r7, #4]
 8007b50:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007b52:	2300      	movs	r3, #0
 8007b54:	73fb      	strb	r3, [r7, #15]
	uint8_t data;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, &data);
 8007b56:	f107 030e 	add.w	r3, r7, #14
 8007b5a:	461a      	mov	r2, r3
 8007b5c:	2101      	movs	r1, #1
 8007b5e:	6878      	ldr	r0, [r7, #4]
 8007b60:	f003 ffbe 	bl	800bae0 <VL53L0X_RdByte>
 8007b64:	4603      	mov	r3, r0
 8007b66:	73fb      	strb	r3, [r7, #15]
	if (Status == VL53L0X_ERROR_NONE) {
 8007b68:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	d10e      	bne.n	8007b8e <VL53L0X_GetWrapAroundCheckEnable+0x46>
		PALDevDataSet(Dev, SequenceConfig, data);
 8007b70:	7bba      	ldrb	r2, [r7, #14]
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
		if (data & (0x01 << 7))
 8007b78:	7bbb      	ldrb	r3, [r7, #14]
 8007b7a:	b25b      	sxtb	r3, r3
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	da03      	bge.n	8007b88 <VL53L0X_GetWrapAroundCheckEnable+0x40>
			*pWrapAroundCheckEnable = 0x01;
 8007b80:	683b      	ldr	r3, [r7, #0]
 8007b82:	2201      	movs	r2, #1
 8007b84:	701a      	strb	r2, [r3, #0]
 8007b86:	e002      	b.n	8007b8e <VL53L0X_GetWrapAroundCheckEnable+0x46>
		else
			*pWrapAroundCheckEnable = 0x00;
 8007b88:	683b      	ldr	r3, [r7, #0]
 8007b8a:	2200      	movs	r2, #0
 8007b8c:	701a      	strb	r2, [r3, #0]
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8007b8e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007b92:	2b00      	cmp	r3, #0
 8007b94:	d104      	bne.n	8007ba0 <VL53L0X_GetWrapAroundCheckEnable+0x58>
		VL53L0X_SETPARAMETERFIELD(Dev, WrapAroundCheckEnable,
 8007b96:	683b      	ldr	r3, [r7, #0]
 8007b98:	781a      	ldrb	r2, [r3, #0]
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
			*pWrapAroundCheckEnable);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8007ba0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007ba4:	4618      	mov	r0, r3
 8007ba6:	3710      	adds	r7, #16
 8007ba8:	46bd      	mov	sp, r7
 8007baa:	bd80      	pop	{r7, pc}

08007bac <VL53L0X_PerformSingleMeasurement>:

/* End Group PAL Parameters Functions */

/* Group PAL Measurement Functions */
VL53L0X_Error VL53L0X_PerformSingleMeasurement(VL53L0X_DEV Dev)
{
 8007bac:	b580      	push	{r7, lr}
 8007bae:	b084      	sub	sp, #16
 8007bb0:	af00      	add	r7, sp, #0
 8007bb2:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007bb4:	2300      	movs	r3, #0
 8007bb6:	73fb      	strb	r3, [r7, #15]
	VL53L0X_DeviceModes DeviceMode;

	LOG_FUNCTION_START("");

	/* Get Current DeviceMode */
	Status = VL53L0X_GetDeviceMode(Dev, &DeviceMode);
 8007bb8:	f107 030e 	add.w	r3, r7, #14
 8007bbc:	4619      	mov	r1, r3
 8007bbe:	6878      	ldr	r0, [r7, #4]
 8007bc0:	f7ff fbd2 	bl	8007368 <VL53L0X_GetDeviceMode>
 8007bc4:	4603      	mov	r3, r0
 8007bc6:	73fb      	strb	r3, [r7, #15]

	/* Start immediately to run a single ranging measurement in case of
	 * single ranging or single histogram */
	if (Status == VL53L0X_ERROR_NONE
 8007bc8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	d107      	bne.n	8007be0 <VL53L0X_PerformSingleMeasurement+0x34>
		&& DeviceMode == VL53L0X_DEVICEMODE_SINGLE_RANGING)
 8007bd0:	7bbb      	ldrb	r3, [r7, #14]
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	d104      	bne.n	8007be0 <VL53L0X_PerformSingleMeasurement+0x34>
		Status = VL53L0X_StartMeasurement(Dev);
 8007bd6:	6878      	ldr	r0, [r7, #4]
 8007bd8:	f000 f898 	bl	8007d0c <VL53L0X_StartMeasurement>
 8007bdc:	4603      	mov	r3, r0
 8007bde:	73fb      	strb	r3, [r7, #15]


	if (Status == VL53L0X_ERROR_NONE)
 8007be0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	d104      	bne.n	8007bf2 <VL53L0X_PerformSingleMeasurement+0x46>
		Status = VL53L0X_measurement_poll_for_completion(Dev);
 8007be8:	6878      	ldr	r0, [r7, #4]
 8007bea:	f001 fb6f 	bl	80092cc <VL53L0X_measurement_poll_for_completion>
 8007bee:	4603      	mov	r3, r0
 8007bf0:	73fb      	strb	r3, [r7, #15]


	/* Change PAL State in case of single ranging or single histogram */
	if (Status == VL53L0X_ERROR_NONE
 8007bf2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	d106      	bne.n	8007c08 <VL53L0X_PerformSingleMeasurement+0x5c>
		&& DeviceMode == VL53L0X_DEVICEMODE_SINGLE_RANGING)
 8007bfa:	7bbb      	ldrb	r3, [r7, #14]
 8007bfc:	2b00      	cmp	r3, #0
 8007bfe:	d103      	bne.n	8007c08 <VL53L0X_PerformSingleMeasurement+0x5c>
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_IDLE);
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	2203      	movs	r2, #3
 8007c04:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132


	LOG_FUNCTION_END(Status);
	return Status;
 8007c08:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007c0c:	4618      	mov	r0, r3
 8007c0e:	3710      	adds	r7, #16
 8007c10:	46bd      	mov	sp, r7
 8007c12:	bd80      	pop	{r7, pc}

08007c14 <VL53L0X_PerformRefCalibration>:
	return Status;
}

VL53L0X_Error VL53L0X_PerformRefCalibration(VL53L0X_DEV Dev, uint8_t *pVhvSettings,
	uint8_t *pPhaseCal)
{
 8007c14:	b580      	push	{r7, lr}
 8007c16:	b086      	sub	sp, #24
 8007c18:	af00      	add	r7, sp, #0
 8007c1a:	60f8      	str	r0, [r7, #12]
 8007c1c:	60b9      	str	r1, [r7, #8]
 8007c1e:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007c20:	2300      	movs	r3, #0
 8007c22:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");

	Status = VL53L0X_perform_ref_calibration(Dev, pVhvSettings,
 8007c24:	2301      	movs	r3, #1
 8007c26:	687a      	ldr	r2, [r7, #4]
 8007c28:	68b9      	ldr	r1, [r7, #8]
 8007c2a:	68f8      	ldr	r0, [r7, #12]
 8007c2c:	f001 fb11 	bl	8009252 <VL53L0X_perform_ref_calibration>
 8007c30:	4603      	mov	r3, r0
 8007c32:	75fb      	strb	r3, [r7, #23]
		pPhaseCal, 1);

	LOG_FUNCTION_END(Status);
	return Status;
 8007c34:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007c38:	4618      	mov	r0, r3
 8007c3a:	3718      	adds	r7, #24
 8007c3c:	46bd      	mov	sp, r7
 8007c3e:	bd80      	pop	{r7, pc}

08007c40 <VL53L0X_CheckAndLoadInterruptSettings>:
	return Status;
}

VL53L0X_Error VL53L0X_CheckAndLoadInterruptSettings(VL53L0X_DEV Dev,
	uint8_t StartNotStopFlag)
{
 8007c40:	b580      	push	{r7, lr}
 8007c42:	b086      	sub	sp, #24
 8007c44:	af00      	add	r7, sp, #0
 8007c46:	6078      	str	r0, [r7, #4]
 8007c48:	460b      	mov	r3, r1
 8007c4a:	70fb      	strb	r3, [r7, #3]
	uint8_t InterruptConfig;
	FixPoint1616_t ThresholdLow;
	FixPoint1616_t ThresholdHigh;
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007c4c:	2300      	movs	r3, #0
 8007c4e:	75fb      	strb	r3, [r7, #23]

	InterruptConfig = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	f893 30da 	ldrb.w	r3, [r3, #218]	; 0xda
 8007c56:	75bb      	strb	r3, [r7, #22]
		Pin0GpioFunctionality);

	if ((InterruptConfig ==
 8007c58:	7dbb      	ldrb	r3, [r7, #22]
 8007c5a:	2b01      	cmp	r3, #1
 8007c5c:	d005      	beq.n	8007c6a <VL53L0X_CheckAndLoadInterruptSettings+0x2a>
		VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_LOW) ||
 8007c5e:	7dbb      	ldrb	r3, [r7, #22]
 8007c60:	2b02      	cmp	r3, #2
 8007c62:	d002      	beq.n	8007c6a <VL53L0X_CheckAndLoadInterruptSettings+0x2a>
		(InterruptConfig ==
		VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_HIGH) ||
 8007c64:	7dbb      	ldrb	r3, [r7, #22]
 8007c66:	2b03      	cmp	r3, #3
 8007c68:	d147      	bne.n	8007cfa <VL53L0X_CheckAndLoadInterruptSettings+0xba>
		(InterruptConfig ==
		VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_OUT)) {

		Status = VL53L0X_GetInterruptThresholds(Dev,
 8007c6a:	f107 030c 	add.w	r3, r7, #12
 8007c6e:	f107 0210 	add.w	r2, r7, #16
 8007c72:	2101      	movs	r1, #1
 8007c74:	6878      	ldr	r0, [r7, #4]
 8007c76:	f000 fbc3 	bl	8008400 <VL53L0X_GetInterruptThresholds>
 8007c7a:	4603      	mov	r3, r0
 8007c7c:	75fb      	strb	r3, [r7, #23]
			VL53L0X_DEVICEMODE_CONTINUOUS_RANGING,
			&ThresholdLow, &ThresholdHigh);

		if (((ThresholdLow > 255*65536) ||
 8007c7e:	693b      	ldr	r3, [r7, #16]
 8007c80:	f5b3 0f7f 	cmp.w	r3, #16711680	; 0xff0000
 8007c84:	d803      	bhi.n	8007c8e <VL53L0X_CheckAndLoadInterruptSettings+0x4e>
			(ThresholdHigh > 255*65536)) &&
 8007c86:	68fb      	ldr	r3, [r7, #12]
		if (((ThresholdLow > 255*65536) ||
 8007c88:	f5b3 0f7f 	cmp.w	r3, #16711680	; 0xff0000
 8007c8c:	d935      	bls.n	8007cfa <VL53L0X_CheckAndLoadInterruptSettings+0xba>
			(ThresholdHigh > 255*65536)) &&
 8007c8e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	d131      	bne.n	8007cfa <VL53L0X_CheckAndLoadInterruptSettings+0xba>
			(Status == VL53L0X_ERROR_NONE)) {

			if (StartNotStopFlag != 0) {
 8007c96:	78fb      	ldrb	r3, [r7, #3]
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	d006      	beq.n	8007caa <VL53L0X_CheckAndLoadInterruptSettings+0x6a>
				Status = VL53L0X_load_tuning_settings(Dev,
 8007c9c:	491a      	ldr	r1, [pc, #104]	; (8007d08 <VL53L0X_CheckAndLoadInterruptSettings+0xc8>)
 8007c9e:	6878      	ldr	r0, [r7, #4]
 8007ca0:	f002 ff86 	bl	800abb0 <VL53L0X_load_tuning_settings>
 8007ca4:	4603      	mov	r3, r0
 8007ca6:	75fb      	strb	r3, [r7, #23]
 8007ca8:	e027      	b.n	8007cfa <VL53L0X_CheckAndLoadInterruptSettings+0xba>
					InterruptThresholdSettings);
			} else {
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x04);
 8007caa:	2204      	movs	r2, #4
 8007cac:	21ff      	movs	r1, #255	; 0xff
 8007cae:	6878      	ldr	r0, [r7, #4]
 8007cb0:	f003 fe94 	bl	800b9dc <VL53L0X_WrByte>
 8007cb4:	4603      	mov	r3, r0
 8007cb6:	461a      	mov	r2, r3
 8007cb8:	7dfb      	ldrb	r3, [r7, #23]
 8007cba:	4313      	orrs	r3, r2
 8007cbc:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0x70, 0x00);
 8007cbe:	2200      	movs	r2, #0
 8007cc0:	2170      	movs	r1, #112	; 0x70
 8007cc2:	6878      	ldr	r0, [r7, #4]
 8007cc4:	f003 fe8a 	bl	800b9dc <VL53L0X_WrByte>
 8007cc8:	4603      	mov	r3, r0
 8007cca:	461a      	mov	r2, r3
 8007ccc:	7dfb      	ldrb	r3, [r7, #23]
 8007cce:	4313      	orrs	r3, r2
 8007cd0:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8007cd2:	2200      	movs	r2, #0
 8007cd4:	21ff      	movs	r1, #255	; 0xff
 8007cd6:	6878      	ldr	r0, [r7, #4]
 8007cd8:	f003 fe80 	bl	800b9dc <VL53L0X_WrByte>
 8007cdc:	4603      	mov	r3, r0
 8007cde:	461a      	mov	r2, r3
 8007ce0:	7dfb      	ldrb	r3, [r7, #23]
 8007ce2:	4313      	orrs	r3, r2
 8007ce4:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 8007ce6:	2200      	movs	r2, #0
 8007ce8:	2180      	movs	r1, #128	; 0x80
 8007cea:	6878      	ldr	r0, [r7, #4]
 8007cec:	f003 fe76 	bl	800b9dc <VL53L0X_WrByte>
 8007cf0:	4603      	mov	r3, r0
 8007cf2:	461a      	mov	r2, r3
 8007cf4:	7dfb      	ldrb	r3, [r7, #23]
 8007cf6:	4313      	orrs	r3, r2
 8007cf8:	75fb      	strb	r3, [r7, #23]
		}


	}

	return Status;
 8007cfa:	f997 3017 	ldrsb.w	r3, [r7, #23]

}
 8007cfe:	4618      	mov	r0, r3
 8007d00:	3718      	adds	r7, #24
 8007d02:	46bd      	mov	sp, r7
 8007d04:	bd80      	pop	{r7, pc}
 8007d06:	bf00      	nop
 8007d08:	20008d8c 	.word	0x20008d8c

08007d0c <VL53L0X_StartMeasurement>:


VL53L0X_Error VL53L0X_StartMeasurement(VL53L0X_DEV Dev)
{
 8007d0c:	b580      	push	{r7, lr}
 8007d0e:	b086      	sub	sp, #24
 8007d10:	af00      	add	r7, sp, #0
 8007d12:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007d14:	2300      	movs	r3, #0
 8007d16:	75fb      	strb	r3, [r7, #23]
	VL53L0X_DeviceModes DeviceMode;
	uint8_t Byte;
	uint8_t StartStopByte = VL53L0X_REG_SYSRANGE_MODE_START_STOP;
 8007d18:	2301      	movs	r3, #1
 8007d1a:	73fb      	strb	r3, [r7, #15]
	uint32_t LoopNb;
	LOG_FUNCTION_START("");

	/* Get Current DeviceMode */
	VL53L0X_GetDeviceMode(Dev, &DeviceMode);
 8007d1c:	f107 030e 	add.w	r3, r7, #14
 8007d20:	4619      	mov	r1, r3
 8007d22:	6878      	ldr	r0, [r7, #4]
 8007d24:	f7ff fb20 	bl	8007368 <VL53L0X_GetDeviceMode>

	Status = VL53L0X_WrByte(Dev, 0x80, 0x01);
 8007d28:	2201      	movs	r2, #1
 8007d2a:	2180      	movs	r1, #128	; 0x80
 8007d2c:	6878      	ldr	r0, [r7, #4]
 8007d2e:	f003 fe55 	bl	800b9dc <VL53L0X_WrByte>
 8007d32:	4603      	mov	r3, r0
 8007d34:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8007d36:	2201      	movs	r2, #1
 8007d38:	21ff      	movs	r1, #255	; 0xff
 8007d3a:	6878      	ldr	r0, [r7, #4]
 8007d3c:	f003 fe4e 	bl	800b9dc <VL53L0X_WrByte>
 8007d40:	4603      	mov	r3, r0
 8007d42:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x00, 0x00);
 8007d44:	2200      	movs	r2, #0
 8007d46:	2100      	movs	r1, #0
 8007d48:	6878      	ldr	r0, [r7, #4]
 8007d4a:	f003 fe47 	bl	800b9dc <VL53L0X_WrByte>
 8007d4e:	4603      	mov	r3, r0
 8007d50:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x91, PALDevDataGet(Dev, StopVariable));
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	f893 313a 	ldrb.w	r3, [r3, #314]	; 0x13a
 8007d58:	461a      	mov	r2, r3
 8007d5a:	2191      	movs	r1, #145	; 0x91
 8007d5c:	6878      	ldr	r0, [r7, #4]
 8007d5e:	f003 fe3d 	bl	800b9dc <VL53L0X_WrByte>
 8007d62:	4603      	mov	r3, r0
 8007d64:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x00, 0x01);
 8007d66:	2201      	movs	r2, #1
 8007d68:	2100      	movs	r1, #0
 8007d6a:	6878      	ldr	r0, [r7, #4]
 8007d6c:	f003 fe36 	bl	800b9dc <VL53L0X_WrByte>
 8007d70:	4603      	mov	r3, r0
 8007d72:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8007d74:	2200      	movs	r2, #0
 8007d76:	21ff      	movs	r1, #255	; 0xff
 8007d78:	6878      	ldr	r0, [r7, #4]
 8007d7a:	f003 fe2f 	bl	800b9dc <VL53L0X_WrByte>
 8007d7e:	4603      	mov	r3, r0
 8007d80:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x80, 0x00);
 8007d82:	2200      	movs	r2, #0
 8007d84:	2180      	movs	r1, #128	; 0x80
 8007d86:	6878      	ldr	r0, [r7, #4]
 8007d88:	f003 fe28 	bl	800b9dc <VL53L0X_WrByte>
 8007d8c:	4603      	mov	r3, r0
 8007d8e:	75fb      	strb	r3, [r7, #23]

	switch (DeviceMode) {
 8007d90:	7bbb      	ldrb	r3, [r7, #14]
 8007d92:	2b03      	cmp	r3, #3
 8007d94:	d054      	beq.n	8007e40 <VL53L0X_StartMeasurement+0x134>
 8007d96:	2b03      	cmp	r3, #3
 8007d98:	dc6c      	bgt.n	8007e74 <VL53L0X_StartMeasurement+0x168>
 8007d9a:	2b00      	cmp	r3, #0
 8007d9c:	d002      	beq.n	8007da4 <VL53L0X_StartMeasurement+0x98>
 8007d9e:	2b01      	cmp	r3, #1
 8007da0:	d034      	beq.n	8007e0c <VL53L0X_StartMeasurement+0x100>
 8007da2:	e067      	b.n	8007e74 <VL53L0X_StartMeasurement+0x168>
	case VL53L0X_DEVICEMODE_SINGLE_RANGING:
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START, 0x01);
 8007da4:	2201      	movs	r2, #1
 8007da6:	2100      	movs	r1, #0
 8007da8:	6878      	ldr	r0, [r7, #4]
 8007daa:	f003 fe17 	bl	800b9dc <VL53L0X_WrByte>
 8007dae:	4603      	mov	r3, r0
 8007db0:	75fb      	strb	r3, [r7, #23]

		Byte = StartStopByte;
 8007db2:	7bfb      	ldrb	r3, [r7, #15]
 8007db4:	737b      	strb	r3, [r7, #13]
		if (Status == VL53L0X_ERROR_NONE) {
 8007db6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007dba:	2b00      	cmp	r3, #0
 8007dbc:	d15d      	bne.n	8007e7a <VL53L0X_StartMeasurement+0x16e>
			/* Wait until start bit has been cleared */
			LoopNb = 0;
 8007dbe:	2300      	movs	r3, #0
 8007dc0:	613b      	str	r3, [r7, #16]
			do {
				if (LoopNb > 0)
 8007dc2:	693b      	ldr	r3, [r7, #16]
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	d008      	beq.n	8007dda <VL53L0X_StartMeasurement+0xce>
					Status = VL53L0X_RdByte(Dev,
 8007dc8:	f107 030d 	add.w	r3, r7, #13
 8007dcc:	461a      	mov	r2, r3
 8007dce:	2100      	movs	r1, #0
 8007dd0:	6878      	ldr	r0, [r7, #4]
 8007dd2:	f003 fe85 	bl	800bae0 <VL53L0X_RdByte>
 8007dd6:	4603      	mov	r3, r0
 8007dd8:	75fb      	strb	r3, [r7, #23]
					VL53L0X_REG_SYSRANGE_START, &Byte);
				LoopNb = LoopNb + 1;
 8007dda:	693b      	ldr	r3, [r7, #16]
 8007ddc:	3301      	adds	r3, #1
 8007dde:	613b      	str	r3, [r7, #16]
			} while (((Byte & StartStopByte) == StartStopByte)
 8007de0:	7b7a      	ldrb	r2, [r7, #13]
 8007de2:	7bfb      	ldrb	r3, [r7, #15]
 8007de4:	4013      	ands	r3, r2
 8007de6:	b2db      	uxtb	r3, r3
				&& (Status == VL53L0X_ERROR_NONE)
				&& (LoopNb < VL53L0X_DEFAULT_MAX_LOOP));
 8007de8:	7bfa      	ldrb	r2, [r7, #15]
 8007dea:	429a      	cmp	r2, r3
 8007dec:	d107      	bne.n	8007dfe <VL53L0X_StartMeasurement+0xf2>
				&& (Status == VL53L0X_ERROR_NONE)
 8007dee:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	d103      	bne.n	8007dfe <VL53L0X_StartMeasurement+0xf2>
				&& (LoopNb < VL53L0X_DEFAULT_MAX_LOOP));
 8007df6:	693b      	ldr	r3, [r7, #16]
 8007df8:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8007dfc:	d3e1      	bcc.n	8007dc2 <VL53L0X_StartMeasurement+0xb6>

			if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP)
 8007dfe:	693b      	ldr	r3, [r7, #16]
 8007e00:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8007e04:	d339      	bcc.n	8007e7a <VL53L0X_StartMeasurement+0x16e>
				Status = VL53L0X_ERROR_TIME_OUT;
 8007e06:	23f9      	movs	r3, #249	; 0xf9
 8007e08:	75fb      	strb	r3, [r7, #23]

		}

		break;
 8007e0a:	e036      	b.n	8007e7a <VL53L0X_StartMeasurement+0x16e>
	case VL53L0X_DEVICEMODE_CONTINUOUS_RANGING:
		/* Back-to-back mode */

		/* Check if need to apply interrupt settings */
		if (Status == VL53L0X_ERROR_NONE)
 8007e0c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007e10:	2b00      	cmp	r3, #0
 8007e12:	d105      	bne.n	8007e20 <VL53L0X_StartMeasurement+0x114>
			Status = VL53L0X_CheckAndLoadInterruptSettings(Dev, 1);
 8007e14:	2101      	movs	r1, #1
 8007e16:	6878      	ldr	r0, [r7, #4]
 8007e18:	f7ff ff12 	bl	8007c40 <VL53L0X_CheckAndLoadInterruptSettings>
 8007e1c:	4603      	mov	r3, r0
 8007e1e:	75fb      	strb	r3, [r7, #23]

		Status = VL53L0X_WrByte(Dev,
 8007e20:	2202      	movs	r2, #2
 8007e22:	2100      	movs	r1, #0
 8007e24:	6878      	ldr	r0, [r7, #4]
 8007e26:	f003 fdd9 	bl	800b9dc <VL53L0X_WrByte>
 8007e2a:	4603      	mov	r3, r0
 8007e2c:	75fb      	strb	r3, [r7, #23]
		VL53L0X_REG_SYSRANGE_START,
		VL53L0X_REG_SYSRANGE_MODE_BACKTOBACK);
		if (Status == VL53L0X_ERROR_NONE) {
 8007e2e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	d123      	bne.n	8007e7e <VL53L0X_StartMeasurement+0x172>
			/* Set PAL State to Running */
			PALDevDataSet(Dev, PalState, VL53L0X_STATE_RUNNING);
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	2204      	movs	r2, #4
 8007e3a:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
		}
		break;
 8007e3e:	e01e      	b.n	8007e7e <VL53L0X_StartMeasurement+0x172>
	case VL53L0X_DEVICEMODE_CONTINUOUS_TIMED_RANGING:
		/* Continuous mode */
		/* Check if need to apply interrupt settings */
		if (Status == VL53L0X_ERROR_NONE)
 8007e40:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007e44:	2b00      	cmp	r3, #0
 8007e46:	d105      	bne.n	8007e54 <VL53L0X_StartMeasurement+0x148>
			Status = VL53L0X_CheckAndLoadInterruptSettings(Dev, 1);
 8007e48:	2101      	movs	r1, #1
 8007e4a:	6878      	ldr	r0, [r7, #4]
 8007e4c:	f7ff fef8 	bl	8007c40 <VL53L0X_CheckAndLoadInterruptSettings>
 8007e50:	4603      	mov	r3, r0
 8007e52:	75fb      	strb	r3, [r7, #23]

		Status = VL53L0X_WrByte(Dev,
 8007e54:	2204      	movs	r2, #4
 8007e56:	2100      	movs	r1, #0
 8007e58:	6878      	ldr	r0, [r7, #4]
 8007e5a:	f003 fdbf 	bl	800b9dc <VL53L0X_WrByte>
 8007e5e:	4603      	mov	r3, r0
 8007e60:	75fb      	strb	r3, [r7, #23]
		VL53L0X_REG_SYSRANGE_START,
		VL53L0X_REG_SYSRANGE_MODE_TIMED);

		if (Status == VL53L0X_ERROR_NONE) {
 8007e62:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007e66:	2b00      	cmp	r3, #0
 8007e68:	d10b      	bne.n	8007e82 <VL53L0X_StartMeasurement+0x176>
			/* Set PAL State to Running */
			PALDevDataSet(Dev, PalState, VL53L0X_STATE_RUNNING);
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	2204      	movs	r2, #4
 8007e6e:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
		}
		break;
 8007e72:	e006      	b.n	8007e82 <VL53L0X_StartMeasurement+0x176>
	default:
		/* Selected mode not supported */
		Status = VL53L0X_ERROR_MODE_NOT_SUPPORTED;
 8007e74:	23f8      	movs	r3, #248	; 0xf8
 8007e76:	75fb      	strb	r3, [r7, #23]
 8007e78:	e004      	b.n	8007e84 <VL53L0X_StartMeasurement+0x178>
		break;
 8007e7a:	bf00      	nop
 8007e7c:	e002      	b.n	8007e84 <VL53L0X_StartMeasurement+0x178>
		break;
 8007e7e:	bf00      	nop
 8007e80:	e000      	b.n	8007e84 <VL53L0X_StartMeasurement+0x178>
		break;
 8007e82:	bf00      	nop
	}


	LOG_FUNCTION_END(Status);
	return Status;
 8007e84:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007e88:	4618      	mov	r0, r3
 8007e8a:	3718      	adds	r7, #24
 8007e8c:	46bd      	mov	sp, r7
 8007e8e:	bd80      	pop	{r7, pc}

08007e90 <VL53L0X_GetMeasurementDataReady>:
	return Status;
}

VL53L0X_Error VL53L0X_GetMeasurementDataReady(VL53L0X_DEV Dev,
	uint8_t *pMeasurementDataReady)
{
 8007e90:	b580      	push	{r7, lr}
 8007e92:	b084      	sub	sp, #16
 8007e94:	af00      	add	r7, sp, #0
 8007e96:	6078      	str	r0, [r7, #4]
 8007e98:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007e9a:	2300      	movs	r3, #0
 8007e9c:	73fb      	strb	r3, [r7, #15]
	uint8_t SysRangeStatusRegister;
	uint8_t InterruptConfig;
	uint32_t InterruptMask;
	LOG_FUNCTION_START("");

	InterruptConfig = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	f893 30da 	ldrb.w	r3, [r3, #218]	; 0xda
 8007ea4:	73bb      	strb	r3, [r7, #14]
		Pin0GpioFunctionality);

	if (InterruptConfig ==
 8007ea6:	7bbb      	ldrb	r3, [r7, #14]
 8007ea8:	2b04      	cmp	r3, #4
 8007eaa:	d112      	bne.n	8007ed2 <VL53L0X_GetMeasurementDataReady+0x42>
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY) {
		Status = VL53L0X_GetInterruptMaskStatus(Dev, &InterruptMask);
 8007eac:	f107 0308 	add.w	r3, r7, #8
 8007eb0:	4619      	mov	r1, r3
 8007eb2:	6878      	ldr	r0, [r7, #4]
 8007eb4:	f000 fb1a 	bl	80084ec <VL53L0X_GetInterruptMaskStatus>
 8007eb8:	4603      	mov	r3, r0
 8007eba:	73fb      	strb	r3, [r7, #15]
		if (InterruptMask ==
 8007ebc:	68bb      	ldr	r3, [r7, #8]
 8007ebe:	2b04      	cmp	r3, #4
 8007ec0:	d103      	bne.n	8007eca <VL53L0X_GetMeasurementDataReady+0x3a>
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY)
			*pMeasurementDataReady = 1;
 8007ec2:	683b      	ldr	r3, [r7, #0]
 8007ec4:	2201      	movs	r2, #1
 8007ec6:	701a      	strb	r2, [r3, #0]
 8007ec8:	e01c      	b.n	8007f04 <VL53L0X_GetMeasurementDataReady+0x74>
		else
			*pMeasurementDataReady = 0;
 8007eca:	683b      	ldr	r3, [r7, #0]
 8007ecc:	2200      	movs	r2, #0
 8007ece:	701a      	strb	r2, [r3, #0]
 8007ed0:	e018      	b.n	8007f04 <VL53L0X_GetMeasurementDataReady+0x74>
	} else {
		Status = VL53L0X_RdByte(Dev, VL53L0X_REG_RESULT_RANGE_STATUS,
 8007ed2:	f107 030d 	add.w	r3, r7, #13
 8007ed6:	461a      	mov	r2, r3
 8007ed8:	2114      	movs	r1, #20
 8007eda:	6878      	ldr	r0, [r7, #4]
 8007edc:	f003 fe00 	bl	800bae0 <VL53L0X_RdByte>
 8007ee0:	4603      	mov	r3, r0
 8007ee2:	73fb      	strb	r3, [r7, #15]
			&SysRangeStatusRegister);
		if (Status == VL53L0X_ERROR_NONE) {
 8007ee4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007ee8:	2b00      	cmp	r3, #0
 8007eea:	d10b      	bne.n	8007f04 <VL53L0X_GetMeasurementDataReady+0x74>
			if (SysRangeStatusRegister & 0x01)
 8007eec:	7b7b      	ldrb	r3, [r7, #13]
 8007eee:	f003 0301 	and.w	r3, r3, #1
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	d003      	beq.n	8007efe <VL53L0X_GetMeasurementDataReady+0x6e>
				*pMeasurementDataReady = 1;
 8007ef6:	683b      	ldr	r3, [r7, #0]
 8007ef8:	2201      	movs	r2, #1
 8007efa:	701a      	strb	r2, [r3, #0]
 8007efc:	e002      	b.n	8007f04 <VL53L0X_GetMeasurementDataReady+0x74>
			else
				*pMeasurementDataReady = 0;
 8007efe:	683b      	ldr	r3, [r7, #0]
 8007f00:	2200      	movs	r2, #0
 8007f02:	701a      	strb	r2, [r3, #0]
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8007f04:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007f08:	4618      	mov	r0, r3
 8007f0a:	3710      	adds	r7, #16
 8007f0c:	46bd      	mov	sp, r7
 8007f0e:	bd80      	pop	{r7, pc}

08007f10 <VL53L0X_GetRangingMeasurementData>:
}


VL53L0X_Error VL53L0X_GetRangingMeasurementData(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData)
{
 8007f10:	b5b0      	push	{r4, r5, r7, lr}
 8007f12:	b096      	sub	sp, #88	; 0x58
 8007f14:	af02      	add	r7, sp, #8
 8007f16:	6078      	str	r0, [r7, #4]
 8007f18:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007f1a:	2300      	movs	r3, #0
 8007f1c:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	 * use multi read even if some registers are not useful, result will
	 * be more efficient
	 * start reading at 0x14 dec20
	 * end reading at 0x21 dec33 total 14 bytes to read
	 */
	Status = VL53L0X_ReadMulti(Dev, 0x14, localBuffer, 12);
 8007f20:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8007f24:	230c      	movs	r3, #12
 8007f26:	2114      	movs	r1, #20
 8007f28:	6878      	ldr	r0, [r7, #4]
 8007f2a:	f003 fd2b 	bl	800b984 <VL53L0X_ReadMulti>
 8007f2e:	4603      	mov	r3, r0
 8007f30:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

	if (Status == VL53L0X_ERROR_NONE) {
 8007f34:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8007f38:	2b00      	cmp	r3, #0
 8007f3a:	f040 80d1 	bne.w	80080e0 <VL53L0X_GetRangingMeasurementData+0x1d0>

		pRangingMeasurementData->ZoneId = 0; /* Only one zone */
 8007f3e:	683b      	ldr	r3, [r7, #0]
 8007f40:	2200      	movs	r2, #0
 8007f42:	759a      	strb	r2, [r3, #22]
		pRangingMeasurementData->TimeStamp = 0; /* Not Implemented */
 8007f44:	683b      	ldr	r3, [r7, #0]
 8007f46:	2200      	movs	r2, #0
 8007f48:	601a      	str	r2, [r3, #0]

		tmpuint16 = VL53L0X_MAKEUINT16(localBuffer[11], localBuffer[10]);
 8007f4a:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8007f4e:	b29b      	uxth	r3, r3
 8007f50:	021b      	lsls	r3, r3, #8
 8007f52:	b29a      	uxth	r2, r3
 8007f54:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8007f58:	b29b      	uxth	r3, r3
 8007f5a:	4413      	add	r3, r2
 8007f5c:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
		/* cut1.1 if SYSTEM__RANGE_CONFIG if 1 range is 2bits fractional
		 *(format 11.2) else no fractional
		 */

		pRangingMeasurementData->MeasurementTimeUsec = 0;
 8007f60:	683b      	ldr	r3, [r7, #0]
 8007f62:	2200      	movs	r2, #0
 8007f64:	605a      	str	r2, [r3, #4]

		SignalRate = VL53L0X_FIXPOINT97TOFIXPOINT1616(
 8007f66:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8007f6a:	b29b      	uxth	r3, r3
 8007f6c:	021b      	lsls	r3, r3, #8
 8007f6e:	b29a      	uxth	r2, r3
 8007f70:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007f74:	b29b      	uxth	r3, r3
 8007f76:	4413      	add	r3, r2
 8007f78:	b29b      	uxth	r3, r3
 8007f7a:	025b      	lsls	r3, r3, #9
 8007f7c:	647b      	str	r3, [r7, #68]	; 0x44
			VL53L0X_MAKEUINT16(localBuffer[7], localBuffer[6]));
		/* peak_signal_count_rate_rtn_mcps */
		pRangingMeasurementData->SignalRateRtnMegaCps = SignalRate;
 8007f7e:	683b      	ldr	r3, [r7, #0]
 8007f80:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007f82:	60da      	str	r2, [r3, #12]

		AmbientRate = VL53L0X_MAKEUINT16(localBuffer[9], localBuffer[8]);
 8007f84:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8007f88:	b29b      	uxth	r3, r3
 8007f8a:	021b      	lsls	r3, r3, #8
 8007f8c:	b29a      	uxth	r2, r3
 8007f8e:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8007f92:	b29b      	uxth	r3, r3
 8007f94:	4413      	add	r3, r2
 8007f96:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
		pRangingMeasurementData->AmbientRateRtnMegaCps =
			VL53L0X_FIXPOINT97TOFIXPOINT1616(AmbientRate);
 8007f9a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8007f9e:	025b      	lsls	r3, r3, #9
 8007fa0:	461a      	mov	r2, r3
		pRangingMeasurementData->AmbientRateRtnMegaCps =
 8007fa2:	683b      	ldr	r3, [r7, #0]
 8007fa4:	611a      	str	r2, [r3, #16]

		EffectiveSpadRtnCount = VL53L0X_MAKEUINT16(localBuffer[3],
 8007fa6:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8007faa:	b29b      	uxth	r3, r3
 8007fac:	021b      	lsls	r3, r3, #8
 8007fae:	b29a      	uxth	r2, r3
 8007fb0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007fb4:	b29b      	uxth	r3, r3
 8007fb6:	4413      	add	r3, r2
 8007fb8:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
			localBuffer[2]);
		/* EffectiveSpadRtnCount is 8.8 format */
		pRangingMeasurementData->EffectiveSpadRtnCount =
 8007fbc:	683b      	ldr	r3, [r7, #0]
 8007fbe:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8007fc2:	829a      	strh	r2, [r3, #20]
			EffectiveSpadRtnCount;

		DeviceRangeStatus = localBuffer[0];
 8007fc4:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8007fc8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

		/* Get Linearity Corrective Gain */
		LinearityCorrectiveGain = PALDevDataGet(Dev,
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	f8b3 3152 	ldrh.w	r3, [r3, #338]	; 0x152
 8007fd2:	87bb      	strh	r3, [r7, #60]	; 0x3c
			LinearityCorrectiveGain);

		/* Get ranging configuration */
		RangeFractionalEnable = PALDevDataGet(Dev,
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	f893 3131 	ldrb.w	r3, [r3, #305]	; 0x131
 8007fda:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
			RangeFractionalEnable);

		if (LinearityCorrectiveGain != 1000) {
 8007fde:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8007fe0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007fe4:	d046      	beq.n	8008074 <VL53L0X_GetRangingMeasurementData+0x164>

			tmpuint16 = (uint16_t)((LinearityCorrectiveGain
				* tmpuint16 + 500) / 1000);
 8007fe6:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8007fe8:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 8007fec:	fb02 f303 	mul.w	r3, r2, r3
 8007ff0:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8007ff4:	4a57      	ldr	r2, [pc, #348]	; (8008154 <VL53L0X_GetRangingMeasurementData+0x244>)
 8007ff6:	fb82 1203 	smull	r1, r2, r2, r3
 8007ffa:	1192      	asrs	r2, r2, #6
 8007ffc:	17db      	asrs	r3, r3, #31
 8007ffe:	1ad3      	subs	r3, r2, r3
			tmpuint16 = (uint16_t)((LinearityCorrectiveGain
 8008000:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

			/* Implement Xtalk */
			VL53L0X_GETPARAMETERFIELD(Dev,
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	6a1b      	ldr	r3, [r3, #32]
 8008008:	873b      	strh	r3, [r7, #56]	; 0x38
				XTalkCompensationRateMegaCps,
				XTalkCompensationRateMegaCps);
			VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	7f1b      	ldrb	r3, [r3, #28]
 800800e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
				XTalkCompensationEnable);

			if (XTalkCompensationEnable) {
 8008012:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008016:	2b00      	cmp	r3, #0
 8008018:	d02c      	beq.n	8008074 <VL53L0X_GetRangingMeasurementData+0x164>

				if ((SignalRate
					- ((XTalkCompensationRateMegaCps
					* EffectiveSpadRtnCount) >> 8))
 800801a:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800801c:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8008020:	fb02 f303 	mul.w	r3, r2, r3
 8008024:	121a      	asrs	r2, r3, #8
					<= 0) {
 8008026:	6c7b      	ldr	r3, [r7, #68]	; 0x44
				if ((SignalRate
 8008028:	429a      	cmp	r2, r3
 800802a:	d10d      	bne.n	8008048 <VL53L0X_GetRangingMeasurementData+0x138>
					if (RangeFractionalEnable)
 800802c:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8008030:	2b00      	cmp	r3, #0
 8008032:	d004      	beq.n	800803e <VL53L0X_GetRangingMeasurementData+0x12e>
						XtalkRangeMilliMeter = 8888;
 8008034:	f242 23b8 	movw	r3, #8888	; 0x22b8
 8008038:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 800803c:	e016      	b.n	800806c <VL53L0X_GetRangingMeasurementData+0x15c>
					else
						XtalkRangeMilliMeter = 8888
 800803e:	f648 23e0 	movw	r3, #35552	; 0x8ae0
 8008042:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8008046:	e011      	b.n	800806c <VL53L0X_GetRangingMeasurementData+0x15c>
							<< 2;
				} else {
					XtalkRangeMilliMeter =
					(tmpuint16 * SignalRate)
 8008048:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800804c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800804e:	fb03 f202 	mul.w	r2, r3, r2
						/ (SignalRate
						- ((XTalkCompensationRateMegaCps
						* EffectiveSpadRtnCount)
 8008052:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8008054:	f8b7 1040 	ldrh.w	r1, [r7, #64]	; 0x40
 8008058:	fb01 f303 	mul.w	r3, r1, r3
						>> 8));
 800805c:	121b      	asrs	r3, r3, #8
 800805e:	4619      	mov	r1, r3
						- ((XTalkCompensationRateMegaCps
 8008060:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008062:	1a5b      	subs	r3, r3, r1
						/ (SignalRate
 8008064:	fbb2 f3f3 	udiv	r3, r2, r3
					XtalkRangeMilliMeter =
 8008068:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
				}

				tmpuint16 = XtalkRangeMilliMeter;
 800806c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8008070:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
			}

		}

		if (RangeFractionalEnable) {
 8008074:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8008078:	2b00      	cmp	r3, #0
 800807a:	d00d      	beq.n	8008098 <VL53L0X_GetRangingMeasurementData+0x188>
			pRangingMeasurementData->RangeMilliMeter =
				(uint16_t)((tmpuint16) >> 2);
 800807c:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8008080:	089b      	lsrs	r3, r3, #2
 8008082:	b29a      	uxth	r2, r3
			pRangingMeasurementData->RangeMilliMeter =
 8008084:	683b      	ldr	r3, [r7, #0]
 8008086:	811a      	strh	r2, [r3, #8]
			pRangingMeasurementData->RangeFractionalPart =
				(uint8_t)((tmpuint16 & 0x03) << 6);
 8008088:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800808c:	b2db      	uxtb	r3, r3
 800808e:	019b      	lsls	r3, r3, #6
 8008090:	b2da      	uxtb	r2, r3
			pRangingMeasurementData->RangeFractionalPart =
 8008092:	683b      	ldr	r3, [r7, #0]
 8008094:	75da      	strb	r2, [r3, #23]
 8008096:	e006      	b.n	80080a6 <VL53L0X_GetRangingMeasurementData+0x196>
		} else {
			pRangingMeasurementData->RangeMilliMeter = tmpuint16;
 8008098:	683b      	ldr	r3, [r7, #0]
 800809a:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 800809e:	811a      	strh	r2, [r3, #8]
			pRangingMeasurementData->RangeFractionalPart = 0;
 80080a0:	683b      	ldr	r3, [r7, #0]
 80080a2:	2200      	movs	r2, #0
 80080a4:	75da      	strb	r2, [r3, #23]
		 * For a standard definition of RangeStatus, this should
		 * return 0 in case of good result after a ranging
		 * The range status depends on the device so call a device
		 * specific function to obtain the right Status.
		 */
		Status |= VL53L0X_get_pal_range_status(Dev, DeviceRangeStatus,
 80080a6:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 80080aa:	f897 103f 	ldrb.w	r1, [r7, #63]	; 0x3f
 80080ae:	f107 0336 	add.w	r3, r7, #54	; 0x36
 80080b2:	9301      	str	r3, [sp, #4]
 80080b4:	683b      	ldr	r3, [r7, #0]
 80080b6:	9300      	str	r3, [sp, #0]
 80080b8:	4613      	mov	r3, r2
 80080ba:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80080bc:	6878      	ldr	r0, [r7, #4]
 80080be:	f003 fa15 	bl	800b4ec <VL53L0X_get_pal_range_status>
 80080c2:	4603      	mov	r3, r0
 80080c4:	461a      	mov	r2, r3
 80080c6:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80080ca:	4313      	orrs	r3, r2
 80080cc:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
			SignalRate, EffectiveSpadRtnCount,
			pRangingMeasurementData, &PalRangeStatus);

		if (Status == VL53L0X_ERROR_NONE)
 80080d0:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 80080d4:	2b00      	cmp	r3, #0
 80080d6:	d103      	bne.n	80080e0 <VL53L0X_GetRangingMeasurementData+0x1d0>
			pRangingMeasurementData->RangeStatus = PalRangeStatus;
 80080d8:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 80080dc:	683b      	ldr	r3, [r7, #0]
 80080de:	761a      	strb	r2, [r3, #24]

	}

	if (Status == VL53L0X_ERROR_NONE) {
 80080e0:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	d12f      	bne.n	8008148 <VL53L0X_GetRangingMeasurementData+0x238>
		/* Copy last read data into Dev buffer */
		LastRangeDataBuffer = PALDevDataGet(Dev, LastRangeMeasure);
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	f107 040c 	add.w	r4, r7, #12
 80080ee:	f103 0550 	add.w	r5, r3, #80	; 0x50
 80080f2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80080f4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80080f6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80080fa:	e884 0007 	stmia.w	r4, {r0, r1, r2}

		LastRangeDataBuffer.RangeMilliMeter =
			pRangingMeasurementData->RangeMilliMeter;
 80080fe:	683b      	ldr	r3, [r7, #0]
 8008100:	891b      	ldrh	r3, [r3, #8]
		LastRangeDataBuffer.RangeMilliMeter =
 8008102:	82bb      	strh	r3, [r7, #20]
		LastRangeDataBuffer.RangeFractionalPart =
			pRangingMeasurementData->RangeFractionalPart;
 8008104:	683b      	ldr	r3, [r7, #0]
 8008106:	7ddb      	ldrb	r3, [r3, #23]
		LastRangeDataBuffer.RangeFractionalPart =
 8008108:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
		LastRangeDataBuffer.RangeDMaxMilliMeter =
			pRangingMeasurementData->RangeDMaxMilliMeter;
 800810c:	683b      	ldr	r3, [r7, #0]
 800810e:	895b      	ldrh	r3, [r3, #10]
		LastRangeDataBuffer.RangeDMaxMilliMeter =
 8008110:	82fb      	strh	r3, [r7, #22]
		LastRangeDataBuffer.MeasurementTimeUsec =
			pRangingMeasurementData->MeasurementTimeUsec;
 8008112:	683b      	ldr	r3, [r7, #0]
 8008114:	685b      	ldr	r3, [r3, #4]
		LastRangeDataBuffer.MeasurementTimeUsec =
 8008116:	613b      	str	r3, [r7, #16]
		LastRangeDataBuffer.SignalRateRtnMegaCps =
			pRangingMeasurementData->SignalRateRtnMegaCps;
 8008118:	683b      	ldr	r3, [r7, #0]
 800811a:	68db      	ldr	r3, [r3, #12]
		LastRangeDataBuffer.SignalRateRtnMegaCps =
 800811c:	61bb      	str	r3, [r7, #24]
		LastRangeDataBuffer.AmbientRateRtnMegaCps =
			pRangingMeasurementData->AmbientRateRtnMegaCps;
 800811e:	683b      	ldr	r3, [r7, #0]
 8008120:	691b      	ldr	r3, [r3, #16]
		LastRangeDataBuffer.AmbientRateRtnMegaCps =
 8008122:	61fb      	str	r3, [r7, #28]
		LastRangeDataBuffer.EffectiveSpadRtnCount =
			pRangingMeasurementData->EffectiveSpadRtnCount;
 8008124:	683b      	ldr	r3, [r7, #0]
 8008126:	8a9b      	ldrh	r3, [r3, #20]
		LastRangeDataBuffer.EffectiveSpadRtnCount =
 8008128:	843b      	strh	r3, [r7, #32]
		LastRangeDataBuffer.RangeStatus =
			pRangingMeasurementData->RangeStatus;
 800812a:	683b      	ldr	r3, [r7, #0]
 800812c:	7e1b      	ldrb	r3, [r3, #24]
		LastRangeDataBuffer.RangeStatus =
 800812e:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24

		PALDevDataSet(Dev, LastRangeMeasure, LastRangeDataBuffer);
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	f103 0450 	add.w	r4, r3, #80	; 0x50
 8008138:	f107 050c 	add.w	r5, r7, #12
 800813c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800813e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008140:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8008144:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8008148:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
}
 800814c:	4618      	mov	r0, r3
 800814e:	3750      	adds	r7, #80	; 0x50
 8008150:	46bd      	mov	sp, r7
 8008152:	bdb0      	pop	{r4, r5, r7, pc}
 8008154:	10624dd3 	.word	0x10624dd3

08008158 <VL53L0X_PerformSingleRangingMeasurement>:
	return Status;
}

VL53L0X_Error VL53L0X_PerformSingleRangingMeasurement(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData)
{
 8008158:	b580      	push	{r7, lr}
 800815a:	b084      	sub	sp, #16
 800815c:	af00      	add	r7, sp, #0
 800815e:	6078      	str	r0, [r7, #4]
 8008160:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008162:	2300      	movs	r3, #0
 8008164:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	/* This function will do a complete single ranging
	 * Here we fix the mode! */
	Status = VL53L0X_SetDeviceMode(Dev, VL53L0X_DEVICEMODE_SINGLE_RANGING);
 8008166:	2100      	movs	r1, #0
 8008168:	6878      	ldr	r0, [r7, #4]
 800816a:	f7ff f8d1 	bl	8007310 <VL53L0X_SetDeviceMode>
 800816e:	4603      	mov	r3, r0
 8008170:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 8008172:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008176:	2b00      	cmp	r3, #0
 8008178:	d104      	bne.n	8008184 <VL53L0X_PerformSingleRangingMeasurement+0x2c>
		Status = VL53L0X_PerformSingleMeasurement(Dev);
 800817a:	6878      	ldr	r0, [r7, #4]
 800817c:	f7ff fd16 	bl	8007bac <VL53L0X_PerformSingleMeasurement>
 8008180:	4603      	mov	r3, r0
 8008182:	73fb      	strb	r3, [r7, #15]


	if (Status == VL53L0X_ERROR_NONE)
 8008184:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008188:	2b00      	cmp	r3, #0
 800818a:	d105      	bne.n	8008198 <VL53L0X_PerformSingleRangingMeasurement+0x40>
		Status = VL53L0X_GetRangingMeasurementData(Dev,
 800818c:	6839      	ldr	r1, [r7, #0]
 800818e:	6878      	ldr	r0, [r7, #4]
 8008190:	f7ff febe 	bl	8007f10 <VL53L0X_GetRangingMeasurementData>
 8008194:	4603      	mov	r3, r0
 8008196:	73fb      	strb	r3, [r7, #15]
			pRangingMeasurementData);


	if (Status == VL53L0X_ERROR_NONE)
 8008198:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800819c:	2b00      	cmp	r3, #0
 800819e:	d105      	bne.n	80081ac <VL53L0X_PerformSingleRangingMeasurement+0x54>
		Status = VL53L0X_ClearInterruptMask(Dev, 0);
 80081a0:	2100      	movs	r1, #0
 80081a2:	6878      	ldr	r0, [r7, #4]
 80081a4:	f000 f962 	bl	800846c <VL53L0X_ClearInterruptMask>
 80081a8:	4603      	mov	r3, r0
 80081aa:	73fb      	strb	r3, [r7, #15]


	LOG_FUNCTION_END(Status);
	return Status;
 80081ac:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80081b0:	4618      	mov	r0, r3
 80081b2:	3710      	adds	r7, #16
 80081b4:	46bd      	mov	sp, r7
 80081b6:	bd80      	pop	{r7, pc}

080081b8 <VL53L0X_SetGpioConfig>:
/* End Group PAL Measurement Functions */

VL53L0X_Error VL53L0X_SetGpioConfig(VL53L0X_DEV Dev, uint8_t Pin,
	VL53L0X_DeviceModes DeviceMode, VL53L0X_GpioFunctionality Functionality,
	VL53L0X_InterruptPolarity Polarity)
{
 80081b8:	b580      	push	{r7, lr}
 80081ba:	b084      	sub	sp, #16
 80081bc:	af00      	add	r7, sp, #0
 80081be:	6078      	str	r0, [r7, #4]
 80081c0:	4608      	mov	r0, r1
 80081c2:	4611      	mov	r1, r2
 80081c4:	461a      	mov	r2, r3
 80081c6:	4603      	mov	r3, r0
 80081c8:	70fb      	strb	r3, [r7, #3]
 80081ca:	460b      	mov	r3, r1
 80081cc:	70bb      	strb	r3, [r7, #2]
 80081ce:	4613      	mov	r3, r2
 80081d0:	707b      	strb	r3, [r7, #1]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80081d2:	2300      	movs	r3, #0
 80081d4:	73fb      	strb	r3, [r7, #15]
	uint8_t data;

	LOG_FUNCTION_START("");

	if (Pin != 0) {
 80081d6:	78fb      	ldrb	r3, [r7, #3]
 80081d8:	2b00      	cmp	r3, #0
 80081da:	d002      	beq.n	80081e2 <VL53L0X_SetGpioConfig+0x2a>
		Status = VL53L0X_ERROR_GPIO_NOT_EXISTING;
 80081dc:	23f6      	movs	r3, #246	; 0xf6
 80081de:	73fb      	strb	r3, [r7, #15]
 80081e0:	e107      	b.n	80083f2 <VL53L0X_SetGpioConfig+0x23a>
	} else if (DeviceMode == VL53L0X_DEVICEMODE_GPIO_DRIVE) {
 80081e2:	78bb      	ldrb	r3, [r7, #2]
 80081e4:	2b14      	cmp	r3, #20
 80081e6:	d110      	bne.n	800820a <VL53L0X_SetGpioConfig+0x52>
		if (Polarity == VL53L0X_INTERRUPTPOLARITY_LOW)
 80081e8:	7e3b      	ldrb	r3, [r7, #24]
 80081ea:	2b00      	cmp	r3, #0
 80081ec:	d102      	bne.n	80081f4 <VL53L0X_SetGpioConfig+0x3c>
			data = 0x10;
 80081ee:	2310      	movs	r3, #16
 80081f0:	73bb      	strb	r3, [r7, #14]
 80081f2:	e001      	b.n	80081f8 <VL53L0X_SetGpioConfig+0x40>
		else
			data = 1;
 80081f4:	2301      	movs	r3, #1
 80081f6:	73bb      	strb	r3, [r7, #14]

		Status = VL53L0X_WrByte(Dev,
 80081f8:	7bbb      	ldrb	r3, [r7, #14]
 80081fa:	461a      	mov	r2, r3
 80081fc:	2184      	movs	r1, #132	; 0x84
 80081fe:	6878      	ldr	r0, [r7, #4]
 8008200:	f003 fbec 	bl	800b9dc <VL53L0X_WrByte>
 8008204:	4603      	mov	r3, r0
 8008206:	73fb      	strb	r3, [r7, #15]
 8008208:	e0f3      	b.n	80083f2 <VL53L0X_SetGpioConfig+0x23a>
		VL53L0X_REG_GPIO_HV_MUX_ACTIVE_HIGH, data);

	} else if (DeviceMode == VL53L0X_DEVICEMODE_GPIO_OSC) {
 800820a:	78bb      	ldrb	r3, [r7, #2]
 800820c:	2b15      	cmp	r3, #21
 800820e:	f040 8097 	bne.w	8008340 <VL53L0X_SetGpioConfig+0x188>

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 8008212:	2201      	movs	r2, #1
 8008214:	21ff      	movs	r1, #255	; 0xff
 8008216:	6878      	ldr	r0, [r7, #4]
 8008218:	f003 fbe0 	bl	800b9dc <VL53L0X_WrByte>
 800821c:	4603      	mov	r3, r0
 800821e:	461a      	mov	r2, r3
 8008220:	7bfb      	ldrb	r3, [r7, #15]
 8008222:	4313      	orrs	r3, r2
 8008224:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 8008226:	2200      	movs	r2, #0
 8008228:	2100      	movs	r1, #0
 800822a:	6878      	ldr	r0, [r7, #4]
 800822c:	f003 fbd6 	bl	800b9dc <VL53L0X_WrByte>
 8008230:	4603      	mov	r3, r0
 8008232:	461a      	mov	r2, r3
 8008234:	7bfb      	ldrb	r3, [r7, #15]
 8008236:	4313      	orrs	r3, r2
 8008238:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 800823a:	2200      	movs	r2, #0
 800823c:	21ff      	movs	r1, #255	; 0xff
 800823e:	6878      	ldr	r0, [r7, #4]
 8008240:	f003 fbcc 	bl	800b9dc <VL53L0X_WrByte>
 8008244:	4603      	mov	r3, r0
 8008246:	461a      	mov	r2, r3
 8008248:	7bfb      	ldrb	r3, [r7, #15]
 800824a:	4313      	orrs	r3, r2
 800824c:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 800824e:	2201      	movs	r2, #1
 8008250:	2180      	movs	r1, #128	; 0x80
 8008252:	6878      	ldr	r0, [r7, #4]
 8008254:	f003 fbc2 	bl	800b9dc <VL53L0X_WrByte>
 8008258:	4603      	mov	r3, r0
 800825a:	461a      	mov	r2, r3
 800825c:	7bfb      	ldrb	r3, [r7, #15]
 800825e:	4313      	orrs	r3, r2
 8008260:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x85, 0x02);
 8008262:	2202      	movs	r2, #2
 8008264:	2185      	movs	r1, #133	; 0x85
 8008266:	6878      	ldr	r0, [r7, #4]
 8008268:	f003 fbb8 	bl	800b9dc <VL53L0X_WrByte>
 800826c:	4603      	mov	r3, r0
 800826e:	461a      	mov	r2, r3
 8008270:	7bfb      	ldrb	r3, [r7, #15]
 8008272:	4313      	orrs	r3, r2
 8008274:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x04);
 8008276:	2204      	movs	r2, #4
 8008278:	21ff      	movs	r1, #255	; 0xff
 800827a:	6878      	ldr	r0, [r7, #4]
 800827c:	f003 fbae 	bl	800b9dc <VL53L0X_WrByte>
 8008280:	4603      	mov	r3, r0
 8008282:	461a      	mov	r2, r3
 8008284:	7bfb      	ldrb	r3, [r7, #15]
 8008286:	4313      	orrs	r3, r2
 8008288:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xcd, 0x00);
 800828a:	2200      	movs	r2, #0
 800828c:	21cd      	movs	r1, #205	; 0xcd
 800828e:	6878      	ldr	r0, [r7, #4]
 8008290:	f003 fba4 	bl	800b9dc <VL53L0X_WrByte>
 8008294:	4603      	mov	r3, r0
 8008296:	461a      	mov	r2, r3
 8008298:	7bfb      	ldrb	r3, [r7, #15]
 800829a:	4313      	orrs	r3, r2
 800829c:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xcc, 0x11);
 800829e:	2211      	movs	r2, #17
 80082a0:	21cc      	movs	r1, #204	; 0xcc
 80082a2:	6878      	ldr	r0, [r7, #4]
 80082a4:	f003 fb9a 	bl	800b9dc <VL53L0X_WrByte>
 80082a8:	4603      	mov	r3, r0
 80082aa:	461a      	mov	r2, r3
 80082ac:	7bfb      	ldrb	r3, [r7, #15]
 80082ae:	4313      	orrs	r3, r2
 80082b0:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x07);
 80082b2:	2207      	movs	r2, #7
 80082b4:	21ff      	movs	r1, #255	; 0xff
 80082b6:	6878      	ldr	r0, [r7, #4]
 80082b8:	f003 fb90 	bl	800b9dc <VL53L0X_WrByte>
 80082bc:	4603      	mov	r3, r0
 80082be:	461a      	mov	r2, r3
 80082c0:	7bfb      	ldrb	r3, [r7, #15]
 80082c2:	4313      	orrs	r3, r2
 80082c4:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xbe, 0x00);
 80082c6:	2200      	movs	r2, #0
 80082c8:	21be      	movs	r1, #190	; 0xbe
 80082ca:	6878      	ldr	r0, [r7, #4]
 80082cc:	f003 fb86 	bl	800b9dc <VL53L0X_WrByte>
 80082d0:	4603      	mov	r3, r0
 80082d2:	461a      	mov	r2, r3
 80082d4:	7bfb      	ldrb	r3, [r7, #15]
 80082d6:	4313      	orrs	r3, r2
 80082d8:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x06);
 80082da:	2206      	movs	r2, #6
 80082dc:	21ff      	movs	r1, #255	; 0xff
 80082de:	6878      	ldr	r0, [r7, #4]
 80082e0:	f003 fb7c 	bl	800b9dc <VL53L0X_WrByte>
 80082e4:	4603      	mov	r3, r0
 80082e6:	461a      	mov	r2, r3
 80082e8:	7bfb      	ldrb	r3, [r7, #15]
 80082ea:	4313      	orrs	r3, r2
 80082ec:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xcc, 0x09);
 80082ee:	2209      	movs	r2, #9
 80082f0:	21cc      	movs	r1, #204	; 0xcc
 80082f2:	6878      	ldr	r0, [r7, #4]
 80082f4:	f003 fb72 	bl	800b9dc <VL53L0X_WrByte>
 80082f8:	4603      	mov	r3, r0
 80082fa:	461a      	mov	r2, r3
 80082fc:	7bfb      	ldrb	r3, [r7, #15]
 80082fe:	4313      	orrs	r3, r2
 8008300:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 8008302:	2200      	movs	r2, #0
 8008304:	21ff      	movs	r1, #255	; 0xff
 8008306:	6878      	ldr	r0, [r7, #4]
 8008308:	f003 fb68 	bl	800b9dc <VL53L0X_WrByte>
 800830c:	4603      	mov	r3, r0
 800830e:	461a      	mov	r2, r3
 8008310:	7bfb      	ldrb	r3, [r7, #15]
 8008312:	4313      	orrs	r3, r2
 8008314:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 8008316:	2201      	movs	r2, #1
 8008318:	21ff      	movs	r1, #255	; 0xff
 800831a:	6878      	ldr	r0, [r7, #4]
 800831c:	f003 fb5e 	bl	800b9dc <VL53L0X_WrByte>
 8008320:	4603      	mov	r3, r0
 8008322:	461a      	mov	r2, r3
 8008324:	7bfb      	ldrb	r3, [r7, #15]
 8008326:	4313      	orrs	r3, r2
 8008328:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 800832a:	2200      	movs	r2, #0
 800832c:	2100      	movs	r1, #0
 800832e:	6878      	ldr	r0, [r7, #4]
 8008330:	f003 fb54 	bl	800b9dc <VL53L0X_WrByte>
 8008334:	4603      	mov	r3, r0
 8008336:	461a      	mov	r2, r3
 8008338:	7bfb      	ldrb	r3, [r7, #15]
 800833a:	4313      	orrs	r3, r2
 800833c:	73fb      	strb	r3, [r7, #15]
 800833e:	e058      	b.n	80083f2 <VL53L0X_SetGpioConfig+0x23a>

	} else {

		if (Status == VL53L0X_ERROR_NONE) {
 8008340:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008344:	2b00      	cmp	r3, #0
 8008346:	d121      	bne.n	800838c <VL53L0X_SetGpioConfig+0x1d4>
			switch (Functionality) {
 8008348:	787b      	ldrb	r3, [r7, #1]
 800834a:	2b04      	cmp	r3, #4
 800834c:	d81b      	bhi.n	8008386 <VL53L0X_SetGpioConfig+0x1ce>
 800834e:	a201      	add	r2, pc, #4	; (adr r2, 8008354 <VL53L0X_SetGpioConfig+0x19c>)
 8008350:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008354:	08008369 	.word	0x08008369
 8008358:	0800836f 	.word	0x0800836f
 800835c:	08008375 	.word	0x08008375
 8008360:	0800837b 	.word	0x0800837b
 8008364:	08008381 	.word	0x08008381
			case VL53L0X_GPIOFUNCTIONALITY_OFF:
				data = 0x00;
 8008368:	2300      	movs	r3, #0
 800836a:	73bb      	strb	r3, [r7, #14]
				break;
 800836c:	e00f      	b.n	800838e <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_LOW:
				data = 0x01;
 800836e:	2301      	movs	r3, #1
 8008370:	73bb      	strb	r3, [r7, #14]
				break;
 8008372:	e00c      	b.n	800838e <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_HIGH:
				data = 0x02;
 8008374:	2302      	movs	r3, #2
 8008376:	73bb      	strb	r3, [r7, #14]
				break;
 8008378:	e009      	b.n	800838e <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_OUT:
				data = 0x03;
 800837a:	2303      	movs	r3, #3
 800837c:	73bb      	strb	r3, [r7, #14]
				break;
 800837e:	e006      	b.n	800838e <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_NEW_MEASURE_READY:
				data = 0x04;
 8008380:	2304      	movs	r3, #4
 8008382:	73bb      	strb	r3, [r7, #14]
				break;
 8008384:	e003      	b.n	800838e <VL53L0X_SetGpioConfig+0x1d6>
			default:
				Status =
 8008386:	23f5      	movs	r3, #245	; 0xf5
 8008388:	73fb      	strb	r3, [r7, #15]
 800838a:	e000      	b.n	800838e <VL53L0X_SetGpioConfig+0x1d6>
				VL53L0X_ERROR_GPIO_FUNCTIONALITY_NOT_SUPPORTED;
			}
		}
 800838c:	bf00      	nop

		if (Status == VL53L0X_ERROR_NONE)
 800838e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008392:	2b00      	cmp	r3, #0
 8008394:	d107      	bne.n	80083a6 <VL53L0X_SetGpioConfig+0x1ee>
			Status = VL53L0X_WrByte(Dev,
 8008396:	7bbb      	ldrb	r3, [r7, #14]
 8008398:	461a      	mov	r2, r3
 800839a:	210a      	movs	r1, #10
 800839c:	6878      	ldr	r0, [r7, #4]
 800839e:	f003 fb1d 	bl	800b9dc <VL53L0X_WrByte>
 80083a2:	4603      	mov	r3, r0
 80083a4:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_SYSTEM_INTERRUPT_CONFIG_GPIO, data);

		if (Status == VL53L0X_ERROR_NONE) {
 80083a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80083aa:	2b00      	cmp	r3, #0
 80083ac:	d10f      	bne.n	80083ce <VL53L0X_SetGpioConfig+0x216>
			if (Polarity == VL53L0X_INTERRUPTPOLARITY_LOW)
 80083ae:	7e3b      	ldrb	r3, [r7, #24]
 80083b0:	2b00      	cmp	r3, #0
 80083b2:	d102      	bne.n	80083ba <VL53L0X_SetGpioConfig+0x202>
				data = 0;
 80083b4:	2300      	movs	r3, #0
 80083b6:	73bb      	strb	r3, [r7, #14]
 80083b8:	e001      	b.n	80083be <VL53L0X_SetGpioConfig+0x206>
			else
				data = (uint8_t)(1 << 4);
 80083ba:	2310      	movs	r3, #16
 80083bc:	73bb      	strb	r3, [r7, #14]

			Status = VL53L0X_UpdateByte(Dev,
 80083be:	7bbb      	ldrb	r3, [r7, #14]
 80083c0:	22ef      	movs	r2, #239	; 0xef
 80083c2:	2184      	movs	r1, #132	; 0x84
 80083c4:	6878      	ldr	r0, [r7, #4]
 80083c6:	f003 fb57 	bl	800ba78 <VL53L0X_UpdateByte>
 80083ca:	4603      	mov	r3, r0
 80083cc:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_GPIO_HV_MUX_ACTIVE_HIGH, 0xEF, data);
		}

		if (Status == VL53L0X_ERROR_NONE)
 80083ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80083d2:	2b00      	cmp	r3, #0
 80083d4:	d103      	bne.n	80083de <VL53L0X_SetGpioConfig+0x226>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	787a      	ldrb	r2, [r7, #1]
 80083da:	f883 20da 	strb.w	r2, [r3, #218]	; 0xda
				Pin0GpioFunctionality, Functionality);

		if (Status == VL53L0X_ERROR_NONE)
 80083de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80083e2:	2b00      	cmp	r3, #0
 80083e4:	d105      	bne.n	80083f2 <VL53L0X_SetGpioConfig+0x23a>
			Status = VL53L0X_ClearInterruptMask(Dev, 0);
 80083e6:	2100      	movs	r1, #0
 80083e8:	6878      	ldr	r0, [r7, #4]
 80083ea:	f000 f83f 	bl	800846c <VL53L0X_ClearInterruptMask>
 80083ee:	4603      	mov	r3, r0
 80083f0:	73fb      	strb	r3, [r7, #15]

	}

	LOG_FUNCTION_END(Status);
	return Status;
 80083f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80083f6:	4618      	mov	r0, r3
 80083f8:	3710      	adds	r7, #16
 80083fa:	46bd      	mov	sp, r7
 80083fc:	bd80      	pop	{r7, pc}
 80083fe:	bf00      	nop

08008400 <VL53L0X_GetInterruptThresholds>:
}

VL53L0X_Error VL53L0X_GetInterruptThresholds(VL53L0X_DEV Dev,
	VL53L0X_DeviceModes DeviceMode, FixPoint1616_t *pThresholdLow,
	FixPoint1616_t *pThresholdHigh)
{
 8008400:	b580      	push	{r7, lr}
 8008402:	b086      	sub	sp, #24
 8008404:	af00      	add	r7, sp, #0
 8008406:	60f8      	str	r0, [r7, #12]
 8008408:	607a      	str	r2, [r7, #4]
 800840a:	603b      	str	r3, [r7, #0]
 800840c:	460b      	mov	r3, r1
 800840e:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008410:	2300      	movs	r3, #0
 8008412:	75fb      	strb	r3, [r7, #23]
	uint16_t Threshold16;
	LOG_FUNCTION_START("");

	/* no dependency on DeviceMode for Ewok */

	Status = VL53L0X_RdWord(Dev, VL53L0X_REG_SYSTEM_THRESH_LOW, &Threshold16);
 8008414:	f107 0314 	add.w	r3, r7, #20
 8008418:	461a      	mov	r2, r3
 800841a:	210e      	movs	r1, #14
 800841c:	68f8      	ldr	r0, [r7, #12]
 800841e:	f003 fb89 	bl	800bb34 <VL53L0X_RdWord>
 8008422:	4603      	mov	r3, r0
 8008424:	75fb      	strb	r3, [r7, #23]
	/* Need to multiply by 2 because the FW will apply a x2 */
	*pThresholdLow = (FixPoint1616_t)((0x00fff & Threshold16) << 17);
 8008426:	8abb      	ldrh	r3, [r7, #20]
 8008428:	045b      	lsls	r3, r3, #17
 800842a:	461a      	mov	r2, r3
 800842c:	4b0e      	ldr	r3, [pc, #56]	; (8008468 <VL53L0X_GetInterruptThresholds+0x68>)
 800842e:	4013      	ands	r3, r2
 8008430:	687a      	ldr	r2, [r7, #4]
 8008432:	6013      	str	r3, [r2, #0]

	if (Status == VL53L0X_ERROR_NONE) {
 8008434:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008438:	2b00      	cmp	r3, #0
 800843a:	d10f      	bne.n	800845c <VL53L0X_GetInterruptThresholds+0x5c>
		Status = VL53L0X_RdWord(Dev, VL53L0X_REG_SYSTEM_THRESH_HIGH,
 800843c:	f107 0314 	add.w	r3, r7, #20
 8008440:	461a      	mov	r2, r3
 8008442:	210c      	movs	r1, #12
 8008444:	68f8      	ldr	r0, [r7, #12]
 8008446:	f003 fb75 	bl	800bb34 <VL53L0X_RdWord>
 800844a:	4603      	mov	r3, r0
 800844c:	75fb      	strb	r3, [r7, #23]
			&Threshold16);
		/* Need to multiply by 2 because the FW will apply a x2 */
		*pThresholdHigh =
			(FixPoint1616_t)((0x00fff & Threshold16) << 17);
 800844e:	8abb      	ldrh	r3, [r7, #20]
 8008450:	045b      	lsls	r3, r3, #17
 8008452:	461a      	mov	r2, r3
 8008454:	4b04      	ldr	r3, [pc, #16]	; (8008468 <VL53L0X_GetInterruptThresholds+0x68>)
 8008456:	4013      	ands	r3, r2
		*pThresholdHigh =
 8008458:	683a      	ldr	r2, [r7, #0]
 800845a:	6013      	str	r3, [r2, #0]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800845c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008460:	4618      	mov	r0, r3
 8008462:	3718      	adds	r7, #24
 8008464:	46bd      	mov	sp, r7
 8008466:	bd80      	pop	{r7, pc}
 8008468:	1ffe0000 	.word	0x1ffe0000

0800846c <VL53L0X_ClearInterruptMask>:
	return Status;
}

/* Group PAL Interrupt Functions */
VL53L0X_Error VL53L0X_ClearInterruptMask(VL53L0X_DEV Dev, uint32_t InterruptMask)
{
 800846c:	b580      	push	{r7, lr}
 800846e:	b084      	sub	sp, #16
 8008470:	af00      	add	r7, sp, #0
 8008472:	6078      	str	r0, [r7, #4]
 8008474:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008476:	2300      	movs	r3, #0
 8008478:	73fb      	strb	r3, [r7, #15]
	uint8_t LoopCount;
	uint8_t Byte;
	LOG_FUNCTION_START("");

	/* clear bit 0 range interrupt, bit 1 error interrupt */
	LoopCount = 0;
 800847a:	2300      	movs	r3, #0
 800847c:	73bb      	strb	r3, [r7, #14]
	do {
		Status = VL53L0X_WrByte(Dev,
 800847e:	2201      	movs	r2, #1
 8008480:	210b      	movs	r1, #11
 8008482:	6878      	ldr	r0, [r7, #4]
 8008484:	f003 faaa 	bl	800b9dc <VL53L0X_WrByte>
 8008488:	4603      	mov	r3, r0
 800848a:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_SYSTEM_INTERRUPT_CLEAR, 0x01);
		Status |= VL53L0X_WrByte(Dev,
 800848c:	2200      	movs	r2, #0
 800848e:	210b      	movs	r1, #11
 8008490:	6878      	ldr	r0, [r7, #4]
 8008492:	f003 faa3 	bl	800b9dc <VL53L0X_WrByte>
 8008496:	4603      	mov	r3, r0
 8008498:	461a      	mov	r2, r3
 800849a:	7bfb      	ldrb	r3, [r7, #15]
 800849c:	4313      	orrs	r3, r2
 800849e:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_SYSTEM_INTERRUPT_CLEAR, 0x00);
		Status |= VL53L0X_RdByte(Dev,
 80084a0:	f107 030d 	add.w	r3, r7, #13
 80084a4:	461a      	mov	r2, r3
 80084a6:	2113      	movs	r1, #19
 80084a8:	6878      	ldr	r0, [r7, #4]
 80084aa:	f003 fb19 	bl	800bae0 <VL53L0X_RdByte>
 80084ae:	4603      	mov	r3, r0
 80084b0:	461a      	mov	r2, r3
 80084b2:	7bfb      	ldrb	r3, [r7, #15]
 80084b4:	4313      	orrs	r3, r2
 80084b6:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_RESULT_INTERRUPT_STATUS, &Byte);
		LoopCount++;
 80084b8:	7bbb      	ldrb	r3, [r7, #14]
 80084ba:	3301      	adds	r3, #1
 80084bc:	73bb      	strb	r3, [r7, #14]
	} while (((Byte & 0x07) != 0x00)
 80084be:	7b7b      	ldrb	r3, [r7, #13]
 80084c0:	f003 0307 	and.w	r3, r3, #7
			&& (LoopCount < 3)
			&& (Status == VL53L0X_ERROR_NONE));
 80084c4:	2b00      	cmp	r3, #0
 80084c6:	d006      	beq.n	80084d6 <VL53L0X_ClearInterruptMask+0x6a>
			&& (LoopCount < 3)
 80084c8:	7bbb      	ldrb	r3, [r7, #14]
 80084ca:	2b02      	cmp	r3, #2
 80084cc:	d803      	bhi.n	80084d6 <VL53L0X_ClearInterruptMask+0x6a>
			&& (Status == VL53L0X_ERROR_NONE));
 80084ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80084d2:	2b00      	cmp	r3, #0
 80084d4:	d0d3      	beq.n	800847e <VL53L0X_ClearInterruptMask+0x12>


	if (LoopCount >= 3)
 80084d6:	7bbb      	ldrb	r3, [r7, #14]
 80084d8:	2b02      	cmp	r3, #2
 80084da:	d901      	bls.n	80084e0 <VL53L0X_ClearInterruptMask+0x74>
		Status = VL53L0X_ERROR_INTERRUPT_NOT_CLEARED;
 80084dc:	23f4      	movs	r3, #244	; 0xf4
 80084de:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(Status);
	return Status;
 80084e0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80084e4:	4618      	mov	r0, r3
 80084e6:	3710      	adds	r7, #16
 80084e8:	46bd      	mov	sp, r7
 80084ea:	bd80      	pop	{r7, pc}

080084ec <VL53L0X_GetInterruptMaskStatus>:

VL53L0X_Error VL53L0X_GetInterruptMaskStatus(VL53L0X_DEV Dev,
	uint32_t *pInterruptMaskStatus)
{
 80084ec:	b580      	push	{r7, lr}
 80084ee:	b084      	sub	sp, #16
 80084f0:	af00      	add	r7, sp, #0
 80084f2:	6078      	str	r0, [r7, #4]
 80084f4:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80084f6:	2300      	movs	r3, #0
 80084f8:	73fb      	strb	r3, [r7, #15]
	uint8_t Byte;
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_RESULT_INTERRUPT_STATUS, &Byte);
 80084fa:	f107 030e 	add.w	r3, r7, #14
 80084fe:	461a      	mov	r2, r3
 8008500:	2113      	movs	r1, #19
 8008502:	6878      	ldr	r0, [r7, #4]
 8008504:	f003 faec 	bl	800bae0 <VL53L0X_RdByte>
 8008508:	4603      	mov	r3, r0
 800850a:	73fb      	strb	r3, [r7, #15]
	*pInterruptMaskStatus = Byte & 0x07;
 800850c:	7bbb      	ldrb	r3, [r7, #14]
 800850e:	f003 0207 	and.w	r2, r3, #7
 8008512:	683b      	ldr	r3, [r7, #0]
 8008514:	601a      	str	r2, [r3, #0]

	if (Byte & 0x18)
 8008516:	7bbb      	ldrb	r3, [r7, #14]
 8008518:	f003 0318 	and.w	r3, r3, #24
 800851c:	2b00      	cmp	r3, #0
 800851e:	d001      	beq.n	8008524 <VL53L0X_GetInterruptMaskStatus+0x38>
		Status = VL53L0X_ERROR_RANGE_ERROR;
 8008520:	23fa      	movs	r3, #250	; 0xfa
 8008522:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(Status);
	return Status;
 8008524:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008528:	4618      	mov	r0, r3
 800852a:	3710      	adds	r7, #16
 800852c:	46bd      	mov	sp, r7
 800852e:	bd80      	pop	{r7, pc}

08008530 <VL53L0X_PerformRefSpadManagement>:
	return Status;
}

VL53L0X_Error VL53L0X_PerformRefSpadManagement(VL53L0X_DEV Dev,
	uint32_t *refSpadCount, uint8_t *isApertureSpads)
{
 8008530:	b580      	push	{r7, lr}
 8008532:	b086      	sub	sp, #24
 8008534:	af00      	add	r7, sp, #0
 8008536:	60f8      	str	r0, [r7, #12]
 8008538:	60b9      	str	r1, [r7, #8]
 800853a:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800853c:	2300      	movs	r3, #0
 800853e:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");

	Status = VL53L0X_perform_ref_spad_management(Dev, refSpadCount,
 8008540:	687a      	ldr	r2, [r7, #4]
 8008542:	68b9      	ldr	r1, [r7, #8]
 8008544:	68f8      	ldr	r0, [r7, #12]
 8008546:	f000 fa33 	bl	80089b0 <VL53L0X_perform_ref_spad_management>
 800854a:	4603      	mov	r3, r0
 800854c:	75fb      	strb	r3, [r7, #23]
		isApertureSpads);

	LOG_FUNCTION_END(Status);

	return Status;
 800854e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008552:	4618      	mov	r0, r3
 8008554:	3718      	adds	r7, #24
 8008556:	46bd      	mov	sp, r7
 8008558:	bd80      	pop	{r7, pc}

0800855a <VL53L0X_PerformContinuousRangingMeasurement>:


VL53L0X_Error VL53L0X_PerformContinuousRangingMeasurement(VL53L0X_Dev_t *device, VL53L0X_RangingMeasurementData_t *ranging_data) {
 800855a:	b580      	push	{r7, lr}
 800855c:	b084      	sub	sp, #16
 800855e:	af00      	add	r7, sp, #0
 8008560:	6078      	str	r0, [r7, #4]
 8008562:	6039      	str	r1, [r7, #0]
    VL53L0X_Error status;

    // Set the device to high accuracy mode
    status = VL53L0X_SetDeviceMode(device, VL53L0X_DEVICEMODE_CONTINUOUS_RANGING);
 8008564:	2101      	movs	r1, #1
 8008566:	6878      	ldr	r0, [r7, #4]
 8008568:	f7fe fed2 	bl	8007310 <VL53L0X_SetDeviceMode>
 800856c:	4603      	mov	r3, r0
 800856e:	73fb      	strb	r3, [r7, #15]
    if (status != VL53L0X_ERROR_NONE) {
 8008570:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008574:	2b00      	cmp	r3, #0
 8008576:	d002      	beq.n	800857e <VL53L0X_PerformContinuousRangingMeasurement+0x24>
        return status;
 8008578:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800857c:	e019      	b.n	80085b2 <VL53L0X_PerformContinuousRangingMeasurement+0x58>
    }

    // Start continuous ranging measurement
    status = VL53L0X_StartMeasurement(device);
 800857e:	6878      	ldr	r0, [r7, #4]
 8008580:	f7ff fbc4 	bl	8007d0c <VL53L0X_StartMeasurement>
 8008584:	4603      	mov	r3, r0
 8008586:	73fb      	strb	r3, [r7, #15]
    if (status != VL53L0X_ERROR_NONE) {
 8008588:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800858c:	2b00      	cmp	r3, #0
 800858e:	d002      	beq.n	8008596 <VL53L0X_PerformContinuousRangingMeasurement+0x3c>
        return status;
 8008590:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008594:	e00d      	b.n	80085b2 <VL53L0X_PerformContinuousRangingMeasurement+0x58>
    }

    // Get ranging measurement data
    status = VL53L0X_GetRangingMeasurementData(device, ranging_data);
 8008596:	6839      	ldr	r1, [r7, #0]
 8008598:	6878      	ldr	r0, [r7, #4]
 800859a:	f7ff fcb9 	bl	8007f10 <VL53L0X_GetRangingMeasurementData>
 800859e:	4603      	mov	r3, r0
 80085a0:	73fb      	strb	r3, [r7, #15]
    if (status != VL53L0X_ERROR_NONE) {
 80085a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80085a6:	2b00      	cmp	r3, #0
 80085a8:	d002      	beq.n	80085b0 <VL53L0X_PerformContinuousRangingMeasurement+0x56>
        return status;
 80085aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80085ae:	e000      	b.n	80085b2 <VL53L0X_PerformContinuousRangingMeasurement+0x58>
    }

    return VL53L0X_ERROR_NONE;
 80085b0:	2300      	movs	r3, #0
}
 80085b2:	4618      	mov	r0, r3
 80085b4:	3710      	adds	r7, #16
 80085b6:	46bd      	mov	sp, r7
 80085b8:	bd80      	pop	{r7, pc}

080085ba <VL53L0X_get_offset_calibration_data_micro_meter>:
	return Status;
}

VL53L0X_Error VL53L0X_get_offset_calibration_data_micro_meter(VL53L0X_DEV Dev,
		int32_t *pOffsetCalibrationDataMicroMeter)
{
 80085ba:	b580      	push	{r7, lr}
 80085bc:	b084      	sub	sp, #16
 80085be:	af00      	add	r7, sp, #0
 80085c0:	6078      	str	r0, [r7, #4]
 80085c2:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80085c4:	2300      	movs	r3, #0
 80085c6:	73fb      	strb	r3, [r7, #15]
	uint16_t RangeOffsetRegister;
	int16_t cMaxOffset = 2047;
 80085c8:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80085cc:	81bb      	strh	r3, [r7, #12]
	int16_t cOffsetRange = 4096;
 80085ce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80085d2:	817b      	strh	r3, [r7, #10]

	/* Note that offset has 10.2 format */

	Status = VL53L0X_RdWord(Dev,
 80085d4:	f107 0308 	add.w	r3, r7, #8
 80085d8:	461a      	mov	r2, r3
 80085da:	2128      	movs	r1, #40	; 0x28
 80085dc:	6878      	ldr	r0, [r7, #4]
 80085de:	f003 faa9 	bl	800bb34 <VL53L0X_RdWord>
 80085e2:	4603      	mov	r3, r0
 80085e4:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_ALGO_PART_TO_PART_RANGE_OFFSET_MM,
				&RangeOffsetRegister);

	if (Status == VL53L0X_ERROR_NONE) {
 80085e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80085ea:	2b00      	cmp	r3, #0
 80085ec:	d11e      	bne.n	800862c <VL53L0X_get_offset_calibration_data_micro_meter+0x72>
		RangeOffsetRegister = (RangeOffsetRegister & 0x0fff);
 80085ee:	893b      	ldrh	r3, [r7, #8]
 80085f0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80085f4:	b29b      	uxth	r3, r3
 80085f6:	813b      	strh	r3, [r7, #8]

		/* Apply 12 bit 2's compliment conversion */
		if (RangeOffsetRegister > cMaxOffset)
 80085f8:	893b      	ldrh	r3, [r7, #8]
 80085fa:	461a      	mov	r2, r3
 80085fc:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8008600:	429a      	cmp	r2, r3
 8008602:	dd0b      	ble.n	800861c <VL53L0X_get_offset_calibration_data_micro_meter+0x62>
			*pOffsetCalibrationDataMicroMeter =
				(int16_t)(RangeOffsetRegister - cOffsetRange)
 8008604:	893a      	ldrh	r2, [r7, #8]
 8008606:	897b      	ldrh	r3, [r7, #10]
 8008608:	1ad3      	subs	r3, r2, r3
 800860a:	b29b      	uxth	r3, r3
 800860c:	b21b      	sxth	r3, r3
 800860e:	461a      	mov	r2, r3
					* 250;
 8008610:	23fa      	movs	r3, #250	; 0xfa
 8008612:	fb03 f202 	mul.w	r2, r3, r2
			*pOffsetCalibrationDataMicroMeter =
 8008616:	683b      	ldr	r3, [r7, #0]
 8008618:	601a      	str	r2, [r3, #0]
 800861a:	e007      	b.n	800862c <VL53L0X_get_offset_calibration_data_micro_meter+0x72>
		else
			*pOffsetCalibrationDataMicroMeter =
				(int16_t)RangeOffsetRegister * 250;
 800861c:	893b      	ldrh	r3, [r7, #8]
 800861e:	b21b      	sxth	r3, r3
 8008620:	461a      	mov	r2, r3
 8008622:	23fa      	movs	r3, #250	; 0xfa
 8008624:	fb03 f202 	mul.w	r2, r3, r2
			*pOffsetCalibrationDataMicroMeter =
 8008628:	683b      	ldr	r3, [r7, #0]
 800862a:	601a      	str	r2, [r3, #0]

	}

	return Status;
 800862c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008630:	4618      	mov	r0, r3
 8008632:	3710      	adds	r7, #16
 8008634:	46bd      	mov	sp, r7
 8008636:	bd80      	pop	{r7, pc}

08008638 <get_next_good_spad>:
	return Status;
}

void get_next_good_spad(uint8_t goodSpadArray[], uint32_t size,
			uint32_t curr, int32_t *next)
{
 8008638:	b480      	push	{r7}
 800863a:	b08b      	sub	sp, #44	; 0x2c
 800863c:	af00      	add	r7, sp, #0
 800863e:	60f8      	str	r0, [r7, #12]
 8008640:	60b9      	str	r1, [r7, #8]
 8008642:	607a      	str	r2, [r7, #4]
 8008644:	603b      	str	r3, [r7, #0]
	uint32_t startIndex;
	uint32_t fineOffset;
	uint32_t cSpadsPerByte = 8;
 8008646:	2308      	movs	r3, #8
 8008648:	61bb      	str	r3, [r7, #24]
	uint32_t coarseIndex;
	uint32_t fineIndex;
	uint8_t dataByte;
	uint8_t success = 0;
 800864a:	2300      	movs	r3, #0
 800864c:	77bb      	strb	r3, [r7, #30]
	 *
	 * The coarse index is the byte index of the array and the fine index is
	 * the index of the bit within each byte.
	 */

	*next = -1;
 800864e:	683b      	ldr	r3, [r7, #0]
 8008650:	f04f 32ff 	mov.w	r2, #4294967295
 8008654:	601a      	str	r2, [r3, #0]

	startIndex = curr / cSpadsPerByte;
 8008656:	687a      	ldr	r2, [r7, #4]
 8008658:	69bb      	ldr	r3, [r7, #24]
 800865a:	fbb2 f3f3 	udiv	r3, r2, r3
 800865e:	617b      	str	r3, [r7, #20]
	fineOffset = curr % cSpadsPerByte;
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	69ba      	ldr	r2, [r7, #24]
 8008664:	fbb3 f2f2 	udiv	r2, r3, r2
 8008668:	69b9      	ldr	r1, [r7, #24]
 800866a:	fb01 f202 	mul.w	r2, r1, r2
 800866e:	1a9b      	subs	r3, r3, r2
 8008670:	613b      	str	r3, [r7, #16]

	for (coarseIndex = startIndex; ((coarseIndex < size) && !success);
 8008672:	697b      	ldr	r3, [r7, #20]
 8008674:	627b      	str	r3, [r7, #36]	; 0x24
 8008676:	e030      	b.n	80086da <get_next_good_spad+0xa2>
				coarseIndex++) {
		fineIndex = 0;
 8008678:	2300      	movs	r3, #0
 800867a:	623b      	str	r3, [r7, #32]
		dataByte = goodSpadArray[coarseIndex];
 800867c:	68fa      	ldr	r2, [r7, #12]
 800867e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008680:	4413      	add	r3, r2
 8008682:	781b      	ldrb	r3, [r3, #0]
 8008684:	77fb      	strb	r3, [r7, #31]

		if (coarseIndex == startIndex) {
 8008686:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008688:	697b      	ldr	r3, [r7, #20]
 800868a:	429a      	cmp	r2, r3
 800868c:	d11e      	bne.n	80086cc <get_next_good_spad+0x94>
			/* locate the bit position of the provided current
			 * spad bit before iterating */
			dataByte >>= fineOffset;
 800868e:	7ffa      	ldrb	r2, [r7, #31]
 8008690:	693b      	ldr	r3, [r7, #16]
 8008692:	fa42 f303 	asr.w	r3, r2, r3
 8008696:	77fb      	strb	r3, [r7, #31]
			fineIndex = fineOffset;
 8008698:	693b      	ldr	r3, [r7, #16]
 800869a:	623b      	str	r3, [r7, #32]
		}

		while (fineIndex < cSpadsPerByte) {
 800869c:	e016      	b.n	80086cc <get_next_good_spad+0x94>
			if ((dataByte & 0x1) == 1) {
 800869e:	7ffb      	ldrb	r3, [r7, #31]
 80086a0:	f003 0301 	and.w	r3, r3, #1
 80086a4:	2b00      	cmp	r3, #0
 80086a6:	d00b      	beq.n	80086c0 <get_next_good_spad+0x88>
				success = 1;
 80086a8:	2301      	movs	r3, #1
 80086aa:	77bb      	strb	r3, [r7, #30]
				*next = coarseIndex * cSpadsPerByte + fineIndex;
 80086ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086ae:	69ba      	ldr	r2, [r7, #24]
 80086b0:	fb03 f202 	mul.w	r2, r3, r2
 80086b4:	6a3b      	ldr	r3, [r7, #32]
 80086b6:	4413      	add	r3, r2
 80086b8:	461a      	mov	r2, r3
 80086ba:	683b      	ldr	r3, [r7, #0]
 80086bc:	601a      	str	r2, [r3, #0]
				break;
 80086be:	e009      	b.n	80086d4 <get_next_good_spad+0x9c>
			}
			dataByte >>= 1;
 80086c0:	7ffb      	ldrb	r3, [r7, #31]
 80086c2:	085b      	lsrs	r3, r3, #1
 80086c4:	77fb      	strb	r3, [r7, #31]
			fineIndex++;
 80086c6:	6a3b      	ldr	r3, [r7, #32]
 80086c8:	3301      	adds	r3, #1
 80086ca:	623b      	str	r3, [r7, #32]
		while (fineIndex < cSpadsPerByte) {
 80086cc:	6a3a      	ldr	r2, [r7, #32]
 80086ce:	69bb      	ldr	r3, [r7, #24]
 80086d0:	429a      	cmp	r2, r3
 80086d2:	d3e4      	bcc.n	800869e <get_next_good_spad+0x66>
				coarseIndex++) {
 80086d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086d6:	3301      	adds	r3, #1
 80086d8:	627b      	str	r3, [r7, #36]	; 0x24
	for (coarseIndex = startIndex; ((coarseIndex < size) && !success);
 80086da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80086dc:	68bb      	ldr	r3, [r7, #8]
 80086de:	429a      	cmp	r2, r3
 80086e0:	d202      	bcs.n	80086e8 <get_next_good_spad+0xb0>
 80086e2:	7fbb      	ldrb	r3, [r7, #30]
 80086e4:	2b00      	cmp	r3, #0
 80086e6:	d0c7      	beq.n	8008678 <get_next_good_spad+0x40>
		}
	}
}
 80086e8:	bf00      	nop
 80086ea:	372c      	adds	r7, #44	; 0x2c
 80086ec:	46bd      	mov	sp, r7
 80086ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086f2:	4770      	bx	lr

080086f4 <is_aperture>:


uint8_t is_aperture(uint32_t spadIndex)
{
 80086f4:	b480      	push	{r7}
 80086f6:	b085      	sub	sp, #20
 80086f8:	af00      	add	r7, sp, #0
 80086fa:	6078      	str	r0, [r7, #4]
	/*
	 * This function reports if a given spad index is an aperture SPAD by
	 * deriving the quadrant.
	 */
	uint32_t quadrant;
	uint8_t isAperture = 1;
 80086fc:	2301      	movs	r3, #1
 80086fe:	73fb      	strb	r3, [r7, #15]
	quadrant = spadIndex >> 6;
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	099b      	lsrs	r3, r3, #6
 8008704:	60bb      	str	r3, [r7, #8]
	if (refArrayQuadrants[quadrant] == REF_ARRAY_SPAD_0)
 8008706:	4a07      	ldr	r2, [pc, #28]	; (8008724 <is_aperture+0x30>)
 8008708:	68bb      	ldr	r3, [r7, #8]
 800870a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800870e:	2b00      	cmp	r3, #0
 8008710:	d101      	bne.n	8008716 <is_aperture+0x22>
		isAperture = 0;
 8008712:	2300      	movs	r3, #0
 8008714:	73fb      	strb	r3, [r7, #15]

	return isAperture;
 8008716:	7bfb      	ldrb	r3, [r7, #15]
}
 8008718:	4618      	mov	r0, r3
 800871a:	3714      	adds	r7, #20
 800871c:	46bd      	mov	sp, r7
 800871e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008722:	4770      	bx	lr
 8008724:	20008f44 	.word	0x20008f44

08008728 <enable_spad_bit>:


VL53L0X_Error enable_spad_bit(uint8_t spadArray[], uint32_t size,
	uint32_t spadIndex)
{
 8008728:	b480      	push	{r7}
 800872a:	b089      	sub	sp, #36	; 0x24
 800872c:	af00      	add	r7, sp, #0
 800872e:	60f8      	str	r0, [r7, #12]
 8008730:	60b9      	str	r1, [r7, #8]
 8008732:	607a      	str	r2, [r7, #4]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 8008734:	2300      	movs	r3, #0
 8008736:	77fb      	strb	r3, [r7, #31]
	uint32_t cSpadsPerByte = 8;
 8008738:	2308      	movs	r3, #8
 800873a:	61bb      	str	r3, [r7, #24]
	uint32_t coarseIndex;
	uint32_t fineIndex;

	coarseIndex = spadIndex / cSpadsPerByte;
 800873c:	687a      	ldr	r2, [r7, #4]
 800873e:	69bb      	ldr	r3, [r7, #24]
 8008740:	fbb2 f3f3 	udiv	r3, r2, r3
 8008744:	617b      	str	r3, [r7, #20]
	fineIndex = spadIndex % cSpadsPerByte;
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	69ba      	ldr	r2, [r7, #24]
 800874a:	fbb3 f2f2 	udiv	r2, r3, r2
 800874e:	69b9      	ldr	r1, [r7, #24]
 8008750:	fb01 f202 	mul.w	r2, r1, r2
 8008754:	1a9b      	subs	r3, r3, r2
 8008756:	613b      	str	r3, [r7, #16]
	if (coarseIndex >= size)
 8008758:	697a      	ldr	r2, [r7, #20]
 800875a:	68bb      	ldr	r3, [r7, #8]
 800875c:	429a      	cmp	r2, r3
 800875e:	d302      	bcc.n	8008766 <enable_spad_bit+0x3e>
		status = VL53L0X_ERROR_REF_SPAD_INIT;
 8008760:	23ce      	movs	r3, #206	; 0xce
 8008762:	77fb      	strb	r3, [r7, #31]
 8008764:	e010      	b.n	8008788 <enable_spad_bit+0x60>
	else
		spadArray[coarseIndex] |= (1 << fineIndex);
 8008766:	68fa      	ldr	r2, [r7, #12]
 8008768:	697b      	ldr	r3, [r7, #20]
 800876a:	4413      	add	r3, r2
 800876c:	781b      	ldrb	r3, [r3, #0]
 800876e:	b25a      	sxtb	r2, r3
 8008770:	2101      	movs	r1, #1
 8008772:	693b      	ldr	r3, [r7, #16]
 8008774:	fa01 f303 	lsl.w	r3, r1, r3
 8008778:	b25b      	sxtb	r3, r3
 800877a:	4313      	orrs	r3, r2
 800877c:	b259      	sxtb	r1, r3
 800877e:	68fa      	ldr	r2, [r7, #12]
 8008780:	697b      	ldr	r3, [r7, #20]
 8008782:	4413      	add	r3, r2
 8008784:	b2ca      	uxtb	r2, r1
 8008786:	701a      	strb	r2, [r3, #0]

	return status;
 8008788:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800878c:	4618      	mov	r0, r3
 800878e:	3724      	adds	r7, #36	; 0x24
 8008790:	46bd      	mov	sp, r7
 8008792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008796:	4770      	bx	lr

08008798 <set_ref_spad_map>:

	return status;
}

VL53L0X_Error set_ref_spad_map(VL53L0X_DEV Dev, uint8_t *refSpadArray)
{
 8008798:	b580      	push	{r7, lr}
 800879a:	b084      	sub	sp, #16
 800879c:	af00      	add	r7, sp, #0
 800879e:	6078      	str	r0, [r7, #4]
 80087a0:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_WriteMulti(Dev,
 80087a2:	2306      	movs	r3, #6
 80087a4:	683a      	ldr	r2, [r7, #0]
 80087a6:	21b0      	movs	r1, #176	; 0xb0
 80087a8:	6878      	ldr	r0, [r7, #4]
 80087aa:	f003 f8bb 	bl	800b924 <VL53L0X_WriteMulti>
 80087ae:	4603      	mov	r3, r0
 80087b0:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_GLOBAL_CONFIG_SPAD_ENABLES_REF_0,
				refSpadArray, 6);
	return status;
 80087b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80087b6:	4618      	mov	r0, r3
 80087b8:	3710      	adds	r7, #16
 80087ba:	46bd      	mov	sp, r7
 80087bc:	bd80      	pop	{r7, pc}

080087be <get_ref_spad_map>:

VL53L0X_Error get_ref_spad_map(VL53L0X_DEV Dev, uint8_t *refSpadArray)
{
 80087be:	b580      	push	{r7, lr}
 80087c0:	b084      	sub	sp, #16
 80087c2:	af00      	add	r7, sp, #0
 80087c4:	6078      	str	r0, [r7, #4]
 80087c6:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_ReadMulti(Dev,
 80087c8:	2306      	movs	r3, #6
 80087ca:	683a      	ldr	r2, [r7, #0]
 80087cc:	21b0      	movs	r1, #176	; 0xb0
 80087ce:	6878      	ldr	r0, [r7, #4]
 80087d0:	f003 f8d8 	bl	800b984 <VL53L0X_ReadMulti>
 80087d4:	4603      	mov	r3, r0
 80087d6:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_GLOBAL_CONFIG_SPAD_ENABLES_REF_0,
				refSpadArray,
				6);
	return status;
 80087d8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80087dc:	4618      	mov	r0, r3
 80087de:	3710      	adds	r7, #16
 80087e0:	46bd      	mov	sp, r7
 80087e2:	bd80      	pop	{r7, pc}

080087e4 <enable_ref_spads>:
				uint32_t size,
				uint32_t start,
				uint32_t offset,
				uint32_t spadCount,
				uint32_t *lastSpad)
{
 80087e4:	b580      	push	{r7, lr}
 80087e6:	b08c      	sub	sp, #48	; 0x30
 80087e8:	af00      	add	r7, sp, #0
 80087ea:	60f8      	str	r0, [r7, #12]
 80087ec:	607a      	str	r2, [r7, #4]
 80087ee:	603b      	str	r3, [r7, #0]
 80087f0:	460b      	mov	r3, r1
 80087f2:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 80087f4:	2300      	movs	r3, #0
 80087f6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint32_t index;
	uint32_t i;
	int32_t nextGoodSpad = offset;
 80087fa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80087fc:	61fb      	str	r3, [r7, #28]
	 *
	 * This function applies to only aperture or only non-aperture spads.
	 * Checks are performed to ensure this.
	 */

	currentSpad = offset;
 80087fe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008800:	623b      	str	r3, [r7, #32]
	for (index = 0; index < spadCount; index++) {
 8008802:	2300      	movs	r3, #0
 8008804:	62bb      	str	r3, [r7, #40]	; 0x28
 8008806:	e02b      	b.n	8008860 <enable_ref_spads+0x7c>
		get_next_good_spad(goodSpadArray, size, currentSpad,
 8008808:	f107 031c 	add.w	r3, r7, #28
 800880c:	6a3a      	ldr	r2, [r7, #32]
 800880e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008810:	6878      	ldr	r0, [r7, #4]
 8008812:	f7ff ff11 	bl	8008638 <get_next_good_spad>
			&nextGoodSpad);

		if (nextGoodSpad == -1) {
 8008816:	69fb      	ldr	r3, [r7, #28]
 8008818:	f1b3 3fff 	cmp.w	r3, #4294967295
 800881c:	d103      	bne.n	8008826 <enable_ref_spads+0x42>
			status = VL53L0X_ERROR_REF_SPAD_INIT;
 800881e:	23ce      	movs	r3, #206	; 0xce
 8008820:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			break;
 8008824:	e020      	b.n	8008868 <enable_ref_spads+0x84>
		}

		/* Confirm that the next good SPAD is non-aperture */
		if (is_aperture(start + nextGoodSpad) != apertureSpads) {
 8008826:	69fb      	ldr	r3, [r7, #28]
 8008828:	461a      	mov	r2, r3
 800882a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800882c:	4413      	add	r3, r2
 800882e:	4618      	mov	r0, r3
 8008830:	f7ff ff60 	bl	80086f4 <is_aperture>
 8008834:	4603      	mov	r3, r0
 8008836:	461a      	mov	r2, r3
 8008838:	7afb      	ldrb	r3, [r7, #11]
 800883a:	4293      	cmp	r3, r2
 800883c:	d003      	beq.n	8008846 <enable_ref_spads+0x62>
			/* if we can't get the required number of good aperture
			 * spads from the current quadrant then this is an error
			 */
			status = VL53L0X_ERROR_REF_SPAD_INIT;
 800883e:	23ce      	movs	r3, #206	; 0xce
 8008840:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			break;
 8008844:	e010      	b.n	8008868 <enable_ref_spads+0x84>
		}
		currentSpad = (uint32_t)nextGoodSpad;
 8008846:	69fb      	ldr	r3, [r7, #28]
 8008848:	623b      	str	r3, [r7, #32]
		enable_spad_bit(spadArray, size, currentSpad);
 800884a:	6a3a      	ldr	r2, [r7, #32]
 800884c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800884e:	6838      	ldr	r0, [r7, #0]
 8008850:	f7ff ff6a 	bl	8008728 <enable_spad_bit>
		currentSpad++;
 8008854:	6a3b      	ldr	r3, [r7, #32]
 8008856:	3301      	adds	r3, #1
 8008858:	623b      	str	r3, [r7, #32]
	for (index = 0; index < spadCount; index++) {
 800885a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800885c:	3301      	adds	r3, #1
 800885e:	62bb      	str	r3, [r7, #40]	; 0x28
 8008860:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008862:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008864:	429a      	cmp	r2, r3
 8008866:	d3cf      	bcc.n	8008808 <enable_ref_spads+0x24>
	}
	*lastSpad = currentSpad;
 8008868:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800886a:	6a3a      	ldr	r2, [r7, #32]
 800886c:	601a      	str	r2, [r3, #0]

	if (status == VL53L0X_ERROR_NONE)
 800886e:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8008872:	2b00      	cmp	r3, #0
 8008874:	d106      	bne.n	8008884 <enable_ref_spads+0xa0>
		status = set_ref_spad_map(Dev, spadArray);
 8008876:	6839      	ldr	r1, [r7, #0]
 8008878:	68f8      	ldr	r0, [r7, #12]
 800887a:	f7ff ff8d 	bl	8008798 <set_ref_spad_map>
 800887e:	4603      	mov	r3, r0
 8008880:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f


	if (status == VL53L0X_ERROR_NONE) {
 8008884:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8008888:	2b00      	cmp	r3, #0
 800888a:	d121      	bne.n	80088d0 <enable_ref_spads+0xec>
		status = get_ref_spad_map(Dev, checkSpadArray);
 800888c:	f107 0314 	add.w	r3, r7, #20
 8008890:	4619      	mov	r1, r3
 8008892:	68f8      	ldr	r0, [r7, #12]
 8008894:	f7ff ff93 	bl	80087be <get_ref_spad_map>
 8008898:	4603      	mov	r3, r0
 800889a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

		i = 0;
 800889e:	2300      	movs	r3, #0
 80088a0:	627b      	str	r3, [r7, #36]	; 0x24

		/* Compare spad maps. If not equal report error. */
		while (i < size) {
 80088a2:	e011      	b.n	80088c8 <enable_ref_spads+0xe4>
			if (spadArray[i] != checkSpadArray[i]) {
 80088a4:	683a      	ldr	r2, [r7, #0]
 80088a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088a8:	4413      	add	r3, r2
 80088aa:	781a      	ldrb	r2, [r3, #0]
 80088ac:	f107 0114 	add.w	r1, r7, #20
 80088b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088b2:	440b      	add	r3, r1
 80088b4:	781b      	ldrb	r3, [r3, #0]
 80088b6:	429a      	cmp	r2, r3
 80088b8:	d003      	beq.n	80088c2 <enable_ref_spads+0xde>
				status = VL53L0X_ERROR_REF_SPAD_INIT;
 80088ba:	23ce      	movs	r3, #206	; 0xce
 80088bc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				break;
 80088c0:	e006      	b.n	80088d0 <enable_ref_spads+0xec>
			}
			i++;
 80088c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088c4:	3301      	adds	r3, #1
 80088c6:	627b      	str	r3, [r7, #36]	; 0x24
		while (i < size) {
 80088c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80088ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088cc:	429a      	cmp	r2, r3
 80088ce:	d3e9      	bcc.n	80088a4 <enable_ref_spads+0xc0>
		}
	}
	return status;
 80088d0:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 80088d4:	4618      	mov	r0, r3
 80088d6:	3730      	adds	r7, #48	; 0x30
 80088d8:	46bd      	mov	sp, r7
 80088da:	bd80      	pop	{r7, pc}

080088dc <perform_ref_signal_measurement>:


VL53L0X_Error perform_ref_signal_measurement(VL53L0X_DEV Dev,
		uint16_t *refSignalRate)
{
 80088dc:	b580      	push	{r7, lr}
 80088de:	b08a      	sub	sp, #40	; 0x28
 80088e0:	af00      	add	r7, sp, #0
 80088e2:	6078      	str	r0, [r7, #4]
 80088e4:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 80088e6:	2300      	movs	r3, #0
 80088e8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	VL53L0X_RangingMeasurementData_t rangingMeasurementData;

	uint8_t SequenceConfig = 0;
 80088ec:	2300      	movs	r3, #0
 80088ee:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 80088f8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	/*
	 * This function performs a reference signal rate measurement.
	 */
	if (status == VL53L0X_ERROR_NONE)
 80088fc:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8008900:	2b00      	cmp	r3, #0
 8008902:	d107      	bne.n	8008914 <perform_ref_signal_measurement+0x38>
		status = VL53L0X_WrByte(Dev,
 8008904:	22c0      	movs	r2, #192	; 0xc0
 8008906:	2101      	movs	r1, #1
 8008908:	6878      	ldr	r0, [r7, #4]
 800890a:	f003 f867 	bl	800b9dc <VL53L0X_WrByte>
 800890e:	4603      	mov	r3, r0
 8008910:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0xC0);

	if (status == VL53L0X_ERROR_NONE)
 8008914:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8008918:	2b00      	cmp	r3, #0
 800891a:	d108      	bne.n	800892e <perform_ref_signal_measurement+0x52>
		status = VL53L0X_PerformSingleRangingMeasurement(Dev,
 800891c:	f107 0308 	add.w	r3, r7, #8
 8008920:	4619      	mov	r1, r3
 8008922:	6878      	ldr	r0, [r7, #4]
 8008924:	f7ff fc18 	bl	8008158 <VL53L0X_PerformSingleRangingMeasurement>
 8008928:	4603      	mov	r3, r0
 800892a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				&rangingMeasurementData);

	if (status == VL53L0X_ERROR_NONE)
 800892e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8008932:	2b00      	cmp	r3, #0
 8008934:	d107      	bne.n	8008946 <perform_ref_signal_measurement+0x6a>
		status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8008936:	2201      	movs	r2, #1
 8008938:	21ff      	movs	r1, #255	; 0xff
 800893a:	6878      	ldr	r0, [r7, #4]
 800893c:	f003 f84e 	bl	800b9dc <VL53L0X_WrByte>
 8008940:	4603      	mov	r3, r0
 8008942:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (status == VL53L0X_ERROR_NONE)
 8008946:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800894a:	2b00      	cmp	r3, #0
 800894c:	d107      	bne.n	800895e <perform_ref_signal_measurement+0x82>
		status = VL53L0X_RdWord(Dev,
 800894e:	683a      	ldr	r2, [r7, #0]
 8008950:	21b6      	movs	r1, #182	; 0xb6
 8008952:	6878      	ldr	r0, [r7, #4]
 8008954:	f003 f8ee 	bl	800bb34 <VL53L0X_RdWord>
 8008958:	4603      	mov	r3, r0
 800895a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			VL53L0X_REG_RESULT_PEAK_SIGNAL_RATE_REF,
			refSignalRate);

	if (status == VL53L0X_ERROR_NONE)
 800895e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8008962:	2b00      	cmp	r3, #0
 8008964:	d107      	bne.n	8008976 <perform_ref_signal_measurement+0x9a>
		status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8008966:	2200      	movs	r2, #0
 8008968:	21ff      	movs	r1, #255	; 0xff
 800896a:	6878      	ldr	r0, [r7, #4]
 800896c:	f003 f836 	bl	800b9dc <VL53L0X_WrByte>
 8008970:	4603      	mov	r3, r0
 8008972:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (status == VL53L0X_ERROR_NONE) {
 8008976:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800897a:	2b00      	cmp	r3, #0
 800897c:	d112      	bne.n	80089a4 <perform_ref_signal_measurement+0xc8>
		/* restore the previous Sequence Config */
		status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 800897e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8008982:	461a      	mov	r2, r3
 8008984:	2101      	movs	r1, #1
 8008986:	6878      	ldr	r0, [r7, #4]
 8008988:	f003 f828 	bl	800b9dc <VL53L0X_WrByte>
 800898c:	4603      	mov	r3, r0
 800898e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				SequenceConfig);
		if (status == VL53L0X_ERROR_NONE)
 8008992:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8008996:	2b00      	cmp	r3, #0
 8008998:	d104      	bne.n	80089a4 <perform_ref_signal_measurement+0xc8>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80089a0:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
	}

	return status;
 80089a4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 80089a8:	4618      	mov	r0, r3
 80089aa:	3728      	adds	r7, #40	; 0x28
 80089ac:	46bd      	mov	sp, r7
 80089ae:	bd80      	pop	{r7, pc}

080089b0 <VL53L0X_perform_ref_spad_management>:

VL53L0X_Error VL53L0X_perform_ref_spad_management(VL53L0X_DEV Dev,
				uint32_t *refSpadCount,
				uint8_t *isApertureSpads)
{
 80089b0:	b590      	push	{r4, r7, lr}
 80089b2:	b09d      	sub	sp, #116	; 0x74
 80089b4:	af06      	add	r7, sp, #24
 80089b6:	60f8      	str	r0, [r7, #12]
 80089b8:	60b9      	str	r1, [r7, #8]
 80089ba:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80089bc:	2300      	movs	r3, #0
 80089be:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	uint8_t lastSpadArray[6];
	uint8_t startSelect = 0xB4;
 80089c2:	23b4      	movs	r3, #180	; 0xb4
 80089c4:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
	uint32_t minimumSpadCount = 3;
 80089c8:	2303      	movs	r3, #3
 80089ca:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t maxSpadCount = 44;
 80089cc:	232c      	movs	r3, #44	; 0x2c
 80089ce:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t currentSpadIndex = 0;
 80089d0:	2300      	movs	r3, #0
 80089d2:	653b      	str	r3, [r7, #80]	; 0x50
	uint32_t lastSpadIndex = 0;
 80089d4:	2300      	movs	r3, #0
 80089d6:	61bb      	str	r3, [r7, #24]
	int32_t nextGoodSpad = 0;
 80089d8:	2300      	movs	r3, #0
 80089da:	617b      	str	r3, [r7, #20]
	uint16_t targetRefRate = 0x0A00; /* 20 MCPS in 9:7 format */
 80089dc:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 80089e0:	85fb      	strh	r3, [r7, #46]	; 0x2e
	uint16_t peakSignalRateRef;
	uint32_t needAptSpads = 0;
 80089e2:	2300      	movs	r3, #0
 80089e4:	64fb      	str	r3, [r7, #76]	; 0x4c
	uint32_t index = 0;
 80089e6:	2300      	movs	r3, #0
 80089e8:	64bb      	str	r3, [r7, #72]	; 0x48
	uint32_t spadArraySize = 6;
 80089ea:	2306      	movs	r3, #6
 80089ec:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t signalRateDiff = 0;
 80089ee:	2300      	movs	r3, #0
 80089f0:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t lastSignalRateDiff = 0;
 80089f2:	2300      	movs	r3, #0
 80089f4:	647b      	str	r3, [r7, #68]	; 0x44
	uint8_t complete = 0;
 80089f6:	2300      	movs	r3, #0
 80089f8:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
	uint8_t VhvSettings = 0;
 80089fc:	2300      	movs	r3, #0
 80089fe:	747b      	strb	r3, [r7, #17]
	uint8_t PhaseCal = 0;
 8008a00:	2300      	movs	r3, #0
 8008a02:	743b      	strb	r3, [r7, #16]
	uint32_t refSpadCount_int = 0;
 8008a04:	2300      	movs	r3, #0
 8008a06:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint8_t	 isApertureSpads_int = 0;
 8008a08:	2300      	movs	r3, #0
 8008a0a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	 * of the non-aperture quadrant and runs in to the adjacent aperture
	 * quadrant.
	 */


	targetRefRate = PALDevDataGet(Dev, targetRefRate);
 8008a0e:	68fb      	ldr	r3, [r7, #12]
 8008a10:	f8b3 313c 	ldrh.w	r3, [r3, #316]	; 0x13c
 8008a14:	85fb      	strh	r3, [r7, #46]	; 0x2e
	 * This is a short term implementation. The good spad map will be
	 * provided as an input.
	 * Note that there are 6 bytes. Only the first 44 bits will be used to
	 * represent spads.
	 */
	for (index = 0; index < spadArraySize; index++)
 8008a16:	2300      	movs	r3, #0
 8008a18:	64bb      	str	r3, [r7, #72]	; 0x48
 8008a1a:	e009      	b.n	8008a30 <VL53L0X_perform_ref_spad_management+0x80>
		Dev->Data.SpadData.RefSpadEnables[index] = 0;
 8008a1c:	68fa      	ldr	r2, [r7, #12]
 8008a1e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008a20:	4413      	add	r3, r2
 8008a22:	f503 7392 	add.w	r3, r3, #292	; 0x124
 8008a26:	2200      	movs	r2, #0
 8008a28:	701a      	strb	r2, [r3, #0]
	for (index = 0; index < spadArraySize; index++)
 8008a2a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008a2c:	3301      	adds	r3, #1
 8008a2e:	64bb      	str	r3, [r7, #72]	; 0x48
 8008a30:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008a32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a34:	429a      	cmp	r2, r3
 8008a36:	d3f1      	bcc.n	8008a1c <VL53L0X_perform_ref_spad_management+0x6c>


	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8008a38:	2201      	movs	r2, #1
 8008a3a:	21ff      	movs	r1, #255	; 0xff
 8008a3c:	68f8      	ldr	r0, [r7, #12]
 8008a3e:	f002 ffcd 	bl	800b9dc <VL53L0X_WrByte>
 8008a42:	4603      	mov	r3, r0
 8008a44:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	if (Status == VL53L0X_ERROR_NONE)
 8008a48:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8008a4c:	2b00      	cmp	r3, #0
 8008a4e:	d107      	bne.n	8008a60 <VL53L0X_perform_ref_spad_management+0xb0>
		Status = VL53L0X_WrByte(Dev,
 8008a50:	2200      	movs	r2, #0
 8008a52:	214f      	movs	r1, #79	; 0x4f
 8008a54:	68f8      	ldr	r0, [r7, #12]
 8008a56:	f002 ffc1 	bl	800b9dc <VL53L0X_WrByte>
 8008a5a:	4603      	mov	r3, r0
 8008a5c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_REG_DYNAMIC_SPAD_REF_EN_START_OFFSET, 0x00);

	if (Status == VL53L0X_ERROR_NONE)
 8008a60:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8008a64:	2b00      	cmp	r3, #0
 8008a66:	d107      	bne.n	8008a78 <VL53L0X_perform_ref_spad_management+0xc8>
		Status = VL53L0X_WrByte(Dev,
 8008a68:	222c      	movs	r2, #44	; 0x2c
 8008a6a:	214e      	movs	r1, #78	; 0x4e
 8008a6c:	68f8      	ldr	r0, [r7, #12]
 8008a6e:	f002 ffb5 	bl	800b9dc <VL53L0X_WrByte>
 8008a72:	4603      	mov	r3, r0
 8008a74:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_REG_DYNAMIC_SPAD_NUM_REQUESTED_REF_SPAD, 0x2C);

	if (Status == VL53L0X_ERROR_NONE)
 8008a78:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8008a7c:	2b00      	cmp	r3, #0
 8008a7e:	d107      	bne.n	8008a90 <VL53L0X_perform_ref_spad_management+0xe0>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8008a80:	2200      	movs	r2, #0
 8008a82:	21ff      	movs	r1, #255	; 0xff
 8008a84:	68f8      	ldr	r0, [r7, #12]
 8008a86:	f002 ffa9 	bl	800b9dc <VL53L0X_WrByte>
 8008a8a:	4603      	mov	r3, r0
 8008a8c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	if (Status == VL53L0X_ERROR_NONE)
 8008a90:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8008a94:	2b00      	cmp	r3, #0
 8008a96:	d109      	bne.n	8008aac <VL53L0X_perform_ref_spad_management+0xfc>
		Status = VL53L0X_WrByte(Dev,
 8008a98:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8008a9c:	461a      	mov	r2, r3
 8008a9e:	21b6      	movs	r1, #182	; 0xb6
 8008aa0:	68f8      	ldr	r0, [r7, #12]
 8008aa2:	f002 ff9b 	bl	800b9dc <VL53L0X_WrByte>
 8008aa6:	4603      	mov	r3, r0
 8008aa8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_REG_GLOBAL_CONFIG_REF_EN_START_SELECT,
			startSelect);


	if (Status == VL53L0X_ERROR_NONE)
 8008aac:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8008ab0:	2b00      	cmp	r3, #0
 8008ab2:	d107      	bne.n	8008ac4 <VL53L0X_perform_ref_spad_management+0x114>
		Status = VL53L0X_WrByte(Dev,
 8008ab4:	2200      	movs	r2, #0
 8008ab6:	2180      	movs	r1, #128	; 0x80
 8008ab8:	68f8      	ldr	r0, [r7, #12]
 8008aba:	f002 ff8f 	bl	800b9dc <VL53L0X_WrByte>
 8008abe:	4603      	mov	r3, r0
 8008ac0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
				VL53L0X_REG_POWER_MANAGEMENT_GO1_POWER_FORCE, 0);

	/* Perform ref calibration */
	if (Status == VL53L0X_ERROR_NONE)
 8008ac4:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8008ac8:	2b00      	cmp	r3, #0
 8008aca:	d10a      	bne.n	8008ae2 <VL53L0X_perform_ref_spad_management+0x132>
		Status = VL53L0X_perform_ref_calibration(Dev, &VhvSettings,
 8008acc:	f107 0210 	add.w	r2, r7, #16
 8008ad0:	f107 0111 	add.w	r1, r7, #17
 8008ad4:	2300      	movs	r3, #0
 8008ad6:	68f8      	ldr	r0, [r7, #12]
 8008ad8:	f000 fbbb 	bl	8009252 <VL53L0X_perform_ref_calibration>
 8008adc:	4603      	mov	r3, r0
 8008ade:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			&PhaseCal, 0);

	if (Status == VL53L0X_ERROR_NONE) {
 8008ae2:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8008ae6:	2b00      	cmp	r3, #0
 8008ae8:	d121      	bne.n	8008b2e <VL53L0X_perform_ref_spad_management+0x17e>
		/* Enable Minimum NON-APERTURE Spads */
		currentSpadIndex = 0;
 8008aea:	2300      	movs	r3, #0
 8008aec:	653b      	str	r3, [r7, #80]	; 0x50
		lastSpadIndex = currentSpadIndex;
 8008aee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008af0:	61bb      	str	r3, [r7, #24]
		needAptSpads = 0;
 8008af2:	2300      	movs	r3, #0
 8008af4:	64fb      	str	r3, [r7, #76]	; 0x4c
		Status = enable_ref_spads(Dev,
 8008af6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008af8:	b2d9      	uxtb	r1, r3
					needAptSpads,
					Dev->Data.SpadData.RefGoodSpadMap,
 8008afa:	68fb      	ldr	r3, [r7, #12]
 8008afc:	f503 7095 	add.w	r0, r3, #298	; 0x12a
					Dev->Data.SpadData.RefSpadEnables,
 8008b00:	68fb      	ldr	r3, [r7, #12]
 8008b02:	f503 7492 	add.w	r4, r3, #292	; 0x124
		Status = enable_ref_spads(Dev,
 8008b06:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8008b0a:	f107 0218 	add.w	r2, r7, #24
 8008b0e:	9204      	str	r2, [sp, #16]
 8008b10:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008b12:	9203      	str	r2, [sp, #12]
 8008b14:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008b16:	9202      	str	r2, [sp, #8]
 8008b18:	9301      	str	r3, [sp, #4]
 8008b1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b1c:	9300      	str	r3, [sp, #0]
 8008b1e:	4623      	mov	r3, r4
 8008b20:	4602      	mov	r2, r0
 8008b22:	68f8      	ldr	r0, [r7, #12]
 8008b24:	f7ff fe5e 	bl	80087e4 <enable_ref_spads>
 8008b28:	4603      	mov	r3, r0
 8008b2a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					currentSpadIndex,
					minimumSpadCount,
					&lastSpadIndex);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8008b2e:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8008b32:	2b00      	cmp	r3, #0
 8008b34:	d174      	bne.n	8008c20 <VL53L0X_perform_ref_spad_management+0x270>
		currentSpadIndex = lastSpadIndex;
 8008b36:	69bb      	ldr	r3, [r7, #24]
 8008b38:	653b      	str	r3, [r7, #80]	; 0x50

		Status = perform_ref_signal_measurement(Dev,
 8008b3a:	f107 0312 	add.w	r3, r7, #18
 8008b3e:	4619      	mov	r1, r3
 8008b40:	68f8      	ldr	r0, [r7, #12]
 8008b42:	f7ff fecb 	bl	80088dc <perform_ref_signal_measurement>
 8008b46:	4603      	mov	r3, r0
 8008b48:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			&peakSignalRateRef);
		if ((Status == VL53L0X_ERROR_NONE) &&
 8008b4c:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8008b50:	2b00      	cmp	r3, #0
 8008b52:	d161      	bne.n	8008c18 <VL53L0X_perform_ref_spad_management+0x268>
			(peakSignalRateRef > targetRefRate)) {
 8008b54:	8a7b      	ldrh	r3, [r7, #18]
		if ((Status == VL53L0X_ERROR_NONE) &&
 8008b56:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8008b58:	429a      	cmp	r2, r3
 8008b5a:	d25d      	bcs.n	8008c18 <VL53L0X_perform_ref_spad_management+0x268>
			/* Signal rate measurement too high,
			 * switch to APERTURE SPADs */

			for (index = 0; index < spadArraySize; index++)
 8008b5c:	2300      	movs	r3, #0
 8008b5e:	64bb      	str	r3, [r7, #72]	; 0x48
 8008b60:	e009      	b.n	8008b76 <VL53L0X_perform_ref_spad_management+0x1c6>
				Dev->Data.SpadData.RefSpadEnables[index] = 0;
 8008b62:	68fa      	ldr	r2, [r7, #12]
 8008b64:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008b66:	4413      	add	r3, r2
 8008b68:	f503 7392 	add.w	r3, r3, #292	; 0x124
 8008b6c:	2200      	movs	r2, #0
 8008b6e:	701a      	strb	r2, [r3, #0]
			for (index = 0; index < spadArraySize; index++)
 8008b70:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008b72:	3301      	adds	r3, #1
 8008b74:	64bb      	str	r3, [r7, #72]	; 0x48
 8008b76:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008b78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b7a:	429a      	cmp	r2, r3
 8008b7c:	d3f1      	bcc.n	8008b62 <VL53L0X_perform_ref_spad_management+0x1b2>


			/* Increment to the first APERTURE spad */
			while ((is_aperture(startSelect + currentSpadIndex)
 8008b7e:	e002      	b.n	8008b86 <VL53L0X_perform_ref_spad_management+0x1d6>
				== 0) && (currentSpadIndex < maxSpadCount)) {
				currentSpadIndex++;
 8008b80:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008b82:	3301      	adds	r3, #1
 8008b84:	653b      	str	r3, [r7, #80]	; 0x50
			while ((is_aperture(startSelect + currentSpadIndex)
 8008b86:	f897 203a 	ldrb.w	r2, [r7, #58]	; 0x3a
 8008b8a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008b8c:	4413      	add	r3, r2
 8008b8e:	4618      	mov	r0, r3
 8008b90:	f7ff fdb0 	bl	80086f4 <is_aperture>
 8008b94:	4603      	mov	r3, r0
 8008b96:	2b00      	cmp	r3, #0
 8008b98:	d103      	bne.n	8008ba2 <VL53L0X_perform_ref_spad_management+0x1f2>
				== 0) && (currentSpadIndex < maxSpadCount)) {
 8008b9a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008b9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b9e:	429a      	cmp	r2, r3
 8008ba0:	d3ee      	bcc.n	8008b80 <VL53L0X_perform_ref_spad_management+0x1d0>
			}

			needAptSpads = 1;
 8008ba2:	2301      	movs	r3, #1
 8008ba4:	64fb      	str	r3, [r7, #76]	; 0x4c

			Status = enable_ref_spads(Dev,
 8008ba6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008ba8:	b2d9      	uxtb	r1, r3
					needAptSpads,
					Dev->Data.SpadData.RefGoodSpadMap,
 8008baa:	68fb      	ldr	r3, [r7, #12]
 8008bac:	f503 7095 	add.w	r0, r3, #298	; 0x12a
					Dev->Data.SpadData.RefSpadEnables,
 8008bb0:	68fb      	ldr	r3, [r7, #12]
 8008bb2:	f503 7492 	add.w	r4, r3, #292	; 0x124
			Status = enable_ref_spads(Dev,
 8008bb6:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8008bba:	f107 0218 	add.w	r2, r7, #24
 8008bbe:	9204      	str	r2, [sp, #16]
 8008bc0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008bc2:	9203      	str	r2, [sp, #12]
 8008bc4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008bc6:	9202      	str	r2, [sp, #8]
 8008bc8:	9301      	str	r3, [sp, #4]
 8008bca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bcc:	9300      	str	r3, [sp, #0]
 8008bce:	4623      	mov	r3, r4
 8008bd0:	4602      	mov	r2, r0
 8008bd2:	68f8      	ldr	r0, [r7, #12]
 8008bd4:	f7ff fe06 	bl	80087e4 <enable_ref_spads>
 8008bd8:	4603      	mov	r3, r0
 8008bda:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					startSelect,
					currentSpadIndex,
					minimumSpadCount,
					&lastSpadIndex);

			if (Status == VL53L0X_ERROR_NONE) {
 8008bde:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8008be2:	2b00      	cmp	r3, #0
 8008be4:	d11b      	bne.n	8008c1e <VL53L0X_perform_ref_spad_management+0x26e>
				currentSpadIndex = lastSpadIndex;
 8008be6:	69bb      	ldr	r3, [r7, #24]
 8008be8:	653b      	str	r3, [r7, #80]	; 0x50
				Status = perform_ref_signal_measurement(Dev,
 8008bea:	f107 0312 	add.w	r3, r7, #18
 8008bee:	4619      	mov	r1, r3
 8008bf0:	68f8      	ldr	r0, [r7, #12]
 8008bf2:	f7ff fe73 	bl	80088dc <perform_ref_signal_measurement>
 8008bf6:	4603      	mov	r3, r0
 8008bf8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
						&peakSignalRateRef);

				if ((Status == VL53L0X_ERROR_NONE) &&
 8008bfc:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8008c00:	2b00      	cmp	r3, #0
 8008c02:	d10c      	bne.n	8008c1e <VL53L0X_perform_ref_spad_management+0x26e>
					(peakSignalRateRef > targetRefRate)) {
 8008c04:	8a7b      	ldrh	r3, [r7, #18]
				if ((Status == VL53L0X_ERROR_NONE) &&
 8008c06:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8008c08:	429a      	cmp	r2, r3
 8008c0a:	d208      	bcs.n	8008c1e <VL53L0X_perform_ref_spad_management+0x26e>
					 * setting the minimum number of
					 * APERTURE spads. Can do no more
					 * therefore set the min number of
					 * aperture spads as the result.
					 */
					isApertureSpads_int = 1;
 8008c0c:	2301      	movs	r3, #1
 8008c0e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
					refSpadCount_int = minimumSpadCount;
 8008c12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008c14:	63fb      	str	r3, [r7, #60]	; 0x3c
			if (Status == VL53L0X_ERROR_NONE) {
 8008c16:	e002      	b.n	8008c1e <VL53L0X_perform_ref_spad_management+0x26e>
				}
			}
		} else {
			needAptSpads = 0;
 8008c18:	2300      	movs	r3, #0
 8008c1a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008c1c:	e000      	b.n	8008c20 <VL53L0X_perform_ref_spad_management+0x270>
			if (Status == VL53L0X_ERROR_NONE) {
 8008c1e:	bf00      	nop
		}
	}

	if ((Status == VL53L0X_ERROR_NONE) &&
 8008c20:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8008c24:	2b00      	cmp	r3, #0
 8008c26:	f040 80af 	bne.w	8008d88 <VL53L0X_perform_ref_spad_management+0x3d8>
		(peakSignalRateRef < targetRefRate)) {
 8008c2a:	8a7b      	ldrh	r3, [r7, #18]
	if ((Status == VL53L0X_ERROR_NONE) &&
 8008c2c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8008c2e:	429a      	cmp	r2, r3
 8008c30:	f240 80aa 	bls.w	8008d88 <VL53L0X_perform_ref_spad_management+0x3d8>
		/* At this point, the minimum number of either aperture
		 * or non-aperture spads have been set. Proceed to add
		 * spads and perform measurements until the target
		 * reference is reached.
		 */
		isApertureSpads_int = needAptSpads;
 8008c34:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008c36:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
		refSpadCount_int	= minimumSpadCount;
 8008c3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008c3c:	63fb      	str	r3, [r7, #60]	; 0x3c

		memcpy(lastSpadArray, Dev->Data.SpadData.RefSpadEnables,
 8008c3e:	68fb      	ldr	r3, [r7, #12]
 8008c40:	f503 7192 	add.w	r1, r3, #292	; 0x124
 8008c44:	f107 031c 	add.w	r3, r7, #28
 8008c48:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008c4a:	4618      	mov	r0, r3
 8008c4c:	f003 f820 	bl	800bc90 <memcpy>
				spadArraySize);
		lastSignalRateDiff = abs(peakSignalRateRef -
 8008c50:	8a7b      	ldrh	r3, [r7, #18]
 8008c52:	461a      	mov	r2, r3
 8008c54:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8008c56:	1ad3      	subs	r3, r2, r3
 8008c58:	2b00      	cmp	r3, #0
 8008c5a:	bfb8      	it	lt
 8008c5c:	425b      	neglt	r3, r3
 8008c5e:	647b      	str	r3, [r7, #68]	; 0x44
			targetRefRate);
		complete = 0;
 8008c60:	2300      	movs	r3, #0
 8008c62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

		while (!complete) {
 8008c66:	e086      	b.n	8008d76 <VL53L0X_perform_ref_spad_management+0x3c6>
			get_next_good_spad(
				Dev->Data.SpadData.RefGoodSpadMap,
 8008c68:	68fb      	ldr	r3, [r7, #12]
 8008c6a:	f503 7095 	add.w	r0, r3, #298	; 0x12a
			get_next_good_spad(
 8008c6e:	f107 0314 	add.w	r3, r7, #20
 8008c72:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008c74:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008c76:	f7ff fcdf 	bl	8008638 <get_next_good_spad>
				spadArraySize, currentSpadIndex,
				&nextGoodSpad);

			if (nextGoodSpad == -1) {
 8008c7a:	697b      	ldr	r3, [r7, #20]
 8008c7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c80:	d103      	bne.n	8008c8a <VL53L0X_perform_ref_spad_management+0x2da>
				Status = VL53L0X_ERROR_REF_SPAD_INIT;
 8008c82:	23ce      	movs	r3, #206	; 0xce
 8008c84:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
				break;
 8008c88:	e07e      	b.n	8008d88 <VL53L0X_perform_ref_spad_management+0x3d8>
			}

			/* Cannot combine Aperture and Non-Aperture spads, so
			 * ensure the current spad is of the correct type.
			 */
			if (is_aperture((uint32_t)startSelect + nextGoodSpad) !=
 8008c8a:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8008c8e:	697a      	ldr	r2, [r7, #20]
 8008c90:	4413      	add	r3, r2
 8008c92:	4618      	mov	r0, r3
 8008c94:	f7ff fd2e 	bl	80086f4 <is_aperture>
 8008c98:	4603      	mov	r3, r0
 8008c9a:	461a      	mov	r2, r3
 8008c9c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008c9e:	4293      	cmp	r3, r2
 8008ca0:	d003      	beq.n	8008caa <VL53L0X_perform_ref_spad_management+0x2fa>
					needAptSpads) {
				/* At this point we have enabled the maximum
				 * number of Aperture spads.
				 */
				complete = 1;
 8008ca2:	2301      	movs	r3, #1
 8008ca4:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
				break;
 8008ca8:	e06e      	b.n	8008d88 <VL53L0X_perform_ref_spad_management+0x3d8>
			}

			(refSpadCount_int)++;
 8008caa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008cac:	3301      	adds	r3, #1
 8008cae:	63fb      	str	r3, [r7, #60]	; 0x3c

			currentSpadIndex = nextGoodSpad;
 8008cb0:	697b      	ldr	r3, [r7, #20]
 8008cb2:	653b      	str	r3, [r7, #80]	; 0x50
			Status = enable_spad_bit(
					Dev->Data.SpadData.RefSpadEnables,
 8008cb4:	68fb      	ldr	r3, [r7, #12]
 8008cb6:	f503 7392 	add.w	r3, r3, #292	; 0x124
			Status = enable_spad_bit(
 8008cba:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008cbc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008cbe:	4618      	mov	r0, r3
 8008cc0:	f7ff fd32 	bl	8008728 <enable_spad_bit>
 8008cc4:	4603      	mov	r3, r0
 8008cc6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					spadArraySize, currentSpadIndex);

			if (Status == VL53L0X_ERROR_NONE) {
 8008cca:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8008cce:	2b00      	cmp	r3, #0
 8008cd0:	d10c      	bne.n	8008cec <VL53L0X_perform_ref_spad_management+0x33c>
				currentSpadIndex++;
 8008cd2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008cd4:	3301      	adds	r3, #1
 8008cd6:	653b      	str	r3, [r7, #80]	; 0x50
				/* Proceed to apply the additional spad and
				 * perform measurement. */
				Status = set_ref_spad_map(Dev,
					Dev->Data.SpadData.RefSpadEnables);
 8008cd8:	68fb      	ldr	r3, [r7, #12]
 8008cda:	f503 7392 	add.w	r3, r3, #292	; 0x124
				Status = set_ref_spad_map(Dev,
 8008cde:	4619      	mov	r1, r3
 8008ce0:	68f8      	ldr	r0, [r7, #12]
 8008ce2:	f7ff fd59 	bl	8008798 <set_ref_spad_map>
 8008ce6:	4603      	mov	r3, r0
 8008ce8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			}

			if (Status != VL53L0X_ERROR_NONE)
 8008cec:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8008cf0:	2b00      	cmp	r3, #0
 8008cf2:	d146      	bne.n	8008d82 <VL53L0X_perform_ref_spad_management+0x3d2>
				break;

			Status = perform_ref_signal_measurement(Dev,
 8008cf4:	f107 0312 	add.w	r3, r7, #18
 8008cf8:	4619      	mov	r1, r3
 8008cfa:	68f8      	ldr	r0, [r7, #12]
 8008cfc:	f7ff fdee 	bl	80088dc <perform_ref_signal_measurement>
 8008d00:	4603      	mov	r3, r0
 8008d02:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					&peakSignalRateRef);

			if (Status != VL53L0X_ERROR_NONE)
 8008d06:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8008d0a:	2b00      	cmp	r3, #0
 8008d0c:	d13b      	bne.n	8008d86 <VL53L0X_perform_ref_spad_management+0x3d6>
				break;

			signalRateDiff = abs(peakSignalRateRef - targetRefRate);
 8008d0e:	8a7b      	ldrh	r3, [r7, #18]
 8008d10:	461a      	mov	r2, r3
 8008d12:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8008d14:	1ad3      	subs	r3, r2, r3
 8008d16:	2b00      	cmp	r3, #0
 8008d18:	bfb8      	it	lt
 8008d1a:	425b      	neglt	r3, r3
 8008d1c:	627b      	str	r3, [r7, #36]	; 0x24

			if (peakSignalRateRef > targetRefRate) {
 8008d1e:	8a7b      	ldrh	r3, [r7, #18]
 8008d20:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8008d22:	429a      	cmp	r2, r3
 8008d24:	d21c      	bcs.n	8008d60 <VL53L0X_perform_ref_spad_management+0x3b0>
				/* Select the spad map that provides the
				 * measurement closest to the target rate,
				 * either above or below it.
				 */
				if (signalRateDiff > lastSignalRateDiff) {
 8008d26:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008d28:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008d2a:	429a      	cmp	r2, r3
 8008d2c:	d914      	bls.n	8008d58 <VL53L0X_perform_ref_spad_management+0x3a8>
					/* Previous spad map produced a closer
					 * measurement, so choose this. */
					Status = set_ref_spad_map(Dev,
 8008d2e:	f107 031c 	add.w	r3, r7, #28
 8008d32:	4619      	mov	r1, r3
 8008d34:	68f8      	ldr	r0, [r7, #12]
 8008d36:	f7ff fd2f 	bl	8008798 <set_ref_spad_map>
 8008d3a:	4603      	mov	r3, r0
 8008d3c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
							lastSpadArray);
					memcpy(
					Dev->Data.SpadData.RefSpadEnables,
 8008d40:	68fb      	ldr	r3, [r7, #12]
 8008d42:	f503 7392 	add.w	r3, r3, #292	; 0x124
					memcpy(
 8008d46:	f107 011c 	add.w	r1, r7, #28
 8008d4a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008d4c:	4618      	mov	r0, r3
 8008d4e:	f002 ff9f 	bl	800bc90 <memcpy>
					lastSpadArray, spadArraySize);

					(refSpadCount_int)--;
 8008d52:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008d54:	3b01      	subs	r3, #1
 8008d56:	63fb      	str	r3, [r7, #60]	; 0x3c
				}
				complete = 1;
 8008d58:	2301      	movs	r3, #1
 8008d5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008d5e:	e00a      	b.n	8008d76 <VL53L0X_perform_ref_spad_management+0x3c6>
			} else {
				/* Continue to add spads */
				lastSignalRateDiff = signalRateDiff;
 8008d60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d62:	647b      	str	r3, [r7, #68]	; 0x44
				memcpy(lastSpadArray,
					Dev->Data.SpadData.RefSpadEnables,
 8008d64:	68fb      	ldr	r3, [r7, #12]
 8008d66:	f503 7192 	add.w	r1, r3, #292	; 0x124
				memcpy(lastSpadArray,
 8008d6a:	f107 031c 	add.w	r3, r7, #28
 8008d6e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008d70:	4618      	mov	r0, r3
 8008d72:	f002 ff8d 	bl	800bc90 <memcpy>
		while (!complete) {
 8008d76:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8008d7a:	2b00      	cmp	r3, #0
 8008d7c:	f43f af74 	beq.w	8008c68 <VL53L0X_perform_ref_spad_management+0x2b8>
 8008d80:	e002      	b.n	8008d88 <VL53L0X_perform_ref_spad_management+0x3d8>
				break;
 8008d82:	bf00      	nop
 8008d84:	e000      	b.n	8008d88 <VL53L0X_perform_ref_spad_management+0x3d8>
				break;
 8008d86:	bf00      	nop
			}

		} /* while */
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8008d88:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8008d8c:	2b00      	cmp	r3, #0
 8008d8e:	d115      	bne.n	8008dbc <VL53L0X_perform_ref_spad_management+0x40c>
		*refSpadCount = refSpadCount_int;
 8008d90:	68bb      	ldr	r3, [r7, #8]
 8008d92:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008d94:	601a      	str	r2, [r3, #0]
		*isApertureSpads = isApertureSpads_int;
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	f897 203b 	ldrb.w	r2, [r7, #59]	; 0x3b
 8008d9c:	701a      	strb	r2, [r3, #0]

		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 1);
 8008d9e:	68fb      	ldr	r3, [r7, #12]
 8008da0:	2201      	movs	r2, #1
 8008da2:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8008da6:	68bb      	ldr	r3, [r7, #8]
 8008da8:	681b      	ldr	r3, [r3, #0]
 8008daa:	b2da      	uxtb	r2, r3
 8008dac:	68fb      	ldr	r3, [r7, #12]
 8008dae:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
			ReferenceSpadCount, (uint8_t)(*refSpadCount));
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	781a      	ldrb	r2, [r3, #0]
 8008db6:	68fb      	ldr	r3, [r7, #12]
 8008db8:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
			ReferenceSpadType, *isApertureSpads);
	}

	return Status;
 8008dbc:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
}
 8008dc0:	4618      	mov	r0, r3
 8008dc2:	375c      	adds	r7, #92	; 0x5c
 8008dc4:	46bd      	mov	sp, r7
 8008dc6:	bd90      	pop	{r4, r7, pc}

08008dc8 <VL53L0X_set_reference_spads>:

VL53L0X_Error VL53L0X_set_reference_spads(VL53L0X_DEV Dev,
				 uint32_t count, uint8_t isApertureSpads)
{
 8008dc8:	b590      	push	{r4, r7, lr}
 8008dca:	b093      	sub	sp, #76	; 0x4c
 8008dcc:	af06      	add	r7, sp, #24
 8008dce:	60f8      	str	r0, [r7, #12]
 8008dd0:	60b9      	str	r1, [r7, #8]
 8008dd2:	4613      	mov	r3, r2
 8008dd4:	71fb      	strb	r3, [r7, #7]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008dd6:	2300      	movs	r3, #0
 8008dd8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint32_t currentSpadIndex = 0;
 8008ddc:	2300      	movs	r3, #0
 8008dde:	62bb      	str	r3, [r7, #40]	; 0x28
	uint8_t startSelect = 0xB4;
 8008de0:	23b4      	movs	r3, #180	; 0xb4
 8008de2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	uint32_t spadArraySize = 6;
 8008de6:	2306      	movs	r3, #6
 8008de8:	61fb      	str	r3, [r7, #28]
	uint32_t maxSpadCount = 44;
 8008dea:	232c      	movs	r3, #44	; 0x2c
 8008dec:	61bb      	str	r3, [r7, #24]
	 * aperture or
	 * non-aperture, as requested.
	 * The good spad map will be applied.
	 */

	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8008dee:	2201      	movs	r2, #1
 8008df0:	21ff      	movs	r1, #255	; 0xff
 8008df2:	68f8      	ldr	r0, [r7, #12]
 8008df4:	f002 fdf2 	bl	800b9dc <VL53L0X_WrByte>
 8008df8:	4603      	mov	r3, r0
 8008dfa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	if (Status == VL53L0X_ERROR_NONE)
 8008dfe:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8008e02:	2b00      	cmp	r3, #0
 8008e04:	d107      	bne.n	8008e16 <VL53L0X_set_reference_spads+0x4e>
		Status = VL53L0X_WrByte(Dev,
 8008e06:	2200      	movs	r2, #0
 8008e08:	214f      	movs	r1, #79	; 0x4f
 8008e0a:	68f8      	ldr	r0, [r7, #12]
 8008e0c:	f002 fde6 	bl	800b9dc <VL53L0X_WrByte>
 8008e10:	4603      	mov	r3, r0
 8008e12:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L0X_REG_DYNAMIC_SPAD_REF_EN_START_OFFSET, 0x00);

	if (Status == VL53L0X_ERROR_NONE)
 8008e16:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8008e1a:	2b00      	cmp	r3, #0
 8008e1c:	d107      	bne.n	8008e2e <VL53L0X_set_reference_spads+0x66>
		Status = VL53L0X_WrByte(Dev,
 8008e1e:	222c      	movs	r2, #44	; 0x2c
 8008e20:	214e      	movs	r1, #78	; 0x4e
 8008e22:	68f8      	ldr	r0, [r7, #12]
 8008e24:	f002 fdda 	bl	800b9dc <VL53L0X_WrByte>
 8008e28:	4603      	mov	r3, r0
 8008e2a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L0X_REG_DYNAMIC_SPAD_NUM_REQUESTED_REF_SPAD, 0x2C);

	if (Status == VL53L0X_ERROR_NONE)
 8008e2e:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8008e32:	2b00      	cmp	r3, #0
 8008e34:	d107      	bne.n	8008e46 <VL53L0X_set_reference_spads+0x7e>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8008e36:	2200      	movs	r2, #0
 8008e38:	21ff      	movs	r1, #255	; 0xff
 8008e3a:	68f8      	ldr	r0, [r7, #12]
 8008e3c:	f002 fdce 	bl	800b9dc <VL53L0X_WrByte>
 8008e40:	4603      	mov	r3, r0
 8008e42:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	if (Status == VL53L0X_ERROR_NONE)
 8008e46:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8008e4a:	2b00      	cmp	r3, #0
 8008e4c:	d109      	bne.n	8008e62 <VL53L0X_set_reference_spads+0x9a>
		Status = VL53L0X_WrByte(Dev,
 8008e4e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008e52:	461a      	mov	r2, r3
 8008e54:	21b6      	movs	r1, #182	; 0xb6
 8008e56:	68f8      	ldr	r0, [r7, #12]
 8008e58:	f002 fdc0 	bl	800b9dc <VL53L0X_WrByte>
 8008e5c:	4603      	mov	r3, r0
 8008e5e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L0X_REG_GLOBAL_CONFIG_REF_EN_START_SELECT,
			startSelect);

	for (index = 0; index < spadArraySize; index++)
 8008e62:	2300      	movs	r3, #0
 8008e64:	627b      	str	r3, [r7, #36]	; 0x24
 8008e66:	e009      	b.n	8008e7c <VL53L0X_set_reference_spads+0xb4>
		Dev->Data.SpadData.RefSpadEnables[index] = 0;
 8008e68:	68fa      	ldr	r2, [r7, #12]
 8008e6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e6c:	4413      	add	r3, r2
 8008e6e:	f503 7392 	add.w	r3, r3, #292	; 0x124
 8008e72:	2200      	movs	r2, #0
 8008e74:	701a      	strb	r2, [r3, #0]
	for (index = 0; index < spadArraySize; index++)
 8008e76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e78:	3301      	adds	r3, #1
 8008e7a:	627b      	str	r3, [r7, #36]	; 0x24
 8008e7c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008e7e:	69fb      	ldr	r3, [r7, #28]
 8008e80:	429a      	cmp	r2, r3
 8008e82:	d3f1      	bcc.n	8008e68 <VL53L0X_set_reference_spads+0xa0>

	if (isApertureSpads) {
 8008e84:	79fb      	ldrb	r3, [r7, #7]
 8008e86:	2b00      	cmp	r3, #0
 8008e88:	d011      	beq.n	8008eae <VL53L0X_set_reference_spads+0xe6>
		/* Increment to the first APERTURE spad */
		while ((is_aperture(startSelect + currentSpadIndex) == 0) &&
 8008e8a:	e002      	b.n	8008e92 <VL53L0X_set_reference_spads+0xca>
			  (currentSpadIndex < maxSpadCount)) {
			currentSpadIndex++;
 8008e8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e8e:	3301      	adds	r3, #1
 8008e90:	62bb      	str	r3, [r7, #40]	; 0x28
		while ((is_aperture(startSelect + currentSpadIndex) == 0) &&
 8008e92:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8008e96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e98:	4413      	add	r3, r2
 8008e9a:	4618      	mov	r0, r3
 8008e9c:	f7ff fc2a 	bl	80086f4 <is_aperture>
 8008ea0:	4603      	mov	r3, r0
 8008ea2:	2b00      	cmp	r3, #0
 8008ea4:	d103      	bne.n	8008eae <VL53L0X_set_reference_spads+0xe6>
 8008ea6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008ea8:	69bb      	ldr	r3, [r7, #24]
 8008eaa:	429a      	cmp	r2, r3
 8008eac:	d3ee      	bcc.n	8008e8c <VL53L0X_set_reference_spads+0xc4>
		}
	}
	Status = enable_ref_spads(Dev,
				isApertureSpads,
				Dev->Data.SpadData.RefGoodSpadMap,
 8008eae:	68fb      	ldr	r3, [r7, #12]
 8008eb0:	f503 7095 	add.w	r0, r3, #298	; 0x12a
				Dev->Data.SpadData.RefSpadEnables,
 8008eb4:	68fb      	ldr	r3, [r7, #12]
 8008eb6:	f503 7492 	add.w	r4, r3, #292	; 0x124
	Status = enable_ref_spads(Dev,
 8008eba:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008ebe:	79f9      	ldrb	r1, [r7, #7]
 8008ec0:	f107 0214 	add.w	r2, r7, #20
 8008ec4:	9204      	str	r2, [sp, #16]
 8008ec6:	68ba      	ldr	r2, [r7, #8]
 8008ec8:	9203      	str	r2, [sp, #12]
 8008eca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008ecc:	9202      	str	r2, [sp, #8]
 8008ece:	9301      	str	r3, [sp, #4]
 8008ed0:	69fb      	ldr	r3, [r7, #28]
 8008ed2:	9300      	str	r3, [sp, #0]
 8008ed4:	4623      	mov	r3, r4
 8008ed6:	4602      	mov	r2, r0
 8008ed8:	68f8      	ldr	r0, [r7, #12]
 8008eda:	f7ff fc83 	bl	80087e4 <enable_ref_spads>
 8008ede:	4603      	mov	r3, r0
 8008ee0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				startSelect,
				currentSpadIndex,
				count,
				&lastSpadIndex);

	if (Status == VL53L0X_ERROR_NONE) {
 8008ee4:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8008ee8:	2b00      	cmp	r3, #0
 8008eea:	d10c      	bne.n	8008f06 <VL53L0X_set_reference_spads+0x13e>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 1);
 8008eec:	68fb      	ldr	r3, [r7, #12]
 8008eee:	2201      	movs	r2, #1
 8008ef0:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8008ef4:	68bb      	ldr	r3, [r7, #8]
 8008ef6:	b2da      	uxtb	r2, r3
 8008ef8:	68fb      	ldr	r3, [r7, #12]
 8008efa:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
			ReferenceSpadCount, (uint8_t)(count));
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8008efe:	68fb      	ldr	r3, [r7, #12]
 8008f00:	79fa      	ldrb	r2, [r7, #7]
 8008f02:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
			ReferenceSpadType, isApertureSpads);
	}

	return Status;
 8008f06:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 8008f0a:	4618      	mov	r0, r3
 8008f0c:	3734      	adds	r7, #52	; 0x34
 8008f0e:	46bd      	mov	sp, r7
 8008f10:	bd90      	pop	{r4, r7, pc}

08008f12 <VL53L0X_perform_single_ref_calibration>:
}


VL53L0X_Error VL53L0X_perform_single_ref_calibration(VL53L0X_DEV Dev,
		uint8_t vhv_init_byte)
{
 8008f12:	b580      	push	{r7, lr}
 8008f14:	b084      	sub	sp, #16
 8008f16:	af00      	add	r7, sp, #0
 8008f18:	6078      	str	r0, [r7, #4]
 8008f1a:	460b      	mov	r3, r1
 8008f1c:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008f1e:	2300      	movs	r3, #0
 8008f20:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 8008f22:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008f26:	2b00      	cmp	r3, #0
 8008f28:	d10a      	bne.n	8008f40 <VL53L0X_perform_single_ref_calibration+0x2e>
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START,
 8008f2a:	78fb      	ldrb	r3, [r7, #3]
 8008f2c:	f043 0301 	orr.w	r3, r3, #1
 8008f30:	b2db      	uxtb	r3, r3
 8008f32:	461a      	mov	r2, r3
 8008f34:	2100      	movs	r1, #0
 8008f36:	6878      	ldr	r0, [r7, #4]
 8008f38:	f002 fd50 	bl	800b9dc <VL53L0X_WrByte>
 8008f3c:	4603      	mov	r3, r0
 8008f3e:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_SYSRANGE_MODE_START_STOP |
				vhv_init_byte);

	if (Status == VL53L0X_ERROR_NONE)
 8008f40:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008f44:	2b00      	cmp	r3, #0
 8008f46:	d104      	bne.n	8008f52 <VL53L0X_perform_single_ref_calibration+0x40>
		Status = VL53L0X_measurement_poll_for_completion(Dev);
 8008f48:	6878      	ldr	r0, [r7, #4]
 8008f4a:	f000 f9bf 	bl	80092cc <VL53L0X_measurement_poll_for_completion>
 8008f4e:	4603      	mov	r3, r0
 8008f50:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 8008f52:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008f56:	2b00      	cmp	r3, #0
 8008f58:	d105      	bne.n	8008f66 <VL53L0X_perform_single_ref_calibration+0x54>
		Status = VL53L0X_ClearInterruptMask(Dev, 0);
 8008f5a:	2100      	movs	r1, #0
 8008f5c:	6878      	ldr	r0, [r7, #4]
 8008f5e:	f7ff fa85 	bl	800846c <VL53L0X_ClearInterruptMask>
 8008f62:	4603      	mov	r3, r0
 8008f64:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 8008f66:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008f6a:	2b00      	cmp	r3, #0
 8008f6c:	d106      	bne.n	8008f7c <VL53L0X_perform_single_ref_calibration+0x6a>
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START, 0x00);
 8008f6e:	2200      	movs	r2, #0
 8008f70:	2100      	movs	r1, #0
 8008f72:	6878      	ldr	r0, [r7, #4]
 8008f74:	f002 fd32 	bl	800b9dc <VL53L0X_WrByte>
 8008f78:	4603      	mov	r3, r0
 8008f7a:	73fb      	strb	r3, [r7, #15]

	return Status;
 8008f7c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008f80:	4618      	mov	r0, r3
 8008f82:	3710      	adds	r7, #16
 8008f84:	46bd      	mov	sp, r7
 8008f86:	bd80      	pop	{r7, pc}

08008f88 <VL53L0X_ref_calibration_io>:

VL53L0X_Error VL53L0X_ref_calibration_io(VL53L0X_DEV Dev, uint8_t read_not_write,
	uint8_t VhvSettings, uint8_t PhaseCal,
	uint8_t *pVhvSettings, uint8_t *pPhaseCal,
	const uint8_t vhv_enable, const uint8_t phase_enable)
{
 8008f88:	b580      	push	{r7, lr}
 8008f8a:	b084      	sub	sp, #16
 8008f8c:	af00      	add	r7, sp, #0
 8008f8e:	6078      	str	r0, [r7, #4]
 8008f90:	4608      	mov	r0, r1
 8008f92:	4611      	mov	r1, r2
 8008f94:	461a      	mov	r2, r3
 8008f96:	4603      	mov	r3, r0
 8008f98:	70fb      	strb	r3, [r7, #3]
 8008f9a:	460b      	mov	r3, r1
 8008f9c:	70bb      	strb	r3, [r7, #2]
 8008f9e:	4613      	mov	r3, r2
 8008fa0:	707b      	strb	r3, [r7, #1]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008fa2:	2300      	movs	r3, #0
 8008fa4:	73fb      	strb	r3, [r7, #15]
	uint8_t PhaseCalint = 0;
 8008fa6:	2300      	movs	r3, #0
 8008fa8:	73bb      	strb	r3, [r7, #14]

	/* Read VHV from device */
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8008faa:	2201      	movs	r2, #1
 8008fac:	21ff      	movs	r1, #255	; 0xff
 8008fae:	6878      	ldr	r0, [r7, #4]
 8008fb0:	f002 fd14 	bl	800b9dc <VL53L0X_WrByte>
 8008fb4:	4603      	mov	r3, r0
 8008fb6:	461a      	mov	r2, r3
 8008fb8:	7bfb      	ldrb	r3, [r7, #15]
 8008fba:	4313      	orrs	r3, r2
 8008fbc:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 8008fbe:	2200      	movs	r2, #0
 8008fc0:	2100      	movs	r1, #0
 8008fc2:	6878      	ldr	r0, [r7, #4]
 8008fc4:	f002 fd0a 	bl	800b9dc <VL53L0X_WrByte>
 8008fc8:	4603      	mov	r3, r0
 8008fca:	461a      	mov	r2, r3
 8008fcc:	7bfb      	ldrb	r3, [r7, #15]
 8008fce:	4313      	orrs	r3, r2
 8008fd0:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8008fd2:	2200      	movs	r2, #0
 8008fd4:	21ff      	movs	r1, #255	; 0xff
 8008fd6:	6878      	ldr	r0, [r7, #4]
 8008fd8:	f002 fd00 	bl	800b9dc <VL53L0X_WrByte>
 8008fdc:	4603      	mov	r3, r0
 8008fde:	461a      	mov	r2, r3
 8008fe0:	7bfb      	ldrb	r3, [r7, #15]
 8008fe2:	4313      	orrs	r3, r2
 8008fe4:	73fb      	strb	r3, [r7, #15]

	if (read_not_write) {
 8008fe6:	78fb      	ldrb	r3, [r7, #3]
 8008fe8:	2b00      	cmp	r3, #0
 8008fea:	d01e      	beq.n	800902a <VL53L0X_ref_calibration_io+0xa2>
		if (vhv_enable)
 8008fec:	f897 3020 	ldrb.w	r3, [r7, #32]
 8008ff0:	2b00      	cmp	r3, #0
 8008ff2:	d009      	beq.n	8009008 <VL53L0X_ref_calibration_io+0x80>
			Status |= VL53L0X_RdByte(Dev, 0xCB, pVhvSettings);
 8008ff4:	69ba      	ldr	r2, [r7, #24]
 8008ff6:	21cb      	movs	r1, #203	; 0xcb
 8008ff8:	6878      	ldr	r0, [r7, #4]
 8008ffa:	f002 fd71 	bl	800bae0 <VL53L0X_RdByte>
 8008ffe:	4603      	mov	r3, r0
 8009000:	461a      	mov	r2, r3
 8009002:	7bfb      	ldrb	r3, [r7, #15]
 8009004:	4313      	orrs	r3, r2
 8009006:	73fb      	strb	r3, [r7, #15]
		if (phase_enable)
 8009008:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800900c:	2b00      	cmp	r3, #0
 800900e:	d02a      	beq.n	8009066 <VL53L0X_ref_calibration_io+0xde>
			Status |= VL53L0X_RdByte(Dev, 0xEE, &PhaseCalint);
 8009010:	f107 030e 	add.w	r3, r7, #14
 8009014:	461a      	mov	r2, r3
 8009016:	21ee      	movs	r1, #238	; 0xee
 8009018:	6878      	ldr	r0, [r7, #4]
 800901a:	f002 fd61 	bl	800bae0 <VL53L0X_RdByte>
 800901e:	4603      	mov	r3, r0
 8009020:	461a      	mov	r2, r3
 8009022:	7bfb      	ldrb	r3, [r7, #15]
 8009024:	4313      	orrs	r3, r2
 8009026:	73fb      	strb	r3, [r7, #15]
 8009028:	e01d      	b.n	8009066 <VL53L0X_ref_calibration_io+0xde>
	} else {
		if (vhv_enable)
 800902a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800902e:	2b00      	cmp	r3, #0
 8009030:	d00a      	beq.n	8009048 <VL53L0X_ref_calibration_io+0xc0>
			Status |= VL53L0X_WrByte(Dev, 0xCB, VhvSettings);
 8009032:	78bb      	ldrb	r3, [r7, #2]
 8009034:	461a      	mov	r2, r3
 8009036:	21cb      	movs	r1, #203	; 0xcb
 8009038:	6878      	ldr	r0, [r7, #4]
 800903a:	f002 fccf 	bl	800b9dc <VL53L0X_WrByte>
 800903e:	4603      	mov	r3, r0
 8009040:	461a      	mov	r2, r3
 8009042:	7bfb      	ldrb	r3, [r7, #15]
 8009044:	4313      	orrs	r3, r2
 8009046:	73fb      	strb	r3, [r7, #15]
		if (phase_enable)
 8009048:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800904c:	2b00      	cmp	r3, #0
 800904e:	d00a      	beq.n	8009066 <VL53L0X_ref_calibration_io+0xde>
			Status |= VL53L0X_UpdateByte(Dev, 0xEE, 0x80, PhaseCal);
 8009050:	787b      	ldrb	r3, [r7, #1]
 8009052:	2280      	movs	r2, #128	; 0x80
 8009054:	21ee      	movs	r1, #238	; 0xee
 8009056:	6878      	ldr	r0, [r7, #4]
 8009058:	f002 fd0e 	bl	800ba78 <VL53L0X_UpdateByte>
 800905c:	4603      	mov	r3, r0
 800905e:	461a      	mov	r2, r3
 8009060:	7bfb      	ldrb	r3, [r7, #15]
 8009062:	4313      	orrs	r3, r2
 8009064:	73fb      	strb	r3, [r7, #15]
	}

	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8009066:	2201      	movs	r2, #1
 8009068:	21ff      	movs	r1, #255	; 0xff
 800906a:	6878      	ldr	r0, [r7, #4]
 800906c:	f002 fcb6 	bl	800b9dc <VL53L0X_WrByte>
 8009070:	4603      	mov	r3, r0
 8009072:	461a      	mov	r2, r3
 8009074:	7bfb      	ldrb	r3, [r7, #15]
 8009076:	4313      	orrs	r3, r2
 8009078:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 800907a:	2201      	movs	r2, #1
 800907c:	2100      	movs	r1, #0
 800907e:	6878      	ldr	r0, [r7, #4]
 8009080:	f002 fcac 	bl	800b9dc <VL53L0X_WrByte>
 8009084:	4603      	mov	r3, r0
 8009086:	461a      	mov	r2, r3
 8009088:	7bfb      	ldrb	r3, [r7, #15]
 800908a:	4313      	orrs	r3, r2
 800908c:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800908e:	2200      	movs	r2, #0
 8009090:	21ff      	movs	r1, #255	; 0xff
 8009092:	6878      	ldr	r0, [r7, #4]
 8009094:	f002 fca2 	bl	800b9dc <VL53L0X_WrByte>
 8009098:	4603      	mov	r3, r0
 800909a:	461a      	mov	r2, r3
 800909c:	7bfb      	ldrb	r3, [r7, #15]
 800909e:	4313      	orrs	r3, r2
 80090a0:	73fb      	strb	r3, [r7, #15]

	*pPhaseCal = (uint8_t)(PhaseCalint&0xEF);
 80090a2:	7bbb      	ldrb	r3, [r7, #14]
 80090a4:	f023 0310 	bic.w	r3, r3, #16
 80090a8:	b2da      	uxtb	r2, r3
 80090aa:	69fb      	ldr	r3, [r7, #28]
 80090ac:	701a      	strb	r2, [r3, #0]

	return Status;
 80090ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80090b2:	4618      	mov	r0, r3
 80090b4:	3710      	adds	r7, #16
 80090b6:	46bd      	mov	sp, r7
 80090b8:	bd80      	pop	{r7, pc}

080090ba <VL53L0X_perform_vhv_calibration>:


VL53L0X_Error VL53L0X_perform_vhv_calibration(VL53L0X_DEV Dev,
	uint8_t *pVhvSettings, const uint8_t get_data_enable,
	const uint8_t restore_config)
{
 80090ba:	b580      	push	{r7, lr}
 80090bc:	b08a      	sub	sp, #40	; 0x28
 80090be:	af04      	add	r7, sp, #16
 80090c0:	60f8      	str	r0, [r7, #12]
 80090c2:	60b9      	str	r1, [r7, #8]
 80090c4:	4611      	mov	r1, r2
 80090c6:	461a      	mov	r2, r3
 80090c8:	460b      	mov	r3, r1
 80090ca:	71fb      	strb	r3, [r7, #7]
 80090cc:	4613      	mov	r3, r2
 80090ce:	71bb      	strb	r3, [r7, #6]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80090d0:	2300      	movs	r3, #0
 80090d2:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 80090d4:	2300      	movs	r3, #0
 80090d6:	75bb      	strb	r3, [r7, #22]
	uint8_t VhvSettings = 0;
 80090d8:	2300      	movs	r3, #0
 80090da:	757b      	strb	r3, [r7, #21]
	uint8_t PhaseCal = 0;
 80090dc:	2300      	movs	r3, #0
 80090de:	753b      	strb	r3, [r7, #20]
	uint8_t PhaseCalInt = 0;
 80090e0:	2300      	movs	r3, #0
 80090e2:	74fb      	strb	r3, [r7, #19]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	if (restore_config)
 80090e4:	79bb      	ldrb	r3, [r7, #6]
 80090e6:	2b00      	cmp	r3, #0
 80090e8:	d003      	beq.n	80090f2 <VL53L0X_perform_vhv_calibration+0x38>
		SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 80090ea:	68fb      	ldr	r3, [r7, #12]
 80090ec:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 80090f0:	75bb      	strb	r3, [r7, #22]

	/* Run VHV */
	Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0x01);
 80090f2:	2201      	movs	r2, #1
 80090f4:	2101      	movs	r1, #1
 80090f6:	68f8      	ldr	r0, [r7, #12]
 80090f8:	f002 fc70 	bl	800b9dc <VL53L0X_WrByte>
 80090fc:	4603      	mov	r3, r0
 80090fe:	75fb      	strb	r3, [r7, #23]

	if (Status == VL53L0X_ERROR_NONE)
 8009100:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009104:	2b00      	cmp	r3, #0
 8009106:	d105      	bne.n	8009114 <VL53L0X_perform_vhv_calibration+0x5a>
		Status = VL53L0X_perform_single_ref_calibration(Dev, 0x40);
 8009108:	2140      	movs	r1, #64	; 0x40
 800910a:	68f8      	ldr	r0, [r7, #12]
 800910c:	f7ff ff01 	bl	8008f12 <VL53L0X_perform_single_ref_calibration>
 8009110:	4603      	mov	r3, r0
 8009112:	75fb      	strb	r3, [r7, #23]

	/* Read VHV from device */
	if ((Status == VL53L0X_ERROR_NONE) && (get_data_enable == 1)) {
 8009114:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009118:	2b00      	cmp	r3, #0
 800911a:	d115      	bne.n	8009148 <VL53L0X_perform_vhv_calibration+0x8e>
 800911c:	79fb      	ldrb	r3, [r7, #7]
 800911e:	2b01      	cmp	r3, #1
 8009120:	d112      	bne.n	8009148 <VL53L0X_perform_vhv_calibration+0x8e>
		Status = VL53L0X_ref_calibration_io(Dev, 1,
 8009122:	7d39      	ldrb	r1, [r7, #20]
 8009124:	7d7a      	ldrb	r2, [r7, #21]
 8009126:	2300      	movs	r3, #0
 8009128:	9303      	str	r3, [sp, #12]
 800912a:	2301      	movs	r3, #1
 800912c:	9302      	str	r3, [sp, #8]
 800912e:	f107 0313 	add.w	r3, r7, #19
 8009132:	9301      	str	r3, [sp, #4]
 8009134:	68bb      	ldr	r3, [r7, #8]
 8009136:	9300      	str	r3, [sp, #0]
 8009138:	460b      	mov	r3, r1
 800913a:	2101      	movs	r1, #1
 800913c:	68f8      	ldr	r0, [r7, #12]
 800913e:	f7ff ff23 	bl	8008f88 <VL53L0X_ref_calibration_io>
 8009142:	4603      	mov	r3, r0
 8009144:	75fb      	strb	r3, [r7, #23]
 8009146:	e002      	b.n	800914e <VL53L0X_perform_vhv_calibration+0x94>
			VhvSettings, PhaseCal, /* Not used here */
			pVhvSettings, &PhaseCalInt,
			1, 0);
	} else
		*pVhvSettings = 0;
 8009148:	68bb      	ldr	r3, [r7, #8]
 800914a:	2200      	movs	r2, #0
 800914c:	701a      	strb	r2, [r3, #0]


	if ((Status == VL53L0X_ERROR_NONE) && restore_config) {
 800914e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009152:	2b00      	cmp	r3, #0
 8009154:	d112      	bne.n	800917c <VL53L0X_perform_vhv_calibration+0xc2>
 8009156:	79bb      	ldrb	r3, [r7, #6]
 8009158:	2b00      	cmp	r3, #0
 800915a:	d00f      	beq.n	800917c <VL53L0X_perform_vhv_calibration+0xc2>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 800915c:	7dbb      	ldrb	r3, [r7, #22]
 800915e:	461a      	mov	r2, r3
 8009160:	2101      	movs	r1, #1
 8009162:	68f8      	ldr	r0, [r7, #12]
 8009164:	f002 fc3a 	bl	800b9dc <VL53L0X_WrByte>
 8009168:	4603      	mov	r3, r0
 800916a:	75fb      	strb	r3, [r7, #23]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 800916c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009170:	2b00      	cmp	r3, #0
 8009172:	d103      	bne.n	800917c <VL53L0X_perform_vhv_calibration+0xc2>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 8009174:	68fb      	ldr	r3, [r7, #12]
 8009176:	7dba      	ldrb	r2, [r7, #22]
 8009178:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	return Status;
 800917c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009180:	4618      	mov	r0, r3
 8009182:	3718      	adds	r7, #24
 8009184:	46bd      	mov	sp, r7
 8009186:	bd80      	pop	{r7, pc}

08009188 <VL53L0X_perform_phase_calibration>:

VL53L0X_Error VL53L0X_perform_phase_calibration(VL53L0X_DEV Dev,
	uint8_t *pPhaseCal, const uint8_t get_data_enable,
	const uint8_t restore_config)
{
 8009188:	b580      	push	{r7, lr}
 800918a:	b08a      	sub	sp, #40	; 0x28
 800918c:	af04      	add	r7, sp, #16
 800918e:	60f8      	str	r0, [r7, #12]
 8009190:	60b9      	str	r1, [r7, #8]
 8009192:	4611      	mov	r1, r2
 8009194:	461a      	mov	r2, r3
 8009196:	460b      	mov	r3, r1
 8009198:	71fb      	strb	r3, [r7, #7]
 800919a:	4613      	mov	r3, r2
 800919c:	71bb      	strb	r3, [r7, #6]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800919e:	2300      	movs	r3, #0
 80091a0:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 80091a2:	2300      	movs	r3, #0
 80091a4:	75bb      	strb	r3, [r7, #22]
	uint8_t VhvSettings = 0;
 80091a6:	2300      	movs	r3, #0
 80091a8:	757b      	strb	r3, [r7, #21]
	uint8_t PhaseCal = 0;
 80091aa:	2300      	movs	r3, #0
 80091ac:	753b      	strb	r3, [r7, #20]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	if (restore_config)
 80091ae:	79bb      	ldrb	r3, [r7, #6]
 80091b0:	2b00      	cmp	r3, #0
 80091b2:	d003      	beq.n	80091bc <VL53L0X_perform_phase_calibration+0x34>
		SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 80091b4:	68fb      	ldr	r3, [r7, #12]
 80091b6:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 80091ba:	75bb      	strb	r3, [r7, #22]

	/* Run PhaseCal */
	Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0x02);
 80091bc:	2202      	movs	r2, #2
 80091be:	2101      	movs	r1, #1
 80091c0:	68f8      	ldr	r0, [r7, #12]
 80091c2:	f002 fc0b 	bl	800b9dc <VL53L0X_WrByte>
 80091c6:	4603      	mov	r3, r0
 80091c8:	75fb      	strb	r3, [r7, #23]

	if (Status == VL53L0X_ERROR_NONE)
 80091ca:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80091ce:	2b00      	cmp	r3, #0
 80091d0:	d105      	bne.n	80091de <VL53L0X_perform_phase_calibration+0x56>
		Status = VL53L0X_perform_single_ref_calibration(Dev, 0x0);
 80091d2:	2100      	movs	r1, #0
 80091d4:	68f8      	ldr	r0, [r7, #12]
 80091d6:	f7ff fe9c 	bl	8008f12 <VL53L0X_perform_single_ref_calibration>
 80091da:	4603      	mov	r3, r0
 80091dc:	75fb      	strb	r3, [r7, #23]

	/* Read PhaseCal from device */
	if ((Status == VL53L0X_ERROR_NONE) && (get_data_enable == 1)) {
 80091de:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80091e2:	2b00      	cmp	r3, #0
 80091e4:	d115      	bne.n	8009212 <VL53L0X_perform_phase_calibration+0x8a>
 80091e6:	79fb      	ldrb	r3, [r7, #7]
 80091e8:	2b01      	cmp	r3, #1
 80091ea:	d112      	bne.n	8009212 <VL53L0X_perform_phase_calibration+0x8a>
		Status = VL53L0X_ref_calibration_io(Dev, 1,
 80091ec:	7d39      	ldrb	r1, [r7, #20]
 80091ee:	7d7a      	ldrb	r2, [r7, #21]
 80091f0:	2301      	movs	r3, #1
 80091f2:	9303      	str	r3, [sp, #12]
 80091f4:	2300      	movs	r3, #0
 80091f6:	9302      	str	r3, [sp, #8]
 80091f8:	68bb      	ldr	r3, [r7, #8]
 80091fa:	9301      	str	r3, [sp, #4]
 80091fc:	f107 0313 	add.w	r3, r7, #19
 8009200:	9300      	str	r3, [sp, #0]
 8009202:	460b      	mov	r3, r1
 8009204:	2101      	movs	r1, #1
 8009206:	68f8      	ldr	r0, [r7, #12]
 8009208:	f7ff febe 	bl	8008f88 <VL53L0X_ref_calibration_io>
 800920c:	4603      	mov	r3, r0
 800920e:	75fb      	strb	r3, [r7, #23]
 8009210:	e002      	b.n	8009218 <VL53L0X_perform_phase_calibration+0x90>
			VhvSettings, PhaseCal, /* Not used here */
			&VhvSettingsint, pPhaseCal,
			0, 1);
	} else
		*pPhaseCal = 0;
 8009212:	68bb      	ldr	r3, [r7, #8]
 8009214:	2200      	movs	r2, #0
 8009216:	701a      	strb	r2, [r3, #0]


	if ((Status == VL53L0X_ERROR_NONE) && restore_config) {
 8009218:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800921c:	2b00      	cmp	r3, #0
 800921e:	d112      	bne.n	8009246 <VL53L0X_perform_phase_calibration+0xbe>
 8009220:	79bb      	ldrb	r3, [r7, #6]
 8009222:	2b00      	cmp	r3, #0
 8009224:	d00f      	beq.n	8009246 <VL53L0X_perform_phase_calibration+0xbe>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8009226:	7dbb      	ldrb	r3, [r7, #22]
 8009228:	461a      	mov	r2, r3
 800922a:	2101      	movs	r1, #1
 800922c:	68f8      	ldr	r0, [r7, #12]
 800922e:	f002 fbd5 	bl	800b9dc <VL53L0X_WrByte>
 8009232:	4603      	mov	r3, r0
 8009234:	75fb      	strb	r3, [r7, #23]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 8009236:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800923a:	2b00      	cmp	r3, #0
 800923c:	d103      	bne.n	8009246 <VL53L0X_perform_phase_calibration+0xbe>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 800923e:	68fb      	ldr	r3, [r7, #12]
 8009240:	7dba      	ldrb	r2, [r7, #22]
 8009242:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	return Status;
 8009246:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800924a:	4618      	mov	r0, r3
 800924c:	3718      	adds	r7, #24
 800924e:	46bd      	mov	sp, r7
 8009250:	bd80      	pop	{r7, pc}

08009252 <VL53L0X_perform_ref_calibration>:

VL53L0X_Error VL53L0X_perform_ref_calibration(VL53L0X_DEV Dev,
	uint8_t *pVhvSettings, uint8_t *pPhaseCal, uint8_t get_data_enable)
{
 8009252:	b580      	push	{r7, lr}
 8009254:	b086      	sub	sp, #24
 8009256:	af00      	add	r7, sp, #0
 8009258:	60f8      	str	r0, [r7, #12]
 800925a:	60b9      	str	r1, [r7, #8]
 800925c:	607a      	str	r2, [r7, #4]
 800925e:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009260:	2300      	movs	r3, #0
 8009262:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 8009264:	2300      	movs	r3, #0
 8009266:	75bb      	strb	r3, [r7, #22]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 8009268:	68fb      	ldr	r3, [r7, #12]
 800926a:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 800926e:	75bb      	strb	r3, [r7, #22]

	/* In the following function we don't save the config to optimize
	 * writes on device. Config is saved and restored only once. */
	Status = VL53L0X_perform_vhv_calibration(
 8009270:	78fa      	ldrb	r2, [r7, #3]
 8009272:	2300      	movs	r3, #0
 8009274:	68b9      	ldr	r1, [r7, #8]
 8009276:	68f8      	ldr	r0, [r7, #12]
 8009278:	f7ff ff1f 	bl	80090ba <VL53L0X_perform_vhv_calibration>
 800927c:	4603      	mov	r3, r0
 800927e:	75fb      	strb	r3, [r7, #23]
			Dev, pVhvSettings, get_data_enable, 0);


	if (Status == VL53L0X_ERROR_NONE)
 8009280:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009284:	2b00      	cmp	r3, #0
 8009286:	d107      	bne.n	8009298 <VL53L0X_perform_ref_calibration+0x46>
		Status = VL53L0X_perform_phase_calibration(
 8009288:	78fa      	ldrb	r2, [r7, #3]
 800928a:	2300      	movs	r3, #0
 800928c:	6879      	ldr	r1, [r7, #4]
 800928e:	68f8      	ldr	r0, [r7, #12]
 8009290:	f7ff ff7a 	bl	8009188 <VL53L0X_perform_phase_calibration>
 8009294:	4603      	mov	r3, r0
 8009296:	75fb      	strb	r3, [r7, #23]
			Dev, pPhaseCal, get_data_enable, 0);


	if (Status == VL53L0X_ERROR_NONE) {
 8009298:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800929c:	2b00      	cmp	r3, #0
 800929e:	d10f      	bne.n	80092c0 <VL53L0X_perform_ref_calibration+0x6e>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 80092a0:	7dbb      	ldrb	r3, [r7, #22]
 80092a2:	461a      	mov	r2, r3
 80092a4:	2101      	movs	r1, #1
 80092a6:	68f8      	ldr	r0, [r7, #12]
 80092a8:	f002 fb98 	bl	800b9dc <VL53L0X_WrByte>
 80092ac:	4603      	mov	r3, r0
 80092ae:	75fb      	strb	r3, [r7, #23]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 80092b0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80092b4:	2b00      	cmp	r3, #0
 80092b6:	d103      	bne.n	80092c0 <VL53L0X_perform_ref_calibration+0x6e>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 80092b8:	68fb      	ldr	r3, [r7, #12]
 80092ba:	7dba      	ldrb	r2, [r7, #22]
 80092bc:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	return Status;
 80092c0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80092c4:	4618      	mov	r0, r3
 80092c6:	3718      	adds	r7, #24
 80092c8:	46bd      	mov	sp, r7
 80092ca:	bd80      	pop	{r7, pc}

080092cc <VL53L0X_measurement_poll_for_completion>:
	}
	return Status;
}

VL53L0X_Error VL53L0X_measurement_poll_for_completion(VL53L0X_DEV Dev)
{
 80092cc:	b580      	push	{r7, lr}
 80092ce:	b086      	sub	sp, #24
 80092d0:	af00      	add	r7, sp, #0
 80092d2:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80092d4:	2300      	movs	r3, #0
 80092d6:	75fb      	strb	r3, [r7, #23]
	uint8_t NewDataReady = 0;
 80092d8:	2300      	movs	r3, #0
 80092da:	73fb      	strb	r3, [r7, #15]
	uint32_t LoopNb;

	LOG_FUNCTION_START("");

	LoopNb = 0;
 80092dc:	2300      	movs	r3, #0
 80092de:	613b      	str	r3, [r7, #16]

	do {
		Status = VL53L0X_GetMeasurementDataReady(Dev, &NewDataReady);
 80092e0:	f107 030f 	add.w	r3, r7, #15
 80092e4:	4619      	mov	r1, r3
 80092e6:	6878      	ldr	r0, [r7, #4]
 80092e8:	f7fe fdd2 	bl	8007e90 <VL53L0X_GetMeasurementDataReady>
 80092ec:	4603      	mov	r3, r0
 80092ee:	75fb      	strb	r3, [r7, #23]
		if (Status != 0)
 80092f0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80092f4:	2b00      	cmp	r3, #0
 80092f6:	d110      	bne.n	800931a <VL53L0X_measurement_poll_for_completion+0x4e>
			break; /* the error is set */

		if (NewDataReady == 1)
 80092f8:	7bfb      	ldrb	r3, [r7, #15]
 80092fa:	2b01      	cmp	r3, #1
 80092fc:	d00f      	beq.n	800931e <VL53L0X_measurement_poll_for_completion+0x52>
			break; /* done note that status == 0 */

		LoopNb++;
 80092fe:	693b      	ldr	r3, [r7, #16]
 8009300:	3301      	adds	r3, #1
 8009302:	613b      	str	r3, [r7, #16]
		if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP) {
 8009304:	693b      	ldr	r3, [r7, #16]
 8009306:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800930a:	d302      	bcc.n	8009312 <VL53L0X_measurement_poll_for_completion+0x46>
			Status = VL53L0X_ERROR_TIME_OUT;
 800930c:	23f9      	movs	r3, #249	; 0xf9
 800930e:	75fb      	strb	r3, [r7, #23]
			break;
 8009310:	e006      	b.n	8009320 <VL53L0X_measurement_poll_for_completion+0x54>
		}

		VL53L0X_PollingDelay(Dev);
 8009312:	6878      	ldr	r0, [r7, #4]
 8009314:	f002 fc82 	bl	800bc1c <VL53L0X_PollingDelay>
		Status = VL53L0X_GetMeasurementDataReady(Dev, &NewDataReady);
 8009318:	e7e2      	b.n	80092e0 <VL53L0X_measurement_poll_for_completion+0x14>
			break; /* the error is set */
 800931a:	bf00      	nop
 800931c:	e000      	b.n	8009320 <VL53L0X_measurement_poll_for_completion+0x54>
			break; /* done note that status == 0 */
 800931e:	bf00      	nop
	} while (1);

	LOG_FUNCTION_END(Status);

	return Status;
 8009320:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009324:	4618      	mov	r0, r3
 8009326:	3718      	adds	r7, #24
 8009328:	46bd      	mov	sp, r7
 800932a:	bd80      	pop	{r7, pc}

0800932c <VL53L0X_decode_vcsel_period>:


uint8_t VL53L0X_decode_vcsel_period(uint8_t vcsel_period_reg)
{
 800932c:	b480      	push	{r7}
 800932e:	b085      	sub	sp, #20
 8009330:	af00      	add	r7, sp, #0
 8009332:	4603      	mov	r3, r0
 8009334:	71fb      	strb	r3, [r7, #7]
	/*!
	 * Converts the encoded VCSEL period register value into the real
	 * period in PLL clocks
	 */

	uint8_t vcsel_period_pclks = 0;
 8009336:	2300      	movs	r3, #0
 8009338:	73fb      	strb	r3, [r7, #15]

	vcsel_period_pclks = (vcsel_period_reg + 1) << 1;
 800933a:	79fb      	ldrb	r3, [r7, #7]
 800933c:	3301      	adds	r3, #1
 800933e:	b2db      	uxtb	r3, r3
 8009340:	005b      	lsls	r3, r3, #1
 8009342:	73fb      	strb	r3, [r7, #15]

	return vcsel_period_pclks;
 8009344:	7bfb      	ldrb	r3, [r7, #15]
}
 8009346:	4618      	mov	r0, r3
 8009348:	3714      	adds	r7, #20
 800934a:	46bd      	mov	sp, r7
 800934c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009350:	4770      	bx	lr

08009352 <VL53L0X_encode_vcsel_period>:

uint8_t VL53L0X_encode_vcsel_period(uint8_t vcsel_period_pclks)
{
 8009352:	b480      	push	{r7}
 8009354:	b085      	sub	sp, #20
 8009356:	af00      	add	r7, sp, #0
 8009358:	4603      	mov	r3, r0
 800935a:	71fb      	strb	r3, [r7, #7]
	/*!
	 * Converts the encoded VCSEL period register value into the real period
	 * in PLL clocks
	 */

	uint8_t vcsel_period_reg = 0;
 800935c:	2300      	movs	r3, #0
 800935e:	73fb      	strb	r3, [r7, #15]

	vcsel_period_reg = (vcsel_period_pclks >> 1) - 1;
 8009360:	79fb      	ldrb	r3, [r7, #7]
 8009362:	085b      	lsrs	r3, r3, #1
 8009364:	b2db      	uxtb	r3, r3
 8009366:	3b01      	subs	r3, #1
 8009368:	73fb      	strb	r3, [r7, #15]

	return vcsel_period_reg;
 800936a:	7bfb      	ldrb	r3, [r7, #15]
}
 800936c:	4618      	mov	r0, r3
 800936e:	3714      	adds	r7, #20
 8009370:	46bd      	mov	sp, r7
 8009372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009376:	4770      	bx	lr

08009378 <VL53L0X_isqrt>:


uint32_t VL53L0X_isqrt(uint32_t num)
{
 8009378:	b480      	push	{r7}
 800937a:	b085      	sub	sp, #20
 800937c:	af00      	add	r7, sp, #0
 800937e:	6078      	str	r0, [r7, #4]
	 * Implements an integer square root
	 *
	 * From: http://en.wikipedia.org/wiki/Methods_of_computing_square_roots
	 */

	uint32_t  res = 0;
 8009380:	2300      	movs	r3, #0
 8009382:	60fb      	str	r3, [r7, #12]
	uint32_t  bit = 1 << 30;
 8009384:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8009388:	60bb      	str	r3, [r7, #8]
	/* The second-to-top bit is set:
	 *	1 << 14 for 16-bits, 1 << 30 for 32 bits */

	 /* "bit" starts at the highest power of four <= the argument. */
	while (bit > num)
 800938a:	e002      	b.n	8009392 <VL53L0X_isqrt+0x1a>
		bit >>= 2;
 800938c:	68bb      	ldr	r3, [r7, #8]
 800938e:	089b      	lsrs	r3, r3, #2
 8009390:	60bb      	str	r3, [r7, #8]
	while (bit > num)
 8009392:	68ba      	ldr	r2, [r7, #8]
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	429a      	cmp	r2, r3
 8009398:	d8f8      	bhi.n	800938c <VL53L0X_isqrt+0x14>


	while (bit != 0) {
 800939a:	e017      	b.n	80093cc <VL53L0X_isqrt+0x54>
		if (num >= res + bit) {
 800939c:	68fa      	ldr	r2, [r7, #12]
 800939e:	68bb      	ldr	r3, [r7, #8]
 80093a0:	4413      	add	r3, r2
 80093a2:	687a      	ldr	r2, [r7, #4]
 80093a4:	429a      	cmp	r2, r3
 80093a6:	d30b      	bcc.n	80093c0 <VL53L0X_isqrt+0x48>
			num -= res + bit;
 80093a8:	68fa      	ldr	r2, [r7, #12]
 80093aa:	68bb      	ldr	r3, [r7, #8]
 80093ac:	4413      	add	r3, r2
 80093ae:	687a      	ldr	r2, [r7, #4]
 80093b0:	1ad3      	subs	r3, r2, r3
 80093b2:	607b      	str	r3, [r7, #4]
			res = (res >> 1) + bit;
 80093b4:	68fb      	ldr	r3, [r7, #12]
 80093b6:	085b      	lsrs	r3, r3, #1
 80093b8:	68ba      	ldr	r2, [r7, #8]
 80093ba:	4413      	add	r3, r2
 80093bc:	60fb      	str	r3, [r7, #12]
 80093be:	e002      	b.n	80093c6 <VL53L0X_isqrt+0x4e>
		} else
			res >>= 1;
 80093c0:	68fb      	ldr	r3, [r7, #12]
 80093c2:	085b      	lsrs	r3, r3, #1
 80093c4:	60fb      	str	r3, [r7, #12]

		bit >>= 2;
 80093c6:	68bb      	ldr	r3, [r7, #8]
 80093c8:	089b      	lsrs	r3, r3, #2
 80093ca:	60bb      	str	r3, [r7, #8]
	while (bit != 0) {
 80093cc:	68bb      	ldr	r3, [r7, #8]
 80093ce:	2b00      	cmp	r3, #0
 80093d0:	d1e4      	bne.n	800939c <VL53L0X_isqrt+0x24>
	}

	return res;
 80093d2:	68fb      	ldr	r3, [r7, #12]
}
 80093d4:	4618      	mov	r0, r3
 80093d6:	3714      	adds	r7, #20
 80093d8:	46bd      	mov	sp, r7
 80093da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093de:	4770      	bx	lr

080093e0 <VL53L0X_device_read_strobe>:
	return res;
}


VL53L0X_Error VL53L0X_device_read_strobe(VL53L0X_DEV Dev)
{
 80093e0:	b580      	push	{r7, lr}
 80093e2:	b086      	sub	sp, #24
 80093e4:	af00      	add	r7, sp, #0
 80093e6:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80093e8:	2300      	movs	r3, #0
 80093ea:	75fb      	strb	r3, [r7, #23]
	uint8_t strobe;
	uint32_t LoopNb;
	LOG_FUNCTION_START("");

	Status |= VL53L0X_WrByte(Dev, 0x83, 0x00);
 80093ec:	2200      	movs	r2, #0
 80093ee:	2183      	movs	r1, #131	; 0x83
 80093f0:	6878      	ldr	r0, [r7, #4]
 80093f2:	f002 faf3 	bl	800b9dc <VL53L0X_WrByte>
 80093f6:	4603      	mov	r3, r0
 80093f8:	461a      	mov	r2, r3
 80093fa:	7dfb      	ldrb	r3, [r7, #23]
 80093fc:	4313      	orrs	r3, r2
 80093fe:	75fb      	strb	r3, [r7, #23]

	/* polling
	 * use timeout to avoid deadlock*/
	if (Status == VL53L0X_ERROR_NONE) {
 8009400:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009404:	2b00      	cmp	r3, #0
 8009406:	d11e      	bne.n	8009446 <VL53L0X_device_read_strobe+0x66>
		LoopNb = 0;
 8009408:	2300      	movs	r3, #0
 800940a:	613b      	str	r3, [r7, #16]
		do {
			Status = VL53L0X_RdByte(Dev, 0x83, &strobe);
 800940c:	f107 030f 	add.w	r3, r7, #15
 8009410:	461a      	mov	r2, r3
 8009412:	2183      	movs	r1, #131	; 0x83
 8009414:	6878      	ldr	r0, [r7, #4]
 8009416:	f002 fb63 	bl	800bae0 <VL53L0X_RdByte>
 800941a:	4603      	mov	r3, r0
 800941c:	75fb      	strb	r3, [r7, #23]
			if ((strobe != 0x00) || Status != VL53L0X_ERROR_NONE)
 800941e:	7bfb      	ldrb	r3, [r7, #15]
 8009420:	2b00      	cmp	r3, #0
 8009422:	d10a      	bne.n	800943a <VL53L0X_device_read_strobe+0x5a>
 8009424:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009428:	2b00      	cmp	r3, #0
 800942a:	d106      	bne.n	800943a <VL53L0X_device_read_strobe+0x5a>
					break;

			LoopNb = LoopNb + 1;
 800942c:	693b      	ldr	r3, [r7, #16]
 800942e:	3301      	adds	r3, #1
 8009430:	613b      	str	r3, [r7, #16]
		} while (LoopNb < VL53L0X_DEFAULT_MAX_LOOP);
 8009432:	693b      	ldr	r3, [r7, #16]
 8009434:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8009438:	d3e8      	bcc.n	800940c <VL53L0X_device_read_strobe+0x2c>

		if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP)
 800943a:	693b      	ldr	r3, [r7, #16]
 800943c:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8009440:	d301      	bcc.n	8009446 <VL53L0X_device_read_strobe+0x66>
			Status = VL53L0X_ERROR_TIME_OUT;
 8009442:	23f9      	movs	r3, #249	; 0xf9
 8009444:	75fb      	strb	r3, [r7, #23]

	}

	Status |= VL53L0X_WrByte(Dev, 0x83, 0x01);
 8009446:	2201      	movs	r2, #1
 8009448:	2183      	movs	r1, #131	; 0x83
 800944a:	6878      	ldr	r0, [r7, #4]
 800944c:	f002 fac6 	bl	800b9dc <VL53L0X_WrByte>
 8009450:	4603      	mov	r3, r0
 8009452:	461a      	mov	r2, r3
 8009454:	7dfb      	ldrb	r3, [r7, #23]
 8009456:	4313      	orrs	r3, r2
 8009458:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_END(Status);
	return Status;
 800945a:	f997 3017 	ldrsb.w	r3, [r7, #23]

}
 800945e:	4618      	mov	r0, r3
 8009460:	3718      	adds	r7, #24
 8009462:	46bd      	mov	sp, r7
 8009464:	bd80      	pop	{r7, pc}

08009466 <VL53L0X_get_info_from_device>:

VL53L0X_Error VL53L0X_get_info_from_device(VL53L0X_DEV Dev, uint8_t option)
{
 8009466:	b580      	push	{r7, lr}
 8009468:	b098      	sub	sp, #96	; 0x60
 800946a:	af00      	add	r7, sp, #0
 800946c:	6078      	str	r0, [r7, #4]
 800946e:	460b      	mov	r3, r1
 8009470:	70fb      	strb	r3, [r7, #3]

	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009472:	2300      	movs	r3, #0
 8009474:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	uint8_t byte;
	uint32_t TmpDWord;
	uint8_t ModuleId;
	uint8_t Revision;
	uint8_t ReferenceSpadCount = 0;
 8009478:	2300      	movs	r3, #0
 800947a:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
	uint8_t ReferenceSpadType = 0;
 800947e:	2300      	movs	r3, #0
 8009480:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
	uint32_t PartUIDUpper = 0;
 8009484:	2300      	movs	r3, #0
 8009486:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t PartUIDLower = 0;
 8009488:	2300      	movs	r3, #0
 800948a:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t OffsetFixed1104_mm = 0;
 800948c:	2300      	movs	r3, #0
 800948e:	64bb      	str	r3, [r7, #72]	; 0x48
	int16_t OffsetMicroMeters = 0;
 8009490:	2300      	movs	r3, #0
 8009492:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
	uint32_t DistMeasTgtFixed1104_mm = 400 << 4;
 8009496:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 800949a:	647b      	str	r3, [r7, #68]	; 0x44
	uint32_t DistMeasFixed1104_400_mm = 0;
 800949c:	2300      	movs	r3, #0
 800949e:	657b      	str	r3, [r7, #84]	; 0x54
	uint32_t SignalRateMeasFixed1104_400_mm = 0;
 80094a0:	2300      	movs	r3, #0
 80094a2:	653b      	str	r3, [r7, #80]	; 0x50
	char ProductId[19];
	char *ProductId_tmp;
	uint8_t ReadDataFromDeviceDone;
	FixPoint1616_t SignalRateMeasFixed400mmFix = 0;
 80094a4:	2300      	movs	r3, #0
 80094a6:	643b      	str	r3, [r7, #64]	; 0x40
	int i;


	LOG_FUNCTION_START("");

	ReadDataFromDeviceDone = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	f893 30f0 	ldrb.w	r3, [r3, #240]	; 0xf0
 80094ae:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			ReadDataFromDeviceDone);

	/* This access is done only once after that a GetDeviceInfo or
	 * datainit is done*/
	if (ReadDataFromDeviceDone != 7) {
 80094b2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80094b6:	2b07      	cmp	r3, #7
 80094b8:	f000 8408 	beq.w	8009ccc <VL53L0X_get_info_from_device+0x866>

		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 80094bc:	2201      	movs	r2, #1
 80094be:	2180      	movs	r1, #128	; 0x80
 80094c0:	6878      	ldr	r0, [r7, #4]
 80094c2:	f002 fa8b 	bl	800b9dc <VL53L0X_WrByte>
 80094c6:	4603      	mov	r3, r0
 80094c8:	461a      	mov	r2, r3
 80094ca:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80094ce:	4313      	orrs	r3, r2
 80094d0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 80094d4:	2201      	movs	r2, #1
 80094d6:	21ff      	movs	r1, #255	; 0xff
 80094d8:	6878      	ldr	r0, [r7, #4]
 80094da:	f002 fa7f 	bl	800b9dc <VL53L0X_WrByte>
 80094de:	4603      	mov	r3, r0
 80094e0:	461a      	mov	r2, r3
 80094e2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80094e6:	4313      	orrs	r3, r2
 80094e8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 80094ec:	2200      	movs	r2, #0
 80094ee:	2100      	movs	r1, #0
 80094f0:	6878      	ldr	r0, [r7, #4]
 80094f2:	f002 fa73 	bl	800b9dc <VL53L0X_WrByte>
 80094f6:	4603      	mov	r3, r0
 80094f8:	461a      	mov	r2, r3
 80094fa:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80094fe:	4313      	orrs	r3, r2
 8009500:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x06);
 8009504:	2206      	movs	r2, #6
 8009506:	21ff      	movs	r1, #255	; 0xff
 8009508:	6878      	ldr	r0, [r7, #4]
 800950a:	f002 fa67 	bl	800b9dc <VL53L0X_WrByte>
 800950e:	4603      	mov	r3, r0
 8009510:	461a      	mov	r2, r3
 8009512:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009516:	4313      	orrs	r3, r2
 8009518:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_RdByte(Dev, 0x83, &byte);
 800951c:	f107 0337 	add.w	r3, r7, #55	; 0x37
 8009520:	461a      	mov	r2, r3
 8009522:	2183      	movs	r1, #131	; 0x83
 8009524:	6878      	ldr	r0, [r7, #4]
 8009526:	f002 fadb 	bl	800bae0 <VL53L0X_RdByte>
 800952a:	4603      	mov	r3, r0
 800952c:	461a      	mov	r2, r3
 800952e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009532:	4313      	orrs	r3, r2
 8009534:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x83, byte|4);
 8009538:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800953c:	f043 0304 	orr.w	r3, r3, #4
 8009540:	b2db      	uxtb	r3, r3
 8009542:	461a      	mov	r2, r3
 8009544:	2183      	movs	r1, #131	; 0x83
 8009546:	6878      	ldr	r0, [r7, #4]
 8009548:	f002 fa48 	bl	800b9dc <VL53L0X_WrByte>
 800954c:	4603      	mov	r3, r0
 800954e:	461a      	mov	r2, r3
 8009550:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009554:	4313      	orrs	r3, r2
 8009556:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x07);
 800955a:	2207      	movs	r2, #7
 800955c:	21ff      	movs	r1, #255	; 0xff
 800955e:	6878      	ldr	r0, [r7, #4]
 8009560:	f002 fa3c 	bl	800b9dc <VL53L0X_WrByte>
 8009564:	4603      	mov	r3, r0
 8009566:	461a      	mov	r2, r3
 8009568:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800956c:	4313      	orrs	r3, r2
 800956e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x81, 0x01);
 8009572:	2201      	movs	r2, #1
 8009574:	2181      	movs	r1, #129	; 0x81
 8009576:	6878      	ldr	r0, [r7, #4]
 8009578:	f002 fa30 	bl	800b9dc <VL53L0X_WrByte>
 800957c:	4603      	mov	r3, r0
 800957e:	461a      	mov	r2, r3
 8009580:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009584:	4313      	orrs	r3, r2
 8009586:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_PollingDelay(Dev);
 800958a:	6878      	ldr	r0, [r7, #4]
 800958c:	f002 fb46 	bl	800bc1c <VL53L0X_PollingDelay>
 8009590:	4603      	mov	r3, r0
 8009592:	461a      	mov	r2, r3
 8009594:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009598:	4313      	orrs	r3, r2
 800959a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 800959e:	2201      	movs	r2, #1
 80095a0:	2180      	movs	r1, #128	; 0x80
 80095a2:	6878      	ldr	r0, [r7, #4]
 80095a4:	f002 fa1a 	bl	800b9dc <VL53L0X_WrByte>
 80095a8:	4603      	mov	r3, r0
 80095aa:	461a      	mov	r2, r3
 80095ac:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80095b0:	4313      	orrs	r3, r2
 80095b2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		if (((option & 1) == 1) &&
 80095b6:	78fb      	ldrb	r3, [r7, #3]
 80095b8:	f003 0301 	and.w	r3, r3, #1
 80095bc:	2b00      	cmp	r3, #0
 80095be:	f000 8098 	beq.w	80096f2 <VL53L0X_get_info_from_device+0x28c>
			((ReadDataFromDeviceDone & 1) == 0)) {
 80095c2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80095c6:	f003 0301 	and.w	r3, r3, #1
		if (((option & 1) == 1) &&
 80095ca:	2b00      	cmp	r3, #0
 80095cc:	f040 8091 	bne.w	80096f2 <VL53L0X_get_info_from_device+0x28c>
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x6b);
 80095d0:	226b      	movs	r2, #107	; 0x6b
 80095d2:	2194      	movs	r1, #148	; 0x94
 80095d4:	6878      	ldr	r0, [r7, #4]
 80095d6:	f002 fa01 	bl	800b9dc <VL53L0X_WrByte>
 80095da:	4603      	mov	r3, r0
 80095dc:	461a      	mov	r2, r3
 80095de:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80095e2:	4313      	orrs	r3, r2
 80095e4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 80095e8:	6878      	ldr	r0, [r7, #4]
 80095ea:	f7ff fef9 	bl	80093e0 <VL53L0X_device_read_strobe>
 80095ee:	4603      	mov	r3, r0
 80095f0:	461a      	mov	r2, r3
 80095f2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80095f6:	4313      	orrs	r3, r2
 80095f8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 80095fc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8009600:	461a      	mov	r2, r3
 8009602:	2190      	movs	r1, #144	; 0x90
 8009604:	6878      	ldr	r0, [r7, #4]
 8009606:	f002 facd 	bl	800bba4 <VL53L0X_RdDWord>
 800960a:	4603      	mov	r3, r0
 800960c:	461a      	mov	r2, r3
 800960e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009612:	4313      	orrs	r3, r2
 8009614:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ReferenceSpadCount = (uint8_t)((TmpDWord >> 8) & 0x07f);
 8009618:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800961a:	0a1b      	lsrs	r3, r3, #8
 800961c:	b2db      	uxtb	r3, r3
 800961e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009622:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
			ReferenceSpadType  = (uint8_t)((TmpDWord >> 15) & 0x01);
 8009626:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009628:	0bdb      	lsrs	r3, r3, #15
 800962a:	b2db      	uxtb	r3, r3
 800962c:	f003 0301 	and.w	r3, r3, #1
 8009630:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x24);
 8009634:	2224      	movs	r2, #36	; 0x24
 8009636:	2194      	movs	r1, #148	; 0x94
 8009638:	6878      	ldr	r0, [r7, #4]
 800963a:	f002 f9cf 	bl	800b9dc <VL53L0X_WrByte>
 800963e:	4603      	mov	r3, r0
 8009640:	461a      	mov	r2, r3
 8009642:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009646:	4313      	orrs	r3, r2
 8009648:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800964c:	6878      	ldr	r0, [r7, #4]
 800964e:	f7ff fec7 	bl	80093e0 <VL53L0X_device_read_strobe>
 8009652:	4603      	mov	r3, r0
 8009654:	461a      	mov	r2, r3
 8009656:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800965a:	4313      	orrs	r3, r2
 800965c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8009660:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8009664:	461a      	mov	r2, r3
 8009666:	2190      	movs	r1, #144	; 0x90
 8009668:	6878      	ldr	r0, [r7, #4]
 800966a:	f002 fa9b 	bl	800bba4 <VL53L0X_RdDWord>
 800966e:	4603      	mov	r3, r0
 8009670:	461a      	mov	r2, r3
 8009672:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009676:	4313      	orrs	r3, r2
 8009678:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f


			NvmRefGoodSpadMap[0] = (uint8_t)((TmpDWord >> 24)
 800967c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800967e:	0e1b      	lsrs	r3, r3, #24
 8009680:	b2db      	uxtb	r3, r3
 8009682:	723b      	strb	r3, [r7, #8]
				& 0xff);
			NvmRefGoodSpadMap[1] = (uint8_t)((TmpDWord >> 16)
 8009684:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009686:	0c1b      	lsrs	r3, r3, #16
 8009688:	b2db      	uxtb	r3, r3
 800968a:	727b      	strb	r3, [r7, #9]
				& 0xff);
			NvmRefGoodSpadMap[2] = (uint8_t)((TmpDWord >> 8)
 800968c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800968e:	0a1b      	lsrs	r3, r3, #8
 8009690:	b2db      	uxtb	r3, r3
 8009692:	72bb      	strb	r3, [r7, #10]
				& 0xff);
			NvmRefGoodSpadMap[3] = (uint8_t)(TmpDWord & 0xff);
 8009694:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009696:	b2db      	uxtb	r3, r3
 8009698:	72fb      	strb	r3, [r7, #11]

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x25);
 800969a:	2225      	movs	r2, #37	; 0x25
 800969c:	2194      	movs	r1, #148	; 0x94
 800969e:	6878      	ldr	r0, [r7, #4]
 80096a0:	f002 f99c 	bl	800b9dc <VL53L0X_WrByte>
 80096a4:	4603      	mov	r3, r0
 80096a6:	461a      	mov	r2, r3
 80096a8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80096ac:	4313      	orrs	r3, r2
 80096ae:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 80096b2:	6878      	ldr	r0, [r7, #4]
 80096b4:	f7ff fe94 	bl	80093e0 <VL53L0X_device_read_strobe>
 80096b8:	4603      	mov	r3, r0
 80096ba:	461a      	mov	r2, r3
 80096bc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80096c0:	4313      	orrs	r3, r2
 80096c2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 80096c6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80096ca:	461a      	mov	r2, r3
 80096cc:	2190      	movs	r1, #144	; 0x90
 80096ce:	6878      	ldr	r0, [r7, #4]
 80096d0:	f002 fa68 	bl	800bba4 <VL53L0X_RdDWord>
 80096d4:	4603      	mov	r3, r0
 80096d6:	461a      	mov	r2, r3
 80096d8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80096dc:	4313      	orrs	r3, r2
 80096de:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			NvmRefGoodSpadMap[4] = (uint8_t)((TmpDWord >> 24)
 80096e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096e4:	0e1b      	lsrs	r3, r3, #24
 80096e6:	b2db      	uxtb	r3, r3
 80096e8:	733b      	strb	r3, [r7, #12]
				& 0xff);
			NvmRefGoodSpadMap[5] = (uint8_t)((TmpDWord >> 16)
 80096ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096ec:	0c1b      	lsrs	r3, r3, #16
 80096ee:	b2db      	uxtb	r3, r3
 80096f0:	737b      	strb	r3, [r7, #13]
				& 0xff);
		}

		if (((option & 2) == 2) &&
 80096f2:	78fb      	ldrb	r3, [r7, #3]
 80096f4:	f003 0302 	and.w	r3, r3, #2
 80096f8:	2b00      	cmp	r3, #0
 80096fa:	f000 8189 	beq.w	8009a10 <VL53L0X_get_info_from_device+0x5aa>
			((ReadDataFromDeviceDone & 2) == 0)) {
 80096fe:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8009702:	f003 0302 	and.w	r3, r3, #2
		if (((option & 2) == 2) &&
 8009706:	2b00      	cmp	r3, #0
 8009708:	f040 8182 	bne.w	8009a10 <VL53L0X_get_info_from_device+0x5aa>

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x02);
 800970c:	2202      	movs	r2, #2
 800970e:	2194      	movs	r1, #148	; 0x94
 8009710:	6878      	ldr	r0, [r7, #4]
 8009712:	f002 f963 	bl	800b9dc <VL53L0X_WrByte>
 8009716:	4603      	mov	r3, r0
 8009718:	461a      	mov	r2, r3
 800971a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800971e:	4313      	orrs	r3, r2
 8009720:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8009724:	6878      	ldr	r0, [r7, #4]
 8009726:	f7ff fe5b 	bl	80093e0 <VL53L0X_device_read_strobe>
 800972a:	4603      	mov	r3, r0
 800972c:	461a      	mov	r2, r3
 800972e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009732:	4313      	orrs	r3, r2
 8009734:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdByte(Dev, 0x90, &ModuleId);
 8009738:	f107 032f 	add.w	r3, r7, #47	; 0x2f
 800973c:	461a      	mov	r2, r3
 800973e:	2190      	movs	r1, #144	; 0x90
 8009740:	6878      	ldr	r0, [r7, #4]
 8009742:	f002 f9cd 	bl	800bae0 <VL53L0X_RdByte>
 8009746:	4603      	mov	r3, r0
 8009748:	461a      	mov	r2, r3
 800974a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800974e:	4313      	orrs	r3, r2
 8009750:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7B);
 8009754:	227b      	movs	r2, #123	; 0x7b
 8009756:	2194      	movs	r1, #148	; 0x94
 8009758:	6878      	ldr	r0, [r7, #4]
 800975a:	f002 f93f 	bl	800b9dc <VL53L0X_WrByte>
 800975e:	4603      	mov	r3, r0
 8009760:	461a      	mov	r2, r3
 8009762:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009766:	4313      	orrs	r3, r2
 8009768:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800976c:	6878      	ldr	r0, [r7, #4]
 800976e:	f7ff fe37 	bl	80093e0 <VL53L0X_device_read_strobe>
 8009772:	4603      	mov	r3, r0
 8009774:	461a      	mov	r2, r3
 8009776:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800977a:	4313      	orrs	r3, r2
 800977c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdByte(Dev, 0x90, &Revision);
 8009780:	f107 032e 	add.w	r3, r7, #46	; 0x2e
 8009784:	461a      	mov	r2, r3
 8009786:	2190      	movs	r1, #144	; 0x90
 8009788:	6878      	ldr	r0, [r7, #4]
 800978a:	f002 f9a9 	bl	800bae0 <VL53L0X_RdByte>
 800978e:	4603      	mov	r3, r0
 8009790:	461a      	mov	r2, r3
 8009792:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009796:	4313      	orrs	r3, r2
 8009798:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x77);
 800979c:	2277      	movs	r2, #119	; 0x77
 800979e:	2194      	movs	r1, #148	; 0x94
 80097a0:	6878      	ldr	r0, [r7, #4]
 80097a2:	f002 f91b 	bl	800b9dc <VL53L0X_WrByte>
 80097a6:	4603      	mov	r3, r0
 80097a8:	461a      	mov	r2, r3
 80097aa:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80097ae:	4313      	orrs	r3, r2
 80097b0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 80097b4:	6878      	ldr	r0, [r7, #4]
 80097b6:	f7ff fe13 	bl	80093e0 <VL53L0X_device_read_strobe>
 80097ba:	4603      	mov	r3, r0
 80097bc:	461a      	mov	r2, r3
 80097be:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80097c2:	4313      	orrs	r3, r2
 80097c4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 80097c8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80097cc:	461a      	mov	r2, r3
 80097ce:	2190      	movs	r1, #144	; 0x90
 80097d0:	6878      	ldr	r0, [r7, #4]
 80097d2:	f002 f9e7 	bl	800bba4 <VL53L0X_RdDWord>
 80097d6:	4603      	mov	r3, r0
 80097d8:	461a      	mov	r2, r3
 80097da:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80097de:	4313      	orrs	r3, r2
 80097e0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[0] = (char)((TmpDWord >> 25) & 0x07f);
 80097e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097e6:	0e5b      	lsrs	r3, r3, #25
 80097e8:	b2db      	uxtb	r3, r3
 80097ea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80097ee:	b2db      	uxtb	r3, r3
 80097f0:	743b      	strb	r3, [r7, #16]
			ProductId[1] = (char)((TmpDWord >> 18) & 0x07f);
 80097f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097f4:	0c9b      	lsrs	r3, r3, #18
 80097f6:	b2db      	uxtb	r3, r3
 80097f8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80097fc:	b2db      	uxtb	r3, r3
 80097fe:	747b      	strb	r3, [r7, #17]
			ProductId[2] = (char)((TmpDWord >> 11) & 0x07f);
 8009800:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009802:	0adb      	lsrs	r3, r3, #11
 8009804:	b2db      	uxtb	r3, r3
 8009806:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800980a:	b2db      	uxtb	r3, r3
 800980c:	74bb      	strb	r3, [r7, #18]
			ProductId[3] = (char)((TmpDWord >> 4) & 0x07f);
 800980e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009810:	091b      	lsrs	r3, r3, #4
 8009812:	b2db      	uxtb	r3, r3
 8009814:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009818:	b2db      	uxtb	r3, r3
 800981a:	74fb      	strb	r3, [r7, #19]

			byte = (uint8_t)((TmpDWord & 0x00f) << 3);
 800981c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800981e:	b2db      	uxtb	r3, r3
 8009820:	00db      	lsls	r3, r3, #3
 8009822:	b2db      	uxtb	r3, r3
 8009824:	f003 0378 	and.w	r3, r3, #120	; 0x78
 8009828:	b2db      	uxtb	r3, r3
 800982a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x78);
 800982e:	2278      	movs	r2, #120	; 0x78
 8009830:	2194      	movs	r1, #148	; 0x94
 8009832:	6878      	ldr	r0, [r7, #4]
 8009834:	f002 f8d2 	bl	800b9dc <VL53L0X_WrByte>
 8009838:	4603      	mov	r3, r0
 800983a:	461a      	mov	r2, r3
 800983c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009840:	4313      	orrs	r3, r2
 8009842:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8009846:	6878      	ldr	r0, [r7, #4]
 8009848:	f7ff fdca 	bl	80093e0 <VL53L0X_device_read_strobe>
 800984c:	4603      	mov	r3, r0
 800984e:	461a      	mov	r2, r3
 8009850:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009854:	4313      	orrs	r3, r2
 8009856:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800985a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800985e:	461a      	mov	r2, r3
 8009860:	2190      	movs	r1, #144	; 0x90
 8009862:	6878      	ldr	r0, [r7, #4]
 8009864:	f002 f99e 	bl	800bba4 <VL53L0X_RdDWord>
 8009868:	4603      	mov	r3, r0
 800986a:	461a      	mov	r2, r3
 800986c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009870:	4313      	orrs	r3, r2
 8009872:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[4] = (char)(byte +
					((TmpDWord >> 29) & 0x07f));
 8009876:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009878:	0f5b      	lsrs	r3, r3, #29
 800987a:	b2db      	uxtb	r3, r3
 800987c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009880:	b2da      	uxtb	r2, r3
			ProductId[4] = (char)(byte +
 8009882:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009886:	4413      	add	r3, r2
 8009888:	b2db      	uxtb	r3, r3
 800988a:	753b      	strb	r3, [r7, #20]
			ProductId[5] = (char)((TmpDWord >> 22) & 0x07f);
 800988c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800988e:	0d9b      	lsrs	r3, r3, #22
 8009890:	b2db      	uxtb	r3, r3
 8009892:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009896:	b2db      	uxtb	r3, r3
 8009898:	757b      	strb	r3, [r7, #21]
			ProductId[6] = (char)((TmpDWord >> 15) & 0x07f);
 800989a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800989c:	0bdb      	lsrs	r3, r3, #15
 800989e:	b2db      	uxtb	r3, r3
 80098a0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80098a4:	b2db      	uxtb	r3, r3
 80098a6:	75bb      	strb	r3, [r7, #22]
			ProductId[7] = (char)((TmpDWord >> 8) & 0x07f);
 80098a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098aa:	0a1b      	lsrs	r3, r3, #8
 80098ac:	b2db      	uxtb	r3, r3
 80098ae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80098b2:	b2db      	uxtb	r3, r3
 80098b4:	75fb      	strb	r3, [r7, #23]
			ProductId[8] = (char)((TmpDWord >> 1) & 0x07f);
 80098b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098b8:	085b      	lsrs	r3, r3, #1
 80098ba:	b2db      	uxtb	r3, r3
 80098bc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80098c0:	b2db      	uxtb	r3, r3
 80098c2:	763b      	strb	r3, [r7, #24]

			byte = (uint8_t)((TmpDWord & 0x001) << 6);
 80098c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098c6:	b2db      	uxtb	r3, r3
 80098c8:	019b      	lsls	r3, r3, #6
 80098ca:	b2db      	uxtb	r3, r3
 80098cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80098d0:	b2db      	uxtb	r3, r3
 80098d2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x79);
 80098d6:	2279      	movs	r2, #121	; 0x79
 80098d8:	2194      	movs	r1, #148	; 0x94
 80098da:	6878      	ldr	r0, [r7, #4]
 80098dc:	f002 f87e 	bl	800b9dc <VL53L0X_WrByte>
 80098e0:	4603      	mov	r3, r0
 80098e2:	461a      	mov	r2, r3
 80098e4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80098e8:	4313      	orrs	r3, r2
 80098ea:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_device_read_strobe(Dev);
 80098ee:	6878      	ldr	r0, [r7, #4]
 80098f0:	f7ff fd76 	bl	80093e0 <VL53L0X_device_read_strobe>
 80098f4:	4603      	mov	r3, r0
 80098f6:	461a      	mov	r2, r3
 80098f8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80098fc:	4313      	orrs	r3, r2
 80098fe:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8009902:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8009906:	461a      	mov	r2, r3
 8009908:	2190      	movs	r1, #144	; 0x90
 800990a:	6878      	ldr	r0, [r7, #4]
 800990c:	f002 f94a 	bl	800bba4 <VL53L0X_RdDWord>
 8009910:	4603      	mov	r3, r0
 8009912:	461a      	mov	r2, r3
 8009914:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009918:	4313      	orrs	r3, r2
 800991a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[9] = (char)(byte +
					((TmpDWord >> 26) & 0x07f));
 800991e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009920:	0e9b      	lsrs	r3, r3, #26
 8009922:	b2db      	uxtb	r3, r3
 8009924:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009928:	b2da      	uxtb	r2, r3
			ProductId[9] = (char)(byte +
 800992a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800992e:	4413      	add	r3, r2
 8009930:	b2db      	uxtb	r3, r3
 8009932:	767b      	strb	r3, [r7, #25]
			ProductId[10] = (char)((TmpDWord >> 19) & 0x07f);
 8009934:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009936:	0cdb      	lsrs	r3, r3, #19
 8009938:	b2db      	uxtb	r3, r3
 800993a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800993e:	b2db      	uxtb	r3, r3
 8009940:	76bb      	strb	r3, [r7, #26]
			ProductId[11] = (char)((TmpDWord >> 12) & 0x07f);
 8009942:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009944:	0b1b      	lsrs	r3, r3, #12
 8009946:	b2db      	uxtb	r3, r3
 8009948:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800994c:	b2db      	uxtb	r3, r3
 800994e:	76fb      	strb	r3, [r7, #27]
			ProductId[12] = (char)((TmpDWord >> 5) & 0x07f);
 8009950:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009952:	095b      	lsrs	r3, r3, #5
 8009954:	b2db      	uxtb	r3, r3
 8009956:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800995a:	b2db      	uxtb	r3, r3
 800995c:	773b      	strb	r3, [r7, #28]

			byte = (uint8_t)((TmpDWord & 0x01f) << 2);
 800995e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009960:	b2db      	uxtb	r3, r3
 8009962:	009b      	lsls	r3, r3, #2
 8009964:	b2db      	uxtb	r3, r3
 8009966:	f003 037c 	and.w	r3, r3, #124	; 0x7c
 800996a:	b2db      	uxtb	r3, r3
 800996c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7A);
 8009970:	227a      	movs	r2, #122	; 0x7a
 8009972:	2194      	movs	r1, #148	; 0x94
 8009974:	6878      	ldr	r0, [r7, #4]
 8009976:	f002 f831 	bl	800b9dc <VL53L0X_WrByte>
 800997a:	4603      	mov	r3, r0
 800997c:	461a      	mov	r2, r3
 800997e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009982:	4313      	orrs	r3, r2
 8009984:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_device_read_strobe(Dev);
 8009988:	6878      	ldr	r0, [r7, #4]
 800998a:	f7ff fd29 	bl	80093e0 <VL53L0X_device_read_strobe>
 800998e:	4603      	mov	r3, r0
 8009990:	461a      	mov	r2, r3
 8009992:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009996:	4313      	orrs	r3, r2
 8009998:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800999c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80099a0:	461a      	mov	r2, r3
 80099a2:	2190      	movs	r1, #144	; 0x90
 80099a4:	6878      	ldr	r0, [r7, #4]
 80099a6:	f002 f8fd 	bl	800bba4 <VL53L0X_RdDWord>
 80099aa:	4603      	mov	r3, r0
 80099ac:	461a      	mov	r2, r3
 80099ae:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80099b2:	4313      	orrs	r3, r2
 80099b4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[13] = (char)(byte +
					((TmpDWord >> 30) & 0x07f));
 80099b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099ba:	0f9b      	lsrs	r3, r3, #30
 80099bc:	b2db      	uxtb	r3, r3
 80099be:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80099c2:	b2da      	uxtb	r2, r3
			ProductId[13] = (char)(byte +
 80099c4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80099c8:	4413      	add	r3, r2
 80099ca:	b2db      	uxtb	r3, r3
 80099cc:	777b      	strb	r3, [r7, #29]
			ProductId[14] = (char)((TmpDWord >> 23) & 0x07f);
 80099ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099d0:	0ddb      	lsrs	r3, r3, #23
 80099d2:	b2db      	uxtb	r3, r3
 80099d4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80099d8:	b2db      	uxtb	r3, r3
 80099da:	77bb      	strb	r3, [r7, #30]
			ProductId[15] = (char)((TmpDWord >> 16) & 0x07f);
 80099dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099de:	0c1b      	lsrs	r3, r3, #16
 80099e0:	b2db      	uxtb	r3, r3
 80099e2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80099e6:	b2db      	uxtb	r3, r3
 80099e8:	77fb      	strb	r3, [r7, #31]
			ProductId[16] = (char)((TmpDWord >> 9) & 0x07f);
 80099ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099ec:	0a5b      	lsrs	r3, r3, #9
 80099ee:	b2db      	uxtb	r3, r3
 80099f0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80099f4:	b2db      	uxtb	r3, r3
 80099f6:	f887 3020 	strb.w	r3, [r7, #32]
			ProductId[17] = (char)((TmpDWord >> 2) & 0x07f);
 80099fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099fc:	089b      	lsrs	r3, r3, #2
 80099fe:	b2db      	uxtb	r3, r3
 8009a00:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009a04:	b2db      	uxtb	r3, r3
 8009a06:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
			ProductId[18] = '\0';
 8009a0a:	2300      	movs	r3, #0
 8009a0c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

		}

		if (((option & 4) == 4) &&
 8009a10:	78fb      	ldrb	r3, [r7, #3]
 8009a12:	f003 0304 	and.w	r3, r3, #4
 8009a16:	2b00      	cmp	r3, #0
 8009a18:	f000 80f1 	beq.w	8009bfe <VL53L0X_get_info_from_device+0x798>
			((ReadDataFromDeviceDone & 4) == 0)) {
 8009a1c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8009a20:	f003 0304 	and.w	r3, r3, #4
		if (((option & 4) == 4) &&
 8009a24:	2b00      	cmp	r3, #0
 8009a26:	f040 80ea 	bne.w	8009bfe <VL53L0X_get_info_from_device+0x798>

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7B);
 8009a2a:	227b      	movs	r2, #123	; 0x7b
 8009a2c:	2194      	movs	r1, #148	; 0x94
 8009a2e:	6878      	ldr	r0, [r7, #4]
 8009a30:	f001 ffd4 	bl	800b9dc <VL53L0X_WrByte>
 8009a34:	4603      	mov	r3, r0
 8009a36:	461a      	mov	r2, r3
 8009a38:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009a3c:	4313      	orrs	r3, r2
 8009a3e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8009a42:	6878      	ldr	r0, [r7, #4]
 8009a44:	f7ff fccc 	bl	80093e0 <VL53L0X_device_read_strobe>
 8009a48:	4603      	mov	r3, r0
 8009a4a:	461a      	mov	r2, r3
 8009a4c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009a50:	4313      	orrs	r3, r2
 8009a52:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &PartUIDUpper);
 8009a56:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8009a5a:	461a      	mov	r2, r3
 8009a5c:	2190      	movs	r1, #144	; 0x90
 8009a5e:	6878      	ldr	r0, [r7, #4]
 8009a60:	f002 f8a0 	bl	800bba4 <VL53L0X_RdDWord>
 8009a64:	4603      	mov	r3, r0
 8009a66:	461a      	mov	r2, r3
 8009a68:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009a6c:	4313      	orrs	r3, r2
 8009a6e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7C);
 8009a72:	227c      	movs	r2, #124	; 0x7c
 8009a74:	2194      	movs	r1, #148	; 0x94
 8009a76:	6878      	ldr	r0, [r7, #4]
 8009a78:	f001 ffb0 	bl	800b9dc <VL53L0X_WrByte>
 8009a7c:	4603      	mov	r3, r0
 8009a7e:	461a      	mov	r2, r3
 8009a80:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009a84:	4313      	orrs	r3, r2
 8009a86:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8009a8a:	6878      	ldr	r0, [r7, #4]
 8009a8c:	f7ff fca8 	bl	80093e0 <VL53L0X_device_read_strobe>
 8009a90:	4603      	mov	r3, r0
 8009a92:	461a      	mov	r2, r3
 8009a94:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009a98:	4313      	orrs	r3, r2
 8009a9a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &PartUIDLower);
 8009a9e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009aa2:	461a      	mov	r2, r3
 8009aa4:	2190      	movs	r1, #144	; 0x90
 8009aa6:	6878      	ldr	r0, [r7, #4]
 8009aa8:	f002 f87c 	bl	800bba4 <VL53L0X_RdDWord>
 8009aac:	4603      	mov	r3, r0
 8009aae:	461a      	mov	r2, r3
 8009ab0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009ab4:	4313      	orrs	r3, r2
 8009ab6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x73);
 8009aba:	2273      	movs	r2, #115	; 0x73
 8009abc:	2194      	movs	r1, #148	; 0x94
 8009abe:	6878      	ldr	r0, [r7, #4]
 8009ac0:	f001 ff8c 	bl	800b9dc <VL53L0X_WrByte>
 8009ac4:	4603      	mov	r3, r0
 8009ac6:	461a      	mov	r2, r3
 8009ac8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009acc:	4313      	orrs	r3, r2
 8009ace:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8009ad2:	6878      	ldr	r0, [r7, #4]
 8009ad4:	f7ff fc84 	bl	80093e0 <VL53L0X_device_read_strobe>
 8009ad8:	4603      	mov	r3, r0
 8009ada:	461a      	mov	r2, r3
 8009adc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009ae0:	4313      	orrs	r3, r2
 8009ae2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8009ae6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8009aea:	461a      	mov	r2, r3
 8009aec:	2190      	movs	r1, #144	; 0x90
 8009aee:	6878      	ldr	r0, [r7, #4]
 8009af0:	f002 f858 	bl	800bba4 <VL53L0X_RdDWord>
 8009af4:	4603      	mov	r3, r0
 8009af6:	461a      	mov	r2, r3
 8009af8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009afc:	4313      	orrs	r3, r2
 8009afe:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			SignalRateMeasFixed1104_400_mm = (TmpDWord &
				0x0000000ff) << 8;
 8009b02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b04:	021b      	lsls	r3, r3, #8
			SignalRateMeasFixed1104_400_mm = (TmpDWord &
 8009b06:	b29b      	uxth	r3, r3
 8009b08:	653b      	str	r3, [r7, #80]	; 0x50

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x74);
 8009b0a:	2274      	movs	r2, #116	; 0x74
 8009b0c:	2194      	movs	r1, #148	; 0x94
 8009b0e:	6878      	ldr	r0, [r7, #4]
 8009b10:	f001 ff64 	bl	800b9dc <VL53L0X_WrByte>
 8009b14:	4603      	mov	r3, r0
 8009b16:	461a      	mov	r2, r3
 8009b18:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009b1c:	4313      	orrs	r3, r2
 8009b1e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8009b22:	6878      	ldr	r0, [r7, #4]
 8009b24:	f7ff fc5c 	bl	80093e0 <VL53L0X_device_read_strobe>
 8009b28:	4603      	mov	r3, r0
 8009b2a:	461a      	mov	r2, r3
 8009b2c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009b30:	4313      	orrs	r3, r2
 8009b32:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8009b36:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8009b3a:	461a      	mov	r2, r3
 8009b3c:	2190      	movs	r1, #144	; 0x90
 8009b3e:	6878      	ldr	r0, [r7, #4]
 8009b40:	f002 f830 	bl	800bba4 <VL53L0X_RdDWord>
 8009b44:	4603      	mov	r3, r0
 8009b46:	461a      	mov	r2, r3
 8009b48:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009b4c:	4313      	orrs	r3, r2
 8009b4e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			SignalRateMeasFixed1104_400_mm |= ((TmpDWord &
				0xff000000) >> 24);
 8009b52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b54:	0e1b      	lsrs	r3, r3, #24
			SignalRateMeasFixed1104_400_mm |= ((TmpDWord &
 8009b56:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8009b58:	4313      	orrs	r3, r2
 8009b5a:	653b      	str	r3, [r7, #80]	; 0x50

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x75);
 8009b5c:	2275      	movs	r2, #117	; 0x75
 8009b5e:	2194      	movs	r1, #148	; 0x94
 8009b60:	6878      	ldr	r0, [r7, #4]
 8009b62:	f001 ff3b 	bl	800b9dc <VL53L0X_WrByte>
 8009b66:	4603      	mov	r3, r0
 8009b68:	461a      	mov	r2, r3
 8009b6a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009b6e:	4313      	orrs	r3, r2
 8009b70:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8009b74:	6878      	ldr	r0, [r7, #4]
 8009b76:	f7ff fc33 	bl	80093e0 <VL53L0X_device_read_strobe>
 8009b7a:	4603      	mov	r3, r0
 8009b7c:	461a      	mov	r2, r3
 8009b7e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009b82:	4313      	orrs	r3, r2
 8009b84:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8009b88:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8009b8c:	461a      	mov	r2, r3
 8009b8e:	2190      	movs	r1, #144	; 0x90
 8009b90:	6878      	ldr	r0, [r7, #4]
 8009b92:	f002 f807 	bl	800bba4 <VL53L0X_RdDWord>
 8009b96:	4603      	mov	r3, r0
 8009b98:	461a      	mov	r2, r3
 8009b9a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009b9e:	4313      	orrs	r3, r2
 8009ba0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			DistMeasFixed1104_400_mm = (TmpDWord & 0x0000000ff)
							<< 8;
 8009ba4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ba6:	021b      	lsls	r3, r3, #8
			DistMeasFixed1104_400_mm = (TmpDWord & 0x0000000ff)
 8009ba8:	b29b      	uxth	r3, r3
 8009baa:	657b      	str	r3, [r7, #84]	; 0x54

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x76);
 8009bac:	2276      	movs	r2, #118	; 0x76
 8009bae:	2194      	movs	r1, #148	; 0x94
 8009bb0:	6878      	ldr	r0, [r7, #4]
 8009bb2:	f001 ff13 	bl	800b9dc <VL53L0X_WrByte>
 8009bb6:	4603      	mov	r3, r0
 8009bb8:	461a      	mov	r2, r3
 8009bba:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009bbe:	4313      	orrs	r3, r2
 8009bc0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8009bc4:	6878      	ldr	r0, [r7, #4]
 8009bc6:	f7ff fc0b 	bl	80093e0 <VL53L0X_device_read_strobe>
 8009bca:	4603      	mov	r3, r0
 8009bcc:	461a      	mov	r2, r3
 8009bce:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009bd2:	4313      	orrs	r3, r2
 8009bd4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8009bd8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8009bdc:	461a      	mov	r2, r3
 8009bde:	2190      	movs	r1, #144	; 0x90
 8009be0:	6878      	ldr	r0, [r7, #4]
 8009be2:	f001 ffdf 	bl	800bba4 <VL53L0X_RdDWord>
 8009be6:	4603      	mov	r3, r0
 8009be8:	461a      	mov	r2, r3
 8009bea:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009bee:	4313      	orrs	r3, r2
 8009bf0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			DistMeasFixed1104_400_mm |= ((TmpDWord & 0xff000000)
							>> 24);
 8009bf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009bf6:	0e1b      	lsrs	r3, r3, #24
			DistMeasFixed1104_400_mm |= ((TmpDWord & 0xff000000)
 8009bf8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8009bfa:	4313      	orrs	r3, r2
 8009bfc:	657b      	str	r3, [r7, #84]	; 0x54
		}

		Status |= VL53L0X_WrByte(Dev, 0x81, 0x00);
 8009bfe:	2200      	movs	r2, #0
 8009c00:	2181      	movs	r1, #129	; 0x81
 8009c02:	6878      	ldr	r0, [r7, #4]
 8009c04:	f001 feea 	bl	800b9dc <VL53L0X_WrByte>
 8009c08:	4603      	mov	r3, r0
 8009c0a:	461a      	mov	r2, r3
 8009c0c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009c10:	4313      	orrs	r3, r2
 8009c12:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x06);
 8009c16:	2206      	movs	r2, #6
 8009c18:	21ff      	movs	r1, #255	; 0xff
 8009c1a:	6878      	ldr	r0, [r7, #4]
 8009c1c:	f001 fede 	bl	800b9dc <VL53L0X_WrByte>
 8009c20:	4603      	mov	r3, r0
 8009c22:	461a      	mov	r2, r3
 8009c24:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009c28:	4313      	orrs	r3, r2
 8009c2a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_RdByte(Dev, 0x83, &byte);
 8009c2e:	f107 0337 	add.w	r3, r7, #55	; 0x37
 8009c32:	461a      	mov	r2, r3
 8009c34:	2183      	movs	r1, #131	; 0x83
 8009c36:	6878      	ldr	r0, [r7, #4]
 8009c38:	f001 ff52 	bl	800bae0 <VL53L0X_RdByte>
 8009c3c:	4603      	mov	r3, r0
 8009c3e:	461a      	mov	r2, r3
 8009c40:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009c44:	4313      	orrs	r3, r2
 8009c46:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x83, byte&0xfb);
 8009c4a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8009c4e:	f023 0304 	bic.w	r3, r3, #4
 8009c52:	b2db      	uxtb	r3, r3
 8009c54:	461a      	mov	r2, r3
 8009c56:	2183      	movs	r1, #131	; 0x83
 8009c58:	6878      	ldr	r0, [r7, #4]
 8009c5a:	f001 febf 	bl	800b9dc <VL53L0X_WrByte>
 8009c5e:	4603      	mov	r3, r0
 8009c60:	461a      	mov	r2, r3
 8009c62:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009c66:	4313      	orrs	r3, r2
 8009c68:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8009c6c:	2201      	movs	r2, #1
 8009c6e:	21ff      	movs	r1, #255	; 0xff
 8009c70:	6878      	ldr	r0, [r7, #4]
 8009c72:	f001 feb3 	bl	800b9dc <VL53L0X_WrByte>
 8009c76:	4603      	mov	r3, r0
 8009c78:	461a      	mov	r2, r3
 8009c7a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009c7e:	4313      	orrs	r3, r2
 8009c80:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 8009c84:	2201      	movs	r2, #1
 8009c86:	2100      	movs	r1, #0
 8009c88:	6878      	ldr	r0, [r7, #4]
 8009c8a:	f001 fea7 	bl	800b9dc <VL53L0X_WrByte>
 8009c8e:	4603      	mov	r3, r0
 8009c90:	461a      	mov	r2, r3
 8009c92:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009c96:	4313      	orrs	r3, r2
 8009c98:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8009c9c:	2200      	movs	r2, #0
 8009c9e:	21ff      	movs	r1, #255	; 0xff
 8009ca0:	6878      	ldr	r0, [r7, #4]
 8009ca2:	f001 fe9b 	bl	800b9dc <VL53L0X_WrByte>
 8009ca6:	4603      	mov	r3, r0
 8009ca8:	461a      	mov	r2, r3
 8009caa:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009cae:	4313      	orrs	r3, r2
 8009cb0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 8009cb4:	2200      	movs	r2, #0
 8009cb6:	2180      	movs	r1, #128	; 0x80
 8009cb8:	6878      	ldr	r0, [r7, #4]
 8009cba:	f001 fe8f 	bl	800b9dc <VL53L0X_WrByte>
 8009cbe:	4603      	mov	r3, r0
 8009cc0:	461a      	mov	r2, r3
 8009cc2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009cc6:	4313      	orrs	r3, r2
 8009cc8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	}

	if ((Status == VL53L0X_ERROR_NONE) &&
 8009ccc:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
 8009cd0:	2b00      	cmp	r3, #0
 8009cd2:	f040 808f 	bne.w	8009df4 <VL53L0X_get_info_from_device+0x98e>
 8009cd6:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8009cda:	2b07      	cmp	r3, #7
 8009cdc:	f000 808a 	beq.w	8009df4 <VL53L0X_get_info_from_device+0x98e>
		(ReadDataFromDeviceDone != 7)) {
		/* Assign to variable if status is ok */
		if (((option & 1) == 1) &&
 8009ce0:	78fb      	ldrb	r3, [r7, #3]
 8009ce2:	f003 0301 	and.w	r3, r3, #1
 8009ce6:	2b00      	cmp	r3, #0
 8009ce8:	d024      	beq.n	8009d34 <VL53L0X_get_info_from_device+0x8ce>
			((ReadDataFromDeviceDone & 1) == 0)) {
 8009cea:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8009cee:	f003 0301 	and.w	r3, r3, #1
		if (((option & 1) == 1) &&
 8009cf2:	2b00      	cmp	r3, #0
 8009cf4:	d11e      	bne.n	8009d34 <VL53L0X_get_info_from_device+0x8ce>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	f897 205e 	ldrb.w	r2, [r7, #94]	; 0x5e
 8009cfc:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
				ReferenceSpadCount, ReferenceSpadCount);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	f897 205d 	ldrb.w	r2, [r7, #93]	; 0x5d
 8009d06:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
				ReferenceSpadType, ReferenceSpadType);

			for (i = 0; i < VL53L0X_REF_SPAD_BUFFER_SIZE; i++) {
 8009d0a:	2300      	movs	r3, #0
 8009d0c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009d0e:	e00e      	b.n	8009d2e <VL53L0X_get_info_from_device+0x8c8>
				Dev->Data.SpadData.RefGoodSpadMap[i] =
					NvmRefGoodSpadMap[i];
 8009d10:	f107 0208 	add.w	r2, r7, #8
 8009d14:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009d16:	4413      	add	r3, r2
 8009d18:	7819      	ldrb	r1, [r3, #0]
				Dev->Data.SpadData.RefGoodSpadMap[i] =
 8009d1a:	687a      	ldr	r2, [r7, #4]
 8009d1c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009d1e:	4413      	add	r3, r2
 8009d20:	f503 7395 	add.w	r3, r3, #298	; 0x12a
 8009d24:	460a      	mov	r2, r1
 8009d26:	701a      	strb	r2, [r3, #0]
			for (i = 0; i < VL53L0X_REF_SPAD_BUFFER_SIZE; i++) {
 8009d28:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009d2a:	3301      	adds	r3, #1
 8009d2c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009d2e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009d30:	2b05      	cmp	r3, #5
 8009d32:	dded      	ble.n	8009d10 <VL53L0X_get_info_from_device+0x8aa>
			}
		}

		if (((option & 2) == 2) &&
 8009d34:	78fb      	ldrb	r3, [r7, #3]
 8009d36:	f003 0302 	and.w	r3, r3, #2
 8009d3a:	2b00      	cmp	r3, #0
 8009d3c:	d018      	beq.n	8009d70 <VL53L0X_get_info_from_device+0x90a>
			((ReadDataFromDeviceDone & 2) == 0)) {
 8009d3e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8009d42:	f003 0302 	and.w	r3, r3, #2
		if (((option & 2) == 2) &&
 8009d46:	2b00      	cmp	r3, #0
 8009d48:	d112      	bne.n	8009d70 <VL53L0X_get_info_from_device+0x90a>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8009d4a:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	f883 20f1 	strb.w	r2, [r3, #241]	; 0xf1
					ModuleId, ModuleId);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8009d54:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	f883 20f2 	strb.w	r2, [r3, #242]	; 0xf2
					Revision, Revision);

			ProductId_tmp = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	33f3      	adds	r3, #243	; 0xf3
 8009d62:	63bb      	str	r3, [r7, #56]	; 0x38
					ProductId);
			VL53L0X_COPYSTRING(ProductId_tmp, ProductId);
 8009d64:	f107 0310 	add.w	r3, r7, #16
 8009d68:	4619      	mov	r1, r3
 8009d6a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8009d6c:	f002 fc30 	bl	800c5d0 <strcpy>

		}

		if (((option & 4) == 4) &&
 8009d70:	78fb      	ldrb	r3, [r7, #3]
 8009d72:	f003 0304 	and.w	r3, r3, #4
 8009d76:	2b00      	cmp	r3, #0
 8009d78:	d030      	beq.n	8009ddc <VL53L0X_get_info_from_device+0x976>
			((ReadDataFromDeviceDone & 4) == 0)) {
 8009d7a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8009d7e:	f003 0304 	and.w	r3, r3, #4
		if (((option & 4) == 4) &&
 8009d82:	2b00      	cmp	r3, #0
 8009d84:	d12a      	bne.n	8009ddc <VL53L0X_get_info_from_device+0x976>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8009d86:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
						PartUIDUpper, PartUIDUpper);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8009d8e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
						PartUIDLower, PartUIDLower);

			SignalRateMeasFixed400mmFix =
 8009d96:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009d98:	025b      	lsls	r3, r3, #9
 8009d9a:	643b      	str	r3, [r7, #64]	; 0x40
				VL53L0X_FIXPOINT97TOFIXPOINT1616(
					SignalRateMeasFixed1104_400_mm);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009da0:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
				SignalRateMeasFixed400mm,
				SignalRateMeasFixed400mmFix);

			OffsetMicroMeters = 0;
 8009da4:	2300      	movs	r3, #0
 8009da6:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
			if (DistMeasFixed1104_400_mm != 0) {
 8009daa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009dac:	2b00      	cmp	r3, #0
 8009dae:	d011      	beq.n	8009dd4 <VL53L0X_get_info_from_device+0x96e>
					OffsetFixed1104_mm =
 8009db0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8009db2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009db4:	1ad3      	subs	r3, r2, r3
 8009db6:	64bb      	str	r3, [r7, #72]	; 0x48
						DistMeasFixed1104_400_mm -
						DistMeasTgtFixed1104_mm;
					OffsetMicroMeters = (OffsetFixed1104_mm
						* 1000) >> 4;
 8009db8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009dba:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8009dbe:	fb02 f303 	mul.w	r3, r2, r3
 8009dc2:	091b      	lsrs	r3, r3, #4
					OffsetMicroMeters = (OffsetFixed1104_mm
 8009dc4:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
					OffsetMicroMeters *= -1;
 8009dc8:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8009dcc:	425b      	negs	r3, r3
 8009dce:	b29b      	uxth	r3, r3
 8009dd0:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
			}

			PALDevDataSet(Dev,
 8009dd4:	f9b7 205a 	ldrsh.w	r2, [r7, #90]	; 0x5a
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	60da      	str	r2, [r3, #12]
				Part2PartOffsetAdjustmentNVMMicroMeter,
				OffsetMicroMeters);
		}
		byte = (uint8_t)(ReadDataFromDeviceDone|option);
 8009ddc:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8009de0:	78fb      	ldrb	r3, [r7, #3]
 8009de2:	4313      	orrs	r3, r2
 8009de4:	b2db      	uxtb	r3, r3
 8009de6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, ReadDataFromDeviceDone,
 8009dea:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
				byte);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8009df4:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
}
 8009df8:	4618      	mov	r0, r3
 8009dfa:	3760      	adds	r7, #96	; 0x60
 8009dfc:	46bd      	mov	sp, r7
 8009dfe:	bd80      	pop	{r7, pc}

08009e00 <VL53L0X_calc_macro_period_ps>:


uint32_t VL53L0X_calc_macro_period_ps(VL53L0X_DEV Dev, uint8_t vcsel_period_pclks)
{
 8009e00:	b480      	push	{r7}
 8009e02:	b087      	sub	sp, #28
 8009e04:	af00      	add	r7, sp, #0
 8009e06:	6078      	str	r0, [r7, #4]
 8009e08:	460b      	mov	r3, r1
 8009e0a:	70fb      	strb	r3, [r7, #3]
	LOG_FUNCTION_START("");

	/* The above calculation will produce rounding errors,
	   therefore set fixed value
	*/
	PLL_period_ps = 1655;
 8009e0c:	f240 6277 	movw	r2, #1655	; 0x677
 8009e10:	f04f 0300 	mov.w	r3, #0
 8009e14:	e9c7 2304 	strd	r2, r3, [r7, #16]

	macro_period_vclks = 2304;
 8009e18:	f44f 6310 	mov.w	r3, #2304	; 0x900
 8009e1c:	60fb      	str	r3, [r7, #12]
	macro_period_ps = (uint32_t)(macro_period_vclks
			* vcsel_period_pclks * PLL_period_ps);
 8009e1e:	78fb      	ldrb	r3, [r7, #3]
 8009e20:	68fa      	ldr	r2, [r7, #12]
 8009e22:	fb02 f303 	mul.w	r3, r2, r3
	macro_period_ps = (uint32_t)(macro_period_vclks
 8009e26:	693a      	ldr	r2, [r7, #16]
 8009e28:	fb02 f303 	mul.w	r3, r2, r3
 8009e2c:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_END("");
	return macro_period_ps;
 8009e2e:	68bb      	ldr	r3, [r7, #8]
}
 8009e30:	4618      	mov	r0, r3
 8009e32:	371c      	adds	r7, #28
 8009e34:	46bd      	mov	sp, r7
 8009e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e3a:	4770      	bx	lr

08009e3c <VL53L0X_encode_timeout>:

uint16_t VL53L0X_encode_timeout(uint32_t timeout_macro_clks)
{
 8009e3c:	b480      	push	{r7}
 8009e3e:	b087      	sub	sp, #28
 8009e40:	af00      	add	r7, sp, #0
 8009e42:	6078      	str	r0, [r7, #4]
	/*!
	 * Encode timeout in macro periods in (LSByte * 2^MSByte) + 1 format
	 */

	uint16_t encoded_timeout = 0;
 8009e44:	2300      	movs	r3, #0
 8009e46:	82fb      	strh	r3, [r7, #22]
	uint32_t ls_byte = 0;
 8009e48:	2300      	movs	r3, #0
 8009e4a:	613b      	str	r3, [r7, #16]
	uint16_t ms_byte = 0;
 8009e4c:	2300      	movs	r3, #0
 8009e4e:	81fb      	strh	r3, [r7, #14]

	if (timeout_macro_clks > 0) {
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	2b00      	cmp	r3, #0
 8009e54:	d017      	beq.n	8009e86 <VL53L0X_encode_timeout+0x4a>
		ls_byte = timeout_macro_clks - 1;
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	3b01      	subs	r3, #1
 8009e5a:	613b      	str	r3, [r7, #16]

		while ((ls_byte & 0xFFFFFF00) > 0) {
 8009e5c:	e005      	b.n	8009e6a <VL53L0X_encode_timeout+0x2e>
			ls_byte = ls_byte >> 1;
 8009e5e:	693b      	ldr	r3, [r7, #16]
 8009e60:	085b      	lsrs	r3, r3, #1
 8009e62:	613b      	str	r3, [r7, #16]
			ms_byte++;
 8009e64:	89fb      	ldrh	r3, [r7, #14]
 8009e66:	3301      	adds	r3, #1
 8009e68:	81fb      	strh	r3, [r7, #14]
		while ((ls_byte & 0xFFFFFF00) > 0) {
 8009e6a:	693b      	ldr	r3, [r7, #16]
 8009e6c:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8009e70:	2b00      	cmp	r3, #0
 8009e72:	d1f4      	bne.n	8009e5e <VL53L0X_encode_timeout+0x22>
		}

		encoded_timeout = (ms_byte << 8)
 8009e74:	89fb      	ldrh	r3, [r7, #14]
 8009e76:	021b      	lsls	r3, r3, #8
 8009e78:	b29a      	uxth	r2, r3
				+ (uint16_t) (ls_byte & 0x000000FF);
 8009e7a:	693b      	ldr	r3, [r7, #16]
 8009e7c:	b29b      	uxth	r3, r3
 8009e7e:	b2db      	uxtb	r3, r3
 8009e80:	b29b      	uxth	r3, r3
		encoded_timeout = (ms_byte << 8)
 8009e82:	4413      	add	r3, r2
 8009e84:	82fb      	strh	r3, [r7, #22]
	}

	return encoded_timeout;
 8009e86:	8afb      	ldrh	r3, [r7, #22]

}
 8009e88:	4618      	mov	r0, r3
 8009e8a:	371c      	adds	r7, #28
 8009e8c:	46bd      	mov	sp, r7
 8009e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e92:	4770      	bx	lr

08009e94 <VL53L0X_decode_timeout>:

uint32_t VL53L0X_decode_timeout(uint16_t encoded_timeout)
{
 8009e94:	b480      	push	{r7}
 8009e96:	b085      	sub	sp, #20
 8009e98:	af00      	add	r7, sp, #0
 8009e9a:	4603      	mov	r3, r0
 8009e9c:	80fb      	strh	r3, [r7, #6]
	/*!
	 * Decode 16-bit timeout register value - format (LSByte * 2^MSByte) + 1
	 */

	uint32_t timeout_macro_clks = 0;
 8009e9e:	2300      	movs	r3, #0
 8009ea0:	60fb      	str	r3, [r7, #12]

	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 8009ea2:	88fb      	ldrh	r3, [r7, #6]
 8009ea4:	b2db      	uxtb	r3, r3
			<< (uint32_t) ((encoded_timeout & 0xFF00) >> 8)) + 1;
 8009ea6:	88fa      	ldrh	r2, [r7, #6]
 8009ea8:	0a12      	lsrs	r2, r2, #8
 8009eaa:	b292      	uxth	r2, r2
 8009eac:	4093      	lsls	r3, r2
	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 8009eae:	3301      	adds	r3, #1
 8009eb0:	60fb      	str	r3, [r7, #12]

	return timeout_macro_clks;
 8009eb2:	68fb      	ldr	r3, [r7, #12]
}
 8009eb4:	4618      	mov	r0, r3
 8009eb6:	3714      	adds	r7, #20
 8009eb8:	46bd      	mov	sp, r7
 8009eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ebe:	4770      	bx	lr

08009ec0 <VL53L0X_calc_timeout_mclks>:

/* To convert ms into register value */
uint32_t VL53L0X_calc_timeout_mclks(VL53L0X_DEV Dev,
		uint32_t timeout_period_us,
		uint8_t vcsel_period_pclks)
{
 8009ec0:	b580      	push	{r7, lr}
 8009ec2:	b088      	sub	sp, #32
 8009ec4:	af00      	add	r7, sp, #0
 8009ec6:	60f8      	str	r0, [r7, #12]
 8009ec8:	60b9      	str	r1, [r7, #8]
 8009eca:	4613      	mov	r3, r2
 8009ecc:	71fb      	strb	r3, [r7, #7]
	uint32_t macro_period_ps;
	uint32_t macro_period_ns;
	uint32_t timeout_period_mclks = 0;
 8009ece:	2300      	movs	r3, #0
 8009ed0:	61fb      	str	r3, [r7, #28]

	macro_period_ps = VL53L0X_calc_macro_period_ps(Dev, vcsel_period_pclks);
 8009ed2:	79fb      	ldrb	r3, [r7, #7]
 8009ed4:	4619      	mov	r1, r3
 8009ed6:	68f8      	ldr	r0, [r7, #12]
 8009ed8:	f7ff ff92 	bl	8009e00 <VL53L0X_calc_macro_period_ps>
 8009edc:	61b8      	str	r0, [r7, #24]
	macro_period_ns = (macro_period_ps + 500) / 1000;
 8009ede:	69bb      	ldr	r3, [r7, #24]
 8009ee0:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8009ee4:	4a0a      	ldr	r2, [pc, #40]	; (8009f10 <VL53L0X_calc_timeout_mclks+0x50>)
 8009ee6:	fba2 2303 	umull	r2, r3, r2, r3
 8009eea:	099b      	lsrs	r3, r3, #6
 8009eec:	617b      	str	r3, [r7, #20]

	timeout_period_mclks =
		(uint32_t) (((timeout_period_us * 1000)
 8009eee:	68bb      	ldr	r3, [r7, #8]
 8009ef0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8009ef4:	fb03 f202 	mul.w	r2, r3, r2
		+ (macro_period_ns / 2)) / macro_period_ns);
 8009ef8:	697b      	ldr	r3, [r7, #20]
 8009efa:	085b      	lsrs	r3, r3, #1
 8009efc:	441a      	add	r2, r3
	timeout_period_mclks =
 8009efe:	697b      	ldr	r3, [r7, #20]
 8009f00:	fbb2 f3f3 	udiv	r3, r2, r3
 8009f04:	61fb      	str	r3, [r7, #28]

    return timeout_period_mclks;
 8009f06:	69fb      	ldr	r3, [r7, #28]
}
 8009f08:	4618      	mov	r0, r3
 8009f0a:	3720      	adds	r7, #32
 8009f0c:	46bd      	mov	sp, r7
 8009f0e:	bd80      	pop	{r7, pc}
 8009f10:	10624dd3 	.word	0x10624dd3

08009f14 <VL53L0X_calc_timeout_us>:

/* To convert register value into us */
uint32_t VL53L0X_calc_timeout_us(VL53L0X_DEV Dev,
		uint16_t timeout_period_mclks,
		uint8_t vcsel_period_pclks)
{
 8009f14:	b580      	push	{r7, lr}
 8009f16:	b086      	sub	sp, #24
 8009f18:	af00      	add	r7, sp, #0
 8009f1a:	6078      	str	r0, [r7, #4]
 8009f1c:	460b      	mov	r3, r1
 8009f1e:	807b      	strh	r3, [r7, #2]
 8009f20:	4613      	mov	r3, r2
 8009f22:	707b      	strb	r3, [r7, #1]
	uint32_t macro_period_ps;
	uint32_t macro_period_ns;
	uint32_t actual_timeout_period_us = 0;
 8009f24:	2300      	movs	r3, #0
 8009f26:	617b      	str	r3, [r7, #20]

	macro_period_ps = VL53L0X_calc_macro_period_ps(Dev, vcsel_period_pclks);
 8009f28:	787b      	ldrb	r3, [r7, #1]
 8009f2a:	4619      	mov	r1, r3
 8009f2c:	6878      	ldr	r0, [r7, #4]
 8009f2e:	f7ff ff67 	bl	8009e00 <VL53L0X_calc_macro_period_ps>
 8009f32:	6138      	str	r0, [r7, #16]
	macro_period_ns = (macro_period_ps + 500) / 1000;
 8009f34:	693b      	ldr	r3, [r7, #16]
 8009f36:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8009f3a:	4a0a      	ldr	r2, [pc, #40]	; (8009f64 <VL53L0X_calc_timeout_us+0x50>)
 8009f3c:	fba2 2303 	umull	r2, r3, r2, r3
 8009f40:	099b      	lsrs	r3, r3, #6
 8009f42:	60fb      	str	r3, [r7, #12]

	actual_timeout_period_us =
		((timeout_period_mclks * macro_period_ns) + 500) / 1000;
 8009f44:	887b      	ldrh	r3, [r7, #2]
 8009f46:	68fa      	ldr	r2, [r7, #12]
 8009f48:	fb02 f303 	mul.w	r3, r2, r3
 8009f4c:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
	actual_timeout_period_us =
 8009f50:	4a04      	ldr	r2, [pc, #16]	; (8009f64 <VL53L0X_calc_timeout_us+0x50>)
 8009f52:	fba2 2303 	umull	r2, r3, r2, r3
 8009f56:	099b      	lsrs	r3, r3, #6
 8009f58:	617b      	str	r3, [r7, #20]

	return actual_timeout_period_us;
 8009f5a:	697b      	ldr	r3, [r7, #20]
}
 8009f5c:	4618      	mov	r0, r3
 8009f5e:	3718      	adds	r7, #24
 8009f60:	46bd      	mov	sp, r7
 8009f62:	bd80      	pop	{r7, pc}
 8009f64:	10624dd3 	.word	0x10624dd3

08009f68 <get_sequence_step_timeout>:


VL53L0X_Error get_sequence_step_timeout(VL53L0X_DEV Dev,
				VL53L0X_SequenceStepId SequenceStepId,
				uint32_t *pTimeOutMicroSecs)
{
 8009f68:	b580      	push	{r7, lr}
 8009f6a:	b08c      	sub	sp, #48	; 0x30
 8009f6c:	af00      	add	r7, sp, #0
 8009f6e:	60f8      	str	r0, [r7, #12]
 8009f70:	460b      	mov	r3, r1
 8009f72:	607a      	str	r2, [r7, #4]
 8009f74:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009f76:	2300      	movs	r3, #0
 8009f78:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint8_t CurrentVCSELPulsePeriodPClk;
	uint8_t EncodedTimeOutByte = 0;
 8009f7c:	2300      	movs	r3, #0
 8009f7e:	f887 3020 	strb.w	r3, [r7, #32]
	uint32_t TimeoutMicroSeconds = 0;
 8009f82:	2300      	movs	r3, #0
 8009f84:	62bb      	str	r3, [r7, #40]	; 0x28
	uint16_t PreRangeEncodedTimeOut = 0;
 8009f86:	2300      	movs	r3, #0
 8009f88:	83fb      	strh	r3, [r7, #30]
	uint16_t MsrcTimeOutMClks;
	uint16_t PreRangeTimeOutMClks;
	uint16_t FinalRangeTimeOutMClks = 0;
 8009f8a:	2300      	movs	r3, #0
 8009f8c:	84bb      	strh	r3, [r7, #36]	; 0x24
	uint16_t FinalRangeEncodedTimeOut;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;

	if ((SequenceStepId == VL53L0X_SEQUENCESTEP_TCC)	 ||
 8009f8e:	7afb      	ldrb	r3, [r7, #11]
 8009f90:	2b00      	cmp	r3, #0
 8009f92:	d005      	beq.n	8009fa0 <get_sequence_step_timeout+0x38>
 8009f94:	7afb      	ldrb	r3, [r7, #11]
 8009f96:	2b01      	cmp	r3, #1
 8009f98:	d002      	beq.n	8009fa0 <get_sequence_step_timeout+0x38>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_DSS)	 ||
 8009f9a:	7afb      	ldrb	r3, [r7, #11]
 8009f9c:	2b02      	cmp	r3, #2
 8009f9e:	d128      	bne.n	8009ff2 <get_sequence_step_timeout+0x8a>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_MSRC)) {

		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8009fa0:	f107 0321 	add.w	r3, r7, #33	; 0x21
 8009fa4:	461a      	mov	r2, r3
 8009fa6:	2100      	movs	r1, #0
 8009fa8:	68f8      	ldr	r0, [r7, #12]
 8009faa:	f7fd fa4d 	bl	8007448 <VL53L0X_GetVcselPulsePeriod>
 8009fae:	4603      	mov	r3, r0
 8009fb0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);
		if (Status == VL53L0X_ERROR_NONE) {
 8009fb4:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8009fb8:	2b00      	cmp	r3, #0
 8009fba:	d109      	bne.n	8009fd0 <get_sequence_step_timeout+0x68>
			Status = VL53L0X_RdByte(Dev,
 8009fbc:	f107 0320 	add.w	r3, r7, #32
 8009fc0:	461a      	mov	r2, r3
 8009fc2:	2146      	movs	r1, #70	; 0x46
 8009fc4:	68f8      	ldr	r0, [r7, #12]
 8009fc6:	f001 fd8b 	bl	800bae0 <VL53L0X_RdByte>
 8009fca:	4603      	mov	r3, r0
 8009fcc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_REG_MSRC_CONFIG_TIMEOUT_MACROP,
					&EncodedTimeOutByte);
		}
		MsrcTimeOutMClks = VL53L0X_decode_timeout(EncodedTimeOutByte);
 8009fd0:	f897 3020 	ldrb.w	r3, [r7, #32]
 8009fd4:	b29b      	uxth	r3, r3
 8009fd6:	4618      	mov	r0, r3
 8009fd8:	f7ff ff5c 	bl	8009e94 <VL53L0X_decode_timeout>
 8009fdc:	4603      	mov	r3, r0
 8009fde:	847b      	strh	r3, [r7, #34]	; 0x22

		TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 8009fe0:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8009fe4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8009fe6:	4619      	mov	r1, r3
 8009fe8:	68f8      	ldr	r0, [r7, #12]
 8009fea:	f7ff ff93 	bl	8009f14 <VL53L0X_calc_timeout_us>
 8009fee:	62b8      	str	r0, [r7, #40]	; 0x28
 8009ff0:	e092      	b.n	800a118 <get_sequence_step_timeout+0x1b0>
						MsrcTimeOutMClks,
						CurrentVCSELPulsePeriodPClk);
	} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_PRE_RANGE) {
 8009ff2:	7afb      	ldrb	r3, [r7, #11]
 8009ff4:	2b03      	cmp	r3, #3
 8009ff6:	d135      	bne.n	800a064 <get_sequence_step_timeout+0xfc>
		/* Retrieve PRE-RANGE VCSEL Period */
		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8009ff8:	f107 0321 	add.w	r3, r7, #33	; 0x21
 8009ffc:	461a      	mov	r2, r3
 8009ffe:	2100      	movs	r1, #0
 800a000:	68f8      	ldr	r0, [r7, #12]
 800a002:	f7fd fa21 	bl	8007448 <VL53L0X_GetVcselPulsePeriod>
 800a006:	4603      	mov	r3, r0
 800a008:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
						VL53L0X_VCSEL_PERIOD_PRE_RANGE,
						&CurrentVCSELPulsePeriodPClk);

		/* Retrieve PRE-RANGE Timeout in Macro periods (MCLKS) */
		if (Status == VL53L0X_ERROR_NONE) {
 800a00c:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800a010:	2b00      	cmp	r3, #0
 800a012:	f040 8081 	bne.w	800a118 <get_sequence_step_timeout+0x1b0>

			/* Retrieve PRE-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800a016:	f107 0321 	add.w	r3, r7, #33	; 0x21
 800a01a:	461a      	mov	r2, r3
 800a01c:	2100      	movs	r1, #0
 800a01e:	68f8      	ldr	r0, [r7, #12]
 800a020:	f7fd fa12 	bl	8007448 <VL53L0X_GetVcselPulsePeriod>
 800a024:	4603      	mov	r3, r0
 800a026:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

			if (Status == VL53L0X_ERROR_NONE) {
 800a02a:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800a02e:	2b00      	cmp	r3, #0
 800a030:	d109      	bne.n	800a046 <get_sequence_step_timeout+0xde>
				Status = VL53L0X_RdWord(Dev,
 800a032:	f107 031e 	add.w	r3, r7, #30
 800a036:	461a      	mov	r2, r3
 800a038:	2151      	movs	r1, #81	; 0x51
 800a03a:	68f8      	ldr	r0, [r7, #12]
 800a03c:	f001 fd7a 	bl	800bb34 <VL53L0X_RdWord>
 800a040:	4603      	mov	r3, r0
 800a042:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&PreRangeEncodedTimeOut);
			}

			PreRangeTimeOutMClks = VL53L0X_decode_timeout(
 800a046:	8bfb      	ldrh	r3, [r7, #30]
 800a048:	4618      	mov	r0, r3
 800a04a:	f7ff ff23 	bl	8009e94 <VL53L0X_decode_timeout>
 800a04e:	4603      	mov	r3, r0
 800a050:	84fb      	strh	r3, [r7, #38]	; 0x26
					PreRangeEncodedTimeOut);

			TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 800a052:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 800a056:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800a058:	4619      	mov	r1, r3
 800a05a:	68f8      	ldr	r0, [r7, #12]
 800a05c:	f7ff ff5a 	bl	8009f14 <VL53L0X_calc_timeout_us>
 800a060:	62b8      	str	r0, [r7, #40]	; 0x28
 800a062:	e059      	b.n	800a118 <get_sequence_step_timeout+0x1b0>
					PreRangeTimeOutMClks,
					CurrentVCSELPulsePeriodPClk);
		}
	} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_FINAL_RANGE) {
 800a064:	7afb      	ldrb	r3, [r7, #11]
 800a066:	2b04      	cmp	r3, #4
 800a068:	d156      	bne.n	800a118 <get_sequence_step_timeout+0x1b0>

		VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 800a06a:	f107 0314 	add.w	r3, r7, #20
 800a06e:	4619      	mov	r1, r3
 800a070:	68f8      	ldr	r0, [r7, #12]
 800a072:	f7fd faf5 	bl	8007660 <VL53L0X_GetSequenceStepEnables>
		PreRangeTimeOutMClks = 0;
 800a076:	2300      	movs	r3, #0
 800a078:	84fb      	strh	r3, [r7, #38]	; 0x26

		if (SchedulerSequenceSteps.PreRangeOn) {
 800a07a:	7dfb      	ldrb	r3, [r7, #23]
 800a07c:	2b00      	cmp	r3, #0
 800a07e:	d01d      	beq.n	800a0bc <get_sequence_step_timeout+0x154>
			/* Retrieve PRE-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800a080:	f107 0321 	add.w	r3, r7, #33	; 0x21
 800a084:	461a      	mov	r2, r3
 800a086:	2100      	movs	r1, #0
 800a088:	68f8      	ldr	r0, [r7, #12]
 800a08a:	f7fd f9dd 	bl	8007448 <VL53L0X_GetVcselPulsePeriod>
 800a08e:	4603      	mov	r3, r0
 800a090:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_VCSEL_PERIOD_PRE_RANGE,
				&CurrentVCSELPulsePeriodPClk);

			/* Retrieve PRE-RANGE Timeout in Macro periods
			 * (MCLKS) */
			if (Status == VL53L0X_ERROR_NONE) {
 800a094:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800a098:	2b00      	cmp	r3, #0
 800a09a:	d10f      	bne.n	800a0bc <get_sequence_step_timeout+0x154>
				Status = VL53L0X_RdWord(Dev,
 800a09c:	f107 031e 	add.w	r3, r7, #30
 800a0a0:	461a      	mov	r2, r3
 800a0a2:	2151      	movs	r1, #81	; 0x51
 800a0a4:	68f8      	ldr	r0, [r7, #12]
 800a0a6:	f001 fd45 	bl	800bb34 <VL53L0X_RdWord>
 800a0aa:	4603      	mov	r3, r0
 800a0ac:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&PreRangeEncodedTimeOut);
				PreRangeTimeOutMClks = VL53L0X_decode_timeout(
 800a0b0:	8bfb      	ldrh	r3, [r7, #30]
 800a0b2:	4618      	mov	r0, r3
 800a0b4:	f7ff feee 	bl	8009e94 <VL53L0X_decode_timeout>
 800a0b8:	4603      	mov	r3, r0
 800a0ba:	84fb      	strh	r3, [r7, #38]	; 0x26
						PreRangeEncodedTimeOut);
			}
		}

		if (Status == VL53L0X_ERROR_NONE) {
 800a0bc:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800a0c0:	2b00      	cmp	r3, #0
 800a0c2:	d109      	bne.n	800a0d8 <get_sequence_step_timeout+0x170>
			/* Retrieve FINAL-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800a0c4:	f107 0321 	add.w	r3, r7, #33	; 0x21
 800a0c8:	461a      	mov	r2, r3
 800a0ca:	2101      	movs	r1, #1
 800a0cc:	68f8      	ldr	r0, [r7, #12]
 800a0ce:	f7fd f9bb 	bl	8007448 <VL53L0X_GetVcselPulsePeriod>
 800a0d2:	4603      	mov	r3, r0
 800a0d4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
					&CurrentVCSELPulsePeriodPClk);
		}

		/* Retrieve FINAL-RANGE Timeout in Macro periods (MCLKS) */
		if (Status == VL53L0X_ERROR_NONE) {
 800a0d8:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800a0dc:	2b00      	cmp	r3, #0
 800a0de:	d10f      	bne.n	800a100 <get_sequence_step_timeout+0x198>
			Status = VL53L0X_RdWord(Dev,
 800a0e0:	f107 031c 	add.w	r3, r7, #28
 800a0e4:	461a      	mov	r2, r3
 800a0e6:	2171      	movs	r1, #113	; 0x71
 800a0e8:	68f8      	ldr	r0, [r7, #12]
 800a0ea:	f001 fd23 	bl	800bb34 <VL53L0X_RdWord>
 800a0ee:	4603      	mov	r3, r0
 800a0f0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_REG_FINAL_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&FinalRangeEncodedTimeOut);
			FinalRangeTimeOutMClks = VL53L0X_decode_timeout(
 800a0f4:	8bbb      	ldrh	r3, [r7, #28]
 800a0f6:	4618      	mov	r0, r3
 800a0f8:	f7ff fecc 	bl	8009e94 <VL53L0X_decode_timeout>
 800a0fc:	4603      	mov	r3, r0
 800a0fe:	84bb      	strh	r3, [r7, #36]	; 0x24
					FinalRangeEncodedTimeOut);
		}

		FinalRangeTimeOutMClks -= PreRangeTimeOutMClks;
 800a100:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800a102:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800a104:	1ad3      	subs	r3, r2, r3
 800a106:	84bb      	strh	r3, [r7, #36]	; 0x24
		TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 800a108:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 800a10c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a10e:	4619      	mov	r1, r3
 800a110:	68f8      	ldr	r0, [r7, #12]
 800a112:	f7ff feff 	bl	8009f14 <VL53L0X_calc_timeout_us>
 800a116:	62b8      	str	r0, [r7, #40]	; 0x28
						FinalRangeTimeOutMClks,
						CurrentVCSELPulsePeriodPClk);
	}

	*pTimeOutMicroSecs = TimeoutMicroSeconds;
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a11c:	601a      	str	r2, [r3, #0]

	return Status;
 800a11e:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 800a122:	4618      	mov	r0, r3
 800a124:	3730      	adds	r7, #48	; 0x30
 800a126:	46bd      	mov	sp, r7
 800a128:	bd80      	pop	{r7, pc}

0800a12a <set_sequence_step_timeout>:


VL53L0X_Error set_sequence_step_timeout(VL53L0X_DEV Dev,
					VL53L0X_SequenceStepId SequenceStepId,
					uint32_t TimeOutMicroSecs)
{
 800a12a:	b580      	push	{r7, lr}
 800a12c:	b08a      	sub	sp, #40	; 0x28
 800a12e:	af00      	add	r7, sp, #0
 800a130:	60f8      	str	r0, [r7, #12]
 800a132:	460b      	mov	r3, r1
 800a134:	607a      	str	r2, [r7, #4]
 800a136:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a138:	2300      	movs	r3, #0
 800a13a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint16_t MsrcRangeTimeOutMClks;
	uint32_t FinalRangeTimeOutMClks;
	uint16_t FinalRangeEncodedTimeOut;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;

	if ((SequenceStepId == VL53L0X_SEQUENCESTEP_TCC)	 ||
 800a13e:	7afb      	ldrb	r3, [r7, #11]
 800a140:	2b00      	cmp	r3, #0
 800a142:	d005      	beq.n	800a150 <set_sequence_step_timeout+0x26>
 800a144:	7afb      	ldrb	r3, [r7, #11]
 800a146:	2b01      	cmp	r3, #1
 800a148:	d002      	beq.n	800a150 <set_sequence_step_timeout+0x26>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_DSS)	 ||
 800a14a:	7afb      	ldrb	r3, [r7, #11]
 800a14c:	2b02      	cmp	r3, #2
 800a14e:	d138      	bne.n	800a1c2 <set_sequence_step_timeout+0x98>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_MSRC)) {

		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800a150:	f107 031b 	add.w	r3, r7, #27
 800a154:	461a      	mov	r2, r3
 800a156:	2100      	movs	r1, #0
 800a158:	68f8      	ldr	r0, [r7, #12]
 800a15a:	f7fd f975 	bl	8007448 <VL53L0X_GetVcselPulsePeriod>
 800a15e:	4603      	mov	r3, r0
 800a160:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

		if (Status == VL53L0X_ERROR_NONE) {
 800a164:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a168:	2b00      	cmp	r3, #0
 800a16a:	d11a      	bne.n	800a1a2 <set_sequence_step_timeout+0x78>
			MsrcRangeTimeOutMClks = VL53L0X_calc_timeout_mclks(Dev,
 800a16c:	7efb      	ldrb	r3, [r7, #27]
 800a16e:	461a      	mov	r2, r3
 800a170:	6879      	ldr	r1, [r7, #4]
 800a172:	68f8      	ldr	r0, [r7, #12]
 800a174:	f7ff fea4 	bl	8009ec0 <VL53L0X_calc_timeout_mclks>
 800a178:	4603      	mov	r3, r0
 800a17a:	83bb      	strh	r3, [r7, #28]
					TimeOutMicroSecs,
					(uint8_t)CurrentVCSELPulsePeriodPClk);

			if (MsrcRangeTimeOutMClks > 256)
 800a17c:	8bbb      	ldrh	r3, [r7, #28]
 800a17e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a182:	d903      	bls.n	800a18c <set_sequence_step_timeout+0x62>
				MsrcEncodedTimeOut = 255;
 800a184:	23ff      	movs	r3, #255	; 0xff
 800a186:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800a18a:	e004      	b.n	800a196 <set_sequence_step_timeout+0x6c>
			else
				MsrcEncodedTimeOut =
					(uint8_t)MsrcRangeTimeOutMClks - 1;
 800a18c:	8bbb      	ldrh	r3, [r7, #28]
 800a18e:	b2db      	uxtb	r3, r3
				MsrcEncodedTimeOut =
 800a190:	3b01      	subs	r3, #1
 800a192:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800a196:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800a19a:	b29a      	uxth	r2, r3
 800a19c:	68fb      	ldr	r3, [r7, #12]
 800a19e:	f8a3 20d8 	strh.w	r2, [r3, #216]	; 0xd8
				LastEncodedTimeout,
				MsrcEncodedTimeOut);
		}

		if (Status == VL53L0X_ERROR_NONE) {
 800a1a2:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a1a6:	2b00      	cmp	r3, #0
 800a1a8:	f040 80ab 	bne.w	800a302 <set_sequence_step_timeout+0x1d8>
			Status = VL53L0X_WrByte(Dev,
 800a1ac:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800a1b0:	461a      	mov	r2, r3
 800a1b2:	2146      	movs	r1, #70	; 0x46
 800a1b4:	68f8      	ldr	r0, [r7, #12]
 800a1b6:	f001 fc11 	bl	800b9dc <VL53L0X_WrByte>
 800a1ba:	4603      	mov	r3, r0
 800a1bc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if (Status == VL53L0X_ERROR_NONE) {
 800a1c0:	e09f      	b.n	800a302 <set_sequence_step_timeout+0x1d8>
				VL53L0X_REG_MSRC_CONFIG_TIMEOUT_MACROP,
				MsrcEncodedTimeOut);
		}
	} else {

		if (SequenceStepId == VL53L0X_SEQUENCESTEP_PRE_RANGE) {
 800a1c2:	7afb      	ldrb	r3, [r7, #11]
 800a1c4:	2b03      	cmp	r3, #3
 800a1c6:	d135      	bne.n	800a234 <set_sequence_step_timeout+0x10a>

			if (Status == VL53L0X_ERROR_NONE) {
 800a1c8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a1cc:	2b00      	cmp	r3, #0
 800a1ce:	d11b      	bne.n	800a208 <set_sequence_step_timeout+0xde>
				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800a1d0:	f107 031b 	add.w	r3, r7, #27
 800a1d4:	461a      	mov	r2, r3
 800a1d6:	2100      	movs	r1, #0
 800a1d8:	68f8      	ldr	r0, [r7, #12]
 800a1da:	f7fd f935 	bl	8007448 <VL53L0X_GetVcselPulsePeriod>
 800a1de:	4603      	mov	r3, r0
 800a1e0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						VL53L0X_VCSEL_PERIOD_PRE_RANGE,
						&CurrentVCSELPulsePeriodPClk);
				PreRangeTimeOutMClks =
					VL53L0X_calc_timeout_mclks(Dev,
 800a1e4:	7efb      	ldrb	r3, [r7, #27]
 800a1e6:	461a      	mov	r2, r3
 800a1e8:	6879      	ldr	r1, [r7, #4]
 800a1ea:	68f8      	ldr	r0, [r7, #12]
 800a1ec:	f7ff fe68 	bl	8009ec0 <VL53L0X_calc_timeout_mclks>
 800a1f0:	4603      	mov	r3, r0
				PreRangeTimeOutMClks =
 800a1f2:	84bb      	strh	r3, [r7, #36]	; 0x24
					TimeOutMicroSecs,
					(uint8_t)CurrentVCSELPulsePeriodPClk);
				PreRangeEncodedTimeOut = VL53L0X_encode_timeout(
 800a1f4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a1f6:	4618      	mov	r0, r3
 800a1f8:	f7ff fe20 	bl	8009e3c <VL53L0X_encode_timeout>
 800a1fc:	4603      	mov	r3, r0
 800a1fe:	833b      	strh	r3, [r7, #24]
					PreRangeTimeOutMClks);

				VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800a200:	8b3a      	ldrh	r2, [r7, #24]
 800a202:	68fb      	ldr	r3, [r7, #12]
 800a204:	f8a3 20d8 	strh.w	r2, [r3, #216]	; 0xd8
					LastEncodedTimeout,
					PreRangeEncodedTimeOut);
			}

			if (Status == VL53L0X_ERROR_NONE) {
 800a208:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a20c:	2b00      	cmp	r3, #0
 800a20e:	d108      	bne.n	800a222 <set_sequence_step_timeout+0xf8>
				Status = VL53L0X_WrWord(Dev,
 800a210:	8b3b      	ldrh	r3, [r7, #24]
 800a212:	461a      	mov	r2, r3
 800a214:	2151      	movs	r1, #81	; 0x51
 800a216:	68f8      	ldr	r0, [r7, #12]
 800a218:	f001 fc04 	bl	800ba24 <VL53L0X_WrWord>
 800a21c:	4603      	mov	r3, r0
 800a21e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				PreRangeEncodedTimeOut);
			}

			if (Status == VL53L0X_ERROR_NONE) {
 800a222:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a226:	2b00      	cmp	r3, #0
 800a228:	d16b      	bne.n	800a302 <set_sequence_step_timeout+0x1d8>
				VL53L0X_SETDEVICESPECIFICPARAMETER(
 800a22a:	68fb      	ldr	r3, [r7, #12]
 800a22c:	687a      	ldr	r2, [r7, #4]
 800a22e:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
 800a232:	e066      	b.n	800a302 <set_sequence_step_timeout+0x1d8>
					Dev,
					PreRangeTimeoutMicroSecs,
					TimeOutMicroSecs);
			}
		} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_FINAL_RANGE) {
 800a234:	7afb      	ldrb	r3, [r7, #11]
 800a236:	2b04      	cmp	r3, #4
 800a238:	d160      	bne.n	800a2fc <set_sequence_step_timeout+0x1d2>
			 * must be added. To do this both final and pre-range
			 * timeouts must be expressed in macro periods MClks
			 * because they have different vcsel periods.
			 */

			VL53L0X_GetSequenceStepEnables(Dev,
 800a23a:	f107 0310 	add.w	r3, r7, #16
 800a23e:	4619      	mov	r1, r3
 800a240:	68f8      	ldr	r0, [r7, #12]
 800a242:	f7fd fa0d 	bl	8007660 <VL53L0X_GetSequenceStepEnables>
					&SchedulerSequenceSteps);
			PreRangeTimeOutMClks = 0;
 800a246:	2300      	movs	r3, #0
 800a248:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (SchedulerSequenceSteps.PreRangeOn) {
 800a24a:	7cfb      	ldrb	r3, [r7, #19]
 800a24c:	2b00      	cmp	r3, #0
 800a24e:	d01d      	beq.n	800a28c <set_sequence_step_timeout+0x162>

				/* Retrieve PRE-RANGE VCSEL Period */
				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800a250:	f107 031b 	add.w	r3, r7, #27
 800a254:	461a      	mov	r2, r3
 800a256:	2100      	movs	r1, #0
 800a258:	68f8      	ldr	r0, [r7, #12]
 800a25a:	f7fd f8f5 	bl	8007448 <VL53L0X_GetVcselPulsePeriod>
 800a25e:	4603      	mov	r3, r0
 800a260:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

				/* Retrieve PRE-RANGE Timeout in Macro periods
				 * (MCLKS) */
				if (Status == VL53L0X_ERROR_NONE) {
 800a264:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a268:	2b00      	cmp	r3, #0
 800a26a:	d10f      	bne.n	800a28c <set_sequence_step_timeout+0x162>
					Status = VL53L0X_RdWord(Dev, 0x51,
 800a26c:	f107 0318 	add.w	r3, r7, #24
 800a270:	461a      	mov	r2, r3
 800a272:	2151      	movs	r1, #81	; 0x51
 800a274:	68f8      	ldr	r0, [r7, #12]
 800a276:	f001 fc5d 	bl	800bb34 <VL53L0X_RdWord>
 800a27a:	4603      	mov	r3, r0
 800a27c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						&PreRangeEncodedTimeOut);
					PreRangeTimeOutMClks =
						VL53L0X_decode_timeout(
 800a280:	8b3b      	ldrh	r3, [r7, #24]
 800a282:	4618      	mov	r0, r3
 800a284:	f7ff fe06 	bl	8009e94 <VL53L0X_decode_timeout>
 800a288:	4603      	mov	r3, r0
					PreRangeTimeOutMClks =
 800a28a:	84bb      	strh	r3, [r7, #36]	; 0x24
			}

			/* Calculate FINAL RANGE Timeout in Macro Periods
			 * (MCLKS) and add PRE-RANGE value
			 */
			if (Status == VL53L0X_ERROR_NONE) {
 800a28c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a290:	2b00      	cmp	r3, #0
 800a292:	d109      	bne.n	800a2a8 <set_sequence_step_timeout+0x17e>

				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800a294:	f107 031b 	add.w	r3, r7, #27
 800a298:	461a      	mov	r2, r3
 800a29a:	2101      	movs	r1, #1
 800a29c:	68f8      	ldr	r0, [r7, #12]
 800a29e:	f7fd f8d3 	bl	8007448 <VL53L0X_GetVcselPulsePeriod>
 800a2a2:	4603      	mov	r3, r0
 800a2a4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
						&CurrentVCSELPulsePeriodPClk);
			}
			if (Status == VL53L0X_ERROR_NONE) {
 800a2a8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a2ac:	2b00      	cmp	r3, #0
 800a2ae:	d128      	bne.n	800a302 <set_sequence_step_timeout+0x1d8>

				FinalRangeTimeOutMClks =
					VL53L0X_calc_timeout_mclks(Dev,
 800a2b0:	7efb      	ldrb	r3, [r7, #27]
 800a2b2:	461a      	mov	r2, r3
 800a2b4:	6879      	ldr	r1, [r7, #4]
 800a2b6:	68f8      	ldr	r0, [r7, #12]
 800a2b8:	f7ff fe02 	bl	8009ec0 <VL53L0X_calc_timeout_mclks>
 800a2bc:	6238      	str	r0, [r7, #32]
					TimeOutMicroSecs,
					(uint8_t) CurrentVCSELPulsePeriodPClk);

				FinalRangeTimeOutMClks += PreRangeTimeOutMClks;
 800a2be:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a2c0:	6a3a      	ldr	r2, [r7, #32]
 800a2c2:	4413      	add	r3, r2
 800a2c4:	623b      	str	r3, [r7, #32]

				FinalRangeEncodedTimeOut =
				VL53L0X_encode_timeout(FinalRangeTimeOutMClks);
 800a2c6:	6a38      	ldr	r0, [r7, #32]
 800a2c8:	f7ff fdb8 	bl	8009e3c <VL53L0X_encode_timeout>
 800a2cc:	4603      	mov	r3, r0
 800a2ce:	83fb      	strh	r3, [r7, #30]

				if (Status == VL53L0X_ERROR_NONE) {
 800a2d0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a2d4:	2b00      	cmp	r3, #0
 800a2d6:	d108      	bne.n	800a2ea <set_sequence_step_timeout+0x1c0>
					Status = VL53L0X_WrWord(Dev, 0x71,
 800a2d8:	8bfb      	ldrh	r3, [r7, #30]
 800a2da:	461a      	mov	r2, r3
 800a2dc:	2171      	movs	r1, #113	; 0x71
 800a2de:	68f8      	ldr	r0, [r7, #12]
 800a2e0:	f001 fba0 	bl	800ba24 <VL53L0X_WrWord>
 800a2e4:	4603      	mov	r3, r0
 800a2e6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					FinalRangeEncodedTimeOut);
				}

				if (Status == VL53L0X_ERROR_NONE) {
 800a2ea:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a2ee:	2b00      	cmp	r3, #0
 800a2f0:	d107      	bne.n	800a302 <set_sequence_step_timeout+0x1d8>
					VL53L0X_SETDEVICESPECIFICPARAMETER(
 800a2f2:	68fb      	ldr	r3, [r7, #12]
 800a2f4:	687a      	ldr	r2, [r7, #4]
 800a2f6:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
 800a2fa:	e002      	b.n	800a302 <set_sequence_step_timeout+0x1d8>
						FinalRangeTimeoutMicroSecs,
						TimeOutMicroSecs);
				}
			}
		} else
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 800a2fc:	23fc      	movs	r3, #252	; 0xfc
 800a2fe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	}
	return Status;
 800a302:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800a306:	4618      	mov	r0, r3
 800a308:	3728      	adds	r7, #40	; 0x28
 800a30a:	46bd      	mov	sp, r7
 800a30c:	bd80      	pop	{r7, pc}

0800a30e <VL53L0X_set_vcsel_pulse_period>:

VL53L0X_Error VL53L0X_set_vcsel_pulse_period(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t VCSELPulsePeriodPCLK)
{
 800a30e:	b580      	push	{r7, lr}
 800a310:	b08a      	sub	sp, #40	; 0x28
 800a312:	af00      	add	r7, sp, #0
 800a314:	6078      	str	r0, [r7, #4]
 800a316:	460b      	mov	r3, r1
 800a318:	70fb      	strb	r3, [r7, #3]
 800a31a:	4613      	mov	r3, r2
 800a31c:	70bb      	strb	r3, [r7, #2]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a31e:	2300      	movs	r3, #0
 800a320:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint8_t vcsel_period_reg;
	uint8_t MinPreVcselPeriodPCLK = 12;
 800a324:	230c      	movs	r3, #12
 800a326:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	uint8_t MaxPreVcselPeriodPCLK = 18;
 800a32a:	2312      	movs	r3, #18
 800a32c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	uint8_t MinFinalVcselPeriodPCLK = 8;
 800a330:	2308      	movs	r3, #8
 800a332:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	uint8_t MaxFinalVcselPeriodPCLK = 14;
 800a336:	230e      	movs	r3, #14
 800a338:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	uint32_t MeasurementTimingBudgetMicroSeconds;
	uint32_t FinalRangeTimeoutMicroSeconds;
	uint32_t PreRangeTimeoutMicroSeconds;
	uint32_t MsrcTimeoutMicroSeconds;
	uint8_t PhaseCalInt = 0;
 800a33c:	2300      	movs	r3, #0
 800a33e:	73fb      	strb	r3, [r7, #15]

	/* Check if valid clock period requested */

	if ((VCSELPulsePeriodPCLK % 2) != 0) {
 800a340:	78bb      	ldrb	r3, [r7, #2]
 800a342:	f003 0301 	and.w	r3, r3, #1
 800a346:	b2db      	uxtb	r3, r3
 800a348:	2b00      	cmp	r3, #0
 800a34a:	d003      	beq.n	800a354 <VL53L0X_set_vcsel_pulse_period+0x46>
		/* Value must be an even number */
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800a34c:	23fc      	movs	r3, #252	; 0xfc
 800a34e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800a352:	e020      	b.n	800a396 <VL53L0X_set_vcsel_pulse_period+0x88>
	} else if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_PRE_RANGE &&
 800a354:	78fb      	ldrb	r3, [r7, #3]
 800a356:	2b00      	cmp	r3, #0
 800a358:	d10d      	bne.n	800a376 <VL53L0X_set_vcsel_pulse_period+0x68>
 800a35a:	78ba      	ldrb	r2, [r7, #2]
 800a35c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800a360:	429a      	cmp	r2, r3
 800a362:	d304      	bcc.n	800a36e <VL53L0X_set_vcsel_pulse_period+0x60>
		(VCSELPulsePeriodPCLK < MinPreVcselPeriodPCLK ||
 800a364:	78ba      	ldrb	r2, [r7, #2]
 800a366:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800a36a:	429a      	cmp	r2, r3
 800a36c:	d903      	bls.n	800a376 <VL53L0X_set_vcsel_pulse_period+0x68>
		VCSELPulsePeriodPCLK > MaxPreVcselPeriodPCLK)) {
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800a36e:	23fc      	movs	r3, #252	; 0xfc
 800a370:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800a374:	e00f      	b.n	800a396 <VL53L0X_set_vcsel_pulse_period+0x88>
	} else if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_FINAL_RANGE &&
 800a376:	78fb      	ldrb	r3, [r7, #3]
 800a378:	2b01      	cmp	r3, #1
 800a37a:	d10c      	bne.n	800a396 <VL53L0X_set_vcsel_pulse_period+0x88>
 800a37c:	78ba      	ldrb	r2, [r7, #2]
 800a37e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800a382:	429a      	cmp	r2, r3
 800a384:	d304      	bcc.n	800a390 <VL53L0X_set_vcsel_pulse_period+0x82>
		(VCSELPulsePeriodPCLK < MinFinalVcselPeriodPCLK ||
 800a386:	78ba      	ldrb	r2, [r7, #2]
 800a388:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800a38c:	429a      	cmp	r2, r3
 800a38e:	d902      	bls.n	800a396 <VL53L0X_set_vcsel_pulse_period+0x88>
		 VCSELPulsePeriodPCLK > MaxFinalVcselPeriodPCLK)) {

		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800a390:	23fc      	movs	r3, #252	; 0xfc
 800a392:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	/* Apply specific settings for the requested clock period */

	if (Status != VL53L0X_ERROR_NONE)
 800a396:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a39a:	2b00      	cmp	r3, #0
 800a39c:	d002      	beq.n	800a3a4 <VL53L0X_set_vcsel_pulse_period+0x96>
		return Status;
 800a39e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a3a2:	e239      	b.n	800a818 <VL53L0X_set_vcsel_pulse_period+0x50a>


	if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_PRE_RANGE) {
 800a3a4:	78fb      	ldrb	r3, [r7, #3]
 800a3a6:	2b00      	cmp	r3, #0
 800a3a8:	d150      	bne.n	800a44c <VL53L0X_set_vcsel_pulse_period+0x13e>

		/* Set phase check limits */
		if (VCSELPulsePeriodPCLK == 12) {
 800a3aa:	78bb      	ldrb	r3, [r7, #2]
 800a3ac:	2b0c      	cmp	r3, #12
 800a3ae:	d110      	bne.n	800a3d2 <VL53L0X_set_vcsel_pulse_period+0xc4>

			Status = VL53L0X_WrByte(Dev,
 800a3b0:	2218      	movs	r2, #24
 800a3b2:	2157      	movs	r1, #87	; 0x57
 800a3b4:	6878      	ldr	r0, [r7, #4]
 800a3b6:	f001 fb11 	bl	800b9dc <VL53L0X_WrByte>
 800a3ba:	4603      	mov	r3, r0
 800a3bc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x18);
			Status = VL53L0X_WrByte(Dev,
 800a3c0:	2208      	movs	r2, #8
 800a3c2:	2156      	movs	r1, #86	; 0x56
 800a3c4:	6878      	ldr	r0, [r7, #4]
 800a3c6:	f001 fb09 	bl	800b9dc <VL53L0X_WrByte>
 800a3ca:	4603      	mov	r3, r0
 800a3cc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800a3d0:	e17f      	b.n	800a6d2 <VL53L0X_set_vcsel_pulse_period+0x3c4>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		} else if (VCSELPulsePeriodPCLK == 14) {
 800a3d2:	78bb      	ldrb	r3, [r7, #2]
 800a3d4:	2b0e      	cmp	r3, #14
 800a3d6:	d110      	bne.n	800a3fa <VL53L0X_set_vcsel_pulse_period+0xec>

			Status = VL53L0X_WrByte(Dev,
 800a3d8:	2230      	movs	r2, #48	; 0x30
 800a3da:	2157      	movs	r1, #87	; 0x57
 800a3dc:	6878      	ldr	r0, [r7, #4]
 800a3de:	f001 fafd 	bl	800b9dc <VL53L0X_WrByte>
 800a3e2:	4603      	mov	r3, r0
 800a3e4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x30);
			Status = VL53L0X_WrByte(Dev,
 800a3e8:	2208      	movs	r2, #8
 800a3ea:	2156      	movs	r1, #86	; 0x56
 800a3ec:	6878      	ldr	r0, [r7, #4]
 800a3ee:	f001 faf5 	bl	800b9dc <VL53L0X_WrByte>
 800a3f2:	4603      	mov	r3, r0
 800a3f4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800a3f8:	e16b      	b.n	800a6d2 <VL53L0X_set_vcsel_pulse_period+0x3c4>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		} else if (VCSELPulsePeriodPCLK == 16) {
 800a3fa:	78bb      	ldrb	r3, [r7, #2]
 800a3fc:	2b10      	cmp	r3, #16
 800a3fe:	d110      	bne.n	800a422 <VL53L0X_set_vcsel_pulse_period+0x114>

			Status = VL53L0X_WrByte(Dev,
 800a400:	2240      	movs	r2, #64	; 0x40
 800a402:	2157      	movs	r1, #87	; 0x57
 800a404:	6878      	ldr	r0, [r7, #4]
 800a406:	f001 fae9 	bl	800b9dc <VL53L0X_WrByte>
 800a40a:	4603      	mov	r3, r0
 800a40c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x40);
			Status = VL53L0X_WrByte(Dev,
 800a410:	2208      	movs	r2, #8
 800a412:	2156      	movs	r1, #86	; 0x56
 800a414:	6878      	ldr	r0, [r7, #4]
 800a416:	f001 fae1 	bl	800b9dc <VL53L0X_WrByte>
 800a41a:	4603      	mov	r3, r0
 800a41c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800a420:	e157      	b.n	800a6d2 <VL53L0X_set_vcsel_pulse_period+0x3c4>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		} else if (VCSELPulsePeriodPCLK == 18) {
 800a422:	78bb      	ldrb	r3, [r7, #2]
 800a424:	2b12      	cmp	r3, #18
 800a426:	f040 8154 	bne.w	800a6d2 <VL53L0X_set_vcsel_pulse_period+0x3c4>

			Status = VL53L0X_WrByte(Dev,
 800a42a:	2250      	movs	r2, #80	; 0x50
 800a42c:	2157      	movs	r1, #87	; 0x57
 800a42e:	6878      	ldr	r0, [r7, #4]
 800a430:	f001 fad4 	bl	800b9dc <VL53L0X_WrByte>
 800a434:	4603      	mov	r3, r0
 800a436:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x50);
			Status = VL53L0X_WrByte(Dev,
 800a43a:	2208      	movs	r2, #8
 800a43c:	2156      	movs	r1, #86	; 0x56
 800a43e:	6878      	ldr	r0, [r7, #4]
 800a440:	f001 facc 	bl	800b9dc <VL53L0X_WrByte>
 800a444:	4603      	mov	r3, r0
 800a446:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800a44a:	e142      	b.n	800a6d2 <VL53L0X_set_vcsel_pulse_period+0x3c4>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		}
	} else if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_FINAL_RANGE) {
 800a44c:	78fb      	ldrb	r3, [r7, #3]
 800a44e:	2b01      	cmp	r3, #1
 800a450:	f040 813f 	bne.w	800a6d2 <VL53L0X_set_vcsel_pulse_period+0x3c4>

		if (VCSELPulsePeriodPCLK == 8) {
 800a454:	78bb      	ldrb	r3, [r7, #2]
 800a456:	2b08      	cmp	r3, #8
 800a458:	d14c      	bne.n	800a4f4 <VL53L0X_set_vcsel_pulse_period+0x1e6>

			Status = VL53L0X_WrByte(Dev,
 800a45a:	2210      	movs	r2, #16
 800a45c:	2148      	movs	r1, #72	; 0x48
 800a45e:	6878      	ldr	r0, [r7, #4]
 800a460:	f001 fabc 	bl	800b9dc <VL53L0X_WrByte>
 800a464:	4603      	mov	r3, r0
 800a466:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x10);
			Status = VL53L0X_WrByte(Dev,
 800a46a:	2208      	movs	r2, #8
 800a46c:	2147      	movs	r1, #71	; 0x47
 800a46e:	6878      	ldr	r0, [r7, #4]
 800a470:	f001 fab4 	bl	800b9dc <VL53L0X_WrByte>
 800a474:	4603      	mov	r3, r0
 800a476:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);

			Status |= VL53L0X_WrByte(Dev,
 800a47a:	2202      	movs	r2, #2
 800a47c:	2132      	movs	r1, #50	; 0x32
 800a47e:	6878      	ldr	r0, [r7, #4]
 800a480:	f001 faac 	bl	800b9dc <VL53L0X_WrByte>
 800a484:	4603      	mov	r3, r0
 800a486:	461a      	mov	r2, r3
 800a488:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a48c:	4313      	orrs	r3, r2
 800a48e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x02);
			Status |= VL53L0X_WrByte(Dev,
 800a492:	220c      	movs	r2, #12
 800a494:	2130      	movs	r1, #48	; 0x30
 800a496:	6878      	ldr	r0, [r7, #4]
 800a498:	f001 faa0 	bl	800b9dc <VL53L0X_WrByte>
 800a49c:	4603      	mov	r3, r0
 800a49e:	461a      	mov	r2, r3
 800a4a0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a4a4:	4313      	orrs	r3, r2
 800a4a6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x0C);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 800a4aa:	2201      	movs	r2, #1
 800a4ac:	21ff      	movs	r1, #255	; 0xff
 800a4ae:	6878      	ldr	r0, [r7, #4]
 800a4b0:	f001 fa94 	bl	800b9dc <VL53L0X_WrByte>
 800a4b4:	4603      	mov	r3, r0
 800a4b6:	461a      	mov	r2, r3
 800a4b8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a4bc:	4313      	orrs	r3, r2
 800a4be:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Status |= VL53L0X_WrByte(Dev,
 800a4c2:	2230      	movs	r2, #48	; 0x30
 800a4c4:	2130      	movs	r1, #48	; 0x30
 800a4c6:	6878      	ldr	r0, [r7, #4]
 800a4c8:	f001 fa88 	bl	800b9dc <VL53L0X_WrByte>
 800a4cc:	4603      	mov	r3, r0
 800a4ce:	461a      	mov	r2, r3
 800a4d0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a4d4:	4313      	orrs	r3, r2
 800a4d6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x30);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 800a4da:	2200      	movs	r2, #0
 800a4dc:	21ff      	movs	r1, #255	; 0xff
 800a4de:	6878      	ldr	r0, [r7, #4]
 800a4e0:	f001 fa7c 	bl	800b9dc <VL53L0X_WrByte>
 800a4e4:	4603      	mov	r3, r0
 800a4e6:	461a      	mov	r2, r3
 800a4e8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a4ec:	4313      	orrs	r3, r2
 800a4ee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800a4f2:	e0ee      	b.n	800a6d2 <VL53L0X_set_vcsel_pulse_period+0x3c4>
		} else if (VCSELPulsePeriodPCLK == 10) {
 800a4f4:	78bb      	ldrb	r3, [r7, #2]
 800a4f6:	2b0a      	cmp	r3, #10
 800a4f8:	d14c      	bne.n	800a594 <VL53L0X_set_vcsel_pulse_period+0x286>

			Status = VL53L0X_WrByte(Dev,
 800a4fa:	2228      	movs	r2, #40	; 0x28
 800a4fc:	2148      	movs	r1, #72	; 0x48
 800a4fe:	6878      	ldr	r0, [r7, #4]
 800a500:	f001 fa6c 	bl	800b9dc <VL53L0X_WrByte>
 800a504:	4603      	mov	r3, r0
 800a506:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x28);
			Status = VL53L0X_WrByte(Dev,
 800a50a:	2208      	movs	r2, #8
 800a50c:	2147      	movs	r1, #71	; 0x47
 800a50e:	6878      	ldr	r0, [r7, #4]
 800a510:	f001 fa64 	bl	800b9dc <VL53L0X_WrByte>
 800a514:	4603      	mov	r3, r0
 800a516:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);

			Status |= VL53L0X_WrByte(Dev,
 800a51a:	2203      	movs	r2, #3
 800a51c:	2132      	movs	r1, #50	; 0x32
 800a51e:	6878      	ldr	r0, [r7, #4]
 800a520:	f001 fa5c 	bl	800b9dc <VL53L0X_WrByte>
 800a524:	4603      	mov	r3, r0
 800a526:	461a      	mov	r2, r3
 800a528:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a52c:	4313      	orrs	r3, r2
 800a52e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x03);
			Status |= VL53L0X_WrByte(Dev,
 800a532:	2209      	movs	r2, #9
 800a534:	2130      	movs	r1, #48	; 0x30
 800a536:	6878      	ldr	r0, [r7, #4]
 800a538:	f001 fa50 	bl	800b9dc <VL53L0X_WrByte>
 800a53c:	4603      	mov	r3, r0
 800a53e:	461a      	mov	r2, r3
 800a540:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a544:	4313      	orrs	r3, r2
 800a546:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x09);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 800a54a:	2201      	movs	r2, #1
 800a54c:	21ff      	movs	r1, #255	; 0xff
 800a54e:	6878      	ldr	r0, [r7, #4]
 800a550:	f001 fa44 	bl	800b9dc <VL53L0X_WrByte>
 800a554:	4603      	mov	r3, r0
 800a556:	461a      	mov	r2, r3
 800a558:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a55c:	4313      	orrs	r3, r2
 800a55e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Status |= VL53L0X_WrByte(Dev,
 800a562:	2220      	movs	r2, #32
 800a564:	2130      	movs	r1, #48	; 0x30
 800a566:	6878      	ldr	r0, [r7, #4]
 800a568:	f001 fa38 	bl	800b9dc <VL53L0X_WrByte>
 800a56c:	4603      	mov	r3, r0
 800a56e:	461a      	mov	r2, r3
 800a570:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a574:	4313      	orrs	r3, r2
 800a576:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x20);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 800a57a:	2200      	movs	r2, #0
 800a57c:	21ff      	movs	r1, #255	; 0xff
 800a57e:	6878      	ldr	r0, [r7, #4]
 800a580:	f001 fa2c 	bl	800b9dc <VL53L0X_WrByte>
 800a584:	4603      	mov	r3, r0
 800a586:	461a      	mov	r2, r3
 800a588:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a58c:	4313      	orrs	r3, r2
 800a58e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800a592:	e09e      	b.n	800a6d2 <VL53L0X_set_vcsel_pulse_period+0x3c4>
		} else if (VCSELPulsePeriodPCLK == 12) {
 800a594:	78bb      	ldrb	r3, [r7, #2]
 800a596:	2b0c      	cmp	r3, #12
 800a598:	d14c      	bne.n	800a634 <VL53L0X_set_vcsel_pulse_period+0x326>

			Status = VL53L0X_WrByte(Dev,
 800a59a:	2238      	movs	r2, #56	; 0x38
 800a59c:	2148      	movs	r1, #72	; 0x48
 800a59e:	6878      	ldr	r0, [r7, #4]
 800a5a0:	f001 fa1c 	bl	800b9dc <VL53L0X_WrByte>
 800a5a4:	4603      	mov	r3, r0
 800a5a6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x38);
			Status = VL53L0X_WrByte(Dev,
 800a5aa:	2208      	movs	r2, #8
 800a5ac:	2147      	movs	r1, #71	; 0x47
 800a5ae:	6878      	ldr	r0, [r7, #4]
 800a5b0:	f001 fa14 	bl	800b9dc <VL53L0X_WrByte>
 800a5b4:	4603      	mov	r3, r0
 800a5b6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);

			Status |= VL53L0X_WrByte(Dev,
 800a5ba:	2203      	movs	r2, #3
 800a5bc:	2132      	movs	r1, #50	; 0x32
 800a5be:	6878      	ldr	r0, [r7, #4]
 800a5c0:	f001 fa0c 	bl	800b9dc <VL53L0X_WrByte>
 800a5c4:	4603      	mov	r3, r0
 800a5c6:	461a      	mov	r2, r3
 800a5c8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a5cc:	4313      	orrs	r3, r2
 800a5ce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x03);
			Status |= VL53L0X_WrByte(Dev,
 800a5d2:	2208      	movs	r2, #8
 800a5d4:	2130      	movs	r1, #48	; 0x30
 800a5d6:	6878      	ldr	r0, [r7, #4]
 800a5d8:	f001 fa00 	bl	800b9dc <VL53L0X_WrByte>
 800a5dc:	4603      	mov	r3, r0
 800a5de:	461a      	mov	r2, r3
 800a5e0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a5e4:	4313      	orrs	r3, r2
 800a5e6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x08);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 800a5ea:	2201      	movs	r2, #1
 800a5ec:	21ff      	movs	r1, #255	; 0xff
 800a5ee:	6878      	ldr	r0, [r7, #4]
 800a5f0:	f001 f9f4 	bl	800b9dc <VL53L0X_WrByte>
 800a5f4:	4603      	mov	r3, r0
 800a5f6:	461a      	mov	r2, r3
 800a5f8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a5fc:	4313      	orrs	r3, r2
 800a5fe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Status |= VL53L0X_WrByte(Dev,
 800a602:	2220      	movs	r2, #32
 800a604:	2130      	movs	r1, #48	; 0x30
 800a606:	6878      	ldr	r0, [r7, #4]
 800a608:	f001 f9e8 	bl	800b9dc <VL53L0X_WrByte>
 800a60c:	4603      	mov	r3, r0
 800a60e:	461a      	mov	r2, r3
 800a610:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a614:	4313      	orrs	r3, r2
 800a616:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x20);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 800a61a:	2200      	movs	r2, #0
 800a61c:	21ff      	movs	r1, #255	; 0xff
 800a61e:	6878      	ldr	r0, [r7, #4]
 800a620:	f001 f9dc 	bl	800b9dc <VL53L0X_WrByte>
 800a624:	4603      	mov	r3, r0
 800a626:	461a      	mov	r2, r3
 800a628:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a62c:	4313      	orrs	r3, r2
 800a62e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800a632:	e04e      	b.n	800a6d2 <VL53L0X_set_vcsel_pulse_period+0x3c4>
		} else if (VCSELPulsePeriodPCLK == 14) {
 800a634:	78bb      	ldrb	r3, [r7, #2]
 800a636:	2b0e      	cmp	r3, #14
 800a638:	d14b      	bne.n	800a6d2 <VL53L0X_set_vcsel_pulse_period+0x3c4>

			Status = VL53L0X_WrByte(Dev,
 800a63a:	2248      	movs	r2, #72	; 0x48
 800a63c:	2148      	movs	r1, #72	; 0x48
 800a63e:	6878      	ldr	r0, [r7, #4]
 800a640:	f001 f9cc 	bl	800b9dc <VL53L0X_WrByte>
 800a644:	4603      	mov	r3, r0
 800a646:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x048);
			Status = VL53L0X_WrByte(Dev,
 800a64a:	2208      	movs	r2, #8
 800a64c:	2147      	movs	r1, #71	; 0x47
 800a64e:	6878      	ldr	r0, [r7, #4]
 800a650:	f001 f9c4 	bl	800b9dc <VL53L0X_WrByte>
 800a654:	4603      	mov	r3, r0
 800a656:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);

			Status |= VL53L0X_WrByte(Dev,
 800a65a:	2203      	movs	r2, #3
 800a65c:	2132      	movs	r1, #50	; 0x32
 800a65e:	6878      	ldr	r0, [r7, #4]
 800a660:	f001 f9bc 	bl	800b9dc <VL53L0X_WrByte>
 800a664:	4603      	mov	r3, r0
 800a666:	461a      	mov	r2, r3
 800a668:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a66c:	4313      	orrs	r3, r2
 800a66e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x03);
			Status |= VL53L0X_WrByte(Dev,
 800a672:	2207      	movs	r2, #7
 800a674:	2130      	movs	r1, #48	; 0x30
 800a676:	6878      	ldr	r0, [r7, #4]
 800a678:	f001 f9b0 	bl	800b9dc <VL53L0X_WrByte>
 800a67c:	4603      	mov	r3, r0
 800a67e:	461a      	mov	r2, r3
 800a680:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a684:	4313      	orrs	r3, r2
 800a686:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x07);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 800a68a:	2201      	movs	r2, #1
 800a68c:	21ff      	movs	r1, #255	; 0xff
 800a68e:	6878      	ldr	r0, [r7, #4]
 800a690:	f001 f9a4 	bl	800b9dc <VL53L0X_WrByte>
 800a694:	4603      	mov	r3, r0
 800a696:	461a      	mov	r2, r3
 800a698:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a69c:	4313      	orrs	r3, r2
 800a69e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Status |= VL53L0X_WrByte(Dev,
 800a6a2:	2220      	movs	r2, #32
 800a6a4:	2130      	movs	r1, #48	; 0x30
 800a6a6:	6878      	ldr	r0, [r7, #4]
 800a6a8:	f001 f998 	bl	800b9dc <VL53L0X_WrByte>
 800a6ac:	4603      	mov	r3, r0
 800a6ae:	461a      	mov	r2, r3
 800a6b0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a6b4:	4313      	orrs	r3, r2
 800a6b6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x20);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 800a6ba:	2200      	movs	r2, #0
 800a6bc:	21ff      	movs	r1, #255	; 0xff
 800a6be:	6878      	ldr	r0, [r7, #4]
 800a6c0:	f001 f98c 	bl	800b9dc <VL53L0X_WrByte>
 800a6c4:	4603      	mov	r3, r0
 800a6c6:	461a      	mov	r2, r3
 800a6c8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a6cc:	4313      	orrs	r3, r2
 800a6ce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}


	/* Re-calculate and apply timeouts, in macro periods */

	if (Status == VL53L0X_ERROR_NONE) {
 800a6d2:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a6d6:	2b00      	cmp	r3, #0
 800a6d8:	d17f      	bne.n	800a7da <VL53L0X_set_vcsel_pulse_period+0x4cc>
		vcsel_period_reg = VL53L0X_encode_vcsel_period((uint8_t)
 800a6da:	78bb      	ldrb	r3, [r7, #2]
 800a6dc:	4618      	mov	r0, r3
 800a6de:	f7fe fe38 	bl	8009352 <VL53L0X_encode_vcsel_period>
 800a6e2:	4603      	mov	r3, r0
 800a6e4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
		* using the new VCSEL period.
		*
		* For the MSRC timeout, the same applies - this timeout being
		* dependant on the pre-range vcsel period.
		*/
		switch (VcselPeriodType) {
 800a6e8:	78fb      	ldrb	r3, [r7, #3]
 800a6ea:	2b00      	cmp	r3, #0
 800a6ec:	d002      	beq.n	800a6f4 <VL53L0X_set_vcsel_pulse_period+0x3e6>
 800a6ee:	2b01      	cmp	r3, #1
 800a6f0:	d045      	beq.n	800a77e <VL53L0X_set_vcsel_pulse_period+0x470>
 800a6f2:	e06e      	b.n	800a7d2 <VL53L0X_set_vcsel_pulse_period+0x4c4>
		case VL53L0X_VCSEL_PERIOD_PRE_RANGE:
			Status = get_sequence_step_timeout(Dev,
 800a6f4:	f107 0314 	add.w	r3, r7, #20
 800a6f8:	461a      	mov	r2, r3
 800a6fa:	2103      	movs	r1, #3
 800a6fc:	6878      	ldr	r0, [r7, #4]
 800a6fe:	f7ff fc33 	bl	8009f68 <get_sequence_step_timeout>
 800a702:	4603      	mov	r3, r0
 800a704:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_SEQUENCESTEP_PRE_RANGE,
				&PreRangeTimeoutMicroSeconds);

			if (Status == VL53L0X_ERROR_NONE)
 800a708:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a70c:	2b00      	cmp	r3, #0
 800a70e:	d109      	bne.n	800a724 <VL53L0X_set_vcsel_pulse_period+0x416>
				Status = get_sequence_step_timeout(Dev,
 800a710:	f107 0310 	add.w	r3, r7, #16
 800a714:	461a      	mov	r2, r3
 800a716:	2102      	movs	r1, #2
 800a718:	6878      	ldr	r0, [r7, #4]
 800a71a:	f7ff fc25 	bl	8009f68 <get_sequence_step_timeout>
 800a71e:	4603      	mov	r3, r0
 800a720:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_SEQUENCESTEP_MSRC,
					&MsrcTimeoutMicroSeconds);

			if (Status == VL53L0X_ERROR_NONE)
 800a724:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a728:	2b00      	cmp	r3, #0
 800a72a:	d109      	bne.n	800a740 <VL53L0X_set_vcsel_pulse_period+0x432>
				Status = VL53L0X_WrByte(Dev,
 800a72c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800a730:	461a      	mov	r2, r3
 800a732:	2150      	movs	r1, #80	; 0x50
 800a734:	6878      	ldr	r0, [r7, #4]
 800a736:	f001 f951 	bl	800b9dc <VL53L0X_WrByte>
 800a73a:	4603      	mov	r3, r0
 800a73c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VCSEL_PERIOD,
					vcsel_period_reg);


			if (Status == VL53L0X_ERROR_NONE)
 800a740:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a744:	2b00      	cmp	r3, #0
 800a746:	d108      	bne.n	800a75a <VL53L0X_set_vcsel_pulse_period+0x44c>
				Status = set_sequence_step_timeout(Dev,
 800a748:	697b      	ldr	r3, [r7, #20]
 800a74a:	461a      	mov	r2, r3
 800a74c:	2103      	movs	r1, #3
 800a74e:	6878      	ldr	r0, [r7, #4]
 800a750:	f7ff fceb 	bl	800a12a <set_sequence_step_timeout>
 800a754:	4603      	mov	r3, r0
 800a756:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_SEQUENCESTEP_PRE_RANGE,
					PreRangeTimeoutMicroSeconds);


			if (Status == VL53L0X_ERROR_NONE)
 800a75a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a75e:	2b00      	cmp	r3, #0
 800a760:	d108      	bne.n	800a774 <VL53L0X_set_vcsel_pulse_period+0x466>
				Status = set_sequence_step_timeout(Dev,
 800a762:	693b      	ldr	r3, [r7, #16]
 800a764:	461a      	mov	r2, r3
 800a766:	2102      	movs	r1, #2
 800a768:	6878      	ldr	r0, [r7, #4]
 800a76a:	f7ff fcde 	bl	800a12a <set_sequence_step_timeout>
 800a76e:	4603      	mov	r3, r0
 800a770:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_SEQUENCESTEP_MSRC,
					MsrcTimeoutMicroSeconds);

			VL53L0X_SETDEVICESPECIFICPARAMETER(
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	78ba      	ldrb	r2, [r7, #2]
 800a778:	f883 20e8 	strb.w	r2, [r3, #232]	; 0xe8
				Dev,
				PreRangeVcselPulsePeriod,
				VCSELPulsePeriodPCLK);
			break;
 800a77c:	e02e      	b.n	800a7dc <VL53L0X_set_vcsel_pulse_period+0x4ce>
		case VL53L0X_VCSEL_PERIOD_FINAL_RANGE:
			Status = get_sequence_step_timeout(Dev,
 800a77e:	f107 0318 	add.w	r3, r7, #24
 800a782:	461a      	mov	r2, r3
 800a784:	2104      	movs	r1, #4
 800a786:	6878      	ldr	r0, [r7, #4]
 800a788:	f7ff fbee 	bl	8009f68 <get_sequence_step_timeout>
 800a78c:	4603      	mov	r3, r0
 800a78e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_SEQUENCESTEP_FINAL_RANGE,
				&FinalRangeTimeoutMicroSeconds);

			if (Status == VL53L0X_ERROR_NONE)
 800a792:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a796:	2b00      	cmp	r3, #0
 800a798:	d109      	bne.n	800a7ae <VL53L0X_set_vcsel_pulse_period+0x4a0>
				Status = VL53L0X_WrByte(Dev,
 800a79a:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800a79e:	461a      	mov	r2, r3
 800a7a0:	2170      	movs	r1, #112	; 0x70
 800a7a2:	6878      	ldr	r0, [r7, #4]
 800a7a4:	f001 f91a 	bl	800b9dc <VL53L0X_WrByte>
 800a7a8:	4603      	mov	r3, r0
 800a7aa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VCSEL_PERIOD,
					vcsel_period_reg);


			if (Status == VL53L0X_ERROR_NONE)
 800a7ae:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a7b2:	2b00      	cmp	r3, #0
 800a7b4:	d108      	bne.n	800a7c8 <VL53L0X_set_vcsel_pulse_period+0x4ba>
				Status = set_sequence_step_timeout(Dev,
 800a7b6:	69bb      	ldr	r3, [r7, #24]
 800a7b8:	461a      	mov	r2, r3
 800a7ba:	2104      	movs	r1, #4
 800a7bc:	6878      	ldr	r0, [r7, #4]
 800a7be:	f7ff fcb4 	bl	800a12a <set_sequence_step_timeout>
 800a7c2:	4603      	mov	r3, r0
 800a7c4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_SEQUENCESTEP_FINAL_RANGE,
					FinalRangeTimeoutMicroSeconds);

			VL53L0X_SETDEVICESPECIFICPARAMETER(
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	78ba      	ldrb	r2, [r7, #2]
 800a7cc:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
				Dev,
				FinalRangeVcselPulsePeriod,
				VCSELPulsePeriodPCLK);
			break;
 800a7d0:	e004      	b.n	800a7dc <VL53L0X_set_vcsel_pulse_period+0x4ce>
		default:
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 800a7d2:	23fc      	movs	r3, #252	; 0xfc
 800a7d4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800a7d8:	e000      	b.n	800a7dc <VL53L0X_set_vcsel_pulse_period+0x4ce>
		}
	}
 800a7da:	bf00      	nop

	/* Finally, the timing budget must be re-applied */
	if (Status == VL53L0X_ERROR_NONE) {
 800a7dc:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a7e0:	2b00      	cmp	r3, #0
 800a7e2:	d109      	bne.n	800a7f8 <VL53L0X_set_vcsel_pulse_period+0x4ea>
		VL53L0X_GETPARAMETERFIELD(Dev,
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	695b      	ldr	r3, [r3, #20]
 800a7e8:	61fb      	str	r3, [r7, #28]
			MeasurementTimingBudgetMicroSeconds,
			MeasurementTimingBudgetMicroSeconds);

		Status = VL53L0X_SetMeasurementTimingBudgetMicroSeconds(Dev,
 800a7ea:	69f9      	ldr	r1, [r7, #28]
 800a7ec:	6878      	ldr	r0, [r7, #4]
 800a7ee:	f7fc fded 	bl	80073cc <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>
 800a7f2:	4603      	mov	r3, r0
 800a7f4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	/* Perform the phase calibration. This is needed after changing on
	 * vcsel period.
	 * get_data_enable = 0, restore_config = 1 */
	if (Status == VL53L0X_ERROR_NONE)
 800a7f8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a7fc:	2b00      	cmp	r3, #0
 800a7fe:	d109      	bne.n	800a814 <VL53L0X_set_vcsel_pulse_period+0x506>
		Status = VL53L0X_perform_phase_calibration(
 800a800:	f107 010f 	add.w	r1, r7, #15
 800a804:	2301      	movs	r3, #1
 800a806:	2200      	movs	r2, #0
 800a808:	6878      	ldr	r0, [r7, #4]
 800a80a:	f7fe fcbd 	bl	8009188 <VL53L0X_perform_phase_calibration>
 800a80e:	4603      	mov	r3, r0
 800a810:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Dev, &PhaseCalInt, 0, 1);

	return Status;
 800a814:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800a818:	4618      	mov	r0, r3
 800a81a:	3728      	adds	r7, #40	; 0x28
 800a81c:	46bd      	mov	sp, r7
 800a81e:	bd80      	pop	{r7, pc}

0800a820 <VL53L0X_get_vcsel_pulse_period>:

VL53L0X_Error VL53L0X_get_vcsel_pulse_period(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t *pVCSELPulsePeriodPCLK)
{
 800a820:	b580      	push	{r7, lr}
 800a822:	b086      	sub	sp, #24
 800a824:	af00      	add	r7, sp, #0
 800a826:	60f8      	str	r0, [r7, #12]
 800a828:	460b      	mov	r3, r1
 800a82a:	607a      	str	r2, [r7, #4]
 800a82c:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a82e:	2300      	movs	r3, #0
 800a830:	75fb      	strb	r3, [r7, #23]
	uint8_t vcsel_period_reg;

	switch (VcselPeriodType) {
 800a832:	7afb      	ldrb	r3, [r7, #11]
 800a834:	2b00      	cmp	r3, #0
 800a836:	d002      	beq.n	800a83e <VL53L0X_get_vcsel_pulse_period+0x1e>
 800a838:	2b01      	cmp	r3, #1
 800a83a:	d00a      	beq.n	800a852 <VL53L0X_get_vcsel_pulse_period+0x32>
 800a83c:	e013      	b.n	800a866 <VL53L0X_get_vcsel_pulse_period+0x46>
	case VL53L0X_VCSEL_PERIOD_PRE_RANGE:
		Status = VL53L0X_RdByte(Dev,
 800a83e:	f107 0316 	add.w	r3, r7, #22
 800a842:	461a      	mov	r2, r3
 800a844:	2150      	movs	r1, #80	; 0x50
 800a846:	68f8      	ldr	r0, [r7, #12]
 800a848:	f001 f94a 	bl	800bae0 <VL53L0X_RdByte>
 800a84c:	4603      	mov	r3, r0
 800a84e:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_PRE_RANGE_CONFIG_VCSEL_PERIOD,
			&vcsel_period_reg);
	break;
 800a850:	e00b      	b.n	800a86a <VL53L0X_get_vcsel_pulse_period+0x4a>
	case VL53L0X_VCSEL_PERIOD_FINAL_RANGE:
		Status = VL53L0X_RdByte(Dev,
 800a852:	f107 0316 	add.w	r3, r7, #22
 800a856:	461a      	mov	r2, r3
 800a858:	2170      	movs	r1, #112	; 0x70
 800a85a:	68f8      	ldr	r0, [r7, #12]
 800a85c:	f001 f940 	bl	800bae0 <VL53L0X_RdByte>
 800a860:	4603      	mov	r3, r0
 800a862:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_FINAL_RANGE_CONFIG_VCSEL_PERIOD,
			&vcsel_period_reg);
	break;
 800a864:	e001      	b.n	800a86a <VL53L0X_get_vcsel_pulse_period+0x4a>
	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800a866:	23fc      	movs	r3, #252	; 0xfc
 800a868:	75fb      	strb	r3, [r7, #23]
	}

	if (Status == VL53L0X_ERROR_NONE)
 800a86a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a86e:	2b00      	cmp	r3, #0
 800a870:	d107      	bne.n	800a882 <VL53L0X_get_vcsel_pulse_period+0x62>
		*pVCSELPulsePeriodPCLK =
			VL53L0X_decode_vcsel_period(vcsel_period_reg);
 800a872:	7dbb      	ldrb	r3, [r7, #22]
 800a874:	4618      	mov	r0, r3
 800a876:	f7fe fd59 	bl	800932c <VL53L0X_decode_vcsel_period>
 800a87a:	4603      	mov	r3, r0
 800a87c:	461a      	mov	r2, r3
		*pVCSELPulsePeriodPCLK =
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	701a      	strb	r2, [r3, #0]

	return Status;
 800a882:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a886:	4618      	mov	r0, r3
 800a888:	3718      	adds	r7, #24
 800a88a:	46bd      	mov	sp, r7
 800a88c:	bd80      	pop	{r7, pc}

0800a88e <VL53L0X_set_measurement_timing_budget_micro_seconds>:



VL53L0X_Error VL53L0X_set_measurement_timing_budget_micro_seconds(VL53L0X_DEV Dev,
		uint32_t MeasurementTimingBudgetMicroSeconds)
{
 800a88e:	b580      	push	{r7, lr}
 800a890:	b092      	sub	sp, #72	; 0x48
 800a892:	af00      	add	r7, sp, #0
 800a894:	6078      	str	r0, [r7, #4]
 800a896:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a898:	2300      	movs	r3, #0
 800a89a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	uint32_t FinalRangeTimingBudgetMicroSeconds;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;
	uint32_t MsrcDccTccTimeoutMicroSeconds	= 2000;
 800a89e:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800a8a2:	613b      	str	r3, [r7, #16]
	uint32_t StartOverheadMicroSeconds		= 1910;
 800a8a4:	f240 7376 	movw	r3, #1910	; 0x776
 800a8a8:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint32_t EndOverheadMicroSeconds		= 960;
 800a8aa:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 800a8ae:	63bb      	str	r3, [r7, #56]	; 0x38
	uint32_t MsrcOverheadMicroSeconds		= 660;
 800a8b0:	f44f 7325 	mov.w	r3, #660	; 0x294
 800a8b4:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t TccOverheadMicroSeconds		= 590;
 800a8b6:	f240 234e 	movw	r3, #590	; 0x24e
 800a8ba:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t DssOverheadMicroSeconds		= 690;
 800a8bc:	f240 23b2 	movw	r3, #690	; 0x2b2
 800a8c0:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t PreRangeOverheadMicroSeconds	= 660;
 800a8c2:	f44f 7325 	mov.w	r3, #660	; 0x294
 800a8c6:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t FinalRangeOverheadMicroSeconds = 550;
 800a8c8:	f240 2326 	movw	r3, #550	; 0x226
 800a8cc:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t PreRangeTimeoutMicroSeconds	= 0;
 800a8ce:	2300      	movs	r3, #0
 800a8d0:	60fb      	str	r3, [r7, #12]
	uint32_t cMinTimingBudgetMicroSeconds	= 20000;
 800a8d2:	f644 6320 	movw	r3, #20000	; 0x4e20
 800a8d6:	623b      	str	r3, [r7, #32]
	uint32_t SubTimeout = 0;
 800a8d8:	2300      	movs	r3, #0
 800a8da:	61fb      	str	r3, [r7, #28]

	LOG_FUNCTION_START("");

	if (MeasurementTimingBudgetMicroSeconds
 800a8dc:	683a      	ldr	r2, [r7, #0]
 800a8de:	6a3b      	ldr	r3, [r7, #32]
 800a8e0:	429a      	cmp	r2, r3
 800a8e2:	d205      	bcs.n	800a8f0 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x62>
			< cMinTimingBudgetMicroSeconds) {
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800a8e4:	23fc      	movs	r3, #252	; 0xfc
 800a8e6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		return Status;
 800a8ea:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800a8ee:	e0aa      	b.n	800aa46 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>
	}

	FinalRangeTimingBudgetMicroSeconds =
		MeasurementTimingBudgetMicroSeconds -
		(StartOverheadMicroSeconds + EndOverheadMicroSeconds);
 800a8f0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800a8f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a8f4:	4413      	add	r3, r2
	FinalRangeTimingBudgetMicroSeconds =
 800a8f6:	683a      	ldr	r2, [r7, #0]
 800a8f8:	1ad3      	subs	r3, r2, r3
 800a8fa:	643b      	str	r3, [r7, #64]	; 0x40

	Status = VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 800a8fc:	f107 0314 	add.w	r3, r7, #20
 800a900:	4619      	mov	r1, r3
 800a902:	6878      	ldr	r0, [r7, #4]
 800a904:	f7fc feac 	bl	8007660 <VL53L0X_GetSequenceStepEnables>
 800a908:	4603      	mov	r3, r0
 800a90a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

	if (Status == VL53L0X_ERROR_NONE &&
 800a90e:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800a912:	2b00      	cmp	r3, #0
 800a914:	d15b      	bne.n	800a9ce <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
		(SchedulerSequenceSteps.TccOn  ||
 800a916:	7d3b      	ldrb	r3, [r7, #20]
	if (Status == VL53L0X_ERROR_NONE &&
 800a918:	2b00      	cmp	r3, #0
 800a91a:	d105      	bne.n	800a928 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x9a>
		SchedulerSequenceSteps.MsrcOn ||
 800a91c:	7d7b      	ldrb	r3, [r7, #21]
		(SchedulerSequenceSteps.TccOn  ||
 800a91e:	2b00      	cmp	r3, #0
 800a920:	d102      	bne.n	800a928 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x9a>
		SchedulerSequenceSteps.DssOn)) {
 800a922:	7dbb      	ldrb	r3, [r7, #22]
		SchedulerSequenceSteps.MsrcOn ||
 800a924:	2b00      	cmp	r3, #0
 800a926:	d052      	beq.n	800a9ce <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>

		/* TCC, MSRC and DSS all share the same timeout */
		Status = get_sequence_step_timeout(Dev,
 800a928:	f107 0310 	add.w	r3, r7, #16
 800a92c:	461a      	mov	r2, r3
 800a92e:	2102      	movs	r1, #2
 800a930:	6878      	ldr	r0, [r7, #4]
 800a932:	f7ff fb19 	bl	8009f68 <get_sequence_step_timeout>
 800a936:	4603      	mov	r3, r0
 800a938:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					&MsrcDccTccTimeoutMicroSeconds);

		/* Subtract the TCC, MSRC and DSS timeouts if they are
		 * enabled. */

		if (Status != VL53L0X_ERROR_NONE)
 800a93c:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800a940:	2b00      	cmp	r3, #0
 800a942:	d002      	beq.n	800a94a <VL53L0X_set_measurement_timing_budget_micro_seconds+0xbc>
			return Status;
 800a944:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800a948:	e07d      	b.n	800aa46 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>

		/* TCC */
		if (SchedulerSequenceSteps.TccOn) {
 800a94a:	7d3b      	ldrb	r3, [r7, #20]
 800a94c:	2b00      	cmp	r3, #0
 800a94e:	d00f      	beq.n	800a970 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xe2>

			SubTimeout = MsrcDccTccTimeoutMicroSeconds
				+ TccOverheadMicroSeconds;
 800a950:	693b      	ldr	r3, [r7, #16]
			SubTimeout = MsrcDccTccTimeoutMicroSeconds
 800a952:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a954:	4413      	add	r3, r2
 800a956:	61fb      	str	r3, [r7, #28]

			if (SubTimeout <
 800a958:	69fa      	ldr	r2, [r7, #28]
 800a95a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a95c:	429a      	cmp	r2, r3
 800a95e:	d204      	bcs.n	800a96a <VL53L0X_set_measurement_timing_budget_micro_seconds+0xdc>
				FinalRangeTimingBudgetMicroSeconds) {
				FinalRangeTimingBudgetMicroSeconds -=
 800a960:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a962:	69fb      	ldr	r3, [r7, #28]
 800a964:	1ad3      	subs	r3, r2, r3
 800a966:	643b      	str	r3, [r7, #64]	; 0x40
 800a968:	e002      	b.n	800a970 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xe2>
							SubTimeout;
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 800a96a:	23fc      	movs	r3, #252	; 0xfc
 800a96c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			}
		}

		if (Status != VL53L0X_ERROR_NONE) {
 800a970:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800a974:	2b00      	cmp	r3, #0
 800a976:	d002      	beq.n	800a97e <VL53L0X_set_measurement_timing_budget_micro_seconds+0xf0>
			LOG_FUNCTION_END(Status);
			return Status;
 800a978:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800a97c:	e063      	b.n	800aa46 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>
		}

		/* DSS */
		if (SchedulerSequenceSteps.DssOn) {
 800a97e:	7dbb      	ldrb	r3, [r7, #22]
 800a980:	2b00      	cmp	r3, #0
 800a982:	d011      	beq.n	800a9a8 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x11a>

			SubTimeout = 2 * (MsrcDccTccTimeoutMicroSeconds +
 800a984:	693a      	ldr	r2, [r7, #16]
 800a986:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a988:	4413      	add	r3, r2
 800a98a:	005b      	lsls	r3, r3, #1
 800a98c:	61fb      	str	r3, [r7, #28]
				DssOverheadMicroSeconds);

			if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 800a98e:	69fa      	ldr	r2, [r7, #28]
 800a990:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a992:	429a      	cmp	r2, r3
 800a994:	d204      	bcs.n	800a9a0 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x112>
				FinalRangeTimingBudgetMicroSeconds
							-= SubTimeout;
 800a996:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a998:	69fb      	ldr	r3, [r7, #28]
 800a99a:	1ad3      	subs	r3, r2, r3
 800a99c:	643b      	str	r3, [r7, #64]	; 0x40
 800a99e:	e016      	b.n	800a9ce <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 800a9a0:	23fc      	movs	r3, #252	; 0xfc
 800a9a2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800a9a6:	e012      	b.n	800a9ce <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			}
		} else if (SchedulerSequenceSteps.MsrcOn) {
 800a9a8:	7d7b      	ldrb	r3, [r7, #21]
 800a9aa:	2b00      	cmp	r3, #0
 800a9ac:	d00f      	beq.n	800a9ce <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			/* MSRC */
			SubTimeout = MsrcDccTccTimeoutMicroSeconds +
 800a9ae:	693b      	ldr	r3, [r7, #16]
 800a9b0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a9b2:	4413      	add	r3, r2
 800a9b4:	61fb      	str	r3, [r7, #28]
						MsrcOverheadMicroSeconds;

			if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 800a9b6:	69fa      	ldr	r2, [r7, #28]
 800a9b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a9ba:	429a      	cmp	r2, r3
 800a9bc:	d204      	bcs.n	800a9c8 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x13a>
				FinalRangeTimingBudgetMicroSeconds
							-= SubTimeout;
 800a9be:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a9c0:	69fb      	ldr	r3, [r7, #28]
 800a9c2:	1ad3      	subs	r3, r2, r3
 800a9c4:	643b      	str	r3, [r7, #64]	; 0x40
 800a9c6:	e002      	b.n	800a9ce <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 800a9c8:	23fc      	movs	r3, #252	; 0xfc
 800a9ca:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			}
		}

	}

	if (Status != VL53L0X_ERROR_NONE) {
 800a9ce:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800a9d2:	2b00      	cmp	r3, #0
 800a9d4:	d002      	beq.n	800a9dc <VL53L0X_set_measurement_timing_budget_micro_seconds+0x14e>
		LOG_FUNCTION_END(Status);
		return Status;
 800a9d6:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800a9da:	e034      	b.n	800aa46 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>
	}

	if (SchedulerSequenceSteps.PreRangeOn) {
 800a9dc:	7dfb      	ldrb	r3, [r7, #23]
 800a9de:	2b00      	cmp	r3, #0
 800a9e0:	d019      	beq.n	800aa16 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x188>

		/* Subtract the Pre-range timeout if enabled. */

		Status = get_sequence_step_timeout(Dev,
 800a9e2:	f107 030c 	add.w	r3, r7, #12
 800a9e6:	461a      	mov	r2, r3
 800a9e8:	2103      	movs	r1, #3
 800a9ea:	6878      	ldr	r0, [r7, #4]
 800a9ec:	f7ff fabc 	bl	8009f68 <get_sequence_step_timeout>
 800a9f0:	4603      	mov	r3, r0
 800a9f2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
				VL53L0X_SEQUENCESTEP_PRE_RANGE,
				&PreRangeTimeoutMicroSeconds);

		SubTimeout = PreRangeTimeoutMicroSeconds +
 800a9f6:	68fb      	ldr	r3, [r7, #12]
 800a9f8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a9fa:	4413      	add	r3, r2
 800a9fc:	61fb      	str	r3, [r7, #28]
				PreRangeOverheadMicroSeconds;

		if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 800a9fe:	69fa      	ldr	r2, [r7, #28]
 800aa00:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800aa02:	429a      	cmp	r2, r3
 800aa04:	d204      	bcs.n	800aa10 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x182>
			FinalRangeTimingBudgetMicroSeconds -= SubTimeout;
 800aa06:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800aa08:	69fb      	ldr	r3, [r7, #28]
 800aa0a:	1ad3      	subs	r3, r2, r3
 800aa0c:	643b      	str	r3, [r7, #64]	; 0x40
 800aa0e:	e002      	b.n	800aa16 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x188>
		} else {
			/* Requested timeout too big. */
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 800aa10:	23fc      	movs	r3, #252	; 0xfc
 800aa12:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		}
	}


	if (Status == VL53L0X_ERROR_NONE &&
 800aa16:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800aa1a:	2b00      	cmp	r3, #0
 800aa1c:	d111      	bne.n	800aa42 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b4>
		SchedulerSequenceSteps.FinalRangeOn) {
 800aa1e:	7e3b      	ldrb	r3, [r7, #24]
	if (Status == VL53L0X_ERROR_NONE &&
 800aa20:	2b00      	cmp	r3, #0
 800aa22:	d00e      	beq.n	800aa42 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b4>

		FinalRangeTimingBudgetMicroSeconds -=
 800aa24:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800aa26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa28:	1ad3      	subs	r3, r2, r3
 800aa2a:	643b      	str	r3, [r7, #64]	; 0x40
		 * budget and the sum of all other timeouts within the sequence.
		 * If there is no room for the final range timeout, then an error
		 * will be set. Otherwise the remaining time will be applied to
		 * the final range.
		 */
		Status = set_sequence_step_timeout(Dev,
 800aa2c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800aa2e:	2104      	movs	r1, #4
 800aa30:	6878      	ldr	r0, [r7, #4]
 800aa32:	f7ff fb7a 	bl	800a12a <set_sequence_step_timeout>
 800aa36:	4603      	mov	r3, r0
 800aa38:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			VL53L0X_SEQUENCESTEP_FINAL_RANGE,
			FinalRangeTimingBudgetMicroSeconds);

		VL53L0X_SETPARAMETERFIELD(Dev,
 800aa3c:	687b      	ldr	r3, [r7, #4]
 800aa3e:	683a      	ldr	r2, [r7, #0]
 800aa40:	615a      	str	r2, [r3, #20]
			MeasurementTimingBudgetMicroSeconds);
	}

	LOG_FUNCTION_END(Status);

	return Status;
 800aa42:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
}
 800aa46:	4618      	mov	r0, r3
 800aa48:	3748      	adds	r7, #72	; 0x48
 800aa4a:	46bd      	mov	sp, r7
 800aa4c:	bd80      	pop	{r7, pc}

0800aa4e <VL53L0X_get_measurement_timing_budget_micro_seconds>:

VL53L0X_Error VL53L0X_get_measurement_timing_budget_micro_seconds(VL53L0X_DEV Dev,
		uint32_t *pMeasurementTimingBudgetMicroSeconds)
{
 800aa4e:	b580      	push	{r7, lr}
 800aa50:	b090      	sub	sp, #64	; 0x40
 800aa52:	af00      	add	r7, sp, #0
 800aa54:	6078      	str	r0, [r7, #4]
 800aa56:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800aa58:	2300      	movs	r3, #0
 800aa5a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;
	uint32_t FinalRangeTimeoutMicroSeconds;
	uint32_t MsrcDccTccTimeoutMicroSeconds	= 2000;
 800aa5e:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800aa62:	613b      	str	r3, [r7, #16]
	uint32_t StartOverheadMicroSeconds		= 1910;
 800aa64:	f240 7376 	movw	r3, #1910	; 0x776
 800aa68:	63bb      	str	r3, [r7, #56]	; 0x38
	uint32_t EndOverheadMicroSeconds		= 960;
 800aa6a:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 800aa6e:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t MsrcOverheadMicroSeconds		= 660;
 800aa70:	f44f 7325 	mov.w	r3, #660	; 0x294
 800aa74:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t TccOverheadMicroSeconds		= 590;
 800aa76:	f240 234e 	movw	r3, #590	; 0x24e
 800aa7a:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t DssOverheadMicroSeconds		= 690;
 800aa7c:	f240 23b2 	movw	r3, #690	; 0x2b2
 800aa80:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t PreRangeOverheadMicroSeconds	= 660;
 800aa82:	f44f 7325 	mov.w	r3, #660	; 0x294
 800aa86:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t FinalRangeOverheadMicroSeconds = 550;
 800aa88:	f240 2326 	movw	r3, #550	; 0x226
 800aa8c:	623b      	str	r3, [r7, #32]
	uint32_t PreRangeTimeoutMicroSeconds	= 0;
 800aa8e:	2300      	movs	r3, #0
 800aa90:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");

	/* Start and end overhead times always present */
	*pMeasurementTimingBudgetMicroSeconds
		= StartOverheadMicroSeconds + EndOverheadMicroSeconds;
 800aa92:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800aa94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aa96:	441a      	add	r2, r3
 800aa98:	683b      	ldr	r3, [r7, #0]
 800aa9a:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 800aa9c:	f107 0318 	add.w	r3, r7, #24
 800aaa0:	4619      	mov	r1, r3
 800aaa2:	6878      	ldr	r0, [r7, #4]
 800aaa4:	f7fc fddc 	bl	8007660 <VL53L0X_GetSequenceStepEnables>
 800aaa8:	4603      	mov	r3, r0
 800aaaa:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

	if (Status != VL53L0X_ERROR_NONE) {
 800aaae:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800aab2:	2b00      	cmp	r3, #0
 800aab4:	d002      	beq.n	800aabc <VL53L0X_get_measurement_timing_budget_micro_seconds+0x6e>
		LOG_FUNCTION_END(Status);
		return Status;
 800aab6:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800aaba:	e075      	b.n	800aba8 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x15a>
	}


	if (SchedulerSequenceSteps.TccOn  ||
 800aabc:	7e3b      	ldrb	r3, [r7, #24]
 800aabe:	2b00      	cmp	r3, #0
 800aac0:	d105      	bne.n	800aace <VL53L0X_get_measurement_timing_budget_micro_seconds+0x80>
		SchedulerSequenceSteps.MsrcOn ||
 800aac2:	7e7b      	ldrb	r3, [r7, #25]
	if (SchedulerSequenceSteps.TccOn  ||
 800aac4:	2b00      	cmp	r3, #0
 800aac6:	d102      	bne.n	800aace <VL53L0X_get_measurement_timing_budget_micro_seconds+0x80>
		SchedulerSequenceSteps.DssOn) {
 800aac8:	7ebb      	ldrb	r3, [r7, #26]
		SchedulerSequenceSteps.MsrcOn ||
 800aaca:	2b00      	cmp	r3, #0
 800aacc:	d030      	beq.n	800ab30 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>

		Status = get_sequence_step_timeout(Dev,
 800aace:	f107 0310 	add.w	r3, r7, #16
 800aad2:	461a      	mov	r2, r3
 800aad4:	2102      	movs	r1, #2
 800aad6:	6878      	ldr	r0, [r7, #4]
 800aad8:	f7ff fa46 	bl	8009f68 <get_sequence_step_timeout>
 800aadc:	4603      	mov	r3, r0
 800aade:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_SEQUENCESTEP_MSRC,
				&MsrcDccTccTimeoutMicroSeconds);

		if (Status == VL53L0X_ERROR_NONE) {
 800aae2:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800aae6:	2b00      	cmp	r3, #0
 800aae8:	d122      	bne.n	800ab30 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
			if (SchedulerSequenceSteps.TccOn) {
 800aaea:	7e3b      	ldrb	r3, [r7, #24]
 800aaec:	2b00      	cmp	r3, #0
 800aaee:	d007      	beq.n	800ab00 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xb2>
				*pMeasurementTimingBudgetMicroSeconds +=
 800aaf0:	683b      	ldr	r3, [r7, #0]
 800aaf2:	681a      	ldr	r2, [r3, #0]
					MsrcDccTccTimeoutMicroSeconds +
 800aaf4:	6939      	ldr	r1, [r7, #16]
 800aaf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aaf8:	440b      	add	r3, r1
				*pMeasurementTimingBudgetMicroSeconds +=
 800aafa:	441a      	add	r2, r3
 800aafc:	683b      	ldr	r3, [r7, #0]
 800aafe:	601a      	str	r2, [r3, #0]
					TccOverheadMicroSeconds;
			}

			if (SchedulerSequenceSteps.DssOn) {
 800ab00:	7ebb      	ldrb	r3, [r7, #26]
 800ab02:	2b00      	cmp	r3, #0
 800ab04:	d009      	beq.n	800ab1a <VL53L0X_get_measurement_timing_budget_micro_seconds+0xcc>
				*pMeasurementTimingBudgetMicroSeconds +=
 800ab06:	683b      	ldr	r3, [r7, #0]
 800ab08:	681a      	ldr	r2, [r3, #0]
				2 * (MsrcDccTccTimeoutMicroSeconds +
 800ab0a:	6939      	ldr	r1, [r7, #16]
 800ab0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab0e:	440b      	add	r3, r1
 800ab10:	005b      	lsls	r3, r3, #1
				*pMeasurementTimingBudgetMicroSeconds +=
 800ab12:	441a      	add	r2, r3
 800ab14:	683b      	ldr	r3, [r7, #0]
 800ab16:	601a      	str	r2, [r3, #0]
 800ab18:	e00a      	b.n	800ab30 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
					DssOverheadMicroSeconds);
			} else if (SchedulerSequenceSteps.MsrcOn) {
 800ab1a:	7e7b      	ldrb	r3, [r7, #25]
 800ab1c:	2b00      	cmp	r3, #0
 800ab1e:	d007      	beq.n	800ab30 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
				*pMeasurementTimingBudgetMicroSeconds +=
 800ab20:	683b      	ldr	r3, [r7, #0]
 800ab22:	681a      	ldr	r2, [r3, #0]
					MsrcDccTccTimeoutMicroSeconds +
 800ab24:	6939      	ldr	r1, [r7, #16]
 800ab26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab28:	440b      	add	r3, r1
				*pMeasurementTimingBudgetMicroSeconds +=
 800ab2a:	441a      	add	r2, r3
 800ab2c:	683b      	ldr	r3, [r7, #0]
 800ab2e:	601a      	str	r2, [r3, #0]
					MsrcOverheadMicroSeconds;
			}
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800ab30:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800ab34:	2b00      	cmp	r3, #0
 800ab36:	d114      	bne.n	800ab62 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x114>
		if (SchedulerSequenceSteps.PreRangeOn) {
 800ab38:	7efb      	ldrb	r3, [r7, #27]
 800ab3a:	2b00      	cmp	r3, #0
 800ab3c:	d011      	beq.n	800ab62 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x114>
			Status = get_sequence_step_timeout(Dev,
 800ab3e:	f107 030c 	add.w	r3, r7, #12
 800ab42:	461a      	mov	r2, r3
 800ab44:	2103      	movs	r1, #3
 800ab46:	6878      	ldr	r0, [r7, #4]
 800ab48:	f7ff fa0e 	bl	8009f68 <get_sequence_step_timeout>
 800ab4c:	4603      	mov	r3, r0
 800ab4e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_SEQUENCESTEP_PRE_RANGE,
				&PreRangeTimeoutMicroSeconds);
			*pMeasurementTimingBudgetMicroSeconds +=
 800ab52:	683b      	ldr	r3, [r7, #0]
 800ab54:	681a      	ldr	r2, [r3, #0]
				PreRangeTimeoutMicroSeconds +
 800ab56:	68f9      	ldr	r1, [r7, #12]
 800ab58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab5a:	440b      	add	r3, r1
			*pMeasurementTimingBudgetMicroSeconds +=
 800ab5c:	441a      	add	r2, r3
 800ab5e:	683b      	ldr	r3, [r7, #0]
 800ab60:	601a      	str	r2, [r3, #0]
				PreRangeOverheadMicroSeconds;
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800ab62:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800ab66:	2b00      	cmp	r3, #0
 800ab68:	d114      	bne.n	800ab94 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x146>
		if (SchedulerSequenceSteps.FinalRangeOn) {
 800ab6a:	7f3b      	ldrb	r3, [r7, #28]
 800ab6c:	2b00      	cmp	r3, #0
 800ab6e:	d011      	beq.n	800ab94 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x146>
			Status = get_sequence_step_timeout(Dev,
 800ab70:	f107 0314 	add.w	r3, r7, #20
 800ab74:	461a      	mov	r2, r3
 800ab76:	2104      	movs	r1, #4
 800ab78:	6878      	ldr	r0, [r7, #4]
 800ab7a:	f7ff f9f5 	bl	8009f68 <get_sequence_step_timeout>
 800ab7e:	4603      	mov	r3, r0
 800ab80:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
					VL53L0X_SEQUENCESTEP_FINAL_RANGE,
					&FinalRangeTimeoutMicroSeconds);
			*pMeasurementTimingBudgetMicroSeconds +=
 800ab84:	683b      	ldr	r3, [r7, #0]
 800ab86:	681a      	ldr	r2, [r3, #0]
				(FinalRangeTimeoutMicroSeconds +
 800ab88:	6979      	ldr	r1, [r7, #20]
 800ab8a:	6a3b      	ldr	r3, [r7, #32]
 800ab8c:	440b      	add	r3, r1
			*pMeasurementTimingBudgetMicroSeconds +=
 800ab8e:	441a      	add	r2, r3
 800ab90:	683b      	ldr	r3, [r7, #0]
 800ab92:	601a      	str	r2, [r3, #0]
				FinalRangeOverheadMicroSeconds);
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800ab94:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800ab98:	2b00      	cmp	r3, #0
 800ab9a:	d103      	bne.n	800aba4 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x156>
		VL53L0X_SETPARAMETERFIELD(Dev,
 800ab9c:	683b      	ldr	r3, [r7, #0]
 800ab9e:	681a      	ldr	r2, [r3, #0]
 800aba0:	687b      	ldr	r3, [r7, #4]
 800aba2:	615a      	str	r2, [r3, #20]
			MeasurementTimingBudgetMicroSeconds,
			*pMeasurementTimingBudgetMicroSeconds);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800aba4:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 800aba8:	4618      	mov	r0, r3
 800abaa:	3740      	adds	r7, #64	; 0x40
 800abac:	46bd      	mov	sp, r7
 800abae:	bd80      	pop	{r7, pc}

0800abb0 <VL53L0X_load_tuning_settings>:



VL53L0X_Error VL53L0X_load_tuning_settings(VL53L0X_DEV Dev,
		uint8_t *pTuningSettingBuffer)
{
 800abb0:	b580      	push	{r7, lr}
 800abb2:	b088      	sub	sp, #32
 800abb4:	af00      	add	r7, sp, #0
 800abb6:	6078      	str	r0, [r7, #4]
 800abb8:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800abba:	2300      	movs	r3, #0
 800abbc:	77fb      	strb	r3, [r7, #31]
	uint8_t localBuffer[4]; /* max */
	uint16_t Temp16;

	LOG_FUNCTION_START("");

	Index = 0;
 800abbe:	2300      	movs	r3, #0
 800abc0:	617b      	str	r3, [r7, #20]

	while ((*(pTuningSettingBuffer + Index) != 0) &&
 800abc2:	e0c6      	b.n	800ad52 <VL53L0X_load_tuning_settings+0x1a2>
			(Status == VL53L0X_ERROR_NONE)) {
		NumberOfWrites = *(pTuningSettingBuffer + Index);
 800abc4:	697b      	ldr	r3, [r7, #20]
 800abc6:	683a      	ldr	r2, [r7, #0]
 800abc8:	4413      	add	r3, r2
 800abca:	781b      	ldrb	r3, [r3, #0]
 800abcc:	74fb      	strb	r3, [r7, #19]
		Index++;
 800abce:	697b      	ldr	r3, [r7, #20]
 800abd0:	3301      	adds	r3, #1
 800abd2:	617b      	str	r3, [r7, #20]
		if (NumberOfWrites == 0xFF) {
 800abd4:	7cfb      	ldrb	r3, [r7, #19]
 800abd6:	2bff      	cmp	r3, #255	; 0xff
 800abd8:	f040 808d 	bne.w	800acf6 <VL53L0X_load_tuning_settings+0x146>
			/* internal parameters */
			SelectParam = *(pTuningSettingBuffer + Index);
 800abdc:	697b      	ldr	r3, [r7, #20]
 800abde:	683a      	ldr	r2, [r7, #0]
 800abe0:	4413      	add	r3, r2
 800abe2:	781b      	ldrb	r3, [r3, #0]
 800abe4:	747b      	strb	r3, [r7, #17]
			Index++;
 800abe6:	697b      	ldr	r3, [r7, #20]
 800abe8:	3301      	adds	r3, #1
 800abea:	617b      	str	r3, [r7, #20]
			switch (SelectParam) {
 800abec:	7c7b      	ldrb	r3, [r7, #17]
 800abee:	2b03      	cmp	r3, #3
 800abf0:	d87e      	bhi.n	800acf0 <VL53L0X_load_tuning_settings+0x140>
 800abf2:	a201      	add	r2, pc, #4	; (adr r2, 800abf8 <VL53L0X_load_tuning_settings+0x48>)
 800abf4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800abf8:	0800ac09 	.word	0x0800ac09
 800abfc:	0800ac43 	.word	0x0800ac43
 800ac00:	0800ac7d 	.word	0x0800ac7d
 800ac04:	0800acb7 	.word	0x0800acb7
			case 0: /* uint16_t SigmaEstRefArray -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 800ac08:	697b      	ldr	r3, [r7, #20]
 800ac0a:	683a      	ldr	r2, [r7, #0]
 800ac0c:	4413      	add	r3, r2
 800ac0e:	781b      	ldrb	r3, [r3, #0]
 800ac10:	743b      	strb	r3, [r7, #16]
				Index++;
 800ac12:	697b      	ldr	r3, [r7, #20]
 800ac14:	3301      	adds	r3, #1
 800ac16:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 800ac18:	697b      	ldr	r3, [r7, #20]
 800ac1a:	683a      	ldr	r2, [r7, #0]
 800ac1c:	4413      	add	r3, r2
 800ac1e:	781b      	ldrb	r3, [r3, #0]
 800ac20:	73fb      	strb	r3, [r7, #15]
				Index++;
 800ac22:	697b      	ldr	r3, [r7, #20]
 800ac24:	3301      	adds	r3, #1
 800ac26:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 800ac28:	7c3b      	ldrb	r3, [r7, #16]
 800ac2a:	b29b      	uxth	r3, r3
 800ac2c:	021b      	lsls	r3, r3, #8
 800ac2e:	b29a      	uxth	r2, r3
 800ac30:	7bfb      	ldrb	r3, [r7, #15]
 800ac32:	b29b      	uxth	r3, r3
 800ac34:	4413      	add	r3, r2
 800ac36:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, SigmaEstRefArray, Temp16);
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	89ba      	ldrh	r2, [r7, #12]
 800ac3c:	f8a3 2134 	strh.w	r2, [r3, #308]	; 0x134
				break;
 800ac40:	e087      	b.n	800ad52 <VL53L0X_load_tuning_settings+0x1a2>
			case 1: /* uint16_t SigmaEstEffPulseWidth -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 800ac42:	697b      	ldr	r3, [r7, #20]
 800ac44:	683a      	ldr	r2, [r7, #0]
 800ac46:	4413      	add	r3, r2
 800ac48:	781b      	ldrb	r3, [r3, #0]
 800ac4a:	743b      	strb	r3, [r7, #16]
				Index++;
 800ac4c:	697b      	ldr	r3, [r7, #20]
 800ac4e:	3301      	adds	r3, #1
 800ac50:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 800ac52:	697b      	ldr	r3, [r7, #20]
 800ac54:	683a      	ldr	r2, [r7, #0]
 800ac56:	4413      	add	r3, r2
 800ac58:	781b      	ldrb	r3, [r3, #0]
 800ac5a:	73fb      	strb	r3, [r7, #15]
				Index++;
 800ac5c:	697b      	ldr	r3, [r7, #20]
 800ac5e:	3301      	adds	r3, #1
 800ac60:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 800ac62:	7c3b      	ldrb	r3, [r7, #16]
 800ac64:	b29b      	uxth	r3, r3
 800ac66:	021b      	lsls	r3, r3, #8
 800ac68:	b29a      	uxth	r2, r3
 800ac6a:	7bfb      	ldrb	r3, [r7, #15]
 800ac6c:	b29b      	uxth	r3, r3
 800ac6e:	4413      	add	r3, r2
 800ac70:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, SigmaEstEffPulseWidth,
 800ac72:	687b      	ldr	r3, [r7, #4]
 800ac74:	89ba      	ldrh	r2, [r7, #12]
 800ac76:	f8a3 2136 	strh.w	r2, [r3, #310]	; 0x136
					Temp16);
				break;
 800ac7a:	e06a      	b.n	800ad52 <VL53L0X_load_tuning_settings+0x1a2>
			case 2: /* uint16_t SigmaEstEffAmbWidth -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 800ac7c:	697b      	ldr	r3, [r7, #20]
 800ac7e:	683a      	ldr	r2, [r7, #0]
 800ac80:	4413      	add	r3, r2
 800ac82:	781b      	ldrb	r3, [r3, #0]
 800ac84:	743b      	strb	r3, [r7, #16]
				Index++;
 800ac86:	697b      	ldr	r3, [r7, #20]
 800ac88:	3301      	adds	r3, #1
 800ac8a:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 800ac8c:	697b      	ldr	r3, [r7, #20]
 800ac8e:	683a      	ldr	r2, [r7, #0]
 800ac90:	4413      	add	r3, r2
 800ac92:	781b      	ldrb	r3, [r3, #0]
 800ac94:	73fb      	strb	r3, [r7, #15]
				Index++;
 800ac96:	697b      	ldr	r3, [r7, #20]
 800ac98:	3301      	adds	r3, #1
 800ac9a:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 800ac9c:	7c3b      	ldrb	r3, [r7, #16]
 800ac9e:	b29b      	uxth	r3, r3
 800aca0:	021b      	lsls	r3, r3, #8
 800aca2:	b29a      	uxth	r2, r3
 800aca4:	7bfb      	ldrb	r3, [r7, #15]
 800aca6:	b29b      	uxth	r3, r3
 800aca8:	4413      	add	r3, r2
 800acaa:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, SigmaEstEffAmbWidth, Temp16);
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	89ba      	ldrh	r2, [r7, #12]
 800acb0:	f8a3 2138 	strh.w	r2, [r3, #312]	; 0x138
				break;
 800acb4:	e04d      	b.n	800ad52 <VL53L0X_load_tuning_settings+0x1a2>
			case 3: /* uint16_t targetRefRate -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 800acb6:	697b      	ldr	r3, [r7, #20]
 800acb8:	683a      	ldr	r2, [r7, #0]
 800acba:	4413      	add	r3, r2
 800acbc:	781b      	ldrb	r3, [r3, #0]
 800acbe:	743b      	strb	r3, [r7, #16]
				Index++;
 800acc0:	697b      	ldr	r3, [r7, #20]
 800acc2:	3301      	adds	r3, #1
 800acc4:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 800acc6:	697b      	ldr	r3, [r7, #20]
 800acc8:	683a      	ldr	r2, [r7, #0]
 800acca:	4413      	add	r3, r2
 800accc:	781b      	ldrb	r3, [r3, #0]
 800acce:	73fb      	strb	r3, [r7, #15]
				Index++;
 800acd0:	697b      	ldr	r3, [r7, #20]
 800acd2:	3301      	adds	r3, #1
 800acd4:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 800acd6:	7c3b      	ldrb	r3, [r7, #16]
 800acd8:	b29b      	uxth	r3, r3
 800acda:	021b      	lsls	r3, r3, #8
 800acdc:	b29a      	uxth	r2, r3
 800acde:	7bfb      	ldrb	r3, [r7, #15]
 800ace0:	b29b      	uxth	r3, r3
 800ace2:	4413      	add	r3, r2
 800ace4:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, targetRefRate, Temp16);
 800ace6:	687b      	ldr	r3, [r7, #4]
 800ace8:	89ba      	ldrh	r2, [r7, #12]
 800acea:	f8a3 213c 	strh.w	r2, [r3, #316]	; 0x13c
				break;
 800acee:	e030      	b.n	800ad52 <VL53L0X_load_tuning_settings+0x1a2>
			default: /* invalid parameter */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 800acf0:	23fc      	movs	r3, #252	; 0xfc
 800acf2:	77fb      	strb	r3, [r7, #31]
 800acf4:	e02d      	b.n	800ad52 <VL53L0X_load_tuning_settings+0x1a2>
			}

		} else if (NumberOfWrites <= 4) {
 800acf6:	7cfb      	ldrb	r3, [r7, #19]
 800acf8:	2b04      	cmp	r3, #4
 800acfa:	d828      	bhi.n	800ad4e <VL53L0X_load_tuning_settings+0x19e>
			Address = *(pTuningSettingBuffer + Index);
 800acfc:	697b      	ldr	r3, [r7, #20]
 800acfe:	683a      	ldr	r2, [r7, #0]
 800ad00:	4413      	add	r3, r2
 800ad02:	781b      	ldrb	r3, [r3, #0]
 800ad04:	74bb      	strb	r3, [r7, #18]
			Index++;
 800ad06:	697b      	ldr	r3, [r7, #20]
 800ad08:	3301      	adds	r3, #1
 800ad0a:	617b      	str	r3, [r7, #20]

			for (i = 0; i < NumberOfWrites; i++) {
 800ad0c:	2300      	movs	r3, #0
 800ad0e:	61bb      	str	r3, [r7, #24]
 800ad10:	e00f      	b.n	800ad32 <VL53L0X_load_tuning_settings+0x182>
				localBuffer[i] = *(pTuningSettingBuffer +
 800ad12:	697b      	ldr	r3, [r7, #20]
 800ad14:	683a      	ldr	r2, [r7, #0]
 800ad16:	4413      	add	r3, r2
 800ad18:	7819      	ldrb	r1, [r3, #0]
 800ad1a:	f107 0208 	add.w	r2, r7, #8
 800ad1e:	69bb      	ldr	r3, [r7, #24]
 800ad20:	4413      	add	r3, r2
 800ad22:	460a      	mov	r2, r1
 800ad24:	701a      	strb	r2, [r3, #0]
							Index);
				Index++;
 800ad26:	697b      	ldr	r3, [r7, #20]
 800ad28:	3301      	adds	r3, #1
 800ad2a:	617b      	str	r3, [r7, #20]
			for (i = 0; i < NumberOfWrites; i++) {
 800ad2c:	69bb      	ldr	r3, [r7, #24]
 800ad2e:	3301      	adds	r3, #1
 800ad30:	61bb      	str	r3, [r7, #24]
 800ad32:	7cfb      	ldrb	r3, [r7, #19]
 800ad34:	69ba      	ldr	r2, [r7, #24]
 800ad36:	429a      	cmp	r2, r3
 800ad38:	dbeb      	blt.n	800ad12 <VL53L0X_load_tuning_settings+0x162>
			}

			Status = VL53L0X_WriteMulti(Dev, Address, localBuffer,
 800ad3a:	7cfb      	ldrb	r3, [r7, #19]
 800ad3c:	f107 0208 	add.w	r2, r7, #8
 800ad40:	7cb9      	ldrb	r1, [r7, #18]
 800ad42:	6878      	ldr	r0, [r7, #4]
 800ad44:	f000 fdee 	bl	800b924 <VL53L0X_WriteMulti>
 800ad48:	4603      	mov	r3, r0
 800ad4a:	77fb      	strb	r3, [r7, #31]
 800ad4c:	e001      	b.n	800ad52 <VL53L0X_load_tuning_settings+0x1a2>
					NumberOfWrites);

		} else {
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 800ad4e:	23fc      	movs	r3, #252	; 0xfc
 800ad50:	77fb      	strb	r3, [r7, #31]
	while ((*(pTuningSettingBuffer + Index) != 0) &&
 800ad52:	697b      	ldr	r3, [r7, #20]
 800ad54:	683a      	ldr	r2, [r7, #0]
 800ad56:	4413      	add	r3, r2
 800ad58:	781b      	ldrb	r3, [r3, #0]
 800ad5a:	2b00      	cmp	r3, #0
 800ad5c:	d004      	beq.n	800ad68 <VL53L0X_load_tuning_settings+0x1b8>
 800ad5e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800ad62:	2b00      	cmp	r3, #0
 800ad64:	f43f af2e 	beq.w	800abc4 <VL53L0X_load_tuning_settings+0x14>
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800ad68:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800ad6c:	4618      	mov	r0, r3
 800ad6e:	3720      	adds	r7, #32
 800ad70:	46bd      	mov	sp, r7
 800ad72:	bd80      	pop	{r7, pc}

0800ad74 <VL53L0X_get_total_xtalk_rate>:

VL53L0X_Error VL53L0X_get_total_xtalk_rate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *ptotal_xtalk_rate_mcps)
{
 800ad74:	b580      	push	{r7, lr}
 800ad76:	b088      	sub	sp, #32
 800ad78:	af00      	add	r7, sp, #0
 800ad7a:	60f8      	str	r0, [r7, #12]
 800ad7c:	60b9      	str	r1, [r7, #8]
 800ad7e:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800ad80:	2300      	movs	r3, #0
 800ad82:	77fb      	strb	r3, [r7, #31]

	uint8_t xtalkCompEnable;
	FixPoint1616_t totalXtalkMegaCps;
	FixPoint1616_t xtalkPerSpadMegaCps;

	*ptotal_xtalk_rate_mcps = 0;
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	2200      	movs	r2, #0
 800ad88:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_GetXTalkCompensationEnable(Dev, &xtalkCompEnable);
 800ad8a:	f107 0313 	add.w	r3, r7, #19
 800ad8e:	4619      	mov	r1, r3
 800ad90:	68f8      	ldr	r0, [r7, #12]
 800ad92:	f7fc fcf1 	bl	8007778 <VL53L0X_GetXTalkCompensationEnable>
 800ad96:	4603      	mov	r3, r0
 800ad98:	77fb      	strb	r3, [r7, #31]
	if (Status == VL53L0X_ERROR_NONE) {
 800ad9a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800ad9e:	2b00      	cmp	r3, #0
 800ada0:	d111      	bne.n	800adc6 <VL53L0X_get_total_xtalk_rate+0x52>

		if (xtalkCompEnable) {
 800ada2:	7cfb      	ldrb	r3, [r7, #19]
 800ada4:	2b00      	cmp	r3, #0
 800ada6:	d00e      	beq.n	800adc6 <VL53L0X_get_total_xtalk_rate+0x52>

			VL53L0X_GETPARAMETERFIELD(
 800ada8:	68fb      	ldr	r3, [r7, #12]
 800adaa:	6a1b      	ldr	r3, [r3, #32]
 800adac:	61bb      	str	r3, [r7, #24]
				XTalkCompensationRateMegaCps,
				xtalkPerSpadMegaCps);

			/* FixPoint1616 * FixPoint 8:8 = FixPoint0824 */
			totalXtalkMegaCps =
				pRangingMeasurementData->EffectiveSpadRtnCount *
 800adae:	68bb      	ldr	r3, [r7, #8]
 800adb0:	8a9b      	ldrh	r3, [r3, #20]
 800adb2:	461a      	mov	r2, r3
			totalXtalkMegaCps =
 800adb4:	69bb      	ldr	r3, [r7, #24]
 800adb6:	fb02 f303 	mul.w	r3, r2, r3
 800adba:	617b      	str	r3, [r7, #20]
				xtalkPerSpadMegaCps;

			/* FixPoint0824 >> 8 = FixPoint1616 */
			*ptotal_xtalk_rate_mcps =
				(totalXtalkMegaCps + 0x80) >> 8;
 800adbc:	697b      	ldr	r3, [r7, #20]
 800adbe:	3380      	adds	r3, #128	; 0x80
 800adc0:	0a1a      	lsrs	r2, r3, #8
			*ptotal_xtalk_rate_mcps =
 800adc2:	687b      	ldr	r3, [r7, #4]
 800adc4:	601a      	str	r2, [r3, #0]
		}
	}

	return Status;
 800adc6:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800adca:	4618      	mov	r0, r3
 800adcc:	3720      	adds	r7, #32
 800adce:	46bd      	mov	sp, r7
 800add0:	bd80      	pop	{r7, pc}

0800add2 <VL53L0X_get_total_signal_rate>:

VL53L0X_Error VL53L0X_get_total_signal_rate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *ptotal_signal_rate_mcps)
{
 800add2:	b580      	push	{r7, lr}
 800add4:	b086      	sub	sp, #24
 800add6:	af00      	add	r7, sp, #0
 800add8:	60f8      	str	r0, [r7, #12]
 800adda:	60b9      	str	r1, [r7, #8]
 800addc:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800adde:	2300      	movs	r3, #0
 800ade0:	75fb      	strb	r3, [r7, #23]
	FixPoint1616_t totalXtalkMegaCps;

	LOG_FUNCTION_START("");

	*ptotal_signal_rate_mcps =
		pRangingMeasurementData->SignalRateRtnMegaCps;
 800ade2:	68bb      	ldr	r3, [r7, #8]
 800ade4:	68da      	ldr	r2, [r3, #12]
	*ptotal_signal_rate_mcps =
 800ade6:	687b      	ldr	r3, [r7, #4]
 800ade8:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_get_total_xtalk_rate(
 800adea:	f107 0310 	add.w	r3, r7, #16
 800adee:	461a      	mov	r2, r3
 800adf0:	68b9      	ldr	r1, [r7, #8]
 800adf2:	68f8      	ldr	r0, [r7, #12]
 800adf4:	f7ff ffbe 	bl	800ad74 <VL53L0X_get_total_xtalk_rate>
 800adf8:	4603      	mov	r3, r0
 800adfa:	75fb      	strb	r3, [r7, #23]
		Dev, pRangingMeasurementData, &totalXtalkMegaCps);

	if (Status == VL53L0X_ERROR_NONE)
 800adfc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800ae00:	2b00      	cmp	r3, #0
 800ae02:	d105      	bne.n	800ae10 <VL53L0X_get_total_signal_rate+0x3e>
		*ptotal_signal_rate_mcps += totalXtalkMegaCps;
 800ae04:	687b      	ldr	r3, [r7, #4]
 800ae06:	681a      	ldr	r2, [r3, #0]
 800ae08:	693b      	ldr	r3, [r7, #16]
 800ae0a:	441a      	add	r2, r3
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	601a      	str	r2, [r3, #0]

	return Status;
 800ae10:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800ae14:	4618      	mov	r0, r3
 800ae16:	3718      	adds	r7, #24
 800ae18:	46bd      	mov	sp, r7
 800ae1a:	bd80      	pop	{r7, pc}

0800ae1c <VL53L0X_calc_dmax>:
	FixPoint1616_t pwMult,
	uint32_t sigmaEstimateP1,
	FixPoint1616_t sigmaEstimateP2,
	uint32_t peakVcselDuration_us,
	uint32_t *pdmax_mm)
{
 800ae1c:	b580      	push	{r7, lr}
 800ae1e:	b09a      	sub	sp, #104	; 0x68
 800ae20:	af00      	add	r7, sp, #0
 800ae22:	60f8      	str	r0, [r7, #12]
 800ae24:	60b9      	str	r1, [r7, #8]
 800ae26:	607a      	str	r2, [r7, #4]
 800ae28:	603b      	str	r3, [r7, #0]
	const uint32_t cSigmaLimit		= 18;
 800ae2a:	2312      	movs	r3, #18
 800ae2c:	657b      	str	r3, [r7, #84]	; 0x54
	const FixPoint1616_t cSignalLimit	= 0x4000; /* 0.25 */
 800ae2e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800ae32:	653b      	str	r3, [r7, #80]	; 0x50
	const FixPoint1616_t cSigmaEstRef	= 0x00000042; /* 0.001 */
 800ae34:	2342      	movs	r3, #66	; 0x42
 800ae36:	64fb      	str	r3, [r7, #76]	; 0x4c
	const uint32_t cAmbEffWidthSigmaEst_ns = 6;
 800ae38:	2306      	movs	r3, #6
 800ae3a:	64bb      	str	r3, [r7, #72]	; 0x48
	const uint32_t cAmbEffWidthDMax_ns	   = 7;
 800ae3c:	2307      	movs	r3, #7
 800ae3e:	647b      	str	r3, [r7, #68]	; 0x44
	FixPoint1616_t dmaxAmbient;
	FixPoint1616_t dmaxDarkTmp;
	FixPoint1616_t sigmaEstP2Tmp;
	uint32_t signalRateTemp_mcps;

	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800ae40:	2300      	movs	r3, #0
 800ae42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

	LOG_FUNCTION_START("");

	dmaxCalRange_mm =
		PALDevDataGet(Dev, DmaxCalRangeMilliMeter);
 800ae46:	68fb      	ldr	r3, [r7, #12]
 800ae48:	f8b3 3154 	ldrh.w	r3, [r3, #340]	; 0x154
	dmaxCalRange_mm =
 800ae4c:	63fb      	str	r3, [r7, #60]	; 0x3c

	dmaxCalSignalRateRtn_mcps =
 800ae4e:	68fb      	ldr	r3, [r7, #12]
 800ae50:	f8d3 3158 	ldr.w	r3, [r3, #344]	; 0x158
 800ae54:	63bb      	str	r3, [r7, #56]	; 0x38
		PALDevDataGet(Dev, DmaxCalSignalRateRtnMegaCps);

	/* uint32 * FixPoint1616 = FixPoint1616 */
	SignalAt0mm = dmaxCalRange_mm * dmaxCalSignalRateRtn_mcps;
 800ae56:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ae58:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ae5a:	fb02 f303 	mul.w	r3, r2, r3
 800ae5e:	637b      	str	r3, [r7, #52]	; 0x34

	/* FixPoint1616 >> 8 = FixPoint2408 */
	SignalAt0mm = (SignalAt0mm + 0x80) >> 8;
 800ae60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ae62:	3380      	adds	r3, #128	; 0x80
 800ae64:	0a1b      	lsrs	r3, r3, #8
 800ae66:	637b      	str	r3, [r7, #52]	; 0x34
	SignalAt0mm *= dmaxCalRange_mm;
 800ae68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ae6a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800ae6c:	fb02 f303 	mul.w	r3, r2, r3
 800ae70:	637b      	str	r3, [r7, #52]	; 0x34

	minSignalNeeded_p1 = 0;
 800ae72:	2300      	movs	r3, #0
 800ae74:	667b      	str	r3, [r7, #100]	; 0x64
	if (totalCorrSignalRate_mcps > 0) {
 800ae76:	687b      	ldr	r3, [r7, #4]
 800ae78:	2b00      	cmp	r3, #0
 800ae7a:	d01a      	beq.n	800aeb2 <VL53L0X_calc_dmax+0x96>

		/* Shift by 10 bits to increase resolution prior to the
		 * division */
		signalRateTemp_mcps = totalSignalRate_mcps << 10;
 800ae7c:	68bb      	ldr	r3, [r7, #8]
 800ae7e:	029b      	lsls	r3, r3, #10
 800ae80:	633b      	str	r3, [r7, #48]	; 0x30

		/* Add rounding value prior to division */
		minSignalNeeded_p1 = signalRateTemp_mcps +
			(totalCorrSignalRate_mcps/2);
 800ae82:	687b      	ldr	r3, [r7, #4]
 800ae84:	085b      	lsrs	r3, r3, #1
		minSignalNeeded_p1 = signalRateTemp_mcps +
 800ae86:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ae88:	4413      	add	r3, r2
 800ae8a:	667b      	str	r3, [r7, #100]	; 0x64

		/* FixPoint0626/FixPoint1616 = FixPoint2210 */
		minSignalNeeded_p1 /= totalCorrSignalRate_mcps;
 800ae8c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800ae8e:	687b      	ldr	r3, [r7, #4]
 800ae90:	fbb2 f3f3 	udiv	r3, r2, r3
 800ae94:	667b      	str	r3, [r7, #100]	; 0x64

		/* Apply a factored version of the speed of light.
		 Correction to be applied at the end */
		minSignalNeeded_p1 *= 3;
 800ae96:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800ae98:	4613      	mov	r3, r2
 800ae9a:	005b      	lsls	r3, r3, #1
 800ae9c:	4413      	add	r3, r2
 800ae9e:	667b      	str	r3, [r7, #100]	; 0x64

		/* FixPoint2210 * FixPoint2210 = FixPoint1220 */
		minSignalNeeded_p1 *= minSignalNeeded_p1;
 800aea0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800aea2:	fb03 f303 	mul.w	r3, r3, r3
 800aea6:	667b      	str	r3, [r7, #100]	; 0x64

		/* FixPoint1220 >> 16 = FixPoint2804 */
		minSignalNeeded_p1 = (minSignalNeeded_p1 + 0x8000) >> 16;
 800aea8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800aeaa:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800aeae:	0c1b      	lsrs	r3, r3, #16
 800aeb0:	667b      	str	r3, [r7, #100]	; 0x64
	}

	minSignalNeeded_p2 = pwMult * sigmaEstimateP1;
 800aeb2:	683b      	ldr	r3, [r7, #0]
 800aeb4:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800aeb6:	fb02 f303 	mul.w	r3, r2, r3
 800aeba:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* FixPoint1616 >> 16 =	 uint32 */
	minSignalNeeded_p2 = (minSignalNeeded_p2 + 0x8000) >> 16;
 800aebc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aebe:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800aec2:	0c1b      	lsrs	r3, r3, #16
 800aec4:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* uint32 * uint32	=  uint32 */
	minSignalNeeded_p2 *= minSignalNeeded_p2;
 800aec6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aec8:	fb03 f303 	mul.w	r3, r3, r3
 800aecc:	62fb      	str	r3, [r7, #44]	; 0x2c
	/* Check sigmaEstimateP2
	 * If this value is too high there is not enough signal rate
	 * to calculate dmax value so set a suitable value to ensure
	 * a very small dmax.
	 */
	sigmaEstP2Tmp = (sigmaEstimateP2 + 0x8000) >> 16;
 800aece:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800aed0:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800aed4:	0c1b      	lsrs	r3, r3, #16
 800aed6:	62bb      	str	r3, [r7, #40]	; 0x28
	sigmaEstP2Tmp = (sigmaEstP2Tmp + cAmbEffWidthSigmaEst_ns/2)/
 800aed8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800aeda:	085a      	lsrs	r2, r3, #1
 800aedc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aede:	441a      	add	r2, r3
 800aee0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800aee2:	fbb2 f3f3 	udiv	r3, r2, r3
 800aee6:	62bb      	str	r3, [r7, #40]	; 0x28
		cAmbEffWidthSigmaEst_ns;
	sigmaEstP2Tmp *= cAmbEffWidthDMax_ns;
 800aee8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aeea:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800aeec:	fb02 f303 	mul.w	r3, r2, r3
 800aef0:	62bb      	str	r3, [r7, #40]	; 0x28

	if (sigmaEstP2Tmp > 0xffff) {
 800aef2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aef4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800aef8:	d302      	bcc.n	800af00 <VL53L0X_calc_dmax+0xe4>
		minSignalNeeded_p3 = 0xfff00000;
 800aefa:	4b54      	ldr	r3, [pc, #336]	; (800b04c <VL53L0X_calc_dmax+0x230>)
 800aefc:	663b      	str	r3, [r7, #96]	; 0x60
 800aefe:	e015      	b.n	800af2c <VL53L0X_calc_dmax+0x110>

		/* DMAX uses a different ambient width from sigma, so apply
		 * correction.
		 * Perform division before multiplication to prevent overflow.
		 */
		sigmaEstimateP2 = (sigmaEstimateP2 + cAmbEffWidthSigmaEst_ns/2)/
 800af00:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800af02:	085a      	lsrs	r2, r3, #1
 800af04:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800af06:	441a      	add	r2, r3
 800af08:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800af0a:	fbb2 f3f3 	udiv	r3, r2, r3
 800af0e:	677b      	str	r3, [r7, #116]	; 0x74
			cAmbEffWidthSigmaEst_ns;
		sigmaEstimateP2 *= cAmbEffWidthDMax_ns;
 800af10:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800af12:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800af14:	fb02 f303 	mul.w	r3, r2, r3
 800af18:	677b      	str	r3, [r7, #116]	; 0x74

		/* FixPoint1616 >> 16 = uint32 */
		minSignalNeeded_p3 = (sigmaEstimateP2 + 0x8000) >> 16;
 800af1a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800af1c:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800af20:	0c1b      	lsrs	r3, r3, #16
 800af22:	663b      	str	r3, [r7, #96]	; 0x60

		minSignalNeeded_p3 *= minSignalNeeded_p3;
 800af24:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800af26:	fb03 f303 	mul.w	r3, r3, r3
 800af2a:	663b      	str	r3, [r7, #96]	; 0x60

	}

	/* FixPoint1814 / uint32 = FixPoint1814 */
	sigmaLimitTmp = ((cSigmaLimit << 14) + 500) / 1000;
 800af2c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800af2e:	039b      	lsls	r3, r3, #14
 800af30:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800af34:	4a46      	ldr	r2, [pc, #280]	; (800b050 <VL53L0X_calc_dmax+0x234>)
 800af36:	fba2 2303 	umull	r2, r3, r2, r3
 800af3a:	099b      	lsrs	r3, r3, #6
 800af3c:	627b      	str	r3, [r7, #36]	; 0x24

	/* FixPoint1814 * FixPoint1814 = FixPoint3628 := FixPoint0428 */
	sigmaLimitTmp *= sigmaLimitTmp;
 800af3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af40:	fb03 f303 	mul.w	r3, r3, r3
 800af44:	627b      	str	r3, [r7, #36]	; 0x24

	/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
	sigmaEstSqTmp = cSigmaEstRef * cSigmaEstRef;
 800af46:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800af48:	fb03 f303 	mul.w	r3, r3, r3
 800af4c:	623b      	str	r3, [r7, #32]

	/* FixPoint3232 >> 4 = FixPoint0428 */
	sigmaEstSqTmp = (sigmaEstSqTmp + 0x08) >> 4;
 800af4e:	6a3b      	ldr	r3, [r7, #32]
 800af50:	3308      	adds	r3, #8
 800af52:	091b      	lsrs	r3, r3, #4
 800af54:	623b      	str	r3, [r7, #32]

	/* FixPoint0428 - FixPoint0428	= FixPoint0428 */
	sigmaLimitTmp -=  sigmaEstSqTmp;
 800af56:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800af58:	6a3b      	ldr	r3, [r7, #32]
 800af5a:	1ad3      	subs	r3, r2, r3
 800af5c:	627b      	str	r3, [r7, #36]	; 0x24

	/* uint32_t * FixPoint0428 = FixPoint0428 */
	minSignalNeeded_p4 = 4 * 12 * sigmaLimitTmp;
 800af5e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800af60:	4613      	mov	r3, r2
 800af62:	005b      	lsls	r3, r3, #1
 800af64:	4413      	add	r3, r2
 800af66:	011b      	lsls	r3, r3, #4
 800af68:	61fb      	str	r3, [r7, #28]

	/* FixPoint0428 >> 14 = FixPoint1814 */
	minSignalNeeded_p4 = (minSignalNeeded_p4 + 0x2000) >> 14;
 800af6a:	69fb      	ldr	r3, [r7, #28]
 800af6c:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800af70:	0b9b      	lsrs	r3, r3, #14
 800af72:	61fb      	str	r3, [r7, #28]

	/* uint32 + uint32 = uint32 */
	minSignalNeeded = (minSignalNeeded_p2 + minSignalNeeded_p3);
 800af74:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800af76:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800af78:	4413      	add	r3, r2
 800af7a:	61bb      	str	r3, [r7, #24]

	/* uint32 / uint32 = uint32 */
	minSignalNeeded += (peakVcselDuration_us/2);
 800af7c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800af7e:	085b      	lsrs	r3, r3, #1
 800af80:	69ba      	ldr	r2, [r7, #24]
 800af82:	4413      	add	r3, r2
 800af84:	61bb      	str	r3, [r7, #24]
	minSignalNeeded /= peakVcselDuration_us;
 800af86:	69ba      	ldr	r2, [r7, #24]
 800af88:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800af8a:	fbb2 f3f3 	udiv	r3, r2, r3
 800af8e:	61bb      	str	r3, [r7, #24]

	/* uint32 << 14 = FixPoint1814 */
	minSignalNeeded <<= 14;
 800af90:	69bb      	ldr	r3, [r7, #24]
 800af92:	039b      	lsls	r3, r3, #14
 800af94:	61bb      	str	r3, [r7, #24]

	/* FixPoint1814 / FixPoint1814 = uint32 */
	minSignalNeeded += (minSignalNeeded_p4/2);
 800af96:	69fb      	ldr	r3, [r7, #28]
 800af98:	085b      	lsrs	r3, r3, #1
 800af9a:	69ba      	ldr	r2, [r7, #24]
 800af9c:	4413      	add	r3, r2
 800af9e:	61bb      	str	r3, [r7, #24]
	minSignalNeeded /= minSignalNeeded_p4;
 800afa0:	69ba      	ldr	r2, [r7, #24]
 800afa2:	69fb      	ldr	r3, [r7, #28]
 800afa4:	fbb2 f3f3 	udiv	r3, r2, r3
 800afa8:	61bb      	str	r3, [r7, #24]

	/* FixPoint3200 * FixPoint2804 := FixPoint2804*/
	minSignalNeeded *= minSignalNeeded_p1;
 800afaa:	69bb      	ldr	r3, [r7, #24]
 800afac:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800afae:	fb02 f303 	mul.w	r3, r2, r3
 800afb2:	61bb      	str	r3, [r7, #24]
	 * and 10E-22 on the denominator.
	 * We do this because 32bit fix point calculation can't
	 * handle the larger and smaller elements of this equation,
	 * i.e. speed of light and pulse widths.
	 */
	minSignalNeeded = (minSignalNeeded + 500) / 1000;
 800afb4:	69bb      	ldr	r3, [r7, #24]
 800afb6:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800afba:	4a25      	ldr	r2, [pc, #148]	; (800b050 <VL53L0X_calc_dmax+0x234>)
 800afbc:	fba2 2303 	umull	r2, r3, r2, r3
 800afc0:	099b      	lsrs	r3, r3, #6
 800afc2:	61bb      	str	r3, [r7, #24]
	minSignalNeeded <<= 4;
 800afc4:	69bb      	ldr	r3, [r7, #24]
 800afc6:	011b      	lsls	r3, r3, #4
 800afc8:	61bb      	str	r3, [r7, #24]

	minSignalNeeded = (minSignalNeeded + 500) / 1000;
 800afca:	69bb      	ldr	r3, [r7, #24]
 800afcc:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800afd0:	4a1f      	ldr	r2, [pc, #124]	; (800b050 <VL53L0X_calc_dmax+0x234>)
 800afd2:	fba2 2303 	umull	r2, r3, r2, r3
 800afd6:	099b      	lsrs	r3, r3, #6
 800afd8:	61bb      	str	r3, [r7, #24]

	/* FixPoint1616 >> 8 = FixPoint2408 */
	signalLimitTmp = (cSignalLimit + 0x80) >> 8;
 800afda:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800afdc:	3380      	adds	r3, #128	; 0x80
 800afde:	0a1b      	lsrs	r3, r3, #8
 800afe0:	617b      	str	r3, [r7, #20]

	/* FixPoint2408/FixPoint2408 = uint32 */
	if (signalLimitTmp != 0)
 800afe2:	697b      	ldr	r3, [r7, #20]
 800afe4:	2b00      	cmp	r3, #0
 800afe6:	d008      	beq.n	800affa <VL53L0X_calc_dmax+0x1de>
		dmaxDarkTmp = (SignalAt0mm + (signalLimitTmp / 2))
 800afe8:	697b      	ldr	r3, [r7, #20]
 800afea:	085a      	lsrs	r2, r3, #1
 800afec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800afee:	441a      	add	r2, r3
 800aff0:	697b      	ldr	r3, [r7, #20]
 800aff2:	fbb2 f3f3 	udiv	r3, r2, r3
 800aff6:	65bb      	str	r3, [r7, #88]	; 0x58
 800aff8:	e001      	b.n	800affe <VL53L0X_calc_dmax+0x1e2>
			/ signalLimitTmp;
	else
		dmaxDarkTmp = 0;
 800affa:	2300      	movs	r3, #0
 800affc:	65bb      	str	r3, [r7, #88]	; 0x58

	dmaxDark = VL53L0X_isqrt(dmaxDarkTmp);
 800affe:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800b000:	f7fe f9ba 	bl	8009378 <VL53L0X_isqrt>
 800b004:	6138      	str	r0, [r7, #16]

	/* FixPoint2408/FixPoint2408 = uint32 */
	if (minSignalNeeded != 0)
 800b006:	69bb      	ldr	r3, [r7, #24]
 800b008:	2b00      	cmp	r3, #0
 800b00a:	d008      	beq.n	800b01e <VL53L0X_calc_dmax+0x202>
		dmaxAmbient = (SignalAt0mm + minSignalNeeded/2)
 800b00c:	69bb      	ldr	r3, [r7, #24]
 800b00e:	085a      	lsrs	r2, r3, #1
 800b010:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b012:	441a      	add	r2, r3
 800b014:	69bb      	ldr	r3, [r7, #24]
 800b016:	fbb2 f3f3 	udiv	r3, r2, r3
 800b01a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b01c:	e001      	b.n	800b022 <VL53L0X_calc_dmax+0x206>
			/ minSignalNeeded;
	else
		dmaxAmbient = 0;
 800b01e:	2300      	movs	r3, #0
 800b020:	65fb      	str	r3, [r7, #92]	; 0x5c

	dmaxAmbient = VL53L0X_isqrt(dmaxAmbient);
 800b022:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 800b024:	f7fe f9a8 	bl	8009378 <VL53L0X_isqrt>
 800b028:	65f8      	str	r0, [r7, #92]	; 0x5c

	*pdmax_mm = dmaxDark;
 800b02a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800b02c:	693a      	ldr	r2, [r7, #16]
 800b02e:	601a      	str	r2, [r3, #0]
	if (dmaxDark > dmaxAmbient)
 800b030:	693a      	ldr	r2, [r7, #16]
 800b032:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b034:	429a      	cmp	r2, r3
 800b036:	d902      	bls.n	800b03e <VL53L0X_calc_dmax+0x222>
		*pdmax_mm = dmaxAmbient;
 800b038:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800b03a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800b03c:	601a      	str	r2, [r3, #0]

	LOG_FUNCTION_END(Status);

	return Status;
 800b03e:	f997 3043 	ldrsb.w	r3, [r7, #67]	; 0x43
}
 800b042:	4618      	mov	r0, r3
 800b044:	3768      	adds	r7, #104	; 0x68
 800b046:	46bd      	mov	sp, r7
 800b048:	bd80      	pop	{r7, pc}
 800b04a:	bf00      	nop
 800b04c:	fff00000 	.word	0xfff00000
 800b050:	10624dd3 	.word	0x10624dd3

0800b054 <VL53L0X_calc_sigma_estimate>:

VL53L0X_Error VL53L0X_calc_sigma_estimate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *pSigmaEstimate,
	uint32_t *pDmax_mm)
{
 800b054:	b580      	push	{r7, lr}
 800b056:	b0b4      	sub	sp, #208	; 0xd0
 800b058:	af04      	add	r7, sp, #16
 800b05a:	60f8      	str	r0, [r7, #12]
 800b05c:	60b9      	str	r1, [r7, #8]
 800b05e:	607a      	str	r2, [r7, #4]
 800b060:	603b      	str	r3, [r7, #0]
	/* Expressed in 100ths of a ns, i.e. centi-ns */
	const uint32_t cPulseEffectiveWidth_centi_ns   = 800;
 800b062:	f44f 7348 	mov.w	r3, #800	; 0x320
 800b066:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
	/* Expressed in 100ths of a ns, i.e. centi-ns */
	const uint32_t cAmbientEffectiveWidth_centi_ns = 600;
 800b06a:	f44f 7316 	mov.w	r3, #600	; 0x258
 800b06e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	const FixPoint1616_t cDfltFinalRangeIntegrationTimeMilliSecs	= 0x00190000; /* 25ms */
 800b072:	f44f 13c8 	mov.w	r3, #1638400	; 0x190000
 800b076:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
	const uint32_t cVcselPulseWidth_ps	= 4700; /* pico secs */
 800b07a:	f241 235c 	movw	r3, #4700	; 0x125c
 800b07e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	const FixPoint1616_t cSigmaEstMax	= 0x028F87AE;
 800b082:	4b9e      	ldr	r3, [pc, #632]	; (800b2fc <VL53L0X_calc_sigma_estimate+0x2a8>)
 800b084:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
	const FixPoint1616_t cSigmaEstRtnMax	= 0xF000;
 800b088:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 800b08c:	67fb      	str	r3, [r7, #124]	; 0x7c
	const FixPoint1616_t cAmbToSignalRatioMax = 0xF0000000/
 800b08e:	f04f 4270 	mov.w	r2, #4026531840	; 0xf0000000
 800b092:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b096:	fbb2 f3f3 	udiv	r3, r2, r3
 800b09a:	67bb      	str	r3, [r7, #120]	; 0x78
		cAmbientEffectiveWidth_centi_ns;
	/* Time Of Flight per mm (6.6 pico secs) */
	const FixPoint1616_t cTOF_per_mm_ps		= 0x0006999A;
 800b09c:	4b98      	ldr	r3, [pc, #608]	; (800b300 <VL53L0X_calc_sigma_estimate+0x2ac>)
 800b09e:	677b      	str	r3, [r7, #116]	; 0x74
	const uint32_t c16BitRoundingParam		= 0x00008000;
 800b0a0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b0a4:	673b      	str	r3, [r7, #112]	; 0x70
	const FixPoint1616_t cMaxXTalk_kcps		= 0x00320000;
 800b0a6:	f44f 1348 	mov.w	r3, #3276800	; 0x320000
 800b0aa:	66fb      	str	r3, [r7, #108]	; 0x6c
	const uint32_t cPllPeriod_ps			= 1655;
 800b0ac:	f240 6377 	movw	r3, #1655	; 0x677
 800b0b0:	66bb      	str	r3, [r7, #104]	; 0x68
	FixPoint1616_t xTalkCorrection;
	FixPoint1616_t ambientRate_kcps;
	FixPoint1616_t peakSignalRate_kcps;
	FixPoint1616_t xTalkCompRate_mcps;
	uint32_t xTalkCompRate_kcps;
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b0b2:	2300      	movs	r3, #0
 800b0b4:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
	 * Estimates the range sigma
	 */

	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationRateMegaCps,
 800b0b8:	68fb      	ldr	r3, [r7, #12]
 800b0ba:	6a1b      	ldr	r3, [r3, #32]
 800b0bc:	617b      	str	r3, [r7, #20]
	 * We work in kcps rather than mcps as this helps keep within the
	 * confines of the 32 Fix1616 type.
	 */

	ambientRate_kcps =
		(pRangingMeasurementData->AmbientRateRtnMegaCps * 1000) >> 16;
 800b0be:	68bb      	ldr	r3, [r7, #8]
 800b0c0:	691b      	ldr	r3, [r3, #16]
 800b0c2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800b0c6:	fb02 f303 	mul.w	r3, r2, r3
	ambientRate_kcps =
 800b0ca:	0c1b      	lsrs	r3, r3, #16
 800b0cc:	667b      	str	r3, [r7, #100]	; 0x64

	correctedSignalRate_mcps =
 800b0ce:	68bb      	ldr	r3, [r7, #8]
 800b0d0:	68db      	ldr	r3, [r3, #12]
 800b0d2:	663b      	str	r3, [r7, #96]	; 0x60
		pRangingMeasurementData->SignalRateRtnMegaCps;


	Status = VL53L0X_get_total_signal_rate(
 800b0d4:	f107 0310 	add.w	r3, r7, #16
 800b0d8:	461a      	mov	r2, r3
 800b0da:	68b9      	ldr	r1, [r7, #8]
 800b0dc:	68f8      	ldr	r0, [r7, #12]
 800b0de:	f7ff fe78 	bl	800add2 <VL53L0X_get_total_signal_rate>
 800b0e2:	4603      	mov	r3, r0
 800b0e4:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
		Dev, pRangingMeasurementData, &totalSignalRate_mcps);
	Status = VL53L0X_get_total_xtalk_rate(
 800b0e8:	f107 0314 	add.w	r3, r7, #20
 800b0ec:	461a      	mov	r2, r3
 800b0ee:	68b9      	ldr	r1, [r7, #8]
 800b0f0:	68f8      	ldr	r0, [r7, #12]
 800b0f2:	f7ff fe3f 	bl	800ad74 <VL53L0X_get_total_xtalk_rate>
 800b0f6:	4603      	mov	r3, r0
 800b0f8:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f


	/* Signal rate measurement provided by device is the
	 * peak signal rate, not average.
	 */
	peakSignalRate_kcps = (totalSignalRate_mcps * 1000);
 800b0fc:	693b      	ldr	r3, [r7, #16]
 800b0fe:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800b102:	fb02 f303 	mul.w	r3, r2, r3
 800b106:	65fb      	str	r3, [r7, #92]	; 0x5c
	peakSignalRate_kcps = (peakSignalRate_kcps + 0x8000) >> 16;
 800b108:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b10a:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800b10e:	0c1b      	lsrs	r3, r3, #16
 800b110:	65fb      	str	r3, [r7, #92]	; 0x5c

	xTalkCompRate_kcps = xTalkCompRate_mcps * 1000;
 800b112:	697b      	ldr	r3, [r7, #20]
 800b114:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800b118:	fb02 f303 	mul.w	r3, r2, r3
 800b11c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

	if (xTalkCompRate_kcps > cMaxXTalk_kcps)
 800b120:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 800b124:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b126:	429a      	cmp	r2, r3
 800b128:	d902      	bls.n	800b130 <VL53L0X_calc_sigma_estimate+0xdc>
		xTalkCompRate_kcps = cMaxXTalk_kcps;
 800b12a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b12c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

	if (Status == VL53L0X_ERROR_NONE) {
 800b130:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
 800b134:	2b00      	cmp	r3, #0
 800b136:	d168      	bne.n	800b20a <VL53L0X_calc_sigma_estimate+0x1b6>

		/* Calculate final range macro periods */
		finalRangeTimeoutMicroSecs = VL53L0X_GETDEVICESPECIFICPARAMETER(
 800b138:	68fb      	ldr	r3, [r7, #12]
 800b13a:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800b13e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
			Dev, FinalRangeTimeoutMicroSecs);

		finalRangeVcselPCLKS = VL53L0X_GETDEVICESPECIFICPARAMETER(
 800b142:	68fb      	ldr	r3, [r7, #12]
 800b144:	f893 30e0 	ldrb.w	r3, [r3, #224]	; 0xe0
 800b148:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
			Dev, FinalRangeVcselPulsePeriod);

		finalRangeMacroPCLKS = VL53L0X_calc_timeout_mclks(
 800b14c:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 800b150:	461a      	mov	r2, r3
 800b152:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
 800b156:	68f8      	ldr	r0, [r7, #12]
 800b158:	f7fe feb2 	bl	8009ec0 <VL53L0X_calc_timeout_mclks>
 800b15c:	6578      	str	r0, [r7, #84]	; 0x54
			Dev, finalRangeTimeoutMicroSecs, finalRangeVcselPCLKS);

		/* Calculate pre-range macro periods */
		preRangeTimeoutMicroSecs = VL53L0X_GETDEVICESPECIFICPARAMETER(
 800b15e:	68fb      	ldr	r3, [r7, #12]
 800b160:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800b164:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
			Dev, PreRangeTimeoutMicroSecs);

		preRangeVcselPCLKS = VL53L0X_GETDEVICESPECIFICPARAMETER(
 800b168:	68fb      	ldr	r3, [r7, #12]
 800b16a:	f893 30e8 	ldrb.w	r3, [r3, #232]	; 0xe8
 800b16e:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
			Dev, PreRangeVcselPulsePeriod);

		preRangeMacroPCLKS = VL53L0X_calc_timeout_mclks(
 800b172:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 800b176:	461a      	mov	r2, r3
 800b178:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
 800b17c:	68f8      	ldr	r0, [r7, #12]
 800b17e:	f7fe fe9f 	bl	8009ec0 <VL53L0X_calc_timeout_mclks>
 800b182:	64f8      	str	r0, [r7, #76]	; 0x4c
			Dev, preRangeTimeoutMicroSecs, preRangeVcselPCLKS);

		vcselWidth = 3;
 800b184:	2303      	movs	r3, #3
 800b186:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
		if (finalRangeVcselPCLKS == 8)
 800b18a:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 800b18e:	2b08      	cmp	r3, #8
 800b190:	d102      	bne.n	800b198 <VL53L0X_calc_sigma_estimate+0x144>
			vcselWidth = 2;
 800b192:	2302      	movs	r3, #2
 800b194:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98


		peakVcselDuration_us = vcselWidth * 2048 *
			(preRangeMacroPCLKS + finalRangeMacroPCLKS);
 800b198:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800b19a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b19c:	4413      	add	r3, r2
		peakVcselDuration_us = vcselWidth * 2048 *
 800b19e:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800b1a2:	fb02 f303 	mul.w	r3, r2, r3
 800b1a6:	02db      	lsls	r3, r3, #11
 800b1a8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
		peakVcselDuration_us = (peakVcselDuration_us + 500)/1000;
 800b1ac:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800b1b0:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800b1b4:	4a53      	ldr	r2, [pc, #332]	; (800b304 <VL53L0X_calc_sigma_estimate+0x2b0>)
 800b1b6:	fba2 2303 	umull	r2, r3, r2, r3
 800b1ba:	099b      	lsrs	r3, r3, #6
 800b1bc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
		peakVcselDuration_us *= cPllPeriod_ps;
 800b1c0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800b1c4:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800b1c6:	fb02 f303 	mul.w	r3, r2, r3
 800b1ca:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
		peakVcselDuration_us = (peakVcselDuration_us + 500)/1000;
 800b1ce:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800b1d2:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800b1d6:	4a4b      	ldr	r2, [pc, #300]	; (800b304 <VL53L0X_calc_sigma_estimate+0x2b0>)
 800b1d8:	fba2 2303 	umull	r2, r3, r2, r3
 800b1dc:	099b      	lsrs	r3, r3, #6
 800b1de:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

		/* Fix1616 >> 8 = Fix2408 */
		totalSignalRate_mcps = (totalSignalRate_mcps + 0x80) >> 8;
 800b1e2:	693b      	ldr	r3, [r7, #16]
 800b1e4:	3380      	adds	r3, #128	; 0x80
 800b1e6:	0a1b      	lsrs	r3, r3, #8
 800b1e8:	613b      	str	r3, [r7, #16]

		/* Fix2408 * uint32 = Fix2408 */
		vcselTotalEventsRtn = totalSignalRate_mcps *
 800b1ea:	693a      	ldr	r2, [r7, #16]
 800b1ec:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800b1f0:	fb02 f303 	mul.w	r3, r2, r3
 800b1f4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
			peakVcselDuration_us;

		/* Fix2408 >> 8 = uint32 */
		vcselTotalEventsRtn = (vcselTotalEventsRtn + 0x80) >> 8;
 800b1f8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800b1fc:	3380      	adds	r3, #128	; 0x80
 800b1fe:	0a1b      	lsrs	r3, r3, #8
 800b200:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

		/* Fix2408 << 8 = Fix1616 = */
		totalSignalRate_mcps <<= 8;
 800b204:	693b      	ldr	r3, [r7, #16]
 800b206:	021b      	lsls	r3, r3, #8
 800b208:	613b      	str	r3, [r7, #16]
	}

	if (Status != VL53L0X_ERROR_NONE) {
 800b20a:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
 800b20e:	2b00      	cmp	r3, #0
 800b210:	d002      	beq.n	800b218 <VL53L0X_calc_sigma_estimate+0x1c4>
		LOG_FUNCTION_END(Status);
		return Status;
 800b212:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
 800b216:	e15e      	b.n	800b4d6 <VL53L0X_calc_sigma_estimate+0x482>
	}

	if (peakSignalRate_kcps == 0) {
 800b218:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b21a:	2b00      	cmp	r3, #0
 800b21c:	d10c      	bne.n	800b238 <VL53L0X_calc_sigma_estimate+0x1e4>
		*pSigmaEstimate = cSigmaEstMax;
 800b21e:	687b      	ldr	r3, [r7, #4]
 800b220:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800b224:	601a      	str	r2, [r3, #0]
		PALDevDataSet(Dev, SigmaEstimate, cSigmaEstMax);
 800b226:	68fb      	ldr	r3, [r7, #12]
 800b228:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800b22c:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
		*pDmax_mm = 0;
 800b230:	683b      	ldr	r3, [r7, #0]
 800b232:	2200      	movs	r2, #0
 800b234:	601a      	str	r2, [r3, #0]
 800b236:	e14c      	b.n	800b4d2 <VL53L0X_calc_sigma_estimate+0x47e>
	} else {
		if (vcselTotalEventsRtn < 1)
 800b238:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800b23c:	2b00      	cmp	r3, #0
 800b23e:	d102      	bne.n	800b246 <VL53L0X_calc_sigma_estimate+0x1f2>
			vcselTotalEventsRtn = 1;
 800b240:	2301      	movs	r3, #1
 800b242:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

		sigmaEstimateP1 = cPulseEffectiveWidth_centi_ns;
 800b246:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800b24a:	64bb      	str	r3, [r7, #72]	; 0x48

		/* ((FixPoint1616 << 16)* uint32)/uint32 = FixPoint1616 */
		sigmaEstimateP2 = (ambientRate_kcps << 16)/peakSignalRate_kcps;
 800b24c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b24e:	041a      	lsls	r2, r3, #16
 800b250:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b252:	fbb2 f3f3 	udiv	r3, r2, r3
 800b256:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
		if (sigmaEstimateP2 > cAmbToSignalRatioMax) {
 800b25a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800b25e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b260:	429a      	cmp	r2, r3
 800b262:	d902      	bls.n	800b26a <VL53L0X_calc_sigma_estimate+0x216>
			/* Clip to prevent overflow. Will ensure safe
			 * max result. */
			sigmaEstimateP2 = cAmbToSignalRatioMax;
 800b264:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b266:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
		}
		sigmaEstimateP2 *= cAmbientEffectiveWidth_centi_ns;
 800b26a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800b26e:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800b272:	fb02 f303 	mul.w	r3, r2, r3
 800b276:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

		sigmaEstimateP3 = 2 * VL53L0X_isqrt(vcselTotalEventsRtn * 12);
 800b27a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800b27e:	4613      	mov	r3, r2
 800b280:	005b      	lsls	r3, r3, #1
 800b282:	4413      	add	r3, r2
 800b284:	009b      	lsls	r3, r3, #2
 800b286:	4618      	mov	r0, r3
 800b288:	f7fe f876 	bl	8009378 <VL53L0X_isqrt>
 800b28c:	4603      	mov	r3, r0
 800b28e:	005b      	lsls	r3, r3, #1
 800b290:	647b      	str	r3, [r7, #68]	; 0x44

		/* uint32 * FixPoint1616 = FixPoint1616 */
		deltaT_ps = pRangingMeasurementData->RangeMilliMeter *
 800b292:	68bb      	ldr	r3, [r7, #8]
 800b294:	891b      	ldrh	r3, [r3, #8]
 800b296:	461a      	mov	r2, r3
 800b298:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b29a:	fb02 f303 	mul.w	r3, r2, r3
 800b29e:	643b      	str	r3, [r7, #64]	; 0x40
		 * (uint32 << 16) - FixPoint1616 = FixPoint1616.
		 * Divide result by 1000 to convert to mcps.
		 * 500 is added to ensure rounding when integer division
		 * truncates.
		 */
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 800b2a0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b2a2:	041a      	lsls	r2, r3, #16
			2 * xTalkCompRate_kcps) + 500)/1000;
 800b2a4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800b2a8:	005b      	lsls	r3, r3, #1
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 800b2aa:	1ad3      	subs	r3, r2, r3
			2 * xTalkCompRate_kcps) + 500)/1000;
 800b2ac:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 800b2b0:	4a14      	ldr	r2, [pc, #80]	; (800b304 <VL53L0X_calc_sigma_estimate+0x2b0>)
 800b2b2:	fba2 2303 	umull	r2, r3, r2, r3
 800b2b6:	099b      	lsrs	r3, r3, #6
 800b2b8:	63fb      	str	r3, [r7, #60]	; 0x3c

		/* vcselRate + xtalkCompRate */
		diff2_mcps = ((peakSignalRate_kcps << 16) + 500)/1000;
 800b2ba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b2bc:	041b      	lsls	r3, r3, #16
 800b2be:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800b2c2:	4a10      	ldr	r2, [pc, #64]	; (800b304 <VL53L0X_calc_sigma_estimate+0x2b0>)
 800b2c4:	fba2 2303 	umull	r2, r3, r2, r3
 800b2c8:	099b      	lsrs	r3, r3, #6
 800b2ca:	63bb      	str	r3, [r7, #56]	; 0x38

		/* Shift by 8 bits to increase resolution prior to the
		 * division */
		diff1_mcps <<= 8;
 800b2cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b2ce:	021b      	lsls	r3, r3, #8
 800b2d0:	63fb      	str	r3, [r7, #60]	; 0x3c

		/* FixPoint0824/FixPoint1616 = FixPoint2408 */
		xTalkCorrection	 = abs(diff1_mcps/diff2_mcps);
 800b2d2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800b2d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b2d6:	fbb2 f3f3 	udiv	r3, r2, r3
 800b2da:	2b00      	cmp	r3, #0
 800b2dc:	bfb8      	it	lt
 800b2de:	425b      	neglt	r3, r3
 800b2e0:	637b      	str	r3, [r7, #52]	; 0x34

		/* FixPoint2408 << 8 = FixPoint1616 */
		xTalkCorrection <<= 8;
 800b2e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b2e4:	021b      	lsls	r3, r3, #8
 800b2e6:	637b      	str	r3, [r7, #52]	; 0x34

		if(pRangingMeasurementData->RangeStatus != 0){
 800b2e8:	68bb      	ldr	r3, [r7, #8]
 800b2ea:	7e1b      	ldrb	r3, [r3, #24]
 800b2ec:	2b00      	cmp	r3, #0
 800b2ee:	d00b      	beq.n	800b308 <VL53L0X_calc_sigma_estimate+0x2b4>
			pwMult = 1 << 16;
 800b2f0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800b2f4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800b2f8:	e033      	b.n	800b362 <VL53L0X_calc_sigma_estimate+0x30e>
 800b2fa:	bf00      	nop
 800b2fc:	028f87ae 	.word	0x028f87ae
 800b300:	0006999a 	.word	0x0006999a
 800b304:	10624dd3 	.word	0x10624dd3
		} else {
			/* FixPoint1616/uint32 = FixPoint1616 */
			pwMult = deltaT_ps/cVcselPulseWidth_ps; /* smaller than 1.0f */
 800b308:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b30a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800b30e:	fbb2 f3f3 	udiv	r3, r2, r3
 800b312:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			/*
			 * FixPoint1616 * FixPoint1616 = FixPoint3232, however both
			 * values are small enough such that32 bits will not be
			 * exceeded.
			 */
			pwMult *= ((1 << 16) - xTalkCorrection);
 800b316:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b318:	f5c3 3280 	rsb	r2, r3, #65536	; 0x10000
 800b31c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800b320:	fb02 f303 	mul.w	r3, r2, r3
 800b324:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

			/* (FixPoint3232 >> 16) = FixPoint1616 */
			pwMult =  (pwMult + c16BitRoundingParam) >> 16;
 800b328:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800b32c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b32e:	4413      	add	r3, r2
 800b330:	0c1b      	lsrs	r3, r3, #16
 800b332:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

			/* FixPoint1616 + FixPoint1616 = FixPoint1616 */
			pwMult += (1 << 16);
 800b336:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800b33a:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 800b33e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			/*
			 * At this point the value will be 1.xx, therefore if we square
			 * the value this will exceed 32 bits. To address this perform
			 * a single shift to the right before the multiplication.
			 */
			pwMult >>= 1;
 800b342:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800b346:	085b      	lsrs	r3, r3, #1
 800b348:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			/* FixPoint1715 * FixPoint1715 = FixPoint3430 */
			pwMult = pwMult * pwMult;
 800b34c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800b350:	fb03 f303 	mul.w	r3, r3, r3
 800b354:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

			/* (FixPoint3430 >> 14) = Fix1616 */
			pwMult >>= 14;
 800b358:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800b35c:	0b9b      	lsrs	r3, r3, #14
 800b35e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
		}

		/* FixPoint1616 * uint32 = FixPoint1616 */
		sqr1 = pwMult * sigmaEstimateP1;
 800b362:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800b366:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b368:	fb02 f303 	mul.w	r3, r2, r3
 800b36c:	633b      	str	r3, [r7, #48]	; 0x30

		/* (FixPoint1616 >> 16) = FixPoint3200 */
		sqr1 = (sqr1 + 0x8000) >> 16;
 800b36e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b370:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800b374:	0c1b      	lsrs	r3, r3, #16
 800b376:	633b      	str	r3, [r7, #48]	; 0x30

		/* FixPoint3200 * FixPoint3200 = FixPoint6400 */
		sqr1 *= sqr1;
 800b378:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b37a:	fb03 f303 	mul.w	r3, r3, r3
 800b37e:	633b      	str	r3, [r7, #48]	; 0x30

		sqr2 = sigmaEstimateP2;
 800b380:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800b384:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* (FixPoint1616 >> 16) = FixPoint3200 */
		sqr2 = (sqr2 + 0x8000) >> 16;
 800b386:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b388:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800b38c:	0c1b      	lsrs	r3, r3, #16
 800b38e:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* FixPoint3200 * FixPoint3200 = FixPoint6400 */
		sqr2 *= sqr2;
 800b390:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b392:	fb03 f303 	mul.w	r3, r3, r3
 800b396:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* FixPoint64000 + FixPoint6400 = FixPoint6400 */
		sqrSum = sqr1 + sqr2;
 800b398:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b39a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b39c:	4413      	add	r3, r2
 800b39e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* SQRT(FixPoin6400) = FixPoint3200 */
		sqrtResult_centi_ns = VL53L0X_isqrt(sqrSum);
 800b3a0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b3a2:	f7fd ffe9 	bl	8009378 <VL53L0X_isqrt>
 800b3a6:	6278      	str	r0, [r7, #36]	; 0x24

		/* (FixPoint3200 << 16) = FixPoint1616 */
		sqrtResult_centi_ns <<= 16;
 800b3a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3aa:	041b      	lsls	r3, r3, #16
 800b3ac:	627b      	str	r3, [r7, #36]	; 0x24
		/*
		 * Note that the Speed Of Light is expressed in um per 1E-10
		 * seconds (2997) Therefore to get mm/ns we have to divide by
		 * 10000
		 */
		sigmaEstRtn = (((sqrtResult_centi_ns+50)/100) /
 800b3ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3b0:	3332      	adds	r3, #50	; 0x32
 800b3b2:	4a4b      	ldr	r2, [pc, #300]	; (800b4e0 <VL53L0X_calc_sigma_estimate+0x48c>)
 800b3b4:	fba2 2303 	umull	r2, r3, r2, r3
 800b3b8:	095a      	lsrs	r2, r3, #5
 800b3ba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b3bc:	fbb2 f3f3 	udiv	r3, r2, r3
 800b3c0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
				sigmaEstimateP3);
		sigmaEstRtn		 *= VL53L0X_SPEED_OF_LIGHT_IN_AIR;
 800b3c4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800b3c8:	f640 32b5 	movw	r2, #2997	; 0xbb5
 800b3cc:	fb02 f303 	mul.w	r3, r2, r3
 800b3d0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

		/* Add 5000 before dividing by 10000 to ensure rounding. */
		sigmaEstRtn		 += 5000;
 800b3d4:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800b3d8:	f241 3388 	movw	r3, #5000	; 0x1388
 800b3dc:	4413      	add	r3, r2
 800b3de:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
		sigmaEstRtn		 /= 10000;
 800b3e2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800b3e6:	4a3f      	ldr	r2, [pc, #252]	; (800b4e4 <VL53L0X_calc_sigma_estimate+0x490>)
 800b3e8:	fba2 2303 	umull	r2, r3, r2, r3
 800b3ec:	0b5b      	lsrs	r3, r3, #13
 800b3ee:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

		if (sigmaEstRtn > cSigmaEstRtnMax) {
 800b3f2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800b3f6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800b3f8:	429a      	cmp	r2, r3
 800b3fa:	d902      	bls.n	800b402 <VL53L0X_calc_sigma_estimate+0x3ae>
			/* Clip to prevent overflow. Will ensure safe
			 * max result. */
			sigmaEstRtn = cSigmaEstRtnMax;
 800b3fc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800b3fe:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
		}
		finalRangeIntegrationTimeMilliSecs =
			(finalRangeTimeoutMicroSecs + preRangeTimeoutMicroSecs + 500)/1000;
 800b402:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800b406:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800b40a:	4413      	add	r3, r2
 800b40c:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
		finalRangeIntegrationTimeMilliSecs =
 800b410:	4a35      	ldr	r2, [pc, #212]	; (800b4e8 <VL53L0X_calc_sigma_estimate+0x494>)
 800b412:	fba2 2303 	umull	r2, r3, r2, r3
 800b416:	099b      	lsrs	r3, r3, #6
 800b418:	623b      	str	r3, [r7, #32]
		/* sigmaEstRef = 1mm * 25ms/final range integration time (inc pre-range)
		 * sqrt(FixPoint1616/int) = FixPoint2408)
		 */
		sigmaEstRef =
			VL53L0X_isqrt((cDfltFinalRangeIntegrationTimeMilliSecs +
				finalRangeIntegrationTimeMilliSecs/2)/
 800b41a:	6a3b      	ldr	r3, [r7, #32]
 800b41c:	085a      	lsrs	r2, r3, #1
			VL53L0X_isqrt((cDfltFinalRangeIntegrationTimeMilliSecs +
 800b41e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800b422:	441a      	add	r2, r3
 800b424:	6a3b      	ldr	r3, [r7, #32]
 800b426:	fbb2 f3f3 	udiv	r3, r2, r3
 800b42a:	4618      	mov	r0, r3
 800b42c:	f7fd ffa4 	bl	8009378 <VL53L0X_isqrt>
 800b430:	61f8      	str	r0, [r7, #28]
				finalRangeIntegrationTimeMilliSecs);

		/* FixPoint2408 << 8 = FixPoint1616 */
		sigmaEstRef <<= 8;
 800b432:	69fb      	ldr	r3, [r7, #28]
 800b434:	021b      	lsls	r3, r3, #8
 800b436:	61fb      	str	r3, [r7, #28]
		sigmaEstRef = (sigmaEstRef + 500)/1000;
 800b438:	69fb      	ldr	r3, [r7, #28]
 800b43a:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800b43e:	4a2a      	ldr	r2, [pc, #168]	; (800b4e8 <VL53L0X_calc_sigma_estimate+0x494>)
 800b440:	fba2 2303 	umull	r2, r3, r2, r3
 800b444:	099b      	lsrs	r3, r3, #6
 800b446:	61fb      	str	r3, [r7, #28]

		/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
		sqr1 = sigmaEstRtn * sigmaEstRtn;
 800b448:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800b44c:	fb03 f303 	mul.w	r3, r3, r3
 800b450:	633b      	str	r3, [r7, #48]	; 0x30
		/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
		sqr2 = sigmaEstRef * sigmaEstRef;
 800b452:	69fb      	ldr	r3, [r7, #28]
 800b454:	fb03 f303 	mul.w	r3, r3, r3
 800b458:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* sqrt(FixPoint3232) = FixPoint1616 */
		sqrtResult = VL53L0X_isqrt((sqr1 + sqr2));
 800b45a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b45c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b45e:	4413      	add	r3, r2
 800b460:	4618      	mov	r0, r3
 800b462:	f7fd ff89 	bl	8009378 <VL53L0X_isqrt>
 800b466:	61b8      	str	r0, [r7, #24]
		 * Note that the Shift by 4 bits increases resolution prior to
		 * the sqrt, therefore the result must be shifted by 2 bits to
		 * the right to revert back to the FixPoint1616 format.
		 */

		sigmaEstimate	 = 1000 * sqrtResult;
 800b468:	69bb      	ldr	r3, [r7, #24]
 800b46a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800b46e:	fb02 f303 	mul.w	r3, r2, r3
 800b472:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

		if ((peakSignalRate_kcps < 1) || (vcselTotalEventsRtn < 1) ||
 800b476:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b478:	2b00      	cmp	r3, #0
 800b47a:	d009      	beq.n	800b490 <VL53L0X_calc_sigma_estimate+0x43c>
 800b47c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800b480:	2b00      	cmp	r3, #0
 800b482:	d005      	beq.n	800b490 <VL53L0X_calc_sigma_estimate+0x43c>
 800b484:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 800b488:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800b48c:	429a      	cmp	r2, r3
 800b48e:	d903      	bls.n	800b498 <VL53L0X_calc_sigma_estimate+0x444>
				(sigmaEstimate > cSigmaEstMax)) {
				sigmaEstimate = cSigmaEstMax;
 800b490:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800b494:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
		}

		*pSigmaEstimate = (uint32_t)(sigmaEstimate);
 800b498:	687b      	ldr	r3, [r7, #4]
 800b49a:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 800b49e:	601a      	str	r2, [r3, #0]
		PALDevDataSet(Dev, SigmaEstimate, *pSigmaEstimate);
 800b4a0:	687b      	ldr	r3, [r7, #4]
 800b4a2:	681a      	ldr	r2, [r3, #0]
 800b4a4:	68fb      	ldr	r3, [r7, #12]
 800b4a6:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
		Status = VL53L0X_calc_dmax(
 800b4aa:	6939      	ldr	r1, [r7, #16]
 800b4ac:	683b      	ldr	r3, [r7, #0]
 800b4ae:	9303      	str	r3, [sp, #12]
 800b4b0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800b4b4:	9302      	str	r3, [sp, #8]
 800b4b6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800b4ba:	9301      	str	r3, [sp, #4]
 800b4bc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b4be:	9300      	str	r3, [sp, #0]
 800b4c0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800b4c4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800b4c6:	68f8      	ldr	r0, [r7, #12]
 800b4c8:	f7ff fca8 	bl	800ae1c <VL53L0X_calc_dmax>
 800b4cc:	4603      	mov	r3, r0
 800b4ce:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
			peakVcselDuration_us,
			pDmax_mm);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800b4d2:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
}
 800b4d6:	4618      	mov	r0, r3
 800b4d8:	37c0      	adds	r7, #192	; 0xc0
 800b4da:	46bd      	mov	sp, r7
 800b4dc:	bd80      	pop	{r7, pc}
 800b4de:	bf00      	nop
 800b4e0:	51eb851f 	.word	0x51eb851f
 800b4e4:	d1b71759 	.word	0xd1b71759
 800b4e8:	10624dd3 	.word	0x10624dd3

0800b4ec <VL53L0X_get_pal_range_status>:
		uint8_t DeviceRangeStatus,
		FixPoint1616_t SignalRate,
		uint16_t EffectiveSpadRtnCount,
		VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
		uint8_t *pPalRangeStatus)
{
 800b4ec:	b580      	push	{r7, lr}
 800b4ee:	b090      	sub	sp, #64	; 0x40
 800b4f0:	af00      	add	r7, sp, #0
 800b4f2:	60f8      	str	r0, [r7, #12]
 800b4f4:	607a      	str	r2, [r7, #4]
 800b4f6:	461a      	mov	r2, r3
 800b4f8:	460b      	mov	r3, r1
 800b4fa:	72fb      	strb	r3, [r7, #11]
 800b4fc:	4613      	mov	r3, r2
 800b4fe:	813b      	strh	r3, [r7, #8]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b500:	2300      	movs	r3, #0
 800b502:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	uint8_t NoneFlag;
	uint8_t SigmaLimitflag = 0;
 800b506:	2300      	movs	r3, #0
 800b508:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
	uint8_t SignalRefClipflag = 0;
 800b50c:	2300      	movs	r3, #0
 800b50e:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
	uint8_t RangeIgnoreThresholdflag = 0;
 800b512:	2300      	movs	r3, #0
 800b514:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	uint8_t SigmaLimitCheckEnable = 0;
 800b518:	2300      	movs	r3, #0
 800b51a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	uint8_t SignalRateFinalRangeLimitCheckEnable = 0;
 800b51e:	2300      	movs	r3, #0
 800b520:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
	uint8_t SignalRefClipLimitCheckEnable = 0;
 800b524:	2300      	movs	r3, #0
 800b526:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
	uint8_t RangeIgnoreThresholdLimitCheckEnable = 0;
 800b52a:	2300      	movs	r3, #0
 800b52c:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	FixPoint1616_t SigmaEstimate;
	FixPoint1616_t SigmaLimitValue;
	FixPoint1616_t SignalRefClipValue;
	FixPoint1616_t RangeIgnoreThresholdValue;
	FixPoint1616_t SignalRatePerSpad;
	uint8_t DeviceRangeStatusInternal = 0;
 800b530:	2300      	movs	r3, #0
 800b532:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
	uint16_t tmpWord = 0;
 800b536:	2300      	movs	r3, #0
 800b538:	82fb      	strh	r3, [r7, #22]
	uint8_t Temp8;
	uint32_t Dmax_mm = 0;
 800b53a:	2300      	movs	r3, #0
 800b53c:	613b      	str	r3, [r7, #16]
	 * the value 11 in the DeviceRangeStatus.
	 * In addition, the SigmaEstimator is not included in the VL53L0X
	 * DeviceRangeStatus, this will be added in the PalRangeStatus.
	 */

	DeviceRangeStatusInternal = ((DeviceRangeStatus & 0x78) >> 3);
 800b53e:	7afb      	ldrb	r3, [r7, #11]
 800b540:	10db      	asrs	r3, r3, #3
 800b542:	b2db      	uxtb	r3, r3
 800b544:	f003 030f 	and.w	r3, r3, #15
 800b548:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32

	if (DeviceRangeStatusInternal == 0 ||
 800b54c:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800b550:	2b00      	cmp	r3, #0
 800b552:	d017      	beq.n	800b584 <VL53L0X_get_pal_range_status+0x98>
 800b554:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800b558:	2b05      	cmp	r3, #5
 800b55a:	d013      	beq.n	800b584 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 5 ||
 800b55c:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800b560:	2b07      	cmp	r3, #7
 800b562:	d00f      	beq.n	800b584 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 7 ||
 800b564:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800b568:	2b0c      	cmp	r3, #12
 800b56a:	d00b      	beq.n	800b584 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 12 ||
 800b56c:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800b570:	2b0d      	cmp	r3, #13
 800b572:	d007      	beq.n	800b584 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 13 ||
 800b574:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800b578:	2b0e      	cmp	r3, #14
 800b57a:	d003      	beq.n	800b584 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 14 ||
 800b57c:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800b580:	2b0f      	cmp	r3, #15
 800b582:	d103      	bne.n	800b58c <VL53L0X_get_pal_range_status+0xa0>
		DeviceRangeStatusInternal == 15
			) {
		NoneFlag = 1;
 800b584:	2301      	movs	r3, #1
 800b586:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 800b58a:	e002      	b.n	800b592 <VL53L0X_get_pal_range_status+0xa6>
	} else {
		NoneFlag = 0;
 800b58c:	2300      	movs	r3, #0
 800b58e:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e

	/*
	 * Check if Sigma limit is enabled, if yes then do comparison with limit
	 * value and put the result back into pPalRangeStatus.
	 */
	if (Status == VL53L0X_ERROR_NONE)
 800b592:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800b596:	2b00      	cmp	r3, #0
 800b598:	d109      	bne.n	800b5ae <VL53L0X_get_pal_range_status+0xc2>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 800b59a:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 800b59e:	461a      	mov	r2, r3
 800b5a0:	2100      	movs	r1, #0
 800b5a2:	68f8      	ldr	r0, [r7, #12]
 800b5a4:	f7fc f9bc 	bl	8007920 <VL53L0X_GetLimitCheckEnable>
 800b5a8:	4603      	mov	r3, r0
 800b5aa:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
			&SigmaLimitCheckEnable);

	if ((SigmaLimitCheckEnable != 0) && (Status == VL53L0X_ERROR_NONE)) {
 800b5ae:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800b5b2:	2b00      	cmp	r3, #0
 800b5b4:	d02e      	beq.n	800b614 <VL53L0X_get_pal_range_status+0x128>
 800b5b6:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800b5ba:	2b00      	cmp	r3, #0
 800b5bc:	d12a      	bne.n	800b614 <VL53L0X_get_pal_range_status+0x128>
		/*
		* compute the Sigma and check with limit
		*/
		Status = VL53L0X_calc_sigma_estimate(
 800b5be:	f107 0310 	add.w	r3, r7, #16
 800b5c2:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800b5c6:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800b5c8:	68f8      	ldr	r0, [r7, #12]
 800b5ca:	f7ff fd43 	bl	800b054 <VL53L0X_calc_sigma_estimate>
 800b5ce:	4603      	mov	r3, r0
 800b5d0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			Dev,
			pRangingMeasurementData,
			&SigmaEstimate,
			&Dmax_mm);
		if (Status == VL53L0X_ERROR_NONE)
 800b5d4:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800b5d8:	2b00      	cmp	r3, #0
 800b5da:	d103      	bne.n	800b5e4 <VL53L0X_get_pal_range_status+0xf8>
			pRangingMeasurementData->RangeDMaxMilliMeter = Dmax_mm;
 800b5dc:	693b      	ldr	r3, [r7, #16]
 800b5de:	b29a      	uxth	r2, r3
 800b5e0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b5e2:	815a      	strh	r2, [r3, #10]

		if (Status == VL53L0X_ERROR_NONE) {
 800b5e4:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800b5e8:	2b00      	cmp	r3, #0
 800b5ea:	d113      	bne.n	800b614 <VL53L0X_get_pal_range_status+0x128>
			Status = VL53L0X_GetLimitCheckValue(Dev,
 800b5ec:	f107 0320 	add.w	r3, r7, #32
 800b5f0:	461a      	mov	r2, r3
 800b5f2:	2100      	movs	r1, #0
 800b5f4:	68f8      	ldr	r0, [r7, #12]
 800b5f6:	f7fc fa19 	bl	8007a2c <VL53L0X_GetLimitCheckValue>
 800b5fa:	4603      	mov	r3, r0
 800b5fc:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				&SigmaLimitValue);

			if ((SigmaLimitValue > 0) &&
 800b600:	6a3b      	ldr	r3, [r7, #32]
 800b602:	2b00      	cmp	r3, #0
 800b604:	d006      	beq.n	800b614 <VL53L0X_get_pal_range_status+0x128>
				(SigmaEstimate > SigmaLimitValue))
 800b606:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b608:	6a3b      	ldr	r3, [r7, #32]
			if ((SigmaLimitValue > 0) &&
 800b60a:	429a      	cmp	r2, r3
 800b60c:	d902      	bls.n	800b614 <VL53L0X_get_pal_range_status+0x128>
					/* Limit Fail */
					SigmaLimitflag = 1;
 800b60e:	2301      	movs	r3, #1
 800b610:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d

	/*
	 * Check if Signal ref clip limit is enabled, if yes then do comparison
	 * with limit value and put the result back into pPalRangeStatus.
	 */
	if (Status == VL53L0X_ERROR_NONE)
 800b614:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800b618:	2b00      	cmp	r3, #0
 800b61a:	d109      	bne.n	800b630 <VL53L0X_get_pal_range_status+0x144>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 800b61c:	f107 0329 	add.w	r3, r7, #41	; 0x29
 800b620:	461a      	mov	r2, r3
 800b622:	2102      	movs	r1, #2
 800b624:	68f8      	ldr	r0, [r7, #12]
 800b626:	f7fc f97b 	bl	8007920 <VL53L0X_GetLimitCheckEnable>
 800b62a:	4603      	mov	r3, r0
 800b62c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				&SignalRefClipLimitCheckEnable);

	if ((SignalRefClipLimitCheckEnable != 0) &&
 800b630:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 800b634:	2b00      	cmp	r3, #0
 800b636:	d044      	beq.n	800b6c2 <VL53L0X_get_pal_range_status+0x1d6>
 800b638:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800b63c:	2b00      	cmp	r3, #0
 800b63e:	d140      	bne.n	800b6c2 <VL53L0X_get_pal_range_status+0x1d6>
			(Status == VL53L0X_ERROR_NONE)) {

		Status = VL53L0X_GetLimitCheckValue(Dev,
 800b640:	f107 031c 	add.w	r3, r7, #28
 800b644:	461a      	mov	r2, r3
 800b646:	2102      	movs	r1, #2
 800b648:	68f8      	ldr	r0, [r7, #12]
 800b64a:	f7fc f9ef 	bl	8007a2c <VL53L0X_GetLimitCheckValue>
 800b64e:	4603      	mov	r3, r0
 800b650:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				&SignalRefClipValue);

		/* Read LastSignalRefMcps from device */
		if (Status == VL53L0X_ERROR_NONE)
 800b654:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800b658:	2b00      	cmp	r3, #0
 800b65a:	d107      	bne.n	800b66c <VL53L0X_get_pal_range_status+0x180>
			Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800b65c:	2201      	movs	r2, #1
 800b65e:	21ff      	movs	r1, #255	; 0xff
 800b660:	68f8      	ldr	r0, [r7, #12]
 800b662:	f000 f9bb 	bl	800b9dc <VL53L0X_WrByte>
 800b666:	4603      	mov	r3, r0
 800b668:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

		if (Status == VL53L0X_ERROR_NONE)
 800b66c:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800b670:	2b00      	cmp	r3, #0
 800b672:	d109      	bne.n	800b688 <VL53L0X_get_pal_range_status+0x19c>
			Status = VL53L0X_RdWord(Dev,
 800b674:	f107 0316 	add.w	r3, r7, #22
 800b678:	461a      	mov	r2, r3
 800b67a:	21b6      	movs	r1, #182	; 0xb6
 800b67c:	68f8      	ldr	r0, [r7, #12]
 800b67e:	f000 fa59 	bl	800bb34 <VL53L0X_RdWord>
 800b682:	4603      	mov	r3, r0
 800b684:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_REG_RESULT_PEAK_SIGNAL_RATE_REF,
				&tmpWord);

		if (Status == VL53L0X_ERROR_NONE)
 800b688:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800b68c:	2b00      	cmp	r3, #0
 800b68e:	d107      	bne.n	800b6a0 <VL53L0X_get_pal_range_status+0x1b4>
			Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800b690:	2200      	movs	r2, #0
 800b692:	21ff      	movs	r1, #255	; 0xff
 800b694:	68f8      	ldr	r0, [r7, #12]
 800b696:	f000 f9a1 	bl	800b9dc <VL53L0X_WrByte>
 800b69a:	4603      	mov	r3, r0
 800b69c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

		LastSignalRefMcps = VL53L0X_FIXPOINT97TOFIXPOINT1616(tmpWord);
 800b6a0:	8afb      	ldrh	r3, [r7, #22]
 800b6a2:	025b      	lsls	r3, r3, #9
 800b6a4:	62fb      	str	r3, [r7, #44]	; 0x2c
		PALDevDataSet(Dev, LastSignalRefMcps, LastSignalRefMcps);
 800b6a6:	68fb      	ldr	r3, [r7, #12]
 800b6a8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b6aa:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148

		if ((SignalRefClipValue > 0) &&
 800b6ae:	69fb      	ldr	r3, [r7, #28]
 800b6b0:	2b00      	cmp	r3, #0
 800b6b2:	d006      	beq.n	800b6c2 <VL53L0X_get_pal_range_status+0x1d6>
				(LastSignalRefMcps > SignalRefClipValue)) {
 800b6b4:	69fb      	ldr	r3, [r7, #28]
		if ((SignalRefClipValue > 0) &&
 800b6b6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b6b8:	429a      	cmp	r2, r3
 800b6ba:	d902      	bls.n	800b6c2 <VL53L0X_get_pal_range_status+0x1d6>
			/* Limit Fail */
			SignalRefClipflag = 1;
 800b6bc:	2301      	movs	r3, #1
 800b6be:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
	 * Check if Signal ref clip limit is enabled, if yes then do comparison
	 * with limit value and put the result back into pPalRangeStatus.
	 * EffectiveSpadRtnCount has a format 8.8
	 * If (Return signal rate < (1.5 x Xtalk x number of Spads)) : FAIL
	 */
	if (Status == VL53L0X_ERROR_NONE)
 800b6c2:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800b6c6:	2b00      	cmp	r3, #0
 800b6c8:	d109      	bne.n	800b6de <VL53L0X_get_pal_range_status+0x1f2>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 800b6ca:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800b6ce:	461a      	mov	r2, r3
 800b6d0:	2103      	movs	r1, #3
 800b6d2:	68f8      	ldr	r0, [r7, #12]
 800b6d4:	f7fc f924 	bl	8007920 <VL53L0X_GetLimitCheckEnable>
 800b6d8:	4603      	mov	r3, r0
 800b6da:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				&RangeIgnoreThresholdLimitCheckEnable);

	if ((RangeIgnoreThresholdLimitCheckEnable != 0) &&
 800b6de:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800b6e2:	2b00      	cmp	r3, #0
 800b6e4:	d023      	beq.n	800b72e <VL53L0X_get_pal_range_status+0x242>
 800b6e6:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800b6ea:	2b00      	cmp	r3, #0
 800b6ec:	d11f      	bne.n	800b72e <VL53L0X_get_pal_range_status+0x242>
			(Status == VL53L0X_ERROR_NONE)) {

		/* Compute the signal rate per spad */
		if (EffectiveSpadRtnCount == 0) {
 800b6ee:	893b      	ldrh	r3, [r7, #8]
 800b6f0:	2b00      	cmp	r3, #0
 800b6f2:	d102      	bne.n	800b6fa <VL53L0X_get_pal_range_status+0x20e>
			SignalRatePerSpad = 0;
 800b6f4:	2300      	movs	r3, #0
 800b6f6:	637b      	str	r3, [r7, #52]	; 0x34
 800b6f8:	e005      	b.n	800b706 <VL53L0X_get_pal_range_status+0x21a>
		} else {
			SignalRatePerSpad = (FixPoint1616_t)((256 * SignalRate)
 800b6fa:	687b      	ldr	r3, [r7, #4]
 800b6fc:	021a      	lsls	r2, r3, #8
 800b6fe:	893b      	ldrh	r3, [r7, #8]
 800b700:	fbb2 f3f3 	udiv	r3, r2, r3
 800b704:	637b      	str	r3, [r7, #52]	; 0x34
				/ EffectiveSpadRtnCount);
		}

		Status = VL53L0X_GetLimitCheckValue(Dev,
 800b706:	f107 0318 	add.w	r3, r7, #24
 800b70a:	461a      	mov	r2, r3
 800b70c:	2103      	movs	r1, #3
 800b70e:	68f8      	ldr	r0, [r7, #12]
 800b710:	f7fc f98c 	bl	8007a2c <VL53L0X_GetLimitCheckValue>
 800b714:	4603      	mov	r3, r0
 800b716:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				&RangeIgnoreThresholdValue);

		if ((RangeIgnoreThresholdValue > 0) &&
 800b71a:	69bb      	ldr	r3, [r7, #24]
 800b71c:	2b00      	cmp	r3, #0
 800b71e:	d006      	beq.n	800b72e <VL53L0X_get_pal_range_status+0x242>
			(SignalRatePerSpad < RangeIgnoreThresholdValue)) {
 800b720:	69bb      	ldr	r3, [r7, #24]
		if ((RangeIgnoreThresholdValue > 0) &&
 800b722:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b724:	429a      	cmp	r2, r3
 800b726:	d202      	bcs.n	800b72e <VL53L0X_get_pal_range_status+0x242>
			/* Limit Fail add 2^6 to range status */
			RangeIgnoreThresholdflag = 1;
 800b728:	2301      	movs	r3, #1
 800b72a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800b72e:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800b732:	2b00      	cmp	r3, #0
 800b734:	d14a      	bne.n	800b7cc <VL53L0X_get_pal_range_status+0x2e0>
		if (NoneFlag == 1) {
 800b736:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800b73a:	2b01      	cmp	r3, #1
 800b73c:	d103      	bne.n	800b746 <VL53L0X_get_pal_range_status+0x25a>
			*pPalRangeStatus = 255;	 /* NONE */
 800b73e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b740:	22ff      	movs	r2, #255	; 0xff
 800b742:	701a      	strb	r2, [r3, #0]
 800b744:	e042      	b.n	800b7cc <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 1 ||
 800b746:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800b74a:	2b01      	cmp	r3, #1
 800b74c:	d007      	beq.n	800b75e <VL53L0X_get_pal_range_status+0x272>
 800b74e:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800b752:	2b02      	cmp	r3, #2
 800b754:	d003      	beq.n	800b75e <VL53L0X_get_pal_range_status+0x272>
					DeviceRangeStatusInternal == 2 ||
 800b756:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800b75a:	2b03      	cmp	r3, #3
 800b75c:	d103      	bne.n	800b766 <VL53L0X_get_pal_range_status+0x27a>
					DeviceRangeStatusInternal == 3) {
			*pPalRangeStatus = 5; /* HW fail */
 800b75e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b760:	2205      	movs	r2, #5
 800b762:	701a      	strb	r2, [r3, #0]
 800b764:	e032      	b.n	800b7cc <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 6 ||
 800b766:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800b76a:	2b06      	cmp	r3, #6
 800b76c:	d003      	beq.n	800b776 <VL53L0X_get_pal_range_status+0x28a>
 800b76e:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800b772:	2b09      	cmp	r3, #9
 800b774:	d103      	bne.n	800b77e <VL53L0X_get_pal_range_status+0x292>
					DeviceRangeStatusInternal == 9) {
			*pPalRangeStatus = 4;  /* Phase fail */
 800b776:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b778:	2204      	movs	r2, #4
 800b77a:	701a      	strb	r2, [r3, #0]
 800b77c:	e026      	b.n	800b7cc <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 8 ||
 800b77e:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800b782:	2b08      	cmp	r3, #8
 800b784:	d007      	beq.n	800b796 <VL53L0X_get_pal_range_status+0x2aa>
 800b786:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800b78a:	2b0a      	cmp	r3, #10
 800b78c:	d003      	beq.n	800b796 <VL53L0X_get_pal_range_status+0x2aa>
					DeviceRangeStatusInternal == 10 ||
 800b78e:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800b792:	2b01      	cmp	r3, #1
 800b794:	d103      	bne.n	800b79e <VL53L0X_get_pal_range_status+0x2b2>
					SignalRefClipflag == 1) {
			*pPalRangeStatus = 3;  /* Min range */
 800b796:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b798:	2203      	movs	r2, #3
 800b79a:	701a      	strb	r2, [r3, #0]
 800b79c:	e016      	b.n	800b7cc <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 4 ||
 800b79e:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800b7a2:	2b04      	cmp	r3, #4
 800b7a4:	d003      	beq.n	800b7ae <VL53L0X_get_pal_range_status+0x2c2>
 800b7a6:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800b7aa:	2b01      	cmp	r3, #1
 800b7ac:	d103      	bne.n	800b7b6 <VL53L0X_get_pal_range_status+0x2ca>
					RangeIgnoreThresholdflag == 1) {
			*pPalRangeStatus = 2;  /* Signal Fail */
 800b7ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b7b0:	2202      	movs	r2, #2
 800b7b2:	701a      	strb	r2, [r3, #0]
 800b7b4:	e00a      	b.n	800b7cc <VL53L0X_get_pal_range_status+0x2e0>
		} else if (SigmaLimitflag == 1) {
 800b7b6:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 800b7ba:	2b01      	cmp	r3, #1
 800b7bc:	d103      	bne.n	800b7c6 <VL53L0X_get_pal_range_status+0x2da>
			*pPalRangeStatus = 1;  /* Sigma	 Fail */
 800b7be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b7c0:	2201      	movs	r2, #1
 800b7c2:	701a      	strb	r2, [r3, #0]
 800b7c4:	e002      	b.n	800b7cc <VL53L0X_get_pal_range_status+0x2e0>
		} else {
			*pPalRangeStatus = 0; /* Range Valid */
 800b7c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b7c8:	2200      	movs	r2, #0
 800b7ca:	701a      	strb	r2, [r3, #0]
		}
	}

	/* DMAX only relevant during range error */
	if (*pPalRangeStatus == 0)
 800b7cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b7ce:	781b      	ldrb	r3, [r3, #0]
 800b7d0:	2b00      	cmp	r3, #0
 800b7d2:	d102      	bne.n	800b7da <VL53L0X_get_pal_range_status+0x2ee>
		pRangingMeasurementData->RangeDMaxMilliMeter = 0;
 800b7d4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b7d6:	2200      	movs	r2, #0
 800b7d8:	815a      	strh	r2, [r3, #10]

	/* fill the Limit Check Status */

	Status =  VL53L0X_GetLimitCheckEnable(Dev,
 800b7da:	f107 032a 	add.w	r3, r7, #42	; 0x2a
 800b7de:	461a      	mov	r2, r3
 800b7e0:	2101      	movs	r1, #1
 800b7e2:	68f8      	ldr	r0, [r7, #12]
 800b7e4:	f7fc f89c 	bl	8007920 <VL53L0X_GetLimitCheckEnable>
 800b7e8:	4603      	mov	r3, r0
 800b7ea:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
			&SignalRateFinalRangeLimitCheckEnable);

	if (Status == VL53L0X_ERROR_NONE) {
 800b7ee:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800b7f2:	2b00      	cmp	r3, #0
 800b7f4:	d14f      	bne.n	800b896 <VL53L0X_get_pal_range_status+0x3aa>
		if ((SigmaLimitCheckEnable == 0) || (SigmaLimitflag == 1))
 800b7f6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800b7fa:	2b00      	cmp	r3, #0
 800b7fc:	d003      	beq.n	800b806 <VL53L0X_get_pal_range_status+0x31a>
 800b7fe:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 800b802:	2b01      	cmp	r3, #1
 800b804:	d103      	bne.n	800b80e <VL53L0X_get_pal_range_status+0x322>
			Temp8 = 1;
 800b806:	2301      	movs	r3, #1
 800b808:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b80c:	e002      	b.n	800b814 <VL53L0X_get_pal_range_status+0x328>
		else
			Temp8 = 0;
 800b80e:	2300      	movs	r3, #0
 800b810:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 800b814:	68fb      	ldr	r3, [r7, #12]
 800b816:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 800b81a:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, Temp8);

		if ((DeviceRangeStatusInternal == 4) ||
 800b81e:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800b822:	2b04      	cmp	r3, #4
 800b824:	d003      	beq.n	800b82e <VL53L0X_get_pal_range_status+0x342>
				(SignalRateFinalRangeLimitCheckEnable == 0))
 800b826:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
		if ((DeviceRangeStatusInternal == 4) ||
 800b82a:	2b00      	cmp	r3, #0
 800b82c:	d103      	bne.n	800b836 <VL53L0X_get_pal_range_status+0x34a>
			Temp8 = 1;
 800b82e:	2301      	movs	r3, #1
 800b830:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b834:	e002      	b.n	800b83c <VL53L0X_get_pal_range_status+0x350>
		else
			Temp8 = 0;
 800b836:	2300      	movs	r3, #0
 800b838:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 800b83c:	68fb      	ldr	r3, [r7, #12]
 800b83e:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 800b842:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
				VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
				Temp8);

		if ((SignalRefClipLimitCheckEnable == 0) ||
 800b846:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 800b84a:	2b00      	cmp	r3, #0
 800b84c:	d003      	beq.n	800b856 <VL53L0X_get_pal_range_status+0x36a>
 800b84e:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800b852:	2b01      	cmp	r3, #1
 800b854:	d103      	bne.n	800b85e <VL53L0X_get_pal_range_status+0x372>
					(SignalRefClipflag == 1))
			Temp8 = 1;
 800b856:	2301      	movs	r3, #1
 800b858:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b85c:	e002      	b.n	800b864 <VL53L0X_get_pal_range_status+0x378>
		else
			Temp8 = 0;
 800b85e:	2300      	movs	r3, #0
 800b860:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 800b864:	68fb      	ldr	r3, [r7, #12]
 800b866:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 800b86a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, Temp8);

		if ((RangeIgnoreThresholdLimitCheckEnable == 0) ||
 800b86e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800b872:	2b00      	cmp	r3, #0
 800b874:	d003      	beq.n	800b87e <VL53L0X_get_pal_range_status+0x392>
 800b876:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800b87a:	2b01      	cmp	r3, #1
 800b87c:	d103      	bne.n	800b886 <VL53L0X_get_pal_range_status+0x39a>
				(RangeIgnoreThresholdflag == 1))
			Temp8 = 1;
 800b87e:	2301      	movs	r3, #1
 800b880:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b884:	e002      	b.n	800b88c <VL53L0X_get_pal_range_status+0x3a0>
		else
			Temp8 = 0;
 800b886:	2300      	movs	r3, #0
 800b888:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 800b88c:	68fb      	ldr	r3, [r7, #12]
 800b88e:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 800b892:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				Temp8);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800b896:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f

}
 800b89a:	4618      	mov	r0, r3
 800b89c:	3740      	adds	r7, #64	; 0x40
 800b89e:	46bd      	mov	sp, r7
 800b8a0:	bd80      	pop	{r7, pc}

0800b8a2 <_I2CWrite>:
#endif


uint8_t _I2CBuffer[64];

int _I2CWrite(VL53L0X_DEV Dev, uint8_t *pdata, uint32_t count) {
 800b8a2:	b580      	push	{r7, lr}
 800b8a4:	b088      	sub	sp, #32
 800b8a6:	af02      	add	r7, sp, #8
 800b8a8:	60f8      	str	r0, [r7, #12]
 800b8aa:	60b9      	str	r1, [r7, #8]
 800b8ac:	607a      	str	r2, [r7, #4]
    int status;
    int i2c_time_out = I2C_TIME_OUT_BASE+ count* I2C_TIME_OUT_BYTE;
 800b8ae:	687b      	ldr	r3, [r7, #4]
 800b8b0:	330a      	adds	r3, #10
 800b8b2:	617b      	str	r3, [r7, #20]

    status = HAL_I2C_Master_Transmit(Dev->I2cHandle, Dev->I2cDevAddr, pdata, count, i2c_time_out);
 800b8b4:	68fb      	ldr	r3, [r7, #12]
 800b8b6:	f8d3 015c 	ldr.w	r0, [r3, #348]	; 0x15c
 800b8ba:	68fb      	ldr	r3, [r7, #12]
 800b8bc:	f893 3160 	ldrb.w	r3, [r3, #352]	; 0x160
 800b8c0:	b299      	uxth	r1, r3
 800b8c2:	687b      	ldr	r3, [r7, #4]
 800b8c4:	b29a      	uxth	r2, r3
 800b8c6:	697b      	ldr	r3, [r7, #20]
 800b8c8:	9300      	str	r3, [sp, #0]
 800b8ca:	4613      	mov	r3, r2
 800b8cc:	68ba      	ldr	r2, [r7, #8]
 800b8ce:	f7f7 fba9 	bl	8003024 <HAL_I2C_Master_Transmit>
 800b8d2:	4603      	mov	r3, r0
 800b8d4:	613b      	str	r3, [r7, #16]
    if (status) {
        //VL6180x_ErrLog("I2C error 0x%x %d len", dev->I2cAddr, len);
        //XNUCLEO6180XA1_I2C1_Init(&hi2c1);
    }
    return status;
 800b8d6:	693b      	ldr	r3, [r7, #16]
}
 800b8d8:	4618      	mov	r0, r3
 800b8da:	3718      	adds	r7, #24
 800b8dc:	46bd      	mov	sp, r7
 800b8de:	bd80      	pop	{r7, pc}

0800b8e0 <_I2CRead>:

int _I2CRead(VL53L0X_DEV Dev, uint8_t *pdata, uint32_t count) {
 800b8e0:	b580      	push	{r7, lr}
 800b8e2:	b088      	sub	sp, #32
 800b8e4:	af02      	add	r7, sp, #8
 800b8e6:	60f8      	str	r0, [r7, #12]
 800b8e8:	60b9      	str	r1, [r7, #8]
 800b8ea:	607a      	str	r2, [r7, #4]
    int status;
    int i2c_time_out = I2C_TIME_OUT_BASE+ count* I2C_TIME_OUT_BYTE;
 800b8ec:	687b      	ldr	r3, [r7, #4]
 800b8ee:	330a      	adds	r3, #10
 800b8f0:	617b      	str	r3, [r7, #20]

    status = HAL_I2C_Master_Receive(Dev->I2cHandle, Dev->I2cDevAddr|1, pdata, count, i2c_time_out);
 800b8f2:	68fb      	ldr	r3, [r7, #12]
 800b8f4:	f8d3 015c 	ldr.w	r0, [r3, #348]	; 0x15c
 800b8f8:	68fb      	ldr	r3, [r7, #12]
 800b8fa:	f893 3160 	ldrb.w	r3, [r3, #352]	; 0x160
 800b8fe:	f043 0301 	orr.w	r3, r3, #1
 800b902:	b2db      	uxtb	r3, r3
 800b904:	b299      	uxth	r1, r3
 800b906:	687b      	ldr	r3, [r7, #4]
 800b908:	b29a      	uxth	r2, r3
 800b90a:	697b      	ldr	r3, [r7, #20]
 800b90c:	9300      	str	r3, [sp, #0]
 800b90e:	4613      	mov	r3, r2
 800b910:	68ba      	ldr	r2, [r7, #8]
 800b912:	f7f7 fc7b 	bl	800320c <HAL_I2C_Master_Receive>
 800b916:	4603      	mov	r3, r0
 800b918:	613b      	str	r3, [r7, #16]
    if (status) {
        //VL6180x_ErrLog("I2C error 0x%x %d len", dev->I2cAddr, len);
        //XNUCLEO6180XA1_I2C1_Init(&hi2c1);
    }
    return status;
 800b91a:	693b      	ldr	r3, [r7, #16]
}
 800b91c:	4618      	mov	r0, r3
 800b91e:	3718      	adds	r7, #24
 800b920:	46bd      	mov	sp, r7
 800b922:	bd80      	pop	{r7, pc}

0800b924 <VL53L0X_WriteMulti>:

// the ranging_sensor_comms.dll will take care of the page selection
VL53L0X_Error VL53L0X_WriteMulti(VL53L0X_DEV Dev, uint8_t index, uint8_t *pdata, uint32_t count) {
 800b924:	b580      	push	{r7, lr}
 800b926:	b086      	sub	sp, #24
 800b928:	af00      	add	r7, sp, #0
 800b92a:	60f8      	str	r0, [r7, #12]
 800b92c:	607a      	str	r2, [r7, #4]
 800b92e:	603b      	str	r3, [r7, #0]
 800b930:	460b      	mov	r3, r1
 800b932:	72fb      	strb	r3, [r7, #11]
    int status_int;
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b934:	2300      	movs	r3, #0
 800b936:	75fb      	strb	r3, [r7, #23]
    if (count > sizeof(_I2CBuffer) - 1) {
 800b938:	683b      	ldr	r3, [r7, #0]
 800b93a:	2b3f      	cmp	r3, #63	; 0x3f
 800b93c:	d902      	bls.n	800b944 <VL53L0X_WriteMulti+0x20>
        return VL53L0X_ERROR_INVALID_PARAMS;
 800b93e:	f06f 0303 	mvn.w	r3, #3
 800b942:	e016      	b.n	800b972 <VL53L0X_WriteMulti+0x4e>
    }
    _I2CBuffer[0] = index;
 800b944:	4a0d      	ldr	r2, [pc, #52]	; (800b97c <VL53L0X_WriteMulti+0x58>)
 800b946:	7afb      	ldrb	r3, [r7, #11]
 800b948:	7013      	strb	r3, [r2, #0]
    memcpy(&_I2CBuffer[1], pdata, count);
 800b94a:	683a      	ldr	r2, [r7, #0]
 800b94c:	6879      	ldr	r1, [r7, #4]
 800b94e:	480c      	ldr	r0, [pc, #48]	; (800b980 <VL53L0X_WriteMulti+0x5c>)
 800b950:	f000 f99e 	bl	800bc90 <memcpy>
    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, count + 1);
 800b954:	683b      	ldr	r3, [r7, #0]
 800b956:	3301      	adds	r3, #1
 800b958:	461a      	mov	r2, r3
 800b95a:	4908      	ldr	r1, [pc, #32]	; (800b97c <VL53L0X_WriteMulti+0x58>)
 800b95c:	68f8      	ldr	r0, [r7, #12]
 800b95e:	f7ff ffa0 	bl	800b8a2 <_I2CWrite>
 800b962:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800b964:	693b      	ldr	r3, [r7, #16]
 800b966:	2b00      	cmp	r3, #0
 800b968:	d001      	beq.n	800b96e <VL53L0X_WriteMulti+0x4a>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800b96a:	23ec      	movs	r3, #236	; 0xec
 800b96c:	75fb      	strb	r3, [r7, #23]
    }
    VL53L0X_PutI2cBus();
    return Status;
 800b96e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b972:	4618      	mov	r0, r3
 800b974:	3718      	adds	r7, #24
 800b976:	46bd      	mov	sp, r7
 800b978:	bd80      	pop	{r7, pc}
 800b97a:	bf00      	nop
 800b97c:	200095f0 	.word	0x200095f0
 800b980:	200095f1 	.word	0x200095f1

0800b984 <VL53L0X_ReadMulti>:

// the ranging_sensor_comms.dll will take care of the page selection
VL53L0X_Error VL53L0X_ReadMulti(VL53L0X_DEV Dev, uint8_t index, uint8_t *pdata, uint32_t count) {
 800b984:	b580      	push	{r7, lr}
 800b986:	b086      	sub	sp, #24
 800b988:	af00      	add	r7, sp, #0
 800b98a:	60f8      	str	r0, [r7, #12]
 800b98c:	607a      	str	r2, [r7, #4]
 800b98e:	603b      	str	r3, [r7, #0]
 800b990:	460b      	mov	r3, r1
 800b992:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b994:	2300      	movs	r3, #0
 800b996:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;
    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 800b998:	f107 030b 	add.w	r3, r7, #11
 800b99c:	2201      	movs	r2, #1
 800b99e:	4619      	mov	r1, r3
 800b9a0:	68f8      	ldr	r0, [r7, #12]
 800b9a2:	f7ff ff7e 	bl	800b8a2 <_I2CWrite>
 800b9a6:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800b9a8:	693b      	ldr	r3, [r7, #16]
 800b9aa:	2b00      	cmp	r3, #0
 800b9ac:	d002      	beq.n	800b9b4 <VL53L0X_ReadMulti+0x30>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800b9ae:	23ec      	movs	r3, #236	; 0xec
 800b9b0:	75fb      	strb	r3, [r7, #23]
        goto done;
 800b9b2:	e00c      	b.n	800b9ce <VL53L0X_ReadMulti+0x4a>
    }
    status_int = _I2CRead(Dev, pdata, count);
 800b9b4:	683a      	ldr	r2, [r7, #0]
 800b9b6:	6879      	ldr	r1, [r7, #4]
 800b9b8:	68f8      	ldr	r0, [r7, #12]
 800b9ba:	f7ff ff91 	bl	800b8e0 <_I2CRead>
 800b9be:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800b9c0:	693b      	ldr	r3, [r7, #16]
 800b9c2:	2b00      	cmp	r3, #0
 800b9c4:	d002      	beq.n	800b9cc <VL53L0X_ReadMulti+0x48>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800b9c6:	23ec      	movs	r3, #236	; 0xec
 800b9c8:	75fb      	strb	r3, [r7, #23]
 800b9ca:	e000      	b.n	800b9ce <VL53L0X_ReadMulti+0x4a>
    }
done:
 800b9cc:	bf00      	nop
    VL53L0X_PutI2cBus();
    return Status;
 800b9ce:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b9d2:	4618      	mov	r0, r3
 800b9d4:	3718      	adds	r7, #24
 800b9d6:	46bd      	mov	sp, r7
 800b9d8:	bd80      	pop	{r7, pc}
	...

0800b9dc <VL53L0X_WrByte>:

VL53L0X_Error VL53L0X_WrByte(VL53L0X_DEV Dev, uint8_t index, uint8_t data) {
 800b9dc:	b580      	push	{r7, lr}
 800b9de:	b084      	sub	sp, #16
 800b9e0:	af00      	add	r7, sp, #0
 800b9e2:	6078      	str	r0, [r7, #4]
 800b9e4:	460b      	mov	r3, r1
 800b9e6:	70fb      	strb	r3, [r7, #3]
 800b9e8:	4613      	mov	r3, r2
 800b9ea:	70bb      	strb	r3, [r7, #2]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b9ec:	2300      	movs	r3, #0
 800b9ee:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;

    _I2CBuffer[0] = index;
 800b9f0:	4a0b      	ldr	r2, [pc, #44]	; (800ba20 <VL53L0X_WrByte+0x44>)
 800b9f2:	78fb      	ldrb	r3, [r7, #3]
 800b9f4:	7013      	strb	r3, [r2, #0]
    _I2CBuffer[1] = data;
 800b9f6:	4a0a      	ldr	r2, [pc, #40]	; (800ba20 <VL53L0X_WrByte+0x44>)
 800b9f8:	78bb      	ldrb	r3, [r7, #2]
 800b9fa:	7053      	strb	r3, [r2, #1]

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 2);
 800b9fc:	2202      	movs	r2, #2
 800b9fe:	4908      	ldr	r1, [pc, #32]	; (800ba20 <VL53L0X_WrByte+0x44>)
 800ba00:	6878      	ldr	r0, [r7, #4]
 800ba02:	f7ff ff4e 	bl	800b8a2 <_I2CWrite>
 800ba06:	60b8      	str	r0, [r7, #8]
    if (status_int != 0) {
 800ba08:	68bb      	ldr	r3, [r7, #8]
 800ba0a:	2b00      	cmp	r3, #0
 800ba0c:	d001      	beq.n	800ba12 <VL53L0X_WrByte+0x36>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800ba0e:	23ec      	movs	r3, #236	; 0xec
 800ba10:	73fb      	strb	r3, [r7, #15]
    }
    VL53L0X_PutI2cBus();
    return Status;
 800ba12:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800ba16:	4618      	mov	r0, r3
 800ba18:	3710      	adds	r7, #16
 800ba1a:	46bd      	mov	sp, r7
 800ba1c:	bd80      	pop	{r7, pc}
 800ba1e:	bf00      	nop
 800ba20:	200095f0 	.word	0x200095f0

0800ba24 <VL53L0X_WrWord>:

VL53L0X_Error VL53L0X_WrWord(VL53L0X_DEV Dev, uint8_t index, uint16_t data) {
 800ba24:	b580      	push	{r7, lr}
 800ba26:	b084      	sub	sp, #16
 800ba28:	af00      	add	r7, sp, #0
 800ba2a:	6078      	str	r0, [r7, #4]
 800ba2c:	460b      	mov	r3, r1
 800ba2e:	70fb      	strb	r3, [r7, #3]
 800ba30:	4613      	mov	r3, r2
 800ba32:	803b      	strh	r3, [r7, #0]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800ba34:	2300      	movs	r3, #0
 800ba36:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;

    _I2CBuffer[0] = index;
 800ba38:	4a0e      	ldr	r2, [pc, #56]	; (800ba74 <VL53L0X_WrWord+0x50>)
 800ba3a:	78fb      	ldrb	r3, [r7, #3]
 800ba3c:	7013      	strb	r3, [r2, #0]
    _I2CBuffer[1] = data >> 8;
 800ba3e:	883b      	ldrh	r3, [r7, #0]
 800ba40:	0a1b      	lsrs	r3, r3, #8
 800ba42:	b29b      	uxth	r3, r3
 800ba44:	b2da      	uxtb	r2, r3
 800ba46:	4b0b      	ldr	r3, [pc, #44]	; (800ba74 <VL53L0X_WrWord+0x50>)
 800ba48:	705a      	strb	r2, [r3, #1]
    _I2CBuffer[2] = data & 0x00FF;
 800ba4a:	883b      	ldrh	r3, [r7, #0]
 800ba4c:	b2da      	uxtb	r2, r3
 800ba4e:	4b09      	ldr	r3, [pc, #36]	; (800ba74 <VL53L0X_WrWord+0x50>)
 800ba50:	709a      	strb	r2, [r3, #2]

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 3);
 800ba52:	2203      	movs	r2, #3
 800ba54:	4907      	ldr	r1, [pc, #28]	; (800ba74 <VL53L0X_WrWord+0x50>)
 800ba56:	6878      	ldr	r0, [r7, #4]
 800ba58:	f7ff ff23 	bl	800b8a2 <_I2CWrite>
 800ba5c:	60b8      	str	r0, [r7, #8]
    if (status_int != 0) {
 800ba5e:	68bb      	ldr	r3, [r7, #8]
 800ba60:	2b00      	cmp	r3, #0
 800ba62:	d001      	beq.n	800ba68 <VL53L0X_WrWord+0x44>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800ba64:	23ec      	movs	r3, #236	; 0xec
 800ba66:	73fb      	strb	r3, [r7, #15]
    }
    VL53L0X_PutI2cBus();
    return Status;
 800ba68:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800ba6c:	4618      	mov	r0, r3
 800ba6e:	3710      	adds	r7, #16
 800ba70:	46bd      	mov	sp, r7
 800ba72:	bd80      	pop	{r7, pc}
 800ba74:	200095f0 	.word	0x200095f0

0800ba78 <VL53L0X_UpdateByte>:
    }
    VL53L0X_PutI2cBus();
    return Status;
}

VL53L0X_Error VL53L0X_UpdateByte(VL53L0X_DEV Dev, uint8_t index, uint8_t AndData, uint8_t OrData) {
 800ba78:	b580      	push	{r7, lr}
 800ba7a:	b084      	sub	sp, #16
 800ba7c:	af00      	add	r7, sp, #0
 800ba7e:	6078      	str	r0, [r7, #4]
 800ba80:	4608      	mov	r0, r1
 800ba82:	4611      	mov	r1, r2
 800ba84:	461a      	mov	r2, r3
 800ba86:	4603      	mov	r3, r0
 800ba88:	70fb      	strb	r3, [r7, #3]
 800ba8a:	460b      	mov	r3, r1
 800ba8c:	70bb      	strb	r3, [r7, #2]
 800ba8e:	4613      	mov	r3, r2
 800ba90:	707b      	strb	r3, [r7, #1]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800ba92:	2300      	movs	r3, #0
 800ba94:	73fb      	strb	r3, [r7, #15]
    uint8_t data;

    Status = VL53L0X_RdByte(Dev, index, &data);
 800ba96:	f107 020e 	add.w	r2, r7, #14
 800ba9a:	78fb      	ldrb	r3, [r7, #3]
 800ba9c:	4619      	mov	r1, r3
 800ba9e:	6878      	ldr	r0, [r7, #4]
 800baa0:	f000 f81e 	bl	800bae0 <VL53L0X_RdByte>
 800baa4:	4603      	mov	r3, r0
 800baa6:	73fb      	strb	r3, [r7, #15]
    if (Status) {
 800baa8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800baac:	2b00      	cmp	r3, #0
 800baae:	d110      	bne.n	800bad2 <VL53L0X_UpdateByte+0x5a>
        goto done;
    }
    data = (data & AndData) | OrData;
 800bab0:	7bba      	ldrb	r2, [r7, #14]
 800bab2:	78bb      	ldrb	r3, [r7, #2]
 800bab4:	4013      	ands	r3, r2
 800bab6:	b2da      	uxtb	r2, r3
 800bab8:	787b      	ldrb	r3, [r7, #1]
 800baba:	4313      	orrs	r3, r2
 800babc:	b2db      	uxtb	r3, r3
 800babe:	73bb      	strb	r3, [r7, #14]
    Status = VL53L0X_WrByte(Dev, index, data);
 800bac0:	7bba      	ldrb	r2, [r7, #14]
 800bac2:	78fb      	ldrb	r3, [r7, #3]
 800bac4:	4619      	mov	r1, r3
 800bac6:	6878      	ldr	r0, [r7, #4]
 800bac8:	f7ff ff88 	bl	800b9dc <VL53L0X_WrByte>
 800bacc:	4603      	mov	r3, r0
 800bace:	73fb      	strb	r3, [r7, #15]
 800bad0:	e000      	b.n	800bad4 <VL53L0X_UpdateByte+0x5c>
        goto done;
 800bad2:	bf00      	nop
done:
    return Status;
 800bad4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800bad8:	4618      	mov	r0, r3
 800bada:	3710      	adds	r7, #16
 800badc:	46bd      	mov	sp, r7
 800bade:	bd80      	pop	{r7, pc}

0800bae0 <VL53L0X_RdByte>:

VL53L0X_Error VL53L0X_RdByte(VL53L0X_DEV Dev, uint8_t index, uint8_t *data) {
 800bae0:	b580      	push	{r7, lr}
 800bae2:	b086      	sub	sp, #24
 800bae4:	af00      	add	r7, sp, #0
 800bae6:	60f8      	str	r0, [r7, #12]
 800bae8:	460b      	mov	r3, r1
 800baea:	607a      	str	r2, [r7, #4]
 800baec:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800baee:	2300      	movs	r3, #0
 800baf0:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 800baf2:	f107 030b 	add.w	r3, r7, #11
 800baf6:	2201      	movs	r2, #1
 800baf8:	4619      	mov	r1, r3
 800bafa:	68f8      	ldr	r0, [r7, #12]
 800bafc:	f7ff fed1 	bl	800b8a2 <_I2CWrite>
 800bb00:	6138      	str	r0, [r7, #16]
    if( status_int ){
 800bb02:	693b      	ldr	r3, [r7, #16]
 800bb04:	2b00      	cmp	r3, #0
 800bb06:	d002      	beq.n	800bb0e <VL53L0X_RdByte+0x2e>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800bb08:	23ec      	movs	r3, #236	; 0xec
 800bb0a:	75fb      	strb	r3, [r7, #23]
        goto done;
 800bb0c:	e00c      	b.n	800bb28 <VL53L0X_RdByte+0x48>
    }
    status_int = _I2CRead(Dev, data, 1);
 800bb0e:	2201      	movs	r2, #1
 800bb10:	6879      	ldr	r1, [r7, #4]
 800bb12:	68f8      	ldr	r0, [r7, #12]
 800bb14:	f7ff fee4 	bl	800b8e0 <_I2CRead>
 800bb18:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800bb1a:	693b      	ldr	r3, [r7, #16]
 800bb1c:	2b00      	cmp	r3, #0
 800bb1e:	d002      	beq.n	800bb26 <VL53L0X_RdByte+0x46>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800bb20:	23ec      	movs	r3, #236	; 0xec
 800bb22:	75fb      	strb	r3, [r7, #23]
 800bb24:	e000      	b.n	800bb28 <VL53L0X_RdByte+0x48>
    }
done:
 800bb26:	bf00      	nop
    VL53L0X_PutI2cBus();
    return Status;
 800bb28:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800bb2c:	4618      	mov	r0, r3
 800bb2e:	3718      	adds	r7, #24
 800bb30:	46bd      	mov	sp, r7
 800bb32:	bd80      	pop	{r7, pc}

0800bb34 <VL53L0X_RdWord>:

VL53L0X_Error VL53L0X_RdWord(VL53L0X_DEV Dev, uint8_t index, uint16_t *data) {
 800bb34:	b580      	push	{r7, lr}
 800bb36:	b086      	sub	sp, #24
 800bb38:	af00      	add	r7, sp, #0
 800bb3a:	60f8      	str	r0, [r7, #12]
 800bb3c:	460b      	mov	r3, r1
 800bb3e:	607a      	str	r2, [r7, #4]
 800bb40:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800bb42:	2300      	movs	r3, #0
 800bb44:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 800bb46:	f107 030b 	add.w	r3, r7, #11
 800bb4a:	2201      	movs	r2, #1
 800bb4c:	4619      	mov	r1, r3
 800bb4e:	68f8      	ldr	r0, [r7, #12]
 800bb50:	f7ff fea7 	bl	800b8a2 <_I2CWrite>
 800bb54:	6138      	str	r0, [r7, #16]

    if( status_int ){
 800bb56:	693b      	ldr	r3, [r7, #16]
 800bb58:	2b00      	cmp	r3, #0
 800bb5a:	d002      	beq.n	800bb62 <VL53L0X_RdWord+0x2e>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800bb5c:	23ec      	movs	r3, #236	; 0xec
 800bb5e:	75fb      	strb	r3, [r7, #23]
        goto done;
 800bb60:	e017      	b.n	800bb92 <VL53L0X_RdWord+0x5e>
    }
    status_int = _I2CRead(Dev, _I2CBuffer, 2);
 800bb62:	2202      	movs	r2, #2
 800bb64:	490e      	ldr	r1, [pc, #56]	; (800bba0 <VL53L0X_RdWord+0x6c>)
 800bb66:	68f8      	ldr	r0, [r7, #12]
 800bb68:	f7ff feba 	bl	800b8e0 <_I2CRead>
 800bb6c:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800bb6e:	693b      	ldr	r3, [r7, #16]
 800bb70:	2b00      	cmp	r3, #0
 800bb72:	d002      	beq.n	800bb7a <VL53L0X_RdWord+0x46>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800bb74:	23ec      	movs	r3, #236	; 0xec
 800bb76:	75fb      	strb	r3, [r7, #23]
        goto done;
 800bb78:	e00b      	b.n	800bb92 <VL53L0X_RdWord+0x5e>
    }

    *data = ((uint16_t)_I2CBuffer[0]<<8) + (uint16_t)_I2CBuffer[1];
 800bb7a:	4b09      	ldr	r3, [pc, #36]	; (800bba0 <VL53L0X_RdWord+0x6c>)
 800bb7c:	781b      	ldrb	r3, [r3, #0]
 800bb7e:	b29b      	uxth	r3, r3
 800bb80:	021b      	lsls	r3, r3, #8
 800bb82:	b29a      	uxth	r2, r3
 800bb84:	4b06      	ldr	r3, [pc, #24]	; (800bba0 <VL53L0X_RdWord+0x6c>)
 800bb86:	785b      	ldrb	r3, [r3, #1]
 800bb88:	b29b      	uxth	r3, r3
 800bb8a:	4413      	add	r3, r2
 800bb8c:	b29a      	uxth	r2, r3
 800bb8e:	687b      	ldr	r3, [r7, #4]
 800bb90:	801a      	strh	r2, [r3, #0]
done:
    VL53L0X_PutI2cBus();
    return Status;
 800bb92:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800bb96:	4618      	mov	r0, r3
 800bb98:	3718      	adds	r7, #24
 800bb9a:	46bd      	mov	sp, r7
 800bb9c:	bd80      	pop	{r7, pc}
 800bb9e:	bf00      	nop
 800bba0:	200095f0 	.word	0x200095f0

0800bba4 <VL53L0X_RdDWord>:

VL53L0X_Error VL53L0X_RdDWord(VL53L0X_DEV Dev, uint8_t index, uint32_t *data) {
 800bba4:	b580      	push	{r7, lr}
 800bba6:	b086      	sub	sp, #24
 800bba8:	af00      	add	r7, sp, #0
 800bbaa:	60f8      	str	r0, [r7, #12]
 800bbac:	460b      	mov	r3, r1
 800bbae:	607a      	str	r2, [r7, #4]
 800bbb0:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800bbb2:	2300      	movs	r3, #0
 800bbb4:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 800bbb6:	f107 030b 	add.w	r3, r7, #11
 800bbba:	2201      	movs	r2, #1
 800bbbc:	4619      	mov	r1, r3
 800bbbe:	68f8      	ldr	r0, [r7, #12]
 800bbc0:	f7ff fe6f 	bl	800b8a2 <_I2CWrite>
 800bbc4:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800bbc6:	693b      	ldr	r3, [r7, #16]
 800bbc8:	2b00      	cmp	r3, #0
 800bbca:	d002      	beq.n	800bbd2 <VL53L0X_RdDWord+0x2e>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800bbcc:	23ec      	movs	r3, #236	; 0xec
 800bbce:	75fb      	strb	r3, [r7, #23]
        goto done;
 800bbd0:	e01b      	b.n	800bc0a <VL53L0X_RdDWord+0x66>
    }
    status_int = _I2CRead(Dev, _I2CBuffer, 4);
 800bbd2:	2204      	movs	r2, #4
 800bbd4:	4910      	ldr	r1, [pc, #64]	; (800bc18 <VL53L0X_RdDWord+0x74>)
 800bbd6:	68f8      	ldr	r0, [r7, #12]
 800bbd8:	f7ff fe82 	bl	800b8e0 <_I2CRead>
 800bbdc:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800bbde:	693b      	ldr	r3, [r7, #16]
 800bbe0:	2b00      	cmp	r3, #0
 800bbe2:	d002      	beq.n	800bbea <VL53L0X_RdDWord+0x46>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800bbe4:	23ec      	movs	r3, #236	; 0xec
 800bbe6:	75fb      	strb	r3, [r7, #23]
        goto done;
 800bbe8:	e00f      	b.n	800bc0a <VL53L0X_RdDWord+0x66>
    }

    *data = ((uint32_t)_I2CBuffer[0]<<24) + ((uint32_t)_I2CBuffer[1]<<16) + ((uint32_t)_I2CBuffer[2]<<8) + (uint32_t)_I2CBuffer[3];
 800bbea:	4b0b      	ldr	r3, [pc, #44]	; (800bc18 <VL53L0X_RdDWord+0x74>)
 800bbec:	781b      	ldrb	r3, [r3, #0]
 800bbee:	061a      	lsls	r2, r3, #24
 800bbf0:	4b09      	ldr	r3, [pc, #36]	; (800bc18 <VL53L0X_RdDWord+0x74>)
 800bbf2:	785b      	ldrb	r3, [r3, #1]
 800bbf4:	041b      	lsls	r3, r3, #16
 800bbf6:	441a      	add	r2, r3
 800bbf8:	4b07      	ldr	r3, [pc, #28]	; (800bc18 <VL53L0X_RdDWord+0x74>)
 800bbfa:	789b      	ldrb	r3, [r3, #2]
 800bbfc:	021b      	lsls	r3, r3, #8
 800bbfe:	4413      	add	r3, r2
 800bc00:	4a05      	ldr	r2, [pc, #20]	; (800bc18 <VL53L0X_RdDWord+0x74>)
 800bc02:	78d2      	ldrb	r2, [r2, #3]
 800bc04:	441a      	add	r2, r3
 800bc06:	687b      	ldr	r3, [r7, #4]
 800bc08:	601a      	str	r2, [r3, #0]

done:
    VL53L0X_PutI2cBus();
    return Status;
 800bc0a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800bc0e:	4618      	mov	r0, r3
 800bc10:	3718      	adds	r7, #24
 800bc12:	46bd      	mov	sp, r7
 800bc14:	bd80      	pop	{r7, pc}
 800bc16:	bf00      	nop
 800bc18:	200095f0 	.word	0x200095f0

0800bc1c <VL53L0X_PollingDelay>:

VL53L0X_Error VL53L0X_PollingDelay(VL53L0X_DEV Dev) {
 800bc1c:	b580      	push	{r7, lr}
 800bc1e:	b084      	sub	sp, #16
 800bc20:	af00      	add	r7, sp, #0
 800bc22:	6078      	str	r0, [r7, #4]
    VL53L0X_Error status = VL53L0X_ERROR_NONE;
 800bc24:	2300      	movs	r3, #0
 800bc26:	73fb      	strb	r3, [r7, #15]

    // do nothing
    VL53L0X_OsDelay();
 800bc28:	2002      	movs	r0, #2
 800bc2a:	f7f6 fb47 	bl	80022bc <HAL_Delay>
    return status;
 800bc2e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800bc32:	4618      	mov	r0, r3
 800bc34:	3710      	adds	r7, #16
 800bc36:	46bd      	mov	sp, r7
 800bc38:	bd80      	pop	{r7, pc}
	...

0800bc3c <__errno>:
 800bc3c:	4b01      	ldr	r3, [pc, #4]	; (800bc44 <__errno+0x8>)
 800bc3e:	6818      	ldr	r0, [r3, #0]
 800bc40:	4770      	bx	lr
 800bc42:	bf00      	nop
 800bc44:	20008f54 	.word	0x20008f54

0800bc48 <__libc_init_array>:
 800bc48:	b570      	push	{r4, r5, r6, lr}
 800bc4a:	4d0d      	ldr	r5, [pc, #52]	; (800bc80 <__libc_init_array+0x38>)
 800bc4c:	4c0d      	ldr	r4, [pc, #52]	; (800bc84 <__libc_init_array+0x3c>)
 800bc4e:	1b64      	subs	r4, r4, r5
 800bc50:	10a4      	asrs	r4, r4, #2
 800bc52:	2600      	movs	r6, #0
 800bc54:	42a6      	cmp	r6, r4
 800bc56:	d109      	bne.n	800bc6c <__libc_init_array+0x24>
 800bc58:	4d0b      	ldr	r5, [pc, #44]	; (800bc88 <__libc_init_array+0x40>)
 800bc5a:	4c0c      	ldr	r4, [pc, #48]	; (800bc8c <__libc_init_array+0x44>)
 800bc5c:	f002 ff0a 	bl	800ea74 <_init>
 800bc60:	1b64      	subs	r4, r4, r5
 800bc62:	10a4      	asrs	r4, r4, #2
 800bc64:	2600      	movs	r6, #0
 800bc66:	42a6      	cmp	r6, r4
 800bc68:	d105      	bne.n	800bc76 <__libc_init_array+0x2e>
 800bc6a:	bd70      	pop	{r4, r5, r6, pc}
 800bc6c:	f855 3b04 	ldr.w	r3, [r5], #4
 800bc70:	4798      	blx	r3
 800bc72:	3601      	adds	r6, #1
 800bc74:	e7ee      	b.n	800bc54 <__libc_init_array+0xc>
 800bc76:	f855 3b04 	ldr.w	r3, [r5], #4
 800bc7a:	4798      	blx	r3
 800bc7c:	3601      	adds	r6, #1
 800bc7e:	e7f2      	b.n	800bc66 <__libc_init_array+0x1e>
 800bc80:	0800f06c 	.word	0x0800f06c
 800bc84:	0800f06c 	.word	0x0800f06c
 800bc88:	0800f06c 	.word	0x0800f06c
 800bc8c:	0800f070 	.word	0x0800f070

0800bc90 <memcpy>:
 800bc90:	440a      	add	r2, r1
 800bc92:	4291      	cmp	r1, r2
 800bc94:	f100 33ff 	add.w	r3, r0, #4294967295
 800bc98:	d100      	bne.n	800bc9c <memcpy+0xc>
 800bc9a:	4770      	bx	lr
 800bc9c:	b510      	push	{r4, lr}
 800bc9e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bca2:	f803 4f01 	strb.w	r4, [r3, #1]!
 800bca6:	4291      	cmp	r1, r2
 800bca8:	d1f9      	bne.n	800bc9e <memcpy+0xe>
 800bcaa:	bd10      	pop	{r4, pc}

0800bcac <memset>:
 800bcac:	4402      	add	r2, r0
 800bcae:	4603      	mov	r3, r0
 800bcb0:	4293      	cmp	r3, r2
 800bcb2:	d100      	bne.n	800bcb6 <memset+0xa>
 800bcb4:	4770      	bx	lr
 800bcb6:	f803 1b01 	strb.w	r1, [r3], #1
 800bcba:	e7f9      	b.n	800bcb0 <memset+0x4>

0800bcbc <__cvt>:
 800bcbc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800bcc0:	ec55 4b10 	vmov	r4, r5, d0
 800bcc4:	2d00      	cmp	r5, #0
 800bcc6:	460e      	mov	r6, r1
 800bcc8:	4619      	mov	r1, r3
 800bcca:	462b      	mov	r3, r5
 800bccc:	bfbb      	ittet	lt
 800bcce:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800bcd2:	461d      	movlt	r5, r3
 800bcd4:	2300      	movge	r3, #0
 800bcd6:	232d      	movlt	r3, #45	; 0x2d
 800bcd8:	700b      	strb	r3, [r1, #0]
 800bcda:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800bcdc:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800bce0:	4691      	mov	r9, r2
 800bce2:	f023 0820 	bic.w	r8, r3, #32
 800bce6:	bfbc      	itt	lt
 800bce8:	4622      	movlt	r2, r4
 800bcea:	4614      	movlt	r4, r2
 800bcec:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800bcf0:	d005      	beq.n	800bcfe <__cvt+0x42>
 800bcf2:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800bcf6:	d100      	bne.n	800bcfa <__cvt+0x3e>
 800bcf8:	3601      	adds	r6, #1
 800bcfa:	2102      	movs	r1, #2
 800bcfc:	e000      	b.n	800bd00 <__cvt+0x44>
 800bcfe:	2103      	movs	r1, #3
 800bd00:	ab03      	add	r3, sp, #12
 800bd02:	9301      	str	r3, [sp, #4]
 800bd04:	ab02      	add	r3, sp, #8
 800bd06:	9300      	str	r3, [sp, #0]
 800bd08:	ec45 4b10 	vmov	d0, r4, r5
 800bd0c:	4653      	mov	r3, sl
 800bd0e:	4632      	mov	r2, r6
 800bd10:	f000 fcf2 	bl	800c6f8 <_dtoa_r>
 800bd14:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800bd18:	4607      	mov	r7, r0
 800bd1a:	d102      	bne.n	800bd22 <__cvt+0x66>
 800bd1c:	f019 0f01 	tst.w	r9, #1
 800bd20:	d022      	beq.n	800bd68 <__cvt+0xac>
 800bd22:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800bd26:	eb07 0906 	add.w	r9, r7, r6
 800bd2a:	d110      	bne.n	800bd4e <__cvt+0x92>
 800bd2c:	783b      	ldrb	r3, [r7, #0]
 800bd2e:	2b30      	cmp	r3, #48	; 0x30
 800bd30:	d10a      	bne.n	800bd48 <__cvt+0x8c>
 800bd32:	2200      	movs	r2, #0
 800bd34:	2300      	movs	r3, #0
 800bd36:	4620      	mov	r0, r4
 800bd38:	4629      	mov	r1, r5
 800bd3a:	f7f4 fee5 	bl	8000b08 <__aeabi_dcmpeq>
 800bd3e:	b918      	cbnz	r0, 800bd48 <__cvt+0x8c>
 800bd40:	f1c6 0601 	rsb	r6, r6, #1
 800bd44:	f8ca 6000 	str.w	r6, [sl]
 800bd48:	f8da 3000 	ldr.w	r3, [sl]
 800bd4c:	4499      	add	r9, r3
 800bd4e:	2200      	movs	r2, #0
 800bd50:	2300      	movs	r3, #0
 800bd52:	4620      	mov	r0, r4
 800bd54:	4629      	mov	r1, r5
 800bd56:	f7f4 fed7 	bl	8000b08 <__aeabi_dcmpeq>
 800bd5a:	b108      	cbz	r0, 800bd60 <__cvt+0xa4>
 800bd5c:	f8cd 900c 	str.w	r9, [sp, #12]
 800bd60:	2230      	movs	r2, #48	; 0x30
 800bd62:	9b03      	ldr	r3, [sp, #12]
 800bd64:	454b      	cmp	r3, r9
 800bd66:	d307      	bcc.n	800bd78 <__cvt+0xbc>
 800bd68:	9b03      	ldr	r3, [sp, #12]
 800bd6a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800bd6c:	1bdb      	subs	r3, r3, r7
 800bd6e:	4638      	mov	r0, r7
 800bd70:	6013      	str	r3, [r2, #0]
 800bd72:	b004      	add	sp, #16
 800bd74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bd78:	1c59      	adds	r1, r3, #1
 800bd7a:	9103      	str	r1, [sp, #12]
 800bd7c:	701a      	strb	r2, [r3, #0]
 800bd7e:	e7f0      	b.n	800bd62 <__cvt+0xa6>

0800bd80 <__exponent>:
 800bd80:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800bd82:	4603      	mov	r3, r0
 800bd84:	2900      	cmp	r1, #0
 800bd86:	bfb8      	it	lt
 800bd88:	4249      	neglt	r1, r1
 800bd8a:	f803 2b02 	strb.w	r2, [r3], #2
 800bd8e:	bfb4      	ite	lt
 800bd90:	222d      	movlt	r2, #45	; 0x2d
 800bd92:	222b      	movge	r2, #43	; 0x2b
 800bd94:	2909      	cmp	r1, #9
 800bd96:	7042      	strb	r2, [r0, #1]
 800bd98:	dd2a      	ble.n	800bdf0 <__exponent+0x70>
 800bd9a:	f10d 0407 	add.w	r4, sp, #7
 800bd9e:	46a4      	mov	ip, r4
 800bda0:	270a      	movs	r7, #10
 800bda2:	46a6      	mov	lr, r4
 800bda4:	460a      	mov	r2, r1
 800bda6:	fb91 f6f7 	sdiv	r6, r1, r7
 800bdaa:	fb07 1516 	mls	r5, r7, r6, r1
 800bdae:	3530      	adds	r5, #48	; 0x30
 800bdb0:	2a63      	cmp	r2, #99	; 0x63
 800bdb2:	f104 34ff 	add.w	r4, r4, #4294967295
 800bdb6:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800bdba:	4631      	mov	r1, r6
 800bdbc:	dcf1      	bgt.n	800bda2 <__exponent+0x22>
 800bdbe:	3130      	adds	r1, #48	; 0x30
 800bdc0:	f1ae 0502 	sub.w	r5, lr, #2
 800bdc4:	f804 1c01 	strb.w	r1, [r4, #-1]
 800bdc8:	1c44      	adds	r4, r0, #1
 800bdca:	4629      	mov	r1, r5
 800bdcc:	4561      	cmp	r1, ip
 800bdce:	d30a      	bcc.n	800bde6 <__exponent+0x66>
 800bdd0:	f10d 0209 	add.w	r2, sp, #9
 800bdd4:	eba2 020e 	sub.w	r2, r2, lr
 800bdd8:	4565      	cmp	r5, ip
 800bdda:	bf88      	it	hi
 800bddc:	2200      	movhi	r2, #0
 800bdde:	4413      	add	r3, r2
 800bde0:	1a18      	subs	r0, r3, r0
 800bde2:	b003      	add	sp, #12
 800bde4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bde6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800bdea:	f804 2f01 	strb.w	r2, [r4, #1]!
 800bdee:	e7ed      	b.n	800bdcc <__exponent+0x4c>
 800bdf0:	2330      	movs	r3, #48	; 0x30
 800bdf2:	3130      	adds	r1, #48	; 0x30
 800bdf4:	7083      	strb	r3, [r0, #2]
 800bdf6:	70c1      	strb	r1, [r0, #3]
 800bdf8:	1d03      	adds	r3, r0, #4
 800bdfa:	e7f1      	b.n	800bde0 <__exponent+0x60>

0800bdfc <_printf_float>:
 800bdfc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800be00:	ed2d 8b02 	vpush	{d8}
 800be04:	b08d      	sub	sp, #52	; 0x34
 800be06:	460c      	mov	r4, r1
 800be08:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800be0c:	4616      	mov	r6, r2
 800be0e:	461f      	mov	r7, r3
 800be10:	4605      	mov	r5, r0
 800be12:	f001 fa5f 	bl	800d2d4 <_localeconv_r>
 800be16:	f8d0 a000 	ldr.w	sl, [r0]
 800be1a:	4650      	mov	r0, sl
 800be1c:	f7f4 f9f8 	bl	8000210 <strlen>
 800be20:	2300      	movs	r3, #0
 800be22:	930a      	str	r3, [sp, #40]	; 0x28
 800be24:	6823      	ldr	r3, [r4, #0]
 800be26:	9305      	str	r3, [sp, #20]
 800be28:	f8d8 3000 	ldr.w	r3, [r8]
 800be2c:	f894 b018 	ldrb.w	fp, [r4, #24]
 800be30:	3307      	adds	r3, #7
 800be32:	f023 0307 	bic.w	r3, r3, #7
 800be36:	f103 0208 	add.w	r2, r3, #8
 800be3a:	f8c8 2000 	str.w	r2, [r8]
 800be3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be42:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800be46:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800be4a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800be4e:	9307      	str	r3, [sp, #28]
 800be50:	f8cd 8018 	str.w	r8, [sp, #24]
 800be54:	ee08 0a10 	vmov	s16, r0
 800be58:	4b9f      	ldr	r3, [pc, #636]	; (800c0d8 <_printf_float+0x2dc>)
 800be5a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800be5e:	f04f 32ff 	mov.w	r2, #4294967295
 800be62:	f7f4 fe83 	bl	8000b6c <__aeabi_dcmpun>
 800be66:	bb88      	cbnz	r0, 800becc <_printf_float+0xd0>
 800be68:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800be6c:	4b9a      	ldr	r3, [pc, #616]	; (800c0d8 <_printf_float+0x2dc>)
 800be6e:	f04f 32ff 	mov.w	r2, #4294967295
 800be72:	f7f4 fe5d 	bl	8000b30 <__aeabi_dcmple>
 800be76:	bb48      	cbnz	r0, 800becc <_printf_float+0xd0>
 800be78:	2200      	movs	r2, #0
 800be7a:	2300      	movs	r3, #0
 800be7c:	4640      	mov	r0, r8
 800be7e:	4649      	mov	r1, r9
 800be80:	f7f4 fe4c 	bl	8000b1c <__aeabi_dcmplt>
 800be84:	b110      	cbz	r0, 800be8c <_printf_float+0x90>
 800be86:	232d      	movs	r3, #45	; 0x2d
 800be88:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800be8c:	4b93      	ldr	r3, [pc, #588]	; (800c0dc <_printf_float+0x2e0>)
 800be8e:	4894      	ldr	r0, [pc, #592]	; (800c0e0 <_printf_float+0x2e4>)
 800be90:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800be94:	bf94      	ite	ls
 800be96:	4698      	movls	r8, r3
 800be98:	4680      	movhi	r8, r0
 800be9a:	2303      	movs	r3, #3
 800be9c:	6123      	str	r3, [r4, #16]
 800be9e:	9b05      	ldr	r3, [sp, #20]
 800bea0:	f023 0204 	bic.w	r2, r3, #4
 800bea4:	6022      	str	r2, [r4, #0]
 800bea6:	f04f 0900 	mov.w	r9, #0
 800beaa:	9700      	str	r7, [sp, #0]
 800beac:	4633      	mov	r3, r6
 800beae:	aa0b      	add	r2, sp, #44	; 0x2c
 800beb0:	4621      	mov	r1, r4
 800beb2:	4628      	mov	r0, r5
 800beb4:	f000 f9d8 	bl	800c268 <_printf_common>
 800beb8:	3001      	adds	r0, #1
 800beba:	f040 8090 	bne.w	800bfde <_printf_float+0x1e2>
 800bebe:	f04f 30ff 	mov.w	r0, #4294967295
 800bec2:	b00d      	add	sp, #52	; 0x34
 800bec4:	ecbd 8b02 	vpop	{d8}
 800bec8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800becc:	4642      	mov	r2, r8
 800bece:	464b      	mov	r3, r9
 800bed0:	4640      	mov	r0, r8
 800bed2:	4649      	mov	r1, r9
 800bed4:	f7f4 fe4a 	bl	8000b6c <__aeabi_dcmpun>
 800bed8:	b140      	cbz	r0, 800beec <_printf_float+0xf0>
 800beda:	464b      	mov	r3, r9
 800bedc:	2b00      	cmp	r3, #0
 800bede:	bfbc      	itt	lt
 800bee0:	232d      	movlt	r3, #45	; 0x2d
 800bee2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800bee6:	487f      	ldr	r0, [pc, #508]	; (800c0e4 <_printf_float+0x2e8>)
 800bee8:	4b7f      	ldr	r3, [pc, #508]	; (800c0e8 <_printf_float+0x2ec>)
 800beea:	e7d1      	b.n	800be90 <_printf_float+0x94>
 800beec:	6863      	ldr	r3, [r4, #4]
 800beee:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800bef2:	9206      	str	r2, [sp, #24]
 800bef4:	1c5a      	adds	r2, r3, #1
 800bef6:	d13f      	bne.n	800bf78 <_printf_float+0x17c>
 800bef8:	2306      	movs	r3, #6
 800befa:	6063      	str	r3, [r4, #4]
 800befc:	9b05      	ldr	r3, [sp, #20]
 800befe:	6861      	ldr	r1, [r4, #4]
 800bf00:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800bf04:	2300      	movs	r3, #0
 800bf06:	9303      	str	r3, [sp, #12]
 800bf08:	ab0a      	add	r3, sp, #40	; 0x28
 800bf0a:	e9cd b301 	strd	fp, r3, [sp, #4]
 800bf0e:	ab09      	add	r3, sp, #36	; 0x24
 800bf10:	ec49 8b10 	vmov	d0, r8, r9
 800bf14:	9300      	str	r3, [sp, #0]
 800bf16:	6022      	str	r2, [r4, #0]
 800bf18:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800bf1c:	4628      	mov	r0, r5
 800bf1e:	f7ff fecd 	bl	800bcbc <__cvt>
 800bf22:	9b06      	ldr	r3, [sp, #24]
 800bf24:	9909      	ldr	r1, [sp, #36]	; 0x24
 800bf26:	2b47      	cmp	r3, #71	; 0x47
 800bf28:	4680      	mov	r8, r0
 800bf2a:	d108      	bne.n	800bf3e <_printf_float+0x142>
 800bf2c:	1cc8      	adds	r0, r1, #3
 800bf2e:	db02      	blt.n	800bf36 <_printf_float+0x13a>
 800bf30:	6863      	ldr	r3, [r4, #4]
 800bf32:	4299      	cmp	r1, r3
 800bf34:	dd41      	ble.n	800bfba <_printf_float+0x1be>
 800bf36:	f1ab 0b02 	sub.w	fp, fp, #2
 800bf3a:	fa5f fb8b 	uxtb.w	fp, fp
 800bf3e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800bf42:	d820      	bhi.n	800bf86 <_printf_float+0x18a>
 800bf44:	3901      	subs	r1, #1
 800bf46:	465a      	mov	r2, fp
 800bf48:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800bf4c:	9109      	str	r1, [sp, #36]	; 0x24
 800bf4e:	f7ff ff17 	bl	800bd80 <__exponent>
 800bf52:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800bf54:	1813      	adds	r3, r2, r0
 800bf56:	2a01      	cmp	r2, #1
 800bf58:	4681      	mov	r9, r0
 800bf5a:	6123      	str	r3, [r4, #16]
 800bf5c:	dc02      	bgt.n	800bf64 <_printf_float+0x168>
 800bf5e:	6822      	ldr	r2, [r4, #0]
 800bf60:	07d2      	lsls	r2, r2, #31
 800bf62:	d501      	bpl.n	800bf68 <_printf_float+0x16c>
 800bf64:	3301      	adds	r3, #1
 800bf66:	6123      	str	r3, [r4, #16]
 800bf68:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800bf6c:	2b00      	cmp	r3, #0
 800bf6e:	d09c      	beq.n	800beaa <_printf_float+0xae>
 800bf70:	232d      	movs	r3, #45	; 0x2d
 800bf72:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bf76:	e798      	b.n	800beaa <_printf_float+0xae>
 800bf78:	9a06      	ldr	r2, [sp, #24]
 800bf7a:	2a47      	cmp	r2, #71	; 0x47
 800bf7c:	d1be      	bne.n	800befc <_printf_float+0x100>
 800bf7e:	2b00      	cmp	r3, #0
 800bf80:	d1bc      	bne.n	800befc <_printf_float+0x100>
 800bf82:	2301      	movs	r3, #1
 800bf84:	e7b9      	b.n	800befa <_printf_float+0xfe>
 800bf86:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800bf8a:	d118      	bne.n	800bfbe <_printf_float+0x1c2>
 800bf8c:	2900      	cmp	r1, #0
 800bf8e:	6863      	ldr	r3, [r4, #4]
 800bf90:	dd0b      	ble.n	800bfaa <_printf_float+0x1ae>
 800bf92:	6121      	str	r1, [r4, #16]
 800bf94:	b913      	cbnz	r3, 800bf9c <_printf_float+0x1a0>
 800bf96:	6822      	ldr	r2, [r4, #0]
 800bf98:	07d0      	lsls	r0, r2, #31
 800bf9a:	d502      	bpl.n	800bfa2 <_printf_float+0x1a6>
 800bf9c:	3301      	adds	r3, #1
 800bf9e:	440b      	add	r3, r1
 800bfa0:	6123      	str	r3, [r4, #16]
 800bfa2:	65a1      	str	r1, [r4, #88]	; 0x58
 800bfa4:	f04f 0900 	mov.w	r9, #0
 800bfa8:	e7de      	b.n	800bf68 <_printf_float+0x16c>
 800bfaa:	b913      	cbnz	r3, 800bfb2 <_printf_float+0x1b6>
 800bfac:	6822      	ldr	r2, [r4, #0]
 800bfae:	07d2      	lsls	r2, r2, #31
 800bfb0:	d501      	bpl.n	800bfb6 <_printf_float+0x1ba>
 800bfb2:	3302      	adds	r3, #2
 800bfb4:	e7f4      	b.n	800bfa0 <_printf_float+0x1a4>
 800bfb6:	2301      	movs	r3, #1
 800bfb8:	e7f2      	b.n	800bfa0 <_printf_float+0x1a4>
 800bfba:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800bfbe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bfc0:	4299      	cmp	r1, r3
 800bfc2:	db05      	blt.n	800bfd0 <_printf_float+0x1d4>
 800bfc4:	6823      	ldr	r3, [r4, #0]
 800bfc6:	6121      	str	r1, [r4, #16]
 800bfc8:	07d8      	lsls	r0, r3, #31
 800bfca:	d5ea      	bpl.n	800bfa2 <_printf_float+0x1a6>
 800bfcc:	1c4b      	adds	r3, r1, #1
 800bfce:	e7e7      	b.n	800bfa0 <_printf_float+0x1a4>
 800bfd0:	2900      	cmp	r1, #0
 800bfd2:	bfd4      	ite	le
 800bfd4:	f1c1 0202 	rsble	r2, r1, #2
 800bfd8:	2201      	movgt	r2, #1
 800bfda:	4413      	add	r3, r2
 800bfdc:	e7e0      	b.n	800bfa0 <_printf_float+0x1a4>
 800bfde:	6823      	ldr	r3, [r4, #0]
 800bfe0:	055a      	lsls	r2, r3, #21
 800bfe2:	d407      	bmi.n	800bff4 <_printf_float+0x1f8>
 800bfe4:	6923      	ldr	r3, [r4, #16]
 800bfe6:	4642      	mov	r2, r8
 800bfe8:	4631      	mov	r1, r6
 800bfea:	4628      	mov	r0, r5
 800bfec:	47b8      	blx	r7
 800bfee:	3001      	adds	r0, #1
 800bff0:	d12c      	bne.n	800c04c <_printf_float+0x250>
 800bff2:	e764      	b.n	800bebe <_printf_float+0xc2>
 800bff4:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800bff8:	f240 80e0 	bls.w	800c1bc <_printf_float+0x3c0>
 800bffc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800c000:	2200      	movs	r2, #0
 800c002:	2300      	movs	r3, #0
 800c004:	f7f4 fd80 	bl	8000b08 <__aeabi_dcmpeq>
 800c008:	2800      	cmp	r0, #0
 800c00a:	d034      	beq.n	800c076 <_printf_float+0x27a>
 800c00c:	4a37      	ldr	r2, [pc, #220]	; (800c0ec <_printf_float+0x2f0>)
 800c00e:	2301      	movs	r3, #1
 800c010:	4631      	mov	r1, r6
 800c012:	4628      	mov	r0, r5
 800c014:	47b8      	blx	r7
 800c016:	3001      	adds	r0, #1
 800c018:	f43f af51 	beq.w	800bebe <_printf_float+0xc2>
 800c01c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c020:	429a      	cmp	r2, r3
 800c022:	db02      	blt.n	800c02a <_printf_float+0x22e>
 800c024:	6823      	ldr	r3, [r4, #0]
 800c026:	07d8      	lsls	r0, r3, #31
 800c028:	d510      	bpl.n	800c04c <_printf_float+0x250>
 800c02a:	ee18 3a10 	vmov	r3, s16
 800c02e:	4652      	mov	r2, sl
 800c030:	4631      	mov	r1, r6
 800c032:	4628      	mov	r0, r5
 800c034:	47b8      	blx	r7
 800c036:	3001      	adds	r0, #1
 800c038:	f43f af41 	beq.w	800bebe <_printf_float+0xc2>
 800c03c:	f04f 0800 	mov.w	r8, #0
 800c040:	f104 091a 	add.w	r9, r4, #26
 800c044:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c046:	3b01      	subs	r3, #1
 800c048:	4543      	cmp	r3, r8
 800c04a:	dc09      	bgt.n	800c060 <_printf_float+0x264>
 800c04c:	6823      	ldr	r3, [r4, #0]
 800c04e:	079b      	lsls	r3, r3, #30
 800c050:	f100 8105 	bmi.w	800c25e <_printf_float+0x462>
 800c054:	68e0      	ldr	r0, [r4, #12]
 800c056:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c058:	4298      	cmp	r0, r3
 800c05a:	bfb8      	it	lt
 800c05c:	4618      	movlt	r0, r3
 800c05e:	e730      	b.n	800bec2 <_printf_float+0xc6>
 800c060:	2301      	movs	r3, #1
 800c062:	464a      	mov	r2, r9
 800c064:	4631      	mov	r1, r6
 800c066:	4628      	mov	r0, r5
 800c068:	47b8      	blx	r7
 800c06a:	3001      	adds	r0, #1
 800c06c:	f43f af27 	beq.w	800bebe <_printf_float+0xc2>
 800c070:	f108 0801 	add.w	r8, r8, #1
 800c074:	e7e6      	b.n	800c044 <_printf_float+0x248>
 800c076:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c078:	2b00      	cmp	r3, #0
 800c07a:	dc39      	bgt.n	800c0f0 <_printf_float+0x2f4>
 800c07c:	4a1b      	ldr	r2, [pc, #108]	; (800c0ec <_printf_float+0x2f0>)
 800c07e:	2301      	movs	r3, #1
 800c080:	4631      	mov	r1, r6
 800c082:	4628      	mov	r0, r5
 800c084:	47b8      	blx	r7
 800c086:	3001      	adds	r0, #1
 800c088:	f43f af19 	beq.w	800bebe <_printf_float+0xc2>
 800c08c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c090:	4313      	orrs	r3, r2
 800c092:	d102      	bne.n	800c09a <_printf_float+0x29e>
 800c094:	6823      	ldr	r3, [r4, #0]
 800c096:	07d9      	lsls	r1, r3, #31
 800c098:	d5d8      	bpl.n	800c04c <_printf_float+0x250>
 800c09a:	ee18 3a10 	vmov	r3, s16
 800c09e:	4652      	mov	r2, sl
 800c0a0:	4631      	mov	r1, r6
 800c0a2:	4628      	mov	r0, r5
 800c0a4:	47b8      	blx	r7
 800c0a6:	3001      	adds	r0, #1
 800c0a8:	f43f af09 	beq.w	800bebe <_printf_float+0xc2>
 800c0ac:	f04f 0900 	mov.w	r9, #0
 800c0b0:	f104 0a1a 	add.w	sl, r4, #26
 800c0b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c0b6:	425b      	negs	r3, r3
 800c0b8:	454b      	cmp	r3, r9
 800c0ba:	dc01      	bgt.n	800c0c0 <_printf_float+0x2c4>
 800c0bc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c0be:	e792      	b.n	800bfe6 <_printf_float+0x1ea>
 800c0c0:	2301      	movs	r3, #1
 800c0c2:	4652      	mov	r2, sl
 800c0c4:	4631      	mov	r1, r6
 800c0c6:	4628      	mov	r0, r5
 800c0c8:	47b8      	blx	r7
 800c0ca:	3001      	adds	r0, #1
 800c0cc:	f43f aef7 	beq.w	800bebe <_printf_float+0xc2>
 800c0d0:	f109 0901 	add.w	r9, r9, #1
 800c0d4:	e7ee      	b.n	800c0b4 <_printf_float+0x2b8>
 800c0d6:	bf00      	nop
 800c0d8:	7fefffff 	.word	0x7fefffff
 800c0dc:	0800ec90 	.word	0x0800ec90
 800c0e0:	0800ec94 	.word	0x0800ec94
 800c0e4:	0800ec9c 	.word	0x0800ec9c
 800c0e8:	0800ec98 	.word	0x0800ec98
 800c0ec:	0800eca0 	.word	0x0800eca0
 800c0f0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c0f2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800c0f4:	429a      	cmp	r2, r3
 800c0f6:	bfa8      	it	ge
 800c0f8:	461a      	movge	r2, r3
 800c0fa:	2a00      	cmp	r2, #0
 800c0fc:	4691      	mov	r9, r2
 800c0fe:	dc37      	bgt.n	800c170 <_printf_float+0x374>
 800c100:	f04f 0b00 	mov.w	fp, #0
 800c104:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c108:	f104 021a 	add.w	r2, r4, #26
 800c10c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800c10e:	9305      	str	r3, [sp, #20]
 800c110:	eba3 0309 	sub.w	r3, r3, r9
 800c114:	455b      	cmp	r3, fp
 800c116:	dc33      	bgt.n	800c180 <_printf_float+0x384>
 800c118:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c11c:	429a      	cmp	r2, r3
 800c11e:	db3b      	blt.n	800c198 <_printf_float+0x39c>
 800c120:	6823      	ldr	r3, [r4, #0]
 800c122:	07da      	lsls	r2, r3, #31
 800c124:	d438      	bmi.n	800c198 <_printf_float+0x39c>
 800c126:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c128:	9a05      	ldr	r2, [sp, #20]
 800c12a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c12c:	1a9a      	subs	r2, r3, r2
 800c12e:	eba3 0901 	sub.w	r9, r3, r1
 800c132:	4591      	cmp	r9, r2
 800c134:	bfa8      	it	ge
 800c136:	4691      	movge	r9, r2
 800c138:	f1b9 0f00 	cmp.w	r9, #0
 800c13c:	dc35      	bgt.n	800c1aa <_printf_float+0x3ae>
 800c13e:	f04f 0800 	mov.w	r8, #0
 800c142:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c146:	f104 0a1a 	add.w	sl, r4, #26
 800c14a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c14e:	1a9b      	subs	r3, r3, r2
 800c150:	eba3 0309 	sub.w	r3, r3, r9
 800c154:	4543      	cmp	r3, r8
 800c156:	f77f af79 	ble.w	800c04c <_printf_float+0x250>
 800c15a:	2301      	movs	r3, #1
 800c15c:	4652      	mov	r2, sl
 800c15e:	4631      	mov	r1, r6
 800c160:	4628      	mov	r0, r5
 800c162:	47b8      	blx	r7
 800c164:	3001      	adds	r0, #1
 800c166:	f43f aeaa 	beq.w	800bebe <_printf_float+0xc2>
 800c16a:	f108 0801 	add.w	r8, r8, #1
 800c16e:	e7ec      	b.n	800c14a <_printf_float+0x34e>
 800c170:	4613      	mov	r3, r2
 800c172:	4631      	mov	r1, r6
 800c174:	4642      	mov	r2, r8
 800c176:	4628      	mov	r0, r5
 800c178:	47b8      	blx	r7
 800c17a:	3001      	adds	r0, #1
 800c17c:	d1c0      	bne.n	800c100 <_printf_float+0x304>
 800c17e:	e69e      	b.n	800bebe <_printf_float+0xc2>
 800c180:	2301      	movs	r3, #1
 800c182:	4631      	mov	r1, r6
 800c184:	4628      	mov	r0, r5
 800c186:	9205      	str	r2, [sp, #20]
 800c188:	47b8      	blx	r7
 800c18a:	3001      	adds	r0, #1
 800c18c:	f43f ae97 	beq.w	800bebe <_printf_float+0xc2>
 800c190:	9a05      	ldr	r2, [sp, #20]
 800c192:	f10b 0b01 	add.w	fp, fp, #1
 800c196:	e7b9      	b.n	800c10c <_printf_float+0x310>
 800c198:	ee18 3a10 	vmov	r3, s16
 800c19c:	4652      	mov	r2, sl
 800c19e:	4631      	mov	r1, r6
 800c1a0:	4628      	mov	r0, r5
 800c1a2:	47b8      	blx	r7
 800c1a4:	3001      	adds	r0, #1
 800c1a6:	d1be      	bne.n	800c126 <_printf_float+0x32a>
 800c1a8:	e689      	b.n	800bebe <_printf_float+0xc2>
 800c1aa:	9a05      	ldr	r2, [sp, #20]
 800c1ac:	464b      	mov	r3, r9
 800c1ae:	4442      	add	r2, r8
 800c1b0:	4631      	mov	r1, r6
 800c1b2:	4628      	mov	r0, r5
 800c1b4:	47b8      	blx	r7
 800c1b6:	3001      	adds	r0, #1
 800c1b8:	d1c1      	bne.n	800c13e <_printf_float+0x342>
 800c1ba:	e680      	b.n	800bebe <_printf_float+0xc2>
 800c1bc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c1be:	2a01      	cmp	r2, #1
 800c1c0:	dc01      	bgt.n	800c1c6 <_printf_float+0x3ca>
 800c1c2:	07db      	lsls	r3, r3, #31
 800c1c4:	d538      	bpl.n	800c238 <_printf_float+0x43c>
 800c1c6:	2301      	movs	r3, #1
 800c1c8:	4642      	mov	r2, r8
 800c1ca:	4631      	mov	r1, r6
 800c1cc:	4628      	mov	r0, r5
 800c1ce:	47b8      	blx	r7
 800c1d0:	3001      	adds	r0, #1
 800c1d2:	f43f ae74 	beq.w	800bebe <_printf_float+0xc2>
 800c1d6:	ee18 3a10 	vmov	r3, s16
 800c1da:	4652      	mov	r2, sl
 800c1dc:	4631      	mov	r1, r6
 800c1de:	4628      	mov	r0, r5
 800c1e0:	47b8      	blx	r7
 800c1e2:	3001      	adds	r0, #1
 800c1e4:	f43f ae6b 	beq.w	800bebe <_printf_float+0xc2>
 800c1e8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800c1ec:	2200      	movs	r2, #0
 800c1ee:	2300      	movs	r3, #0
 800c1f0:	f7f4 fc8a 	bl	8000b08 <__aeabi_dcmpeq>
 800c1f4:	b9d8      	cbnz	r0, 800c22e <_printf_float+0x432>
 800c1f6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c1f8:	f108 0201 	add.w	r2, r8, #1
 800c1fc:	3b01      	subs	r3, #1
 800c1fe:	4631      	mov	r1, r6
 800c200:	4628      	mov	r0, r5
 800c202:	47b8      	blx	r7
 800c204:	3001      	adds	r0, #1
 800c206:	d10e      	bne.n	800c226 <_printf_float+0x42a>
 800c208:	e659      	b.n	800bebe <_printf_float+0xc2>
 800c20a:	2301      	movs	r3, #1
 800c20c:	4652      	mov	r2, sl
 800c20e:	4631      	mov	r1, r6
 800c210:	4628      	mov	r0, r5
 800c212:	47b8      	blx	r7
 800c214:	3001      	adds	r0, #1
 800c216:	f43f ae52 	beq.w	800bebe <_printf_float+0xc2>
 800c21a:	f108 0801 	add.w	r8, r8, #1
 800c21e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c220:	3b01      	subs	r3, #1
 800c222:	4543      	cmp	r3, r8
 800c224:	dcf1      	bgt.n	800c20a <_printf_float+0x40e>
 800c226:	464b      	mov	r3, r9
 800c228:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800c22c:	e6dc      	b.n	800bfe8 <_printf_float+0x1ec>
 800c22e:	f04f 0800 	mov.w	r8, #0
 800c232:	f104 0a1a 	add.w	sl, r4, #26
 800c236:	e7f2      	b.n	800c21e <_printf_float+0x422>
 800c238:	2301      	movs	r3, #1
 800c23a:	4642      	mov	r2, r8
 800c23c:	e7df      	b.n	800c1fe <_printf_float+0x402>
 800c23e:	2301      	movs	r3, #1
 800c240:	464a      	mov	r2, r9
 800c242:	4631      	mov	r1, r6
 800c244:	4628      	mov	r0, r5
 800c246:	47b8      	blx	r7
 800c248:	3001      	adds	r0, #1
 800c24a:	f43f ae38 	beq.w	800bebe <_printf_float+0xc2>
 800c24e:	f108 0801 	add.w	r8, r8, #1
 800c252:	68e3      	ldr	r3, [r4, #12]
 800c254:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800c256:	1a5b      	subs	r3, r3, r1
 800c258:	4543      	cmp	r3, r8
 800c25a:	dcf0      	bgt.n	800c23e <_printf_float+0x442>
 800c25c:	e6fa      	b.n	800c054 <_printf_float+0x258>
 800c25e:	f04f 0800 	mov.w	r8, #0
 800c262:	f104 0919 	add.w	r9, r4, #25
 800c266:	e7f4      	b.n	800c252 <_printf_float+0x456>

0800c268 <_printf_common>:
 800c268:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c26c:	4616      	mov	r6, r2
 800c26e:	4699      	mov	r9, r3
 800c270:	688a      	ldr	r2, [r1, #8]
 800c272:	690b      	ldr	r3, [r1, #16]
 800c274:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800c278:	4293      	cmp	r3, r2
 800c27a:	bfb8      	it	lt
 800c27c:	4613      	movlt	r3, r2
 800c27e:	6033      	str	r3, [r6, #0]
 800c280:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800c284:	4607      	mov	r7, r0
 800c286:	460c      	mov	r4, r1
 800c288:	b10a      	cbz	r2, 800c28e <_printf_common+0x26>
 800c28a:	3301      	adds	r3, #1
 800c28c:	6033      	str	r3, [r6, #0]
 800c28e:	6823      	ldr	r3, [r4, #0]
 800c290:	0699      	lsls	r1, r3, #26
 800c292:	bf42      	ittt	mi
 800c294:	6833      	ldrmi	r3, [r6, #0]
 800c296:	3302      	addmi	r3, #2
 800c298:	6033      	strmi	r3, [r6, #0]
 800c29a:	6825      	ldr	r5, [r4, #0]
 800c29c:	f015 0506 	ands.w	r5, r5, #6
 800c2a0:	d106      	bne.n	800c2b0 <_printf_common+0x48>
 800c2a2:	f104 0a19 	add.w	sl, r4, #25
 800c2a6:	68e3      	ldr	r3, [r4, #12]
 800c2a8:	6832      	ldr	r2, [r6, #0]
 800c2aa:	1a9b      	subs	r3, r3, r2
 800c2ac:	42ab      	cmp	r3, r5
 800c2ae:	dc26      	bgt.n	800c2fe <_printf_common+0x96>
 800c2b0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800c2b4:	1e13      	subs	r3, r2, #0
 800c2b6:	6822      	ldr	r2, [r4, #0]
 800c2b8:	bf18      	it	ne
 800c2ba:	2301      	movne	r3, #1
 800c2bc:	0692      	lsls	r2, r2, #26
 800c2be:	d42b      	bmi.n	800c318 <_printf_common+0xb0>
 800c2c0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c2c4:	4649      	mov	r1, r9
 800c2c6:	4638      	mov	r0, r7
 800c2c8:	47c0      	blx	r8
 800c2ca:	3001      	adds	r0, #1
 800c2cc:	d01e      	beq.n	800c30c <_printf_common+0xa4>
 800c2ce:	6823      	ldr	r3, [r4, #0]
 800c2d0:	68e5      	ldr	r5, [r4, #12]
 800c2d2:	6832      	ldr	r2, [r6, #0]
 800c2d4:	f003 0306 	and.w	r3, r3, #6
 800c2d8:	2b04      	cmp	r3, #4
 800c2da:	bf08      	it	eq
 800c2dc:	1aad      	subeq	r5, r5, r2
 800c2de:	68a3      	ldr	r3, [r4, #8]
 800c2e0:	6922      	ldr	r2, [r4, #16]
 800c2e2:	bf0c      	ite	eq
 800c2e4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c2e8:	2500      	movne	r5, #0
 800c2ea:	4293      	cmp	r3, r2
 800c2ec:	bfc4      	itt	gt
 800c2ee:	1a9b      	subgt	r3, r3, r2
 800c2f0:	18ed      	addgt	r5, r5, r3
 800c2f2:	2600      	movs	r6, #0
 800c2f4:	341a      	adds	r4, #26
 800c2f6:	42b5      	cmp	r5, r6
 800c2f8:	d11a      	bne.n	800c330 <_printf_common+0xc8>
 800c2fa:	2000      	movs	r0, #0
 800c2fc:	e008      	b.n	800c310 <_printf_common+0xa8>
 800c2fe:	2301      	movs	r3, #1
 800c300:	4652      	mov	r2, sl
 800c302:	4649      	mov	r1, r9
 800c304:	4638      	mov	r0, r7
 800c306:	47c0      	blx	r8
 800c308:	3001      	adds	r0, #1
 800c30a:	d103      	bne.n	800c314 <_printf_common+0xac>
 800c30c:	f04f 30ff 	mov.w	r0, #4294967295
 800c310:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c314:	3501      	adds	r5, #1
 800c316:	e7c6      	b.n	800c2a6 <_printf_common+0x3e>
 800c318:	18e1      	adds	r1, r4, r3
 800c31a:	1c5a      	adds	r2, r3, #1
 800c31c:	2030      	movs	r0, #48	; 0x30
 800c31e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800c322:	4422      	add	r2, r4
 800c324:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800c328:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800c32c:	3302      	adds	r3, #2
 800c32e:	e7c7      	b.n	800c2c0 <_printf_common+0x58>
 800c330:	2301      	movs	r3, #1
 800c332:	4622      	mov	r2, r4
 800c334:	4649      	mov	r1, r9
 800c336:	4638      	mov	r0, r7
 800c338:	47c0      	blx	r8
 800c33a:	3001      	adds	r0, #1
 800c33c:	d0e6      	beq.n	800c30c <_printf_common+0xa4>
 800c33e:	3601      	adds	r6, #1
 800c340:	e7d9      	b.n	800c2f6 <_printf_common+0x8e>
	...

0800c344 <_printf_i>:
 800c344:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c348:	7e0f      	ldrb	r7, [r1, #24]
 800c34a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800c34c:	2f78      	cmp	r7, #120	; 0x78
 800c34e:	4691      	mov	r9, r2
 800c350:	4680      	mov	r8, r0
 800c352:	460c      	mov	r4, r1
 800c354:	469a      	mov	sl, r3
 800c356:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800c35a:	d807      	bhi.n	800c36c <_printf_i+0x28>
 800c35c:	2f62      	cmp	r7, #98	; 0x62
 800c35e:	d80a      	bhi.n	800c376 <_printf_i+0x32>
 800c360:	2f00      	cmp	r7, #0
 800c362:	f000 80d8 	beq.w	800c516 <_printf_i+0x1d2>
 800c366:	2f58      	cmp	r7, #88	; 0x58
 800c368:	f000 80a3 	beq.w	800c4b2 <_printf_i+0x16e>
 800c36c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c370:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800c374:	e03a      	b.n	800c3ec <_printf_i+0xa8>
 800c376:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800c37a:	2b15      	cmp	r3, #21
 800c37c:	d8f6      	bhi.n	800c36c <_printf_i+0x28>
 800c37e:	a101      	add	r1, pc, #4	; (adr r1, 800c384 <_printf_i+0x40>)
 800c380:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800c384:	0800c3dd 	.word	0x0800c3dd
 800c388:	0800c3f1 	.word	0x0800c3f1
 800c38c:	0800c36d 	.word	0x0800c36d
 800c390:	0800c36d 	.word	0x0800c36d
 800c394:	0800c36d 	.word	0x0800c36d
 800c398:	0800c36d 	.word	0x0800c36d
 800c39c:	0800c3f1 	.word	0x0800c3f1
 800c3a0:	0800c36d 	.word	0x0800c36d
 800c3a4:	0800c36d 	.word	0x0800c36d
 800c3a8:	0800c36d 	.word	0x0800c36d
 800c3ac:	0800c36d 	.word	0x0800c36d
 800c3b0:	0800c4fd 	.word	0x0800c4fd
 800c3b4:	0800c421 	.word	0x0800c421
 800c3b8:	0800c4df 	.word	0x0800c4df
 800c3bc:	0800c36d 	.word	0x0800c36d
 800c3c0:	0800c36d 	.word	0x0800c36d
 800c3c4:	0800c51f 	.word	0x0800c51f
 800c3c8:	0800c36d 	.word	0x0800c36d
 800c3cc:	0800c421 	.word	0x0800c421
 800c3d0:	0800c36d 	.word	0x0800c36d
 800c3d4:	0800c36d 	.word	0x0800c36d
 800c3d8:	0800c4e7 	.word	0x0800c4e7
 800c3dc:	682b      	ldr	r3, [r5, #0]
 800c3de:	1d1a      	adds	r2, r3, #4
 800c3e0:	681b      	ldr	r3, [r3, #0]
 800c3e2:	602a      	str	r2, [r5, #0]
 800c3e4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c3e8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c3ec:	2301      	movs	r3, #1
 800c3ee:	e0a3      	b.n	800c538 <_printf_i+0x1f4>
 800c3f0:	6820      	ldr	r0, [r4, #0]
 800c3f2:	6829      	ldr	r1, [r5, #0]
 800c3f4:	0606      	lsls	r6, r0, #24
 800c3f6:	f101 0304 	add.w	r3, r1, #4
 800c3fa:	d50a      	bpl.n	800c412 <_printf_i+0xce>
 800c3fc:	680e      	ldr	r6, [r1, #0]
 800c3fe:	602b      	str	r3, [r5, #0]
 800c400:	2e00      	cmp	r6, #0
 800c402:	da03      	bge.n	800c40c <_printf_i+0xc8>
 800c404:	232d      	movs	r3, #45	; 0x2d
 800c406:	4276      	negs	r6, r6
 800c408:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c40c:	485e      	ldr	r0, [pc, #376]	; (800c588 <_printf_i+0x244>)
 800c40e:	230a      	movs	r3, #10
 800c410:	e019      	b.n	800c446 <_printf_i+0x102>
 800c412:	680e      	ldr	r6, [r1, #0]
 800c414:	602b      	str	r3, [r5, #0]
 800c416:	f010 0f40 	tst.w	r0, #64	; 0x40
 800c41a:	bf18      	it	ne
 800c41c:	b236      	sxthne	r6, r6
 800c41e:	e7ef      	b.n	800c400 <_printf_i+0xbc>
 800c420:	682b      	ldr	r3, [r5, #0]
 800c422:	6820      	ldr	r0, [r4, #0]
 800c424:	1d19      	adds	r1, r3, #4
 800c426:	6029      	str	r1, [r5, #0]
 800c428:	0601      	lsls	r1, r0, #24
 800c42a:	d501      	bpl.n	800c430 <_printf_i+0xec>
 800c42c:	681e      	ldr	r6, [r3, #0]
 800c42e:	e002      	b.n	800c436 <_printf_i+0xf2>
 800c430:	0646      	lsls	r6, r0, #25
 800c432:	d5fb      	bpl.n	800c42c <_printf_i+0xe8>
 800c434:	881e      	ldrh	r6, [r3, #0]
 800c436:	4854      	ldr	r0, [pc, #336]	; (800c588 <_printf_i+0x244>)
 800c438:	2f6f      	cmp	r7, #111	; 0x6f
 800c43a:	bf0c      	ite	eq
 800c43c:	2308      	moveq	r3, #8
 800c43e:	230a      	movne	r3, #10
 800c440:	2100      	movs	r1, #0
 800c442:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800c446:	6865      	ldr	r5, [r4, #4]
 800c448:	60a5      	str	r5, [r4, #8]
 800c44a:	2d00      	cmp	r5, #0
 800c44c:	bfa2      	ittt	ge
 800c44e:	6821      	ldrge	r1, [r4, #0]
 800c450:	f021 0104 	bicge.w	r1, r1, #4
 800c454:	6021      	strge	r1, [r4, #0]
 800c456:	b90e      	cbnz	r6, 800c45c <_printf_i+0x118>
 800c458:	2d00      	cmp	r5, #0
 800c45a:	d04d      	beq.n	800c4f8 <_printf_i+0x1b4>
 800c45c:	4615      	mov	r5, r2
 800c45e:	fbb6 f1f3 	udiv	r1, r6, r3
 800c462:	fb03 6711 	mls	r7, r3, r1, r6
 800c466:	5dc7      	ldrb	r7, [r0, r7]
 800c468:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800c46c:	4637      	mov	r7, r6
 800c46e:	42bb      	cmp	r3, r7
 800c470:	460e      	mov	r6, r1
 800c472:	d9f4      	bls.n	800c45e <_printf_i+0x11a>
 800c474:	2b08      	cmp	r3, #8
 800c476:	d10b      	bne.n	800c490 <_printf_i+0x14c>
 800c478:	6823      	ldr	r3, [r4, #0]
 800c47a:	07de      	lsls	r6, r3, #31
 800c47c:	d508      	bpl.n	800c490 <_printf_i+0x14c>
 800c47e:	6923      	ldr	r3, [r4, #16]
 800c480:	6861      	ldr	r1, [r4, #4]
 800c482:	4299      	cmp	r1, r3
 800c484:	bfde      	ittt	le
 800c486:	2330      	movle	r3, #48	; 0x30
 800c488:	f805 3c01 	strble.w	r3, [r5, #-1]
 800c48c:	f105 35ff 	addle.w	r5, r5, #4294967295
 800c490:	1b52      	subs	r2, r2, r5
 800c492:	6122      	str	r2, [r4, #16]
 800c494:	f8cd a000 	str.w	sl, [sp]
 800c498:	464b      	mov	r3, r9
 800c49a:	aa03      	add	r2, sp, #12
 800c49c:	4621      	mov	r1, r4
 800c49e:	4640      	mov	r0, r8
 800c4a0:	f7ff fee2 	bl	800c268 <_printf_common>
 800c4a4:	3001      	adds	r0, #1
 800c4a6:	d14c      	bne.n	800c542 <_printf_i+0x1fe>
 800c4a8:	f04f 30ff 	mov.w	r0, #4294967295
 800c4ac:	b004      	add	sp, #16
 800c4ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c4b2:	4835      	ldr	r0, [pc, #212]	; (800c588 <_printf_i+0x244>)
 800c4b4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800c4b8:	6829      	ldr	r1, [r5, #0]
 800c4ba:	6823      	ldr	r3, [r4, #0]
 800c4bc:	f851 6b04 	ldr.w	r6, [r1], #4
 800c4c0:	6029      	str	r1, [r5, #0]
 800c4c2:	061d      	lsls	r5, r3, #24
 800c4c4:	d514      	bpl.n	800c4f0 <_printf_i+0x1ac>
 800c4c6:	07df      	lsls	r7, r3, #31
 800c4c8:	bf44      	itt	mi
 800c4ca:	f043 0320 	orrmi.w	r3, r3, #32
 800c4ce:	6023      	strmi	r3, [r4, #0]
 800c4d0:	b91e      	cbnz	r6, 800c4da <_printf_i+0x196>
 800c4d2:	6823      	ldr	r3, [r4, #0]
 800c4d4:	f023 0320 	bic.w	r3, r3, #32
 800c4d8:	6023      	str	r3, [r4, #0]
 800c4da:	2310      	movs	r3, #16
 800c4dc:	e7b0      	b.n	800c440 <_printf_i+0xfc>
 800c4de:	6823      	ldr	r3, [r4, #0]
 800c4e0:	f043 0320 	orr.w	r3, r3, #32
 800c4e4:	6023      	str	r3, [r4, #0]
 800c4e6:	2378      	movs	r3, #120	; 0x78
 800c4e8:	4828      	ldr	r0, [pc, #160]	; (800c58c <_printf_i+0x248>)
 800c4ea:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800c4ee:	e7e3      	b.n	800c4b8 <_printf_i+0x174>
 800c4f0:	0659      	lsls	r1, r3, #25
 800c4f2:	bf48      	it	mi
 800c4f4:	b2b6      	uxthmi	r6, r6
 800c4f6:	e7e6      	b.n	800c4c6 <_printf_i+0x182>
 800c4f8:	4615      	mov	r5, r2
 800c4fa:	e7bb      	b.n	800c474 <_printf_i+0x130>
 800c4fc:	682b      	ldr	r3, [r5, #0]
 800c4fe:	6826      	ldr	r6, [r4, #0]
 800c500:	6961      	ldr	r1, [r4, #20]
 800c502:	1d18      	adds	r0, r3, #4
 800c504:	6028      	str	r0, [r5, #0]
 800c506:	0635      	lsls	r5, r6, #24
 800c508:	681b      	ldr	r3, [r3, #0]
 800c50a:	d501      	bpl.n	800c510 <_printf_i+0x1cc>
 800c50c:	6019      	str	r1, [r3, #0]
 800c50e:	e002      	b.n	800c516 <_printf_i+0x1d2>
 800c510:	0670      	lsls	r0, r6, #25
 800c512:	d5fb      	bpl.n	800c50c <_printf_i+0x1c8>
 800c514:	8019      	strh	r1, [r3, #0]
 800c516:	2300      	movs	r3, #0
 800c518:	6123      	str	r3, [r4, #16]
 800c51a:	4615      	mov	r5, r2
 800c51c:	e7ba      	b.n	800c494 <_printf_i+0x150>
 800c51e:	682b      	ldr	r3, [r5, #0]
 800c520:	1d1a      	adds	r2, r3, #4
 800c522:	602a      	str	r2, [r5, #0]
 800c524:	681d      	ldr	r5, [r3, #0]
 800c526:	6862      	ldr	r2, [r4, #4]
 800c528:	2100      	movs	r1, #0
 800c52a:	4628      	mov	r0, r5
 800c52c:	f7f3 fe78 	bl	8000220 <memchr>
 800c530:	b108      	cbz	r0, 800c536 <_printf_i+0x1f2>
 800c532:	1b40      	subs	r0, r0, r5
 800c534:	6060      	str	r0, [r4, #4]
 800c536:	6863      	ldr	r3, [r4, #4]
 800c538:	6123      	str	r3, [r4, #16]
 800c53a:	2300      	movs	r3, #0
 800c53c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c540:	e7a8      	b.n	800c494 <_printf_i+0x150>
 800c542:	6923      	ldr	r3, [r4, #16]
 800c544:	462a      	mov	r2, r5
 800c546:	4649      	mov	r1, r9
 800c548:	4640      	mov	r0, r8
 800c54a:	47d0      	blx	sl
 800c54c:	3001      	adds	r0, #1
 800c54e:	d0ab      	beq.n	800c4a8 <_printf_i+0x164>
 800c550:	6823      	ldr	r3, [r4, #0]
 800c552:	079b      	lsls	r3, r3, #30
 800c554:	d413      	bmi.n	800c57e <_printf_i+0x23a>
 800c556:	68e0      	ldr	r0, [r4, #12]
 800c558:	9b03      	ldr	r3, [sp, #12]
 800c55a:	4298      	cmp	r0, r3
 800c55c:	bfb8      	it	lt
 800c55e:	4618      	movlt	r0, r3
 800c560:	e7a4      	b.n	800c4ac <_printf_i+0x168>
 800c562:	2301      	movs	r3, #1
 800c564:	4632      	mov	r2, r6
 800c566:	4649      	mov	r1, r9
 800c568:	4640      	mov	r0, r8
 800c56a:	47d0      	blx	sl
 800c56c:	3001      	adds	r0, #1
 800c56e:	d09b      	beq.n	800c4a8 <_printf_i+0x164>
 800c570:	3501      	adds	r5, #1
 800c572:	68e3      	ldr	r3, [r4, #12]
 800c574:	9903      	ldr	r1, [sp, #12]
 800c576:	1a5b      	subs	r3, r3, r1
 800c578:	42ab      	cmp	r3, r5
 800c57a:	dcf2      	bgt.n	800c562 <_printf_i+0x21e>
 800c57c:	e7eb      	b.n	800c556 <_printf_i+0x212>
 800c57e:	2500      	movs	r5, #0
 800c580:	f104 0619 	add.w	r6, r4, #25
 800c584:	e7f5      	b.n	800c572 <_printf_i+0x22e>
 800c586:	bf00      	nop
 800c588:	0800eca2 	.word	0x0800eca2
 800c58c:	0800ecb3 	.word	0x0800ecb3

0800c590 <siprintf>:
 800c590:	b40e      	push	{r1, r2, r3}
 800c592:	b500      	push	{lr}
 800c594:	b09c      	sub	sp, #112	; 0x70
 800c596:	ab1d      	add	r3, sp, #116	; 0x74
 800c598:	9002      	str	r0, [sp, #8]
 800c59a:	9006      	str	r0, [sp, #24]
 800c59c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800c5a0:	4809      	ldr	r0, [pc, #36]	; (800c5c8 <siprintf+0x38>)
 800c5a2:	9107      	str	r1, [sp, #28]
 800c5a4:	9104      	str	r1, [sp, #16]
 800c5a6:	4909      	ldr	r1, [pc, #36]	; (800c5cc <siprintf+0x3c>)
 800c5a8:	f853 2b04 	ldr.w	r2, [r3], #4
 800c5ac:	9105      	str	r1, [sp, #20]
 800c5ae:	6800      	ldr	r0, [r0, #0]
 800c5b0:	9301      	str	r3, [sp, #4]
 800c5b2:	a902      	add	r1, sp, #8
 800c5b4:	f001 fb70 	bl	800dc98 <_svfiprintf_r>
 800c5b8:	9b02      	ldr	r3, [sp, #8]
 800c5ba:	2200      	movs	r2, #0
 800c5bc:	701a      	strb	r2, [r3, #0]
 800c5be:	b01c      	add	sp, #112	; 0x70
 800c5c0:	f85d eb04 	ldr.w	lr, [sp], #4
 800c5c4:	b003      	add	sp, #12
 800c5c6:	4770      	bx	lr
 800c5c8:	20008f54 	.word	0x20008f54
 800c5cc:	ffff0208 	.word	0xffff0208

0800c5d0 <strcpy>:
 800c5d0:	4603      	mov	r3, r0
 800c5d2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c5d6:	f803 2b01 	strb.w	r2, [r3], #1
 800c5da:	2a00      	cmp	r2, #0
 800c5dc:	d1f9      	bne.n	800c5d2 <strcpy+0x2>
 800c5de:	4770      	bx	lr

0800c5e0 <quorem>:
 800c5e0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c5e4:	6903      	ldr	r3, [r0, #16]
 800c5e6:	690c      	ldr	r4, [r1, #16]
 800c5e8:	42a3      	cmp	r3, r4
 800c5ea:	4607      	mov	r7, r0
 800c5ec:	f2c0 8081 	blt.w	800c6f2 <quorem+0x112>
 800c5f0:	3c01      	subs	r4, #1
 800c5f2:	f101 0814 	add.w	r8, r1, #20
 800c5f6:	f100 0514 	add.w	r5, r0, #20
 800c5fa:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c5fe:	9301      	str	r3, [sp, #4]
 800c600:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800c604:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c608:	3301      	adds	r3, #1
 800c60a:	429a      	cmp	r2, r3
 800c60c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800c610:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800c614:	fbb2 f6f3 	udiv	r6, r2, r3
 800c618:	d331      	bcc.n	800c67e <quorem+0x9e>
 800c61a:	f04f 0e00 	mov.w	lr, #0
 800c61e:	4640      	mov	r0, r8
 800c620:	46ac      	mov	ip, r5
 800c622:	46f2      	mov	sl, lr
 800c624:	f850 2b04 	ldr.w	r2, [r0], #4
 800c628:	b293      	uxth	r3, r2
 800c62a:	fb06 e303 	mla	r3, r6, r3, lr
 800c62e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800c632:	b29b      	uxth	r3, r3
 800c634:	ebaa 0303 	sub.w	r3, sl, r3
 800c638:	f8dc a000 	ldr.w	sl, [ip]
 800c63c:	0c12      	lsrs	r2, r2, #16
 800c63e:	fa13 f38a 	uxtah	r3, r3, sl
 800c642:	fb06 e202 	mla	r2, r6, r2, lr
 800c646:	9300      	str	r3, [sp, #0]
 800c648:	9b00      	ldr	r3, [sp, #0]
 800c64a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800c64e:	b292      	uxth	r2, r2
 800c650:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800c654:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800c658:	f8bd 3000 	ldrh.w	r3, [sp]
 800c65c:	4581      	cmp	r9, r0
 800c65e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c662:	f84c 3b04 	str.w	r3, [ip], #4
 800c666:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800c66a:	d2db      	bcs.n	800c624 <quorem+0x44>
 800c66c:	f855 300b 	ldr.w	r3, [r5, fp]
 800c670:	b92b      	cbnz	r3, 800c67e <quorem+0x9e>
 800c672:	9b01      	ldr	r3, [sp, #4]
 800c674:	3b04      	subs	r3, #4
 800c676:	429d      	cmp	r5, r3
 800c678:	461a      	mov	r2, r3
 800c67a:	d32e      	bcc.n	800c6da <quorem+0xfa>
 800c67c:	613c      	str	r4, [r7, #16]
 800c67e:	4638      	mov	r0, r7
 800c680:	f001 f8b6 	bl	800d7f0 <__mcmp>
 800c684:	2800      	cmp	r0, #0
 800c686:	db24      	blt.n	800c6d2 <quorem+0xf2>
 800c688:	3601      	adds	r6, #1
 800c68a:	4628      	mov	r0, r5
 800c68c:	f04f 0c00 	mov.w	ip, #0
 800c690:	f858 2b04 	ldr.w	r2, [r8], #4
 800c694:	f8d0 e000 	ldr.w	lr, [r0]
 800c698:	b293      	uxth	r3, r2
 800c69a:	ebac 0303 	sub.w	r3, ip, r3
 800c69e:	0c12      	lsrs	r2, r2, #16
 800c6a0:	fa13 f38e 	uxtah	r3, r3, lr
 800c6a4:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800c6a8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800c6ac:	b29b      	uxth	r3, r3
 800c6ae:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c6b2:	45c1      	cmp	r9, r8
 800c6b4:	f840 3b04 	str.w	r3, [r0], #4
 800c6b8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800c6bc:	d2e8      	bcs.n	800c690 <quorem+0xb0>
 800c6be:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c6c2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c6c6:	b922      	cbnz	r2, 800c6d2 <quorem+0xf2>
 800c6c8:	3b04      	subs	r3, #4
 800c6ca:	429d      	cmp	r5, r3
 800c6cc:	461a      	mov	r2, r3
 800c6ce:	d30a      	bcc.n	800c6e6 <quorem+0x106>
 800c6d0:	613c      	str	r4, [r7, #16]
 800c6d2:	4630      	mov	r0, r6
 800c6d4:	b003      	add	sp, #12
 800c6d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c6da:	6812      	ldr	r2, [r2, #0]
 800c6dc:	3b04      	subs	r3, #4
 800c6de:	2a00      	cmp	r2, #0
 800c6e0:	d1cc      	bne.n	800c67c <quorem+0x9c>
 800c6e2:	3c01      	subs	r4, #1
 800c6e4:	e7c7      	b.n	800c676 <quorem+0x96>
 800c6e6:	6812      	ldr	r2, [r2, #0]
 800c6e8:	3b04      	subs	r3, #4
 800c6ea:	2a00      	cmp	r2, #0
 800c6ec:	d1f0      	bne.n	800c6d0 <quorem+0xf0>
 800c6ee:	3c01      	subs	r4, #1
 800c6f0:	e7eb      	b.n	800c6ca <quorem+0xea>
 800c6f2:	2000      	movs	r0, #0
 800c6f4:	e7ee      	b.n	800c6d4 <quorem+0xf4>
	...

0800c6f8 <_dtoa_r>:
 800c6f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c6fc:	ed2d 8b04 	vpush	{d8-d9}
 800c700:	ec57 6b10 	vmov	r6, r7, d0
 800c704:	b093      	sub	sp, #76	; 0x4c
 800c706:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800c708:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800c70c:	9106      	str	r1, [sp, #24]
 800c70e:	ee10 aa10 	vmov	sl, s0
 800c712:	4604      	mov	r4, r0
 800c714:	9209      	str	r2, [sp, #36]	; 0x24
 800c716:	930c      	str	r3, [sp, #48]	; 0x30
 800c718:	46bb      	mov	fp, r7
 800c71a:	b975      	cbnz	r5, 800c73a <_dtoa_r+0x42>
 800c71c:	2010      	movs	r0, #16
 800c71e:	f000 fddd 	bl	800d2dc <malloc>
 800c722:	4602      	mov	r2, r0
 800c724:	6260      	str	r0, [r4, #36]	; 0x24
 800c726:	b920      	cbnz	r0, 800c732 <_dtoa_r+0x3a>
 800c728:	4ba7      	ldr	r3, [pc, #668]	; (800c9c8 <_dtoa_r+0x2d0>)
 800c72a:	21ea      	movs	r1, #234	; 0xea
 800c72c:	48a7      	ldr	r0, [pc, #668]	; (800c9cc <_dtoa_r+0x2d4>)
 800c72e:	f001 fbc3 	bl	800deb8 <__assert_func>
 800c732:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800c736:	6005      	str	r5, [r0, #0]
 800c738:	60c5      	str	r5, [r0, #12]
 800c73a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c73c:	6819      	ldr	r1, [r3, #0]
 800c73e:	b151      	cbz	r1, 800c756 <_dtoa_r+0x5e>
 800c740:	685a      	ldr	r2, [r3, #4]
 800c742:	604a      	str	r2, [r1, #4]
 800c744:	2301      	movs	r3, #1
 800c746:	4093      	lsls	r3, r2
 800c748:	608b      	str	r3, [r1, #8]
 800c74a:	4620      	mov	r0, r4
 800c74c:	f000 fe0e 	bl	800d36c <_Bfree>
 800c750:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c752:	2200      	movs	r2, #0
 800c754:	601a      	str	r2, [r3, #0]
 800c756:	1e3b      	subs	r3, r7, #0
 800c758:	bfaa      	itet	ge
 800c75a:	2300      	movge	r3, #0
 800c75c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800c760:	f8c8 3000 	strge.w	r3, [r8]
 800c764:	4b9a      	ldr	r3, [pc, #616]	; (800c9d0 <_dtoa_r+0x2d8>)
 800c766:	bfbc      	itt	lt
 800c768:	2201      	movlt	r2, #1
 800c76a:	f8c8 2000 	strlt.w	r2, [r8]
 800c76e:	ea33 030b 	bics.w	r3, r3, fp
 800c772:	d11b      	bne.n	800c7ac <_dtoa_r+0xb4>
 800c774:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c776:	f242 730f 	movw	r3, #9999	; 0x270f
 800c77a:	6013      	str	r3, [r2, #0]
 800c77c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800c780:	4333      	orrs	r3, r6
 800c782:	f000 8592 	beq.w	800d2aa <_dtoa_r+0xbb2>
 800c786:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c788:	b963      	cbnz	r3, 800c7a4 <_dtoa_r+0xac>
 800c78a:	4b92      	ldr	r3, [pc, #584]	; (800c9d4 <_dtoa_r+0x2dc>)
 800c78c:	e022      	b.n	800c7d4 <_dtoa_r+0xdc>
 800c78e:	4b92      	ldr	r3, [pc, #584]	; (800c9d8 <_dtoa_r+0x2e0>)
 800c790:	9301      	str	r3, [sp, #4]
 800c792:	3308      	adds	r3, #8
 800c794:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800c796:	6013      	str	r3, [r2, #0]
 800c798:	9801      	ldr	r0, [sp, #4]
 800c79a:	b013      	add	sp, #76	; 0x4c
 800c79c:	ecbd 8b04 	vpop	{d8-d9}
 800c7a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c7a4:	4b8b      	ldr	r3, [pc, #556]	; (800c9d4 <_dtoa_r+0x2dc>)
 800c7a6:	9301      	str	r3, [sp, #4]
 800c7a8:	3303      	adds	r3, #3
 800c7aa:	e7f3      	b.n	800c794 <_dtoa_r+0x9c>
 800c7ac:	2200      	movs	r2, #0
 800c7ae:	2300      	movs	r3, #0
 800c7b0:	4650      	mov	r0, sl
 800c7b2:	4659      	mov	r1, fp
 800c7b4:	f7f4 f9a8 	bl	8000b08 <__aeabi_dcmpeq>
 800c7b8:	ec4b ab19 	vmov	d9, sl, fp
 800c7bc:	4680      	mov	r8, r0
 800c7be:	b158      	cbz	r0, 800c7d8 <_dtoa_r+0xe0>
 800c7c0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c7c2:	2301      	movs	r3, #1
 800c7c4:	6013      	str	r3, [r2, #0]
 800c7c6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c7c8:	2b00      	cmp	r3, #0
 800c7ca:	f000 856b 	beq.w	800d2a4 <_dtoa_r+0xbac>
 800c7ce:	4883      	ldr	r0, [pc, #524]	; (800c9dc <_dtoa_r+0x2e4>)
 800c7d0:	6018      	str	r0, [r3, #0]
 800c7d2:	1e43      	subs	r3, r0, #1
 800c7d4:	9301      	str	r3, [sp, #4]
 800c7d6:	e7df      	b.n	800c798 <_dtoa_r+0xa0>
 800c7d8:	ec4b ab10 	vmov	d0, sl, fp
 800c7dc:	aa10      	add	r2, sp, #64	; 0x40
 800c7de:	a911      	add	r1, sp, #68	; 0x44
 800c7e0:	4620      	mov	r0, r4
 800c7e2:	f001 f8ab 	bl	800d93c <__d2b>
 800c7e6:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800c7ea:	ee08 0a10 	vmov	s16, r0
 800c7ee:	2d00      	cmp	r5, #0
 800c7f0:	f000 8084 	beq.w	800c8fc <_dtoa_r+0x204>
 800c7f4:	ee19 3a90 	vmov	r3, s19
 800c7f8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c7fc:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800c800:	4656      	mov	r6, sl
 800c802:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800c806:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800c80a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800c80e:	4b74      	ldr	r3, [pc, #464]	; (800c9e0 <_dtoa_r+0x2e8>)
 800c810:	2200      	movs	r2, #0
 800c812:	4630      	mov	r0, r6
 800c814:	4639      	mov	r1, r7
 800c816:	f7f3 fd57 	bl	80002c8 <__aeabi_dsub>
 800c81a:	a365      	add	r3, pc, #404	; (adr r3, 800c9b0 <_dtoa_r+0x2b8>)
 800c81c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c820:	f7f3 ff0a 	bl	8000638 <__aeabi_dmul>
 800c824:	a364      	add	r3, pc, #400	; (adr r3, 800c9b8 <_dtoa_r+0x2c0>)
 800c826:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c82a:	f7f3 fd4f 	bl	80002cc <__adddf3>
 800c82e:	4606      	mov	r6, r0
 800c830:	4628      	mov	r0, r5
 800c832:	460f      	mov	r7, r1
 800c834:	f7f3 fe96 	bl	8000564 <__aeabi_i2d>
 800c838:	a361      	add	r3, pc, #388	; (adr r3, 800c9c0 <_dtoa_r+0x2c8>)
 800c83a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c83e:	f7f3 fefb 	bl	8000638 <__aeabi_dmul>
 800c842:	4602      	mov	r2, r0
 800c844:	460b      	mov	r3, r1
 800c846:	4630      	mov	r0, r6
 800c848:	4639      	mov	r1, r7
 800c84a:	f7f3 fd3f 	bl	80002cc <__adddf3>
 800c84e:	4606      	mov	r6, r0
 800c850:	460f      	mov	r7, r1
 800c852:	f7f4 f9a1 	bl	8000b98 <__aeabi_d2iz>
 800c856:	2200      	movs	r2, #0
 800c858:	9000      	str	r0, [sp, #0]
 800c85a:	2300      	movs	r3, #0
 800c85c:	4630      	mov	r0, r6
 800c85e:	4639      	mov	r1, r7
 800c860:	f7f4 f95c 	bl	8000b1c <__aeabi_dcmplt>
 800c864:	b150      	cbz	r0, 800c87c <_dtoa_r+0x184>
 800c866:	9800      	ldr	r0, [sp, #0]
 800c868:	f7f3 fe7c 	bl	8000564 <__aeabi_i2d>
 800c86c:	4632      	mov	r2, r6
 800c86e:	463b      	mov	r3, r7
 800c870:	f7f4 f94a 	bl	8000b08 <__aeabi_dcmpeq>
 800c874:	b910      	cbnz	r0, 800c87c <_dtoa_r+0x184>
 800c876:	9b00      	ldr	r3, [sp, #0]
 800c878:	3b01      	subs	r3, #1
 800c87a:	9300      	str	r3, [sp, #0]
 800c87c:	9b00      	ldr	r3, [sp, #0]
 800c87e:	2b16      	cmp	r3, #22
 800c880:	d85a      	bhi.n	800c938 <_dtoa_r+0x240>
 800c882:	9a00      	ldr	r2, [sp, #0]
 800c884:	4b57      	ldr	r3, [pc, #348]	; (800c9e4 <_dtoa_r+0x2ec>)
 800c886:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c88a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c88e:	ec51 0b19 	vmov	r0, r1, d9
 800c892:	f7f4 f943 	bl	8000b1c <__aeabi_dcmplt>
 800c896:	2800      	cmp	r0, #0
 800c898:	d050      	beq.n	800c93c <_dtoa_r+0x244>
 800c89a:	9b00      	ldr	r3, [sp, #0]
 800c89c:	3b01      	subs	r3, #1
 800c89e:	9300      	str	r3, [sp, #0]
 800c8a0:	2300      	movs	r3, #0
 800c8a2:	930b      	str	r3, [sp, #44]	; 0x2c
 800c8a4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c8a6:	1b5d      	subs	r5, r3, r5
 800c8a8:	1e6b      	subs	r3, r5, #1
 800c8aa:	9305      	str	r3, [sp, #20]
 800c8ac:	bf45      	ittet	mi
 800c8ae:	f1c5 0301 	rsbmi	r3, r5, #1
 800c8b2:	9304      	strmi	r3, [sp, #16]
 800c8b4:	2300      	movpl	r3, #0
 800c8b6:	2300      	movmi	r3, #0
 800c8b8:	bf4c      	ite	mi
 800c8ba:	9305      	strmi	r3, [sp, #20]
 800c8bc:	9304      	strpl	r3, [sp, #16]
 800c8be:	9b00      	ldr	r3, [sp, #0]
 800c8c0:	2b00      	cmp	r3, #0
 800c8c2:	db3d      	blt.n	800c940 <_dtoa_r+0x248>
 800c8c4:	9b05      	ldr	r3, [sp, #20]
 800c8c6:	9a00      	ldr	r2, [sp, #0]
 800c8c8:	920a      	str	r2, [sp, #40]	; 0x28
 800c8ca:	4413      	add	r3, r2
 800c8cc:	9305      	str	r3, [sp, #20]
 800c8ce:	2300      	movs	r3, #0
 800c8d0:	9307      	str	r3, [sp, #28]
 800c8d2:	9b06      	ldr	r3, [sp, #24]
 800c8d4:	2b09      	cmp	r3, #9
 800c8d6:	f200 8089 	bhi.w	800c9ec <_dtoa_r+0x2f4>
 800c8da:	2b05      	cmp	r3, #5
 800c8dc:	bfc4      	itt	gt
 800c8de:	3b04      	subgt	r3, #4
 800c8e0:	9306      	strgt	r3, [sp, #24]
 800c8e2:	9b06      	ldr	r3, [sp, #24]
 800c8e4:	f1a3 0302 	sub.w	r3, r3, #2
 800c8e8:	bfcc      	ite	gt
 800c8ea:	2500      	movgt	r5, #0
 800c8ec:	2501      	movle	r5, #1
 800c8ee:	2b03      	cmp	r3, #3
 800c8f0:	f200 8087 	bhi.w	800ca02 <_dtoa_r+0x30a>
 800c8f4:	e8df f003 	tbb	[pc, r3]
 800c8f8:	59383a2d 	.word	0x59383a2d
 800c8fc:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800c900:	441d      	add	r5, r3
 800c902:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800c906:	2b20      	cmp	r3, #32
 800c908:	bfc1      	itttt	gt
 800c90a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800c90e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800c912:	fa0b f303 	lslgt.w	r3, fp, r3
 800c916:	fa26 f000 	lsrgt.w	r0, r6, r0
 800c91a:	bfda      	itte	le
 800c91c:	f1c3 0320 	rsble	r3, r3, #32
 800c920:	fa06 f003 	lslle.w	r0, r6, r3
 800c924:	4318      	orrgt	r0, r3
 800c926:	f7f3 fe0d 	bl	8000544 <__aeabi_ui2d>
 800c92a:	2301      	movs	r3, #1
 800c92c:	4606      	mov	r6, r0
 800c92e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800c932:	3d01      	subs	r5, #1
 800c934:	930e      	str	r3, [sp, #56]	; 0x38
 800c936:	e76a      	b.n	800c80e <_dtoa_r+0x116>
 800c938:	2301      	movs	r3, #1
 800c93a:	e7b2      	b.n	800c8a2 <_dtoa_r+0x1aa>
 800c93c:	900b      	str	r0, [sp, #44]	; 0x2c
 800c93e:	e7b1      	b.n	800c8a4 <_dtoa_r+0x1ac>
 800c940:	9b04      	ldr	r3, [sp, #16]
 800c942:	9a00      	ldr	r2, [sp, #0]
 800c944:	1a9b      	subs	r3, r3, r2
 800c946:	9304      	str	r3, [sp, #16]
 800c948:	4253      	negs	r3, r2
 800c94a:	9307      	str	r3, [sp, #28]
 800c94c:	2300      	movs	r3, #0
 800c94e:	930a      	str	r3, [sp, #40]	; 0x28
 800c950:	e7bf      	b.n	800c8d2 <_dtoa_r+0x1da>
 800c952:	2300      	movs	r3, #0
 800c954:	9308      	str	r3, [sp, #32]
 800c956:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c958:	2b00      	cmp	r3, #0
 800c95a:	dc55      	bgt.n	800ca08 <_dtoa_r+0x310>
 800c95c:	2301      	movs	r3, #1
 800c95e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800c962:	461a      	mov	r2, r3
 800c964:	9209      	str	r2, [sp, #36]	; 0x24
 800c966:	e00c      	b.n	800c982 <_dtoa_r+0x28a>
 800c968:	2301      	movs	r3, #1
 800c96a:	e7f3      	b.n	800c954 <_dtoa_r+0x25c>
 800c96c:	2300      	movs	r3, #0
 800c96e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c970:	9308      	str	r3, [sp, #32]
 800c972:	9b00      	ldr	r3, [sp, #0]
 800c974:	4413      	add	r3, r2
 800c976:	9302      	str	r3, [sp, #8]
 800c978:	3301      	adds	r3, #1
 800c97a:	2b01      	cmp	r3, #1
 800c97c:	9303      	str	r3, [sp, #12]
 800c97e:	bfb8      	it	lt
 800c980:	2301      	movlt	r3, #1
 800c982:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800c984:	2200      	movs	r2, #0
 800c986:	6042      	str	r2, [r0, #4]
 800c988:	2204      	movs	r2, #4
 800c98a:	f102 0614 	add.w	r6, r2, #20
 800c98e:	429e      	cmp	r6, r3
 800c990:	6841      	ldr	r1, [r0, #4]
 800c992:	d93d      	bls.n	800ca10 <_dtoa_r+0x318>
 800c994:	4620      	mov	r0, r4
 800c996:	f000 fca9 	bl	800d2ec <_Balloc>
 800c99a:	9001      	str	r0, [sp, #4]
 800c99c:	2800      	cmp	r0, #0
 800c99e:	d13b      	bne.n	800ca18 <_dtoa_r+0x320>
 800c9a0:	4b11      	ldr	r3, [pc, #68]	; (800c9e8 <_dtoa_r+0x2f0>)
 800c9a2:	4602      	mov	r2, r0
 800c9a4:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800c9a8:	e6c0      	b.n	800c72c <_dtoa_r+0x34>
 800c9aa:	2301      	movs	r3, #1
 800c9ac:	e7df      	b.n	800c96e <_dtoa_r+0x276>
 800c9ae:	bf00      	nop
 800c9b0:	636f4361 	.word	0x636f4361
 800c9b4:	3fd287a7 	.word	0x3fd287a7
 800c9b8:	8b60c8b3 	.word	0x8b60c8b3
 800c9bc:	3fc68a28 	.word	0x3fc68a28
 800c9c0:	509f79fb 	.word	0x509f79fb
 800c9c4:	3fd34413 	.word	0x3fd34413
 800c9c8:	0800ecd1 	.word	0x0800ecd1
 800c9cc:	0800ece8 	.word	0x0800ece8
 800c9d0:	7ff00000 	.word	0x7ff00000
 800c9d4:	0800eccd 	.word	0x0800eccd
 800c9d8:	0800ecc4 	.word	0x0800ecc4
 800c9dc:	0800eca1 	.word	0x0800eca1
 800c9e0:	3ff80000 	.word	0x3ff80000
 800c9e4:	0800edd8 	.word	0x0800edd8
 800c9e8:	0800ed43 	.word	0x0800ed43
 800c9ec:	2501      	movs	r5, #1
 800c9ee:	2300      	movs	r3, #0
 800c9f0:	9306      	str	r3, [sp, #24]
 800c9f2:	9508      	str	r5, [sp, #32]
 800c9f4:	f04f 33ff 	mov.w	r3, #4294967295
 800c9f8:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800c9fc:	2200      	movs	r2, #0
 800c9fe:	2312      	movs	r3, #18
 800ca00:	e7b0      	b.n	800c964 <_dtoa_r+0x26c>
 800ca02:	2301      	movs	r3, #1
 800ca04:	9308      	str	r3, [sp, #32]
 800ca06:	e7f5      	b.n	800c9f4 <_dtoa_r+0x2fc>
 800ca08:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ca0a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800ca0e:	e7b8      	b.n	800c982 <_dtoa_r+0x28a>
 800ca10:	3101      	adds	r1, #1
 800ca12:	6041      	str	r1, [r0, #4]
 800ca14:	0052      	lsls	r2, r2, #1
 800ca16:	e7b8      	b.n	800c98a <_dtoa_r+0x292>
 800ca18:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ca1a:	9a01      	ldr	r2, [sp, #4]
 800ca1c:	601a      	str	r2, [r3, #0]
 800ca1e:	9b03      	ldr	r3, [sp, #12]
 800ca20:	2b0e      	cmp	r3, #14
 800ca22:	f200 809d 	bhi.w	800cb60 <_dtoa_r+0x468>
 800ca26:	2d00      	cmp	r5, #0
 800ca28:	f000 809a 	beq.w	800cb60 <_dtoa_r+0x468>
 800ca2c:	9b00      	ldr	r3, [sp, #0]
 800ca2e:	2b00      	cmp	r3, #0
 800ca30:	dd32      	ble.n	800ca98 <_dtoa_r+0x3a0>
 800ca32:	4ab7      	ldr	r2, [pc, #732]	; (800cd10 <_dtoa_r+0x618>)
 800ca34:	f003 030f 	and.w	r3, r3, #15
 800ca38:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800ca3c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800ca40:	9b00      	ldr	r3, [sp, #0]
 800ca42:	05d8      	lsls	r0, r3, #23
 800ca44:	ea4f 1723 	mov.w	r7, r3, asr #4
 800ca48:	d516      	bpl.n	800ca78 <_dtoa_r+0x380>
 800ca4a:	4bb2      	ldr	r3, [pc, #712]	; (800cd14 <_dtoa_r+0x61c>)
 800ca4c:	ec51 0b19 	vmov	r0, r1, d9
 800ca50:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800ca54:	f7f3 ff1a 	bl	800088c <__aeabi_ddiv>
 800ca58:	f007 070f 	and.w	r7, r7, #15
 800ca5c:	4682      	mov	sl, r0
 800ca5e:	468b      	mov	fp, r1
 800ca60:	2503      	movs	r5, #3
 800ca62:	4eac      	ldr	r6, [pc, #688]	; (800cd14 <_dtoa_r+0x61c>)
 800ca64:	b957      	cbnz	r7, 800ca7c <_dtoa_r+0x384>
 800ca66:	4642      	mov	r2, r8
 800ca68:	464b      	mov	r3, r9
 800ca6a:	4650      	mov	r0, sl
 800ca6c:	4659      	mov	r1, fp
 800ca6e:	f7f3 ff0d 	bl	800088c <__aeabi_ddiv>
 800ca72:	4682      	mov	sl, r0
 800ca74:	468b      	mov	fp, r1
 800ca76:	e028      	b.n	800caca <_dtoa_r+0x3d2>
 800ca78:	2502      	movs	r5, #2
 800ca7a:	e7f2      	b.n	800ca62 <_dtoa_r+0x36a>
 800ca7c:	07f9      	lsls	r1, r7, #31
 800ca7e:	d508      	bpl.n	800ca92 <_dtoa_r+0x39a>
 800ca80:	4640      	mov	r0, r8
 800ca82:	4649      	mov	r1, r9
 800ca84:	e9d6 2300 	ldrd	r2, r3, [r6]
 800ca88:	f7f3 fdd6 	bl	8000638 <__aeabi_dmul>
 800ca8c:	3501      	adds	r5, #1
 800ca8e:	4680      	mov	r8, r0
 800ca90:	4689      	mov	r9, r1
 800ca92:	107f      	asrs	r7, r7, #1
 800ca94:	3608      	adds	r6, #8
 800ca96:	e7e5      	b.n	800ca64 <_dtoa_r+0x36c>
 800ca98:	f000 809b 	beq.w	800cbd2 <_dtoa_r+0x4da>
 800ca9c:	9b00      	ldr	r3, [sp, #0]
 800ca9e:	4f9d      	ldr	r7, [pc, #628]	; (800cd14 <_dtoa_r+0x61c>)
 800caa0:	425e      	negs	r6, r3
 800caa2:	4b9b      	ldr	r3, [pc, #620]	; (800cd10 <_dtoa_r+0x618>)
 800caa4:	f006 020f 	and.w	r2, r6, #15
 800caa8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800caac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cab0:	ec51 0b19 	vmov	r0, r1, d9
 800cab4:	f7f3 fdc0 	bl	8000638 <__aeabi_dmul>
 800cab8:	1136      	asrs	r6, r6, #4
 800caba:	4682      	mov	sl, r0
 800cabc:	468b      	mov	fp, r1
 800cabe:	2300      	movs	r3, #0
 800cac0:	2502      	movs	r5, #2
 800cac2:	2e00      	cmp	r6, #0
 800cac4:	d17a      	bne.n	800cbbc <_dtoa_r+0x4c4>
 800cac6:	2b00      	cmp	r3, #0
 800cac8:	d1d3      	bne.n	800ca72 <_dtoa_r+0x37a>
 800caca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cacc:	2b00      	cmp	r3, #0
 800cace:	f000 8082 	beq.w	800cbd6 <_dtoa_r+0x4de>
 800cad2:	4b91      	ldr	r3, [pc, #580]	; (800cd18 <_dtoa_r+0x620>)
 800cad4:	2200      	movs	r2, #0
 800cad6:	4650      	mov	r0, sl
 800cad8:	4659      	mov	r1, fp
 800cada:	f7f4 f81f 	bl	8000b1c <__aeabi_dcmplt>
 800cade:	2800      	cmp	r0, #0
 800cae0:	d079      	beq.n	800cbd6 <_dtoa_r+0x4de>
 800cae2:	9b03      	ldr	r3, [sp, #12]
 800cae4:	2b00      	cmp	r3, #0
 800cae6:	d076      	beq.n	800cbd6 <_dtoa_r+0x4de>
 800cae8:	9b02      	ldr	r3, [sp, #8]
 800caea:	2b00      	cmp	r3, #0
 800caec:	dd36      	ble.n	800cb5c <_dtoa_r+0x464>
 800caee:	9b00      	ldr	r3, [sp, #0]
 800caf0:	4650      	mov	r0, sl
 800caf2:	4659      	mov	r1, fp
 800caf4:	1e5f      	subs	r7, r3, #1
 800caf6:	2200      	movs	r2, #0
 800caf8:	4b88      	ldr	r3, [pc, #544]	; (800cd1c <_dtoa_r+0x624>)
 800cafa:	f7f3 fd9d 	bl	8000638 <__aeabi_dmul>
 800cafe:	9e02      	ldr	r6, [sp, #8]
 800cb00:	4682      	mov	sl, r0
 800cb02:	468b      	mov	fp, r1
 800cb04:	3501      	adds	r5, #1
 800cb06:	4628      	mov	r0, r5
 800cb08:	f7f3 fd2c 	bl	8000564 <__aeabi_i2d>
 800cb0c:	4652      	mov	r2, sl
 800cb0e:	465b      	mov	r3, fp
 800cb10:	f7f3 fd92 	bl	8000638 <__aeabi_dmul>
 800cb14:	4b82      	ldr	r3, [pc, #520]	; (800cd20 <_dtoa_r+0x628>)
 800cb16:	2200      	movs	r2, #0
 800cb18:	f7f3 fbd8 	bl	80002cc <__adddf3>
 800cb1c:	46d0      	mov	r8, sl
 800cb1e:	46d9      	mov	r9, fp
 800cb20:	4682      	mov	sl, r0
 800cb22:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800cb26:	2e00      	cmp	r6, #0
 800cb28:	d158      	bne.n	800cbdc <_dtoa_r+0x4e4>
 800cb2a:	4b7e      	ldr	r3, [pc, #504]	; (800cd24 <_dtoa_r+0x62c>)
 800cb2c:	2200      	movs	r2, #0
 800cb2e:	4640      	mov	r0, r8
 800cb30:	4649      	mov	r1, r9
 800cb32:	f7f3 fbc9 	bl	80002c8 <__aeabi_dsub>
 800cb36:	4652      	mov	r2, sl
 800cb38:	465b      	mov	r3, fp
 800cb3a:	4680      	mov	r8, r0
 800cb3c:	4689      	mov	r9, r1
 800cb3e:	f7f4 f80b 	bl	8000b58 <__aeabi_dcmpgt>
 800cb42:	2800      	cmp	r0, #0
 800cb44:	f040 8295 	bne.w	800d072 <_dtoa_r+0x97a>
 800cb48:	4652      	mov	r2, sl
 800cb4a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800cb4e:	4640      	mov	r0, r8
 800cb50:	4649      	mov	r1, r9
 800cb52:	f7f3 ffe3 	bl	8000b1c <__aeabi_dcmplt>
 800cb56:	2800      	cmp	r0, #0
 800cb58:	f040 8289 	bne.w	800d06e <_dtoa_r+0x976>
 800cb5c:	ec5b ab19 	vmov	sl, fp, d9
 800cb60:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800cb62:	2b00      	cmp	r3, #0
 800cb64:	f2c0 8148 	blt.w	800cdf8 <_dtoa_r+0x700>
 800cb68:	9a00      	ldr	r2, [sp, #0]
 800cb6a:	2a0e      	cmp	r2, #14
 800cb6c:	f300 8144 	bgt.w	800cdf8 <_dtoa_r+0x700>
 800cb70:	4b67      	ldr	r3, [pc, #412]	; (800cd10 <_dtoa_r+0x618>)
 800cb72:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800cb76:	e9d3 8900 	ldrd	r8, r9, [r3]
 800cb7a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cb7c:	2b00      	cmp	r3, #0
 800cb7e:	f280 80d5 	bge.w	800cd2c <_dtoa_r+0x634>
 800cb82:	9b03      	ldr	r3, [sp, #12]
 800cb84:	2b00      	cmp	r3, #0
 800cb86:	f300 80d1 	bgt.w	800cd2c <_dtoa_r+0x634>
 800cb8a:	f040 826f 	bne.w	800d06c <_dtoa_r+0x974>
 800cb8e:	4b65      	ldr	r3, [pc, #404]	; (800cd24 <_dtoa_r+0x62c>)
 800cb90:	2200      	movs	r2, #0
 800cb92:	4640      	mov	r0, r8
 800cb94:	4649      	mov	r1, r9
 800cb96:	f7f3 fd4f 	bl	8000638 <__aeabi_dmul>
 800cb9a:	4652      	mov	r2, sl
 800cb9c:	465b      	mov	r3, fp
 800cb9e:	f7f3 ffd1 	bl	8000b44 <__aeabi_dcmpge>
 800cba2:	9e03      	ldr	r6, [sp, #12]
 800cba4:	4637      	mov	r7, r6
 800cba6:	2800      	cmp	r0, #0
 800cba8:	f040 8245 	bne.w	800d036 <_dtoa_r+0x93e>
 800cbac:	9d01      	ldr	r5, [sp, #4]
 800cbae:	2331      	movs	r3, #49	; 0x31
 800cbb0:	f805 3b01 	strb.w	r3, [r5], #1
 800cbb4:	9b00      	ldr	r3, [sp, #0]
 800cbb6:	3301      	adds	r3, #1
 800cbb8:	9300      	str	r3, [sp, #0]
 800cbba:	e240      	b.n	800d03e <_dtoa_r+0x946>
 800cbbc:	07f2      	lsls	r2, r6, #31
 800cbbe:	d505      	bpl.n	800cbcc <_dtoa_r+0x4d4>
 800cbc0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cbc4:	f7f3 fd38 	bl	8000638 <__aeabi_dmul>
 800cbc8:	3501      	adds	r5, #1
 800cbca:	2301      	movs	r3, #1
 800cbcc:	1076      	asrs	r6, r6, #1
 800cbce:	3708      	adds	r7, #8
 800cbd0:	e777      	b.n	800cac2 <_dtoa_r+0x3ca>
 800cbd2:	2502      	movs	r5, #2
 800cbd4:	e779      	b.n	800caca <_dtoa_r+0x3d2>
 800cbd6:	9f00      	ldr	r7, [sp, #0]
 800cbd8:	9e03      	ldr	r6, [sp, #12]
 800cbda:	e794      	b.n	800cb06 <_dtoa_r+0x40e>
 800cbdc:	9901      	ldr	r1, [sp, #4]
 800cbde:	4b4c      	ldr	r3, [pc, #304]	; (800cd10 <_dtoa_r+0x618>)
 800cbe0:	4431      	add	r1, r6
 800cbe2:	910d      	str	r1, [sp, #52]	; 0x34
 800cbe4:	9908      	ldr	r1, [sp, #32]
 800cbe6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800cbea:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800cbee:	2900      	cmp	r1, #0
 800cbf0:	d043      	beq.n	800cc7a <_dtoa_r+0x582>
 800cbf2:	494d      	ldr	r1, [pc, #308]	; (800cd28 <_dtoa_r+0x630>)
 800cbf4:	2000      	movs	r0, #0
 800cbf6:	f7f3 fe49 	bl	800088c <__aeabi_ddiv>
 800cbfa:	4652      	mov	r2, sl
 800cbfc:	465b      	mov	r3, fp
 800cbfe:	f7f3 fb63 	bl	80002c8 <__aeabi_dsub>
 800cc02:	9d01      	ldr	r5, [sp, #4]
 800cc04:	4682      	mov	sl, r0
 800cc06:	468b      	mov	fp, r1
 800cc08:	4649      	mov	r1, r9
 800cc0a:	4640      	mov	r0, r8
 800cc0c:	f7f3 ffc4 	bl	8000b98 <__aeabi_d2iz>
 800cc10:	4606      	mov	r6, r0
 800cc12:	f7f3 fca7 	bl	8000564 <__aeabi_i2d>
 800cc16:	4602      	mov	r2, r0
 800cc18:	460b      	mov	r3, r1
 800cc1a:	4640      	mov	r0, r8
 800cc1c:	4649      	mov	r1, r9
 800cc1e:	f7f3 fb53 	bl	80002c8 <__aeabi_dsub>
 800cc22:	3630      	adds	r6, #48	; 0x30
 800cc24:	f805 6b01 	strb.w	r6, [r5], #1
 800cc28:	4652      	mov	r2, sl
 800cc2a:	465b      	mov	r3, fp
 800cc2c:	4680      	mov	r8, r0
 800cc2e:	4689      	mov	r9, r1
 800cc30:	f7f3 ff74 	bl	8000b1c <__aeabi_dcmplt>
 800cc34:	2800      	cmp	r0, #0
 800cc36:	d163      	bne.n	800cd00 <_dtoa_r+0x608>
 800cc38:	4642      	mov	r2, r8
 800cc3a:	464b      	mov	r3, r9
 800cc3c:	4936      	ldr	r1, [pc, #216]	; (800cd18 <_dtoa_r+0x620>)
 800cc3e:	2000      	movs	r0, #0
 800cc40:	f7f3 fb42 	bl	80002c8 <__aeabi_dsub>
 800cc44:	4652      	mov	r2, sl
 800cc46:	465b      	mov	r3, fp
 800cc48:	f7f3 ff68 	bl	8000b1c <__aeabi_dcmplt>
 800cc4c:	2800      	cmp	r0, #0
 800cc4e:	f040 80b5 	bne.w	800cdbc <_dtoa_r+0x6c4>
 800cc52:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800cc54:	429d      	cmp	r5, r3
 800cc56:	d081      	beq.n	800cb5c <_dtoa_r+0x464>
 800cc58:	4b30      	ldr	r3, [pc, #192]	; (800cd1c <_dtoa_r+0x624>)
 800cc5a:	2200      	movs	r2, #0
 800cc5c:	4650      	mov	r0, sl
 800cc5e:	4659      	mov	r1, fp
 800cc60:	f7f3 fcea 	bl	8000638 <__aeabi_dmul>
 800cc64:	4b2d      	ldr	r3, [pc, #180]	; (800cd1c <_dtoa_r+0x624>)
 800cc66:	4682      	mov	sl, r0
 800cc68:	468b      	mov	fp, r1
 800cc6a:	4640      	mov	r0, r8
 800cc6c:	4649      	mov	r1, r9
 800cc6e:	2200      	movs	r2, #0
 800cc70:	f7f3 fce2 	bl	8000638 <__aeabi_dmul>
 800cc74:	4680      	mov	r8, r0
 800cc76:	4689      	mov	r9, r1
 800cc78:	e7c6      	b.n	800cc08 <_dtoa_r+0x510>
 800cc7a:	4650      	mov	r0, sl
 800cc7c:	4659      	mov	r1, fp
 800cc7e:	f7f3 fcdb 	bl	8000638 <__aeabi_dmul>
 800cc82:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800cc84:	9d01      	ldr	r5, [sp, #4]
 800cc86:	930f      	str	r3, [sp, #60]	; 0x3c
 800cc88:	4682      	mov	sl, r0
 800cc8a:	468b      	mov	fp, r1
 800cc8c:	4649      	mov	r1, r9
 800cc8e:	4640      	mov	r0, r8
 800cc90:	f7f3 ff82 	bl	8000b98 <__aeabi_d2iz>
 800cc94:	4606      	mov	r6, r0
 800cc96:	f7f3 fc65 	bl	8000564 <__aeabi_i2d>
 800cc9a:	3630      	adds	r6, #48	; 0x30
 800cc9c:	4602      	mov	r2, r0
 800cc9e:	460b      	mov	r3, r1
 800cca0:	4640      	mov	r0, r8
 800cca2:	4649      	mov	r1, r9
 800cca4:	f7f3 fb10 	bl	80002c8 <__aeabi_dsub>
 800cca8:	f805 6b01 	strb.w	r6, [r5], #1
 800ccac:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ccae:	429d      	cmp	r5, r3
 800ccb0:	4680      	mov	r8, r0
 800ccb2:	4689      	mov	r9, r1
 800ccb4:	f04f 0200 	mov.w	r2, #0
 800ccb8:	d124      	bne.n	800cd04 <_dtoa_r+0x60c>
 800ccba:	4b1b      	ldr	r3, [pc, #108]	; (800cd28 <_dtoa_r+0x630>)
 800ccbc:	4650      	mov	r0, sl
 800ccbe:	4659      	mov	r1, fp
 800ccc0:	f7f3 fb04 	bl	80002cc <__adddf3>
 800ccc4:	4602      	mov	r2, r0
 800ccc6:	460b      	mov	r3, r1
 800ccc8:	4640      	mov	r0, r8
 800ccca:	4649      	mov	r1, r9
 800cccc:	f7f3 ff44 	bl	8000b58 <__aeabi_dcmpgt>
 800ccd0:	2800      	cmp	r0, #0
 800ccd2:	d173      	bne.n	800cdbc <_dtoa_r+0x6c4>
 800ccd4:	4652      	mov	r2, sl
 800ccd6:	465b      	mov	r3, fp
 800ccd8:	4913      	ldr	r1, [pc, #76]	; (800cd28 <_dtoa_r+0x630>)
 800ccda:	2000      	movs	r0, #0
 800ccdc:	f7f3 faf4 	bl	80002c8 <__aeabi_dsub>
 800cce0:	4602      	mov	r2, r0
 800cce2:	460b      	mov	r3, r1
 800cce4:	4640      	mov	r0, r8
 800cce6:	4649      	mov	r1, r9
 800cce8:	f7f3 ff18 	bl	8000b1c <__aeabi_dcmplt>
 800ccec:	2800      	cmp	r0, #0
 800ccee:	f43f af35 	beq.w	800cb5c <_dtoa_r+0x464>
 800ccf2:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800ccf4:	1e6b      	subs	r3, r5, #1
 800ccf6:	930f      	str	r3, [sp, #60]	; 0x3c
 800ccf8:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800ccfc:	2b30      	cmp	r3, #48	; 0x30
 800ccfe:	d0f8      	beq.n	800ccf2 <_dtoa_r+0x5fa>
 800cd00:	9700      	str	r7, [sp, #0]
 800cd02:	e049      	b.n	800cd98 <_dtoa_r+0x6a0>
 800cd04:	4b05      	ldr	r3, [pc, #20]	; (800cd1c <_dtoa_r+0x624>)
 800cd06:	f7f3 fc97 	bl	8000638 <__aeabi_dmul>
 800cd0a:	4680      	mov	r8, r0
 800cd0c:	4689      	mov	r9, r1
 800cd0e:	e7bd      	b.n	800cc8c <_dtoa_r+0x594>
 800cd10:	0800edd8 	.word	0x0800edd8
 800cd14:	0800edb0 	.word	0x0800edb0
 800cd18:	3ff00000 	.word	0x3ff00000
 800cd1c:	40240000 	.word	0x40240000
 800cd20:	401c0000 	.word	0x401c0000
 800cd24:	40140000 	.word	0x40140000
 800cd28:	3fe00000 	.word	0x3fe00000
 800cd2c:	9d01      	ldr	r5, [sp, #4]
 800cd2e:	4656      	mov	r6, sl
 800cd30:	465f      	mov	r7, fp
 800cd32:	4642      	mov	r2, r8
 800cd34:	464b      	mov	r3, r9
 800cd36:	4630      	mov	r0, r6
 800cd38:	4639      	mov	r1, r7
 800cd3a:	f7f3 fda7 	bl	800088c <__aeabi_ddiv>
 800cd3e:	f7f3 ff2b 	bl	8000b98 <__aeabi_d2iz>
 800cd42:	4682      	mov	sl, r0
 800cd44:	f7f3 fc0e 	bl	8000564 <__aeabi_i2d>
 800cd48:	4642      	mov	r2, r8
 800cd4a:	464b      	mov	r3, r9
 800cd4c:	f7f3 fc74 	bl	8000638 <__aeabi_dmul>
 800cd50:	4602      	mov	r2, r0
 800cd52:	460b      	mov	r3, r1
 800cd54:	4630      	mov	r0, r6
 800cd56:	4639      	mov	r1, r7
 800cd58:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800cd5c:	f7f3 fab4 	bl	80002c8 <__aeabi_dsub>
 800cd60:	f805 6b01 	strb.w	r6, [r5], #1
 800cd64:	9e01      	ldr	r6, [sp, #4]
 800cd66:	9f03      	ldr	r7, [sp, #12]
 800cd68:	1bae      	subs	r6, r5, r6
 800cd6a:	42b7      	cmp	r7, r6
 800cd6c:	4602      	mov	r2, r0
 800cd6e:	460b      	mov	r3, r1
 800cd70:	d135      	bne.n	800cdde <_dtoa_r+0x6e6>
 800cd72:	f7f3 faab 	bl	80002cc <__adddf3>
 800cd76:	4642      	mov	r2, r8
 800cd78:	464b      	mov	r3, r9
 800cd7a:	4606      	mov	r6, r0
 800cd7c:	460f      	mov	r7, r1
 800cd7e:	f7f3 feeb 	bl	8000b58 <__aeabi_dcmpgt>
 800cd82:	b9d0      	cbnz	r0, 800cdba <_dtoa_r+0x6c2>
 800cd84:	4642      	mov	r2, r8
 800cd86:	464b      	mov	r3, r9
 800cd88:	4630      	mov	r0, r6
 800cd8a:	4639      	mov	r1, r7
 800cd8c:	f7f3 febc 	bl	8000b08 <__aeabi_dcmpeq>
 800cd90:	b110      	cbz	r0, 800cd98 <_dtoa_r+0x6a0>
 800cd92:	f01a 0f01 	tst.w	sl, #1
 800cd96:	d110      	bne.n	800cdba <_dtoa_r+0x6c2>
 800cd98:	4620      	mov	r0, r4
 800cd9a:	ee18 1a10 	vmov	r1, s16
 800cd9e:	f000 fae5 	bl	800d36c <_Bfree>
 800cda2:	2300      	movs	r3, #0
 800cda4:	9800      	ldr	r0, [sp, #0]
 800cda6:	702b      	strb	r3, [r5, #0]
 800cda8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800cdaa:	3001      	adds	r0, #1
 800cdac:	6018      	str	r0, [r3, #0]
 800cdae:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800cdb0:	2b00      	cmp	r3, #0
 800cdb2:	f43f acf1 	beq.w	800c798 <_dtoa_r+0xa0>
 800cdb6:	601d      	str	r5, [r3, #0]
 800cdb8:	e4ee      	b.n	800c798 <_dtoa_r+0xa0>
 800cdba:	9f00      	ldr	r7, [sp, #0]
 800cdbc:	462b      	mov	r3, r5
 800cdbe:	461d      	mov	r5, r3
 800cdc0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800cdc4:	2a39      	cmp	r2, #57	; 0x39
 800cdc6:	d106      	bne.n	800cdd6 <_dtoa_r+0x6de>
 800cdc8:	9a01      	ldr	r2, [sp, #4]
 800cdca:	429a      	cmp	r2, r3
 800cdcc:	d1f7      	bne.n	800cdbe <_dtoa_r+0x6c6>
 800cdce:	9901      	ldr	r1, [sp, #4]
 800cdd0:	2230      	movs	r2, #48	; 0x30
 800cdd2:	3701      	adds	r7, #1
 800cdd4:	700a      	strb	r2, [r1, #0]
 800cdd6:	781a      	ldrb	r2, [r3, #0]
 800cdd8:	3201      	adds	r2, #1
 800cdda:	701a      	strb	r2, [r3, #0]
 800cddc:	e790      	b.n	800cd00 <_dtoa_r+0x608>
 800cdde:	4ba6      	ldr	r3, [pc, #664]	; (800d078 <_dtoa_r+0x980>)
 800cde0:	2200      	movs	r2, #0
 800cde2:	f7f3 fc29 	bl	8000638 <__aeabi_dmul>
 800cde6:	2200      	movs	r2, #0
 800cde8:	2300      	movs	r3, #0
 800cdea:	4606      	mov	r6, r0
 800cdec:	460f      	mov	r7, r1
 800cdee:	f7f3 fe8b 	bl	8000b08 <__aeabi_dcmpeq>
 800cdf2:	2800      	cmp	r0, #0
 800cdf4:	d09d      	beq.n	800cd32 <_dtoa_r+0x63a>
 800cdf6:	e7cf      	b.n	800cd98 <_dtoa_r+0x6a0>
 800cdf8:	9a08      	ldr	r2, [sp, #32]
 800cdfa:	2a00      	cmp	r2, #0
 800cdfc:	f000 80d7 	beq.w	800cfae <_dtoa_r+0x8b6>
 800ce00:	9a06      	ldr	r2, [sp, #24]
 800ce02:	2a01      	cmp	r2, #1
 800ce04:	f300 80ba 	bgt.w	800cf7c <_dtoa_r+0x884>
 800ce08:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ce0a:	2a00      	cmp	r2, #0
 800ce0c:	f000 80b2 	beq.w	800cf74 <_dtoa_r+0x87c>
 800ce10:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800ce14:	9e07      	ldr	r6, [sp, #28]
 800ce16:	9d04      	ldr	r5, [sp, #16]
 800ce18:	9a04      	ldr	r2, [sp, #16]
 800ce1a:	441a      	add	r2, r3
 800ce1c:	9204      	str	r2, [sp, #16]
 800ce1e:	9a05      	ldr	r2, [sp, #20]
 800ce20:	2101      	movs	r1, #1
 800ce22:	441a      	add	r2, r3
 800ce24:	4620      	mov	r0, r4
 800ce26:	9205      	str	r2, [sp, #20]
 800ce28:	f000 fb58 	bl	800d4dc <__i2b>
 800ce2c:	4607      	mov	r7, r0
 800ce2e:	2d00      	cmp	r5, #0
 800ce30:	dd0c      	ble.n	800ce4c <_dtoa_r+0x754>
 800ce32:	9b05      	ldr	r3, [sp, #20]
 800ce34:	2b00      	cmp	r3, #0
 800ce36:	dd09      	ble.n	800ce4c <_dtoa_r+0x754>
 800ce38:	42ab      	cmp	r3, r5
 800ce3a:	9a04      	ldr	r2, [sp, #16]
 800ce3c:	bfa8      	it	ge
 800ce3e:	462b      	movge	r3, r5
 800ce40:	1ad2      	subs	r2, r2, r3
 800ce42:	9204      	str	r2, [sp, #16]
 800ce44:	9a05      	ldr	r2, [sp, #20]
 800ce46:	1aed      	subs	r5, r5, r3
 800ce48:	1ad3      	subs	r3, r2, r3
 800ce4a:	9305      	str	r3, [sp, #20]
 800ce4c:	9b07      	ldr	r3, [sp, #28]
 800ce4e:	b31b      	cbz	r3, 800ce98 <_dtoa_r+0x7a0>
 800ce50:	9b08      	ldr	r3, [sp, #32]
 800ce52:	2b00      	cmp	r3, #0
 800ce54:	f000 80af 	beq.w	800cfb6 <_dtoa_r+0x8be>
 800ce58:	2e00      	cmp	r6, #0
 800ce5a:	dd13      	ble.n	800ce84 <_dtoa_r+0x78c>
 800ce5c:	4639      	mov	r1, r7
 800ce5e:	4632      	mov	r2, r6
 800ce60:	4620      	mov	r0, r4
 800ce62:	f000 fbfb 	bl	800d65c <__pow5mult>
 800ce66:	ee18 2a10 	vmov	r2, s16
 800ce6a:	4601      	mov	r1, r0
 800ce6c:	4607      	mov	r7, r0
 800ce6e:	4620      	mov	r0, r4
 800ce70:	f000 fb4a 	bl	800d508 <__multiply>
 800ce74:	ee18 1a10 	vmov	r1, s16
 800ce78:	4680      	mov	r8, r0
 800ce7a:	4620      	mov	r0, r4
 800ce7c:	f000 fa76 	bl	800d36c <_Bfree>
 800ce80:	ee08 8a10 	vmov	s16, r8
 800ce84:	9b07      	ldr	r3, [sp, #28]
 800ce86:	1b9a      	subs	r2, r3, r6
 800ce88:	d006      	beq.n	800ce98 <_dtoa_r+0x7a0>
 800ce8a:	ee18 1a10 	vmov	r1, s16
 800ce8e:	4620      	mov	r0, r4
 800ce90:	f000 fbe4 	bl	800d65c <__pow5mult>
 800ce94:	ee08 0a10 	vmov	s16, r0
 800ce98:	2101      	movs	r1, #1
 800ce9a:	4620      	mov	r0, r4
 800ce9c:	f000 fb1e 	bl	800d4dc <__i2b>
 800cea0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cea2:	2b00      	cmp	r3, #0
 800cea4:	4606      	mov	r6, r0
 800cea6:	f340 8088 	ble.w	800cfba <_dtoa_r+0x8c2>
 800ceaa:	461a      	mov	r2, r3
 800ceac:	4601      	mov	r1, r0
 800ceae:	4620      	mov	r0, r4
 800ceb0:	f000 fbd4 	bl	800d65c <__pow5mult>
 800ceb4:	9b06      	ldr	r3, [sp, #24]
 800ceb6:	2b01      	cmp	r3, #1
 800ceb8:	4606      	mov	r6, r0
 800ceba:	f340 8081 	ble.w	800cfc0 <_dtoa_r+0x8c8>
 800cebe:	f04f 0800 	mov.w	r8, #0
 800cec2:	6933      	ldr	r3, [r6, #16]
 800cec4:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800cec8:	6918      	ldr	r0, [r3, #16]
 800ceca:	f000 fab7 	bl	800d43c <__hi0bits>
 800cece:	f1c0 0020 	rsb	r0, r0, #32
 800ced2:	9b05      	ldr	r3, [sp, #20]
 800ced4:	4418      	add	r0, r3
 800ced6:	f010 001f 	ands.w	r0, r0, #31
 800ceda:	f000 8092 	beq.w	800d002 <_dtoa_r+0x90a>
 800cede:	f1c0 0320 	rsb	r3, r0, #32
 800cee2:	2b04      	cmp	r3, #4
 800cee4:	f340 808a 	ble.w	800cffc <_dtoa_r+0x904>
 800cee8:	f1c0 001c 	rsb	r0, r0, #28
 800ceec:	9b04      	ldr	r3, [sp, #16]
 800ceee:	4403      	add	r3, r0
 800cef0:	9304      	str	r3, [sp, #16]
 800cef2:	9b05      	ldr	r3, [sp, #20]
 800cef4:	4403      	add	r3, r0
 800cef6:	4405      	add	r5, r0
 800cef8:	9305      	str	r3, [sp, #20]
 800cefa:	9b04      	ldr	r3, [sp, #16]
 800cefc:	2b00      	cmp	r3, #0
 800cefe:	dd07      	ble.n	800cf10 <_dtoa_r+0x818>
 800cf00:	ee18 1a10 	vmov	r1, s16
 800cf04:	461a      	mov	r2, r3
 800cf06:	4620      	mov	r0, r4
 800cf08:	f000 fc02 	bl	800d710 <__lshift>
 800cf0c:	ee08 0a10 	vmov	s16, r0
 800cf10:	9b05      	ldr	r3, [sp, #20]
 800cf12:	2b00      	cmp	r3, #0
 800cf14:	dd05      	ble.n	800cf22 <_dtoa_r+0x82a>
 800cf16:	4631      	mov	r1, r6
 800cf18:	461a      	mov	r2, r3
 800cf1a:	4620      	mov	r0, r4
 800cf1c:	f000 fbf8 	bl	800d710 <__lshift>
 800cf20:	4606      	mov	r6, r0
 800cf22:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cf24:	2b00      	cmp	r3, #0
 800cf26:	d06e      	beq.n	800d006 <_dtoa_r+0x90e>
 800cf28:	ee18 0a10 	vmov	r0, s16
 800cf2c:	4631      	mov	r1, r6
 800cf2e:	f000 fc5f 	bl	800d7f0 <__mcmp>
 800cf32:	2800      	cmp	r0, #0
 800cf34:	da67      	bge.n	800d006 <_dtoa_r+0x90e>
 800cf36:	9b00      	ldr	r3, [sp, #0]
 800cf38:	3b01      	subs	r3, #1
 800cf3a:	ee18 1a10 	vmov	r1, s16
 800cf3e:	9300      	str	r3, [sp, #0]
 800cf40:	220a      	movs	r2, #10
 800cf42:	2300      	movs	r3, #0
 800cf44:	4620      	mov	r0, r4
 800cf46:	f000 fa33 	bl	800d3b0 <__multadd>
 800cf4a:	9b08      	ldr	r3, [sp, #32]
 800cf4c:	ee08 0a10 	vmov	s16, r0
 800cf50:	2b00      	cmp	r3, #0
 800cf52:	f000 81b1 	beq.w	800d2b8 <_dtoa_r+0xbc0>
 800cf56:	2300      	movs	r3, #0
 800cf58:	4639      	mov	r1, r7
 800cf5a:	220a      	movs	r2, #10
 800cf5c:	4620      	mov	r0, r4
 800cf5e:	f000 fa27 	bl	800d3b0 <__multadd>
 800cf62:	9b02      	ldr	r3, [sp, #8]
 800cf64:	2b00      	cmp	r3, #0
 800cf66:	4607      	mov	r7, r0
 800cf68:	f300 808e 	bgt.w	800d088 <_dtoa_r+0x990>
 800cf6c:	9b06      	ldr	r3, [sp, #24]
 800cf6e:	2b02      	cmp	r3, #2
 800cf70:	dc51      	bgt.n	800d016 <_dtoa_r+0x91e>
 800cf72:	e089      	b.n	800d088 <_dtoa_r+0x990>
 800cf74:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800cf76:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800cf7a:	e74b      	b.n	800ce14 <_dtoa_r+0x71c>
 800cf7c:	9b03      	ldr	r3, [sp, #12]
 800cf7e:	1e5e      	subs	r6, r3, #1
 800cf80:	9b07      	ldr	r3, [sp, #28]
 800cf82:	42b3      	cmp	r3, r6
 800cf84:	bfbf      	itttt	lt
 800cf86:	9b07      	ldrlt	r3, [sp, #28]
 800cf88:	9607      	strlt	r6, [sp, #28]
 800cf8a:	1af2      	sublt	r2, r6, r3
 800cf8c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800cf8e:	bfb6      	itet	lt
 800cf90:	189b      	addlt	r3, r3, r2
 800cf92:	1b9e      	subge	r6, r3, r6
 800cf94:	930a      	strlt	r3, [sp, #40]	; 0x28
 800cf96:	9b03      	ldr	r3, [sp, #12]
 800cf98:	bfb8      	it	lt
 800cf9a:	2600      	movlt	r6, #0
 800cf9c:	2b00      	cmp	r3, #0
 800cf9e:	bfb7      	itett	lt
 800cfa0:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800cfa4:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800cfa8:	1a9d      	sublt	r5, r3, r2
 800cfaa:	2300      	movlt	r3, #0
 800cfac:	e734      	b.n	800ce18 <_dtoa_r+0x720>
 800cfae:	9e07      	ldr	r6, [sp, #28]
 800cfb0:	9d04      	ldr	r5, [sp, #16]
 800cfb2:	9f08      	ldr	r7, [sp, #32]
 800cfb4:	e73b      	b.n	800ce2e <_dtoa_r+0x736>
 800cfb6:	9a07      	ldr	r2, [sp, #28]
 800cfb8:	e767      	b.n	800ce8a <_dtoa_r+0x792>
 800cfba:	9b06      	ldr	r3, [sp, #24]
 800cfbc:	2b01      	cmp	r3, #1
 800cfbe:	dc18      	bgt.n	800cff2 <_dtoa_r+0x8fa>
 800cfc0:	f1ba 0f00 	cmp.w	sl, #0
 800cfc4:	d115      	bne.n	800cff2 <_dtoa_r+0x8fa>
 800cfc6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800cfca:	b993      	cbnz	r3, 800cff2 <_dtoa_r+0x8fa>
 800cfcc:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800cfd0:	0d1b      	lsrs	r3, r3, #20
 800cfd2:	051b      	lsls	r3, r3, #20
 800cfd4:	b183      	cbz	r3, 800cff8 <_dtoa_r+0x900>
 800cfd6:	9b04      	ldr	r3, [sp, #16]
 800cfd8:	3301      	adds	r3, #1
 800cfda:	9304      	str	r3, [sp, #16]
 800cfdc:	9b05      	ldr	r3, [sp, #20]
 800cfde:	3301      	adds	r3, #1
 800cfe0:	9305      	str	r3, [sp, #20]
 800cfe2:	f04f 0801 	mov.w	r8, #1
 800cfe6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cfe8:	2b00      	cmp	r3, #0
 800cfea:	f47f af6a 	bne.w	800cec2 <_dtoa_r+0x7ca>
 800cfee:	2001      	movs	r0, #1
 800cff0:	e76f      	b.n	800ced2 <_dtoa_r+0x7da>
 800cff2:	f04f 0800 	mov.w	r8, #0
 800cff6:	e7f6      	b.n	800cfe6 <_dtoa_r+0x8ee>
 800cff8:	4698      	mov	r8, r3
 800cffa:	e7f4      	b.n	800cfe6 <_dtoa_r+0x8ee>
 800cffc:	f43f af7d 	beq.w	800cefa <_dtoa_r+0x802>
 800d000:	4618      	mov	r0, r3
 800d002:	301c      	adds	r0, #28
 800d004:	e772      	b.n	800ceec <_dtoa_r+0x7f4>
 800d006:	9b03      	ldr	r3, [sp, #12]
 800d008:	2b00      	cmp	r3, #0
 800d00a:	dc37      	bgt.n	800d07c <_dtoa_r+0x984>
 800d00c:	9b06      	ldr	r3, [sp, #24]
 800d00e:	2b02      	cmp	r3, #2
 800d010:	dd34      	ble.n	800d07c <_dtoa_r+0x984>
 800d012:	9b03      	ldr	r3, [sp, #12]
 800d014:	9302      	str	r3, [sp, #8]
 800d016:	9b02      	ldr	r3, [sp, #8]
 800d018:	b96b      	cbnz	r3, 800d036 <_dtoa_r+0x93e>
 800d01a:	4631      	mov	r1, r6
 800d01c:	2205      	movs	r2, #5
 800d01e:	4620      	mov	r0, r4
 800d020:	f000 f9c6 	bl	800d3b0 <__multadd>
 800d024:	4601      	mov	r1, r0
 800d026:	4606      	mov	r6, r0
 800d028:	ee18 0a10 	vmov	r0, s16
 800d02c:	f000 fbe0 	bl	800d7f0 <__mcmp>
 800d030:	2800      	cmp	r0, #0
 800d032:	f73f adbb 	bgt.w	800cbac <_dtoa_r+0x4b4>
 800d036:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d038:	9d01      	ldr	r5, [sp, #4]
 800d03a:	43db      	mvns	r3, r3
 800d03c:	9300      	str	r3, [sp, #0]
 800d03e:	f04f 0800 	mov.w	r8, #0
 800d042:	4631      	mov	r1, r6
 800d044:	4620      	mov	r0, r4
 800d046:	f000 f991 	bl	800d36c <_Bfree>
 800d04a:	2f00      	cmp	r7, #0
 800d04c:	f43f aea4 	beq.w	800cd98 <_dtoa_r+0x6a0>
 800d050:	f1b8 0f00 	cmp.w	r8, #0
 800d054:	d005      	beq.n	800d062 <_dtoa_r+0x96a>
 800d056:	45b8      	cmp	r8, r7
 800d058:	d003      	beq.n	800d062 <_dtoa_r+0x96a>
 800d05a:	4641      	mov	r1, r8
 800d05c:	4620      	mov	r0, r4
 800d05e:	f000 f985 	bl	800d36c <_Bfree>
 800d062:	4639      	mov	r1, r7
 800d064:	4620      	mov	r0, r4
 800d066:	f000 f981 	bl	800d36c <_Bfree>
 800d06a:	e695      	b.n	800cd98 <_dtoa_r+0x6a0>
 800d06c:	2600      	movs	r6, #0
 800d06e:	4637      	mov	r7, r6
 800d070:	e7e1      	b.n	800d036 <_dtoa_r+0x93e>
 800d072:	9700      	str	r7, [sp, #0]
 800d074:	4637      	mov	r7, r6
 800d076:	e599      	b.n	800cbac <_dtoa_r+0x4b4>
 800d078:	40240000 	.word	0x40240000
 800d07c:	9b08      	ldr	r3, [sp, #32]
 800d07e:	2b00      	cmp	r3, #0
 800d080:	f000 80ca 	beq.w	800d218 <_dtoa_r+0xb20>
 800d084:	9b03      	ldr	r3, [sp, #12]
 800d086:	9302      	str	r3, [sp, #8]
 800d088:	2d00      	cmp	r5, #0
 800d08a:	dd05      	ble.n	800d098 <_dtoa_r+0x9a0>
 800d08c:	4639      	mov	r1, r7
 800d08e:	462a      	mov	r2, r5
 800d090:	4620      	mov	r0, r4
 800d092:	f000 fb3d 	bl	800d710 <__lshift>
 800d096:	4607      	mov	r7, r0
 800d098:	f1b8 0f00 	cmp.w	r8, #0
 800d09c:	d05b      	beq.n	800d156 <_dtoa_r+0xa5e>
 800d09e:	6879      	ldr	r1, [r7, #4]
 800d0a0:	4620      	mov	r0, r4
 800d0a2:	f000 f923 	bl	800d2ec <_Balloc>
 800d0a6:	4605      	mov	r5, r0
 800d0a8:	b928      	cbnz	r0, 800d0b6 <_dtoa_r+0x9be>
 800d0aa:	4b87      	ldr	r3, [pc, #540]	; (800d2c8 <_dtoa_r+0xbd0>)
 800d0ac:	4602      	mov	r2, r0
 800d0ae:	f240 21ea 	movw	r1, #746	; 0x2ea
 800d0b2:	f7ff bb3b 	b.w	800c72c <_dtoa_r+0x34>
 800d0b6:	693a      	ldr	r2, [r7, #16]
 800d0b8:	3202      	adds	r2, #2
 800d0ba:	0092      	lsls	r2, r2, #2
 800d0bc:	f107 010c 	add.w	r1, r7, #12
 800d0c0:	300c      	adds	r0, #12
 800d0c2:	f7fe fde5 	bl	800bc90 <memcpy>
 800d0c6:	2201      	movs	r2, #1
 800d0c8:	4629      	mov	r1, r5
 800d0ca:	4620      	mov	r0, r4
 800d0cc:	f000 fb20 	bl	800d710 <__lshift>
 800d0d0:	9b01      	ldr	r3, [sp, #4]
 800d0d2:	f103 0901 	add.w	r9, r3, #1
 800d0d6:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800d0da:	4413      	add	r3, r2
 800d0dc:	9305      	str	r3, [sp, #20]
 800d0de:	f00a 0301 	and.w	r3, sl, #1
 800d0e2:	46b8      	mov	r8, r7
 800d0e4:	9304      	str	r3, [sp, #16]
 800d0e6:	4607      	mov	r7, r0
 800d0e8:	4631      	mov	r1, r6
 800d0ea:	ee18 0a10 	vmov	r0, s16
 800d0ee:	f7ff fa77 	bl	800c5e0 <quorem>
 800d0f2:	4641      	mov	r1, r8
 800d0f4:	9002      	str	r0, [sp, #8]
 800d0f6:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800d0fa:	ee18 0a10 	vmov	r0, s16
 800d0fe:	f000 fb77 	bl	800d7f0 <__mcmp>
 800d102:	463a      	mov	r2, r7
 800d104:	9003      	str	r0, [sp, #12]
 800d106:	4631      	mov	r1, r6
 800d108:	4620      	mov	r0, r4
 800d10a:	f000 fb8d 	bl	800d828 <__mdiff>
 800d10e:	68c2      	ldr	r2, [r0, #12]
 800d110:	f109 3bff 	add.w	fp, r9, #4294967295
 800d114:	4605      	mov	r5, r0
 800d116:	bb02      	cbnz	r2, 800d15a <_dtoa_r+0xa62>
 800d118:	4601      	mov	r1, r0
 800d11a:	ee18 0a10 	vmov	r0, s16
 800d11e:	f000 fb67 	bl	800d7f0 <__mcmp>
 800d122:	4602      	mov	r2, r0
 800d124:	4629      	mov	r1, r5
 800d126:	4620      	mov	r0, r4
 800d128:	9207      	str	r2, [sp, #28]
 800d12a:	f000 f91f 	bl	800d36c <_Bfree>
 800d12e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800d132:	ea43 0102 	orr.w	r1, r3, r2
 800d136:	9b04      	ldr	r3, [sp, #16]
 800d138:	430b      	orrs	r3, r1
 800d13a:	464d      	mov	r5, r9
 800d13c:	d10f      	bne.n	800d15e <_dtoa_r+0xa66>
 800d13e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800d142:	d02a      	beq.n	800d19a <_dtoa_r+0xaa2>
 800d144:	9b03      	ldr	r3, [sp, #12]
 800d146:	2b00      	cmp	r3, #0
 800d148:	dd02      	ble.n	800d150 <_dtoa_r+0xa58>
 800d14a:	9b02      	ldr	r3, [sp, #8]
 800d14c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800d150:	f88b a000 	strb.w	sl, [fp]
 800d154:	e775      	b.n	800d042 <_dtoa_r+0x94a>
 800d156:	4638      	mov	r0, r7
 800d158:	e7ba      	b.n	800d0d0 <_dtoa_r+0x9d8>
 800d15a:	2201      	movs	r2, #1
 800d15c:	e7e2      	b.n	800d124 <_dtoa_r+0xa2c>
 800d15e:	9b03      	ldr	r3, [sp, #12]
 800d160:	2b00      	cmp	r3, #0
 800d162:	db04      	blt.n	800d16e <_dtoa_r+0xa76>
 800d164:	9906      	ldr	r1, [sp, #24]
 800d166:	430b      	orrs	r3, r1
 800d168:	9904      	ldr	r1, [sp, #16]
 800d16a:	430b      	orrs	r3, r1
 800d16c:	d122      	bne.n	800d1b4 <_dtoa_r+0xabc>
 800d16e:	2a00      	cmp	r2, #0
 800d170:	ddee      	ble.n	800d150 <_dtoa_r+0xa58>
 800d172:	ee18 1a10 	vmov	r1, s16
 800d176:	2201      	movs	r2, #1
 800d178:	4620      	mov	r0, r4
 800d17a:	f000 fac9 	bl	800d710 <__lshift>
 800d17e:	4631      	mov	r1, r6
 800d180:	ee08 0a10 	vmov	s16, r0
 800d184:	f000 fb34 	bl	800d7f0 <__mcmp>
 800d188:	2800      	cmp	r0, #0
 800d18a:	dc03      	bgt.n	800d194 <_dtoa_r+0xa9c>
 800d18c:	d1e0      	bne.n	800d150 <_dtoa_r+0xa58>
 800d18e:	f01a 0f01 	tst.w	sl, #1
 800d192:	d0dd      	beq.n	800d150 <_dtoa_r+0xa58>
 800d194:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800d198:	d1d7      	bne.n	800d14a <_dtoa_r+0xa52>
 800d19a:	2339      	movs	r3, #57	; 0x39
 800d19c:	f88b 3000 	strb.w	r3, [fp]
 800d1a0:	462b      	mov	r3, r5
 800d1a2:	461d      	mov	r5, r3
 800d1a4:	3b01      	subs	r3, #1
 800d1a6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800d1aa:	2a39      	cmp	r2, #57	; 0x39
 800d1ac:	d071      	beq.n	800d292 <_dtoa_r+0xb9a>
 800d1ae:	3201      	adds	r2, #1
 800d1b0:	701a      	strb	r2, [r3, #0]
 800d1b2:	e746      	b.n	800d042 <_dtoa_r+0x94a>
 800d1b4:	2a00      	cmp	r2, #0
 800d1b6:	dd07      	ble.n	800d1c8 <_dtoa_r+0xad0>
 800d1b8:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800d1bc:	d0ed      	beq.n	800d19a <_dtoa_r+0xaa2>
 800d1be:	f10a 0301 	add.w	r3, sl, #1
 800d1c2:	f88b 3000 	strb.w	r3, [fp]
 800d1c6:	e73c      	b.n	800d042 <_dtoa_r+0x94a>
 800d1c8:	9b05      	ldr	r3, [sp, #20]
 800d1ca:	f809 ac01 	strb.w	sl, [r9, #-1]
 800d1ce:	4599      	cmp	r9, r3
 800d1d0:	d047      	beq.n	800d262 <_dtoa_r+0xb6a>
 800d1d2:	ee18 1a10 	vmov	r1, s16
 800d1d6:	2300      	movs	r3, #0
 800d1d8:	220a      	movs	r2, #10
 800d1da:	4620      	mov	r0, r4
 800d1dc:	f000 f8e8 	bl	800d3b0 <__multadd>
 800d1e0:	45b8      	cmp	r8, r7
 800d1e2:	ee08 0a10 	vmov	s16, r0
 800d1e6:	f04f 0300 	mov.w	r3, #0
 800d1ea:	f04f 020a 	mov.w	r2, #10
 800d1ee:	4641      	mov	r1, r8
 800d1f0:	4620      	mov	r0, r4
 800d1f2:	d106      	bne.n	800d202 <_dtoa_r+0xb0a>
 800d1f4:	f000 f8dc 	bl	800d3b0 <__multadd>
 800d1f8:	4680      	mov	r8, r0
 800d1fa:	4607      	mov	r7, r0
 800d1fc:	f109 0901 	add.w	r9, r9, #1
 800d200:	e772      	b.n	800d0e8 <_dtoa_r+0x9f0>
 800d202:	f000 f8d5 	bl	800d3b0 <__multadd>
 800d206:	4639      	mov	r1, r7
 800d208:	4680      	mov	r8, r0
 800d20a:	2300      	movs	r3, #0
 800d20c:	220a      	movs	r2, #10
 800d20e:	4620      	mov	r0, r4
 800d210:	f000 f8ce 	bl	800d3b0 <__multadd>
 800d214:	4607      	mov	r7, r0
 800d216:	e7f1      	b.n	800d1fc <_dtoa_r+0xb04>
 800d218:	9b03      	ldr	r3, [sp, #12]
 800d21a:	9302      	str	r3, [sp, #8]
 800d21c:	9d01      	ldr	r5, [sp, #4]
 800d21e:	ee18 0a10 	vmov	r0, s16
 800d222:	4631      	mov	r1, r6
 800d224:	f7ff f9dc 	bl	800c5e0 <quorem>
 800d228:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800d22c:	9b01      	ldr	r3, [sp, #4]
 800d22e:	f805 ab01 	strb.w	sl, [r5], #1
 800d232:	1aea      	subs	r2, r5, r3
 800d234:	9b02      	ldr	r3, [sp, #8]
 800d236:	4293      	cmp	r3, r2
 800d238:	dd09      	ble.n	800d24e <_dtoa_r+0xb56>
 800d23a:	ee18 1a10 	vmov	r1, s16
 800d23e:	2300      	movs	r3, #0
 800d240:	220a      	movs	r2, #10
 800d242:	4620      	mov	r0, r4
 800d244:	f000 f8b4 	bl	800d3b0 <__multadd>
 800d248:	ee08 0a10 	vmov	s16, r0
 800d24c:	e7e7      	b.n	800d21e <_dtoa_r+0xb26>
 800d24e:	9b02      	ldr	r3, [sp, #8]
 800d250:	2b00      	cmp	r3, #0
 800d252:	bfc8      	it	gt
 800d254:	461d      	movgt	r5, r3
 800d256:	9b01      	ldr	r3, [sp, #4]
 800d258:	bfd8      	it	le
 800d25a:	2501      	movle	r5, #1
 800d25c:	441d      	add	r5, r3
 800d25e:	f04f 0800 	mov.w	r8, #0
 800d262:	ee18 1a10 	vmov	r1, s16
 800d266:	2201      	movs	r2, #1
 800d268:	4620      	mov	r0, r4
 800d26a:	f000 fa51 	bl	800d710 <__lshift>
 800d26e:	4631      	mov	r1, r6
 800d270:	ee08 0a10 	vmov	s16, r0
 800d274:	f000 fabc 	bl	800d7f0 <__mcmp>
 800d278:	2800      	cmp	r0, #0
 800d27a:	dc91      	bgt.n	800d1a0 <_dtoa_r+0xaa8>
 800d27c:	d102      	bne.n	800d284 <_dtoa_r+0xb8c>
 800d27e:	f01a 0f01 	tst.w	sl, #1
 800d282:	d18d      	bne.n	800d1a0 <_dtoa_r+0xaa8>
 800d284:	462b      	mov	r3, r5
 800d286:	461d      	mov	r5, r3
 800d288:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800d28c:	2a30      	cmp	r2, #48	; 0x30
 800d28e:	d0fa      	beq.n	800d286 <_dtoa_r+0xb8e>
 800d290:	e6d7      	b.n	800d042 <_dtoa_r+0x94a>
 800d292:	9a01      	ldr	r2, [sp, #4]
 800d294:	429a      	cmp	r2, r3
 800d296:	d184      	bne.n	800d1a2 <_dtoa_r+0xaaa>
 800d298:	9b00      	ldr	r3, [sp, #0]
 800d29a:	3301      	adds	r3, #1
 800d29c:	9300      	str	r3, [sp, #0]
 800d29e:	2331      	movs	r3, #49	; 0x31
 800d2a0:	7013      	strb	r3, [r2, #0]
 800d2a2:	e6ce      	b.n	800d042 <_dtoa_r+0x94a>
 800d2a4:	4b09      	ldr	r3, [pc, #36]	; (800d2cc <_dtoa_r+0xbd4>)
 800d2a6:	f7ff ba95 	b.w	800c7d4 <_dtoa_r+0xdc>
 800d2aa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d2ac:	2b00      	cmp	r3, #0
 800d2ae:	f47f aa6e 	bne.w	800c78e <_dtoa_r+0x96>
 800d2b2:	4b07      	ldr	r3, [pc, #28]	; (800d2d0 <_dtoa_r+0xbd8>)
 800d2b4:	f7ff ba8e 	b.w	800c7d4 <_dtoa_r+0xdc>
 800d2b8:	9b02      	ldr	r3, [sp, #8]
 800d2ba:	2b00      	cmp	r3, #0
 800d2bc:	dcae      	bgt.n	800d21c <_dtoa_r+0xb24>
 800d2be:	9b06      	ldr	r3, [sp, #24]
 800d2c0:	2b02      	cmp	r3, #2
 800d2c2:	f73f aea8 	bgt.w	800d016 <_dtoa_r+0x91e>
 800d2c6:	e7a9      	b.n	800d21c <_dtoa_r+0xb24>
 800d2c8:	0800ed43 	.word	0x0800ed43
 800d2cc:	0800eca0 	.word	0x0800eca0
 800d2d0:	0800ecc4 	.word	0x0800ecc4

0800d2d4 <_localeconv_r>:
 800d2d4:	4800      	ldr	r0, [pc, #0]	; (800d2d8 <_localeconv_r+0x4>)
 800d2d6:	4770      	bx	lr
 800d2d8:	200090a8 	.word	0x200090a8

0800d2dc <malloc>:
 800d2dc:	4b02      	ldr	r3, [pc, #8]	; (800d2e8 <malloc+0xc>)
 800d2de:	4601      	mov	r1, r0
 800d2e0:	6818      	ldr	r0, [r3, #0]
 800d2e2:	f000 bc09 	b.w	800daf8 <_malloc_r>
 800d2e6:	bf00      	nop
 800d2e8:	20008f54 	.word	0x20008f54

0800d2ec <_Balloc>:
 800d2ec:	b570      	push	{r4, r5, r6, lr}
 800d2ee:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800d2f0:	4604      	mov	r4, r0
 800d2f2:	460d      	mov	r5, r1
 800d2f4:	b976      	cbnz	r6, 800d314 <_Balloc+0x28>
 800d2f6:	2010      	movs	r0, #16
 800d2f8:	f7ff fff0 	bl	800d2dc <malloc>
 800d2fc:	4602      	mov	r2, r0
 800d2fe:	6260      	str	r0, [r4, #36]	; 0x24
 800d300:	b920      	cbnz	r0, 800d30c <_Balloc+0x20>
 800d302:	4b18      	ldr	r3, [pc, #96]	; (800d364 <_Balloc+0x78>)
 800d304:	4818      	ldr	r0, [pc, #96]	; (800d368 <_Balloc+0x7c>)
 800d306:	2166      	movs	r1, #102	; 0x66
 800d308:	f000 fdd6 	bl	800deb8 <__assert_func>
 800d30c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d310:	6006      	str	r6, [r0, #0]
 800d312:	60c6      	str	r6, [r0, #12]
 800d314:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800d316:	68f3      	ldr	r3, [r6, #12]
 800d318:	b183      	cbz	r3, 800d33c <_Balloc+0x50>
 800d31a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d31c:	68db      	ldr	r3, [r3, #12]
 800d31e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800d322:	b9b8      	cbnz	r0, 800d354 <_Balloc+0x68>
 800d324:	2101      	movs	r1, #1
 800d326:	fa01 f605 	lsl.w	r6, r1, r5
 800d32a:	1d72      	adds	r2, r6, #5
 800d32c:	0092      	lsls	r2, r2, #2
 800d32e:	4620      	mov	r0, r4
 800d330:	f000 fb60 	bl	800d9f4 <_calloc_r>
 800d334:	b160      	cbz	r0, 800d350 <_Balloc+0x64>
 800d336:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800d33a:	e00e      	b.n	800d35a <_Balloc+0x6e>
 800d33c:	2221      	movs	r2, #33	; 0x21
 800d33e:	2104      	movs	r1, #4
 800d340:	4620      	mov	r0, r4
 800d342:	f000 fb57 	bl	800d9f4 <_calloc_r>
 800d346:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d348:	60f0      	str	r0, [r6, #12]
 800d34a:	68db      	ldr	r3, [r3, #12]
 800d34c:	2b00      	cmp	r3, #0
 800d34e:	d1e4      	bne.n	800d31a <_Balloc+0x2e>
 800d350:	2000      	movs	r0, #0
 800d352:	bd70      	pop	{r4, r5, r6, pc}
 800d354:	6802      	ldr	r2, [r0, #0]
 800d356:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800d35a:	2300      	movs	r3, #0
 800d35c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800d360:	e7f7      	b.n	800d352 <_Balloc+0x66>
 800d362:	bf00      	nop
 800d364:	0800ecd1 	.word	0x0800ecd1
 800d368:	0800ed54 	.word	0x0800ed54

0800d36c <_Bfree>:
 800d36c:	b570      	push	{r4, r5, r6, lr}
 800d36e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800d370:	4605      	mov	r5, r0
 800d372:	460c      	mov	r4, r1
 800d374:	b976      	cbnz	r6, 800d394 <_Bfree+0x28>
 800d376:	2010      	movs	r0, #16
 800d378:	f7ff ffb0 	bl	800d2dc <malloc>
 800d37c:	4602      	mov	r2, r0
 800d37e:	6268      	str	r0, [r5, #36]	; 0x24
 800d380:	b920      	cbnz	r0, 800d38c <_Bfree+0x20>
 800d382:	4b09      	ldr	r3, [pc, #36]	; (800d3a8 <_Bfree+0x3c>)
 800d384:	4809      	ldr	r0, [pc, #36]	; (800d3ac <_Bfree+0x40>)
 800d386:	218a      	movs	r1, #138	; 0x8a
 800d388:	f000 fd96 	bl	800deb8 <__assert_func>
 800d38c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d390:	6006      	str	r6, [r0, #0]
 800d392:	60c6      	str	r6, [r0, #12]
 800d394:	b13c      	cbz	r4, 800d3a6 <_Bfree+0x3a>
 800d396:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800d398:	6862      	ldr	r2, [r4, #4]
 800d39a:	68db      	ldr	r3, [r3, #12]
 800d39c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800d3a0:	6021      	str	r1, [r4, #0]
 800d3a2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800d3a6:	bd70      	pop	{r4, r5, r6, pc}
 800d3a8:	0800ecd1 	.word	0x0800ecd1
 800d3ac:	0800ed54 	.word	0x0800ed54

0800d3b0 <__multadd>:
 800d3b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d3b4:	690d      	ldr	r5, [r1, #16]
 800d3b6:	4607      	mov	r7, r0
 800d3b8:	460c      	mov	r4, r1
 800d3ba:	461e      	mov	r6, r3
 800d3bc:	f101 0c14 	add.w	ip, r1, #20
 800d3c0:	2000      	movs	r0, #0
 800d3c2:	f8dc 3000 	ldr.w	r3, [ip]
 800d3c6:	b299      	uxth	r1, r3
 800d3c8:	fb02 6101 	mla	r1, r2, r1, r6
 800d3cc:	0c1e      	lsrs	r6, r3, #16
 800d3ce:	0c0b      	lsrs	r3, r1, #16
 800d3d0:	fb02 3306 	mla	r3, r2, r6, r3
 800d3d4:	b289      	uxth	r1, r1
 800d3d6:	3001      	adds	r0, #1
 800d3d8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800d3dc:	4285      	cmp	r5, r0
 800d3de:	f84c 1b04 	str.w	r1, [ip], #4
 800d3e2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800d3e6:	dcec      	bgt.n	800d3c2 <__multadd+0x12>
 800d3e8:	b30e      	cbz	r6, 800d42e <__multadd+0x7e>
 800d3ea:	68a3      	ldr	r3, [r4, #8]
 800d3ec:	42ab      	cmp	r3, r5
 800d3ee:	dc19      	bgt.n	800d424 <__multadd+0x74>
 800d3f0:	6861      	ldr	r1, [r4, #4]
 800d3f2:	4638      	mov	r0, r7
 800d3f4:	3101      	adds	r1, #1
 800d3f6:	f7ff ff79 	bl	800d2ec <_Balloc>
 800d3fa:	4680      	mov	r8, r0
 800d3fc:	b928      	cbnz	r0, 800d40a <__multadd+0x5a>
 800d3fe:	4602      	mov	r2, r0
 800d400:	4b0c      	ldr	r3, [pc, #48]	; (800d434 <__multadd+0x84>)
 800d402:	480d      	ldr	r0, [pc, #52]	; (800d438 <__multadd+0x88>)
 800d404:	21b5      	movs	r1, #181	; 0xb5
 800d406:	f000 fd57 	bl	800deb8 <__assert_func>
 800d40a:	6922      	ldr	r2, [r4, #16]
 800d40c:	3202      	adds	r2, #2
 800d40e:	f104 010c 	add.w	r1, r4, #12
 800d412:	0092      	lsls	r2, r2, #2
 800d414:	300c      	adds	r0, #12
 800d416:	f7fe fc3b 	bl	800bc90 <memcpy>
 800d41a:	4621      	mov	r1, r4
 800d41c:	4638      	mov	r0, r7
 800d41e:	f7ff ffa5 	bl	800d36c <_Bfree>
 800d422:	4644      	mov	r4, r8
 800d424:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800d428:	3501      	adds	r5, #1
 800d42a:	615e      	str	r6, [r3, #20]
 800d42c:	6125      	str	r5, [r4, #16]
 800d42e:	4620      	mov	r0, r4
 800d430:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d434:	0800ed43 	.word	0x0800ed43
 800d438:	0800ed54 	.word	0x0800ed54

0800d43c <__hi0bits>:
 800d43c:	0c03      	lsrs	r3, r0, #16
 800d43e:	041b      	lsls	r3, r3, #16
 800d440:	b9d3      	cbnz	r3, 800d478 <__hi0bits+0x3c>
 800d442:	0400      	lsls	r0, r0, #16
 800d444:	2310      	movs	r3, #16
 800d446:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800d44a:	bf04      	itt	eq
 800d44c:	0200      	lsleq	r0, r0, #8
 800d44e:	3308      	addeq	r3, #8
 800d450:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800d454:	bf04      	itt	eq
 800d456:	0100      	lsleq	r0, r0, #4
 800d458:	3304      	addeq	r3, #4
 800d45a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800d45e:	bf04      	itt	eq
 800d460:	0080      	lsleq	r0, r0, #2
 800d462:	3302      	addeq	r3, #2
 800d464:	2800      	cmp	r0, #0
 800d466:	db05      	blt.n	800d474 <__hi0bits+0x38>
 800d468:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800d46c:	f103 0301 	add.w	r3, r3, #1
 800d470:	bf08      	it	eq
 800d472:	2320      	moveq	r3, #32
 800d474:	4618      	mov	r0, r3
 800d476:	4770      	bx	lr
 800d478:	2300      	movs	r3, #0
 800d47a:	e7e4      	b.n	800d446 <__hi0bits+0xa>

0800d47c <__lo0bits>:
 800d47c:	6803      	ldr	r3, [r0, #0]
 800d47e:	f013 0207 	ands.w	r2, r3, #7
 800d482:	4601      	mov	r1, r0
 800d484:	d00b      	beq.n	800d49e <__lo0bits+0x22>
 800d486:	07da      	lsls	r2, r3, #31
 800d488:	d423      	bmi.n	800d4d2 <__lo0bits+0x56>
 800d48a:	0798      	lsls	r0, r3, #30
 800d48c:	bf49      	itett	mi
 800d48e:	085b      	lsrmi	r3, r3, #1
 800d490:	089b      	lsrpl	r3, r3, #2
 800d492:	2001      	movmi	r0, #1
 800d494:	600b      	strmi	r3, [r1, #0]
 800d496:	bf5c      	itt	pl
 800d498:	600b      	strpl	r3, [r1, #0]
 800d49a:	2002      	movpl	r0, #2
 800d49c:	4770      	bx	lr
 800d49e:	b298      	uxth	r0, r3
 800d4a0:	b9a8      	cbnz	r0, 800d4ce <__lo0bits+0x52>
 800d4a2:	0c1b      	lsrs	r3, r3, #16
 800d4a4:	2010      	movs	r0, #16
 800d4a6:	b2da      	uxtb	r2, r3
 800d4a8:	b90a      	cbnz	r2, 800d4ae <__lo0bits+0x32>
 800d4aa:	3008      	adds	r0, #8
 800d4ac:	0a1b      	lsrs	r3, r3, #8
 800d4ae:	071a      	lsls	r2, r3, #28
 800d4b0:	bf04      	itt	eq
 800d4b2:	091b      	lsreq	r3, r3, #4
 800d4b4:	3004      	addeq	r0, #4
 800d4b6:	079a      	lsls	r2, r3, #30
 800d4b8:	bf04      	itt	eq
 800d4ba:	089b      	lsreq	r3, r3, #2
 800d4bc:	3002      	addeq	r0, #2
 800d4be:	07da      	lsls	r2, r3, #31
 800d4c0:	d403      	bmi.n	800d4ca <__lo0bits+0x4e>
 800d4c2:	085b      	lsrs	r3, r3, #1
 800d4c4:	f100 0001 	add.w	r0, r0, #1
 800d4c8:	d005      	beq.n	800d4d6 <__lo0bits+0x5a>
 800d4ca:	600b      	str	r3, [r1, #0]
 800d4cc:	4770      	bx	lr
 800d4ce:	4610      	mov	r0, r2
 800d4d0:	e7e9      	b.n	800d4a6 <__lo0bits+0x2a>
 800d4d2:	2000      	movs	r0, #0
 800d4d4:	4770      	bx	lr
 800d4d6:	2020      	movs	r0, #32
 800d4d8:	4770      	bx	lr
	...

0800d4dc <__i2b>:
 800d4dc:	b510      	push	{r4, lr}
 800d4de:	460c      	mov	r4, r1
 800d4e0:	2101      	movs	r1, #1
 800d4e2:	f7ff ff03 	bl	800d2ec <_Balloc>
 800d4e6:	4602      	mov	r2, r0
 800d4e8:	b928      	cbnz	r0, 800d4f6 <__i2b+0x1a>
 800d4ea:	4b05      	ldr	r3, [pc, #20]	; (800d500 <__i2b+0x24>)
 800d4ec:	4805      	ldr	r0, [pc, #20]	; (800d504 <__i2b+0x28>)
 800d4ee:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800d4f2:	f000 fce1 	bl	800deb8 <__assert_func>
 800d4f6:	2301      	movs	r3, #1
 800d4f8:	6144      	str	r4, [r0, #20]
 800d4fa:	6103      	str	r3, [r0, #16]
 800d4fc:	bd10      	pop	{r4, pc}
 800d4fe:	bf00      	nop
 800d500:	0800ed43 	.word	0x0800ed43
 800d504:	0800ed54 	.word	0x0800ed54

0800d508 <__multiply>:
 800d508:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d50c:	4691      	mov	r9, r2
 800d50e:	690a      	ldr	r2, [r1, #16]
 800d510:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800d514:	429a      	cmp	r2, r3
 800d516:	bfb8      	it	lt
 800d518:	460b      	movlt	r3, r1
 800d51a:	460c      	mov	r4, r1
 800d51c:	bfbc      	itt	lt
 800d51e:	464c      	movlt	r4, r9
 800d520:	4699      	movlt	r9, r3
 800d522:	6927      	ldr	r7, [r4, #16]
 800d524:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800d528:	68a3      	ldr	r3, [r4, #8]
 800d52a:	6861      	ldr	r1, [r4, #4]
 800d52c:	eb07 060a 	add.w	r6, r7, sl
 800d530:	42b3      	cmp	r3, r6
 800d532:	b085      	sub	sp, #20
 800d534:	bfb8      	it	lt
 800d536:	3101      	addlt	r1, #1
 800d538:	f7ff fed8 	bl	800d2ec <_Balloc>
 800d53c:	b930      	cbnz	r0, 800d54c <__multiply+0x44>
 800d53e:	4602      	mov	r2, r0
 800d540:	4b44      	ldr	r3, [pc, #272]	; (800d654 <__multiply+0x14c>)
 800d542:	4845      	ldr	r0, [pc, #276]	; (800d658 <__multiply+0x150>)
 800d544:	f240 115d 	movw	r1, #349	; 0x15d
 800d548:	f000 fcb6 	bl	800deb8 <__assert_func>
 800d54c:	f100 0514 	add.w	r5, r0, #20
 800d550:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800d554:	462b      	mov	r3, r5
 800d556:	2200      	movs	r2, #0
 800d558:	4543      	cmp	r3, r8
 800d55a:	d321      	bcc.n	800d5a0 <__multiply+0x98>
 800d55c:	f104 0314 	add.w	r3, r4, #20
 800d560:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800d564:	f109 0314 	add.w	r3, r9, #20
 800d568:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800d56c:	9202      	str	r2, [sp, #8]
 800d56e:	1b3a      	subs	r2, r7, r4
 800d570:	3a15      	subs	r2, #21
 800d572:	f022 0203 	bic.w	r2, r2, #3
 800d576:	3204      	adds	r2, #4
 800d578:	f104 0115 	add.w	r1, r4, #21
 800d57c:	428f      	cmp	r7, r1
 800d57e:	bf38      	it	cc
 800d580:	2204      	movcc	r2, #4
 800d582:	9201      	str	r2, [sp, #4]
 800d584:	9a02      	ldr	r2, [sp, #8]
 800d586:	9303      	str	r3, [sp, #12]
 800d588:	429a      	cmp	r2, r3
 800d58a:	d80c      	bhi.n	800d5a6 <__multiply+0x9e>
 800d58c:	2e00      	cmp	r6, #0
 800d58e:	dd03      	ble.n	800d598 <__multiply+0x90>
 800d590:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800d594:	2b00      	cmp	r3, #0
 800d596:	d05a      	beq.n	800d64e <__multiply+0x146>
 800d598:	6106      	str	r6, [r0, #16]
 800d59a:	b005      	add	sp, #20
 800d59c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d5a0:	f843 2b04 	str.w	r2, [r3], #4
 800d5a4:	e7d8      	b.n	800d558 <__multiply+0x50>
 800d5a6:	f8b3 a000 	ldrh.w	sl, [r3]
 800d5aa:	f1ba 0f00 	cmp.w	sl, #0
 800d5ae:	d024      	beq.n	800d5fa <__multiply+0xf2>
 800d5b0:	f104 0e14 	add.w	lr, r4, #20
 800d5b4:	46a9      	mov	r9, r5
 800d5b6:	f04f 0c00 	mov.w	ip, #0
 800d5ba:	f85e 2b04 	ldr.w	r2, [lr], #4
 800d5be:	f8d9 1000 	ldr.w	r1, [r9]
 800d5c2:	fa1f fb82 	uxth.w	fp, r2
 800d5c6:	b289      	uxth	r1, r1
 800d5c8:	fb0a 110b 	mla	r1, sl, fp, r1
 800d5cc:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800d5d0:	f8d9 2000 	ldr.w	r2, [r9]
 800d5d4:	4461      	add	r1, ip
 800d5d6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800d5da:	fb0a c20b 	mla	r2, sl, fp, ip
 800d5de:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800d5e2:	b289      	uxth	r1, r1
 800d5e4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800d5e8:	4577      	cmp	r7, lr
 800d5ea:	f849 1b04 	str.w	r1, [r9], #4
 800d5ee:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800d5f2:	d8e2      	bhi.n	800d5ba <__multiply+0xb2>
 800d5f4:	9a01      	ldr	r2, [sp, #4]
 800d5f6:	f845 c002 	str.w	ip, [r5, r2]
 800d5fa:	9a03      	ldr	r2, [sp, #12]
 800d5fc:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800d600:	3304      	adds	r3, #4
 800d602:	f1b9 0f00 	cmp.w	r9, #0
 800d606:	d020      	beq.n	800d64a <__multiply+0x142>
 800d608:	6829      	ldr	r1, [r5, #0]
 800d60a:	f104 0c14 	add.w	ip, r4, #20
 800d60e:	46ae      	mov	lr, r5
 800d610:	f04f 0a00 	mov.w	sl, #0
 800d614:	f8bc b000 	ldrh.w	fp, [ip]
 800d618:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800d61c:	fb09 220b 	mla	r2, r9, fp, r2
 800d620:	4492      	add	sl, r2
 800d622:	b289      	uxth	r1, r1
 800d624:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800d628:	f84e 1b04 	str.w	r1, [lr], #4
 800d62c:	f85c 2b04 	ldr.w	r2, [ip], #4
 800d630:	f8be 1000 	ldrh.w	r1, [lr]
 800d634:	0c12      	lsrs	r2, r2, #16
 800d636:	fb09 1102 	mla	r1, r9, r2, r1
 800d63a:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800d63e:	4567      	cmp	r7, ip
 800d640:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800d644:	d8e6      	bhi.n	800d614 <__multiply+0x10c>
 800d646:	9a01      	ldr	r2, [sp, #4]
 800d648:	50a9      	str	r1, [r5, r2]
 800d64a:	3504      	adds	r5, #4
 800d64c:	e79a      	b.n	800d584 <__multiply+0x7c>
 800d64e:	3e01      	subs	r6, #1
 800d650:	e79c      	b.n	800d58c <__multiply+0x84>
 800d652:	bf00      	nop
 800d654:	0800ed43 	.word	0x0800ed43
 800d658:	0800ed54 	.word	0x0800ed54

0800d65c <__pow5mult>:
 800d65c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d660:	4615      	mov	r5, r2
 800d662:	f012 0203 	ands.w	r2, r2, #3
 800d666:	4606      	mov	r6, r0
 800d668:	460f      	mov	r7, r1
 800d66a:	d007      	beq.n	800d67c <__pow5mult+0x20>
 800d66c:	4c25      	ldr	r4, [pc, #148]	; (800d704 <__pow5mult+0xa8>)
 800d66e:	3a01      	subs	r2, #1
 800d670:	2300      	movs	r3, #0
 800d672:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800d676:	f7ff fe9b 	bl	800d3b0 <__multadd>
 800d67a:	4607      	mov	r7, r0
 800d67c:	10ad      	asrs	r5, r5, #2
 800d67e:	d03d      	beq.n	800d6fc <__pow5mult+0xa0>
 800d680:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800d682:	b97c      	cbnz	r4, 800d6a4 <__pow5mult+0x48>
 800d684:	2010      	movs	r0, #16
 800d686:	f7ff fe29 	bl	800d2dc <malloc>
 800d68a:	4602      	mov	r2, r0
 800d68c:	6270      	str	r0, [r6, #36]	; 0x24
 800d68e:	b928      	cbnz	r0, 800d69c <__pow5mult+0x40>
 800d690:	4b1d      	ldr	r3, [pc, #116]	; (800d708 <__pow5mult+0xac>)
 800d692:	481e      	ldr	r0, [pc, #120]	; (800d70c <__pow5mult+0xb0>)
 800d694:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800d698:	f000 fc0e 	bl	800deb8 <__assert_func>
 800d69c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800d6a0:	6004      	str	r4, [r0, #0]
 800d6a2:	60c4      	str	r4, [r0, #12]
 800d6a4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800d6a8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800d6ac:	b94c      	cbnz	r4, 800d6c2 <__pow5mult+0x66>
 800d6ae:	f240 2171 	movw	r1, #625	; 0x271
 800d6b2:	4630      	mov	r0, r6
 800d6b4:	f7ff ff12 	bl	800d4dc <__i2b>
 800d6b8:	2300      	movs	r3, #0
 800d6ba:	f8c8 0008 	str.w	r0, [r8, #8]
 800d6be:	4604      	mov	r4, r0
 800d6c0:	6003      	str	r3, [r0, #0]
 800d6c2:	f04f 0900 	mov.w	r9, #0
 800d6c6:	07eb      	lsls	r3, r5, #31
 800d6c8:	d50a      	bpl.n	800d6e0 <__pow5mult+0x84>
 800d6ca:	4639      	mov	r1, r7
 800d6cc:	4622      	mov	r2, r4
 800d6ce:	4630      	mov	r0, r6
 800d6d0:	f7ff ff1a 	bl	800d508 <__multiply>
 800d6d4:	4639      	mov	r1, r7
 800d6d6:	4680      	mov	r8, r0
 800d6d8:	4630      	mov	r0, r6
 800d6da:	f7ff fe47 	bl	800d36c <_Bfree>
 800d6de:	4647      	mov	r7, r8
 800d6e0:	106d      	asrs	r5, r5, #1
 800d6e2:	d00b      	beq.n	800d6fc <__pow5mult+0xa0>
 800d6e4:	6820      	ldr	r0, [r4, #0]
 800d6e6:	b938      	cbnz	r0, 800d6f8 <__pow5mult+0x9c>
 800d6e8:	4622      	mov	r2, r4
 800d6ea:	4621      	mov	r1, r4
 800d6ec:	4630      	mov	r0, r6
 800d6ee:	f7ff ff0b 	bl	800d508 <__multiply>
 800d6f2:	6020      	str	r0, [r4, #0]
 800d6f4:	f8c0 9000 	str.w	r9, [r0]
 800d6f8:	4604      	mov	r4, r0
 800d6fa:	e7e4      	b.n	800d6c6 <__pow5mult+0x6a>
 800d6fc:	4638      	mov	r0, r7
 800d6fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d702:	bf00      	nop
 800d704:	0800eea0 	.word	0x0800eea0
 800d708:	0800ecd1 	.word	0x0800ecd1
 800d70c:	0800ed54 	.word	0x0800ed54

0800d710 <__lshift>:
 800d710:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d714:	460c      	mov	r4, r1
 800d716:	6849      	ldr	r1, [r1, #4]
 800d718:	6923      	ldr	r3, [r4, #16]
 800d71a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800d71e:	68a3      	ldr	r3, [r4, #8]
 800d720:	4607      	mov	r7, r0
 800d722:	4691      	mov	r9, r2
 800d724:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800d728:	f108 0601 	add.w	r6, r8, #1
 800d72c:	42b3      	cmp	r3, r6
 800d72e:	db0b      	blt.n	800d748 <__lshift+0x38>
 800d730:	4638      	mov	r0, r7
 800d732:	f7ff fddb 	bl	800d2ec <_Balloc>
 800d736:	4605      	mov	r5, r0
 800d738:	b948      	cbnz	r0, 800d74e <__lshift+0x3e>
 800d73a:	4602      	mov	r2, r0
 800d73c:	4b2a      	ldr	r3, [pc, #168]	; (800d7e8 <__lshift+0xd8>)
 800d73e:	482b      	ldr	r0, [pc, #172]	; (800d7ec <__lshift+0xdc>)
 800d740:	f240 11d9 	movw	r1, #473	; 0x1d9
 800d744:	f000 fbb8 	bl	800deb8 <__assert_func>
 800d748:	3101      	adds	r1, #1
 800d74a:	005b      	lsls	r3, r3, #1
 800d74c:	e7ee      	b.n	800d72c <__lshift+0x1c>
 800d74e:	2300      	movs	r3, #0
 800d750:	f100 0114 	add.w	r1, r0, #20
 800d754:	f100 0210 	add.w	r2, r0, #16
 800d758:	4618      	mov	r0, r3
 800d75a:	4553      	cmp	r3, sl
 800d75c:	db37      	blt.n	800d7ce <__lshift+0xbe>
 800d75e:	6920      	ldr	r0, [r4, #16]
 800d760:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800d764:	f104 0314 	add.w	r3, r4, #20
 800d768:	f019 091f 	ands.w	r9, r9, #31
 800d76c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800d770:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800d774:	d02f      	beq.n	800d7d6 <__lshift+0xc6>
 800d776:	f1c9 0e20 	rsb	lr, r9, #32
 800d77a:	468a      	mov	sl, r1
 800d77c:	f04f 0c00 	mov.w	ip, #0
 800d780:	681a      	ldr	r2, [r3, #0]
 800d782:	fa02 f209 	lsl.w	r2, r2, r9
 800d786:	ea42 020c 	orr.w	r2, r2, ip
 800d78a:	f84a 2b04 	str.w	r2, [sl], #4
 800d78e:	f853 2b04 	ldr.w	r2, [r3], #4
 800d792:	4298      	cmp	r0, r3
 800d794:	fa22 fc0e 	lsr.w	ip, r2, lr
 800d798:	d8f2      	bhi.n	800d780 <__lshift+0x70>
 800d79a:	1b03      	subs	r3, r0, r4
 800d79c:	3b15      	subs	r3, #21
 800d79e:	f023 0303 	bic.w	r3, r3, #3
 800d7a2:	3304      	adds	r3, #4
 800d7a4:	f104 0215 	add.w	r2, r4, #21
 800d7a8:	4290      	cmp	r0, r2
 800d7aa:	bf38      	it	cc
 800d7ac:	2304      	movcc	r3, #4
 800d7ae:	f841 c003 	str.w	ip, [r1, r3]
 800d7b2:	f1bc 0f00 	cmp.w	ip, #0
 800d7b6:	d001      	beq.n	800d7bc <__lshift+0xac>
 800d7b8:	f108 0602 	add.w	r6, r8, #2
 800d7bc:	3e01      	subs	r6, #1
 800d7be:	4638      	mov	r0, r7
 800d7c0:	612e      	str	r6, [r5, #16]
 800d7c2:	4621      	mov	r1, r4
 800d7c4:	f7ff fdd2 	bl	800d36c <_Bfree>
 800d7c8:	4628      	mov	r0, r5
 800d7ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d7ce:	f842 0f04 	str.w	r0, [r2, #4]!
 800d7d2:	3301      	adds	r3, #1
 800d7d4:	e7c1      	b.n	800d75a <__lshift+0x4a>
 800d7d6:	3904      	subs	r1, #4
 800d7d8:	f853 2b04 	ldr.w	r2, [r3], #4
 800d7dc:	f841 2f04 	str.w	r2, [r1, #4]!
 800d7e0:	4298      	cmp	r0, r3
 800d7e2:	d8f9      	bhi.n	800d7d8 <__lshift+0xc8>
 800d7e4:	e7ea      	b.n	800d7bc <__lshift+0xac>
 800d7e6:	bf00      	nop
 800d7e8:	0800ed43 	.word	0x0800ed43
 800d7ec:	0800ed54 	.word	0x0800ed54

0800d7f0 <__mcmp>:
 800d7f0:	b530      	push	{r4, r5, lr}
 800d7f2:	6902      	ldr	r2, [r0, #16]
 800d7f4:	690c      	ldr	r4, [r1, #16]
 800d7f6:	1b12      	subs	r2, r2, r4
 800d7f8:	d10e      	bne.n	800d818 <__mcmp+0x28>
 800d7fa:	f100 0314 	add.w	r3, r0, #20
 800d7fe:	3114      	adds	r1, #20
 800d800:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800d804:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800d808:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800d80c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800d810:	42a5      	cmp	r5, r4
 800d812:	d003      	beq.n	800d81c <__mcmp+0x2c>
 800d814:	d305      	bcc.n	800d822 <__mcmp+0x32>
 800d816:	2201      	movs	r2, #1
 800d818:	4610      	mov	r0, r2
 800d81a:	bd30      	pop	{r4, r5, pc}
 800d81c:	4283      	cmp	r3, r0
 800d81e:	d3f3      	bcc.n	800d808 <__mcmp+0x18>
 800d820:	e7fa      	b.n	800d818 <__mcmp+0x28>
 800d822:	f04f 32ff 	mov.w	r2, #4294967295
 800d826:	e7f7      	b.n	800d818 <__mcmp+0x28>

0800d828 <__mdiff>:
 800d828:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d82c:	460c      	mov	r4, r1
 800d82e:	4606      	mov	r6, r0
 800d830:	4611      	mov	r1, r2
 800d832:	4620      	mov	r0, r4
 800d834:	4690      	mov	r8, r2
 800d836:	f7ff ffdb 	bl	800d7f0 <__mcmp>
 800d83a:	1e05      	subs	r5, r0, #0
 800d83c:	d110      	bne.n	800d860 <__mdiff+0x38>
 800d83e:	4629      	mov	r1, r5
 800d840:	4630      	mov	r0, r6
 800d842:	f7ff fd53 	bl	800d2ec <_Balloc>
 800d846:	b930      	cbnz	r0, 800d856 <__mdiff+0x2e>
 800d848:	4b3a      	ldr	r3, [pc, #232]	; (800d934 <__mdiff+0x10c>)
 800d84a:	4602      	mov	r2, r0
 800d84c:	f240 2132 	movw	r1, #562	; 0x232
 800d850:	4839      	ldr	r0, [pc, #228]	; (800d938 <__mdiff+0x110>)
 800d852:	f000 fb31 	bl	800deb8 <__assert_func>
 800d856:	2301      	movs	r3, #1
 800d858:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800d85c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d860:	bfa4      	itt	ge
 800d862:	4643      	movge	r3, r8
 800d864:	46a0      	movge	r8, r4
 800d866:	4630      	mov	r0, r6
 800d868:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800d86c:	bfa6      	itte	ge
 800d86e:	461c      	movge	r4, r3
 800d870:	2500      	movge	r5, #0
 800d872:	2501      	movlt	r5, #1
 800d874:	f7ff fd3a 	bl	800d2ec <_Balloc>
 800d878:	b920      	cbnz	r0, 800d884 <__mdiff+0x5c>
 800d87a:	4b2e      	ldr	r3, [pc, #184]	; (800d934 <__mdiff+0x10c>)
 800d87c:	4602      	mov	r2, r0
 800d87e:	f44f 7110 	mov.w	r1, #576	; 0x240
 800d882:	e7e5      	b.n	800d850 <__mdiff+0x28>
 800d884:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800d888:	6926      	ldr	r6, [r4, #16]
 800d88a:	60c5      	str	r5, [r0, #12]
 800d88c:	f104 0914 	add.w	r9, r4, #20
 800d890:	f108 0514 	add.w	r5, r8, #20
 800d894:	f100 0e14 	add.w	lr, r0, #20
 800d898:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800d89c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800d8a0:	f108 0210 	add.w	r2, r8, #16
 800d8a4:	46f2      	mov	sl, lr
 800d8a6:	2100      	movs	r1, #0
 800d8a8:	f859 3b04 	ldr.w	r3, [r9], #4
 800d8ac:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800d8b0:	fa1f f883 	uxth.w	r8, r3
 800d8b4:	fa11 f18b 	uxtah	r1, r1, fp
 800d8b8:	0c1b      	lsrs	r3, r3, #16
 800d8ba:	eba1 0808 	sub.w	r8, r1, r8
 800d8be:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800d8c2:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800d8c6:	fa1f f888 	uxth.w	r8, r8
 800d8ca:	1419      	asrs	r1, r3, #16
 800d8cc:	454e      	cmp	r6, r9
 800d8ce:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800d8d2:	f84a 3b04 	str.w	r3, [sl], #4
 800d8d6:	d8e7      	bhi.n	800d8a8 <__mdiff+0x80>
 800d8d8:	1b33      	subs	r3, r6, r4
 800d8da:	3b15      	subs	r3, #21
 800d8dc:	f023 0303 	bic.w	r3, r3, #3
 800d8e0:	3304      	adds	r3, #4
 800d8e2:	3415      	adds	r4, #21
 800d8e4:	42a6      	cmp	r6, r4
 800d8e6:	bf38      	it	cc
 800d8e8:	2304      	movcc	r3, #4
 800d8ea:	441d      	add	r5, r3
 800d8ec:	4473      	add	r3, lr
 800d8ee:	469e      	mov	lr, r3
 800d8f0:	462e      	mov	r6, r5
 800d8f2:	4566      	cmp	r6, ip
 800d8f4:	d30e      	bcc.n	800d914 <__mdiff+0xec>
 800d8f6:	f10c 0203 	add.w	r2, ip, #3
 800d8fa:	1b52      	subs	r2, r2, r5
 800d8fc:	f022 0203 	bic.w	r2, r2, #3
 800d900:	3d03      	subs	r5, #3
 800d902:	45ac      	cmp	ip, r5
 800d904:	bf38      	it	cc
 800d906:	2200      	movcc	r2, #0
 800d908:	441a      	add	r2, r3
 800d90a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800d90e:	b17b      	cbz	r3, 800d930 <__mdiff+0x108>
 800d910:	6107      	str	r7, [r0, #16]
 800d912:	e7a3      	b.n	800d85c <__mdiff+0x34>
 800d914:	f856 8b04 	ldr.w	r8, [r6], #4
 800d918:	fa11 f288 	uxtah	r2, r1, r8
 800d91c:	1414      	asrs	r4, r2, #16
 800d91e:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800d922:	b292      	uxth	r2, r2
 800d924:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800d928:	f84e 2b04 	str.w	r2, [lr], #4
 800d92c:	1421      	asrs	r1, r4, #16
 800d92e:	e7e0      	b.n	800d8f2 <__mdiff+0xca>
 800d930:	3f01      	subs	r7, #1
 800d932:	e7ea      	b.n	800d90a <__mdiff+0xe2>
 800d934:	0800ed43 	.word	0x0800ed43
 800d938:	0800ed54 	.word	0x0800ed54

0800d93c <__d2b>:
 800d93c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800d940:	4689      	mov	r9, r1
 800d942:	2101      	movs	r1, #1
 800d944:	ec57 6b10 	vmov	r6, r7, d0
 800d948:	4690      	mov	r8, r2
 800d94a:	f7ff fccf 	bl	800d2ec <_Balloc>
 800d94e:	4604      	mov	r4, r0
 800d950:	b930      	cbnz	r0, 800d960 <__d2b+0x24>
 800d952:	4602      	mov	r2, r0
 800d954:	4b25      	ldr	r3, [pc, #148]	; (800d9ec <__d2b+0xb0>)
 800d956:	4826      	ldr	r0, [pc, #152]	; (800d9f0 <__d2b+0xb4>)
 800d958:	f240 310a 	movw	r1, #778	; 0x30a
 800d95c:	f000 faac 	bl	800deb8 <__assert_func>
 800d960:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800d964:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800d968:	bb35      	cbnz	r5, 800d9b8 <__d2b+0x7c>
 800d96a:	2e00      	cmp	r6, #0
 800d96c:	9301      	str	r3, [sp, #4]
 800d96e:	d028      	beq.n	800d9c2 <__d2b+0x86>
 800d970:	4668      	mov	r0, sp
 800d972:	9600      	str	r6, [sp, #0]
 800d974:	f7ff fd82 	bl	800d47c <__lo0bits>
 800d978:	9900      	ldr	r1, [sp, #0]
 800d97a:	b300      	cbz	r0, 800d9be <__d2b+0x82>
 800d97c:	9a01      	ldr	r2, [sp, #4]
 800d97e:	f1c0 0320 	rsb	r3, r0, #32
 800d982:	fa02 f303 	lsl.w	r3, r2, r3
 800d986:	430b      	orrs	r3, r1
 800d988:	40c2      	lsrs	r2, r0
 800d98a:	6163      	str	r3, [r4, #20]
 800d98c:	9201      	str	r2, [sp, #4]
 800d98e:	9b01      	ldr	r3, [sp, #4]
 800d990:	61a3      	str	r3, [r4, #24]
 800d992:	2b00      	cmp	r3, #0
 800d994:	bf14      	ite	ne
 800d996:	2202      	movne	r2, #2
 800d998:	2201      	moveq	r2, #1
 800d99a:	6122      	str	r2, [r4, #16]
 800d99c:	b1d5      	cbz	r5, 800d9d4 <__d2b+0x98>
 800d99e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800d9a2:	4405      	add	r5, r0
 800d9a4:	f8c9 5000 	str.w	r5, [r9]
 800d9a8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800d9ac:	f8c8 0000 	str.w	r0, [r8]
 800d9b0:	4620      	mov	r0, r4
 800d9b2:	b003      	add	sp, #12
 800d9b4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d9b8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d9bc:	e7d5      	b.n	800d96a <__d2b+0x2e>
 800d9be:	6161      	str	r1, [r4, #20]
 800d9c0:	e7e5      	b.n	800d98e <__d2b+0x52>
 800d9c2:	a801      	add	r0, sp, #4
 800d9c4:	f7ff fd5a 	bl	800d47c <__lo0bits>
 800d9c8:	9b01      	ldr	r3, [sp, #4]
 800d9ca:	6163      	str	r3, [r4, #20]
 800d9cc:	2201      	movs	r2, #1
 800d9ce:	6122      	str	r2, [r4, #16]
 800d9d0:	3020      	adds	r0, #32
 800d9d2:	e7e3      	b.n	800d99c <__d2b+0x60>
 800d9d4:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800d9d8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800d9dc:	f8c9 0000 	str.w	r0, [r9]
 800d9e0:	6918      	ldr	r0, [r3, #16]
 800d9e2:	f7ff fd2b 	bl	800d43c <__hi0bits>
 800d9e6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800d9ea:	e7df      	b.n	800d9ac <__d2b+0x70>
 800d9ec:	0800ed43 	.word	0x0800ed43
 800d9f0:	0800ed54 	.word	0x0800ed54

0800d9f4 <_calloc_r>:
 800d9f4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d9f6:	fba1 2402 	umull	r2, r4, r1, r2
 800d9fa:	b94c      	cbnz	r4, 800da10 <_calloc_r+0x1c>
 800d9fc:	4611      	mov	r1, r2
 800d9fe:	9201      	str	r2, [sp, #4]
 800da00:	f000 f87a 	bl	800daf8 <_malloc_r>
 800da04:	9a01      	ldr	r2, [sp, #4]
 800da06:	4605      	mov	r5, r0
 800da08:	b930      	cbnz	r0, 800da18 <_calloc_r+0x24>
 800da0a:	4628      	mov	r0, r5
 800da0c:	b003      	add	sp, #12
 800da0e:	bd30      	pop	{r4, r5, pc}
 800da10:	220c      	movs	r2, #12
 800da12:	6002      	str	r2, [r0, #0]
 800da14:	2500      	movs	r5, #0
 800da16:	e7f8      	b.n	800da0a <_calloc_r+0x16>
 800da18:	4621      	mov	r1, r4
 800da1a:	f7fe f947 	bl	800bcac <memset>
 800da1e:	e7f4      	b.n	800da0a <_calloc_r+0x16>

0800da20 <_free_r>:
 800da20:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800da22:	2900      	cmp	r1, #0
 800da24:	d044      	beq.n	800dab0 <_free_r+0x90>
 800da26:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800da2a:	9001      	str	r0, [sp, #4]
 800da2c:	2b00      	cmp	r3, #0
 800da2e:	f1a1 0404 	sub.w	r4, r1, #4
 800da32:	bfb8      	it	lt
 800da34:	18e4      	addlt	r4, r4, r3
 800da36:	f000 fa9b 	bl	800df70 <__malloc_lock>
 800da3a:	4a1e      	ldr	r2, [pc, #120]	; (800dab4 <_free_r+0x94>)
 800da3c:	9801      	ldr	r0, [sp, #4]
 800da3e:	6813      	ldr	r3, [r2, #0]
 800da40:	b933      	cbnz	r3, 800da50 <_free_r+0x30>
 800da42:	6063      	str	r3, [r4, #4]
 800da44:	6014      	str	r4, [r2, #0]
 800da46:	b003      	add	sp, #12
 800da48:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800da4c:	f000 ba96 	b.w	800df7c <__malloc_unlock>
 800da50:	42a3      	cmp	r3, r4
 800da52:	d908      	bls.n	800da66 <_free_r+0x46>
 800da54:	6825      	ldr	r5, [r4, #0]
 800da56:	1961      	adds	r1, r4, r5
 800da58:	428b      	cmp	r3, r1
 800da5a:	bf01      	itttt	eq
 800da5c:	6819      	ldreq	r1, [r3, #0]
 800da5e:	685b      	ldreq	r3, [r3, #4]
 800da60:	1949      	addeq	r1, r1, r5
 800da62:	6021      	streq	r1, [r4, #0]
 800da64:	e7ed      	b.n	800da42 <_free_r+0x22>
 800da66:	461a      	mov	r2, r3
 800da68:	685b      	ldr	r3, [r3, #4]
 800da6a:	b10b      	cbz	r3, 800da70 <_free_r+0x50>
 800da6c:	42a3      	cmp	r3, r4
 800da6e:	d9fa      	bls.n	800da66 <_free_r+0x46>
 800da70:	6811      	ldr	r1, [r2, #0]
 800da72:	1855      	adds	r5, r2, r1
 800da74:	42a5      	cmp	r5, r4
 800da76:	d10b      	bne.n	800da90 <_free_r+0x70>
 800da78:	6824      	ldr	r4, [r4, #0]
 800da7a:	4421      	add	r1, r4
 800da7c:	1854      	adds	r4, r2, r1
 800da7e:	42a3      	cmp	r3, r4
 800da80:	6011      	str	r1, [r2, #0]
 800da82:	d1e0      	bne.n	800da46 <_free_r+0x26>
 800da84:	681c      	ldr	r4, [r3, #0]
 800da86:	685b      	ldr	r3, [r3, #4]
 800da88:	6053      	str	r3, [r2, #4]
 800da8a:	4421      	add	r1, r4
 800da8c:	6011      	str	r1, [r2, #0]
 800da8e:	e7da      	b.n	800da46 <_free_r+0x26>
 800da90:	d902      	bls.n	800da98 <_free_r+0x78>
 800da92:	230c      	movs	r3, #12
 800da94:	6003      	str	r3, [r0, #0]
 800da96:	e7d6      	b.n	800da46 <_free_r+0x26>
 800da98:	6825      	ldr	r5, [r4, #0]
 800da9a:	1961      	adds	r1, r4, r5
 800da9c:	428b      	cmp	r3, r1
 800da9e:	bf04      	itt	eq
 800daa0:	6819      	ldreq	r1, [r3, #0]
 800daa2:	685b      	ldreq	r3, [r3, #4]
 800daa4:	6063      	str	r3, [r4, #4]
 800daa6:	bf04      	itt	eq
 800daa8:	1949      	addeq	r1, r1, r5
 800daaa:	6021      	streq	r1, [r4, #0]
 800daac:	6054      	str	r4, [r2, #4]
 800daae:	e7ca      	b.n	800da46 <_free_r+0x26>
 800dab0:	b003      	add	sp, #12
 800dab2:	bd30      	pop	{r4, r5, pc}
 800dab4:	20009630 	.word	0x20009630

0800dab8 <sbrk_aligned>:
 800dab8:	b570      	push	{r4, r5, r6, lr}
 800daba:	4e0e      	ldr	r6, [pc, #56]	; (800daf4 <sbrk_aligned+0x3c>)
 800dabc:	460c      	mov	r4, r1
 800dabe:	6831      	ldr	r1, [r6, #0]
 800dac0:	4605      	mov	r5, r0
 800dac2:	b911      	cbnz	r1, 800daca <sbrk_aligned+0x12>
 800dac4:	f000 f9e8 	bl	800de98 <_sbrk_r>
 800dac8:	6030      	str	r0, [r6, #0]
 800daca:	4621      	mov	r1, r4
 800dacc:	4628      	mov	r0, r5
 800dace:	f000 f9e3 	bl	800de98 <_sbrk_r>
 800dad2:	1c43      	adds	r3, r0, #1
 800dad4:	d00a      	beq.n	800daec <sbrk_aligned+0x34>
 800dad6:	1cc4      	adds	r4, r0, #3
 800dad8:	f024 0403 	bic.w	r4, r4, #3
 800dadc:	42a0      	cmp	r0, r4
 800dade:	d007      	beq.n	800daf0 <sbrk_aligned+0x38>
 800dae0:	1a21      	subs	r1, r4, r0
 800dae2:	4628      	mov	r0, r5
 800dae4:	f000 f9d8 	bl	800de98 <_sbrk_r>
 800dae8:	3001      	adds	r0, #1
 800daea:	d101      	bne.n	800daf0 <sbrk_aligned+0x38>
 800daec:	f04f 34ff 	mov.w	r4, #4294967295
 800daf0:	4620      	mov	r0, r4
 800daf2:	bd70      	pop	{r4, r5, r6, pc}
 800daf4:	20009634 	.word	0x20009634

0800daf8 <_malloc_r>:
 800daf8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dafc:	1ccd      	adds	r5, r1, #3
 800dafe:	f025 0503 	bic.w	r5, r5, #3
 800db02:	3508      	adds	r5, #8
 800db04:	2d0c      	cmp	r5, #12
 800db06:	bf38      	it	cc
 800db08:	250c      	movcc	r5, #12
 800db0a:	2d00      	cmp	r5, #0
 800db0c:	4607      	mov	r7, r0
 800db0e:	db01      	blt.n	800db14 <_malloc_r+0x1c>
 800db10:	42a9      	cmp	r1, r5
 800db12:	d905      	bls.n	800db20 <_malloc_r+0x28>
 800db14:	230c      	movs	r3, #12
 800db16:	603b      	str	r3, [r7, #0]
 800db18:	2600      	movs	r6, #0
 800db1a:	4630      	mov	r0, r6
 800db1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800db20:	4e2e      	ldr	r6, [pc, #184]	; (800dbdc <_malloc_r+0xe4>)
 800db22:	f000 fa25 	bl	800df70 <__malloc_lock>
 800db26:	6833      	ldr	r3, [r6, #0]
 800db28:	461c      	mov	r4, r3
 800db2a:	bb34      	cbnz	r4, 800db7a <_malloc_r+0x82>
 800db2c:	4629      	mov	r1, r5
 800db2e:	4638      	mov	r0, r7
 800db30:	f7ff ffc2 	bl	800dab8 <sbrk_aligned>
 800db34:	1c43      	adds	r3, r0, #1
 800db36:	4604      	mov	r4, r0
 800db38:	d14d      	bne.n	800dbd6 <_malloc_r+0xde>
 800db3a:	6834      	ldr	r4, [r6, #0]
 800db3c:	4626      	mov	r6, r4
 800db3e:	2e00      	cmp	r6, #0
 800db40:	d140      	bne.n	800dbc4 <_malloc_r+0xcc>
 800db42:	6823      	ldr	r3, [r4, #0]
 800db44:	4631      	mov	r1, r6
 800db46:	4638      	mov	r0, r7
 800db48:	eb04 0803 	add.w	r8, r4, r3
 800db4c:	f000 f9a4 	bl	800de98 <_sbrk_r>
 800db50:	4580      	cmp	r8, r0
 800db52:	d13a      	bne.n	800dbca <_malloc_r+0xd2>
 800db54:	6821      	ldr	r1, [r4, #0]
 800db56:	3503      	adds	r5, #3
 800db58:	1a6d      	subs	r5, r5, r1
 800db5a:	f025 0503 	bic.w	r5, r5, #3
 800db5e:	3508      	adds	r5, #8
 800db60:	2d0c      	cmp	r5, #12
 800db62:	bf38      	it	cc
 800db64:	250c      	movcc	r5, #12
 800db66:	4629      	mov	r1, r5
 800db68:	4638      	mov	r0, r7
 800db6a:	f7ff ffa5 	bl	800dab8 <sbrk_aligned>
 800db6e:	3001      	adds	r0, #1
 800db70:	d02b      	beq.n	800dbca <_malloc_r+0xd2>
 800db72:	6823      	ldr	r3, [r4, #0]
 800db74:	442b      	add	r3, r5
 800db76:	6023      	str	r3, [r4, #0]
 800db78:	e00e      	b.n	800db98 <_malloc_r+0xa0>
 800db7a:	6822      	ldr	r2, [r4, #0]
 800db7c:	1b52      	subs	r2, r2, r5
 800db7e:	d41e      	bmi.n	800dbbe <_malloc_r+0xc6>
 800db80:	2a0b      	cmp	r2, #11
 800db82:	d916      	bls.n	800dbb2 <_malloc_r+0xba>
 800db84:	1961      	adds	r1, r4, r5
 800db86:	42a3      	cmp	r3, r4
 800db88:	6025      	str	r5, [r4, #0]
 800db8a:	bf18      	it	ne
 800db8c:	6059      	strne	r1, [r3, #4]
 800db8e:	6863      	ldr	r3, [r4, #4]
 800db90:	bf08      	it	eq
 800db92:	6031      	streq	r1, [r6, #0]
 800db94:	5162      	str	r2, [r4, r5]
 800db96:	604b      	str	r3, [r1, #4]
 800db98:	4638      	mov	r0, r7
 800db9a:	f104 060b 	add.w	r6, r4, #11
 800db9e:	f000 f9ed 	bl	800df7c <__malloc_unlock>
 800dba2:	f026 0607 	bic.w	r6, r6, #7
 800dba6:	1d23      	adds	r3, r4, #4
 800dba8:	1af2      	subs	r2, r6, r3
 800dbaa:	d0b6      	beq.n	800db1a <_malloc_r+0x22>
 800dbac:	1b9b      	subs	r3, r3, r6
 800dbae:	50a3      	str	r3, [r4, r2]
 800dbb0:	e7b3      	b.n	800db1a <_malloc_r+0x22>
 800dbb2:	6862      	ldr	r2, [r4, #4]
 800dbb4:	42a3      	cmp	r3, r4
 800dbb6:	bf0c      	ite	eq
 800dbb8:	6032      	streq	r2, [r6, #0]
 800dbba:	605a      	strne	r2, [r3, #4]
 800dbbc:	e7ec      	b.n	800db98 <_malloc_r+0xa0>
 800dbbe:	4623      	mov	r3, r4
 800dbc0:	6864      	ldr	r4, [r4, #4]
 800dbc2:	e7b2      	b.n	800db2a <_malloc_r+0x32>
 800dbc4:	4634      	mov	r4, r6
 800dbc6:	6876      	ldr	r6, [r6, #4]
 800dbc8:	e7b9      	b.n	800db3e <_malloc_r+0x46>
 800dbca:	230c      	movs	r3, #12
 800dbcc:	603b      	str	r3, [r7, #0]
 800dbce:	4638      	mov	r0, r7
 800dbd0:	f000 f9d4 	bl	800df7c <__malloc_unlock>
 800dbd4:	e7a1      	b.n	800db1a <_malloc_r+0x22>
 800dbd6:	6025      	str	r5, [r4, #0]
 800dbd8:	e7de      	b.n	800db98 <_malloc_r+0xa0>
 800dbda:	bf00      	nop
 800dbdc:	20009630 	.word	0x20009630

0800dbe0 <__ssputs_r>:
 800dbe0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800dbe4:	688e      	ldr	r6, [r1, #8]
 800dbe6:	429e      	cmp	r6, r3
 800dbe8:	4682      	mov	sl, r0
 800dbea:	460c      	mov	r4, r1
 800dbec:	4690      	mov	r8, r2
 800dbee:	461f      	mov	r7, r3
 800dbf0:	d838      	bhi.n	800dc64 <__ssputs_r+0x84>
 800dbf2:	898a      	ldrh	r2, [r1, #12]
 800dbf4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800dbf8:	d032      	beq.n	800dc60 <__ssputs_r+0x80>
 800dbfa:	6825      	ldr	r5, [r4, #0]
 800dbfc:	6909      	ldr	r1, [r1, #16]
 800dbfe:	eba5 0901 	sub.w	r9, r5, r1
 800dc02:	6965      	ldr	r5, [r4, #20]
 800dc04:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800dc08:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800dc0c:	3301      	adds	r3, #1
 800dc0e:	444b      	add	r3, r9
 800dc10:	106d      	asrs	r5, r5, #1
 800dc12:	429d      	cmp	r5, r3
 800dc14:	bf38      	it	cc
 800dc16:	461d      	movcc	r5, r3
 800dc18:	0553      	lsls	r3, r2, #21
 800dc1a:	d531      	bpl.n	800dc80 <__ssputs_r+0xa0>
 800dc1c:	4629      	mov	r1, r5
 800dc1e:	f7ff ff6b 	bl	800daf8 <_malloc_r>
 800dc22:	4606      	mov	r6, r0
 800dc24:	b950      	cbnz	r0, 800dc3c <__ssputs_r+0x5c>
 800dc26:	230c      	movs	r3, #12
 800dc28:	f8ca 3000 	str.w	r3, [sl]
 800dc2c:	89a3      	ldrh	r3, [r4, #12]
 800dc2e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800dc32:	81a3      	strh	r3, [r4, #12]
 800dc34:	f04f 30ff 	mov.w	r0, #4294967295
 800dc38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dc3c:	6921      	ldr	r1, [r4, #16]
 800dc3e:	464a      	mov	r2, r9
 800dc40:	f7fe f826 	bl	800bc90 <memcpy>
 800dc44:	89a3      	ldrh	r3, [r4, #12]
 800dc46:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800dc4a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800dc4e:	81a3      	strh	r3, [r4, #12]
 800dc50:	6126      	str	r6, [r4, #16]
 800dc52:	6165      	str	r5, [r4, #20]
 800dc54:	444e      	add	r6, r9
 800dc56:	eba5 0509 	sub.w	r5, r5, r9
 800dc5a:	6026      	str	r6, [r4, #0]
 800dc5c:	60a5      	str	r5, [r4, #8]
 800dc5e:	463e      	mov	r6, r7
 800dc60:	42be      	cmp	r6, r7
 800dc62:	d900      	bls.n	800dc66 <__ssputs_r+0x86>
 800dc64:	463e      	mov	r6, r7
 800dc66:	6820      	ldr	r0, [r4, #0]
 800dc68:	4632      	mov	r2, r6
 800dc6a:	4641      	mov	r1, r8
 800dc6c:	f000 f966 	bl	800df3c <memmove>
 800dc70:	68a3      	ldr	r3, [r4, #8]
 800dc72:	1b9b      	subs	r3, r3, r6
 800dc74:	60a3      	str	r3, [r4, #8]
 800dc76:	6823      	ldr	r3, [r4, #0]
 800dc78:	4433      	add	r3, r6
 800dc7a:	6023      	str	r3, [r4, #0]
 800dc7c:	2000      	movs	r0, #0
 800dc7e:	e7db      	b.n	800dc38 <__ssputs_r+0x58>
 800dc80:	462a      	mov	r2, r5
 800dc82:	f000 f981 	bl	800df88 <_realloc_r>
 800dc86:	4606      	mov	r6, r0
 800dc88:	2800      	cmp	r0, #0
 800dc8a:	d1e1      	bne.n	800dc50 <__ssputs_r+0x70>
 800dc8c:	6921      	ldr	r1, [r4, #16]
 800dc8e:	4650      	mov	r0, sl
 800dc90:	f7ff fec6 	bl	800da20 <_free_r>
 800dc94:	e7c7      	b.n	800dc26 <__ssputs_r+0x46>
	...

0800dc98 <_svfiprintf_r>:
 800dc98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dc9c:	4698      	mov	r8, r3
 800dc9e:	898b      	ldrh	r3, [r1, #12]
 800dca0:	061b      	lsls	r3, r3, #24
 800dca2:	b09d      	sub	sp, #116	; 0x74
 800dca4:	4607      	mov	r7, r0
 800dca6:	460d      	mov	r5, r1
 800dca8:	4614      	mov	r4, r2
 800dcaa:	d50e      	bpl.n	800dcca <_svfiprintf_r+0x32>
 800dcac:	690b      	ldr	r3, [r1, #16]
 800dcae:	b963      	cbnz	r3, 800dcca <_svfiprintf_r+0x32>
 800dcb0:	2140      	movs	r1, #64	; 0x40
 800dcb2:	f7ff ff21 	bl	800daf8 <_malloc_r>
 800dcb6:	6028      	str	r0, [r5, #0]
 800dcb8:	6128      	str	r0, [r5, #16]
 800dcba:	b920      	cbnz	r0, 800dcc6 <_svfiprintf_r+0x2e>
 800dcbc:	230c      	movs	r3, #12
 800dcbe:	603b      	str	r3, [r7, #0]
 800dcc0:	f04f 30ff 	mov.w	r0, #4294967295
 800dcc4:	e0d1      	b.n	800de6a <_svfiprintf_r+0x1d2>
 800dcc6:	2340      	movs	r3, #64	; 0x40
 800dcc8:	616b      	str	r3, [r5, #20]
 800dcca:	2300      	movs	r3, #0
 800dccc:	9309      	str	r3, [sp, #36]	; 0x24
 800dcce:	2320      	movs	r3, #32
 800dcd0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800dcd4:	f8cd 800c 	str.w	r8, [sp, #12]
 800dcd8:	2330      	movs	r3, #48	; 0x30
 800dcda:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800de84 <_svfiprintf_r+0x1ec>
 800dcde:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800dce2:	f04f 0901 	mov.w	r9, #1
 800dce6:	4623      	mov	r3, r4
 800dce8:	469a      	mov	sl, r3
 800dcea:	f813 2b01 	ldrb.w	r2, [r3], #1
 800dcee:	b10a      	cbz	r2, 800dcf4 <_svfiprintf_r+0x5c>
 800dcf0:	2a25      	cmp	r2, #37	; 0x25
 800dcf2:	d1f9      	bne.n	800dce8 <_svfiprintf_r+0x50>
 800dcf4:	ebba 0b04 	subs.w	fp, sl, r4
 800dcf8:	d00b      	beq.n	800dd12 <_svfiprintf_r+0x7a>
 800dcfa:	465b      	mov	r3, fp
 800dcfc:	4622      	mov	r2, r4
 800dcfe:	4629      	mov	r1, r5
 800dd00:	4638      	mov	r0, r7
 800dd02:	f7ff ff6d 	bl	800dbe0 <__ssputs_r>
 800dd06:	3001      	adds	r0, #1
 800dd08:	f000 80aa 	beq.w	800de60 <_svfiprintf_r+0x1c8>
 800dd0c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800dd0e:	445a      	add	r2, fp
 800dd10:	9209      	str	r2, [sp, #36]	; 0x24
 800dd12:	f89a 3000 	ldrb.w	r3, [sl]
 800dd16:	2b00      	cmp	r3, #0
 800dd18:	f000 80a2 	beq.w	800de60 <_svfiprintf_r+0x1c8>
 800dd1c:	2300      	movs	r3, #0
 800dd1e:	f04f 32ff 	mov.w	r2, #4294967295
 800dd22:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800dd26:	f10a 0a01 	add.w	sl, sl, #1
 800dd2a:	9304      	str	r3, [sp, #16]
 800dd2c:	9307      	str	r3, [sp, #28]
 800dd2e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800dd32:	931a      	str	r3, [sp, #104]	; 0x68
 800dd34:	4654      	mov	r4, sl
 800dd36:	2205      	movs	r2, #5
 800dd38:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dd3c:	4851      	ldr	r0, [pc, #324]	; (800de84 <_svfiprintf_r+0x1ec>)
 800dd3e:	f7f2 fa6f 	bl	8000220 <memchr>
 800dd42:	9a04      	ldr	r2, [sp, #16]
 800dd44:	b9d8      	cbnz	r0, 800dd7e <_svfiprintf_r+0xe6>
 800dd46:	06d0      	lsls	r0, r2, #27
 800dd48:	bf44      	itt	mi
 800dd4a:	2320      	movmi	r3, #32
 800dd4c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800dd50:	0711      	lsls	r1, r2, #28
 800dd52:	bf44      	itt	mi
 800dd54:	232b      	movmi	r3, #43	; 0x2b
 800dd56:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800dd5a:	f89a 3000 	ldrb.w	r3, [sl]
 800dd5e:	2b2a      	cmp	r3, #42	; 0x2a
 800dd60:	d015      	beq.n	800dd8e <_svfiprintf_r+0xf6>
 800dd62:	9a07      	ldr	r2, [sp, #28]
 800dd64:	4654      	mov	r4, sl
 800dd66:	2000      	movs	r0, #0
 800dd68:	f04f 0c0a 	mov.w	ip, #10
 800dd6c:	4621      	mov	r1, r4
 800dd6e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800dd72:	3b30      	subs	r3, #48	; 0x30
 800dd74:	2b09      	cmp	r3, #9
 800dd76:	d94e      	bls.n	800de16 <_svfiprintf_r+0x17e>
 800dd78:	b1b0      	cbz	r0, 800dda8 <_svfiprintf_r+0x110>
 800dd7a:	9207      	str	r2, [sp, #28]
 800dd7c:	e014      	b.n	800dda8 <_svfiprintf_r+0x110>
 800dd7e:	eba0 0308 	sub.w	r3, r0, r8
 800dd82:	fa09 f303 	lsl.w	r3, r9, r3
 800dd86:	4313      	orrs	r3, r2
 800dd88:	9304      	str	r3, [sp, #16]
 800dd8a:	46a2      	mov	sl, r4
 800dd8c:	e7d2      	b.n	800dd34 <_svfiprintf_r+0x9c>
 800dd8e:	9b03      	ldr	r3, [sp, #12]
 800dd90:	1d19      	adds	r1, r3, #4
 800dd92:	681b      	ldr	r3, [r3, #0]
 800dd94:	9103      	str	r1, [sp, #12]
 800dd96:	2b00      	cmp	r3, #0
 800dd98:	bfbb      	ittet	lt
 800dd9a:	425b      	neglt	r3, r3
 800dd9c:	f042 0202 	orrlt.w	r2, r2, #2
 800dda0:	9307      	strge	r3, [sp, #28]
 800dda2:	9307      	strlt	r3, [sp, #28]
 800dda4:	bfb8      	it	lt
 800dda6:	9204      	strlt	r2, [sp, #16]
 800dda8:	7823      	ldrb	r3, [r4, #0]
 800ddaa:	2b2e      	cmp	r3, #46	; 0x2e
 800ddac:	d10c      	bne.n	800ddc8 <_svfiprintf_r+0x130>
 800ddae:	7863      	ldrb	r3, [r4, #1]
 800ddb0:	2b2a      	cmp	r3, #42	; 0x2a
 800ddb2:	d135      	bne.n	800de20 <_svfiprintf_r+0x188>
 800ddb4:	9b03      	ldr	r3, [sp, #12]
 800ddb6:	1d1a      	adds	r2, r3, #4
 800ddb8:	681b      	ldr	r3, [r3, #0]
 800ddba:	9203      	str	r2, [sp, #12]
 800ddbc:	2b00      	cmp	r3, #0
 800ddbe:	bfb8      	it	lt
 800ddc0:	f04f 33ff 	movlt.w	r3, #4294967295
 800ddc4:	3402      	adds	r4, #2
 800ddc6:	9305      	str	r3, [sp, #20]
 800ddc8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800de94 <_svfiprintf_r+0x1fc>
 800ddcc:	7821      	ldrb	r1, [r4, #0]
 800ddce:	2203      	movs	r2, #3
 800ddd0:	4650      	mov	r0, sl
 800ddd2:	f7f2 fa25 	bl	8000220 <memchr>
 800ddd6:	b140      	cbz	r0, 800ddea <_svfiprintf_r+0x152>
 800ddd8:	2340      	movs	r3, #64	; 0x40
 800ddda:	eba0 000a 	sub.w	r0, r0, sl
 800ddde:	fa03 f000 	lsl.w	r0, r3, r0
 800dde2:	9b04      	ldr	r3, [sp, #16]
 800dde4:	4303      	orrs	r3, r0
 800dde6:	3401      	adds	r4, #1
 800dde8:	9304      	str	r3, [sp, #16]
 800ddea:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ddee:	4826      	ldr	r0, [pc, #152]	; (800de88 <_svfiprintf_r+0x1f0>)
 800ddf0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ddf4:	2206      	movs	r2, #6
 800ddf6:	f7f2 fa13 	bl	8000220 <memchr>
 800ddfa:	2800      	cmp	r0, #0
 800ddfc:	d038      	beq.n	800de70 <_svfiprintf_r+0x1d8>
 800ddfe:	4b23      	ldr	r3, [pc, #140]	; (800de8c <_svfiprintf_r+0x1f4>)
 800de00:	bb1b      	cbnz	r3, 800de4a <_svfiprintf_r+0x1b2>
 800de02:	9b03      	ldr	r3, [sp, #12]
 800de04:	3307      	adds	r3, #7
 800de06:	f023 0307 	bic.w	r3, r3, #7
 800de0a:	3308      	adds	r3, #8
 800de0c:	9303      	str	r3, [sp, #12]
 800de0e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800de10:	4433      	add	r3, r6
 800de12:	9309      	str	r3, [sp, #36]	; 0x24
 800de14:	e767      	b.n	800dce6 <_svfiprintf_r+0x4e>
 800de16:	fb0c 3202 	mla	r2, ip, r2, r3
 800de1a:	460c      	mov	r4, r1
 800de1c:	2001      	movs	r0, #1
 800de1e:	e7a5      	b.n	800dd6c <_svfiprintf_r+0xd4>
 800de20:	2300      	movs	r3, #0
 800de22:	3401      	adds	r4, #1
 800de24:	9305      	str	r3, [sp, #20]
 800de26:	4619      	mov	r1, r3
 800de28:	f04f 0c0a 	mov.w	ip, #10
 800de2c:	4620      	mov	r0, r4
 800de2e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800de32:	3a30      	subs	r2, #48	; 0x30
 800de34:	2a09      	cmp	r2, #9
 800de36:	d903      	bls.n	800de40 <_svfiprintf_r+0x1a8>
 800de38:	2b00      	cmp	r3, #0
 800de3a:	d0c5      	beq.n	800ddc8 <_svfiprintf_r+0x130>
 800de3c:	9105      	str	r1, [sp, #20]
 800de3e:	e7c3      	b.n	800ddc8 <_svfiprintf_r+0x130>
 800de40:	fb0c 2101 	mla	r1, ip, r1, r2
 800de44:	4604      	mov	r4, r0
 800de46:	2301      	movs	r3, #1
 800de48:	e7f0      	b.n	800de2c <_svfiprintf_r+0x194>
 800de4a:	ab03      	add	r3, sp, #12
 800de4c:	9300      	str	r3, [sp, #0]
 800de4e:	462a      	mov	r2, r5
 800de50:	4b0f      	ldr	r3, [pc, #60]	; (800de90 <_svfiprintf_r+0x1f8>)
 800de52:	a904      	add	r1, sp, #16
 800de54:	4638      	mov	r0, r7
 800de56:	f7fd ffd1 	bl	800bdfc <_printf_float>
 800de5a:	1c42      	adds	r2, r0, #1
 800de5c:	4606      	mov	r6, r0
 800de5e:	d1d6      	bne.n	800de0e <_svfiprintf_r+0x176>
 800de60:	89ab      	ldrh	r3, [r5, #12]
 800de62:	065b      	lsls	r3, r3, #25
 800de64:	f53f af2c 	bmi.w	800dcc0 <_svfiprintf_r+0x28>
 800de68:	9809      	ldr	r0, [sp, #36]	; 0x24
 800de6a:	b01d      	add	sp, #116	; 0x74
 800de6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800de70:	ab03      	add	r3, sp, #12
 800de72:	9300      	str	r3, [sp, #0]
 800de74:	462a      	mov	r2, r5
 800de76:	4b06      	ldr	r3, [pc, #24]	; (800de90 <_svfiprintf_r+0x1f8>)
 800de78:	a904      	add	r1, sp, #16
 800de7a:	4638      	mov	r0, r7
 800de7c:	f7fe fa62 	bl	800c344 <_printf_i>
 800de80:	e7eb      	b.n	800de5a <_svfiprintf_r+0x1c2>
 800de82:	bf00      	nop
 800de84:	0800eeac 	.word	0x0800eeac
 800de88:	0800eeb6 	.word	0x0800eeb6
 800de8c:	0800bdfd 	.word	0x0800bdfd
 800de90:	0800dbe1 	.word	0x0800dbe1
 800de94:	0800eeb2 	.word	0x0800eeb2

0800de98 <_sbrk_r>:
 800de98:	b538      	push	{r3, r4, r5, lr}
 800de9a:	4d06      	ldr	r5, [pc, #24]	; (800deb4 <_sbrk_r+0x1c>)
 800de9c:	2300      	movs	r3, #0
 800de9e:	4604      	mov	r4, r0
 800dea0:	4608      	mov	r0, r1
 800dea2:	602b      	str	r3, [r5, #0]
 800dea4:	f7f4 f882 	bl	8001fac <_sbrk>
 800dea8:	1c43      	adds	r3, r0, #1
 800deaa:	d102      	bne.n	800deb2 <_sbrk_r+0x1a>
 800deac:	682b      	ldr	r3, [r5, #0]
 800deae:	b103      	cbz	r3, 800deb2 <_sbrk_r+0x1a>
 800deb0:	6023      	str	r3, [r4, #0]
 800deb2:	bd38      	pop	{r3, r4, r5, pc}
 800deb4:	20009638 	.word	0x20009638

0800deb8 <__assert_func>:
 800deb8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800deba:	4614      	mov	r4, r2
 800debc:	461a      	mov	r2, r3
 800debe:	4b09      	ldr	r3, [pc, #36]	; (800dee4 <__assert_func+0x2c>)
 800dec0:	681b      	ldr	r3, [r3, #0]
 800dec2:	4605      	mov	r5, r0
 800dec4:	68d8      	ldr	r0, [r3, #12]
 800dec6:	b14c      	cbz	r4, 800dedc <__assert_func+0x24>
 800dec8:	4b07      	ldr	r3, [pc, #28]	; (800dee8 <__assert_func+0x30>)
 800deca:	9100      	str	r1, [sp, #0]
 800decc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800ded0:	4906      	ldr	r1, [pc, #24]	; (800deec <__assert_func+0x34>)
 800ded2:	462b      	mov	r3, r5
 800ded4:	f000 f80e 	bl	800def4 <fiprintf>
 800ded8:	f000 faac 	bl	800e434 <abort>
 800dedc:	4b04      	ldr	r3, [pc, #16]	; (800def0 <__assert_func+0x38>)
 800dede:	461c      	mov	r4, r3
 800dee0:	e7f3      	b.n	800deca <__assert_func+0x12>
 800dee2:	bf00      	nop
 800dee4:	20008f54 	.word	0x20008f54
 800dee8:	0800eebd 	.word	0x0800eebd
 800deec:	0800eeca 	.word	0x0800eeca
 800def0:	0800eef8 	.word	0x0800eef8

0800def4 <fiprintf>:
 800def4:	b40e      	push	{r1, r2, r3}
 800def6:	b503      	push	{r0, r1, lr}
 800def8:	4601      	mov	r1, r0
 800defa:	ab03      	add	r3, sp, #12
 800defc:	4805      	ldr	r0, [pc, #20]	; (800df14 <fiprintf+0x20>)
 800defe:	f853 2b04 	ldr.w	r2, [r3], #4
 800df02:	6800      	ldr	r0, [r0, #0]
 800df04:	9301      	str	r3, [sp, #4]
 800df06:	f000 f897 	bl	800e038 <_vfiprintf_r>
 800df0a:	b002      	add	sp, #8
 800df0c:	f85d eb04 	ldr.w	lr, [sp], #4
 800df10:	b003      	add	sp, #12
 800df12:	4770      	bx	lr
 800df14:	20008f54 	.word	0x20008f54

0800df18 <__ascii_mbtowc>:
 800df18:	b082      	sub	sp, #8
 800df1a:	b901      	cbnz	r1, 800df1e <__ascii_mbtowc+0x6>
 800df1c:	a901      	add	r1, sp, #4
 800df1e:	b142      	cbz	r2, 800df32 <__ascii_mbtowc+0x1a>
 800df20:	b14b      	cbz	r3, 800df36 <__ascii_mbtowc+0x1e>
 800df22:	7813      	ldrb	r3, [r2, #0]
 800df24:	600b      	str	r3, [r1, #0]
 800df26:	7812      	ldrb	r2, [r2, #0]
 800df28:	1e10      	subs	r0, r2, #0
 800df2a:	bf18      	it	ne
 800df2c:	2001      	movne	r0, #1
 800df2e:	b002      	add	sp, #8
 800df30:	4770      	bx	lr
 800df32:	4610      	mov	r0, r2
 800df34:	e7fb      	b.n	800df2e <__ascii_mbtowc+0x16>
 800df36:	f06f 0001 	mvn.w	r0, #1
 800df3a:	e7f8      	b.n	800df2e <__ascii_mbtowc+0x16>

0800df3c <memmove>:
 800df3c:	4288      	cmp	r0, r1
 800df3e:	b510      	push	{r4, lr}
 800df40:	eb01 0402 	add.w	r4, r1, r2
 800df44:	d902      	bls.n	800df4c <memmove+0x10>
 800df46:	4284      	cmp	r4, r0
 800df48:	4623      	mov	r3, r4
 800df4a:	d807      	bhi.n	800df5c <memmove+0x20>
 800df4c:	1e43      	subs	r3, r0, #1
 800df4e:	42a1      	cmp	r1, r4
 800df50:	d008      	beq.n	800df64 <memmove+0x28>
 800df52:	f811 2b01 	ldrb.w	r2, [r1], #1
 800df56:	f803 2f01 	strb.w	r2, [r3, #1]!
 800df5a:	e7f8      	b.n	800df4e <memmove+0x12>
 800df5c:	4402      	add	r2, r0
 800df5e:	4601      	mov	r1, r0
 800df60:	428a      	cmp	r2, r1
 800df62:	d100      	bne.n	800df66 <memmove+0x2a>
 800df64:	bd10      	pop	{r4, pc}
 800df66:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800df6a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800df6e:	e7f7      	b.n	800df60 <memmove+0x24>

0800df70 <__malloc_lock>:
 800df70:	4801      	ldr	r0, [pc, #4]	; (800df78 <__malloc_lock+0x8>)
 800df72:	f000 bc1f 	b.w	800e7b4 <__retarget_lock_acquire_recursive>
 800df76:	bf00      	nop
 800df78:	2000963c 	.word	0x2000963c

0800df7c <__malloc_unlock>:
 800df7c:	4801      	ldr	r0, [pc, #4]	; (800df84 <__malloc_unlock+0x8>)
 800df7e:	f000 bc1a 	b.w	800e7b6 <__retarget_lock_release_recursive>
 800df82:	bf00      	nop
 800df84:	2000963c 	.word	0x2000963c

0800df88 <_realloc_r>:
 800df88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800df8c:	4680      	mov	r8, r0
 800df8e:	4614      	mov	r4, r2
 800df90:	460e      	mov	r6, r1
 800df92:	b921      	cbnz	r1, 800df9e <_realloc_r+0x16>
 800df94:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800df98:	4611      	mov	r1, r2
 800df9a:	f7ff bdad 	b.w	800daf8 <_malloc_r>
 800df9e:	b92a      	cbnz	r2, 800dfac <_realloc_r+0x24>
 800dfa0:	f7ff fd3e 	bl	800da20 <_free_r>
 800dfa4:	4625      	mov	r5, r4
 800dfa6:	4628      	mov	r0, r5
 800dfa8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dfac:	f000 fc6a 	bl	800e884 <_malloc_usable_size_r>
 800dfb0:	4284      	cmp	r4, r0
 800dfb2:	4607      	mov	r7, r0
 800dfb4:	d802      	bhi.n	800dfbc <_realloc_r+0x34>
 800dfb6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800dfba:	d812      	bhi.n	800dfe2 <_realloc_r+0x5a>
 800dfbc:	4621      	mov	r1, r4
 800dfbe:	4640      	mov	r0, r8
 800dfc0:	f7ff fd9a 	bl	800daf8 <_malloc_r>
 800dfc4:	4605      	mov	r5, r0
 800dfc6:	2800      	cmp	r0, #0
 800dfc8:	d0ed      	beq.n	800dfa6 <_realloc_r+0x1e>
 800dfca:	42bc      	cmp	r4, r7
 800dfcc:	4622      	mov	r2, r4
 800dfce:	4631      	mov	r1, r6
 800dfd0:	bf28      	it	cs
 800dfd2:	463a      	movcs	r2, r7
 800dfd4:	f7fd fe5c 	bl	800bc90 <memcpy>
 800dfd8:	4631      	mov	r1, r6
 800dfda:	4640      	mov	r0, r8
 800dfdc:	f7ff fd20 	bl	800da20 <_free_r>
 800dfe0:	e7e1      	b.n	800dfa6 <_realloc_r+0x1e>
 800dfe2:	4635      	mov	r5, r6
 800dfe4:	e7df      	b.n	800dfa6 <_realloc_r+0x1e>

0800dfe6 <__sfputc_r>:
 800dfe6:	6893      	ldr	r3, [r2, #8]
 800dfe8:	3b01      	subs	r3, #1
 800dfea:	2b00      	cmp	r3, #0
 800dfec:	b410      	push	{r4}
 800dfee:	6093      	str	r3, [r2, #8]
 800dff0:	da08      	bge.n	800e004 <__sfputc_r+0x1e>
 800dff2:	6994      	ldr	r4, [r2, #24]
 800dff4:	42a3      	cmp	r3, r4
 800dff6:	db01      	blt.n	800dffc <__sfputc_r+0x16>
 800dff8:	290a      	cmp	r1, #10
 800dffa:	d103      	bne.n	800e004 <__sfputc_r+0x1e>
 800dffc:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e000:	f000 b94a 	b.w	800e298 <__swbuf_r>
 800e004:	6813      	ldr	r3, [r2, #0]
 800e006:	1c58      	adds	r0, r3, #1
 800e008:	6010      	str	r0, [r2, #0]
 800e00a:	7019      	strb	r1, [r3, #0]
 800e00c:	4608      	mov	r0, r1
 800e00e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e012:	4770      	bx	lr

0800e014 <__sfputs_r>:
 800e014:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e016:	4606      	mov	r6, r0
 800e018:	460f      	mov	r7, r1
 800e01a:	4614      	mov	r4, r2
 800e01c:	18d5      	adds	r5, r2, r3
 800e01e:	42ac      	cmp	r4, r5
 800e020:	d101      	bne.n	800e026 <__sfputs_r+0x12>
 800e022:	2000      	movs	r0, #0
 800e024:	e007      	b.n	800e036 <__sfputs_r+0x22>
 800e026:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e02a:	463a      	mov	r2, r7
 800e02c:	4630      	mov	r0, r6
 800e02e:	f7ff ffda 	bl	800dfe6 <__sfputc_r>
 800e032:	1c43      	adds	r3, r0, #1
 800e034:	d1f3      	bne.n	800e01e <__sfputs_r+0xa>
 800e036:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800e038 <_vfiprintf_r>:
 800e038:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e03c:	460d      	mov	r5, r1
 800e03e:	b09d      	sub	sp, #116	; 0x74
 800e040:	4614      	mov	r4, r2
 800e042:	4698      	mov	r8, r3
 800e044:	4606      	mov	r6, r0
 800e046:	b118      	cbz	r0, 800e050 <_vfiprintf_r+0x18>
 800e048:	6983      	ldr	r3, [r0, #24]
 800e04a:	b90b      	cbnz	r3, 800e050 <_vfiprintf_r+0x18>
 800e04c:	f000 fb14 	bl	800e678 <__sinit>
 800e050:	4b89      	ldr	r3, [pc, #548]	; (800e278 <_vfiprintf_r+0x240>)
 800e052:	429d      	cmp	r5, r3
 800e054:	d11b      	bne.n	800e08e <_vfiprintf_r+0x56>
 800e056:	6875      	ldr	r5, [r6, #4]
 800e058:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e05a:	07d9      	lsls	r1, r3, #31
 800e05c:	d405      	bmi.n	800e06a <_vfiprintf_r+0x32>
 800e05e:	89ab      	ldrh	r3, [r5, #12]
 800e060:	059a      	lsls	r2, r3, #22
 800e062:	d402      	bmi.n	800e06a <_vfiprintf_r+0x32>
 800e064:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e066:	f000 fba5 	bl	800e7b4 <__retarget_lock_acquire_recursive>
 800e06a:	89ab      	ldrh	r3, [r5, #12]
 800e06c:	071b      	lsls	r3, r3, #28
 800e06e:	d501      	bpl.n	800e074 <_vfiprintf_r+0x3c>
 800e070:	692b      	ldr	r3, [r5, #16]
 800e072:	b9eb      	cbnz	r3, 800e0b0 <_vfiprintf_r+0x78>
 800e074:	4629      	mov	r1, r5
 800e076:	4630      	mov	r0, r6
 800e078:	f000 f96e 	bl	800e358 <__swsetup_r>
 800e07c:	b1c0      	cbz	r0, 800e0b0 <_vfiprintf_r+0x78>
 800e07e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e080:	07dc      	lsls	r4, r3, #31
 800e082:	d50e      	bpl.n	800e0a2 <_vfiprintf_r+0x6a>
 800e084:	f04f 30ff 	mov.w	r0, #4294967295
 800e088:	b01d      	add	sp, #116	; 0x74
 800e08a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e08e:	4b7b      	ldr	r3, [pc, #492]	; (800e27c <_vfiprintf_r+0x244>)
 800e090:	429d      	cmp	r5, r3
 800e092:	d101      	bne.n	800e098 <_vfiprintf_r+0x60>
 800e094:	68b5      	ldr	r5, [r6, #8]
 800e096:	e7df      	b.n	800e058 <_vfiprintf_r+0x20>
 800e098:	4b79      	ldr	r3, [pc, #484]	; (800e280 <_vfiprintf_r+0x248>)
 800e09a:	429d      	cmp	r5, r3
 800e09c:	bf08      	it	eq
 800e09e:	68f5      	ldreq	r5, [r6, #12]
 800e0a0:	e7da      	b.n	800e058 <_vfiprintf_r+0x20>
 800e0a2:	89ab      	ldrh	r3, [r5, #12]
 800e0a4:	0598      	lsls	r0, r3, #22
 800e0a6:	d4ed      	bmi.n	800e084 <_vfiprintf_r+0x4c>
 800e0a8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e0aa:	f000 fb84 	bl	800e7b6 <__retarget_lock_release_recursive>
 800e0ae:	e7e9      	b.n	800e084 <_vfiprintf_r+0x4c>
 800e0b0:	2300      	movs	r3, #0
 800e0b2:	9309      	str	r3, [sp, #36]	; 0x24
 800e0b4:	2320      	movs	r3, #32
 800e0b6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e0ba:	f8cd 800c 	str.w	r8, [sp, #12]
 800e0be:	2330      	movs	r3, #48	; 0x30
 800e0c0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800e284 <_vfiprintf_r+0x24c>
 800e0c4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e0c8:	f04f 0901 	mov.w	r9, #1
 800e0cc:	4623      	mov	r3, r4
 800e0ce:	469a      	mov	sl, r3
 800e0d0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e0d4:	b10a      	cbz	r2, 800e0da <_vfiprintf_r+0xa2>
 800e0d6:	2a25      	cmp	r2, #37	; 0x25
 800e0d8:	d1f9      	bne.n	800e0ce <_vfiprintf_r+0x96>
 800e0da:	ebba 0b04 	subs.w	fp, sl, r4
 800e0de:	d00b      	beq.n	800e0f8 <_vfiprintf_r+0xc0>
 800e0e0:	465b      	mov	r3, fp
 800e0e2:	4622      	mov	r2, r4
 800e0e4:	4629      	mov	r1, r5
 800e0e6:	4630      	mov	r0, r6
 800e0e8:	f7ff ff94 	bl	800e014 <__sfputs_r>
 800e0ec:	3001      	adds	r0, #1
 800e0ee:	f000 80aa 	beq.w	800e246 <_vfiprintf_r+0x20e>
 800e0f2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e0f4:	445a      	add	r2, fp
 800e0f6:	9209      	str	r2, [sp, #36]	; 0x24
 800e0f8:	f89a 3000 	ldrb.w	r3, [sl]
 800e0fc:	2b00      	cmp	r3, #0
 800e0fe:	f000 80a2 	beq.w	800e246 <_vfiprintf_r+0x20e>
 800e102:	2300      	movs	r3, #0
 800e104:	f04f 32ff 	mov.w	r2, #4294967295
 800e108:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e10c:	f10a 0a01 	add.w	sl, sl, #1
 800e110:	9304      	str	r3, [sp, #16]
 800e112:	9307      	str	r3, [sp, #28]
 800e114:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e118:	931a      	str	r3, [sp, #104]	; 0x68
 800e11a:	4654      	mov	r4, sl
 800e11c:	2205      	movs	r2, #5
 800e11e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e122:	4858      	ldr	r0, [pc, #352]	; (800e284 <_vfiprintf_r+0x24c>)
 800e124:	f7f2 f87c 	bl	8000220 <memchr>
 800e128:	9a04      	ldr	r2, [sp, #16]
 800e12a:	b9d8      	cbnz	r0, 800e164 <_vfiprintf_r+0x12c>
 800e12c:	06d1      	lsls	r1, r2, #27
 800e12e:	bf44      	itt	mi
 800e130:	2320      	movmi	r3, #32
 800e132:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e136:	0713      	lsls	r3, r2, #28
 800e138:	bf44      	itt	mi
 800e13a:	232b      	movmi	r3, #43	; 0x2b
 800e13c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e140:	f89a 3000 	ldrb.w	r3, [sl]
 800e144:	2b2a      	cmp	r3, #42	; 0x2a
 800e146:	d015      	beq.n	800e174 <_vfiprintf_r+0x13c>
 800e148:	9a07      	ldr	r2, [sp, #28]
 800e14a:	4654      	mov	r4, sl
 800e14c:	2000      	movs	r0, #0
 800e14e:	f04f 0c0a 	mov.w	ip, #10
 800e152:	4621      	mov	r1, r4
 800e154:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e158:	3b30      	subs	r3, #48	; 0x30
 800e15a:	2b09      	cmp	r3, #9
 800e15c:	d94e      	bls.n	800e1fc <_vfiprintf_r+0x1c4>
 800e15e:	b1b0      	cbz	r0, 800e18e <_vfiprintf_r+0x156>
 800e160:	9207      	str	r2, [sp, #28]
 800e162:	e014      	b.n	800e18e <_vfiprintf_r+0x156>
 800e164:	eba0 0308 	sub.w	r3, r0, r8
 800e168:	fa09 f303 	lsl.w	r3, r9, r3
 800e16c:	4313      	orrs	r3, r2
 800e16e:	9304      	str	r3, [sp, #16]
 800e170:	46a2      	mov	sl, r4
 800e172:	e7d2      	b.n	800e11a <_vfiprintf_r+0xe2>
 800e174:	9b03      	ldr	r3, [sp, #12]
 800e176:	1d19      	adds	r1, r3, #4
 800e178:	681b      	ldr	r3, [r3, #0]
 800e17a:	9103      	str	r1, [sp, #12]
 800e17c:	2b00      	cmp	r3, #0
 800e17e:	bfbb      	ittet	lt
 800e180:	425b      	neglt	r3, r3
 800e182:	f042 0202 	orrlt.w	r2, r2, #2
 800e186:	9307      	strge	r3, [sp, #28]
 800e188:	9307      	strlt	r3, [sp, #28]
 800e18a:	bfb8      	it	lt
 800e18c:	9204      	strlt	r2, [sp, #16]
 800e18e:	7823      	ldrb	r3, [r4, #0]
 800e190:	2b2e      	cmp	r3, #46	; 0x2e
 800e192:	d10c      	bne.n	800e1ae <_vfiprintf_r+0x176>
 800e194:	7863      	ldrb	r3, [r4, #1]
 800e196:	2b2a      	cmp	r3, #42	; 0x2a
 800e198:	d135      	bne.n	800e206 <_vfiprintf_r+0x1ce>
 800e19a:	9b03      	ldr	r3, [sp, #12]
 800e19c:	1d1a      	adds	r2, r3, #4
 800e19e:	681b      	ldr	r3, [r3, #0]
 800e1a0:	9203      	str	r2, [sp, #12]
 800e1a2:	2b00      	cmp	r3, #0
 800e1a4:	bfb8      	it	lt
 800e1a6:	f04f 33ff 	movlt.w	r3, #4294967295
 800e1aa:	3402      	adds	r4, #2
 800e1ac:	9305      	str	r3, [sp, #20]
 800e1ae:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800e294 <_vfiprintf_r+0x25c>
 800e1b2:	7821      	ldrb	r1, [r4, #0]
 800e1b4:	2203      	movs	r2, #3
 800e1b6:	4650      	mov	r0, sl
 800e1b8:	f7f2 f832 	bl	8000220 <memchr>
 800e1bc:	b140      	cbz	r0, 800e1d0 <_vfiprintf_r+0x198>
 800e1be:	2340      	movs	r3, #64	; 0x40
 800e1c0:	eba0 000a 	sub.w	r0, r0, sl
 800e1c4:	fa03 f000 	lsl.w	r0, r3, r0
 800e1c8:	9b04      	ldr	r3, [sp, #16]
 800e1ca:	4303      	orrs	r3, r0
 800e1cc:	3401      	adds	r4, #1
 800e1ce:	9304      	str	r3, [sp, #16]
 800e1d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e1d4:	482c      	ldr	r0, [pc, #176]	; (800e288 <_vfiprintf_r+0x250>)
 800e1d6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e1da:	2206      	movs	r2, #6
 800e1dc:	f7f2 f820 	bl	8000220 <memchr>
 800e1e0:	2800      	cmp	r0, #0
 800e1e2:	d03f      	beq.n	800e264 <_vfiprintf_r+0x22c>
 800e1e4:	4b29      	ldr	r3, [pc, #164]	; (800e28c <_vfiprintf_r+0x254>)
 800e1e6:	bb1b      	cbnz	r3, 800e230 <_vfiprintf_r+0x1f8>
 800e1e8:	9b03      	ldr	r3, [sp, #12]
 800e1ea:	3307      	adds	r3, #7
 800e1ec:	f023 0307 	bic.w	r3, r3, #7
 800e1f0:	3308      	adds	r3, #8
 800e1f2:	9303      	str	r3, [sp, #12]
 800e1f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e1f6:	443b      	add	r3, r7
 800e1f8:	9309      	str	r3, [sp, #36]	; 0x24
 800e1fa:	e767      	b.n	800e0cc <_vfiprintf_r+0x94>
 800e1fc:	fb0c 3202 	mla	r2, ip, r2, r3
 800e200:	460c      	mov	r4, r1
 800e202:	2001      	movs	r0, #1
 800e204:	e7a5      	b.n	800e152 <_vfiprintf_r+0x11a>
 800e206:	2300      	movs	r3, #0
 800e208:	3401      	adds	r4, #1
 800e20a:	9305      	str	r3, [sp, #20]
 800e20c:	4619      	mov	r1, r3
 800e20e:	f04f 0c0a 	mov.w	ip, #10
 800e212:	4620      	mov	r0, r4
 800e214:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e218:	3a30      	subs	r2, #48	; 0x30
 800e21a:	2a09      	cmp	r2, #9
 800e21c:	d903      	bls.n	800e226 <_vfiprintf_r+0x1ee>
 800e21e:	2b00      	cmp	r3, #0
 800e220:	d0c5      	beq.n	800e1ae <_vfiprintf_r+0x176>
 800e222:	9105      	str	r1, [sp, #20]
 800e224:	e7c3      	b.n	800e1ae <_vfiprintf_r+0x176>
 800e226:	fb0c 2101 	mla	r1, ip, r1, r2
 800e22a:	4604      	mov	r4, r0
 800e22c:	2301      	movs	r3, #1
 800e22e:	e7f0      	b.n	800e212 <_vfiprintf_r+0x1da>
 800e230:	ab03      	add	r3, sp, #12
 800e232:	9300      	str	r3, [sp, #0]
 800e234:	462a      	mov	r2, r5
 800e236:	4b16      	ldr	r3, [pc, #88]	; (800e290 <_vfiprintf_r+0x258>)
 800e238:	a904      	add	r1, sp, #16
 800e23a:	4630      	mov	r0, r6
 800e23c:	f7fd fdde 	bl	800bdfc <_printf_float>
 800e240:	4607      	mov	r7, r0
 800e242:	1c78      	adds	r0, r7, #1
 800e244:	d1d6      	bne.n	800e1f4 <_vfiprintf_r+0x1bc>
 800e246:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e248:	07d9      	lsls	r1, r3, #31
 800e24a:	d405      	bmi.n	800e258 <_vfiprintf_r+0x220>
 800e24c:	89ab      	ldrh	r3, [r5, #12]
 800e24e:	059a      	lsls	r2, r3, #22
 800e250:	d402      	bmi.n	800e258 <_vfiprintf_r+0x220>
 800e252:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e254:	f000 faaf 	bl	800e7b6 <__retarget_lock_release_recursive>
 800e258:	89ab      	ldrh	r3, [r5, #12]
 800e25a:	065b      	lsls	r3, r3, #25
 800e25c:	f53f af12 	bmi.w	800e084 <_vfiprintf_r+0x4c>
 800e260:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e262:	e711      	b.n	800e088 <_vfiprintf_r+0x50>
 800e264:	ab03      	add	r3, sp, #12
 800e266:	9300      	str	r3, [sp, #0]
 800e268:	462a      	mov	r2, r5
 800e26a:	4b09      	ldr	r3, [pc, #36]	; (800e290 <_vfiprintf_r+0x258>)
 800e26c:	a904      	add	r1, sp, #16
 800e26e:	4630      	mov	r0, r6
 800e270:	f7fe f868 	bl	800c344 <_printf_i>
 800e274:	e7e4      	b.n	800e240 <_vfiprintf_r+0x208>
 800e276:	bf00      	nop
 800e278:	0800f024 	.word	0x0800f024
 800e27c:	0800f044 	.word	0x0800f044
 800e280:	0800f004 	.word	0x0800f004
 800e284:	0800eeac 	.word	0x0800eeac
 800e288:	0800eeb6 	.word	0x0800eeb6
 800e28c:	0800bdfd 	.word	0x0800bdfd
 800e290:	0800e015 	.word	0x0800e015
 800e294:	0800eeb2 	.word	0x0800eeb2

0800e298 <__swbuf_r>:
 800e298:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e29a:	460e      	mov	r6, r1
 800e29c:	4614      	mov	r4, r2
 800e29e:	4605      	mov	r5, r0
 800e2a0:	b118      	cbz	r0, 800e2aa <__swbuf_r+0x12>
 800e2a2:	6983      	ldr	r3, [r0, #24]
 800e2a4:	b90b      	cbnz	r3, 800e2aa <__swbuf_r+0x12>
 800e2a6:	f000 f9e7 	bl	800e678 <__sinit>
 800e2aa:	4b21      	ldr	r3, [pc, #132]	; (800e330 <__swbuf_r+0x98>)
 800e2ac:	429c      	cmp	r4, r3
 800e2ae:	d12b      	bne.n	800e308 <__swbuf_r+0x70>
 800e2b0:	686c      	ldr	r4, [r5, #4]
 800e2b2:	69a3      	ldr	r3, [r4, #24]
 800e2b4:	60a3      	str	r3, [r4, #8]
 800e2b6:	89a3      	ldrh	r3, [r4, #12]
 800e2b8:	071a      	lsls	r2, r3, #28
 800e2ba:	d52f      	bpl.n	800e31c <__swbuf_r+0x84>
 800e2bc:	6923      	ldr	r3, [r4, #16]
 800e2be:	b36b      	cbz	r3, 800e31c <__swbuf_r+0x84>
 800e2c0:	6923      	ldr	r3, [r4, #16]
 800e2c2:	6820      	ldr	r0, [r4, #0]
 800e2c4:	1ac0      	subs	r0, r0, r3
 800e2c6:	6963      	ldr	r3, [r4, #20]
 800e2c8:	b2f6      	uxtb	r6, r6
 800e2ca:	4283      	cmp	r3, r0
 800e2cc:	4637      	mov	r7, r6
 800e2ce:	dc04      	bgt.n	800e2da <__swbuf_r+0x42>
 800e2d0:	4621      	mov	r1, r4
 800e2d2:	4628      	mov	r0, r5
 800e2d4:	f000 f93c 	bl	800e550 <_fflush_r>
 800e2d8:	bb30      	cbnz	r0, 800e328 <__swbuf_r+0x90>
 800e2da:	68a3      	ldr	r3, [r4, #8]
 800e2dc:	3b01      	subs	r3, #1
 800e2de:	60a3      	str	r3, [r4, #8]
 800e2e0:	6823      	ldr	r3, [r4, #0]
 800e2e2:	1c5a      	adds	r2, r3, #1
 800e2e4:	6022      	str	r2, [r4, #0]
 800e2e6:	701e      	strb	r6, [r3, #0]
 800e2e8:	6963      	ldr	r3, [r4, #20]
 800e2ea:	3001      	adds	r0, #1
 800e2ec:	4283      	cmp	r3, r0
 800e2ee:	d004      	beq.n	800e2fa <__swbuf_r+0x62>
 800e2f0:	89a3      	ldrh	r3, [r4, #12]
 800e2f2:	07db      	lsls	r3, r3, #31
 800e2f4:	d506      	bpl.n	800e304 <__swbuf_r+0x6c>
 800e2f6:	2e0a      	cmp	r6, #10
 800e2f8:	d104      	bne.n	800e304 <__swbuf_r+0x6c>
 800e2fa:	4621      	mov	r1, r4
 800e2fc:	4628      	mov	r0, r5
 800e2fe:	f000 f927 	bl	800e550 <_fflush_r>
 800e302:	b988      	cbnz	r0, 800e328 <__swbuf_r+0x90>
 800e304:	4638      	mov	r0, r7
 800e306:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e308:	4b0a      	ldr	r3, [pc, #40]	; (800e334 <__swbuf_r+0x9c>)
 800e30a:	429c      	cmp	r4, r3
 800e30c:	d101      	bne.n	800e312 <__swbuf_r+0x7a>
 800e30e:	68ac      	ldr	r4, [r5, #8]
 800e310:	e7cf      	b.n	800e2b2 <__swbuf_r+0x1a>
 800e312:	4b09      	ldr	r3, [pc, #36]	; (800e338 <__swbuf_r+0xa0>)
 800e314:	429c      	cmp	r4, r3
 800e316:	bf08      	it	eq
 800e318:	68ec      	ldreq	r4, [r5, #12]
 800e31a:	e7ca      	b.n	800e2b2 <__swbuf_r+0x1a>
 800e31c:	4621      	mov	r1, r4
 800e31e:	4628      	mov	r0, r5
 800e320:	f000 f81a 	bl	800e358 <__swsetup_r>
 800e324:	2800      	cmp	r0, #0
 800e326:	d0cb      	beq.n	800e2c0 <__swbuf_r+0x28>
 800e328:	f04f 37ff 	mov.w	r7, #4294967295
 800e32c:	e7ea      	b.n	800e304 <__swbuf_r+0x6c>
 800e32e:	bf00      	nop
 800e330:	0800f024 	.word	0x0800f024
 800e334:	0800f044 	.word	0x0800f044
 800e338:	0800f004 	.word	0x0800f004

0800e33c <__ascii_wctomb>:
 800e33c:	b149      	cbz	r1, 800e352 <__ascii_wctomb+0x16>
 800e33e:	2aff      	cmp	r2, #255	; 0xff
 800e340:	bf85      	ittet	hi
 800e342:	238a      	movhi	r3, #138	; 0x8a
 800e344:	6003      	strhi	r3, [r0, #0]
 800e346:	700a      	strbls	r2, [r1, #0]
 800e348:	f04f 30ff 	movhi.w	r0, #4294967295
 800e34c:	bf98      	it	ls
 800e34e:	2001      	movls	r0, #1
 800e350:	4770      	bx	lr
 800e352:	4608      	mov	r0, r1
 800e354:	4770      	bx	lr
	...

0800e358 <__swsetup_r>:
 800e358:	4b32      	ldr	r3, [pc, #200]	; (800e424 <__swsetup_r+0xcc>)
 800e35a:	b570      	push	{r4, r5, r6, lr}
 800e35c:	681d      	ldr	r5, [r3, #0]
 800e35e:	4606      	mov	r6, r0
 800e360:	460c      	mov	r4, r1
 800e362:	b125      	cbz	r5, 800e36e <__swsetup_r+0x16>
 800e364:	69ab      	ldr	r3, [r5, #24]
 800e366:	b913      	cbnz	r3, 800e36e <__swsetup_r+0x16>
 800e368:	4628      	mov	r0, r5
 800e36a:	f000 f985 	bl	800e678 <__sinit>
 800e36e:	4b2e      	ldr	r3, [pc, #184]	; (800e428 <__swsetup_r+0xd0>)
 800e370:	429c      	cmp	r4, r3
 800e372:	d10f      	bne.n	800e394 <__swsetup_r+0x3c>
 800e374:	686c      	ldr	r4, [r5, #4]
 800e376:	89a3      	ldrh	r3, [r4, #12]
 800e378:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e37c:	0719      	lsls	r1, r3, #28
 800e37e:	d42c      	bmi.n	800e3da <__swsetup_r+0x82>
 800e380:	06dd      	lsls	r5, r3, #27
 800e382:	d411      	bmi.n	800e3a8 <__swsetup_r+0x50>
 800e384:	2309      	movs	r3, #9
 800e386:	6033      	str	r3, [r6, #0]
 800e388:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800e38c:	81a3      	strh	r3, [r4, #12]
 800e38e:	f04f 30ff 	mov.w	r0, #4294967295
 800e392:	e03e      	b.n	800e412 <__swsetup_r+0xba>
 800e394:	4b25      	ldr	r3, [pc, #148]	; (800e42c <__swsetup_r+0xd4>)
 800e396:	429c      	cmp	r4, r3
 800e398:	d101      	bne.n	800e39e <__swsetup_r+0x46>
 800e39a:	68ac      	ldr	r4, [r5, #8]
 800e39c:	e7eb      	b.n	800e376 <__swsetup_r+0x1e>
 800e39e:	4b24      	ldr	r3, [pc, #144]	; (800e430 <__swsetup_r+0xd8>)
 800e3a0:	429c      	cmp	r4, r3
 800e3a2:	bf08      	it	eq
 800e3a4:	68ec      	ldreq	r4, [r5, #12]
 800e3a6:	e7e6      	b.n	800e376 <__swsetup_r+0x1e>
 800e3a8:	0758      	lsls	r0, r3, #29
 800e3aa:	d512      	bpl.n	800e3d2 <__swsetup_r+0x7a>
 800e3ac:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e3ae:	b141      	cbz	r1, 800e3c2 <__swsetup_r+0x6a>
 800e3b0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e3b4:	4299      	cmp	r1, r3
 800e3b6:	d002      	beq.n	800e3be <__swsetup_r+0x66>
 800e3b8:	4630      	mov	r0, r6
 800e3ba:	f7ff fb31 	bl	800da20 <_free_r>
 800e3be:	2300      	movs	r3, #0
 800e3c0:	6363      	str	r3, [r4, #52]	; 0x34
 800e3c2:	89a3      	ldrh	r3, [r4, #12]
 800e3c4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800e3c8:	81a3      	strh	r3, [r4, #12]
 800e3ca:	2300      	movs	r3, #0
 800e3cc:	6063      	str	r3, [r4, #4]
 800e3ce:	6923      	ldr	r3, [r4, #16]
 800e3d0:	6023      	str	r3, [r4, #0]
 800e3d2:	89a3      	ldrh	r3, [r4, #12]
 800e3d4:	f043 0308 	orr.w	r3, r3, #8
 800e3d8:	81a3      	strh	r3, [r4, #12]
 800e3da:	6923      	ldr	r3, [r4, #16]
 800e3dc:	b94b      	cbnz	r3, 800e3f2 <__swsetup_r+0x9a>
 800e3de:	89a3      	ldrh	r3, [r4, #12]
 800e3e0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800e3e4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e3e8:	d003      	beq.n	800e3f2 <__swsetup_r+0x9a>
 800e3ea:	4621      	mov	r1, r4
 800e3ec:	4630      	mov	r0, r6
 800e3ee:	f000 fa09 	bl	800e804 <__smakebuf_r>
 800e3f2:	89a0      	ldrh	r0, [r4, #12]
 800e3f4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e3f8:	f010 0301 	ands.w	r3, r0, #1
 800e3fc:	d00a      	beq.n	800e414 <__swsetup_r+0xbc>
 800e3fe:	2300      	movs	r3, #0
 800e400:	60a3      	str	r3, [r4, #8]
 800e402:	6963      	ldr	r3, [r4, #20]
 800e404:	425b      	negs	r3, r3
 800e406:	61a3      	str	r3, [r4, #24]
 800e408:	6923      	ldr	r3, [r4, #16]
 800e40a:	b943      	cbnz	r3, 800e41e <__swsetup_r+0xc6>
 800e40c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800e410:	d1ba      	bne.n	800e388 <__swsetup_r+0x30>
 800e412:	bd70      	pop	{r4, r5, r6, pc}
 800e414:	0781      	lsls	r1, r0, #30
 800e416:	bf58      	it	pl
 800e418:	6963      	ldrpl	r3, [r4, #20]
 800e41a:	60a3      	str	r3, [r4, #8]
 800e41c:	e7f4      	b.n	800e408 <__swsetup_r+0xb0>
 800e41e:	2000      	movs	r0, #0
 800e420:	e7f7      	b.n	800e412 <__swsetup_r+0xba>
 800e422:	bf00      	nop
 800e424:	20008f54 	.word	0x20008f54
 800e428:	0800f024 	.word	0x0800f024
 800e42c:	0800f044 	.word	0x0800f044
 800e430:	0800f004 	.word	0x0800f004

0800e434 <abort>:
 800e434:	b508      	push	{r3, lr}
 800e436:	2006      	movs	r0, #6
 800e438:	f000 fa54 	bl	800e8e4 <raise>
 800e43c:	2001      	movs	r0, #1
 800e43e:	f7f3 fd3d 	bl	8001ebc <_exit>
	...

0800e444 <__sflush_r>:
 800e444:	898a      	ldrh	r2, [r1, #12]
 800e446:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e44a:	4605      	mov	r5, r0
 800e44c:	0710      	lsls	r0, r2, #28
 800e44e:	460c      	mov	r4, r1
 800e450:	d458      	bmi.n	800e504 <__sflush_r+0xc0>
 800e452:	684b      	ldr	r3, [r1, #4]
 800e454:	2b00      	cmp	r3, #0
 800e456:	dc05      	bgt.n	800e464 <__sflush_r+0x20>
 800e458:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800e45a:	2b00      	cmp	r3, #0
 800e45c:	dc02      	bgt.n	800e464 <__sflush_r+0x20>
 800e45e:	2000      	movs	r0, #0
 800e460:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e464:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e466:	2e00      	cmp	r6, #0
 800e468:	d0f9      	beq.n	800e45e <__sflush_r+0x1a>
 800e46a:	2300      	movs	r3, #0
 800e46c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800e470:	682f      	ldr	r7, [r5, #0]
 800e472:	602b      	str	r3, [r5, #0]
 800e474:	d032      	beq.n	800e4dc <__sflush_r+0x98>
 800e476:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800e478:	89a3      	ldrh	r3, [r4, #12]
 800e47a:	075a      	lsls	r2, r3, #29
 800e47c:	d505      	bpl.n	800e48a <__sflush_r+0x46>
 800e47e:	6863      	ldr	r3, [r4, #4]
 800e480:	1ac0      	subs	r0, r0, r3
 800e482:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800e484:	b10b      	cbz	r3, 800e48a <__sflush_r+0x46>
 800e486:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800e488:	1ac0      	subs	r0, r0, r3
 800e48a:	2300      	movs	r3, #0
 800e48c:	4602      	mov	r2, r0
 800e48e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e490:	6a21      	ldr	r1, [r4, #32]
 800e492:	4628      	mov	r0, r5
 800e494:	47b0      	blx	r6
 800e496:	1c43      	adds	r3, r0, #1
 800e498:	89a3      	ldrh	r3, [r4, #12]
 800e49a:	d106      	bne.n	800e4aa <__sflush_r+0x66>
 800e49c:	6829      	ldr	r1, [r5, #0]
 800e49e:	291d      	cmp	r1, #29
 800e4a0:	d82c      	bhi.n	800e4fc <__sflush_r+0xb8>
 800e4a2:	4a2a      	ldr	r2, [pc, #168]	; (800e54c <__sflush_r+0x108>)
 800e4a4:	40ca      	lsrs	r2, r1
 800e4a6:	07d6      	lsls	r6, r2, #31
 800e4a8:	d528      	bpl.n	800e4fc <__sflush_r+0xb8>
 800e4aa:	2200      	movs	r2, #0
 800e4ac:	6062      	str	r2, [r4, #4]
 800e4ae:	04d9      	lsls	r1, r3, #19
 800e4b0:	6922      	ldr	r2, [r4, #16]
 800e4b2:	6022      	str	r2, [r4, #0]
 800e4b4:	d504      	bpl.n	800e4c0 <__sflush_r+0x7c>
 800e4b6:	1c42      	adds	r2, r0, #1
 800e4b8:	d101      	bne.n	800e4be <__sflush_r+0x7a>
 800e4ba:	682b      	ldr	r3, [r5, #0]
 800e4bc:	b903      	cbnz	r3, 800e4c0 <__sflush_r+0x7c>
 800e4be:	6560      	str	r0, [r4, #84]	; 0x54
 800e4c0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e4c2:	602f      	str	r7, [r5, #0]
 800e4c4:	2900      	cmp	r1, #0
 800e4c6:	d0ca      	beq.n	800e45e <__sflush_r+0x1a>
 800e4c8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e4cc:	4299      	cmp	r1, r3
 800e4ce:	d002      	beq.n	800e4d6 <__sflush_r+0x92>
 800e4d0:	4628      	mov	r0, r5
 800e4d2:	f7ff faa5 	bl	800da20 <_free_r>
 800e4d6:	2000      	movs	r0, #0
 800e4d8:	6360      	str	r0, [r4, #52]	; 0x34
 800e4da:	e7c1      	b.n	800e460 <__sflush_r+0x1c>
 800e4dc:	6a21      	ldr	r1, [r4, #32]
 800e4de:	2301      	movs	r3, #1
 800e4e0:	4628      	mov	r0, r5
 800e4e2:	47b0      	blx	r6
 800e4e4:	1c41      	adds	r1, r0, #1
 800e4e6:	d1c7      	bne.n	800e478 <__sflush_r+0x34>
 800e4e8:	682b      	ldr	r3, [r5, #0]
 800e4ea:	2b00      	cmp	r3, #0
 800e4ec:	d0c4      	beq.n	800e478 <__sflush_r+0x34>
 800e4ee:	2b1d      	cmp	r3, #29
 800e4f0:	d001      	beq.n	800e4f6 <__sflush_r+0xb2>
 800e4f2:	2b16      	cmp	r3, #22
 800e4f4:	d101      	bne.n	800e4fa <__sflush_r+0xb6>
 800e4f6:	602f      	str	r7, [r5, #0]
 800e4f8:	e7b1      	b.n	800e45e <__sflush_r+0x1a>
 800e4fa:	89a3      	ldrh	r3, [r4, #12]
 800e4fc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e500:	81a3      	strh	r3, [r4, #12]
 800e502:	e7ad      	b.n	800e460 <__sflush_r+0x1c>
 800e504:	690f      	ldr	r7, [r1, #16]
 800e506:	2f00      	cmp	r7, #0
 800e508:	d0a9      	beq.n	800e45e <__sflush_r+0x1a>
 800e50a:	0793      	lsls	r3, r2, #30
 800e50c:	680e      	ldr	r6, [r1, #0]
 800e50e:	bf08      	it	eq
 800e510:	694b      	ldreq	r3, [r1, #20]
 800e512:	600f      	str	r7, [r1, #0]
 800e514:	bf18      	it	ne
 800e516:	2300      	movne	r3, #0
 800e518:	eba6 0807 	sub.w	r8, r6, r7
 800e51c:	608b      	str	r3, [r1, #8]
 800e51e:	f1b8 0f00 	cmp.w	r8, #0
 800e522:	dd9c      	ble.n	800e45e <__sflush_r+0x1a>
 800e524:	6a21      	ldr	r1, [r4, #32]
 800e526:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800e528:	4643      	mov	r3, r8
 800e52a:	463a      	mov	r2, r7
 800e52c:	4628      	mov	r0, r5
 800e52e:	47b0      	blx	r6
 800e530:	2800      	cmp	r0, #0
 800e532:	dc06      	bgt.n	800e542 <__sflush_r+0xfe>
 800e534:	89a3      	ldrh	r3, [r4, #12]
 800e536:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e53a:	81a3      	strh	r3, [r4, #12]
 800e53c:	f04f 30ff 	mov.w	r0, #4294967295
 800e540:	e78e      	b.n	800e460 <__sflush_r+0x1c>
 800e542:	4407      	add	r7, r0
 800e544:	eba8 0800 	sub.w	r8, r8, r0
 800e548:	e7e9      	b.n	800e51e <__sflush_r+0xda>
 800e54a:	bf00      	nop
 800e54c:	20400001 	.word	0x20400001

0800e550 <_fflush_r>:
 800e550:	b538      	push	{r3, r4, r5, lr}
 800e552:	690b      	ldr	r3, [r1, #16]
 800e554:	4605      	mov	r5, r0
 800e556:	460c      	mov	r4, r1
 800e558:	b913      	cbnz	r3, 800e560 <_fflush_r+0x10>
 800e55a:	2500      	movs	r5, #0
 800e55c:	4628      	mov	r0, r5
 800e55e:	bd38      	pop	{r3, r4, r5, pc}
 800e560:	b118      	cbz	r0, 800e56a <_fflush_r+0x1a>
 800e562:	6983      	ldr	r3, [r0, #24]
 800e564:	b90b      	cbnz	r3, 800e56a <_fflush_r+0x1a>
 800e566:	f000 f887 	bl	800e678 <__sinit>
 800e56a:	4b14      	ldr	r3, [pc, #80]	; (800e5bc <_fflush_r+0x6c>)
 800e56c:	429c      	cmp	r4, r3
 800e56e:	d11b      	bne.n	800e5a8 <_fflush_r+0x58>
 800e570:	686c      	ldr	r4, [r5, #4]
 800e572:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e576:	2b00      	cmp	r3, #0
 800e578:	d0ef      	beq.n	800e55a <_fflush_r+0xa>
 800e57a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800e57c:	07d0      	lsls	r0, r2, #31
 800e57e:	d404      	bmi.n	800e58a <_fflush_r+0x3a>
 800e580:	0599      	lsls	r1, r3, #22
 800e582:	d402      	bmi.n	800e58a <_fflush_r+0x3a>
 800e584:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e586:	f000 f915 	bl	800e7b4 <__retarget_lock_acquire_recursive>
 800e58a:	4628      	mov	r0, r5
 800e58c:	4621      	mov	r1, r4
 800e58e:	f7ff ff59 	bl	800e444 <__sflush_r>
 800e592:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e594:	07da      	lsls	r2, r3, #31
 800e596:	4605      	mov	r5, r0
 800e598:	d4e0      	bmi.n	800e55c <_fflush_r+0xc>
 800e59a:	89a3      	ldrh	r3, [r4, #12]
 800e59c:	059b      	lsls	r3, r3, #22
 800e59e:	d4dd      	bmi.n	800e55c <_fflush_r+0xc>
 800e5a0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e5a2:	f000 f908 	bl	800e7b6 <__retarget_lock_release_recursive>
 800e5a6:	e7d9      	b.n	800e55c <_fflush_r+0xc>
 800e5a8:	4b05      	ldr	r3, [pc, #20]	; (800e5c0 <_fflush_r+0x70>)
 800e5aa:	429c      	cmp	r4, r3
 800e5ac:	d101      	bne.n	800e5b2 <_fflush_r+0x62>
 800e5ae:	68ac      	ldr	r4, [r5, #8]
 800e5b0:	e7df      	b.n	800e572 <_fflush_r+0x22>
 800e5b2:	4b04      	ldr	r3, [pc, #16]	; (800e5c4 <_fflush_r+0x74>)
 800e5b4:	429c      	cmp	r4, r3
 800e5b6:	bf08      	it	eq
 800e5b8:	68ec      	ldreq	r4, [r5, #12]
 800e5ba:	e7da      	b.n	800e572 <_fflush_r+0x22>
 800e5bc:	0800f024 	.word	0x0800f024
 800e5c0:	0800f044 	.word	0x0800f044
 800e5c4:	0800f004 	.word	0x0800f004

0800e5c8 <std>:
 800e5c8:	2300      	movs	r3, #0
 800e5ca:	b510      	push	{r4, lr}
 800e5cc:	4604      	mov	r4, r0
 800e5ce:	e9c0 3300 	strd	r3, r3, [r0]
 800e5d2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800e5d6:	6083      	str	r3, [r0, #8]
 800e5d8:	8181      	strh	r1, [r0, #12]
 800e5da:	6643      	str	r3, [r0, #100]	; 0x64
 800e5dc:	81c2      	strh	r2, [r0, #14]
 800e5de:	6183      	str	r3, [r0, #24]
 800e5e0:	4619      	mov	r1, r3
 800e5e2:	2208      	movs	r2, #8
 800e5e4:	305c      	adds	r0, #92	; 0x5c
 800e5e6:	f7fd fb61 	bl	800bcac <memset>
 800e5ea:	4b05      	ldr	r3, [pc, #20]	; (800e600 <std+0x38>)
 800e5ec:	6263      	str	r3, [r4, #36]	; 0x24
 800e5ee:	4b05      	ldr	r3, [pc, #20]	; (800e604 <std+0x3c>)
 800e5f0:	62a3      	str	r3, [r4, #40]	; 0x28
 800e5f2:	4b05      	ldr	r3, [pc, #20]	; (800e608 <std+0x40>)
 800e5f4:	62e3      	str	r3, [r4, #44]	; 0x2c
 800e5f6:	4b05      	ldr	r3, [pc, #20]	; (800e60c <std+0x44>)
 800e5f8:	6224      	str	r4, [r4, #32]
 800e5fa:	6323      	str	r3, [r4, #48]	; 0x30
 800e5fc:	bd10      	pop	{r4, pc}
 800e5fe:	bf00      	nop
 800e600:	0800e91d 	.word	0x0800e91d
 800e604:	0800e93f 	.word	0x0800e93f
 800e608:	0800e977 	.word	0x0800e977
 800e60c:	0800e99b 	.word	0x0800e99b

0800e610 <_cleanup_r>:
 800e610:	4901      	ldr	r1, [pc, #4]	; (800e618 <_cleanup_r+0x8>)
 800e612:	f000 b8af 	b.w	800e774 <_fwalk_reent>
 800e616:	bf00      	nop
 800e618:	0800e551 	.word	0x0800e551

0800e61c <__sfmoreglue>:
 800e61c:	b570      	push	{r4, r5, r6, lr}
 800e61e:	2268      	movs	r2, #104	; 0x68
 800e620:	1e4d      	subs	r5, r1, #1
 800e622:	4355      	muls	r5, r2
 800e624:	460e      	mov	r6, r1
 800e626:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800e62a:	f7ff fa65 	bl	800daf8 <_malloc_r>
 800e62e:	4604      	mov	r4, r0
 800e630:	b140      	cbz	r0, 800e644 <__sfmoreglue+0x28>
 800e632:	2100      	movs	r1, #0
 800e634:	e9c0 1600 	strd	r1, r6, [r0]
 800e638:	300c      	adds	r0, #12
 800e63a:	60a0      	str	r0, [r4, #8]
 800e63c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800e640:	f7fd fb34 	bl	800bcac <memset>
 800e644:	4620      	mov	r0, r4
 800e646:	bd70      	pop	{r4, r5, r6, pc}

0800e648 <__sfp_lock_acquire>:
 800e648:	4801      	ldr	r0, [pc, #4]	; (800e650 <__sfp_lock_acquire+0x8>)
 800e64a:	f000 b8b3 	b.w	800e7b4 <__retarget_lock_acquire_recursive>
 800e64e:	bf00      	nop
 800e650:	2000963d 	.word	0x2000963d

0800e654 <__sfp_lock_release>:
 800e654:	4801      	ldr	r0, [pc, #4]	; (800e65c <__sfp_lock_release+0x8>)
 800e656:	f000 b8ae 	b.w	800e7b6 <__retarget_lock_release_recursive>
 800e65a:	bf00      	nop
 800e65c:	2000963d 	.word	0x2000963d

0800e660 <__sinit_lock_acquire>:
 800e660:	4801      	ldr	r0, [pc, #4]	; (800e668 <__sinit_lock_acquire+0x8>)
 800e662:	f000 b8a7 	b.w	800e7b4 <__retarget_lock_acquire_recursive>
 800e666:	bf00      	nop
 800e668:	2000963e 	.word	0x2000963e

0800e66c <__sinit_lock_release>:
 800e66c:	4801      	ldr	r0, [pc, #4]	; (800e674 <__sinit_lock_release+0x8>)
 800e66e:	f000 b8a2 	b.w	800e7b6 <__retarget_lock_release_recursive>
 800e672:	bf00      	nop
 800e674:	2000963e 	.word	0x2000963e

0800e678 <__sinit>:
 800e678:	b510      	push	{r4, lr}
 800e67a:	4604      	mov	r4, r0
 800e67c:	f7ff fff0 	bl	800e660 <__sinit_lock_acquire>
 800e680:	69a3      	ldr	r3, [r4, #24]
 800e682:	b11b      	cbz	r3, 800e68c <__sinit+0x14>
 800e684:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e688:	f7ff bff0 	b.w	800e66c <__sinit_lock_release>
 800e68c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800e690:	6523      	str	r3, [r4, #80]	; 0x50
 800e692:	4b13      	ldr	r3, [pc, #76]	; (800e6e0 <__sinit+0x68>)
 800e694:	4a13      	ldr	r2, [pc, #76]	; (800e6e4 <__sinit+0x6c>)
 800e696:	681b      	ldr	r3, [r3, #0]
 800e698:	62a2      	str	r2, [r4, #40]	; 0x28
 800e69a:	42a3      	cmp	r3, r4
 800e69c:	bf04      	itt	eq
 800e69e:	2301      	moveq	r3, #1
 800e6a0:	61a3      	streq	r3, [r4, #24]
 800e6a2:	4620      	mov	r0, r4
 800e6a4:	f000 f820 	bl	800e6e8 <__sfp>
 800e6a8:	6060      	str	r0, [r4, #4]
 800e6aa:	4620      	mov	r0, r4
 800e6ac:	f000 f81c 	bl	800e6e8 <__sfp>
 800e6b0:	60a0      	str	r0, [r4, #8]
 800e6b2:	4620      	mov	r0, r4
 800e6b4:	f000 f818 	bl	800e6e8 <__sfp>
 800e6b8:	2200      	movs	r2, #0
 800e6ba:	60e0      	str	r0, [r4, #12]
 800e6bc:	2104      	movs	r1, #4
 800e6be:	6860      	ldr	r0, [r4, #4]
 800e6c0:	f7ff ff82 	bl	800e5c8 <std>
 800e6c4:	68a0      	ldr	r0, [r4, #8]
 800e6c6:	2201      	movs	r2, #1
 800e6c8:	2109      	movs	r1, #9
 800e6ca:	f7ff ff7d 	bl	800e5c8 <std>
 800e6ce:	68e0      	ldr	r0, [r4, #12]
 800e6d0:	2202      	movs	r2, #2
 800e6d2:	2112      	movs	r1, #18
 800e6d4:	f7ff ff78 	bl	800e5c8 <std>
 800e6d8:	2301      	movs	r3, #1
 800e6da:	61a3      	str	r3, [r4, #24]
 800e6dc:	e7d2      	b.n	800e684 <__sinit+0xc>
 800e6de:	bf00      	nop
 800e6e0:	0800ec8c 	.word	0x0800ec8c
 800e6e4:	0800e611 	.word	0x0800e611

0800e6e8 <__sfp>:
 800e6e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e6ea:	4607      	mov	r7, r0
 800e6ec:	f7ff ffac 	bl	800e648 <__sfp_lock_acquire>
 800e6f0:	4b1e      	ldr	r3, [pc, #120]	; (800e76c <__sfp+0x84>)
 800e6f2:	681e      	ldr	r6, [r3, #0]
 800e6f4:	69b3      	ldr	r3, [r6, #24]
 800e6f6:	b913      	cbnz	r3, 800e6fe <__sfp+0x16>
 800e6f8:	4630      	mov	r0, r6
 800e6fa:	f7ff ffbd 	bl	800e678 <__sinit>
 800e6fe:	3648      	adds	r6, #72	; 0x48
 800e700:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800e704:	3b01      	subs	r3, #1
 800e706:	d503      	bpl.n	800e710 <__sfp+0x28>
 800e708:	6833      	ldr	r3, [r6, #0]
 800e70a:	b30b      	cbz	r3, 800e750 <__sfp+0x68>
 800e70c:	6836      	ldr	r6, [r6, #0]
 800e70e:	e7f7      	b.n	800e700 <__sfp+0x18>
 800e710:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800e714:	b9d5      	cbnz	r5, 800e74c <__sfp+0x64>
 800e716:	4b16      	ldr	r3, [pc, #88]	; (800e770 <__sfp+0x88>)
 800e718:	60e3      	str	r3, [r4, #12]
 800e71a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800e71e:	6665      	str	r5, [r4, #100]	; 0x64
 800e720:	f000 f847 	bl	800e7b2 <__retarget_lock_init_recursive>
 800e724:	f7ff ff96 	bl	800e654 <__sfp_lock_release>
 800e728:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800e72c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800e730:	6025      	str	r5, [r4, #0]
 800e732:	61a5      	str	r5, [r4, #24]
 800e734:	2208      	movs	r2, #8
 800e736:	4629      	mov	r1, r5
 800e738:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800e73c:	f7fd fab6 	bl	800bcac <memset>
 800e740:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800e744:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800e748:	4620      	mov	r0, r4
 800e74a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e74c:	3468      	adds	r4, #104	; 0x68
 800e74e:	e7d9      	b.n	800e704 <__sfp+0x1c>
 800e750:	2104      	movs	r1, #4
 800e752:	4638      	mov	r0, r7
 800e754:	f7ff ff62 	bl	800e61c <__sfmoreglue>
 800e758:	4604      	mov	r4, r0
 800e75a:	6030      	str	r0, [r6, #0]
 800e75c:	2800      	cmp	r0, #0
 800e75e:	d1d5      	bne.n	800e70c <__sfp+0x24>
 800e760:	f7ff ff78 	bl	800e654 <__sfp_lock_release>
 800e764:	230c      	movs	r3, #12
 800e766:	603b      	str	r3, [r7, #0]
 800e768:	e7ee      	b.n	800e748 <__sfp+0x60>
 800e76a:	bf00      	nop
 800e76c:	0800ec8c 	.word	0x0800ec8c
 800e770:	ffff0001 	.word	0xffff0001

0800e774 <_fwalk_reent>:
 800e774:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e778:	4606      	mov	r6, r0
 800e77a:	4688      	mov	r8, r1
 800e77c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800e780:	2700      	movs	r7, #0
 800e782:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800e786:	f1b9 0901 	subs.w	r9, r9, #1
 800e78a:	d505      	bpl.n	800e798 <_fwalk_reent+0x24>
 800e78c:	6824      	ldr	r4, [r4, #0]
 800e78e:	2c00      	cmp	r4, #0
 800e790:	d1f7      	bne.n	800e782 <_fwalk_reent+0xe>
 800e792:	4638      	mov	r0, r7
 800e794:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e798:	89ab      	ldrh	r3, [r5, #12]
 800e79a:	2b01      	cmp	r3, #1
 800e79c:	d907      	bls.n	800e7ae <_fwalk_reent+0x3a>
 800e79e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800e7a2:	3301      	adds	r3, #1
 800e7a4:	d003      	beq.n	800e7ae <_fwalk_reent+0x3a>
 800e7a6:	4629      	mov	r1, r5
 800e7a8:	4630      	mov	r0, r6
 800e7aa:	47c0      	blx	r8
 800e7ac:	4307      	orrs	r7, r0
 800e7ae:	3568      	adds	r5, #104	; 0x68
 800e7b0:	e7e9      	b.n	800e786 <_fwalk_reent+0x12>

0800e7b2 <__retarget_lock_init_recursive>:
 800e7b2:	4770      	bx	lr

0800e7b4 <__retarget_lock_acquire_recursive>:
 800e7b4:	4770      	bx	lr

0800e7b6 <__retarget_lock_release_recursive>:
 800e7b6:	4770      	bx	lr

0800e7b8 <__swhatbuf_r>:
 800e7b8:	b570      	push	{r4, r5, r6, lr}
 800e7ba:	460e      	mov	r6, r1
 800e7bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e7c0:	2900      	cmp	r1, #0
 800e7c2:	b096      	sub	sp, #88	; 0x58
 800e7c4:	4614      	mov	r4, r2
 800e7c6:	461d      	mov	r5, r3
 800e7c8:	da08      	bge.n	800e7dc <__swhatbuf_r+0x24>
 800e7ca:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800e7ce:	2200      	movs	r2, #0
 800e7d0:	602a      	str	r2, [r5, #0]
 800e7d2:	061a      	lsls	r2, r3, #24
 800e7d4:	d410      	bmi.n	800e7f8 <__swhatbuf_r+0x40>
 800e7d6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e7da:	e00e      	b.n	800e7fa <__swhatbuf_r+0x42>
 800e7dc:	466a      	mov	r2, sp
 800e7de:	f000 f903 	bl	800e9e8 <_fstat_r>
 800e7e2:	2800      	cmp	r0, #0
 800e7e4:	dbf1      	blt.n	800e7ca <__swhatbuf_r+0x12>
 800e7e6:	9a01      	ldr	r2, [sp, #4]
 800e7e8:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800e7ec:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800e7f0:	425a      	negs	r2, r3
 800e7f2:	415a      	adcs	r2, r3
 800e7f4:	602a      	str	r2, [r5, #0]
 800e7f6:	e7ee      	b.n	800e7d6 <__swhatbuf_r+0x1e>
 800e7f8:	2340      	movs	r3, #64	; 0x40
 800e7fa:	2000      	movs	r0, #0
 800e7fc:	6023      	str	r3, [r4, #0]
 800e7fe:	b016      	add	sp, #88	; 0x58
 800e800:	bd70      	pop	{r4, r5, r6, pc}
	...

0800e804 <__smakebuf_r>:
 800e804:	898b      	ldrh	r3, [r1, #12]
 800e806:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800e808:	079d      	lsls	r5, r3, #30
 800e80a:	4606      	mov	r6, r0
 800e80c:	460c      	mov	r4, r1
 800e80e:	d507      	bpl.n	800e820 <__smakebuf_r+0x1c>
 800e810:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800e814:	6023      	str	r3, [r4, #0]
 800e816:	6123      	str	r3, [r4, #16]
 800e818:	2301      	movs	r3, #1
 800e81a:	6163      	str	r3, [r4, #20]
 800e81c:	b002      	add	sp, #8
 800e81e:	bd70      	pop	{r4, r5, r6, pc}
 800e820:	ab01      	add	r3, sp, #4
 800e822:	466a      	mov	r2, sp
 800e824:	f7ff ffc8 	bl	800e7b8 <__swhatbuf_r>
 800e828:	9900      	ldr	r1, [sp, #0]
 800e82a:	4605      	mov	r5, r0
 800e82c:	4630      	mov	r0, r6
 800e82e:	f7ff f963 	bl	800daf8 <_malloc_r>
 800e832:	b948      	cbnz	r0, 800e848 <__smakebuf_r+0x44>
 800e834:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e838:	059a      	lsls	r2, r3, #22
 800e83a:	d4ef      	bmi.n	800e81c <__smakebuf_r+0x18>
 800e83c:	f023 0303 	bic.w	r3, r3, #3
 800e840:	f043 0302 	orr.w	r3, r3, #2
 800e844:	81a3      	strh	r3, [r4, #12]
 800e846:	e7e3      	b.n	800e810 <__smakebuf_r+0xc>
 800e848:	4b0d      	ldr	r3, [pc, #52]	; (800e880 <__smakebuf_r+0x7c>)
 800e84a:	62b3      	str	r3, [r6, #40]	; 0x28
 800e84c:	89a3      	ldrh	r3, [r4, #12]
 800e84e:	6020      	str	r0, [r4, #0]
 800e850:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e854:	81a3      	strh	r3, [r4, #12]
 800e856:	9b00      	ldr	r3, [sp, #0]
 800e858:	6163      	str	r3, [r4, #20]
 800e85a:	9b01      	ldr	r3, [sp, #4]
 800e85c:	6120      	str	r0, [r4, #16]
 800e85e:	b15b      	cbz	r3, 800e878 <__smakebuf_r+0x74>
 800e860:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e864:	4630      	mov	r0, r6
 800e866:	f000 f8d1 	bl	800ea0c <_isatty_r>
 800e86a:	b128      	cbz	r0, 800e878 <__smakebuf_r+0x74>
 800e86c:	89a3      	ldrh	r3, [r4, #12]
 800e86e:	f023 0303 	bic.w	r3, r3, #3
 800e872:	f043 0301 	orr.w	r3, r3, #1
 800e876:	81a3      	strh	r3, [r4, #12]
 800e878:	89a0      	ldrh	r0, [r4, #12]
 800e87a:	4305      	orrs	r5, r0
 800e87c:	81a5      	strh	r5, [r4, #12]
 800e87e:	e7cd      	b.n	800e81c <__smakebuf_r+0x18>
 800e880:	0800e611 	.word	0x0800e611

0800e884 <_malloc_usable_size_r>:
 800e884:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e888:	1f18      	subs	r0, r3, #4
 800e88a:	2b00      	cmp	r3, #0
 800e88c:	bfbc      	itt	lt
 800e88e:	580b      	ldrlt	r3, [r1, r0]
 800e890:	18c0      	addlt	r0, r0, r3
 800e892:	4770      	bx	lr

0800e894 <_raise_r>:
 800e894:	291f      	cmp	r1, #31
 800e896:	b538      	push	{r3, r4, r5, lr}
 800e898:	4604      	mov	r4, r0
 800e89a:	460d      	mov	r5, r1
 800e89c:	d904      	bls.n	800e8a8 <_raise_r+0x14>
 800e89e:	2316      	movs	r3, #22
 800e8a0:	6003      	str	r3, [r0, #0]
 800e8a2:	f04f 30ff 	mov.w	r0, #4294967295
 800e8a6:	bd38      	pop	{r3, r4, r5, pc}
 800e8a8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800e8aa:	b112      	cbz	r2, 800e8b2 <_raise_r+0x1e>
 800e8ac:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800e8b0:	b94b      	cbnz	r3, 800e8c6 <_raise_r+0x32>
 800e8b2:	4620      	mov	r0, r4
 800e8b4:	f000 f830 	bl	800e918 <_getpid_r>
 800e8b8:	462a      	mov	r2, r5
 800e8ba:	4601      	mov	r1, r0
 800e8bc:	4620      	mov	r0, r4
 800e8be:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e8c2:	f000 b817 	b.w	800e8f4 <_kill_r>
 800e8c6:	2b01      	cmp	r3, #1
 800e8c8:	d00a      	beq.n	800e8e0 <_raise_r+0x4c>
 800e8ca:	1c59      	adds	r1, r3, #1
 800e8cc:	d103      	bne.n	800e8d6 <_raise_r+0x42>
 800e8ce:	2316      	movs	r3, #22
 800e8d0:	6003      	str	r3, [r0, #0]
 800e8d2:	2001      	movs	r0, #1
 800e8d4:	e7e7      	b.n	800e8a6 <_raise_r+0x12>
 800e8d6:	2400      	movs	r4, #0
 800e8d8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800e8dc:	4628      	mov	r0, r5
 800e8de:	4798      	blx	r3
 800e8e0:	2000      	movs	r0, #0
 800e8e2:	e7e0      	b.n	800e8a6 <_raise_r+0x12>

0800e8e4 <raise>:
 800e8e4:	4b02      	ldr	r3, [pc, #8]	; (800e8f0 <raise+0xc>)
 800e8e6:	4601      	mov	r1, r0
 800e8e8:	6818      	ldr	r0, [r3, #0]
 800e8ea:	f7ff bfd3 	b.w	800e894 <_raise_r>
 800e8ee:	bf00      	nop
 800e8f0:	20008f54 	.word	0x20008f54

0800e8f4 <_kill_r>:
 800e8f4:	b538      	push	{r3, r4, r5, lr}
 800e8f6:	4d07      	ldr	r5, [pc, #28]	; (800e914 <_kill_r+0x20>)
 800e8f8:	2300      	movs	r3, #0
 800e8fa:	4604      	mov	r4, r0
 800e8fc:	4608      	mov	r0, r1
 800e8fe:	4611      	mov	r1, r2
 800e900:	602b      	str	r3, [r5, #0]
 800e902:	f7f3 facb 	bl	8001e9c <_kill>
 800e906:	1c43      	adds	r3, r0, #1
 800e908:	d102      	bne.n	800e910 <_kill_r+0x1c>
 800e90a:	682b      	ldr	r3, [r5, #0]
 800e90c:	b103      	cbz	r3, 800e910 <_kill_r+0x1c>
 800e90e:	6023      	str	r3, [r4, #0]
 800e910:	bd38      	pop	{r3, r4, r5, pc}
 800e912:	bf00      	nop
 800e914:	20009638 	.word	0x20009638

0800e918 <_getpid_r>:
 800e918:	f7f3 bab8 	b.w	8001e8c <_getpid>

0800e91c <__sread>:
 800e91c:	b510      	push	{r4, lr}
 800e91e:	460c      	mov	r4, r1
 800e920:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e924:	f000 f894 	bl	800ea50 <_read_r>
 800e928:	2800      	cmp	r0, #0
 800e92a:	bfab      	itete	ge
 800e92c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800e92e:	89a3      	ldrhlt	r3, [r4, #12]
 800e930:	181b      	addge	r3, r3, r0
 800e932:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800e936:	bfac      	ite	ge
 800e938:	6563      	strge	r3, [r4, #84]	; 0x54
 800e93a:	81a3      	strhlt	r3, [r4, #12]
 800e93c:	bd10      	pop	{r4, pc}

0800e93e <__swrite>:
 800e93e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e942:	461f      	mov	r7, r3
 800e944:	898b      	ldrh	r3, [r1, #12]
 800e946:	05db      	lsls	r3, r3, #23
 800e948:	4605      	mov	r5, r0
 800e94a:	460c      	mov	r4, r1
 800e94c:	4616      	mov	r6, r2
 800e94e:	d505      	bpl.n	800e95c <__swrite+0x1e>
 800e950:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e954:	2302      	movs	r3, #2
 800e956:	2200      	movs	r2, #0
 800e958:	f000 f868 	bl	800ea2c <_lseek_r>
 800e95c:	89a3      	ldrh	r3, [r4, #12]
 800e95e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e962:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800e966:	81a3      	strh	r3, [r4, #12]
 800e968:	4632      	mov	r2, r6
 800e96a:	463b      	mov	r3, r7
 800e96c:	4628      	mov	r0, r5
 800e96e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e972:	f000 b817 	b.w	800e9a4 <_write_r>

0800e976 <__sseek>:
 800e976:	b510      	push	{r4, lr}
 800e978:	460c      	mov	r4, r1
 800e97a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e97e:	f000 f855 	bl	800ea2c <_lseek_r>
 800e982:	1c43      	adds	r3, r0, #1
 800e984:	89a3      	ldrh	r3, [r4, #12]
 800e986:	bf15      	itete	ne
 800e988:	6560      	strne	r0, [r4, #84]	; 0x54
 800e98a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800e98e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800e992:	81a3      	strheq	r3, [r4, #12]
 800e994:	bf18      	it	ne
 800e996:	81a3      	strhne	r3, [r4, #12]
 800e998:	bd10      	pop	{r4, pc}

0800e99a <__sclose>:
 800e99a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e99e:	f000 b813 	b.w	800e9c8 <_close_r>
	...

0800e9a4 <_write_r>:
 800e9a4:	b538      	push	{r3, r4, r5, lr}
 800e9a6:	4d07      	ldr	r5, [pc, #28]	; (800e9c4 <_write_r+0x20>)
 800e9a8:	4604      	mov	r4, r0
 800e9aa:	4608      	mov	r0, r1
 800e9ac:	4611      	mov	r1, r2
 800e9ae:	2200      	movs	r2, #0
 800e9b0:	602a      	str	r2, [r5, #0]
 800e9b2:	461a      	mov	r2, r3
 800e9b4:	f7f3 faa9 	bl	8001f0a <_write>
 800e9b8:	1c43      	adds	r3, r0, #1
 800e9ba:	d102      	bne.n	800e9c2 <_write_r+0x1e>
 800e9bc:	682b      	ldr	r3, [r5, #0]
 800e9be:	b103      	cbz	r3, 800e9c2 <_write_r+0x1e>
 800e9c0:	6023      	str	r3, [r4, #0]
 800e9c2:	bd38      	pop	{r3, r4, r5, pc}
 800e9c4:	20009638 	.word	0x20009638

0800e9c8 <_close_r>:
 800e9c8:	b538      	push	{r3, r4, r5, lr}
 800e9ca:	4d06      	ldr	r5, [pc, #24]	; (800e9e4 <_close_r+0x1c>)
 800e9cc:	2300      	movs	r3, #0
 800e9ce:	4604      	mov	r4, r0
 800e9d0:	4608      	mov	r0, r1
 800e9d2:	602b      	str	r3, [r5, #0]
 800e9d4:	f7f3 fab5 	bl	8001f42 <_close>
 800e9d8:	1c43      	adds	r3, r0, #1
 800e9da:	d102      	bne.n	800e9e2 <_close_r+0x1a>
 800e9dc:	682b      	ldr	r3, [r5, #0]
 800e9de:	b103      	cbz	r3, 800e9e2 <_close_r+0x1a>
 800e9e0:	6023      	str	r3, [r4, #0]
 800e9e2:	bd38      	pop	{r3, r4, r5, pc}
 800e9e4:	20009638 	.word	0x20009638

0800e9e8 <_fstat_r>:
 800e9e8:	b538      	push	{r3, r4, r5, lr}
 800e9ea:	4d07      	ldr	r5, [pc, #28]	; (800ea08 <_fstat_r+0x20>)
 800e9ec:	2300      	movs	r3, #0
 800e9ee:	4604      	mov	r4, r0
 800e9f0:	4608      	mov	r0, r1
 800e9f2:	4611      	mov	r1, r2
 800e9f4:	602b      	str	r3, [r5, #0]
 800e9f6:	f7f3 fab0 	bl	8001f5a <_fstat>
 800e9fa:	1c43      	adds	r3, r0, #1
 800e9fc:	d102      	bne.n	800ea04 <_fstat_r+0x1c>
 800e9fe:	682b      	ldr	r3, [r5, #0]
 800ea00:	b103      	cbz	r3, 800ea04 <_fstat_r+0x1c>
 800ea02:	6023      	str	r3, [r4, #0]
 800ea04:	bd38      	pop	{r3, r4, r5, pc}
 800ea06:	bf00      	nop
 800ea08:	20009638 	.word	0x20009638

0800ea0c <_isatty_r>:
 800ea0c:	b538      	push	{r3, r4, r5, lr}
 800ea0e:	4d06      	ldr	r5, [pc, #24]	; (800ea28 <_isatty_r+0x1c>)
 800ea10:	2300      	movs	r3, #0
 800ea12:	4604      	mov	r4, r0
 800ea14:	4608      	mov	r0, r1
 800ea16:	602b      	str	r3, [r5, #0]
 800ea18:	f7f3 faaf 	bl	8001f7a <_isatty>
 800ea1c:	1c43      	adds	r3, r0, #1
 800ea1e:	d102      	bne.n	800ea26 <_isatty_r+0x1a>
 800ea20:	682b      	ldr	r3, [r5, #0]
 800ea22:	b103      	cbz	r3, 800ea26 <_isatty_r+0x1a>
 800ea24:	6023      	str	r3, [r4, #0]
 800ea26:	bd38      	pop	{r3, r4, r5, pc}
 800ea28:	20009638 	.word	0x20009638

0800ea2c <_lseek_r>:
 800ea2c:	b538      	push	{r3, r4, r5, lr}
 800ea2e:	4d07      	ldr	r5, [pc, #28]	; (800ea4c <_lseek_r+0x20>)
 800ea30:	4604      	mov	r4, r0
 800ea32:	4608      	mov	r0, r1
 800ea34:	4611      	mov	r1, r2
 800ea36:	2200      	movs	r2, #0
 800ea38:	602a      	str	r2, [r5, #0]
 800ea3a:	461a      	mov	r2, r3
 800ea3c:	f7f3 faa8 	bl	8001f90 <_lseek>
 800ea40:	1c43      	adds	r3, r0, #1
 800ea42:	d102      	bne.n	800ea4a <_lseek_r+0x1e>
 800ea44:	682b      	ldr	r3, [r5, #0]
 800ea46:	b103      	cbz	r3, 800ea4a <_lseek_r+0x1e>
 800ea48:	6023      	str	r3, [r4, #0]
 800ea4a:	bd38      	pop	{r3, r4, r5, pc}
 800ea4c:	20009638 	.word	0x20009638

0800ea50 <_read_r>:
 800ea50:	b538      	push	{r3, r4, r5, lr}
 800ea52:	4d07      	ldr	r5, [pc, #28]	; (800ea70 <_read_r+0x20>)
 800ea54:	4604      	mov	r4, r0
 800ea56:	4608      	mov	r0, r1
 800ea58:	4611      	mov	r1, r2
 800ea5a:	2200      	movs	r2, #0
 800ea5c:	602a      	str	r2, [r5, #0]
 800ea5e:	461a      	mov	r2, r3
 800ea60:	f7f3 fa36 	bl	8001ed0 <_read>
 800ea64:	1c43      	adds	r3, r0, #1
 800ea66:	d102      	bne.n	800ea6e <_read_r+0x1e>
 800ea68:	682b      	ldr	r3, [r5, #0]
 800ea6a:	b103      	cbz	r3, 800ea6e <_read_r+0x1e>
 800ea6c:	6023      	str	r3, [r4, #0]
 800ea6e:	bd38      	pop	{r3, r4, r5, pc}
 800ea70:	20009638 	.word	0x20009638

0800ea74 <_init>:
 800ea74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ea76:	bf00      	nop
 800ea78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ea7a:	bc08      	pop	{r3}
 800ea7c:	469e      	mov	lr, r3
 800ea7e:	4770      	bx	lr

0800ea80 <_fini>:
 800ea80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ea82:	bf00      	nop
 800ea84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ea86:	bc08      	pop	{r3}
 800ea88:	469e      	mov	lr, r3
 800ea8a:	4770      	bx	lr
