
test_stm32f746-disco.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bad0  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000288  0800bca0  0800bca0  0001bca0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bf28  0800bf28  00020330  2**0
                  CONTENTS
  4 .ARM          00000008  0800bf28  0800bf28  0001bf28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800bf30  0800bf30  00020330  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bf30  0800bf30  0001bf30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800bf34  0800bf34  0001bf34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000330  20000000  0800bf38  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003a0  20000330  0800c268  00020330  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200006d0  0800c268  000206d0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020330  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001e9ca  00000000  00000000  00020360  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000034eb  00000000  00000000  0003ed2a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001618  00000000  00000000  00042218  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000014b0  00000000  00000000  00043830  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028795  00000000  00000000  00044ce0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00020022  00000000  00000000  0006d475  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f81fa  00000000  00000000  0008d497  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00185691  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006168  00000000  00000000  001856e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000330 	.word	0x20000330
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800bc88 	.word	0x0800bc88

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000334 	.word	0x20000334
 800020c:	0800bc88 	.word	0x0800bc88

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b974 	b.w	80005b0 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	468e      	mov	lr, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d14d      	bne.n	800038a <__udivmoddi4+0xaa>
 80002ee:	428a      	cmp	r2, r1
 80002f0:	4694      	mov	ip, r2
 80002f2:	d969      	bls.n	80003c8 <__udivmoddi4+0xe8>
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	b152      	cbz	r2, 8000310 <__udivmoddi4+0x30>
 80002fa:	fa01 f302 	lsl.w	r3, r1, r2
 80002fe:	f1c2 0120 	rsb	r1, r2, #32
 8000302:	fa20 f101 	lsr.w	r1, r0, r1
 8000306:	fa0c fc02 	lsl.w	ip, ip, r2
 800030a:	ea41 0e03 	orr.w	lr, r1, r3
 800030e:	4094      	lsls	r4, r2
 8000310:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000314:	0c21      	lsrs	r1, r4, #16
 8000316:	fbbe f6f8 	udiv	r6, lr, r8
 800031a:	fa1f f78c 	uxth.w	r7, ip
 800031e:	fb08 e316 	mls	r3, r8, r6, lr
 8000322:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000326:	fb06 f107 	mul.w	r1, r6, r7
 800032a:	4299      	cmp	r1, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x64>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f106 30ff 	add.w	r0, r6, #4294967295
 8000336:	f080 811f 	bcs.w	8000578 <__udivmoddi4+0x298>
 800033a:	4299      	cmp	r1, r3
 800033c:	f240 811c 	bls.w	8000578 <__udivmoddi4+0x298>
 8000340:	3e02      	subs	r6, #2
 8000342:	4463      	add	r3, ip
 8000344:	1a5b      	subs	r3, r3, r1
 8000346:	b2a4      	uxth	r4, r4
 8000348:	fbb3 f0f8 	udiv	r0, r3, r8
 800034c:	fb08 3310 	mls	r3, r8, r0, r3
 8000350:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000354:	fb00 f707 	mul.w	r7, r0, r7
 8000358:	42a7      	cmp	r7, r4
 800035a:	d90a      	bls.n	8000372 <__udivmoddi4+0x92>
 800035c:	eb1c 0404 	adds.w	r4, ip, r4
 8000360:	f100 33ff 	add.w	r3, r0, #4294967295
 8000364:	f080 810a 	bcs.w	800057c <__udivmoddi4+0x29c>
 8000368:	42a7      	cmp	r7, r4
 800036a:	f240 8107 	bls.w	800057c <__udivmoddi4+0x29c>
 800036e:	4464      	add	r4, ip
 8000370:	3802      	subs	r0, #2
 8000372:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000376:	1be4      	subs	r4, r4, r7
 8000378:	2600      	movs	r6, #0
 800037a:	b11d      	cbz	r5, 8000384 <__udivmoddi4+0xa4>
 800037c:	40d4      	lsrs	r4, r2
 800037e:	2300      	movs	r3, #0
 8000380:	e9c5 4300 	strd	r4, r3, [r5]
 8000384:	4631      	mov	r1, r6
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	428b      	cmp	r3, r1
 800038c:	d909      	bls.n	80003a2 <__udivmoddi4+0xc2>
 800038e:	2d00      	cmp	r5, #0
 8000390:	f000 80ef 	beq.w	8000572 <__udivmoddi4+0x292>
 8000394:	2600      	movs	r6, #0
 8000396:	e9c5 0100 	strd	r0, r1, [r5]
 800039a:	4630      	mov	r0, r6
 800039c:	4631      	mov	r1, r6
 800039e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a2:	fab3 f683 	clz	r6, r3
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	d14a      	bne.n	8000440 <__udivmoddi4+0x160>
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d302      	bcc.n	80003b4 <__udivmoddi4+0xd4>
 80003ae:	4282      	cmp	r2, r0
 80003b0:	f200 80f9 	bhi.w	80005a6 <__udivmoddi4+0x2c6>
 80003b4:	1a84      	subs	r4, r0, r2
 80003b6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ba:	2001      	movs	r0, #1
 80003bc:	469e      	mov	lr, r3
 80003be:	2d00      	cmp	r5, #0
 80003c0:	d0e0      	beq.n	8000384 <__udivmoddi4+0xa4>
 80003c2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003c6:	e7dd      	b.n	8000384 <__udivmoddi4+0xa4>
 80003c8:	b902      	cbnz	r2, 80003cc <__udivmoddi4+0xec>
 80003ca:	deff      	udf	#255	; 0xff
 80003cc:	fab2 f282 	clz	r2, r2
 80003d0:	2a00      	cmp	r2, #0
 80003d2:	f040 8092 	bne.w	80004fa <__udivmoddi4+0x21a>
 80003d6:	eba1 010c 	sub.w	r1, r1, ip
 80003da:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003de:	fa1f fe8c 	uxth.w	lr, ip
 80003e2:	2601      	movs	r6, #1
 80003e4:	0c20      	lsrs	r0, r4, #16
 80003e6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ea:	fb07 1113 	mls	r1, r7, r3, r1
 80003ee:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003f2:	fb0e f003 	mul.w	r0, lr, r3
 80003f6:	4288      	cmp	r0, r1
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x12c>
 80003fa:	eb1c 0101 	adds.w	r1, ip, r1
 80003fe:	f103 38ff 	add.w	r8, r3, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x12a>
 8000404:	4288      	cmp	r0, r1
 8000406:	f200 80cb 	bhi.w	80005a0 <__udivmoddi4+0x2c0>
 800040a:	4643      	mov	r3, r8
 800040c:	1a09      	subs	r1, r1, r0
 800040e:	b2a4      	uxth	r4, r4
 8000410:	fbb1 f0f7 	udiv	r0, r1, r7
 8000414:	fb07 1110 	mls	r1, r7, r0, r1
 8000418:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800041c:	fb0e fe00 	mul.w	lr, lr, r0
 8000420:	45a6      	cmp	lr, r4
 8000422:	d908      	bls.n	8000436 <__udivmoddi4+0x156>
 8000424:	eb1c 0404 	adds.w	r4, ip, r4
 8000428:	f100 31ff 	add.w	r1, r0, #4294967295
 800042c:	d202      	bcs.n	8000434 <__udivmoddi4+0x154>
 800042e:	45a6      	cmp	lr, r4
 8000430:	f200 80bb 	bhi.w	80005aa <__udivmoddi4+0x2ca>
 8000434:	4608      	mov	r0, r1
 8000436:	eba4 040e 	sub.w	r4, r4, lr
 800043a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800043e:	e79c      	b.n	800037a <__udivmoddi4+0x9a>
 8000440:	f1c6 0720 	rsb	r7, r6, #32
 8000444:	40b3      	lsls	r3, r6
 8000446:	fa22 fc07 	lsr.w	ip, r2, r7
 800044a:	ea4c 0c03 	orr.w	ip, ip, r3
 800044e:	fa20 f407 	lsr.w	r4, r0, r7
 8000452:	fa01 f306 	lsl.w	r3, r1, r6
 8000456:	431c      	orrs	r4, r3
 8000458:	40f9      	lsrs	r1, r7
 800045a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800045e:	fa00 f306 	lsl.w	r3, r0, r6
 8000462:	fbb1 f8f9 	udiv	r8, r1, r9
 8000466:	0c20      	lsrs	r0, r4, #16
 8000468:	fa1f fe8c 	uxth.w	lr, ip
 800046c:	fb09 1118 	mls	r1, r9, r8, r1
 8000470:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000474:	fb08 f00e 	mul.w	r0, r8, lr
 8000478:	4288      	cmp	r0, r1
 800047a:	fa02 f206 	lsl.w	r2, r2, r6
 800047e:	d90b      	bls.n	8000498 <__udivmoddi4+0x1b8>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f108 3aff 	add.w	sl, r8, #4294967295
 8000488:	f080 8088 	bcs.w	800059c <__udivmoddi4+0x2bc>
 800048c:	4288      	cmp	r0, r1
 800048e:	f240 8085 	bls.w	800059c <__udivmoddi4+0x2bc>
 8000492:	f1a8 0802 	sub.w	r8, r8, #2
 8000496:	4461      	add	r1, ip
 8000498:	1a09      	subs	r1, r1, r0
 800049a:	b2a4      	uxth	r4, r4
 800049c:	fbb1 f0f9 	udiv	r0, r1, r9
 80004a0:	fb09 1110 	mls	r1, r9, r0, r1
 80004a4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004a8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004ac:	458e      	cmp	lr, r1
 80004ae:	d908      	bls.n	80004c2 <__udivmoddi4+0x1e2>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004b8:	d26c      	bcs.n	8000594 <__udivmoddi4+0x2b4>
 80004ba:	458e      	cmp	lr, r1
 80004bc:	d96a      	bls.n	8000594 <__udivmoddi4+0x2b4>
 80004be:	3802      	subs	r0, #2
 80004c0:	4461      	add	r1, ip
 80004c2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004c6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ca:	eba1 010e 	sub.w	r1, r1, lr
 80004ce:	42a1      	cmp	r1, r4
 80004d0:	46c8      	mov	r8, r9
 80004d2:	46a6      	mov	lr, r4
 80004d4:	d356      	bcc.n	8000584 <__udivmoddi4+0x2a4>
 80004d6:	d053      	beq.n	8000580 <__udivmoddi4+0x2a0>
 80004d8:	b15d      	cbz	r5, 80004f2 <__udivmoddi4+0x212>
 80004da:	ebb3 0208 	subs.w	r2, r3, r8
 80004de:	eb61 010e 	sbc.w	r1, r1, lr
 80004e2:	fa01 f707 	lsl.w	r7, r1, r7
 80004e6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ea:	40f1      	lsrs	r1, r6
 80004ec:	431f      	orrs	r7, r3
 80004ee:	e9c5 7100 	strd	r7, r1, [r5]
 80004f2:	2600      	movs	r6, #0
 80004f4:	4631      	mov	r1, r6
 80004f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004fa:	f1c2 0320 	rsb	r3, r2, #32
 80004fe:	40d8      	lsrs	r0, r3
 8000500:	fa0c fc02 	lsl.w	ip, ip, r2
 8000504:	fa21 f303 	lsr.w	r3, r1, r3
 8000508:	4091      	lsls	r1, r2
 800050a:	4301      	orrs	r1, r0
 800050c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000510:	fa1f fe8c 	uxth.w	lr, ip
 8000514:	fbb3 f0f7 	udiv	r0, r3, r7
 8000518:	fb07 3610 	mls	r6, r7, r0, r3
 800051c:	0c0b      	lsrs	r3, r1, #16
 800051e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000522:	fb00 f60e 	mul.w	r6, r0, lr
 8000526:	429e      	cmp	r6, r3
 8000528:	fa04 f402 	lsl.w	r4, r4, r2
 800052c:	d908      	bls.n	8000540 <__udivmoddi4+0x260>
 800052e:	eb1c 0303 	adds.w	r3, ip, r3
 8000532:	f100 38ff 	add.w	r8, r0, #4294967295
 8000536:	d22f      	bcs.n	8000598 <__udivmoddi4+0x2b8>
 8000538:	429e      	cmp	r6, r3
 800053a:	d92d      	bls.n	8000598 <__udivmoddi4+0x2b8>
 800053c:	3802      	subs	r0, #2
 800053e:	4463      	add	r3, ip
 8000540:	1b9b      	subs	r3, r3, r6
 8000542:	b289      	uxth	r1, r1
 8000544:	fbb3 f6f7 	udiv	r6, r3, r7
 8000548:	fb07 3316 	mls	r3, r7, r6, r3
 800054c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000550:	fb06 f30e 	mul.w	r3, r6, lr
 8000554:	428b      	cmp	r3, r1
 8000556:	d908      	bls.n	800056a <__udivmoddi4+0x28a>
 8000558:	eb1c 0101 	adds.w	r1, ip, r1
 800055c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000560:	d216      	bcs.n	8000590 <__udivmoddi4+0x2b0>
 8000562:	428b      	cmp	r3, r1
 8000564:	d914      	bls.n	8000590 <__udivmoddi4+0x2b0>
 8000566:	3e02      	subs	r6, #2
 8000568:	4461      	add	r1, ip
 800056a:	1ac9      	subs	r1, r1, r3
 800056c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000570:	e738      	b.n	80003e4 <__udivmoddi4+0x104>
 8000572:	462e      	mov	r6, r5
 8000574:	4628      	mov	r0, r5
 8000576:	e705      	b.n	8000384 <__udivmoddi4+0xa4>
 8000578:	4606      	mov	r6, r0
 800057a:	e6e3      	b.n	8000344 <__udivmoddi4+0x64>
 800057c:	4618      	mov	r0, r3
 800057e:	e6f8      	b.n	8000372 <__udivmoddi4+0x92>
 8000580:	454b      	cmp	r3, r9
 8000582:	d2a9      	bcs.n	80004d8 <__udivmoddi4+0x1f8>
 8000584:	ebb9 0802 	subs.w	r8, r9, r2
 8000588:	eb64 0e0c 	sbc.w	lr, r4, ip
 800058c:	3801      	subs	r0, #1
 800058e:	e7a3      	b.n	80004d8 <__udivmoddi4+0x1f8>
 8000590:	4646      	mov	r6, r8
 8000592:	e7ea      	b.n	800056a <__udivmoddi4+0x28a>
 8000594:	4620      	mov	r0, r4
 8000596:	e794      	b.n	80004c2 <__udivmoddi4+0x1e2>
 8000598:	4640      	mov	r0, r8
 800059a:	e7d1      	b.n	8000540 <__udivmoddi4+0x260>
 800059c:	46d0      	mov	r8, sl
 800059e:	e77b      	b.n	8000498 <__udivmoddi4+0x1b8>
 80005a0:	3b02      	subs	r3, #2
 80005a2:	4461      	add	r1, ip
 80005a4:	e732      	b.n	800040c <__udivmoddi4+0x12c>
 80005a6:	4630      	mov	r0, r6
 80005a8:	e709      	b.n	80003be <__udivmoddi4+0xde>
 80005aa:	4464      	add	r4, ip
 80005ac:	3802      	subs	r0, #2
 80005ae:	e742      	b.n	8000436 <__udivmoddi4+0x156>

080005b0 <__aeabi_idiv0>:
 80005b0:	4770      	bx	lr
 80005b2:	bf00      	nop

080005b4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b08a      	sub	sp, #40	; 0x28
 80005b8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005ba:	f107 0314 	add.w	r3, r7, #20
 80005be:	2200      	movs	r2, #0
 80005c0:	601a      	str	r2, [r3, #0]
 80005c2:	605a      	str	r2, [r3, #4]
 80005c4:	609a      	str	r2, [r3, #8]
 80005c6:	60da      	str	r2, [r3, #12]
 80005c8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005ca:	4b23      	ldr	r3, [pc, #140]	; (8000658 <MX_GPIO_Init+0xa4>)
 80005cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ce:	4a22      	ldr	r2, [pc, #136]	; (8000658 <MX_GPIO_Init+0xa4>)
 80005d0:	f043 0302 	orr.w	r3, r3, #2
 80005d4:	6313      	str	r3, [r2, #48]	; 0x30
 80005d6:	4b20      	ldr	r3, [pc, #128]	; (8000658 <MX_GPIO_Init+0xa4>)
 80005d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005da:	f003 0302 	and.w	r3, r3, #2
 80005de:	613b      	str	r3, [r7, #16]
 80005e0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 80005e2:	4b1d      	ldr	r3, [pc, #116]	; (8000658 <MX_GPIO_Init+0xa4>)
 80005e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005e6:	4a1c      	ldr	r2, [pc, #112]	; (8000658 <MX_GPIO_Init+0xa4>)
 80005e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80005ec:	6313      	str	r3, [r2, #48]	; 0x30
 80005ee:	4b1a      	ldr	r3, [pc, #104]	; (8000658 <MX_GPIO_Init+0xa4>)
 80005f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80005f6:	60fb      	str	r3, [r7, #12]
 80005f8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005fa:	4b17      	ldr	r3, [pc, #92]	; (8000658 <MX_GPIO_Init+0xa4>)
 80005fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005fe:	4a16      	ldr	r2, [pc, #88]	; (8000658 <MX_GPIO_Init+0xa4>)
 8000600:	f043 0301 	orr.w	r3, r3, #1
 8000604:	6313      	str	r3, [r2, #48]	; 0x30
 8000606:	4b14      	ldr	r3, [pc, #80]	; (8000658 <MX_GPIO_Init+0xa4>)
 8000608:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800060a:	f003 0301 	and.w	r3, r3, #1
 800060e:	60bb      	str	r3, [r7, #8]
 8000610:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000612:	4b11      	ldr	r3, [pc, #68]	; (8000658 <MX_GPIO_Init+0xa4>)
 8000614:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000616:	4a10      	ldr	r2, [pc, #64]	; (8000658 <MX_GPIO_Init+0xa4>)
 8000618:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800061c:	6313      	str	r3, [r2, #48]	; 0x30
 800061e:	4b0e      	ldr	r3, [pc, #56]	; (8000658 <MX_GPIO_Init+0xa4>)
 8000620:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000622:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000626:	607b      	str	r3, [r7, #4]
 8000628:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, GPIO_PIN_1, GPIO_PIN_RESET);
 800062a:	2200      	movs	r2, #0
 800062c:	2102      	movs	r1, #2
 800062e:	480b      	ldr	r0, [pc, #44]	; (800065c <MX_GPIO_Init+0xa8>)
 8000630:	f001 fa0c 	bl	8001a4c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PI1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000634:	2302      	movs	r3, #2
 8000636:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000638:	2301      	movs	r3, #1
 800063a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800063c:	2300      	movs	r3, #0
 800063e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8000640:	2301      	movs	r3, #1
 8000642:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000644:	f107 0314 	add.w	r3, r7, #20
 8000648:	4619      	mov	r1, r3
 800064a:	4804      	ldr	r0, [pc, #16]	; (800065c <MX_GPIO_Init+0xa8>)
 800064c:	f000 fe8e 	bl	800136c <HAL_GPIO_Init>

}
 8000650:	bf00      	nop
 8000652:	3728      	adds	r7, #40	; 0x28
 8000654:	46bd      	mov	sp, r7
 8000656:	bd80      	pop	{r7, pc}
 8000658:	40023800 	.word	0x40023800
 800065c:	40022000 	.word	0x40022000

08000660 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000664:	4b1b      	ldr	r3, [pc, #108]	; (80006d4 <MX_I2C1_Init+0x74>)
 8000666:	4a1c      	ldr	r2, [pc, #112]	; (80006d8 <MX_I2C1_Init+0x78>)
 8000668:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x6000030D;
 800066a:	4b1a      	ldr	r3, [pc, #104]	; (80006d4 <MX_I2C1_Init+0x74>)
 800066c:	4a1b      	ldr	r2, [pc, #108]	; (80006dc <MX_I2C1_Init+0x7c>)
 800066e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000670:	4b18      	ldr	r3, [pc, #96]	; (80006d4 <MX_I2C1_Init+0x74>)
 8000672:	2200      	movs	r2, #0
 8000674:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000676:	4b17      	ldr	r3, [pc, #92]	; (80006d4 <MX_I2C1_Init+0x74>)
 8000678:	2201      	movs	r2, #1
 800067a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800067c:	4b15      	ldr	r3, [pc, #84]	; (80006d4 <MX_I2C1_Init+0x74>)
 800067e:	2200      	movs	r2, #0
 8000680:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000682:	4b14      	ldr	r3, [pc, #80]	; (80006d4 <MX_I2C1_Init+0x74>)
 8000684:	2200      	movs	r2, #0
 8000686:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000688:	4b12      	ldr	r3, [pc, #72]	; (80006d4 <MX_I2C1_Init+0x74>)
 800068a:	2200      	movs	r2, #0
 800068c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800068e:	4b11      	ldr	r3, [pc, #68]	; (80006d4 <MX_I2C1_Init+0x74>)
 8000690:	2200      	movs	r2, #0
 8000692:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000694:	4b0f      	ldr	r3, [pc, #60]	; (80006d4 <MX_I2C1_Init+0x74>)
 8000696:	2200      	movs	r2, #0
 8000698:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800069a:	480e      	ldr	r0, [pc, #56]	; (80006d4 <MX_I2C1_Init+0x74>)
 800069c:	f001 fa02 	bl	8001aa4 <HAL_I2C_Init>
 80006a0:	4603      	mov	r3, r0
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	d001      	beq.n	80006aa <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80006a6:	f000 fa05 	bl	8000ab4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80006aa:	2100      	movs	r1, #0
 80006ac:	4809      	ldr	r0, [pc, #36]	; (80006d4 <MX_I2C1_Init+0x74>)
 80006ae:	f001 ffbb 	bl	8002628 <HAL_I2CEx_ConfigAnalogFilter>
 80006b2:	4603      	mov	r3, r0
 80006b4:	2b00      	cmp	r3, #0
 80006b6:	d001      	beq.n	80006bc <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80006b8:	f000 f9fc 	bl	8000ab4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80006bc:	2100      	movs	r1, #0
 80006be:	4805      	ldr	r0, [pc, #20]	; (80006d4 <MX_I2C1_Init+0x74>)
 80006c0:	f002 f828 	bl	8002714 <HAL_I2CEx_ConfigDigitalFilter>
 80006c4:	4603      	mov	r3, r0
 80006c6:	2b00      	cmp	r3, #0
 80006c8:	d001      	beq.n	80006ce <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80006ca:	f000 f9f3 	bl	8000ab4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80006ce:	bf00      	nop
 80006d0:	bd80      	pop	{r7, pc}
 80006d2:	bf00      	nop
 80006d4:	2000034c 	.word	0x2000034c
 80006d8:	40005400 	.word	0x40005400
 80006dc:	6000030d 	.word	0x6000030d

080006e0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b0aa      	sub	sp, #168	; 0xa8
 80006e4:	af00      	add	r7, sp, #0
 80006e6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006e8:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80006ec:	2200      	movs	r2, #0
 80006ee:	601a      	str	r2, [r3, #0]
 80006f0:	605a      	str	r2, [r3, #4]
 80006f2:	609a      	str	r2, [r3, #8]
 80006f4:	60da      	str	r2, [r3, #12]
 80006f6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80006f8:	f107 0310 	add.w	r3, r7, #16
 80006fc:	2284      	movs	r2, #132	; 0x84
 80006fe:	2100      	movs	r1, #0
 8000700:	4618      	mov	r0, r3
 8000702:	f00a fe51 	bl	800b3a8 <memset>
  if(i2cHandle->Instance==I2C1)
 8000706:	687b      	ldr	r3, [r7, #4]
 8000708:	681b      	ldr	r3, [r3, #0]
 800070a:	4a22      	ldr	r2, [pc, #136]	; (8000794 <HAL_I2C_MspInit+0xb4>)
 800070c:	4293      	cmp	r3, r2
 800070e:	d13c      	bne.n	800078a <HAL_I2C_MspInit+0xaa>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000710:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000714:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000716:	2300      	movs	r3, #0
 8000718:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800071a:	f107 0310 	add.w	r3, r7, #16
 800071e:	4618      	mov	r0, r3
 8000720:	f002 feb8 	bl	8003494 <HAL_RCCEx_PeriphCLKConfig>
 8000724:	4603      	mov	r3, r0
 8000726:	2b00      	cmp	r3, #0
 8000728:	d001      	beq.n	800072e <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 800072a:	f000 f9c3 	bl	8000ab4 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800072e:	4b1a      	ldr	r3, [pc, #104]	; (8000798 <HAL_I2C_MspInit+0xb8>)
 8000730:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000732:	4a19      	ldr	r2, [pc, #100]	; (8000798 <HAL_I2C_MspInit+0xb8>)
 8000734:	f043 0302 	orr.w	r3, r3, #2
 8000738:	6313      	str	r3, [r2, #48]	; 0x30
 800073a:	4b17      	ldr	r3, [pc, #92]	; (8000798 <HAL_I2C_MspInit+0xb8>)
 800073c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800073e:	f003 0302 	and.w	r3, r3, #2
 8000742:	60fb      	str	r3, [r7, #12]
 8000744:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000746:	f44f 7340 	mov.w	r3, #768	; 0x300
 800074a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800074e:	2312      	movs	r3, #18
 8000750:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000754:	2300      	movs	r3, #0
 8000756:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800075a:	2303      	movs	r3, #3
 800075c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000760:	2304      	movs	r3, #4
 8000762:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000766:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800076a:	4619      	mov	r1, r3
 800076c:	480b      	ldr	r0, [pc, #44]	; (800079c <HAL_I2C_MspInit+0xbc>)
 800076e:	f000 fdfd 	bl	800136c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000772:	4b09      	ldr	r3, [pc, #36]	; (8000798 <HAL_I2C_MspInit+0xb8>)
 8000774:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000776:	4a08      	ldr	r2, [pc, #32]	; (8000798 <HAL_I2C_MspInit+0xb8>)
 8000778:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800077c:	6413      	str	r3, [r2, #64]	; 0x40
 800077e:	4b06      	ldr	r3, [pc, #24]	; (8000798 <HAL_I2C_MspInit+0xb8>)
 8000780:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000782:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000786:	60bb      	str	r3, [r7, #8]
 8000788:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800078a:	bf00      	nop
 800078c:	37a8      	adds	r7, #168	; 0xa8
 800078e:	46bd      	mov	sp, r7
 8000790:	bd80      	pop	{r7, pc}
 8000792:	bf00      	nop
 8000794:	40005400 	.word	0x40005400
 8000798:	40023800 	.word	0x40023800
 800079c:	40020400 	.word	0x40020400

080007a0 <selectI2CChannels>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void selectI2CChannels(uint8_t i) {
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b086      	sub	sp, #24
 80007a4:	af02      	add	r7, sp, #8
 80007a6:	4603      	mov	r3, r0
 80007a8:	71fb      	strb	r3, [r7, #7]
	if (i > 7) return;
 80007aa:	79fb      	ldrb	r3, [r7, #7]
 80007ac:	2b07      	cmp	r3, #7
 80007ae:	d80f      	bhi.n	80007d0 <selectI2CChannels+0x30>
	unsigned char temp[1];
	temp[0] = 1 << i;
 80007b0:	79fb      	ldrb	r3, [r7, #7]
 80007b2:	2201      	movs	r2, #1
 80007b4:	fa02 f303 	lsl.w	r3, r2, r3
 80007b8:	b2db      	uxtb	r3, r3
 80007ba:	733b      	strb	r3, [r7, #12]
	//0x70 is address
	HAL_I2C_Master_Transmit(&hi2c1, 0x70<<1, temp, 1, 100);
 80007bc:	f107 020c 	add.w	r2, r7, #12
 80007c0:	2364      	movs	r3, #100	; 0x64
 80007c2:	9300      	str	r3, [sp, #0]
 80007c4:	2301      	movs	r3, #1
 80007c6:	21e0      	movs	r1, #224	; 0xe0
 80007c8:	4803      	ldr	r0, [pc, #12]	; (80007d8 <selectI2CChannels+0x38>)
 80007ca:	f001 fa8d 	bl	8001ce8 <HAL_I2C_Master_Transmit>
 80007ce:	e000      	b.n	80007d2 <selectI2CChannels+0x32>
	if (i > 7) return;
 80007d0:	bf00      	nop
}
 80007d2:	3710      	adds	r7, #16
 80007d4:	46bd      	mov	sp, r7
 80007d6:	bd80      	pop	{r7, pc}
 80007d8:	2000034c 	.word	0x2000034c

080007dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	b084      	sub	sp, #16
 80007e0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007e2:	f000 fb70 	bl	8000ec6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007e6:	f000 f8eb 	bl	80009c0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007ea:	f7ff fee3 	bl	80005b4 <MX_GPIO_Init>
  MX_I2C1_Init();
 80007ee:	f7ff ff37 	bl	8000660 <MX_I2C1_Init>
  MX_TIM7_Init();
 80007f2:	f000 fa2f 	bl	8000c54 <MX_TIM7_Init>
  MX_USART1_UART_Init();
 80007f6:	f000 fa83 	bl	8000d00 <MX_USART1_UART_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 80007fa:	f000 f94f 	bl	8000a9c <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */


  HAL_GPIO_WritePin(GPIOI, GPIO_PIN_1, RESET);
 80007fe:	2200      	movs	r2, #0
 8000800:	2102      	movs	r1, #2
 8000802:	4863      	ldr	r0, [pc, #396]	; (8000990 <main+0x1b4>)
 8000804:	f001 f922 	bl	8001a4c <HAL_GPIO_WritePin>

  /* Timer Interrupt */
  HAL_TIM_Base_Start_IT(&htim7);
 8000808:	4862      	ldr	r0, [pc, #392]	; (8000994 <main+0x1b8>)
 800080a:	f003 ff47 	bl	800469c <HAL_TIM_Base_Start_IT>

  /* UART interrupt initialization */
  MessageLen = sprintf((char*)Message, "msalamon.pl VL53L0X test\n\r");
 800080e:	4962      	ldr	r1, [pc, #392]	; (8000998 <main+0x1bc>)
 8000810:	4862      	ldr	r0, [pc, #392]	; (800099c <main+0x1c0>)
 8000812:	f00a fdd1 	bl	800b3b8 <siprintf>
 8000816:	4603      	mov	r3, r0
 8000818:	b2da      	uxtb	r2, r3
 800081a:	4b61      	ldr	r3, [pc, #388]	; (80009a0 <main+0x1c4>)
 800081c:	701a      	strb	r2, [r3, #0]

  HAL_UART_Transmit(&huart1, Message, MessageLen, 100);
 800081e:	4b60      	ldr	r3, [pc, #384]	; (80009a0 <main+0x1c4>)
 8000820:	781b      	ldrb	r3, [r3, #0]
 8000822:	b29a      	uxth	r2, r3
 8000824:	2364      	movs	r3, #100	; 0x64
 8000826:	495d      	ldr	r1, [pc, #372]	; (800099c <main+0x1c0>)
 8000828:	485e      	ldr	r0, [pc, #376]	; (80009a4 <main+0x1c8>)
 800082a:	f004 fc23 	bl	8005074 <HAL_UART_Transmit>

	  for(uint8_t index =0; index < SENSOR_NUM; index++){
 800082e:	2300      	movs	r3, #0
 8000830:	73fb      	strb	r3, [r7, #15]
 8000832:	e06a      	b.n	800090a <main+0x12e>

		  Dev->I2cHandle = &hi2c1;
 8000834:	4b5c      	ldr	r3, [pc, #368]	; (80009a8 <main+0x1cc>)
 8000836:	681b      	ldr	r3, [r3, #0]
 8000838:	4a5c      	ldr	r2, [pc, #368]	; (80009ac <main+0x1d0>)
 800083a:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
		  Dev->I2cDevAddr = 0x52;
 800083e:	4b5a      	ldr	r3, [pc, #360]	; (80009a8 <main+0x1cc>)
 8000840:	681b      	ldr	r3, [r3, #0]
 8000842:	2252      	movs	r2, #82	; 0x52
 8000844:	f883 2160 	strb.w	r2, [r3, #352]	; 0x160
		  //
		   // VL53L0X init for Single Measurement

		   VL53L0X_WaitDeviceBooted( Dev );
 8000848:	4b57      	ldr	r3, [pc, #348]	; (80009a8 <main+0x1cc>)
 800084a:	681b      	ldr	r3, [r3, #0]
 800084c:	4618      	mov	r0, r3
 800084e:	f006 f86f 	bl	8006930 <VL53L0X_WaitDeviceBooted>
		   VL53L0X_DataInit( Dev );
 8000852:	4b55      	ldr	r3, [pc, #340]	; (80009a8 <main+0x1cc>)
 8000854:	681b      	ldr	r3, [r3, #0]
 8000856:	4618      	mov	r0, r3
 8000858:	f005 fd84 	bl	8006364 <VL53L0X_DataInit>
		   VL53L0X_StaticInit( Dev );
 800085c:	4b52      	ldr	r3, [pc, #328]	; (80009a8 <main+0x1cc>)
 800085e:	681b      	ldr	r3, [r3, #0]
 8000860:	4618      	mov	r0, r3
 8000862:	f005 fee3 	bl	800662c <VL53L0X_StaticInit>
		   VL53L0X_PerformRefCalibration(Dev, &VhvSettings, &PhaseCal);
 8000866:	4b50      	ldr	r3, [pc, #320]	; (80009a8 <main+0x1cc>)
 8000868:	681b      	ldr	r3, [r3, #0]
 800086a:	1d7a      	adds	r2, r7, #5
 800086c:	1db9      	adds	r1, r7, #6
 800086e:	4618      	mov	r0, r3
 8000870:	f006 fd7e 	bl	8007370 <VL53L0X_PerformRefCalibration>
		   VL53L0X_PerformRefSpadManagement(Dev, &refSpadCount, &isApertureSpads);
 8000874:	4b4c      	ldr	r3, [pc, #304]	; (80009a8 <main+0x1cc>)
 8000876:	681b      	ldr	r3, [r3, #0]
 8000878:	1dfa      	adds	r2, r7, #7
 800087a:	f107 0108 	add.w	r1, r7, #8
 800087e:	4618      	mov	r0, r3
 8000880:	f007 fa04 	bl	8007c8c <VL53L0X_PerformRefSpadManagement>
		   VL53L0X_SetDeviceMode(Dev, VL53L0X_DEVICEMODE_SINGLE_RANGING);
 8000884:	4b48      	ldr	r3, [pc, #288]	; (80009a8 <main+0x1cc>)
 8000886:	681b      	ldr	r3, [r3, #0]
 8000888:	2100      	movs	r1, #0
 800088a:	4618      	mov	r0, r3
 800088c:	f006 f8ee 	bl	8006a6c <VL53L0X_SetDeviceMode>

		   // Enable/Disable Sigma and Signal check
		   VL53L0X_SetLimitCheckEnable(Dev, VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, 1);
 8000890:	4b45      	ldr	r3, [pc, #276]	; (80009a8 <main+0x1cc>)
 8000892:	681b      	ldr	r3, [r3, #0]
 8000894:	2201      	movs	r2, #1
 8000896:	2100      	movs	r1, #0
 8000898:	4618      	mov	r0, r3
 800089a:	f006 fb63 	bl	8006f64 <VL53L0X_SetLimitCheckEnable>
		   VL53L0X_SetLimitCheckEnable(Dev, VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE, 1);
 800089e:	4b42      	ldr	r3, [pc, #264]	; (80009a8 <main+0x1cc>)
 80008a0:	681b      	ldr	r3, [r3, #0]
 80008a2:	2201      	movs	r2, #1
 80008a4:	2101      	movs	r1, #1
 80008a6:	4618      	mov	r0, r3
 80008a8:	f006 fb5c 	bl	8006f64 <VL53L0X_SetLimitCheckEnable>
		   VL53L0X_SetLimitCheckValue(Dev, VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE, (FixPoint1616_t)(0.1*65536));
 80008ac:	4b3e      	ldr	r3, [pc, #248]	; (80009a8 <main+0x1cc>)
 80008ae:	681b      	ldr	r3, [r3, #0]
 80008b0:	f641 1299 	movw	r2, #6553	; 0x1999
 80008b4:	2101      	movs	r1, #1
 80008b6:	4618      	mov	r0, r3
 80008b8:	f006 fc04 	bl	80070c4 <VL53L0X_SetLimitCheckValue>
		   VL53L0X_SetLimitCheckValue(Dev, VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, (FixPoint1616_t)(60*65536));
 80008bc:	4b3a      	ldr	r3, [pc, #232]	; (80009a8 <main+0x1cc>)
 80008be:	681b      	ldr	r3, [r3, #0]
 80008c0:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 80008c4:	2100      	movs	r1, #0
 80008c6:	4618      	mov	r0, r3
 80008c8:	f006 fbfc 	bl	80070c4 <VL53L0X_SetLimitCheckValue>
		   VL53L0X_SetMeasurementTimingBudgetMicroSeconds(Dev, 33000);
 80008cc:	4b36      	ldr	r3, [pc, #216]	; (80009a8 <main+0x1cc>)
 80008ce:	681b      	ldr	r3, [r3, #0]
 80008d0:	f248 01e8 	movw	r1, #33000	; 0x80e8
 80008d4:	4618      	mov	r0, r3
 80008d6:	f006 f927 	bl	8006b28 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>
		   VL53L0X_SetVcselPulsePeriod(Dev, VL53L0X_VCSEL_PERIOD_PRE_RANGE, 18);
 80008da:	4b33      	ldr	r3, [pc, #204]	; (80009a8 <main+0x1cc>)
 80008dc:	681b      	ldr	r3, [r3, #0]
 80008de:	2212      	movs	r2, #18
 80008e0:	2100      	movs	r1, #0
 80008e2:	4618      	mov	r0, r3
 80008e4:	f006 f946 	bl	8006b74 <VL53L0X_SetVcselPulsePeriod>
		   VL53L0X_SetVcselPulsePeriod(Dev, VL53L0X_VCSEL_PERIOD_FINAL_RANGE, 14);
 80008e8:	4b2f      	ldr	r3, [pc, #188]	; (80009a8 <main+0x1cc>)
 80008ea:	681b      	ldr	r3, [r3, #0]
 80008ec:	220e      	movs	r2, #14
 80008ee:	2101      	movs	r1, #1
 80008f0:	4618      	mov	r0, r3
 80008f2:	f006 f93f 	bl	8006b74 <VL53L0X_SetVcselPulsePeriod>
		   Devs[index] = Dev;
 80008f6:	4b2c      	ldr	r3, [pc, #176]	; (80009a8 <main+0x1cc>)
 80008f8:	681a      	ldr	r2, [r3, #0]
 80008fa:	7bfb      	ldrb	r3, [r7, #15]
 80008fc:	4611      	mov	r1, r2
 80008fe:	4a2c      	ldr	r2, [pc, #176]	; (80009b0 <main+0x1d4>)
 8000900:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	  for(uint8_t index =0; index < SENSOR_NUM; index++){
 8000904:	7bfb      	ldrb	r3, [r7, #15]
 8000906:	3301      	adds	r3, #1
 8000908:	73fb      	strb	r3, [r7, #15]
 800090a:	7bfb      	ldrb	r3, [r7, #15]
 800090c:	2b03      	cmp	r3, #3
 800090e:	d991      	bls.n	8000834 <main+0x58>

  while (1)
  {


	  if(TIM7_flag == 1)
 8000910:	4b28      	ldr	r3, [pc, #160]	; (80009b4 <main+0x1d8>)
 8000912:	781b      	ldrb	r3, [r3, #0]
 8000914:	b2db      	uxtb	r3, r3
 8000916:	2b01      	cmp	r3, #1
 8000918:	d1fa      	bne.n	8000910 <main+0x134>
	  {
		  TIM7_flag = 0;
 800091a:	4b26      	ldr	r3, [pc, #152]	; (80009b4 <main+0x1d8>)
 800091c:	2200      	movs	r2, #0
 800091e:	701a      	strb	r2, [r3, #0]

		  //HAL_GPIO_TogglePin(GPIOI, GPIO_PIN_1);

		  //printf("Hello World\r\n");
		  for(uint8_t index =0; index < SENSOR_NUM; index++){
 8000920:	2300      	movs	r3, #0
 8000922:	73bb      	strb	r3, [r7, #14]
 8000924:	e02f      	b.n	8000986 <main+0x1aa>
			  selectI2CChannels(Devs[index]);
 8000926:	7bbb      	ldrb	r3, [r7, #14]
 8000928:	4a21      	ldr	r2, [pc, #132]	; (80009b0 <main+0x1d4>)
 800092a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800092e:	b2db      	uxtb	r3, r3
 8000930:	4618      	mov	r0, r3
 8000932:	f7ff ff35 	bl	80007a0 <selectI2CChannels>
			  VL53L0X_PerformSingleRangingMeasurement(Dev, &RangingData);
 8000936:	4b1c      	ldr	r3, [pc, #112]	; (80009a8 <main+0x1cc>)
 8000938:	681b      	ldr	r3, [r3, #0]
 800093a:	491f      	ldr	r1, [pc, #124]	; (80009b8 <main+0x1dc>)
 800093c:	4618      	mov	r0, r3
 800093e:	f006 ffb9 	bl	80078b4 <VL53L0X_PerformSingleRangingMeasurement>

		 	  if(RangingData.RangeStatus == 0)
 8000942:	4b1d      	ldr	r3, [pc, #116]	; (80009b8 <main+0x1dc>)
 8000944:	7e1b      	ldrb	r3, [r3, #24]
 8000946:	2b00      	cmp	r3, #0
 8000948:	d11a      	bne.n	8000980 <main+0x1a4>
		 	  {
		 		 uint16_t a = RangingData.RangeMilliMeter;
 800094a:	4b1b      	ldr	r3, [pc, #108]	; (80009b8 <main+0x1dc>)
 800094c:	891b      	ldrh	r3, [r3, #8]
 800094e:	81bb      	strh	r3, [r7, #12]
		 		  if(a>999){a=0;}
 8000950:	89bb      	ldrh	r3, [r7, #12]
 8000952:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000956:	d301      	bcc.n	800095c <main+0x180>
 8000958:	2300      	movs	r3, #0
 800095a:	81bb      	strh	r3, [r7, #12]
		 		  MessageLen = sprintf((char*)Message, "Distance: %i\n\r", a);
 800095c:	89bb      	ldrh	r3, [r7, #12]
 800095e:	461a      	mov	r2, r3
 8000960:	4916      	ldr	r1, [pc, #88]	; (80009bc <main+0x1e0>)
 8000962:	480e      	ldr	r0, [pc, #56]	; (800099c <main+0x1c0>)
 8000964:	f00a fd28 	bl	800b3b8 <siprintf>
 8000968:	4603      	mov	r3, r0
 800096a:	b2da      	uxtb	r2, r3
 800096c:	4b0c      	ldr	r3, [pc, #48]	; (80009a0 <main+0x1c4>)
 800096e:	701a      	strb	r2, [r3, #0]
		 		  HAL_UART_Transmit(&huart1, Message, MessageLen, 100);
 8000970:	4b0b      	ldr	r3, [pc, #44]	; (80009a0 <main+0x1c4>)
 8000972:	781b      	ldrb	r3, [r3, #0]
 8000974:	b29a      	uxth	r2, r3
 8000976:	2364      	movs	r3, #100	; 0x64
 8000978:	4908      	ldr	r1, [pc, #32]	; (800099c <main+0x1c0>)
 800097a:	480a      	ldr	r0, [pc, #40]	; (80009a4 <main+0x1c8>)
 800097c:	f004 fb7a 	bl	8005074 <HAL_UART_Transmit>
		  for(uint8_t index =0; index < SENSOR_NUM; index++){
 8000980:	7bbb      	ldrb	r3, [r7, #14]
 8000982:	3301      	adds	r3, #1
 8000984:	73bb      	strb	r3, [r7, #14]
 8000986:	7bbb      	ldrb	r3, [r7, #14]
 8000988:	2b03      	cmp	r3, #3
 800098a:	d9cc      	bls.n	8000926 <main+0x14a>
	  if(TIM7_flag == 1)
 800098c:	e7c0      	b.n	8000910 <main+0x134>
 800098e:	bf00      	nop
 8000990:	40022000 	.word	0x40022000
 8000994:	200005a8 	.word	0x200005a8
 8000998:	0800bca0 	.word	0x0800bca0
 800099c:	200003a4 	.word	0x200003a4
 80009a0:	200003e4 	.word	0x200003e4
 80009a4:	200005f4 	.word	0x200005f4
 80009a8:	20000000 	.word	0x20000000
 80009ac:	2000034c 	.word	0x2000034c
 80009b0:	20000594 	.word	0x20000594
 80009b4:	200003a0 	.word	0x200003a0
 80009b8:	200003e8 	.word	0x200003e8
 80009bc:	0800bcbc 	.word	0x0800bcbc

080009c0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	b094      	sub	sp, #80	; 0x50
 80009c4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009c6:	f107 0320 	add.w	r3, r7, #32
 80009ca:	2230      	movs	r2, #48	; 0x30
 80009cc:	2100      	movs	r1, #0
 80009ce:	4618      	mov	r0, r3
 80009d0:	f00a fcea 	bl	800b3a8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009d4:	f107 030c 	add.w	r3, r7, #12
 80009d8:	2200      	movs	r2, #0
 80009da:	601a      	str	r2, [r3, #0]
 80009dc:	605a      	str	r2, [r3, #4]
 80009de:	609a      	str	r2, [r3, #8]
 80009e0:	60da      	str	r2, [r3, #12]
 80009e2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80009e4:	4b2b      	ldr	r3, [pc, #172]	; (8000a94 <SystemClock_Config+0xd4>)
 80009e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009e8:	4a2a      	ldr	r2, [pc, #168]	; (8000a94 <SystemClock_Config+0xd4>)
 80009ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009ee:	6413      	str	r3, [r2, #64]	; 0x40
 80009f0:	4b28      	ldr	r3, [pc, #160]	; (8000a94 <SystemClock_Config+0xd4>)
 80009f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009f8:	60bb      	str	r3, [r7, #8]
 80009fa:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80009fc:	4b26      	ldr	r3, [pc, #152]	; (8000a98 <SystemClock_Config+0xd8>)
 80009fe:	681b      	ldr	r3, [r3, #0]
 8000a00:	4a25      	ldr	r2, [pc, #148]	; (8000a98 <SystemClock_Config+0xd8>)
 8000a02:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000a06:	6013      	str	r3, [r2, #0]
 8000a08:	4b23      	ldr	r3, [pc, #140]	; (8000a98 <SystemClock_Config+0xd8>)
 8000a0a:	681b      	ldr	r3, [r3, #0]
 8000a0c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000a10:	607b      	str	r3, [r7, #4]
 8000a12:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000a14:	2301      	movs	r3, #1
 8000a16:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000a18:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000a1c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a1e:	2302      	movs	r3, #2
 8000a20:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000a22:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000a26:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000a28:	2319      	movs	r3, #25
 8000a2a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 432;
 8000a2c:	f44f 73d8 	mov.w	r3, #432	; 0x1b0
 8000a30:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000a32:	2302      	movs	r3, #2
 8000a34:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000a36:	2302      	movs	r3, #2
 8000a38:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a3a:	f107 0320 	add.w	r3, r7, #32
 8000a3e:	4618      	mov	r0, r3
 8000a40:	f001 ff2c 	bl	800289c <HAL_RCC_OscConfig>
 8000a44:	4603      	mov	r3, r0
 8000a46:	2b00      	cmp	r3, #0
 8000a48:	d001      	beq.n	8000a4e <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8000a4a:	f000 f833 	bl	8000ab4 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000a4e:	f001 fed5 	bl	80027fc <HAL_PWREx_EnableOverDrive>
 8000a52:	4603      	mov	r3, r0
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	d001      	beq.n	8000a5c <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000a58:	f000 f82c 	bl	8000ab4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a5c:	230f      	movs	r3, #15
 8000a5e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a60:	2302      	movs	r3, #2
 8000a62:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a64:	2300      	movs	r3, #0
 8000a66:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000a68:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000a6c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000a6e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a72:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8000a74:	f107 030c 	add.w	r3, r7, #12
 8000a78:	2107      	movs	r1, #7
 8000a7a:	4618      	mov	r0, r3
 8000a7c:	f002 fa68 	bl	8002f50 <HAL_RCC_ClockConfig>
 8000a80:	4603      	mov	r3, r0
 8000a82:	2b00      	cmp	r3, #0
 8000a84:	d001      	beq.n	8000a8a <SystemClock_Config+0xca>
  {
    Error_Handler();
 8000a86:	f000 f815 	bl	8000ab4 <Error_Handler>
  }
}
 8000a8a:	bf00      	nop
 8000a8c:	3750      	adds	r7, #80	; 0x50
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	bd80      	pop	{r7, pc}
 8000a92:	bf00      	nop
 8000a94:	40023800 	.word	0x40023800
 8000a98:	40007000 	.word	0x40007000

08000a9c <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	af00      	add	r7, sp, #0
  /* TIM7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	2100      	movs	r1, #0
 8000aa4:	2037      	movs	r0, #55	; 0x37
 8000aa6:	f000 fb7f 	bl	80011a8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8000aaa:	2037      	movs	r0, #55	; 0x37
 8000aac:	f000 fba8 	bl	8001200 <HAL_NVIC_EnableIRQ>
}
 8000ab0:	bf00      	nop
 8000ab2:	bd80      	pop	{r7, pc}

08000ab4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ab4:	b480      	push	{r7}
 8000ab6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ab8:	b672      	cpsid	i
}
 8000aba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000abc:	e7fe      	b.n	8000abc <Error_Handler+0x8>

08000abe <assert_failed>:
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
 8000abe:	b480      	push	{r7}
 8000ac0:	b083      	sub	sp, #12
 8000ac2:	af00      	add	r7, sp, #0
 8000ac4:	6078      	str	r0, [r7, #4]
 8000ac6:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
 8000ac8:	bf00      	nop
 8000aca:	370c      	adds	r7, #12
 8000acc:	46bd      	mov	sp, r7
 8000ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad2:	4770      	bx	lr

08000ad4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ad4:	b480      	push	{r7}
 8000ad6:	b083      	sub	sp, #12
 8000ad8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000ada:	4b0f      	ldr	r3, [pc, #60]	; (8000b18 <HAL_MspInit+0x44>)
 8000adc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ade:	4a0e      	ldr	r2, [pc, #56]	; (8000b18 <HAL_MspInit+0x44>)
 8000ae0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ae4:	6413      	str	r3, [r2, #64]	; 0x40
 8000ae6:	4b0c      	ldr	r3, [pc, #48]	; (8000b18 <HAL_MspInit+0x44>)
 8000ae8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000aee:	607b      	str	r3, [r7, #4]
 8000af0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000af2:	4b09      	ldr	r3, [pc, #36]	; (8000b18 <HAL_MspInit+0x44>)
 8000af4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000af6:	4a08      	ldr	r2, [pc, #32]	; (8000b18 <HAL_MspInit+0x44>)
 8000af8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000afc:	6453      	str	r3, [r2, #68]	; 0x44
 8000afe:	4b06      	ldr	r3, [pc, #24]	; (8000b18 <HAL_MspInit+0x44>)
 8000b00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b02:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b06:	603b      	str	r3, [r7, #0]
 8000b08:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b0a:	bf00      	nop
 8000b0c:	370c      	adds	r7, #12
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b14:	4770      	bx	lr
 8000b16:	bf00      	nop
 8000b18:	40023800 	.word	0x40023800

08000b1c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b1c:	b480      	push	{r7}
 8000b1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b20:	e7fe      	b.n	8000b20 <NMI_Handler+0x4>

08000b22 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b22:	b480      	push	{r7}
 8000b24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b26:	e7fe      	b.n	8000b26 <HardFault_Handler+0x4>

08000b28 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b28:	b480      	push	{r7}
 8000b2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b2c:	e7fe      	b.n	8000b2c <MemManage_Handler+0x4>

08000b2e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b2e:	b480      	push	{r7}
 8000b30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b32:	e7fe      	b.n	8000b32 <BusFault_Handler+0x4>

08000b34 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b34:	b480      	push	{r7}
 8000b36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b38:	e7fe      	b.n	8000b38 <UsageFault_Handler+0x4>

08000b3a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b3a:	b480      	push	{r7}
 8000b3c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b3e:	bf00      	nop
 8000b40:	46bd      	mov	sp, r7
 8000b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b46:	4770      	bx	lr

08000b48 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b48:	b480      	push	{r7}
 8000b4a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b4c:	bf00      	nop
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b54:	4770      	bx	lr

08000b56 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b56:	b480      	push	{r7}
 8000b58:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b5a:	bf00      	nop
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b62:	4770      	bx	lr

08000b64 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b68:	f000 f9ea 	bl	8000f40 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b6c:	bf00      	nop
 8000b6e:	bd80      	pop	{r7, pc}

08000b70 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000b74:	4802      	ldr	r0, [pc, #8]	; (8000b80 <USART1_IRQHandler+0x10>)
 8000b76:	f004 fb01 	bl	800517c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000b7a:	bf00      	nop
 8000b7c:	bd80      	pop	{r7, pc}
 8000b7e:	bf00      	nop
 8000b80:	200005f4 	.word	0x200005f4

08000b84 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8000b88:	4802      	ldr	r0, [pc, #8]	; (8000b94 <TIM7_IRQHandler+0x10>)
 8000b8a:	f003 fe55 	bl	8004838 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8000b8e:	bf00      	nop
 8000b90:	bd80      	pop	{r7, pc}
 8000b92:	bf00      	nop
 8000b94:	200005a8 	.word	0x200005a8

08000b98 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b086      	sub	sp, #24
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ba0:	4a14      	ldr	r2, [pc, #80]	; (8000bf4 <_sbrk+0x5c>)
 8000ba2:	4b15      	ldr	r3, [pc, #84]	; (8000bf8 <_sbrk+0x60>)
 8000ba4:	1ad3      	subs	r3, r2, r3
 8000ba6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ba8:	697b      	ldr	r3, [r7, #20]
 8000baa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000bac:	4b13      	ldr	r3, [pc, #76]	; (8000bfc <_sbrk+0x64>)
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	d102      	bne.n	8000bba <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000bb4:	4b11      	ldr	r3, [pc, #68]	; (8000bfc <_sbrk+0x64>)
 8000bb6:	4a12      	ldr	r2, [pc, #72]	; (8000c00 <_sbrk+0x68>)
 8000bb8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000bba:	4b10      	ldr	r3, [pc, #64]	; (8000bfc <_sbrk+0x64>)
 8000bbc:	681a      	ldr	r2, [r3, #0]
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	4413      	add	r3, r2
 8000bc2:	693a      	ldr	r2, [r7, #16]
 8000bc4:	429a      	cmp	r2, r3
 8000bc6:	d207      	bcs.n	8000bd8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000bc8:	f00a fbb6 	bl	800b338 <__errno>
 8000bcc:	4603      	mov	r3, r0
 8000bce:	220c      	movs	r2, #12
 8000bd0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000bd2:	f04f 33ff 	mov.w	r3, #4294967295
 8000bd6:	e009      	b.n	8000bec <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000bd8:	4b08      	ldr	r3, [pc, #32]	; (8000bfc <_sbrk+0x64>)
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000bde:	4b07      	ldr	r3, [pc, #28]	; (8000bfc <_sbrk+0x64>)
 8000be0:	681a      	ldr	r2, [r3, #0]
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	4413      	add	r3, r2
 8000be6:	4a05      	ldr	r2, [pc, #20]	; (8000bfc <_sbrk+0x64>)
 8000be8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000bea:	68fb      	ldr	r3, [r7, #12]
}
 8000bec:	4618      	mov	r0, r3
 8000bee:	3718      	adds	r7, #24
 8000bf0:	46bd      	mov	sp, r7
 8000bf2:	bd80      	pop	{r7, pc}
 8000bf4:	20050000 	.word	0x20050000
 8000bf8:	00000400 	.word	0x00000400
 8000bfc:	200005a4 	.word	0x200005a4
 8000c00:	200006d0 	.word	0x200006d0

08000c04 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c04:	b480      	push	{r7}
 8000c06:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c08:	4b06      	ldr	r3, [pc, #24]	; (8000c24 <SystemInit+0x20>)
 8000c0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c0e:	4a05      	ldr	r2, [pc, #20]	; (8000c24 <SystemInit+0x20>)
 8000c10:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c14:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c18:	bf00      	nop
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c20:	4770      	bx	lr
 8000c22:	bf00      	nop
 8000c24:	e000ed00 	.word	0xe000ed00

08000c28 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 0 */

/* Timer Interrupt */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000c28:	b480      	push	{r7}
 8000c2a:	b083      	sub	sp, #12
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM7)
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	4a05      	ldr	r2, [pc, #20]	; (8000c4c <HAL_TIM_PeriodElapsedCallback+0x24>)
 8000c36:	4293      	cmp	r3, r2
 8000c38:	d102      	bne.n	8000c40 <HAL_TIM_PeriodElapsedCallback+0x18>
	{
		TIM7_flag = 1;
 8000c3a:	4b05      	ldr	r3, [pc, #20]	; (8000c50 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8000c3c:	2201      	movs	r2, #1
 8000c3e:	701a      	strb	r2, [r3, #0]
	}
}
 8000c40:	bf00      	nop
 8000c42:	370c      	adds	r7, #12
 8000c44:	46bd      	mov	sp, r7
 8000c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4a:	4770      	bx	lr
 8000c4c:	40001400 	.word	0x40001400
 8000c50:	200003a0 	.word	0x200003a0

08000c54 <MX_TIM7_Init>:

TIM_HandleTypeDef htim7;

/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b084      	sub	sp, #16
 8000c58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c5a:	1d3b      	adds	r3, r7, #4
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	601a      	str	r2, [r3, #0]
 8000c60:	605a      	str	r2, [r3, #4]
 8000c62:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8000c64:	4b14      	ldr	r3, [pc, #80]	; (8000cb8 <MX_TIM7_Init+0x64>)
 8000c66:	4a15      	ldr	r2, [pc, #84]	; (8000cbc <MX_TIM7_Init+0x68>)
 8000c68:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 10800-1;
 8000c6a:	4b13      	ldr	r3, [pc, #76]	; (8000cb8 <MX_TIM7_Init+0x64>)
 8000c6c:	f642 222f 	movw	r2, #10799	; 0x2a2f
 8000c70:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c72:	4b11      	ldr	r3, [pc, #68]	; (8000cb8 <MX_TIM7_Init+0x64>)
 8000c74:	2200      	movs	r2, #0
 8000c76:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 100-1;
 8000c78:	4b0f      	ldr	r3, [pc, #60]	; (8000cb8 <MX_TIM7_Init+0x64>)
 8000c7a:	2263      	movs	r2, #99	; 0x63
 8000c7c:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c7e:	4b0e      	ldr	r3, [pc, #56]	; (8000cb8 <MX_TIM7_Init+0x64>)
 8000c80:	2200      	movs	r2, #0
 8000c82:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8000c84:	480c      	ldr	r0, [pc, #48]	; (8000cb8 <MX_TIM7_Init+0x64>)
 8000c86:	f003 fbe9 	bl	800445c <HAL_TIM_Base_Init>
 8000c8a:	4603      	mov	r3, r0
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	d001      	beq.n	8000c94 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8000c90:	f7ff ff10 	bl	8000ab4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c94:	2300      	movs	r3, #0
 8000c96:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c98:	2300      	movs	r3, #0
 8000c9a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8000c9c:	1d3b      	adds	r3, r7, #4
 8000c9e:	4619      	mov	r1, r3
 8000ca0:	4805      	ldr	r0, [pc, #20]	; (8000cb8 <MX_TIM7_Init+0x64>)
 8000ca2:	f003 ffb1 	bl	8004c08 <HAL_TIMEx_MasterConfigSynchronization>
 8000ca6:	4603      	mov	r3, r0
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	d001      	beq.n	8000cb0 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 8000cac:	f7ff ff02 	bl	8000ab4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8000cb0:	bf00      	nop
 8000cb2:	3710      	adds	r7, #16
 8000cb4:	46bd      	mov	sp, r7
 8000cb6:	bd80      	pop	{r7, pc}
 8000cb8:	200005a8 	.word	0x200005a8
 8000cbc:	40001400 	.word	0x40001400

08000cc0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000cc0:	b480      	push	{r7}
 8000cc2:	b085      	sub	sp, #20
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM7)
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	4a0a      	ldr	r2, [pc, #40]	; (8000cf8 <HAL_TIM_Base_MspInit+0x38>)
 8000cce:	4293      	cmp	r3, r2
 8000cd0:	d10b      	bne.n	8000cea <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* TIM7 clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 8000cd2:	4b0a      	ldr	r3, [pc, #40]	; (8000cfc <HAL_TIM_Base_MspInit+0x3c>)
 8000cd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cd6:	4a09      	ldr	r2, [pc, #36]	; (8000cfc <HAL_TIM_Base_MspInit+0x3c>)
 8000cd8:	f043 0320 	orr.w	r3, r3, #32
 8000cdc:	6413      	str	r3, [r2, #64]	; 0x40
 8000cde:	4b07      	ldr	r3, [pc, #28]	; (8000cfc <HAL_TIM_Base_MspInit+0x3c>)
 8000ce0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ce2:	f003 0320 	and.w	r3, r3, #32
 8000ce6:	60fb      	str	r3, [r7, #12]
 8000ce8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
}
 8000cea:	bf00      	nop
 8000cec:	3714      	adds	r7, #20
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf4:	4770      	bx	lr
 8000cf6:	bf00      	nop
 8000cf8:	40001400 	.word	0x40001400
 8000cfc:	40023800 	.word	0x40023800

08000d00 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000d04:	4b14      	ldr	r3, [pc, #80]	; (8000d58 <MX_USART1_UART_Init+0x58>)
 8000d06:	4a15      	ldr	r2, [pc, #84]	; (8000d5c <MX_USART1_UART_Init+0x5c>)
 8000d08:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000d0a:	4b13      	ldr	r3, [pc, #76]	; (8000d58 <MX_USART1_UART_Init+0x58>)
 8000d0c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000d10:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000d12:	4b11      	ldr	r3, [pc, #68]	; (8000d58 <MX_USART1_UART_Init+0x58>)
 8000d14:	2200      	movs	r2, #0
 8000d16:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000d18:	4b0f      	ldr	r3, [pc, #60]	; (8000d58 <MX_USART1_UART_Init+0x58>)
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000d1e:	4b0e      	ldr	r3, [pc, #56]	; (8000d58 <MX_USART1_UART_Init+0x58>)
 8000d20:	2200      	movs	r2, #0
 8000d22:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000d24:	4b0c      	ldr	r3, [pc, #48]	; (8000d58 <MX_USART1_UART_Init+0x58>)
 8000d26:	220c      	movs	r2, #12
 8000d28:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d2a:	4b0b      	ldr	r3, [pc, #44]	; (8000d58 <MX_USART1_UART_Init+0x58>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d30:	4b09      	ldr	r3, [pc, #36]	; (8000d58 <MX_USART1_UART_Init+0x58>)
 8000d32:	2200      	movs	r2, #0
 8000d34:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000d36:	4b08      	ldr	r3, [pc, #32]	; (8000d58 <MX_USART1_UART_Init+0x58>)
 8000d38:	2200      	movs	r2, #0
 8000d3a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000d3c:	4b06      	ldr	r3, [pc, #24]	; (8000d58 <MX_USART1_UART_Init+0x58>)
 8000d3e:	2200      	movs	r2, #0
 8000d40:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000d42:	4805      	ldr	r0, [pc, #20]	; (8000d58 <MX_USART1_UART_Init+0x58>)
 8000d44:	f004 f8d6 	bl	8004ef4 <HAL_UART_Init>
 8000d48:	4603      	mov	r3, r0
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d001      	beq.n	8000d52 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000d4e:	f7ff feb1 	bl	8000ab4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000d52:	bf00      	nop
 8000d54:	bd80      	pop	{r7, pc}
 8000d56:	bf00      	nop
 8000d58:	200005f4 	.word	0x200005f4
 8000d5c:	40011000 	.word	0x40011000

08000d60 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	b0ac      	sub	sp, #176	; 0xb0
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d68:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	601a      	str	r2, [r3, #0]
 8000d70:	605a      	str	r2, [r3, #4]
 8000d72:	609a      	str	r2, [r3, #8]
 8000d74:	60da      	str	r2, [r3, #12]
 8000d76:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000d78:	f107 0318 	add.w	r3, r7, #24
 8000d7c:	2284      	movs	r2, #132	; 0x84
 8000d7e:	2100      	movs	r1, #0
 8000d80:	4618      	mov	r0, r3
 8000d82:	f00a fb11 	bl	800b3a8 <memset>
  if(uartHandle->Instance==USART1)
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	4a36      	ldr	r2, [pc, #216]	; (8000e64 <HAL_UART_MspInit+0x104>)
 8000d8c:	4293      	cmp	r3, r2
 8000d8e:	d164      	bne.n	8000e5a <HAL_UART_MspInit+0xfa>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000d90:	2340      	movs	r3, #64	; 0x40
 8000d92:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000d94:	2300      	movs	r3, #0
 8000d96:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000d98:	f107 0318 	add.w	r3, r7, #24
 8000d9c:	4618      	mov	r0, r3
 8000d9e:	f002 fb79 	bl	8003494 <HAL_RCCEx_PeriphCLKConfig>
 8000da2:	4603      	mov	r3, r0
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	d001      	beq.n	8000dac <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000da8:	f7ff fe84 	bl	8000ab4 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000dac:	4b2e      	ldr	r3, [pc, #184]	; (8000e68 <HAL_UART_MspInit+0x108>)
 8000dae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000db0:	4a2d      	ldr	r2, [pc, #180]	; (8000e68 <HAL_UART_MspInit+0x108>)
 8000db2:	f043 0310 	orr.w	r3, r3, #16
 8000db6:	6453      	str	r3, [r2, #68]	; 0x44
 8000db8:	4b2b      	ldr	r3, [pc, #172]	; (8000e68 <HAL_UART_MspInit+0x108>)
 8000dba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dbc:	f003 0310 	and.w	r3, r3, #16
 8000dc0:	617b      	str	r3, [r7, #20]
 8000dc2:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dc4:	4b28      	ldr	r3, [pc, #160]	; (8000e68 <HAL_UART_MspInit+0x108>)
 8000dc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dc8:	4a27      	ldr	r2, [pc, #156]	; (8000e68 <HAL_UART_MspInit+0x108>)
 8000dca:	f043 0302 	orr.w	r3, r3, #2
 8000dce:	6313      	str	r3, [r2, #48]	; 0x30
 8000dd0:	4b25      	ldr	r3, [pc, #148]	; (8000e68 <HAL_UART_MspInit+0x108>)
 8000dd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dd4:	f003 0302 	and.w	r3, r3, #2
 8000dd8:	613b      	str	r3, [r7, #16]
 8000dda:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ddc:	4b22      	ldr	r3, [pc, #136]	; (8000e68 <HAL_UART_MspInit+0x108>)
 8000dde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000de0:	4a21      	ldr	r2, [pc, #132]	; (8000e68 <HAL_UART_MspInit+0x108>)
 8000de2:	f043 0301 	orr.w	r3, r3, #1
 8000de6:	6313      	str	r3, [r2, #48]	; 0x30
 8000de8:	4b1f      	ldr	r3, [pc, #124]	; (8000e68 <HAL_UART_MspInit+0x108>)
 8000dea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dec:	f003 0301 	and.w	r3, r3, #1
 8000df0:	60fb      	str	r3, [r7, #12]
 8000df2:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000df4:	2380      	movs	r3, #128	; 0x80
 8000df6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dfa:	2302      	movs	r3, #2
 8000dfc:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e00:	2300      	movs	r3, #0
 8000e02:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e06:	2303      	movs	r3, #3
 8000e08:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000e0c:	2307      	movs	r3, #7
 8000e0e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e12:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000e16:	4619      	mov	r1, r3
 8000e18:	4814      	ldr	r0, [pc, #80]	; (8000e6c <HAL_UART_MspInit+0x10c>)
 8000e1a:	f000 faa7 	bl	800136c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000e1e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000e22:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e26:	2302      	movs	r3, #2
 8000e28:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e32:	2303      	movs	r3, #3
 8000e34:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000e38:	2307      	movs	r3, #7
 8000e3a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e3e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000e42:	4619      	mov	r1, r3
 8000e44:	480a      	ldr	r0, [pc, #40]	; (8000e70 <HAL_UART_MspInit+0x110>)
 8000e46:	f000 fa91 	bl	800136c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	2100      	movs	r1, #0
 8000e4e:	2025      	movs	r0, #37	; 0x25
 8000e50:	f000 f9aa 	bl	80011a8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000e54:	2025      	movs	r0, #37	; 0x25
 8000e56:	f000 f9d3 	bl	8001200 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8000e5a:	bf00      	nop
 8000e5c:	37b0      	adds	r7, #176	; 0xb0
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	bd80      	pop	{r7, pc}
 8000e62:	bf00      	nop
 8000e64:	40011000 	.word	0x40011000
 8000e68:	40023800 	.word	0x40023800
 8000e6c:	40020400 	.word	0x40020400
 8000e70:	40020000 	.word	0x40020000

08000e74 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000e74:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000eac <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000e78:	480d      	ldr	r0, [pc, #52]	; (8000eb0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000e7a:	490e      	ldr	r1, [pc, #56]	; (8000eb4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000e7c:	4a0e      	ldr	r2, [pc, #56]	; (8000eb8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000e7e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e80:	e002      	b.n	8000e88 <LoopCopyDataInit>

08000e82 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e82:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e84:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e86:	3304      	adds	r3, #4

08000e88 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e88:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e8a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e8c:	d3f9      	bcc.n	8000e82 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e8e:	4a0b      	ldr	r2, [pc, #44]	; (8000ebc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000e90:	4c0b      	ldr	r4, [pc, #44]	; (8000ec0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000e92:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e94:	e001      	b.n	8000e9a <LoopFillZerobss>

08000e96 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e96:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e98:	3204      	adds	r2, #4

08000e9a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e9a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e9c:	d3fb      	bcc.n	8000e96 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000e9e:	f7ff feb1 	bl	8000c04 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000ea2:	f00a fa4f 	bl	800b344 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000ea6:	f7ff fc99 	bl	80007dc <main>
  bx  lr    
 8000eaa:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000eac:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8000eb0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000eb4:	20000330 	.word	0x20000330
  ldr r2, =_sidata
 8000eb8:	0800bf38 	.word	0x0800bf38
  ldr r2, =_sbss
 8000ebc:	20000330 	.word	0x20000330
  ldr r4, =_ebss
 8000ec0:	200006d0 	.word	0x200006d0

08000ec4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ec4:	e7fe      	b.n	8000ec4 <ADC_IRQHandler>

08000ec6 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ec6:	b580      	push	{r7, lr}
 8000ec8:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000eca:	2003      	movs	r0, #3
 8000ecc:	f000 f94c 	bl	8001168 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ed0:	200f      	movs	r0, #15
 8000ed2:	f000 f805 	bl	8000ee0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ed6:	f7ff fdfd 	bl	8000ad4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000eda:	2300      	movs	r3, #0
}
 8000edc:	4618      	mov	r0, r3
 8000ede:	bd80      	pop	{r7, pc}

08000ee0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b082      	sub	sp, #8
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ee8:	4b12      	ldr	r3, [pc, #72]	; (8000f34 <HAL_InitTick+0x54>)
 8000eea:	681a      	ldr	r2, [r3, #0]
 8000eec:	4b12      	ldr	r3, [pc, #72]	; (8000f38 <HAL_InitTick+0x58>)
 8000eee:	781b      	ldrb	r3, [r3, #0]
 8000ef0:	4619      	mov	r1, r3
 8000ef2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ef6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000efa:	fbb2 f3f3 	udiv	r3, r2, r3
 8000efe:	4618      	mov	r0, r3
 8000f00:	f000 f996 	bl	8001230 <HAL_SYSTICK_Config>
 8000f04:	4603      	mov	r3, r0
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d001      	beq.n	8000f0e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f0a:	2301      	movs	r3, #1
 8000f0c:	e00e      	b.n	8000f2c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	2b0f      	cmp	r3, #15
 8000f12:	d80a      	bhi.n	8000f2a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f14:	2200      	movs	r2, #0
 8000f16:	6879      	ldr	r1, [r7, #4]
 8000f18:	f04f 30ff 	mov.w	r0, #4294967295
 8000f1c:	f000 f944 	bl	80011a8 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f20:	4a06      	ldr	r2, [pc, #24]	; (8000f3c <HAL_InitTick+0x5c>)
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f26:	2300      	movs	r3, #0
 8000f28:	e000      	b.n	8000f2c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f2a:	2301      	movs	r3, #1
}
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	3708      	adds	r7, #8
 8000f30:	46bd      	mov	sp, r7
 8000f32:	bd80      	pop	{r7, pc}
 8000f34:	20000004 	.word	0x20000004
 8000f38:	2000000c 	.word	0x2000000c
 8000f3c:	20000008 	.word	0x20000008

08000f40 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f40:	b480      	push	{r7}
 8000f42:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f44:	4b06      	ldr	r3, [pc, #24]	; (8000f60 <HAL_IncTick+0x20>)
 8000f46:	781b      	ldrb	r3, [r3, #0]
 8000f48:	461a      	mov	r2, r3
 8000f4a:	4b06      	ldr	r3, [pc, #24]	; (8000f64 <HAL_IncTick+0x24>)
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	4413      	add	r3, r2
 8000f50:	4a04      	ldr	r2, [pc, #16]	; (8000f64 <HAL_IncTick+0x24>)
 8000f52:	6013      	str	r3, [r2, #0]
}
 8000f54:	bf00      	nop
 8000f56:	46bd      	mov	sp, r7
 8000f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5c:	4770      	bx	lr
 8000f5e:	bf00      	nop
 8000f60:	2000000c 	.word	0x2000000c
 8000f64:	2000067c 	.word	0x2000067c

08000f68 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f68:	b480      	push	{r7}
 8000f6a:	af00      	add	r7, sp, #0
  return uwTick;
 8000f6c:	4b03      	ldr	r3, [pc, #12]	; (8000f7c <HAL_GetTick+0x14>)
 8000f6e:	681b      	ldr	r3, [r3, #0]
}
 8000f70:	4618      	mov	r0, r3
 8000f72:	46bd      	mov	sp, r7
 8000f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f78:	4770      	bx	lr
 8000f7a:	bf00      	nop
 8000f7c:	2000067c 	.word	0x2000067c

08000f80 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b084      	sub	sp, #16
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f88:	f7ff ffee 	bl	8000f68 <HAL_GetTick>
 8000f8c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f92:	68fb      	ldr	r3, [r7, #12]
 8000f94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f98:	d005      	beq.n	8000fa6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f9a:	4b0a      	ldr	r3, [pc, #40]	; (8000fc4 <HAL_Delay+0x44>)
 8000f9c:	781b      	ldrb	r3, [r3, #0]
 8000f9e:	461a      	mov	r2, r3
 8000fa0:	68fb      	ldr	r3, [r7, #12]
 8000fa2:	4413      	add	r3, r2
 8000fa4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000fa6:	bf00      	nop
 8000fa8:	f7ff ffde 	bl	8000f68 <HAL_GetTick>
 8000fac:	4602      	mov	r2, r0
 8000fae:	68bb      	ldr	r3, [r7, #8]
 8000fb0:	1ad3      	subs	r3, r2, r3
 8000fb2:	68fa      	ldr	r2, [r7, #12]
 8000fb4:	429a      	cmp	r2, r3
 8000fb6:	d8f7      	bhi.n	8000fa8 <HAL_Delay+0x28>
  {
  }
}
 8000fb8:	bf00      	nop
 8000fba:	bf00      	nop
 8000fbc:	3710      	adds	r7, #16
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	bd80      	pop	{r7, pc}
 8000fc2:	bf00      	nop
 8000fc4:	2000000c 	.word	0x2000000c

08000fc8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fc8:	b480      	push	{r7}
 8000fca:	b085      	sub	sp, #20
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	f003 0307 	and.w	r3, r3, #7
 8000fd6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000fd8:	4b0b      	ldr	r3, [pc, #44]	; (8001008 <__NVIC_SetPriorityGrouping+0x40>)
 8000fda:	68db      	ldr	r3, [r3, #12]
 8000fdc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000fde:	68ba      	ldr	r2, [r7, #8]
 8000fe0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000fe4:	4013      	ands	r3, r2
 8000fe6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000fe8:	68fb      	ldr	r3, [r7, #12]
 8000fea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000fec:	68bb      	ldr	r3, [r7, #8]
 8000fee:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000ff0:	4b06      	ldr	r3, [pc, #24]	; (800100c <__NVIC_SetPriorityGrouping+0x44>)
 8000ff2:	4313      	orrs	r3, r2
 8000ff4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ff6:	4a04      	ldr	r2, [pc, #16]	; (8001008 <__NVIC_SetPriorityGrouping+0x40>)
 8000ff8:	68bb      	ldr	r3, [r7, #8]
 8000ffa:	60d3      	str	r3, [r2, #12]
}
 8000ffc:	bf00      	nop
 8000ffe:	3714      	adds	r7, #20
 8001000:	46bd      	mov	sp, r7
 8001002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001006:	4770      	bx	lr
 8001008:	e000ed00 	.word	0xe000ed00
 800100c:	05fa0000 	.word	0x05fa0000

08001010 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001010:	b480      	push	{r7}
 8001012:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001014:	4b04      	ldr	r3, [pc, #16]	; (8001028 <__NVIC_GetPriorityGrouping+0x18>)
 8001016:	68db      	ldr	r3, [r3, #12]
 8001018:	0a1b      	lsrs	r3, r3, #8
 800101a:	f003 0307 	and.w	r3, r3, #7
}
 800101e:	4618      	mov	r0, r3
 8001020:	46bd      	mov	sp, r7
 8001022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001026:	4770      	bx	lr
 8001028:	e000ed00 	.word	0xe000ed00

0800102c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800102c:	b480      	push	{r7}
 800102e:	b083      	sub	sp, #12
 8001030:	af00      	add	r7, sp, #0
 8001032:	4603      	mov	r3, r0
 8001034:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001036:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800103a:	2b00      	cmp	r3, #0
 800103c:	db0b      	blt.n	8001056 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800103e:	79fb      	ldrb	r3, [r7, #7]
 8001040:	f003 021f 	and.w	r2, r3, #31
 8001044:	4907      	ldr	r1, [pc, #28]	; (8001064 <__NVIC_EnableIRQ+0x38>)
 8001046:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800104a:	095b      	lsrs	r3, r3, #5
 800104c:	2001      	movs	r0, #1
 800104e:	fa00 f202 	lsl.w	r2, r0, r2
 8001052:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001056:	bf00      	nop
 8001058:	370c      	adds	r7, #12
 800105a:	46bd      	mov	sp, r7
 800105c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001060:	4770      	bx	lr
 8001062:	bf00      	nop
 8001064:	e000e100 	.word	0xe000e100

08001068 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001068:	b480      	push	{r7}
 800106a:	b083      	sub	sp, #12
 800106c:	af00      	add	r7, sp, #0
 800106e:	4603      	mov	r3, r0
 8001070:	6039      	str	r1, [r7, #0]
 8001072:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001074:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001078:	2b00      	cmp	r3, #0
 800107a:	db0a      	blt.n	8001092 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800107c:	683b      	ldr	r3, [r7, #0]
 800107e:	b2da      	uxtb	r2, r3
 8001080:	490c      	ldr	r1, [pc, #48]	; (80010b4 <__NVIC_SetPriority+0x4c>)
 8001082:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001086:	0112      	lsls	r2, r2, #4
 8001088:	b2d2      	uxtb	r2, r2
 800108a:	440b      	add	r3, r1
 800108c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001090:	e00a      	b.n	80010a8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001092:	683b      	ldr	r3, [r7, #0]
 8001094:	b2da      	uxtb	r2, r3
 8001096:	4908      	ldr	r1, [pc, #32]	; (80010b8 <__NVIC_SetPriority+0x50>)
 8001098:	79fb      	ldrb	r3, [r7, #7]
 800109a:	f003 030f 	and.w	r3, r3, #15
 800109e:	3b04      	subs	r3, #4
 80010a0:	0112      	lsls	r2, r2, #4
 80010a2:	b2d2      	uxtb	r2, r2
 80010a4:	440b      	add	r3, r1
 80010a6:	761a      	strb	r2, [r3, #24]
}
 80010a8:	bf00      	nop
 80010aa:	370c      	adds	r7, #12
 80010ac:	46bd      	mov	sp, r7
 80010ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b2:	4770      	bx	lr
 80010b4:	e000e100 	.word	0xe000e100
 80010b8:	e000ed00 	.word	0xe000ed00

080010bc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010bc:	b480      	push	{r7}
 80010be:	b089      	sub	sp, #36	; 0x24
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	60f8      	str	r0, [r7, #12]
 80010c4:	60b9      	str	r1, [r7, #8]
 80010c6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80010c8:	68fb      	ldr	r3, [r7, #12]
 80010ca:	f003 0307 	and.w	r3, r3, #7
 80010ce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010d0:	69fb      	ldr	r3, [r7, #28]
 80010d2:	f1c3 0307 	rsb	r3, r3, #7
 80010d6:	2b04      	cmp	r3, #4
 80010d8:	bf28      	it	cs
 80010da:	2304      	movcs	r3, #4
 80010dc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010de:	69fb      	ldr	r3, [r7, #28]
 80010e0:	3304      	adds	r3, #4
 80010e2:	2b06      	cmp	r3, #6
 80010e4:	d902      	bls.n	80010ec <NVIC_EncodePriority+0x30>
 80010e6:	69fb      	ldr	r3, [r7, #28]
 80010e8:	3b03      	subs	r3, #3
 80010ea:	e000      	b.n	80010ee <NVIC_EncodePriority+0x32>
 80010ec:	2300      	movs	r3, #0
 80010ee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010f0:	f04f 32ff 	mov.w	r2, #4294967295
 80010f4:	69bb      	ldr	r3, [r7, #24]
 80010f6:	fa02 f303 	lsl.w	r3, r2, r3
 80010fa:	43da      	mvns	r2, r3
 80010fc:	68bb      	ldr	r3, [r7, #8]
 80010fe:	401a      	ands	r2, r3
 8001100:	697b      	ldr	r3, [r7, #20]
 8001102:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001104:	f04f 31ff 	mov.w	r1, #4294967295
 8001108:	697b      	ldr	r3, [r7, #20]
 800110a:	fa01 f303 	lsl.w	r3, r1, r3
 800110e:	43d9      	mvns	r1, r3
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001114:	4313      	orrs	r3, r2
         );
}
 8001116:	4618      	mov	r0, r3
 8001118:	3724      	adds	r7, #36	; 0x24
 800111a:	46bd      	mov	sp, r7
 800111c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001120:	4770      	bx	lr
	...

08001124 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b082      	sub	sp, #8
 8001128:	af00      	add	r7, sp, #0
 800112a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	3b01      	subs	r3, #1
 8001130:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001134:	d301      	bcc.n	800113a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001136:	2301      	movs	r3, #1
 8001138:	e00f      	b.n	800115a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800113a:	4a0a      	ldr	r2, [pc, #40]	; (8001164 <SysTick_Config+0x40>)
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	3b01      	subs	r3, #1
 8001140:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001142:	210f      	movs	r1, #15
 8001144:	f04f 30ff 	mov.w	r0, #4294967295
 8001148:	f7ff ff8e 	bl	8001068 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800114c:	4b05      	ldr	r3, [pc, #20]	; (8001164 <SysTick_Config+0x40>)
 800114e:	2200      	movs	r2, #0
 8001150:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001152:	4b04      	ldr	r3, [pc, #16]	; (8001164 <SysTick_Config+0x40>)
 8001154:	2207      	movs	r2, #7
 8001156:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001158:	2300      	movs	r3, #0
}
 800115a:	4618      	mov	r0, r3
 800115c:	3708      	adds	r7, #8
 800115e:	46bd      	mov	sp, r7
 8001160:	bd80      	pop	{r7, pc}
 8001162:	bf00      	nop
 8001164:	e000e010 	.word	0xe000e010

08001168 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	b082      	sub	sp, #8
 800116c:	af00      	add	r7, sp, #0
 800116e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	2b07      	cmp	r3, #7
 8001174:	d00f      	beq.n	8001196 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	2b06      	cmp	r3, #6
 800117a:	d00c      	beq.n	8001196 <HAL_NVIC_SetPriorityGrouping+0x2e>
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	2b05      	cmp	r3, #5
 8001180:	d009      	beq.n	8001196 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	2b04      	cmp	r3, #4
 8001186:	d006      	beq.n	8001196 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	2b03      	cmp	r3, #3
 800118c:	d003      	beq.n	8001196 <HAL_NVIC_SetPriorityGrouping+0x2e>
 800118e:	2191      	movs	r1, #145	; 0x91
 8001190:	4804      	ldr	r0, [pc, #16]	; (80011a4 <HAL_NVIC_SetPriorityGrouping+0x3c>)
 8001192:	f7ff fc94 	bl	8000abe <assert_failed>
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001196:	6878      	ldr	r0, [r7, #4]
 8001198:	f7ff ff16 	bl	8000fc8 <__NVIC_SetPriorityGrouping>
}
 800119c:	bf00      	nop
 800119e:	3708      	adds	r7, #8
 80011a0:	46bd      	mov	sp, r7
 80011a2:	bd80      	pop	{r7, pc}
 80011a4:	0800bccc 	.word	0x0800bccc

080011a8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b086      	sub	sp, #24
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	4603      	mov	r3, r0
 80011b0:	60b9      	str	r1, [r7, #8]
 80011b2:	607a      	str	r2, [r7, #4]
 80011b4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80011b6:	2300      	movs	r3, #0
 80011b8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	2b0f      	cmp	r3, #15
 80011be:	d903      	bls.n	80011c8 <HAL_NVIC_SetPriority+0x20>
 80011c0:	21a9      	movs	r1, #169	; 0xa9
 80011c2:	480e      	ldr	r0, [pc, #56]	; (80011fc <HAL_NVIC_SetPriority+0x54>)
 80011c4:	f7ff fc7b 	bl	8000abe <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 80011c8:	68bb      	ldr	r3, [r7, #8]
 80011ca:	2b0f      	cmp	r3, #15
 80011cc:	d903      	bls.n	80011d6 <HAL_NVIC_SetPriority+0x2e>
 80011ce:	21aa      	movs	r1, #170	; 0xaa
 80011d0:	480a      	ldr	r0, [pc, #40]	; (80011fc <HAL_NVIC_SetPriority+0x54>)
 80011d2:	f7ff fc74 	bl	8000abe <assert_failed>
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80011d6:	f7ff ff1b 	bl	8001010 <__NVIC_GetPriorityGrouping>
 80011da:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80011dc:	687a      	ldr	r2, [r7, #4]
 80011de:	68b9      	ldr	r1, [r7, #8]
 80011e0:	6978      	ldr	r0, [r7, #20]
 80011e2:	f7ff ff6b 	bl	80010bc <NVIC_EncodePriority>
 80011e6:	4602      	mov	r2, r0
 80011e8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011ec:	4611      	mov	r1, r2
 80011ee:	4618      	mov	r0, r3
 80011f0:	f7ff ff3a 	bl	8001068 <__NVIC_SetPriority>
}
 80011f4:	bf00      	nop
 80011f6:	3718      	adds	r7, #24
 80011f8:	46bd      	mov	sp, r7
 80011fa:	bd80      	pop	{r7, pc}
 80011fc:	0800bccc 	.word	0x0800bccc

08001200 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	b082      	sub	sp, #8
 8001204:	af00      	add	r7, sp, #0
 8001206:	4603      	mov	r3, r0
 8001208:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 800120a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800120e:	2b00      	cmp	r3, #0
 8001210:	da03      	bge.n	800121a <HAL_NVIC_EnableIRQ+0x1a>
 8001212:	21bd      	movs	r1, #189	; 0xbd
 8001214:	4805      	ldr	r0, [pc, #20]	; (800122c <HAL_NVIC_EnableIRQ+0x2c>)
 8001216:	f7ff fc52 	bl	8000abe <assert_failed>
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800121a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800121e:	4618      	mov	r0, r3
 8001220:	f7ff ff04 	bl	800102c <__NVIC_EnableIRQ>
}
 8001224:	bf00      	nop
 8001226:	3708      	adds	r7, #8
 8001228:	46bd      	mov	sp, r7
 800122a:	bd80      	pop	{r7, pc}
 800122c:	0800bccc 	.word	0x0800bccc

08001230 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	b082      	sub	sp, #8
 8001234:	af00      	add	r7, sp, #0
 8001236:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001238:	6878      	ldr	r0, [r7, #4]
 800123a:	f7ff ff73 	bl	8001124 <SysTick_Config>
 800123e:	4603      	mov	r3, r0
}
 8001240:	4618      	mov	r0, r3
 8001242:	3708      	adds	r7, #8
 8001244:	46bd      	mov	sp, r7
 8001246:	bd80      	pop	{r7, pc}

08001248 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	b084      	sub	sp, #16
 800124c:	af00      	add	r7, sp, #0
 800124e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001254:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001256:	f7ff fe87 	bl	8000f68 <HAL_GetTick>
 800125a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001262:	b2db      	uxtb	r3, r3
 8001264:	2b02      	cmp	r3, #2
 8001266:	d008      	beq.n	800127a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	2280      	movs	r2, #128	; 0x80
 800126c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	2200      	movs	r2, #0
 8001272:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001276:	2301      	movs	r3, #1
 8001278:	e052      	b.n	8001320 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	681a      	ldr	r2, [r3, #0]
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	f022 0216 	bic.w	r2, r2, #22
 8001288:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	695a      	ldr	r2, [r3, #20]
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001298:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d103      	bne.n	80012aa <HAL_DMA_Abort+0x62>
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d007      	beq.n	80012ba <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	681a      	ldr	r2, [r3, #0]
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	f022 0208 	bic.w	r2, r2, #8
 80012b8:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	681a      	ldr	r2, [r3, #0]
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	f022 0201 	bic.w	r2, r2, #1
 80012c8:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80012ca:	e013      	b.n	80012f4 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80012cc:	f7ff fe4c 	bl	8000f68 <HAL_GetTick>
 80012d0:	4602      	mov	r2, r0
 80012d2:	68bb      	ldr	r3, [r7, #8]
 80012d4:	1ad3      	subs	r3, r2, r3
 80012d6:	2b05      	cmp	r3, #5
 80012d8:	d90c      	bls.n	80012f4 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	2220      	movs	r2, #32
 80012de:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	2203      	movs	r2, #3
 80012e4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	2200      	movs	r2, #0
 80012ec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 80012f0:	2303      	movs	r3, #3
 80012f2:	e015      	b.n	8001320 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	f003 0301 	and.w	r3, r3, #1
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d1e4      	bne.n	80012cc <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001306:	223f      	movs	r2, #63	; 0x3f
 8001308:	409a      	lsls	r2, r3
 800130a:	68fb      	ldr	r3, [r7, #12]
 800130c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	2201      	movs	r2, #1
 8001312:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	2200      	movs	r2, #0
 800131a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 800131e:	2300      	movs	r3, #0
}
 8001320:	4618      	mov	r0, r3
 8001322:	3710      	adds	r7, #16
 8001324:	46bd      	mov	sp, r7
 8001326:	bd80      	pop	{r7, pc}

08001328 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001328:	b480      	push	{r7}
 800132a:	b083      	sub	sp, #12
 800132c:	af00      	add	r7, sp, #0
 800132e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001336:	b2db      	uxtb	r3, r3
 8001338:	2b02      	cmp	r3, #2
 800133a:	d004      	beq.n	8001346 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	2280      	movs	r2, #128	; 0x80
 8001340:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001342:	2301      	movs	r3, #1
 8001344:	e00c      	b.n	8001360 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	2205      	movs	r2, #5
 800134a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	681a      	ldr	r2, [r3, #0]
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	f022 0201 	bic.w	r2, r2, #1
 800135c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800135e:	2300      	movs	r3, #0
}
 8001360:	4618      	mov	r0, r3
 8001362:	370c      	adds	r7, #12
 8001364:	46bd      	mov	sp, r7
 8001366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136a:	4770      	bx	lr

0800136c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	b088      	sub	sp, #32
 8001370:	af00      	add	r7, sp, #0
 8001372:	6078      	str	r0, [r7, #4]
 8001374:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001376:	2300      	movs	r3, #0
 8001378:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800137a:	2300      	movs	r3, #0
 800137c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800137e:	2300      	movs	r3, #0
 8001380:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001382:	2300      	movs	r3, #0
 8001384:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	4a3a      	ldr	r2, [pc, #232]	; (8001474 <HAL_GPIO_Init+0x108>)
 800138a:	4293      	cmp	r3, r2
 800138c:	d02b      	beq.n	80013e6 <HAL_GPIO_Init+0x7a>
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	4a39      	ldr	r2, [pc, #228]	; (8001478 <HAL_GPIO_Init+0x10c>)
 8001392:	4293      	cmp	r3, r2
 8001394:	d027      	beq.n	80013e6 <HAL_GPIO_Init+0x7a>
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	4a38      	ldr	r2, [pc, #224]	; (800147c <HAL_GPIO_Init+0x110>)
 800139a:	4293      	cmp	r3, r2
 800139c:	d023      	beq.n	80013e6 <HAL_GPIO_Init+0x7a>
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	4a37      	ldr	r2, [pc, #220]	; (8001480 <HAL_GPIO_Init+0x114>)
 80013a2:	4293      	cmp	r3, r2
 80013a4:	d01f      	beq.n	80013e6 <HAL_GPIO_Init+0x7a>
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	4a36      	ldr	r2, [pc, #216]	; (8001484 <HAL_GPIO_Init+0x118>)
 80013aa:	4293      	cmp	r3, r2
 80013ac:	d01b      	beq.n	80013e6 <HAL_GPIO_Init+0x7a>
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	4a35      	ldr	r2, [pc, #212]	; (8001488 <HAL_GPIO_Init+0x11c>)
 80013b2:	4293      	cmp	r3, r2
 80013b4:	d017      	beq.n	80013e6 <HAL_GPIO_Init+0x7a>
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	4a34      	ldr	r2, [pc, #208]	; (800148c <HAL_GPIO_Init+0x120>)
 80013ba:	4293      	cmp	r3, r2
 80013bc:	d013      	beq.n	80013e6 <HAL_GPIO_Init+0x7a>
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	4a33      	ldr	r2, [pc, #204]	; (8001490 <HAL_GPIO_Init+0x124>)
 80013c2:	4293      	cmp	r3, r2
 80013c4:	d00f      	beq.n	80013e6 <HAL_GPIO_Init+0x7a>
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	4a32      	ldr	r2, [pc, #200]	; (8001494 <HAL_GPIO_Init+0x128>)
 80013ca:	4293      	cmp	r3, r2
 80013cc:	d00b      	beq.n	80013e6 <HAL_GPIO_Init+0x7a>
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	4a31      	ldr	r2, [pc, #196]	; (8001498 <HAL_GPIO_Init+0x12c>)
 80013d2:	4293      	cmp	r3, r2
 80013d4:	d007      	beq.n	80013e6 <HAL_GPIO_Init+0x7a>
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	4a30      	ldr	r2, [pc, #192]	; (800149c <HAL_GPIO_Init+0x130>)
 80013da:	4293      	cmp	r3, r2
 80013dc:	d003      	beq.n	80013e6 <HAL_GPIO_Init+0x7a>
 80013de:	21aa      	movs	r1, #170	; 0xaa
 80013e0:	482f      	ldr	r0, [pc, #188]	; (80014a0 <HAL_GPIO_Init+0x134>)
 80013e2:	f7ff fb6c 	bl	8000abe <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 80013e6:	683b      	ldr	r3, [r7, #0]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	b29b      	uxth	r3, r3
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d103      	bne.n	80013f8 <HAL_GPIO_Init+0x8c>
 80013f0:	21ab      	movs	r1, #171	; 0xab
 80013f2:	482b      	ldr	r0, [pc, #172]	; (80014a0 <HAL_GPIO_Init+0x134>)
 80013f4:	f7ff fb63 	bl	8000abe <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 80013f8:	683b      	ldr	r3, [r7, #0]
 80013fa:	685b      	ldr	r3, [r3, #4]
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d035      	beq.n	800146c <HAL_GPIO_Init+0x100>
 8001400:	683b      	ldr	r3, [r7, #0]
 8001402:	685b      	ldr	r3, [r3, #4]
 8001404:	2b01      	cmp	r3, #1
 8001406:	d031      	beq.n	800146c <HAL_GPIO_Init+0x100>
 8001408:	683b      	ldr	r3, [r7, #0]
 800140a:	685b      	ldr	r3, [r3, #4]
 800140c:	2b11      	cmp	r3, #17
 800140e:	d02d      	beq.n	800146c <HAL_GPIO_Init+0x100>
 8001410:	683b      	ldr	r3, [r7, #0]
 8001412:	685b      	ldr	r3, [r3, #4]
 8001414:	2b02      	cmp	r3, #2
 8001416:	d029      	beq.n	800146c <HAL_GPIO_Init+0x100>
 8001418:	683b      	ldr	r3, [r7, #0]
 800141a:	685b      	ldr	r3, [r3, #4]
 800141c:	2b12      	cmp	r3, #18
 800141e:	d025      	beq.n	800146c <HAL_GPIO_Init+0x100>
 8001420:	683b      	ldr	r3, [r7, #0]
 8001422:	685b      	ldr	r3, [r3, #4]
 8001424:	f5b3 1f88 	cmp.w	r3, #1114112	; 0x110000
 8001428:	d020      	beq.n	800146c <HAL_GPIO_Init+0x100>
 800142a:	683b      	ldr	r3, [r7, #0]
 800142c:	685b      	ldr	r3, [r3, #4]
 800142e:	f5b3 1f04 	cmp.w	r3, #2162688	; 0x210000
 8001432:	d01b      	beq.n	800146c <HAL_GPIO_Init+0x100>
 8001434:	683b      	ldr	r3, [r7, #0]
 8001436:	685b      	ldr	r3, [r3, #4]
 8001438:	f5b3 1f44 	cmp.w	r3, #3211264	; 0x310000
 800143c:	d016      	beq.n	800146c <HAL_GPIO_Init+0x100>
 800143e:	683b      	ldr	r3, [r7, #0]
 8001440:	685b      	ldr	r3, [r3, #4]
 8001442:	f5b3 1f90 	cmp.w	r3, #1179648	; 0x120000
 8001446:	d011      	beq.n	800146c <HAL_GPIO_Init+0x100>
 8001448:	683b      	ldr	r3, [r7, #0]
 800144a:	685b      	ldr	r3, [r3, #4]
 800144c:	f5b3 1f08 	cmp.w	r3, #2228224	; 0x220000
 8001450:	d00c      	beq.n	800146c <HAL_GPIO_Init+0x100>
 8001452:	683b      	ldr	r3, [r7, #0]
 8001454:	685b      	ldr	r3, [r3, #4]
 8001456:	f5b3 1f48 	cmp.w	r3, #3276800	; 0x320000
 800145a:	d007      	beq.n	800146c <HAL_GPIO_Init+0x100>
 800145c:	683b      	ldr	r3, [r7, #0]
 800145e:	685b      	ldr	r3, [r3, #4]
 8001460:	2b03      	cmp	r3, #3
 8001462:	d003      	beq.n	800146c <HAL_GPIO_Init+0x100>
 8001464:	21ac      	movs	r1, #172	; 0xac
 8001466:	480e      	ldr	r0, [pc, #56]	; (80014a0 <HAL_GPIO_Init+0x134>)
 8001468:	f7ff fb29 	bl	8000abe <assert_failed>

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800146c:	2300      	movs	r3, #0
 800146e:	61fb      	str	r3, [r7, #28]
 8001470:	e2c7      	b.n	8001a02 <HAL_GPIO_Init+0x696>
 8001472:	bf00      	nop
 8001474:	40020000 	.word	0x40020000
 8001478:	40020400 	.word	0x40020400
 800147c:	40020800 	.word	0x40020800
 8001480:	40020c00 	.word	0x40020c00
 8001484:	40021000 	.word	0x40021000
 8001488:	40021400 	.word	0x40021400
 800148c:	40021800 	.word	0x40021800
 8001490:	40021c00 	.word	0x40021c00
 8001494:	40022000 	.word	0x40022000
 8001498:	40022400 	.word	0x40022400
 800149c:	40022800 	.word	0x40022800
 80014a0:	0800bd08 	.word	0x0800bd08
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80014a4:	2201      	movs	r2, #1
 80014a6:	69fb      	ldr	r3, [r7, #28]
 80014a8:	fa02 f303 	lsl.w	r3, r2, r3
 80014ac:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80014ae:	683b      	ldr	r3, [r7, #0]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	697a      	ldr	r2, [r7, #20]
 80014b4:	4013      	ands	r3, r2
 80014b6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80014b8:	693a      	ldr	r2, [r7, #16]
 80014ba:	697b      	ldr	r3, [r7, #20]
 80014bc:	429a      	cmp	r2, r3
 80014be:	f040 829d 	bne.w	80019fc <HAL_GPIO_Init+0x690>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80014c2:	683b      	ldr	r3, [r7, #0]
 80014c4:	685b      	ldr	r3, [r3, #4]
 80014c6:	f003 0303 	and.w	r3, r3, #3
 80014ca:	2b01      	cmp	r3, #1
 80014cc:	d005      	beq.n	80014da <HAL_GPIO_Init+0x16e>
 80014ce:	683b      	ldr	r3, [r7, #0]
 80014d0:	685b      	ldr	r3, [r3, #4]
 80014d2:	f003 0303 	and.w	r3, r3, #3
 80014d6:	2b02      	cmp	r3, #2
 80014d8:	d144      	bne.n	8001564 <HAL_GPIO_Init+0x1f8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 80014da:	683b      	ldr	r3, [r7, #0]
 80014dc:	68db      	ldr	r3, [r3, #12]
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d00f      	beq.n	8001502 <HAL_GPIO_Init+0x196>
 80014e2:	683b      	ldr	r3, [r7, #0]
 80014e4:	68db      	ldr	r3, [r3, #12]
 80014e6:	2b01      	cmp	r3, #1
 80014e8:	d00b      	beq.n	8001502 <HAL_GPIO_Init+0x196>
 80014ea:	683b      	ldr	r3, [r7, #0]
 80014ec:	68db      	ldr	r3, [r3, #12]
 80014ee:	2b02      	cmp	r3, #2
 80014f0:	d007      	beq.n	8001502 <HAL_GPIO_Init+0x196>
 80014f2:	683b      	ldr	r3, [r7, #0]
 80014f4:	68db      	ldr	r3, [r3, #12]
 80014f6:	2b03      	cmp	r3, #3
 80014f8:	d003      	beq.n	8001502 <HAL_GPIO_Init+0x196>
 80014fa:	21bd      	movs	r1, #189	; 0xbd
 80014fc:	4831      	ldr	r0, [pc, #196]	; (80015c4 <HAL_GPIO_Init+0x258>)
 80014fe:	f7ff fade 	bl	8000abe <assert_failed>
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	689b      	ldr	r3, [r3, #8]
 8001506:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001508:	69fb      	ldr	r3, [r7, #28]
 800150a:	005b      	lsls	r3, r3, #1
 800150c:	2203      	movs	r2, #3
 800150e:	fa02 f303 	lsl.w	r3, r2, r3
 8001512:	43db      	mvns	r3, r3
 8001514:	69ba      	ldr	r2, [r7, #24]
 8001516:	4013      	ands	r3, r2
 8001518:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800151a:	683b      	ldr	r3, [r7, #0]
 800151c:	68da      	ldr	r2, [r3, #12]
 800151e:	69fb      	ldr	r3, [r7, #28]
 8001520:	005b      	lsls	r3, r3, #1
 8001522:	fa02 f303 	lsl.w	r3, r2, r3
 8001526:	69ba      	ldr	r2, [r7, #24]
 8001528:	4313      	orrs	r3, r2
 800152a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	69ba      	ldr	r2, [r7, #24]
 8001530:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	685b      	ldr	r3, [r3, #4]
 8001536:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001538:	2201      	movs	r2, #1
 800153a:	69fb      	ldr	r3, [r7, #28]
 800153c:	fa02 f303 	lsl.w	r3, r2, r3
 8001540:	43db      	mvns	r3, r3
 8001542:	69ba      	ldr	r2, [r7, #24]
 8001544:	4013      	ands	r3, r2
 8001546:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001548:	683b      	ldr	r3, [r7, #0]
 800154a:	685b      	ldr	r3, [r3, #4]
 800154c:	091b      	lsrs	r3, r3, #4
 800154e:	f003 0201 	and.w	r2, r3, #1
 8001552:	69fb      	ldr	r3, [r7, #28]
 8001554:	fa02 f303 	lsl.w	r3, r2, r3
 8001558:	69ba      	ldr	r2, [r7, #24]
 800155a:	4313      	orrs	r3, r2
 800155c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	69ba      	ldr	r2, [r7, #24]
 8001562:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001564:	683b      	ldr	r3, [r7, #0]
 8001566:	685b      	ldr	r3, [r3, #4]
 8001568:	f003 0303 	and.w	r3, r3, #3
 800156c:	2b03      	cmp	r3, #3
 800156e:	d02b      	beq.n	80015c8 <HAL_GPIO_Init+0x25c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 8001570:	683b      	ldr	r3, [r7, #0]
 8001572:	689b      	ldr	r3, [r3, #8]
 8001574:	2b00      	cmp	r3, #0
 8001576:	d00b      	beq.n	8001590 <HAL_GPIO_Init+0x224>
 8001578:	683b      	ldr	r3, [r7, #0]
 800157a:	689b      	ldr	r3, [r3, #8]
 800157c:	2b01      	cmp	r3, #1
 800157e:	d007      	beq.n	8001590 <HAL_GPIO_Init+0x224>
 8001580:	683b      	ldr	r3, [r7, #0]
 8001582:	689b      	ldr	r3, [r3, #8]
 8001584:	2b02      	cmp	r3, #2
 8001586:	d003      	beq.n	8001590 <HAL_GPIO_Init+0x224>
 8001588:	21ce      	movs	r1, #206	; 0xce
 800158a:	480e      	ldr	r0, [pc, #56]	; (80015c4 <HAL_GPIO_Init+0x258>)
 800158c:	f7ff fa97 	bl	8000abe <assert_failed>

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	68db      	ldr	r3, [r3, #12]
 8001594:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001596:	69fb      	ldr	r3, [r7, #28]
 8001598:	005b      	lsls	r3, r3, #1
 800159a:	2203      	movs	r2, #3
 800159c:	fa02 f303 	lsl.w	r3, r2, r3
 80015a0:	43db      	mvns	r3, r3
 80015a2:	69ba      	ldr	r2, [r7, #24]
 80015a4:	4013      	ands	r3, r2
 80015a6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80015a8:	683b      	ldr	r3, [r7, #0]
 80015aa:	689a      	ldr	r2, [r3, #8]
 80015ac:	69fb      	ldr	r3, [r7, #28]
 80015ae:	005b      	lsls	r3, r3, #1
 80015b0:	fa02 f303 	lsl.w	r3, r2, r3
 80015b4:	69ba      	ldr	r2, [r7, #24]
 80015b6:	4313      	orrs	r3, r2
 80015b8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	69ba      	ldr	r2, [r7, #24]
 80015be:	60da      	str	r2, [r3, #12]
 80015c0:	e002      	b.n	80015c8 <HAL_GPIO_Init+0x25c>
 80015c2:	bf00      	nop
 80015c4:	0800bd08 	.word	0x0800bd08
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80015c8:	683b      	ldr	r3, [r7, #0]
 80015ca:	685b      	ldr	r3, [r3, #4]
 80015cc:	f003 0303 	and.w	r3, r3, #3
 80015d0:	2b02      	cmp	r3, #2
 80015d2:	f040 8134 	bne.w	800183e <HAL_GPIO_Init+0x4d2>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 80015d6:	683b      	ldr	r3, [r7, #0]
 80015d8:	691b      	ldr	r3, [r3, #16]
 80015da:	2b00      	cmp	r3, #0
 80015dc:	f000 810b 	beq.w	80017f6 <HAL_GPIO_Init+0x48a>
 80015e0:	683b      	ldr	r3, [r7, #0]
 80015e2:	691b      	ldr	r3, [r3, #16]
 80015e4:	2b01      	cmp	r3, #1
 80015e6:	f000 8106 	beq.w	80017f6 <HAL_GPIO_Init+0x48a>
 80015ea:	683b      	ldr	r3, [r7, #0]
 80015ec:	691b      	ldr	r3, [r3, #16]
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	f000 8101 	beq.w	80017f6 <HAL_GPIO_Init+0x48a>
 80015f4:	683b      	ldr	r3, [r7, #0]
 80015f6:	691b      	ldr	r3, [r3, #16]
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	f000 80fc 	beq.w	80017f6 <HAL_GPIO_Init+0x48a>
 80015fe:	683b      	ldr	r3, [r7, #0]
 8001600:	691b      	ldr	r3, [r3, #16]
 8001602:	2b00      	cmp	r3, #0
 8001604:	f000 80f7 	beq.w	80017f6 <HAL_GPIO_Init+0x48a>
 8001608:	683b      	ldr	r3, [r7, #0]
 800160a:	691b      	ldr	r3, [r3, #16]
 800160c:	2b01      	cmp	r3, #1
 800160e:	f000 80f2 	beq.w	80017f6 <HAL_GPIO_Init+0x48a>
 8001612:	683b      	ldr	r3, [r7, #0]
 8001614:	691b      	ldr	r3, [r3, #16]
 8001616:	2b02      	cmp	r3, #2
 8001618:	f000 80ed 	beq.w	80017f6 <HAL_GPIO_Init+0x48a>
 800161c:	683b      	ldr	r3, [r7, #0]
 800161e:	691b      	ldr	r3, [r3, #16]
 8001620:	2b02      	cmp	r3, #2
 8001622:	f000 80e8 	beq.w	80017f6 <HAL_GPIO_Init+0x48a>
 8001626:	683b      	ldr	r3, [r7, #0]
 8001628:	691b      	ldr	r3, [r3, #16]
 800162a:	2b02      	cmp	r3, #2
 800162c:	f000 80e3 	beq.w	80017f6 <HAL_GPIO_Init+0x48a>
 8001630:	683b      	ldr	r3, [r7, #0]
 8001632:	691b      	ldr	r3, [r3, #16]
 8001634:	2b03      	cmp	r3, #3
 8001636:	f000 80de 	beq.w	80017f6 <HAL_GPIO_Init+0x48a>
 800163a:	683b      	ldr	r3, [r7, #0]
 800163c:	691b      	ldr	r3, [r3, #16]
 800163e:	2b03      	cmp	r3, #3
 8001640:	f000 80d9 	beq.w	80017f6 <HAL_GPIO_Init+0x48a>
 8001644:	683b      	ldr	r3, [r7, #0]
 8001646:	691b      	ldr	r3, [r3, #16]
 8001648:	2b03      	cmp	r3, #3
 800164a:	f000 80d4 	beq.w	80017f6 <HAL_GPIO_Init+0x48a>
 800164e:	683b      	ldr	r3, [r7, #0]
 8001650:	691b      	ldr	r3, [r3, #16]
 8001652:	2b03      	cmp	r3, #3
 8001654:	f000 80cf 	beq.w	80017f6 <HAL_GPIO_Init+0x48a>
 8001658:	683b      	ldr	r3, [r7, #0]
 800165a:	691b      	ldr	r3, [r3, #16]
 800165c:	2b03      	cmp	r3, #3
 800165e:	f000 80ca 	beq.w	80017f6 <HAL_GPIO_Init+0x48a>
 8001662:	683b      	ldr	r3, [r7, #0]
 8001664:	691b      	ldr	r3, [r3, #16]
 8001666:	2b03      	cmp	r3, #3
 8001668:	f000 80c5 	beq.w	80017f6 <HAL_GPIO_Init+0x48a>
 800166c:	683b      	ldr	r3, [r7, #0]
 800166e:	691b      	ldr	r3, [r3, #16]
 8001670:	2b04      	cmp	r3, #4
 8001672:	f000 80c0 	beq.w	80017f6 <HAL_GPIO_Init+0x48a>
 8001676:	683b      	ldr	r3, [r7, #0]
 8001678:	691b      	ldr	r3, [r3, #16]
 800167a:	2b04      	cmp	r3, #4
 800167c:	f000 80bb 	beq.w	80017f6 <HAL_GPIO_Init+0x48a>
 8001680:	683b      	ldr	r3, [r7, #0]
 8001682:	691b      	ldr	r3, [r3, #16]
 8001684:	2b04      	cmp	r3, #4
 8001686:	f000 80b6 	beq.w	80017f6 <HAL_GPIO_Init+0x48a>
 800168a:	683b      	ldr	r3, [r7, #0]
 800168c:	691b      	ldr	r3, [r3, #16]
 800168e:	2b04      	cmp	r3, #4
 8001690:	f000 80b1 	beq.w	80017f6 <HAL_GPIO_Init+0x48a>
 8001694:	683b      	ldr	r3, [r7, #0]
 8001696:	691b      	ldr	r3, [r3, #16]
 8001698:	2b04      	cmp	r3, #4
 800169a:	f000 80ac 	beq.w	80017f6 <HAL_GPIO_Init+0x48a>
 800169e:	683b      	ldr	r3, [r7, #0]
 80016a0:	691b      	ldr	r3, [r3, #16]
 80016a2:	2b05      	cmp	r3, #5
 80016a4:	f000 80a7 	beq.w	80017f6 <HAL_GPIO_Init+0x48a>
 80016a8:	683b      	ldr	r3, [r7, #0]
 80016aa:	691b      	ldr	r3, [r3, #16]
 80016ac:	2b05      	cmp	r3, #5
 80016ae:	f000 80a2 	beq.w	80017f6 <HAL_GPIO_Init+0x48a>
 80016b2:	683b      	ldr	r3, [r7, #0]
 80016b4:	691b      	ldr	r3, [r3, #16]
 80016b6:	2b05      	cmp	r3, #5
 80016b8:	f000 809d 	beq.w	80017f6 <HAL_GPIO_Init+0x48a>
 80016bc:	683b      	ldr	r3, [r7, #0]
 80016be:	691b      	ldr	r3, [r3, #16]
 80016c0:	2b05      	cmp	r3, #5
 80016c2:	f000 8098 	beq.w	80017f6 <HAL_GPIO_Init+0x48a>
 80016c6:	683b      	ldr	r3, [r7, #0]
 80016c8:	691b      	ldr	r3, [r3, #16]
 80016ca:	2b05      	cmp	r3, #5
 80016cc:	f000 8093 	beq.w	80017f6 <HAL_GPIO_Init+0x48a>
 80016d0:	683b      	ldr	r3, [r7, #0]
 80016d2:	691b      	ldr	r3, [r3, #16]
 80016d4:	2b05      	cmp	r3, #5
 80016d6:	f000 808e 	beq.w	80017f6 <HAL_GPIO_Init+0x48a>
 80016da:	683b      	ldr	r3, [r7, #0]
 80016dc:	691b      	ldr	r3, [r3, #16]
 80016de:	2b06      	cmp	r3, #6
 80016e0:	f000 8089 	beq.w	80017f6 <HAL_GPIO_Init+0x48a>
 80016e4:	683b      	ldr	r3, [r7, #0]
 80016e6:	691b      	ldr	r3, [r3, #16]
 80016e8:	2b06      	cmp	r3, #6
 80016ea:	f000 8084 	beq.w	80017f6 <HAL_GPIO_Init+0x48a>
 80016ee:	683b      	ldr	r3, [r7, #0]
 80016f0:	691b      	ldr	r3, [r3, #16]
 80016f2:	2b07      	cmp	r3, #7
 80016f4:	d07f      	beq.n	80017f6 <HAL_GPIO_Init+0x48a>
 80016f6:	683b      	ldr	r3, [r7, #0]
 80016f8:	691b      	ldr	r3, [r3, #16]
 80016fa:	2b07      	cmp	r3, #7
 80016fc:	d07b      	beq.n	80017f6 <HAL_GPIO_Init+0x48a>
 80016fe:	683b      	ldr	r3, [r7, #0]
 8001700:	691b      	ldr	r3, [r3, #16]
 8001702:	2b07      	cmp	r3, #7
 8001704:	d077      	beq.n	80017f6 <HAL_GPIO_Init+0x48a>
 8001706:	683b      	ldr	r3, [r7, #0]
 8001708:	691b      	ldr	r3, [r3, #16]
 800170a:	2b07      	cmp	r3, #7
 800170c:	d073      	beq.n	80017f6 <HAL_GPIO_Init+0x48a>
 800170e:	683b      	ldr	r3, [r7, #0]
 8001710:	691b      	ldr	r3, [r3, #16]
 8001712:	2b07      	cmp	r3, #7
 8001714:	d06f      	beq.n	80017f6 <HAL_GPIO_Init+0x48a>
 8001716:	683b      	ldr	r3, [r7, #0]
 8001718:	691b      	ldr	r3, [r3, #16]
 800171a:	2b07      	cmp	r3, #7
 800171c:	d06b      	beq.n	80017f6 <HAL_GPIO_Init+0x48a>
 800171e:	683b      	ldr	r3, [r7, #0]
 8001720:	691b      	ldr	r3, [r3, #16]
 8001722:	2b07      	cmp	r3, #7
 8001724:	d067      	beq.n	80017f6 <HAL_GPIO_Init+0x48a>
 8001726:	683b      	ldr	r3, [r7, #0]
 8001728:	691b      	ldr	r3, [r3, #16]
 800172a:	2b08      	cmp	r3, #8
 800172c:	d063      	beq.n	80017f6 <HAL_GPIO_Init+0x48a>
 800172e:	683b      	ldr	r3, [r7, #0]
 8001730:	691b      	ldr	r3, [r3, #16]
 8001732:	2b08      	cmp	r3, #8
 8001734:	d05f      	beq.n	80017f6 <HAL_GPIO_Init+0x48a>
 8001736:	683b      	ldr	r3, [r7, #0]
 8001738:	691b      	ldr	r3, [r3, #16]
 800173a:	2b08      	cmp	r3, #8
 800173c:	d05b      	beq.n	80017f6 <HAL_GPIO_Init+0x48a>
 800173e:	683b      	ldr	r3, [r7, #0]
 8001740:	691b      	ldr	r3, [r3, #16]
 8001742:	2b08      	cmp	r3, #8
 8001744:	d057      	beq.n	80017f6 <HAL_GPIO_Init+0x48a>
 8001746:	683b      	ldr	r3, [r7, #0]
 8001748:	691b      	ldr	r3, [r3, #16]
 800174a:	2b08      	cmp	r3, #8
 800174c:	d053      	beq.n	80017f6 <HAL_GPIO_Init+0x48a>
 800174e:	683b      	ldr	r3, [r7, #0]
 8001750:	691b      	ldr	r3, [r3, #16]
 8001752:	2b08      	cmp	r3, #8
 8001754:	d04f      	beq.n	80017f6 <HAL_GPIO_Init+0x48a>
 8001756:	683b      	ldr	r3, [r7, #0]
 8001758:	691b      	ldr	r3, [r3, #16]
 800175a:	2b08      	cmp	r3, #8
 800175c:	d04b      	beq.n	80017f6 <HAL_GPIO_Init+0x48a>
 800175e:	683b      	ldr	r3, [r7, #0]
 8001760:	691b      	ldr	r3, [r3, #16]
 8001762:	2b09      	cmp	r3, #9
 8001764:	d047      	beq.n	80017f6 <HAL_GPIO_Init+0x48a>
 8001766:	683b      	ldr	r3, [r7, #0]
 8001768:	691b      	ldr	r3, [r3, #16]
 800176a:	2b09      	cmp	r3, #9
 800176c:	d043      	beq.n	80017f6 <HAL_GPIO_Init+0x48a>
 800176e:	683b      	ldr	r3, [r7, #0]
 8001770:	691b      	ldr	r3, [r3, #16]
 8001772:	2b09      	cmp	r3, #9
 8001774:	d03f      	beq.n	80017f6 <HAL_GPIO_Init+0x48a>
 8001776:	683b      	ldr	r3, [r7, #0]
 8001778:	691b      	ldr	r3, [r3, #16]
 800177a:	2b09      	cmp	r3, #9
 800177c:	d03b      	beq.n	80017f6 <HAL_GPIO_Init+0x48a>
 800177e:	683b      	ldr	r3, [r7, #0]
 8001780:	691b      	ldr	r3, [r3, #16]
 8001782:	2b09      	cmp	r3, #9
 8001784:	d037      	beq.n	80017f6 <HAL_GPIO_Init+0x48a>
 8001786:	683b      	ldr	r3, [r7, #0]
 8001788:	691b      	ldr	r3, [r3, #16]
 800178a:	2b09      	cmp	r3, #9
 800178c:	d033      	beq.n	80017f6 <HAL_GPIO_Init+0x48a>
 800178e:	683b      	ldr	r3, [r7, #0]
 8001790:	691b      	ldr	r3, [r3, #16]
 8001792:	2b09      	cmp	r3, #9
 8001794:	d02f      	beq.n	80017f6 <HAL_GPIO_Init+0x48a>
 8001796:	683b      	ldr	r3, [r7, #0]
 8001798:	691b      	ldr	r3, [r3, #16]
 800179a:	2b0a      	cmp	r3, #10
 800179c:	d02b      	beq.n	80017f6 <HAL_GPIO_Init+0x48a>
 800179e:	683b      	ldr	r3, [r7, #0]
 80017a0:	691b      	ldr	r3, [r3, #16]
 80017a2:	2b0a      	cmp	r3, #10
 80017a4:	d027      	beq.n	80017f6 <HAL_GPIO_Init+0x48a>
 80017a6:	683b      	ldr	r3, [r7, #0]
 80017a8:	691b      	ldr	r3, [r3, #16]
 80017aa:	2b0a      	cmp	r3, #10
 80017ac:	d023      	beq.n	80017f6 <HAL_GPIO_Init+0x48a>
 80017ae:	683b      	ldr	r3, [r7, #0]
 80017b0:	691b      	ldr	r3, [r3, #16]
 80017b2:	2b0a      	cmp	r3, #10
 80017b4:	d01f      	beq.n	80017f6 <HAL_GPIO_Init+0x48a>
 80017b6:	683b      	ldr	r3, [r7, #0]
 80017b8:	691b      	ldr	r3, [r3, #16]
 80017ba:	2b0b      	cmp	r3, #11
 80017bc:	d01b      	beq.n	80017f6 <HAL_GPIO_Init+0x48a>
 80017be:	683b      	ldr	r3, [r7, #0]
 80017c0:	691b      	ldr	r3, [r3, #16]
 80017c2:	2b0c      	cmp	r3, #12
 80017c4:	d017      	beq.n	80017f6 <HAL_GPIO_Init+0x48a>
 80017c6:	683b      	ldr	r3, [r7, #0]
 80017c8:	691b      	ldr	r3, [r3, #16]
 80017ca:	2b0c      	cmp	r3, #12
 80017cc:	d013      	beq.n	80017f6 <HAL_GPIO_Init+0x48a>
 80017ce:	683b      	ldr	r3, [r7, #0]
 80017d0:	691b      	ldr	r3, [r3, #16]
 80017d2:	2b0c      	cmp	r3, #12
 80017d4:	d00f      	beq.n	80017f6 <HAL_GPIO_Init+0x48a>
 80017d6:	683b      	ldr	r3, [r7, #0]
 80017d8:	691b      	ldr	r3, [r3, #16]
 80017da:	2b0f      	cmp	r3, #15
 80017dc:	d00b      	beq.n	80017f6 <HAL_GPIO_Init+0x48a>
 80017de:	683b      	ldr	r3, [r7, #0]
 80017e0:	691b      	ldr	r3, [r3, #16]
 80017e2:	2b0d      	cmp	r3, #13
 80017e4:	d007      	beq.n	80017f6 <HAL_GPIO_Init+0x48a>
 80017e6:	683b      	ldr	r3, [r7, #0]
 80017e8:	691b      	ldr	r3, [r3, #16]
 80017ea:	2b0e      	cmp	r3, #14
 80017ec:	d003      	beq.n	80017f6 <HAL_GPIO_Init+0x48a>
 80017ee:	21db      	movs	r1, #219	; 0xdb
 80017f0:	4888      	ldr	r0, [pc, #544]	; (8001a14 <HAL_GPIO_Init+0x6a8>)
 80017f2:	f7ff f964 	bl	8000abe <assert_failed>

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80017f6:	69fb      	ldr	r3, [r7, #28]
 80017f8:	08da      	lsrs	r2, r3, #3
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	3208      	adds	r2, #8
 80017fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001802:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001804:	69fb      	ldr	r3, [r7, #28]
 8001806:	f003 0307 	and.w	r3, r3, #7
 800180a:	009b      	lsls	r3, r3, #2
 800180c:	220f      	movs	r2, #15
 800180e:	fa02 f303 	lsl.w	r3, r2, r3
 8001812:	43db      	mvns	r3, r3
 8001814:	69ba      	ldr	r2, [r7, #24]
 8001816:	4013      	ands	r3, r2
 8001818:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800181a:	683b      	ldr	r3, [r7, #0]
 800181c:	691a      	ldr	r2, [r3, #16]
 800181e:	69fb      	ldr	r3, [r7, #28]
 8001820:	f003 0307 	and.w	r3, r3, #7
 8001824:	009b      	lsls	r3, r3, #2
 8001826:	fa02 f303 	lsl.w	r3, r2, r3
 800182a:	69ba      	ldr	r2, [r7, #24]
 800182c:	4313      	orrs	r3, r2
 800182e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001830:	69fb      	ldr	r3, [r7, #28]
 8001832:	08da      	lsrs	r2, r3, #3
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	3208      	adds	r2, #8
 8001838:	69b9      	ldr	r1, [r7, #24]
 800183a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001844:	69fb      	ldr	r3, [r7, #28]
 8001846:	005b      	lsls	r3, r3, #1
 8001848:	2203      	movs	r2, #3
 800184a:	fa02 f303 	lsl.w	r3, r2, r3
 800184e:	43db      	mvns	r3, r3
 8001850:	69ba      	ldr	r2, [r7, #24]
 8001852:	4013      	ands	r3, r2
 8001854:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001856:	683b      	ldr	r3, [r7, #0]
 8001858:	685b      	ldr	r3, [r3, #4]
 800185a:	f003 0203 	and.w	r2, r3, #3
 800185e:	69fb      	ldr	r3, [r7, #28]
 8001860:	005b      	lsls	r3, r3, #1
 8001862:	fa02 f303 	lsl.w	r3, r2, r3
 8001866:	69ba      	ldr	r2, [r7, #24]
 8001868:	4313      	orrs	r3, r2
 800186a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	69ba      	ldr	r2, [r7, #24]
 8001870:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001872:	683b      	ldr	r3, [r7, #0]
 8001874:	685b      	ldr	r3, [r3, #4]
 8001876:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800187a:	2b00      	cmp	r3, #0
 800187c:	f000 80be 	beq.w	80019fc <HAL_GPIO_Init+0x690>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001880:	4b65      	ldr	r3, [pc, #404]	; (8001a18 <HAL_GPIO_Init+0x6ac>)
 8001882:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001884:	4a64      	ldr	r2, [pc, #400]	; (8001a18 <HAL_GPIO_Init+0x6ac>)
 8001886:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800188a:	6453      	str	r3, [r2, #68]	; 0x44
 800188c:	4b62      	ldr	r3, [pc, #392]	; (8001a18 <HAL_GPIO_Init+0x6ac>)
 800188e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001890:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001894:	60fb      	str	r3, [r7, #12]
 8001896:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001898:	4a60      	ldr	r2, [pc, #384]	; (8001a1c <HAL_GPIO_Init+0x6b0>)
 800189a:	69fb      	ldr	r3, [r7, #28]
 800189c:	089b      	lsrs	r3, r3, #2
 800189e:	3302      	adds	r3, #2
 80018a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80018a6:	69fb      	ldr	r3, [r7, #28]
 80018a8:	f003 0303 	and.w	r3, r3, #3
 80018ac:	009b      	lsls	r3, r3, #2
 80018ae:	220f      	movs	r2, #15
 80018b0:	fa02 f303 	lsl.w	r3, r2, r3
 80018b4:	43db      	mvns	r3, r3
 80018b6:	69ba      	ldr	r2, [r7, #24]
 80018b8:	4013      	ands	r3, r2
 80018ba:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	4a58      	ldr	r2, [pc, #352]	; (8001a20 <HAL_GPIO_Init+0x6b4>)
 80018c0:	4293      	cmp	r3, r2
 80018c2:	d037      	beq.n	8001934 <HAL_GPIO_Init+0x5c8>
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	4a57      	ldr	r2, [pc, #348]	; (8001a24 <HAL_GPIO_Init+0x6b8>)
 80018c8:	4293      	cmp	r3, r2
 80018ca:	d031      	beq.n	8001930 <HAL_GPIO_Init+0x5c4>
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	4a56      	ldr	r2, [pc, #344]	; (8001a28 <HAL_GPIO_Init+0x6bc>)
 80018d0:	4293      	cmp	r3, r2
 80018d2:	d02b      	beq.n	800192c <HAL_GPIO_Init+0x5c0>
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	4a55      	ldr	r2, [pc, #340]	; (8001a2c <HAL_GPIO_Init+0x6c0>)
 80018d8:	4293      	cmp	r3, r2
 80018da:	d025      	beq.n	8001928 <HAL_GPIO_Init+0x5bc>
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	4a54      	ldr	r2, [pc, #336]	; (8001a30 <HAL_GPIO_Init+0x6c4>)
 80018e0:	4293      	cmp	r3, r2
 80018e2:	d01f      	beq.n	8001924 <HAL_GPIO_Init+0x5b8>
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	4a53      	ldr	r2, [pc, #332]	; (8001a34 <HAL_GPIO_Init+0x6c8>)
 80018e8:	4293      	cmp	r3, r2
 80018ea:	d019      	beq.n	8001920 <HAL_GPIO_Init+0x5b4>
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	4a52      	ldr	r2, [pc, #328]	; (8001a38 <HAL_GPIO_Init+0x6cc>)
 80018f0:	4293      	cmp	r3, r2
 80018f2:	d013      	beq.n	800191c <HAL_GPIO_Init+0x5b0>
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	4a51      	ldr	r2, [pc, #324]	; (8001a3c <HAL_GPIO_Init+0x6d0>)
 80018f8:	4293      	cmp	r3, r2
 80018fa:	d00d      	beq.n	8001918 <HAL_GPIO_Init+0x5ac>
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	4a50      	ldr	r2, [pc, #320]	; (8001a40 <HAL_GPIO_Init+0x6d4>)
 8001900:	4293      	cmp	r3, r2
 8001902:	d007      	beq.n	8001914 <HAL_GPIO_Init+0x5a8>
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	4a4f      	ldr	r2, [pc, #316]	; (8001a44 <HAL_GPIO_Init+0x6d8>)
 8001908:	4293      	cmp	r3, r2
 800190a:	d101      	bne.n	8001910 <HAL_GPIO_Init+0x5a4>
 800190c:	2309      	movs	r3, #9
 800190e:	e012      	b.n	8001936 <HAL_GPIO_Init+0x5ca>
 8001910:	230a      	movs	r3, #10
 8001912:	e010      	b.n	8001936 <HAL_GPIO_Init+0x5ca>
 8001914:	2308      	movs	r3, #8
 8001916:	e00e      	b.n	8001936 <HAL_GPIO_Init+0x5ca>
 8001918:	2307      	movs	r3, #7
 800191a:	e00c      	b.n	8001936 <HAL_GPIO_Init+0x5ca>
 800191c:	2306      	movs	r3, #6
 800191e:	e00a      	b.n	8001936 <HAL_GPIO_Init+0x5ca>
 8001920:	2305      	movs	r3, #5
 8001922:	e008      	b.n	8001936 <HAL_GPIO_Init+0x5ca>
 8001924:	2304      	movs	r3, #4
 8001926:	e006      	b.n	8001936 <HAL_GPIO_Init+0x5ca>
 8001928:	2303      	movs	r3, #3
 800192a:	e004      	b.n	8001936 <HAL_GPIO_Init+0x5ca>
 800192c:	2302      	movs	r3, #2
 800192e:	e002      	b.n	8001936 <HAL_GPIO_Init+0x5ca>
 8001930:	2301      	movs	r3, #1
 8001932:	e000      	b.n	8001936 <HAL_GPIO_Init+0x5ca>
 8001934:	2300      	movs	r3, #0
 8001936:	69fa      	ldr	r2, [r7, #28]
 8001938:	f002 0203 	and.w	r2, r2, #3
 800193c:	0092      	lsls	r2, r2, #2
 800193e:	4093      	lsls	r3, r2
 8001940:	69ba      	ldr	r2, [r7, #24]
 8001942:	4313      	orrs	r3, r2
 8001944:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001946:	4935      	ldr	r1, [pc, #212]	; (8001a1c <HAL_GPIO_Init+0x6b0>)
 8001948:	69fb      	ldr	r3, [r7, #28]
 800194a:	089b      	lsrs	r3, r3, #2
 800194c:	3302      	adds	r3, #2
 800194e:	69ba      	ldr	r2, [r7, #24]
 8001950:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001954:	4b3c      	ldr	r3, [pc, #240]	; (8001a48 <HAL_GPIO_Init+0x6dc>)
 8001956:	689b      	ldr	r3, [r3, #8]
 8001958:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800195a:	693b      	ldr	r3, [r7, #16]
 800195c:	43db      	mvns	r3, r3
 800195e:	69ba      	ldr	r2, [r7, #24]
 8001960:	4013      	ands	r3, r2
 8001962:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001964:	683b      	ldr	r3, [r7, #0]
 8001966:	685b      	ldr	r3, [r3, #4]
 8001968:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800196c:	2b00      	cmp	r3, #0
 800196e:	d003      	beq.n	8001978 <HAL_GPIO_Init+0x60c>
        {
          temp |= iocurrent;
 8001970:	69ba      	ldr	r2, [r7, #24]
 8001972:	693b      	ldr	r3, [r7, #16]
 8001974:	4313      	orrs	r3, r2
 8001976:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001978:	4a33      	ldr	r2, [pc, #204]	; (8001a48 <HAL_GPIO_Init+0x6dc>)
 800197a:	69bb      	ldr	r3, [r7, #24]
 800197c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800197e:	4b32      	ldr	r3, [pc, #200]	; (8001a48 <HAL_GPIO_Init+0x6dc>)
 8001980:	68db      	ldr	r3, [r3, #12]
 8001982:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001984:	693b      	ldr	r3, [r7, #16]
 8001986:	43db      	mvns	r3, r3
 8001988:	69ba      	ldr	r2, [r7, #24]
 800198a:	4013      	ands	r3, r2
 800198c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800198e:	683b      	ldr	r3, [r7, #0]
 8001990:	685b      	ldr	r3, [r3, #4]
 8001992:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001996:	2b00      	cmp	r3, #0
 8001998:	d003      	beq.n	80019a2 <HAL_GPIO_Init+0x636>
        {
          temp |= iocurrent;
 800199a:	69ba      	ldr	r2, [r7, #24]
 800199c:	693b      	ldr	r3, [r7, #16]
 800199e:	4313      	orrs	r3, r2
 80019a0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80019a2:	4a29      	ldr	r2, [pc, #164]	; (8001a48 <HAL_GPIO_Init+0x6dc>)
 80019a4:	69bb      	ldr	r3, [r7, #24]
 80019a6:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80019a8:	4b27      	ldr	r3, [pc, #156]	; (8001a48 <HAL_GPIO_Init+0x6dc>)
 80019aa:	685b      	ldr	r3, [r3, #4]
 80019ac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019ae:	693b      	ldr	r3, [r7, #16]
 80019b0:	43db      	mvns	r3, r3
 80019b2:	69ba      	ldr	r2, [r7, #24]
 80019b4:	4013      	ands	r3, r2
 80019b6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80019b8:	683b      	ldr	r3, [r7, #0]
 80019ba:	685b      	ldr	r3, [r3, #4]
 80019bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d003      	beq.n	80019cc <HAL_GPIO_Init+0x660>
        {
          temp |= iocurrent;
 80019c4:	69ba      	ldr	r2, [r7, #24]
 80019c6:	693b      	ldr	r3, [r7, #16]
 80019c8:	4313      	orrs	r3, r2
 80019ca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80019cc:	4a1e      	ldr	r2, [pc, #120]	; (8001a48 <HAL_GPIO_Init+0x6dc>)
 80019ce:	69bb      	ldr	r3, [r7, #24]
 80019d0:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80019d2:	4b1d      	ldr	r3, [pc, #116]	; (8001a48 <HAL_GPIO_Init+0x6dc>)
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019d8:	693b      	ldr	r3, [r7, #16]
 80019da:	43db      	mvns	r3, r3
 80019dc:	69ba      	ldr	r2, [r7, #24]
 80019de:	4013      	ands	r3, r2
 80019e0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80019e2:	683b      	ldr	r3, [r7, #0]
 80019e4:	685b      	ldr	r3, [r3, #4]
 80019e6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d003      	beq.n	80019f6 <HAL_GPIO_Init+0x68a>
        {
          temp |= iocurrent;
 80019ee:	69ba      	ldr	r2, [r7, #24]
 80019f0:	693b      	ldr	r3, [r7, #16]
 80019f2:	4313      	orrs	r3, r2
 80019f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80019f6:	4a14      	ldr	r2, [pc, #80]	; (8001a48 <HAL_GPIO_Init+0x6dc>)
 80019f8:	69bb      	ldr	r3, [r7, #24]
 80019fa:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 80019fc:	69fb      	ldr	r3, [r7, #28]
 80019fe:	3301      	adds	r3, #1
 8001a00:	61fb      	str	r3, [r7, #28]
 8001a02:	69fb      	ldr	r3, [r7, #28]
 8001a04:	2b0f      	cmp	r3, #15
 8001a06:	f67f ad4d 	bls.w	80014a4 <HAL_GPIO_Init+0x138>
      }
    }
  }
}
 8001a0a:	bf00      	nop
 8001a0c:	bf00      	nop
 8001a0e:	3720      	adds	r7, #32
 8001a10:	46bd      	mov	sp, r7
 8001a12:	bd80      	pop	{r7, pc}
 8001a14:	0800bd08 	.word	0x0800bd08
 8001a18:	40023800 	.word	0x40023800
 8001a1c:	40013800 	.word	0x40013800
 8001a20:	40020000 	.word	0x40020000
 8001a24:	40020400 	.word	0x40020400
 8001a28:	40020800 	.word	0x40020800
 8001a2c:	40020c00 	.word	0x40020c00
 8001a30:	40021000 	.word	0x40021000
 8001a34:	40021400 	.word	0x40021400
 8001a38:	40021800 	.word	0x40021800
 8001a3c:	40021c00 	.word	0x40021c00
 8001a40:	40022000 	.word	0x40022000
 8001a44:	40022400 	.word	0x40022400
 8001a48:	40013c00 	.word	0x40013c00

08001a4c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	b082      	sub	sp, #8
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	6078      	str	r0, [r7, #4]
 8001a54:	460b      	mov	r3, r1
 8001a56:	807b      	strh	r3, [r7, #2]
 8001a58:	4613      	mov	r3, r2
 8001a5a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8001a5c:	887b      	ldrh	r3, [r7, #2]
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d104      	bne.n	8001a6c <HAL_GPIO_WritePin+0x20>
 8001a62:	f240 1197 	movw	r1, #407	; 0x197
 8001a66:	480e      	ldr	r0, [pc, #56]	; (8001aa0 <HAL_GPIO_WritePin+0x54>)
 8001a68:	f7ff f829 	bl	8000abe <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 8001a6c:	787b      	ldrb	r3, [r7, #1]
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d007      	beq.n	8001a82 <HAL_GPIO_WritePin+0x36>
 8001a72:	787b      	ldrb	r3, [r7, #1]
 8001a74:	2b01      	cmp	r3, #1
 8001a76:	d004      	beq.n	8001a82 <HAL_GPIO_WritePin+0x36>
 8001a78:	f44f 71cc 	mov.w	r1, #408	; 0x198
 8001a7c:	4808      	ldr	r0, [pc, #32]	; (8001aa0 <HAL_GPIO_WritePin+0x54>)
 8001a7e:	f7ff f81e 	bl	8000abe <assert_failed>

  if(PinState != GPIO_PIN_RESET)
 8001a82:	787b      	ldrb	r3, [r7, #1]
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d003      	beq.n	8001a90 <HAL_GPIO_WritePin+0x44>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001a88:	887a      	ldrh	r2, [r7, #2]
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8001a8e:	e003      	b.n	8001a98 <HAL_GPIO_WritePin+0x4c>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8001a90:	887b      	ldrh	r3, [r7, #2]
 8001a92:	041a      	lsls	r2, r3, #16
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	619a      	str	r2, [r3, #24]
}
 8001a98:	bf00      	nop
 8001a9a:	3708      	adds	r7, #8
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	bd80      	pop	{r7, pc}
 8001aa0:	0800bd08 	.word	0x0800bd08

08001aa4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	b082      	sub	sp, #8
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d101      	bne.n	8001ab6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001ab2:	2301      	movs	r3, #1
 8001ab4:	e107      	b.n	8001cc6 <HAL_I2C_Init+0x222>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	4a85      	ldr	r2, [pc, #532]	; (8001cd0 <HAL_I2C_Init+0x22c>)
 8001abc:	4293      	cmp	r3, r2
 8001abe:	d013      	beq.n	8001ae8 <HAL_I2C_Init+0x44>
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	4a83      	ldr	r2, [pc, #524]	; (8001cd4 <HAL_I2C_Init+0x230>)
 8001ac6:	4293      	cmp	r3, r2
 8001ac8:	d00e      	beq.n	8001ae8 <HAL_I2C_Init+0x44>
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	4a82      	ldr	r2, [pc, #520]	; (8001cd8 <HAL_I2C_Init+0x234>)
 8001ad0:	4293      	cmp	r3, r2
 8001ad2:	d009      	beq.n	8001ae8 <HAL_I2C_Init+0x44>
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	4a80      	ldr	r2, [pc, #512]	; (8001cdc <HAL_I2C_Init+0x238>)
 8001ada:	4293      	cmp	r3, r2
 8001adc:	d004      	beq.n	8001ae8 <HAL_I2C_Init+0x44>
 8001ade:	f240 2119 	movw	r1, #537	; 0x219
 8001ae2:	487f      	ldr	r0, [pc, #508]	; (8001ce0 <HAL_I2C_Init+0x23c>)
 8001ae4:	f7fe ffeb 	bl	8000abe <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS1(hi2c->Init.OwnAddress1));
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	689b      	ldr	r3, [r3, #8]
 8001aec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001af0:	d304      	bcc.n	8001afc <HAL_I2C_Init+0x58>
 8001af2:	f240 211a 	movw	r1, #538	; 0x21a
 8001af6:	487a      	ldr	r0, [pc, #488]	; (8001ce0 <HAL_I2C_Init+0x23c>)
 8001af8:	f7fe ffe1 	bl	8000abe <assert_failed>
  assert_param(IS_I2C_ADDRESSING_MODE(hi2c->Init.AddressingMode));
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	68db      	ldr	r3, [r3, #12]
 8001b00:	2b01      	cmp	r3, #1
 8001b02:	d008      	beq.n	8001b16 <HAL_I2C_Init+0x72>
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	68db      	ldr	r3, [r3, #12]
 8001b08:	2b02      	cmp	r3, #2
 8001b0a:	d004      	beq.n	8001b16 <HAL_I2C_Init+0x72>
 8001b0c:	f240 211b 	movw	r1, #539	; 0x21b
 8001b10:	4873      	ldr	r0, [pc, #460]	; (8001ce0 <HAL_I2C_Init+0x23c>)
 8001b12:	f7fe ffd4 	bl	8000abe <assert_failed>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	691b      	ldr	r3, [r3, #16]
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d009      	beq.n	8001b32 <HAL_I2C_Init+0x8e>
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	691b      	ldr	r3, [r3, #16]
 8001b22:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001b26:	d004      	beq.n	8001b32 <HAL_I2C_Init+0x8e>
 8001b28:	f44f 7107 	mov.w	r1, #540	; 0x21c
 8001b2c:	486c      	ldr	r0, [pc, #432]	; (8001ce0 <HAL_I2C_Init+0x23c>)
 8001b2e:	f7fe ffc6 	bl	8000abe <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	695b      	ldr	r3, [r3, #20]
 8001b36:	2bff      	cmp	r3, #255	; 0xff
 8001b38:	d904      	bls.n	8001b44 <HAL_I2C_Init+0xa0>
 8001b3a:	f240 211d 	movw	r1, #541	; 0x21d
 8001b3e:	4868      	ldr	r0, [pc, #416]	; (8001ce0 <HAL_I2C_Init+0x23c>)
 8001b40:	f7fe ffbd 	bl	8000abe <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	699b      	ldr	r3, [r3, #24]
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d020      	beq.n	8001b8e <HAL_I2C_Init+0xea>
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	699b      	ldr	r3, [r3, #24]
 8001b50:	2b01      	cmp	r3, #1
 8001b52:	d01c      	beq.n	8001b8e <HAL_I2C_Init+0xea>
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	699b      	ldr	r3, [r3, #24]
 8001b58:	2b02      	cmp	r3, #2
 8001b5a:	d018      	beq.n	8001b8e <HAL_I2C_Init+0xea>
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	699b      	ldr	r3, [r3, #24]
 8001b60:	2b03      	cmp	r3, #3
 8001b62:	d014      	beq.n	8001b8e <HAL_I2C_Init+0xea>
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	699b      	ldr	r3, [r3, #24]
 8001b68:	2b04      	cmp	r3, #4
 8001b6a:	d010      	beq.n	8001b8e <HAL_I2C_Init+0xea>
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	699b      	ldr	r3, [r3, #24]
 8001b70:	2b05      	cmp	r3, #5
 8001b72:	d00c      	beq.n	8001b8e <HAL_I2C_Init+0xea>
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	699b      	ldr	r3, [r3, #24]
 8001b78:	2b06      	cmp	r3, #6
 8001b7a:	d008      	beq.n	8001b8e <HAL_I2C_Init+0xea>
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	699b      	ldr	r3, [r3, #24]
 8001b80:	2b07      	cmp	r3, #7
 8001b82:	d004      	beq.n	8001b8e <HAL_I2C_Init+0xea>
 8001b84:	f240 211e 	movw	r1, #542	; 0x21e
 8001b88:	4855      	ldr	r0, [pc, #340]	; (8001ce0 <HAL_I2C_Init+0x23c>)
 8001b8a:	f7fe ff98 	bl	8000abe <assert_failed>
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	69db      	ldr	r3, [r3, #28]
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d009      	beq.n	8001baa <HAL_I2C_Init+0x106>
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	69db      	ldr	r3, [r3, #28]
 8001b9a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8001b9e:	d004      	beq.n	8001baa <HAL_I2C_Init+0x106>
 8001ba0:	f240 211f 	movw	r1, #543	; 0x21f
 8001ba4:	484e      	ldr	r0, [pc, #312]	; (8001ce0 <HAL_I2C_Init+0x23c>)
 8001ba6:	f7fe ff8a 	bl	8000abe <assert_failed>
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	6a1b      	ldr	r3, [r3, #32]
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d009      	beq.n	8001bc6 <HAL_I2C_Init+0x122>
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	6a1b      	ldr	r3, [r3, #32]
 8001bb6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001bba:	d004      	beq.n	8001bc6 <HAL_I2C_Init+0x122>
 8001bbc:	f44f 7108 	mov.w	r1, #544	; 0x220
 8001bc0:	4847      	ldr	r0, [pc, #284]	; (8001ce0 <HAL_I2C_Init+0x23c>)
 8001bc2:	f7fe ff7c 	bl	8000abe <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001bcc:	b2db      	uxtb	r3, r3
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d106      	bne.n	8001be0 <HAL_I2C_Init+0x13c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001bda:	6878      	ldr	r0, [r7, #4]
 8001bdc:	f7fe fd80 	bl	80006e0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	2224      	movs	r2, #36	; 0x24
 8001be4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	681a      	ldr	r2, [r3, #0]
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	f022 0201 	bic.w	r2, r2, #1
 8001bf6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	685a      	ldr	r2, [r3, #4]
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001c04:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	689a      	ldr	r2, [r3, #8]
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001c14:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	68db      	ldr	r3, [r3, #12]
 8001c1a:	2b01      	cmp	r3, #1
 8001c1c:	d107      	bne.n	8001c2e <HAL_I2C_Init+0x18a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	689a      	ldr	r2, [r3, #8]
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001c2a:	609a      	str	r2, [r3, #8]
 8001c2c:	e006      	b.n	8001c3c <HAL_I2C_Init+0x198>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	689a      	ldr	r2, [r3, #8]
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001c3a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	68db      	ldr	r3, [r3, #12]
 8001c40:	2b02      	cmp	r3, #2
 8001c42:	d104      	bne.n	8001c4e <HAL_I2C_Init+0x1aa>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001c4c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	6859      	ldr	r1, [r3, #4]
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681a      	ldr	r2, [r3, #0]
 8001c58:	4b22      	ldr	r3, [pc, #136]	; (8001ce4 <HAL_I2C_Init+0x240>)
 8001c5a:	430b      	orrs	r3, r1
 8001c5c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	68da      	ldr	r2, [r3, #12]
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001c6c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	691a      	ldr	r2, [r3, #16]
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	695b      	ldr	r3, [r3, #20]
 8001c76:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	699b      	ldr	r3, [r3, #24]
 8001c7e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	430a      	orrs	r2, r1
 8001c86:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	69d9      	ldr	r1, [r3, #28]
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	6a1a      	ldr	r2, [r3, #32]
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	430a      	orrs	r2, r1
 8001c96:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	681a      	ldr	r2, [r3, #0]
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	f042 0201 	orr.w	r2, r2, #1
 8001ca6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	2200      	movs	r2, #0
 8001cac:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	2220      	movs	r2, #32
 8001cb2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	2200      	movs	r2, #0
 8001cba:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001cc4:	2300      	movs	r3, #0
}
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	3708      	adds	r7, #8
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	bd80      	pop	{r7, pc}
 8001cce:	bf00      	nop
 8001cd0:	40005400 	.word	0x40005400
 8001cd4:	40005800 	.word	0x40005800
 8001cd8:	40005c00 	.word	0x40005c00
 8001cdc:	40006000 	.word	0x40006000
 8001ce0:	0800bd44 	.word	0x0800bd44
 8001ce4:	02008000 	.word	0x02008000

08001ce8 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	b088      	sub	sp, #32
 8001cec:	af02      	add	r7, sp, #8
 8001cee:	60f8      	str	r0, [r7, #12]
 8001cf0:	607a      	str	r2, [r7, #4]
 8001cf2:	461a      	mov	r2, r3
 8001cf4:	460b      	mov	r3, r1
 8001cf6:	817b      	strh	r3, [r7, #10]
 8001cf8:	4613      	mov	r3, r2
 8001cfa:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001d02:	b2db      	uxtb	r3, r3
 8001d04:	2b20      	cmp	r3, #32
 8001d06:	f040 80da 	bne.w	8001ebe <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001d10:	2b01      	cmp	r3, #1
 8001d12:	d101      	bne.n	8001d18 <HAL_I2C_Master_Transmit+0x30>
 8001d14:	2302      	movs	r3, #2
 8001d16:	e0d3      	b.n	8001ec0 <HAL_I2C_Master_Transmit+0x1d8>
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	2201      	movs	r2, #1
 8001d1c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001d20:	f7ff f922 	bl	8000f68 <HAL_GetTick>
 8001d24:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001d26:	697b      	ldr	r3, [r7, #20]
 8001d28:	9300      	str	r3, [sp, #0]
 8001d2a:	2319      	movs	r3, #25
 8001d2c:	2201      	movs	r2, #1
 8001d2e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001d32:	68f8      	ldr	r0, [r7, #12]
 8001d34:	f000 f9e6 	bl	8002104 <I2C_WaitOnFlagUntilTimeout>
 8001d38:	4603      	mov	r3, r0
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d001      	beq.n	8001d42 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8001d3e:	2301      	movs	r3, #1
 8001d40:	e0be      	b.n	8001ec0 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	2221      	movs	r2, #33	; 0x21
 8001d46:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	2210      	movs	r2, #16
 8001d4e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	2200      	movs	r2, #0
 8001d56:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	687a      	ldr	r2, [r7, #4]
 8001d5c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	893a      	ldrh	r2, [r7, #8]
 8001d62:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	2200      	movs	r2, #0
 8001d68:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d6e:	b29b      	uxth	r3, r3
 8001d70:	2bff      	cmp	r3, #255	; 0xff
 8001d72:	d90e      	bls.n	8001d92 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	22ff      	movs	r2, #255	; 0xff
 8001d78:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d7e:	b2da      	uxtb	r2, r3
 8001d80:	8979      	ldrh	r1, [r7, #10]
 8001d82:	4b51      	ldr	r3, [pc, #324]	; (8001ec8 <HAL_I2C_Master_Transmit+0x1e0>)
 8001d84:	9300      	str	r3, [sp, #0]
 8001d86:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001d8a:	68f8      	ldr	r0, [r7, #12]
 8001d8c:	f000 fbd0 	bl	8002530 <I2C_TransferConfig>
 8001d90:	e06c      	b.n	8001e6c <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d96:	b29a      	uxth	r2, r3
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001da0:	b2da      	uxtb	r2, r3
 8001da2:	8979      	ldrh	r1, [r7, #10]
 8001da4:	4b48      	ldr	r3, [pc, #288]	; (8001ec8 <HAL_I2C_Master_Transmit+0x1e0>)
 8001da6:	9300      	str	r3, [sp, #0]
 8001da8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001dac:	68f8      	ldr	r0, [r7, #12]
 8001dae:	f000 fbbf 	bl	8002530 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8001db2:	e05b      	b.n	8001e6c <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001db4:	697a      	ldr	r2, [r7, #20]
 8001db6:	6a39      	ldr	r1, [r7, #32]
 8001db8:	68f8      	ldr	r0, [r7, #12]
 8001dba:	f000 f9e3 	bl	8002184 <I2C_WaitOnTXISFlagUntilTimeout>
 8001dbe:	4603      	mov	r3, r0
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d001      	beq.n	8001dc8 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8001dc4:	2301      	movs	r3, #1
 8001dc6:	e07b      	b.n	8001ec0 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dcc:	781a      	ldrb	r2, [r3, #0]
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dd8:	1c5a      	adds	r2, r3, #1
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001de2:	b29b      	uxth	r3, r3
 8001de4:	3b01      	subs	r3, #1
 8001de6:	b29a      	uxth	r2, r3
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001df0:	3b01      	subs	r3, #1
 8001df2:	b29a      	uxth	r2, r3
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001dfc:	b29b      	uxth	r3, r3
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d034      	beq.n	8001e6c <HAL_I2C_Master_Transmit+0x184>
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d130      	bne.n	8001e6c <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001e0a:	697b      	ldr	r3, [r7, #20]
 8001e0c:	9300      	str	r3, [sp, #0]
 8001e0e:	6a3b      	ldr	r3, [r7, #32]
 8001e10:	2200      	movs	r2, #0
 8001e12:	2180      	movs	r1, #128	; 0x80
 8001e14:	68f8      	ldr	r0, [r7, #12]
 8001e16:	f000 f975 	bl	8002104 <I2C_WaitOnFlagUntilTimeout>
 8001e1a:	4603      	mov	r3, r0
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d001      	beq.n	8001e24 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8001e20:	2301      	movs	r3, #1
 8001e22:	e04d      	b.n	8001ec0 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e28:	b29b      	uxth	r3, r3
 8001e2a:	2bff      	cmp	r3, #255	; 0xff
 8001e2c:	d90e      	bls.n	8001e4c <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	22ff      	movs	r2, #255	; 0xff
 8001e32:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e38:	b2da      	uxtb	r2, r3
 8001e3a:	8979      	ldrh	r1, [r7, #10]
 8001e3c:	2300      	movs	r3, #0
 8001e3e:	9300      	str	r3, [sp, #0]
 8001e40:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001e44:	68f8      	ldr	r0, [r7, #12]
 8001e46:	f000 fb73 	bl	8002530 <I2C_TransferConfig>
 8001e4a:	e00f      	b.n	8001e6c <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e50:	b29a      	uxth	r2, r3
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e5a:	b2da      	uxtb	r2, r3
 8001e5c:	8979      	ldrh	r1, [r7, #10]
 8001e5e:	2300      	movs	r3, #0
 8001e60:	9300      	str	r3, [sp, #0]
 8001e62:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001e66:	68f8      	ldr	r0, [r7, #12]
 8001e68:	f000 fb62 	bl	8002530 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e70:	b29b      	uxth	r3, r3
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d19e      	bne.n	8001db4 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001e76:	697a      	ldr	r2, [r7, #20]
 8001e78:	6a39      	ldr	r1, [r7, #32]
 8001e7a:	68f8      	ldr	r0, [r7, #12]
 8001e7c:	f000 f9c2 	bl	8002204 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001e80:	4603      	mov	r3, r0
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d001      	beq.n	8001e8a <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8001e86:	2301      	movs	r3, #1
 8001e88:	e01a      	b.n	8001ec0 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	2220      	movs	r2, #32
 8001e90:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	6859      	ldr	r1, [r3, #4]
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	681a      	ldr	r2, [r3, #0]
 8001e9c:	4b0b      	ldr	r3, [pc, #44]	; (8001ecc <HAL_I2C_Master_Transmit+0x1e4>)
 8001e9e:	400b      	ands	r3, r1
 8001ea0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	2220      	movs	r2, #32
 8001ea6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	2200      	movs	r2, #0
 8001eae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001eba:	2300      	movs	r3, #0
 8001ebc:	e000      	b.n	8001ec0 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8001ebe:	2302      	movs	r3, #2
  }
}
 8001ec0:	4618      	mov	r0, r3
 8001ec2:	3718      	adds	r7, #24
 8001ec4:	46bd      	mov	sp, r7
 8001ec6:	bd80      	pop	{r7, pc}
 8001ec8:	80002000 	.word	0x80002000
 8001ecc:	fe00e800 	.word	0xfe00e800

08001ed0 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	b088      	sub	sp, #32
 8001ed4:	af02      	add	r7, sp, #8
 8001ed6:	60f8      	str	r0, [r7, #12]
 8001ed8:	607a      	str	r2, [r7, #4]
 8001eda:	461a      	mov	r2, r3
 8001edc:	460b      	mov	r3, r1
 8001ede:	817b      	strh	r3, [r7, #10]
 8001ee0:	4613      	mov	r3, r2
 8001ee2:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001eea:	b2db      	uxtb	r3, r3
 8001eec:	2b20      	cmp	r3, #32
 8001eee:	f040 80db 	bne.w	80020a8 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001ef8:	2b01      	cmp	r3, #1
 8001efa:	d101      	bne.n	8001f00 <HAL_I2C_Master_Receive+0x30>
 8001efc:	2302      	movs	r3, #2
 8001efe:	e0d4      	b.n	80020aa <HAL_I2C_Master_Receive+0x1da>
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	2201      	movs	r2, #1
 8001f04:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001f08:	f7ff f82e 	bl	8000f68 <HAL_GetTick>
 8001f0c:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001f0e:	697b      	ldr	r3, [r7, #20]
 8001f10:	9300      	str	r3, [sp, #0]
 8001f12:	2319      	movs	r3, #25
 8001f14:	2201      	movs	r2, #1
 8001f16:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001f1a:	68f8      	ldr	r0, [r7, #12]
 8001f1c:	f000 f8f2 	bl	8002104 <I2C_WaitOnFlagUntilTimeout>
 8001f20:	4603      	mov	r3, r0
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d001      	beq.n	8001f2a <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8001f26:	2301      	movs	r3, #1
 8001f28:	e0bf      	b.n	80020aa <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	2222      	movs	r2, #34	; 0x22
 8001f2e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	2210      	movs	r2, #16
 8001f36:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	687a      	ldr	r2, [r7, #4]
 8001f44:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	893a      	ldrh	r2, [r7, #8]
 8001f4a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	2200      	movs	r2, #0
 8001f50:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f56:	b29b      	uxth	r3, r3
 8001f58:	2bff      	cmp	r3, #255	; 0xff
 8001f5a:	d90e      	bls.n	8001f7a <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	22ff      	movs	r2, #255	; 0xff
 8001f60:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f66:	b2da      	uxtb	r2, r3
 8001f68:	8979      	ldrh	r1, [r7, #10]
 8001f6a:	4b52      	ldr	r3, [pc, #328]	; (80020b4 <HAL_I2C_Master_Receive+0x1e4>)
 8001f6c:	9300      	str	r3, [sp, #0]
 8001f6e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001f72:	68f8      	ldr	r0, [r7, #12]
 8001f74:	f000 fadc 	bl	8002530 <I2C_TransferConfig>
 8001f78:	e06d      	b.n	8002056 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f7e:	b29a      	uxth	r2, r3
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f88:	b2da      	uxtb	r2, r3
 8001f8a:	8979      	ldrh	r1, [r7, #10]
 8001f8c:	4b49      	ldr	r3, [pc, #292]	; (80020b4 <HAL_I2C_Master_Receive+0x1e4>)
 8001f8e:	9300      	str	r3, [sp, #0]
 8001f90:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001f94:	68f8      	ldr	r0, [r7, #12]
 8001f96:	f000 facb 	bl	8002530 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8001f9a:	e05c      	b.n	8002056 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001f9c:	697a      	ldr	r2, [r7, #20]
 8001f9e:	6a39      	ldr	r1, [r7, #32]
 8001fa0:	68f8      	ldr	r0, [r7, #12]
 8001fa2:	f000 f96b 	bl	800227c <I2C_WaitOnRXNEFlagUntilTimeout>
 8001fa6:	4603      	mov	r3, r0
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d001      	beq.n	8001fb0 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8001fac:	2301      	movs	r3, #1
 8001fae:	e07c      	b.n	80020aa <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fba:	b2d2      	uxtb	r2, r2
 8001fbc:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fc2:	1c5a      	adds	r2, r3, #1
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001fcc:	3b01      	subs	r3, #1
 8001fce:	b29a      	uxth	r2, r3
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001fd8:	b29b      	uxth	r3, r3
 8001fda:	3b01      	subs	r3, #1
 8001fdc:	b29a      	uxth	r2, r3
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001fe6:	b29b      	uxth	r3, r3
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d034      	beq.n	8002056 <HAL_I2C_Master_Receive+0x186>
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d130      	bne.n	8002056 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001ff4:	697b      	ldr	r3, [r7, #20]
 8001ff6:	9300      	str	r3, [sp, #0]
 8001ff8:	6a3b      	ldr	r3, [r7, #32]
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	2180      	movs	r1, #128	; 0x80
 8001ffe:	68f8      	ldr	r0, [r7, #12]
 8002000:	f000 f880 	bl	8002104 <I2C_WaitOnFlagUntilTimeout>
 8002004:	4603      	mov	r3, r0
 8002006:	2b00      	cmp	r3, #0
 8002008:	d001      	beq.n	800200e <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 800200a:	2301      	movs	r3, #1
 800200c:	e04d      	b.n	80020aa <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002012:	b29b      	uxth	r3, r3
 8002014:	2bff      	cmp	r3, #255	; 0xff
 8002016:	d90e      	bls.n	8002036 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	22ff      	movs	r2, #255	; 0xff
 800201c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002022:	b2da      	uxtb	r2, r3
 8002024:	8979      	ldrh	r1, [r7, #10]
 8002026:	2300      	movs	r3, #0
 8002028:	9300      	str	r3, [sp, #0]
 800202a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800202e:	68f8      	ldr	r0, [r7, #12]
 8002030:	f000 fa7e 	bl	8002530 <I2C_TransferConfig>
 8002034:	e00f      	b.n	8002056 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800203a:	b29a      	uxth	r2, r3
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002044:	b2da      	uxtb	r2, r3
 8002046:	8979      	ldrh	r1, [r7, #10]
 8002048:	2300      	movs	r3, #0
 800204a:	9300      	str	r3, [sp, #0]
 800204c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002050:	68f8      	ldr	r0, [r7, #12]
 8002052:	f000 fa6d 	bl	8002530 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800205a:	b29b      	uxth	r3, r3
 800205c:	2b00      	cmp	r3, #0
 800205e:	d19d      	bne.n	8001f9c <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002060:	697a      	ldr	r2, [r7, #20]
 8002062:	6a39      	ldr	r1, [r7, #32]
 8002064:	68f8      	ldr	r0, [r7, #12]
 8002066:	f000 f8cd 	bl	8002204 <I2C_WaitOnSTOPFlagUntilTimeout>
 800206a:	4603      	mov	r3, r0
 800206c:	2b00      	cmp	r3, #0
 800206e:	d001      	beq.n	8002074 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8002070:	2301      	movs	r3, #1
 8002072:	e01a      	b.n	80020aa <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	2220      	movs	r2, #32
 800207a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	6859      	ldr	r1, [r3, #4]
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	681a      	ldr	r2, [r3, #0]
 8002086:	4b0c      	ldr	r3, [pc, #48]	; (80020b8 <HAL_I2C_Master_Receive+0x1e8>)
 8002088:	400b      	ands	r3, r1
 800208a:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	2220      	movs	r2, #32
 8002090:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	2200      	movs	r2, #0
 8002098:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	2200      	movs	r2, #0
 80020a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80020a4:	2300      	movs	r3, #0
 80020a6:	e000      	b.n	80020aa <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 80020a8:	2302      	movs	r3, #2
  }
}
 80020aa:	4618      	mov	r0, r3
 80020ac:	3718      	adds	r7, #24
 80020ae:	46bd      	mov	sp, r7
 80020b0:	bd80      	pop	{r7, pc}
 80020b2:	bf00      	nop
 80020b4:	80002400 	.word	0x80002400
 80020b8:	fe00e800 	.word	0xfe00e800

080020bc <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80020bc:	b480      	push	{r7}
 80020be:	b083      	sub	sp, #12
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	699b      	ldr	r3, [r3, #24]
 80020ca:	f003 0302 	and.w	r3, r3, #2
 80020ce:	2b02      	cmp	r3, #2
 80020d0:	d103      	bne.n	80020da <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	2200      	movs	r2, #0
 80020d8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	699b      	ldr	r3, [r3, #24]
 80020e0:	f003 0301 	and.w	r3, r3, #1
 80020e4:	2b01      	cmp	r3, #1
 80020e6:	d007      	beq.n	80020f8 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	699a      	ldr	r2, [r3, #24]
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	f042 0201 	orr.w	r2, r2, #1
 80020f6:	619a      	str	r2, [r3, #24]
  }
}
 80020f8:	bf00      	nop
 80020fa:	370c      	adds	r7, #12
 80020fc:	46bd      	mov	sp, r7
 80020fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002102:	4770      	bx	lr

08002104 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002104:	b580      	push	{r7, lr}
 8002106:	b084      	sub	sp, #16
 8002108:	af00      	add	r7, sp, #0
 800210a:	60f8      	str	r0, [r7, #12]
 800210c:	60b9      	str	r1, [r7, #8]
 800210e:	603b      	str	r3, [r7, #0]
 8002110:	4613      	mov	r3, r2
 8002112:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002114:	e022      	b.n	800215c <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002116:	683b      	ldr	r3, [r7, #0]
 8002118:	f1b3 3fff 	cmp.w	r3, #4294967295
 800211c:	d01e      	beq.n	800215c <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800211e:	f7fe ff23 	bl	8000f68 <HAL_GetTick>
 8002122:	4602      	mov	r2, r0
 8002124:	69bb      	ldr	r3, [r7, #24]
 8002126:	1ad3      	subs	r3, r2, r3
 8002128:	683a      	ldr	r2, [r7, #0]
 800212a:	429a      	cmp	r2, r3
 800212c:	d302      	bcc.n	8002134 <I2C_WaitOnFlagUntilTimeout+0x30>
 800212e:	683b      	ldr	r3, [r7, #0]
 8002130:	2b00      	cmp	r3, #0
 8002132:	d113      	bne.n	800215c <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002138:	f043 0220 	orr.w	r2, r3, #32
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	2220      	movs	r2, #32
 8002144:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	2200      	movs	r2, #0
 800214c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	2200      	movs	r2, #0
 8002154:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8002158:	2301      	movs	r3, #1
 800215a:	e00f      	b.n	800217c <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	699a      	ldr	r2, [r3, #24]
 8002162:	68bb      	ldr	r3, [r7, #8]
 8002164:	4013      	ands	r3, r2
 8002166:	68ba      	ldr	r2, [r7, #8]
 8002168:	429a      	cmp	r2, r3
 800216a:	bf0c      	ite	eq
 800216c:	2301      	moveq	r3, #1
 800216e:	2300      	movne	r3, #0
 8002170:	b2db      	uxtb	r3, r3
 8002172:	461a      	mov	r2, r3
 8002174:	79fb      	ldrb	r3, [r7, #7]
 8002176:	429a      	cmp	r2, r3
 8002178:	d0cd      	beq.n	8002116 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800217a:	2300      	movs	r3, #0
}
 800217c:	4618      	mov	r0, r3
 800217e:	3710      	adds	r7, #16
 8002180:	46bd      	mov	sp, r7
 8002182:	bd80      	pop	{r7, pc}

08002184 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002184:	b580      	push	{r7, lr}
 8002186:	b084      	sub	sp, #16
 8002188:	af00      	add	r7, sp, #0
 800218a:	60f8      	str	r0, [r7, #12]
 800218c:	60b9      	str	r1, [r7, #8]
 800218e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002190:	e02c      	b.n	80021ec <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002192:	687a      	ldr	r2, [r7, #4]
 8002194:	68b9      	ldr	r1, [r7, #8]
 8002196:	68f8      	ldr	r0, [r7, #12]
 8002198:	f000 f8ea 	bl	8002370 <I2C_IsErrorOccurred>
 800219c:	4603      	mov	r3, r0
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d001      	beq.n	80021a6 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80021a2:	2301      	movs	r3, #1
 80021a4:	e02a      	b.n	80021fc <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80021a6:	68bb      	ldr	r3, [r7, #8]
 80021a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021ac:	d01e      	beq.n	80021ec <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80021ae:	f7fe fedb 	bl	8000f68 <HAL_GetTick>
 80021b2:	4602      	mov	r2, r0
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	1ad3      	subs	r3, r2, r3
 80021b8:	68ba      	ldr	r2, [r7, #8]
 80021ba:	429a      	cmp	r2, r3
 80021bc:	d302      	bcc.n	80021c4 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80021be:	68bb      	ldr	r3, [r7, #8]
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d113      	bne.n	80021ec <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021c8:	f043 0220 	orr.w	r2, r3, #32
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	2220      	movs	r2, #32
 80021d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	2200      	movs	r2, #0
 80021dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	2200      	movs	r2, #0
 80021e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80021e8:	2301      	movs	r3, #1
 80021ea:	e007      	b.n	80021fc <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	699b      	ldr	r3, [r3, #24]
 80021f2:	f003 0302 	and.w	r3, r3, #2
 80021f6:	2b02      	cmp	r3, #2
 80021f8:	d1cb      	bne.n	8002192 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80021fa:	2300      	movs	r3, #0
}
 80021fc:	4618      	mov	r0, r3
 80021fe:	3710      	adds	r7, #16
 8002200:	46bd      	mov	sp, r7
 8002202:	bd80      	pop	{r7, pc}

08002204 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002204:	b580      	push	{r7, lr}
 8002206:	b084      	sub	sp, #16
 8002208:	af00      	add	r7, sp, #0
 800220a:	60f8      	str	r0, [r7, #12]
 800220c:	60b9      	str	r1, [r7, #8]
 800220e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002210:	e028      	b.n	8002264 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002212:	687a      	ldr	r2, [r7, #4]
 8002214:	68b9      	ldr	r1, [r7, #8]
 8002216:	68f8      	ldr	r0, [r7, #12]
 8002218:	f000 f8aa 	bl	8002370 <I2C_IsErrorOccurred>
 800221c:	4603      	mov	r3, r0
 800221e:	2b00      	cmp	r3, #0
 8002220:	d001      	beq.n	8002226 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002222:	2301      	movs	r3, #1
 8002224:	e026      	b.n	8002274 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002226:	f7fe fe9f 	bl	8000f68 <HAL_GetTick>
 800222a:	4602      	mov	r2, r0
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	1ad3      	subs	r3, r2, r3
 8002230:	68ba      	ldr	r2, [r7, #8]
 8002232:	429a      	cmp	r2, r3
 8002234:	d302      	bcc.n	800223c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002236:	68bb      	ldr	r3, [r7, #8]
 8002238:	2b00      	cmp	r3, #0
 800223a:	d113      	bne.n	8002264 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002240:	f043 0220 	orr.w	r2, r3, #32
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	2220      	movs	r2, #32
 800224c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	2200      	movs	r2, #0
 8002254:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	2200      	movs	r2, #0
 800225c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8002260:	2301      	movs	r3, #1
 8002262:	e007      	b.n	8002274 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	699b      	ldr	r3, [r3, #24]
 800226a:	f003 0320 	and.w	r3, r3, #32
 800226e:	2b20      	cmp	r3, #32
 8002270:	d1cf      	bne.n	8002212 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002272:	2300      	movs	r3, #0
}
 8002274:	4618      	mov	r0, r3
 8002276:	3710      	adds	r7, #16
 8002278:	46bd      	mov	sp, r7
 800227a:	bd80      	pop	{r7, pc}

0800227c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800227c:	b580      	push	{r7, lr}
 800227e:	b084      	sub	sp, #16
 8002280:	af00      	add	r7, sp, #0
 8002282:	60f8      	str	r0, [r7, #12]
 8002284:	60b9      	str	r1, [r7, #8]
 8002286:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002288:	e064      	b.n	8002354 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800228a:	687a      	ldr	r2, [r7, #4]
 800228c:	68b9      	ldr	r1, [r7, #8]
 800228e:	68f8      	ldr	r0, [r7, #12]
 8002290:	f000 f86e 	bl	8002370 <I2C_IsErrorOccurred>
 8002294:	4603      	mov	r3, r0
 8002296:	2b00      	cmp	r3, #0
 8002298:	d001      	beq.n	800229e <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800229a:	2301      	movs	r3, #1
 800229c:	e062      	b.n	8002364 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	699b      	ldr	r3, [r3, #24]
 80022a4:	f003 0320 	and.w	r3, r3, #32
 80022a8:	2b20      	cmp	r3, #32
 80022aa:	d138      	bne.n	800231e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	699b      	ldr	r3, [r3, #24]
 80022b2:	f003 0304 	and.w	r3, r3, #4
 80022b6:	2b04      	cmp	r3, #4
 80022b8:	d105      	bne.n	80022c6 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d001      	beq.n	80022c6 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 80022c2:	2300      	movs	r3, #0
 80022c4:	e04e      	b.n	8002364 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	699b      	ldr	r3, [r3, #24]
 80022cc:	f003 0310 	and.w	r3, r3, #16
 80022d0:	2b10      	cmp	r3, #16
 80022d2:	d107      	bne.n	80022e4 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	2210      	movs	r2, #16
 80022da:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	2204      	movs	r2, #4
 80022e0:	645a      	str	r2, [r3, #68]	; 0x44
 80022e2:	e002      	b.n	80022ea <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	2200      	movs	r2, #0
 80022e8:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	2220      	movs	r2, #32
 80022f0:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	6859      	ldr	r1, [r3, #4]
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	681a      	ldr	r2, [r3, #0]
 80022fc:	4b1b      	ldr	r3, [pc, #108]	; (800236c <I2C_WaitOnRXNEFlagUntilTimeout+0xf0>)
 80022fe:	400b      	ands	r3, r1
 8002300:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	2220      	movs	r2, #32
 8002306:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	2200      	movs	r2, #0
 800230e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	2200      	movs	r2, #0
 8002316:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800231a:	2301      	movs	r3, #1
 800231c:	e022      	b.n	8002364 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800231e:	f7fe fe23 	bl	8000f68 <HAL_GetTick>
 8002322:	4602      	mov	r2, r0
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	1ad3      	subs	r3, r2, r3
 8002328:	68ba      	ldr	r2, [r7, #8]
 800232a:	429a      	cmp	r2, r3
 800232c:	d302      	bcc.n	8002334 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 800232e:	68bb      	ldr	r3, [r7, #8]
 8002330:	2b00      	cmp	r3, #0
 8002332:	d10f      	bne.n	8002354 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002338:	f043 0220 	orr.w	r2, r3, #32
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	2220      	movs	r2, #32
 8002344:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	2200      	movs	r2, #0
 800234c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8002350:	2301      	movs	r3, #1
 8002352:	e007      	b.n	8002364 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	699b      	ldr	r3, [r3, #24]
 800235a:	f003 0304 	and.w	r3, r3, #4
 800235e:	2b04      	cmp	r3, #4
 8002360:	d193      	bne.n	800228a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002362:	2300      	movs	r3, #0
}
 8002364:	4618      	mov	r0, r3
 8002366:	3710      	adds	r7, #16
 8002368:	46bd      	mov	sp, r7
 800236a:	bd80      	pop	{r7, pc}
 800236c:	fe00e800 	.word	0xfe00e800

08002370 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002370:	b580      	push	{r7, lr}
 8002372:	b08a      	sub	sp, #40	; 0x28
 8002374:	af00      	add	r7, sp, #0
 8002376:	60f8      	str	r0, [r7, #12]
 8002378:	60b9      	str	r1, [r7, #8]
 800237a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800237c:	2300      	movs	r3, #0
 800237e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	699b      	ldr	r3, [r3, #24]
 8002388:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800238a:	2300      	movs	r3, #0
 800238c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002392:	69bb      	ldr	r3, [r7, #24]
 8002394:	f003 0310 	and.w	r3, r3, #16
 8002398:	2b00      	cmp	r3, #0
 800239a:	d068      	beq.n	800246e <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	2210      	movs	r2, #16
 80023a2:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80023a4:	e049      	b.n	800243a <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80023a6:	68bb      	ldr	r3, [r7, #8]
 80023a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023ac:	d045      	beq.n	800243a <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80023ae:	f7fe fddb 	bl	8000f68 <HAL_GetTick>
 80023b2:	4602      	mov	r2, r0
 80023b4:	69fb      	ldr	r3, [r7, #28]
 80023b6:	1ad3      	subs	r3, r2, r3
 80023b8:	68ba      	ldr	r2, [r7, #8]
 80023ba:	429a      	cmp	r2, r3
 80023bc:	d302      	bcc.n	80023c4 <I2C_IsErrorOccurred+0x54>
 80023be:	68bb      	ldr	r3, [r7, #8]
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d13a      	bne.n	800243a <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	685b      	ldr	r3, [r3, #4]
 80023ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80023ce:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80023d6:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	699b      	ldr	r3, [r3, #24]
 80023de:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80023e2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80023e6:	d121      	bne.n	800242c <I2C_IsErrorOccurred+0xbc>
 80023e8:	697b      	ldr	r3, [r7, #20]
 80023ea:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80023ee:	d01d      	beq.n	800242c <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80023f0:	7cfb      	ldrb	r3, [r7, #19]
 80023f2:	2b20      	cmp	r3, #32
 80023f4:	d01a      	beq.n	800242c <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	685a      	ldr	r2, [r3, #4]
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002404:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8002406:	f7fe fdaf 	bl	8000f68 <HAL_GetTick>
 800240a:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800240c:	e00e      	b.n	800242c <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800240e:	f7fe fdab 	bl	8000f68 <HAL_GetTick>
 8002412:	4602      	mov	r2, r0
 8002414:	69fb      	ldr	r3, [r7, #28]
 8002416:	1ad3      	subs	r3, r2, r3
 8002418:	2b19      	cmp	r3, #25
 800241a:	d907      	bls.n	800242c <I2C_IsErrorOccurred+0xbc>
            {
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 800241c:	6a3b      	ldr	r3, [r7, #32]
 800241e:	f043 0320 	orr.w	r3, r3, #32
 8002422:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8002424:	2301      	movs	r3, #1
 8002426:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 800242a:	e006      	b.n	800243a <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	699b      	ldr	r3, [r3, #24]
 8002432:	f003 0320 	and.w	r3, r3, #32
 8002436:	2b20      	cmp	r3, #32
 8002438:	d1e9      	bne.n	800240e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	699b      	ldr	r3, [r3, #24]
 8002440:	f003 0320 	and.w	r3, r3, #32
 8002444:	2b20      	cmp	r3, #32
 8002446:	d003      	beq.n	8002450 <I2C_IsErrorOccurred+0xe0>
 8002448:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800244c:	2b00      	cmp	r3, #0
 800244e:	d0aa      	beq.n	80023a6 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8002450:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002454:	2b00      	cmp	r3, #0
 8002456:	d103      	bne.n	8002460 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	2220      	movs	r2, #32
 800245e:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8002460:	6a3b      	ldr	r3, [r7, #32]
 8002462:	f043 0304 	orr.w	r3, r3, #4
 8002466:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8002468:	2301      	movs	r3, #1
 800246a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	699b      	ldr	r3, [r3, #24]
 8002474:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002476:	69bb      	ldr	r3, [r7, #24]
 8002478:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800247c:	2b00      	cmp	r3, #0
 800247e:	d00b      	beq.n	8002498 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8002480:	6a3b      	ldr	r3, [r7, #32]
 8002482:	f043 0301 	orr.w	r3, r3, #1
 8002486:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002490:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002492:	2301      	movs	r3, #1
 8002494:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002498:	69bb      	ldr	r3, [r7, #24]
 800249a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d00b      	beq.n	80024ba <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80024a2:	6a3b      	ldr	r3, [r7, #32]
 80024a4:	f043 0308 	orr.w	r3, r3, #8
 80024a8:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80024b2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80024b4:	2301      	movs	r3, #1
 80024b6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80024ba:	69bb      	ldr	r3, [r7, #24]
 80024bc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d00b      	beq.n	80024dc <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80024c4:	6a3b      	ldr	r3, [r7, #32]
 80024c6:	f043 0302 	orr.w	r3, r3, #2
 80024ca:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80024d4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80024d6:	2301      	movs	r3, #1
 80024d8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 80024dc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d01c      	beq.n	800251e <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80024e4:	68f8      	ldr	r0, [r7, #12]
 80024e6:	f7ff fde9 	bl	80020bc <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	6859      	ldr	r1, [r3, #4]
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	681a      	ldr	r2, [r3, #0]
 80024f4:	4b0d      	ldr	r3, [pc, #52]	; (800252c <I2C_IsErrorOccurred+0x1bc>)
 80024f6:	400b      	ands	r3, r1
 80024f8:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80024fe:	6a3b      	ldr	r3, [r7, #32]
 8002500:	431a      	orrs	r2, r3
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	2220      	movs	r2, #32
 800250a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	2200      	movs	r2, #0
 8002512:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	2200      	movs	r2, #0
 800251a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 800251e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8002522:	4618      	mov	r0, r3
 8002524:	3728      	adds	r7, #40	; 0x28
 8002526:	46bd      	mov	sp, r7
 8002528:	bd80      	pop	{r7, pc}
 800252a:	bf00      	nop
 800252c:	fe00e800 	.word	0xfe00e800

08002530 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002530:	b580      	push	{r7, lr}
 8002532:	b086      	sub	sp, #24
 8002534:	af00      	add	r7, sp, #0
 8002536:	60f8      	str	r0, [r7, #12]
 8002538:	607b      	str	r3, [r7, #4]
 800253a:	460b      	mov	r3, r1
 800253c:	817b      	strh	r3, [r7, #10]
 800253e:	4613      	mov	r3, r2
 8002540:	727b      	strb	r3, [r7, #9]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	4a2f      	ldr	r2, [pc, #188]	; (8002604 <I2C_TransferConfig+0xd4>)
 8002548:	4293      	cmp	r3, r2
 800254a:	d013      	beq.n	8002574 <I2C_TransferConfig+0x44>
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	4a2d      	ldr	r2, [pc, #180]	; (8002608 <I2C_TransferConfig+0xd8>)
 8002552:	4293      	cmp	r3, r2
 8002554:	d00e      	beq.n	8002574 <I2C_TransferConfig+0x44>
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	4a2c      	ldr	r2, [pc, #176]	; (800260c <I2C_TransferConfig+0xdc>)
 800255c:	4293      	cmp	r3, r2
 800255e:	d009      	beq.n	8002574 <I2C_TransferConfig+0x44>
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	4a2a      	ldr	r2, [pc, #168]	; (8002610 <I2C_TransferConfig+0xe0>)
 8002566:	4293      	cmp	r3, r2
 8002568:	d004      	beq.n	8002574 <I2C_TransferConfig+0x44>
 800256a:	f641 3147 	movw	r1, #6983	; 0x1b47
 800256e:	4829      	ldr	r0, [pc, #164]	; (8002614 <I2C_TransferConfig+0xe4>)
 8002570:	f7fe faa5 	bl	8000abe <assert_failed>
  assert_param(IS_TRANSFER_MODE(Mode));
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800257a:	d00b      	beq.n	8002594 <I2C_TransferConfig+0x64>
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002582:	d007      	beq.n	8002594 <I2C_TransferConfig+0x64>
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	2b00      	cmp	r3, #0
 8002588:	d004      	beq.n	8002594 <I2C_TransferConfig+0x64>
 800258a:	f641 3148 	movw	r1, #6984	; 0x1b48
 800258e:	4821      	ldr	r0, [pc, #132]	; (8002614 <I2C_TransferConfig+0xe4>)
 8002590:	f7fe fa95 	bl	8000abe <assert_failed>
  assert_param(IS_TRANSFER_REQUEST(Request));
 8002594:	6a3b      	ldr	r3, [r7, #32]
 8002596:	4a20      	ldr	r2, [pc, #128]	; (8002618 <I2C_TransferConfig+0xe8>)
 8002598:	4293      	cmp	r3, r2
 800259a:	d00f      	beq.n	80025bc <I2C_TransferConfig+0x8c>
 800259c:	6a3b      	ldr	r3, [r7, #32]
 800259e:	4a1f      	ldr	r2, [pc, #124]	; (800261c <I2C_TransferConfig+0xec>)
 80025a0:	4293      	cmp	r3, r2
 80025a2:	d00b      	beq.n	80025bc <I2C_TransferConfig+0x8c>
 80025a4:	6a3b      	ldr	r3, [r7, #32]
 80025a6:	4a1e      	ldr	r2, [pc, #120]	; (8002620 <I2C_TransferConfig+0xf0>)
 80025a8:	4293      	cmp	r3, r2
 80025aa:	d007      	beq.n	80025bc <I2C_TransferConfig+0x8c>
 80025ac:	6a3b      	ldr	r3, [r7, #32]
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d004      	beq.n	80025bc <I2C_TransferConfig+0x8c>
 80025b2:	f641 3149 	movw	r1, #6985	; 0x1b49
 80025b6:	4817      	ldr	r0, [pc, #92]	; (8002614 <I2C_TransferConfig+0xe4>)
 80025b8:	f7fe fa81 	bl	8000abe <assert_failed>

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80025bc:	897b      	ldrh	r3, [r7, #10]
 80025be:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80025c2:	7a7b      	ldrb	r3, [r7, #9]
 80025c4:	041b      	lsls	r3, r3, #16
 80025c6:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80025ca:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80025d0:	6a3b      	ldr	r3, [r7, #32]
 80025d2:	4313      	orrs	r3, r2
 80025d4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80025d8:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	685a      	ldr	r2, [r3, #4]
 80025e0:	6a3b      	ldr	r3, [r7, #32]
 80025e2:	0d5b      	lsrs	r3, r3, #21
 80025e4:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80025e8:	4b0e      	ldr	r3, [pc, #56]	; (8002624 <I2C_TransferConfig+0xf4>)
 80025ea:	430b      	orrs	r3, r1
 80025ec:	43db      	mvns	r3, r3
 80025ee:	ea02 0103 	and.w	r1, r2, r3
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	697a      	ldr	r2, [r7, #20]
 80025f8:	430a      	orrs	r2, r1
 80025fa:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80025fc:	bf00      	nop
 80025fe:	3718      	adds	r7, #24
 8002600:	46bd      	mov	sp, r7
 8002602:	bd80      	pop	{r7, pc}
 8002604:	40005400 	.word	0x40005400
 8002608:	40005800 	.word	0x40005800
 800260c:	40005c00 	.word	0x40005c00
 8002610:	40006000 	.word	0x40006000
 8002614:	0800bd44 	.word	0x0800bd44
 8002618:	80004000 	.word	0x80004000
 800261c:	80002400 	.word	0x80002400
 8002620:	80002000 	.word	0x80002000
 8002624:	03ff63ff 	.word	0x03ff63ff

08002628 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002628:	b580      	push	{r7, lr}
 800262a:	b082      	sub	sp, #8
 800262c:	af00      	add	r7, sp, #0
 800262e:	6078      	str	r0, [r7, #4]
 8002630:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	4a32      	ldr	r2, [pc, #200]	; (8002700 <HAL_I2CEx_ConfigAnalogFilter+0xd8>)
 8002638:	4293      	cmp	r3, r2
 800263a:	d012      	beq.n	8002662 <HAL_I2CEx_ConfigAnalogFilter+0x3a>
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	4a30      	ldr	r2, [pc, #192]	; (8002704 <HAL_I2CEx_ConfigAnalogFilter+0xdc>)
 8002642:	4293      	cmp	r3, r2
 8002644:	d00d      	beq.n	8002662 <HAL_I2CEx_ConfigAnalogFilter+0x3a>
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	4a2f      	ldr	r2, [pc, #188]	; (8002708 <HAL_I2CEx_ConfigAnalogFilter+0xe0>)
 800264c:	4293      	cmp	r3, r2
 800264e:	d008      	beq.n	8002662 <HAL_I2CEx_ConfigAnalogFilter+0x3a>
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	4a2d      	ldr	r2, [pc, #180]	; (800270c <HAL_I2CEx_ConfigAnalogFilter+0xe4>)
 8002656:	4293      	cmp	r3, r2
 8002658:	d003      	beq.n	8002662 <HAL_I2CEx_ConfigAnalogFilter+0x3a>
 800265a:	215e      	movs	r1, #94	; 0x5e
 800265c:	482c      	ldr	r0, [pc, #176]	; (8002710 <HAL_I2CEx_ConfigAnalogFilter+0xe8>)
 800265e:	f7fe fa2e 	bl	8000abe <assert_failed>
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));
 8002662:	683b      	ldr	r3, [r7, #0]
 8002664:	2b00      	cmp	r3, #0
 8002666:	d007      	beq.n	8002678 <HAL_I2CEx_ConfigAnalogFilter+0x50>
 8002668:	683b      	ldr	r3, [r7, #0]
 800266a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800266e:	d003      	beq.n	8002678 <HAL_I2CEx_ConfigAnalogFilter+0x50>
 8002670:	215f      	movs	r1, #95	; 0x5f
 8002672:	4827      	ldr	r0, [pc, #156]	; (8002710 <HAL_I2CEx_ConfigAnalogFilter+0xe8>)
 8002674:	f7fe fa23 	bl	8000abe <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800267e:	b2db      	uxtb	r3, r3
 8002680:	2b20      	cmp	r3, #32
 8002682:	d138      	bne.n	80026f6 <HAL_I2CEx_ConfigAnalogFilter+0xce>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800268a:	2b01      	cmp	r3, #1
 800268c:	d101      	bne.n	8002692 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
 800268e:	2302      	movs	r3, #2
 8002690:	e032      	b.n	80026f8 <HAL_I2CEx_ConfigAnalogFilter+0xd0>
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	2201      	movs	r2, #1
 8002696:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	2224      	movs	r2, #36	; 0x24
 800269e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	681a      	ldr	r2, [r3, #0]
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f022 0201 	bic.w	r2, r2, #1
 80026b0:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	681a      	ldr	r2, [r3, #0]
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80026c0:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	6819      	ldr	r1, [r3, #0]
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	683a      	ldr	r2, [r7, #0]
 80026ce:	430a      	orrs	r2, r1
 80026d0:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	681a      	ldr	r2, [r3, #0]
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f042 0201 	orr.w	r2, r2, #1
 80026e0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	2220      	movs	r2, #32
 80026e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	2200      	movs	r2, #0
 80026ee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80026f2:	2300      	movs	r3, #0
 80026f4:	e000      	b.n	80026f8 <HAL_I2CEx_ConfigAnalogFilter+0xd0>
  }
  else
  {
    return HAL_BUSY;
 80026f6:	2302      	movs	r3, #2
  }
}
 80026f8:	4618      	mov	r0, r3
 80026fa:	3708      	adds	r7, #8
 80026fc:	46bd      	mov	sp, r7
 80026fe:	bd80      	pop	{r7, pc}
 8002700:	40005400 	.word	0x40005400
 8002704:	40005800 	.word	0x40005800
 8002708:	40005c00 	.word	0x40005c00
 800270c:	40006000 	.word	0x40006000
 8002710:	0800bd7c 	.word	0x0800bd7c

08002714 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002714:	b580      	push	{r7, lr}
 8002716:	b084      	sub	sp, #16
 8002718:	af00      	add	r7, sp, #0
 800271a:	6078      	str	r0, [r7, #4]
 800271c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg;

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	4a31      	ldr	r2, [pc, #196]	; (80027e8 <HAL_I2CEx_ConfigDigitalFilter+0xd4>)
 8002724:	4293      	cmp	r3, r2
 8002726:	d012      	beq.n	800274e <HAL_I2CEx_ConfigDigitalFilter+0x3a>
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	4a2f      	ldr	r2, [pc, #188]	; (80027ec <HAL_I2CEx_ConfigDigitalFilter+0xd8>)
 800272e:	4293      	cmp	r3, r2
 8002730:	d00d      	beq.n	800274e <HAL_I2CEx_ConfigDigitalFilter+0x3a>
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	4a2e      	ldr	r2, [pc, #184]	; (80027f0 <HAL_I2CEx_ConfigDigitalFilter+0xdc>)
 8002738:	4293      	cmp	r3, r2
 800273a:	d008      	beq.n	800274e <HAL_I2CEx_ConfigDigitalFilter+0x3a>
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	4a2c      	ldr	r2, [pc, #176]	; (80027f4 <HAL_I2CEx_ConfigDigitalFilter+0xe0>)
 8002742:	4293      	cmp	r3, r2
 8002744:	d003      	beq.n	800274e <HAL_I2CEx_ConfigDigitalFilter+0x3a>
 8002746:	218c      	movs	r1, #140	; 0x8c
 8002748:	482b      	ldr	r0, [pc, #172]	; (80027f8 <HAL_I2CEx_ConfigDigitalFilter+0xe4>)
 800274a:	f7fe f9b8 	bl	8000abe <assert_failed>
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));
 800274e:	683b      	ldr	r3, [r7, #0]
 8002750:	2b0f      	cmp	r3, #15
 8002752:	d903      	bls.n	800275c <HAL_I2CEx_ConfigDigitalFilter+0x48>
 8002754:	218d      	movs	r1, #141	; 0x8d
 8002756:	4828      	ldr	r0, [pc, #160]	; (80027f8 <HAL_I2CEx_ConfigDigitalFilter+0xe4>)
 8002758:	f7fe f9b1 	bl	8000abe <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_READY)
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002762:	b2db      	uxtb	r3, r3
 8002764:	2b20      	cmp	r3, #32
 8002766:	d139      	bne.n	80027dc <HAL_I2CEx_ConfigDigitalFilter+0xc8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800276e:	2b01      	cmp	r3, #1
 8002770:	d101      	bne.n	8002776 <HAL_I2CEx_ConfigDigitalFilter+0x62>
 8002772:	2302      	movs	r3, #2
 8002774:	e033      	b.n	80027de <HAL_I2CEx_ConfigDigitalFilter+0xca>
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	2201      	movs	r2, #1
 800277a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	2224      	movs	r2, #36	; 0x24
 8002782:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	681a      	ldr	r2, [r3, #0]
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f022 0201 	bic.w	r2, r2, #1
 8002794:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80027a4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80027a6:	683b      	ldr	r3, [r7, #0]
 80027a8:	021b      	lsls	r3, r3, #8
 80027aa:	68fa      	ldr	r2, [r7, #12]
 80027ac:	4313      	orrs	r3, r2
 80027ae:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	68fa      	ldr	r2, [r7, #12]
 80027b6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	681a      	ldr	r2, [r3, #0]
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f042 0201 	orr.w	r2, r2, #1
 80027c6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	2220      	movs	r2, #32
 80027cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	2200      	movs	r2, #0
 80027d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80027d8:	2300      	movs	r3, #0
 80027da:	e000      	b.n	80027de <HAL_I2CEx_ConfigDigitalFilter+0xca>
  }
  else
  {
    return HAL_BUSY;
 80027dc:	2302      	movs	r3, #2
  }
}
 80027de:	4618      	mov	r0, r3
 80027e0:	3710      	adds	r7, #16
 80027e2:	46bd      	mov	sp, r7
 80027e4:	bd80      	pop	{r7, pc}
 80027e6:	bf00      	nop
 80027e8:	40005400 	.word	0x40005400
 80027ec:	40005800 	.word	0x40005800
 80027f0:	40005c00 	.word	0x40005c00
 80027f4:	40006000 	.word	0x40006000
 80027f8:	0800bd7c 	.word	0x0800bd7c

080027fc <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80027fc:	b580      	push	{r7, lr}
 80027fe:	b082      	sub	sp, #8
 8002800:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8002802:	2300      	movs	r3, #0
 8002804:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8002806:	4b23      	ldr	r3, [pc, #140]	; (8002894 <HAL_PWREx_EnableOverDrive+0x98>)
 8002808:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800280a:	4a22      	ldr	r2, [pc, #136]	; (8002894 <HAL_PWREx_EnableOverDrive+0x98>)
 800280c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002810:	6413      	str	r3, [r2, #64]	; 0x40
 8002812:	4b20      	ldr	r3, [pc, #128]	; (8002894 <HAL_PWREx_EnableOverDrive+0x98>)
 8002814:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002816:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800281a:	603b      	str	r3, [r7, #0]
 800281c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800281e:	4b1e      	ldr	r3, [pc, #120]	; (8002898 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	4a1d      	ldr	r2, [pc, #116]	; (8002898 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002824:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002828:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800282a:	f7fe fb9d 	bl	8000f68 <HAL_GetTick>
 800282e:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002830:	e009      	b.n	8002846 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002832:	f7fe fb99 	bl	8000f68 <HAL_GetTick>
 8002836:	4602      	mov	r2, r0
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	1ad3      	subs	r3, r2, r3
 800283c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002840:	d901      	bls.n	8002846 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8002842:	2303      	movs	r3, #3
 8002844:	e022      	b.n	800288c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002846:	4b14      	ldr	r3, [pc, #80]	; (8002898 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002848:	685b      	ldr	r3, [r3, #4]
 800284a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800284e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002852:	d1ee      	bne.n	8002832 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002854:	4b10      	ldr	r3, [pc, #64]	; (8002898 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	4a0f      	ldr	r2, [pc, #60]	; (8002898 <HAL_PWREx_EnableOverDrive+0x9c>)
 800285a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800285e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002860:	f7fe fb82 	bl	8000f68 <HAL_GetTick>
 8002864:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002866:	e009      	b.n	800287c <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002868:	f7fe fb7e 	bl	8000f68 <HAL_GetTick>
 800286c:	4602      	mov	r2, r0
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	1ad3      	subs	r3, r2, r3
 8002872:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002876:	d901      	bls.n	800287c <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8002878:	2303      	movs	r3, #3
 800287a:	e007      	b.n	800288c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800287c:	4b06      	ldr	r3, [pc, #24]	; (8002898 <HAL_PWREx_EnableOverDrive+0x9c>)
 800287e:	685b      	ldr	r3, [r3, #4]
 8002880:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002884:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002888:	d1ee      	bne.n	8002868 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800288a:	2300      	movs	r3, #0
}
 800288c:	4618      	mov	r0, r3
 800288e:	3708      	adds	r7, #8
 8002890:	46bd      	mov	sp, r7
 8002892:	bd80      	pop	{r7, pc}
 8002894:	40023800 	.word	0x40023800
 8002898:	40007000 	.word	0x40007000

0800289c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800289c:	b580      	push	{r7, lr}
 800289e:	b086      	sub	sp, #24
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80028a4:	2300      	movs	r3, #0
 80028a6:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d101      	bne.n	80028b2 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80028ae:	2301      	movs	r3, #1
 80028b0:	e345      	b.n	8002f3e <HAL_RCC_OscConfig+0x6a2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	2b0f      	cmp	r3, #15
 80028b8:	d904      	bls.n	80028c4 <HAL_RCC_OscConfig+0x28>
 80028ba:	f240 1163 	movw	r1, #355	; 0x163
 80028be:	4892      	ldr	r0, [pc, #584]	; (8002b08 <HAL_RCC_OscConfig+0x26c>)
 80028c0:	f7fe f8fd 	bl	8000abe <assert_failed>

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	f003 0301 	and.w	r3, r3, #1
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	f000 809a 	beq.w	8002a06 <HAL_RCC_OscConfig+0x16a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	685b      	ldr	r3, [r3, #4]
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d00e      	beq.n	80028f8 <HAL_RCC_OscConfig+0x5c>
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	685b      	ldr	r3, [r3, #4]
 80028de:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80028e2:	d009      	beq.n	80028f8 <HAL_RCC_OscConfig+0x5c>
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	685b      	ldr	r3, [r3, #4]
 80028e8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80028ec:	d004      	beq.n	80028f8 <HAL_RCC_OscConfig+0x5c>
 80028ee:	f240 1169 	movw	r1, #361	; 0x169
 80028f2:	4885      	ldr	r0, [pc, #532]	; (8002b08 <HAL_RCC_OscConfig+0x26c>)
 80028f4:	f7fe f8e3 	bl	8000abe <assert_failed>
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80028f8:	4b84      	ldr	r3, [pc, #528]	; (8002b0c <HAL_RCC_OscConfig+0x270>)
 80028fa:	689b      	ldr	r3, [r3, #8]
 80028fc:	f003 030c 	and.w	r3, r3, #12
 8002900:	2b04      	cmp	r3, #4
 8002902:	d00c      	beq.n	800291e <HAL_RCC_OscConfig+0x82>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002904:	4b81      	ldr	r3, [pc, #516]	; (8002b0c <HAL_RCC_OscConfig+0x270>)
 8002906:	689b      	ldr	r3, [r3, #8]
 8002908:	f003 030c 	and.w	r3, r3, #12
 800290c:	2b08      	cmp	r3, #8
 800290e:	d112      	bne.n	8002936 <HAL_RCC_OscConfig+0x9a>
 8002910:	4b7e      	ldr	r3, [pc, #504]	; (8002b0c <HAL_RCC_OscConfig+0x270>)
 8002912:	685b      	ldr	r3, [r3, #4]
 8002914:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002918:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800291c:	d10b      	bne.n	8002936 <HAL_RCC_OscConfig+0x9a>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800291e:	4b7b      	ldr	r3, [pc, #492]	; (8002b0c <HAL_RCC_OscConfig+0x270>)
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002926:	2b00      	cmp	r3, #0
 8002928:	d06c      	beq.n	8002a04 <HAL_RCC_OscConfig+0x168>
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	685b      	ldr	r3, [r3, #4]
 800292e:	2b00      	cmp	r3, #0
 8002930:	d168      	bne.n	8002a04 <HAL_RCC_OscConfig+0x168>
      {
        return HAL_ERROR;
 8002932:	2301      	movs	r3, #1
 8002934:	e303      	b.n	8002f3e <HAL_RCC_OscConfig+0x6a2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	685b      	ldr	r3, [r3, #4]
 800293a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800293e:	d106      	bne.n	800294e <HAL_RCC_OscConfig+0xb2>
 8002940:	4b72      	ldr	r3, [pc, #456]	; (8002b0c <HAL_RCC_OscConfig+0x270>)
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	4a71      	ldr	r2, [pc, #452]	; (8002b0c <HAL_RCC_OscConfig+0x270>)
 8002946:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800294a:	6013      	str	r3, [r2, #0]
 800294c:	e02e      	b.n	80029ac <HAL_RCC_OscConfig+0x110>
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	685b      	ldr	r3, [r3, #4]
 8002952:	2b00      	cmp	r3, #0
 8002954:	d10c      	bne.n	8002970 <HAL_RCC_OscConfig+0xd4>
 8002956:	4b6d      	ldr	r3, [pc, #436]	; (8002b0c <HAL_RCC_OscConfig+0x270>)
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	4a6c      	ldr	r2, [pc, #432]	; (8002b0c <HAL_RCC_OscConfig+0x270>)
 800295c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002960:	6013      	str	r3, [r2, #0]
 8002962:	4b6a      	ldr	r3, [pc, #424]	; (8002b0c <HAL_RCC_OscConfig+0x270>)
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	4a69      	ldr	r2, [pc, #420]	; (8002b0c <HAL_RCC_OscConfig+0x270>)
 8002968:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800296c:	6013      	str	r3, [r2, #0]
 800296e:	e01d      	b.n	80029ac <HAL_RCC_OscConfig+0x110>
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	685b      	ldr	r3, [r3, #4]
 8002974:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002978:	d10c      	bne.n	8002994 <HAL_RCC_OscConfig+0xf8>
 800297a:	4b64      	ldr	r3, [pc, #400]	; (8002b0c <HAL_RCC_OscConfig+0x270>)
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	4a63      	ldr	r2, [pc, #396]	; (8002b0c <HAL_RCC_OscConfig+0x270>)
 8002980:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002984:	6013      	str	r3, [r2, #0]
 8002986:	4b61      	ldr	r3, [pc, #388]	; (8002b0c <HAL_RCC_OscConfig+0x270>)
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	4a60      	ldr	r2, [pc, #384]	; (8002b0c <HAL_RCC_OscConfig+0x270>)
 800298c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002990:	6013      	str	r3, [r2, #0]
 8002992:	e00b      	b.n	80029ac <HAL_RCC_OscConfig+0x110>
 8002994:	4b5d      	ldr	r3, [pc, #372]	; (8002b0c <HAL_RCC_OscConfig+0x270>)
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	4a5c      	ldr	r2, [pc, #368]	; (8002b0c <HAL_RCC_OscConfig+0x270>)
 800299a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800299e:	6013      	str	r3, [r2, #0]
 80029a0:	4b5a      	ldr	r3, [pc, #360]	; (8002b0c <HAL_RCC_OscConfig+0x270>)
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	4a59      	ldr	r2, [pc, #356]	; (8002b0c <HAL_RCC_OscConfig+0x270>)
 80029a6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80029aa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	685b      	ldr	r3, [r3, #4]
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d013      	beq.n	80029dc <HAL_RCC_OscConfig+0x140>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029b4:	f7fe fad8 	bl	8000f68 <HAL_GetTick>
 80029b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029ba:	e008      	b.n	80029ce <HAL_RCC_OscConfig+0x132>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80029bc:	f7fe fad4 	bl	8000f68 <HAL_GetTick>
 80029c0:	4602      	mov	r2, r0
 80029c2:	693b      	ldr	r3, [r7, #16]
 80029c4:	1ad3      	subs	r3, r2, r3
 80029c6:	2b64      	cmp	r3, #100	; 0x64
 80029c8:	d901      	bls.n	80029ce <HAL_RCC_OscConfig+0x132>
          {
            return HAL_TIMEOUT;
 80029ca:	2303      	movs	r3, #3
 80029cc:	e2b7      	b.n	8002f3e <HAL_RCC_OscConfig+0x6a2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029ce:	4b4f      	ldr	r3, [pc, #316]	; (8002b0c <HAL_RCC_OscConfig+0x270>)
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d0f0      	beq.n	80029bc <HAL_RCC_OscConfig+0x120>
 80029da:	e014      	b.n	8002a06 <HAL_RCC_OscConfig+0x16a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029dc:	f7fe fac4 	bl	8000f68 <HAL_GetTick>
 80029e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80029e2:	e008      	b.n	80029f6 <HAL_RCC_OscConfig+0x15a>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80029e4:	f7fe fac0 	bl	8000f68 <HAL_GetTick>
 80029e8:	4602      	mov	r2, r0
 80029ea:	693b      	ldr	r3, [r7, #16]
 80029ec:	1ad3      	subs	r3, r2, r3
 80029ee:	2b64      	cmp	r3, #100	; 0x64
 80029f0:	d901      	bls.n	80029f6 <HAL_RCC_OscConfig+0x15a>
          {
            return HAL_TIMEOUT;
 80029f2:	2303      	movs	r3, #3
 80029f4:	e2a3      	b.n	8002f3e <HAL_RCC_OscConfig+0x6a2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80029f6:	4b45      	ldr	r3, [pc, #276]	; (8002b0c <HAL_RCC_OscConfig+0x270>)
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d1f0      	bne.n	80029e4 <HAL_RCC_OscConfig+0x148>
 8002a02:	e000      	b.n	8002a06 <HAL_RCC_OscConfig+0x16a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a04:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	f003 0302 	and.w	r3, r3, #2
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	f000 8084 	beq.w	8002b1c <HAL_RCC_OscConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	68db      	ldr	r3, [r3, #12]
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d008      	beq.n	8002a2e <HAL_RCC_OscConfig+0x192>
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	68db      	ldr	r3, [r3, #12]
 8002a20:	2b01      	cmp	r3, #1
 8002a22:	d004      	beq.n	8002a2e <HAL_RCC_OscConfig+0x192>
 8002a24:	f240 119b 	movw	r1, #411	; 0x19b
 8002a28:	4837      	ldr	r0, [pc, #220]	; (8002b08 <HAL_RCC_OscConfig+0x26c>)
 8002a2a:	f7fe f848 	bl	8000abe <assert_failed>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	691b      	ldr	r3, [r3, #16]
 8002a32:	2b1f      	cmp	r3, #31
 8002a34:	d904      	bls.n	8002a40 <HAL_RCC_OscConfig+0x1a4>
 8002a36:	f44f 71ce 	mov.w	r1, #412	; 0x19c
 8002a3a:	4833      	ldr	r0, [pc, #204]	; (8002b08 <HAL_RCC_OscConfig+0x26c>)
 8002a3c:	f7fe f83f 	bl	8000abe <assert_failed>

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002a40:	4b32      	ldr	r3, [pc, #200]	; (8002b0c <HAL_RCC_OscConfig+0x270>)
 8002a42:	689b      	ldr	r3, [r3, #8]
 8002a44:	f003 030c 	and.w	r3, r3, #12
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d00b      	beq.n	8002a64 <HAL_RCC_OscConfig+0x1c8>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002a4c:	4b2f      	ldr	r3, [pc, #188]	; (8002b0c <HAL_RCC_OscConfig+0x270>)
 8002a4e:	689b      	ldr	r3, [r3, #8]
 8002a50:	f003 030c 	and.w	r3, r3, #12
 8002a54:	2b08      	cmp	r3, #8
 8002a56:	d11c      	bne.n	8002a92 <HAL_RCC_OscConfig+0x1f6>
 8002a58:	4b2c      	ldr	r3, [pc, #176]	; (8002b0c <HAL_RCC_OscConfig+0x270>)
 8002a5a:	685b      	ldr	r3, [r3, #4]
 8002a5c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d116      	bne.n	8002a92 <HAL_RCC_OscConfig+0x1f6>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a64:	4b29      	ldr	r3, [pc, #164]	; (8002b0c <HAL_RCC_OscConfig+0x270>)
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f003 0302 	and.w	r3, r3, #2
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d005      	beq.n	8002a7c <HAL_RCC_OscConfig+0x1e0>
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	68db      	ldr	r3, [r3, #12]
 8002a74:	2b01      	cmp	r3, #1
 8002a76:	d001      	beq.n	8002a7c <HAL_RCC_OscConfig+0x1e0>
      {
        return HAL_ERROR;
 8002a78:	2301      	movs	r3, #1
 8002a7a:	e260      	b.n	8002f3e <HAL_RCC_OscConfig+0x6a2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a7c:	4b23      	ldr	r3, [pc, #140]	; (8002b0c <HAL_RCC_OscConfig+0x270>)
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	691b      	ldr	r3, [r3, #16]
 8002a88:	00db      	lsls	r3, r3, #3
 8002a8a:	4920      	ldr	r1, [pc, #128]	; (8002b0c <HAL_RCC_OscConfig+0x270>)
 8002a8c:	4313      	orrs	r3, r2
 8002a8e:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a90:	e044      	b.n	8002b1c <HAL_RCC_OscConfig+0x280>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	68db      	ldr	r3, [r3, #12]
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d023      	beq.n	8002ae2 <HAL_RCC_OscConfig+0x246>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002a9a:	4b1c      	ldr	r3, [pc, #112]	; (8002b0c <HAL_RCC_OscConfig+0x270>)
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	4a1b      	ldr	r2, [pc, #108]	; (8002b0c <HAL_RCC_OscConfig+0x270>)
 8002aa0:	f043 0301 	orr.w	r3, r3, #1
 8002aa4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002aa6:	f7fe fa5f 	bl	8000f68 <HAL_GetTick>
 8002aaa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002aac:	e008      	b.n	8002ac0 <HAL_RCC_OscConfig+0x224>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002aae:	f7fe fa5b 	bl	8000f68 <HAL_GetTick>
 8002ab2:	4602      	mov	r2, r0
 8002ab4:	693b      	ldr	r3, [r7, #16]
 8002ab6:	1ad3      	subs	r3, r2, r3
 8002ab8:	2b02      	cmp	r3, #2
 8002aba:	d901      	bls.n	8002ac0 <HAL_RCC_OscConfig+0x224>
          {
            return HAL_TIMEOUT;
 8002abc:	2303      	movs	r3, #3
 8002abe:	e23e      	b.n	8002f3e <HAL_RCC_OscConfig+0x6a2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ac0:	4b12      	ldr	r3, [pc, #72]	; (8002b0c <HAL_RCC_OscConfig+0x270>)
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	f003 0302 	and.w	r3, r3, #2
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d0f0      	beq.n	8002aae <HAL_RCC_OscConfig+0x212>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002acc:	4b0f      	ldr	r3, [pc, #60]	; (8002b0c <HAL_RCC_OscConfig+0x270>)
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	691b      	ldr	r3, [r3, #16]
 8002ad8:	00db      	lsls	r3, r3, #3
 8002ada:	490c      	ldr	r1, [pc, #48]	; (8002b0c <HAL_RCC_OscConfig+0x270>)
 8002adc:	4313      	orrs	r3, r2
 8002ade:	600b      	str	r3, [r1, #0]
 8002ae0:	e01c      	b.n	8002b1c <HAL_RCC_OscConfig+0x280>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002ae2:	4b0a      	ldr	r3, [pc, #40]	; (8002b0c <HAL_RCC_OscConfig+0x270>)
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	4a09      	ldr	r2, [pc, #36]	; (8002b0c <HAL_RCC_OscConfig+0x270>)
 8002ae8:	f023 0301 	bic.w	r3, r3, #1
 8002aec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002aee:	f7fe fa3b 	bl	8000f68 <HAL_GetTick>
 8002af2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002af4:	e00c      	b.n	8002b10 <HAL_RCC_OscConfig+0x274>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002af6:	f7fe fa37 	bl	8000f68 <HAL_GetTick>
 8002afa:	4602      	mov	r2, r0
 8002afc:	693b      	ldr	r3, [r7, #16]
 8002afe:	1ad3      	subs	r3, r2, r3
 8002b00:	2b02      	cmp	r3, #2
 8002b02:	d905      	bls.n	8002b10 <HAL_RCC_OscConfig+0x274>
          {
            return HAL_TIMEOUT;
 8002b04:	2303      	movs	r3, #3
 8002b06:	e21a      	b.n	8002f3e <HAL_RCC_OscConfig+0x6a2>
 8002b08:	0800bdb8 	.word	0x0800bdb8
 8002b0c:	40023800 	.word	0x40023800
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b10:	4b7e      	ldr	r3, [pc, #504]	; (8002d0c <HAL_RCC_OscConfig+0x470>)
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	f003 0302 	and.w	r3, r3, #2
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d1ec      	bne.n	8002af6 <HAL_RCC_OscConfig+0x25a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f003 0308 	and.w	r3, r3, #8
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d043      	beq.n	8002bb0 <HAL_RCC_OscConfig+0x314>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	695b      	ldr	r3, [r3, #20]
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d008      	beq.n	8002b42 <HAL_RCC_OscConfig+0x2a6>
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	695b      	ldr	r3, [r3, #20]
 8002b34:	2b01      	cmp	r3, #1
 8002b36:	d004      	beq.n	8002b42 <HAL_RCC_OscConfig+0x2a6>
 8002b38:	f44f 71ee 	mov.w	r1, #476	; 0x1dc
 8002b3c:	4874      	ldr	r0, [pc, #464]	; (8002d10 <HAL_RCC_OscConfig+0x474>)
 8002b3e:	f7fd ffbe 	bl	8000abe <assert_failed>

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	695b      	ldr	r3, [r3, #20]
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d019      	beq.n	8002b7e <HAL_RCC_OscConfig+0x2e2>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002b4a:	4b70      	ldr	r3, [pc, #448]	; (8002d0c <HAL_RCC_OscConfig+0x470>)
 8002b4c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b4e:	4a6f      	ldr	r2, [pc, #444]	; (8002d0c <HAL_RCC_OscConfig+0x470>)
 8002b50:	f043 0301 	orr.w	r3, r3, #1
 8002b54:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b56:	f7fe fa07 	bl	8000f68 <HAL_GetTick>
 8002b5a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b5c:	e008      	b.n	8002b70 <HAL_RCC_OscConfig+0x2d4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002b5e:	f7fe fa03 	bl	8000f68 <HAL_GetTick>
 8002b62:	4602      	mov	r2, r0
 8002b64:	693b      	ldr	r3, [r7, #16]
 8002b66:	1ad3      	subs	r3, r2, r3
 8002b68:	2b02      	cmp	r3, #2
 8002b6a:	d901      	bls.n	8002b70 <HAL_RCC_OscConfig+0x2d4>
        {
          return HAL_TIMEOUT;
 8002b6c:	2303      	movs	r3, #3
 8002b6e:	e1e6      	b.n	8002f3e <HAL_RCC_OscConfig+0x6a2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b70:	4b66      	ldr	r3, [pc, #408]	; (8002d0c <HAL_RCC_OscConfig+0x470>)
 8002b72:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b74:	f003 0302 	and.w	r3, r3, #2
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d0f0      	beq.n	8002b5e <HAL_RCC_OscConfig+0x2c2>
 8002b7c:	e018      	b.n	8002bb0 <HAL_RCC_OscConfig+0x314>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002b7e:	4b63      	ldr	r3, [pc, #396]	; (8002d0c <HAL_RCC_OscConfig+0x470>)
 8002b80:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b82:	4a62      	ldr	r2, [pc, #392]	; (8002d0c <HAL_RCC_OscConfig+0x470>)
 8002b84:	f023 0301 	bic.w	r3, r3, #1
 8002b88:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b8a:	f7fe f9ed 	bl	8000f68 <HAL_GetTick>
 8002b8e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b90:	e008      	b.n	8002ba4 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002b92:	f7fe f9e9 	bl	8000f68 <HAL_GetTick>
 8002b96:	4602      	mov	r2, r0
 8002b98:	693b      	ldr	r3, [r7, #16]
 8002b9a:	1ad3      	subs	r3, r2, r3
 8002b9c:	2b02      	cmp	r3, #2
 8002b9e:	d901      	bls.n	8002ba4 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8002ba0:	2303      	movs	r3, #3
 8002ba2:	e1cc      	b.n	8002f3e <HAL_RCC_OscConfig+0x6a2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ba4:	4b59      	ldr	r3, [pc, #356]	; (8002d0c <HAL_RCC_OscConfig+0x470>)
 8002ba6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ba8:	f003 0302 	and.w	r3, r3, #2
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d1f0      	bne.n	8002b92 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f003 0304 	and.w	r3, r3, #4
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	f000 80bc 	beq.w	8002d36 <HAL_RCC_OscConfig+0x49a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	689b      	ldr	r3, [r3, #8]
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d00c      	beq.n	8002be0 <HAL_RCC_OscConfig+0x344>
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	689b      	ldr	r3, [r3, #8]
 8002bca:	2b01      	cmp	r3, #1
 8002bcc:	d008      	beq.n	8002be0 <HAL_RCC_OscConfig+0x344>
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	689b      	ldr	r3, [r3, #8]
 8002bd2:	2b05      	cmp	r3, #5
 8002bd4:	d004      	beq.n	8002be0 <HAL_RCC_OscConfig+0x344>
 8002bd6:	f240 2106 	movw	r1, #518	; 0x206
 8002bda:	484d      	ldr	r0, [pc, #308]	; (8002d10 <HAL_RCC_OscConfig+0x474>)
 8002bdc:	f7fd ff6f 	bl	8000abe <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002be0:	4b4a      	ldr	r3, [pc, #296]	; (8002d0c <HAL_RCC_OscConfig+0x470>)
 8002be2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002be4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d10d      	bne.n	8002c08 <HAL_RCC_OscConfig+0x36c>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8002bec:	4b47      	ldr	r3, [pc, #284]	; (8002d0c <HAL_RCC_OscConfig+0x470>)
 8002bee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bf0:	4a46      	ldr	r2, [pc, #280]	; (8002d0c <HAL_RCC_OscConfig+0x470>)
 8002bf2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002bf6:	6413      	str	r3, [r2, #64]	; 0x40
 8002bf8:	4b44      	ldr	r3, [pc, #272]	; (8002d0c <HAL_RCC_OscConfig+0x470>)
 8002bfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bfc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c00:	60bb      	str	r3, [r7, #8]
 8002c02:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002c04:	2301      	movs	r3, #1
 8002c06:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002c08:	4b42      	ldr	r3, [pc, #264]	; (8002d14 <HAL_RCC_OscConfig+0x478>)
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d118      	bne.n	8002c46 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8002c14:	4b3f      	ldr	r3, [pc, #252]	; (8002d14 <HAL_RCC_OscConfig+0x478>)
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	4a3e      	ldr	r2, [pc, #248]	; (8002d14 <HAL_RCC_OscConfig+0x478>)
 8002c1a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c1e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002c20:	f7fe f9a2 	bl	8000f68 <HAL_GetTick>
 8002c24:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002c26:	e008      	b.n	8002c3a <HAL_RCC_OscConfig+0x39e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c28:	f7fe f99e 	bl	8000f68 <HAL_GetTick>
 8002c2c:	4602      	mov	r2, r0
 8002c2e:	693b      	ldr	r3, [r7, #16]
 8002c30:	1ad3      	subs	r3, r2, r3
 8002c32:	2b64      	cmp	r3, #100	; 0x64
 8002c34:	d901      	bls.n	8002c3a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8002c36:	2303      	movs	r3, #3
 8002c38:	e181      	b.n	8002f3e <HAL_RCC_OscConfig+0x6a2>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002c3a:	4b36      	ldr	r3, [pc, #216]	; (8002d14 <HAL_RCC_OscConfig+0x478>)
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d0f0      	beq.n	8002c28 <HAL_RCC_OscConfig+0x38c>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	689b      	ldr	r3, [r3, #8]
 8002c4a:	2b01      	cmp	r3, #1
 8002c4c:	d106      	bne.n	8002c5c <HAL_RCC_OscConfig+0x3c0>
 8002c4e:	4b2f      	ldr	r3, [pc, #188]	; (8002d0c <HAL_RCC_OscConfig+0x470>)
 8002c50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c52:	4a2e      	ldr	r2, [pc, #184]	; (8002d0c <HAL_RCC_OscConfig+0x470>)
 8002c54:	f043 0301 	orr.w	r3, r3, #1
 8002c58:	6713      	str	r3, [r2, #112]	; 0x70
 8002c5a:	e02d      	b.n	8002cb8 <HAL_RCC_OscConfig+0x41c>
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	689b      	ldr	r3, [r3, #8]
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d10c      	bne.n	8002c7e <HAL_RCC_OscConfig+0x3e2>
 8002c64:	4b29      	ldr	r3, [pc, #164]	; (8002d0c <HAL_RCC_OscConfig+0x470>)
 8002c66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c68:	4a28      	ldr	r2, [pc, #160]	; (8002d0c <HAL_RCC_OscConfig+0x470>)
 8002c6a:	f023 0301 	bic.w	r3, r3, #1
 8002c6e:	6713      	str	r3, [r2, #112]	; 0x70
 8002c70:	4b26      	ldr	r3, [pc, #152]	; (8002d0c <HAL_RCC_OscConfig+0x470>)
 8002c72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c74:	4a25      	ldr	r2, [pc, #148]	; (8002d0c <HAL_RCC_OscConfig+0x470>)
 8002c76:	f023 0304 	bic.w	r3, r3, #4
 8002c7a:	6713      	str	r3, [r2, #112]	; 0x70
 8002c7c:	e01c      	b.n	8002cb8 <HAL_RCC_OscConfig+0x41c>
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	689b      	ldr	r3, [r3, #8]
 8002c82:	2b05      	cmp	r3, #5
 8002c84:	d10c      	bne.n	8002ca0 <HAL_RCC_OscConfig+0x404>
 8002c86:	4b21      	ldr	r3, [pc, #132]	; (8002d0c <HAL_RCC_OscConfig+0x470>)
 8002c88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c8a:	4a20      	ldr	r2, [pc, #128]	; (8002d0c <HAL_RCC_OscConfig+0x470>)
 8002c8c:	f043 0304 	orr.w	r3, r3, #4
 8002c90:	6713      	str	r3, [r2, #112]	; 0x70
 8002c92:	4b1e      	ldr	r3, [pc, #120]	; (8002d0c <HAL_RCC_OscConfig+0x470>)
 8002c94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c96:	4a1d      	ldr	r2, [pc, #116]	; (8002d0c <HAL_RCC_OscConfig+0x470>)
 8002c98:	f043 0301 	orr.w	r3, r3, #1
 8002c9c:	6713      	str	r3, [r2, #112]	; 0x70
 8002c9e:	e00b      	b.n	8002cb8 <HAL_RCC_OscConfig+0x41c>
 8002ca0:	4b1a      	ldr	r3, [pc, #104]	; (8002d0c <HAL_RCC_OscConfig+0x470>)
 8002ca2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ca4:	4a19      	ldr	r2, [pc, #100]	; (8002d0c <HAL_RCC_OscConfig+0x470>)
 8002ca6:	f023 0301 	bic.w	r3, r3, #1
 8002caa:	6713      	str	r3, [r2, #112]	; 0x70
 8002cac:	4b17      	ldr	r3, [pc, #92]	; (8002d0c <HAL_RCC_OscConfig+0x470>)
 8002cae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cb0:	4a16      	ldr	r2, [pc, #88]	; (8002d0c <HAL_RCC_OscConfig+0x470>)
 8002cb2:	f023 0304 	bic.w	r3, r3, #4
 8002cb6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	689b      	ldr	r3, [r3, #8]
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d015      	beq.n	8002cec <HAL_RCC_OscConfig+0x450>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cc0:	f7fe f952 	bl	8000f68 <HAL_GetTick>
 8002cc4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002cc6:	e00a      	b.n	8002cde <HAL_RCC_OscConfig+0x442>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002cc8:	f7fe f94e 	bl	8000f68 <HAL_GetTick>
 8002ccc:	4602      	mov	r2, r0
 8002cce:	693b      	ldr	r3, [r7, #16]
 8002cd0:	1ad3      	subs	r3, r2, r3
 8002cd2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002cd6:	4293      	cmp	r3, r2
 8002cd8:	d901      	bls.n	8002cde <HAL_RCC_OscConfig+0x442>
        {
          return HAL_TIMEOUT;
 8002cda:	2303      	movs	r3, #3
 8002cdc:	e12f      	b.n	8002f3e <HAL_RCC_OscConfig+0x6a2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002cde:	4b0b      	ldr	r3, [pc, #44]	; (8002d0c <HAL_RCC_OscConfig+0x470>)
 8002ce0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ce2:	f003 0302 	and.w	r3, r3, #2
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d0ee      	beq.n	8002cc8 <HAL_RCC_OscConfig+0x42c>
 8002cea:	e01b      	b.n	8002d24 <HAL_RCC_OscConfig+0x488>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cec:	f7fe f93c 	bl	8000f68 <HAL_GetTick>
 8002cf0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002cf2:	e011      	b.n	8002d18 <HAL_RCC_OscConfig+0x47c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002cf4:	f7fe f938 	bl	8000f68 <HAL_GetTick>
 8002cf8:	4602      	mov	r2, r0
 8002cfa:	693b      	ldr	r3, [r7, #16]
 8002cfc:	1ad3      	subs	r3, r2, r3
 8002cfe:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d02:	4293      	cmp	r3, r2
 8002d04:	d908      	bls.n	8002d18 <HAL_RCC_OscConfig+0x47c>
        {
          return HAL_TIMEOUT;
 8002d06:	2303      	movs	r3, #3
 8002d08:	e119      	b.n	8002f3e <HAL_RCC_OscConfig+0x6a2>
 8002d0a:	bf00      	nop
 8002d0c:	40023800 	.word	0x40023800
 8002d10:	0800bdb8 	.word	0x0800bdb8
 8002d14:	40007000 	.word	0x40007000
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d18:	4b8b      	ldr	r3, [pc, #556]	; (8002f48 <HAL_RCC_OscConfig+0x6ac>)
 8002d1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d1c:	f003 0302 	and.w	r3, r3, #2
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d1e7      	bne.n	8002cf4 <HAL_RCC_OscConfig+0x458>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002d24:	7dfb      	ldrb	r3, [r7, #23]
 8002d26:	2b01      	cmp	r3, #1
 8002d28:	d105      	bne.n	8002d36 <HAL_RCC_OscConfig+0x49a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d2a:	4b87      	ldr	r3, [pc, #540]	; (8002f48 <HAL_RCC_OscConfig+0x6ac>)
 8002d2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d2e:	4a86      	ldr	r2, [pc, #536]	; (8002f48 <HAL_RCC_OscConfig+0x6ac>)
 8002d30:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002d34:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	699b      	ldr	r3, [r3, #24]
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d00c      	beq.n	8002d58 <HAL_RCC_OscConfig+0x4bc>
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	699b      	ldr	r3, [r3, #24]
 8002d42:	2b01      	cmp	r3, #1
 8002d44:	d008      	beq.n	8002d58 <HAL_RCC_OscConfig+0x4bc>
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	699b      	ldr	r3, [r3, #24]
 8002d4a:	2b02      	cmp	r3, #2
 8002d4c:	d004      	beq.n	8002d58 <HAL_RCC_OscConfig+0x4bc>
 8002d4e:	f240 214a 	movw	r1, #586	; 0x24a
 8002d52:	487e      	ldr	r0, [pc, #504]	; (8002f4c <HAL_RCC_OscConfig+0x6b0>)
 8002d54:	f7fd feb3 	bl	8000abe <assert_failed>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	699b      	ldr	r3, [r3, #24]
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	f000 80ed 	beq.w	8002f3c <HAL_RCC_OscConfig+0x6a0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002d62:	4b79      	ldr	r3, [pc, #484]	; (8002f48 <HAL_RCC_OscConfig+0x6ac>)
 8002d64:	689b      	ldr	r3, [r3, #8]
 8002d66:	f003 030c 	and.w	r3, r3, #12
 8002d6a:	2b08      	cmp	r3, #8
 8002d6c:	f000 80b4 	beq.w	8002ed8 <HAL_RCC_OscConfig+0x63c>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	699b      	ldr	r3, [r3, #24]
 8002d74:	2b02      	cmp	r3, #2
 8002d76:	f040 8095 	bne.w	8002ea4 <HAL_RCC_OscConfig+0x608>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	69db      	ldr	r3, [r3, #28]
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d009      	beq.n	8002d96 <HAL_RCC_OscConfig+0x4fa>
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	69db      	ldr	r3, [r3, #28]
 8002d86:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002d8a:	d004      	beq.n	8002d96 <HAL_RCC_OscConfig+0x4fa>
 8002d8c:	f240 2153 	movw	r1, #595	; 0x253
 8002d90:	486e      	ldr	r0, [pc, #440]	; (8002f4c <HAL_RCC_OscConfig+0x6b0>)
 8002d92:	f7fd fe94 	bl	8000abe <assert_failed>
        assert_param(IS_RCC_PLLM_VALUE(RCC_OscInitStruct->PLL.PLLM));
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	6a1b      	ldr	r3, [r3, #32]
 8002d9a:	2b01      	cmp	r3, #1
 8002d9c:	d903      	bls.n	8002da6 <HAL_RCC_OscConfig+0x50a>
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	6a1b      	ldr	r3, [r3, #32]
 8002da2:	2b3f      	cmp	r3, #63	; 0x3f
 8002da4:	d904      	bls.n	8002db0 <HAL_RCC_OscConfig+0x514>
 8002da6:	f44f 7115 	mov.w	r1, #596	; 0x254
 8002daa:	4868      	ldr	r0, [pc, #416]	; (8002f4c <HAL_RCC_OscConfig+0x6b0>)
 8002dac:	f7fd fe87 	bl	8000abe <assert_failed>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002db4:	2b31      	cmp	r3, #49	; 0x31
 8002db6:	d904      	bls.n	8002dc2 <HAL_RCC_OscConfig+0x526>
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dbc:	f5b3 7fd8 	cmp.w	r3, #432	; 0x1b0
 8002dc0:	d904      	bls.n	8002dcc <HAL_RCC_OscConfig+0x530>
 8002dc2:	f240 2155 	movw	r1, #597	; 0x255
 8002dc6:	4861      	ldr	r0, [pc, #388]	; (8002f4c <HAL_RCC_OscConfig+0x6b0>)
 8002dc8:	f7fd fe79 	bl	8000abe <assert_failed>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dd0:	2b02      	cmp	r3, #2
 8002dd2:	d010      	beq.n	8002df6 <HAL_RCC_OscConfig+0x55a>
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dd8:	2b04      	cmp	r3, #4
 8002dda:	d00c      	beq.n	8002df6 <HAL_RCC_OscConfig+0x55a>
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002de0:	2b06      	cmp	r3, #6
 8002de2:	d008      	beq.n	8002df6 <HAL_RCC_OscConfig+0x55a>
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002de8:	2b08      	cmp	r3, #8
 8002dea:	d004      	beq.n	8002df6 <HAL_RCC_OscConfig+0x55a>
 8002dec:	f240 2156 	movw	r1, #598	; 0x256
 8002df0:	4856      	ldr	r0, [pc, #344]	; (8002f4c <HAL_RCC_OscConfig+0x6b0>)
 8002df2:	f7fd fe64 	bl	8000abe <assert_failed>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dfa:	2b01      	cmp	r3, #1
 8002dfc:	d903      	bls.n	8002e06 <HAL_RCC_OscConfig+0x56a>
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e02:	2b0f      	cmp	r3, #15
 8002e04:	d904      	bls.n	8002e10 <HAL_RCC_OscConfig+0x574>
 8002e06:	f240 2157 	movw	r1, #599	; 0x257
 8002e0a:	4850      	ldr	r0, [pc, #320]	; (8002f4c <HAL_RCC_OscConfig+0x6b0>)
 8002e0c:	f7fd fe57 	bl	8000abe <assert_failed>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e10:	4b4d      	ldr	r3, [pc, #308]	; (8002f48 <HAL_RCC_OscConfig+0x6ac>)
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	4a4c      	ldr	r2, [pc, #304]	; (8002f48 <HAL_RCC_OscConfig+0x6ac>)
 8002e16:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002e1a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e1c:	f7fe f8a4 	bl	8000f68 <HAL_GetTick>
 8002e20:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e22:	e008      	b.n	8002e36 <HAL_RCC_OscConfig+0x59a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e24:	f7fe f8a0 	bl	8000f68 <HAL_GetTick>
 8002e28:	4602      	mov	r2, r0
 8002e2a:	693b      	ldr	r3, [r7, #16]
 8002e2c:	1ad3      	subs	r3, r2, r3
 8002e2e:	2b02      	cmp	r3, #2
 8002e30:	d901      	bls.n	8002e36 <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 8002e32:	2303      	movs	r3, #3
 8002e34:	e083      	b.n	8002f3e <HAL_RCC_OscConfig+0x6a2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e36:	4b44      	ldr	r3, [pc, #272]	; (8002f48 <HAL_RCC_OscConfig+0x6ac>)
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d1f0      	bne.n	8002e24 <HAL_RCC_OscConfig+0x588>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	69da      	ldr	r2, [r3, #28]
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	6a1b      	ldr	r3, [r3, #32]
 8002e4a:	431a      	orrs	r2, r3
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e50:	019b      	lsls	r3, r3, #6
 8002e52:	431a      	orrs	r2, r3
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e58:	085b      	lsrs	r3, r3, #1
 8002e5a:	3b01      	subs	r3, #1
 8002e5c:	041b      	lsls	r3, r3, #16
 8002e5e:	431a      	orrs	r2, r3
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e64:	061b      	lsls	r3, r3, #24
 8002e66:	4313      	orrs	r3, r2
 8002e68:	4a37      	ldr	r2, [pc, #220]	; (8002f48 <HAL_RCC_OscConfig+0x6ac>)
 8002e6a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002e6e:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002e70:	4b35      	ldr	r3, [pc, #212]	; (8002f48 <HAL_RCC_OscConfig+0x6ac>)
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	4a34      	ldr	r2, [pc, #208]	; (8002f48 <HAL_RCC_OscConfig+0x6ac>)
 8002e76:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002e7a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e7c:	f7fe f874 	bl	8000f68 <HAL_GetTick>
 8002e80:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e82:	e008      	b.n	8002e96 <HAL_RCC_OscConfig+0x5fa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e84:	f7fe f870 	bl	8000f68 <HAL_GetTick>
 8002e88:	4602      	mov	r2, r0
 8002e8a:	693b      	ldr	r3, [r7, #16]
 8002e8c:	1ad3      	subs	r3, r2, r3
 8002e8e:	2b02      	cmp	r3, #2
 8002e90:	d901      	bls.n	8002e96 <HAL_RCC_OscConfig+0x5fa>
          {
            return HAL_TIMEOUT;
 8002e92:	2303      	movs	r3, #3
 8002e94:	e053      	b.n	8002f3e <HAL_RCC_OscConfig+0x6a2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e96:	4b2c      	ldr	r3, [pc, #176]	; (8002f48 <HAL_RCC_OscConfig+0x6ac>)
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d0f0      	beq.n	8002e84 <HAL_RCC_OscConfig+0x5e8>
 8002ea2:	e04b      	b.n	8002f3c <HAL_RCC_OscConfig+0x6a0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ea4:	4b28      	ldr	r3, [pc, #160]	; (8002f48 <HAL_RCC_OscConfig+0x6ac>)
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	4a27      	ldr	r2, [pc, #156]	; (8002f48 <HAL_RCC_OscConfig+0x6ac>)
 8002eaa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002eae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002eb0:	f7fe f85a 	bl	8000f68 <HAL_GetTick>
 8002eb4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002eb6:	e008      	b.n	8002eca <HAL_RCC_OscConfig+0x62e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002eb8:	f7fe f856 	bl	8000f68 <HAL_GetTick>
 8002ebc:	4602      	mov	r2, r0
 8002ebe:	693b      	ldr	r3, [r7, #16]
 8002ec0:	1ad3      	subs	r3, r2, r3
 8002ec2:	2b02      	cmp	r3, #2
 8002ec4:	d901      	bls.n	8002eca <HAL_RCC_OscConfig+0x62e>
          {
            return HAL_TIMEOUT;
 8002ec6:	2303      	movs	r3, #3
 8002ec8:	e039      	b.n	8002f3e <HAL_RCC_OscConfig+0x6a2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002eca:	4b1f      	ldr	r3, [pc, #124]	; (8002f48 <HAL_RCC_OscConfig+0x6ac>)
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d1f0      	bne.n	8002eb8 <HAL_RCC_OscConfig+0x61c>
 8002ed6:	e031      	b.n	8002f3c <HAL_RCC_OscConfig+0x6a0>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8002ed8:	4b1b      	ldr	r3, [pc, #108]	; (8002f48 <HAL_RCC_OscConfig+0x6ac>)
 8002eda:	685b      	ldr	r3, [r3, #4]
 8002edc:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	699b      	ldr	r3, [r3, #24]
 8002ee2:	2b01      	cmp	r3, #1
 8002ee4:	d028      	beq.n	8002f38 <HAL_RCC_OscConfig+0x69c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002ef0:	429a      	cmp	r2, r3
 8002ef2:	d121      	bne.n	8002f38 <HAL_RCC_OscConfig+0x69c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002efe:	429a      	cmp	r2, r3
 8002f00:	d11a      	bne.n	8002f38 <HAL_RCC_OscConfig+0x69c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002f02:	68fa      	ldr	r2, [r7, #12]
 8002f04:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002f08:	4013      	ands	r3, r2
 8002f0a:	687a      	ldr	r2, [r7, #4]
 8002f0c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002f0e:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002f10:	4293      	cmp	r3, r2
 8002f12:	d111      	bne.n	8002f38 <HAL_RCC_OscConfig+0x69c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f1e:	085b      	lsrs	r3, r3, #1
 8002f20:	3b01      	subs	r3, #1
 8002f22:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002f24:	429a      	cmp	r2, r3
 8002f26:	d107      	bne.n	8002f38 <HAL_RCC_OscConfig+0x69c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f32:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002f34:	429a      	cmp	r2, r3
 8002f36:	d001      	beq.n	8002f3c <HAL_RCC_OscConfig+0x6a0>
#endif
      {
        return HAL_ERROR;
 8002f38:	2301      	movs	r3, #1
 8002f3a:	e000      	b.n	8002f3e <HAL_RCC_OscConfig+0x6a2>
      }
    }
  }
  return HAL_OK;
 8002f3c:	2300      	movs	r3, #0
}
 8002f3e:	4618      	mov	r0, r3
 8002f40:	3718      	adds	r7, #24
 8002f42:	46bd      	mov	sp, r7
 8002f44:	bd80      	pop	{r7, pc}
 8002f46:	bf00      	nop
 8002f48:	40023800 	.word	0x40023800
 8002f4c:	0800bdb8 	.word	0x0800bdb8

08002f50 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002f50:	b580      	push	{r7, lr}
 8002f52:	b084      	sub	sp, #16
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	6078      	str	r0, [r7, #4]
 8002f58:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8002f5a:	2300      	movs	r3, #0
 8002f5c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d101      	bne.n	8002f68 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002f64:	2301      	movs	r3, #1
 8002f66:	e18c      	b.n	8003282 <HAL_RCC_ClockConfig+0x332>
  }

  /* Check the parameters */
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d003      	beq.n	8002f78 <HAL_RCC_ClockConfig+0x28>
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	2b0f      	cmp	r3, #15
 8002f76:	d904      	bls.n	8002f82 <HAL_RCC_ClockConfig+0x32>
 8002f78:	f240 21dd 	movw	r1, #733	; 0x2dd
 8002f7c:	4887      	ldr	r0, [pc, #540]	; (800319c <HAL_RCC_ClockConfig+0x24c>)
 8002f7e:	f7fd fd9e 	bl	8000abe <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 8002f82:	683b      	ldr	r3, [r7, #0]
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d031      	beq.n	8002fec <HAL_RCC_ClockConfig+0x9c>
 8002f88:	683b      	ldr	r3, [r7, #0]
 8002f8a:	2b01      	cmp	r3, #1
 8002f8c:	d02e      	beq.n	8002fec <HAL_RCC_ClockConfig+0x9c>
 8002f8e:	683b      	ldr	r3, [r7, #0]
 8002f90:	2b02      	cmp	r3, #2
 8002f92:	d02b      	beq.n	8002fec <HAL_RCC_ClockConfig+0x9c>
 8002f94:	683b      	ldr	r3, [r7, #0]
 8002f96:	2b03      	cmp	r3, #3
 8002f98:	d028      	beq.n	8002fec <HAL_RCC_ClockConfig+0x9c>
 8002f9a:	683b      	ldr	r3, [r7, #0]
 8002f9c:	2b04      	cmp	r3, #4
 8002f9e:	d025      	beq.n	8002fec <HAL_RCC_ClockConfig+0x9c>
 8002fa0:	683b      	ldr	r3, [r7, #0]
 8002fa2:	2b05      	cmp	r3, #5
 8002fa4:	d022      	beq.n	8002fec <HAL_RCC_ClockConfig+0x9c>
 8002fa6:	683b      	ldr	r3, [r7, #0]
 8002fa8:	2b06      	cmp	r3, #6
 8002faa:	d01f      	beq.n	8002fec <HAL_RCC_ClockConfig+0x9c>
 8002fac:	683b      	ldr	r3, [r7, #0]
 8002fae:	2b07      	cmp	r3, #7
 8002fb0:	d01c      	beq.n	8002fec <HAL_RCC_ClockConfig+0x9c>
 8002fb2:	683b      	ldr	r3, [r7, #0]
 8002fb4:	2b08      	cmp	r3, #8
 8002fb6:	d019      	beq.n	8002fec <HAL_RCC_ClockConfig+0x9c>
 8002fb8:	683b      	ldr	r3, [r7, #0]
 8002fba:	2b09      	cmp	r3, #9
 8002fbc:	d016      	beq.n	8002fec <HAL_RCC_ClockConfig+0x9c>
 8002fbe:	683b      	ldr	r3, [r7, #0]
 8002fc0:	2b0a      	cmp	r3, #10
 8002fc2:	d013      	beq.n	8002fec <HAL_RCC_ClockConfig+0x9c>
 8002fc4:	683b      	ldr	r3, [r7, #0]
 8002fc6:	2b0b      	cmp	r3, #11
 8002fc8:	d010      	beq.n	8002fec <HAL_RCC_ClockConfig+0x9c>
 8002fca:	683b      	ldr	r3, [r7, #0]
 8002fcc:	2b0c      	cmp	r3, #12
 8002fce:	d00d      	beq.n	8002fec <HAL_RCC_ClockConfig+0x9c>
 8002fd0:	683b      	ldr	r3, [r7, #0]
 8002fd2:	2b0d      	cmp	r3, #13
 8002fd4:	d00a      	beq.n	8002fec <HAL_RCC_ClockConfig+0x9c>
 8002fd6:	683b      	ldr	r3, [r7, #0]
 8002fd8:	2b0e      	cmp	r3, #14
 8002fda:	d007      	beq.n	8002fec <HAL_RCC_ClockConfig+0x9c>
 8002fdc:	683b      	ldr	r3, [r7, #0]
 8002fde:	2b0f      	cmp	r3, #15
 8002fe0:	d004      	beq.n	8002fec <HAL_RCC_ClockConfig+0x9c>
 8002fe2:	f240 21de 	movw	r1, #734	; 0x2de
 8002fe6:	486d      	ldr	r0, [pc, #436]	; (800319c <HAL_RCC_ClockConfig+0x24c>)
 8002fe8:	f7fd fd69 	bl	8000abe <assert_failed>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002fec:	4b6c      	ldr	r3, [pc, #432]	; (80031a0 <HAL_RCC_ClockConfig+0x250>)
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	f003 030f 	and.w	r3, r3, #15
 8002ff4:	683a      	ldr	r2, [r7, #0]
 8002ff6:	429a      	cmp	r2, r3
 8002ff8:	d910      	bls.n	800301c <HAL_RCC_ClockConfig+0xcc>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ffa:	4b69      	ldr	r3, [pc, #420]	; (80031a0 <HAL_RCC_ClockConfig+0x250>)
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f023 020f 	bic.w	r2, r3, #15
 8003002:	4967      	ldr	r1, [pc, #412]	; (80031a0 <HAL_RCC_ClockConfig+0x250>)
 8003004:	683b      	ldr	r3, [r7, #0]
 8003006:	4313      	orrs	r3, r2
 8003008:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800300a:	4b65      	ldr	r3, [pc, #404]	; (80031a0 <HAL_RCC_ClockConfig+0x250>)
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f003 030f 	and.w	r3, r3, #15
 8003012:	683a      	ldr	r2, [r7, #0]
 8003014:	429a      	cmp	r2, r3
 8003016:	d001      	beq.n	800301c <HAL_RCC_ClockConfig+0xcc>
    {
      return HAL_ERROR;
 8003018:	2301      	movs	r3, #1
 800301a:	e132      	b.n	8003282 <HAL_RCC_ClockConfig+0x332>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	f003 0302 	and.w	r3, r3, #2
 8003024:	2b00      	cmp	r3, #0
 8003026:	d049      	beq.n	80030bc <HAL_RCC_ClockConfig+0x16c>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	f003 0304 	and.w	r3, r3, #4
 8003030:	2b00      	cmp	r3, #0
 8003032:	d005      	beq.n	8003040 <HAL_RCC_ClockConfig+0xf0>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003034:	4b5b      	ldr	r3, [pc, #364]	; (80031a4 <HAL_RCC_ClockConfig+0x254>)
 8003036:	689b      	ldr	r3, [r3, #8]
 8003038:	4a5a      	ldr	r2, [pc, #360]	; (80031a4 <HAL_RCC_ClockConfig+0x254>)
 800303a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800303e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	f003 0308 	and.w	r3, r3, #8
 8003048:	2b00      	cmp	r3, #0
 800304a:	d005      	beq.n	8003058 <HAL_RCC_ClockConfig+0x108>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800304c:	4b55      	ldr	r3, [pc, #340]	; (80031a4 <HAL_RCC_ClockConfig+0x254>)
 800304e:	689b      	ldr	r3, [r3, #8]
 8003050:	4a54      	ldr	r2, [pc, #336]	; (80031a4 <HAL_RCC_ClockConfig+0x254>)
 8003052:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003056:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	689b      	ldr	r3, [r3, #8]
 800305c:	2b00      	cmp	r3, #0
 800305e:	d024      	beq.n	80030aa <HAL_RCC_ClockConfig+0x15a>
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	689b      	ldr	r3, [r3, #8]
 8003064:	2b80      	cmp	r3, #128	; 0x80
 8003066:	d020      	beq.n	80030aa <HAL_RCC_ClockConfig+0x15a>
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	689b      	ldr	r3, [r3, #8]
 800306c:	2b90      	cmp	r3, #144	; 0x90
 800306e:	d01c      	beq.n	80030aa <HAL_RCC_ClockConfig+0x15a>
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	689b      	ldr	r3, [r3, #8]
 8003074:	2ba0      	cmp	r3, #160	; 0xa0
 8003076:	d018      	beq.n	80030aa <HAL_RCC_ClockConfig+0x15a>
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	689b      	ldr	r3, [r3, #8]
 800307c:	2bb0      	cmp	r3, #176	; 0xb0
 800307e:	d014      	beq.n	80030aa <HAL_RCC_ClockConfig+0x15a>
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	689b      	ldr	r3, [r3, #8]
 8003084:	2bc0      	cmp	r3, #192	; 0xc0
 8003086:	d010      	beq.n	80030aa <HAL_RCC_ClockConfig+0x15a>
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	689b      	ldr	r3, [r3, #8]
 800308c:	2bd0      	cmp	r3, #208	; 0xd0
 800308e:	d00c      	beq.n	80030aa <HAL_RCC_ClockConfig+0x15a>
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	689b      	ldr	r3, [r3, #8]
 8003094:	2be0      	cmp	r3, #224	; 0xe0
 8003096:	d008      	beq.n	80030aa <HAL_RCC_ClockConfig+0x15a>
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	689b      	ldr	r3, [r3, #8]
 800309c:	2bf0      	cmp	r3, #240	; 0xf0
 800309e:	d004      	beq.n	80030aa <HAL_RCC_ClockConfig+0x15a>
 80030a0:	f240 3102 	movw	r1, #770	; 0x302
 80030a4:	483d      	ldr	r0, [pc, #244]	; (800319c <HAL_RCC_ClockConfig+0x24c>)
 80030a6:	f7fd fd0a 	bl	8000abe <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80030aa:	4b3e      	ldr	r3, [pc, #248]	; (80031a4 <HAL_RCC_ClockConfig+0x254>)
 80030ac:	689b      	ldr	r3, [r3, #8]
 80030ae:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	689b      	ldr	r3, [r3, #8]
 80030b6:	493b      	ldr	r1, [pc, #236]	; (80031a4 <HAL_RCC_ClockConfig+0x254>)
 80030b8:	4313      	orrs	r3, r2
 80030ba:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	f003 0301 	and.w	r3, r3, #1
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d051      	beq.n	800316c <HAL_RCC_ClockConfig+0x21c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	685b      	ldr	r3, [r3, #4]
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d00c      	beq.n	80030ea <HAL_RCC_ClockConfig+0x19a>
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	685b      	ldr	r3, [r3, #4]
 80030d4:	2b01      	cmp	r3, #1
 80030d6:	d008      	beq.n	80030ea <HAL_RCC_ClockConfig+0x19a>
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	685b      	ldr	r3, [r3, #4]
 80030dc:	2b02      	cmp	r3, #2
 80030de:	d004      	beq.n	80030ea <HAL_RCC_ClockConfig+0x19a>
 80030e0:	f240 3109 	movw	r1, #777	; 0x309
 80030e4:	482d      	ldr	r0, [pc, #180]	; (800319c <HAL_RCC_ClockConfig+0x24c>)
 80030e6:	f7fd fcea 	bl	8000abe <assert_failed>

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	685b      	ldr	r3, [r3, #4]
 80030ee:	2b01      	cmp	r3, #1
 80030f0:	d107      	bne.n	8003102 <HAL_RCC_ClockConfig+0x1b2>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030f2:	4b2c      	ldr	r3, [pc, #176]	; (80031a4 <HAL_RCC_ClockConfig+0x254>)
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d115      	bne.n	800312a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80030fe:	2301      	movs	r3, #1
 8003100:	e0bf      	b.n	8003282 <HAL_RCC_ClockConfig+0x332>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	685b      	ldr	r3, [r3, #4]
 8003106:	2b02      	cmp	r3, #2
 8003108:	d107      	bne.n	800311a <HAL_RCC_ClockConfig+0x1ca>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800310a:	4b26      	ldr	r3, [pc, #152]	; (80031a4 <HAL_RCC_ClockConfig+0x254>)
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003112:	2b00      	cmp	r3, #0
 8003114:	d109      	bne.n	800312a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8003116:	2301      	movs	r3, #1
 8003118:	e0b3      	b.n	8003282 <HAL_RCC_ClockConfig+0x332>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800311a:	4b22      	ldr	r3, [pc, #136]	; (80031a4 <HAL_RCC_ClockConfig+0x254>)
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f003 0302 	and.w	r3, r3, #2
 8003122:	2b00      	cmp	r3, #0
 8003124:	d101      	bne.n	800312a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8003126:	2301      	movs	r3, #1
 8003128:	e0ab      	b.n	8003282 <HAL_RCC_ClockConfig+0x332>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800312a:	4b1e      	ldr	r3, [pc, #120]	; (80031a4 <HAL_RCC_ClockConfig+0x254>)
 800312c:	689b      	ldr	r3, [r3, #8]
 800312e:	f023 0203 	bic.w	r2, r3, #3
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	685b      	ldr	r3, [r3, #4]
 8003136:	491b      	ldr	r1, [pc, #108]	; (80031a4 <HAL_RCC_ClockConfig+0x254>)
 8003138:	4313      	orrs	r3, r2
 800313a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800313c:	f7fd ff14 	bl	8000f68 <HAL_GetTick>
 8003140:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003142:	e00a      	b.n	800315a <HAL_RCC_ClockConfig+0x20a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003144:	f7fd ff10 	bl	8000f68 <HAL_GetTick>
 8003148:	4602      	mov	r2, r0
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	1ad3      	subs	r3, r2, r3
 800314e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003152:	4293      	cmp	r3, r2
 8003154:	d901      	bls.n	800315a <HAL_RCC_ClockConfig+0x20a>
      {
        return HAL_TIMEOUT;
 8003156:	2303      	movs	r3, #3
 8003158:	e093      	b.n	8003282 <HAL_RCC_ClockConfig+0x332>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800315a:	4b12      	ldr	r3, [pc, #72]	; (80031a4 <HAL_RCC_ClockConfig+0x254>)
 800315c:	689b      	ldr	r3, [r3, #8]
 800315e:	f003 020c 	and.w	r2, r3, #12
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	685b      	ldr	r3, [r3, #4]
 8003166:	009b      	lsls	r3, r3, #2
 8003168:	429a      	cmp	r2, r3
 800316a:	d1eb      	bne.n	8003144 <HAL_RCC_ClockConfig+0x1f4>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800316c:	4b0c      	ldr	r3, [pc, #48]	; (80031a0 <HAL_RCC_ClockConfig+0x250>)
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	f003 030f 	and.w	r3, r3, #15
 8003174:	683a      	ldr	r2, [r7, #0]
 8003176:	429a      	cmp	r2, r3
 8003178:	d216      	bcs.n	80031a8 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800317a:	4b09      	ldr	r3, [pc, #36]	; (80031a0 <HAL_RCC_ClockConfig+0x250>)
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f023 020f 	bic.w	r2, r3, #15
 8003182:	4907      	ldr	r1, [pc, #28]	; (80031a0 <HAL_RCC_ClockConfig+0x250>)
 8003184:	683b      	ldr	r3, [r7, #0]
 8003186:	4313      	orrs	r3, r2
 8003188:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800318a:	4b05      	ldr	r3, [pc, #20]	; (80031a0 <HAL_RCC_ClockConfig+0x250>)
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	f003 030f 	and.w	r3, r3, #15
 8003192:	683a      	ldr	r2, [r7, #0]
 8003194:	429a      	cmp	r2, r3
 8003196:	d007      	beq.n	80031a8 <HAL_RCC_ClockConfig+0x258>
    {
      return HAL_ERROR;
 8003198:	2301      	movs	r3, #1
 800319a:	e072      	b.n	8003282 <HAL_RCC_ClockConfig+0x332>
 800319c:	0800bdb8 	.word	0x0800bdb8
 80031a0:	40023c00 	.word	0x40023c00
 80031a4:	40023800 	.word	0x40023800
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	f003 0304 	and.w	r3, r3, #4
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d025      	beq.n	8003200 <HAL_RCC_ClockConfig+0x2b0>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	68db      	ldr	r3, [r3, #12]
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d018      	beq.n	80031ee <HAL_RCC_ClockConfig+0x29e>
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	68db      	ldr	r3, [r3, #12]
 80031c0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80031c4:	d013      	beq.n	80031ee <HAL_RCC_ClockConfig+0x29e>
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	68db      	ldr	r3, [r3, #12]
 80031ca:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80031ce:	d00e      	beq.n	80031ee <HAL_RCC_ClockConfig+0x29e>
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	68db      	ldr	r3, [r3, #12]
 80031d4:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 80031d8:	d009      	beq.n	80031ee <HAL_RCC_ClockConfig+0x29e>
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	68db      	ldr	r3, [r3, #12]
 80031de:	f5b3 5fe0 	cmp.w	r3, #7168	; 0x1c00
 80031e2:	d004      	beq.n	80031ee <HAL_RCC_ClockConfig+0x29e>
 80031e4:	f240 3146 	movw	r1, #838	; 0x346
 80031e8:	4828      	ldr	r0, [pc, #160]	; (800328c <HAL_RCC_ClockConfig+0x33c>)
 80031ea:	f7fd fc68 	bl	8000abe <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80031ee:	4b28      	ldr	r3, [pc, #160]	; (8003290 <HAL_RCC_ClockConfig+0x340>)
 80031f0:	689b      	ldr	r3, [r3, #8]
 80031f2:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	68db      	ldr	r3, [r3, #12]
 80031fa:	4925      	ldr	r1, [pc, #148]	; (8003290 <HAL_RCC_ClockConfig+0x340>)
 80031fc:	4313      	orrs	r3, r2
 80031fe:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	f003 0308 	and.w	r3, r3, #8
 8003208:	2b00      	cmp	r3, #0
 800320a:	d026      	beq.n	800325a <HAL_RCC_ClockConfig+0x30a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	691b      	ldr	r3, [r3, #16]
 8003210:	2b00      	cmp	r3, #0
 8003212:	d018      	beq.n	8003246 <HAL_RCC_ClockConfig+0x2f6>
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	691b      	ldr	r3, [r3, #16]
 8003218:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800321c:	d013      	beq.n	8003246 <HAL_RCC_ClockConfig+0x2f6>
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	691b      	ldr	r3, [r3, #16]
 8003222:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8003226:	d00e      	beq.n	8003246 <HAL_RCC_ClockConfig+0x2f6>
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	691b      	ldr	r3, [r3, #16]
 800322c:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8003230:	d009      	beq.n	8003246 <HAL_RCC_ClockConfig+0x2f6>
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	691b      	ldr	r3, [r3, #16]
 8003236:	f5b3 5fe0 	cmp.w	r3, #7168	; 0x1c00
 800323a:	d004      	beq.n	8003246 <HAL_RCC_ClockConfig+0x2f6>
 800323c:	f240 314d 	movw	r1, #845	; 0x34d
 8003240:	4812      	ldr	r0, [pc, #72]	; (800328c <HAL_RCC_ClockConfig+0x33c>)
 8003242:	f7fd fc3c 	bl	8000abe <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003246:	4b12      	ldr	r3, [pc, #72]	; (8003290 <HAL_RCC_ClockConfig+0x340>)
 8003248:	689b      	ldr	r3, [r3, #8]
 800324a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	691b      	ldr	r3, [r3, #16]
 8003252:	00db      	lsls	r3, r3, #3
 8003254:	490e      	ldr	r1, [pc, #56]	; (8003290 <HAL_RCC_ClockConfig+0x340>)
 8003256:	4313      	orrs	r3, r2
 8003258:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800325a:	f000 f821 	bl	80032a0 <HAL_RCC_GetSysClockFreq>
 800325e:	4602      	mov	r2, r0
 8003260:	4b0b      	ldr	r3, [pc, #44]	; (8003290 <HAL_RCC_ClockConfig+0x340>)
 8003262:	689b      	ldr	r3, [r3, #8]
 8003264:	091b      	lsrs	r3, r3, #4
 8003266:	f003 030f 	and.w	r3, r3, #15
 800326a:	490a      	ldr	r1, [pc, #40]	; (8003294 <HAL_RCC_ClockConfig+0x344>)
 800326c:	5ccb      	ldrb	r3, [r1, r3]
 800326e:	fa22 f303 	lsr.w	r3, r2, r3
 8003272:	4a09      	ldr	r2, [pc, #36]	; (8003298 <HAL_RCC_ClockConfig+0x348>)
 8003274:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003276:	4b09      	ldr	r3, [pc, #36]	; (800329c <HAL_RCC_ClockConfig+0x34c>)
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	4618      	mov	r0, r3
 800327c:	f7fd fe30 	bl	8000ee0 <HAL_InitTick>

  return HAL_OK;
 8003280:	2300      	movs	r3, #0
}
 8003282:	4618      	mov	r0, r3
 8003284:	3710      	adds	r7, #16
 8003286:	46bd      	mov	sp, r7
 8003288:	bd80      	pop	{r7, pc}
 800328a:	bf00      	nop
 800328c:	0800bdb8 	.word	0x0800bdb8
 8003290:	40023800 	.word	0x40023800
 8003294:	0800bedc 	.word	0x0800bedc
 8003298:	20000004 	.word	0x20000004
 800329c:	20000008 	.word	0x20000008

080032a0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80032a0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80032a4:	b090      	sub	sp, #64	; 0x40
 80032a6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80032a8:	2300      	movs	r3, #0
 80032aa:	637b      	str	r3, [r7, #52]	; 0x34
 80032ac:	2300      	movs	r3, #0
 80032ae:	63fb      	str	r3, [r7, #60]	; 0x3c
 80032b0:	2300      	movs	r3, #0
 80032b2:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0;
 80032b4:	2300      	movs	r3, #0
 80032b6:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80032b8:	4b59      	ldr	r3, [pc, #356]	; (8003420 <HAL_RCC_GetSysClockFreq+0x180>)
 80032ba:	689b      	ldr	r3, [r3, #8]
 80032bc:	f003 030c 	and.w	r3, r3, #12
 80032c0:	2b08      	cmp	r3, #8
 80032c2:	d00d      	beq.n	80032e0 <HAL_RCC_GetSysClockFreq+0x40>
 80032c4:	2b08      	cmp	r3, #8
 80032c6:	f200 80a1 	bhi.w	800340c <HAL_RCC_GetSysClockFreq+0x16c>
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d002      	beq.n	80032d4 <HAL_RCC_GetSysClockFreq+0x34>
 80032ce:	2b04      	cmp	r3, #4
 80032d0:	d003      	beq.n	80032da <HAL_RCC_GetSysClockFreq+0x3a>
 80032d2:	e09b      	b.n	800340c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80032d4:	4b53      	ldr	r3, [pc, #332]	; (8003424 <HAL_RCC_GetSysClockFreq+0x184>)
 80032d6:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80032d8:	e09b      	b.n	8003412 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80032da:	4b53      	ldr	r3, [pc, #332]	; (8003428 <HAL_RCC_GetSysClockFreq+0x188>)
 80032dc:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80032de:	e098      	b.n	8003412 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80032e0:	4b4f      	ldr	r3, [pc, #316]	; (8003420 <HAL_RCC_GetSysClockFreq+0x180>)
 80032e2:	685b      	ldr	r3, [r3, #4]
 80032e4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80032e8:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80032ea:	4b4d      	ldr	r3, [pc, #308]	; (8003420 <HAL_RCC_GetSysClockFreq+0x180>)
 80032ec:	685b      	ldr	r3, [r3, #4]
 80032ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d028      	beq.n	8003348 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80032f6:	4b4a      	ldr	r3, [pc, #296]	; (8003420 <HAL_RCC_GetSysClockFreq+0x180>)
 80032f8:	685b      	ldr	r3, [r3, #4]
 80032fa:	099b      	lsrs	r3, r3, #6
 80032fc:	2200      	movs	r2, #0
 80032fe:	623b      	str	r3, [r7, #32]
 8003300:	627a      	str	r2, [r7, #36]	; 0x24
 8003302:	6a3b      	ldr	r3, [r7, #32]
 8003304:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003308:	2100      	movs	r1, #0
 800330a:	4b47      	ldr	r3, [pc, #284]	; (8003428 <HAL_RCC_GetSysClockFreq+0x188>)
 800330c:	fb03 f201 	mul.w	r2, r3, r1
 8003310:	2300      	movs	r3, #0
 8003312:	fb00 f303 	mul.w	r3, r0, r3
 8003316:	4413      	add	r3, r2
 8003318:	4a43      	ldr	r2, [pc, #268]	; (8003428 <HAL_RCC_GetSysClockFreq+0x188>)
 800331a:	fba0 1202 	umull	r1, r2, r0, r2
 800331e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003320:	460a      	mov	r2, r1
 8003322:	62ba      	str	r2, [r7, #40]	; 0x28
 8003324:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003326:	4413      	add	r3, r2
 8003328:	62fb      	str	r3, [r7, #44]	; 0x2c
 800332a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800332c:	2200      	movs	r2, #0
 800332e:	61bb      	str	r3, [r7, #24]
 8003330:	61fa      	str	r2, [r7, #28]
 8003332:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003336:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800333a:	f7fc ffb9 	bl	80002b0 <__aeabi_uldivmod>
 800333e:	4602      	mov	r2, r0
 8003340:	460b      	mov	r3, r1
 8003342:	4613      	mov	r3, r2
 8003344:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003346:	e053      	b.n	80033f0 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003348:	4b35      	ldr	r3, [pc, #212]	; (8003420 <HAL_RCC_GetSysClockFreq+0x180>)
 800334a:	685b      	ldr	r3, [r3, #4]
 800334c:	099b      	lsrs	r3, r3, #6
 800334e:	2200      	movs	r2, #0
 8003350:	613b      	str	r3, [r7, #16]
 8003352:	617a      	str	r2, [r7, #20]
 8003354:	693b      	ldr	r3, [r7, #16]
 8003356:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800335a:	f04f 0b00 	mov.w	fp, #0
 800335e:	4652      	mov	r2, sl
 8003360:	465b      	mov	r3, fp
 8003362:	f04f 0000 	mov.w	r0, #0
 8003366:	f04f 0100 	mov.w	r1, #0
 800336a:	0159      	lsls	r1, r3, #5
 800336c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003370:	0150      	lsls	r0, r2, #5
 8003372:	4602      	mov	r2, r0
 8003374:	460b      	mov	r3, r1
 8003376:	ebb2 080a 	subs.w	r8, r2, sl
 800337a:	eb63 090b 	sbc.w	r9, r3, fp
 800337e:	f04f 0200 	mov.w	r2, #0
 8003382:	f04f 0300 	mov.w	r3, #0
 8003386:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800338a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800338e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003392:	ebb2 0408 	subs.w	r4, r2, r8
 8003396:	eb63 0509 	sbc.w	r5, r3, r9
 800339a:	f04f 0200 	mov.w	r2, #0
 800339e:	f04f 0300 	mov.w	r3, #0
 80033a2:	00eb      	lsls	r3, r5, #3
 80033a4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80033a8:	00e2      	lsls	r2, r4, #3
 80033aa:	4614      	mov	r4, r2
 80033ac:	461d      	mov	r5, r3
 80033ae:	eb14 030a 	adds.w	r3, r4, sl
 80033b2:	603b      	str	r3, [r7, #0]
 80033b4:	eb45 030b 	adc.w	r3, r5, fp
 80033b8:	607b      	str	r3, [r7, #4]
 80033ba:	f04f 0200 	mov.w	r2, #0
 80033be:	f04f 0300 	mov.w	r3, #0
 80033c2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80033c6:	4629      	mov	r1, r5
 80033c8:	028b      	lsls	r3, r1, #10
 80033ca:	4621      	mov	r1, r4
 80033cc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80033d0:	4621      	mov	r1, r4
 80033d2:	028a      	lsls	r2, r1, #10
 80033d4:	4610      	mov	r0, r2
 80033d6:	4619      	mov	r1, r3
 80033d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80033da:	2200      	movs	r2, #0
 80033dc:	60bb      	str	r3, [r7, #8]
 80033de:	60fa      	str	r2, [r7, #12]
 80033e0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80033e4:	f7fc ff64 	bl	80002b0 <__aeabi_uldivmod>
 80033e8:	4602      	mov	r2, r0
 80033ea:	460b      	mov	r3, r1
 80033ec:	4613      	mov	r3, r2
 80033ee:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80033f0:	4b0b      	ldr	r3, [pc, #44]	; (8003420 <HAL_RCC_GetSysClockFreq+0x180>)
 80033f2:	685b      	ldr	r3, [r3, #4]
 80033f4:	0c1b      	lsrs	r3, r3, #16
 80033f6:	f003 0303 	and.w	r3, r3, #3
 80033fa:	3301      	adds	r3, #1
 80033fc:	005b      	lsls	r3, r3, #1
 80033fe:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 8003400:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003402:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003404:	fbb2 f3f3 	udiv	r3, r2, r3
 8003408:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800340a:	e002      	b.n	8003412 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800340c:	4b05      	ldr	r3, [pc, #20]	; (8003424 <HAL_RCC_GetSysClockFreq+0x184>)
 800340e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003410:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003412:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8003414:	4618      	mov	r0, r3
 8003416:	3740      	adds	r7, #64	; 0x40
 8003418:	46bd      	mov	sp, r7
 800341a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800341e:	bf00      	nop
 8003420:	40023800 	.word	0x40023800
 8003424:	00f42400 	.word	0x00f42400
 8003428:	017d7840 	.word	0x017d7840

0800342c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800342c:	b480      	push	{r7}
 800342e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003430:	4b03      	ldr	r3, [pc, #12]	; (8003440 <HAL_RCC_GetHCLKFreq+0x14>)
 8003432:	681b      	ldr	r3, [r3, #0]
}
 8003434:	4618      	mov	r0, r3
 8003436:	46bd      	mov	sp, r7
 8003438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800343c:	4770      	bx	lr
 800343e:	bf00      	nop
 8003440:	20000004 	.word	0x20000004

08003444 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003444:	b580      	push	{r7, lr}
 8003446:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003448:	f7ff fff0 	bl	800342c <HAL_RCC_GetHCLKFreq>
 800344c:	4602      	mov	r2, r0
 800344e:	4b05      	ldr	r3, [pc, #20]	; (8003464 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003450:	689b      	ldr	r3, [r3, #8]
 8003452:	0a9b      	lsrs	r3, r3, #10
 8003454:	f003 0307 	and.w	r3, r3, #7
 8003458:	4903      	ldr	r1, [pc, #12]	; (8003468 <HAL_RCC_GetPCLK1Freq+0x24>)
 800345a:	5ccb      	ldrb	r3, [r1, r3]
 800345c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003460:	4618      	mov	r0, r3
 8003462:	bd80      	pop	{r7, pc}
 8003464:	40023800 	.word	0x40023800
 8003468:	0800beec 	.word	0x0800beec

0800346c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800346c:	b580      	push	{r7, lr}
 800346e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003470:	f7ff ffdc 	bl	800342c <HAL_RCC_GetHCLKFreq>
 8003474:	4602      	mov	r2, r0
 8003476:	4b05      	ldr	r3, [pc, #20]	; (800348c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003478:	689b      	ldr	r3, [r3, #8]
 800347a:	0b5b      	lsrs	r3, r3, #13
 800347c:	f003 0307 	and.w	r3, r3, #7
 8003480:	4903      	ldr	r1, [pc, #12]	; (8003490 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003482:	5ccb      	ldrb	r3, [r1, r3]
 8003484:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003488:	4618      	mov	r0, r3
 800348a:	bd80      	pop	{r7, pc}
 800348c:	40023800 	.word	0x40023800
 8003490:	0800beec 	.word	0x0800beec

08003494 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003494:	b580      	push	{r7, lr}
 8003496:	b088      	sub	sp, #32
 8003498:	af00      	add	r7, sp, #0
 800349a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800349c:	2300      	movs	r3, #0
 800349e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80034a0:	2300      	movs	r3, #0
 80034a2:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80034a4:	2300      	movs	r3, #0
 80034a6:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80034a8:	2300      	movs	r3, #0
 80034aa:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80034ac:	2300      	movs	r3, #0
 80034ae:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f003 0301 	and.w	r3, r3, #1
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	f040 8089 	bne.w	80035d0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	f003 0308 	and.w	r3, r3, #8
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	f040 8082 	bne.w	80035d0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	f003 0310 	and.w	r3, r3, #16
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d17b      	bne.n	80035d0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d175      	bne.n	80035d0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d16f      	bne.n	80035d0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d169      	bne.n	80035d0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003504:	2b00      	cmp	r3, #0
 8003506:	d163      	bne.n	80035d0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003510:	2b00      	cmp	r3, #0
 8003512:	d15d      	bne.n	80035d0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800351c:	2b00      	cmp	r3, #0
 800351e:	d157      	bne.n	80035d0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003528:	2b00      	cmp	r3, #0
 800352a:	d151      	bne.n	80035d0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003534:	2b00      	cmp	r3, #0
 8003536:	d14b      	bne.n	80035d0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003540:	2b00      	cmp	r3, #0
 8003542:	d145      	bne.n	80035d0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800354c:	2b00      	cmp	r3, #0
 800354e:	d13f      	bne.n	80035d0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003558:	2b00      	cmp	r3, #0
 800355a:	d139      	bne.n	80035d0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003564:	2b00      	cmp	r3, #0
 8003566:	d133      	bne.n	80035d0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003570:	2b00      	cmp	r3, #0
 8003572:	d12d      	bne.n	80035d0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800357c:	2b00      	cmp	r3, #0
 800357e:	d127      	bne.n	80035d0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003588:	2b00      	cmp	r3, #0
 800358a:	d121      	bne.n	80035d0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003594:	2b00      	cmp	r3, #0
 8003596:	d11b      	bne.n	80035d0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d115      	bne.n	80035d0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d10f      	bne.n	80035d0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d109      	bne.n	80035d0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	f003 0320 	and.w	r3, r3, #32
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d103      	bne.n	80035d0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80035c8:	2172      	movs	r1, #114	; 0x72
 80035ca:	4895      	ldr	r0, [pc, #596]	; (8003820 <HAL_RCCEx_PeriphCLKConfig+0x38c>)
 80035cc:	f7fd fa77 	bl	8000abe <assert_failed>

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	f003 0301 	and.w	r3, r3, #1
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d01f      	beq.n	800361c <HAL_RCCEx_PeriphCLKConfig+0x188>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d008      	beq.n	80035f6 <HAL_RCCEx_PeriphCLKConfig+0x162>
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80035e8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80035ec:	d003      	beq.n	80035f6 <HAL_RCCEx_PeriphCLKConfig+0x162>
 80035ee:	2178      	movs	r1, #120	; 0x78
 80035f0:	488b      	ldr	r0, [pc, #556]	; (8003820 <HAL_RCCEx_PeriphCLKConfig+0x38c>)
 80035f2:	f7fd fa64 	bl	8000abe <assert_failed>

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80035f6:	4b8b      	ldr	r3, [pc, #556]	; (8003824 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 80035f8:	689b      	ldr	r3, [r3, #8]
 80035fa:	4a8a      	ldr	r2, [pc, #552]	; (8003824 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 80035fc:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003600:	6093      	str	r3, [r2, #8]
 8003602:	4b88      	ldr	r3, [pc, #544]	; (8003824 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 8003604:	689a      	ldr	r2, [r3, #8]
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800360a:	4986      	ldr	r1, [pc, #536]	; (8003824 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 800360c:	4313      	orrs	r3, r2
 800360e:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003614:	2b00      	cmp	r3, #0
 8003616:	d101      	bne.n	800361c <HAL_RCCEx_PeriphCLKConfig+0x188>
    {
      plli2sused = 1;
 8003618:	2301      	movs	r3, #1
 800361a:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003624:	2b00      	cmp	r3, #0
 8003626:	d029      	beq.n	800367c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800362c:	2b00      	cmp	r3, #0
 800362e:	d00d      	beq.n	800364c <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003634:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003638:	d008      	beq.n	800364c <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800363e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003642:	d003      	beq.n	800364c <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8003644:	2188      	movs	r1, #136	; 0x88
 8003646:	4876      	ldr	r0, [pc, #472]	; (8003820 <HAL_RCCEx_PeriphCLKConfig+0x38c>)
 8003648:	f7fd fa39 	bl	8000abe <assert_failed>

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800364c:	4b75      	ldr	r3, [pc, #468]	; (8003824 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 800364e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003652:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800365a:	4972      	ldr	r1, [pc, #456]	; (8003824 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 800365c:	4313      	orrs	r3, r2
 800365e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003666:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800366a:	d101      	bne.n	8003670 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
    {
      plli2sused = 1;
 800366c:	2301      	movs	r3, #1
 800366e:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003674:	2b00      	cmp	r3, #0
 8003676:	d101      	bne.n	800367c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
    {
      pllsaiused = 1;
 8003678:	2301      	movs	r3, #1
 800367a:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003684:	2b00      	cmp	r3, #0
 8003686:	d029      	beq.n	80036dc <HAL_RCCEx_PeriphCLKConfig+0x248>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800368c:	2b00      	cmp	r3, #0
 800368e:	d00d      	beq.n	80036ac <HAL_RCCEx_PeriphCLKConfig+0x218>
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003694:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003698:	d008      	beq.n	80036ac <HAL_RCCEx_PeriphCLKConfig+0x218>
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800369e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80036a2:	d003      	beq.n	80036ac <HAL_RCCEx_PeriphCLKConfig+0x218>
 80036a4:	219c      	movs	r1, #156	; 0x9c
 80036a6:	485e      	ldr	r0, [pc, #376]	; (8003820 <HAL_RCCEx_PeriphCLKConfig+0x38c>)
 80036a8:	f7fd fa09 	bl	8000abe <assert_failed>

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80036ac:	4b5d      	ldr	r3, [pc, #372]	; (8003824 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 80036ae:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80036b2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036ba:	495a      	ldr	r1, [pc, #360]	; (8003824 <HAL_RCCEx_PeriphCLKConfig+0x390>)
 80036bc:	4313      	orrs	r3, r2
 80036be:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036c6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80036ca:	d101      	bne.n	80036d0 <HAL_RCCEx_PeriphCLKConfig+0x23c>
    {
      plli2sused = 1;
 80036cc:	2301      	movs	r3, #1
 80036ce:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d101      	bne.n	80036dc <HAL_RCCEx_PeriphCLKConfig+0x248>
    {
      pllsaiused = 1;
 80036d8:	2301      	movs	r3, #1
 80036da:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d001      	beq.n	80036ec <HAL_RCCEx_PeriphCLKConfig+0x258>
  {
      plli2sused = 1;
 80036e8:	2301      	movs	r3, #1
 80036ea:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	f003 0320 	and.w	r3, r3, #32
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	f000 8186 	beq.w	8003a06 <HAL_RCCEx_PeriphCLKConfig+0x572>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036fe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003702:	f000 80e4 	beq.w	80038ce <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800370a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800370e:	f000 80de 	beq.w	80038ce <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003716:	4a44      	ldr	r2, [pc, #272]	; (8003828 <HAL_RCCEx_PeriphCLKConfig+0x394>)
 8003718:	4293      	cmp	r3, r2
 800371a:	f000 80d8 	beq.w	80038ce <HAL_RCCEx_PeriphCLKConfig+0x43a>
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003722:	4a42      	ldr	r2, [pc, #264]	; (800382c <HAL_RCCEx_PeriphCLKConfig+0x398>)
 8003724:	4293      	cmp	r3, r2
 8003726:	f000 80d2 	beq.w	80038ce <HAL_RCCEx_PeriphCLKConfig+0x43a>
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800372e:	4a40      	ldr	r2, [pc, #256]	; (8003830 <HAL_RCCEx_PeriphCLKConfig+0x39c>)
 8003730:	4293      	cmp	r3, r2
 8003732:	f000 80cc 	beq.w	80038ce <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800373a:	4a3e      	ldr	r2, [pc, #248]	; (8003834 <HAL_RCCEx_PeriphCLKConfig+0x3a0>)
 800373c:	4293      	cmp	r3, r2
 800373e:	f000 80c6 	beq.w	80038ce <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003746:	4a3c      	ldr	r2, [pc, #240]	; (8003838 <HAL_RCCEx_PeriphCLKConfig+0x3a4>)
 8003748:	4293      	cmp	r3, r2
 800374a:	f000 80c0 	beq.w	80038ce <HAL_RCCEx_PeriphCLKConfig+0x43a>
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003752:	4a3a      	ldr	r2, [pc, #232]	; (800383c <HAL_RCCEx_PeriphCLKConfig+0x3a8>)
 8003754:	4293      	cmp	r3, r2
 8003756:	f000 80ba 	beq.w	80038ce <HAL_RCCEx_PeriphCLKConfig+0x43a>
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800375e:	4a38      	ldr	r2, [pc, #224]	; (8003840 <HAL_RCCEx_PeriphCLKConfig+0x3ac>)
 8003760:	4293      	cmp	r3, r2
 8003762:	f000 80b4 	beq.w	80038ce <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800376a:	4a36      	ldr	r2, [pc, #216]	; (8003844 <HAL_RCCEx_PeriphCLKConfig+0x3b0>)
 800376c:	4293      	cmp	r3, r2
 800376e:	f000 80ae 	beq.w	80038ce <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003776:	4a34      	ldr	r2, [pc, #208]	; (8003848 <HAL_RCCEx_PeriphCLKConfig+0x3b4>)
 8003778:	4293      	cmp	r3, r2
 800377a:	f000 80a8 	beq.w	80038ce <HAL_RCCEx_PeriphCLKConfig+0x43a>
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003782:	4a32      	ldr	r2, [pc, #200]	; (800384c <HAL_RCCEx_PeriphCLKConfig+0x3b8>)
 8003784:	4293      	cmp	r3, r2
 8003786:	f000 80a2 	beq.w	80038ce <HAL_RCCEx_PeriphCLKConfig+0x43a>
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800378e:	4a30      	ldr	r2, [pc, #192]	; (8003850 <HAL_RCCEx_PeriphCLKConfig+0x3bc>)
 8003790:	4293      	cmp	r3, r2
 8003792:	f000 809c 	beq.w	80038ce <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800379a:	4a2e      	ldr	r2, [pc, #184]	; (8003854 <HAL_RCCEx_PeriphCLKConfig+0x3c0>)
 800379c:	4293      	cmp	r3, r2
 800379e:	f000 8096 	beq.w	80038ce <HAL_RCCEx_PeriphCLKConfig+0x43a>
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037a6:	4a2c      	ldr	r2, [pc, #176]	; (8003858 <HAL_RCCEx_PeriphCLKConfig+0x3c4>)
 80037a8:	4293      	cmp	r3, r2
 80037aa:	f000 8090 	beq.w	80038ce <HAL_RCCEx_PeriphCLKConfig+0x43a>
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037b2:	4a2a      	ldr	r2, [pc, #168]	; (800385c <HAL_RCCEx_PeriphCLKConfig+0x3c8>)
 80037b4:	4293      	cmp	r3, r2
 80037b6:	f000 808a 	beq.w	80038ce <HAL_RCCEx_PeriphCLKConfig+0x43a>
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037be:	4a28      	ldr	r2, [pc, #160]	; (8003860 <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 80037c0:	4293      	cmp	r3, r2
 80037c2:	f000 8084 	beq.w	80038ce <HAL_RCCEx_PeriphCLKConfig+0x43a>
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037ca:	4a26      	ldr	r2, [pc, #152]	; (8003864 <HAL_RCCEx_PeriphCLKConfig+0x3d0>)
 80037cc:	4293      	cmp	r3, r2
 80037ce:	d07e      	beq.n	80038ce <HAL_RCCEx_PeriphCLKConfig+0x43a>
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037d4:	4a24      	ldr	r2, [pc, #144]	; (8003868 <HAL_RCCEx_PeriphCLKConfig+0x3d4>)
 80037d6:	4293      	cmp	r3, r2
 80037d8:	d079      	beq.n	80038ce <HAL_RCCEx_PeriphCLKConfig+0x43a>
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037de:	4a23      	ldr	r2, [pc, #140]	; (800386c <HAL_RCCEx_PeriphCLKConfig+0x3d8>)
 80037e0:	4293      	cmp	r3, r2
 80037e2:	d074      	beq.n	80038ce <HAL_RCCEx_PeriphCLKConfig+0x43a>
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037e8:	4a21      	ldr	r2, [pc, #132]	; (8003870 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80037ea:	4293      	cmp	r3, r2
 80037ec:	d06f      	beq.n	80038ce <HAL_RCCEx_PeriphCLKConfig+0x43a>
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037f2:	4a20      	ldr	r2, [pc, #128]	; (8003874 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80037f4:	4293      	cmp	r3, r2
 80037f6:	d06a      	beq.n	80038ce <HAL_RCCEx_PeriphCLKConfig+0x43a>
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037fc:	4a1e      	ldr	r2, [pc, #120]	; (8003878 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80037fe:	4293      	cmp	r3, r2
 8003800:	d065      	beq.n	80038ce <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003806:	4a1d      	ldr	r2, [pc, #116]	; (800387c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003808:	4293      	cmp	r3, r2
 800380a:	d060      	beq.n	80038ce <HAL_RCCEx_PeriphCLKConfig+0x43a>
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003810:	4a1b      	ldr	r2, [pc, #108]	; (8003880 <HAL_RCCEx_PeriphCLKConfig+0x3ec>)
 8003812:	4293      	cmp	r3, r2
 8003814:	d05b      	beq.n	80038ce <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800381a:	4a1a      	ldr	r2, [pc, #104]	; (8003884 <HAL_RCCEx_PeriphCLKConfig+0x3f0>)
 800381c:	4293      	cmp	r3, r2
 800381e:	e033      	b.n	8003888 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
 8003820:	0800bdf0 	.word	0x0800bdf0
 8003824:	40023800 	.word	0x40023800
 8003828:	00020300 	.word	0x00020300
 800382c:	00030300 	.word	0x00030300
 8003830:	00040300 	.word	0x00040300
 8003834:	00050300 	.word	0x00050300
 8003838:	00060300 	.word	0x00060300
 800383c:	00070300 	.word	0x00070300
 8003840:	00080300 	.word	0x00080300
 8003844:	00090300 	.word	0x00090300
 8003848:	000a0300 	.word	0x000a0300
 800384c:	000b0300 	.word	0x000b0300
 8003850:	000c0300 	.word	0x000c0300
 8003854:	000d0300 	.word	0x000d0300
 8003858:	000e0300 	.word	0x000e0300
 800385c:	000f0300 	.word	0x000f0300
 8003860:	00100300 	.word	0x00100300
 8003864:	00110300 	.word	0x00110300
 8003868:	00120300 	.word	0x00120300
 800386c:	00130300 	.word	0x00130300
 8003870:	00140300 	.word	0x00140300
 8003874:	00150300 	.word	0x00150300
 8003878:	00160300 	.word	0x00160300
 800387c:	00170300 	.word	0x00170300
 8003880:	00180300 	.word	0x00180300
 8003884:	00190300 	.word	0x00190300
 8003888:	d021      	beq.n	80038ce <HAL_RCCEx_PeriphCLKConfig+0x43a>
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800388e:	4a4c      	ldr	r2, [pc, #304]	; (80039c0 <HAL_RCCEx_PeriphCLKConfig+0x52c>)
 8003890:	4293      	cmp	r3, r2
 8003892:	d01c      	beq.n	80038ce <HAL_RCCEx_PeriphCLKConfig+0x43a>
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003898:	4a4a      	ldr	r2, [pc, #296]	; (80039c4 <HAL_RCCEx_PeriphCLKConfig+0x530>)
 800389a:	4293      	cmp	r3, r2
 800389c:	d017      	beq.n	80038ce <HAL_RCCEx_PeriphCLKConfig+0x43a>
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038a2:	4a49      	ldr	r2, [pc, #292]	; (80039c8 <HAL_RCCEx_PeriphCLKConfig+0x534>)
 80038a4:	4293      	cmp	r3, r2
 80038a6:	d012      	beq.n	80038ce <HAL_RCCEx_PeriphCLKConfig+0x43a>
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038ac:	4a47      	ldr	r2, [pc, #284]	; (80039cc <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80038ae:	4293      	cmp	r3, r2
 80038b0:	d00d      	beq.n	80038ce <HAL_RCCEx_PeriphCLKConfig+0x43a>
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038b6:	4a46      	ldr	r2, [pc, #280]	; (80039d0 <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 80038b8:	4293      	cmp	r3, r2
 80038ba:	d008      	beq.n	80038ce <HAL_RCCEx_PeriphCLKConfig+0x43a>
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038c0:	4a44      	ldr	r2, [pc, #272]	; (80039d4 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 80038c2:	4293      	cmp	r3, r2
 80038c4:	d003      	beq.n	80038ce <HAL_RCCEx_PeriphCLKConfig+0x43a>
 80038c6:	21b7      	movs	r1, #183	; 0xb7
 80038c8:	4843      	ldr	r0, [pc, #268]	; (80039d8 <HAL_RCCEx_PeriphCLKConfig+0x544>)
 80038ca:	f7fd f8f8 	bl	8000abe <assert_failed>

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80038ce:	4b43      	ldr	r3, [pc, #268]	; (80039dc <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80038d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038d2:	4a42      	ldr	r2, [pc, #264]	; (80039dc <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80038d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80038d8:	6413      	str	r3, [r2, #64]	; 0x40
 80038da:	4b40      	ldr	r3, [pc, #256]	; (80039dc <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80038dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038e2:	60bb      	str	r3, [r7, #8]
 80038e4:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80038e6:	4b3e      	ldr	r3, [pc, #248]	; (80039e0 <HAL_RCCEx_PeriphCLKConfig+0x54c>)
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	4a3d      	ldr	r2, [pc, #244]	; (80039e0 <HAL_RCCEx_PeriphCLKConfig+0x54c>)
 80038ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80038f0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80038f2:	f7fd fb39 	bl	8000f68 <HAL_GetTick>
 80038f6:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80038f8:	e009      	b.n	800390e <HAL_RCCEx_PeriphCLKConfig+0x47a>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80038fa:	f7fd fb35 	bl	8000f68 <HAL_GetTick>
 80038fe:	4602      	mov	r2, r0
 8003900:	697b      	ldr	r3, [r7, #20]
 8003902:	1ad3      	subs	r3, r2, r3
 8003904:	2b64      	cmp	r3, #100	; 0x64
 8003906:	d902      	bls.n	800390e <HAL_RCCEx_PeriphCLKConfig+0x47a>
      {
        return HAL_TIMEOUT;
 8003908:	2303      	movs	r3, #3
 800390a:	f000 bd9f 	b.w	800444c <HAL_RCCEx_PeriphCLKConfig+0xfb8>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800390e:	4b34      	ldr	r3, [pc, #208]	; (80039e0 <HAL_RCCEx_PeriphCLKConfig+0x54c>)
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003916:	2b00      	cmp	r3, #0
 8003918:	d0ef      	beq.n	80038fa <HAL_RCCEx_PeriphCLKConfig+0x466>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800391a:	4b30      	ldr	r3, [pc, #192]	; (80039dc <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800391c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800391e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003922:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003924:	693b      	ldr	r3, [r7, #16]
 8003926:	2b00      	cmp	r3, #0
 8003928:	d036      	beq.n	8003998 <HAL_RCCEx_PeriphCLKConfig+0x504>
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800392e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003932:	693a      	ldr	r2, [r7, #16]
 8003934:	429a      	cmp	r2, r3
 8003936:	d02f      	beq.n	8003998 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003938:	4b28      	ldr	r3, [pc, #160]	; (80039dc <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800393a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800393c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003940:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003942:	4b26      	ldr	r3, [pc, #152]	; (80039dc <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003944:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003946:	4a25      	ldr	r2, [pc, #148]	; (80039dc <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003948:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800394c:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800394e:	4b23      	ldr	r3, [pc, #140]	; (80039dc <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003950:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003952:	4a22      	ldr	r2, [pc, #136]	; (80039dc <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003954:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003958:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800395a:	4a20      	ldr	r2, [pc, #128]	; (80039dc <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800395c:	693b      	ldr	r3, [r7, #16]
 800395e:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003960:	4b1e      	ldr	r3, [pc, #120]	; (80039dc <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003962:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003964:	f003 0301 	and.w	r3, r3, #1
 8003968:	2b01      	cmp	r3, #1
 800396a:	d115      	bne.n	8003998 <HAL_RCCEx_PeriphCLKConfig+0x504>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800396c:	f7fd fafc 	bl	8000f68 <HAL_GetTick>
 8003970:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003972:	e00b      	b.n	800398c <HAL_RCCEx_PeriphCLKConfig+0x4f8>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003974:	f7fd faf8 	bl	8000f68 <HAL_GetTick>
 8003978:	4602      	mov	r2, r0
 800397a:	697b      	ldr	r3, [r7, #20]
 800397c:	1ad3      	subs	r3, r2, r3
 800397e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003982:	4293      	cmp	r3, r2
 8003984:	d902      	bls.n	800398c <HAL_RCCEx_PeriphCLKConfig+0x4f8>
          {
            return HAL_TIMEOUT;
 8003986:	2303      	movs	r3, #3
 8003988:	f000 bd60 	b.w	800444c <HAL_RCCEx_PeriphCLKConfig+0xfb8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800398c:	4b13      	ldr	r3, [pc, #76]	; (80039dc <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800398e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003990:	f003 0302 	and.w	r3, r3, #2
 8003994:	2b00      	cmp	r3, #0
 8003996:	d0ed      	beq.n	8003974 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800399c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80039a0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80039a4:	d120      	bne.n	80039e8 <HAL_RCCEx_PeriphCLKConfig+0x554>
 80039a6:	4b0d      	ldr	r3, [pc, #52]	; (80039dc <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80039a8:	689b      	ldr	r3, [r3, #8]
 80039aa:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80039b2:	4b0c      	ldr	r3, [pc, #48]	; (80039e4 <HAL_RCCEx_PeriphCLKConfig+0x550>)
 80039b4:	400b      	ands	r3, r1
 80039b6:	4909      	ldr	r1, [pc, #36]	; (80039dc <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80039b8:	4313      	orrs	r3, r2
 80039ba:	608b      	str	r3, [r1, #8]
 80039bc:	e01a      	b.n	80039f4 <HAL_RCCEx_PeriphCLKConfig+0x560>
 80039be:	bf00      	nop
 80039c0:	001a0300 	.word	0x001a0300
 80039c4:	001b0300 	.word	0x001b0300
 80039c8:	001c0300 	.word	0x001c0300
 80039cc:	001d0300 	.word	0x001d0300
 80039d0:	001e0300 	.word	0x001e0300
 80039d4:	001f0300 	.word	0x001f0300
 80039d8:	0800bdf0 	.word	0x0800bdf0
 80039dc:	40023800 	.word	0x40023800
 80039e0:	40007000 	.word	0x40007000
 80039e4:	0ffffcff 	.word	0x0ffffcff
 80039e8:	4b9a      	ldr	r3, [pc, #616]	; (8003c54 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 80039ea:	689b      	ldr	r3, [r3, #8]
 80039ec:	4a99      	ldr	r2, [pc, #612]	; (8003c54 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 80039ee:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80039f2:	6093      	str	r3, [r2, #8]
 80039f4:	4b97      	ldr	r3, [pc, #604]	; (8003c54 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 80039f6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039fc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a00:	4994      	ldr	r1, [pc, #592]	; (8003c54 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8003a02:	4313      	orrs	r3, r2
 8003a04:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	f003 0310 	and.w	r3, r3, #16
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d01d      	beq.n	8003a4e <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d008      	beq.n	8003a2c <HAL_RCCEx_PeriphCLKConfig+0x598>
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a1e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003a22:	d003      	beq.n	8003a2c <HAL_RCCEx_PeriphCLKConfig+0x598>
 8003a24:	21f1      	movs	r1, #241	; 0xf1
 8003a26:	488c      	ldr	r0, [pc, #560]	; (8003c58 <HAL_RCCEx_PeriphCLKConfig+0x7c4>)
 8003a28:	f7fd f849 	bl	8000abe <assert_failed>

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003a2c:	4b89      	ldr	r3, [pc, #548]	; (8003c54 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8003a2e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003a32:	4a88      	ldr	r2, [pc, #544]	; (8003c54 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8003a34:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003a38:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8003a3c:	4b85      	ldr	r3, [pc, #532]	; (8003c54 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8003a3e:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a46:	4983      	ldr	r1, [pc, #524]	; (8003c54 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8003a48:	4313      	orrs	r3, r2
 8003a4a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d01c      	beq.n	8003a94 <HAL_RCCEx_PeriphCLKConfig+0x600>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d00d      	beq.n	8003a7e <HAL_RCCEx_PeriphCLKConfig+0x5ea>
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003a66:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a6a:	d008      	beq.n	8003a7e <HAL_RCCEx_PeriphCLKConfig+0x5ea>
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003a70:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003a74:	d003      	beq.n	8003a7e <HAL_RCCEx_PeriphCLKConfig+0x5ea>
 8003a76:	21fb      	movs	r1, #251	; 0xfb
 8003a78:	4877      	ldr	r0, [pc, #476]	; (8003c58 <HAL_RCCEx_PeriphCLKConfig+0x7c4>)
 8003a7a:	f7fd f820 	bl	8000abe <assert_failed>

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003a7e:	4b75      	ldr	r3, [pc, #468]	; (8003c54 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8003a80:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a84:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003a8c:	4971      	ldr	r1, [pc, #452]	; (8003c54 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8003a8e:	4313      	orrs	r3, r2
 8003a90:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d01d      	beq.n	8003adc <HAL_RCCEx_PeriphCLKConfig+0x648>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d00e      	beq.n	8003ac6 <HAL_RCCEx_PeriphCLKConfig+0x632>
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003aac:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003ab0:	d009      	beq.n	8003ac6 <HAL_RCCEx_PeriphCLKConfig+0x632>
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003ab6:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003aba:	d004      	beq.n	8003ac6 <HAL_RCCEx_PeriphCLKConfig+0x632>
 8003abc:	f240 1105 	movw	r1, #261	; 0x105
 8003ac0:	4865      	ldr	r0, [pc, #404]	; (8003c58 <HAL_RCCEx_PeriphCLKConfig+0x7c4>)
 8003ac2:	f7fc fffc 	bl	8000abe <assert_failed>

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003ac6:	4b63      	ldr	r3, [pc, #396]	; (8003c54 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8003ac8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003acc:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003ad4:	495f      	ldr	r1, [pc, #380]	; (8003c54 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8003ad6:	4313      	orrs	r3, r2
 8003ad8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d01d      	beq.n	8003b24 <HAL_RCCEx_PeriphCLKConfig+0x690>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d00e      	beq.n	8003b0e <HAL_RCCEx_PeriphCLKConfig+0x67a>
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003af4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003af8:	d009      	beq.n	8003b0e <HAL_RCCEx_PeriphCLKConfig+0x67a>
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003afe:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003b02:	d004      	beq.n	8003b0e <HAL_RCCEx_PeriphCLKConfig+0x67a>
 8003b04:	f240 110f 	movw	r1, #271	; 0x10f
 8003b08:	4853      	ldr	r0, [pc, #332]	; (8003c58 <HAL_RCCEx_PeriphCLKConfig+0x7c4>)
 8003b0a:	f7fc ffd8 	bl	8000abe <assert_failed>

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003b0e:	4b51      	ldr	r3, [pc, #324]	; (8003c54 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8003b10:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b14:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003b1c:	494d      	ldr	r1, [pc, #308]	; (8003c54 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8003b1e:	4313      	orrs	r3, r2
 8003b20:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d01d      	beq.n	8003b6c <HAL_RCCEx_PeriphCLKConfig+0x6d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d00e      	beq.n	8003b56 <HAL_RCCEx_PeriphCLKConfig+0x6c2>
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b3c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003b40:	d009      	beq.n	8003b56 <HAL_RCCEx_PeriphCLKConfig+0x6c2>
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b46:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003b4a:	d004      	beq.n	8003b56 <HAL_RCCEx_PeriphCLKConfig+0x6c2>
 8003b4c:	f240 1119 	movw	r1, #281	; 0x119
 8003b50:	4841      	ldr	r0, [pc, #260]	; (8003c58 <HAL_RCCEx_PeriphCLKConfig+0x7c4>)
 8003b52:	f7fc ffb4 	bl	8000abe <assert_failed>

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003b56:	4b3f      	ldr	r3, [pc, #252]	; (8003c54 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8003b58:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b5c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b64:	493b      	ldr	r1, [pc, #236]	; (8003c54 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8003b66:	4313      	orrs	r3, r2
 8003b68:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d01f      	beq.n	8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x724>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d010      	beq.n	8003ba2 <HAL_RCCEx_PeriphCLKConfig+0x70e>
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b84:	2b01      	cmp	r3, #1
 8003b86:	d00c      	beq.n	8003ba2 <HAL_RCCEx_PeriphCLKConfig+0x70e>
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b8c:	2b03      	cmp	r3, #3
 8003b8e:	d008      	beq.n	8003ba2 <HAL_RCCEx_PeriphCLKConfig+0x70e>
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b94:	2b02      	cmp	r3, #2
 8003b96:	d004      	beq.n	8003ba2 <HAL_RCCEx_PeriphCLKConfig+0x70e>
 8003b98:	f240 1123 	movw	r1, #291	; 0x123
 8003b9c:	482e      	ldr	r0, [pc, #184]	; (8003c58 <HAL_RCCEx_PeriphCLKConfig+0x7c4>)
 8003b9e:	f7fc ff8e 	bl	8000abe <assert_failed>

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003ba2:	4b2c      	ldr	r3, [pc, #176]	; (8003c54 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8003ba4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ba8:	f023 0203 	bic.w	r2, r3, #3
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bb0:	4928      	ldr	r1, [pc, #160]	; (8003c54 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8003bb2:	4313      	orrs	r3, r2
 8003bb4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d01f      	beq.n	8003c04 <HAL_RCCEx_PeriphCLKConfig+0x770>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d010      	beq.n	8003bee <HAL_RCCEx_PeriphCLKConfig+0x75a>
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003bd0:	2b04      	cmp	r3, #4
 8003bd2:	d00c      	beq.n	8003bee <HAL_RCCEx_PeriphCLKConfig+0x75a>
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003bd8:	2b0c      	cmp	r3, #12
 8003bda:	d008      	beq.n	8003bee <HAL_RCCEx_PeriphCLKConfig+0x75a>
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003be0:	2b08      	cmp	r3, #8
 8003be2:	d004      	beq.n	8003bee <HAL_RCCEx_PeriphCLKConfig+0x75a>
 8003be4:	f240 112d 	movw	r1, #301	; 0x12d
 8003be8:	481b      	ldr	r0, [pc, #108]	; (8003c58 <HAL_RCCEx_PeriphCLKConfig+0x7c4>)
 8003bea:	f7fc ff68 	bl	8000abe <assert_failed>

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003bee:	4b19      	ldr	r3, [pc, #100]	; (8003c54 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8003bf0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bf4:	f023 020c 	bic.w	r2, r3, #12
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003bfc:	4915      	ldr	r1, [pc, #84]	; (8003c54 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8003bfe:	4313      	orrs	r3, r2
 8003c00:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d025      	beq.n	8003c5c <HAL_RCCEx_PeriphCLKConfig+0x7c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d010      	beq.n	8003c3a <HAL_RCCEx_PeriphCLKConfig+0x7a6>
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c1c:	2b10      	cmp	r3, #16
 8003c1e:	d00c      	beq.n	8003c3a <HAL_RCCEx_PeriphCLKConfig+0x7a6>
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c24:	2b30      	cmp	r3, #48	; 0x30
 8003c26:	d008      	beq.n	8003c3a <HAL_RCCEx_PeriphCLKConfig+0x7a6>
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c2c:	2b20      	cmp	r3, #32
 8003c2e:	d004      	beq.n	8003c3a <HAL_RCCEx_PeriphCLKConfig+0x7a6>
 8003c30:	f240 1137 	movw	r1, #311	; 0x137
 8003c34:	4808      	ldr	r0, [pc, #32]	; (8003c58 <HAL_RCCEx_PeriphCLKConfig+0x7c4>)
 8003c36:	f7fc ff42 	bl	8000abe <assert_failed>

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003c3a:	4b06      	ldr	r3, [pc, #24]	; (8003c54 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8003c3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c40:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c48:	4902      	ldr	r1, [pc, #8]	; (8003c54 <HAL_RCCEx_PeriphCLKConfig+0x7c0>)
 8003c4a:	4313      	orrs	r3, r2
 8003c4c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003c50:	e004      	b.n	8003c5c <HAL_RCCEx_PeriphCLKConfig+0x7c8>
 8003c52:	bf00      	nop
 8003c54:	40023800 	.word	0x40023800
 8003c58:	0800bdf0 	.word	0x0800bdf0
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d01f      	beq.n	8003ca8 <HAL_RCCEx_PeriphCLKConfig+0x814>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d010      	beq.n	8003c92 <HAL_RCCEx_PeriphCLKConfig+0x7fe>
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c74:	2b40      	cmp	r3, #64	; 0x40
 8003c76:	d00c      	beq.n	8003c92 <HAL_RCCEx_PeriphCLKConfig+0x7fe>
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c7c:	2bc0      	cmp	r3, #192	; 0xc0
 8003c7e:	d008      	beq.n	8003c92 <HAL_RCCEx_PeriphCLKConfig+0x7fe>
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c84:	2b80      	cmp	r3, #128	; 0x80
 8003c86:	d004      	beq.n	8003c92 <HAL_RCCEx_PeriphCLKConfig+0x7fe>
 8003c88:	f240 1141 	movw	r1, #321	; 0x141
 8003c8c:	48a0      	ldr	r0, [pc, #640]	; (8003f10 <HAL_RCCEx_PeriphCLKConfig+0xa7c>)
 8003c8e:	f7fc ff16 	bl	8000abe <assert_failed>

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003c92:	4ba0      	ldr	r3, [pc, #640]	; (8003f14 <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 8003c94:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c98:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ca0:	499c      	ldr	r1, [pc, #624]	; (8003f14 <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 8003ca2:	4313      	orrs	r3, r2
 8003ca4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d022      	beq.n	8003cfa <HAL_RCCEx_PeriphCLKConfig+0x866>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d013      	beq.n	8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x850>
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cc0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003cc4:	d00e      	beq.n	8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x850>
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cca:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003cce:	d009      	beq.n	8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x850>
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cd4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003cd8:	d004      	beq.n	8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x850>
 8003cda:	f240 114b 	movw	r1, #331	; 0x14b
 8003cde:	488c      	ldr	r0, [pc, #560]	; (8003f10 <HAL_RCCEx_PeriphCLKConfig+0xa7c>)
 8003ce0:	f7fc feed 	bl	8000abe <assert_failed>

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003ce4:	4b8b      	ldr	r3, [pc, #556]	; (8003f14 <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 8003ce6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cea:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cf2:	4988      	ldr	r1, [pc, #544]	; (8003f14 <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 8003cf4:	4313      	orrs	r3, r2
 8003cf6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d022      	beq.n	8003d4c <HAL_RCCEx_PeriphCLKConfig+0x8b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d013      	beq.n	8003d36 <HAL_RCCEx_PeriphCLKConfig+0x8a2>
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d12:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d16:	d00e      	beq.n	8003d36 <HAL_RCCEx_PeriphCLKConfig+0x8a2>
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d1c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003d20:	d009      	beq.n	8003d36 <HAL_RCCEx_PeriphCLKConfig+0x8a2>
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d26:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003d2a:	d004      	beq.n	8003d36 <HAL_RCCEx_PeriphCLKConfig+0x8a2>
 8003d2c:	f240 1155 	movw	r1, #341	; 0x155
 8003d30:	4877      	ldr	r0, [pc, #476]	; (8003f10 <HAL_RCCEx_PeriphCLKConfig+0xa7c>)
 8003d32:	f7fc fec4 	bl	8000abe <assert_failed>

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8003d36:	4b77      	ldr	r3, [pc, #476]	; (8003f14 <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 8003d38:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d3c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d44:	4973      	ldr	r1, [pc, #460]	; (8003f14 <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 8003d46:	4313      	orrs	r3, r2
 8003d48:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d022      	beq.n	8003d9e <HAL_RCCEx_PeriphCLKConfig+0x90a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d013      	beq.n	8003d88 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d64:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d68:	d00e      	beq.n	8003d88 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d6e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003d72:	d009      	beq.n	8003d88 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d78:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003d7c:	d004      	beq.n	8003d88 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
 8003d7e:	f240 115f 	movw	r1, #351	; 0x15f
 8003d82:	4863      	ldr	r0, [pc, #396]	; (8003f10 <HAL_RCCEx_PeriphCLKConfig+0xa7c>)
 8003d84:	f7fc fe9b 	bl	8000abe <assert_failed>

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8003d88:	4b62      	ldr	r3, [pc, #392]	; (8003f14 <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 8003d8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d8e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d96:	495f      	ldr	r1, [pc, #380]	; (8003f14 <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 8003d98:	4313      	orrs	r3, r2
 8003d9a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d022      	beq.n	8003df0 <HAL_RCCEx_PeriphCLKConfig+0x95c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d013      	beq.n	8003dda <HAL_RCCEx_PeriphCLKConfig+0x946>
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003db6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003dba:	d00e      	beq.n	8003dda <HAL_RCCEx_PeriphCLKConfig+0x946>
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003dc0:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003dc4:	d009      	beq.n	8003dda <HAL_RCCEx_PeriphCLKConfig+0x946>
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003dca:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003dce:	d004      	beq.n	8003dda <HAL_RCCEx_PeriphCLKConfig+0x946>
 8003dd0:	f240 1169 	movw	r1, #361	; 0x169
 8003dd4:	484e      	ldr	r0, [pc, #312]	; (8003f10 <HAL_RCCEx_PeriphCLKConfig+0xa7c>)
 8003dd6:	f7fc fe72 	bl	8000abe <assert_failed>

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8003dda:	4b4e      	ldr	r3, [pc, #312]	; (8003f14 <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 8003ddc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003de0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003de8:	494a      	ldr	r1, [pc, #296]	; (8003f14 <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 8003dea:	4313      	orrs	r3, r2
 8003dec:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d018      	beq.n	8003e2e <HAL_RCCEx_PeriphCLKConfig+0x99a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003e00:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003e04:	d008      	beq.n	8003e18 <HAL_RCCEx_PeriphCLKConfig+0x984>
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d004      	beq.n	8003e18 <HAL_RCCEx_PeriphCLKConfig+0x984>
 8003e0e:	f240 1173 	movw	r1, #371	; 0x173
 8003e12:	483f      	ldr	r0, [pc, #252]	; (8003f10 <HAL_RCCEx_PeriphCLKConfig+0xa7c>)
 8003e14:	f7fc fe53 	bl	8000abe <assert_failed>

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003e18:	4b3e      	ldr	r3, [pc, #248]	; (8003f14 <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 8003e1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e1e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003e26:	493b      	ldr	r1, [pc, #236]	; (8003f14 <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 8003e28:	4313      	orrs	r3, r2
 8003e2a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d01f      	beq.n	8003e7a <HAL_RCCEx_PeriphCLKConfig+0x9e6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003e3e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003e42:	d008      	beq.n	8003e56 <HAL_RCCEx_PeriphCLKConfig+0x9c2>
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d004      	beq.n	8003e56 <HAL_RCCEx_PeriphCLKConfig+0x9c2>
 8003e4c:	f240 117d 	movw	r1, #381	; 0x17d
 8003e50:	482f      	ldr	r0, [pc, #188]	; (8003f10 <HAL_RCCEx_PeriphCLKConfig+0xa7c>)
 8003e52:	f7fc fe34 	bl	8000abe <assert_failed>

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003e56:	4b2f      	ldr	r3, [pc, #188]	; (8003f14 <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 8003e58:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e5c:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003e64:	492b      	ldr	r1, [pc, #172]	; (8003f14 <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 8003e66:	4313      	orrs	r3, r2
 8003e68:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003e70:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003e74:	d101      	bne.n	8003e7a <HAL_RCCEx_PeriphCLKConfig+0x9e6>
    {
      pllsaiused = 1;
 8003e76:	2301      	movs	r3, #1
 8003e78:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	f003 0308 	and.w	r3, r3, #8
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d001      	beq.n	8003e8a <HAL_RCCEx_PeriphCLKConfig+0x9f6>
  {
    pllsaiused = 1;
 8003e86:	2301      	movs	r3, #1
 8003e88:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d022      	beq.n	8003edc <HAL_RCCEx_PeriphCLKConfig+0xa48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d013      	beq.n	8003ec6 <HAL_RCCEx_PeriphCLKConfig+0xa32>
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ea2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003ea6:	d00e      	beq.n	8003ec6 <HAL_RCCEx_PeriphCLKConfig+0xa32>
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003eac:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003eb0:	d009      	beq.n	8003ec6 <HAL_RCCEx_PeriphCLKConfig+0xa32>
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003eb6:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003eba:	d004      	beq.n	8003ec6 <HAL_RCCEx_PeriphCLKConfig+0xa32>
 8003ebc:	f240 1195 	movw	r1, #405	; 0x195
 8003ec0:	4813      	ldr	r0, [pc, #76]	; (8003f10 <HAL_RCCEx_PeriphCLKConfig+0xa7c>)
 8003ec2:	f7fc fdfc 	bl	8000abe <assert_failed>

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003ec6:	4b13      	ldr	r3, [pc, #76]	; (8003f14 <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 8003ec8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ecc:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ed4:	490f      	ldr	r1, [pc, #60]	; (8003f14 <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 8003ed6:	4313      	orrs	r3, r2
 8003ed8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d020      	beq.n	8003f2a <HAL_RCCEx_PeriphCLKConfig+0xa96>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003eee:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003ef2:	d009      	beq.n	8003f08 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d004      	beq.n	8003f08 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8003efe:	f240 119f 	movw	r1, #415	; 0x19f
 8003f02:	4803      	ldr	r0, [pc, #12]	; (8003f10 <HAL_RCCEx_PeriphCLKConfig+0xa7c>)
 8003f04:	f7fc fddb 	bl	8000abe <assert_failed>

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003f08:	4b02      	ldr	r3, [pc, #8]	; (8003f14 <HAL_RCCEx_PeriphCLKConfig+0xa80>)
 8003f0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f0e:	e003      	b.n	8003f18 <HAL_RCCEx_PeriphCLKConfig+0xa84>
 8003f10:	0800bdf0 	.word	0x0800bdf0
 8003f14:	40023800 	.word	0x40023800
 8003f18:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003f22:	4910      	ldr	r1, [pc, #64]	; (8003f64 <HAL_RCCEx_PeriphCLKConfig+0xad0>)
 8003f24:	4313      	orrs	r3, r2
 8003f26:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003f2a:	69fb      	ldr	r3, [r7, #28]
 8003f2c:	2b01      	cmp	r3, #1
 8003f2e:	d006      	beq.n	8003f3e <HAL_RCCEx_PeriphCLKConfig+0xaaa>
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	f000 8155 	beq.w	80041e8 <HAL_RCCEx_PeriphCLKConfig+0xd54>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003f3e:	4b09      	ldr	r3, [pc, #36]	; (8003f64 <HAL_RCCEx_PeriphCLKConfig+0xad0>)
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	4a08      	ldr	r2, [pc, #32]	; (8003f64 <HAL_RCCEx_PeriphCLKConfig+0xad0>)
 8003f44:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003f48:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003f4a:	f7fd f80d 	bl	8000f68 <HAL_GetTick>
 8003f4e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003f50:	e00a      	b.n	8003f68 <HAL_RCCEx_PeriphCLKConfig+0xad4>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003f52:	f7fd f809 	bl	8000f68 <HAL_GetTick>
 8003f56:	4602      	mov	r2, r0
 8003f58:	697b      	ldr	r3, [r7, #20]
 8003f5a:	1ad3      	subs	r3, r2, r3
 8003f5c:	2b64      	cmp	r3, #100	; 0x64
 8003f5e:	d903      	bls.n	8003f68 <HAL_RCCEx_PeriphCLKConfig+0xad4>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003f60:	2303      	movs	r3, #3
 8003f62:	e273      	b.n	800444c <HAL_RCCEx_PeriphCLKConfig+0xfb8>
 8003f64:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003f68:	4b9a      	ldr	r3, [pc, #616]	; (80041d4 <HAL_RCCEx_PeriphCLKConfig+0xd40>)
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d1ee      	bne.n	8003f52 <HAL_RCCEx_PeriphCLKConfig+0xabe>
      }
    }

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	685b      	ldr	r3, [r3, #4]
 8003f78:	2b31      	cmp	r3, #49	; 0x31
 8003f7a:	d904      	bls.n	8003f86 <HAL_RCCEx_PeriphCLKConfig+0xaf2>
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	685b      	ldr	r3, [r3, #4]
 8003f80:	f5b3 7fd8 	cmp.w	r3, #432	; 0x1b0
 8003f84:	d904      	bls.n	8003f90 <HAL_RCCEx_PeriphCLKConfig+0xafc>
 8003f86:	f44f 71ed 	mov.w	r1, #474	; 0x1da
 8003f8a:	4893      	ldr	r0, [pc, #588]	; (80041d8 <HAL_RCCEx_PeriphCLKConfig+0xd44>)
 8003f8c:	f7fc fd97 	bl	8000abe <assert_failed>

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	f003 0301 	and.w	r3, r3, #1
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d02e      	beq.n	8003ffa <HAL_RCCEx_PeriphCLKConfig+0xb66>
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d12a      	bne.n	8003ffa <HAL_RCCEx_PeriphCLKConfig+0xb66>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	689b      	ldr	r3, [r3, #8]
 8003fa8:	2b01      	cmp	r3, #1
 8003faa:	d903      	bls.n	8003fb4 <HAL_RCCEx_PeriphCLKConfig+0xb20>
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	689b      	ldr	r3, [r3, #8]
 8003fb0:	2b07      	cmp	r3, #7
 8003fb2:	d904      	bls.n	8003fbe <HAL_RCCEx_PeriphCLKConfig+0xb2a>
 8003fb4:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 8003fb8:	4887      	ldr	r0, [pc, #540]	; (80041d8 <HAL_RCCEx_PeriphCLKConfig+0xd44>)
 8003fba:	f7fc fd80 	bl	8000abe <assert_failed>

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003fbe:	4b85      	ldr	r3, [pc, #532]	; (80041d4 <HAL_RCCEx_PeriphCLKConfig+0xd40>)
 8003fc0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003fc4:	0c1b      	lsrs	r3, r3, #16
 8003fc6:	f003 0303 	and.w	r3, r3, #3
 8003fca:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003fcc:	4b81      	ldr	r3, [pc, #516]	; (80041d4 <HAL_RCCEx_PeriphCLKConfig+0xd40>)
 8003fce:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003fd2:	0e1b      	lsrs	r3, r3, #24
 8003fd4:	f003 030f 	and.w	r3, r3, #15
 8003fd8:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	685b      	ldr	r3, [r3, #4]
 8003fde:	019a      	lsls	r2, r3, #6
 8003fe0:	693b      	ldr	r3, [r7, #16]
 8003fe2:	041b      	lsls	r3, r3, #16
 8003fe4:	431a      	orrs	r2, r3
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	061b      	lsls	r3, r3, #24
 8003fea:	431a      	orrs	r2, r3
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	689b      	ldr	r3, [r3, #8]
 8003ff0:	071b      	lsls	r3, r3, #28
 8003ff2:	4978      	ldr	r1, [pc, #480]	; (80041d4 <HAL_RCCEx_PeriphCLKConfig+0xd40>)
 8003ff4:	4313      	orrs	r3, r2
 8003ff6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004002:	2b00      	cmp	r3, #0
 8004004:	d004      	beq.n	8004010 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800400a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800400e:	d00a      	beq.n	8004026 <HAL_RCCEx_PeriphCLKConfig+0xb92>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004018:	2b00      	cmp	r3, #0
 800401a:	d048      	beq.n	80040ae <HAL_RCCEx_PeriphCLKConfig+0xc1a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004020:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004024:	d143      	bne.n	80040ae <HAL_RCCEx_PeriphCLKConfig+0xc1a>
    {
      /* Check for PLLI2S Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	68db      	ldr	r3, [r3, #12]
 800402a:	2b01      	cmp	r3, #1
 800402c:	d903      	bls.n	8004036 <HAL_RCCEx_PeriphCLKConfig+0xba2>
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	68db      	ldr	r3, [r3, #12]
 8004032:	2b0f      	cmp	r3, #15
 8004034:	d904      	bls.n	8004040 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 8004036:	f44f 71f8 	mov.w	r1, #496	; 0x1f0
 800403a:	4867      	ldr	r0, [pc, #412]	; (80041d8 <HAL_RCCEx_PeriphCLKConfig+0xd44>)
 800403c:	f7fc fd3f 	bl	8000abe <assert_failed>
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004044:	2b00      	cmp	r3, #0
 8004046:	d003      	beq.n	8004050 <HAL_RCCEx_PeriphCLKConfig+0xbbc>
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800404c:	2b20      	cmp	r3, #32
 800404e:	d904      	bls.n	800405a <HAL_RCCEx_PeriphCLKConfig+0xbc6>
 8004050:	f44f 71f9 	mov.w	r1, #498	; 0x1f2
 8004054:	4860      	ldr	r0, [pc, #384]	; (80041d8 <HAL_RCCEx_PeriphCLKConfig+0xd44>)
 8004056:	f7fc fd32 	bl	8000abe <assert_failed>

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800405a:	4b5e      	ldr	r3, [pc, #376]	; (80041d4 <HAL_RCCEx_PeriphCLKConfig+0xd40>)
 800405c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004060:	0c1b      	lsrs	r3, r3, #16
 8004062:	f003 0303 	and.w	r3, r3, #3
 8004066:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004068:	4b5a      	ldr	r3, [pc, #360]	; (80041d4 <HAL_RCCEx_PeriphCLKConfig+0xd40>)
 800406a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800406e:	0f1b      	lsrs	r3, r3, #28
 8004070:	f003 0307 	and.w	r3, r3, #7
 8004074:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	685b      	ldr	r3, [r3, #4]
 800407a:	019a      	lsls	r2, r3, #6
 800407c:	693b      	ldr	r3, [r7, #16]
 800407e:	041b      	lsls	r3, r3, #16
 8004080:	431a      	orrs	r2, r3
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	68db      	ldr	r3, [r3, #12]
 8004086:	061b      	lsls	r3, r3, #24
 8004088:	431a      	orrs	r2, r3
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	071b      	lsls	r3, r3, #28
 800408e:	4951      	ldr	r1, [pc, #324]	; (80041d4 <HAL_RCCEx_PeriphCLKConfig+0xd40>)
 8004090:	4313      	orrs	r3, r2
 8004092:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004096:	4b4f      	ldr	r3, [pc, #316]	; (80041d4 <HAL_RCCEx_PeriphCLKConfig+0xd40>)
 8004098:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800409c:	f023 021f 	bic.w	r2, r3, #31
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040a4:	3b01      	subs	r3, #1
 80040a6:	494b      	ldr	r1, [pc, #300]	; (80041d4 <HAL_RCCEx_PeriphCLKConfig+0xd40>)
 80040a8:	4313      	orrs	r3, r2
 80040aa:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d032      	beq.n	8004120 <HAL_RCCEx_PeriphCLKConfig+0xc8c>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	691b      	ldr	r3, [r3, #16]
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d010      	beq.n	80040e4 <HAL_RCCEx_PeriphCLKConfig+0xc50>
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	691b      	ldr	r3, [r3, #16]
 80040c6:	2b01      	cmp	r3, #1
 80040c8:	d00c      	beq.n	80040e4 <HAL_RCCEx_PeriphCLKConfig+0xc50>
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	691b      	ldr	r3, [r3, #16]
 80040ce:	2b02      	cmp	r3, #2
 80040d0:	d008      	beq.n	80040e4 <HAL_RCCEx_PeriphCLKConfig+0xc50>
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	691b      	ldr	r3, [r3, #16]
 80040d6:	2b03      	cmp	r3, #3
 80040d8:	d004      	beq.n	80040e4 <HAL_RCCEx_PeriphCLKConfig+0xc50>
 80040da:	f240 2105 	movw	r1, #517	; 0x205
 80040de:	483e      	ldr	r0, [pc, #248]	; (80041d8 <HAL_RCCEx_PeriphCLKConfig+0xd44>)
 80040e0:	f7fc fced 	bl	8000abe <assert_failed>

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80040e4:	4b3b      	ldr	r3, [pc, #236]	; (80041d4 <HAL_RCCEx_PeriphCLKConfig+0xd40>)
 80040e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80040ea:	0e1b      	lsrs	r3, r3, #24
 80040ec:	f003 030f 	and.w	r3, r3, #15
 80040f0:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80040f2:	4b38      	ldr	r3, [pc, #224]	; (80041d4 <HAL_RCCEx_PeriphCLKConfig+0xd40>)
 80040f4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80040f8:	0f1b      	lsrs	r3, r3, #28
 80040fa:	f003 0307 	and.w	r3, r3, #7
 80040fe:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	685b      	ldr	r3, [r3, #4]
 8004104:	019a      	lsls	r2, r3, #6
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	691b      	ldr	r3, [r3, #16]
 800410a:	041b      	lsls	r3, r3, #16
 800410c:	431a      	orrs	r2, r3
 800410e:	693b      	ldr	r3, [r7, #16]
 8004110:	061b      	lsls	r3, r3, #24
 8004112:	431a      	orrs	r2, r3
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	071b      	lsls	r3, r3, #28
 8004118:	492e      	ldr	r1, [pc, #184]	; (80041d4 <HAL_RCCEx_PeriphCLKConfig+0xd40>)
 800411a:	4313      	orrs	r3, r2
 800411c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004128:	2b00      	cmp	r3, #0
 800412a:	d040      	beq.n	80041ae <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    {
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	691b      	ldr	r3, [r3, #16]
 8004130:	2b00      	cmp	r3, #0
 8004132:	d010      	beq.n	8004156 <HAL_RCCEx_PeriphCLKConfig+0xcc2>
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	691b      	ldr	r3, [r3, #16]
 8004138:	2b01      	cmp	r3, #1
 800413a:	d00c      	beq.n	8004156 <HAL_RCCEx_PeriphCLKConfig+0xcc2>
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	691b      	ldr	r3, [r3, #16]
 8004140:	2b02      	cmp	r3, #2
 8004142:	d008      	beq.n	8004156 <HAL_RCCEx_PeriphCLKConfig+0xcc2>
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	691b      	ldr	r3, [r3, #16]
 8004148:	2b03      	cmp	r3, #3
 800414a:	d004      	beq.n	8004156 <HAL_RCCEx_PeriphCLKConfig+0xcc2>
 800414c:	f44f 7105 	mov.w	r1, #532	; 0x214
 8004150:	4821      	ldr	r0, [pc, #132]	; (80041d8 <HAL_RCCEx_PeriphCLKConfig+0xd44>)
 8004152:	f7fc fcb4 	bl	8000abe <assert_failed>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	689b      	ldr	r3, [r3, #8]
 800415a:	2b01      	cmp	r3, #1
 800415c:	d903      	bls.n	8004166 <HAL_RCCEx_PeriphCLKConfig+0xcd2>
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	689b      	ldr	r3, [r3, #8]
 8004162:	2b07      	cmp	r3, #7
 8004164:	d904      	bls.n	8004170 <HAL_RCCEx_PeriphCLKConfig+0xcdc>
 8004166:	f240 2115 	movw	r1, #533	; 0x215
 800416a:	481b      	ldr	r0, [pc, #108]	; (80041d8 <HAL_RCCEx_PeriphCLKConfig+0xd44>)
 800416c:	f7fc fca7 	bl	8000abe <assert_failed>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	68db      	ldr	r3, [r3, #12]
 8004174:	2b01      	cmp	r3, #1
 8004176:	d903      	bls.n	8004180 <HAL_RCCEx_PeriphCLKConfig+0xcec>
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	68db      	ldr	r3, [r3, #12]
 800417c:	2b0f      	cmp	r3, #15
 800417e:	d904      	bls.n	800418a <HAL_RCCEx_PeriphCLKConfig+0xcf6>
 8004180:	f240 2116 	movw	r1, #534	; 0x216
 8004184:	4814      	ldr	r0, [pc, #80]	; (80041d8 <HAL_RCCEx_PeriphCLKConfig+0xd44>)
 8004186:	f7fc fc9a 	bl	8000abe <assert_failed>

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	685b      	ldr	r3, [r3, #4]
 800418e:	019a      	lsls	r2, r3, #6
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	691b      	ldr	r3, [r3, #16]
 8004194:	041b      	lsls	r3, r3, #16
 8004196:	431a      	orrs	r2, r3
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	68db      	ldr	r3, [r3, #12]
 800419c:	061b      	lsls	r3, r3, #24
 800419e:	431a      	orrs	r2, r3
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	689b      	ldr	r3, [r3, #8]
 80041a4:	071b      	lsls	r3, r3, #28
 80041a6:	490b      	ldr	r1, [pc, #44]	; (80041d4 <HAL_RCCEx_PeriphCLKConfig+0xd40>)
 80041a8:	4313      	orrs	r3, r2
 80041aa:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80041ae:	4b09      	ldr	r3, [pc, #36]	; (80041d4 <HAL_RCCEx_PeriphCLKConfig+0xd40>)
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	4a08      	ldr	r2, [pc, #32]	; (80041d4 <HAL_RCCEx_PeriphCLKConfig+0xd40>)
 80041b4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80041b8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80041ba:	f7fc fed5 	bl	8000f68 <HAL_GetTick>
 80041be:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80041c0:	e00c      	b.n	80041dc <HAL_RCCEx_PeriphCLKConfig+0xd48>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80041c2:	f7fc fed1 	bl	8000f68 <HAL_GetTick>
 80041c6:	4602      	mov	r2, r0
 80041c8:	697b      	ldr	r3, [r7, #20]
 80041ca:	1ad3      	subs	r3, r2, r3
 80041cc:	2b64      	cmp	r3, #100	; 0x64
 80041ce:	d905      	bls.n	80041dc <HAL_RCCEx_PeriphCLKConfig+0xd48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80041d0:	2303      	movs	r3, #3
 80041d2:	e13b      	b.n	800444c <HAL_RCCEx_PeriphCLKConfig+0xfb8>
 80041d4:	40023800 	.word	0x40023800
 80041d8:	0800bdf0 	.word	0x0800bdf0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80041dc:	4b9d      	ldr	r3, [pc, #628]	; (8004454 <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d0ec      	beq.n	80041c2 <HAL_RCCEx_PeriphCLKConfig+0xd2e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80041e8:	69bb      	ldr	r3, [r7, #24]
 80041ea:	2b01      	cmp	r3, #1
 80041ec:	f040 812d 	bne.w	800444a <HAL_RCCEx_PeriphCLKConfig+0xfb6>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80041f0:	4b98      	ldr	r3, [pc, #608]	; (8004454 <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	4a97      	ldr	r2, [pc, #604]	; (8004454 <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 80041f6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80041fa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80041fc:	f7fc feb4 	bl	8000f68 <HAL_GetTick>
 8004200:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004202:	e008      	b.n	8004216 <HAL_RCCEx_PeriphCLKConfig+0xd82>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004204:	f7fc feb0 	bl	8000f68 <HAL_GetTick>
 8004208:	4602      	mov	r2, r0
 800420a:	697b      	ldr	r3, [r7, #20]
 800420c:	1ad3      	subs	r3, r2, r3
 800420e:	2b64      	cmp	r3, #100	; 0x64
 8004210:	d901      	bls.n	8004216 <HAL_RCCEx_PeriphCLKConfig+0xd82>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004212:	2303      	movs	r3, #3
 8004214:	e11a      	b.n	800444c <HAL_RCCEx_PeriphCLKConfig+0xfb8>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004216:	4b8f      	ldr	r3, [pc, #572]	; (8004454 <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800421e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004222:	d0ef      	beq.n	8004204 <HAL_RCCEx_PeriphCLKConfig+0xd70>
      }
    }

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	695b      	ldr	r3, [r3, #20]
 8004228:	2b31      	cmp	r3, #49	; 0x31
 800422a:	d904      	bls.n	8004236 <HAL_RCCEx_PeriphCLKConfig+0xda2>
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	695b      	ldr	r3, [r3, #20]
 8004230:	f5b3 7fd8 	cmp.w	r3, #432	; 0x1b0
 8004234:	d904      	bls.n	8004240 <HAL_RCCEx_PeriphCLKConfig+0xdac>
 8004236:	f44f 7111 	mov.w	r1, #580	; 0x244
 800423a:	4887      	ldr	r0, [pc, #540]	; (8004458 <HAL_RCCEx_PeriphCLKConfig+0xfc4>)
 800423c:	f7fc fc3f 	bl	8000abe <assert_failed>

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004248:	2b00      	cmp	r3, #0
 800424a:	d003      	beq.n	8004254 <HAL_RCCEx_PeriphCLKConfig+0xdc0>
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004250:	2b00      	cmp	r3, #0
 8004252:	d009      	beq.n	8004268 <HAL_RCCEx_PeriphCLKConfig+0xdd4>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800425c:	2b00      	cmp	r3, #0
 800425e:	d048      	beq.n	80042f2 <HAL_RCCEx_PeriphCLKConfig+0xe5e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004264:	2b00      	cmp	r3, #0
 8004266:	d144      	bne.n	80042f2 <HAL_RCCEx_PeriphCLKConfig+0xe5e>
    {
      /* check for PLLSAIQ Parameter */
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	699b      	ldr	r3, [r3, #24]
 800426c:	2b01      	cmp	r3, #1
 800426e:	d903      	bls.n	8004278 <HAL_RCCEx_PeriphCLKConfig+0xde4>
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	699b      	ldr	r3, [r3, #24]
 8004274:	2b0f      	cmp	r3, #15
 8004276:	d904      	bls.n	8004282 <HAL_RCCEx_PeriphCLKConfig+0xdee>
 8004278:	f240 214b 	movw	r1, #587	; 0x24b
 800427c:	4876      	ldr	r0, [pc, #472]	; (8004458 <HAL_RCCEx_PeriphCLKConfig+0xfc4>)
 800427e:	f7fc fc1e 	bl	8000abe <assert_failed>
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004286:	2b00      	cmp	r3, #0
 8004288:	d003      	beq.n	8004292 <HAL_RCCEx_PeriphCLKConfig+0xdfe>
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800428e:	2b20      	cmp	r3, #32
 8004290:	d904      	bls.n	800429c <HAL_RCCEx_PeriphCLKConfig+0xe08>
 8004292:	f240 214d 	movw	r1, #589	; 0x24d
 8004296:	4870      	ldr	r0, [pc, #448]	; (8004458 <HAL_RCCEx_PeriphCLKConfig+0xfc4>)
 8004298:	f7fc fc11 	bl	8000abe <assert_failed>

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800429c:	4b6d      	ldr	r3, [pc, #436]	; (8004454 <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 800429e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042a2:	0c1b      	lsrs	r3, r3, #16
 80042a4:	f003 0303 	and.w	r3, r3, #3
 80042a8:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80042aa:	4b6a      	ldr	r3, [pc, #424]	; (8004454 <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 80042ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042b0:	0f1b      	lsrs	r3, r3, #28
 80042b2:	f003 0307 	and.w	r3, r3, #7
 80042b6:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	695b      	ldr	r3, [r3, #20]
 80042bc:	019a      	lsls	r2, r3, #6
 80042be:	693b      	ldr	r3, [r7, #16]
 80042c0:	041b      	lsls	r3, r3, #16
 80042c2:	431a      	orrs	r2, r3
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	699b      	ldr	r3, [r3, #24]
 80042c8:	061b      	lsls	r3, r3, #24
 80042ca:	431a      	orrs	r2, r3
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	071b      	lsls	r3, r3, #28
 80042d0:	4960      	ldr	r1, [pc, #384]	; (8004454 <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 80042d2:	4313      	orrs	r3, r2
 80042d4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80042d8:	4b5e      	ldr	r3, [pc, #376]	; (8004454 <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 80042da:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80042de:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042e6:	3b01      	subs	r3, #1
 80042e8:	021b      	lsls	r3, r3, #8
 80042ea:	495a      	ldr	r1, [pc, #360]	; (8004454 <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 80042ec:	4313      	orrs	r3, r2
 80042ee:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d037      	beq.n	800436e <HAL_RCCEx_PeriphCLKConfig+0xeda>
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004302:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004306:	d132      	bne.n	800436e <HAL_RCCEx_PeriphCLKConfig+0xeda>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	6a1b      	ldr	r3, [r3, #32]
 800430c:	2b00      	cmp	r3, #0
 800430e:	d010      	beq.n	8004332 <HAL_RCCEx_PeriphCLKConfig+0xe9e>
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	6a1b      	ldr	r3, [r3, #32]
 8004314:	2b01      	cmp	r3, #1
 8004316:	d00c      	beq.n	8004332 <HAL_RCCEx_PeriphCLKConfig+0xe9e>
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	6a1b      	ldr	r3, [r3, #32]
 800431c:	2b02      	cmp	r3, #2
 800431e:	d008      	beq.n	8004332 <HAL_RCCEx_PeriphCLKConfig+0xe9e>
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	6a1b      	ldr	r3, [r3, #32]
 8004324:	2b03      	cmp	r3, #3
 8004326:	d004      	beq.n	8004332 <HAL_RCCEx_PeriphCLKConfig+0xe9e>
 8004328:	f44f 7118 	mov.w	r1, #608	; 0x260
 800432c:	484a      	ldr	r0, [pc, #296]	; (8004458 <HAL_RCCEx_PeriphCLKConfig+0xfc4>)
 800432e:	f7fc fbc6 	bl	8000abe <assert_failed>
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004332:	4b48      	ldr	r3, [pc, #288]	; (8004454 <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 8004334:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004338:	0e1b      	lsrs	r3, r3, #24
 800433a:	f003 030f 	and.w	r3, r3, #15
 800433e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004340:	4b44      	ldr	r3, [pc, #272]	; (8004454 <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 8004342:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004346:	0f1b      	lsrs	r3, r3, #28
 8004348:	f003 0307 	and.w	r3, r3, #7
 800434c:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	695b      	ldr	r3, [r3, #20]
 8004352:	019a      	lsls	r2, r3, #6
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	6a1b      	ldr	r3, [r3, #32]
 8004358:	041b      	lsls	r3, r3, #16
 800435a:	431a      	orrs	r2, r3
 800435c:	693b      	ldr	r3, [r7, #16]
 800435e:	061b      	lsls	r3, r3, #24
 8004360:	431a      	orrs	r2, r3
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	071b      	lsls	r3, r3, #28
 8004366:	493b      	ldr	r1, [pc, #236]	; (8004454 <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 8004368:	4313      	orrs	r3, r2
 800436a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	f003 0308 	and.w	r3, r3, #8
 8004376:	2b00      	cmp	r3, #0
 8004378:	d04d      	beq.n	8004416 <HAL_RCCEx_PeriphCLKConfig+0xf82>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	69db      	ldr	r3, [r3, #28]
 800437e:	2b01      	cmp	r3, #1
 8004380:	d903      	bls.n	800438a <HAL_RCCEx_PeriphCLKConfig+0xef6>
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	69db      	ldr	r3, [r3, #28]
 8004386:	2b07      	cmp	r3, #7
 8004388:	d904      	bls.n	8004394 <HAL_RCCEx_PeriphCLKConfig+0xf00>
 800438a:	f240 216f 	movw	r1, #623	; 0x26f
 800438e:	4832      	ldr	r0, [pc, #200]	; (8004458 <HAL_RCCEx_PeriphCLKConfig+0xfc4>)
 8004390:	f7fc fb95 	bl	8000abe <assert_failed>
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004398:	2b00      	cmp	r3, #0
 800439a:	d013      	beq.n	80043c4 <HAL_RCCEx_PeriphCLKConfig+0xf30>
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80043a4:	d00e      	beq.n	80043c4 <HAL_RCCEx_PeriphCLKConfig+0xf30>
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043aa:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80043ae:	d009      	beq.n	80043c4 <HAL_RCCEx_PeriphCLKConfig+0xf30>
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043b4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80043b8:	d004      	beq.n	80043c4 <HAL_RCCEx_PeriphCLKConfig+0xf30>
 80043ba:	f44f 711c 	mov.w	r1, #624	; 0x270
 80043be:	4826      	ldr	r0, [pc, #152]	; (8004458 <HAL_RCCEx_PeriphCLKConfig+0xfc4>)
 80043c0:	f7fc fb7d 	bl	8000abe <assert_failed>

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80043c4:	4b23      	ldr	r3, [pc, #140]	; (8004454 <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 80043c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043ca:	0e1b      	lsrs	r3, r3, #24
 80043cc:	f003 030f 	and.w	r3, r3, #15
 80043d0:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80043d2:	4b20      	ldr	r3, [pc, #128]	; (8004454 <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 80043d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043d8:	0c1b      	lsrs	r3, r3, #16
 80043da:	f003 0303 	and.w	r3, r3, #3
 80043de:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	695b      	ldr	r3, [r3, #20]
 80043e4:	019a      	lsls	r2, r3, #6
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	041b      	lsls	r3, r3, #16
 80043ea:	431a      	orrs	r2, r3
 80043ec:	693b      	ldr	r3, [r7, #16]
 80043ee:	061b      	lsls	r3, r3, #24
 80043f0:	431a      	orrs	r2, r3
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	69db      	ldr	r3, [r3, #28]
 80043f6:	071b      	lsls	r3, r3, #28
 80043f8:	4916      	ldr	r1, [pc, #88]	; (8004454 <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 80043fa:	4313      	orrs	r3, r2
 80043fc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8004400:	4b14      	ldr	r3, [pc, #80]	; (8004454 <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 8004402:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004406:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800440e:	4911      	ldr	r1, [pc, #68]	; (8004454 <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 8004410:	4313      	orrs	r3, r2
 8004412:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004416:	4b0f      	ldr	r3, [pc, #60]	; (8004454 <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	4a0e      	ldr	r2, [pc, #56]	; (8004454 <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 800441c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004420:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004422:	f7fc fda1 	bl	8000f68 <HAL_GetTick>
 8004426:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004428:	e008      	b.n	800443c <HAL_RCCEx_PeriphCLKConfig+0xfa8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800442a:	f7fc fd9d 	bl	8000f68 <HAL_GetTick>
 800442e:	4602      	mov	r2, r0
 8004430:	697b      	ldr	r3, [r7, #20]
 8004432:	1ad3      	subs	r3, r2, r3
 8004434:	2b64      	cmp	r3, #100	; 0x64
 8004436:	d901      	bls.n	800443c <HAL_RCCEx_PeriphCLKConfig+0xfa8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004438:	2303      	movs	r3, #3
 800443a:	e007      	b.n	800444c <HAL_RCCEx_PeriphCLKConfig+0xfb8>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800443c:	4b05      	ldr	r3, [pc, #20]	; (8004454 <HAL_RCCEx_PeriphCLKConfig+0xfc0>)
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004444:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004448:	d1ef      	bne.n	800442a <HAL_RCCEx_PeriphCLKConfig+0xf96>
      }
    }
  }
  return HAL_OK;
 800444a:	2300      	movs	r3, #0
}
 800444c:	4618      	mov	r0, r3
 800444e:	3720      	adds	r7, #32
 8004450:	46bd      	mov	sp, r7
 8004452:	bd80      	pop	{r7, pc}
 8004454:	40023800 	.word	0x40023800
 8004458:	0800bdf0 	.word	0x0800bdf0

0800445c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800445c:	b580      	push	{r7, lr}
 800445e:	b082      	sub	sp, #8
 8004460:	af00      	add	r7, sp, #0
 8004462:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	2b00      	cmp	r3, #0
 8004468:	d101      	bne.n	800446e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800446a:	2301      	movs	r3, #1
 800446c:	e0f5      	b.n	800465a <HAL_TIM_Base_Init+0x1fe>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	4a7c      	ldr	r2, [pc, #496]	; (8004664 <HAL_TIM_Base_Init+0x208>)
 8004474:	4293      	cmp	r3, r2
 8004476:	d045      	beq.n	8004504 <HAL_TIM_Base_Init+0xa8>
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004480:	d040      	beq.n	8004504 <HAL_TIM_Base_Init+0xa8>
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	4a78      	ldr	r2, [pc, #480]	; (8004668 <HAL_TIM_Base_Init+0x20c>)
 8004488:	4293      	cmp	r3, r2
 800448a:	d03b      	beq.n	8004504 <HAL_TIM_Base_Init+0xa8>
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	4a76      	ldr	r2, [pc, #472]	; (800466c <HAL_TIM_Base_Init+0x210>)
 8004492:	4293      	cmp	r3, r2
 8004494:	d036      	beq.n	8004504 <HAL_TIM_Base_Init+0xa8>
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	4a75      	ldr	r2, [pc, #468]	; (8004670 <HAL_TIM_Base_Init+0x214>)
 800449c:	4293      	cmp	r3, r2
 800449e:	d031      	beq.n	8004504 <HAL_TIM_Base_Init+0xa8>
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	4a73      	ldr	r2, [pc, #460]	; (8004674 <HAL_TIM_Base_Init+0x218>)
 80044a6:	4293      	cmp	r3, r2
 80044a8:	d02c      	beq.n	8004504 <HAL_TIM_Base_Init+0xa8>
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	4a72      	ldr	r2, [pc, #456]	; (8004678 <HAL_TIM_Base_Init+0x21c>)
 80044b0:	4293      	cmp	r3, r2
 80044b2:	d027      	beq.n	8004504 <HAL_TIM_Base_Init+0xa8>
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	4a70      	ldr	r2, [pc, #448]	; (800467c <HAL_TIM_Base_Init+0x220>)
 80044ba:	4293      	cmp	r3, r2
 80044bc:	d022      	beq.n	8004504 <HAL_TIM_Base_Init+0xa8>
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	4a6f      	ldr	r2, [pc, #444]	; (8004680 <HAL_TIM_Base_Init+0x224>)
 80044c4:	4293      	cmp	r3, r2
 80044c6:	d01d      	beq.n	8004504 <HAL_TIM_Base_Init+0xa8>
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	4a6d      	ldr	r2, [pc, #436]	; (8004684 <HAL_TIM_Base_Init+0x228>)
 80044ce:	4293      	cmp	r3, r2
 80044d0:	d018      	beq.n	8004504 <HAL_TIM_Base_Init+0xa8>
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	4a6c      	ldr	r2, [pc, #432]	; (8004688 <HAL_TIM_Base_Init+0x22c>)
 80044d8:	4293      	cmp	r3, r2
 80044da:	d013      	beq.n	8004504 <HAL_TIM_Base_Init+0xa8>
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	4a6a      	ldr	r2, [pc, #424]	; (800468c <HAL_TIM_Base_Init+0x230>)
 80044e2:	4293      	cmp	r3, r2
 80044e4:	d00e      	beq.n	8004504 <HAL_TIM_Base_Init+0xa8>
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	4a69      	ldr	r2, [pc, #420]	; (8004690 <HAL_TIM_Base_Init+0x234>)
 80044ec:	4293      	cmp	r3, r2
 80044ee:	d009      	beq.n	8004504 <HAL_TIM_Base_Init+0xa8>
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	4a67      	ldr	r2, [pc, #412]	; (8004694 <HAL_TIM_Base_Init+0x238>)
 80044f6:	4293      	cmp	r3, r2
 80044f8:	d004      	beq.n	8004504 <HAL_TIM_Base_Init+0xa8>
 80044fa:	f44f 718b 	mov.w	r1, #278	; 0x116
 80044fe:	4866      	ldr	r0, [pc, #408]	; (8004698 <HAL_TIM_Base_Init+0x23c>)
 8004500:	f7fc fadd 	bl	8000abe <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	689b      	ldr	r3, [r3, #8]
 8004508:	2b00      	cmp	r3, #0
 800450a:	d014      	beq.n	8004536 <HAL_TIM_Base_Init+0xda>
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	689b      	ldr	r3, [r3, #8]
 8004510:	2b10      	cmp	r3, #16
 8004512:	d010      	beq.n	8004536 <HAL_TIM_Base_Init+0xda>
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	689b      	ldr	r3, [r3, #8]
 8004518:	2b20      	cmp	r3, #32
 800451a:	d00c      	beq.n	8004536 <HAL_TIM_Base_Init+0xda>
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	689b      	ldr	r3, [r3, #8]
 8004520:	2b40      	cmp	r3, #64	; 0x40
 8004522:	d008      	beq.n	8004536 <HAL_TIM_Base_Init+0xda>
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	689b      	ldr	r3, [r3, #8]
 8004528:	2b60      	cmp	r3, #96	; 0x60
 800452a:	d004      	beq.n	8004536 <HAL_TIM_Base_Init+0xda>
 800452c:	f240 1117 	movw	r1, #279	; 0x117
 8004530:	4859      	ldr	r0, [pc, #356]	; (8004698 <HAL_TIM_Base_Init+0x23c>)
 8004532:	f7fc fac4 	bl	8000abe <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	691b      	ldr	r3, [r3, #16]
 800453a:	2b00      	cmp	r3, #0
 800453c:	d00e      	beq.n	800455c <HAL_TIM_Base_Init+0x100>
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	691b      	ldr	r3, [r3, #16]
 8004542:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004546:	d009      	beq.n	800455c <HAL_TIM_Base_Init+0x100>
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	691b      	ldr	r3, [r3, #16]
 800454c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004550:	d004      	beq.n	800455c <HAL_TIM_Base_Init+0x100>
 8004552:	f44f 718c 	mov.w	r1, #280	; 0x118
 8004556:	4850      	ldr	r0, [pc, #320]	; (8004698 <HAL_TIM_Base_Init+0x23c>)
 8004558:	f7fc fab1 	bl	8000abe <assert_failed>
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004564:	d004      	beq.n	8004570 <HAL_TIM_Base_Init+0x114>
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	4a41      	ldr	r2, [pc, #260]	; (8004670 <HAL_TIM_Base_Init+0x214>)
 800456c:	4293      	cmp	r3, r2
 800456e:	d107      	bne.n	8004580 <HAL_TIM_Base_Init+0x124>
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	68db      	ldr	r3, [r3, #12]
 8004574:	2b00      	cmp	r3, #0
 8004576:	bf14      	ite	ne
 8004578:	2301      	movne	r3, #1
 800457a:	2300      	moveq	r3, #0
 800457c:	b2db      	uxtb	r3, r3
 800457e:	e00e      	b.n	800459e <HAL_TIM_Base_Init+0x142>
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	68db      	ldr	r3, [r3, #12]
 8004584:	2b00      	cmp	r3, #0
 8004586:	d006      	beq.n	8004596 <HAL_TIM_Base_Init+0x13a>
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	68db      	ldr	r3, [r3, #12]
 800458c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004590:	d201      	bcs.n	8004596 <HAL_TIM_Base_Init+0x13a>
 8004592:	2301      	movs	r3, #1
 8004594:	e000      	b.n	8004598 <HAL_TIM_Base_Init+0x13c>
 8004596:	2300      	movs	r3, #0
 8004598:	f003 0301 	and.w	r3, r3, #1
 800459c:	b2db      	uxtb	r3, r3
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d104      	bne.n	80045ac <HAL_TIM_Base_Init+0x150>
 80045a2:	f240 1119 	movw	r1, #281	; 0x119
 80045a6:	483c      	ldr	r0, [pc, #240]	; (8004698 <HAL_TIM_Base_Init+0x23c>)
 80045a8:	f7fc fa89 	bl	8000abe <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	699b      	ldr	r3, [r3, #24]
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d008      	beq.n	80045c6 <HAL_TIM_Base_Init+0x16a>
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	699b      	ldr	r3, [r3, #24]
 80045b8:	2b80      	cmp	r3, #128	; 0x80
 80045ba:	d004      	beq.n	80045c6 <HAL_TIM_Base_Init+0x16a>
 80045bc:	f44f 718d 	mov.w	r1, #282	; 0x11a
 80045c0:	4835      	ldr	r0, [pc, #212]	; (8004698 <HAL_TIM_Base_Init+0x23c>)
 80045c2:	f7fc fa7c 	bl	8000abe <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80045cc:	b2db      	uxtb	r3, r3
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d106      	bne.n	80045e0 <HAL_TIM_Base_Init+0x184>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	2200      	movs	r2, #0
 80045d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80045da:	6878      	ldr	r0, [r7, #4]
 80045dc:	f7fc fb70 	bl	8000cc0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	2202      	movs	r2, #2
 80045e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681a      	ldr	r2, [r3, #0]
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	3304      	adds	r3, #4
 80045f0:	4619      	mov	r1, r3
 80045f2:	4610      	mov	r0, r2
 80045f4:	f000 fa68 	bl	8004ac8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	2201      	movs	r2, #1
 80045fc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	2201      	movs	r2, #1
 8004604:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	2201      	movs	r2, #1
 800460c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	2201      	movs	r2, #1
 8004614:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	2201      	movs	r2, #1
 800461c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	2201      	movs	r2, #1
 8004624:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	2201      	movs	r2, #1
 800462c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	2201      	movs	r2, #1
 8004634:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	2201      	movs	r2, #1
 800463c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	2201      	movs	r2, #1
 8004644:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	2201      	movs	r2, #1
 800464c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	2201      	movs	r2, #1
 8004654:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004658:	2300      	movs	r3, #0
}
 800465a:	4618      	mov	r0, r3
 800465c:	3708      	adds	r7, #8
 800465e:	46bd      	mov	sp, r7
 8004660:	bd80      	pop	{r7, pc}
 8004662:	bf00      	nop
 8004664:	40010000 	.word	0x40010000
 8004668:	40000400 	.word	0x40000400
 800466c:	40000800 	.word	0x40000800
 8004670:	40000c00 	.word	0x40000c00
 8004674:	40001000 	.word	0x40001000
 8004678:	40001400 	.word	0x40001400
 800467c:	40010400 	.word	0x40010400
 8004680:	40014000 	.word	0x40014000
 8004684:	40014400 	.word	0x40014400
 8004688:	40014800 	.word	0x40014800
 800468c:	40001800 	.word	0x40001800
 8004690:	40001c00 	.word	0x40001c00
 8004694:	40002000 	.word	0x40002000
 8004698:	0800be2c 	.word	0x0800be2c

0800469c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800469c:	b580      	push	{r7, lr}
 800469e:	b084      	sub	sp, #16
 80046a0:	af00      	add	r7, sp, #0
 80046a2:	6078      	str	r0, [r7, #4]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	4a54      	ldr	r2, [pc, #336]	; (80047fc <HAL_TIM_Base_Start_IT+0x160>)
 80046aa:	4293      	cmp	r3, r2
 80046ac:	d045      	beq.n	800473a <HAL_TIM_Base_Start_IT+0x9e>
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80046b6:	d040      	beq.n	800473a <HAL_TIM_Base_Start_IT+0x9e>
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	4a50      	ldr	r2, [pc, #320]	; (8004800 <HAL_TIM_Base_Start_IT+0x164>)
 80046be:	4293      	cmp	r3, r2
 80046c0:	d03b      	beq.n	800473a <HAL_TIM_Base_Start_IT+0x9e>
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	4a4f      	ldr	r2, [pc, #316]	; (8004804 <HAL_TIM_Base_Start_IT+0x168>)
 80046c8:	4293      	cmp	r3, r2
 80046ca:	d036      	beq.n	800473a <HAL_TIM_Base_Start_IT+0x9e>
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	4a4d      	ldr	r2, [pc, #308]	; (8004808 <HAL_TIM_Base_Start_IT+0x16c>)
 80046d2:	4293      	cmp	r3, r2
 80046d4:	d031      	beq.n	800473a <HAL_TIM_Base_Start_IT+0x9e>
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	4a4c      	ldr	r2, [pc, #304]	; (800480c <HAL_TIM_Base_Start_IT+0x170>)
 80046dc:	4293      	cmp	r3, r2
 80046de:	d02c      	beq.n	800473a <HAL_TIM_Base_Start_IT+0x9e>
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	4a4a      	ldr	r2, [pc, #296]	; (8004810 <HAL_TIM_Base_Start_IT+0x174>)
 80046e6:	4293      	cmp	r3, r2
 80046e8:	d027      	beq.n	800473a <HAL_TIM_Base_Start_IT+0x9e>
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	4a49      	ldr	r2, [pc, #292]	; (8004814 <HAL_TIM_Base_Start_IT+0x178>)
 80046f0:	4293      	cmp	r3, r2
 80046f2:	d022      	beq.n	800473a <HAL_TIM_Base_Start_IT+0x9e>
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	4a47      	ldr	r2, [pc, #284]	; (8004818 <HAL_TIM_Base_Start_IT+0x17c>)
 80046fa:	4293      	cmp	r3, r2
 80046fc:	d01d      	beq.n	800473a <HAL_TIM_Base_Start_IT+0x9e>
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	4a46      	ldr	r2, [pc, #280]	; (800481c <HAL_TIM_Base_Start_IT+0x180>)
 8004704:	4293      	cmp	r3, r2
 8004706:	d018      	beq.n	800473a <HAL_TIM_Base_Start_IT+0x9e>
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	4a44      	ldr	r2, [pc, #272]	; (8004820 <HAL_TIM_Base_Start_IT+0x184>)
 800470e:	4293      	cmp	r3, r2
 8004710:	d013      	beq.n	800473a <HAL_TIM_Base_Start_IT+0x9e>
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	4a43      	ldr	r2, [pc, #268]	; (8004824 <HAL_TIM_Base_Start_IT+0x188>)
 8004718:	4293      	cmp	r3, r2
 800471a:	d00e      	beq.n	800473a <HAL_TIM_Base_Start_IT+0x9e>
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	4a41      	ldr	r2, [pc, #260]	; (8004828 <HAL_TIM_Base_Start_IT+0x18c>)
 8004722:	4293      	cmp	r3, r2
 8004724:	d009      	beq.n	800473a <HAL_TIM_Base_Start_IT+0x9e>
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	4a40      	ldr	r2, [pc, #256]	; (800482c <HAL_TIM_Base_Start_IT+0x190>)
 800472c:	4293      	cmp	r3, r2
 800472e:	d004      	beq.n	800473a <HAL_TIM_Base_Start_IT+0x9e>
 8004730:	f240 11d3 	movw	r1, #467	; 0x1d3
 8004734:	483e      	ldr	r0, [pc, #248]	; (8004830 <HAL_TIM_Base_Start_IT+0x194>)
 8004736:	f7fc f9c2 	bl	8000abe <assert_failed>

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004740:	b2db      	uxtb	r3, r3
 8004742:	2b01      	cmp	r3, #1
 8004744:	d001      	beq.n	800474a <HAL_TIM_Base_Start_IT+0xae>
  {
    return HAL_ERROR;
 8004746:	2301      	movs	r3, #1
 8004748:	e054      	b.n	80047f4 <HAL_TIM_Base_Start_IT+0x158>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	2202      	movs	r2, #2
 800474e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	68da      	ldr	r2, [r3, #12]
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	f042 0201 	orr.w	r2, r2, #1
 8004760:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	4a25      	ldr	r2, [pc, #148]	; (80047fc <HAL_TIM_Base_Start_IT+0x160>)
 8004768:	4293      	cmp	r3, r2
 800476a:	d022      	beq.n	80047b2 <HAL_TIM_Base_Start_IT+0x116>
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004774:	d01d      	beq.n	80047b2 <HAL_TIM_Base_Start_IT+0x116>
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	4a21      	ldr	r2, [pc, #132]	; (8004800 <HAL_TIM_Base_Start_IT+0x164>)
 800477c:	4293      	cmp	r3, r2
 800477e:	d018      	beq.n	80047b2 <HAL_TIM_Base_Start_IT+0x116>
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	4a1f      	ldr	r2, [pc, #124]	; (8004804 <HAL_TIM_Base_Start_IT+0x168>)
 8004786:	4293      	cmp	r3, r2
 8004788:	d013      	beq.n	80047b2 <HAL_TIM_Base_Start_IT+0x116>
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	4a1e      	ldr	r2, [pc, #120]	; (8004808 <HAL_TIM_Base_Start_IT+0x16c>)
 8004790:	4293      	cmp	r3, r2
 8004792:	d00e      	beq.n	80047b2 <HAL_TIM_Base_Start_IT+0x116>
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	4a1e      	ldr	r2, [pc, #120]	; (8004814 <HAL_TIM_Base_Start_IT+0x178>)
 800479a:	4293      	cmp	r3, r2
 800479c:	d009      	beq.n	80047b2 <HAL_TIM_Base_Start_IT+0x116>
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	4a1d      	ldr	r2, [pc, #116]	; (8004818 <HAL_TIM_Base_Start_IT+0x17c>)
 80047a4:	4293      	cmp	r3, r2
 80047a6:	d004      	beq.n	80047b2 <HAL_TIM_Base_Start_IT+0x116>
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	4a1d      	ldr	r2, [pc, #116]	; (8004824 <HAL_TIM_Base_Start_IT+0x188>)
 80047ae:	4293      	cmp	r3, r2
 80047b0:	d115      	bne.n	80047de <HAL_TIM_Base_Start_IT+0x142>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	689a      	ldr	r2, [r3, #8]
 80047b8:	4b1e      	ldr	r3, [pc, #120]	; (8004834 <HAL_TIM_Base_Start_IT+0x198>)
 80047ba:	4013      	ands	r3, r2
 80047bc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	2b06      	cmp	r3, #6
 80047c2:	d015      	beq.n	80047f0 <HAL_TIM_Base_Start_IT+0x154>
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80047ca:	d011      	beq.n	80047f0 <HAL_TIM_Base_Start_IT+0x154>
    {
      __HAL_TIM_ENABLE(htim);
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	681a      	ldr	r2, [r3, #0]
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	f042 0201 	orr.w	r2, r2, #1
 80047da:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80047dc:	e008      	b.n	80047f0 <HAL_TIM_Base_Start_IT+0x154>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	681a      	ldr	r2, [r3, #0]
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	f042 0201 	orr.w	r2, r2, #1
 80047ec:	601a      	str	r2, [r3, #0]
 80047ee:	e000      	b.n	80047f2 <HAL_TIM_Base_Start_IT+0x156>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80047f0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80047f2:	2300      	movs	r3, #0
}
 80047f4:	4618      	mov	r0, r3
 80047f6:	3710      	adds	r7, #16
 80047f8:	46bd      	mov	sp, r7
 80047fa:	bd80      	pop	{r7, pc}
 80047fc:	40010000 	.word	0x40010000
 8004800:	40000400 	.word	0x40000400
 8004804:	40000800 	.word	0x40000800
 8004808:	40000c00 	.word	0x40000c00
 800480c:	40001000 	.word	0x40001000
 8004810:	40001400 	.word	0x40001400
 8004814:	40010400 	.word	0x40010400
 8004818:	40014000 	.word	0x40014000
 800481c:	40014400 	.word	0x40014400
 8004820:	40014800 	.word	0x40014800
 8004824:	40001800 	.word	0x40001800
 8004828:	40001c00 	.word	0x40001c00
 800482c:	40002000 	.word	0x40002000
 8004830:	0800be2c 	.word	0x0800be2c
 8004834:	00010007 	.word	0x00010007

08004838 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004838:	b580      	push	{r7, lr}
 800483a:	b082      	sub	sp, #8
 800483c:	af00      	add	r7, sp, #0
 800483e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	691b      	ldr	r3, [r3, #16]
 8004846:	f003 0302 	and.w	r3, r3, #2
 800484a:	2b02      	cmp	r3, #2
 800484c:	d122      	bne.n	8004894 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	68db      	ldr	r3, [r3, #12]
 8004854:	f003 0302 	and.w	r3, r3, #2
 8004858:	2b02      	cmp	r3, #2
 800485a:	d11b      	bne.n	8004894 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	f06f 0202 	mvn.w	r2, #2
 8004864:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	2201      	movs	r2, #1
 800486a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	699b      	ldr	r3, [r3, #24]
 8004872:	f003 0303 	and.w	r3, r3, #3
 8004876:	2b00      	cmp	r3, #0
 8004878:	d003      	beq.n	8004882 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800487a:	6878      	ldr	r0, [r7, #4]
 800487c:	f000 f905 	bl	8004a8a <HAL_TIM_IC_CaptureCallback>
 8004880:	e005      	b.n	800488e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004882:	6878      	ldr	r0, [r7, #4]
 8004884:	f000 f8f7 	bl	8004a76 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004888:	6878      	ldr	r0, [r7, #4]
 800488a:	f000 f908 	bl	8004a9e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	2200      	movs	r2, #0
 8004892:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	691b      	ldr	r3, [r3, #16]
 800489a:	f003 0304 	and.w	r3, r3, #4
 800489e:	2b04      	cmp	r3, #4
 80048a0:	d122      	bne.n	80048e8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	68db      	ldr	r3, [r3, #12]
 80048a8:	f003 0304 	and.w	r3, r3, #4
 80048ac:	2b04      	cmp	r3, #4
 80048ae:	d11b      	bne.n	80048e8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	f06f 0204 	mvn.w	r2, #4
 80048b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	2202      	movs	r2, #2
 80048be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	699b      	ldr	r3, [r3, #24]
 80048c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d003      	beq.n	80048d6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80048ce:	6878      	ldr	r0, [r7, #4]
 80048d0:	f000 f8db 	bl	8004a8a <HAL_TIM_IC_CaptureCallback>
 80048d4:	e005      	b.n	80048e2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80048d6:	6878      	ldr	r0, [r7, #4]
 80048d8:	f000 f8cd 	bl	8004a76 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80048dc:	6878      	ldr	r0, [r7, #4]
 80048de:	f000 f8de 	bl	8004a9e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	2200      	movs	r2, #0
 80048e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	691b      	ldr	r3, [r3, #16]
 80048ee:	f003 0308 	and.w	r3, r3, #8
 80048f2:	2b08      	cmp	r3, #8
 80048f4:	d122      	bne.n	800493c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	68db      	ldr	r3, [r3, #12]
 80048fc:	f003 0308 	and.w	r3, r3, #8
 8004900:	2b08      	cmp	r3, #8
 8004902:	d11b      	bne.n	800493c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	f06f 0208 	mvn.w	r2, #8
 800490c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	2204      	movs	r2, #4
 8004912:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	69db      	ldr	r3, [r3, #28]
 800491a:	f003 0303 	and.w	r3, r3, #3
 800491e:	2b00      	cmp	r3, #0
 8004920:	d003      	beq.n	800492a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004922:	6878      	ldr	r0, [r7, #4]
 8004924:	f000 f8b1 	bl	8004a8a <HAL_TIM_IC_CaptureCallback>
 8004928:	e005      	b.n	8004936 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800492a:	6878      	ldr	r0, [r7, #4]
 800492c:	f000 f8a3 	bl	8004a76 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004930:	6878      	ldr	r0, [r7, #4]
 8004932:	f000 f8b4 	bl	8004a9e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	2200      	movs	r2, #0
 800493a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	691b      	ldr	r3, [r3, #16]
 8004942:	f003 0310 	and.w	r3, r3, #16
 8004946:	2b10      	cmp	r3, #16
 8004948:	d122      	bne.n	8004990 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	68db      	ldr	r3, [r3, #12]
 8004950:	f003 0310 	and.w	r3, r3, #16
 8004954:	2b10      	cmp	r3, #16
 8004956:	d11b      	bne.n	8004990 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	f06f 0210 	mvn.w	r2, #16
 8004960:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	2208      	movs	r2, #8
 8004966:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	69db      	ldr	r3, [r3, #28]
 800496e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004972:	2b00      	cmp	r3, #0
 8004974:	d003      	beq.n	800497e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004976:	6878      	ldr	r0, [r7, #4]
 8004978:	f000 f887 	bl	8004a8a <HAL_TIM_IC_CaptureCallback>
 800497c:	e005      	b.n	800498a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800497e:	6878      	ldr	r0, [r7, #4]
 8004980:	f000 f879 	bl	8004a76 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004984:	6878      	ldr	r0, [r7, #4]
 8004986:	f000 f88a 	bl	8004a9e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	2200      	movs	r2, #0
 800498e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	691b      	ldr	r3, [r3, #16]
 8004996:	f003 0301 	and.w	r3, r3, #1
 800499a:	2b01      	cmp	r3, #1
 800499c:	d10e      	bne.n	80049bc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	68db      	ldr	r3, [r3, #12]
 80049a4:	f003 0301 	and.w	r3, r3, #1
 80049a8:	2b01      	cmp	r3, #1
 80049aa:	d107      	bne.n	80049bc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	f06f 0201 	mvn.w	r2, #1
 80049b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80049b6:	6878      	ldr	r0, [r7, #4]
 80049b8:	f7fc f936 	bl	8000c28 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	691b      	ldr	r3, [r3, #16]
 80049c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049c6:	2b80      	cmp	r3, #128	; 0x80
 80049c8:	d10e      	bne.n	80049e8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	68db      	ldr	r3, [r3, #12]
 80049d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049d4:	2b80      	cmp	r3, #128	; 0x80
 80049d6:	d107      	bne.n	80049e8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80049e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80049e2:	6878      	ldr	r0, [r7, #4]
 80049e4:	f000 fa72 	bl	8004ecc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	691b      	ldr	r3, [r3, #16]
 80049ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049f2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80049f6:	d10e      	bne.n	8004a16 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	68db      	ldr	r3, [r3, #12]
 80049fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a02:	2b80      	cmp	r3, #128	; 0x80
 8004a04:	d107      	bne.n	8004a16 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004a0e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004a10:	6878      	ldr	r0, [r7, #4]
 8004a12:	f000 fa65 	bl	8004ee0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	691b      	ldr	r3, [r3, #16]
 8004a1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a20:	2b40      	cmp	r3, #64	; 0x40
 8004a22:	d10e      	bne.n	8004a42 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	68db      	ldr	r3, [r3, #12]
 8004a2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a2e:	2b40      	cmp	r3, #64	; 0x40
 8004a30:	d107      	bne.n	8004a42 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004a3a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004a3c:	6878      	ldr	r0, [r7, #4]
 8004a3e:	f000 f838 	bl	8004ab2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	691b      	ldr	r3, [r3, #16]
 8004a48:	f003 0320 	and.w	r3, r3, #32
 8004a4c:	2b20      	cmp	r3, #32
 8004a4e:	d10e      	bne.n	8004a6e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	68db      	ldr	r3, [r3, #12]
 8004a56:	f003 0320 	and.w	r3, r3, #32
 8004a5a:	2b20      	cmp	r3, #32
 8004a5c:	d107      	bne.n	8004a6e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	f06f 0220 	mvn.w	r2, #32
 8004a66:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004a68:	6878      	ldr	r0, [r7, #4]
 8004a6a:	f000 fa25 	bl	8004eb8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004a6e:	bf00      	nop
 8004a70:	3708      	adds	r7, #8
 8004a72:	46bd      	mov	sp, r7
 8004a74:	bd80      	pop	{r7, pc}

08004a76 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004a76:	b480      	push	{r7}
 8004a78:	b083      	sub	sp, #12
 8004a7a:	af00      	add	r7, sp, #0
 8004a7c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004a7e:	bf00      	nop
 8004a80:	370c      	adds	r7, #12
 8004a82:	46bd      	mov	sp, r7
 8004a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a88:	4770      	bx	lr

08004a8a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004a8a:	b480      	push	{r7}
 8004a8c:	b083      	sub	sp, #12
 8004a8e:	af00      	add	r7, sp, #0
 8004a90:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004a92:	bf00      	nop
 8004a94:	370c      	adds	r7, #12
 8004a96:	46bd      	mov	sp, r7
 8004a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a9c:	4770      	bx	lr

08004a9e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004a9e:	b480      	push	{r7}
 8004aa0:	b083      	sub	sp, #12
 8004aa2:	af00      	add	r7, sp, #0
 8004aa4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004aa6:	bf00      	nop
 8004aa8:	370c      	adds	r7, #12
 8004aaa:	46bd      	mov	sp, r7
 8004aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab0:	4770      	bx	lr

08004ab2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004ab2:	b480      	push	{r7}
 8004ab4:	b083      	sub	sp, #12
 8004ab6:	af00      	add	r7, sp, #0
 8004ab8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004aba:	bf00      	nop
 8004abc:	370c      	adds	r7, #12
 8004abe:	46bd      	mov	sp, r7
 8004ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac4:	4770      	bx	lr
	...

08004ac8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004ac8:	b480      	push	{r7}
 8004aca:	b085      	sub	sp, #20
 8004acc:	af00      	add	r7, sp, #0
 8004ace:	6078      	str	r0, [r7, #4]
 8004ad0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	4a40      	ldr	r2, [pc, #256]	; (8004bdc <TIM_Base_SetConfig+0x114>)
 8004adc:	4293      	cmp	r3, r2
 8004ade:	d013      	beq.n	8004b08 <TIM_Base_SetConfig+0x40>
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ae6:	d00f      	beq.n	8004b08 <TIM_Base_SetConfig+0x40>
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	4a3d      	ldr	r2, [pc, #244]	; (8004be0 <TIM_Base_SetConfig+0x118>)
 8004aec:	4293      	cmp	r3, r2
 8004aee:	d00b      	beq.n	8004b08 <TIM_Base_SetConfig+0x40>
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	4a3c      	ldr	r2, [pc, #240]	; (8004be4 <TIM_Base_SetConfig+0x11c>)
 8004af4:	4293      	cmp	r3, r2
 8004af6:	d007      	beq.n	8004b08 <TIM_Base_SetConfig+0x40>
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	4a3b      	ldr	r2, [pc, #236]	; (8004be8 <TIM_Base_SetConfig+0x120>)
 8004afc:	4293      	cmp	r3, r2
 8004afe:	d003      	beq.n	8004b08 <TIM_Base_SetConfig+0x40>
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	4a3a      	ldr	r2, [pc, #232]	; (8004bec <TIM_Base_SetConfig+0x124>)
 8004b04:	4293      	cmp	r3, r2
 8004b06:	d108      	bne.n	8004b1a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b0e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004b10:	683b      	ldr	r3, [r7, #0]
 8004b12:	685b      	ldr	r3, [r3, #4]
 8004b14:	68fa      	ldr	r2, [r7, #12]
 8004b16:	4313      	orrs	r3, r2
 8004b18:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	4a2f      	ldr	r2, [pc, #188]	; (8004bdc <TIM_Base_SetConfig+0x114>)
 8004b1e:	4293      	cmp	r3, r2
 8004b20:	d02b      	beq.n	8004b7a <TIM_Base_SetConfig+0xb2>
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b28:	d027      	beq.n	8004b7a <TIM_Base_SetConfig+0xb2>
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	4a2c      	ldr	r2, [pc, #176]	; (8004be0 <TIM_Base_SetConfig+0x118>)
 8004b2e:	4293      	cmp	r3, r2
 8004b30:	d023      	beq.n	8004b7a <TIM_Base_SetConfig+0xb2>
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	4a2b      	ldr	r2, [pc, #172]	; (8004be4 <TIM_Base_SetConfig+0x11c>)
 8004b36:	4293      	cmp	r3, r2
 8004b38:	d01f      	beq.n	8004b7a <TIM_Base_SetConfig+0xb2>
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	4a2a      	ldr	r2, [pc, #168]	; (8004be8 <TIM_Base_SetConfig+0x120>)
 8004b3e:	4293      	cmp	r3, r2
 8004b40:	d01b      	beq.n	8004b7a <TIM_Base_SetConfig+0xb2>
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	4a29      	ldr	r2, [pc, #164]	; (8004bec <TIM_Base_SetConfig+0x124>)
 8004b46:	4293      	cmp	r3, r2
 8004b48:	d017      	beq.n	8004b7a <TIM_Base_SetConfig+0xb2>
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	4a28      	ldr	r2, [pc, #160]	; (8004bf0 <TIM_Base_SetConfig+0x128>)
 8004b4e:	4293      	cmp	r3, r2
 8004b50:	d013      	beq.n	8004b7a <TIM_Base_SetConfig+0xb2>
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	4a27      	ldr	r2, [pc, #156]	; (8004bf4 <TIM_Base_SetConfig+0x12c>)
 8004b56:	4293      	cmp	r3, r2
 8004b58:	d00f      	beq.n	8004b7a <TIM_Base_SetConfig+0xb2>
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	4a26      	ldr	r2, [pc, #152]	; (8004bf8 <TIM_Base_SetConfig+0x130>)
 8004b5e:	4293      	cmp	r3, r2
 8004b60:	d00b      	beq.n	8004b7a <TIM_Base_SetConfig+0xb2>
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	4a25      	ldr	r2, [pc, #148]	; (8004bfc <TIM_Base_SetConfig+0x134>)
 8004b66:	4293      	cmp	r3, r2
 8004b68:	d007      	beq.n	8004b7a <TIM_Base_SetConfig+0xb2>
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	4a24      	ldr	r2, [pc, #144]	; (8004c00 <TIM_Base_SetConfig+0x138>)
 8004b6e:	4293      	cmp	r3, r2
 8004b70:	d003      	beq.n	8004b7a <TIM_Base_SetConfig+0xb2>
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	4a23      	ldr	r2, [pc, #140]	; (8004c04 <TIM_Base_SetConfig+0x13c>)
 8004b76:	4293      	cmp	r3, r2
 8004b78:	d108      	bne.n	8004b8c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004b80:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004b82:	683b      	ldr	r3, [r7, #0]
 8004b84:	68db      	ldr	r3, [r3, #12]
 8004b86:	68fa      	ldr	r2, [r7, #12]
 8004b88:	4313      	orrs	r3, r2
 8004b8a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004b92:	683b      	ldr	r3, [r7, #0]
 8004b94:	695b      	ldr	r3, [r3, #20]
 8004b96:	4313      	orrs	r3, r2
 8004b98:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	68fa      	ldr	r2, [r7, #12]
 8004b9e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004ba0:	683b      	ldr	r3, [r7, #0]
 8004ba2:	689a      	ldr	r2, [r3, #8]
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004ba8:	683b      	ldr	r3, [r7, #0]
 8004baa:	681a      	ldr	r2, [r3, #0]
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	4a0a      	ldr	r2, [pc, #40]	; (8004bdc <TIM_Base_SetConfig+0x114>)
 8004bb4:	4293      	cmp	r3, r2
 8004bb6:	d003      	beq.n	8004bc0 <TIM_Base_SetConfig+0xf8>
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	4a0c      	ldr	r2, [pc, #48]	; (8004bec <TIM_Base_SetConfig+0x124>)
 8004bbc:	4293      	cmp	r3, r2
 8004bbe:	d103      	bne.n	8004bc8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004bc0:	683b      	ldr	r3, [r7, #0]
 8004bc2:	691a      	ldr	r2, [r3, #16]
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	2201      	movs	r2, #1
 8004bcc:	615a      	str	r2, [r3, #20]
}
 8004bce:	bf00      	nop
 8004bd0:	3714      	adds	r7, #20
 8004bd2:	46bd      	mov	sp, r7
 8004bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd8:	4770      	bx	lr
 8004bda:	bf00      	nop
 8004bdc:	40010000 	.word	0x40010000
 8004be0:	40000400 	.word	0x40000400
 8004be4:	40000800 	.word	0x40000800
 8004be8:	40000c00 	.word	0x40000c00
 8004bec:	40010400 	.word	0x40010400
 8004bf0:	40014000 	.word	0x40014000
 8004bf4:	40014400 	.word	0x40014400
 8004bf8:	40014800 	.word	0x40014800
 8004bfc:	40001800 	.word	0x40001800
 8004c00:	40001c00 	.word	0x40001c00
 8004c04:	40002000 	.word	0x40002000

08004c08 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004c08:	b580      	push	{r7, lr}
 8004c0a:	b084      	sub	sp, #16
 8004c0c:	af00      	add	r7, sp, #0
 8004c0e:	6078      	str	r0, [r7, #4]
 8004c10:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr2;
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	4a32      	ldr	r2, [pc, #200]	; (8004ce0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8004c18:	4293      	cmp	r3, r2
 8004c1a:	d027      	beq.n	8004c6c <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c24:	d022      	beq.n	8004c6c <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	4a2e      	ldr	r2, [pc, #184]	; (8004ce4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004c2c:	4293      	cmp	r3, r2
 8004c2e:	d01d      	beq.n	8004c6c <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	4a2c      	ldr	r2, [pc, #176]	; (8004ce8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004c36:	4293      	cmp	r3, r2
 8004c38:	d018      	beq.n	8004c6c <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	4a2b      	ldr	r2, [pc, #172]	; (8004cec <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004c40:	4293      	cmp	r3, r2
 8004c42:	d013      	beq.n	8004c6c <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	4a29      	ldr	r2, [pc, #164]	; (8004cf0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004c4a:	4293      	cmp	r3, r2
 8004c4c:	d00e      	beq.n	8004c6c <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	4a28      	ldr	r2, [pc, #160]	; (8004cf4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004c54:	4293      	cmp	r3, r2
 8004c56:	d009      	beq.n	8004c6c <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	4a26      	ldr	r2, [pc, #152]	; (8004cf8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004c5e:	4293      	cmp	r3, r2
 8004c60:	d004      	beq.n	8004c6c <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8004c62:	f240 71b6 	movw	r1, #1974	; 0x7b6
 8004c66:	4825      	ldr	r0, [pc, #148]	; (8004cfc <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004c68:	f7fb ff29 	bl	8000abe <assert_failed>
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
 8004c6c:	683b      	ldr	r3, [r7, #0]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d020      	beq.n	8004cb6 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8004c74:	683b      	ldr	r3, [r7, #0]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	2b10      	cmp	r3, #16
 8004c7a:	d01c      	beq.n	8004cb6 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8004c7c:	683b      	ldr	r3, [r7, #0]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	2b20      	cmp	r3, #32
 8004c82:	d018      	beq.n	8004cb6 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8004c84:	683b      	ldr	r3, [r7, #0]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	2b30      	cmp	r3, #48	; 0x30
 8004c8a:	d014      	beq.n	8004cb6 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8004c8c:	683b      	ldr	r3, [r7, #0]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	2b40      	cmp	r3, #64	; 0x40
 8004c92:	d010      	beq.n	8004cb6 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8004c94:	683b      	ldr	r3, [r7, #0]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	2b50      	cmp	r3, #80	; 0x50
 8004c9a:	d00c      	beq.n	8004cb6 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8004c9c:	683b      	ldr	r3, [r7, #0]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	2b60      	cmp	r3, #96	; 0x60
 8004ca2:	d008      	beq.n	8004cb6 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8004ca4:	683b      	ldr	r3, [r7, #0]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	2b70      	cmp	r3, #112	; 0x70
 8004caa:	d004      	beq.n	8004cb6 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8004cac:	f240 71b7 	movw	r1, #1975	; 0x7b7
 8004cb0:	4812      	ldr	r0, [pc, #72]	; (8004cfc <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004cb2:	f7fb ff04 	bl	8000abe <assert_failed>
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
 8004cb6:	683b      	ldr	r3, [r7, #0]
 8004cb8:	689b      	ldr	r3, [r3, #8]
 8004cba:	2b80      	cmp	r3, #128	; 0x80
 8004cbc:	d008      	beq.n	8004cd0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004cbe:	683b      	ldr	r3, [r7, #0]
 8004cc0:	689b      	ldr	r3, [r3, #8]
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d004      	beq.n	8004cd0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004cc6:	f44f 61f7 	mov.w	r1, #1976	; 0x7b8
 8004cca:	480c      	ldr	r0, [pc, #48]	; (8004cfc <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004ccc:	f7fb fef7 	bl	8000abe <assert_failed>

  /* Check input state */
  __HAL_LOCK(htim);
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004cd6:	2b01      	cmp	r3, #1
 8004cd8:	d112      	bne.n	8004d00 <HAL_TIMEx_MasterConfigSynchronization+0xf8>
 8004cda:	2302      	movs	r3, #2
 8004cdc:	e0d7      	b.n	8004e8e <HAL_TIMEx_MasterConfigSynchronization+0x286>
 8004cde:	bf00      	nop
 8004ce0:	40010000 	.word	0x40010000
 8004ce4:	40000400 	.word	0x40000400
 8004ce8:	40000800 	.word	0x40000800
 8004cec:	40000c00 	.word	0x40000c00
 8004cf0:	40001000 	.word	0x40001000
 8004cf4:	40001400 	.word	0x40001400
 8004cf8:	40010400 	.word	0x40010400
 8004cfc:	0800be64 	.word	0x0800be64
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	2201      	movs	r2, #1
 8004d04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	2202      	movs	r2, #2
 8004d0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	685b      	ldr	r3, [r3, #4]
 8004d16:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	689b      	ldr	r3, [r3, #8]
 8004d1e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	4a5c      	ldr	r2, [pc, #368]	; (8004e98 <HAL_TIMEx_MasterConfigSynchronization+0x290>)
 8004d26:	4293      	cmp	r3, r2
 8004d28:	d004      	beq.n	8004d34 <HAL_TIMEx_MasterConfigSynchronization+0x12c>
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	4a5b      	ldr	r2, [pc, #364]	; (8004e9c <HAL_TIMEx_MasterConfigSynchronization+0x294>)
 8004d30:	4293      	cmp	r3, r2
 8004d32:	d161      	bne.n	8004df8 <HAL_TIMEx_MasterConfigSynchronization+0x1f0>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));
 8004d34:	683b      	ldr	r3, [r7, #0]
 8004d36:	685b      	ldr	r3, [r3, #4]
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d054      	beq.n	8004de6 <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 8004d3c:	683b      	ldr	r3, [r7, #0]
 8004d3e:	685b      	ldr	r3, [r3, #4]
 8004d40:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004d44:	d04f      	beq.n	8004de6 <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 8004d46:	683b      	ldr	r3, [r7, #0]
 8004d48:	685b      	ldr	r3, [r3, #4]
 8004d4a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004d4e:	d04a      	beq.n	8004de6 <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 8004d50:	683b      	ldr	r3, [r7, #0]
 8004d52:	685b      	ldr	r3, [r3, #4]
 8004d54:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004d58:	d045      	beq.n	8004de6 <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 8004d5a:	683b      	ldr	r3, [r7, #0]
 8004d5c:	685b      	ldr	r3, [r3, #4]
 8004d5e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004d62:	d040      	beq.n	8004de6 <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 8004d64:	683b      	ldr	r3, [r7, #0]
 8004d66:	685b      	ldr	r3, [r3, #4]
 8004d68:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
 8004d6c:	d03b      	beq.n	8004de6 <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 8004d6e:	683b      	ldr	r3, [r7, #0]
 8004d70:	685b      	ldr	r3, [r3, #4]
 8004d72:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8004d76:	d036      	beq.n	8004de6 <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 8004d78:	683b      	ldr	r3, [r7, #0]
 8004d7a:	685b      	ldr	r3, [r3, #4]
 8004d7c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8004d80:	d031      	beq.n	8004de6 <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 8004d82:	683b      	ldr	r3, [r7, #0]
 8004d84:	685b      	ldr	r3, [r3, #4]
 8004d86:	f5b3 0fe0 	cmp.w	r3, #7340032	; 0x700000
 8004d8a:	d02c      	beq.n	8004de6 <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 8004d8c:	683b      	ldr	r3, [r7, #0]
 8004d8e:	685b      	ldr	r3, [r3, #4]
 8004d90:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004d94:	d027      	beq.n	8004de6 <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 8004d96:	683b      	ldr	r3, [r7, #0]
 8004d98:	685b      	ldr	r3, [r3, #4]
 8004d9a:	f5b3 0f10 	cmp.w	r3, #9437184	; 0x900000
 8004d9e:	d022      	beq.n	8004de6 <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 8004da0:	683b      	ldr	r3, [r7, #0]
 8004da2:	685b      	ldr	r3, [r3, #4]
 8004da4:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8004da8:	d01d      	beq.n	8004de6 <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 8004daa:	683b      	ldr	r3, [r7, #0]
 8004dac:	685b      	ldr	r3, [r3, #4]
 8004dae:	f5b3 0f30 	cmp.w	r3, #11534336	; 0xb00000
 8004db2:	d018      	beq.n	8004de6 <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 8004db4:	683b      	ldr	r3, [r7, #0]
 8004db6:	685b      	ldr	r3, [r3, #4]
 8004db8:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004dbc:	d013      	beq.n	8004de6 <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 8004dbe:	683b      	ldr	r3, [r7, #0]
 8004dc0:	685b      	ldr	r3, [r3, #4]
 8004dc2:	f5b3 0f50 	cmp.w	r3, #13631488	; 0xd00000
 8004dc6:	d00e      	beq.n	8004de6 <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 8004dc8:	683b      	ldr	r3, [r7, #0]
 8004dca:	685b      	ldr	r3, [r3, #4]
 8004dcc:	f5b3 0f60 	cmp.w	r3, #14680064	; 0xe00000
 8004dd0:	d009      	beq.n	8004de6 <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 8004dd2:	683b      	ldr	r3, [r7, #0]
 8004dd4:	685b      	ldr	r3, [r3, #4]
 8004dd6:	f5b3 0f70 	cmp.w	r3, #15728640	; 0xf00000
 8004dda:	d004      	beq.n	8004de6 <HAL_TIMEx_MasterConfigSynchronization+0x1de>
 8004ddc:	f240 71ca 	movw	r1, #1994	; 0x7ca
 8004de0:	482f      	ldr	r0, [pc, #188]	; (8004ea0 <HAL_TIMEx_MasterConfigSynchronization+0x298>)
 8004de2:	f7fb fe6c 	bl	8000abe <assert_failed>

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004dec:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004dee:	683b      	ldr	r3, [r7, #0]
 8004df0:	685b      	ldr	r3, [r3, #4]
 8004df2:	68fa      	ldr	r2, [r7, #12]
 8004df4:	4313      	orrs	r3, r2
 8004df6:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004dfe:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004e00:	683b      	ldr	r3, [r7, #0]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	68fa      	ldr	r2, [r7, #12]
 8004e06:	4313      	orrs	r3, r2
 8004e08:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	68fa      	ldr	r2, [r7, #12]
 8004e10:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	4a20      	ldr	r2, [pc, #128]	; (8004e98 <HAL_TIMEx_MasterConfigSynchronization+0x290>)
 8004e18:	4293      	cmp	r3, r2
 8004e1a:	d022      	beq.n	8004e62 <HAL_TIMEx_MasterConfigSynchronization+0x25a>
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e24:	d01d      	beq.n	8004e62 <HAL_TIMEx_MasterConfigSynchronization+0x25a>
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	4a1e      	ldr	r2, [pc, #120]	; (8004ea4 <HAL_TIMEx_MasterConfigSynchronization+0x29c>)
 8004e2c:	4293      	cmp	r3, r2
 8004e2e:	d018      	beq.n	8004e62 <HAL_TIMEx_MasterConfigSynchronization+0x25a>
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	4a1c      	ldr	r2, [pc, #112]	; (8004ea8 <HAL_TIMEx_MasterConfigSynchronization+0x2a0>)
 8004e36:	4293      	cmp	r3, r2
 8004e38:	d013      	beq.n	8004e62 <HAL_TIMEx_MasterConfigSynchronization+0x25a>
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	4a1b      	ldr	r2, [pc, #108]	; (8004eac <HAL_TIMEx_MasterConfigSynchronization+0x2a4>)
 8004e40:	4293      	cmp	r3, r2
 8004e42:	d00e      	beq.n	8004e62 <HAL_TIMEx_MasterConfigSynchronization+0x25a>
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	4a14      	ldr	r2, [pc, #80]	; (8004e9c <HAL_TIMEx_MasterConfigSynchronization+0x294>)
 8004e4a:	4293      	cmp	r3, r2
 8004e4c:	d009      	beq.n	8004e62 <HAL_TIMEx_MasterConfigSynchronization+0x25a>
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	4a17      	ldr	r2, [pc, #92]	; (8004eb0 <HAL_TIMEx_MasterConfigSynchronization+0x2a8>)
 8004e54:	4293      	cmp	r3, r2
 8004e56:	d004      	beq.n	8004e62 <HAL_TIMEx_MasterConfigSynchronization+0x25a>
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	4a15      	ldr	r2, [pc, #84]	; (8004eb4 <HAL_TIMEx_MasterConfigSynchronization+0x2ac>)
 8004e5e:	4293      	cmp	r3, r2
 8004e60:	d10c      	bne.n	8004e7c <HAL_TIMEx_MasterConfigSynchronization+0x274>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004e62:	68bb      	ldr	r3, [r7, #8]
 8004e64:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004e68:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004e6a:	683b      	ldr	r3, [r7, #0]
 8004e6c:	689b      	ldr	r3, [r3, #8]
 8004e6e:	68ba      	ldr	r2, [r7, #8]
 8004e70:	4313      	orrs	r3, r2
 8004e72:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	68ba      	ldr	r2, [r7, #8]
 8004e7a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	2201      	movs	r2, #1
 8004e80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	2200      	movs	r2, #0
 8004e88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004e8c:	2300      	movs	r3, #0
}
 8004e8e:	4618      	mov	r0, r3
 8004e90:	3710      	adds	r7, #16
 8004e92:	46bd      	mov	sp, r7
 8004e94:	bd80      	pop	{r7, pc}
 8004e96:	bf00      	nop
 8004e98:	40010000 	.word	0x40010000
 8004e9c:	40010400 	.word	0x40010400
 8004ea0:	0800be64 	.word	0x0800be64
 8004ea4:	40000400 	.word	0x40000400
 8004ea8:	40000800 	.word	0x40000800
 8004eac:	40000c00 	.word	0x40000c00
 8004eb0:	40014000 	.word	0x40014000
 8004eb4:	40001800 	.word	0x40001800

08004eb8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004eb8:	b480      	push	{r7}
 8004eba:	b083      	sub	sp, #12
 8004ebc:	af00      	add	r7, sp, #0
 8004ebe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004ec0:	bf00      	nop
 8004ec2:	370c      	adds	r7, #12
 8004ec4:	46bd      	mov	sp, r7
 8004ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eca:	4770      	bx	lr

08004ecc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004ecc:	b480      	push	{r7}
 8004ece:	b083      	sub	sp, #12
 8004ed0:	af00      	add	r7, sp, #0
 8004ed2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004ed4:	bf00      	nop
 8004ed6:	370c      	adds	r7, #12
 8004ed8:	46bd      	mov	sp, r7
 8004eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ede:	4770      	bx	lr

08004ee0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004ee0:	b480      	push	{r7}
 8004ee2:	b083      	sub	sp, #12
 8004ee4:	af00      	add	r7, sp, #0
 8004ee6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004ee8:	bf00      	nop
 8004eea:	370c      	adds	r7, #12
 8004eec:	46bd      	mov	sp, r7
 8004eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef2:	4770      	bx	lr

08004ef4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004ef4:	b580      	push	{r7, lr}
 8004ef6:	b082      	sub	sp, #8
 8004ef8:	af00      	add	r7, sp, #0
 8004efa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d101      	bne.n	8004f06 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004f02:	2301      	movs	r3, #1
 8004f04:	e09f      	b.n	8005046 <HAL_UART_Init+0x152>
  }

  if (huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	699b      	ldr	r3, [r3, #24]
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d02d      	beq.n	8004f6a <HAL_UART_Init+0x76>
  {
    /* Check the parameters */
    assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	4a4f      	ldr	r2, [pc, #316]	; (8005050 <HAL_UART_Init+0x15c>)
 8004f14:	4293      	cmp	r3, r2
 8004f16:	d055      	beq.n	8004fc4 <HAL_UART_Init+0xd0>
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	4a4d      	ldr	r2, [pc, #308]	; (8005054 <HAL_UART_Init+0x160>)
 8004f1e:	4293      	cmp	r3, r2
 8004f20:	d050      	beq.n	8004fc4 <HAL_UART_Init+0xd0>
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	4a4c      	ldr	r2, [pc, #304]	; (8005058 <HAL_UART_Init+0x164>)
 8004f28:	4293      	cmp	r3, r2
 8004f2a:	d04b      	beq.n	8004fc4 <HAL_UART_Init+0xd0>
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	4a4a      	ldr	r2, [pc, #296]	; (800505c <HAL_UART_Init+0x168>)
 8004f32:	4293      	cmp	r3, r2
 8004f34:	d046      	beq.n	8004fc4 <HAL_UART_Init+0xd0>
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	4a49      	ldr	r2, [pc, #292]	; (8005060 <HAL_UART_Init+0x16c>)
 8004f3c:	4293      	cmp	r3, r2
 8004f3e:	d041      	beq.n	8004fc4 <HAL_UART_Init+0xd0>
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	4a47      	ldr	r2, [pc, #284]	; (8005064 <HAL_UART_Init+0x170>)
 8004f46:	4293      	cmp	r3, r2
 8004f48:	d03c      	beq.n	8004fc4 <HAL_UART_Init+0xd0>
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	4a46      	ldr	r2, [pc, #280]	; (8005068 <HAL_UART_Init+0x174>)
 8004f50:	4293      	cmp	r3, r2
 8004f52:	d037      	beq.n	8004fc4 <HAL_UART_Init+0xd0>
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	4a44      	ldr	r2, [pc, #272]	; (800506c <HAL_UART_Init+0x178>)
 8004f5a:	4293      	cmp	r3, r2
 8004f5c:	d032      	beq.n	8004fc4 <HAL_UART_Init+0xd0>
 8004f5e:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8004f62:	4843      	ldr	r0, [pc, #268]	; (8005070 <HAL_UART_Init+0x17c>)
 8004f64:	f7fb fdab 	bl	8000abe <assert_failed>
 8004f68:	e02c      	b.n	8004fc4 <HAL_UART_Init+0xd0>
  }
  else
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	4a38      	ldr	r2, [pc, #224]	; (8005050 <HAL_UART_Init+0x15c>)
 8004f70:	4293      	cmp	r3, r2
 8004f72:	d027      	beq.n	8004fc4 <HAL_UART_Init+0xd0>
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	4a36      	ldr	r2, [pc, #216]	; (8005054 <HAL_UART_Init+0x160>)
 8004f7a:	4293      	cmp	r3, r2
 8004f7c:	d022      	beq.n	8004fc4 <HAL_UART_Init+0xd0>
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	4a35      	ldr	r2, [pc, #212]	; (8005058 <HAL_UART_Init+0x164>)
 8004f84:	4293      	cmp	r3, r2
 8004f86:	d01d      	beq.n	8004fc4 <HAL_UART_Init+0xd0>
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	4a33      	ldr	r2, [pc, #204]	; (800505c <HAL_UART_Init+0x168>)
 8004f8e:	4293      	cmp	r3, r2
 8004f90:	d018      	beq.n	8004fc4 <HAL_UART_Init+0xd0>
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	4a32      	ldr	r2, [pc, #200]	; (8005060 <HAL_UART_Init+0x16c>)
 8004f98:	4293      	cmp	r3, r2
 8004f9a:	d013      	beq.n	8004fc4 <HAL_UART_Init+0xd0>
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	4a30      	ldr	r2, [pc, #192]	; (8005064 <HAL_UART_Init+0x170>)
 8004fa2:	4293      	cmp	r3, r2
 8004fa4:	d00e      	beq.n	8004fc4 <HAL_UART_Init+0xd0>
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	4a2f      	ldr	r2, [pc, #188]	; (8005068 <HAL_UART_Init+0x174>)
 8004fac:	4293      	cmp	r3, r2
 8004fae:	d009      	beq.n	8004fc4 <HAL_UART_Init+0xd0>
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	4a2d      	ldr	r2, [pc, #180]	; (800506c <HAL_UART_Init+0x178>)
 8004fb6:	4293      	cmp	r3, r2
 8004fb8:	d004      	beq.n	8004fc4 <HAL_UART_Init+0xd0>
 8004fba:	f240 1131 	movw	r1, #305	; 0x131
 8004fbe:	482c      	ldr	r0, [pc, #176]	; (8005070 <HAL_UART_Init+0x17c>)
 8004fc0:	f7fb fd7d 	bl	8000abe <assert_failed>
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d106      	bne.n	8004fda <HAL_UART_Init+0xe6>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	2200      	movs	r2, #0
 8004fd0:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004fd4:	6878      	ldr	r0, [r7, #4]
 8004fd6:	f7fb fec3 	bl	8000d60 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	2224      	movs	r2, #36	; 0x24
 8004fde:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	681a      	ldr	r2, [r3, #0]
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	f022 0201 	bic.w	r2, r2, #1
 8004fee:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004ff0:	6878      	ldr	r0, [r7, #4]
 8004ff2:	f000 fbb5 	bl	8005760 <UART_SetConfig>
 8004ff6:	4603      	mov	r3, r0
 8004ff8:	2b01      	cmp	r3, #1
 8004ffa:	d101      	bne.n	8005000 <HAL_UART_Init+0x10c>
  {
    return HAL_ERROR;
 8004ffc:	2301      	movs	r3, #1
 8004ffe:	e022      	b.n	8005046 <HAL_UART_Init+0x152>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005004:	2b00      	cmp	r3, #0
 8005006:	d002      	beq.n	800500e <HAL_UART_Init+0x11a>
  {
    UART_AdvFeatureConfig(huart);
 8005008:	6878      	ldr	r0, [r7, #4]
 800500a:	f000 fe9f 	bl	8005d4c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	685a      	ldr	r2, [r3, #4]
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800501c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	689a      	ldr	r2, [r3, #8]
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800502c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	681a      	ldr	r2, [r3, #0]
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	f042 0201 	orr.w	r2, r2, #1
 800503c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800503e:	6878      	ldr	r0, [r7, #4]
 8005040:	f000 ffdc 	bl	8005ffc <UART_CheckIdleState>
 8005044:	4603      	mov	r3, r0
}
 8005046:	4618      	mov	r0, r3
 8005048:	3708      	adds	r7, #8
 800504a:	46bd      	mov	sp, r7
 800504c:	bd80      	pop	{r7, pc}
 800504e:	bf00      	nop
 8005050:	40011000 	.word	0x40011000
 8005054:	40004400 	.word	0x40004400
 8005058:	40004800 	.word	0x40004800
 800505c:	40004c00 	.word	0x40004c00
 8005060:	40005000 	.word	0x40005000
 8005064:	40011400 	.word	0x40011400
 8005068:	40007800 	.word	0x40007800
 800506c:	40007c00 	.word	0x40007c00
 8005070:	0800bea0 	.word	0x0800bea0

08005074 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005074:	b580      	push	{r7, lr}
 8005076:	b08a      	sub	sp, #40	; 0x28
 8005078:	af02      	add	r7, sp, #8
 800507a:	60f8      	str	r0, [r7, #12]
 800507c:	60b9      	str	r1, [r7, #8]
 800507e:	603b      	str	r3, [r7, #0]
 8005080:	4613      	mov	r3, r2
 8005082:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005088:	2b20      	cmp	r3, #32
 800508a:	d171      	bne.n	8005170 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 800508c:	68bb      	ldr	r3, [r7, #8]
 800508e:	2b00      	cmp	r3, #0
 8005090:	d002      	beq.n	8005098 <HAL_UART_Transmit+0x24>
 8005092:	88fb      	ldrh	r3, [r7, #6]
 8005094:	2b00      	cmp	r3, #0
 8005096:	d101      	bne.n	800509c <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8005098:	2301      	movs	r3, #1
 800509a:	e06a      	b.n	8005172 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	2200      	movs	r2, #0
 80050a0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	2221      	movs	r2, #33	; 0x21
 80050a8:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80050aa:	f7fb ff5d 	bl	8000f68 <HAL_GetTick>
 80050ae:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	88fa      	ldrh	r2, [r7, #6]
 80050b4:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	88fa      	ldrh	r2, [r7, #6]
 80050bc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	689b      	ldr	r3, [r3, #8]
 80050c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80050c8:	d108      	bne.n	80050dc <HAL_UART_Transmit+0x68>
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	691b      	ldr	r3, [r3, #16]
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d104      	bne.n	80050dc <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80050d2:	2300      	movs	r3, #0
 80050d4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80050d6:	68bb      	ldr	r3, [r7, #8]
 80050d8:	61bb      	str	r3, [r7, #24]
 80050da:	e003      	b.n	80050e4 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80050dc:	68bb      	ldr	r3, [r7, #8]
 80050de:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80050e0:	2300      	movs	r3, #0
 80050e2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80050e4:	e02c      	b.n	8005140 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80050e6:	683b      	ldr	r3, [r7, #0]
 80050e8:	9300      	str	r3, [sp, #0]
 80050ea:	697b      	ldr	r3, [r7, #20]
 80050ec:	2200      	movs	r2, #0
 80050ee:	2180      	movs	r1, #128	; 0x80
 80050f0:	68f8      	ldr	r0, [r7, #12]
 80050f2:	f000 ffba 	bl	800606a <UART_WaitOnFlagUntilTimeout>
 80050f6:	4603      	mov	r3, r0
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d001      	beq.n	8005100 <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 80050fc:	2303      	movs	r3, #3
 80050fe:	e038      	b.n	8005172 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8005100:	69fb      	ldr	r3, [r7, #28]
 8005102:	2b00      	cmp	r3, #0
 8005104:	d10b      	bne.n	800511e <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005106:	69bb      	ldr	r3, [r7, #24]
 8005108:	881b      	ldrh	r3, [r3, #0]
 800510a:	461a      	mov	r2, r3
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005114:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005116:	69bb      	ldr	r3, [r7, #24]
 8005118:	3302      	adds	r3, #2
 800511a:	61bb      	str	r3, [r7, #24]
 800511c:	e007      	b.n	800512e <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800511e:	69fb      	ldr	r3, [r7, #28]
 8005120:	781a      	ldrb	r2, [r3, #0]
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005128:	69fb      	ldr	r3, [r7, #28]
 800512a:	3301      	adds	r3, #1
 800512c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005134:	b29b      	uxth	r3, r3
 8005136:	3b01      	subs	r3, #1
 8005138:	b29a      	uxth	r2, r3
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005146:	b29b      	uxth	r3, r3
 8005148:	2b00      	cmp	r3, #0
 800514a:	d1cc      	bne.n	80050e6 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800514c:	683b      	ldr	r3, [r7, #0]
 800514e:	9300      	str	r3, [sp, #0]
 8005150:	697b      	ldr	r3, [r7, #20]
 8005152:	2200      	movs	r2, #0
 8005154:	2140      	movs	r1, #64	; 0x40
 8005156:	68f8      	ldr	r0, [r7, #12]
 8005158:	f000 ff87 	bl	800606a <UART_WaitOnFlagUntilTimeout>
 800515c:	4603      	mov	r3, r0
 800515e:	2b00      	cmp	r3, #0
 8005160:	d001      	beq.n	8005166 <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 8005162:	2303      	movs	r3, #3
 8005164:	e005      	b.n	8005172 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	2220      	movs	r2, #32
 800516a:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 800516c:	2300      	movs	r3, #0
 800516e:	e000      	b.n	8005172 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8005170:	2302      	movs	r3, #2
  }
}
 8005172:	4618      	mov	r0, r3
 8005174:	3720      	adds	r7, #32
 8005176:	46bd      	mov	sp, r7
 8005178:	bd80      	pop	{r7, pc}
	...

0800517c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800517c:	b580      	push	{r7, lr}
 800517e:	b0ba      	sub	sp, #232	; 0xe8
 8005180:	af00      	add	r7, sp, #0
 8005182:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	69db      	ldr	r3, [r3, #28]
 800518a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	689b      	ldr	r3, [r3, #8]
 800519e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80051a2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80051a6:	f640 030f 	movw	r3, #2063	; 0x80f
 80051aa:	4013      	ands	r3, r2
 80051ac:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80051b0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d115      	bne.n	80051e4 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80051b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80051bc:	f003 0320 	and.w	r3, r3, #32
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d00f      	beq.n	80051e4 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80051c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80051c8:	f003 0320 	and.w	r3, r3, #32
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d009      	beq.n	80051e4 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	f000 8297 	beq.w	8005708 <HAL_UART_IRQHandler+0x58c>
      {
        huart->RxISR(huart);
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80051de:	6878      	ldr	r0, [r7, #4]
 80051e0:	4798      	blx	r3
      }
      return;
 80051e2:	e291      	b.n	8005708 <HAL_UART_IRQHandler+0x58c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80051e4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	f000 8117 	beq.w	800541c <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80051ee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80051f2:	f003 0301 	and.w	r3, r3, #1
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d106      	bne.n	8005208 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80051fa:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80051fe:	4b85      	ldr	r3, [pc, #532]	; (8005414 <HAL_UART_IRQHandler+0x298>)
 8005200:	4013      	ands	r3, r2
 8005202:	2b00      	cmp	r3, #0
 8005204:	f000 810a 	beq.w	800541c <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005208:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800520c:	f003 0301 	and.w	r3, r3, #1
 8005210:	2b00      	cmp	r3, #0
 8005212:	d011      	beq.n	8005238 <HAL_UART_IRQHandler+0xbc>
 8005214:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005218:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800521c:	2b00      	cmp	r3, #0
 800521e:	d00b      	beq.n	8005238 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	2201      	movs	r2, #1
 8005226:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800522e:	f043 0201 	orr.w	r2, r3, #1
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005238:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800523c:	f003 0302 	and.w	r3, r3, #2
 8005240:	2b00      	cmp	r3, #0
 8005242:	d011      	beq.n	8005268 <HAL_UART_IRQHandler+0xec>
 8005244:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005248:	f003 0301 	and.w	r3, r3, #1
 800524c:	2b00      	cmp	r3, #0
 800524e:	d00b      	beq.n	8005268 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	2202      	movs	r2, #2
 8005256:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800525e:	f043 0204 	orr.w	r2, r3, #4
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005268:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800526c:	f003 0304 	and.w	r3, r3, #4
 8005270:	2b00      	cmp	r3, #0
 8005272:	d011      	beq.n	8005298 <HAL_UART_IRQHandler+0x11c>
 8005274:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005278:	f003 0301 	and.w	r3, r3, #1
 800527c:	2b00      	cmp	r3, #0
 800527e:	d00b      	beq.n	8005298 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	2204      	movs	r2, #4
 8005286:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800528e:	f043 0202 	orr.w	r2, r3, #2
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005298:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800529c:	f003 0308 	and.w	r3, r3, #8
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d017      	beq.n	80052d4 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80052a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80052a8:	f003 0320 	and.w	r3, r3, #32
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d105      	bne.n	80052bc <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80052b0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80052b4:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d00b      	beq.n	80052d4 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	2208      	movs	r2, #8
 80052c2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80052ca:	f043 0208 	orr.w	r2, r3, #8
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80052d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80052d8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d012      	beq.n	8005306 <HAL_UART_IRQHandler+0x18a>
 80052e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80052e4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d00c      	beq.n	8005306 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80052f4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80052fc:	f043 0220 	orr.w	r2, r3, #32
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800530c:	2b00      	cmp	r3, #0
 800530e:	f000 81fd 	beq.w	800570c <HAL_UART_IRQHandler+0x590>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8005312:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005316:	f003 0320 	and.w	r3, r3, #32
 800531a:	2b00      	cmp	r3, #0
 800531c:	d00d      	beq.n	800533a <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800531e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005322:	f003 0320 	and.w	r3, r3, #32
 8005326:	2b00      	cmp	r3, #0
 8005328:	d007      	beq.n	800533a <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800532e:	2b00      	cmp	r3, #0
 8005330:	d003      	beq.n	800533a <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005336:	6878      	ldr	r0, [r7, #4]
 8005338:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005340:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	689b      	ldr	r3, [r3, #8]
 800534a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800534e:	2b40      	cmp	r3, #64	; 0x40
 8005350:	d005      	beq.n	800535e <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005352:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005356:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800535a:	2b00      	cmp	r3, #0
 800535c:	d04f      	beq.n	80053fe <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800535e:	6878      	ldr	r0, [r7, #4]
 8005360:	f000 ff49 	bl	80061f6 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	689b      	ldr	r3, [r3, #8]
 800536a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800536e:	2b40      	cmp	r3, #64	; 0x40
 8005370:	d141      	bne.n	80053f6 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	3308      	adds	r3, #8
 8005378:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800537c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005380:	e853 3f00 	ldrex	r3, [r3]
 8005384:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005388:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800538c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005390:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	3308      	adds	r3, #8
 800539a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800539e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80053a2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053a6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80053aa:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80053ae:	e841 2300 	strex	r3, r2, [r1]
 80053b2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80053b6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d1d9      	bne.n	8005372 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d013      	beq.n	80053ee <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80053ca:	4a13      	ldr	r2, [pc, #76]	; (8005418 <HAL_UART_IRQHandler+0x29c>)
 80053cc:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80053d2:	4618      	mov	r0, r3
 80053d4:	f7fb ffa8 	bl	8001328 <HAL_DMA_Abort_IT>
 80053d8:	4603      	mov	r3, r0
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d017      	beq.n	800540e <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80053e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80053e4:	687a      	ldr	r2, [r7, #4]
 80053e6:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80053e8:	4610      	mov	r0, r2
 80053ea:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80053ec:	e00f      	b.n	800540e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80053ee:	6878      	ldr	r0, [r7, #4]
 80053f0:	f000 f9a0 	bl	8005734 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80053f4:	e00b      	b.n	800540e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80053f6:	6878      	ldr	r0, [r7, #4]
 80053f8:	f000 f99c 	bl	8005734 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80053fc:	e007      	b.n	800540e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80053fe:	6878      	ldr	r0, [r7, #4]
 8005400:	f000 f998 	bl	8005734 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	2200      	movs	r2, #0
 8005408:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 800540c:	e17e      	b.n	800570c <HAL_UART_IRQHandler+0x590>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800540e:	bf00      	nop
    return;
 8005410:	e17c      	b.n	800570c <HAL_UART_IRQHandler+0x590>
 8005412:	bf00      	nop
 8005414:	04000120 	.word	0x04000120
 8005418:	080062bf 	.word	0x080062bf

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005420:	2b01      	cmp	r3, #1
 8005422:	f040 814c 	bne.w	80056be <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8005426:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800542a:	f003 0310 	and.w	r3, r3, #16
 800542e:	2b00      	cmp	r3, #0
 8005430:	f000 8145 	beq.w	80056be <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005434:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005438:	f003 0310 	and.w	r3, r3, #16
 800543c:	2b00      	cmp	r3, #0
 800543e:	f000 813e 	beq.w	80056be <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	2210      	movs	r2, #16
 8005448:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	689b      	ldr	r3, [r3, #8]
 8005450:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005454:	2b40      	cmp	r3, #64	; 0x40
 8005456:	f040 80b6 	bne.w	80055c6 <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	685b      	ldr	r3, [r3, #4]
 8005462:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005466:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800546a:	2b00      	cmp	r3, #0
 800546c:	f000 8150 	beq.w	8005710 <HAL_UART_IRQHandler+0x594>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8005476:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800547a:	429a      	cmp	r2, r3
 800547c:	f080 8148 	bcs.w	8005710 <HAL_UART_IRQHandler+0x594>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005486:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800548e:	69db      	ldr	r3, [r3, #28]
 8005490:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005494:	f000 8086 	beq.w	80055a4 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054a0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80054a4:	e853 3f00 	ldrex	r3, [r3]
 80054a8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80054ac:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80054b0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80054b4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	461a      	mov	r2, r3
 80054be:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80054c2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80054c6:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054ca:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80054ce:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80054d2:	e841 2300 	strex	r3, r2, [r1]
 80054d6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80054da:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d1da      	bne.n	8005498 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	3308      	adds	r3, #8
 80054e8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054ea:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80054ec:	e853 3f00 	ldrex	r3, [r3]
 80054f0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80054f2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80054f4:	f023 0301 	bic.w	r3, r3, #1
 80054f8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	3308      	adds	r3, #8
 8005502:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005506:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800550a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800550c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800550e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005512:	e841 2300 	strex	r3, r2, [r1]
 8005516:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005518:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800551a:	2b00      	cmp	r3, #0
 800551c:	d1e1      	bne.n	80054e2 <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	3308      	adds	r3, #8
 8005524:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005526:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005528:	e853 3f00 	ldrex	r3, [r3]
 800552c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800552e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005530:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005534:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	3308      	adds	r3, #8
 800553e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005542:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005544:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005546:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005548:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800554a:	e841 2300 	strex	r3, r2, [r1]
 800554e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005550:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005552:	2b00      	cmp	r3, #0
 8005554:	d1e3      	bne.n	800551e <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	2220      	movs	r2, #32
 800555a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	2200      	movs	r2, #0
 8005562:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800556a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800556c:	e853 3f00 	ldrex	r3, [r3]
 8005570:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005572:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005574:	f023 0310 	bic.w	r3, r3, #16
 8005578:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	461a      	mov	r2, r3
 8005582:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005586:	65bb      	str	r3, [r7, #88]	; 0x58
 8005588:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800558a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800558c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800558e:	e841 2300 	strex	r3, r2, [r1]
 8005592:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005594:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005596:	2b00      	cmp	r3, #0
 8005598:	d1e4      	bne.n	8005564 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800559e:	4618      	mov	r0, r3
 80055a0:	f7fb fe52 	bl	8001248 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	2202      	movs	r2, #2
 80055a8:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80055b6:	b29b      	uxth	r3, r3
 80055b8:	1ad3      	subs	r3, r2, r3
 80055ba:	b29b      	uxth	r3, r3
 80055bc:	4619      	mov	r1, r3
 80055be:	6878      	ldr	r0, [r7, #4]
 80055c0:	f000 f8c2 	bl	8005748 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80055c4:	e0a4      	b.n	8005710 <HAL_UART_IRQHandler+0x594>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80055d2:	b29b      	uxth	r3, r3
 80055d4:	1ad3      	subs	r3, r2, r3
 80055d6:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80055e0:	b29b      	uxth	r3, r3
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	f000 8096 	beq.w	8005714 <HAL_UART_IRQHandler+0x598>
          && (nb_rx_data > 0U))
 80055e8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	f000 8091 	beq.w	8005714 <HAL_UART_IRQHandler+0x598>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055fa:	e853 3f00 	ldrex	r3, [r3]
 80055fe:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005600:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005602:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005606:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	461a      	mov	r2, r3
 8005610:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005614:	647b      	str	r3, [r7, #68]	; 0x44
 8005616:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005618:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800561a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800561c:	e841 2300 	strex	r3, r2, [r1]
 8005620:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005622:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005624:	2b00      	cmp	r3, #0
 8005626:	d1e4      	bne.n	80055f2 <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	3308      	adds	r3, #8
 800562e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005630:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005632:	e853 3f00 	ldrex	r3, [r3]
 8005636:	623b      	str	r3, [r7, #32]
   return(result);
 8005638:	6a3b      	ldr	r3, [r7, #32]
 800563a:	f023 0301 	bic.w	r3, r3, #1
 800563e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	3308      	adds	r3, #8
 8005648:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800564c:	633a      	str	r2, [r7, #48]	; 0x30
 800564e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005650:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005652:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005654:	e841 2300 	strex	r3, r2, [r1]
 8005658:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800565a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800565c:	2b00      	cmp	r3, #0
 800565e:	d1e3      	bne.n	8005628 <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	2220      	movs	r2, #32
 8005664:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	2200      	movs	r2, #0
 800566c:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	2200      	movs	r2, #0
 8005672:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800567a:	693b      	ldr	r3, [r7, #16]
 800567c:	e853 3f00 	ldrex	r3, [r3]
 8005680:	60fb      	str	r3, [r7, #12]
   return(result);
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	f023 0310 	bic.w	r3, r3, #16
 8005688:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	461a      	mov	r2, r3
 8005692:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005696:	61fb      	str	r3, [r7, #28]
 8005698:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800569a:	69b9      	ldr	r1, [r7, #24]
 800569c:	69fa      	ldr	r2, [r7, #28]
 800569e:	e841 2300 	strex	r3, r2, [r1]
 80056a2:	617b      	str	r3, [r7, #20]
   return(result);
 80056a4:	697b      	ldr	r3, [r7, #20]
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d1e4      	bne.n	8005674 <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	2202      	movs	r2, #2
 80056ae:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80056b0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80056b4:	4619      	mov	r1, r3
 80056b6:	6878      	ldr	r0, [r7, #4]
 80056b8:	f000 f846 	bl	8005748 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80056bc:	e02a      	b.n	8005714 <HAL_UART_IRQHandler+0x598>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80056be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80056c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d00e      	beq.n	80056e8 <HAL_UART_IRQHandler+0x56c>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80056ca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80056ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d008      	beq.n	80056e8 <HAL_UART_IRQHandler+0x56c>
  {
    if (huart->TxISR != NULL)
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d01c      	beq.n	8005718 <HAL_UART_IRQHandler+0x59c>
    {
      huart->TxISR(huart);
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80056e2:	6878      	ldr	r0, [r7, #4]
 80056e4:	4798      	blx	r3
    }
    return;
 80056e6:	e017      	b.n	8005718 <HAL_UART_IRQHandler+0x59c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80056e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80056ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d012      	beq.n	800571a <HAL_UART_IRQHandler+0x59e>
 80056f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80056f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d00c      	beq.n	800571a <HAL_UART_IRQHandler+0x59e>
  {
    UART_EndTransmit_IT(huart);
 8005700:	6878      	ldr	r0, [r7, #4]
 8005702:	f000 fdf2 	bl	80062ea <UART_EndTransmit_IT>
    return;
 8005706:	e008      	b.n	800571a <HAL_UART_IRQHandler+0x59e>
      return;
 8005708:	bf00      	nop
 800570a:	e006      	b.n	800571a <HAL_UART_IRQHandler+0x59e>
    return;
 800570c:	bf00      	nop
 800570e:	e004      	b.n	800571a <HAL_UART_IRQHandler+0x59e>
      return;
 8005710:	bf00      	nop
 8005712:	e002      	b.n	800571a <HAL_UART_IRQHandler+0x59e>
      return;
 8005714:	bf00      	nop
 8005716:	e000      	b.n	800571a <HAL_UART_IRQHandler+0x59e>
    return;
 8005718:	bf00      	nop
  }

}
 800571a:	37e8      	adds	r7, #232	; 0xe8
 800571c:	46bd      	mov	sp, r7
 800571e:	bd80      	pop	{r7, pc}

08005720 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005720:	b480      	push	{r7}
 8005722:	b083      	sub	sp, #12
 8005724:	af00      	add	r7, sp, #0
 8005726:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005728:	bf00      	nop
 800572a:	370c      	adds	r7, #12
 800572c:	46bd      	mov	sp, r7
 800572e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005732:	4770      	bx	lr

08005734 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005734:	b480      	push	{r7}
 8005736:	b083      	sub	sp, #12
 8005738:	af00      	add	r7, sp, #0
 800573a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800573c:	bf00      	nop
 800573e:	370c      	adds	r7, #12
 8005740:	46bd      	mov	sp, r7
 8005742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005746:	4770      	bx	lr

08005748 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005748:	b480      	push	{r7}
 800574a:	b083      	sub	sp, #12
 800574c:	af00      	add	r7, sp, #0
 800574e:	6078      	str	r0, [r7, #4]
 8005750:	460b      	mov	r3, r1
 8005752:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005754:	bf00      	nop
 8005756:	370c      	adds	r7, #12
 8005758:	46bd      	mov	sp, r7
 800575a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800575e:	4770      	bx	lr

08005760 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005760:	b580      	push	{r7, lr}
 8005762:	b088      	sub	sp, #32
 8005764:	af00      	add	r7, sp, #0
 8005766:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005768:	2300      	movs	r3, #0
 800576a:	77bb      	strb	r3, [r7, #30]
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	685b      	ldr	r3, [r3, #4]
 8005770:	4aa0      	ldr	r2, [pc, #640]	; (80059f4 <UART_SetConfig+0x294>)
 8005772:	4293      	cmp	r3, r2
 8005774:	d904      	bls.n	8005780 <UART_SetConfig+0x20>
 8005776:	f640 315d 	movw	r1, #2909	; 0xb5d
 800577a:	489f      	ldr	r0, [pc, #636]	; (80059f8 <UART_SetConfig+0x298>)
 800577c:	f7fb f99f 	bl	8000abe <assert_failed>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	689b      	ldr	r3, [r3, #8]
 8005784:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005788:	d00d      	beq.n	80057a6 <UART_SetConfig+0x46>
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	689b      	ldr	r3, [r3, #8]
 800578e:	2b00      	cmp	r3, #0
 8005790:	d009      	beq.n	80057a6 <UART_SetConfig+0x46>
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	689b      	ldr	r3, [r3, #8]
 8005796:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800579a:	d004      	beq.n	80057a6 <UART_SetConfig+0x46>
 800579c:	f640 315e 	movw	r1, #2910	; 0xb5e
 80057a0:	4895      	ldr	r0, [pc, #596]	; (80059f8 <UART_SetConfig+0x298>)
 80057a2:	f7fb f98c 	bl	8000abe <assert_failed>
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	68db      	ldr	r3, [r3, #12]
 80057aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80057ae:	d012      	beq.n	80057d6 <UART_SetConfig+0x76>
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	68db      	ldr	r3, [r3, #12]
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d00e      	beq.n	80057d6 <UART_SetConfig+0x76>
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	68db      	ldr	r3, [r3, #12]
 80057bc:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80057c0:	d009      	beq.n	80057d6 <UART_SetConfig+0x76>
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	68db      	ldr	r3, [r3, #12]
 80057c6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80057ca:	d004      	beq.n	80057d6 <UART_SetConfig+0x76>
 80057cc:	f640 315f 	movw	r1, #2911	; 0xb5f
 80057d0:	4889      	ldr	r0, [pc, #548]	; (80059f8 <UART_SetConfig+0x298>)
 80057d2:	f7fb f974 	bl	8000abe <assert_failed>
  assert_param(IS_UART_ONE_BIT_SAMPLE(huart->Init.OneBitSampling));
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	6a1b      	ldr	r3, [r3, #32]
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d009      	beq.n	80057f2 <UART_SetConfig+0x92>
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	6a1b      	ldr	r3, [r3, #32]
 80057e2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80057e6:	d004      	beq.n	80057f2 <UART_SetConfig+0x92>
 80057e8:	f44f 6136 	mov.w	r1, #2912	; 0xb60
 80057ec:	4882      	ldr	r0, [pc, #520]	; (80059f8 <UART_SetConfig+0x298>)
 80057ee:	f7fb f966 	bl	8000abe <assert_failed>

  assert_param(IS_UART_PARITY(huart->Init.Parity));
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	691b      	ldr	r3, [r3, #16]
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d00e      	beq.n	8005818 <UART_SetConfig+0xb8>
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	691b      	ldr	r3, [r3, #16]
 80057fe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005802:	d009      	beq.n	8005818 <UART_SetConfig+0xb8>
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	691b      	ldr	r3, [r3, #16]
 8005808:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800580c:	d004      	beq.n	8005818 <UART_SetConfig+0xb8>
 800580e:	f640 3162 	movw	r1, #2914	; 0xb62
 8005812:	4879      	ldr	r0, [pc, #484]	; (80059f8 <UART_SetConfig+0x298>)
 8005814:	f7fb f953 	bl	8000abe <assert_failed>
  assert_param(IS_UART_MODE(huart->Init.Mode));
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	695b      	ldr	r3, [r3, #20]
 800581c:	f023 030c 	bic.w	r3, r3, #12
 8005820:	2b00      	cmp	r3, #0
 8005822:	d103      	bne.n	800582c <UART_SetConfig+0xcc>
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	695b      	ldr	r3, [r3, #20]
 8005828:	2b00      	cmp	r3, #0
 800582a:	d104      	bne.n	8005836 <UART_SetConfig+0xd6>
 800582c:	f640 3163 	movw	r1, #2915	; 0xb63
 8005830:	4871      	ldr	r0, [pc, #452]	; (80059f8 <UART_SetConfig+0x298>)
 8005832:	f7fb f944 	bl	8000abe <assert_failed>
  assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	699b      	ldr	r3, [r3, #24]
 800583a:	2b00      	cmp	r3, #0
 800583c:	d013      	beq.n	8005866 <UART_SetConfig+0x106>
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	699b      	ldr	r3, [r3, #24]
 8005842:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005846:	d00e      	beq.n	8005866 <UART_SetConfig+0x106>
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	699b      	ldr	r3, [r3, #24]
 800584c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005850:	d009      	beq.n	8005866 <UART_SetConfig+0x106>
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	699b      	ldr	r3, [r3, #24]
 8005856:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800585a:	d004      	beq.n	8005866 <UART_SetConfig+0x106>
 800585c:	f640 3164 	movw	r1, #2916	; 0xb64
 8005860:	4865      	ldr	r0, [pc, #404]	; (80059f8 <UART_SetConfig+0x298>)
 8005862:	f7fb f92c 	bl	8000abe <assert_failed>
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	69db      	ldr	r3, [r3, #28]
 800586a:	2b00      	cmp	r3, #0
 800586c:	d009      	beq.n	8005882 <UART_SetConfig+0x122>
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	69db      	ldr	r3, [r3, #28]
 8005872:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005876:	d004      	beq.n	8005882 <UART_SetConfig+0x122>
 8005878:	f640 3165 	movw	r1, #2917	; 0xb65
 800587c:	485e      	ldr	r0, [pc, #376]	; (80059f8 <UART_SetConfig+0x298>)
 800587e:	f7fb f91e 	bl	8000abe <assert_failed>
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	689a      	ldr	r2, [r3, #8]
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	691b      	ldr	r3, [r3, #16]
 800588a:	431a      	orrs	r2, r3
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	695b      	ldr	r3, [r3, #20]
 8005890:	431a      	orrs	r2, r3
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	69db      	ldr	r3, [r3, #28]
 8005896:	4313      	orrs	r3, r2
 8005898:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	681a      	ldr	r2, [r3, #0]
 80058a0:	4b56      	ldr	r3, [pc, #344]	; (80059fc <UART_SetConfig+0x29c>)
 80058a2:	4013      	ands	r3, r2
 80058a4:	687a      	ldr	r2, [r7, #4]
 80058a6:	6812      	ldr	r2, [r2, #0]
 80058a8:	6979      	ldr	r1, [r7, #20]
 80058aa:	430b      	orrs	r3, r1
 80058ac:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	685b      	ldr	r3, [r3, #4]
 80058b4:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	68da      	ldr	r2, [r3, #12]
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	430a      	orrs	r2, r1
 80058c2:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	699b      	ldr	r3, [r3, #24]
 80058c8:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	6a1b      	ldr	r3, [r3, #32]
 80058ce:	697a      	ldr	r2, [r7, #20]
 80058d0:	4313      	orrs	r3, r2
 80058d2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	689b      	ldr	r3, [r3, #8]
 80058da:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	697a      	ldr	r2, [r7, #20]
 80058e4:	430a      	orrs	r2, r1
 80058e6:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	4a44      	ldr	r2, [pc, #272]	; (8005a00 <UART_SetConfig+0x2a0>)
 80058ee:	4293      	cmp	r3, r2
 80058f0:	d121      	bne.n	8005936 <UART_SetConfig+0x1d6>
 80058f2:	4b44      	ldr	r3, [pc, #272]	; (8005a04 <UART_SetConfig+0x2a4>)
 80058f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80058f8:	f003 0303 	and.w	r3, r3, #3
 80058fc:	2b03      	cmp	r3, #3
 80058fe:	d817      	bhi.n	8005930 <UART_SetConfig+0x1d0>
 8005900:	a201      	add	r2, pc, #4	; (adr r2, 8005908 <UART_SetConfig+0x1a8>)
 8005902:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005906:	bf00      	nop
 8005908:	08005919 	.word	0x08005919
 800590c:	08005925 	.word	0x08005925
 8005910:	0800591f 	.word	0x0800591f
 8005914:	0800592b 	.word	0x0800592b
 8005918:	2301      	movs	r3, #1
 800591a:	77fb      	strb	r3, [r7, #31]
 800591c:	e14c      	b.n	8005bb8 <UART_SetConfig+0x458>
 800591e:	2302      	movs	r3, #2
 8005920:	77fb      	strb	r3, [r7, #31]
 8005922:	e149      	b.n	8005bb8 <UART_SetConfig+0x458>
 8005924:	2304      	movs	r3, #4
 8005926:	77fb      	strb	r3, [r7, #31]
 8005928:	e146      	b.n	8005bb8 <UART_SetConfig+0x458>
 800592a:	2308      	movs	r3, #8
 800592c:	77fb      	strb	r3, [r7, #31]
 800592e:	e143      	b.n	8005bb8 <UART_SetConfig+0x458>
 8005930:	2310      	movs	r3, #16
 8005932:	77fb      	strb	r3, [r7, #31]
 8005934:	e140      	b.n	8005bb8 <UART_SetConfig+0x458>
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	4a33      	ldr	r2, [pc, #204]	; (8005a08 <UART_SetConfig+0x2a8>)
 800593c:	4293      	cmp	r3, r2
 800593e:	d132      	bne.n	80059a6 <UART_SetConfig+0x246>
 8005940:	4b30      	ldr	r3, [pc, #192]	; (8005a04 <UART_SetConfig+0x2a4>)
 8005942:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005946:	f003 030c 	and.w	r3, r3, #12
 800594a:	2b0c      	cmp	r3, #12
 800594c:	d828      	bhi.n	80059a0 <UART_SetConfig+0x240>
 800594e:	a201      	add	r2, pc, #4	; (adr r2, 8005954 <UART_SetConfig+0x1f4>)
 8005950:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005954:	08005989 	.word	0x08005989
 8005958:	080059a1 	.word	0x080059a1
 800595c:	080059a1 	.word	0x080059a1
 8005960:	080059a1 	.word	0x080059a1
 8005964:	08005995 	.word	0x08005995
 8005968:	080059a1 	.word	0x080059a1
 800596c:	080059a1 	.word	0x080059a1
 8005970:	080059a1 	.word	0x080059a1
 8005974:	0800598f 	.word	0x0800598f
 8005978:	080059a1 	.word	0x080059a1
 800597c:	080059a1 	.word	0x080059a1
 8005980:	080059a1 	.word	0x080059a1
 8005984:	0800599b 	.word	0x0800599b
 8005988:	2300      	movs	r3, #0
 800598a:	77fb      	strb	r3, [r7, #31]
 800598c:	e114      	b.n	8005bb8 <UART_SetConfig+0x458>
 800598e:	2302      	movs	r3, #2
 8005990:	77fb      	strb	r3, [r7, #31]
 8005992:	e111      	b.n	8005bb8 <UART_SetConfig+0x458>
 8005994:	2304      	movs	r3, #4
 8005996:	77fb      	strb	r3, [r7, #31]
 8005998:	e10e      	b.n	8005bb8 <UART_SetConfig+0x458>
 800599a:	2308      	movs	r3, #8
 800599c:	77fb      	strb	r3, [r7, #31]
 800599e:	e10b      	b.n	8005bb8 <UART_SetConfig+0x458>
 80059a0:	2310      	movs	r3, #16
 80059a2:	77fb      	strb	r3, [r7, #31]
 80059a4:	e108      	b.n	8005bb8 <UART_SetConfig+0x458>
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	4a18      	ldr	r2, [pc, #96]	; (8005a0c <UART_SetConfig+0x2ac>)
 80059ac:	4293      	cmp	r3, r2
 80059ae:	d12f      	bne.n	8005a10 <UART_SetConfig+0x2b0>
 80059b0:	4b14      	ldr	r3, [pc, #80]	; (8005a04 <UART_SetConfig+0x2a4>)
 80059b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80059b6:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80059ba:	2b30      	cmp	r3, #48	; 0x30
 80059bc:	d013      	beq.n	80059e6 <UART_SetConfig+0x286>
 80059be:	2b30      	cmp	r3, #48	; 0x30
 80059c0:	d814      	bhi.n	80059ec <UART_SetConfig+0x28c>
 80059c2:	2b20      	cmp	r3, #32
 80059c4:	d009      	beq.n	80059da <UART_SetConfig+0x27a>
 80059c6:	2b20      	cmp	r3, #32
 80059c8:	d810      	bhi.n	80059ec <UART_SetConfig+0x28c>
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d002      	beq.n	80059d4 <UART_SetConfig+0x274>
 80059ce:	2b10      	cmp	r3, #16
 80059d0:	d006      	beq.n	80059e0 <UART_SetConfig+0x280>
 80059d2:	e00b      	b.n	80059ec <UART_SetConfig+0x28c>
 80059d4:	2300      	movs	r3, #0
 80059d6:	77fb      	strb	r3, [r7, #31]
 80059d8:	e0ee      	b.n	8005bb8 <UART_SetConfig+0x458>
 80059da:	2302      	movs	r3, #2
 80059dc:	77fb      	strb	r3, [r7, #31]
 80059de:	e0eb      	b.n	8005bb8 <UART_SetConfig+0x458>
 80059e0:	2304      	movs	r3, #4
 80059e2:	77fb      	strb	r3, [r7, #31]
 80059e4:	e0e8      	b.n	8005bb8 <UART_SetConfig+0x458>
 80059e6:	2308      	movs	r3, #8
 80059e8:	77fb      	strb	r3, [r7, #31]
 80059ea:	e0e5      	b.n	8005bb8 <UART_SetConfig+0x458>
 80059ec:	2310      	movs	r3, #16
 80059ee:	77fb      	strb	r3, [r7, #31]
 80059f0:	e0e2      	b.n	8005bb8 <UART_SetConfig+0x458>
 80059f2:	bf00      	nop
 80059f4:	019bfcc0 	.word	0x019bfcc0
 80059f8:	0800bea0 	.word	0x0800bea0
 80059fc:	efff69f3 	.word	0xefff69f3
 8005a00:	40011000 	.word	0x40011000
 8005a04:	40023800 	.word	0x40023800
 8005a08:	40004400 	.word	0x40004400
 8005a0c:	40004800 	.word	0x40004800
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	4aa5      	ldr	r2, [pc, #660]	; (8005cac <UART_SetConfig+0x54c>)
 8005a16:	4293      	cmp	r3, r2
 8005a18:	d120      	bne.n	8005a5c <UART_SetConfig+0x2fc>
 8005a1a:	4ba5      	ldr	r3, [pc, #660]	; (8005cb0 <UART_SetConfig+0x550>)
 8005a1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a20:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005a24:	2bc0      	cmp	r3, #192	; 0xc0
 8005a26:	d013      	beq.n	8005a50 <UART_SetConfig+0x2f0>
 8005a28:	2bc0      	cmp	r3, #192	; 0xc0
 8005a2a:	d814      	bhi.n	8005a56 <UART_SetConfig+0x2f6>
 8005a2c:	2b80      	cmp	r3, #128	; 0x80
 8005a2e:	d009      	beq.n	8005a44 <UART_SetConfig+0x2e4>
 8005a30:	2b80      	cmp	r3, #128	; 0x80
 8005a32:	d810      	bhi.n	8005a56 <UART_SetConfig+0x2f6>
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d002      	beq.n	8005a3e <UART_SetConfig+0x2de>
 8005a38:	2b40      	cmp	r3, #64	; 0x40
 8005a3a:	d006      	beq.n	8005a4a <UART_SetConfig+0x2ea>
 8005a3c:	e00b      	b.n	8005a56 <UART_SetConfig+0x2f6>
 8005a3e:	2300      	movs	r3, #0
 8005a40:	77fb      	strb	r3, [r7, #31]
 8005a42:	e0b9      	b.n	8005bb8 <UART_SetConfig+0x458>
 8005a44:	2302      	movs	r3, #2
 8005a46:	77fb      	strb	r3, [r7, #31]
 8005a48:	e0b6      	b.n	8005bb8 <UART_SetConfig+0x458>
 8005a4a:	2304      	movs	r3, #4
 8005a4c:	77fb      	strb	r3, [r7, #31]
 8005a4e:	e0b3      	b.n	8005bb8 <UART_SetConfig+0x458>
 8005a50:	2308      	movs	r3, #8
 8005a52:	77fb      	strb	r3, [r7, #31]
 8005a54:	e0b0      	b.n	8005bb8 <UART_SetConfig+0x458>
 8005a56:	2310      	movs	r3, #16
 8005a58:	77fb      	strb	r3, [r7, #31]
 8005a5a:	e0ad      	b.n	8005bb8 <UART_SetConfig+0x458>
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	4a94      	ldr	r2, [pc, #592]	; (8005cb4 <UART_SetConfig+0x554>)
 8005a62:	4293      	cmp	r3, r2
 8005a64:	d125      	bne.n	8005ab2 <UART_SetConfig+0x352>
 8005a66:	4b92      	ldr	r3, [pc, #584]	; (8005cb0 <UART_SetConfig+0x550>)
 8005a68:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a6c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005a70:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005a74:	d017      	beq.n	8005aa6 <UART_SetConfig+0x346>
 8005a76:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005a7a:	d817      	bhi.n	8005aac <UART_SetConfig+0x34c>
 8005a7c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005a80:	d00b      	beq.n	8005a9a <UART_SetConfig+0x33a>
 8005a82:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005a86:	d811      	bhi.n	8005aac <UART_SetConfig+0x34c>
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d003      	beq.n	8005a94 <UART_SetConfig+0x334>
 8005a8c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005a90:	d006      	beq.n	8005aa0 <UART_SetConfig+0x340>
 8005a92:	e00b      	b.n	8005aac <UART_SetConfig+0x34c>
 8005a94:	2300      	movs	r3, #0
 8005a96:	77fb      	strb	r3, [r7, #31]
 8005a98:	e08e      	b.n	8005bb8 <UART_SetConfig+0x458>
 8005a9a:	2302      	movs	r3, #2
 8005a9c:	77fb      	strb	r3, [r7, #31]
 8005a9e:	e08b      	b.n	8005bb8 <UART_SetConfig+0x458>
 8005aa0:	2304      	movs	r3, #4
 8005aa2:	77fb      	strb	r3, [r7, #31]
 8005aa4:	e088      	b.n	8005bb8 <UART_SetConfig+0x458>
 8005aa6:	2308      	movs	r3, #8
 8005aa8:	77fb      	strb	r3, [r7, #31]
 8005aaa:	e085      	b.n	8005bb8 <UART_SetConfig+0x458>
 8005aac:	2310      	movs	r3, #16
 8005aae:	77fb      	strb	r3, [r7, #31]
 8005ab0:	e082      	b.n	8005bb8 <UART_SetConfig+0x458>
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	4a80      	ldr	r2, [pc, #512]	; (8005cb8 <UART_SetConfig+0x558>)
 8005ab8:	4293      	cmp	r3, r2
 8005aba:	d125      	bne.n	8005b08 <UART_SetConfig+0x3a8>
 8005abc:	4b7c      	ldr	r3, [pc, #496]	; (8005cb0 <UART_SetConfig+0x550>)
 8005abe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ac2:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005ac6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005aca:	d017      	beq.n	8005afc <UART_SetConfig+0x39c>
 8005acc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005ad0:	d817      	bhi.n	8005b02 <UART_SetConfig+0x3a2>
 8005ad2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005ad6:	d00b      	beq.n	8005af0 <UART_SetConfig+0x390>
 8005ad8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005adc:	d811      	bhi.n	8005b02 <UART_SetConfig+0x3a2>
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d003      	beq.n	8005aea <UART_SetConfig+0x38a>
 8005ae2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005ae6:	d006      	beq.n	8005af6 <UART_SetConfig+0x396>
 8005ae8:	e00b      	b.n	8005b02 <UART_SetConfig+0x3a2>
 8005aea:	2301      	movs	r3, #1
 8005aec:	77fb      	strb	r3, [r7, #31]
 8005aee:	e063      	b.n	8005bb8 <UART_SetConfig+0x458>
 8005af0:	2302      	movs	r3, #2
 8005af2:	77fb      	strb	r3, [r7, #31]
 8005af4:	e060      	b.n	8005bb8 <UART_SetConfig+0x458>
 8005af6:	2304      	movs	r3, #4
 8005af8:	77fb      	strb	r3, [r7, #31]
 8005afa:	e05d      	b.n	8005bb8 <UART_SetConfig+0x458>
 8005afc:	2308      	movs	r3, #8
 8005afe:	77fb      	strb	r3, [r7, #31]
 8005b00:	e05a      	b.n	8005bb8 <UART_SetConfig+0x458>
 8005b02:	2310      	movs	r3, #16
 8005b04:	77fb      	strb	r3, [r7, #31]
 8005b06:	e057      	b.n	8005bb8 <UART_SetConfig+0x458>
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	4a6b      	ldr	r2, [pc, #428]	; (8005cbc <UART_SetConfig+0x55c>)
 8005b0e:	4293      	cmp	r3, r2
 8005b10:	d125      	bne.n	8005b5e <UART_SetConfig+0x3fe>
 8005b12:	4b67      	ldr	r3, [pc, #412]	; (8005cb0 <UART_SetConfig+0x550>)
 8005b14:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b18:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8005b1c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005b20:	d017      	beq.n	8005b52 <UART_SetConfig+0x3f2>
 8005b22:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005b26:	d817      	bhi.n	8005b58 <UART_SetConfig+0x3f8>
 8005b28:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005b2c:	d00b      	beq.n	8005b46 <UART_SetConfig+0x3e6>
 8005b2e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005b32:	d811      	bhi.n	8005b58 <UART_SetConfig+0x3f8>
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d003      	beq.n	8005b40 <UART_SetConfig+0x3e0>
 8005b38:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005b3c:	d006      	beq.n	8005b4c <UART_SetConfig+0x3ec>
 8005b3e:	e00b      	b.n	8005b58 <UART_SetConfig+0x3f8>
 8005b40:	2300      	movs	r3, #0
 8005b42:	77fb      	strb	r3, [r7, #31]
 8005b44:	e038      	b.n	8005bb8 <UART_SetConfig+0x458>
 8005b46:	2302      	movs	r3, #2
 8005b48:	77fb      	strb	r3, [r7, #31]
 8005b4a:	e035      	b.n	8005bb8 <UART_SetConfig+0x458>
 8005b4c:	2304      	movs	r3, #4
 8005b4e:	77fb      	strb	r3, [r7, #31]
 8005b50:	e032      	b.n	8005bb8 <UART_SetConfig+0x458>
 8005b52:	2308      	movs	r3, #8
 8005b54:	77fb      	strb	r3, [r7, #31]
 8005b56:	e02f      	b.n	8005bb8 <UART_SetConfig+0x458>
 8005b58:	2310      	movs	r3, #16
 8005b5a:	77fb      	strb	r3, [r7, #31]
 8005b5c:	e02c      	b.n	8005bb8 <UART_SetConfig+0x458>
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	4a57      	ldr	r2, [pc, #348]	; (8005cc0 <UART_SetConfig+0x560>)
 8005b64:	4293      	cmp	r3, r2
 8005b66:	d125      	bne.n	8005bb4 <UART_SetConfig+0x454>
 8005b68:	4b51      	ldr	r3, [pc, #324]	; (8005cb0 <UART_SetConfig+0x550>)
 8005b6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b6e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8005b72:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8005b76:	d017      	beq.n	8005ba8 <UART_SetConfig+0x448>
 8005b78:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8005b7c:	d817      	bhi.n	8005bae <UART_SetConfig+0x44e>
 8005b7e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005b82:	d00b      	beq.n	8005b9c <UART_SetConfig+0x43c>
 8005b84:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005b88:	d811      	bhi.n	8005bae <UART_SetConfig+0x44e>
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d003      	beq.n	8005b96 <UART_SetConfig+0x436>
 8005b8e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005b92:	d006      	beq.n	8005ba2 <UART_SetConfig+0x442>
 8005b94:	e00b      	b.n	8005bae <UART_SetConfig+0x44e>
 8005b96:	2300      	movs	r3, #0
 8005b98:	77fb      	strb	r3, [r7, #31]
 8005b9a:	e00d      	b.n	8005bb8 <UART_SetConfig+0x458>
 8005b9c:	2302      	movs	r3, #2
 8005b9e:	77fb      	strb	r3, [r7, #31]
 8005ba0:	e00a      	b.n	8005bb8 <UART_SetConfig+0x458>
 8005ba2:	2304      	movs	r3, #4
 8005ba4:	77fb      	strb	r3, [r7, #31]
 8005ba6:	e007      	b.n	8005bb8 <UART_SetConfig+0x458>
 8005ba8:	2308      	movs	r3, #8
 8005baa:	77fb      	strb	r3, [r7, #31]
 8005bac:	e004      	b.n	8005bb8 <UART_SetConfig+0x458>
 8005bae:	2310      	movs	r3, #16
 8005bb0:	77fb      	strb	r3, [r7, #31]
 8005bb2:	e001      	b.n	8005bb8 <UART_SetConfig+0x458>
 8005bb4:	2310      	movs	r3, #16
 8005bb6:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	69db      	ldr	r3, [r3, #28]
 8005bbc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005bc0:	d15c      	bne.n	8005c7c <UART_SetConfig+0x51c>
  {
    switch (clocksource)
 8005bc2:	7ffb      	ldrb	r3, [r7, #31]
 8005bc4:	2b08      	cmp	r3, #8
 8005bc6:	d828      	bhi.n	8005c1a <UART_SetConfig+0x4ba>
 8005bc8:	a201      	add	r2, pc, #4	; (adr r2, 8005bd0 <UART_SetConfig+0x470>)
 8005bca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bce:	bf00      	nop
 8005bd0:	08005bf5 	.word	0x08005bf5
 8005bd4:	08005bfd 	.word	0x08005bfd
 8005bd8:	08005c05 	.word	0x08005c05
 8005bdc:	08005c1b 	.word	0x08005c1b
 8005be0:	08005c0b 	.word	0x08005c0b
 8005be4:	08005c1b 	.word	0x08005c1b
 8005be8:	08005c1b 	.word	0x08005c1b
 8005bec:	08005c1b 	.word	0x08005c1b
 8005bf0:	08005c13 	.word	0x08005c13
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005bf4:	f7fd fc26 	bl	8003444 <HAL_RCC_GetPCLK1Freq>
 8005bf8:	61b8      	str	r0, [r7, #24]
        break;
 8005bfa:	e013      	b.n	8005c24 <UART_SetConfig+0x4c4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005bfc:	f7fd fc36 	bl	800346c <HAL_RCC_GetPCLK2Freq>
 8005c00:	61b8      	str	r0, [r7, #24]
        break;
 8005c02:	e00f      	b.n	8005c24 <UART_SetConfig+0x4c4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005c04:	4b2f      	ldr	r3, [pc, #188]	; (8005cc4 <UART_SetConfig+0x564>)
 8005c06:	61bb      	str	r3, [r7, #24]
        break;
 8005c08:	e00c      	b.n	8005c24 <UART_SetConfig+0x4c4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005c0a:	f7fd fb49 	bl	80032a0 <HAL_RCC_GetSysClockFreq>
 8005c0e:	61b8      	str	r0, [r7, #24]
        break;
 8005c10:	e008      	b.n	8005c24 <UART_SetConfig+0x4c4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005c12:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005c16:	61bb      	str	r3, [r7, #24]
        break;
 8005c18:	e004      	b.n	8005c24 <UART_SetConfig+0x4c4>
      default:
        pclk = 0U;
 8005c1a:	2300      	movs	r3, #0
 8005c1c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005c1e:	2301      	movs	r3, #1
 8005c20:	77bb      	strb	r3, [r7, #30]
        break;
 8005c22:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005c24:	69bb      	ldr	r3, [r7, #24]
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	f000 8082 	beq.w	8005d30 <UART_SetConfig+0x5d0>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005c2c:	69bb      	ldr	r3, [r7, #24]
 8005c2e:	005a      	lsls	r2, r3, #1
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	685b      	ldr	r3, [r3, #4]
 8005c34:	085b      	lsrs	r3, r3, #1
 8005c36:	441a      	add	r2, r3
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	685b      	ldr	r3, [r3, #4]
 8005c3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c40:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005c42:	693b      	ldr	r3, [r7, #16]
 8005c44:	2b0f      	cmp	r3, #15
 8005c46:	d916      	bls.n	8005c76 <UART_SetConfig+0x516>
 8005c48:	693b      	ldr	r3, [r7, #16]
 8005c4a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005c4e:	d212      	bcs.n	8005c76 <UART_SetConfig+0x516>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005c50:	693b      	ldr	r3, [r7, #16]
 8005c52:	b29b      	uxth	r3, r3
 8005c54:	f023 030f 	bic.w	r3, r3, #15
 8005c58:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005c5a:	693b      	ldr	r3, [r7, #16]
 8005c5c:	085b      	lsrs	r3, r3, #1
 8005c5e:	b29b      	uxth	r3, r3
 8005c60:	f003 0307 	and.w	r3, r3, #7
 8005c64:	b29a      	uxth	r2, r3
 8005c66:	89fb      	ldrh	r3, [r7, #14]
 8005c68:	4313      	orrs	r3, r2
 8005c6a:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	89fa      	ldrh	r2, [r7, #14]
 8005c72:	60da      	str	r2, [r3, #12]
 8005c74:	e05c      	b.n	8005d30 <UART_SetConfig+0x5d0>
      }
      else
      {
        ret = HAL_ERROR;
 8005c76:	2301      	movs	r3, #1
 8005c78:	77bb      	strb	r3, [r7, #30]
 8005c7a:	e059      	b.n	8005d30 <UART_SetConfig+0x5d0>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005c7c:	7ffb      	ldrb	r3, [r7, #31]
 8005c7e:	2b08      	cmp	r3, #8
 8005c80:	d835      	bhi.n	8005cee <UART_SetConfig+0x58e>
 8005c82:	a201      	add	r2, pc, #4	; (adr r2, 8005c88 <UART_SetConfig+0x528>)
 8005c84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c88:	08005cc9 	.word	0x08005cc9
 8005c8c:	08005cd1 	.word	0x08005cd1
 8005c90:	08005cd9 	.word	0x08005cd9
 8005c94:	08005cef 	.word	0x08005cef
 8005c98:	08005cdf 	.word	0x08005cdf
 8005c9c:	08005cef 	.word	0x08005cef
 8005ca0:	08005cef 	.word	0x08005cef
 8005ca4:	08005cef 	.word	0x08005cef
 8005ca8:	08005ce7 	.word	0x08005ce7
 8005cac:	40004c00 	.word	0x40004c00
 8005cb0:	40023800 	.word	0x40023800
 8005cb4:	40005000 	.word	0x40005000
 8005cb8:	40011400 	.word	0x40011400
 8005cbc:	40007800 	.word	0x40007800
 8005cc0:	40007c00 	.word	0x40007c00
 8005cc4:	00f42400 	.word	0x00f42400
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005cc8:	f7fd fbbc 	bl	8003444 <HAL_RCC_GetPCLK1Freq>
 8005ccc:	61b8      	str	r0, [r7, #24]
        break;
 8005cce:	e013      	b.n	8005cf8 <UART_SetConfig+0x598>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005cd0:	f7fd fbcc 	bl	800346c <HAL_RCC_GetPCLK2Freq>
 8005cd4:	61b8      	str	r0, [r7, #24]
        break;
 8005cd6:	e00f      	b.n	8005cf8 <UART_SetConfig+0x598>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005cd8:	4b1b      	ldr	r3, [pc, #108]	; (8005d48 <UART_SetConfig+0x5e8>)
 8005cda:	61bb      	str	r3, [r7, #24]
        break;
 8005cdc:	e00c      	b.n	8005cf8 <UART_SetConfig+0x598>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005cde:	f7fd fadf 	bl	80032a0 <HAL_RCC_GetSysClockFreq>
 8005ce2:	61b8      	str	r0, [r7, #24]
        break;
 8005ce4:	e008      	b.n	8005cf8 <UART_SetConfig+0x598>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005ce6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005cea:	61bb      	str	r3, [r7, #24]
        break;
 8005cec:	e004      	b.n	8005cf8 <UART_SetConfig+0x598>
      default:
        pclk = 0U;
 8005cee:	2300      	movs	r3, #0
 8005cf0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005cf2:	2301      	movs	r3, #1
 8005cf4:	77bb      	strb	r3, [r7, #30]
        break;
 8005cf6:	bf00      	nop
    }

    if (pclk != 0U)
 8005cf8:	69bb      	ldr	r3, [r7, #24]
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d018      	beq.n	8005d30 <UART_SetConfig+0x5d0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	685b      	ldr	r3, [r3, #4]
 8005d02:	085a      	lsrs	r2, r3, #1
 8005d04:	69bb      	ldr	r3, [r7, #24]
 8005d06:	441a      	add	r2, r3
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	685b      	ldr	r3, [r3, #4]
 8005d0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d10:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005d12:	693b      	ldr	r3, [r7, #16]
 8005d14:	2b0f      	cmp	r3, #15
 8005d16:	d909      	bls.n	8005d2c <UART_SetConfig+0x5cc>
 8005d18:	693b      	ldr	r3, [r7, #16]
 8005d1a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005d1e:	d205      	bcs.n	8005d2c <UART_SetConfig+0x5cc>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005d20:	693b      	ldr	r3, [r7, #16]
 8005d22:	b29a      	uxth	r2, r3
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	60da      	str	r2, [r3, #12]
 8005d2a:	e001      	b.n	8005d30 <UART_SetConfig+0x5d0>
      }
      else
      {
        ret = HAL_ERROR;
 8005d2c:	2301      	movs	r3, #1
 8005d2e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	2200      	movs	r2, #0
 8005d34:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	2200      	movs	r2, #0
 8005d3a:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8005d3c:	7fbb      	ldrb	r3, [r7, #30]
}
 8005d3e:	4618      	mov	r0, r3
 8005d40:	3720      	adds	r7, #32
 8005d42:	46bd      	mov	sp, r7
 8005d44:	bd80      	pop	{r7, pc}
 8005d46:	bf00      	nop
 8005d48:	00f42400 	.word	0x00f42400

08005d4c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005d4c:	b580      	push	{r7, lr}
 8005d4e:	b082      	sub	sp, #8
 8005d50:	af00      	add	r7, sp, #0
 8005d52:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d58:	2bff      	cmp	r3, #255	; 0xff
 8005d5a:	d904      	bls.n	8005d66 <UART_AdvFeatureConfig+0x1a>
 8005d5c:	f640 31e6 	movw	r1, #3046	; 0xbe6
 8005d60:	488e      	ldr	r0, [pc, #568]	; (8005f9c <UART_AdvFeatureConfig+0x250>)
 8005d62:	f7fa feac 	bl	8000abe <assert_failed>

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d6a:	f003 0301 	and.w	r3, r3, #1
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d018      	beq.n	8005da4 <UART_AdvFeatureConfig+0x58>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d009      	beq.n	8005d8e <UART_AdvFeatureConfig+0x42>
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d7e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005d82:	d004      	beq.n	8005d8e <UART_AdvFeatureConfig+0x42>
 8005d84:	f640 31eb 	movw	r1, #3051	; 0xbeb
 8005d88:	4884      	ldr	r0, [pc, #528]	; (8005f9c <UART_AdvFeatureConfig+0x250>)
 8005d8a:	f7fa fe98 	bl	8000abe <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	685b      	ldr	r3, [r3, #4]
 8005d94:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	430a      	orrs	r2, r1
 8005da2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005da8:	f003 0302 	and.w	r3, r3, #2
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d018      	beq.n	8005de2 <UART_AdvFeatureConfig+0x96>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d009      	beq.n	8005dcc <UART_AdvFeatureConfig+0x80>
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005dbc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005dc0:	d004      	beq.n	8005dcc <UART_AdvFeatureConfig+0x80>
 8005dc2:	f640 31f2 	movw	r1, #3058	; 0xbf2
 8005dc6:	4875      	ldr	r0, [pc, #468]	; (8005f9c <UART_AdvFeatureConfig+0x250>)
 8005dc8:	f7fa fe79 	bl	8000abe <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	685b      	ldr	r3, [r3, #4]
 8005dd2:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	430a      	orrs	r2, r1
 8005de0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005de6:	f003 0304 	and.w	r3, r3, #4
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d018      	beq.n	8005e20 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d009      	beq.n	8005e0a <UART_AdvFeatureConfig+0xbe>
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005dfa:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005dfe:	d004      	beq.n	8005e0a <UART_AdvFeatureConfig+0xbe>
 8005e00:	f640 31f9 	movw	r1, #3065	; 0xbf9
 8005e04:	4865      	ldr	r0, [pc, #404]	; (8005f9c <UART_AdvFeatureConfig+0x250>)
 8005e06:	f7fa fe5a 	bl	8000abe <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	685b      	ldr	r3, [r3, #4]
 8005e10:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	430a      	orrs	r2, r1
 8005e1e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e24:	f003 0308 	and.w	r3, r3, #8
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d018      	beq.n	8005e5e <UART_AdvFeatureConfig+0x112>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d009      	beq.n	8005e48 <UART_AdvFeatureConfig+0xfc>
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e38:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005e3c:	d004      	beq.n	8005e48 <UART_AdvFeatureConfig+0xfc>
 8005e3e:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 8005e42:	4856      	ldr	r0, [pc, #344]	; (8005f9c <UART_AdvFeatureConfig+0x250>)
 8005e44:	f7fa fe3b 	bl	8000abe <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	685b      	ldr	r3, [r3, #4]
 8005e4e:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	430a      	orrs	r2, r1
 8005e5c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e62:	f003 0310 	and.w	r3, r3, #16
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d018      	beq.n	8005e9c <UART_AdvFeatureConfig+0x150>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d009      	beq.n	8005e86 <UART_AdvFeatureConfig+0x13a>
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e76:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005e7a:	d004      	beq.n	8005e86 <UART_AdvFeatureConfig+0x13a>
 8005e7c:	f640 4107 	movw	r1, #3079	; 0xc07
 8005e80:	4846      	ldr	r0, [pc, #280]	; (8005f9c <UART_AdvFeatureConfig+0x250>)
 8005e82:	f7fa fe1c 	bl	8000abe <assert_failed>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	689b      	ldr	r3, [r3, #8]
 8005e8c:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	430a      	orrs	r2, r1
 8005e9a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ea0:	f003 0320 	and.w	r3, r3, #32
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d018      	beq.n	8005eda <UART_AdvFeatureConfig+0x18e>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d009      	beq.n	8005ec4 <UART_AdvFeatureConfig+0x178>
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005eb4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005eb8:	d004      	beq.n	8005ec4 <UART_AdvFeatureConfig+0x178>
 8005eba:	f640 410e 	movw	r1, #3086	; 0xc0e
 8005ebe:	4837      	ldr	r0, [pc, #220]	; (8005f9c <UART_AdvFeatureConfig+0x250>)
 8005ec0:	f7fa fdfd 	bl	8000abe <assert_failed>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	689b      	ldr	r3, [r3, #8]
 8005eca:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	430a      	orrs	r2, r1
 8005ed8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ede:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d064      	beq.n	8005fb0 <UART_AdvFeatureConfig+0x264>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	4a2d      	ldr	r2, [pc, #180]	; (8005fa0 <UART_AdvFeatureConfig+0x254>)
 8005eec:	4293      	cmp	r3, r2
 8005eee:	d013      	beq.n	8005f18 <UART_AdvFeatureConfig+0x1cc>
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	4a2b      	ldr	r2, [pc, #172]	; (8005fa4 <UART_AdvFeatureConfig+0x258>)
 8005ef6:	4293      	cmp	r3, r2
 8005ef8:	d00e      	beq.n	8005f18 <UART_AdvFeatureConfig+0x1cc>
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	4a2a      	ldr	r2, [pc, #168]	; (8005fa8 <UART_AdvFeatureConfig+0x25c>)
 8005f00:	4293      	cmp	r3, r2
 8005f02:	d009      	beq.n	8005f18 <UART_AdvFeatureConfig+0x1cc>
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	4a28      	ldr	r2, [pc, #160]	; (8005fac <UART_AdvFeatureConfig+0x260>)
 8005f0a:	4293      	cmp	r3, r2
 8005f0c:	d004      	beq.n	8005f18 <UART_AdvFeatureConfig+0x1cc>
 8005f0e:	f640 4115 	movw	r1, #3093	; 0xc15
 8005f12:	4822      	ldr	r0, [pc, #136]	; (8005f9c <UART_AdvFeatureConfig+0x250>)
 8005f14:	f7fa fdd3 	bl	8000abe <assert_failed>
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d009      	beq.n	8005f34 <UART_AdvFeatureConfig+0x1e8>
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f24:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005f28:	d004      	beq.n	8005f34 <UART_AdvFeatureConfig+0x1e8>
 8005f2a:	f640 4116 	movw	r1, #3094	; 0xc16
 8005f2e:	481b      	ldr	r0, [pc, #108]	; (8005f9c <UART_AdvFeatureConfig+0x250>)
 8005f30:	f7fa fdc5 	bl	8000abe <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	685b      	ldr	r3, [r3, #4]
 8005f3a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	430a      	orrs	r2, r1
 8005f48:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f4e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005f52:	d12d      	bne.n	8005fb0 <UART_AdvFeatureConfig+0x264>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d013      	beq.n	8005f84 <UART_AdvFeatureConfig+0x238>
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f60:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005f64:	d00e      	beq.n	8005f84 <UART_AdvFeatureConfig+0x238>
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f6a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005f6e:	d009      	beq.n	8005f84 <UART_AdvFeatureConfig+0x238>
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f74:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8005f78:	d004      	beq.n	8005f84 <UART_AdvFeatureConfig+0x238>
 8005f7a:	f640 411b 	movw	r1, #3099	; 0xc1b
 8005f7e:	4807      	ldr	r0, [pc, #28]	; (8005f9c <UART_AdvFeatureConfig+0x250>)
 8005f80:	f7fa fd9d 	bl	8000abe <assert_failed>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	685b      	ldr	r3, [r3, #4]
 8005f8a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	430a      	orrs	r2, r1
 8005f98:	605a      	str	r2, [r3, #4]
 8005f9a:	e009      	b.n	8005fb0 <UART_AdvFeatureConfig+0x264>
 8005f9c:	0800bea0 	.word	0x0800bea0
 8005fa0:	40011000 	.word	0x40011000
 8005fa4:	40004400 	.word	0x40004400
 8005fa8:	40004800 	.word	0x40004800
 8005fac:	40011400 	.word	0x40011400
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fb4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d018      	beq.n	8005fee <UART_AdvFeatureConfig+0x2a2>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d009      	beq.n	8005fd8 <UART_AdvFeatureConfig+0x28c>
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005fc8:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005fcc:	d004      	beq.n	8005fd8 <UART_AdvFeatureConfig+0x28c>
 8005fce:	f640 4123 	movw	r1, #3107	; 0xc23
 8005fd2:	4809      	ldr	r0, [pc, #36]	; (8005ff8 <UART_AdvFeatureConfig+0x2ac>)
 8005fd4:	f7fa fd73 	bl	8000abe <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	685b      	ldr	r3, [r3, #4]
 8005fde:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	430a      	orrs	r2, r1
 8005fec:	605a      	str	r2, [r3, #4]
  }
}
 8005fee:	bf00      	nop
 8005ff0:	3708      	adds	r7, #8
 8005ff2:	46bd      	mov	sp, r7
 8005ff4:	bd80      	pop	{r7, pc}
 8005ff6:	bf00      	nop
 8005ff8:	0800bea0 	.word	0x0800bea0

08005ffc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005ffc:	b580      	push	{r7, lr}
 8005ffe:	b086      	sub	sp, #24
 8006000:	af02      	add	r7, sp, #8
 8006002:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	2200      	movs	r2, #0
 8006008:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800600c:	f7fa ffac 	bl	8000f68 <HAL_GetTick>
 8006010:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	f003 0308 	and.w	r3, r3, #8
 800601c:	2b08      	cmp	r3, #8
 800601e:	d10e      	bne.n	800603e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006020:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006024:	9300      	str	r3, [sp, #0]
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	2200      	movs	r2, #0
 800602a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800602e:	6878      	ldr	r0, [r7, #4]
 8006030:	f000 f81b 	bl	800606a <UART_WaitOnFlagUntilTimeout>
 8006034:	4603      	mov	r3, r0
 8006036:	2b00      	cmp	r3, #0
 8006038:	d001      	beq.n	800603e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800603a:	2303      	movs	r3, #3
 800603c:	e011      	b.n	8006062 <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	2220      	movs	r2, #32
 8006042:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	2220      	movs	r2, #32
 8006048:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	2200      	movs	r2, #0
 8006050:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	2200      	movs	r2, #0
 8006056:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	2200      	movs	r2, #0
 800605c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8006060:	2300      	movs	r3, #0
}
 8006062:	4618      	mov	r0, r3
 8006064:	3710      	adds	r7, #16
 8006066:	46bd      	mov	sp, r7
 8006068:	bd80      	pop	{r7, pc}

0800606a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800606a:	b580      	push	{r7, lr}
 800606c:	b09c      	sub	sp, #112	; 0x70
 800606e:	af00      	add	r7, sp, #0
 8006070:	60f8      	str	r0, [r7, #12]
 8006072:	60b9      	str	r1, [r7, #8]
 8006074:	603b      	str	r3, [r7, #0]
 8006076:	4613      	mov	r3, r2
 8006078:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800607a:	e0a7      	b.n	80061cc <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800607c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800607e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006082:	f000 80a3 	beq.w	80061cc <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006086:	f7fa ff6f 	bl	8000f68 <HAL_GetTick>
 800608a:	4602      	mov	r2, r0
 800608c:	683b      	ldr	r3, [r7, #0]
 800608e:	1ad3      	subs	r3, r2, r3
 8006090:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8006092:	429a      	cmp	r2, r3
 8006094:	d302      	bcc.n	800609c <UART_WaitOnFlagUntilTimeout+0x32>
 8006096:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006098:	2b00      	cmp	r3, #0
 800609a:	d13f      	bne.n	800611c <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060a2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80060a4:	e853 3f00 	ldrex	r3, [r3]
 80060a8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80060aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80060ac:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80060b0:	667b      	str	r3, [r7, #100]	; 0x64
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	461a      	mov	r2, r3
 80060b8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80060ba:	65fb      	str	r3, [r7, #92]	; 0x5c
 80060bc:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060be:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80060c0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80060c2:	e841 2300 	strex	r3, r2, [r1]
 80060c6:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80060c8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d1e6      	bne.n	800609c <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	3308      	adds	r3, #8
 80060d4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80060d8:	e853 3f00 	ldrex	r3, [r3]
 80060dc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80060de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060e0:	f023 0301 	bic.w	r3, r3, #1
 80060e4:	663b      	str	r3, [r7, #96]	; 0x60
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	3308      	adds	r3, #8
 80060ec:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80060ee:	64ba      	str	r2, [r7, #72]	; 0x48
 80060f0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060f2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80060f4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80060f6:	e841 2300 	strex	r3, r2, [r1]
 80060fa:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80060fc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d1e5      	bne.n	80060ce <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	2220      	movs	r2, #32
 8006106:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	2220      	movs	r2, #32
 800610c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	2200      	movs	r2, #0
 8006114:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8006118:	2303      	movs	r3, #3
 800611a:	e068      	b.n	80061ee <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	f003 0304 	and.w	r3, r3, #4
 8006126:	2b00      	cmp	r3, #0
 8006128:	d050      	beq.n	80061cc <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	69db      	ldr	r3, [r3, #28]
 8006130:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006134:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006138:	d148      	bne.n	80061cc <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006142:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800614a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800614c:	e853 3f00 	ldrex	r3, [r3]
 8006150:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006152:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006154:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006158:	66fb      	str	r3, [r7, #108]	; 0x6c
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	461a      	mov	r2, r3
 8006160:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006162:	637b      	str	r3, [r7, #52]	; 0x34
 8006164:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006166:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006168:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800616a:	e841 2300 	strex	r3, r2, [r1]
 800616e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006170:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006172:	2b00      	cmp	r3, #0
 8006174:	d1e6      	bne.n	8006144 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	3308      	adds	r3, #8
 800617c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800617e:	697b      	ldr	r3, [r7, #20]
 8006180:	e853 3f00 	ldrex	r3, [r3]
 8006184:	613b      	str	r3, [r7, #16]
   return(result);
 8006186:	693b      	ldr	r3, [r7, #16]
 8006188:	f023 0301 	bic.w	r3, r3, #1
 800618c:	66bb      	str	r3, [r7, #104]	; 0x68
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	3308      	adds	r3, #8
 8006194:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006196:	623a      	str	r2, [r7, #32]
 8006198:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800619a:	69f9      	ldr	r1, [r7, #28]
 800619c:	6a3a      	ldr	r2, [r7, #32]
 800619e:	e841 2300 	strex	r3, r2, [r1]
 80061a2:	61bb      	str	r3, [r7, #24]
   return(result);
 80061a4:	69bb      	ldr	r3, [r7, #24]
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d1e5      	bne.n	8006176 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	2220      	movs	r2, #32
 80061ae:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	2220      	movs	r2, #32
 80061b4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	2220      	movs	r2, #32
 80061bc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	2200      	movs	r2, #0
 80061c4:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 80061c8:	2303      	movs	r3, #3
 80061ca:	e010      	b.n	80061ee <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	69da      	ldr	r2, [r3, #28]
 80061d2:	68bb      	ldr	r3, [r7, #8]
 80061d4:	4013      	ands	r3, r2
 80061d6:	68ba      	ldr	r2, [r7, #8]
 80061d8:	429a      	cmp	r2, r3
 80061da:	bf0c      	ite	eq
 80061dc:	2301      	moveq	r3, #1
 80061de:	2300      	movne	r3, #0
 80061e0:	b2db      	uxtb	r3, r3
 80061e2:	461a      	mov	r2, r3
 80061e4:	79fb      	ldrb	r3, [r7, #7]
 80061e6:	429a      	cmp	r2, r3
 80061e8:	f43f af48 	beq.w	800607c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80061ec:	2300      	movs	r3, #0
}
 80061ee:	4618      	mov	r0, r3
 80061f0:	3770      	adds	r7, #112	; 0x70
 80061f2:	46bd      	mov	sp, r7
 80061f4:	bd80      	pop	{r7, pc}

080061f6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80061f6:	b480      	push	{r7}
 80061f8:	b095      	sub	sp, #84	; 0x54
 80061fa:	af00      	add	r7, sp, #0
 80061fc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006204:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006206:	e853 3f00 	ldrex	r3, [r3]
 800620a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800620c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800620e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006212:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	461a      	mov	r2, r3
 800621a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800621c:	643b      	str	r3, [r7, #64]	; 0x40
 800621e:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006220:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006222:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006224:	e841 2300 	strex	r3, r2, [r1]
 8006228:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800622a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800622c:	2b00      	cmp	r3, #0
 800622e:	d1e6      	bne.n	80061fe <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	3308      	adds	r3, #8
 8006236:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006238:	6a3b      	ldr	r3, [r7, #32]
 800623a:	e853 3f00 	ldrex	r3, [r3]
 800623e:	61fb      	str	r3, [r7, #28]
   return(result);
 8006240:	69fb      	ldr	r3, [r7, #28]
 8006242:	f023 0301 	bic.w	r3, r3, #1
 8006246:	64bb      	str	r3, [r7, #72]	; 0x48
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	3308      	adds	r3, #8
 800624e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006250:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006252:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006254:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006256:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006258:	e841 2300 	strex	r3, r2, [r1]
 800625c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800625e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006260:	2b00      	cmp	r3, #0
 8006262:	d1e5      	bne.n	8006230 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006268:	2b01      	cmp	r3, #1
 800626a:	d118      	bne.n	800629e <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	e853 3f00 	ldrex	r3, [r3]
 8006278:	60bb      	str	r3, [r7, #8]
   return(result);
 800627a:	68bb      	ldr	r3, [r7, #8]
 800627c:	f023 0310 	bic.w	r3, r3, #16
 8006280:	647b      	str	r3, [r7, #68]	; 0x44
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	461a      	mov	r2, r3
 8006288:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800628a:	61bb      	str	r3, [r7, #24]
 800628c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800628e:	6979      	ldr	r1, [r7, #20]
 8006290:	69ba      	ldr	r2, [r7, #24]
 8006292:	e841 2300 	strex	r3, r2, [r1]
 8006296:	613b      	str	r3, [r7, #16]
   return(result);
 8006298:	693b      	ldr	r3, [r7, #16]
 800629a:	2b00      	cmp	r3, #0
 800629c:	d1e6      	bne.n	800626c <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	2220      	movs	r2, #32
 80062a2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	2200      	movs	r2, #0
 80062aa:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	2200      	movs	r2, #0
 80062b0:	669a      	str	r2, [r3, #104]	; 0x68
}
 80062b2:	bf00      	nop
 80062b4:	3754      	adds	r7, #84	; 0x54
 80062b6:	46bd      	mov	sp, r7
 80062b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062bc:	4770      	bx	lr

080062be <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80062be:	b580      	push	{r7, lr}
 80062c0:	b084      	sub	sp, #16
 80062c2:	af00      	add	r7, sp, #0
 80062c4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062ca:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	2200      	movs	r2, #0
 80062d0:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	2200      	movs	r2, #0
 80062d8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80062dc:	68f8      	ldr	r0, [r7, #12]
 80062de:	f7ff fa29 	bl	8005734 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80062e2:	bf00      	nop
 80062e4:	3710      	adds	r7, #16
 80062e6:	46bd      	mov	sp, r7
 80062e8:	bd80      	pop	{r7, pc}

080062ea <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80062ea:	b580      	push	{r7, lr}
 80062ec:	b088      	sub	sp, #32
 80062ee:	af00      	add	r7, sp, #0
 80062f0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	e853 3f00 	ldrex	r3, [r3]
 80062fe:	60bb      	str	r3, [r7, #8]
   return(result);
 8006300:	68bb      	ldr	r3, [r7, #8]
 8006302:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006306:	61fb      	str	r3, [r7, #28]
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	461a      	mov	r2, r3
 800630e:	69fb      	ldr	r3, [r7, #28]
 8006310:	61bb      	str	r3, [r7, #24]
 8006312:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006314:	6979      	ldr	r1, [r7, #20]
 8006316:	69ba      	ldr	r2, [r7, #24]
 8006318:	e841 2300 	strex	r3, r2, [r1]
 800631c:	613b      	str	r3, [r7, #16]
   return(result);
 800631e:	693b      	ldr	r3, [r7, #16]
 8006320:	2b00      	cmp	r3, #0
 8006322:	d1e6      	bne.n	80062f2 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	2220      	movs	r2, #32
 8006328:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	2200      	movs	r2, #0
 800632e:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006330:	6878      	ldr	r0, [r7, #4]
 8006332:	f7ff f9f5 	bl	8005720 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006336:	bf00      	nop
 8006338:	3720      	adds	r7, #32
 800633a:	46bd      	mov	sp, r7
 800633c:	bd80      	pop	{r7, pc}

0800633e <VL53L0X_GetOffsetCalibrationDataMicroMeter>:
	return Status;
}

VL53L0X_Error VL53L0X_GetOffsetCalibrationDataMicroMeter(VL53L0X_DEV Dev,
	int32_t *pOffsetCalibrationDataMicroMeter)
{
 800633e:	b580      	push	{r7, lr}
 8006340:	b084      	sub	sp, #16
 8006342:	af00      	add	r7, sp, #0
 8006344:	6078      	str	r0, [r7, #4]
 8006346:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006348:	2300      	movs	r3, #0
 800634a:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_offset_calibration_data_micro_meter(Dev,
 800634c:	6839      	ldr	r1, [r7, #0]
 800634e:	6878      	ldr	r0, [r7, #4]
 8006350:	f001 fcb1 	bl	8007cb6 <VL53L0X_get_offset_calibration_data_micro_meter>
 8006354:	4603      	mov	r3, r0
 8006356:	73fb      	strb	r3, [r7, #15]
		pOffsetCalibrationDataMicroMeter);

	LOG_FUNCTION_END(Status);
	return Status;
 8006358:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800635c:	4618      	mov	r0, r3
 800635e:	3710      	adds	r7, #16
 8006360:	46bd      	mov	sp, r7
 8006362:	bd80      	pop	{r7, pc}

08006364 <VL53L0X_DataInit>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_DataInit(VL53L0X_DEV Dev)
{
 8006364:	b5b0      	push	{r4, r5, r7, lr}
 8006366:	b096      	sub	sp, #88	; 0x58
 8006368:	af00      	add	r7, sp, #0
 800636a:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800636c:	2300      	movs	r3, #0
 800636e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		0xFE,
		0x01);
#endif

	/* Set I2C standard mode */
	if (Status == VL53L0X_ERROR_NONE)
 8006372:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8006376:	2b00      	cmp	r3, #0
 8006378:	d107      	bne.n	800638a <VL53L0X_DataInit+0x26>
		Status = VL53L0X_WrByte(Dev, 0x88, 0x00);
 800637a:	2200      	movs	r2, #0
 800637c:	2188      	movs	r1, #136	; 0x88
 800637e:	6878      	ldr	r0, [r7, #4]
 8006380:	f004 feaa 	bl	800b0d8 <VL53L0X_WrByte>
 8006384:	4603      	mov	r3, r0
 8006386:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, ReadDataFromDeviceDone, 0);
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	2200      	movs	r2, #0
 800638e:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
	if (Status == VL53L0X_ERROR_NONE)
		Status = VL53L0X_apply_offset_adjustment(Dev);
#endif

	/* Default value is 1000 for Linearity Corrective Gain */
	PALDevDataSet(Dev, LinearityCorrectiveGain, 1000);
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006398:	f8a3 2152 	strh.w	r2, [r3, #338]	; 0x152

	/* Dmax default Parameter */
	PALDevDataSet(Dev, DmaxCalRangeMilliMeter, 400);
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80063a2:	f8a3 2154 	strh.w	r2, [r3, #340]	; 0x154
	PALDevDataSet(Dev, DmaxCalSignalRateRtnMegaCps,
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	4a9e      	ldr	r2, [pc, #632]	; (8006624 <VL53L0X_DataInit+0x2c0>)
 80063aa:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
		(FixPoint1616_t)((0x00016B85))); /* 1.42 No Cover Glass*/

	/* Set Default static parameters
	 *set first temporary values 9.44MHz * 65536 = 618660 */
	VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, OscFrequencyMHz, 618660);
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	4a9d      	ldr	r2, [pc, #628]	; (8006628 <VL53L0X_DataInit+0x2c4>)
 80063b2:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4

	/* Set Default XTalkCompensationRateMegaCps to 0  */
	VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationRateMegaCps, 0);
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	2200      	movs	r2, #0
 80063ba:	621a      	str	r2, [r3, #32]

	/* Get default parameters */
	Status = VL53L0X_GetDeviceParameters(Dev, &CurrentParameters);
 80063bc:	f107 0310 	add.w	r3, r7, #16
 80063c0:	4619      	mov	r1, r3
 80063c2:	6878      	ldr	r0, [r7, #4]
 80063c4:	f000 fac2 	bl	800694c <VL53L0X_GetDeviceParameters>
 80063c8:	4603      	mov	r3, r0
 80063ca:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (Status == VL53L0X_ERROR_NONE) {
 80063ce:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d112      	bne.n	80063fc <VL53L0X_DataInit+0x98>
		/* initialize PAL values */
		CurrentParameters.DeviceMode = VL53L0X_DEVICEMODE_SINGLE_RANGING;
 80063d6:	2300      	movs	r3, #0
 80063d8:	743b      	strb	r3, [r7, #16]
		CurrentParameters.HistogramMode = VL53L0X_HISTOGRAMMODE_DISABLED;
 80063da:	2300      	movs	r3, #0
 80063dc:	747b      	strb	r3, [r7, #17]
		PALDevDataSet(Dev, CurrentParameters, CurrentParameters);
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	f103 0410 	add.w	r4, r3, #16
 80063e4:	f107 0510 	add.w	r5, r7, #16
 80063e8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80063ea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80063ec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80063ee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80063f0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80063f2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80063f4:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80063f8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	}

	/* Sigma estimator variable */
	PALDevDataSet(Dev, SigmaEstRefArray, 100);
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	2264      	movs	r2, #100	; 0x64
 8006400:	f8a3 2134 	strh.w	r2, [r3, #308]	; 0x134
	PALDevDataSet(Dev, SigmaEstEffPulseWidth, 900);
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	f44f 7261 	mov.w	r2, #900	; 0x384
 800640a:	f8a3 2136 	strh.w	r2, [r3, #310]	; 0x136
	PALDevDataSet(Dev, SigmaEstEffAmbWidth, 500);
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8006414:	f8a3 2138 	strh.w	r2, [r3, #312]	; 0x138
	PALDevDataSet(Dev, targetRefRate, 0x0A00); /* 20 MCPS in 9:7 format */
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 800641e:	f8a3 213c 	strh.w	r2, [r3, #316]	; 0x13c

	/* Use internal default settings */
	PALDevDataSet(Dev, UseInternalTuningSettings, 1);
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	2201      	movs	r2, #1
 8006426:	f883 2150 	strb.w	r2, [r3, #336]	; 0x150

	Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 800642a:	2201      	movs	r2, #1
 800642c:	2180      	movs	r1, #128	; 0x80
 800642e:	6878      	ldr	r0, [r7, #4]
 8006430:	f004 fe52 	bl	800b0d8 <VL53L0X_WrByte>
 8006434:	4603      	mov	r3, r0
 8006436:	461a      	mov	r2, r3
 8006438:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800643c:	4313      	orrs	r3, r2
 800643e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8006442:	2201      	movs	r2, #1
 8006444:	21ff      	movs	r1, #255	; 0xff
 8006446:	6878      	ldr	r0, [r7, #4]
 8006448:	f004 fe46 	bl	800b0d8 <VL53L0X_WrByte>
 800644c:	4603      	mov	r3, r0
 800644e:	461a      	mov	r2, r3
 8006450:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006454:	4313      	orrs	r3, r2
 8006456:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 800645a:	2200      	movs	r2, #0
 800645c:	2100      	movs	r1, #0
 800645e:	6878      	ldr	r0, [r7, #4]
 8006460:	f004 fe3a 	bl	800b0d8 <VL53L0X_WrByte>
 8006464:	4603      	mov	r3, r0
 8006466:	461a      	mov	r2, r3
 8006468:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800646c:	4313      	orrs	r3, r2
 800646e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_RdByte(Dev, 0x91, &StopVariable);
 8006472:	f107 030f 	add.w	r3, r7, #15
 8006476:	461a      	mov	r2, r3
 8006478:	2191      	movs	r1, #145	; 0x91
 800647a:	6878      	ldr	r0, [r7, #4]
 800647c:	f004 feae 	bl	800b1dc <VL53L0X_RdByte>
 8006480:	4603      	mov	r3, r0
 8006482:	461a      	mov	r2, r3
 8006484:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006488:	4313      	orrs	r3, r2
 800648a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	PALDevDataSet(Dev, StopVariable, StopVariable);
 800648e:	7bfa      	ldrb	r2, [r7, #15]
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	f883 213a 	strb.w	r2, [r3, #314]	; 0x13a
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 8006496:	2201      	movs	r2, #1
 8006498:	2100      	movs	r1, #0
 800649a:	6878      	ldr	r0, [r7, #4]
 800649c:	f004 fe1c 	bl	800b0d8 <VL53L0X_WrByte>
 80064a0:	4603      	mov	r3, r0
 80064a2:	461a      	mov	r2, r3
 80064a4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80064a8:	4313      	orrs	r3, r2
 80064aa:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 80064ae:	2200      	movs	r2, #0
 80064b0:	21ff      	movs	r1, #255	; 0xff
 80064b2:	6878      	ldr	r0, [r7, #4]
 80064b4:	f004 fe10 	bl	800b0d8 <VL53L0X_WrByte>
 80064b8:	4603      	mov	r3, r0
 80064ba:	461a      	mov	r2, r3
 80064bc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80064c0:	4313      	orrs	r3, r2
 80064c2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 80064c6:	2200      	movs	r2, #0
 80064c8:	2180      	movs	r1, #128	; 0x80
 80064ca:	6878      	ldr	r0, [r7, #4]
 80064cc:	f004 fe04 	bl	800b0d8 <VL53L0X_WrByte>
 80064d0:	4603      	mov	r3, r0
 80064d2:	461a      	mov	r2, r3
 80064d4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80064d8:	4313      	orrs	r3, r2
 80064da:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	/* Enable all check */
	for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 80064de:	2300      	movs	r3, #0
 80064e0:	653b      	str	r3, [r7, #80]	; 0x50
 80064e2:	e014      	b.n	800650e <VL53L0X_DataInit+0x1aa>
		if (Status == VL53L0X_ERROR_NONE)
 80064e4:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d114      	bne.n	8006516 <VL53L0X_DataInit+0x1b2>
			Status |= VL53L0X_SetLimitCheckEnable(Dev, i, 1);
 80064ec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80064ee:	b29b      	uxth	r3, r3
 80064f0:	2201      	movs	r2, #1
 80064f2:	4619      	mov	r1, r3
 80064f4:	6878      	ldr	r0, [r7, #4]
 80064f6:	f000 fd35 	bl	8006f64 <VL53L0X_SetLimitCheckEnable>
 80064fa:	4603      	mov	r3, r0
 80064fc:	461a      	mov	r2, r3
 80064fe:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006502:	4313      	orrs	r3, r2
 8006504:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8006508:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800650a:	3301      	adds	r3, #1
 800650c:	653b      	str	r3, [r7, #80]	; 0x50
 800650e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006510:	2b05      	cmp	r3, #5
 8006512:	dde7      	ble.n	80064e4 <VL53L0X_DataInit+0x180>
 8006514:	e000      	b.n	8006518 <VL53L0X_DataInit+0x1b4>
		else
			break;
 8006516:	bf00      	nop

	}

	/* Disable the following checks */
	if (Status == VL53L0X_ERROR_NONE)
 8006518:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800651c:	2b00      	cmp	r3, #0
 800651e:	d107      	bne.n	8006530 <VL53L0X_DataInit+0x1cc>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 8006520:	2200      	movs	r2, #0
 8006522:	2102      	movs	r1, #2
 8006524:	6878      	ldr	r0, [r7, #4]
 8006526:	f000 fd1d 	bl	8006f64 <VL53L0X_SetLimitCheckEnable>
 800652a:	4603      	mov	r3, r0
 800652c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, 0);

	if (Status == VL53L0X_ERROR_NONE)
 8006530:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8006534:	2b00      	cmp	r3, #0
 8006536:	d107      	bne.n	8006548 <VL53L0X_DataInit+0x1e4>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 8006538:	2200      	movs	r2, #0
 800653a:	2103      	movs	r1, #3
 800653c:	6878      	ldr	r0, [r7, #4]
 800653e:	f000 fd11 	bl	8006f64 <VL53L0X_SetLimitCheckEnable>
 8006542:	4603      	mov	r3, r0
 8006544:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD, 0);

	if (Status == VL53L0X_ERROR_NONE)
 8006548:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800654c:	2b00      	cmp	r3, #0
 800654e:	d107      	bne.n	8006560 <VL53L0X_DataInit+0x1fc>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 8006550:	2200      	movs	r2, #0
 8006552:	2104      	movs	r1, #4
 8006554:	6878      	ldr	r0, [r7, #4]
 8006556:	f000 fd05 	bl	8006f64 <VL53L0X_SetLimitCheckEnable>
 800655a:	4603      	mov	r3, r0
 800655c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC, 0);

	if (Status == VL53L0X_ERROR_NONE)
 8006560:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8006564:	2b00      	cmp	r3, #0
 8006566:	d107      	bne.n	8006578 <VL53L0X_DataInit+0x214>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 8006568:	2200      	movs	r2, #0
 800656a:	2105      	movs	r1, #5
 800656c:	6878      	ldr	r0, [r7, #4]
 800656e:	f000 fcf9 	bl	8006f64 <VL53L0X_SetLimitCheckEnable>
 8006572:	4603      	mov	r3, r0
 8006574:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE, 0);

	/* Limit default values */
	if (Status == VL53L0X_ERROR_NONE) {
 8006578:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800657c:	2b00      	cmp	r3, #0
 800657e:	d108      	bne.n	8006592 <VL53L0X_DataInit+0x22e>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 8006580:	f44f 1290 	mov.w	r2, #1179648	; 0x120000
 8006584:	2100      	movs	r1, #0
 8006586:	6878      	ldr	r0, [r7, #4]
 8006588:	f000 fd9c 	bl	80070c4 <VL53L0X_SetLimitCheckValue>
 800658c:	4603      	mov	r3, r0
 800658e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				(FixPoint1616_t)(18 * 65536));
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8006592:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8006596:	2b00      	cmp	r3, #0
 8006598:	d108      	bne.n	80065ac <VL53L0X_DataInit+0x248>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 800659a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800659e:	2101      	movs	r1, #1
 80065a0:	6878      	ldr	r0, [r7, #4]
 80065a2:	f000 fd8f 	bl	80070c4 <VL53L0X_SetLimitCheckValue>
 80065a6:	4603      	mov	r3, r0
 80065a8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
				(FixPoint1616_t)(25 * 65536 / 100));
				/* 0.25 * 65536 */
	}

	if (Status == VL53L0X_ERROR_NONE) {
 80065ac:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d108      	bne.n	80065c6 <VL53L0X_DataInit+0x262>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 80065b4:	f44f 120c 	mov.w	r2, #2293760	; 0x230000
 80065b8:	2102      	movs	r1, #2
 80065ba:	6878      	ldr	r0, [r7, #4]
 80065bc:	f000 fd82 	bl	80070c4 <VL53L0X_SetLimitCheckValue>
 80065c0:	4603      	mov	r3, r0
 80065c2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				(FixPoint1616_t)(35 * 65536));
	}

	if (Status == VL53L0X_ERROR_NONE) {
 80065c6:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d107      	bne.n	80065de <VL53L0X_DataInit+0x27a>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 80065ce:	2200      	movs	r2, #0
 80065d0:	2103      	movs	r1, #3
 80065d2:	6878      	ldr	r0, [r7, #4]
 80065d4:	f000 fd76 	bl	80070c4 <VL53L0X_SetLimitCheckValue>
 80065d8:	4603      	mov	r3, r0
 80065da:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				(FixPoint1616_t)(0 * 65536));
	}

	if (Status == VL53L0X_ERROR_NONE) {
 80065de:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d10f      	bne.n	8006606 <VL53L0X_DataInit+0x2a2>

		PALDevDataSet(Dev, SequenceConfig, 0xFF);
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	22ff      	movs	r2, #255	; 0xff
 80065ea:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 80065ee:	22ff      	movs	r2, #255	; 0xff
 80065f0:	2101      	movs	r1, #1
 80065f2:	6878      	ldr	r0, [r7, #4]
 80065f4:	f004 fd70 	bl	800b0d8 <VL53L0X_WrByte>
 80065f8:	4603      	mov	r3, r0
 80065fa:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			0xFF);

		/* Set PAL state to tell that we are waiting for call to
		 * VL53L0X_StaticInit */
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_WAIT_STATICINIT);
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	2201      	movs	r2, #1
 8006602:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
	}

	if (Status == VL53L0X_ERROR_NONE)
 8006606:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800660a:	2b00      	cmp	r3, #0
 800660c:	d103      	bne.n	8006616 <VL53L0X_DataInit+0x2b2>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 0);
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	2200      	movs	r2, #0
 8006612:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115


	LOG_FUNCTION_END(Status);
	return Status;
 8006616:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
}
 800661a:	4618      	mov	r0, r3
 800661c:	3758      	adds	r7, #88	; 0x58
 800661e:	46bd      	mov	sp, r7
 8006620:	bdb0      	pop	{r4, r5, r7, pc}
 8006622:	bf00      	nop
 8006624:	00016b85 	.word	0x00016b85
 8006628:	000970a4 	.word	0x000970a4

0800662c <VL53L0X_StaticInit>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_StaticInit(VL53L0X_DEV Dev)
{
 800662c:	b5b0      	push	{r4, r5, r7, lr}
 800662e:	b09e      	sub	sp, #120	; 0x78
 8006630:	af02      	add	r7, sp, #8
 8006632:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006634:	2300      	movs	r3, #0
 8006636:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	VL53L0X_DeviceParameters_t CurrentParameters = {0};
 800663a:	f107 031c 	add.w	r3, r7, #28
 800663e:	2240      	movs	r2, #64	; 0x40
 8006640:	2100      	movs	r1, #0
 8006642:	4618      	mov	r0, r3
 8006644:	f004 feb0 	bl	800b3a8 <memset>
	uint8_t *pTuningSettingBuffer;
	uint16_t tempword = 0;
 8006648:	2300      	movs	r3, #0
 800664a:	837b      	strh	r3, [r7, #26]
	uint8_t tempbyte = 0;
 800664c:	2300      	movs	r3, #0
 800664e:	767b      	strb	r3, [r7, #25]
	uint8_t UseInternalTuningSettings = 0;
 8006650:	2300      	movs	r3, #0
 8006652:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	uint32_t count = 0;
 8006656:	2300      	movs	r3, #0
 8006658:	663b      	str	r3, [r7, #96]	; 0x60
	uint8_t isApertureSpads = 0;
 800665a:	2300      	movs	r3, #0
 800665c:	763b      	strb	r3, [r7, #24]
	uint32_t refSpadCount = 0;
 800665e:	2300      	movs	r3, #0
 8006660:	617b      	str	r3, [r7, #20]
	uint8_t ApertureSpads = 0;
 8006662:	2300      	movs	r3, #0
 8006664:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	uint8_t vcselPulsePeriodPCLK;
	uint32_t seqTimeoutMicroSecs;

	LOG_FUNCTION_START("");

	Status = VL53L0X_get_info_from_device(Dev, 1);
 8006668:	2101      	movs	r1, #1
 800666a:	6878      	ldr	r0, [r7, #4]
 800666c:	f002 fa79 	bl	8008b62 <VL53L0X_get_info_from_device>
 8006670:	4603      	mov	r3, r0
 8006672:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f

	/* set the ref spad from NVM */
	count	= (uint32_t)VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	f893 3113 	ldrb.w	r3, [r3, #275]	; 0x113
 800667c:	663b      	str	r3, [r7, #96]	; 0x60
		ReferenceSpadCount);
	ApertureSpads = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	f893 3114 	ldrb.w	r3, [r3, #276]	; 0x114
 8006684:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		ReferenceSpadType);

	/* NVM value invalid */
	if ((ApertureSpads > 1) ||
 8006688:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800668c:	2b01      	cmp	r3, #1
 800668e:	d80d      	bhi.n	80066ac <VL53L0X_StaticInit+0x80>
 8006690:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006694:	2b01      	cmp	r3, #1
 8006696:	d102      	bne.n	800669e <VL53L0X_StaticInit+0x72>
		((ApertureSpads == 1) && (count > 32)) ||
 8006698:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800669a:	2b20      	cmp	r3, #32
 800669c:	d806      	bhi.n	80066ac <VL53L0X_StaticInit+0x80>
 800669e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d10e      	bne.n	80066c4 <VL53L0X_StaticInit+0x98>
		((ApertureSpads == 0) && (count > 12)))
 80066a6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80066a8:	2b0c      	cmp	r3, #12
 80066aa:	d90b      	bls.n	80066c4 <VL53L0X_StaticInit+0x98>
		Status = VL53L0X_perform_ref_spad_management(Dev, &refSpadCount,
 80066ac:	f107 0218 	add.w	r2, r7, #24
 80066b0:	f107 0314 	add.w	r3, r7, #20
 80066b4:	4619      	mov	r1, r3
 80066b6:	6878      	ldr	r0, [r7, #4]
 80066b8:	f001 fcf8 	bl	80080ac <VL53L0X_perform_ref_spad_management>
 80066bc:	4603      	mov	r3, r0
 80066be:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 80066c2:	e009      	b.n	80066d8 <VL53L0X_StaticInit+0xac>
			&isApertureSpads);
	else
		Status = VL53L0X_set_reference_spads(Dev, count, ApertureSpads);
 80066c4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80066c8:	461a      	mov	r2, r3
 80066ca:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80066cc:	6878      	ldr	r0, [r7, #4]
 80066ce:	f001 fef9 	bl	80084c4 <VL53L0X_set_reference_spads>
 80066d2:	4603      	mov	r3, r0
 80066d4:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f


	/* Initialize tuning settings buffer to prevent compiler warning. */
	pTuningSettingBuffer = DefaultTuningSettings;
 80066d8:	4b94      	ldr	r3, [pc, #592]	; (800692c <VL53L0X_StaticInit+0x300>)
 80066da:	66bb      	str	r3, [r7, #104]	; 0x68

	if (Status == VL53L0X_ERROR_NONE) {
 80066dc:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d10f      	bne.n	8006704 <VL53L0X_StaticInit+0xd8>
		UseInternalTuningSettings = PALDevDataGet(Dev,
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	f893 3150 	ldrb.w	r3, [r3, #336]	; 0x150
 80066ea:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			UseInternalTuningSettings);

		if (UseInternalTuningSettings == 0)
 80066ee:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d104      	bne.n	8006700 <VL53L0X_StaticInit+0xd4>
			pTuningSettingBuffer = PALDevDataGet(Dev,
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 80066fc:	66bb      	str	r3, [r7, #104]	; 0x68
 80066fe:	e001      	b.n	8006704 <VL53L0X_StaticInit+0xd8>
				pTuningSettingsPointer);
		else
			pTuningSettingBuffer = DefaultTuningSettings;
 8006700:	4b8a      	ldr	r3, [pc, #552]	; (800692c <VL53L0X_StaticInit+0x300>)
 8006702:	66bb      	str	r3, [r7, #104]	; 0x68

	}

	if (Status == VL53L0X_ERROR_NONE)
 8006704:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8006708:	2b00      	cmp	r3, #0
 800670a:	d106      	bne.n	800671a <VL53L0X_StaticInit+0xee>
		Status = VL53L0X_load_tuning_settings(Dev, pTuningSettingBuffer);
 800670c:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800670e:	6878      	ldr	r0, [r7, #4]
 8006710:	f003 fdcc 	bl	800a2ac <VL53L0X_load_tuning_settings>
 8006714:	4603      	mov	r3, r0
 8006716:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f


	/* Set interrupt config to new sample ready */
	if (Status == VL53L0X_ERROR_NONE) {
 800671a:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800671e:	2b00      	cmp	r3, #0
 8006720:	d10a      	bne.n	8006738 <VL53L0X_StaticInit+0x10c>
		Status = VL53L0X_SetGpioConfig(Dev, 0, 0,
 8006722:	2300      	movs	r3, #0
 8006724:	9300      	str	r3, [sp, #0]
 8006726:	2304      	movs	r3, #4
 8006728:	2200      	movs	r2, #0
 800672a:	2100      	movs	r1, #0
 800672c:	6878      	ldr	r0, [r7, #4]
 800672e:	f001 f8f1 	bl	8007914 <VL53L0X_SetGpioConfig>
 8006732:	4603      	mov	r3, r0
 8006734:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY,
		VL53L0X_INTERRUPTPOLARITY_LOW);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8006738:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800673c:	2b00      	cmp	r3, #0
 800673e:	d121      	bne.n	8006784 <VL53L0X_StaticInit+0x158>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8006740:	2201      	movs	r2, #1
 8006742:	21ff      	movs	r1, #255	; 0xff
 8006744:	6878      	ldr	r0, [r7, #4]
 8006746:	f004 fcc7 	bl	800b0d8 <VL53L0X_WrByte>
 800674a:	4603      	mov	r3, r0
 800674c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		Status |= VL53L0X_RdWord(Dev, 0x84, &tempword);
 8006750:	f107 031a 	add.w	r3, r7, #26
 8006754:	461a      	mov	r2, r3
 8006756:	2184      	movs	r1, #132	; 0x84
 8006758:	6878      	ldr	r0, [r7, #4]
 800675a:	f004 fd69 	bl	800b230 <VL53L0X_RdWord>
 800675e:	4603      	mov	r3, r0
 8006760:	461a      	mov	r2, r3
 8006762:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8006766:	4313      	orrs	r3, r2
 8006768:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800676c:	2200      	movs	r2, #0
 800676e:	21ff      	movs	r1, #255	; 0xff
 8006770:	6878      	ldr	r0, [r7, #4]
 8006772:	f004 fcb1 	bl	800b0d8 <VL53L0X_WrByte>
 8006776:	4603      	mov	r3, r0
 8006778:	461a      	mov	r2, r3
 800677a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800677e:	4313      	orrs	r3, r2
 8006780:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8006784:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8006788:	2b00      	cmp	r3, #0
 800678a:	d105      	bne.n	8006798 <VL53L0X_StaticInit+0x16c>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, OscFrequencyMHz,
 800678c:	8b7b      	ldrh	r3, [r7, #26]
 800678e:	011b      	lsls	r3, r3, #4
 8006790:	461a      	mov	r2, r3
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
			VL53L0X_FIXPOINT412TOFIXPOINT1616(tempword));
	}

	/* After static init, some device parameters may be changed,
	 * so update them */
	if (Status == VL53L0X_ERROR_NONE)
 8006798:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800679c:	2b00      	cmp	r3, #0
 800679e:	d108      	bne.n	80067b2 <VL53L0X_StaticInit+0x186>
		Status = VL53L0X_GetDeviceParameters(Dev, &CurrentParameters);
 80067a0:	f107 031c 	add.w	r3, r7, #28
 80067a4:	4619      	mov	r1, r3
 80067a6:	6878      	ldr	r0, [r7, #4]
 80067a8:	f000 f8d0 	bl	800694c <VL53L0X_GetDeviceParameters>
 80067ac:	4603      	mov	r3, r0
 80067ae:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f


	if (Status == VL53L0X_ERROR_NONE) {
 80067b2:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d110      	bne.n	80067dc <VL53L0X_StaticInit+0x1b0>
		Status = VL53L0X_GetFractionEnable(Dev, &tempbyte);
 80067ba:	f107 0319 	add.w	r3, r7, #25
 80067be:	4619      	mov	r1, r3
 80067c0:	6878      	ldr	r0, [r7, #4]
 80067c2:	f000 f992 	bl	8006aea <VL53L0X_GetFractionEnable>
 80067c6:	4603      	mov	r3, r0
 80067c8:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		if (Status == VL53L0X_ERROR_NONE)
 80067cc:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	d103      	bne.n	80067dc <VL53L0X_StaticInit+0x1b0>
			PALDevDataSet(Dev, RangeFractionalEnable, tempbyte);
 80067d4:	7e7a      	ldrb	r2, [r7, #25]
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	f883 2131 	strb.w	r2, [r3, #305]	; 0x131

	}

	if (Status == VL53L0X_ERROR_NONE)
 80067dc:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d10e      	bne.n	8006802 <VL53L0X_StaticInit+0x1d6>
		PALDevDataSet(Dev, CurrentParameters, CurrentParameters);
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	f103 0410 	add.w	r4, r3, #16
 80067ea:	f107 051c 	add.w	r5, r7, #28
 80067ee:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80067f0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80067f2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80067f4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80067f6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80067f8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80067fa:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80067fe:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}


	/* read the sequence config and save it */
	if (Status == VL53L0X_ERROR_NONE) {
 8006802:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8006806:	2b00      	cmp	r3, #0
 8006808:	d111      	bne.n	800682e <VL53L0X_StaticInit+0x202>
		Status = VL53L0X_RdByte(Dev,
 800680a:	f107 0319 	add.w	r3, r7, #25
 800680e:	461a      	mov	r2, r3
 8006810:	2101      	movs	r1, #1
 8006812:	6878      	ldr	r0, [r7, #4]
 8006814:	f004 fce2 	bl	800b1dc <VL53L0X_RdByte>
 8006818:	4603      	mov	r3, r0
 800681a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, &tempbyte);
		if (Status == VL53L0X_ERROR_NONE)
 800681e:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8006822:	2b00      	cmp	r3, #0
 8006824:	d103      	bne.n	800682e <VL53L0X_StaticInit+0x202>
			PALDevDataSet(Dev, SequenceConfig, tempbyte);
 8006826:	7e7a      	ldrb	r2, [r7, #25]
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	/* Disable MSRC and TCC by default */
	if (Status == VL53L0X_ERROR_NONE)
 800682e:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8006832:	2b00      	cmp	r3, #0
 8006834:	d107      	bne.n	8006846 <VL53L0X_StaticInit+0x21a>
		Status = VL53L0X_SetSequenceStepEnable(Dev,
 8006836:	2200      	movs	r2, #0
 8006838:	2100      	movs	r1, #0
 800683a:	6878      	ldr	r0, [r7, #4]
 800683c:	f000 f9ca 	bl	8006bd4 <VL53L0X_SetSequenceStepEnable>
 8006840:	4603      	mov	r3, r0
 8006842:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
					VL53L0X_SEQUENCESTEP_TCC, 0);


	if (Status == VL53L0X_ERROR_NONE)
 8006846:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800684a:	2b00      	cmp	r3, #0
 800684c:	d107      	bne.n	800685e <VL53L0X_StaticInit+0x232>
		Status = VL53L0X_SetSequenceStepEnable(Dev,
 800684e:	2200      	movs	r2, #0
 8006850:	2102      	movs	r1, #2
 8006852:	6878      	ldr	r0, [r7, #4]
 8006854:	f000 f9be 	bl	8006bd4 <VL53L0X_SetSequenceStepEnable>
 8006858:	4603      	mov	r3, r0
 800685a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		VL53L0X_SEQUENCESTEP_MSRC, 0);


	/* Set PAL State to standby */
	if (Status == VL53L0X_ERROR_NONE)
 800685e:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8006862:	2b00      	cmp	r3, #0
 8006864:	d103      	bne.n	800686e <VL53L0X_StaticInit+0x242>
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_IDLE);
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	2203      	movs	r2, #3
 800686a:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132



	/* Store pre-range vcsel period */
	if (Status == VL53L0X_ERROR_NONE) {
 800686e:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8006872:	2b00      	cmp	r3, #0
 8006874:	d109      	bne.n	800688a <VL53L0X_StaticInit+0x25e>
		Status = VL53L0X_GetVcselPulsePeriod(
 8006876:	f107 0313 	add.w	r3, r7, #19
 800687a:	461a      	mov	r2, r3
 800687c:	2100      	movs	r1, #0
 800687e:	6878      	ldr	r0, [r7, #4]
 8006880:	f000 f990 	bl	8006ba4 <VL53L0X_GetVcselPulsePeriod>
 8006884:	4603      	mov	r3, r0
 8006886:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_VCSEL_PERIOD_PRE_RANGE,
			&vcselPulsePeriodPCLK);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800688a:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800688e:	2b00      	cmp	r3, #0
 8006890:	d103      	bne.n	800689a <VL53L0X_StaticInit+0x26e>
			VL53L0X_SETDEVICESPECIFICPARAMETER(
 8006892:	7cfa      	ldrb	r2, [r7, #19]
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	f883 20e8 	strb.w	r2, [r3, #232]	; 0xe8
				PreRangeVcselPulsePeriod,
				vcselPulsePeriodPCLK);
	}

	/* Store final-range vcsel period */
	if (Status == VL53L0X_ERROR_NONE) {
 800689a:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d109      	bne.n	80068b6 <VL53L0X_StaticInit+0x28a>
		Status = VL53L0X_GetVcselPulsePeriod(
 80068a2:	f107 0313 	add.w	r3, r7, #19
 80068a6:	461a      	mov	r2, r3
 80068a8:	2101      	movs	r1, #1
 80068aa:	6878      	ldr	r0, [r7, #4]
 80068ac:	f000 f97a 	bl	8006ba4 <VL53L0X_GetVcselPulsePeriod>
 80068b0:	4603      	mov	r3, r0
 80068b2:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
			&vcselPulsePeriodPCLK);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 80068b6:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d103      	bne.n	80068c6 <VL53L0X_StaticInit+0x29a>
			VL53L0X_SETDEVICESPECIFICPARAMETER(
 80068be:	7cfa      	ldrb	r2, [r7, #19]
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
				FinalRangeVcselPulsePeriod,
				vcselPulsePeriodPCLK);
	}

	/* Store pre-range timeout */
	if (Status == VL53L0X_ERROR_NONE) {
 80068c6:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d109      	bne.n	80068e2 <VL53L0X_StaticInit+0x2b6>
		Status = get_sequence_step_timeout(
 80068ce:	f107 030c 	add.w	r3, r7, #12
 80068d2:	461a      	mov	r2, r3
 80068d4:	2103      	movs	r1, #3
 80068d6:	6878      	ldr	r0, [r7, #4]
 80068d8:	f002 fec4 	bl	8009664 <get_sequence_step_timeout>
 80068dc:	4603      	mov	r3, r0
 80068de:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_SEQUENCESTEP_PRE_RANGE,
			&seqTimeoutMicroSecs);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 80068e2:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d103      	bne.n	80068f2 <VL53L0X_StaticInit+0x2c6>
		VL53L0X_SETDEVICESPECIFICPARAMETER(
 80068ea:	68fa      	ldr	r2, [r7, #12]
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
			PreRangeTimeoutMicroSecs,
			seqTimeoutMicroSecs);
	}

	/* Store final-range timeout */
	if (Status == VL53L0X_ERROR_NONE) {
 80068f2:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d109      	bne.n	800690e <VL53L0X_StaticInit+0x2e2>
		Status = get_sequence_step_timeout(
 80068fa:	f107 030c 	add.w	r3, r7, #12
 80068fe:	461a      	mov	r2, r3
 8006900:	2104      	movs	r1, #4
 8006902:	6878      	ldr	r0, [r7, #4]
 8006904:	f002 feae 	bl	8009664 <get_sequence_step_timeout>
 8006908:	4603      	mov	r3, r0
 800690a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_SEQUENCESTEP_FINAL_RANGE,
			&seqTimeoutMicroSecs);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800690e:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8006912:	2b00      	cmp	r3, #0
 8006914:	d103      	bne.n	800691e <VL53L0X_StaticInit+0x2f2>
		VL53L0X_SETDEVICESPECIFICPARAMETER(
 8006916:	68fa      	ldr	r2, [r7, #12]
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
			FinalRangeTimeoutMicroSecs,
			seqTimeoutMicroSecs);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800691e:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
}
 8006922:	4618      	mov	r0, r3
 8006924:	3770      	adds	r7, #112	; 0x70
 8006926:	46bd      	mov	sp, r7
 8006928:	bdb0      	pop	{r4, r5, r7, pc}
 800692a:	bf00      	nop
 800692c:	20000010 	.word	0x20000010

08006930 <VL53L0X_WaitDeviceBooted>:

VL53L0X_Error VL53L0X_WaitDeviceBooted(VL53L0X_DEV Dev)
{
 8006930:	b480      	push	{r7}
 8006932:	b085      	sub	sp, #20
 8006934:	af00      	add	r7, sp, #0
 8006936:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NOT_IMPLEMENTED;
 8006938:	239d      	movs	r3, #157	; 0x9d
 800693a:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	/* not implemented on VL53L0X */

	LOG_FUNCTION_END(Status);
	return Status;
 800693c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006940:	4618      	mov	r0, r3
 8006942:	3714      	adds	r7, #20
 8006944:	46bd      	mov	sp, r7
 8006946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800694a:	4770      	bx	lr

0800694c <VL53L0X_GetDeviceParameters>:
	return Status;
}

VL53L0X_Error VL53L0X_GetDeviceParameters(VL53L0X_DEV Dev,
	VL53L0X_DeviceParameters_t *pDeviceParameters)
{
 800694c:	b580      	push	{r7, lr}
 800694e:	b084      	sub	sp, #16
 8006950:	af00      	add	r7, sp, #0
 8006952:	6078      	str	r0, [r7, #4]
 8006954:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006956:	2300      	movs	r3, #0
 8006958:	73fb      	strb	r3, [r7, #15]
	int i;

	LOG_FUNCTION_START("");

	Status = VL53L0X_GetDeviceMode(Dev, &(pDeviceParameters->DeviceMode));
 800695a:	683b      	ldr	r3, [r7, #0]
 800695c:	4619      	mov	r1, r3
 800695e:	6878      	ldr	r0, [r7, #4]
 8006960:	f000 f8b0 	bl	8006ac4 <VL53L0X_GetDeviceMode>
 8006964:	4603      	mov	r3, r0
 8006966:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 8006968:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800696c:	2b00      	cmp	r3, #0
 800696e:	d107      	bne.n	8006980 <VL53L0X_GetDeviceParameters+0x34>
		Status = VL53L0X_GetInterMeasurementPeriodMilliSeconds(Dev,
 8006970:	683b      	ldr	r3, [r7, #0]
 8006972:	3308      	adds	r3, #8
 8006974:	4619      	mov	r1, r3
 8006976:	6878      	ldr	r0, [r7, #4]
 8006978:	f000 fa78 	bl	8006e6c <VL53L0X_GetInterMeasurementPeriodMilliSeconds>
 800697c:	4603      	mov	r3, r0
 800697e:	73fb      	strb	r3, [r7, #15]
		&(pDeviceParameters->InterMeasurementPeriodMilliSeconds));


	if (Status == VL53L0X_ERROR_NONE)
 8006980:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006984:	2b00      	cmp	r3, #0
 8006986:	d102      	bne.n	800698e <VL53L0X_GetDeviceParameters+0x42>
		pDeviceParameters->XTalkCompensationEnable = 0;
 8006988:	683b      	ldr	r3, [r7, #0]
 800698a:	2200      	movs	r2, #0
 800698c:	731a      	strb	r2, [r3, #12]

	if (Status == VL53L0X_ERROR_NONE)
 800698e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006992:	2b00      	cmp	r3, #0
 8006994:	d107      	bne.n	80069a6 <VL53L0X_GetDeviceParameters+0x5a>
		Status = VL53L0X_GetXTalkCompensationRateMegaCps(Dev,
 8006996:	683b      	ldr	r3, [r7, #0]
 8006998:	3310      	adds	r3, #16
 800699a:	4619      	mov	r1, r3
 800699c:	6878      	ldr	r0, [r7, #4]
 800699e:	f000 faae 	bl	8006efe <VL53L0X_GetXTalkCompensationRateMegaCps>
 80069a2:	4603      	mov	r3, r0
 80069a4:	73fb      	strb	r3, [r7, #15]
			&(pDeviceParameters->XTalkCompensationRateMegaCps));


	if (Status == VL53L0X_ERROR_NONE)
 80069a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d107      	bne.n	80069be <VL53L0X_GetDeviceParameters+0x72>
		Status = VL53L0X_GetOffsetCalibrationDataMicroMeter(Dev,
 80069ae:	683b      	ldr	r3, [r7, #0]
 80069b0:	3314      	adds	r3, #20
 80069b2:	4619      	mov	r1, r3
 80069b4:	6878      	ldr	r0, [r7, #4]
 80069b6:	f7ff fcc2 	bl	800633e <VL53L0X_GetOffsetCalibrationDataMicroMeter>
 80069ba:	4603      	mov	r3, r0
 80069bc:	73fb      	strb	r3, [r7, #15]
			&(pDeviceParameters->RangeOffsetMicroMeters));


	if (Status == VL53L0X_ERROR_NONE) {
 80069be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d134      	bne.n	8006a30 <VL53L0X_GetDeviceParameters+0xe4>
		for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 80069c6:	2300      	movs	r3, #0
 80069c8:	60bb      	str	r3, [r7, #8]
 80069ca:	e02a      	b.n	8006a22 <VL53L0X_GetDeviceParameters+0xd6>
			/* get first the values, then the enables.
			 * VL53L0X_GetLimitCheckValue will modify the enable
			 * flags
			 */
			if (Status == VL53L0X_ERROR_NONE) {
 80069cc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d12a      	bne.n	8006a2a <VL53L0X_GetDeviceParameters+0xde>
				Status |= VL53L0X_GetLimitCheckValue(Dev, i,
 80069d4:	68bb      	ldr	r3, [r7, #8]
 80069d6:	b299      	uxth	r1, r3
 80069d8:	68bb      	ldr	r3, [r7, #8]
 80069da:	3308      	adds	r3, #8
 80069dc:	009b      	lsls	r3, r3, #2
 80069de:	683a      	ldr	r2, [r7, #0]
 80069e0:	4413      	add	r3, r2
 80069e2:	3304      	adds	r3, #4
 80069e4:	461a      	mov	r2, r3
 80069e6:	6878      	ldr	r0, [r7, #4]
 80069e8:	f000 fbce 	bl	8007188 <VL53L0X_GetLimitCheckValue>
 80069ec:	4603      	mov	r3, r0
 80069ee:	461a      	mov	r2, r3
 80069f0:	7bfb      	ldrb	r3, [r7, #15]
 80069f2:	4313      	orrs	r3, r2
 80069f4:	73fb      	strb	r3, [r7, #15]
				&(pDeviceParameters->LimitChecksValue[i]));
			} else {
				break;
			}
			if (Status == VL53L0X_ERROR_NONE) {
 80069f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d117      	bne.n	8006a2e <VL53L0X_GetDeviceParameters+0xe2>
				Status |= VL53L0X_GetLimitCheckEnable(Dev, i,
 80069fe:	68bb      	ldr	r3, [r7, #8]
 8006a00:	b299      	uxth	r1, r3
 8006a02:	68bb      	ldr	r3, [r7, #8]
 8006a04:	3318      	adds	r3, #24
 8006a06:	683a      	ldr	r2, [r7, #0]
 8006a08:	4413      	add	r3, r2
 8006a0a:	461a      	mov	r2, r3
 8006a0c:	6878      	ldr	r0, [r7, #4]
 8006a0e:	f000 fb35 	bl	800707c <VL53L0X_GetLimitCheckEnable>
 8006a12:	4603      	mov	r3, r0
 8006a14:	461a      	mov	r2, r3
 8006a16:	7bfb      	ldrb	r3, [r7, #15]
 8006a18:	4313      	orrs	r3, r2
 8006a1a:	73fb      	strb	r3, [r7, #15]
		for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8006a1c:	68bb      	ldr	r3, [r7, #8]
 8006a1e:	3301      	adds	r3, #1
 8006a20:	60bb      	str	r3, [r7, #8]
 8006a22:	68bb      	ldr	r3, [r7, #8]
 8006a24:	2b05      	cmp	r3, #5
 8006a26:	ddd1      	ble.n	80069cc <VL53L0X_GetDeviceParameters+0x80>
 8006a28:	e002      	b.n	8006a30 <VL53L0X_GetDeviceParameters+0xe4>
				break;
 8006a2a:	bf00      	nop
 8006a2c:	e000      	b.n	8006a30 <VL53L0X_GetDeviceParameters+0xe4>
				&(pDeviceParameters->LimitChecksEnable[i]));
			} else {
				break;
 8006a2e:	bf00      	nop
			}
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8006a30:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d107      	bne.n	8006a48 <VL53L0X_GetDeviceParameters+0xfc>
		Status = VL53L0X_GetWrapAroundCheckEnable(Dev,
 8006a38:	683b      	ldr	r3, [r7, #0]
 8006a3a:	333c      	adds	r3, #60	; 0x3c
 8006a3c:	4619      	mov	r1, r3
 8006a3e:	6878      	ldr	r0, [r7, #4]
 8006a40:	f000 fc30 	bl	80072a4 <VL53L0X_GetWrapAroundCheckEnable>
 8006a44:	4603      	mov	r3, r0
 8006a46:	73fb      	strb	r3, [r7, #15]
			&(pDeviceParameters->WrapAroundCheckEnable));
	}

	/* Need to be done at the end as it uses VCSELPulsePeriod */
	if (Status == VL53L0X_ERROR_NONE) {
 8006a48:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d107      	bne.n	8006a60 <VL53L0X_GetDeviceParameters+0x114>
		Status = VL53L0X_GetMeasurementTimingBudgetMicroSeconds(Dev,
 8006a50:	683b      	ldr	r3, [r7, #0]
 8006a52:	3304      	adds	r3, #4
 8006a54:	4619      	mov	r1, r3
 8006a56:	6878      	ldr	r0, [r7, #4]
 8006a58:	f000 f879 	bl	8006b4e <VL53L0X_GetMeasurementTimingBudgetMicroSeconds>
 8006a5c:	4603      	mov	r3, r0
 8006a5e:	73fb      	strb	r3, [r7, #15]
		&(pDeviceParameters->MeasurementTimingBudgetMicroSeconds));
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8006a60:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006a64:	4618      	mov	r0, r3
 8006a66:	3710      	adds	r7, #16
 8006a68:	46bd      	mov	sp, r7
 8006a6a:	bd80      	pop	{r7, pc}

08006a6c <VL53L0X_SetDeviceMode>:

VL53L0X_Error VL53L0X_SetDeviceMode(VL53L0X_DEV Dev, VL53L0X_DeviceModes DeviceMode)
{
 8006a6c:	b480      	push	{r7}
 8006a6e:	b085      	sub	sp, #20
 8006a70:	af00      	add	r7, sp, #0
 8006a72:	6078      	str	r0, [r7, #4]
 8006a74:	460b      	mov	r3, r1
 8006a76:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006a78:	2300      	movs	r3, #0
 8006a7a:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("%d", (int)DeviceMode);

	switch (DeviceMode) {
 8006a7c:	78fb      	ldrb	r3, [r7, #3]
 8006a7e:	2b15      	cmp	r3, #21
 8006a80:	bf8c      	ite	hi
 8006a82:	2201      	movhi	r2, #1
 8006a84:	2200      	movls	r2, #0
 8006a86:	b2d2      	uxtb	r2, r2
 8006a88:	2a00      	cmp	r2, #0
 8006a8a:	d10e      	bne.n	8006aaa <VL53L0X_SetDeviceMode+0x3e>
 8006a8c:	2201      	movs	r2, #1
 8006a8e:	409a      	lsls	r2, r3
 8006a90:	4b0b      	ldr	r3, [pc, #44]	; (8006ac0 <VL53L0X_SetDeviceMode+0x54>)
 8006a92:	4013      	ands	r3, r2
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	bf14      	ite	ne
 8006a98:	2301      	movne	r3, #1
 8006a9a:	2300      	moveq	r3, #0
 8006a9c:	b2db      	uxtb	r3, r3
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d003      	beq.n	8006aaa <VL53L0X_SetDeviceMode+0x3e>
	case VL53L0X_DEVICEMODE_CONTINUOUS_RANGING:
	case VL53L0X_DEVICEMODE_CONTINUOUS_TIMED_RANGING:
	case VL53L0X_DEVICEMODE_GPIO_DRIVE:
	case VL53L0X_DEVICEMODE_GPIO_OSC:
		/* Supported modes */
		VL53L0X_SETPARAMETERFIELD(Dev, DeviceMode, DeviceMode);
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	78fa      	ldrb	r2, [r7, #3]
 8006aa6:	741a      	strb	r2, [r3, #16]
		break;
 8006aa8:	e001      	b.n	8006aae <VL53L0X_SetDeviceMode+0x42>
	default:
		/* Unsupported mode */
		Status = VL53L0X_ERROR_MODE_NOT_SUPPORTED;
 8006aaa:	23f8      	movs	r3, #248	; 0xf8
 8006aac:	73fb      	strb	r3, [r7, #15]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8006aae:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006ab2:	4618      	mov	r0, r3
 8006ab4:	3714      	adds	r7, #20
 8006ab6:	46bd      	mov	sp, r7
 8006ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006abc:	4770      	bx	lr
 8006abe:	bf00      	nop
 8006ac0:	0030000b 	.word	0x0030000b

08006ac4 <VL53L0X_GetDeviceMode>:

VL53L0X_Error VL53L0X_GetDeviceMode(VL53L0X_DEV Dev,
	VL53L0X_DeviceModes *pDeviceMode)
{
 8006ac4:	b480      	push	{r7}
 8006ac6:	b085      	sub	sp, #20
 8006ac8:	af00      	add	r7, sp, #0
 8006aca:	6078      	str	r0, [r7, #4]
 8006acc:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006ace:	2300      	movs	r3, #0
 8006ad0:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, DeviceMode, *pDeviceMode);
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	7c1a      	ldrb	r2, [r3, #16]
 8006ad6:	683b      	ldr	r3, [r7, #0]
 8006ad8:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 8006ada:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006ade:	4618      	mov	r0, r3
 8006ae0:	3714      	adds	r7, #20
 8006ae2:	46bd      	mov	sp, r7
 8006ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ae8:	4770      	bx	lr

08006aea <VL53L0X_GetFractionEnable>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_GetFractionEnable(VL53L0X_DEV Dev, uint8_t *pEnabled)
{
 8006aea:	b580      	push	{r7, lr}
 8006aec:	b084      	sub	sp, #16
 8006aee:	af00      	add	r7, sp, #0
 8006af0:	6078      	str	r0, [r7, #4]
 8006af2:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006af4:	2300      	movs	r3, #0
 8006af6:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_RANGE_CONFIG, pEnabled);
 8006af8:	683a      	ldr	r2, [r7, #0]
 8006afa:	2109      	movs	r1, #9
 8006afc:	6878      	ldr	r0, [r7, #4]
 8006afe:	f004 fb6d 	bl	800b1dc <VL53L0X_RdByte>
 8006b02:	4603      	mov	r3, r0
 8006b04:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 8006b06:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d106      	bne.n	8006b1c <VL53L0X_GetFractionEnable+0x32>
		*pEnabled = (*pEnabled & 1);
 8006b0e:	683b      	ldr	r3, [r7, #0]
 8006b10:	781b      	ldrb	r3, [r3, #0]
 8006b12:	f003 0301 	and.w	r3, r3, #1
 8006b16:	b2da      	uxtb	r2, r3
 8006b18:	683b      	ldr	r3, [r7, #0]
 8006b1a:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 8006b1c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006b20:	4618      	mov	r0, r3
 8006b22:	3710      	adds	r7, #16
 8006b24:	46bd      	mov	sp, r7
 8006b26:	bd80      	pop	{r7, pc}

08006b28 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>:
	return Status;
}

VL53L0X_Error VL53L0X_SetMeasurementTimingBudgetMicroSeconds(VL53L0X_DEV Dev,
	uint32_t MeasurementTimingBudgetMicroSeconds)
{
 8006b28:	b580      	push	{r7, lr}
 8006b2a:	b084      	sub	sp, #16
 8006b2c:	af00      	add	r7, sp, #0
 8006b2e:	6078      	str	r0, [r7, #4]
 8006b30:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006b32:	2300      	movs	r3, #0
 8006b34:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_set_measurement_timing_budget_micro_seconds(Dev,
 8006b36:	6839      	ldr	r1, [r7, #0]
 8006b38:	6878      	ldr	r0, [r7, #4]
 8006b3a:	f003 fa26 	bl	8009f8a <VL53L0X_set_measurement_timing_budget_micro_seconds>
 8006b3e:	4603      	mov	r3, r0
 8006b40:	73fb      	strb	r3, [r7, #15]
		MeasurementTimingBudgetMicroSeconds);

	LOG_FUNCTION_END(Status);

	return Status;
 8006b42:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006b46:	4618      	mov	r0, r3
 8006b48:	3710      	adds	r7, #16
 8006b4a:	46bd      	mov	sp, r7
 8006b4c:	bd80      	pop	{r7, pc}

08006b4e <VL53L0X_GetMeasurementTimingBudgetMicroSeconds>:

VL53L0X_Error VL53L0X_GetMeasurementTimingBudgetMicroSeconds(VL53L0X_DEV Dev,
	uint32_t *pMeasurementTimingBudgetMicroSeconds)
{
 8006b4e:	b580      	push	{r7, lr}
 8006b50:	b084      	sub	sp, #16
 8006b52:	af00      	add	r7, sp, #0
 8006b54:	6078      	str	r0, [r7, #4]
 8006b56:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006b58:	2300      	movs	r3, #0
 8006b5a:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_measurement_timing_budget_micro_seconds(Dev,
 8006b5c:	6839      	ldr	r1, [r7, #0]
 8006b5e:	6878      	ldr	r0, [r7, #4]
 8006b60:	f003 faf3 	bl	800a14a <VL53L0X_get_measurement_timing_budget_micro_seconds>
 8006b64:	4603      	mov	r3, r0
 8006b66:	73fb      	strb	r3, [r7, #15]
		pMeasurementTimingBudgetMicroSeconds);

	LOG_FUNCTION_END(Status);
	return Status;
 8006b68:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006b6c:	4618      	mov	r0, r3
 8006b6e:	3710      	adds	r7, #16
 8006b70:	46bd      	mov	sp, r7
 8006b72:	bd80      	pop	{r7, pc}

08006b74 <VL53L0X_SetVcselPulsePeriod>:

VL53L0X_Error VL53L0X_SetVcselPulsePeriod(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t VCSELPulsePeriodPCLK)
{
 8006b74:	b580      	push	{r7, lr}
 8006b76:	b084      	sub	sp, #16
 8006b78:	af00      	add	r7, sp, #0
 8006b7a:	6078      	str	r0, [r7, #4]
 8006b7c:	460b      	mov	r3, r1
 8006b7e:	70fb      	strb	r3, [r7, #3]
 8006b80:	4613      	mov	r3, r2
 8006b82:	70bb      	strb	r3, [r7, #2]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006b84:	2300      	movs	r3, #0
 8006b86:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_set_vcsel_pulse_period(Dev, VcselPeriodType,
 8006b88:	78ba      	ldrb	r2, [r7, #2]
 8006b8a:	78fb      	ldrb	r3, [r7, #3]
 8006b8c:	4619      	mov	r1, r3
 8006b8e:	6878      	ldr	r0, [r7, #4]
 8006b90:	f002 ff3b 	bl	8009a0a <VL53L0X_set_vcsel_pulse_period>
 8006b94:	4603      	mov	r3, r0
 8006b96:	73fb      	strb	r3, [r7, #15]
		VCSELPulsePeriodPCLK);

	LOG_FUNCTION_END(Status);
	return Status;
 8006b98:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006b9c:	4618      	mov	r0, r3
 8006b9e:	3710      	adds	r7, #16
 8006ba0:	46bd      	mov	sp, r7
 8006ba2:	bd80      	pop	{r7, pc}

08006ba4 <VL53L0X_GetVcselPulsePeriod>:

VL53L0X_Error VL53L0X_GetVcselPulsePeriod(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t *pVCSELPulsePeriodPCLK)
{
 8006ba4:	b580      	push	{r7, lr}
 8006ba6:	b086      	sub	sp, #24
 8006ba8:	af00      	add	r7, sp, #0
 8006baa:	60f8      	str	r0, [r7, #12]
 8006bac:	460b      	mov	r3, r1
 8006bae:	607a      	str	r2, [r7, #4]
 8006bb0:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006bb2:	2300      	movs	r3, #0
 8006bb4:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_vcsel_pulse_period(Dev, VcselPeriodType,
 8006bb6:	7afb      	ldrb	r3, [r7, #11]
 8006bb8:	687a      	ldr	r2, [r7, #4]
 8006bba:	4619      	mov	r1, r3
 8006bbc:	68f8      	ldr	r0, [r7, #12]
 8006bbe:	f003 f9ad 	bl	8009f1c <VL53L0X_get_vcsel_pulse_period>
 8006bc2:	4603      	mov	r3, r0
 8006bc4:	75fb      	strb	r3, [r7, #23]
		pVCSELPulsePeriodPCLK);

	LOG_FUNCTION_END(Status);
	return Status;
 8006bc6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006bca:	4618      	mov	r0, r3
 8006bcc:	3718      	adds	r7, #24
 8006bce:	46bd      	mov	sp, r7
 8006bd0:	bd80      	pop	{r7, pc}
	...

08006bd4 <VL53L0X_SetSequenceStepEnable>:

VL53L0X_Error VL53L0X_SetSequenceStepEnable(VL53L0X_DEV Dev,
	VL53L0X_SequenceStepId SequenceStepId, uint8_t SequenceStepEnabled)
{
 8006bd4:	b580      	push	{r7, lr}
 8006bd6:	b086      	sub	sp, #24
 8006bd8:	af00      	add	r7, sp, #0
 8006bda:	6078      	str	r0, [r7, #4]
 8006bdc:	460b      	mov	r3, r1
 8006bde:	70fb      	strb	r3, [r7, #3]
 8006be0:	4613      	mov	r3, r2
 8006be2:	70bb      	strb	r3, [r7, #2]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006be4:	2300      	movs	r3, #0
 8006be6:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 8006be8:	2300      	movs	r3, #0
 8006bea:	73fb      	strb	r3, [r7, #15]
	uint8_t SequenceConfigNew = 0;
 8006bec:	2300      	movs	r3, #0
 8006bee:	75bb      	strb	r3, [r7, #22]
	uint32_t MeasurementTimingBudgetMicroSeconds;
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8006bf0:	f107 030f 	add.w	r3, r7, #15
 8006bf4:	461a      	mov	r2, r3
 8006bf6:	2101      	movs	r1, #1
 8006bf8:	6878      	ldr	r0, [r7, #4]
 8006bfa:	f004 faef 	bl	800b1dc <VL53L0X_RdByte>
 8006bfe:	4603      	mov	r3, r0
 8006c00:	75fb      	strb	r3, [r7, #23]
		&SequenceConfig);

	SequenceConfigNew = SequenceConfig;
 8006c02:	7bfb      	ldrb	r3, [r7, #15]
 8006c04:	75bb      	strb	r3, [r7, #22]

	if (Status == VL53L0X_ERROR_NONE) {
 8006c06:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d15a      	bne.n	8006cc4 <VL53L0X_SetSequenceStepEnable+0xf0>
		if (SequenceStepEnabled == 1) {
 8006c0e:	78bb      	ldrb	r3, [r7, #2]
 8006c10:	2b01      	cmp	r3, #1
 8006c12:	d12b      	bne.n	8006c6c <VL53L0X_SetSequenceStepEnable+0x98>

			/* Enable requested sequence step
			 */
			switch (SequenceStepId) {
 8006c14:	78fb      	ldrb	r3, [r7, #3]
 8006c16:	2b04      	cmp	r3, #4
 8006c18:	d825      	bhi.n	8006c66 <VL53L0X_SetSequenceStepEnable+0x92>
 8006c1a:	a201      	add	r2, pc, #4	; (adr r2, 8006c20 <VL53L0X_SetSequenceStepEnable+0x4c>)
 8006c1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c20:	08006c35 	.word	0x08006c35
 8006c24:	08006c3f 	.word	0x08006c3f
 8006c28:	08006c49 	.word	0x08006c49
 8006c2c:	08006c53 	.word	0x08006c53
 8006c30:	08006c5d 	.word	0x08006c5d
			case VL53L0X_SEQUENCESTEP_TCC:
				SequenceConfigNew |= 0x10;
 8006c34:	7dbb      	ldrb	r3, [r7, #22]
 8006c36:	f043 0310 	orr.w	r3, r3, #16
 8006c3a:	75bb      	strb	r3, [r7, #22]
				break;
 8006c3c:	e043      	b.n	8006cc6 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_DSS:
				SequenceConfigNew |= 0x28;
 8006c3e:	7dbb      	ldrb	r3, [r7, #22]
 8006c40:	f043 0328 	orr.w	r3, r3, #40	; 0x28
 8006c44:	75bb      	strb	r3, [r7, #22]
				break;
 8006c46:	e03e      	b.n	8006cc6 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_MSRC:
				SequenceConfigNew |= 0x04;
 8006c48:	7dbb      	ldrb	r3, [r7, #22]
 8006c4a:	f043 0304 	orr.w	r3, r3, #4
 8006c4e:	75bb      	strb	r3, [r7, #22]
				break;
 8006c50:	e039      	b.n	8006cc6 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_PRE_RANGE:
				SequenceConfigNew |= 0x40;
 8006c52:	7dbb      	ldrb	r3, [r7, #22]
 8006c54:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006c58:	75bb      	strb	r3, [r7, #22]
				break;
 8006c5a:	e034      	b.n	8006cc6 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
				SequenceConfigNew |= 0x80;
 8006c5c:	7dbb      	ldrb	r3, [r7, #22]
 8006c5e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006c62:	75bb      	strb	r3, [r7, #22]
				break;
 8006c64:	e02f      	b.n	8006cc6 <VL53L0X_SetSequenceStepEnable+0xf2>
			default:
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 8006c66:	23fc      	movs	r3, #252	; 0xfc
 8006c68:	75fb      	strb	r3, [r7, #23]
 8006c6a:	e02c      	b.n	8006cc6 <VL53L0X_SetSequenceStepEnable+0xf2>
			}
		} else {
			/* Disable requested sequence step
			 */
			switch (SequenceStepId) {
 8006c6c:	78fb      	ldrb	r3, [r7, #3]
 8006c6e:	2b04      	cmp	r3, #4
 8006c70:	d825      	bhi.n	8006cbe <VL53L0X_SetSequenceStepEnable+0xea>
 8006c72:	a201      	add	r2, pc, #4	; (adr r2, 8006c78 <VL53L0X_SetSequenceStepEnable+0xa4>)
 8006c74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c78:	08006c8d 	.word	0x08006c8d
 8006c7c:	08006c97 	.word	0x08006c97
 8006c80:	08006ca1 	.word	0x08006ca1
 8006c84:	08006cab 	.word	0x08006cab
 8006c88:	08006cb5 	.word	0x08006cb5
			case VL53L0X_SEQUENCESTEP_TCC:
				SequenceConfigNew &= 0xef;
 8006c8c:	7dbb      	ldrb	r3, [r7, #22]
 8006c8e:	f023 0310 	bic.w	r3, r3, #16
 8006c92:	75bb      	strb	r3, [r7, #22]
				break;
 8006c94:	e017      	b.n	8006cc6 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_DSS:
				SequenceConfigNew &= 0xd7;
 8006c96:	7dbb      	ldrb	r3, [r7, #22]
 8006c98:	f023 0328 	bic.w	r3, r3, #40	; 0x28
 8006c9c:	75bb      	strb	r3, [r7, #22]
				break;
 8006c9e:	e012      	b.n	8006cc6 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_MSRC:
				SequenceConfigNew &= 0xfb;
 8006ca0:	7dbb      	ldrb	r3, [r7, #22]
 8006ca2:	f023 0304 	bic.w	r3, r3, #4
 8006ca6:	75bb      	strb	r3, [r7, #22]
				break;
 8006ca8:	e00d      	b.n	8006cc6 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_PRE_RANGE:
				SequenceConfigNew &= 0xbf;
 8006caa:	7dbb      	ldrb	r3, [r7, #22]
 8006cac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006cb0:	75bb      	strb	r3, [r7, #22]
				break;
 8006cb2:	e008      	b.n	8006cc6 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
				SequenceConfigNew &= 0x7f;
 8006cb4:	7dbb      	ldrb	r3, [r7, #22]
 8006cb6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006cba:	75bb      	strb	r3, [r7, #22]
				break;
 8006cbc:	e003      	b.n	8006cc6 <VL53L0X_SetSequenceStepEnable+0xf2>
			default:
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 8006cbe:	23fc      	movs	r3, #252	; 0xfc
 8006cc0:	75fb      	strb	r3, [r7, #23]
 8006cc2:	e000      	b.n	8006cc6 <VL53L0X_SetSequenceStepEnable+0xf2>
			}
		}
 8006cc4:	bf00      	nop
	}

	if (SequenceConfigNew != SequenceConfig) {
 8006cc6:	7bfb      	ldrb	r3, [r7, #15]
 8006cc8:	7dba      	ldrb	r2, [r7, #22]
 8006cca:	429a      	cmp	r2, r3
 8006ccc:	d01e      	beq.n	8006d0c <VL53L0X_SetSequenceStepEnable+0x138>
		/* Apply New Setting */
		if (Status == VL53L0X_ERROR_NONE) {
 8006cce:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d107      	bne.n	8006ce6 <VL53L0X_SetSequenceStepEnable+0x112>
			Status = VL53L0X_WrByte(Dev,
 8006cd6:	7dbb      	ldrb	r3, [r7, #22]
 8006cd8:	461a      	mov	r2, r3
 8006cda:	2101      	movs	r1, #1
 8006cdc:	6878      	ldr	r0, [r7, #4]
 8006cde:	f004 f9fb 	bl	800b0d8 <VL53L0X_WrByte>
 8006ce2:	4603      	mov	r3, r0
 8006ce4:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, SequenceConfigNew);
		}
		if (Status == VL53L0X_ERROR_NONE)
 8006ce6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d103      	bne.n	8006cf6 <VL53L0X_SetSequenceStepEnable+0x122>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfigNew);
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	7dba      	ldrb	r2, [r7, #22]
 8006cf2:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130


		/* Recalculate timing budget */
		if (Status == VL53L0X_ERROR_NONE) {
 8006cf6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d106      	bne.n	8006d0c <VL53L0X_SetSequenceStepEnable+0x138>
			VL53L0X_GETPARAMETERFIELD(Dev,
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	695b      	ldr	r3, [r3, #20]
 8006d02:	613b      	str	r3, [r7, #16]
				MeasurementTimingBudgetMicroSeconds,
				MeasurementTimingBudgetMicroSeconds);

			VL53L0X_SetMeasurementTimingBudgetMicroSeconds(Dev,
 8006d04:	6939      	ldr	r1, [r7, #16]
 8006d06:	6878      	ldr	r0, [r7, #4]
 8006d08:	f7ff ff0e 	bl	8006b28 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>
		}
	}

	LOG_FUNCTION_END(Status);

	return Status;
 8006d0c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006d10:	4618      	mov	r0, r3
 8006d12:	3718      	adds	r7, #24
 8006d14:	46bd      	mov	sp, r7
 8006d16:	bd80      	pop	{r7, pc}

08006d18 <sequence_step_enabled>:

VL53L0X_Error sequence_step_enabled(VL53L0X_DEV Dev,
	VL53L0X_SequenceStepId SequenceStepId, uint8_t SequenceConfig,
	uint8_t *pSequenceStepEnabled)
{
 8006d18:	b480      	push	{r7}
 8006d1a:	b087      	sub	sp, #28
 8006d1c:	af00      	add	r7, sp, #0
 8006d1e:	60f8      	str	r0, [r7, #12]
 8006d20:	607b      	str	r3, [r7, #4]
 8006d22:	460b      	mov	r3, r1
 8006d24:	72fb      	strb	r3, [r7, #11]
 8006d26:	4613      	mov	r3, r2
 8006d28:	72bb      	strb	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006d2a:	2300      	movs	r3, #0
 8006d2c:	75fb      	strb	r3, [r7, #23]
	*pSequenceStepEnabled = 0;
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	2200      	movs	r2, #0
 8006d32:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_START("");

	switch (SequenceStepId) {
 8006d34:	7afb      	ldrb	r3, [r7, #11]
 8006d36:	2b04      	cmp	r3, #4
 8006d38:	d836      	bhi.n	8006da8 <sequence_step_enabled+0x90>
 8006d3a:	a201      	add	r2, pc, #4	; (adr r2, 8006d40 <sequence_step_enabled+0x28>)
 8006d3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d40:	08006d55 	.word	0x08006d55
 8006d44:	08006d67 	.word	0x08006d67
 8006d48:	08006d79 	.word	0x08006d79
 8006d4c:	08006d8b 	.word	0x08006d8b
 8006d50:	08006d9d 	.word	0x08006d9d
	case VL53L0X_SEQUENCESTEP_TCC:
		*pSequenceStepEnabled = (SequenceConfig & 0x10) >> 4;
 8006d54:	7abb      	ldrb	r3, [r7, #10]
 8006d56:	111b      	asrs	r3, r3, #4
 8006d58:	b2db      	uxtb	r3, r3
 8006d5a:	f003 0301 	and.w	r3, r3, #1
 8006d5e:	b2da      	uxtb	r2, r3
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	701a      	strb	r2, [r3, #0]
		break;
 8006d64:	e022      	b.n	8006dac <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_DSS:
		*pSequenceStepEnabled = (SequenceConfig & 0x08) >> 3;
 8006d66:	7abb      	ldrb	r3, [r7, #10]
 8006d68:	10db      	asrs	r3, r3, #3
 8006d6a:	b2db      	uxtb	r3, r3
 8006d6c:	f003 0301 	and.w	r3, r3, #1
 8006d70:	b2da      	uxtb	r2, r3
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	701a      	strb	r2, [r3, #0]
		break;
 8006d76:	e019      	b.n	8006dac <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_MSRC:
		*pSequenceStepEnabled = (SequenceConfig & 0x04) >> 2;
 8006d78:	7abb      	ldrb	r3, [r7, #10]
 8006d7a:	109b      	asrs	r3, r3, #2
 8006d7c:	b2db      	uxtb	r3, r3
 8006d7e:	f003 0301 	and.w	r3, r3, #1
 8006d82:	b2da      	uxtb	r2, r3
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	701a      	strb	r2, [r3, #0]
		break;
 8006d88:	e010      	b.n	8006dac <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_PRE_RANGE:
		*pSequenceStepEnabled = (SequenceConfig & 0x40) >> 6;
 8006d8a:	7abb      	ldrb	r3, [r7, #10]
 8006d8c:	119b      	asrs	r3, r3, #6
 8006d8e:	b2db      	uxtb	r3, r3
 8006d90:	f003 0301 	and.w	r3, r3, #1
 8006d94:	b2da      	uxtb	r2, r3
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	701a      	strb	r2, [r3, #0]
		break;
 8006d9a:	e007      	b.n	8006dac <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
		*pSequenceStepEnabled = (SequenceConfig & 0x80) >> 7;
 8006d9c:	7abb      	ldrb	r3, [r7, #10]
 8006d9e:	09db      	lsrs	r3, r3, #7
 8006da0:	b2da      	uxtb	r2, r3
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	701a      	strb	r2, [r3, #0]
		break;
 8006da6:	e001      	b.n	8006dac <sequence_step_enabled+0x94>
	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8006da8:	23fc      	movs	r3, #252	; 0xfc
 8006daa:	75fb      	strb	r3, [r7, #23]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8006dac:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006db0:	4618      	mov	r0, r3
 8006db2:	371c      	adds	r7, #28
 8006db4:	46bd      	mov	sp, r7
 8006db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dba:	4770      	bx	lr

08006dbc <VL53L0X_GetSequenceStepEnables>:
	return Status;
}

VL53L0X_Error VL53L0X_GetSequenceStepEnables(VL53L0X_DEV Dev,
	VL53L0X_SchedulerSequenceSteps_t *pSchedulerSequenceSteps)
{
 8006dbc:	b580      	push	{r7, lr}
 8006dbe:	b084      	sub	sp, #16
 8006dc0:	af00      	add	r7, sp, #0
 8006dc2:	6078      	str	r0, [r7, #4]
 8006dc4:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006dc6:	2300      	movs	r3, #0
 8006dc8:	73fb      	strb	r3, [r7, #15]
	uint8_t SequenceConfig = 0;
 8006dca:	2300      	movs	r3, #0
 8006dcc:	73bb      	strb	r3, [r7, #14]
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8006dce:	f107 030e 	add.w	r3, r7, #14
 8006dd2:	461a      	mov	r2, r3
 8006dd4:	2101      	movs	r1, #1
 8006dd6:	6878      	ldr	r0, [r7, #4]
 8006dd8:	f004 fa00 	bl	800b1dc <VL53L0X_RdByte>
 8006ddc:	4603      	mov	r3, r0
 8006dde:	73fb      	strb	r3, [r7, #15]
		&SequenceConfig);

	if (Status == VL53L0X_ERROR_NONE) {
 8006de0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	d107      	bne.n	8006df8 <VL53L0X_GetSequenceStepEnables+0x3c>
		Status = sequence_step_enabled(Dev,
 8006de8:	7bba      	ldrb	r2, [r7, #14]
 8006dea:	683b      	ldr	r3, [r7, #0]
 8006dec:	2100      	movs	r1, #0
 8006dee:	6878      	ldr	r0, [r7, #4]
 8006df0:	f7ff ff92 	bl	8006d18 <sequence_step_enabled>
 8006df4:	4603      	mov	r3, r0
 8006df6:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_TCC, SequenceConfig,
			&pSchedulerSequenceSteps->TccOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8006df8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	d108      	bne.n	8006e12 <VL53L0X_GetSequenceStepEnables+0x56>
		Status = sequence_step_enabled(Dev,
 8006e00:	7bba      	ldrb	r2, [r7, #14]
 8006e02:	683b      	ldr	r3, [r7, #0]
 8006e04:	3302      	adds	r3, #2
 8006e06:	2101      	movs	r1, #1
 8006e08:	6878      	ldr	r0, [r7, #4]
 8006e0a:	f7ff ff85 	bl	8006d18 <sequence_step_enabled>
 8006e0e:	4603      	mov	r3, r0
 8006e10:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_DSS, SequenceConfig,
			&pSchedulerSequenceSteps->DssOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8006e12:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d108      	bne.n	8006e2c <VL53L0X_GetSequenceStepEnables+0x70>
		Status = sequence_step_enabled(Dev,
 8006e1a:	7bba      	ldrb	r2, [r7, #14]
 8006e1c:	683b      	ldr	r3, [r7, #0]
 8006e1e:	3301      	adds	r3, #1
 8006e20:	2102      	movs	r1, #2
 8006e22:	6878      	ldr	r0, [r7, #4]
 8006e24:	f7ff ff78 	bl	8006d18 <sequence_step_enabled>
 8006e28:	4603      	mov	r3, r0
 8006e2a:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_MSRC, SequenceConfig,
			&pSchedulerSequenceSteps->MsrcOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8006e2c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	d108      	bne.n	8006e46 <VL53L0X_GetSequenceStepEnables+0x8a>
		Status = sequence_step_enabled(Dev,
 8006e34:	7bba      	ldrb	r2, [r7, #14]
 8006e36:	683b      	ldr	r3, [r7, #0]
 8006e38:	3303      	adds	r3, #3
 8006e3a:	2103      	movs	r1, #3
 8006e3c:	6878      	ldr	r0, [r7, #4]
 8006e3e:	f7ff ff6b 	bl	8006d18 <sequence_step_enabled>
 8006e42:	4603      	mov	r3, r0
 8006e44:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_PRE_RANGE, SequenceConfig,
			&pSchedulerSequenceSteps->PreRangeOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8006e46:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d108      	bne.n	8006e60 <VL53L0X_GetSequenceStepEnables+0xa4>
		Status = sequence_step_enabled(Dev,
 8006e4e:	7bba      	ldrb	r2, [r7, #14]
 8006e50:	683b      	ldr	r3, [r7, #0]
 8006e52:	3304      	adds	r3, #4
 8006e54:	2104      	movs	r1, #4
 8006e56:	6878      	ldr	r0, [r7, #4]
 8006e58:	f7ff ff5e 	bl	8006d18 <sequence_step_enabled>
 8006e5c:	4603      	mov	r3, r0
 8006e5e:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_FINAL_RANGE, SequenceConfig,
			&pSchedulerSequenceSteps->FinalRangeOn);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8006e60:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006e64:	4618      	mov	r0, r3
 8006e66:	3710      	adds	r7, #16
 8006e68:	46bd      	mov	sp, r7
 8006e6a:	bd80      	pop	{r7, pc}

08006e6c <VL53L0X_GetInterMeasurementPeriodMilliSeconds>:
	return Status;
}

VL53L0X_Error VL53L0X_GetInterMeasurementPeriodMilliSeconds(VL53L0X_DEV Dev,
	uint32_t *pInterMeasurementPeriodMilliSeconds)
{
 8006e6c:	b580      	push	{r7, lr}
 8006e6e:	b084      	sub	sp, #16
 8006e70:	af00      	add	r7, sp, #0
 8006e72:	6078      	str	r0, [r7, #4]
 8006e74:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006e76:	2300      	movs	r3, #0
 8006e78:	73fb      	strb	r3, [r7, #15]
	uint16_t osc_calibrate_val;
	uint32_t IMPeriodMilliSeconds;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdWord(Dev, VL53L0X_REG_OSC_CALIBRATE_VAL,
 8006e7a:	f107 030c 	add.w	r3, r7, #12
 8006e7e:	461a      	mov	r2, r3
 8006e80:	21f8      	movs	r1, #248	; 0xf8
 8006e82:	6878      	ldr	r0, [r7, #4]
 8006e84:	f004 f9d4 	bl	800b230 <VL53L0X_RdWord>
 8006e88:	4603      	mov	r3, r0
 8006e8a:	73fb      	strb	r3, [r7, #15]
		&osc_calibrate_val);

	if (Status == VL53L0X_ERROR_NONE) {
 8006e8c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d108      	bne.n	8006ea6 <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x3a>
		Status = VL53L0X_RdDWord(Dev,
 8006e94:	f107 0308 	add.w	r3, r7, #8
 8006e98:	461a      	mov	r2, r3
 8006e9a:	2104      	movs	r1, #4
 8006e9c:	6878      	ldr	r0, [r7, #4]
 8006e9e:	f004 f9ff 	bl	800b2a0 <VL53L0X_RdDWord>
 8006ea2:	4603      	mov	r3, r0
 8006ea4:	73fb      	strb	r3, [r7, #15]
		VL53L0X_REG_SYSTEM_INTERMEASUREMENT_PERIOD,
			&IMPeriodMilliSeconds);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8006ea6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d10c      	bne.n	8006ec8 <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x5c>
		if (osc_calibrate_val != 0) {
 8006eae:	89bb      	ldrh	r3, [r7, #12]
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	d005      	beq.n	8006ec0 <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x54>
			*pInterMeasurementPeriodMilliSeconds =
				IMPeriodMilliSeconds / osc_calibrate_val;
 8006eb4:	68bb      	ldr	r3, [r7, #8]
 8006eb6:	89ba      	ldrh	r2, [r7, #12]
 8006eb8:	fbb3 f2f2 	udiv	r2, r3, r2
			*pInterMeasurementPeriodMilliSeconds =
 8006ebc:	683b      	ldr	r3, [r7, #0]
 8006ebe:	601a      	str	r2, [r3, #0]
		}
		VL53L0X_SETPARAMETERFIELD(Dev,
 8006ec0:	683b      	ldr	r3, [r7, #0]
 8006ec2:	681a      	ldr	r2, [r3, #0]
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	619a      	str	r2, [r3, #24]
			InterMeasurementPeriodMilliSeconds,
			*pInterMeasurementPeriodMilliSeconds);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8006ec8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006ecc:	4618      	mov	r0, r3
 8006ece:	3710      	adds	r7, #16
 8006ed0:	46bd      	mov	sp, r7
 8006ed2:	bd80      	pop	{r7, pc}

08006ed4 <VL53L0X_GetXTalkCompensationEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_GetXTalkCompensationEnable(VL53L0X_DEV Dev,
	uint8_t *pXTalkCompensationEnable)
{
 8006ed4:	b480      	push	{r7}
 8006ed6:	b085      	sub	sp, #20
 8006ed8:	af00      	add	r7, sp, #0
 8006eda:	6078      	str	r0, [r7, #4]
 8006edc:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006ede:	2300      	movs	r3, #0
 8006ee0:	73fb      	strb	r3, [r7, #15]
	uint8_t Temp8;
	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationEnable, Temp8);
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	7f1b      	ldrb	r3, [r3, #28]
 8006ee6:	73bb      	strb	r3, [r7, #14]
	*pXTalkCompensationEnable = Temp8;
 8006ee8:	683b      	ldr	r3, [r7, #0]
 8006eea:	7bba      	ldrb	r2, [r7, #14]
 8006eec:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 8006eee:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006ef2:	4618      	mov	r0, r3
 8006ef4:	3714      	adds	r7, #20
 8006ef6:	46bd      	mov	sp, r7
 8006ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006efc:	4770      	bx	lr

08006efe <VL53L0X_GetXTalkCompensationRateMegaCps>:
	return Status;
}

VL53L0X_Error VL53L0X_GetXTalkCompensationRateMegaCps(VL53L0X_DEV Dev,
	FixPoint1616_t *pXTalkCompensationRateMegaCps)
{
 8006efe:	b580      	push	{r7, lr}
 8006f00:	b086      	sub	sp, #24
 8006f02:	af00      	add	r7, sp, #0
 8006f04:	6078      	str	r0, [r7, #4]
 8006f06:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006f08:	2300      	movs	r3, #0
 8006f0a:	75fb      	strb	r3, [r7, #23]
	uint16_t Value;
	FixPoint1616_t TempFix1616;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdWord(Dev,
 8006f0c:	f107 030e 	add.w	r3, r7, #14
 8006f10:	461a      	mov	r2, r3
 8006f12:	2120      	movs	r1, #32
 8006f14:	6878      	ldr	r0, [r7, #4]
 8006f16:	f004 f98b 	bl	800b230 <VL53L0X_RdWord>
 8006f1a:	4603      	mov	r3, r0
 8006f1c:	75fb      	strb	r3, [r7, #23]
	VL53L0X_REG_CROSSTALK_COMPENSATION_PEAK_RATE_MCPS, (uint16_t *)&Value);
	if (Status == VL53L0X_ERROR_NONE) {
 8006f1e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	d118      	bne.n	8006f58 <VL53L0X_GetXTalkCompensationRateMegaCps+0x5a>
		if (Value == 0) {
 8006f26:	89fb      	ldrh	r3, [r7, #14]
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d109      	bne.n	8006f40 <VL53L0X_GetXTalkCompensationRateMegaCps+0x42>
			/* the Xtalk is disabled return value from memory */
			VL53L0X_GETPARAMETERFIELD(Dev,
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	6a1b      	ldr	r3, [r3, #32]
 8006f30:	613b      	str	r3, [r7, #16]
				XTalkCompensationRateMegaCps, TempFix1616);
			*pXTalkCompensationRateMegaCps = TempFix1616;
 8006f32:	683b      	ldr	r3, [r7, #0]
 8006f34:	693a      	ldr	r2, [r7, #16]
 8006f36:	601a      	str	r2, [r3, #0]
			VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	2200      	movs	r2, #0
 8006f3c:	771a      	strb	r2, [r3, #28]
 8006f3e:	e00b      	b.n	8006f58 <VL53L0X_GetXTalkCompensationRateMegaCps+0x5a>
				0);
		} else {
			TempFix1616 = VL53L0X_FIXPOINT313TOFIXPOINT1616(Value);
 8006f40:	89fb      	ldrh	r3, [r7, #14]
 8006f42:	00db      	lsls	r3, r3, #3
 8006f44:	613b      	str	r3, [r7, #16]
			*pXTalkCompensationRateMegaCps = TempFix1616;
 8006f46:	683b      	ldr	r3, [r7, #0]
 8006f48:	693a      	ldr	r2, [r7, #16]
 8006f4a:	601a      	str	r2, [r3, #0]
			VL53L0X_SETPARAMETERFIELD(Dev,
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	693a      	ldr	r2, [r7, #16]
 8006f50:	621a      	str	r2, [r3, #32]
				XTalkCompensationRateMegaCps, TempFix1616);
			VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	2201      	movs	r2, #1
 8006f56:	771a      	strb	r2, [r3, #28]
				1);
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8006f58:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006f5c:	4618      	mov	r0, r3
 8006f5e:	3718      	adds	r7, #24
 8006f60:	46bd      	mov	sp, r7
 8006f62:	bd80      	pop	{r7, pc}

08006f64 <VL53L0X_SetLimitCheckEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_SetLimitCheckEnable(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	uint8_t LimitCheckEnable)
{
 8006f64:	b580      	push	{r7, lr}
 8006f66:	b086      	sub	sp, #24
 8006f68:	af00      	add	r7, sp, #0
 8006f6a:	6078      	str	r0, [r7, #4]
 8006f6c:	460b      	mov	r3, r1
 8006f6e:	807b      	strh	r3, [r7, #2]
 8006f70:	4613      	mov	r3, r2
 8006f72:	707b      	strb	r3, [r7, #1]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006f74:	2300      	movs	r3, #0
 8006f76:	75fb      	strb	r3, [r7, #23]
	FixPoint1616_t TempFix1616 = 0;
 8006f78:	2300      	movs	r3, #0
 8006f7a:	613b      	str	r3, [r7, #16]
	uint8_t LimitCheckEnableInt = 0;
 8006f7c:	2300      	movs	r3, #0
 8006f7e:	73fb      	strb	r3, [r7, #15]
	uint8_t LimitCheckDisable = 0;
 8006f80:	2300      	movs	r3, #0
 8006f82:	73bb      	strb	r3, [r7, #14]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	if (LimitCheckId >= VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS) {
 8006f84:	887b      	ldrh	r3, [r7, #2]
 8006f86:	2b05      	cmp	r3, #5
 8006f88:	d902      	bls.n	8006f90 <VL53L0X_SetLimitCheckEnable+0x2c>
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8006f8a:	23fc      	movs	r3, #252	; 0xfc
 8006f8c:	75fb      	strb	r3, [r7, #23]
 8006f8e:	e05b      	b.n	8007048 <VL53L0X_SetLimitCheckEnable+0xe4>
	} else {
		if (LimitCheckEnable == 0) {
 8006f90:	787b      	ldrb	r3, [r7, #1]
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d106      	bne.n	8006fa4 <VL53L0X_SetLimitCheckEnable+0x40>
			TempFix1616 = 0;
 8006f96:	2300      	movs	r3, #0
 8006f98:	613b      	str	r3, [r7, #16]
			LimitCheckEnableInt = 0;
 8006f9a:	2300      	movs	r3, #0
 8006f9c:	73fb      	strb	r3, [r7, #15]
			LimitCheckDisable = 1;
 8006f9e:	2301      	movs	r3, #1
 8006fa0:	73bb      	strb	r3, [r7, #14]
 8006fa2:	e00a      	b.n	8006fba <VL53L0X_SetLimitCheckEnable+0x56>

		} else {
			VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8006fa4:	887b      	ldrh	r3, [r7, #2]
 8006fa6:	687a      	ldr	r2, [r7, #4]
 8006fa8:	330c      	adds	r3, #12
 8006faa:	009b      	lsls	r3, r3, #2
 8006fac:	4413      	add	r3, r2
 8006fae:	685b      	ldr	r3, [r3, #4]
 8006fb0:	613b      	str	r3, [r7, #16]
				LimitCheckId, TempFix1616);
			LimitCheckDisable = 0;
 8006fb2:	2300      	movs	r3, #0
 8006fb4:	73bb      	strb	r3, [r7, #14]
			/* this to be sure to have either 0 or 1 */
			LimitCheckEnableInt = 1;
 8006fb6:	2301      	movs	r3, #1
 8006fb8:	73fb      	strb	r3, [r7, #15]
		}

		switch (LimitCheckId) {
 8006fba:	887b      	ldrh	r3, [r7, #2]
 8006fbc:	2b05      	cmp	r3, #5
 8006fbe:	d841      	bhi.n	8007044 <VL53L0X_SetLimitCheckEnable+0xe0>
 8006fc0:	a201      	add	r2, pc, #4	; (adr r2, 8006fc8 <VL53L0X_SetLimitCheckEnable+0x64>)
 8006fc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006fc6:	bf00      	nop
 8006fc8:	08006fe1 	.word	0x08006fe1
 8006fcc:	08006feb 	.word	0x08006feb
 8006fd0:	08007001 	.word	0x08007001
 8006fd4:	0800700b 	.word	0x0800700b
 8006fd8:	08007015 	.word	0x08007015
 8006fdc:	0800702d 	.word	0x0800702d

		case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	7bfa      	ldrb	r2, [r7, #15]
 8006fe4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				LimitCheckEnableInt);

			break;
 8006fe8:	e02e      	b.n	8007048 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:

			Status = VL53L0X_WrWord(Dev,
			VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(TempFix1616));
 8006fea:	693b      	ldr	r3, [r7, #16]
 8006fec:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 8006fee:	b29b      	uxth	r3, r3
 8006ff0:	461a      	mov	r2, r3
 8006ff2:	2144      	movs	r1, #68	; 0x44
 8006ff4:	6878      	ldr	r0, [r7, #4]
 8006ff6:	f004 f893 	bl	800b120 <VL53L0X_WrWord>
 8006ffa:	4603      	mov	r3, r0
 8006ffc:	75fb      	strb	r3, [r7, #23]

			break;
 8006ffe:	e023      	b.n	8007048 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	7bfa      	ldrb	r2, [r7, #15]
 8007004:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				LimitCheckEnableInt);

			break;
 8007008:	e01e      	b.n	8007048 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	7bfa      	ldrb	r2, [r7, #15]
 800700e:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				LimitCheckEnableInt);

			break;
 8007012:	e019      	b.n	8007048 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:

			Temp8 = (uint8_t)(LimitCheckDisable << 1);
 8007014:	7bbb      	ldrb	r3, [r7, #14]
 8007016:	005b      	lsls	r3, r3, #1
 8007018:	737b      	strb	r3, [r7, #13]
			Status = VL53L0X_UpdateByte(Dev,
 800701a:	7b7b      	ldrb	r3, [r7, #13]
 800701c:	22fe      	movs	r2, #254	; 0xfe
 800701e:	2160      	movs	r1, #96	; 0x60
 8007020:	6878      	ldr	r0, [r7, #4]
 8007022:	f004 f8a7 	bl	800b174 <VL53L0X_UpdateByte>
 8007026:	4603      	mov	r3, r0
 8007028:	75fb      	strb	r3, [r7, #23]
				VL53L0X_REG_MSRC_CONFIG_CONTROL,
				0xFE, Temp8);

			break;
 800702a:	e00d      	b.n	8007048 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:

			Temp8 = (uint8_t)(LimitCheckDisable << 4);
 800702c:	7bbb      	ldrb	r3, [r7, #14]
 800702e:	011b      	lsls	r3, r3, #4
 8007030:	737b      	strb	r3, [r7, #13]
			Status = VL53L0X_UpdateByte(Dev,
 8007032:	7b7b      	ldrb	r3, [r7, #13]
 8007034:	22ef      	movs	r2, #239	; 0xef
 8007036:	2160      	movs	r1, #96	; 0x60
 8007038:	6878      	ldr	r0, [r7, #4]
 800703a:	f004 f89b 	bl	800b174 <VL53L0X_UpdateByte>
 800703e:	4603      	mov	r3, r0
 8007040:	75fb      	strb	r3, [r7, #23]
				VL53L0X_REG_MSRC_CONFIG_CONTROL,
				0xEF, Temp8);

			break;
 8007042:	e001      	b.n	8007048 <VL53L0X_SetLimitCheckEnable+0xe4>


		default:
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 8007044:	23fc      	movs	r3, #252	; 0xfc
 8007046:	75fb      	strb	r3, [r7, #23]

		}

	}

	if (Status == VL53L0X_ERROR_NONE) {
 8007048:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800704c:	2b00      	cmp	r3, #0
 800704e:	d10f      	bne.n	8007070 <VL53L0X_SetLimitCheckEnable+0x10c>
		if (LimitCheckEnable == 0) {
 8007050:	787b      	ldrb	r3, [r7, #1]
 8007052:	2b00      	cmp	r3, #0
 8007054:	d106      	bne.n	8007064 <VL53L0X_SetLimitCheckEnable+0x100>
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8007056:	887b      	ldrh	r3, [r7, #2]
 8007058:	687a      	ldr	r2, [r7, #4]
 800705a:	4413      	add	r3, r2
 800705c:	2200      	movs	r2, #0
 800705e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8007062:	e005      	b.n	8007070 <VL53L0X_SetLimitCheckEnable+0x10c>
				LimitCheckId, 0);
		} else {
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8007064:	887b      	ldrh	r3, [r7, #2]
 8007066:	687a      	ldr	r2, [r7, #4]
 8007068:	4413      	add	r3, r2
 800706a:	2201      	movs	r2, #1
 800706c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
				LimitCheckId, 1);
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8007070:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007074:	4618      	mov	r0, r3
 8007076:	3718      	adds	r7, #24
 8007078:	46bd      	mov	sp, r7
 800707a:	bd80      	pop	{r7, pc}

0800707c <VL53L0X_GetLimitCheckEnable>:

VL53L0X_Error VL53L0X_GetLimitCheckEnable(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	uint8_t *pLimitCheckEnable)
{
 800707c:	b480      	push	{r7}
 800707e:	b087      	sub	sp, #28
 8007080:	af00      	add	r7, sp, #0
 8007082:	60f8      	str	r0, [r7, #12]
 8007084:	460b      	mov	r3, r1
 8007086:	607a      	str	r2, [r7, #4]
 8007088:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800708a:	2300      	movs	r3, #0
 800708c:	75fb      	strb	r3, [r7, #23]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	if (LimitCheckId >= VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS) {
 800708e:	897b      	ldrh	r3, [r7, #10]
 8007090:	2b05      	cmp	r3, #5
 8007092:	d905      	bls.n	80070a0 <VL53L0X_GetLimitCheckEnable+0x24>
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8007094:	23fc      	movs	r3, #252	; 0xfc
 8007096:	75fb      	strb	r3, [r7, #23]
		*pLimitCheckEnable = 0;
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	2200      	movs	r2, #0
 800709c:	701a      	strb	r2, [r3, #0]
 800709e:	e008      	b.n	80070b2 <VL53L0X_GetLimitCheckEnable+0x36>
	} else {
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 80070a0:	897b      	ldrh	r3, [r7, #10]
 80070a2:	68fa      	ldr	r2, [r7, #12]
 80070a4:	4413      	add	r3, r2
 80070a6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80070aa:	75bb      	strb	r3, [r7, #22]
			LimitCheckId, Temp8);
		*pLimitCheckEnable = Temp8;
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	7dba      	ldrb	r2, [r7, #22]
 80070b0:	701a      	strb	r2, [r3, #0]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80070b2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80070b6:	4618      	mov	r0, r3
 80070b8:	371c      	adds	r7, #28
 80070ba:	46bd      	mov	sp, r7
 80070bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070c0:	4770      	bx	lr
	...

080070c4 <VL53L0X_SetLimitCheckValue>:

VL53L0X_Error VL53L0X_SetLimitCheckValue(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	FixPoint1616_t LimitCheckValue)
{
 80070c4:	b580      	push	{r7, lr}
 80070c6:	b086      	sub	sp, #24
 80070c8:	af00      	add	r7, sp, #0
 80070ca:	60f8      	str	r0, [r7, #12]
 80070cc:	460b      	mov	r3, r1
 80070ce:	607a      	str	r2, [r7, #4]
 80070d0:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80070d2:	2300      	movs	r3, #0
 80070d4:	75fb      	strb	r3, [r7, #23]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksEnable, LimitCheckId,
 80070d6:	897b      	ldrh	r3, [r7, #10]
 80070d8:	68fa      	ldr	r2, [r7, #12]
 80070da:	4413      	add	r3, r2
 80070dc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80070e0:	75bb      	strb	r3, [r7, #22]
		Temp8);

	if (Temp8 == 0) { /* disabled write only internal value */
 80070e2:	7dbb      	ldrb	r3, [r7, #22]
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	d107      	bne.n	80070f8 <VL53L0X_SetLimitCheckValue+0x34>
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 80070e8:	897b      	ldrh	r3, [r7, #10]
 80070ea:	68fa      	ldr	r2, [r7, #12]
 80070ec:	330c      	adds	r3, #12
 80070ee:	009b      	lsls	r3, r3, #2
 80070f0:	4413      	add	r3, r2
 80070f2:	687a      	ldr	r2, [r7, #4]
 80070f4:	605a      	str	r2, [r3, #4]
 80070f6:	e040      	b.n	800717a <VL53L0X_SetLimitCheckValue+0xb6>
			LimitCheckId, LimitCheckValue);
	} else {

		switch (LimitCheckId) {
 80070f8:	897b      	ldrh	r3, [r7, #10]
 80070fa:	2b05      	cmp	r3, #5
 80070fc:	d830      	bhi.n	8007160 <VL53L0X_SetLimitCheckValue+0x9c>
 80070fe:	a201      	add	r2, pc, #4	; (adr r2, 8007104 <VL53L0X_SetLimitCheckValue+0x40>)
 8007100:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007104:	0800711d 	.word	0x0800711d
 8007108:	08007125 	.word	0x08007125
 800710c:	0800713b 	.word	0x0800713b
 8007110:	08007143 	.word	0x08007143
 8007114:	0800714b 	.word	0x0800714b
 8007118:	0800714b 	.word	0x0800714b

		case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	687a      	ldr	r2, [r7, #4]
 8007120:	635a      	str	r2, [r3, #52]	; 0x34
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				LimitCheckValue);
			break;
 8007122:	e01f      	b.n	8007164 <VL53L0X_SetLimitCheckValue+0xa0>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:

			Status = VL53L0X_WrWord(Dev,
			VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 8007128:	b29b      	uxth	r3, r3
 800712a:	461a      	mov	r2, r3
 800712c:	2144      	movs	r1, #68	; 0x44
 800712e:	68f8      	ldr	r0, [r7, #12]
 8007130:	f003 fff6 	bl	800b120 <VL53L0X_WrWord>
 8007134:	4603      	mov	r3, r0
 8007136:	75fb      	strb	r3, [r7, #23]
					LimitCheckValue));

			break;
 8007138:	e014      	b.n	8007164 <VL53L0X_SetLimitCheckValue+0xa0>

		case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	687a      	ldr	r2, [r7, #4]
 800713e:	63da      	str	r2, [r3, #60]	; 0x3c
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				LimitCheckValue);

			break;
 8007140:	e010      	b.n	8007164 <VL53L0X_SetLimitCheckValue+0xa0>

		case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	687a      	ldr	r2, [r7, #4]
 8007146:	641a      	str	r2, [r3, #64]	; 0x40
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				LimitCheckValue);

			break;
 8007148:	e00c      	b.n	8007164 <VL53L0X_SetLimitCheckValue+0xa0>
		case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:
		case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:

			Status = VL53L0X_WrWord(Dev,
				VL53L0X_REG_PRE_RANGE_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 800714e:	b29b      	uxth	r3, r3
 8007150:	461a      	mov	r2, r3
 8007152:	2164      	movs	r1, #100	; 0x64
 8007154:	68f8      	ldr	r0, [r7, #12]
 8007156:	f003 ffe3 	bl	800b120 <VL53L0X_WrWord>
 800715a:	4603      	mov	r3, r0
 800715c:	75fb      	strb	r3, [r7, #23]
					LimitCheckValue));

			break;
 800715e:	e001      	b.n	8007164 <VL53L0X_SetLimitCheckValue+0xa0>

		default:
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 8007160:	23fc      	movs	r3, #252	; 0xfc
 8007162:	75fb      	strb	r3, [r7, #23]

		}

		if (Status == VL53L0X_ERROR_NONE) {
 8007164:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007168:	2b00      	cmp	r3, #0
 800716a:	d106      	bne.n	800717a <VL53L0X_SetLimitCheckValue+0xb6>
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 800716c:	897b      	ldrh	r3, [r7, #10]
 800716e:	68fa      	ldr	r2, [r7, #12]
 8007170:	330c      	adds	r3, #12
 8007172:	009b      	lsls	r3, r3, #2
 8007174:	4413      	add	r3, r2
 8007176:	687a      	ldr	r2, [r7, #4]
 8007178:	605a      	str	r2, [r3, #4]
				LimitCheckId, LimitCheckValue);
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800717a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800717e:	4618      	mov	r0, r3
 8007180:	3718      	adds	r7, #24
 8007182:	46bd      	mov	sp, r7
 8007184:	bd80      	pop	{r7, pc}
 8007186:	bf00      	nop

08007188 <VL53L0X_GetLimitCheckValue>:

VL53L0X_Error VL53L0X_GetLimitCheckValue(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	FixPoint1616_t *pLimitCheckValue)
{
 8007188:	b580      	push	{r7, lr}
 800718a:	b088      	sub	sp, #32
 800718c:	af00      	add	r7, sp, #0
 800718e:	60f8      	str	r0, [r7, #12]
 8007190:	460b      	mov	r3, r1
 8007192:	607a      	str	r2, [r7, #4]
 8007194:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007196:	2300      	movs	r3, #0
 8007198:	77fb      	strb	r3, [r7, #31]
	uint8_t EnableZeroValue = 0;
 800719a:	2300      	movs	r3, #0
 800719c:	77bb      	strb	r3, [r7, #30]
	uint16_t Temp16;
	FixPoint1616_t TempFix1616;

	LOG_FUNCTION_START("");

	switch (LimitCheckId) {
 800719e:	897b      	ldrh	r3, [r7, #10]
 80071a0:	2b05      	cmp	r3, #5
 80071a2:	d847      	bhi.n	8007234 <VL53L0X_GetLimitCheckValue+0xac>
 80071a4:	a201      	add	r2, pc, #4	; (adr r2, 80071ac <VL53L0X_GetLimitCheckValue+0x24>)
 80071a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071aa:	bf00      	nop
 80071ac:	080071c5 	.word	0x080071c5
 80071b0:	080071d1 	.word	0x080071d1
 80071b4:	080071f7 	.word	0x080071f7
 80071b8:	08007203 	.word	0x08007203
 80071bc:	0800720f 	.word	0x0800720f
 80071c0:	0800720f 	.word	0x0800720f

	case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80071c8:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, TempFix1616);
		EnableZeroValue = 0;
 80071ca:	2300      	movs	r3, #0
 80071cc:	77bb      	strb	r3, [r7, #30]
		break;
 80071ce:	e033      	b.n	8007238 <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:
		Status = VL53L0X_RdWord(Dev,
 80071d0:	f107 0316 	add.w	r3, r7, #22
 80071d4:	461a      	mov	r2, r3
 80071d6:	2144      	movs	r1, #68	; 0x44
 80071d8:	68f8      	ldr	r0, [r7, #12]
 80071da:	f004 f829 	bl	800b230 <VL53L0X_RdWord>
 80071de:	4603      	mov	r3, r0
 80071e0:	77fb      	strb	r3, [r7, #31]
		VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
			&Temp16);
		if (Status == VL53L0X_ERROR_NONE)
 80071e2:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	d102      	bne.n	80071f0 <VL53L0X_GetLimitCheckValue+0x68>
			TempFix1616 = VL53L0X_FIXPOINT97TOFIXPOINT1616(Temp16);
 80071ea:	8afb      	ldrh	r3, [r7, #22]
 80071ec:	025b      	lsls	r3, r3, #9
 80071ee:	61bb      	str	r3, [r7, #24]


		EnableZeroValue = 1;
 80071f0:	2301      	movs	r3, #1
 80071f2:	77bb      	strb	r3, [r7, #30]
		break;
 80071f4:	e020      	b.n	8007238 <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80071fa:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, TempFix1616);
		EnableZeroValue = 0;
 80071fc:	2300      	movs	r3, #0
 80071fe:	77bb      	strb	r3, [r7, #30]
		break;
 8007200:	e01a      	b.n	8007238 <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007206:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD, TempFix1616);
		EnableZeroValue = 0;
 8007208:	2300      	movs	r3, #0
 800720a:	77bb      	strb	r3, [r7, #30]
		break;
 800720c:	e014      	b.n	8007238 <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:
	case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:
		Status = VL53L0X_RdWord(Dev,
 800720e:	f107 0316 	add.w	r3, r7, #22
 8007212:	461a      	mov	r2, r3
 8007214:	2164      	movs	r1, #100	; 0x64
 8007216:	68f8      	ldr	r0, [r7, #12]
 8007218:	f004 f80a 	bl	800b230 <VL53L0X_RdWord>
 800721c:	4603      	mov	r3, r0
 800721e:	77fb      	strb	r3, [r7, #31]
			VL53L0X_REG_PRE_RANGE_MIN_COUNT_RATE_RTN_LIMIT,
			&Temp16);
		if (Status == VL53L0X_ERROR_NONE)
 8007220:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8007224:	2b00      	cmp	r3, #0
 8007226:	d102      	bne.n	800722e <VL53L0X_GetLimitCheckValue+0xa6>
			TempFix1616 = VL53L0X_FIXPOINT97TOFIXPOINT1616(Temp16);
 8007228:	8afb      	ldrh	r3, [r7, #22]
 800722a:	025b      	lsls	r3, r3, #9
 800722c:	61bb      	str	r3, [r7, #24]


		EnableZeroValue = 0;
 800722e:	2300      	movs	r3, #0
 8007230:	77bb      	strb	r3, [r7, #30]
		break;
 8007232:	e001      	b.n	8007238 <VL53L0X_GetLimitCheckValue+0xb0>

	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8007234:	23fc      	movs	r3, #252	; 0xfc
 8007236:	77fb      	strb	r3, [r7, #31]

	}

	if (Status == VL53L0X_ERROR_NONE) {
 8007238:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800723c:	2b00      	cmp	r3, #0
 800723e:	d12a      	bne.n	8007296 <VL53L0X_GetLimitCheckValue+0x10e>

		if (EnableZeroValue == 1) {
 8007240:	7fbb      	ldrb	r3, [r7, #30]
 8007242:	2b01      	cmp	r3, #1
 8007244:	d124      	bne.n	8007290 <VL53L0X_GetLimitCheckValue+0x108>

			if (TempFix1616 == 0) {
 8007246:	69bb      	ldr	r3, [r7, #24]
 8007248:	2b00      	cmp	r3, #0
 800724a:	d110      	bne.n	800726e <VL53L0X_GetLimitCheckValue+0xe6>
				/* disabled: return value from memory */
				VL53L0X_GETARRAYPARAMETERFIELD(Dev,
 800724c:	897b      	ldrh	r3, [r7, #10]
 800724e:	68fa      	ldr	r2, [r7, #12]
 8007250:	330c      	adds	r3, #12
 8007252:	009b      	lsls	r3, r3, #2
 8007254:	4413      	add	r3, r2
 8007256:	685b      	ldr	r3, [r3, #4]
 8007258:	61bb      	str	r3, [r7, #24]
					LimitChecksValue, LimitCheckId,
					TempFix1616);
				*pLimitCheckValue = TempFix1616;
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	69ba      	ldr	r2, [r7, #24]
 800725e:	601a      	str	r2, [r3, #0]
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 8007260:	897b      	ldrh	r3, [r7, #10]
 8007262:	68fa      	ldr	r2, [r7, #12]
 8007264:	4413      	add	r3, r2
 8007266:	2200      	movs	r2, #0
 8007268:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 800726c:	e013      	b.n	8007296 <VL53L0X_GetLimitCheckValue+0x10e>
					LimitChecksEnable, LimitCheckId, 0);
			} else {
				*pLimitCheckValue = TempFix1616;
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	69ba      	ldr	r2, [r7, #24]
 8007272:	601a      	str	r2, [r3, #0]
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 8007274:	897b      	ldrh	r3, [r7, #10]
 8007276:	68fa      	ldr	r2, [r7, #12]
 8007278:	330c      	adds	r3, #12
 800727a:	009b      	lsls	r3, r3, #2
 800727c:	4413      	add	r3, r2
 800727e:	69ba      	ldr	r2, [r7, #24]
 8007280:	605a      	str	r2, [r3, #4]
					LimitChecksValue, LimitCheckId,
					TempFix1616);
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 8007282:	897b      	ldrh	r3, [r7, #10]
 8007284:	68fa      	ldr	r2, [r7, #12]
 8007286:	4413      	add	r3, r2
 8007288:	2201      	movs	r2, #1
 800728a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 800728e:	e002      	b.n	8007296 <VL53L0X_GetLimitCheckValue+0x10e>
					LimitChecksEnable, LimitCheckId, 1);
			}
		} else {
			*pLimitCheckValue = TempFix1616;
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	69ba      	ldr	r2, [r7, #24]
 8007294:	601a      	str	r2, [r3, #0]
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8007296:	f997 301f 	ldrsb.w	r3, [r7, #31]

}
 800729a:	4618      	mov	r0, r3
 800729c:	3720      	adds	r7, #32
 800729e:	46bd      	mov	sp, r7
 80072a0:	bd80      	pop	{r7, pc}
 80072a2:	bf00      	nop

080072a4 <VL53L0X_GetWrapAroundCheckEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_GetWrapAroundCheckEnable(VL53L0X_DEV Dev,
	uint8_t *pWrapAroundCheckEnable)
{
 80072a4:	b580      	push	{r7, lr}
 80072a6:	b084      	sub	sp, #16
 80072a8:	af00      	add	r7, sp, #0
 80072aa:	6078      	str	r0, [r7, #4]
 80072ac:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80072ae:	2300      	movs	r3, #0
 80072b0:	73fb      	strb	r3, [r7, #15]
	uint8_t data;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, &data);
 80072b2:	f107 030e 	add.w	r3, r7, #14
 80072b6:	461a      	mov	r2, r3
 80072b8:	2101      	movs	r1, #1
 80072ba:	6878      	ldr	r0, [r7, #4]
 80072bc:	f003 ff8e 	bl	800b1dc <VL53L0X_RdByte>
 80072c0:	4603      	mov	r3, r0
 80072c2:	73fb      	strb	r3, [r7, #15]
	if (Status == VL53L0X_ERROR_NONE) {
 80072c4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	d10e      	bne.n	80072ea <VL53L0X_GetWrapAroundCheckEnable+0x46>
		PALDevDataSet(Dev, SequenceConfig, data);
 80072cc:	7bba      	ldrb	r2, [r7, #14]
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
		if (data & (0x01 << 7))
 80072d4:	7bbb      	ldrb	r3, [r7, #14]
 80072d6:	b25b      	sxtb	r3, r3
 80072d8:	2b00      	cmp	r3, #0
 80072da:	da03      	bge.n	80072e4 <VL53L0X_GetWrapAroundCheckEnable+0x40>
			*pWrapAroundCheckEnable = 0x01;
 80072dc:	683b      	ldr	r3, [r7, #0]
 80072de:	2201      	movs	r2, #1
 80072e0:	701a      	strb	r2, [r3, #0]
 80072e2:	e002      	b.n	80072ea <VL53L0X_GetWrapAroundCheckEnable+0x46>
		else
			*pWrapAroundCheckEnable = 0x00;
 80072e4:	683b      	ldr	r3, [r7, #0]
 80072e6:	2200      	movs	r2, #0
 80072e8:	701a      	strb	r2, [r3, #0]
	}
	if (Status == VL53L0X_ERROR_NONE) {
 80072ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d104      	bne.n	80072fc <VL53L0X_GetWrapAroundCheckEnable+0x58>
		VL53L0X_SETPARAMETERFIELD(Dev, WrapAroundCheckEnable,
 80072f2:	683b      	ldr	r3, [r7, #0]
 80072f4:	781a      	ldrb	r2, [r3, #0]
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
			*pWrapAroundCheckEnable);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80072fc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007300:	4618      	mov	r0, r3
 8007302:	3710      	adds	r7, #16
 8007304:	46bd      	mov	sp, r7
 8007306:	bd80      	pop	{r7, pc}

08007308 <VL53L0X_PerformSingleMeasurement>:

/* End Group PAL Parameters Functions */

/* Group PAL Measurement Functions */
VL53L0X_Error VL53L0X_PerformSingleMeasurement(VL53L0X_DEV Dev)
{
 8007308:	b580      	push	{r7, lr}
 800730a:	b084      	sub	sp, #16
 800730c:	af00      	add	r7, sp, #0
 800730e:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007310:	2300      	movs	r3, #0
 8007312:	73fb      	strb	r3, [r7, #15]
	VL53L0X_DeviceModes DeviceMode;

	LOG_FUNCTION_START("");

	/* Get Current DeviceMode */
	Status = VL53L0X_GetDeviceMode(Dev, &DeviceMode);
 8007314:	f107 030e 	add.w	r3, r7, #14
 8007318:	4619      	mov	r1, r3
 800731a:	6878      	ldr	r0, [r7, #4]
 800731c:	f7ff fbd2 	bl	8006ac4 <VL53L0X_GetDeviceMode>
 8007320:	4603      	mov	r3, r0
 8007322:	73fb      	strb	r3, [r7, #15]

	/* Start immediately to run a single ranging measurement in case of
	 * single ranging or single histogram */
	if (Status == VL53L0X_ERROR_NONE
 8007324:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007328:	2b00      	cmp	r3, #0
 800732a:	d107      	bne.n	800733c <VL53L0X_PerformSingleMeasurement+0x34>
		&& DeviceMode == VL53L0X_DEVICEMODE_SINGLE_RANGING)
 800732c:	7bbb      	ldrb	r3, [r7, #14]
 800732e:	2b00      	cmp	r3, #0
 8007330:	d104      	bne.n	800733c <VL53L0X_PerformSingleMeasurement+0x34>
		Status = VL53L0X_StartMeasurement(Dev);
 8007332:	6878      	ldr	r0, [r7, #4]
 8007334:	f000 f898 	bl	8007468 <VL53L0X_StartMeasurement>
 8007338:	4603      	mov	r3, r0
 800733a:	73fb      	strb	r3, [r7, #15]


	if (Status == VL53L0X_ERROR_NONE)
 800733c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007340:	2b00      	cmp	r3, #0
 8007342:	d104      	bne.n	800734e <VL53L0X_PerformSingleMeasurement+0x46>
		Status = VL53L0X_measurement_poll_for_completion(Dev);
 8007344:	6878      	ldr	r0, [r7, #4]
 8007346:	f001 fb3f 	bl	80089c8 <VL53L0X_measurement_poll_for_completion>
 800734a:	4603      	mov	r3, r0
 800734c:	73fb      	strb	r3, [r7, #15]


	/* Change PAL State in case of single ranging or single histogram */
	if (Status == VL53L0X_ERROR_NONE
 800734e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007352:	2b00      	cmp	r3, #0
 8007354:	d106      	bne.n	8007364 <VL53L0X_PerformSingleMeasurement+0x5c>
		&& DeviceMode == VL53L0X_DEVICEMODE_SINGLE_RANGING)
 8007356:	7bbb      	ldrb	r3, [r7, #14]
 8007358:	2b00      	cmp	r3, #0
 800735a:	d103      	bne.n	8007364 <VL53L0X_PerformSingleMeasurement+0x5c>
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_IDLE);
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	2203      	movs	r2, #3
 8007360:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132


	LOG_FUNCTION_END(Status);
	return Status;
 8007364:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007368:	4618      	mov	r0, r3
 800736a:	3710      	adds	r7, #16
 800736c:	46bd      	mov	sp, r7
 800736e:	bd80      	pop	{r7, pc}

08007370 <VL53L0X_PerformRefCalibration>:
	return Status;
}

VL53L0X_Error VL53L0X_PerformRefCalibration(VL53L0X_DEV Dev, uint8_t *pVhvSettings,
	uint8_t *pPhaseCal)
{
 8007370:	b580      	push	{r7, lr}
 8007372:	b086      	sub	sp, #24
 8007374:	af00      	add	r7, sp, #0
 8007376:	60f8      	str	r0, [r7, #12]
 8007378:	60b9      	str	r1, [r7, #8]
 800737a:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800737c:	2300      	movs	r3, #0
 800737e:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");

	Status = VL53L0X_perform_ref_calibration(Dev, pVhvSettings,
 8007380:	2301      	movs	r3, #1
 8007382:	687a      	ldr	r2, [r7, #4]
 8007384:	68b9      	ldr	r1, [r7, #8]
 8007386:	68f8      	ldr	r0, [r7, #12]
 8007388:	f001 fae1 	bl	800894e <VL53L0X_perform_ref_calibration>
 800738c:	4603      	mov	r3, r0
 800738e:	75fb      	strb	r3, [r7, #23]
		pPhaseCal, 1);

	LOG_FUNCTION_END(Status);
	return Status;
 8007390:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007394:	4618      	mov	r0, r3
 8007396:	3718      	adds	r7, #24
 8007398:	46bd      	mov	sp, r7
 800739a:	bd80      	pop	{r7, pc}

0800739c <VL53L0X_CheckAndLoadInterruptSettings>:
	return Status;
}

VL53L0X_Error VL53L0X_CheckAndLoadInterruptSettings(VL53L0X_DEV Dev,
	uint8_t StartNotStopFlag)
{
 800739c:	b580      	push	{r7, lr}
 800739e:	b086      	sub	sp, #24
 80073a0:	af00      	add	r7, sp, #0
 80073a2:	6078      	str	r0, [r7, #4]
 80073a4:	460b      	mov	r3, r1
 80073a6:	70fb      	strb	r3, [r7, #3]
	uint8_t InterruptConfig;
	FixPoint1616_t ThresholdLow;
	FixPoint1616_t ThresholdHigh;
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80073a8:	2300      	movs	r3, #0
 80073aa:	75fb      	strb	r3, [r7, #23]

	InterruptConfig = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	f893 30da 	ldrb.w	r3, [r3, #218]	; 0xda
 80073b2:	75bb      	strb	r3, [r7, #22]
		Pin0GpioFunctionality);

	if ((InterruptConfig ==
 80073b4:	7dbb      	ldrb	r3, [r7, #22]
 80073b6:	2b01      	cmp	r3, #1
 80073b8:	d005      	beq.n	80073c6 <VL53L0X_CheckAndLoadInterruptSettings+0x2a>
		VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_LOW) ||
 80073ba:	7dbb      	ldrb	r3, [r7, #22]
 80073bc:	2b02      	cmp	r3, #2
 80073be:	d002      	beq.n	80073c6 <VL53L0X_CheckAndLoadInterruptSettings+0x2a>
		(InterruptConfig ==
		VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_HIGH) ||
 80073c0:	7dbb      	ldrb	r3, [r7, #22]
 80073c2:	2b03      	cmp	r3, #3
 80073c4:	d147      	bne.n	8007456 <VL53L0X_CheckAndLoadInterruptSettings+0xba>
		(InterruptConfig ==
		VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_OUT)) {

		Status = VL53L0X_GetInterruptThresholds(Dev,
 80073c6:	f107 030c 	add.w	r3, r7, #12
 80073ca:	f107 0210 	add.w	r2, r7, #16
 80073ce:	2101      	movs	r1, #1
 80073d0:	6878      	ldr	r0, [r7, #4]
 80073d2:	f000 fbc3 	bl	8007b5c <VL53L0X_GetInterruptThresholds>
 80073d6:	4603      	mov	r3, r0
 80073d8:	75fb      	strb	r3, [r7, #23]
			VL53L0X_DEVICEMODE_CONTINUOUS_RANGING,
			&ThresholdLow, &ThresholdHigh);

		if (((ThresholdLow > 255*65536) ||
 80073da:	693b      	ldr	r3, [r7, #16]
 80073dc:	f5b3 0f7f 	cmp.w	r3, #16711680	; 0xff0000
 80073e0:	d803      	bhi.n	80073ea <VL53L0X_CheckAndLoadInterruptSettings+0x4e>
			(ThresholdHigh > 255*65536)) &&
 80073e2:	68fb      	ldr	r3, [r7, #12]
		if (((ThresholdLow > 255*65536) ||
 80073e4:	f5b3 0f7f 	cmp.w	r3, #16711680	; 0xff0000
 80073e8:	d935      	bls.n	8007456 <VL53L0X_CheckAndLoadInterruptSettings+0xba>
			(ThresholdHigh > 255*65536)) &&
 80073ea:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d131      	bne.n	8007456 <VL53L0X_CheckAndLoadInterruptSettings+0xba>
			(Status == VL53L0X_ERROR_NONE)) {

			if (StartNotStopFlag != 0) {
 80073f2:	78fb      	ldrb	r3, [r7, #3]
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	d006      	beq.n	8007406 <VL53L0X_CheckAndLoadInterruptSettings+0x6a>
				Status = VL53L0X_load_tuning_settings(Dev,
 80073f8:	491a      	ldr	r1, [pc, #104]	; (8007464 <VL53L0X_CheckAndLoadInterruptSettings+0xc8>)
 80073fa:	6878      	ldr	r0, [r7, #4]
 80073fc:	f002 ff56 	bl	800a2ac <VL53L0X_load_tuning_settings>
 8007400:	4603      	mov	r3, r0
 8007402:	75fb      	strb	r3, [r7, #23]
 8007404:	e027      	b.n	8007456 <VL53L0X_CheckAndLoadInterruptSettings+0xba>
					InterruptThresholdSettings);
			} else {
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x04);
 8007406:	2204      	movs	r2, #4
 8007408:	21ff      	movs	r1, #255	; 0xff
 800740a:	6878      	ldr	r0, [r7, #4]
 800740c:	f003 fe64 	bl	800b0d8 <VL53L0X_WrByte>
 8007410:	4603      	mov	r3, r0
 8007412:	461a      	mov	r2, r3
 8007414:	7dfb      	ldrb	r3, [r7, #23]
 8007416:	4313      	orrs	r3, r2
 8007418:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0x70, 0x00);
 800741a:	2200      	movs	r2, #0
 800741c:	2170      	movs	r1, #112	; 0x70
 800741e:	6878      	ldr	r0, [r7, #4]
 8007420:	f003 fe5a 	bl	800b0d8 <VL53L0X_WrByte>
 8007424:	4603      	mov	r3, r0
 8007426:	461a      	mov	r2, r3
 8007428:	7dfb      	ldrb	r3, [r7, #23]
 800742a:	4313      	orrs	r3, r2
 800742c:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800742e:	2200      	movs	r2, #0
 8007430:	21ff      	movs	r1, #255	; 0xff
 8007432:	6878      	ldr	r0, [r7, #4]
 8007434:	f003 fe50 	bl	800b0d8 <VL53L0X_WrByte>
 8007438:	4603      	mov	r3, r0
 800743a:	461a      	mov	r2, r3
 800743c:	7dfb      	ldrb	r3, [r7, #23]
 800743e:	4313      	orrs	r3, r2
 8007440:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 8007442:	2200      	movs	r2, #0
 8007444:	2180      	movs	r1, #128	; 0x80
 8007446:	6878      	ldr	r0, [r7, #4]
 8007448:	f003 fe46 	bl	800b0d8 <VL53L0X_WrByte>
 800744c:	4603      	mov	r3, r0
 800744e:	461a      	mov	r2, r3
 8007450:	7dfb      	ldrb	r3, [r7, #23]
 8007452:	4313      	orrs	r3, r2
 8007454:	75fb      	strb	r3, [r7, #23]
		}


	}

	return Status;
 8007456:	f997 3017 	ldrsb.w	r3, [r7, #23]

}
 800745a:	4618      	mov	r0, r3
 800745c:	3718      	adds	r7, #24
 800745e:	46bd      	mov	sp, r7
 8007460:	bd80      	pop	{r7, pc}
 8007462:	bf00      	nop
 8007464:	20000104 	.word	0x20000104

08007468 <VL53L0X_StartMeasurement>:


VL53L0X_Error VL53L0X_StartMeasurement(VL53L0X_DEV Dev)
{
 8007468:	b580      	push	{r7, lr}
 800746a:	b086      	sub	sp, #24
 800746c:	af00      	add	r7, sp, #0
 800746e:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007470:	2300      	movs	r3, #0
 8007472:	75fb      	strb	r3, [r7, #23]
	VL53L0X_DeviceModes DeviceMode;
	uint8_t Byte;
	uint8_t StartStopByte = VL53L0X_REG_SYSRANGE_MODE_START_STOP;
 8007474:	2301      	movs	r3, #1
 8007476:	73fb      	strb	r3, [r7, #15]
	uint32_t LoopNb;
	LOG_FUNCTION_START("");

	/* Get Current DeviceMode */
	VL53L0X_GetDeviceMode(Dev, &DeviceMode);
 8007478:	f107 030e 	add.w	r3, r7, #14
 800747c:	4619      	mov	r1, r3
 800747e:	6878      	ldr	r0, [r7, #4]
 8007480:	f7ff fb20 	bl	8006ac4 <VL53L0X_GetDeviceMode>

	Status = VL53L0X_WrByte(Dev, 0x80, 0x01);
 8007484:	2201      	movs	r2, #1
 8007486:	2180      	movs	r1, #128	; 0x80
 8007488:	6878      	ldr	r0, [r7, #4]
 800748a:	f003 fe25 	bl	800b0d8 <VL53L0X_WrByte>
 800748e:	4603      	mov	r3, r0
 8007490:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8007492:	2201      	movs	r2, #1
 8007494:	21ff      	movs	r1, #255	; 0xff
 8007496:	6878      	ldr	r0, [r7, #4]
 8007498:	f003 fe1e 	bl	800b0d8 <VL53L0X_WrByte>
 800749c:	4603      	mov	r3, r0
 800749e:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x00, 0x00);
 80074a0:	2200      	movs	r2, #0
 80074a2:	2100      	movs	r1, #0
 80074a4:	6878      	ldr	r0, [r7, #4]
 80074a6:	f003 fe17 	bl	800b0d8 <VL53L0X_WrByte>
 80074aa:	4603      	mov	r3, r0
 80074ac:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x91, PALDevDataGet(Dev, StopVariable));
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	f893 313a 	ldrb.w	r3, [r3, #314]	; 0x13a
 80074b4:	461a      	mov	r2, r3
 80074b6:	2191      	movs	r1, #145	; 0x91
 80074b8:	6878      	ldr	r0, [r7, #4]
 80074ba:	f003 fe0d 	bl	800b0d8 <VL53L0X_WrByte>
 80074be:	4603      	mov	r3, r0
 80074c0:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x00, 0x01);
 80074c2:	2201      	movs	r2, #1
 80074c4:	2100      	movs	r1, #0
 80074c6:	6878      	ldr	r0, [r7, #4]
 80074c8:	f003 fe06 	bl	800b0d8 <VL53L0X_WrByte>
 80074cc:	4603      	mov	r3, r0
 80074ce:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 80074d0:	2200      	movs	r2, #0
 80074d2:	21ff      	movs	r1, #255	; 0xff
 80074d4:	6878      	ldr	r0, [r7, #4]
 80074d6:	f003 fdff 	bl	800b0d8 <VL53L0X_WrByte>
 80074da:	4603      	mov	r3, r0
 80074dc:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x80, 0x00);
 80074de:	2200      	movs	r2, #0
 80074e0:	2180      	movs	r1, #128	; 0x80
 80074e2:	6878      	ldr	r0, [r7, #4]
 80074e4:	f003 fdf8 	bl	800b0d8 <VL53L0X_WrByte>
 80074e8:	4603      	mov	r3, r0
 80074ea:	75fb      	strb	r3, [r7, #23]

	switch (DeviceMode) {
 80074ec:	7bbb      	ldrb	r3, [r7, #14]
 80074ee:	2b03      	cmp	r3, #3
 80074f0:	d054      	beq.n	800759c <VL53L0X_StartMeasurement+0x134>
 80074f2:	2b03      	cmp	r3, #3
 80074f4:	dc6c      	bgt.n	80075d0 <VL53L0X_StartMeasurement+0x168>
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	d002      	beq.n	8007500 <VL53L0X_StartMeasurement+0x98>
 80074fa:	2b01      	cmp	r3, #1
 80074fc:	d034      	beq.n	8007568 <VL53L0X_StartMeasurement+0x100>
 80074fe:	e067      	b.n	80075d0 <VL53L0X_StartMeasurement+0x168>
	case VL53L0X_DEVICEMODE_SINGLE_RANGING:
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START, 0x01);
 8007500:	2201      	movs	r2, #1
 8007502:	2100      	movs	r1, #0
 8007504:	6878      	ldr	r0, [r7, #4]
 8007506:	f003 fde7 	bl	800b0d8 <VL53L0X_WrByte>
 800750a:	4603      	mov	r3, r0
 800750c:	75fb      	strb	r3, [r7, #23]

		Byte = StartStopByte;
 800750e:	7bfb      	ldrb	r3, [r7, #15]
 8007510:	737b      	strb	r3, [r7, #13]
		if (Status == VL53L0X_ERROR_NONE) {
 8007512:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007516:	2b00      	cmp	r3, #0
 8007518:	d15d      	bne.n	80075d6 <VL53L0X_StartMeasurement+0x16e>
			/* Wait until start bit has been cleared */
			LoopNb = 0;
 800751a:	2300      	movs	r3, #0
 800751c:	613b      	str	r3, [r7, #16]
			do {
				if (LoopNb > 0)
 800751e:	693b      	ldr	r3, [r7, #16]
 8007520:	2b00      	cmp	r3, #0
 8007522:	d008      	beq.n	8007536 <VL53L0X_StartMeasurement+0xce>
					Status = VL53L0X_RdByte(Dev,
 8007524:	f107 030d 	add.w	r3, r7, #13
 8007528:	461a      	mov	r2, r3
 800752a:	2100      	movs	r1, #0
 800752c:	6878      	ldr	r0, [r7, #4]
 800752e:	f003 fe55 	bl	800b1dc <VL53L0X_RdByte>
 8007532:	4603      	mov	r3, r0
 8007534:	75fb      	strb	r3, [r7, #23]
					VL53L0X_REG_SYSRANGE_START, &Byte);
				LoopNb = LoopNb + 1;
 8007536:	693b      	ldr	r3, [r7, #16]
 8007538:	3301      	adds	r3, #1
 800753a:	613b      	str	r3, [r7, #16]
			} while (((Byte & StartStopByte) == StartStopByte)
 800753c:	7b7a      	ldrb	r2, [r7, #13]
 800753e:	7bfb      	ldrb	r3, [r7, #15]
 8007540:	4013      	ands	r3, r2
 8007542:	b2db      	uxtb	r3, r3
				&& (Status == VL53L0X_ERROR_NONE)
				&& (LoopNb < VL53L0X_DEFAULT_MAX_LOOP));
 8007544:	7bfa      	ldrb	r2, [r7, #15]
 8007546:	429a      	cmp	r2, r3
 8007548:	d107      	bne.n	800755a <VL53L0X_StartMeasurement+0xf2>
				&& (Status == VL53L0X_ERROR_NONE)
 800754a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800754e:	2b00      	cmp	r3, #0
 8007550:	d103      	bne.n	800755a <VL53L0X_StartMeasurement+0xf2>
				&& (LoopNb < VL53L0X_DEFAULT_MAX_LOOP));
 8007552:	693b      	ldr	r3, [r7, #16]
 8007554:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8007558:	d3e1      	bcc.n	800751e <VL53L0X_StartMeasurement+0xb6>

			if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP)
 800755a:	693b      	ldr	r3, [r7, #16]
 800755c:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8007560:	d339      	bcc.n	80075d6 <VL53L0X_StartMeasurement+0x16e>
				Status = VL53L0X_ERROR_TIME_OUT;
 8007562:	23f9      	movs	r3, #249	; 0xf9
 8007564:	75fb      	strb	r3, [r7, #23]

		}

		break;
 8007566:	e036      	b.n	80075d6 <VL53L0X_StartMeasurement+0x16e>
	case VL53L0X_DEVICEMODE_CONTINUOUS_RANGING:
		/* Back-to-back mode */

		/* Check if need to apply interrupt settings */
		if (Status == VL53L0X_ERROR_NONE)
 8007568:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800756c:	2b00      	cmp	r3, #0
 800756e:	d105      	bne.n	800757c <VL53L0X_StartMeasurement+0x114>
			Status = VL53L0X_CheckAndLoadInterruptSettings(Dev, 1);
 8007570:	2101      	movs	r1, #1
 8007572:	6878      	ldr	r0, [r7, #4]
 8007574:	f7ff ff12 	bl	800739c <VL53L0X_CheckAndLoadInterruptSettings>
 8007578:	4603      	mov	r3, r0
 800757a:	75fb      	strb	r3, [r7, #23]

		Status = VL53L0X_WrByte(Dev,
 800757c:	2202      	movs	r2, #2
 800757e:	2100      	movs	r1, #0
 8007580:	6878      	ldr	r0, [r7, #4]
 8007582:	f003 fda9 	bl	800b0d8 <VL53L0X_WrByte>
 8007586:	4603      	mov	r3, r0
 8007588:	75fb      	strb	r3, [r7, #23]
		VL53L0X_REG_SYSRANGE_START,
		VL53L0X_REG_SYSRANGE_MODE_BACKTOBACK);
		if (Status == VL53L0X_ERROR_NONE) {
 800758a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800758e:	2b00      	cmp	r3, #0
 8007590:	d123      	bne.n	80075da <VL53L0X_StartMeasurement+0x172>
			/* Set PAL State to Running */
			PALDevDataSet(Dev, PalState, VL53L0X_STATE_RUNNING);
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	2204      	movs	r2, #4
 8007596:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
		}
		break;
 800759a:	e01e      	b.n	80075da <VL53L0X_StartMeasurement+0x172>
	case VL53L0X_DEVICEMODE_CONTINUOUS_TIMED_RANGING:
		/* Continuous mode */
		/* Check if need to apply interrupt settings */
		if (Status == VL53L0X_ERROR_NONE)
 800759c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80075a0:	2b00      	cmp	r3, #0
 80075a2:	d105      	bne.n	80075b0 <VL53L0X_StartMeasurement+0x148>
			Status = VL53L0X_CheckAndLoadInterruptSettings(Dev, 1);
 80075a4:	2101      	movs	r1, #1
 80075a6:	6878      	ldr	r0, [r7, #4]
 80075a8:	f7ff fef8 	bl	800739c <VL53L0X_CheckAndLoadInterruptSettings>
 80075ac:	4603      	mov	r3, r0
 80075ae:	75fb      	strb	r3, [r7, #23]

		Status = VL53L0X_WrByte(Dev,
 80075b0:	2204      	movs	r2, #4
 80075b2:	2100      	movs	r1, #0
 80075b4:	6878      	ldr	r0, [r7, #4]
 80075b6:	f003 fd8f 	bl	800b0d8 <VL53L0X_WrByte>
 80075ba:	4603      	mov	r3, r0
 80075bc:	75fb      	strb	r3, [r7, #23]
		VL53L0X_REG_SYSRANGE_START,
		VL53L0X_REG_SYSRANGE_MODE_TIMED);

		if (Status == VL53L0X_ERROR_NONE) {
 80075be:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	d10b      	bne.n	80075de <VL53L0X_StartMeasurement+0x176>
			/* Set PAL State to Running */
			PALDevDataSet(Dev, PalState, VL53L0X_STATE_RUNNING);
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	2204      	movs	r2, #4
 80075ca:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
		}
		break;
 80075ce:	e006      	b.n	80075de <VL53L0X_StartMeasurement+0x176>
	default:
		/* Selected mode not supported */
		Status = VL53L0X_ERROR_MODE_NOT_SUPPORTED;
 80075d0:	23f8      	movs	r3, #248	; 0xf8
 80075d2:	75fb      	strb	r3, [r7, #23]
 80075d4:	e004      	b.n	80075e0 <VL53L0X_StartMeasurement+0x178>
		break;
 80075d6:	bf00      	nop
 80075d8:	e002      	b.n	80075e0 <VL53L0X_StartMeasurement+0x178>
		break;
 80075da:	bf00      	nop
 80075dc:	e000      	b.n	80075e0 <VL53L0X_StartMeasurement+0x178>
		break;
 80075de:	bf00      	nop
	}


	LOG_FUNCTION_END(Status);
	return Status;
 80075e0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80075e4:	4618      	mov	r0, r3
 80075e6:	3718      	adds	r7, #24
 80075e8:	46bd      	mov	sp, r7
 80075ea:	bd80      	pop	{r7, pc}

080075ec <VL53L0X_GetMeasurementDataReady>:
	return Status;
}

VL53L0X_Error VL53L0X_GetMeasurementDataReady(VL53L0X_DEV Dev,
	uint8_t *pMeasurementDataReady)
{
 80075ec:	b580      	push	{r7, lr}
 80075ee:	b084      	sub	sp, #16
 80075f0:	af00      	add	r7, sp, #0
 80075f2:	6078      	str	r0, [r7, #4]
 80075f4:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80075f6:	2300      	movs	r3, #0
 80075f8:	73fb      	strb	r3, [r7, #15]
	uint8_t SysRangeStatusRegister;
	uint8_t InterruptConfig;
	uint32_t InterruptMask;
	LOG_FUNCTION_START("");

	InterruptConfig = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	f893 30da 	ldrb.w	r3, [r3, #218]	; 0xda
 8007600:	73bb      	strb	r3, [r7, #14]
		Pin0GpioFunctionality);

	if (InterruptConfig ==
 8007602:	7bbb      	ldrb	r3, [r7, #14]
 8007604:	2b04      	cmp	r3, #4
 8007606:	d112      	bne.n	800762e <VL53L0X_GetMeasurementDataReady+0x42>
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY) {
		Status = VL53L0X_GetInterruptMaskStatus(Dev, &InterruptMask);
 8007608:	f107 0308 	add.w	r3, r7, #8
 800760c:	4619      	mov	r1, r3
 800760e:	6878      	ldr	r0, [r7, #4]
 8007610:	f000 fb1a 	bl	8007c48 <VL53L0X_GetInterruptMaskStatus>
 8007614:	4603      	mov	r3, r0
 8007616:	73fb      	strb	r3, [r7, #15]
		if (InterruptMask ==
 8007618:	68bb      	ldr	r3, [r7, #8]
 800761a:	2b04      	cmp	r3, #4
 800761c:	d103      	bne.n	8007626 <VL53L0X_GetMeasurementDataReady+0x3a>
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY)
			*pMeasurementDataReady = 1;
 800761e:	683b      	ldr	r3, [r7, #0]
 8007620:	2201      	movs	r2, #1
 8007622:	701a      	strb	r2, [r3, #0]
 8007624:	e01c      	b.n	8007660 <VL53L0X_GetMeasurementDataReady+0x74>
		else
			*pMeasurementDataReady = 0;
 8007626:	683b      	ldr	r3, [r7, #0]
 8007628:	2200      	movs	r2, #0
 800762a:	701a      	strb	r2, [r3, #0]
 800762c:	e018      	b.n	8007660 <VL53L0X_GetMeasurementDataReady+0x74>
	} else {
		Status = VL53L0X_RdByte(Dev, VL53L0X_REG_RESULT_RANGE_STATUS,
 800762e:	f107 030d 	add.w	r3, r7, #13
 8007632:	461a      	mov	r2, r3
 8007634:	2114      	movs	r1, #20
 8007636:	6878      	ldr	r0, [r7, #4]
 8007638:	f003 fdd0 	bl	800b1dc <VL53L0X_RdByte>
 800763c:	4603      	mov	r3, r0
 800763e:	73fb      	strb	r3, [r7, #15]
			&SysRangeStatusRegister);
		if (Status == VL53L0X_ERROR_NONE) {
 8007640:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007644:	2b00      	cmp	r3, #0
 8007646:	d10b      	bne.n	8007660 <VL53L0X_GetMeasurementDataReady+0x74>
			if (SysRangeStatusRegister & 0x01)
 8007648:	7b7b      	ldrb	r3, [r7, #13]
 800764a:	f003 0301 	and.w	r3, r3, #1
 800764e:	2b00      	cmp	r3, #0
 8007650:	d003      	beq.n	800765a <VL53L0X_GetMeasurementDataReady+0x6e>
				*pMeasurementDataReady = 1;
 8007652:	683b      	ldr	r3, [r7, #0]
 8007654:	2201      	movs	r2, #1
 8007656:	701a      	strb	r2, [r3, #0]
 8007658:	e002      	b.n	8007660 <VL53L0X_GetMeasurementDataReady+0x74>
			else
				*pMeasurementDataReady = 0;
 800765a:	683b      	ldr	r3, [r7, #0]
 800765c:	2200      	movs	r2, #0
 800765e:	701a      	strb	r2, [r3, #0]
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8007660:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007664:	4618      	mov	r0, r3
 8007666:	3710      	adds	r7, #16
 8007668:	46bd      	mov	sp, r7
 800766a:	bd80      	pop	{r7, pc}

0800766c <VL53L0X_GetRangingMeasurementData>:
}


VL53L0X_Error VL53L0X_GetRangingMeasurementData(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData)
{
 800766c:	b5b0      	push	{r4, r5, r7, lr}
 800766e:	b096      	sub	sp, #88	; 0x58
 8007670:	af02      	add	r7, sp, #8
 8007672:	6078      	str	r0, [r7, #4]
 8007674:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007676:	2300      	movs	r3, #0
 8007678:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	 * use multi read even if some registers are not useful, result will
	 * be more efficient
	 * start reading at 0x14 dec20
	 * end reading at 0x21 dec33 total 14 bytes to read
	 */
	Status = VL53L0X_ReadMulti(Dev, 0x14, localBuffer, 12);
 800767c:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8007680:	230c      	movs	r3, #12
 8007682:	2114      	movs	r1, #20
 8007684:	6878      	ldr	r0, [r7, #4]
 8007686:	f003 fcfb 	bl	800b080 <VL53L0X_ReadMulti>
 800768a:	4603      	mov	r3, r0
 800768c:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

	if (Status == VL53L0X_ERROR_NONE) {
 8007690:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8007694:	2b00      	cmp	r3, #0
 8007696:	f040 80d1 	bne.w	800783c <VL53L0X_GetRangingMeasurementData+0x1d0>

		pRangingMeasurementData->ZoneId = 0; /* Only one zone */
 800769a:	683b      	ldr	r3, [r7, #0]
 800769c:	2200      	movs	r2, #0
 800769e:	759a      	strb	r2, [r3, #22]
		pRangingMeasurementData->TimeStamp = 0; /* Not Implemented */
 80076a0:	683b      	ldr	r3, [r7, #0]
 80076a2:	2200      	movs	r2, #0
 80076a4:	601a      	str	r2, [r3, #0]

		tmpuint16 = VL53L0X_MAKEUINT16(localBuffer[11], localBuffer[10]);
 80076a6:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 80076aa:	b29b      	uxth	r3, r3
 80076ac:	021b      	lsls	r3, r3, #8
 80076ae:	b29a      	uxth	r2, r3
 80076b0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80076b4:	b29b      	uxth	r3, r3
 80076b6:	4413      	add	r3, r2
 80076b8:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
		/* cut1.1 if SYSTEM__RANGE_CONFIG if 1 range is 2bits fractional
		 *(format 11.2) else no fractional
		 */

		pRangingMeasurementData->MeasurementTimeUsec = 0;
 80076bc:	683b      	ldr	r3, [r7, #0]
 80076be:	2200      	movs	r2, #0
 80076c0:	605a      	str	r2, [r3, #4]

		SignalRate = VL53L0X_FIXPOINT97TOFIXPOINT1616(
 80076c2:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80076c6:	b29b      	uxth	r3, r3
 80076c8:	021b      	lsls	r3, r3, #8
 80076ca:	b29a      	uxth	r2, r3
 80076cc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80076d0:	b29b      	uxth	r3, r3
 80076d2:	4413      	add	r3, r2
 80076d4:	b29b      	uxth	r3, r3
 80076d6:	025b      	lsls	r3, r3, #9
 80076d8:	647b      	str	r3, [r7, #68]	; 0x44
			VL53L0X_MAKEUINT16(localBuffer[7], localBuffer[6]));
		/* peak_signal_count_rate_rtn_mcps */
		pRangingMeasurementData->SignalRateRtnMegaCps = SignalRate;
 80076da:	683b      	ldr	r3, [r7, #0]
 80076dc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80076de:	60da      	str	r2, [r3, #12]

		AmbientRate = VL53L0X_MAKEUINT16(localBuffer[9], localBuffer[8]);
 80076e0:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80076e4:	b29b      	uxth	r3, r3
 80076e6:	021b      	lsls	r3, r3, #8
 80076e8:	b29a      	uxth	r2, r3
 80076ea:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 80076ee:	b29b      	uxth	r3, r3
 80076f0:	4413      	add	r3, r2
 80076f2:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
		pRangingMeasurementData->AmbientRateRtnMegaCps =
			VL53L0X_FIXPOINT97TOFIXPOINT1616(AmbientRate);
 80076f6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80076fa:	025b      	lsls	r3, r3, #9
 80076fc:	461a      	mov	r2, r3
		pRangingMeasurementData->AmbientRateRtnMegaCps =
 80076fe:	683b      	ldr	r3, [r7, #0]
 8007700:	611a      	str	r2, [r3, #16]

		EffectiveSpadRtnCount = VL53L0X_MAKEUINT16(localBuffer[3],
 8007702:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8007706:	b29b      	uxth	r3, r3
 8007708:	021b      	lsls	r3, r3, #8
 800770a:	b29a      	uxth	r2, r3
 800770c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007710:	b29b      	uxth	r3, r3
 8007712:	4413      	add	r3, r2
 8007714:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
			localBuffer[2]);
		/* EffectiveSpadRtnCount is 8.8 format */
		pRangingMeasurementData->EffectiveSpadRtnCount =
 8007718:	683b      	ldr	r3, [r7, #0]
 800771a:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 800771e:	829a      	strh	r2, [r3, #20]
			EffectiveSpadRtnCount;

		DeviceRangeStatus = localBuffer[0];
 8007720:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8007724:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

		/* Get Linearity Corrective Gain */
		LinearityCorrectiveGain = PALDevDataGet(Dev,
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	f8b3 3152 	ldrh.w	r3, [r3, #338]	; 0x152
 800772e:	87bb      	strh	r3, [r7, #60]	; 0x3c
			LinearityCorrectiveGain);

		/* Get ranging configuration */
		RangeFractionalEnable = PALDevDataGet(Dev,
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	f893 3131 	ldrb.w	r3, [r3, #305]	; 0x131
 8007736:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
			RangeFractionalEnable);

		if (LinearityCorrectiveGain != 1000) {
 800773a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800773c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007740:	d046      	beq.n	80077d0 <VL53L0X_GetRangingMeasurementData+0x164>

			tmpuint16 = (uint16_t)((LinearityCorrectiveGain
				* tmpuint16 + 500) / 1000);
 8007742:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8007744:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 8007748:	fb02 f303 	mul.w	r3, r2, r3
 800774c:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8007750:	4a57      	ldr	r2, [pc, #348]	; (80078b0 <VL53L0X_GetRangingMeasurementData+0x244>)
 8007752:	fb82 1203 	smull	r1, r2, r2, r3
 8007756:	1192      	asrs	r2, r2, #6
 8007758:	17db      	asrs	r3, r3, #31
 800775a:	1ad3      	subs	r3, r2, r3
			tmpuint16 = (uint16_t)((LinearityCorrectiveGain
 800775c:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

			/* Implement Xtalk */
			VL53L0X_GETPARAMETERFIELD(Dev,
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	6a1b      	ldr	r3, [r3, #32]
 8007764:	873b      	strh	r3, [r7, #56]	; 0x38
				XTalkCompensationRateMegaCps,
				XTalkCompensationRateMegaCps);
			VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	7f1b      	ldrb	r3, [r3, #28]
 800776a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
				XTalkCompensationEnable);

			if (XTalkCompensationEnable) {
 800776e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007772:	2b00      	cmp	r3, #0
 8007774:	d02c      	beq.n	80077d0 <VL53L0X_GetRangingMeasurementData+0x164>

				if ((SignalRate
					- ((XTalkCompensationRateMegaCps
					* EffectiveSpadRtnCount) >> 8))
 8007776:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8007778:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 800777c:	fb02 f303 	mul.w	r3, r2, r3
 8007780:	121a      	asrs	r2, r3, #8
					<= 0) {
 8007782:	6c7b      	ldr	r3, [r7, #68]	; 0x44
				if ((SignalRate
 8007784:	429a      	cmp	r2, r3
 8007786:	d10d      	bne.n	80077a4 <VL53L0X_GetRangingMeasurementData+0x138>
					if (RangeFractionalEnable)
 8007788:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800778c:	2b00      	cmp	r3, #0
 800778e:	d004      	beq.n	800779a <VL53L0X_GetRangingMeasurementData+0x12e>
						XtalkRangeMilliMeter = 8888;
 8007790:	f242 23b8 	movw	r3, #8888	; 0x22b8
 8007794:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8007798:	e016      	b.n	80077c8 <VL53L0X_GetRangingMeasurementData+0x15c>
					else
						XtalkRangeMilliMeter = 8888
 800779a:	f648 23e0 	movw	r3, #35552	; 0x8ae0
 800779e:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 80077a2:	e011      	b.n	80077c8 <VL53L0X_GetRangingMeasurementData+0x15c>
							<< 2;
				} else {
					XtalkRangeMilliMeter =
					(tmpuint16 * SignalRate)
 80077a4:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80077a8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80077aa:	fb03 f202 	mul.w	r2, r3, r2
						/ (SignalRate
						- ((XTalkCompensationRateMegaCps
						* EffectiveSpadRtnCount)
 80077ae:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80077b0:	f8b7 1040 	ldrh.w	r1, [r7, #64]	; 0x40
 80077b4:	fb01 f303 	mul.w	r3, r1, r3
						>> 8));
 80077b8:	121b      	asrs	r3, r3, #8
 80077ba:	4619      	mov	r1, r3
						- ((XTalkCompensationRateMegaCps
 80077bc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80077be:	1a5b      	subs	r3, r3, r1
						/ (SignalRate
 80077c0:	fbb2 f3f3 	udiv	r3, r2, r3
					XtalkRangeMilliMeter =
 80077c4:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
				}

				tmpuint16 = XtalkRangeMilliMeter;
 80077c8:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80077cc:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
			}

		}

		if (RangeFractionalEnable) {
 80077d0:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	d00d      	beq.n	80077f4 <VL53L0X_GetRangingMeasurementData+0x188>
			pRangingMeasurementData->RangeMilliMeter =
				(uint16_t)((tmpuint16) >> 2);
 80077d8:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80077dc:	089b      	lsrs	r3, r3, #2
 80077de:	b29a      	uxth	r2, r3
			pRangingMeasurementData->RangeMilliMeter =
 80077e0:	683b      	ldr	r3, [r7, #0]
 80077e2:	811a      	strh	r2, [r3, #8]
			pRangingMeasurementData->RangeFractionalPart =
				(uint8_t)((tmpuint16 & 0x03) << 6);
 80077e4:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80077e8:	b2db      	uxtb	r3, r3
 80077ea:	019b      	lsls	r3, r3, #6
 80077ec:	b2da      	uxtb	r2, r3
			pRangingMeasurementData->RangeFractionalPart =
 80077ee:	683b      	ldr	r3, [r7, #0]
 80077f0:	75da      	strb	r2, [r3, #23]
 80077f2:	e006      	b.n	8007802 <VL53L0X_GetRangingMeasurementData+0x196>
		} else {
			pRangingMeasurementData->RangeMilliMeter = tmpuint16;
 80077f4:	683b      	ldr	r3, [r7, #0]
 80077f6:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 80077fa:	811a      	strh	r2, [r3, #8]
			pRangingMeasurementData->RangeFractionalPart = 0;
 80077fc:	683b      	ldr	r3, [r7, #0]
 80077fe:	2200      	movs	r2, #0
 8007800:	75da      	strb	r2, [r3, #23]
		 * For a standard definition of RangeStatus, this should
		 * return 0 in case of good result after a ranging
		 * The range status depends on the device so call a device
		 * specific function to obtain the right Status.
		 */
		Status |= VL53L0X_get_pal_range_status(Dev, DeviceRangeStatus,
 8007802:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8007806:	f897 103f 	ldrb.w	r1, [r7, #63]	; 0x3f
 800780a:	f107 0336 	add.w	r3, r7, #54	; 0x36
 800780e:	9301      	str	r3, [sp, #4]
 8007810:	683b      	ldr	r3, [r7, #0]
 8007812:	9300      	str	r3, [sp, #0]
 8007814:	4613      	mov	r3, r2
 8007816:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007818:	6878      	ldr	r0, [r7, #4]
 800781a:	f003 f9e5 	bl	800abe8 <VL53L0X_get_pal_range_status>
 800781e:	4603      	mov	r3, r0
 8007820:	461a      	mov	r2, r3
 8007822:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8007826:	4313      	orrs	r3, r2
 8007828:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
			SignalRate, EffectiveSpadRtnCount,
			pRangingMeasurementData, &PalRangeStatus);

		if (Status == VL53L0X_ERROR_NONE)
 800782c:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8007830:	2b00      	cmp	r3, #0
 8007832:	d103      	bne.n	800783c <VL53L0X_GetRangingMeasurementData+0x1d0>
			pRangingMeasurementData->RangeStatus = PalRangeStatus;
 8007834:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 8007838:	683b      	ldr	r3, [r7, #0]
 800783a:	761a      	strb	r2, [r3, #24]

	}

	if (Status == VL53L0X_ERROR_NONE) {
 800783c:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8007840:	2b00      	cmp	r3, #0
 8007842:	d12f      	bne.n	80078a4 <VL53L0X_GetRangingMeasurementData+0x238>
		/* Copy last read data into Dev buffer */
		LastRangeDataBuffer = PALDevDataGet(Dev, LastRangeMeasure);
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	f107 040c 	add.w	r4, r7, #12
 800784a:	f103 0550 	add.w	r5, r3, #80	; 0x50
 800784e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007850:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007852:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8007856:	e884 0007 	stmia.w	r4, {r0, r1, r2}

		LastRangeDataBuffer.RangeMilliMeter =
			pRangingMeasurementData->RangeMilliMeter;
 800785a:	683b      	ldr	r3, [r7, #0]
 800785c:	891b      	ldrh	r3, [r3, #8]
		LastRangeDataBuffer.RangeMilliMeter =
 800785e:	82bb      	strh	r3, [r7, #20]
		LastRangeDataBuffer.RangeFractionalPart =
			pRangingMeasurementData->RangeFractionalPart;
 8007860:	683b      	ldr	r3, [r7, #0]
 8007862:	7ddb      	ldrb	r3, [r3, #23]
		LastRangeDataBuffer.RangeFractionalPart =
 8007864:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
		LastRangeDataBuffer.RangeDMaxMilliMeter =
			pRangingMeasurementData->RangeDMaxMilliMeter;
 8007868:	683b      	ldr	r3, [r7, #0]
 800786a:	895b      	ldrh	r3, [r3, #10]
		LastRangeDataBuffer.RangeDMaxMilliMeter =
 800786c:	82fb      	strh	r3, [r7, #22]
		LastRangeDataBuffer.MeasurementTimeUsec =
			pRangingMeasurementData->MeasurementTimeUsec;
 800786e:	683b      	ldr	r3, [r7, #0]
 8007870:	685b      	ldr	r3, [r3, #4]
		LastRangeDataBuffer.MeasurementTimeUsec =
 8007872:	613b      	str	r3, [r7, #16]
		LastRangeDataBuffer.SignalRateRtnMegaCps =
			pRangingMeasurementData->SignalRateRtnMegaCps;
 8007874:	683b      	ldr	r3, [r7, #0]
 8007876:	68db      	ldr	r3, [r3, #12]
		LastRangeDataBuffer.SignalRateRtnMegaCps =
 8007878:	61bb      	str	r3, [r7, #24]
		LastRangeDataBuffer.AmbientRateRtnMegaCps =
			pRangingMeasurementData->AmbientRateRtnMegaCps;
 800787a:	683b      	ldr	r3, [r7, #0]
 800787c:	691b      	ldr	r3, [r3, #16]
		LastRangeDataBuffer.AmbientRateRtnMegaCps =
 800787e:	61fb      	str	r3, [r7, #28]
		LastRangeDataBuffer.EffectiveSpadRtnCount =
			pRangingMeasurementData->EffectiveSpadRtnCount;
 8007880:	683b      	ldr	r3, [r7, #0]
 8007882:	8a9b      	ldrh	r3, [r3, #20]
		LastRangeDataBuffer.EffectiveSpadRtnCount =
 8007884:	843b      	strh	r3, [r7, #32]
		LastRangeDataBuffer.RangeStatus =
			pRangingMeasurementData->RangeStatus;
 8007886:	683b      	ldr	r3, [r7, #0]
 8007888:	7e1b      	ldrb	r3, [r3, #24]
		LastRangeDataBuffer.RangeStatus =
 800788a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24

		PALDevDataSet(Dev, LastRangeMeasure, LastRangeDataBuffer);
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	f103 0450 	add.w	r4, r3, #80	; 0x50
 8007894:	f107 050c 	add.w	r5, r7, #12
 8007898:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800789a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800789c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80078a0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80078a4:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
}
 80078a8:	4618      	mov	r0, r3
 80078aa:	3750      	adds	r7, #80	; 0x50
 80078ac:	46bd      	mov	sp, r7
 80078ae:	bdb0      	pop	{r4, r5, r7, pc}
 80078b0:	10624dd3 	.word	0x10624dd3

080078b4 <VL53L0X_PerformSingleRangingMeasurement>:
	return Status;
}

VL53L0X_Error VL53L0X_PerformSingleRangingMeasurement(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData)
{
 80078b4:	b580      	push	{r7, lr}
 80078b6:	b084      	sub	sp, #16
 80078b8:	af00      	add	r7, sp, #0
 80078ba:	6078      	str	r0, [r7, #4]
 80078bc:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80078be:	2300      	movs	r3, #0
 80078c0:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	/* This function will do a complete single ranging
	 * Here we fix the mode! */
	Status = VL53L0X_SetDeviceMode(Dev, VL53L0X_DEVICEMODE_SINGLE_RANGING);
 80078c2:	2100      	movs	r1, #0
 80078c4:	6878      	ldr	r0, [r7, #4]
 80078c6:	f7ff f8d1 	bl	8006a6c <VL53L0X_SetDeviceMode>
 80078ca:	4603      	mov	r3, r0
 80078cc:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 80078ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	d104      	bne.n	80078e0 <VL53L0X_PerformSingleRangingMeasurement+0x2c>
		Status = VL53L0X_PerformSingleMeasurement(Dev);
 80078d6:	6878      	ldr	r0, [r7, #4]
 80078d8:	f7ff fd16 	bl	8007308 <VL53L0X_PerformSingleMeasurement>
 80078dc:	4603      	mov	r3, r0
 80078de:	73fb      	strb	r3, [r7, #15]


	if (Status == VL53L0X_ERROR_NONE)
 80078e0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	d105      	bne.n	80078f4 <VL53L0X_PerformSingleRangingMeasurement+0x40>
		Status = VL53L0X_GetRangingMeasurementData(Dev,
 80078e8:	6839      	ldr	r1, [r7, #0]
 80078ea:	6878      	ldr	r0, [r7, #4]
 80078ec:	f7ff febe 	bl	800766c <VL53L0X_GetRangingMeasurementData>
 80078f0:	4603      	mov	r3, r0
 80078f2:	73fb      	strb	r3, [r7, #15]
			pRangingMeasurementData);


	if (Status == VL53L0X_ERROR_NONE)
 80078f4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	d105      	bne.n	8007908 <VL53L0X_PerformSingleRangingMeasurement+0x54>
		Status = VL53L0X_ClearInterruptMask(Dev, 0);
 80078fc:	2100      	movs	r1, #0
 80078fe:	6878      	ldr	r0, [r7, #4]
 8007900:	f000 f962 	bl	8007bc8 <VL53L0X_ClearInterruptMask>
 8007904:	4603      	mov	r3, r0
 8007906:	73fb      	strb	r3, [r7, #15]


	LOG_FUNCTION_END(Status);
	return Status;
 8007908:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800790c:	4618      	mov	r0, r3
 800790e:	3710      	adds	r7, #16
 8007910:	46bd      	mov	sp, r7
 8007912:	bd80      	pop	{r7, pc}

08007914 <VL53L0X_SetGpioConfig>:
/* End Group PAL Measurement Functions */

VL53L0X_Error VL53L0X_SetGpioConfig(VL53L0X_DEV Dev, uint8_t Pin,
	VL53L0X_DeviceModes DeviceMode, VL53L0X_GpioFunctionality Functionality,
	VL53L0X_InterruptPolarity Polarity)
{
 8007914:	b580      	push	{r7, lr}
 8007916:	b084      	sub	sp, #16
 8007918:	af00      	add	r7, sp, #0
 800791a:	6078      	str	r0, [r7, #4]
 800791c:	4608      	mov	r0, r1
 800791e:	4611      	mov	r1, r2
 8007920:	461a      	mov	r2, r3
 8007922:	4603      	mov	r3, r0
 8007924:	70fb      	strb	r3, [r7, #3]
 8007926:	460b      	mov	r3, r1
 8007928:	70bb      	strb	r3, [r7, #2]
 800792a:	4613      	mov	r3, r2
 800792c:	707b      	strb	r3, [r7, #1]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800792e:	2300      	movs	r3, #0
 8007930:	73fb      	strb	r3, [r7, #15]
	uint8_t data;

	LOG_FUNCTION_START("");

	if (Pin != 0) {
 8007932:	78fb      	ldrb	r3, [r7, #3]
 8007934:	2b00      	cmp	r3, #0
 8007936:	d002      	beq.n	800793e <VL53L0X_SetGpioConfig+0x2a>
		Status = VL53L0X_ERROR_GPIO_NOT_EXISTING;
 8007938:	23f6      	movs	r3, #246	; 0xf6
 800793a:	73fb      	strb	r3, [r7, #15]
 800793c:	e107      	b.n	8007b4e <VL53L0X_SetGpioConfig+0x23a>
	} else if (DeviceMode == VL53L0X_DEVICEMODE_GPIO_DRIVE) {
 800793e:	78bb      	ldrb	r3, [r7, #2]
 8007940:	2b14      	cmp	r3, #20
 8007942:	d110      	bne.n	8007966 <VL53L0X_SetGpioConfig+0x52>
		if (Polarity == VL53L0X_INTERRUPTPOLARITY_LOW)
 8007944:	7e3b      	ldrb	r3, [r7, #24]
 8007946:	2b00      	cmp	r3, #0
 8007948:	d102      	bne.n	8007950 <VL53L0X_SetGpioConfig+0x3c>
			data = 0x10;
 800794a:	2310      	movs	r3, #16
 800794c:	73bb      	strb	r3, [r7, #14]
 800794e:	e001      	b.n	8007954 <VL53L0X_SetGpioConfig+0x40>
		else
			data = 1;
 8007950:	2301      	movs	r3, #1
 8007952:	73bb      	strb	r3, [r7, #14]

		Status = VL53L0X_WrByte(Dev,
 8007954:	7bbb      	ldrb	r3, [r7, #14]
 8007956:	461a      	mov	r2, r3
 8007958:	2184      	movs	r1, #132	; 0x84
 800795a:	6878      	ldr	r0, [r7, #4]
 800795c:	f003 fbbc 	bl	800b0d8 <VL53L0X_WrByte>
 8007960:	4603      	mov	r3, r0
 8007962:	73fb      	strb	r3, [r7, #15]
 8007964:	e0f3      	b.n	8007b4e <VL53L0X_SetGpioConfig+0x23a>
		VL53L0X_REG_GPIO_HV_MUX_ACTIVE_HIGH, data);

	} else if (DeviceMode == VL53L0X_DEVICEMODE_GPIO_OSC) {
 8007966:	78bb      	ldrb	r3, [r7, #2]
 8007968:	2b15      	cmp	r3, #21
 800796a:	f040 8097 	bne.w	8007a9c <VL53L0X_SetGpioConfig+0x188>

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 800796e:	2201      	movs	r2, #1
 8007970:	21ff      	movs	r1, #255	; 0xff
 8007972:	6878      	ldr	r0, [r7, #4]
 8007974:	f003 fbb0 	bl	800b0d8 <VL53L0X_WrByte>
 8007978:	4603      	mov	r3, r0
 800797a:	461a      	mov	r2, r3
 800797c:	7bfb      	ldrb	r3, [r7, #15]
 800797e:	4313      	orrs	r3, r2
 8007980:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 8007982:	2200      	movs	r2, #0
 8007984:	2100      	movs	r1, #0
 8007986:	6878      	ldr	r0, [r7, #4]
 8007988:	f003 fba6 	bl	800b0d8 <VL53L0X_WrByte>
 800798c:	4603      	mov	r3, r0
 800798e:	461a      	mov	r2, r3
 8007990:	7bfb      	ldrb	r3, [r7, #15]
 8007992:	4313      	orrs	r3, r2
 8007994:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 8007996:	2200      	movs	r2, #0
 8007998:	21ff      	movs	r1, #255	; 0xff
 800799a:	6878      	ldr	r0, [r7, #4]
 800799c:	f003 fb9c 	bl	800b0d8 <VL53L0X_WrByte>
 80079a0:	4603      	mov	r3, r0
 80079a2:	461a      	mov	r2, r3
 80079a4:	7bfb      	ldrb	r3, [r7, #15]
 80079a6:	4313      	orrs	r3, r2
 80079a8:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 80079aa:	2201      	movs	r2, #1
 80079ac:	2180      	movs	r1, #128	; 0x80
 80079ae:	6878      	ldr	r0, [r7, #4]
 80079b0:	f003 fb92 	bl	800b0d8 <VL53L0X_WrByte>
 80079b4:	4603      	mov	r3, r0
 80079b6:	461a      	mov	r2, r3
 80079b8:	7bfb      	ldrb	r3, [r7, #15]
 80079ba:	4313      	orrs	r3, r2
 80079bc:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x85, 0x02);
 80079be:	2202      	movs	r2, #2
 80079c0:	2185      	movs	r1, #133	; 0x85
 80079c2:	6878      	ldr	r0, [r7, #4]
 80079c4:	f003 fb88 	bl	800b0d8 <VL53L0X_WrByte>
 80079c8:	4603      	mov	r3, r0
 80079ca:	461a      	mov	r2, r3
 80079cc:	7bfb      	ldrb	r3, [r7, #15]
 80079ce:	4313      	orrs	r3, r2
 80079d0:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x04);
 80079d2:	2204      	movs	r2, #4
 80079d4:	21ff      	movs	r1, #255	; 0xff
 80079d6:	6878      	ldr	r0, [r7, #4]
 80079d8:	f003 fb7e 	bl	800b0d8 <VL53L0X_WrByte>
 80079dc:	4603      	mov	r3, r0
 80079de:	461a      	mov	r2, r3
 80079e0:	7bfb      	ldrb	r3, [r7, #15]
 80079e2:	4313      	orrs	r3, r2
 80079e4:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xcd, 0x00);
 80079e6:	2200      	movs	r2, #0
 80079e8:	21cd      	movs	r1, #205	; 0xcd
 80079ea:	6878      	ldr	r0, [r7, #4]
 80079ec:	f003 fb74 	bl	800b0d8 <VL53L0X_WrByte>
 80079f0:	4603      	mov	r3, r0
 80079f2:	461a      	mov	r2, r3
 80079f4:	7bfb      	ldrb	r3, [r7, #15]
 80079f6:	4313      	orrs	r3, r2
 80079f8:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xcc, 0x11);
 80079fa:	2211      	movs	r2, #17
 80079fc:	21cc      	movs	r1, #204	; 0xcc
 80079fe:	6878      	ldr	r0, [r7, #4]
 8007a00:	f003 fb6a 	bl	800b0d8 <VL53L0X_WrByte>
 8007a04:	4603      	mov	r3, r0
 8007a06:	461a      	mov	r2, r3
 8007a08:	7bfb      	ldrb	r3, [r7, #15]
 8007a0a:	4313      	orrs	r3, r2
 8007a0c:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x07);
 8007a0e:	2207      	movs	r2, #7
 8007a10:	21ff      	movs	r1, #255	; 0xff
 8007a12:	6878      	ldr	r0, [r7, #4]
 8007a14:	f003 fb60 	bl	800b0d8 <VL53L0X_WrByte>
 8007a18:	4603      	mov	r3, r0
 8007a1a:	461a      	mov	r2, r3
 8007a1c:	7bfb      	ldrb	r3, [r7, #15]
 8007a1e:	4313      	orrs	r3, r2
 8007a20:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xbe, 0x00);
 8007a22:	2200      	movs	r2, #0
 8007a24:	21be      	movs	r1, #190	; 0xbe
 8007a26:	6878      	ldr	r0, [r7, #4]
 8007a28:	f003 fb56 	bl	800b0d8 <VL53L0X_WrByte>
 8007a2c:	4603      	mov	r3, r0
 8007a2e:	461a      	mov	r2, r3
 8007a30:	7bfb      	ldrb	r3, [r7, #15]
 8007a32:	4313      	orrs	r3, r2
 8007a34:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x06);
 8007a36:	2206      	movs	r2, #6
 8007a38:	21ff      	movs	r1, #255	; 0xff
 8007a3a:	6878      	ldr	r0, [r7, #4]
 8007a3c:	f003 fb4c 	bl	800b0d8 <VL53L0X_WrByte>
 8007a40:	4603      	mov	r3, r0
 8007a42:	461a      	mov	r2, r3
 8007a44:	7bfb      	ldrb	r3, [r7, #15]
 8007a46:	4313      	orrs	r3, r2
 8007a48:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xcc, 0x09);
 8007a4a:	2209      	movs	r2, #9
 8007a4c:	21cc      	movs	r1, #204	; 0xcc
 8007a4e:	6878      	ldr	r0, [r7, #4]
 8007a50:	f003 fb42 	bl	800b0d8 <VL53L0X_WrByte>
 8007a54:	4603      	mov	r3, r0
 8007a56:	461a      	mov	r2, r3
 8007a58:	7bfb      	ldrb	r3, [r7, #15]
 8007a5a:	4313      	orrs	r3, r2
 8007a5c:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 8007a5e:	2200      	movs	r2, #0
 8007a60:	21ff      	movs	r1, #255	; 0xff
 8007a62:	6878      	ldr	r0, [r7, #4]
 8007a64:	f003 fb38 	bl	800b0d8 <VL53L0X_WrByte>
 8007a68:	4603      	mov	r3, r0
 8007a6a:	461a      	mov	r2, r3
 8007a6c:	7bfb      	ldrb	r3, [r7, #15]
 8007a6e:	4313      	orrs	r3, r2
 8007a70:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 8007a72:	2201      	movs	r2, #1
 8007a74:	21ff      	movs	r1, #255	; 0xff
 8007a76:	6878      	ldr	r0, [r7, #4]
 8007a78:	f003 fb2e 	bl	800b0d8 <VL53L0X_WrByte>
 8007a7c:	4603      	mov	r3, r0
 8007a7e:	461a      	mov	r2, r3
 8007a80:	7bfb      	ldrb	r3, [r7, #15]
 8007a82:	4313      	orrs	r3, r2
 8007a84:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 8007a86:	2200      	movs	r2, #0
 8007a88:	2100      	movs	r1, #0
 8007a8a:	6878      	ldr	r0, [r7, #4]
 8007a8c:	f003 fb24 	bl	800b0d8 <VL53L0X_WrByte>
 8007a90:	4603      	mov	r3, r0
 8007a92:	461a      	mov	r2, r3
 8007a94:	7bfb      	ldrb	r3, [r7, #15]
 8007a96:	4313      	orrs	r3, r2
 8007a98:	73fb      	strb	r3, [r7, #15]
 8007a9a:	e058      	b.n	8007b4e <VL53L0X_SetGpioConfig+0x23a>

	} else {

		if (Status == VL53L0X_ERROR_NONE) {
 8007a9c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	d121      	bne.n	8007ae8 <VL53L0X_SetGpioConfig+0x1d4>
			switch (Functionality) {
 8007aa4:	787b      	ldrb	r3, [r7, #1]
 8007aa6:	2b04      	cmp	r3, #4
 8007aa8:	d81b      	bhi.n	8007ae2 <VL53L0X_SetGpioConfig+0x1ce>
 8007aaa:	a201      	add	r2, pc, #4	; (adr r2, 8007ab0 <VL53L0X_SetGpioConfig+0x19c>)
 8007aac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ab0:	08007ac5 	.word	0x08007ac5
 8007ab4:	08007acb 	.word	0x08007acb
 8007ab8:	08007ad1 	.word	0x08007ad1
 8007abc:	08007ad7 	.word	0x08007ad7
 8007ac0:	08007add 	.word	0x08007add
			case VL53L0X_GPIOFUNCTIONALITY_OFF:
				data = 0x00;
 8007ac4:	2300      	movs	r3, #0
 8007ac6:	73bb      	strb	r3, [r7, #14]
				break;
 8007ac8:	e00f      	b.n	8007aea <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_LOW:
				data = 0x01;
 8007aca:	2301      	movs	r3, #1
 8007acc:	73bb      	strb	r3, [r7, #14]
				break;
 8007ace:	e00c      	b.n	8007aea <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_HIGH:
				data = 0x02;
 8007ad0:	2302      	movs	r3, #2
 8007ad2:	73bb      	strb	r3, [r7, #14]
				break;
 8007ad4:	e009      	b.n	8007aea <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_OUT:
				data = 0x03;
 8007ad6:	2303      	movs	r3, #3
 8007ad8:	73bb      	strb	r3, [r7, #14]
				break;
 8007ada:	e006      	b.n	8007aea <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_NEW_MEASURE_READY:
				data = 0x04;
 8007adc:	2304      	movs	r3, #4
 8007ade:	73bb      	strb	r3, [r7, #14]
				break;
 8007ae0:	e003      	b.n	8007aea <VL53L0X_SetGpioConfig+0x1d6>
			default:
				Status =
 8007ae2:	23f5      	movs	r3, #245	; 0xf5
 8007ae4:	73fb      	strb	r3, [r7, #15]
 8007ae6:	e000      	b.n	8007aea <VL53L0X_SetGpioConfig+0x1d6>
				VL53L0X_ERROR_GPIO_FUNCTIONALITY_NOT_SUPPORTED;
			}
		}
 8007ae8:	bf00      	nop

		if (Status == VL53L0X_ERROR_NONE)
 8007aea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	d107      	bne.n	8007b02 <VL53L0X_SetGpioConfig+0x1ee>
			Status = VL53L0X_WrByte(Dev,
 8007af2:	7bbb      	ldrb	r3, [r7, #14]
 8007af4:	461a      	mov	r2, r3
 8007af6:	210a      	movs	r1, #10
 8007af8:	6878      	ldr	r0, [r7, #4]
 8007afa:	f003 faed 	bl	800b0d8 <VL53L0X_WrByte>
 8007afe:	4603      	mov	r3, r0
 8007b00:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_SYSTEM_INTERRUPT_CONFIG_GPIO, data);

		if (Status == VL53L0X_ERROR_NONE) {
 8007b02:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	d10f      	bne.n	8007b2a <VL53L0X_SetGpioConfig+0x216>
			if (Polarity == VL53L0X_INTERRUPTPOLARITY_LOW)
 8007b0a:	7e3b      	ldrb	r3, [r7, #24]
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	d102      	bne.n	8007b16 <VL53L0X_SetGpioConfig+0x202>
				data = 0;
 8007b10:	2300      	movs	r3, #0
 8007b12:	73bb      	strb	r3, [r7, #14]
 8007b14:	e001      	b.n	8007b1a <VL53L0X_SetGpioConfig+0x206>
			else
				data = (uint8_t)(1 << 4);
 8007b16:	2310      	movs	r3, #16
 8007b18:	73bb      	strb	r3, [r7, #14]

			Status = VL53L0X_UpdateByte(Dev,
 8007b1a:	7bbb      	ldrb	r3, [r7, #14]
 8007b1c:	22ef      	movs	r2, #239	; 0xef
 8007b1e:	2184      	movs	r1, #132	; 0x84
 8007b20:	6878      	ldr	r0, [r7, #4]
 8007b22:	f003 fb27 	bl	800b174 <VL53L0X_UpdateByte>
 8007b26:	4603      	mov	r3, r0
 8007b28:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_GPIO_HV_MUX_ACTIVE_HIGH, 0xEF, data);
		}

		if (Status == VL53L0X_ERROR_NONE)
 8007b2a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	d103      	bne.n	8007b3a <VL53L0X_SetGpioConfig+0x226>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	787a      	ldrb	r2, [r7, #1]
 8007b36:	f883 20da 	strb.w	r2, [r3, #218]	; 0xda
				Pin0GpioFunctionality, Functionality);

		if (Status == VL53L0X_ERROR_NONE)
 8007b3a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	d105      	bne.n	8007b4e <VL53L0X_SetGpioConfig+0x23a>
			Status = VL53L0X_ClearInterruptMask(Dev, 0);
 8007b42:	2100      	movs	r1, #0
 8007b44:	6878      	ldr	r0, [r7, #4]
 8007b46:	f000 f83f 	bl	8007bc8 <VL53L0X_ClearInterruptMask>
 8007b4a:	4603      	mov	r3, r0
 8007b4c:	73fb      	strb	r3, [r7, #15]

	}

	LOG_FUNCTION_END(Status);
	return Status;
 8007b4e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007b52:	4618      	mov	r0, r3
 8007b54:	3710      	adds	r7, #16
 8007b56:	46bd      	mov	sp, r7
 8007b58:	bd80      	pop	{r7, pc}
 8007b5a:	bf00      	nop

08007b5c <VL53L0X_GetInterruptThresholds>:
}

VL53L0X_Error VL53L0X_GetInterruptThresholds(VL53L0X_DEV Dev,
	VL53L0X_DeviceModes DeviceMode, FixPoint1616_t *pThresholdLow,
	FixPoint1616_t *pThresholdHigh)
{
 8007b5c:	b580      	push	{r7, lr}
 8007b5e:	b086      	sub	sp, #24
 8007b60:	af00      	add	r7, sp, #0
 8007b62:	60f8      	str	r0, [r7, #12]
 8007b64:	607a      	str	r2, [r7, #4]
 8007b66:	603b      	str	r3, [r7, #0]
 8007b68:	460b      	mov	r3, r1
 8007b6a:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007b6c:	2300      	movs	r3, #0
 8007b6e:	75fb      	strb	r3, [r7, #23]
	uint16_t Threshold16;
	LOG_FUNCTION_START("");

	/* no dependency on DeviceMode for Ewok */

	Status = VL53L0X_RdWord(Dev, VL53L0X_REG_SYSTEM_THRESH_LOW, &Threshold16);
 8007b70:	f107 0314 	add.w	r3, r7, #20
 8007b74:	461a      	mov	r2, r3
 8007b76:	210e      	movs	r1, #14
 8007b78:	68f8      	ldr	r0, [r7, #12]
 8007b7a:	f003 fb59 	bl	800b230 <VL53L0X_RdWord>
 8007b7e:	4603      	mov	r3, r0
 8007b80:	75fb      	strb	r3, [r7, #23]
	/* Need to multiply by 2 because the FW will apply a x2 */
	*pThresholdLow = (FixPoint1616_t)((0x00fff & Threshold16) << 17);
 8007b82:	8abb      	ldrh	r3, [r7, #20]
 8007b84:	045b      	lsls	r3, r3, #17
 8007b86:	461a      	mov	r2, r3
 8007b88:	4b0e      	ldr	r3, [pc, #56]	; (8007bc4 <VL53L0X_GetInterruptThresholds+0x68>)
 8007b8a:	4013      	ands	r3, r2
 8007b8c:	687a      	ldr	r2, [r7, #4]
 8007b8e:	6013      	str	r3, [r2, #0]

	if (Status == VL53L0X_ERROR_NONE) {
 8007b90:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	d10f      	bne.n	8007bb8 <VL53L0X_GetInterruptThresholds+0x5c>
		Status = VL53L0X_RdWord(Dev, VL53L0X_REG_SYSTEM_THRESH_HIGH,
 8007b98:	f107 0314 	add.w	r3, r7, #20
 8007b9c:	461a      	mov	r2, r3
 8007b9e:	210c      	movs	r1, #12
 8007ba0:	68f8      	ldr	r0, [r7, #12]
 8007ba2:	f003 fb45 	bl	800b230 <VL53L0X_RdWord>
 8007ba6:	4603      	mov	r3, r0
 8007ba8:	75fb      	strb	r3, [r7, #23]
			&Threshold16);
		/* Need to multiply by 2 because the FW will apply a x2 */
		*pThresholdHigh =
			(FixPoint1616_t)((0x00fff & Threshold16) << 17);
 8007baa:	8abb      	ldrh	r3, [r7, #20]
 8007bac:	045b      	lsls	r3, r3, #17
 8007bae:	461a      	mov	r2, r3
 8007bb0:	4b04      	ldr	r3, [pc, #16]	; (8007bc4 <VL53L0X_GetInterruptThresholds+0x68>)
 8007bb2:	4013      	ands	r3, r2
		*pThresholdHigh =
 8007bb4:	683a      	ldr	r2, [r7, #0]
 8007bb6:	6013      	str	r3, [r2, #0]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8007bb8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007bbc:	4618      	mov	r0, r3
 8007bbe:	3718      	adds	r7, #24
 8007bc0:	46bd      	mov	sp, r7
 8007bc2:	bd80      	pop	{r7, pc}
 8007bc4:	1ffe0000 	.word	0x1ffe0000

08007bc8 <VL53L0X_ClearInterruptMask>:
	return Status;
}

/* Group PAL Interrupt Functions */
VL53L0X_Error VL53L0X_ClearInterruptMask(VL53L0X_DEV Dev, uint32_t InterruptMask)
{
 8007bc8:	b580      	push	{r7, lr}
 8007bca:	b084      	sub	sp, #16
 8007bcc:	af00      	add	r7, sp, #0
 8007bce:	6078      	str	r0, [r7, #4]
 8007bd0:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007bd2:	2300      	movs	r3, #0
 8007bd4:	73fb      	strb	r3, [r7, #15]
	uint8_t LoopCount;
	uint8_t Byte;
	LOG_FUNCTION_START("");

	/* clear bit 0 range interrupt, bit 1 error interrupt */
	LoopCount = 0;
 8007bd6:	2300      	movs	r3, #0
 8007bd8:	73bb      	strb	r3, [r7, #14]
	do {
		Status = VL53L0X_WrByte(Dev,
 8007bda:	2201      	movs	r2, #1
 8007bdc:	210b      	movs	r1, #11
 8007bde:	6878      	ldr	r0, [r7, #4]
 8007be0:	f003 fa7a 	bl	800b0d8 <VL53L0X_WrByte>
 8007be4:	4603      	mov	r3, r0
 8007be6:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_SYSTEM_INTERRUPT_CLEAR, 0x01);
		Status |= VL53L0X_WrByte(Dev,
 8007be8:	2200      	movs	r2, #0
 8007bea:	210b      	movs	r1, #11
 8007bec:	6878      	ldr	r0, [r7, #4]
 8007bee:	f003 fa73 	bl	800b0d8 <VL53L0X_WrByte>
 8007bf2:	4603      	mov	r3, r0
 8007bf4:	461a      	mov	r2, r3
 8007bf6:	7bfb      	ldrb	r3, [r7, #15]
 8007bf8:	4313      	orrs	r3, r2
 8007bfa:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_SYSTEM_INTERRUPT_CLEAR, 0x00);
		Status |= VL53L0X_RdByte(Dev,
 8007bfc:	f107 030d 	add.w	r3, r7, #13
 8007c00:	461a      	mov	r2, r3
 8007c02:	2113      	movs	r1, #19
 8007c04:	6878      	ldr	r0, [r7, #4]
 8007c06:	f003 fae9 	bl	800b1dc <VL53L0X_RdByte>
 8007c0a:	4603      	mov	r3, r0
 8007c0c:	461a      	mov	r2, r3
 8007c0e:	7bfb      	ldrb	r3, [r7, #15]
 8007c10:	4313      	orrs	r3, r2
 8007c12:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_RESULT_INTERRUPT_STATUS, &Byte);
		LoopCount++;
 8007c14:	7bbb      	ldrb	r3, [r7, #14]
 8007c16:	3301      	adds	r3, #1
 8007c18:	73bb      	strb	r3, [r7, #14]
	} while (((Byte & 0x07) != 0x00)
 8007c1a:	7b7b      	ldrb	r3, [r7, #13]
 8007c1c:	f003 0307 	and.w	r3, r3, #7
			&& (LoopCount < 3)
			&& (Status == VL53L0X_ERROR_NONE));
 8007c20:	2b00      	cmp	r3, #0
 8007c22:	d006      	beq.n	8007c32 <VL53L0X_ClearInterruptMask+0x6a>
			&& (LoopCount < 3)
 8007c24:	7bbb      	ldrb	r3, [r7, #14]
 8007c26:	2b02      	cmp	r3, #2
 8007c28:	d803      	bhi.n	8007c32 <VL53L0X_ClearInterruptMask+0x6a>
			&& (Status == VL53L0X_ERROR_NONE));
 8007c2a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	d0d3      	beq.n	8007bda <VL53L0X_ClearInterruptMask+0x12>


	if (LoopCount >= 3)
 8007c32:	7bbb      	ldrb	r3, [r7, #14]
 8007c34:	2b02      	cmp	r3, #2
 8007c36:	d901      	bls.n	8007c3c <VL53L0X_ClearInterruptMask+0x74>
		Status = VL53L0X_ERROR_INTERRUPT_NOT_CLEARED;
 8007c38:	23f4      	movs	r3, #244	; 0xf4
 8007c3a:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(Status);
	return Status;
 8007c3c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007c40:	4618      	mov	r0, r3
 8007c42:	3710      	adds	r7, #16
 8007c44:	46bd      	mov	sp, r7
 8007c46:	bd80      	pop	{r7, pc}

08007c48 <VL53L0X_GetInterruptMaskStatus>:

VL53L0X_Error VL53L0X_GetInterruptMaskStatus(VL53L0X_DEV Dev,
	uint32_t *pInterruptMaskStatus)
{
 8007c48:	b580      	push	{r7, lr}
 8007c4a:	b084      	sub	sp, #16
 8007c4c:	af00      	add	r7, sp, #0
 8007c4e:	6078      	str	r0, [r7, #4]
 8007c50:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007c52:	2300      	movs	r3, #0
 8007c54:	73fb      	strb	r3, [r7, #15]
	uint8_t Byte;
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_RESULT_INTERRUPT_STATUS, &Byte);
 8007c56:	f107 030e 	add.w	r3, r7, #14
 8007c5a:	461a      	mov	r2, r3
 8007c5c:	2113      	movs	r1, #19
 8007c5e:	6878      	ldr	r0, [r7, #4]
 8007c60:	f003 fabc 	bl	800b1dc <VL53L0X_RdByte>
 8007c64:	4603      	mov	r3, r0
 8007c66:	73fb      	strb	r3, [r7, #15]
	*pInterruptMaskStatus = Byte & 0x07;
 8007c68:	7bbb      	ldrb	r3, [r7, #14]
 8007c6a:	f003 0207 	and.w	r2, r3, #7
 8007c6e:	683b      	ldr	r3, [r7, #0]
 8007c70:	601a      	str	r2, [r3, #0]

	if (Byte & 0x18)
 8007c72:	7bbb      	ldrb	r3, [r7, #14]
 8007c74:	f003 0318 	and.w	r3, r3, #24
 8007c78:	2b00      	cmp	r3, #0
 8007c7a:	d001      	beq.n	8007c80 <VL53L0X_GetInterruptMaskStatus+0x38>
		Status = VL53L0X_ERROR_RANGE_ERROR;
 8007c7c:	23fa      	movs	r3, #250	; 0xfa
 8007c7e:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(Status);
	return Status;
 8007c80:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007c84:	4618      	mov	r0, r3
 8007c86:	3710      	adds	r7, #16
 8007c88:	46bd      	mov	sp, r7
 8007c8a:	bd80      	pop	{r7, pc}

08007c8c <VL53L0X_PerformRefSpadManagement>:
	return Status;
}

VL53L0X_Error VL53L0X_PerformRefSpadManagement(VL53L0X_DEV Dev,
	uint32_t *refSpadCount, uint8_t *isApertureSpads)
{
 8007c8c:	b580      	push	{r7, lr}
 8007c8e:	b086      	sub	sp, #24
 8007c90:	af00      	add	r7, sp, #0
 8007c92:	60f8      	str	r0, [r7, #12]
 8007c94:	60b9      	str	r1, [r7, #8]
 8007c96:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007c98:	2300      	movs	r3, #0
 8007c9a:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");

	Status = VL53L0X_perform_ref_spad_management(Dev, refSpadCount,
 8007c9c:	687a      	ldr	r2, [r7, #4]
 8007c9e:	68b9      	ldr	r1, [r7, #8]
 8007ca0:	68f8      	ldr	r0, [r7, #12]
 8007ca2:	f000 fa03 	bl	80080ac <VL53L0X_perform_ref_spad_management>
 8007ca6:	4603      	mov	r3, r0
 8007ca8:	75fb      	strb	r3, [r7, #23]
		isApertureSpads);

	LOG_FUNCTION_END(Status);

	return Status;
 8007caa:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007cae:	4618      	mov	r0, r3
 8007cb0:	3718      	adds	r7, #24
 8007cb2:	46bd      	mov	sp, r7
 8007cb4:	bd80      	pop	{r7, pc}

08007cb6 <VL53L0X_get_offset_calibration_data_micro_meter>:
	return Status;
}

VL53L0X_Error VL53L0X_get_offset_calibration_data_micro_meter(VL53L0X_DEV Dev,
		int32_t *pOffsetCalibrationDataMicroMeter)
{
 8007cb6:	b580      	push	{r7, lr}
 8007cb8:	b084      	sub	sp, #16
 8007cba:	af00      	add	r7, sp, #0
 8007cbc:	6078      	str	r0, [r7, #4]
 8007cbe:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007cc0:	2300      	movs	r3, #0
 8007cc2:	73fb      	strb	r3, [r7, #15]
	uint16_t RangeOffsetRegister;
	int16_t cMaxOffset = 2047;
 8007cc4:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8007cc8:	81bb      	strh	r3, [r7, #12]
	int16_t cOffsetRange = 4096;
 8007cca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007cce:	817b      	strh	r3, [r7, #10]

	/* Note that offset has 10.2 format */

	Status = VL53L0X_RdWord(Dev,
 8007cd0:	f107 0308 	add.w	r3, r7, #8
 8007cd4:	461a      	mov	r2, r3
 8007cd6:	2128      	movs	r1, #40	; 0x28
 8007cd8:	6878      	ldr	r0, [r7, #4]
 8007cda:	f003 faa9 	bl	800b230 <VL53L0X_RdWord>
 8007cde:	4603      	mov	r3, r0
 8007ce0:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_ALGO_PART_TO_PART_RANGE_OFFSET_MM,
				&RangeOffsetRegister);

	if (Status == VL53L0X_ERROR_NONE) {
 8007ce2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	d11e      	bne.n	8007d28 <VL53L0X_get_offset_calibration_data_micro_meter+0x72>
		RangeOffsetRegister = (RangeOffsetRegister & 0x0fff);
 8007cea:	893b      	ldrh	r3, [r7, #8]
 8007cec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007cf0:	b29b      	uxth	r3, r3
 8007cf2:	813b      	strh	r3, [r7, #8]

		/* Apply 12 bit 2's compliment conversion */
		if (RangeOffsetRegister > cMaxOffset)
 8007cf4:	893b      	ldrh	r3, [r7, #8]
 8007cf6:	461a      	mov	r2, r3
 8007cf8:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8007cfc:	429a      	cmp	r2, r3
 8007cfe:	dd0b      	ble.n	8007d18 <VL53L0X_get_offset_calibration_data_micro_meter+0x62>
			*pOffsetCalibrationDataMicroMeter =
				(int16_t)(RangeOffsetRegister - cOffsetRange)
 8007d00:	893a      	ldrh	r2, [r7, #8]
 8007d02:	897b      	ldrh	r3, [r7, #10]
 8007d04:	1ad3      	subs	r3, r2, r3
 8007d06:	b29b      	uxth	r3, r3
 8007d08:	b21b      	sxth	r3, r3
 8007d0a:	461a      	mov	r2, r3
					* 250;
 8007d0c:	23fa      	movs	r3, #250	; 0xfa
 8007d0e:	fb03 f202 	mul.w	r2, r3, r2
			*pOffsetCalibrationDataMicroMeter =
 8007d12:	683b      	ldr	r3, [r7, #0]
 8007d14:	601a      	str	r2, [r3, #0]
 8007d16:	e007      	b.n	8007d28 <VL53L0X_get_offset_calibration_data_micro_meter+0x72>
		else
			*pOffsetCalibrationDataMicroMeter =
				(int16_t)RangeOffsetRegister * 250;
 8007d18:	893b      	ldrh	r3, [r7, #8]
 8007d1a:	b21b      	sxth	r3, r3
 8007d1c:	461a      	mov	r2, r3
 8007d1e:	23fa      	movs	r3, #250	; 0xfa
 8007d20:	fb03 f202 	mul.w	r2, r3, r2
			*pOffsetCalibrationDataMicroMeter =
 8007d24:	683b      	ldr	r3, [r7, #0]
 8007d26:	601a      	str	r2, [r3, #0]

	}

	return Status;
 8007d28:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007d2c:	4618      	mov	r0, r3
 8007d2e:	3710      	adds	r7, #16
 8007d30:	46bd      	mov	sp, r7
 8007d32:	bd80      	pop	{r7, pc}

08007d34 <get_next_good_spad>:
	return Status;
}

void get_next_good_spad(uint8_t goodSpadArray[], uint32_t size,
			uint32_t curr, int32_t *next)
{
 8007d34:	b480      	push	{r7}
 8007d36:	b08b      	sub	sp, #44	; 0x2c
 8007d38:	af00      	add	r7, sp, #0
 8007d3a:	60f8      	str	r0, [r7, #12]
 8007d3c:	60b9      	str	r1, [r7, #8]
 8007d3e:	607a      	str	r2, [r7, #4]
 8007d40:	603b      	str	r3, [r7, #0]
	uint32_t startIndex;
	uint32_t fineOffset;
	uint32_t cSpadsPerByte = 8;
 8007d42:	2308      	movs	r3, #8
 8007d44:	61bb      	str	r3, [r7, #24]
	uint32_t coarseIndex;
	uint32_t fineIndex;
	uint8_t dataByte;
	uint8_t success = 0;
 8007d46:	2300      	movs	r3, #0
 8007d48:	77bb      	strb	r3, [r7, #30]
	 *
	 * The coarse index is the byte index of the array and the fine index is
	 * the index of the bit within each byte.
	 */

	*next = -1;
 8007d4a:	683b      	ldr	r3, [r7, #0]
 8007d4c:	f04f 32ff 	mov.w	r2, #4294967295
 8007d50:	601a      	str	r2, [r3, #0]

	startIndex = curr / cSpadsPerByte;
 8007d52:	687a      	ldr	r2, [r7, #4]
 8007d54:	69bb      	ldr	r3, [r7, #24]
 8007d56:	fbb2 f3f3 	udiv	r3, r2, r3
 8007d5a:	617b      	str	r3, [r7, #20]
	fineOffset = curr % cSpadsPerByte;
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	69ba      	ldr	r2, [r7, #24]
 8007d60:	fbb3 f2f2 	udiv	r2, r3, r2
 8007d64:	69b9      	ldr	r1, [r7, #24]
 8007d66:	fb01 f202 	mul.w	r2, r1, r2
 8007d6a:	1a9b      	subs	r3, r3, r2
 8007d6c:	613b      	str	r3, [r7, #16]

	for (coarseIndex = startIndex; ((coarseIndex < size) && !success);
 8007d6e:	697b      	ldr	r3, [r7, #20]
 8007d70:	627b      	str	r3, [r7, #36]	; 0x24
 8007d72:	e030      	b.n	8007dd6 <get_next_good_spad+0xa2>
				coarseIndex++) {
		fineIndex = 0;
 8007d74:	2300      	movs	r3, #0
 8007d76:	623b      	str	r3, [r7, #32]
		dataByte = goodSpadArray[coarseIndex];
 8007d78:	68fa      	ldr	r2, [r7, #12]
 8007d7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d7c:	4413      	add	r3, r2
 8007d7e:	781b      	ldrb	r3, [r3, #0]
 8007d80:	77fb      	strb	r3, [r7, #31]

		if (coarseIndex == startIndex) {
 8007d82:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007d84:	697b      	ldr	r3, [r7, #20]
 8007d86:	429a      	cmp	r2, r3
 8007d88:	d11e      	bne.n	8007dc8 <get_next_good_spad+0x94>
			/* locate the bit position of the provided current
			 * spad bit before iterating */
			dataByte >>= fineOffset;
 8007d8a:	7ffa      	ldrb	r2, [r7, #31]
 8007d8c:	693b      	ldr	r3, [r7, #16]
 8007d8e:	fa42 f303 	asr.w	r3, r2, r3
 8007d92:	77fb      	strb	r3, [r7, #31]
			fineIndex = fineOffset;
 8007d94:	693b      	ldr	r3, [r7, #16]
 8007d96:	623b      	str	r3, [r7, #32]
		}

		while (fineIndex < cSpadsPerByte) {
 8007d98:	e016      	b.n	8007dc8 <get_next_good_spad+0x94>
			if ((dataByte & 0x1) == 1) {
 8007d9a:	7ffb      	ldrb	r3, [r7, #31]
 8007d9c:	f003 0301 	and.w	r3, r3, #1
 8007da0:	2b00      	cmp	r3, #0
 8007da2:	d00b      	beq.n	8007dbc <get_next_good_spad+0x88>
				success = 1;
 8007da4:	2301      	movs	r3, #1
 8007da6:	77bb      	strb	r3, [r7, #30]
				*next = coarseIndex * cSpadsPerByte + fineIndex;
 8007da8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007daa:	69ba      	ldr	r2, [r7, #24]
 8007dac:	fb03 f202 	mul.w	r2, r3, r2
 8007db0:	6a3b      	ldr	r3, [r7, #32]
 8007db2:	4413      	add	r3, r2
 8007db4:	461a      	mov	r2, r3
 8007db6:	683b      	ldr	r3, [r7, #0]
 8007db8:	601a      	str	r2, [r3, #0]
				break;
 8007dba:	e009      	b.n	8007dd0 <get_next_good_spad+0x9c>
			}
			dataByte >>= 1;
 8007dbc:	7ffb      	ldrb	r3, [r7, #31]
 8007dbe:	085b      	lsrs	r3, r3, #1
 8007dc0:	77fb      	strb	r3, [r7, #31]
			fineIndex++;
 8007dc2:	6a3b      	ldr	r3, [r7, #32]
 8007dc4:	3301      	adds	r3, #1
 8007dc6:	623b      	str	r3, [r7, #32]
		while (fineIndex < cSpadsPerByte) {
 8007dc8:	6a3a      	ldr	r2, [r7, #32]
 8007dca:	69bb      	ldr	r3, [r7, #24]
 8007dcc:	429a      	cmp	r2, r3
 8007dce:	d3e4      	bcc.n	8007d9a <get_next_good_spad+0x66>
				coarseIndex++) {
 8007dd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dd2:	3301      	adds	r3, #1
 8007dd4:	627b      	str	r3, [r7, #36]	; 0x24
	for (coarseIndex = startIndex; ((coarseIndex < size) && !success);
 8007dd6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007dd8:	68bb      	ldr	r3, [r7, #8]
 8007dda:	429a      	cmp	r2, r3
 8007ddc:	d202      	bcs.n	8007de4 <get_next_good_spad+0xb0>
 8007dde:	7fbb      	ldrb	r3, [r7, #30]
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	d0c7      	beq.n	8007d74 <get_next_good_spad+0x40>
		}
	}
}
 8007de4:	bf00      	nop
 8007de6:	372c      	adds	r7, #44	; 0x2c
 8007de8:	46bd      	mov	sp, r7
 8007dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dee:	4770      	bx	lr

08007df0 <is_aperture>:


uint8_t is_aperture(uint32_t spadIndex)
{
 8007df0:	b480      	push	{r7}
 8007df2:	b085      	sub	sp, #20
 8007df4:	af00      	add	r7, sp, #0
 8007df6:	6078      	str	r0, [r7, #4]
	/*
	 * This function reports if a given spad index is an aperture SPAD by
	 * deriving the quadrant.
	 */
	uint32_t quadrant;
	uint8_t isAperture = 1;
 8007df8:	2301      	movs	r3, #1
 8007dfa:	73fb      	strb	r3, [r7, #15]
	quadrant = spadIndex >> 6;
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	099b      	lsrs	r3, r3, #6
 8007e00:	60bb      	str	r3, [r7, #8]
	if (refArrayQuadrants[quadrant] == REF_ARRAY_SPAD_0)
 8007e02:	4a07      	ldr	r2, [pc, #28]	; (8007e20 <is_aperture+0x30>)
 8007e04:	68bb      	ldr	r3, [r7, #8]
 8007e06:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	d101      	bne.n	8007e12 <is_aperture+0x22>
		isAperture = 0;
 8007e0e:	2300      	movs	r3, #0
 8007e10:	73fb      	strb	r3, [r7, #15]

	return isAperture;
 8007e12:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e14:	4618      	mov	r0, r3
 8007e16:	3714      	adds	r7, #20
 8007e18:	46bd      	mov	sp, r7
 8007e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e1e:	4770      	bx	lr
 8007e20:	200002bc 	.word	0x200002bc

08007e24 <enable_spad_bit>:


VL53L0X_Error enable_spad_bit(uint8_t spadArray[], uint32_t size,
	uint32_t spadIndex)
{
 8007e24:	b480      	push	{r7}
 8007e26:	b089      	sub	sp, #36	; 0x24
 8007e28:	af00      	add	r7, sp, #0
 8007e2a:	60f8      	str	r0, [r7, #12]
 8007e2c:	60b9      	str	r1, [r7, #8]
 8007e2e:	607a      	str	r2, [r7, #4]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 8007e30:	2300      	movs	r3, #0
 8007e32:	77fb      	strb	r3, [r7, #31]
	uint32_t cSpadsPerByte = 8;
 8007e34:	2308      	movs	r3, #8
 8007e36:	61bb      	str	r3, [r7, #24]
	uint32_t coarseIndex;
	uint32_t fineIndex;

	coarseIndex = spadIndex / cSpadsPerByte;
 8007e38:	687a      	ldr	r2, [r7, #4]
 8007e3a:	69bb      	ldr	r3, [r7, #24]
 8007e3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007e40:	617b      	str	r3, [r7, #20]
	fineIndex = spadIndex % cSpadsPerByte;
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	69ba      	ldr	r2, [r7, #24]
 8007e46:	fbb3 f2f2 	udiv	r2, r3, r2
 8007e4a:	69b9      	ldr	r1, [r7, #24]
 8007e4c:	fb01 f202 	mul.w	r2, r1, r2
 8007e50:	1a9b      	subs	r3, r3, r2
 8007e52:	613b      	str	r3, [r7, #16]
	if (coarseIndex >= size)
 8007e54:	697a      	ldr	r2, [r7, #20]
 8007e56:	68bb      	ldr	r3, [r7, #8]
 8007e58:	429a      	cmp	r2, r3
 8007e5a:	d302      	bcc.n	8007e62 <enable_spad_bit+0x3e>
		status = VL53L0X_ERROR_REF_SPAD_INIT;
 8007e5c:	23ce      	movs	r3, #206	; 0xce
 8007e5e:	77fb      	strb	r3, [r7, #31]
 8007e60:	e010      	b.n	8007e84 <enable_spad_bit+0x60>
	else
		spadArray[coarseIndex] |= (1 << fineIndex);
 8007e62:	68fa      	ldr	r2, [r7, #12]
 8007e64:	697b      	ldr	r3, [r7, #20]
 8007e66:	4413      	add	r3, r2
 8007e68:	781b      	ldrb	r3, [r3, #0]
 8007e6a:	b25a      	sxtb	r2, r3
 8007e6c:	2101      	movs	r1, #1
 8007e6e:	693b      	ldr	r3, [r7, #16]
 8007e70:	fa01 f303 	lsl.w	r3, r1, r3
 8007e74:	b25b      	sxtb	r3, r3
 8007e76:	4313      	orrs	r3, r2
 8007e78:	b259      	sxtb	r1, r3
 8007e7a:	68fa      	ldr	r2, [r7, #12]
 8007e7c:	697b      	ldr	r3, [r7, #20]
 8007e7e:	4413      	add	r3, r2
 8007e80:	b2ca      	uxtb	r2, r1
 8007e82:	701a      	strb	r2, [r3, #0]

	return status;
 8007e84:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8007e88:	4618      	mov	r0, r3
 8007e8a:	3724      	adds	r7, #36	; 0x24
 8007e8c:	46bd      	mov	sp, r7
 8007e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e92:	4770      	bx	lr

08007e94 <set_ref_spad_map>:

	return status;
}

VL53L0X_Error set_ref_spad_map(VL53L0X_DEV Dev, uint8_t *refSpadArray)
{
 8007e94:	b580      	push	{r7, lr}
 8007e96:	b084      	sub	sp, #16
 8007e98:	af00      	add	r7, sp, #0
 8007e9a:	6078      	str	r0, [r7, #4]
 8007e9c:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_WriteMulti(Dev,
 8007e9e:	2306      	movs	r3, #6
 8007ea0:	683a      	ldr	r2, [r7, #0]
 8007ea2:	21b0      	movs	r1, #176	; 0xb0
 8007ea4:	6878      	ldr	r0, [r7, #4]
 8007ea6:	f003 f8bb 	bl	800b020 <VL53L0X_WriteMulti>
 8007eaa:	4603      	mov	r3, r0
 8007eac:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_GLOBAL_CONFIG_SPAD_ENABLES_REF_0,
				refSpadArray, 6);
	return status;
 8007eae:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007eb2:	4618      	mov	r0, r3
 8007eb4:	3710      	adds	r7, #16
 8007eb6:	46bd      	mov	sp, r7
 8007eb8:	bd80      	pop	{r7, pc}

08007eba <get_ref_spad_map>:

VL53L0X_Error get_ref_spad_map(VL53L0X_DEV Dev, uint8_t *refSpadArray)
{
 8007eba:	b580      	push	{r7, lr}
 8007ebc:	b084      	sub	sp, #16
 8007ebe:	af00      	add	r7, sp, #0
 8007ec0:	6078      	str	r0, [r7, #4]
 8007ec2:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_ReadMulti(Dev,
 8007ec4:	2306      	movs	r3, #6
 8007ec6:	683a      	ldr	r2, [r7, #0]
 8007ec8:	21b0      	movs	r1, #176	; 0xb0
 8007eca:	6878      	ldr	r0, [r7, #4]
 8007ecc:	f003 f8d8 	bl	800b080 <VL53L0X_ReadMulti>
 8007ed0:	4603      	mov	r3, r0
 8007ed2:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_GLOBAL_CONFIG_SPAD_ENABLES_REF_0,
				refSpadArray,
				6);
	return status;
 8007ed4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007ed8:	4618      	mov	r0, r3
 8007eda:	3710      	adds	r7, #16
 8007edc:	46bd      	mov	sp, r7
 8007ede:	bd80      	pop	{r7, pc}

08007ee0 <enable_ref_spads>:
				uint32_t size,
				uint32_t start,
				uint32_t offset,
				uint32_t spadCount,
				uint32_t *lastSpad)
{
 8007ee0:	b580      	push	{r7, lr}
 8007ee2:	b08c      	sub	sp, #48	; 0x30
 8007ee4:	af00      	add	r7, sp, #0
 8007ee6:	60f8      	str	r0, [r7, #12]
 8007ee8:	607a      	str	r2, [r7, #4]
 8007eea:	603b      	str	r3, [r7, #0]
 8007eec:	460b      	mov	r3, r1
 8007eee:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 8007ef0:	2300      	movs	r3, #0
 8007ef2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint32_t index;
	uint32_t i;
	int32_t nextGoodSpad = offset;
 8007ef6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007ef8:	61fb      	str	r3, [r7, #28]
	 *
	 * This function applies to only aperture or only non-aperture spads.
	 * Checks are performed to ensure this.
	 */

	currentSpad = offset;
 8007efa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007efc:	623b      	str	r3, [r7, #32]
	for (index = 0; index < spadCount; index++) {
 8007efe:	2300      	movs	r3, #0
 8007f00:	62bb      	str	r3, [r7, #40]	; 0x28
 8007f02:	e02b      	b.n	8007f5c <enable_ref_spads+0x7c>
		get_next_good_spad(goodSpadArray, size, currentSpad,
 8007f04:	f107 031c 	add.w	r3, r7, #28
 8007f08:	6a3a      	ldr	r2, [r7, #32]
 8007f0a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007f0c:	6878      	ldr	r0, [r7, #4]
 8007f0e:	f7ff ff11 	bl	8007d34 <get_next_good_spad>
			&nextGoodSpad);

		if (nextGoodSpad == -1) {
 8007f12:	69fb      	ldr	r3, [r7, #28]
 8007f14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f18:	d103      	bne.n	8007f22 <enable_ref_spads+0x42>
			status = VL53L0X_ERROR_REF_SPAD_INIT;
 8007f1a:	23ce      	movs	r3, #206	; 0xce
 8007f1c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			break;
 8007f20:	e020      	b.n	8007f64 <enable_ref_spads+0x84>
		}

		/* Confirm that the next good SPAD is non-aperture */
		if (is_aperture(start + nextGoodSpad) != apertureSpads) {
 8007f22:	69fb      	ldr	r3, [r7, #28]
 8007f24:	461a      	mov	r2, r3
 8007f26:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007f28:	4413      	add	r3, r2
 8007f2a:	4618      	mov	r0, r3
 8007f2c:	f7ff ff60 	bl	8007df0 <is_aperture>
 8007f30:	4603      	mov	r3, r0
 8007f32:	461a      	mov	r2, r3
 8007f34:	7afb      	ldrb	r3, [r7, #11]
 8007f36:	4293      	cmp	r3, r2
 8007f38:	d003      	beq.n	8007f42 <enable_ref_spads+0x62>
			/* if we can't get the required number of good aperture
			 * spads from the current quadrant then this is an error
			 */
			status = VL53L0X_ERROR_REF_SPAD_INIT;
 8007f3a:	23ce      	movs	r3, #206	; 0xce
 8007f3c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			break;
 8007f40:	e010      	b.n	8007f64 <enable_ref_spads+0x84>
		}
		currentSpad = (uint32_t)nextGoodSpad;
 8007f42:	69fb      	ldr	r3, [r7, #28]
 8007f44:	623b      	str	r3, [r7, #32]
		enable_spad_bit(spadArray, size, currentSpad);
 8007f46:	6a3a      	ldr	r2, [r7, #32]
 8007f48:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007f4a:	6838      	ldr	r0, [r7, #0]
 8007f4c:	f7ff ff6a 	bl	8007e24 <enable_spad_bit>
		currentSpad++;
 8007f50:	6a3b      	ldr	r3, [r7, #32]
 8007f52:	3301      	adds	r3, #1
 8007f54:	623b      	str	r3, [r7, #32]
	for (index = 0; index < spadCount; index++) {
 8007f56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f58:	3301      	adds	r3, #1
 8007f5a:	62bb      	str	r3, [r7, #40]	; 0x28
 8007f5c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007f5e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007f60:	429a      	cmp	r2, r3
 8007f62:	d3cf      	bcc.n	8007f04 <enable_ref_spads+0x24>
	}
	*lastSpad = currentSpad;
 8007f64:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007f66:	6a3a      	ldr	r2, [r7, #32]
 8007f68:	601a      	str	r2, [r3, #0]

	if (status == VL53L0X_ERROR_NONE)
 8007f6a:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8007f6e:	2b00      	cmp	r3, #0
 8007f70:	d106      	bne.n	8007f80 <enable_ref_spads+0xa0>
		status = set_ref_spad_map(Dev, spadArray);
 8007f72:	6839      	ldr	r1, [r7, #0]
 8007f74:	68f8      	ldr	r0, [r7, #12]
 8007f76:	f7ff ff8d 	bl	8007e94 <set_ref_spad_map>
 8007f7a:	4603      	mov	r3, r0
 8007f7c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f


	if (status == VL53L0X_ERROR_NONE) {
 8007f80:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8007f84:	2b00      	cmp	r3, #0
 8007f86:	d121      	bne.n	8007fcc <enable_ref_spads+0xec>
		status = get_ref_spad_map(Dev, checkSpadArray);
 8007f88:	f107 0314 	add.w	r3, r7, #20
 8007f8c:	4619      	mov	r1, r3
 8007f8e:	68f8      	ldr	r0, [r7, #12]
 8007f90:	f7ff ff93 	bl	8007eba <get_ref_spad_map>
 8007f94:	4603      	mov	r3, r0
 8007f96:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

		i = 0;
 8007f9a:	2300      	movs	r3, #0
 8007f9c:	627b      	str	r3, [r7, #36]	; 0x24

		/* Compare spad maps. If not equal report error. */
		while (i < size) {
 8007f9e:	e011      	b.n	8007fc4 <enable_ref_spads+0xe4>
			if (spadArray[i] != checkSpadArray[i]) {
 8007fa0:	683a      	ldr	r2, [r7, #0]
 8007fa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fa4:	4413      	add	r3, r2
 8007fa6:	781a      	ldrb	r2, [r3, #0]
 8007fa8:	f107 0114 	add.w	r1, r7, #20
 8007fac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fae:	440b      	add	r3, r1
 8007fb0:	781b      	ldrb	r3, [r3, #0]
 8007fb2:	429a      	cmp	r2, r3
 8007fb4:	d003      	beq.n	8007fbe <enable_ref_spads+0xde>
				status = VL53L0X_ERROR_REF_SPAD_INIT;
 8007fb6:	23ce      	movs	r3, #206	; 0xce
 8007fb8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				break;
 8007fbc:	e006      	b.n	8007fcc <enable_ref_spads+0xec>
			}
			i++;
 8007fbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fc0:	3301      	adds	r3, #1
 8007fc2:	627b      	str	r3, [r7, #36]	; 0x24
		while (i < size) {
 8007fc4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007fc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007fc8:	429a      	cmp	r2, r3
 8007fca:	d3e9      	bcc.n	8007fa0 <enable_ref_spads+0xc0>
		}
	}
	return status;
 8007fcc:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 8007fd0:	4618      	mov	r0, r3
 8007fd2:	3730      	adds	r7, #48	; 0x30
 8007fd4:	46bd      	mov	sp, r7
 8007fd6:	bd80      	pop	{r7, pc}

08007fd8 <perform_ref_signal_measurement>:


VL53L0X_Error perform_ref_signal_measurement(VL53L0X_DEV Dev,
		uint16_t *refSignalRate)
{
 8007fd8:	b580      	push	{r7, lr}
 8007fda:	b08a      	sub	sp, #40	; 0x28
 8007fdc:	af00      	add	r7, sp, #0
 8007fde:	6078      	str	r0, [r7, #4]
 8007fe0:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 8007fe2:	2300      	movs	r3, #0
 8007fe4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	VL53L0X_RangingMeasurementData_t rangingMeasurementData;

	uint8_t SequenceConfig = 0;
 8007fe8:	2300      	movs	r3, #0
 8007fea:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 8007ff4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	/*
	 * This function performs a reference signal rate measurement.
	 */
	if (status == VL53L0X_ERROR_NONE)
 8007ff8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007ffc:	2b00      	cmp	r3, #0
 8007ffe:	d107      	bne.n	8008010 <perform_ref_signal_measurement+0x38>
		status = VL53L0X_WrByte(Dev,
 8008000:	22c0      	movs	r2, #192	; 0xc0
 8008002:	2101      	movs	r1, #1
 8008004:	6878      	ldr	r0, [r7, #4]
 8008006:	f003 f867 	bl	800b0d8 <VL53L0X_WrByte>
 800800a:	4603      	mov	r3, r0
 800800c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0xC0);

	if (status == VL53L0X_ERROR_NONE)
 8008010:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8008014:	2b00      	cmp	r3, #0
 8008016:	d108      	bne.n	800802a <perform_ref_signal_measurement+0x52>
		status = VL53L0X_PerformSingleRangingMeasurement(Dev,
 8008018:	f107 0308 	add.w	r3, r7, #8
 800801c:	4619      	mov	r1, r3
 800801e:	6878      	ldr	r0, [r7, #4]
 8008020:	f7ff fc48 	bl	80078b4 <VL53L0X_PerformSingleRangingMeasurement>
 8008024:	4603      	mov	r3, r0
 8008026:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				&rangingMeasurementData);

	if (status == VL53L0X_ERROR_NONE)
 800802a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800802e:	2b00      	cmp	r3, #0
 8008030:	d107      	bne.n	8008042 <perform_ref_signal_measurement+0x6a>
		status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8008032:	2201      	movs	r2, #1
 8008034:	21ff      	movs	r1, #255	; 0xff
 8008036:	6878      	ldr	r0, [r7, #4]
 8008038:	f003 f84e 	bl	800b0d8 <VL53L0X_WrByte>
 800803c:	4603      	mov	r3, r0
 800803e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (status == VL53L0X_ERROR_NONE)
 8008042:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8008046:	2b00      	cmp	r3, #0
 8008048:	d107      	bne.n	800805a <perform_ref_signal_measurement+0x82>
		status = VL53L0X_RdWord(Dev,
 800804a:	683a      	ldr	r2, [r7, #0]
 800804c:	21b6      	movs	r1, #182	; 0xb6
 800804e:	6878      	ldr	r0, [r7, #4]
 8008050:	f003 f8ee 	bl	800b230 <VL53L0X_RdWord>
 8008054:	4603      	mov	r3, r0
 8008056:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			VL53L0X_REG_RESULT_PEAK_SIGNAL_RATE_REF,
			refSignalRate);

	if (status == VL53L0X_ERROR_NONE)
 800805a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800805e:	2b00      	cmp	r3, #0
 8008060:	d107      	bne.n	8008072 <perform_ref_signal_measurement+0x9a>
		status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8008062:	2200      	movs	r2, #0
 8008064:	21ff      	movs	r1, #255	; 0xff
 8008066:	6878      	ldr	r0, [r7, #4]
 8008068:	f003 f836 	bl	800b0d8 <VL53L0X_WrByte>
 800806c:	4603      	mov	r3, r0
 800806e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (status == VL53L0X_ERROR_NONE) {
 8008072:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8008076:	2b00      	cmp	r3, #0
 8008078:	d112      	bne.n	80080a0 <perform_ref_signal_measurement+0xc8>
		/* restore the previous Sequence Config */
		status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 800807a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800807e:	461a      	mov	r2, r3
 8008080:	2101      	movs	r1, #1
 8008082:	6878      	ldr	r0, [r7, #4]
 8008084:	f003 f828 	bl	800b0d8 <VL53L0X_WrByte>
 8008088:	4603      	mov	r3, r0
 800808a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				SequenceConfig);
		if (status == VL53L0X_ERROR_NONE)
 800808e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8008092:	2b00      	cmp	r3, #0
 8008094:	d104      	bne.n	80080a0 <perform_ref_signal_measurement+0xc8>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800809c:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
	}

	return status;
 80080a0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 80080a4:	4618      	mov	r0, r3
 80080a6:	3728      	adds	r7, #40	; 0x28
 80080a8:	46bd      	mov	sp, r7
 80080aa:	bd80      	pop	{r7, pc}

080080ac <VL53L0X_perform_ref_spad_management>:

VL53L0X_Error VL53L0X_perform_ref_spad_management(VL53L0X_DEV Dev,
				uint32_t *refSpadCount,
				uint8_t *isApertureSpads)
{
 80080ac:	b590      	push	{r4, r7, lr}
 80080ae:	b09d      	sub	sp, #116	; 0x74
 80080b0:	af06      	add	r7, sp, #24
 80080b2:	60f8      	str	r0, [r7, #12]
 80080b4:	60b9      	str	r1, [r7, #8]
 80080b6:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80080b8:	2300      	movs	r3, #0
 80080ba:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	uint8_t lastSpadArray[6];
	uint8_t startSelect = 0xB4;
 80080be:	23b4      	movs	r3, #180	; 0xb4
 80080c0:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
	uint32_t minimumSpadCount = 3;
 80080c4:	2303      	movs	r3, #3
 80080c6:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t maxSpadCount = 44;
 80080c8:	232c      	movs	r3, #44	; 0x2c
 80080ca:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t currentSpadIndex = 0;
 80080cc:	2300      	movs	r3, #0
 80080ce:	653b      	str	r3, [r7, #80]	; 0x50
	uint32_t lastSpadIndex = 0;
 80080d0:	2300      	movs	r3, #0
 80080d2:	61bb      	str	r3, [r7, #24]
	int32_t nextGoodSpad = 0;
 80080d4:	2300      	movs	r3, #0
 80080d6:	617b      	str	r3, [r7, #20]
	uint16_t targetRefRate = 0x0A00; /* 20 MCPS in 9:7 format */
 80080d8:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 80080dc:	85fb      	strh	r3, [r7, #46]	; 0x2e
	uint16_t peakSignalRateRef;
	uint32_t needAptSpads = 0;
 80080de:	2300      	movs	r3, #0
 80080e0:	64fb      	str	r3, [r7, #76]	; 0x4c
	uint32_t index = 0;
 80080e2:	2300      	movs	r3, #0
 80080e4:	64bb      	str	r3, [r7, #72]	; 0x48
	uint32_t spadArraySize = 6;
 80080e6:	2306      	movs	r3, #6
 80080e8:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t signalRateDiff = 0;
 80080ea:	2300      	movs	r3, #0
 80080ec:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t lastSignalRateDiff = 0;
 80080ee:	2300      	movs	r3, #0
 80080f0:	647b      	str	r3, [r7, #68]	; 0x44
	uint8_t complete = 0;
 80080f2:	2300      	movs	r3, #0
 80080f4:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
	uint8_t VhvSettings = 0;
 80080f8:	2300      	movs	r3, #0
 80080fa:	747b      	strb	r3, [r7, #17]
	uint8_t PhaseCal = 0;
 80080fc:	2300      	movs	r3, #0
 80080fe:	743b      	strb	r3, [r7, #16]
	uint32_t refSpadCount_int = 0;
 8008100:	2300      	movs	r3, #0
 8008102:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint8_t	 isApertureSpads_int = 0;
 8008104:	2300      	movs	r3, #0
 8008106:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	 * of the non-aperture quadrant and runs in to the adjacent aperture
	 * quadrant.
	 */


	targetRefRate = PALDevDataGet(Dev, targetRefRate);
 800810a:	68fb      	ldr	r3, [r7, #12]
 800810c:	f8b3 313c 	ldrh.w	r3, [r3, #316]	; 0x13c
 8008110:	85fb      	strh	r3, [r7, #46]	; 0x2e
	 * This is a short term implementation. The good spad map will be
	 * provided as an input.
	 * Note that there are 6 bytes. Only the first 44 bits will be used to
	 * represent spads.
	 */
	for (index = 0; index < spadArraySize; index++)
 8008112:	2300      	movs	r3, #0
 8008114:	64bb      	str	r3, [r7, #72]	; 0x48
 8008116:	e009      	b.n	800812c <VL53L0X_perform_ref_spad_management+0x80>
		Dev->Data.SpadData.RefSpadEnables[index] = 0;
 8008118:	68fa      	ldr	r2, [r7, #12]
 800811a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800811c:	4413      	add	r3, r2
 800811e:	f503 7392 	add.w	r3, r3, #292	; 0x124
 8008122:	2200      	movs	r2, #0
 8008124:	701a      	strb	r2, [r3, #0]
	for (index = 0; index < spadArraySize; index++)
 8008126:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008128:	3301      	adds	r3, #1
 800812a:	64bb      	str	r3, [r7, #72]	; 0x48
 800812c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800812e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008130:	429a      	cmp	r2, r3
 8008132:	d3f1      	bcc.n	8008118 <VL53L0X_perform_ref_spad_management+0x6c>


	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8008134:	2201      	movs	r2, #1
 8008136:	21ff      	movs	r1, #255	; 0xff
 8008138:	68f8      	ldr	r0, [r7, #12]
 800813a:	f002 ffcd 	bl	800b0d8 <VL53L0X_WrByte>
 800813e:	4603      	mov	r3, r0
 8008140:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	if (Status == VL53L0X_ERROR_NONE)
 8008144:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8008148:	2b00      	cmp	r3, #0
 800814a:	d107      	bne.n	800815c <VL53L0X_perform_ref_spad_management+0xb0>
		Status = VL53L0X_WrByte(Dev,
 800814c:	2200      	movs	r2, #0
 800814e:	214f      	movs	r1, #79	; 0x4f
 8008150:	68f8      	ldr	r0, [r7, #12]
 8008152:	f002 ffc1 	bl	800b0d8 <VL53L0X_WrByte>
 8008156:	4603      	mov	r3, r0
 8008158:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_REG_DYNAMIC_SPAD_REF_EN_START_OFFSET, 0x00);

	if (Status == VL53L0X_ERROR_NONE)
 800815c:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8008160:	2b00      	cmp	r3, #0
 8008162:	d107      	bne.n	8008174 <VL53L0X_perform_ref_spad_management+0xc8>
		Status = VL53L0X_WrByte(Dev,
 8008164:	222c      	movs	r2, #44	; 0x2c
 8008166:	214e      	movs	r1, #78	; 0x4e
 8008168:	68f8      	ldr	r0, [r7, #12]
 800816a:	f002 ffb5 	bl	800b0d8 <VL53L0X_WrByte>
 800816e:	4603      	mov	r3, r0
 8008170:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_REG_DYNAMIC_SPAD_NUM_REQUESTED_REF_SPAD, 0x2C);

	if (Status == VL53L0X_ERROR_NONE)
 8008174:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8008178:	2b00      	cmp	r3, #0
 800817a:	d107      	bne.n	800818c <VL53L0X_perform_ref_spad_management+0xe0>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800817c:	2200      	movs	r2, #0
 800817e:	21ff      	movs	r1, #255	; 0xff
 8008180:	68f8      	ldr	r0, [r7, #12]
 8008182:	f002 ffa9 	bl	800b0d8 <VL53L0X_WrByte>
 8008186:	4603      	mov	r3, r0
 8008188:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	if (Status == VL53L0X_ERROR_NONE)
 800818c:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8008190:	2b00      	cmp	r3, #0
 8008192:	d109      	bne.n	80081a8 <VL53L0X_perform_ref_spad_management+0xfc>
		Status = VL53L0X_WrByte(Dev,
 8008194:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8008198:	461a      	mov	r2, r3
 800819a:	21b6      	movs	r1, #182	; 0xb6
 800819c:	68f8      	ldr	r0, [r7, #12]
 800819e:	f002 ff9b 	bl	800b0d8 <VL53L0X_WrByte>
 80081a2:	4603      	mov	r3, r0
 80081a4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_REG_GLOBAL_CONFIG_REF_EN_START_SELECT,
			startSelect);


	if (Status == VL53L0X_ERROR_NONE)
 80081a8:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80081ac:	2b00      	cmp	r3, #0
 80081ae:	d107      	bne.n	80081c0 <VL53L0X_perform_ref_spad_management+0x114>
		Status = VL53L0X_WrByte(Dev,
 80081b0:	2200      	movs	r2, #0
 80081b2:	2180      	movs	r1, #128	; 0x80
 80081b4:	68f8      	ldr	r0, [r7, #12]
 80081b6:	f002 ff8f 	bl	800b0d8 <VL53L0X_WrByte>
 80081ba:	4603      	mov	r3, r0
 80081bc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
				VL53L0X_REG_POWER_MANAGEMENT_GO1_POWER_FORCE, 0);

	/* Perform ref calibration */
	if (Status == VL53L0X_ERROR_NONE)
 80081c0:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80081c4:	2b00      	cmp	r3, #0
 80081c6:	d10a      	bne.n	80081de <VL53L0X_perform_ref_spad_management+0x132>
		Status = VL53L0X_perform_ref_calibration(Dev, &VhvSettings,
 80081c8:	f107 0210 	add.w	r2, r7, #16
 80081cc:	f107 0111 	add.w	r1, r7, #17
 80081d0:	2300      	movs	r3, #0
 80081d2:	68f8      	ldr	r0, [r7, #12]
 80081d4:	f000 fbbb 	bl	800894e <VL53L0X_perform_ref_calibration>
 80081d8:	4603      	mov	r3, r0
 80081da:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			&PhaseCal, 0);

	if (Status == VL53L0X_ERROR_NONE) {
 80081de:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80081e2:	2b00      	cmp	r3, #0
 80081e4:	d121      	bne.n	800822a <VL53L0X_perform_ref_spad_management+0x17e>
		/* Enable Minimum NON-APERTURE Spads */
		currentSpadIndex = 0;
 80081e6:	2300      	movs	r3, #0
 80081e8:	653b      	str	r3, [r7, #80]	; 0x50
		lastSpadIndex = currentSpadIndex;
 80081ea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80081ec:	61bb      	str	r3, [r7, #24]
		needAptSpads = 0;
 80081ee:	2300      	movs	r3, #0
 80081f0:	64fb      	str	r3, [r7, #76]	; 0x4c
		Status = enable_ref_spads(Dev,
 80081f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80081f4:	b2d9      	uxtb	r1, r3
					needAptSpads,
					Dev->Data.SpadData.RefGoodSpadMap,
 80081f6:	68fb      	ldr	r3, [r7, #12]
 80081f8:	f503 7095 	add.w	r0, r3, #298	; 0x12a
					Dev->Data.SpadData.RefSpadEnables,
 80081fc:	68fb      	ldr	r3, [r7, #12]
 80081fe:	f503 7492 	add.w	r4, r3, #292	; 0x124
		Status = enable_ref_spads(Dev,
 8008202:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8008206:	f107 0218 	add.w	r2, r7, #24
 800820a:	9204      	str	r2, [sp, #16]
 800820c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800820e:	9203      	str	r2, [sp, #12]
 8008210:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008212:	9202      	str	r2, [sp, #8]
 8008214:	9301      	str	r3, [sp, #4]
 8008216:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008218:	9300      	str	r3, [sp, #0]
 800821a:	4623      	mov	r3, r4
 800821c:	4602      	mov	r2, r0
 800821e:	68f8      	ldr	r0, [r7, #12]
 8008220:	f7ff fe5e 	bl	8007ee0 <enable_ref_spads>
 8008224:	4603      	mov	r3, r0
 8008226:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					currentSpadIndex,
					minimumSpadCount,
					&lastSpadIndex);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800822a:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800822e:	2b00      	cmp	r3, #0
 8008230:	d174      	bne.n	800831c <VL53L0X_perform_ref_spad_management+0x270>
		currentSpadIndex = lastSpadIndex;
 8008232:	69bb      	ldr	r3, [r7, #24]
 8008234:	653b      	str	r3, [r7, #80]	; 0x50

		Status = perform_ref_signal_measurement(Dev,
 8008236:	f107 0312 	add.w	r3, r7, #18
 800823a:	4619      	mov	r1, r3
 800823c:	68f8      	ldr	r0, [r7, #12]
 800823e:	f7ff fecb 	bl	8007fd8 <perform_ref_signal_measurement>
 8008242:	4603      	mov	r3, r0
 8008244:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			&peakSignalRateRef);
		if ((Status == VL53L0X_ERROR_NONE) &&
 8008248:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800824c:	2b00      	cmp	r3, #0
 800824e:	d161      	bne.n	8008314 <VL53L0X_perform_ref_spad_management+0x268>
			(peakSignalRateRef > targetRefRate)) {
 8008250:	8a7b      	ldrh	r3, [r7, #18]
		if ((Status == VL53L0X_ERROR_NONE) &&
 8008252:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8008254:	429a      	cmp	r2, r3
 8008256:	d25d      	bcs.n	8008314 <VL53L0X_perform_ref_spad_management+0x268>
			/* Signal rate measurement too high,
			 * switch to APERTURE SPADs */

			for (index = 0; index < spadArraySize; index++)
 8008258:	2300      	movs	r3, #0
 800825a:	64bb      	str	r3, [r7, #72]	; 0x48
 800825c:	e009      	b.n	8008272 <VL53L0X_perform_ref_spad_management+0x1c6>
				Dev->Data.SpadData.RefSpadEnables[index] = 0;
 800825e:	68fa      	ldr	r2, [r7, #12]
 8008260:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008262:	4413      	add	r3, r2
 8008264:	f503 7392 	add.w	r3, r3, #292	; 0x124
 8008268:	2200      	movs	r2, #0
 800826a:	701a      	strb	r2, [r3, #0]
			for (index = 0; index < spadArraySize; index++)
 800826c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800826e:	3301      	adds	r3, #1
 8008270:	64bb      	str	r3, [r7, #72]	; 0x48
 8008272:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008274:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008276:	429a      	cmp	r2, r3
 8008278:	d3f1      	bcc.n	800825e <VL53L0X_perform_ref_spad_management+0x1b2>


			/* Increment to the first APERTURE spad */
			while ((is_aperture(startSelect + currentSpadIndex)
 800827a:	e002      	b.n	8008282 <VL53L0X_perform_ref_spad_management+0x1d6>
				== 0) && (currentSpadIndex < maxSpadCount)) {
				currentSpadIndex++;
 800827c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800827e:	3301      	adds	r3, #1
 8008280:	653b      	str	r3, [r7, #80]	; 0x50
			while ((is_aperture(startSelect + currentSpadIndex)
 8008282:	f897 203a 	ldrb.w	r2, [r7, #58]	; 0x3a
 8008286:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008288:	4413      	add	r3, r2
 800828a:	4618      	mov	r0, r3
 800828c:	f7ff fdb0 	bl	8007df0 <is_aperture>
 8008290:	4603      	mov	r3, r0
 8008292:	2b00      	cmp	r3, #0
 8008294:	d103      	bne.n	800829e <VL53L0X_perform_ref_spad_management+0x1f2>
				== 0) && (currentSpadIndex < maxSpadCount)) {
 8008296:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008298:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800829a:	429a      	cmp	r2, r3
 800829c:	d3ee      	bcc.n	800827c <VL53L0X_perform_ref_spad_management+0x1d0>
			}

			needAptSpads = 1;
 800829e:	2301      	movs	r3, #1
 80082a0:	64fb      	str	r3, [r7, #76]	; 0x4c

			Status = enable_ref_spads(Dev,
 80082a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80082a4:	b2d9      	uxtb	r1, r3
					needAptSpads,
					Dev->Data.SpadData.RefGoodSpadMap,
 80082a6:	68fb      	ldr	r3, [r7, #12]
 80082a8:	f503 7095 	add.w	r0, r3, #298	; 0x12a
					Dev->Data.SpadData.RefSpadEnables,
 80082ac:	68fb      	ldr	r3, [r7, #12]
 80082ae:	f503 7492 	add.w	r4, r3, #292	; 0x124
			Status = enable_ref_spads(Dev,
 80082b2:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 80082b6:	f107 0218 	add.w	r2, r7, #24
 80082ba:	9204      	str	r2, [sp, #16]
 80082bc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80082be:	9203      	str	r2, [sp, #12]
 80082c0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80082c2:	9202      	str	r2, [sp, #8]
 80082c4:	9301      	str	r3, [sp, #4]
 80082c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082c8:	9300      	str	r3, [sp, #0]
 80082ca:	4623      	mov	r3, r4
 80082cc:	4602      	mov	r2, r0
 80082ce:	68f8      	ldr	r0, [r7, #12]
 80082d0:	f7ff fe06 	bl	8007ee0 <enable_ref_spads>
 80082d4:	4603      	mov	r3, r0
 80082d6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					startSelect,
					currentSpadIndex,
					minimumSpadCount,
					&lastSpadIndex);

			if (Status == VL53L0X_ERROR_NONE) {
 80082da:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80082de:	2b00      	cmp	r3, #0
 80082e0:	d11b      	bne.n	800831a <VL53L0X_perform_ref_spad_management+0x26e>
				currentSpadIndex = lastSpadIndex;
 80082e2:	69bb      	ldr	r3, [r7, #24]
 80082e4:	653b      	str	r3, [r7, #80]	; 0x50
				Status = perform_ref_signal_measurement(Dev,
 80082e6:	f107 0312 	add.w	r3, r7, #18
 80082ea:	4619      	mov	r1, r3
 80082ec:	68f8      	ldr	r0, [r7, #12]
 80082ee:	f7ff fe73 	bl	8007fd8 <perform_ref_signal_measurement>
 80082f2:	4603      	mov	r3, r0
 80082f4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
						&peakSignalRateRef);

				if ((Status == VL53L0X_ERROR_NONE) &&
 80082f8:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80082fc:	2b00      	cmp	r3, #0
 80082fe:	d10c      	bne.n	800831a <VL53L0X_perform_ref_spad_management+0x26e>
					(peakSignalRateRef > targetRefRate)) {
 8008300:	8a7b      	ldrh	r3, [r7, #18]
				if ((Status == VL53L0X_ERROR_NONE) &&
 8008302:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8008304:	429a      	cmp	r2, r3
 8008306:	d208      	bcs.n	800831a <VL53L0X_perform_ref_spad_management+0x26e>
					 * setting the minimum number of
					 * APERTURE spads. Can do no more
					 * therefore set the min number of
					 * aperture spads as the result.
					 */
					isApertureSpads_int = 1;
 8008308:	2301      	movs	r3, #1
 800830a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
					refSpadCount_int = minimumSpadCount;
 800830e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008310:	63fb      	str	r3, [r7, #60]	; 0x3c
			if (Status == VL53L0X_ERROR_NONE) {
 8008312:	e002      	b.n	800831a <VL53L0X_perform_ref_spad_management+0x26e>
				}
			}
		} else {
			needAptSpads = 0;
 8008314:	2300      	movs	r3, #0
 8008316:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008318:	e000      	b.n	800831c <VL53L0X_perform_ref_spad_management+0x270>
			if (Status == VL53L0X_ERROR_NONE) {
 800831a:	bf00      	nop
		}
	}

	if ((Status == VL53L0X_ERROR_NONE) &&
 800831c:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8008320:	2b00      	cmp	r3, #0
 8008322:	f040 80af 	bne.w	8008484 <VL53L0X_perform_ref_spad_management+0x3d8>
		(peakSignalRateRef < targetRefRate)) {
 8008326:	8a7b      	ldrh	r3, [r7, #18]
	if ((Status == VL53L0X_ERROR_NONE) &&
 8008328:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800832a:	429a      	cmp	r2, r3
 800832c:	f240 80aa 	bls.w	8008484 <VL53L0X_perform_ref_spad_management+0x3d8>
		/* At this point, the minimum number of either aperture
		 * or non-aperture spads have been set. Proceed to add
		 * spads and perform measurements until the target
		 * reference is reached.
		 */
		isApertureSpads_int = needAptSpads;
 8008330:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008332:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
		refSpadCount_int	= minimumSpadCount;
 8008336:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008338:	63fb      	str	r3, [r7, #60]	; 0x3c

		memcpy(lastSpadArray, Dev->Data.SpadData.RefSpadEnables,
 800833a:	68fb      	ldr	r3, [r7, #12]
 800833c:	f503 7192 	add.w	r1, r3, #292	; 0x124
 8008340:	f107 031c 	add.w	r3, r7, #28
 8008344:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008346:	4618      	mov	r0, r3
 8008348:	f003 f820 	bl	800b38c <memcpy>
				spadArraySize);
		lastSignalRateDiff = abs(peakSignalRateRef -
 800834c:	8a7b      	ldrh	r3, [r7, #18]
 800834e:	461a      	mov	r2, r3
 8008350:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8008352:	1ad3      	subs	r3, r2, r3
 8008354:	2b00      	cmp	r3, #0
 8008356:	bfb8      	it	lt
 8008358:	425b      	neglt	r3, r3
 800835a:	647b      	str	r3, [r7, #68]	; 0x44
			targetRefRate);
		complete = 0;
 800835c:	2300      	movs	r3, #0
 800835e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

		while (!complete) {
 8008362:	e086      	b.n	8008472 <VL53L0X_perform_ref_spad_management+0x3c6>
			get_next_good_spad(
				Dev->Data.SpadData.RefGoodSpadMap,
 8008364:	68fb      	ldr	r3, [r7, #12]
 8008366:	f503 7095 	add.w	r0, r3, #298	; 0x12a
			get_next_good_spad(
 800836a:	f107 0314 	add.w	r3, r7, #20
 800836e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008370:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008372:	f7ff fcdf 	bl	8007d34 <get_next_good_spad>
				spadArraySize, currentSpadIndex,
				&nextGoodSpad);

			if (nextGoodSpad == -1) {
 8008376:	697b      	ldr	r3, [r7, #20]
 8008378:	f1b3 3fff 	cmp.w	r3, #4294967295
 800837c:	d103      	bne.n	8008386 <VL53L0X_perform_ref_spad_management+0x2da>
				Status = VL53L0X_ERROR_REF_SPAD_INIT;
 800837e:	23ce      	movs	r3, #206	; 0xce
 8008380:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
				break;
 8008384:	e07e      	b.n	8008484 <VL53L0X_perform_ref_spad_management+0x3d8>
			}

			/* Cannot combine Aperture and Non-Aperture spads, so
			 * ensure the current spad is of the correct type.
			 */
			if (is_aperture((uint32_t)startSelect + nextGoodSpad) !=
 8008386:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 800838a:	697a      	ldr	r2, [r7, #20]
 800838c:	4413      	add	r3, r2
 800838e:	4618      	mov	r0, r3
 8008390:	f7ff fd2e 	bl	8007df0 <is_aperture>
 8008394:	4603      	mov	r3, r0
 8008396:	461a      	mov	r2, r3
 8008398:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800839a:	4293      	cmp	r3, r2
 800839c:	d003      	beq.n	80083a6 <VL53L0X_perform_ref_spad_management+0x2fa>
					needAptSpads) {
				/* At this point we have enabled the maximum
				 * number of Aperture spads.
				 */
				complete = 1;
 800839e:	2301      	movs	r3, #1
 80083a0:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
				break;
 80083a4:	e06e      	b.n	8008484 <VL53L0X_perform_ref_spad_management+0x3d8>
			}

			(refSpadCount_int)++;
 80083a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80083a8:	3301      	adds	r3, #1
 80083aa:	63fb      	str	r3, [r7, #60]	; 0x3c

			currentSpadIndex = nextGoodSpad;
 80083ac:	697b      	ldr	r3, [r7, #20]
 80083ae:	653b      	str	r3, [r7, #80]	; 0x50
			Status = enable_spad_bit(
					Dev->Data.SpadData.RefSpadEnables,
 80083b0:	68fb      	ldr	r3, [r7, #12]
 80083b2:	f503 7392 	add.w	r3, r3, #292	; 0x124
			Status = enable_spad_bit(
 80083b6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80083b8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80083ba:	4618      	mov	r0, r3
 80083bc:	f7ff fd32 	bl	8007e24 <enable_spad_bit>
 80083c0:	4603      	mov	r3, r0
 80083c2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					spadArraySize, currentSpadIndex);

			if (Status == VL53L0X_ERROR_NONE) {
 80083c6:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	d10c      	bne.n	80083e8 <VL53L0X_perform_ref_spad_management+0x33c>
				currentSpadIndex++;
 80083ce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80083d0:	3301      	adds	r3, #1
 80083d2:	653b      	str	r3, [r7, #80]	; 0x50
				/* Proceed to apply the additional spad and
				 * perform measurement. */
				Status = set_ref_spad_map(Dev,
					Dev->Data.SpadData.RefSpadEnables);
 80083d4:	68fb      	ldr	r3, [r7, #12]
 80083d6:	f503 7392 	add.w	r3, r3, #292	; 0x124
				Status = set_ref_spad_map(Dev,
 80083da:	4619      	mov	r1, r3
 80083dc:	68f8      	ldr	r0, [r7, #12]
 80083de:	f7ff fd59 	bl	8007e94 <set_ref_spad_map>
 80083e2:	4603      	mov	r3, r0
 80083e4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			}

			if (Status != VL53L0X_ERROR_NONE)
 80083e8:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80083ec:	2b00      	cmp	r3, #0
 80083ee:	d146      	bne.n	800847e <VL53L0X_perform_ref_spad_management+0x3d2>
				break;

			Status = perform_ref_signal_measurement(Dev,
 80083f0:	f107 0312 	add.w	r3, r7, #18
 80083f4:	4619      	mov	r1, r3
 80083f6:	68f8      	ldr	r0, [r7, #12]
 80083f8:	f7ff fdee 	bl	8007fd8 <perform_ref_signal_measurement>
 80083fc:	4603      	mov	r3, r0
 80083fe:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					&peakSignalRateRef);

			if (Status != VL53L0X_ERROR_NONE)
 8008402:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8008406:	2b00      	cmp	r3, #0
 8008408:	d13b      	bne.n	8008482 <VL53L0X_perform_ref_spad_management+0x3d6>
				break;

			signalRateDiff = abs(peakSignalRateRef - targetRefRate);
 800840a:	8a7b      	ldrh	r3, [r7, #18]
 800840c:	461a      	mov	r2, r3
 800840e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8008410:	1ad3      	subs	r3, r2, r3
 8008412:	2b00      	cmp	r3, #0
 8008414:	bfb8      	it	lt
 8008416:	425b      	neglt	r3, r3
 8008418:	627b      	str	r3, [r7, #36]	; 0x24

			if (peakSignalRateRef > targetRefRate) {
 800841a:	8a7b      	ldrh	r3, [r7, #18]
 800841c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800841e:	429a      	cmp	r2, r3
 8008420:	d21c      	bcs.n	800845c <VL53L0X_perform_ref_spad_management+0x3b0>
				/* Select the spad map that provides the
				 * measurement closest to the target rate,
				 * either above or below it.
				 */
				if (signalRateDiff > lastSignalRateDiff) {
 8008422:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008424:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008426:	429a      	cmp	r2, r3
 8008428:	d914      	bls.n	8008454 <VL53L0X_perform_ref_spad_management+0x3a8>
					/* Previous spad map produced a closer
					 * measurement, so choose this. */
					Status = set_ref_spad_map(Dev,
 800842a:	f107 031c 	add.w	r3, r7, #28
 800842e:	4619      	mov	r1, r3
 8008430:	68f8      	ldr	r0, [r7, #12]
 8008432:	f7ff fd2f 	bl	8007e94 <set_ref_spad_map>
 8008436:	4603      	mov	r3, r0
 8008438:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
							lastSpadArray);
					memcpy(
					Dev->Data.SpadData.RefSpadEnables,
 800843c:	68fb      	ldr	r3, [r7, #12]
 800843e:	f503 7392 	add.w	r3, r3, #292	; 0x124
					memcpy(
 8008442:	f107 011c 	add.w	r1, r7, #28
 8008446:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008448:	4618      	mov	r0, r3
 800844a:	f002 ff9f 	bl	800b38c <memcpy>
					lastSpadArray, spadArraySize);

					(refSpadCount_int)--;
 800844e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008450:	3b01      	subs	r3, #1
 8008452:	63fb      	str	r3, [r7, #60]	; 0x3c
				}
				complete = 1;
 8008454:	2301      	movs	r3, #1
 8008456:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800845a:	e00a      	b.n	8008472 <VL53L0X_perform_ref_spad_management+0x3c6>
			} else {
				/* Continue to add spads */
				lastSignalRateDiff = signalRateDiff;
 800845c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800845e:	647b      	str	r3, [r7, #68]	; 0x44
				memcpy(lastSpadArray,
					Dev->Data.SpadData.RefSpadEnables,
 8008460:	68fb      	ldr	r3, [r7, #12]
 8008462:	f503 7192 	add.w	r1, r3, #292	; 0x124
				memcpy(lastSpadArray,
 8008466:	f107 031c 	add.w	r3, r7, #28
 800846a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800846c:	4618      	mov	r0, r3
 800846e:	f002 ff8d 	bl	800b38c <memcpy>
		while (!complete) {
 8008472:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8008476:	2b00      	cmp	r3, #0
 8008478:	f43f af74 	beq.w	8008364 <VL53L0X_perform_ref_spad_management+0x2b8>
 800847c:	e002      	b.n	8008484 <VL53L0X_perform_ref_spad_management+0x3d8>
				break;
 800847e:	bf00      	nop
 8008480:	e000      	b.n	8008484 <VL53L0X_perform_ref_spad_management+0x3d8>
				break;
 8008482:	bf00      	nop
			}

		} /* while */
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8008484:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8008488:	2b00      	cmp	r3, #0
 800848a:	d115      	bne.n	80084b8 <VL53L0X_perform_ref_spad_management+0x40c>
		*refSpadCount = refSpadCount_int;
 800848c:	68bb      	ldr	r3, [r7, #8]
 800848e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008490:	601a      	str	r2, [r3, #0]
		*isApertureSpads = isApertureSpads_int;
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	f897 203b 	ldrb.w	r2, [r7, #59]	; 0x3b
 8008498:	701a      	strb	r2, [r3, #0]

		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 1);
 800849a:	68fb      	ldr	r3, [r7, #12]
 800849c:	2201      	movs	r2, #1
 800849e:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 80084a2:	68bb      	ldr	r3, [r7, #8]
 80084a4:	681b      	ldr	r3, [r3, #0]
 80084a6:	b2da      	uxtb	r2, r3
 80084a8:	68fb      	ldr	r3, [r7, #12]
 80084aa:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
			ReferenceSpadCount, (uint8_t)(*refSpadCount));
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	781a      	ldrb	r2, [r3, #0]
 80084b2:	68fb      	ldr	r3, [r7, #12]
 80084b4:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
			ReferenceSpadType, *isApertureSpads);
	}

	return Status;
 80084b8:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
}
 80084bc:	4618      	mov	r0, r3
 80084be:	375c      	adds	r7, #92	; 0x5c
 80084c0:	46bd      	mov	sp, r7
 80084c2:	bd90      	pop	{r4, r7, pc}

080084c4 <VL53L0X_set_reference_spads>:

VL53L0X_Error VL53L0X_set_reference_spads(VL53L0X_DEV Dev,
				 uint32_t count, uint8_t isApertureSpads)
{
 80084c4:	b590      	push	{r4, r7, lr}
 80084c6:	b093      	sub	sp, #76	; 0x4c
 80084c8:	af06      	add	r7, sp, #24
 80084ca:	60f8      	str	r0, [r7, #12]
 80084cc:	60b9      	str	r1, [r7, #8]
 80084ce:	4613      	mov	r3, r2
 80084d0:	71fb      	strb	r3, [r7, #7]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80084d2:	2300      	movs	r3, #0
 80084d4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint32_t currentSpadIndex = 0;
 80084d8:	2300      	movs	r3, #0
 80084da:	62bb      	str	r3, [r7, #40]	; 0x28
	uint8_t startSelect = 0xB4;
 80084dc:	23b4      	movs	r3, #180	; 0xb4
 80084de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	uint32_t spadArraySize = 6;
 80084e2:	2306      	movs	r3, #6
 80084e4:	61fb      	str	r3, [r7, #28]
	uint32_t maxSpadCount = 44;
 80084e6:	232c      	movs	r3, #44	; 0x2c
 80084e8:	61bb      	str	r3, [r7, #24]
	 * aperture or
	 * non-aperture, as requested.
	 * The good spad map will be applied.
	 */

	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 80084ea:	2201      	movs	r2, #1
 80084ec:	21ff      	movs	r1, #255	; 0xff
 80084ee:	68f8      	ldr	r0, [r7, #12]
 80084f0:	f002 fdf2 	bl	800b0d8 <VL53L0X_WrByte>
 80084f4:	4603      	mov	r3, r0
 80084f6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	if (Status == VL53L0X_ERROR_NONE)
 80084fa:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80084fe:	2b00      	cmp	r3, #0
 8008500:	d107      	bne.n	8008512 <VL53L0X_set_reference_spads+0x4e>
		Status = VL53L0X_WrByte(Dev,
 8008502:	2200      	movs	r2, #0
 8008504:	214f      	movs	r1, #79	; 0x4f
 8008506:	68f8      	ldr	r0, [r7, #12]
 8008508:	f002 fde6 	bl	800b0d8 <VL53L0X_WrByte>
 800850c:	4603      	mov	r3, r0
 800850e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L0X_REG_DYNAMIC_SPAD_REF_EN_START_OFFSET, 0x00);

	if (Status == VL53L0X_ERROR_NONE)
 8008512:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8008516:	2b00      	cmp	r3, #0
 8008518:	d107      	bne.n	800852a <VL53L0X_set_reference_spads+0x66>
		Status = VL53L0X_WrByte(Dev,
 800851a:	222c      	movs	r2, #44	; 0x2c
 800851c:	214e      	movs	r1, #78	; 0x4e
 800851e:	68f8      	ldr	r0, [r7, #12]
 8008520:	f002 fdda 	bl	800b0d8 <VL53L0X_WrByte>
 8008524:	4603      	mov	r3, r0
 8008526:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L0X_REG_DYNAMIC_SPAD_NUM_REQUESTED_REF_SPAD, 0x2C);

	if (Status == VL53L0X_ERROR_NONE)
 800852a:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800852e:	2b00      	cmp	r3, #0
 8008530:	d107      	bne.n	8008542 <VL53L0X_set_reference_spads+0x7e>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8008532:	2200      	movs	r2, #0
 8008534:	21ff      	movs	r1, #255	; 0xff
 8008536:	68f8      	ldr	r0, [r7, #12]
 8008538:	f002 fdce 	bl	800b0d8 <VL53L0X_WrByte>
 800853c:	4603      	mov	r3, r0
 800853e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	if (Status == VL53L0X_ERROR_NONE)
 8008542:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8008546:	2b00      	cmp	r3, #0
 8008548:	d109      	bne.n	800855e <VL53L0X_set_reference_spads+0x9a>
		Status = VL53L0X_WrByte(Dev,
 800854a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800854e:	461a      	mov	r2, r3
 8008550:	21b6      	movs	r1, #182	; 0xb6
 8008552:	68f8      	ldr	r0, [r7, #12]
 8008554:	f002 fdc0 	bl	800b0d8 <VL53L0X_WrByte>
 8008558:	4603      	mov	r3, r0
 800855a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L0X_REG_GLOBAL_CONFIG_REF_EN_START_SELECT,
			startSelect);

	for (index = 0; index < spadArraySize; index++)
 800855e:	2300      	movs	r3, #0
 8008560:	627b      	str	r3, [r7, #36]	; 0x24
 8008562:	e009      	b.n	8008578 <VL53L0X_set_reference_spads+0xb4>
		Dev->Data.SpadData.RefSpadEnables[index] = 0;
 8008564:	68fa      	ldr	r2, [r7, #12]
 8008566:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008568:	4413      	add	r3, r2
 800856a:	f503 7392 	add.w	r3, r3, #292	; 0x124
 800856e:	2200      	movs	r2, #0
 8008570:	701a      	strb	r2, [r3, #0]
	for (index = 0; index < spadArraySize; index++)
 8008572:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008574:	3301      	adds	r3, #1
 8008576:	627b      	str	r3, [r7, #36]	; 0x24
 8008578:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800857a:	69fb      	ldr	r3, [r7, #28]
 800857c:	429a      	cmp	r2, r3
 800857e:	d3f1      	bcc.n	8008564 <VL53L0X_set_reference_spads+0xa0>

	if (isApertureSpads) {
 8008580:	79fb      	ldrb	r3, [r7, #7]
 8008582:	2b00      	cmp	r3, #0
 8008584:	d011      	beq.n	80085aa <VL53L0X_set_reference_spads+0xe6>
		/* Increment to the first APERTURE spad */
		while ((is_aperture(startSelect + currentSpadIndex) == 0) &&
 8008586:	e002      	b.n	800858e <VL53L0X_set_reference_spads+0xca>
			  (currentSpadIndex < maxSpadCount)) {
			currentSpadIndex++;
 8008588:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800858a:	3301      	adds	r3, #1
 800858c:	62bb      	str	r3, [r7, #40]	; 0x28
		while ((is_aperture(startSelect + currentSpadIndex) == 0) &&
 800858e:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8008592:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008594:	4413      	add	r3, r2
 8008596:	4618      	mov	r0, r3
 8008598:	f7ff fc2a 	bl	8007df0 <is_aperture>
 800859c:	4603      	mov	r3, r0
 800859e:	2b00      	cmp	r3, #0
 80085a0:	d103      	bne.n	80085aa <VL53L0X_set_reference_spads+0xe6>
 80085a2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80085a4:	69bb      	ldr	r3, [r7, #24]
 80085a6:	429a      	cmp	r2, r3
 80085a8:	d3ee      	bcc.n	8008588 <VL53L0X_set_reference_spads+0xc4>
		}
	}
	Status = enable_ref_spads(Dev,
				isApertureSpads,
				Dev->Data.SpadData.RefGoodSpadMap,
 80085aa:	68fb      	ldr	r3, [r7, #12]
 80085ac:	f503 7095 	add.w	r0, r3, #298	; 0x12a
				Dev->Data.SpadData.RefSpadEnables,
 80085b0:	68fb      	ldr	r3, [r7, #12]
 80085b2:	f503 7492 	add.w	r4, r3, #292	; 0x124
	Status = enable_ref_spads(Dev,
 80085b6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80085ba:	79f9      	ldrb	r1, [r7, #7]
 80085bc:	f107 0214 	add.w	r2, r7, #20
 80085c0:	9204      	str	r2, [sp, #16]
 80085c2:	68ba      	ldr	r2, [r7, #8]
 80085c4:	9203      	str	r2, [sp, #12]
 80085c6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80085c8:	9202      	str	r2, [sp, #8]
 80085ca:	9301      	str	r3, [sp, #4]
 80085cc:	69fb      	ldr	r3, [r7, #28]
 80085ce:	9300      	str	r3, [sp, #0]
 80085d0:	4623      	mov	r3, r4
 80085d2:	4602      	mov	r2, r0
 80085d4:	68f8      	ldr	r0, [r7, #12]
 80085d6:	f7ff fc83 	bl	8007ee0 <enable_ref_spads>
 80085da:	4603      	mov	r3, r0
 80085dc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				startSelect,
				currentSpadIndex,
				count,
				&lastSpadIndex);

	if (Status == VL53L0X_ERROR_NONE) {
 80085e0:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80085e4:	2b00      	cmp	r3, #0
 80085e6:	d10c      	bne.n	8008602 <VL53L0X_set_reference_spads+0x13e>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 1);
 80085e8:	68fb      	ldr	r3, [r7, #12]
 80085ea:	2201      	movs	r2, #1
 80085ec:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 80085f0:	68bb      	ldr	r3, [r7, #8]
 80085f2:	b2da      	uxtb	r2, r3
 80085f4:	68fb      	ldr	r3, [r7, #12]
 80085f6:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
			ReferenceSpadCount, (uint8_t)(count));
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 80085fa:	68fb      	ldr	r3, [r7, #12]
 80085fc:	79fa      	ldrb	r2, [r7, #7]
 80085fe:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
			ReferenceSpadType, isApertureSpads);
	}

	return Status;
 8008602:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 8008606:	4618      	mov	r0, r3
 8008608:	3734      	adds	r7, #52	; 0x34
 800860a:	46bd      	mov	sp, r7
 800860c:	bd90      	pop	{r4, r7, pc}

0800860e <VL53L0X_perform_single_ref_calibration>:
}


VL53L0X_Error VL53L0X_perform_single_ref_calibration(VL53L0X_DEV Dev,
		uint8_t vhv_init_byte)
{
 800860e:	b580      	push	{r7, lr}
 8008610:	b084      	sub	sp, #16
 8008612:	af00      	add	r7, sp, #0
 8008614:	6078      	str	r0, [r7, #4]
 8008616:	460b      	mov	r3, r1
 8008618:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800861a:	2300      	movs	r3, #0
 800861c:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 800861e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008622:	2b00      	cmp	r3, #0
 8008624:	d10a      	bne.n	800863c <VL53L0X_perform_single_ref_calibration+0x2e>
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START,
 8008626:	78fb      	ldrb	r3, [r7, #3]
 8008628:	f043 0301 	orr.w	r3, r3, #1
 800862c:	b2db      	uxtb	r3, r3
 800862e:	461a      	mov	r2, r3
 8008630:	2100      	movs	r1, #0
 8008632:	6878      	ldr	r0, [r7, #4]
 8008634:	f002 fd50 	bl	800b0d8 <VL53L0X_WrByte>
 8008638:	4603      	mov	r3, r0
 800863a:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_SYSRANGE_MODE_START_STOP |
				vhv_init_byte);

	if (Status == VL53L0X_ERROR_NONE)
 800863c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008640:	2b00      	cmp	r3, #0
 8008642:	d104      	bne.n	800864e <VL53L0X_perform_single_ref_calibration+0x40>
		Status = VL53L0X_measurement_poll_for_completion(Dev);
 8008644:	6878      	ldr	r0, [r7, #4]
 8008646:	f000 f9bf 	bl	80089c8 <VL53L0X_measurement_poll_for_completion>
 800864a:	4603      	mov	r3, r0
 800864c:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 800864e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008652:	2b00      	cmp	r3, #0
 8008654:	d105      	bne.n	8008662 <VL53L0X_perform_single_ref_calibration+0x54>
		Status = VL53L0X_ClearInterruptMask(Dev, 0);
 8008656:	2100      	movs	r1, #0
 8008658:	6878      	ldr	r0, [r7, #4]
 800865a:	f7ff fab5 	bl	8007bc8 <VL53L0X_ClearInterruptMask>
 800865e:	4603      	mov	r3, r0
 8008660:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 8008662:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008666:	2b00      	cmp	r3, #0
 8008668:	d106      	bne.n	8008678 <VL53L0X_perform_single_ref_calibration+0x6a>
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START, 0x00);
 800866a:	2200      	movs	r2, #0
 800866c:	2100      	movs	r1, #0
 800866e:	6878      	ldr	r0, [r7, #4]
 8008670:	f002 fd32 	bl	800b0d8 <VL53L0X_WrByte>
 8008674:	4603      	mov	r3, r0
 8008676:	73fb      	strb	r3, [r7, #15]

	return Status;
 8008678:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800867c:	4618      	mov	r0, r3
 800867e:	3710      	adds	r7, #16
 8008680:	46bd      	mov	sp, r7
 8008682:	bd80      	pop	{r7, pc}

08008684 <VL53L0X_ref_calibration_io>:

VL53L0X_Error VL53L0X_ref_calibration_io(VL53L0X_DEV Dev, uint8_t read_not_write,
	uint8_t VhvSettings, uint8_t PhaseCal,
	uint8_t *pVhvSettings, uint8_t *pPhaseCal,
	const uint8_t vhv_enable, const uint8_t phase_enable)
{
 8008684:	b580      	push	{r7, lr}
 8008686:	b084      	sub	sp, #16
 8008688:	af00      	add	r7, sp, #0
 800868a:	6078      	str	r0, [r7, #4]
 800868c:	4608      	mov	r0, r1
 800868e:	4611      	mov	r1, r2
 8008690:	461a      	mov	r2, r3
 8008692:	4603      	mov	r3, r0
 8008694:	70fb      	strb	r3, [r7, #3]
 8008696:	460b      	mov	r3, r1
 8008698:	70bb      	strb	r3, [r7, #2]
 800869a:	4613      	mov	r3, r2
 800869c:	707b      	strb	r3, [r7, #1]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800869e:	2300      	movs	r3, #0
 80086a0:	73fb      	strb	r3, [r7, #15]
	uint8_t PhaseCalint = 0;
 80086a2:	2300      	movs	r3, #0
 80086a4:	73bb      	strb	r3, [r7, #14]

	/* Read VHV from device */
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 80086a6:	2201      	movs	r2, #1
 80086a8:	21ff      	movs	r1, #255	; 0xff
 80086aa:	6878      	ldr	r0, [r7, #4]
 80086ac:	f002 fd14 	bl	800b0d8 <VL53L0X_WrByte>
 80086b0:	4603      	mov	r3, r0
 80086b2:	461a      	mov	r2, r3
 80086b4:	7bfb      	ldrb	r3, [r7, #15]
 80086b6:	4313      	orrs	r3, r2
 80086b8:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 80086ba:	2200      	movs	r2, #0
 80086bc:	2100      	movs	r1, #0
 80086be:	6878      	ldr	r0, [r7, #4]
 80086c0:	f002 fd0a 	bl	800b0d8 <VL53L0X_WrByte>
 80086c4:	4603      	mov	r3, r0
 80086c6:	461a      	mov	r2, r3
 80086c8:	7bfb      	ldrb	r3, [r7, #15]
 80086ca:	4313      	orrs	r3, r2
 80086cc:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 80086ce:	2200      	movs	r2, #0
 80086d0:	21ff      	movs	r1, #255	; 0xff
 80086d2:	6878      	ldr	r0, [r7, #4]
 80086d4:	f002 fd00 	bl	800b0d8 <VL53L0X_WrByte>
 80086d8:	4603      	mov	r3, r0
 80086da:	461a      	mov	r2, r3
 80086dc:	7bfb      	ldrb	r3, [r7, #15]
 80086de:	4313      	orrs	r3, r2
 80086e0:	73fb      	strb	r3, [r7, #15]

	if (read_not_write) {
 80086e2:	78fb      	ldrb	r3, [r7, #3]
 80086e4:	2b00      	cmp	r3, #0
 80086e6:	d01e      	beq.n	8008726 <VL53L0X_ref_calibration_io+0xa2>
		if (vhv_enable)
 80086e8:	f897 3020 	ldrb.w	r3, [r7, #32]
 80086ec:	2b00      	cmp	r3, #0
 80086ee:	d009      	beq.n	8008704 <VL53L0X_ref_calibration_io+0x80>
			Status |= VL53L0X_RdByte(Dev, 0xCB, pVhvSettings);
 80086f0:	69ba      	ldr	r2, [r7, #24]
 80086f2:	21cb      	movs	r1, #203	; 0xcb
 80086f4:	6878      	ldr	r0, [r7, #4]
 80086f6:	f002 fd71 	bl	800b1dc <VL53L0X_RdByte>
 80086fa:	4603      	mov	r3, r0
 80086fc:	461a      	mov	r2, r3
 80086fe:	7bfb      	ldrb	r3, [r7, #15]
 8008700:	4313      	orrs	r3, r2
 8008702:	73fb      	strb	r3, [r7, #15]
		if (phase_enable)
 8008704:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8008708:	2b00      	cmp	r3, #0
 800870a:	d02a      	beq.n	8008762 <VL53L0X_ref_calibration_io+0xde>
			Status |= VL53L0X_RdByte(Dev, 0xEE, &PhaseCalint);
 800870c:	f107 030e 	add.w	r3, r7, #14
 8008710:	461a      	mov	r2, r3
 8008712:	21ee      	movs	r1, #238	; 0xee
 8008714:	6878      	ldr	r0, [r7, #4]
 8008716:	f002 fd61 	bl	800b1dc <VL53L0X_RdByte>
 800871a:	4603      	mov	r3, r0
 800871c:	461a      	mov	r2, r3
 800871e:	7bfb      	ldrb	r3, [r7, #15]
 8008720:	4313      	orrs	r3, r2
 8008722:	73fb      	strb	r3, [r7, #15]
 8008724:	e01d      	b.n	8008762 <VL53L0X_ref_calibration_io+0xde>
	} else {
		if (vhv_enable)
 8008726:	f897 3020 	ldrb.w	r3, [r7, #32]
 800872a:	2b00      	cmp	r3, #0
 800872c:	d00a      	beq.n	8008744 <VL53L0X_ref_calibration_io+0xc0>
			Status |= VL53L0X_WrByte(Dev, 0xCB, VhvSettings);
 800872e:	78bb      	ldrb	r3, [r7, #2]
 8008730:	461a      	mov	r2, r3
 8008732:	21cb      	movs	r1, #203	; 0xcb
 8008734:	6878      	ldr	r0, [r7, #4]
 8008736:	f002 fccf 	bl	800b0d8 <VL53L0X_WrByte>
 800873a:	4603      	mov	r3, r0
 800873c:	461a      	mov	r2, r3
 800873e:	7bfb      	ldrb	r3, [r7, #15]
 8008740:	4313      	orrs	r3, r2
 8008742:	73fb      	strb	r3, [r7, #15]
		if (phase_enable)
 8008744:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8008748:	2b00      	cmp	r3, #0
 800874a:	d00a      	beq.n	8008762 <VL53L0X_ref_calibration_io+0xde>
			Status |= VL53L0X_UpdateByte(Dev, 0xEE, 0x80, PhaseCal);
 800874c:	787b      	ldrb	r3, [r7, #1]
 800874e:	2280      	movs	r2, #128	; 0x80
 8008750:	21ee      	movs	r1, #238	; 0xee
 8008752:	6878      	ldr	r0, [r7, #4]
 8008754:	f002 fd0e 	bl	800b174 <VL53L0X_UpdateByte>
 8008758:	4603      	mov	r3, r0
 800875a:	461a      	mov	r2, r3
 800875c:	7bfb      	ldrb	r3, [r7, #15]
 800875e:	4313      	orrs	r3, r2
 8008760:	73fb      	strb	r3, [r7, #15]
	}

	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8008762:	2201      	movs	r2, #1
 8008764:	21ff      	movs	r1, #255	; 0xff
 8008766:	6878      	ldr	r0, [r7, #4]
 8008768:	f002 fcb6 	bl	800b0d8 <VL53L0X_WrByte>
 800876c:	4603      	mov	r3, r0
 800876e:	461a      	mov	r2, r3
 8008770:	7bfb      	ldrb	r3, [r7, #15]
 8008772:	4313      	orrs	r3, r2
 8008774:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 8008776:	2201      	movs	r2, #1
 8008778:	2100      	movs	r1, #0
 800877a:	6878      	ldr	r0, [r7, #4]
 800877c:	f002 fcac 	bl	800b0d8 <VL53L0X_WrByte>
 8008780:	4603      	mov	r3, r0
 8008782:	461a      	mov	r2, r3
 8008784:	7bfb      	ldrb	r3, [r7, #15]
 8008786:	4313      	orrs	r3, r2
 8008788:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800878a:	2200      	movs	r2, #0
 800878c:	21ff      	movs	r1, #255	; 0xff
 800878e:	6878      	ldr	r0, [r7, #4]
 8008790:	f002 fca2 	bl	800b0d8 <VL53L0X_WrByte>
 8008794:	4603      	mov	r3, r0
 8008796:	461a      	mov	r2, r3
 8008798:	7bfb      	ldrb	r3, [r7, #15]
 800879a:	4313      	orrs	r3, r2
 800879c:	73fb      	strb	r3, [r7, #15]

	*pPhaseCal = (uint8_t)(PhaseCalint&0xEF);
 800879e:	7bbb      	ldrb	r3, [r7, #14]
 80087a0:	f023 0310 	bic.w	r3, r3, #16
 80087a4:	b2da      	uxtb	r2, r3
 80087a6:	69fb      	ldr	r3, [r7, #28]
 80087a8:	701a      	strb	r2, [r3, #0]

	return Status;
 80087aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80087ae:	4618      	mov	r0, r3
 80087b0:	3710      	adds	r7, #16
 80087b2:	46bd      	mov	sp, r7
 80087b4:	bd80      	pop	{r7, pc}

080087b6 <VL53L0X_perform_vhv_calibration>:


VL53L0X_Error VL53L0X_perform_vhv_calibration(VL53L0X_DEV Dev,
	uint8_t *pVhvSettings, const uint8_t get_data_enable,
	const uint8_t restore_config)
{
 80087b6:	b580      	push	{r7, lr}
 80087b8:	b08a      	sub	sp, #40	; 0x28
 80087ba:	af04      	add	r7, sp, #16
 80087bc:	60f8      	str	r0, [r7, #12]
 80087be:	60b9      	str	r1, [r7, #8]
 80087c0:	4611      	mov	r1, r2
 80087c2:	461a      	mov	r2, r3
 80087c4:	460b      	mov	r3, r1
 80087c6:	71fb      	strb	r3, [r7, #7]
 80087c8:	4613      	mov	r3, r2
 80087ca:	71bb      	strb	r3, [r7, #6]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80087cc:	2300      	movs	r3, #0
 80087ce:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 80087d0:	2300      	movs	r3, #0
 80087d2:	75bb      	strb	r3, [r7, #22]
	uint8_t VhvSettings = 0;
 80087d4:	2300      	movs	r3, #0
 80087d6:	757b      	strb	r3, [r7, #21]
	uint8_t PhaseCal = 0;
 80087d8:	2300      	movs	r3, #0
 80087da:	753b      	strb	r3, [r7, #20]
	uint8_t PhaseCalInt = 0;
 80087dc:	2300      	movs	r3, #0
 80087de:	74fb      	strb	r3, [r7, #19]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	if (restore_config)
 80087e0:	79bb      	ldrb	r3, [r7, #6]
 80087e2:	2b00      	cmp	r3, #0
 80087e4:	d003      	beq.n	80087ee <VL53L0X_perform_vhv_calibration+0x38>
		SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 80087e6:	68fb      	ldr	r3, [r7, #12]
 80087e8:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 80087ec:	75bb      	strb	r3, [r7, #22]

	/* Run VHV */
	Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0x01);
 80087ee:	2201      	movs	r2, #1
 80087f0:	2101      	movs	r1, #1
 80087f2:	68f8      	ldr	r0, [r7, #12]
 80087f4:	f002 fc70 	bl	800b0d8 <VL53L0X_WrByte>
 80087f8:	4603      	mov	r3, r0
 80087fa:	75fb      	strb	r3, [r7, #23]

	if (Status == VL53L0X_ERROR_NONE)
 80087fc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008800:	2b00      	cmp	r3, #0
 8008802:	d105      	bne.n	8008810 <VL53L0X_perform_vhv_calibration+0x5a>
		Status = VL53L0X_perform_single_ref_calibration(Dev, 0x40);
 8008804:	2140      	movs	r1, #64	; 0x40
 8008806:	68f8      	ldr	r0, [r7, #12]
 8008808:	f7ff ff01 	bl	800860e <VL53L0X_perform_single_ref_calibration>
 800880c:	4603      	mov	r3, r0
 800880e:	75fb      	strb	r3, [r7, #23]

	/* Read VHV from device */
	if ((Status == VL53L0X_ERROR_NONE) && (get_data_enable == 1)) {
 8008810:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008814:	2b00      	cmp	r3, #0
 8008816:	d115      	bne.n	8008844 <VL53L0X_perform_vhv_calibration+0x8e>
 8008818:	79fb      	ldrb	r3, [r7, #7]
 800881a:	2b01      	cmp	r3, #1
 800881c:	d112      	bne.n	8008844 <VL53L0X_perform_vhv_calibration+0x8e>
		Status = VL53L0X_ref_calibration_io(Dev, 1,
 800881e:	7d39      	ldrb	r1, [r7, #20]
 8008820:	7d7a      	ldrb	r2, [r7, #21]
 8008822:	2300      	movs	r3, #0
 8008824:	9303      	str	r3, [sp, #12]
 8008826:	2301      	movs	r3, #1
 8008828:	9302      	str	r3, [sp, #8]
 800882a:	f107 0313 	add.w	r3, r7, #19
 800882e:	9301      	str	r3, [sp, #4]
 8008830:	68bb      	ldr	r3, [r7, #8]
 8008832:	9300      	str	r3, [sp, #0]
 8008834:	460b      	mov	r3, r1
 8008836:	2101      	movs	r1, #1
 8008838:	68f8      	ldr	r0, [r7, #12]
 800883a:	f7ff ff23 	bl	8008684 <VL53L0X_ref_calibration_io>
 800883e:	4603      	mov	r3, r0
 8008840:	75fb      	strb	r3, [r7, #23]
 8008842:	e002      	b.n	800884a <VL53L0X_perform_vhv_calibration+0x94>
			VhvSettings, PhaseCal, /* Not used here */
			pVhvSettings, &PhaseCalInt,
			1, 0);
	} else
		*pVhvSettings = 0;
 8008844:	68bb      	ldr	r3, [r7, #8]
 8008846:	2200      	movs	r2, #0
 8008848:	701a      	strb	r2, [r3, #0]


	if ((Status == VL53L0X_ERROR_NONE) && restore_config) {
 800884a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800884e:	2b00      	cmp	r3, #0
 8008850:	d112      	bne.n	8008878 <VL53L0X_perform_vhv_calibration+0xc2>
 8008852:	79bb      	ldrb	r3, [r7, #6]
 8008854:	2b00      	cmp	r3, #0
 8008856:	d00f      	beq.n	8008878 <VL53L0X_perform_vhv_calibration+0xc2>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8008858:	7dbb      	ldrb	r3, [r7, #22]
 800885a:	461a      	mov	r2, r3
 800885c:	2101      	movs	r1, #1
 800885e:	68f8      	ldr	r0, [r7, #12]
 8008860:	f002 fc3a 	bl	800b0d8 <VL53L0X_WrByte>
 8008864:	4603      	mov	r3, r0
 8008866:	75fb      	strb	r3, [r7, #23]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 8008868:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800886c:	2b00      	cmp	r3, #0
 800886e:	d103      	bne.n	8008878 <VL53L0X_perform_vhv_calibration+0xc2>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 8008870:	68fb      	ldr	r3, [r7, #12]
 8008872:	7dba      	ldrb	r2, [r7, #22]
 8008874:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	return Status;
 8008878:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800887c:	4618      	mov	r0, r3
 800887e:	3718      	adds	r7, #24
 8008880:	46bd      	mov	sp, r7
 8008882:	bd80      	pop	{r7, pc}

08008884 <VL53L0X_perform_phase_calibration>:

VL53L0X_Error VL53L0X_perform_phase_calibration(VL53L0X_DEV Dev,
	uint8_t *pPhaseCal, const uint8_t get_data_enable,
	const uint8_t restore_config)
{
 8008884:	b580      	push	{r7, lr}
 8008886:	b08a      	sub	sp, #40	; 0x28
 8008888:	af04      	add	r7, sp, #16
 800888a:	60f8      	str	r0, [r7, #12]
 800888c:	60b9      	str	r1, [r7, #8]
 800888e:	4611      	mov	r1, r2
 8008890:	461a      	mov	r2, r3
 8008892:	460b      	mov	r3, r1
 8008894:	71fb      	strb	r3, [r7, #7]
 8008896:	4613      	mov	r3, r2
 8008898:	71bb      	strb	r3, [r7, #6]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800889a:	2300      	movs	r3, #0
 800889c:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 800889e:	2300      	movs	r3, #0
 80088a0:	75bb      	strb	r3, [r7, #22]
	uint8_t VhvSettings = 0;
 80088a2:	2300      	movs	r3, #0
 80088a4:	757b      	strb	r3, [r7, #21]
	uint8_t PhaseCal = 0;
 80088a6:	2300      	movs	r3, #0
 80088a8:	753b      	strb	r3, [r7, #20]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	if (restore_config)
 80088aa:	79bb      	ldrb	r3, [r7, #6]
 80088ac:	2b00      	cmp	r3, #0
 80088ae:	d003      	beq.n	80088b8 <VL53L0X_perform_phase_calibration+0x34>
		SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 80088b0:	68fb      	ldr	r3, [r7, #12]
 80088b2:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 80088b6:	75bb      	strb	r3, [r7, #22]

	/* Run PhaseCal */
	Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0x02);
 80088b8:	2202      	movs	r2, #2
 80088ba:	2101      	movs	r1, #1
 80088bc:	68f8      	ldr	r0, [r7, #12]
 80088be:	f002 fc0b 	bl	800b0d8 <VL53L0X_WrByte>
 80088c2:	4603      	mov	r3, r0
 80088c4:	75fb      	strb	r3, [r7, #23]

	if (Status == VL53L0X_ERROR_NONE)
 80088c6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80088ca:	2b00      	cmp	r3, #0
 80088cc:	d105      	bne.n	80088da <VL53L0X_perform_phase_calibration+0x56>
		Status = VL53L0X_perform_single_ref_calibration(Dev, 0x0);
 80088ce:	2100      	movs	r1, #0
 80088d0:	68f8      	ldr	r0, [r7, #12]
 80088d2:	f7ff fe9c 	bl	800860e <VL53L0X_perform_single_ref_calibration>
 80088d6:	4603      	mov	r3, r0
 80088d8:	75fb      	strb	r3, [r7, #23]

	/* Read PhaseCal from device */
	if ((Status == VL53L0X_ERROR_NONE) && (get_data_enable == 1)) {
 80088da:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80088de:	2b00      	cmp	r3, #0
 80088e0:	d115      	bne.n	800890e <VL53L0X_perform_phase_calibration+0x8a>
 80088e2:	79fb      	ldrb	r3, [r7, #7]
 80088e4:	2b01      	cmp	r3, #1
 80088e6:	d112      	bne.n	800890e <VL53L0X_perform_phase_calibration+0x8a>
		Status = VL53L0X_ref_calibration_io(Dev, 1,
 80088e8:	7d39      	ldrb	r1, [r7, #20]
 80088ea:	7d7a      	ldrb	r2, [r7, #21]
 80088ec:	2301      	movs	r3, #1
 80088ee:	9303      	str	r3, [sp, #12]
 80088f0:	2300      	movs	r3, #0
 80088f2:	9302      	str	r3, [sp, #8]
 80088f4:	68bb      	ldr	r3, [r7, #8]
 80088f6:	9301      	str	r3, [sp, #4]
 80088f8:	f107 0313 	add.w	r3, r7, #19
 80088fc:	9300      	str	r3, [sp, #0]
 80088fe:	460b      	mov	r3, r1
 8008900:	2101      	movs	r1, #1
 8008902:	68f8      	ldr	r0, [r7, #12]
 8008904:	f7ff febe 	bl	8008684 <VL53L0X_ref_calibration_io>
 8008908:	4603      	mov	r3, r0
 800890a:	75fb      	strb	r3, [r7, #23]
 800890c:	e002      	b.n	8008914 <VL53L0X_perform_phase_calibration+0x90>
			VhvSettings, PhaseCal, /* Not used here */
			&VhvSettingsint, pPhaseCal,
			0, 1);
	} else
		*pPhaseCal = 0;
 800890e:	68bb      	ldr	r3, [r7, #8]
 8008910:	2200      	movs	r2, #0
 8008912:	701a      	strb	r2, [r3, #0]


	if ((Status == VL53L0X_ERROR_NONE) && restore_config) {
 8008914:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008918:	2b00      	cmp	r3, #0
 800891a:	d112      	bne.n	8008942 <VL53L0X_perform_phase_calibration+0xbe>
 800891c:	79bb      	ldrb	r3, [r7, #6]
 800891e:	2b00      	cmp	r3, #0
 8008920:	d00f      	beq.n	8008942 <VL53L0X_perform_phase_calibration+0xbe>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8008922:	7dbb      	ldrb	r3, [r7, #22]
 8008924:	461a      	mov	r2, r3
 8008926:	2101      	movs	r1, #1
 8008928:	68f8      	ldr	r0, [r7, #12]
 800892a:	f002 fbd5 	bl	800b0d8 <VL53L0X_WrByte>
 800892e:	4603      	mov	r3, r0
 8008930:	75fb      	strb	r3, [r7, #23]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 8008932:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008936:	2b00      	cmp	r3, #0
 8008938:	d103      	bne.n	8008942 <VL53L0X_perform_phase_calibration+0xbe>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 800893a:	68fb      	ldr	r3, [r7, #12]
 800893c:	7dba      	ldrb	r2, [r7, #22]
 800893e:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	return Status;
 8008942:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008946:	4618      	mov	r0, r3
 8008948:	3718      	adds	r7, #24
 800894a:	46bd      	mov	sp, r7
 800894c:	bd80      	pop	{r7, pc}

0800894e <VL53L0X_perform_ref_calibration>:

VL53L0X_Error VL53L0X_perform_ref_calibration(VL53L0X_DEV Dev,
	uint8_t *pVhvSettings, uint8_t *pPhaseCal, uint8_t get_data_enable)
{
 800894e:	b580      	push	{r7, lr}
 8008950:	b086      	sub	sp, #24
 8008952:	af00      	add	r7, sp, #0
 8008954:	60f8      	str	r0, [r7, #12]
 8008956:	60b9      	str	r1, [r7, #8]
 8008958:	607a      	str	r2, [r7, #4]
 800895a:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800895c:	2300      	movs	r3, #0
 800895e:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 8008960:	2300      	movs	r3, #0
 8008962:	75bb      	strb	r3, [r7, #22]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 8008964:	68fb      	ldr	r3, [r7, #12]
 8008966:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 800896a:	75bb      	strb	r3, [r7, #22]

	/* In the following function we don't save the config to optimize
	 * writes on device. Config is saved and restored only once. */
	Status = VL53L0X_perform_vhv_calibration(
 800896c:	78fa      	ldrb	r2, [r7, #3]
 800896e:	2300      	movs	r3, #0
 8008970:	68b9      	ldr	r1, [r7, #8]
 8008972:	68f8      	ldr	r0, [r7, #12]
 8008974:	f7ff ff1f 	bl	80087b6 <VL53L0X_perform_vhv_calibration>
 8008978:	4603      	mov	r3, r0
 800897a:	75fb      	strb	r3, [r7, #23]
			Dev, pVhvSettings, get_data_enable, 0);


	if (Status == VL53L0X_ERROR_NONE)
 800897c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008980:	2b00      	cmp	r3, #0
 8008982:	d107      	bne.n	8008994 <VL53L0X_perform_ref_calibration+0x46>
		Status = VL53L0X_perform_phase_calibration(
 8008984:	78fa      	ldrb	r2, [r7, #3]
 8008986:	2300      	movs	r3, #0
 8008988:	6879      	ldr	r1, [r7, #4]
 800898a:	68f8      	ldr	r0, [r7, #12]
 800898c:	f7ff ff7a 	bl	8008884 <VL53L0X_perform_phase_calibration>
 8008990:	4603      	mov	r3, r0
 8008992:	75fb      	strb	r3, [r7, #23]
			Dev, pPhaseCal, get_data_enable, 0);


	if (Status == VL53L0X_ERROR_NONE) {
 8008994:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008998:	2b00      	cmp	r3, #0
 800899a:	d10f      	bne.n	80089bc <VL53L0X_perform_ref_calibration+0x6e>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 800899c:	7dbb      	ldrb	r3, [r7, #22]
 800899e:	461a      	mov	r2, r3
 80089a0:	2101      	movs	r1, #1
 80089a2:	68f8      	ldr	r0, [r7, #12]
 80089a4:	f002 fb98 	bl	800b0d8 <VL53L0X_WrByte>
 80089a8:	4603      	mov	r3, r0
 80089aa:	75fb      	strb	r3, [r7, #23]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 80089ac:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80089b0:	2b00      	cmp	r3, #0
 80089b2:	d103      	bne.n	80089bc <VL53L0X_perform_ref_calibration+0x6e>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 80089b4:	68fb      	ldr	r3, [r7, #12]
 80089b6:	7dba      	ldrb	r2, [r7, #22]
 80089b8:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	return Status;
 80089bc:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80089c0:	4618      	mov	r0, r3
 80089c2:	3718      	adds	r7, #24
 80089c4:	46bd      	mov	sp, r7
 80089c6:	bd80      	pop	{r7, pc}

080089c8 <VL53L0X_measurement_poll_for_completion>:
	}
	return Status;
}

VL53L0X_Error VL53L0X_measurement_poll_for_completion(VL53L0X_DEV Dev)
{
 80089c8:	b580      	push	{r7, lr}
 80089ca:	b086      	sub	sp, #24
 80089cc:	af00      	add	r7, sp, #0
 80089ce:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80089d0:	2300      	movs	r3, #0
 80089d2:	75fb      	strb	r3, [r7, #23]
	uint8_t NewDataReady = 0;
 80089d4:	2300      	movs	r3, #0
 80089d6:	73fb      	strb	r3, [r7, #15]
	uint32_t LoopNb;

	LOG_FUNCTION_START("");

	LoopNb = 0;
 80089d8:	2300      	movs	r3, #0
 80089da:	613b      	str	r3, [r7, #16]

	do {
		Status = VL53L0X_GetMeasurementDataReady(Dev, &NewDataReady);
 80089dc:	f107 030f 	add.w	r3, r7, #15
 80089e0:	4619      	mov	r1, r3
 80089e2:	6878      	ldr	r0, [r7, #4]
 80089e4:	f7fe fe02 	bl	80075ec <VL53L0X_GetMeasurementDataReady>
 80089e8:	4603      	mov	r3, r0
 80089ea:	75fb      	strb	r3, [r7, #23]
		if (Status != 0)
 80089ec:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80089f0:	2b00      	cmp	r3, #0
 80089f2:	d110      	bne.n	8008a16 <VL53L0X_measurement_poll_for_completion+0x4e>
			break; /* the error is set */

		if (NewDataReady == 1)
 80089f4:	7bfb      	ldrb	r3, [r7, #15]
 80089f6:	2b01      	cmp	r3, #1
 80089f8:	d00f      	beq.n	8008a1a <VL53L0X_measurement_poll_for_completion+0x52>
			break; /* done note that status == 0 */

		LoopNb++;
 80089fa:	693b      	ldr	r3, [r7, #16]
 80089fc:	3301      	adds	r3, #1
 80089fe:	613b      	str	r3, [r7, #16]
		if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP) {
 8008a00:	693b      	ldr	r3, [r7, #16]
 8008a02:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8008a06:	d302      	bcc.n	8008a0e <VL53L0X_measurement_poll_for_completion+0x46>
			Status = VL53L0X_ERROR_TIME_OUT;
 8008a08:	23f9      	movs	r3, #249	; 0xf9
 8008a0a:	75fb      	strb	r3, [r7, #23]
			break;
 8008a0c:	e006      	b.n	8008a1c <VL53L0X_measurement_poll_for_completion+0x54>
		}

		VL53L0X_PollingDelay(Dev);
 8008a0e:	6878      	ldr	r0, [r7, #4]
 8008a10:	f002 fc82 	bl	800b318 <VL53L0X_PollingDelay>
		Status = VL53L0X_GetMeasurementDataReady(Dev, &NewDataReady);
 8008a14:	e7e2      	b.n	80089dc <VL53L0X_measurement_poll_for_completion+0x14>
			break; /* the error is set */
 8008a16:	bf00      	nop
 8008a18:	e000      	b.n	8008a1c <VL53L0X_measurement_poll_for_completion+0x54>
			break; /* done note that status == 0 */
 8008a1a:	bf00      	nop
	} while (1);

	LOG_FUNCTION_END(Status);

	return Status;
 8008a1c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008a20:	4618      	mov	r0, r3
 8008a22:	3718      	adds	r7, #24
 8008a24:	46bd      	mov	sp, r7
 8008a26:	bd80      	pop	{r7, pc}

08008a28 <VL53L0X_decode_vcsel_period>:


uint8_t VL53L0X_decode_vcsel_period(uint8_t vcsel_period_reg)
{
 8008a28:	b480      	push	{r7}
 8008a2a:	b085      	sub	sp, #20
 8008a2c:	af00      	add	r7, sp, #0
 8008a2e:	4603      	mov	r3, r0
 8008a30:	71fb      	strb	r3, [r7, #7]
	/*!
	 * Converts the encoded VCSEL period register value into the real
	 * period in PLL clocks
	 */

	uint8_t vcsel_period_pclks = 0;
 8008a32:	2300      	movs	r3, #0
 8008a34:	73fb      	strb	r3, [r7, #15]

	vcsel_period_pclks = (vcsel_period_reg + 1) << 1;
 8008a36:	79fb      	ldrb	r3, [r7, #7]
 8008a38:	3301      	adds	r3, #1
 8008a3a:	b2db      	uxtb	r3, r3
 8008a3c:	005b      	lsls	r3, r3, #1
 8008a3e:	73fb      	strb	r3, [r7, #15]

	return vcsel_period_pclks;
 8008a40:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a42:	4618      	mov	r0, r3
 8008a44:	3714      	adds	r7, #20
 8008a46:	46bd      	mov	sp, r7
 8008a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a4c:	4770      	bx	lr

08008a4e <VL53L0X_encode_vcsel_period>:

uint8_t VL53L0X_encode_vcsel_period(uint8_t vcsel_period_pclks)
{
 8008a4e:	b480      	push	{r7}
 8008a50:	b085      	sub	sp, #20
 8008a52:	af00      	add	r7, sp, #0
 8008a54:	4603      	mov	r3, r0
 8008a56:	71fb      	strb	r3, [r7, #7]
	/*!
	 * Converts the encoded VCSEL period register value into the real period
	 * in PLL clocks
	 */

	uint8_t vcsel_period_reg = 0;
 8008a58:	2300      	movs	r3, #0
 8008a5a:	73fb      	strb	r3, [r7, #15]

	vcsel_period_reg = (vcsel_period_pclks >> 1) - 1;
 8008a5c:	79fb      	ldrb	r3, [r7, #7]
 8008a5e:	085b      	lsrs	r3, r3, #1
 8008a60:	b2db      	uxtb	r3, r3
 8008a62:	3b01      	subs	r3, #1
 8008a64:	73fb      	strb	r3, [r7, #15]

	return vcsel_period_reg;
 8008a66:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a68:	4618      	mov	r0, r3
 8008a6a:	3714      	adds	r7, #20
 8008a6c:	46bd      	mov	sp, r7
 8008a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a72:	4770      	bx	lr

08008a74 <VL53L0X_isqrt>:


uint32_t VL53L0X_isqrt(uint32_t num)
{
 8008a74:	b480      	push	{r7}
 8008a76:	b085      	sub	sp, #20
 8008a78:	af00      	add	r7, sp, #0
 8008a7a:	6078      	str	r0, [r7, #4]
	 * Implements an integer square root
	 *
	 * From: http://en.wikipedia.org/wiki/Methods_of_computing_square_roots
	 */

	uint32_t  res = 0;
 8008a7c:	2300      	movs	r3, #0
 8008a7e:	60fb      	str	r3, [r7, #12]
	uint32_t  bit = 1 << 30;
 8008a80:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8008a84:	60bb      	str	r3, [r7, #8]
	/* The second-to-top bit is set:
	 *	1 << 14 for 16-bits, 1 << 30 for 32 bits */

	 /* "bit" starts at the highest power of four <= the argument. */
	while (bit > num)
 8008a86:	e002      	b.n	8008a8e <VL53L0X_isqrt+0x1a>
		bit >>= 2;
 8008a88:	68bb      	ldr	r3, [r7, #8]
 8008a8a:	089b      	lsrs	r3, r3, #2
 8008a8c:	60bb      	str	r3, [r7, #8]
	while (bit > num)
 8008a8e:	68ba      	ldr	r2, [r7, #8]
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	429a      	cmp	r2, r3
 8008a94:	d8f8      	bhi.n	8008a88 <VL53L0X_isqrt+0x14>


	while (bit != 0) {
 8008a96:	e017      	b.n	8008ac8 <VL53L0X_isqrt+0x54>
		if (num >= res + bit) {
 8008a98:	68fa      	ldr	r2, [r7, #12]
 8008a9a:	68bb      	ldr	r3, [r7, #8]
 8008a9c:	4413      	add	r3, r2
 8008a9e:	687a      	ldr	r2, [r7, #4]
 8008aa0:	429a      	cmp	r2, r3
 8008aa2:	d30b      	bcc.n	8008abc <VL53L0X_isqrt+0x48>
			num -= res + bit;
 8008aa4:	68fa      	ldr	r2, [r7, #12]
 8008aa6:	68bb      	ldr	r3, [r7, #8]
 8008aa8:	4413      	add	r3, r2
 8008aaa:	687a      	ldr	r2, [r7, #4]
 8008aac:	1ad3      	subs	r3, r2, r3
 8008aae:	607b      	str	r3, [r7, #4]
			res = (res >> 1) + bit;
 8008ab0:	68fb      	ldr	r3, [r7, #12]
 8008ab2:	085b      	lsrs	r3, r3, #1
 8008ab4:	68ba      	ldr	r2, [r7, #8]
 8008ab6:	4413      	add	r3, r2
 8008ab8:	60fb      	str	r3, [r7, #12]
 8008aba:	e002      	b.n	8008ac2 <VL53L0X_isqrt+0x4e>
		} else
			res >>= 1;
 8008abc:	68fb      	ldr	r3, [r7, #12]
 8008abe:	085b      	lsrs	r3, r3, #1
 8008ac0:	60fb      	str	r3, [r7, #12]

		bit >>= 2;
 8008ac2:	68bb      	ldr	r3, [r7, #8]
 8008ac4:	089b      	lsrs	r3, r3, #2
 8008ac6:	60bb      	str	r3, [r7, #8]
	while (bit != 0) {
 8008ac8:	68bb      	ldr	r3, [r7, #8]
 8008aca:	2b00      	cmp	r3, #0
 8008acc:	d1e4      	bne.n	8008a98 <VL53L0X_isqrt+0x24>
	}

	return res;
 8008ace:	68fb      	ldr	r3, [r7, #12]
}
 8008ad0:	4618      	mov	r0, r3
 8008ad2:	3714      	adds	r7, #20
 8008ad4:	46bd      	mov	sp, r7
 8008ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ada:	4770      	bx	lr

08008adc <VL53L0X_device_read_strobe>:
	return res;
}


VL53L0X_Error VL53L0X_device_read_strobe(VL53L0X_DEV Dev)
{
 8008adc:	b580      	push	{r7, lr}
 8008ade:	b086      	sub	sp, #24
 8008ae0:	af00      	add	r7, sp, #0
 8008ae2:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008ae4:	2300      	movs	r3, #0
 8008ae6:	75fb      	strb	r3, [r7, #23]
	uint8_t strobe;
	uint32_t LoopNb;
	LOG_FUNCTION_START("");

	Status |= VL53L0X_WrByte(Dev, 0x83, 0x00);
 8008ae8:	2200      	movs	r2, #0
 8008aea:	2183      	movs	r1, #131	; 0x83
 8008aec:	6878      	ldr	r0, [r7, #4]
 8008aee:	f002 faf3 	bl	800b0d8 <VL53L0X_WrByte>
 8008af2:	4603      	mov	r3, r0
 8008af4:	461a      	mov	r2, r3
 8008af6:	7dfb      	ldrb	r3, [r7, #23]
 8008af8:	4313      	orrs	r3, r2
 8008afa:	75fb      	strb	r3, [r7, #23]

	/* polling
	 * use timeout to avoid deadlock*/
	if (Status == VL53L0X_ERROR_NONE) {
 8008afc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008b00:	2b00      	cmp	r3, #0
 8008b02:	d11e      	bne.n	8008b42 <VL53L0X_device_read_strobe+0x66>
		LoopNb = 0;
 8008b04:	2300      	movs	r3, #0
 8008b06:	613b      	str	r3, [r7, #16]
		do {
			Status = VL53L0X_RdByte(Dev, 0x83, &strobe);
 8008b08:	f107 030f 	add.w	r3, r7, #15
 8008b0c:	461a      	mov	r2, r3
 8008b0e:	2183      	movs	r1, #131	; 0x83
 8008b10:	6878      	ldr	r0, [r7, #4]
 8008b12:	f002 fb63 	bl	800b1dc <VL53L0X_RdByte>
 8008b16:	4603      	mov	r3, r0
 8008b18:	75fb      	strb	r3, [r7, #23]
			if ((strobe != 0x00) || Status != VL53L0X_ERROR_NONE)
 8008b1a:	7bfb      	ldrb	r3, [r7, #15]
 8008b1c:	2b00      	cmp	r3, #0
 8008b1e:	d10a      	bne.n	8008b36 <VL53L0X_device_read_strobe+0x5a>
 8008b20:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008b24:	2b00      	cmp	r3, #0
 8008b26:	d106      	bne.n	8008b36 <VL53L0X_device_read_strobe+0x5a>
					break;

			LoopNb = LoopNb + 1;
 8008b28:	693b      	ldr	r3, [r7, #16]
 8008b2a:	3301      	adds	r3, #1
 8008b2c:	613b      	str	r3, [r7, #16]
		} while (LoopNb < VL53L0X_DEFAULT_MAX_LOOP);
 8008b2e:	693b      	ldr	r3, [r7, #16]
 8008b30:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8008b34:	d3e8      	bcc.n	8008b08 <VL53L0X_device_read_strobe+0x2c>

		if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP)
 8008b36:	693b      	ldr	r3, [r7, #16]
 8008b38:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8008b3c:	d301      	bcc.n	8008b42 <VL53L0X_device_read_strobe+0x66>
			Status = VL53L0X_ERROR_TIME_OUT;
 8008b3e:	23f9      	movs	r3, #249	; 0xf9
 8008b40:	75fb      	strb	r3, [r7, #23]

	}

	Status |= VL53L0X_WrByte(Dev, 0x83, 0x01);
 8008b42:	2201      	movs	r2, #1
 8008b44:	2183      	movs	r1, #131	; 0x83
 8008b46:	6878      	ldr	r0, [r7, #4]
 8008b48:	f002 fac6 	bl	800b0d8 <VL53L0X_WrByte>
 8008b4c:	4603      	mov	r3, r0
 8008b4e:	461a      	mov	r2, r3
 8008b50:	7dfb      	ldrb	r3, [r7, #23]
 8008b52:	4313      	orrs	r3, r2
 8008b54:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_END(Status);
	return Status;
 8008b56:	f997 3017 	ldrsb.w	r3, [r7, #23]

}
 8008b5a:	4618      	mov	r0, r3
 8008b5c:	3718      	adds	r7, #24
 8008b5e:	46bd      	mov	sp, r7
 8008b60:	bd80      	pop	{r7, pc}

08008b62 <VL53L0X_get_info_from_device>:

VL53L0X_Error VL53L0X_get_info_from_device(VL53L0X_DEV Dev, uint8_t option)
{
 8008b62:	b580      	push	{r7, lr}
 8008b64:	b098      	sub	sp, #96	; 0x60
 8008b66:	af00      	add	r7, sp, #0
 8008b68:	6078      	str	r0, [r7, #4]
 8008b6a:	460b      	mov	r3, r1
 8008b6c:	70fb      	strb	r3, [r7, #3]

	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008b6e:	2300      	movs	r3, #0
 8008b70:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	uint8_t byte;
	uint32_t TmpDWord;
	uint8_t ModuleId;
	uint8_t Revision;
	uint8_t ReferenceSpadCount = 0;
 8008b74:	2300      	movs	r3, #0
 8008b76:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
	uint8_t ReferenceSpadType = 0;
 8008b7a:	2300      	movs	r3, #0
 8008b7c:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
	uint32_t PartUIDUpper = 0;
 8008b80:	2300      	movs	r3, #0
 8008b82:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t PartUIDLower = 0;
 8008b84:	2300      	movs	r3, #0
 8008b86:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t OffsetFixed1104_mm = 0;
 8008b88:	2300      	movs	r3, #0
 8008b8a:	64bb      	str	r3, [r7, #72]	; 0x48
	int16_t OffsetMicroMeters = 0;
 8008b8c:	2300      	movs	r3, #0
 8008b8e:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
	uint32_t DistMeasTgtFixed1104_mm = 400 << 4;
 8008b92:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 8008b96:	647b      	str	r3, [r7, #68]	; 0x44
	uint32_t DistMeasFixed1104_400_mm = 0;
 8008b98:	2300      	movs	r3, #0
 8008b9a:	657b      	str	r3, [r7, #84]	; 0x54
	uint32_t SignalRateMeasFixed1104_400_mm = 0;
 8008b9c:	2300      	movs	r3, #0
 8008b9e:	653b      	str	r3, [r7, #80]	; 0x50
	char ProductId[19];
	char *ProductId_tmp;
	uint8_t ReadDataFromDeviceDone;
	FixPoint1616_t SignalRateMeasFixed400mmFix = 0;
 8008ba0:	2300      	movs	r3, #0
 8008ba2:	643b      	str	r3, [r7, #64]	; 0x40
	int i;


	LOG_FUNCTION_START("");

	ReadDataFromDeviceDone = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	f893 30f0 	ldrb.w	r3, [r3, #240]	; 0xf0
 8008baa:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			ReadDataFromDeviceDone);

	/* This access is done only once after that a GetDeviceInfo or
	 * datainit is done*/
	if (ReadDataFromDeviceDone != 7) {
 8008bae:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8008bb2:	2b07      	cmp	r3, #7
 8008bb4:	f000 8408 	beq.w	80093c8 <VL53L0X_get_info_from_device+0x866>

		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 8008bb8:	2201      	movs	r2, #1
 8008bba:	2180      	movs	r1, #128	; 0x80
 8008bbc:	6878      	ldr	r0, [r7, #4]
 8008bbe:	f002 fa8b 	bl	800b0d8 <VL53L0X_WrByte>
 8008bc2:	4603      	mov	r3, r0
 8008bc4:	461a      	mov	r2, r3
 8008bc6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008bca:	4313      	orrs	r3, r2
 8008bcc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8008bd0:	2201      	movs	r2, #1
 8008bd2:	21ff      	movs	r1, #255	; 0xff
 8008bd4:	6878      	ldr	r0, [r7, #4]
 8008bd6:	f002 fa7f 	bl	800b0d8 <VL53L0X_WrByte>
 8008bda:	4603      	mov	r3, r0
 8008bdc:	461a      	mov	r2, r3
 8008bde:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008be2:	4313      	orrs	r3, r2
 8008be4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 8008be8:	2200      	movs	r2, #0
 8008bea:	2100      	movs	r1, #0
 8008bec:	6878      	ldr	r0, [r7, #4]
 8008bee:	f002 fa73 	bl	800b0d8 <VL53L0X_WrByte>
 8008bf2:	4603      	mov	r3, r0
 8008bf4:	461a      	mov	r2, r3
 8008bf6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008bfa:	4313      	orrs	r3, r2
 8008bfc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x06);
 8008c00:	2206      	movs	r2, #6
 8008c02:	21ff      	movs	r1, #255	; 0xff
 8008c04:	6878      	ldr	r0, [r7, #4]
 8008c06:	f002 fa67 	bl	800b0d8 <VL53L0X_WrByte>
 8008c0a:	4603      	mov	r3, r0
 8008c0c:	461a      	mov	r2, r3
 8008c0e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008c12:	4313      	orrs	r3, r2
 8008c14:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_RdByte(Dev, 0x83, &byte);
 8008c18:	f107 0337 	add.w	r3, r7, #55	; 0x37
 8008c1c:	461a      	mov	r2, r3
 8008c1e:	2183      	movs	r1, #131	; 0x83
 8008c20:	6878      	ldr	r0, [r7, #4]
 8008c22:	f002 fadb 	bl	800b1dc <VL53L0X_RdByte>
 8008c26:	4603      	mov	r3, r0
 8008c28:	461a      	mov	r2, r3
 8008c2a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008c2e:	4313      	orrs	r3, r2
 8008c30:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x83, byte|4);
 8008c34:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008c38:	f043 0304 	orr.w	r3, r3, #4
 8008c3c:	b2db      	uxtb	r3, r3
 8008c3e:	461a      	mov	r2, r3
 8008c40:	2183      	movs	r1, #131	; 0x83
 8008c42:	6878      	ldr	r0, [r7, #4]
 8008c44:	f002 fa48 	bl	800b0d8 <VL53L0X_WrByte>
 8008c48:	4603      	mov	r3, r0
 8008c4a:	461a      	mov	r2, r3
 8008c4c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008c50:	4313      	orrs	r3, r2
 8008c52:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x07);
 8008c56:	2207      	movs	r2, #7
 8008c58:	21ff      	movs	r1, #255	; 0xff
 8008c5a:	6878      	ldr	r0, [r7, #4]
 8008c5c:	f002 fa3c 	bl	800b0d8 <VL53L0X_WrByte>
 8008c60:	4603      	mov	r3, r0
 8008c62:	461a      	mov	r2, r3
 8008c64:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008c68:	4313      	orrs	r3, r2
 8008c6a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x81, 0x01);
 8008c6e:	2201      	movs	r2, #1
 8008c70:	2181      	movs	r1, #129	; 0x81
 8008c72:	6878      	ldr	r0, [r7, #4]
 8008c74:	f002 fa30 	bl	800b0d8 <VL53L0X_WrByte>
 8008c78:	4603      	mov	r3, r0
 8008c7a:	461a      	mov	r2, r3
 8008c7c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008c80:	4313      	orrs	r3, r2
 8008c82:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_PollingDelay(Dev);
 8008c86:	6878      	ldr	r0, [r7, #4]
 8008c88:	f002 fb46 	bl	800b318 <VL53L0X_PollingDelay>
 8008c8c:	4603      	mov	r3, r0
 8008c8e:	461a      	mov	r2, r3
 8008c90:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008c94:	4313      	orrs	r3, r2
 8008c96:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 8008c9a:	2201      	movs	r2, #1
 8008c9c:	2180      	movs	r1, #128	; 0x80
 8008c9e:	6878      	ldr	r0, [r7, #4]
 8008ca0:	f002 fa1a 	bl	800b0d8 <VL53L0X_WrByte>
 8008ca4:	4603      	mov	r3, r0
 8008ca6:	461a      	mov	r2, r3
 8008ca8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008cac:	4313      	orrs	r3, r2
 8008cae:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		if (((option & 1) == 1) &&
 8008cb2:	78fb      	ldrb	r3, [r7, #3]
 8008cb4:	f003 0301 	and.w	r3, r3, #1
 8008cb8:	2b00      	cmp	r3, #0
 8008cba:	f000 8098 	beq.w	8008dee <VL53L0X_get_info_from_device+0x28c>
			((ReadDataFromDeviceDone & 1) == 0)) {
 8008cbe:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8008cc2:	f003 0301 	and.w	r3, r3, #1
		if (((option & 1) == 1) &&
 8008cc6:	2b00      	cmp	r3, #0
 8008cc8:	f040 8091 	bne.w	8008dee <VL53L0X_get_info_from_device+0x28c>
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x6b);
 8008ccc:	226b      	movs	r2, #107	; 0x6b
 8008cce:	2194      	movs	r1, #148	; 0x94
 8008cd0:	6878      	ldr	r0, [r7, #4]
 8008cd2:	f002 fa01 	bl	800b0d8 <VL53L0X_WrByte>
 8008cd6:	4603      	mov	r3, r0
 8008cd8:	461a      	mov	r2, r3
 8008cda:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008cde:	4313      	orrs	r3, r2
 8008ce0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8008ce4:	6878      	ldr	r0, [r7, #4]
 8008ce6:	f7ff fef9 	bl	8008adc <VL53L0X_device_read_strobe>
 8008cea:	4603      	mov	r3, r0
 8008cec:	461a      	mov	r2, r3
 8008cee:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008cf2:	4313      	orrs	r3, r2
 8008cf4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8008cf8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8008cfc:	461a      	mov	r2, r3
 8008cfe:	2190      	movs	r1, #144	; 0x90
 8008d00:	6878      	ldr	r0, [r7, #4]
 8008d02:	f002 facd 	bl	800b2a0 <VL53L0X_RdDWord>
 8008d06:	4603      	mov	r3, r0
 8008d08:	461a      	mov	r2, r3
 8008d0a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008d0e:	4313      	orrs	r3, r2
 8008d10:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ReferenceSpadCount = (uint8_t)((TmpDWord >> 8) & 0x07f);
 8008d14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d16:	0a1b      	lsrs	r3, r3, #8
 8008d18:	b2db      	uxtb	r3, r3
 8008d1a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008d1e:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
			ReferenceSpadType  = (uint8_t)((TmpDWord >> 15) & 0x01);
 8008d22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d24:	0bdb      	lsrs	r3, r3, #15
 8008d26:	b2db      	uxtb	r3, r3
 8008d28:	f003 0301 	and.w	r3, r3, #1
 8008d2c:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x24);
 8008d30:	2224      	movs	r2, #36	; 0x24
 8008d32:	2194      	movs	r1, #148	; 0x94
 8008d34:	6878      	ldr	r0, [r7, #4]
 8008d36:	f002 f9cf 	bl	800b0d8 <VL53L0X_WrByte>
 8008d3a:	4603      	mov	r3, r0
 8008d3c:	461a      	mov	r2, r3
 8008d3e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008d42:	4313      	orrs	r3, r2
 8008d44:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8008d48:	6878      	ldr	r0, [r7, #4]
 8008d4a:	f7ff fec7 	bl	8008adc <VL53L0X_device_read_strobe>
 8008d4e:	4603      	mov	r3, r0
 8008d50:	461a      	mov	r2, r3
 8008d52:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008d56:	4313      	orrs	r3, r2
 8008d58:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8008d5c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8008d60:	461a      	mov	r2, r3
 8008d62:	2190      	movs	r1, #144	; 0x90
 8008d64:	6878      	ldr	r0, [r7, #4]
 8008d66:	f002 fa9b 	bl	800b2a0 <VL53L0X_RdDWord>
 8008d6a:	4603      	mov	r3, r0
 8008d6c:	461a      	mov	r2, r3
 8008d6e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008d72:	4313      	orrs	r3, r2
 8008d74:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f


			NvmRefGoodSpadMap[0] = (uint8_t)((TmpDWord >> 24)
 8008d78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d7a:	0e1b      	lsrs	r3, r3, #24
 8008d7c:	b2db      	uxtb	r3, r3
 8008d7e:	723b      	strb	r3, [r7, #8]
				& 0xff);
			NvmRefGoodSpadMap[1] = (uint8_t)((TmpDWord >> 16)
 8008d80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d82:	0c1b      	lsrs	r3, r3, #16
 8008d84:	b2db      	uxtb	r3, r3
 8008d86:	727b      	strb	r3, [r7, #9]
				& 0xff);
			NvmRefGoodSpadMap[2] = (uint8_t)((TmpDWord >> 8)
 8008d88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d8a:	0a1b      	lsrs	r3, r3, #8
 8008d8c:	b2db      	uxtb	r3, r3
 8008d8e:	72bb      	strb	r3, [r7, #10]
				& 0xff);
			NvmRefGoodSpadMap[3] = (uint8_t)(TmpDWord & 0xff);
 8008d90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d92:	b2db      	uxtb	r3, r3
 8008d94:	72fb      	strb	r3, [r7, #11]

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x25);
 8008d96:	2225      	movs	r2, #37	; 0x25
 8008d98:	2194      	movs	r1, #148	; 0x94
 8008d9a:	6878      	ldr	r0, [r7, #4]
 8008d9c:	f002 f99c 	bl	800b0d8 <VL53L0X_WrByte>
 8008da0:	4603      	mov	r3, r0
 8008da2:	461a      	mov	r2, r3
 8008da4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008da8:	4313      	orrs	r3, r2
 8008daa:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8008dae:	6878      	ldr	r0, [r7, #4]
 8008db0:	f7ff fe94 	bl	8008adc <VL53L0X_device_read_strobe>
 8008db4:	4603      	mov	r3, r0
 8008db6:	461a      	mov	r2, r3
 8008db8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008dbc:	4313      	orrs	r3, r2
 8008dbe:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8008dc2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8008dc6:	461a      	mov	r2, r3
 8008dc8:	2190      	movs	r1, #144	; 0x90
 8008dca:	6878      	ldr	r0, [r7, #4]
 8008dcc:	f002 fa68 	bl	800b2a0 <VL53L0X_RdDWord>
 8008dd0:	4603      	mov	r3, r0
 8008dd2:	461a      	mov	r2, r3
 8008dd4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008dd8:	4313      	orrs	r3, r2
 8008dda:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			NvmRefGoodSpadMap[4] = (uint8_t)((TmpDWord >> 24)
 8008dde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008de0:	0e1b      	lsrs	r3, r3, #24
 8008de2:	b2db      	uxtb	r3, r3
 8008de4:	733b      	strb	r3, [r7, #12]
				& 0xff);
			NvmRefGoodSpadMap[5] = (uint8_t)((TmpDWord >> 16)
 8008de6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008de8:	0c1b      	lsrs	r3, r3, #16
 8008dea:	b2db      	uxtb	r3, r3
 8008dec:	737b      	strb	r3, [r7, #13]
				& 0xff);
		}

		if (((option & 2) == 2) &&
 8008dee:	78fb      	ldrb	r3, [r7, #3]
 8008df0:	f003 0302 	and.w	r3, r3, #2
 8008df4:	2b00      	cmp	r3, #0
 8008df6:	f000 8189 	beq.w	800910c <VL53L0X_get_info_from_device+0x5aa>
			((ReadDataFromDeviceDone & 2) == 0)) {
 8008dfa:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8008dfe:	f003 0302 	and.w	r3, r3, #2
		if (((option & 2) == 2) &&
 8008e02:	2b00      	cmp	r3, #0
 8008e04:	f040 8182 	bne.w	800910c <VL53L0X_get_info_from_device+0x5aa>

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x02);
 8008e08:	2202      	movs	r2, #2
 8008e0a:	2194      	movs	r1, #148	; 0x94
 8008e0c:	6878      	ldr	r0, [r7, #4]
 8008e0e:	f002 f963 	bl	800b0d8 <VL53L0X_WrByte>
 8008e12:	4603      	mov	r3, r0
 8008e14:	461a      	mov	r2, r3
 8008e16:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008e1a:	4313      	orrs	r3, r2
 8008e1c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8008e20:	6878      	ldr	r0, [r7, #4]
 8008e22:	f7ff fe5b 	bl	8008adc <VL53L0X_device_read_strobe>
 8008e26:	4603      	mov	r3, r0
 8008e28:	461a      	mov	r2, r3
 8008e2a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008e2e:	4313      	orrs	r3, r2
 8008e30:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdByte(Dev, 0x90, &ModuleId);
 8008e34:	f107 032f 	add.w	r3, r7, #47	; 0x2f
 8008e38:	461a      	mov	r2, r3
 8008e3a:	2190      	movs	r1, #144	; 0x90
 8008e3c:	6878      	ldr	r0, [r7, #4]
 8008e3e:	f002 f9cd 	bl	800b1dc <VL53L0X_RdByte>
 8008e42:	4603      	mov	r3, r0
 8008e44:	461a      	mov	r2, r3
 8008e46:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008e4a:	4313      	orrs	r3, r2
 8008e4c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7B);
 8008e50:	227b      	movs	r2, #123	; 0x7b
 8008e52:	2194      	movs	r1, #148	; 0x94
 8008e54:	6878      	ldr	r0, [r7, #4]
 8008e56:	f002 f93f 	bl	800b0d8 <VL53L0X_WrByte>
 8008e5a:	4603      	mov	r3, r0
 8008e5c:	461a      	mov	r2, r3
 8008e5e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008e62:	4313      	orrs	r3, r2
 8008e64:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8008e68:	6878      	ldr	r0, [r7, #4]
 8008e6a:	f7ff fe37 	bl	8008adc <VL53L0X_device_read_strobe>
 8008e6e:	4603      	mov	r3, r0
 8008e70:	461a      	mov	r2, r3
 8008e72:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008e76:	4313      	orrs	r3, r2
 8008e78:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdByte(Dev, 0x90, &Revision);
 8008e7c:	f107 032e 	add.w	r3, r7, #46	; 0x2e
 8008e80:	461a      	mov	r2, r3
 8008e82:	2190      	movs	r1, #144	; 0x90
 8008e84:	6878      	ldr	r0, [r7, #4]
 8008e86:	f002 f9a9 	bl	800b1dc <VL53L0X_RdByte>
 8008e8a:	4603      	mov	r3, r0
 8008e8c:	461a      	mov	r2, r3
 8008e8e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008e92:	4313      	orrs	r3, r2
 8008e94:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x77);
 8008e98:	2277      	movs	r2, #119	; 0x77
 8008e9a:	2194      	movs	r1, #148	; 0x94
 8008e9c:	6878      	ldr	r0, [r7, #4]
 8008e9e:	f002 f91b 	bl	800b0d8 <VL53L0X_WrByte>
 8008ea2:	4603      	mov	r3, r0
 8008ea4:	461a      	mov	r2, r3
 8008ea6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008eaa:	4313      	orrs	r3, r2
 8008eac:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8008eb0:	6878      	ldr	r0, [r7, #4]
 8008eb2:	f7ff fe13 	bl	8008adc <VL53L0X_device_read_strobe>
 8008eb6:	4603      	mov	r3, r0
 8008eb8:	461a      	mov	r2, r3
 8008eba:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008ebe:	4313      	orrs	r3, r2
 8008ec0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8008ec4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8008ec8:	461a      	mov	r2, r3
 8008eca:	2190      	movs	r1, #144	; 0x90
 8008ecc:	6878      	ldr	r0, [r7, #4]
 8008ece:	f002 f9e7 	bl	800b2a0 <VL53L0X_RdDWord>
 8008ed2:	4603      	mov	r3, r0
 8008ed4:	461a      	mov	r2, r3
 8008ed6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008eda:	4313      	orrs	r3, r2
 8008edc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[0] = (char)((TmpDWord >> 25) & 0x07f);
 8008ee0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ee2:	0e5b      	lsrs	r3, r3, #25
 8008ee4:	b2db      	uxtb	r3, r3
 8008ee6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008eea:	b2db      	uxtb	r3, r3
 8008eec:	743b      	strb	r3, [r7, #16]
			ProductId[1] = (char)((TmpDWord >> 18) & 0x07f);
 8008eee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ef0:	0c9b      	lsrs	r3, r3, #18
 8008ef2:	b2db      	uxtb	r3, r3
 8008ef4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008ef8:	b2db      	uxtb	r3, r3
 8008efa:	747b      	strb	r3, [r7, #17]
			ProductId[2] = (char)((TmpDWord >> 11) & 0x07f);
 8008efc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008efe:	0adb      	lsrs	r3, r3, #11
 8008f00:	b2db      	uxtb	r3, r3
 8008f02:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008f06:	b2db      	uxtb	r3, r3
 8008f08:	74bb      	strb	r3, [r7, #18]
			ProductId[3] = (char)((TmpDWord >> 4) & 0x07f);
 8008f0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f0c:	091b      	lsrs	r3, r3, #4
 8008f0e:	b2db      	uxtb	r3, r3
 8008f10:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008f14:	b2db      	uxtb	r3, r3
 8008f16:	74fb      	strb	r3, [r7, #19]

			byte = (uint8_t)((TmpDWord & 0x00f) << 3);
 8008f18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f1a:	b2db      	uxtb	r3, r3
 8008f1c:	00db      	lsls	r3, r3, #3
 8008f1e:	b2db      	uxtb	r3, r3
 8008f20:	f003 0378 	and.w	r3, r3, #120	; 0x78
 8008f24:	b2db      	uxtb	r3, r3
 8008f26:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x78);
 8008f2a:	2278      	movs	r2, #120	; 0x78
 8008f2c:	2194      	movs	r1, #148	; 0x94
 8008f2e:	6878      	ldr	r0, [r7, #4]
 8008f30:	f002 f8d2 	bl	800b0d8 <VL53L0X_WrByte>
 8008f34:	4603      	mov	r3, r0
 8008f36:	461a      	mov	r2, r3
 8008f38:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008f3c:	4313      	orrs	r3, r2
 8008f3e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8008f42:	6878      	ldr	r0, [r7, #4]
 8008f44:	f7ff fdca 	bl	8008adc <VL53L0X_device_read_strobe>
 8008f48:	4603      	mov	r3, r0
 8008f4a:	461a      	mov	r2, r3
 8008f4c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008f50:	4313      	orrs	r3, r2
 8008f52:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8008f56:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8008f5a:	461a      	mov	r2, r3
 8008f5c:	2190      	movs	r1, #144	; 0x90
 8008f5e:	6878      	ldr	r0, [r7, #4]
 8008f60:	f002 f99e 	bl	800b2a0 <VL53L0X_RdDWord>
 8008f64:	4603      	mov	r3, r0
 8008f66:	461a      	mov	r2, r3
 8008f68:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008f6c:	4313      	orrs	r3, r2
 8008f6e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[4] = (char)(byte +
					((TmpDWord >> 29) & 0x07f));
 8008f72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f74:	0f5b      	lsrs	r3, r3, #29
 8008f76:	b2db      	uxtb	r3, r3
 8008f78:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008f7c:	b2da      	uxtb	r2, r3
			ProductId[4] = (char)(byte +
 8008f7e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008f82:	4413      	add	r3, r2
 8008f84:	b2db      	uxtb	r3, r3
 8008f86:	753b      	strb	r3, [r7, #20]
			ProductId[5] = (char)((TmpDWord >> 22) & 0x07f);
 8008f88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f8a:	0d9b      	lsrs	r3, r3, #22
 8008f8c:	b2db      	uxtb	r3, r3
 8008f8e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008f92:	b2db      	uxtb	r3, r3
 8008f94:	757b      	strb	r3, [r7, #21]
			ProductId[6] = (char)((TmpDWord >> 15) & 0x07f);
 8008f96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f98:	0bdb      	lsrs	r3, r3, #15
 8008f9a:	b2db      	uxtb	r3, r3
 8008f9c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008fa0:	b2db      	uxtb	r3, r3
 8008fa2:	75bb      	strb	r3, [r7, #22]
			ProductId[7] = (char)((TmpDWord >> 8) & 0x07f);
 8008fa4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fa6:	0a1b      	lsrs	r3, r3, #8
 8008fa8:	b2db      	uxtb	r3, r3
 8008faa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008fae:	b2db      	uxtb	r3, r3
 8008fb0:	75fb      	strb	r3, [r7, #23]
			ProductId[8] = (char)((TmpDWord >> 1) & 0x07f);
 8008fb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fb4:	085b      	lsrs	r3, r3, #1
 8008fb6:	b2db      	uxtb	r3, r3
 8008fb8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008fbc:	b2db      	uxtb	r3, r3
 8008fbe:	763b      	strb	r3, [r7, #24]

			byte = (uint8_t)((TmpDWord & 0x001) << 6);
 8008fc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fc2:	b2db      	uxtb	r3, r3
 8008fc4:	019b      	lsls	r3, r3, #6
 8008fc6:	b2db      	uxtb	r3, r3
 8008fc8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008fcc:	b2db      	uxtb	r3, r3
 8008fce:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x79);
 8008fd2:	2279      	movs	r2, #121	; 0x79
 8008fd4:	2194      	movs	r1, #148	; 0x94
 8008fd6:	6878      	ldr	r0, [r7, #4]
 8008fd8:	f002 f87e 	bl	800b0d8 <VL53L0X_WrByte>
 8008fdc:	4603      	mov	r3, r0
 8008fde:	461a      	mov	r2, r3
 8008fe0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008fe4:	4313      	orrs	r3, r2
 8008fe6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_device_read_strobe(Dev);
 8008fea:	6878      	ldr	r0, [r7, #4]
 8008fec:	f7ff fd76 	bl	8008adc <VL53L0X_device_read_strobe>
 8008ff0:	4603      	mov	r3, r0
 8008ff2:	461a      	mov	r2, r3
 8008ff4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008ff8:	4313      	orrs	r3, r2
 8008ffa:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8008ffe:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8009002:	461a      	mov	r2, r3
 8009004:	2190      	movs	r1, #144	; 0x90
 8009006:	6878      	ldr	r0, [r7, #4]
 8009008:	f002 f94a 	bl	800b2a0 <VL53L0X_RdDWord>
 800900c:	4603      	mov	r3, r0
 800900e:	461a      	mov	r2, r3
 8009010:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009014:	4313      	orrs	r3, r2
 8009016:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[9] = (char)(byte +
					((TmpDWord >> 26) & 0x07f));
 800901a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800901c:	0e9b      	lsrs	r3, r3, #26
 800901e:	b2db      	uxtb	r3, r3
 8009020:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009024:	b2da      	uxtb	r2, r3
			ProductId[9] = (char)(byte +
 8009026:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800902a:	4413      	add	r3, r2
 800902c:	b2db      	uxtb	r3, r3
 800902e:	767b      	strb	r3, [r7, #25]
			ProductId[10] = (char)((TmpDWord >> 19) & 0x07f);
 8009030:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009032:	0cdb      	lsrs	r3, r3, #19
 8009034:	b2db      	uxtb	r3, r3
 8009036:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800903a:	b2db      	uxtb	r3, r3
 800903c:	76bb      	strb	r3, [r7, #26]
			ProductId[11] = (char)((TmpDWord >> 12) & 0x07f);
 800903e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009040:	0b1b      	lsrs	r3, r3, #12
 8009042:	b2db      	uxtb	r3, r3
 8009044:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009048:	b2db      	uxtb	r3, r3
 800904a:	76fb      	strb	r3, [r7, #27]
			ProductId[12] = (char)((TmpDWord >> 5) & 0x07f);
 800904c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800904e:	095b      	lsrs	r3, r3, #5
 8009050:	b2db      	uxtb	r3, r3
 8009052:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009056:	b2db      	uxtb	r3, r3
 8009058:	773b      	strb	r3, [r7, #28]

			byte = (uint8_t)((TmpDWord & 0x01f) << 2);
 800905a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800905c:	b2db      	uxtb	r3, r3
 800905e:	009b      	lsls	r3, r3, #2
 8009060:	b2db      	uxtb	r3, r3
 8009062:	f003 037c 	and.w	r3, r3, #124	; 0x7c
 8009066:	b2db      	uxtb	r3, r3
 8009068:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7A);
 800906c:	227a      	movs	r2, #122	; 0x7a
 800906e:	2194      	movs	r1, #148	; 0x94
 8009070:	6878      	ldr	r0, [r7, #4]
 8009072:	f002 f831 	bl	800b0d8 <VL53L0X_WrByte>
 8009076:	4603      	mov	r3, r0
 8009078:	461a      	mov	r2, r3
 800907a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800907e:	4313      	orrs	r3, r2
 8009080:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_device_read_strobe(Dev);
 8009084:	6878      	ldr	r0, [r7, #4]
 8009086:	f7ff fd29 	bl	8008adc <VL53L0X_device_read_strobe>
 800908a:	4603      	mov	r3, r0
 800908c:	461a      	mov	r2, r3
 800908e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009092:	4313      	orrs	r3, r2
 8009094:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8009098:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800909c:	461a      	mov	r2, r3
 800909e:	2190      	movs	r1, #144	; 0x90
 80090a0:	6878      	ldr	r0, [r7, #4]
 80090a2:	f002 f8fd 	bl	800b2a0 <VL53L0X_RdDWord>
 80090a6:	4603      	mov	r3, r0
 80090a8:	461a      	mov	r2, r3
 80090aa:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80090ae:	4313      	orrs	r3, r2
 80090b0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[13] = (char)(byte +
					((TmpDWord >> 30) & 0x07f));
 80090b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090b6:	0f9b      	lsrs	r3, r3, #30
 80090b8:	b2db      	uxtb	r3, r3
 80090ba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80090be:	b2da      	uxtb	r2, r3
			ProductId[13] = (char)(byte +
 80090c0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80090c4:	4413      	add	r3, r2
 80090c6:	b2db      	uxtb	r3, r3
 80090c8:	777b      	strb	r3, [r7, #29]
			ProductId[14] = (char)((TmpDWord >> 23) & 0x07f);
 80090ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090cc:	0ddb      	lsrs	r3, r3, #23
 80090ce:	b2db      	uxtb	r3, r3
 80090d0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80090d4:	b2db      	uxtb	r3, r3
 80090d6:	77bb      	strb	r3, [r7, #30]
			ProductId[15] = (char)((TmpDWord >> 16) & 0x07f);
 80090d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090da:	0c1b      	lsrs	r3, r3, #16
 80090dc:	b2db      	uxtb	r3, r3
 80090de:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80090e2:	b2db      	uxtb	r3, r3
 80090e4:	77fb      	strb	r3, [r7, #31]
			ProductId[16] = (char)((TmpDWord >> 9) & 0x07f);
 80090e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090e8:	0a5b      	lsrs	r3, r3, #9
 80090ea:	b2db      	uxtb	r3, r3
 80090ec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80090f0:	b2db      	uxtb	r3, r3
 80090f2:	f887 3020 	strb.w	r3, [r7, #32]
			ProductId[17] = (char)((TmpDWord >> 2) & 0x07f);
 80090f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090f8:	089b      	lsrs	r3, r3, #2
 80090fa:	b2db      	uxtb	r3, r3
 80090fc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009100:	b2db      	uxtb	r3, r3
 8009102:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
			ProductId[18] = '\0';
 8009106:	2300      	movs	r3, #0
 8009108:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

		}

		if (((option & 4) == 4) &&
 800910c:	78fb      	ldrb	r3, [r7, #3]
 800910e:	f003 0304 	and.w	r3, r3, #4
 8009112:	2b00      	cmp	r3, #0
 8009114:	f000 80f1 	beq.w	80092fa <VL53L0X_get_info_from_device+0x798>
			((ReadDataFromDeviceDone & 4) == 0)) {
 8009118:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800911c:	f003 0304 	and.w	r3, r3, #4
		if (((option & 4) == 4) &&
 8009120:	2b00      	cmp	r3, #0
 8009122:	f040 80ea 	bne.w	80092fa <VL53L0X_get_info_from_device+0x798>

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7B);
 8009126:	227b      	movs	r2, #123	; 0x7b
 8009128:	2194      	movs	r1, #148	; 0x94
 800912a:	6878      	ldr	r0, [r7, #4]
 800912c:	f001 ffd4 	bl	800b0d8 <VL53L0X_WrByte>
 8009130:	4603      	mov	r3, r0
 8009132:	461a      	mov	r2, r3
 8009134:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009138:	4313      	orrs	r3, r2
 800913a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800913e:	6878      	ldr	r0, [r7, #4]
 8009140:	f7ff fccc 	bl	8008adc <VL53L0X_device_read_strobe>
 8009144:	4603      	mov	r3, r0
 8009146:	461a      	mov	r2, r3
 8009148:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800914c:	4313      	orrs	r3, r2
 800914e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &PartUIDUpper);
 8009152:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8009156:	461a      	mov	r2, r3
 8009158:	2190      	movs	r1, #144	; 0x90
 800915a:	6878      	ldr	r0, [r7, #4]
 800915c:	f002 f8a0 	bl	800b2a0 <VL53L0X_RdDWord>
 8009160:	4603      	mov	r3, r0
 8009162:	461a      	mov	r2, r3
 8009164:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009168:	4313      	orrs	r3, r2
 800916a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7C);
 800916e:	227c      	movs	r2, #124	; 0x7c
 8009170:	2194      	movs	r1, #148	; 0x94
 8009172:	6878      	ldr	r0, [r7, #4]
 8009174:	f001 ffb0 	bl	800b0d8 <VL53L0X_WrByte>
 8009178:	4603      	mov	r3, r0
 800917a:	461a      	mov	r2, r3
 800917c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009180:	4313      	orrs	r3, r2
 8009182:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8009186:	6878      	ldr	r0, [r7, #4]
 8009188:	f7ff fca8 	bl	8008adc <VL53L0X_device_read_strobe>
 800918c:	4603      	mov	r3, r0
 800918e:	461a      	mov	r2, r3
 8009190:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009194:	4313      	orrs	r3, r2
 8009196:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &PartUIDLower);
 800919a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800919e:	461a      	mov	r2, r3
 80091a0:	2190      	movs	r1, #144	; 0x90
 80091a2:	6878      	ldr	r0, [r7, #4]
 80091a4:	f002 f87c 	bl	800b2a0 <VL53L0X_RdDWord>
 80091a8:	4603      	mov	r3, r0
 80091aa:	461a      	mov	r2, r3
 80091ac:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80091b0:	4313      	orrs	r3, r2
 80091b2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x73);
 80091b6:	2273      	movs	r2, #115	; 0x73
 80091b8:	2194      	movs	r1, #148	; 0x94
 80091ba:	6878      	ldr	r0, [r7, #4]
 80091bc:	f001 ff8c 	bl	800b0d8 <VL53L0X_WrByte>
 80091c0:	4603      	mov	r3, r0
 80091c2:	461a      	mov	r2, r3
 80091c4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80091c8:	4313      	orrs	r3, r2
 80091ca:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 80091ce:	6878      	ldr	r0, [r7, #4]
 80091d0:	f7ff fc84 	bl	8008adc <VL53L0X_device_read_strobe>
 80091d4:	4603      	mov	r3, r0
 80091d6:	461a      	mov	r2, r3
 80091d8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80091dc:	4313      	orrs	r3, r2
 80091de:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 80091e2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80091e6:	461a      	mov	r2, r3
 80091e8:	2190      	movs	r1, #144	; 0x90
 80091ea:	6878      	ldr	r0, [r7, #4]
 80091ec:	f002 f858 	bl	800b2a0 <VL53L0X_RdDWord>
 80091f0:	4603      	mov	r3, r0
 80091f2:	461a      	mov	r2, r3
 80091f4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80091f8:	4313      	orrs	r3, r2
 80091fa:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			SignalRateMeasFixed1104_400_mm = (TmpDWord &
				0x0000000ff) << 8;
 80091fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009200:	021b      	lsls	r3, r3, #8
			SignalRateMeasFixed1104_400_mm = (TmpDWord &
 8009202:	b29b      	uxth	r3, r3
 8009204:	653b      	str	r3, [r7, #80]	; 0x50

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x74);
 8009206:	2274      	movs	r2, #116	; 0x74
 8009208:	2194      	movs	r1, #148	; 0x94
 800920a:	6878      	ldr	r0, [r7, #4]
 800920c:	f001 ff64 	bl	800b0d8 <VL53L0X_WrByte>
 8009210:	4603      	mov	r3, r0
 8009212:	461a      	mov	r2, r3
 8009214:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009218:	4313      	orrs	r3, r2
 800921a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800921e:	6878      	ldr	r0, [r7, #4]
 8009220:	f7ff fc5c 	bl	8008adc <VL53L0X_device_read_strobe>
 8009224:	4603      	mov	r3, r0
 8009226:	461a      	mov	r2, r3
 8009228:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800922c:	4313      	orrs	r3, r2
 800922e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8009232:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8009236:	461a      	mov	r2, r3
 8009238:	2190      	movs	r1, #144	; 0x90
 800923a:	6878      	ldr	r0, [r7, #4]
 800923c:	f002 f830 	bl	800b2a0 <VL53L0X_RdDWord>
 8009240:	4603      	mov	r3, r0
 8009242:	461a      	mov	r2, r3
 8009244:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009248:	4313      	orrs	r3, r2
 800924a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			SignalRateMeasFixed1104_400_mm |= ((TmpDWord &
				0xff000000) >> 24);
 800924e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009250:	0e1b      	lsrs	r3, r3, #24
			SignalRateMeasFixed1104_400_mm |= ((TmpDWord &
 8009252:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8009254:	4313      	orrs	r3, r2
 8009256:	653b      	str	r3, [r7, #80]	; 0x50

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x75);
 8009258:	2275      	movs	r2, #117	; 0x75
 800925a:	2194      	movs	r1, #148	; 0x94
 800925c:	6878      	ldr	r0, [r7, #4]
 800925e:	f001 ff3b 	bl	800b0d8 <VL53L0X_WrByte>
 8009262:	4603      	mov	r3, r0
 8009264:	461a      	mov	r2, r3
 8009266:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800926a:	4313      	orrs	r3, r2
 800926c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8009270:	6878      	ldr	r0, [r7, #4]
 8009272:	f7ff fc33 	bl	8008adc <VL53L0X_device_read_strobe>
 8009276:	4603      	mov	r3, r0
 8009278:	461a      	mov	r2, r3
 800927a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800927e:	4313      	orrs	r3, r2
 8009280:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8009284:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8009288:	461a      	mov	r2, r3
 800928a:	2190      	movs	r1, #144	; 0x90
 800928c:	6878      	ldr	r0, [r7, #4]
 800928e:	f002 f807 	bl	800b2a0 <VL53L0X_RdDWord>
 8009292:	4603      	mov	r3, r0
 8009294:	461a      	mov	r2, r3
 8009296:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800929a:	4313      	orrs	r3, r2
 800929c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			DistMeasFixed1104_400_mm = (TmpDWord & 0x0000000ff)
							<< 8;
 80092a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092a2:	021b      	lsls	r3, r3, #8
			DistMeasFixed1104_400_mm = (TmpDWord & 0x0000000ff)
 80092a4:	b29b      	uxth	r3, r3
 80092a6:	657b      	str	r3, [r7, #84]	; 0x54

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x76);
 80092a8:	2276      	movs	r2, #118	; 0x76
 80092aa:	2194      	movs	r1, #148	; 0x94
 80092ac:	6878      	ldr	r0, [r7, #4]
 80092ae:	f001 ff13 	bl	800b0d8 <VL53L0X_WrByte>
 80092b2:	4603      	mov	r3, r0
 80092b4:	461a      	mov	r2, r3
 80092b6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80092ba:	4313      	orrs	r3, r2
 80092bc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 80092c0:	6878      	ldr	r0, [r7, #4]
 80092c2:	f7ff fc0b 	bl	8008adc <VL53L0X_device_read_strobe>
 80092c6:	4603      	mov	r3, r0
 80092c8:	461a      	mov	r2, r3
 80092ca:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80092ce:	4313      	orrs	r3, r2
 80092d0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 80092d4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80092d8:	461a      	mov	r2, r3
 80092da:	2190      	movs	r1, #144	; 0x90
 80092dc:	6878      	ldr	r0, [r7, #4]
 80092de:	f001 ffdf 	bl	800b2a0 <VL53L0X_RdDWord>
 80092e2:	4603      	mov	r3, r0
 80092e4:	461a      	mov	r2, r3
 80092e6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80092ea:	4313      	orrs	r3, r2
 80092ec:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			DistMeasFixed1104_400_mm |= ((TmpDWord & 0xff000000)
							>> 24);
 80092f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092f2:	0e1b      	lsrs	r3, r3, #24
			DistMeasFixed1104_400_mm |= ((TmpDWord & 0xff000000)
 80092f4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80092f6:	4313      	orrs	r3, r2
 80092f8:	657b      	str	r3, [r7, #84]	; 0x54
		}

		Status |= VL53L0X_WrByte(Dev, 0x81, 0x00);
 80092fa:	2200      	movs	r2, #0
 80092fc:	2181      	movs	r1, #129	; 0x81
 80092fe:	6878      	ldr	r0, [r7, #4]
 8009300:	f001 feea 	bl	800b0d8 <VL53L0X_WrByte>
 8009304:	4603      	mov	r3, r0
 8009306:	461a      	mov	r2, r3
 8009308:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800930c:	4313      	orrs	r3, r2
 800930e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x06);
 8009312:	2206      	movs	r2, #6
 8009314:	21ff      	movs	r1, #255	; 0xff
 8009316:	6878      	ldr	r0, [r7, #4]
 8009318:	f001 fede 	bl	800b0d8 <VL53L0X_WrByte>
 800931c:	4603      	mov	r3, r0
 800931e:	461a      	mov	r2, r3
 8009320:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009324:	4313      	orrs	r3, r2
 8009326:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_RdByte(Dev, 0x83, &byte);
 800932a:	f107 0337 	add.w	r3, r7, #55	; 0x37
 800932e:	461a      	mov	r2, r3
 8009330:	2183      	movs	r1, #131	; 0x83
 8009332:	6878      	ldr	r0, [r7, #4]
 8009334:	f001 ff52 	bl	800b1dc <VL53L0X_RdByte>
 8009338:	4603      	mov	r3, r0
 800933a:	461a      	mov	r2, r3
 800933c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009340:	4313      	orrs	r3, r2
 8009342:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x83, byte&0xfb);
 8009346:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800934a:	f023 0304 	bic.w	r3, r3, #4
 800934e:	b2db      	uxtb	r3, r3
 8009350:	461a      	mov	r2, r3
 8009352:	2183      	movs	r1, #131	; 0x83
 8009354:	6878      	ldr	r0, [r7, #4]
 8009356:	f001 febf 	bl	800b0d8 <VL53L0X_WrByte>
 800935a:	4603      	mov	r3, r0
 800935c:	461a      	mov	r2, r3
 800935e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009362:	4313      	orrs	r3, r2
 8009364:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8009368:	2201      	movs	r2, #1
 800936a:	21ff      	movs	r1, #255	; 0xff
 800936c:	6878      	ldr	r0, [r7, #4]
 800936e:	f001 feb3 	bl	800b0d8 <VL53L0X_WrByte>
 8009372:	4603      	mov	r3, r0
 8009374:	461a      	mov	r2, r3
 8009376:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800937a:	4313      	orrs	r3, r2
 800937c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 8009380:	2201      	movs	r2, #1
 8009382:	2100      	movs	r1, #0
 8009384:	6878      	ldr	r0, [r7, #4]
 8009386:	f001 fea7 	bl	800b0d8 <VL53L0X_WrByte>
 800938a:	4603      	mov	r3, r0
 800938c:	461a      	mov	r2, r3
 800938e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8009392:	4313      	orrs	r3, r2
 8009394:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8009398:	2200      	movs	r2, #0
 800939a:	21ff      	movs	r1, #255	; 0xff
 800939c:	6878      	ldr	r0, [r7, #4]
 800939e:	f001 fe9b 	bl	800b0d8 <VL53L0X_WrByte>
 80093a2:	4603      	mov	r3, r0
 80093a4:	461a      	mov	r2, r3
 80093a6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80093aa:	4313      	orrs	r3, r2
 80093ac:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 80093b0:	2200      	movs	r2, #0
 80093b2:	2180      	movs	r1, #128	; 0x80
 80093b4:	6878      	ldr	r0, [r7, #4]
 80093b6:	f001 fe8f 	bl	800b0d8 <VL53L0X_WrByte>
 80093ba:	4603      	mov	r3, r0
 80093bc:	461a      	mov	r2, r3
 80093be:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80093c2:	4313      	orrs	r3, r2
 80093c4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	}

	if ((Status == VL53L0X_ERROR_NONE) &&
 80093c8:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
 80093cc:	2b00      	cmp	r3, #0
 80093ce:	f040 808f 	bne.w	80094f0 <VL53L0X_get_info_from_device+0x98e>
 80093d2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80093d6:	2b07      	cmp	r3, #7
 80093d8:	f000 808a 	beq.w	80094f0 <VL53L0X_get_info_from_device+0x98e>
		(ReadDataFromDeviceDone != 7)) {
		/* Assign to variable if status is ok */
		if (((option & 1) == 1) &&
 80093dc:	78fb      	ldrb	r3, [r7, #3]
 80093de:	f003 0301 	and.w	r3, r3, #1
 80093e2:	2b00      	cmp	r3, #0
 80093e4:	d024      	beq.n	8009430 <VL53L0X_get_info_from_device+0x8ce>
			((ReadDataFromDeviceDone & 1) == 0)) {
 80093e6:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80093ea:	f003 0301 	and.w	r3, r3, #1
		if (((option & 1) == 1) &&
 80093ee:	2b00      	cmp	r3, #0
 80093f0:	d11e      	bne.n	8009430 <VL53L0X_get_info_from_device+0x8ce>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	f897 205e 	ldrb.w	r2, [r7, #94]	; 0x5e
 80093f8:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
				ReferenceSpadCount, ReferenceSpadCount);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	f897 205d 	ldrb.w	r2, [r7, #93]	; 0x5d
 8009402:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
				ReferenceSpadType, ReferenceSpadType);

			for (i = 0; i < VL53L0X_REF_SPAD_BUFFER_SIZE; i++) {
 8009406:	2300      	movs	r3, #0
 8009408:	64fb      	str	r3, [r7, #76]	; 0x4c
 800940a:	e00e      	b.n	800942a <VL53L0X_get_info_from_device+0x8c8>
				Dev->Data.SpadData.RefGoodSpadMap[i] =
					NvmRefGoodSpadMap[i];
 800940c:	f107 0208 	add.w	r2, r7, #8
 8009410:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009412:	4413      	add	r3, r2
 8009414:	7819      	ldrb	r1, [r3, #0]
				Dev->Data.SpadData.RefGoodSpadMap[i] =
 8009416:	687a      	ldr	r2, [r7, #4]
 8009418:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800941a:	4413      	add	r3, r2
 800941c:	f503 7395 	add.w	r3, r3, #298	; 0x12a
 8009420:	460a      	mov	r2, r1
 8009422:	701a      	strb	r2, [r3, #0]
			for (i = 0; i < VL53L0X_REF_SPAD_BUFFER_SIZE; i++) {
 8009424:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009426:	3301      	adds	r3, #1
 8009428:	64fb      	str	r3, [r7, #76]	; 0x4c
 800942a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800942c:	2b05      	cmp	r3, #5
 800942e:	dded      	ble.n	800940c <VL53L0X_get_info_from_device+0x8aa>
			}
		}

		if (((option & 2) == 2) &&
 8009430:	78fb      	ldrb	r3, [r7, #3]
 8009432:	f003 0302 	and.w	r3, r3, #2
 8009436:	2b00      	cmp	r3, #0
 8009438:	d018      	beq.n	800946c <VL53L0X_get_info_from_device+0x90a>
			((ReadDataFromDeviceDone & 2) == 0)) {
 800943a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800943e:	f003 0302 	and.w	r3, r3, #2
		if (((option & 2) == 2) &&
 8009442:	2b00      	cmp	r3, #0
 8009444:	d112      	bne.n	800946c <VL53L0X_get_info_from_device+0x90a>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8009446:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	f883 20f1 	strb.w	r2, [r3, #241]	; 0xf1
					ModuleId, ModuleId);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8009450:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	f883 20f2 	strb.w	r2, [r3, #242]	; 0xf2
					Revision, Revision);

			ProductId_tmp = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	33f3      	adds	r3, #243	; 0xf3
 800945e:	63bb      	str	r3, [r7, #56]	; 0x38
					ProductId);
			VL53L0X_COPYSTRING(ProductId_tmp, ProductId);
 8009460:	f107 0310 	add.w	r3, r7, #16
 8009464:	4619      	mov	r1, r3
 8009466:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8009468:	f001 ffc6 	bl	800b3f8 <strcpy>

		}

		if (((option & 4) == 4) &&
 800946c:	78fb      	ldrb	r3, [r7, #3]
 800946e:	f003 0304 	and.w	r3, r3, #4
 8009472:	2b00      	cmp	r3, #0
 8009474:	d030      	beq.n	80094d8 <VL53L0X_get_info_from_device+0x976>
			((ReadDataFromDeviceDone & 4) == 0)) {
 8009476:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800947a:	f003 0304 	and.w	r3, r3, #4
		if (((option & 4) == 4) &&
 800947e:	2b00      	cmp	r3, #0
 8009480:	d12a      	bne.n	80094d8 <VL53L0X_get_info_from_device+0x976>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8009482:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
						PartUIDUpper, PartUIDUpper);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800948a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
						PartUIDLower, PartUIDLower);

			SignalRateMeasFixed400mmFix =
 8009492:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009494:	025b      	lsls	r3, r3, #9
 8009496:	643b      	str	r3, [r7, #64]	; 0x40
				VL53L0X_FIXPOINT97TOFIXPOINT1616(
					SignalRateMeasFixed1104_400_mm);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800949c:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
				SignalRateMeasFixed400mm,
				SignalRateMeasFixed400mmFix);

			OffsetMicroMeters = 0;
 80094a0:	2300      	movs	r3, #0
 80094a2:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
			if (DistMeasFixed1104_400_mm != 0) {
 80094a6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80094a8:	2b00      	cmp	r3, #0
 80094aa:	d011      	beq.n	80094d0 <VL53L0X_get_info_from_device+0x96e>
					OffsetFixed1104_mm =
 80094ac:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80094ae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80094b0:	1ad3      	subs	r3, r2, r3
 80094b2:	64bb      	str	r3, [r7, #72]	; 0x48
						DistMeasFixed1104_400_mm -
						DistMeasTgtFixed1104_mm;
					OffsetMicroMeters = (OffsetFixed1104_mm
						* 1000) >> 4;
 80094b4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80094b6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80094ba:	fb02 f303 	mul.w	r3, r2, r3
 80094be:	091b      	lsrs	r3, r3, #4
					OffsetMicroMeters = (OffsetFixed1104_mm
 80094c0:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
					OffsetMicroMeters *= -1;
 80094c4:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 80094c8:	425b      	negs	r3, r3
 80094ca:	b29b      	uxth	r3, r3
 80094cc:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
			}

			PALDevDataSet(Dev,
 80094d0:	f9b7 205a 	ldrsh.w	r2, [r7, #90]	; 0x5a
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	60da      	str	r2, [r3, #12]
				Part2PartOffsetAdjustmentNVMMicroMeter,
				OffsetMicroMeters);
		}
		byte = (uint8_t)(ReadDataFromDeviceDone|option);
 80094d8:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 80094dc:	78fb      	ldrb	r3, [r7, #3]
 80094de:	4313      	orrs	r3, r2
 80094e0:	b2db      	uxtb	r3, r3
 80094e2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, ReadDataFromDeviceDone,
 80094e6:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
				byte);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80094f0:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
}
 80094f4:	4618      	mov	r0, r3
 80094f6:	3760      	adds	r7, #96	; 0x60
 80094f8:	46bd      	mov	sp, r7
 80094fa:	bd80      	pop	{r7, pc}

080094fc <VL53L0X_calc_macro_period_ps>:


uint32_t VL53L0X_calc_macro_period_ps(VL53L0X_DEV Dev, uint8_t vcsel_period_pclks)
{
 80094fc:	b480      	push	{r7}
 80094fe:	b087      	sub	sp, #28
 8009500:	af00      	add	r7, sp, #0
 8009502:	6078      	str	r0, [r7, #4]
 8009504:	460b      	mov	r3, r1
 8009506:	70fb      	strb	r3, [r7, #3]
	LOG_FUNCTION_START("");

	/* The above calculation will produce rounding errors,
	   therefore set fixed value
	*/
	PLL_period_ps = 1655;
 8009508:	f240 6277 	movw	r2, #1655	; 0x677
 800950c:	f04f 0300 	mov.w	r3, #0
 8009510:	e9c7 2304 	strd	r2, r3, [r7, #16]

	macro_period_vclks = 2304;
 8009514:	f44f 6310 	mov.w	r3, #2304	; 0x900
 8009518:	60fb      	str	r3, [r7, #12]
	macro_period_ps = (uint32_t)(macro_period_vclks
			* vcsel_period_pclks * PLL_period_ps);
 800951a:	78fb      	ldrb	r3, [r7, #3]
 800951c:	68fa      	ldr	r2, [r7, #12]
 800951e:	fb02 f303 	mul.w	r3, r2, r3
	macro_period_ps = (uint32_t)(macro_period_vclks
 8009522:	693a      	ldr	r2, [r7, #16]
 8009524:	fb02 f303 	mul.w	r3, r2, r3
 8009528:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_END("");
	return macro_period_ps;
 800952a:	68bb      	ldr	r3, [r7, #8]
}
 800952c:	4618      	mov	r0, r3
 800952e:	371c      	adds	r7, #28
 8009530:	46bd      	mov	sp, r7
 8009532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009536:	4770      	bx	lr

08009538 <VL53L0X_encode_timeout>:

uint16_t VL53L0X_encode_timeout(uint32_t timeout_macro_clks)
{
 8009538:	b480      	push	{r7}
 800953a:	b087      	sub	sp, #28
 800953c:	af00      	add	r7, sp, #0
 800953e:	6078      	str	r0, [r7, #4]
	/*!
	 * Encode timeout in macro periods in (LSByte * 2^MSByte) + 1 format
	 */

	uint16_t encoded_timeout = 0;
 8009540:	2300      	movs	r3, #0
 8009542:	82fb      	strh	r3, [r7, #22]
	uint32_t ls_byte = 0;
 8009544:	2300      	movs	r3, #0
 8009546:	613b      	str	r3, [r7, #16]
	uint16_t ms_byte = 0;
 8009548:	2300      	movs	r3, #0
 800954a:	81fb      	strh	r3, [r7, #14]

	if (timeout_macro_clks > 0) {
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	2b00      	cmp	r3, #0
 8009550:	d017      	beq.n	8009582 <VL53L0X_encode_timeout+0x4a>
		ls_byte = timeout_macro_clks - 1;
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	3b01      	subs	r3, #1
 8009556:	613b      	str	r3, [r7, #16]

		while ((ls_byte & 0xFFFFFF00) > 0) {
 8009558:	e005      	b.n	8009566 <VL53L0X_encode_timeout+0x2e>
			ls_byte = ls_byte >> 1;
 800955a:	693b      	ldr	r3, [r7, #16]
 800955c:	085b      	lsrs	r3, r3, #1
 800955e:	613b      	str	r3, [r7, #16]
			ms_byte++;
 8009560:	89fb      	ldrh	r3, [r7, #14]
 8009562:	3301      	adds	r3, #1
 8009564:	81fb      	strh	r3, [r7, #14]
		while ((ls_byte & 0xFFFFFF00) > 0) {
 8009566:	693b      	ldr	r3, [r7, #16]
 8009568:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800956c:	2b00      	cmp	r3, #0
 800956e:	d1f4      	bne.n	800955a <VL53L0X_encode_timeout+0x22>
		}

		encoded_timeout = (ms_byte << 8)
 8009570:	89fb      	ldrh	r3, [r7, #14]
 8009572:	021b      	lsls	r3, r3, #8
 8009574:	b29a      	uxth	r2, r3
				+ (uint16_t) (ls_byte & 0x000000FF);
 8009576:	693b      	ldr	r3, [r7, #16]
 8009578:	b29b      	uxth	r3, r3
 800957a:	b2db      	uxtb	r3, r3
 800957c:	b29b      	uxth	r3, r3
		encoded_timeout = (ms_byte << 8)
 800957e:	4413      	add	r3, r2
 8009580:	82fb      	strh	r3, [r7, #22]
	}

	return encoded_timeout;
 8009582:	8afb      	ldrh	r3, [r7, #22]

}
 8009584:	4618      	mov	r0, r3
 8009586:	371c      	adds	r7, #28
 8009588:	46bd      	mov	sp, r7
 800958a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800958e:	4770      	bx	lr

08009590 <VL53L0X_decode_timeout>:

uint32_t VL53L0X_decode_timeout(uint16_t encoded_timeout)
{
 8009590:	b480      	push	{r7}
 8009592:	b085      	sub	sp, #20
 8009594:	af00      	add	r7, sp, #0
 8009596:	4603      	mov	r3, r0
 8009598:	80fb      	strh	r3, [r7, #6]
	/*!
	 * Decode 16-bit timeout register value - format (LSByte * 2^MSByte) + 1
	 */

	uint32_t timeout_macro_clks = 0;
 800959a:	2300      	movs	r3, #0
 800959c:	60fb      	str	r3, [r7, #12]

	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 800959e:	88fb      	ldrh	r3, [r7, #6]
 80095a0:	b2db      	uxtb	r3, r3
			<< (uint32_t) ((encoded_timeout & 0xFF00) >> 8)) + 1;
 80095a2:	88fa      	ldrh	r2, [r7, #6]
 80095a4:	0a12      	lsrs	r2, r2, #8
 80095a6:	b292      	uxth	r2, r2
 80095a8:	4093      	lsls	r3, r2
	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 80095aa:	3301      	adds	r3, #1
 80095ac:	60fb      	str	r3, [r7, #12]

	return timeout_macro_clks;
 80095ae:	68fb      	ldr	r3, [r7, #12]
}
 80095b0:	4618      	mov	r0, r3
 80095b2:	3714      	adds	r7, #20
 80095b4:	46bd      	mov	sp, r7
 80095b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095ba:	4770      	bx	lr

080095bc <VL53L0X_calc_timeout_mclks>:

/* To convert ms into register value */
uint32_t VL53L0X_calc_timeout_mclks(VL53L0X_DEV Dev,
		uint32_t timeout_period_us,
		uint8_t vcsel_period_pclks)
{
 80095bc:	b580      	push	{r7, lr}
 80095be:	b088      	sub	sp, #32
 80095c0:	af00      	add	r7, sp, #0
 80095c2:	60f8      	str	r0, [r7, #12]
 80095c4:	60b9      	str	r1, [r7, #8]
 80095c6:	4613      	mov	r3, r2
 80095c8:	71fb      	strb	r3, [r7, #7]
	uint32_t macro_period_ps;
	uint32_t macro_period_ns;
	uint32_t timeout_period_mclks = 0;
 80095ca:	2300      	movs	r3, #0
 80095cc:	61fb      	str	r3, [r7, #28]

	macro_period_ps = VL53L0X_calc_macro_period_ps(Dev, vcsel_period_pclks);
 80095ce:	79fb      	ldrb	r3, [r7, #7]
 80095d0:	4619      	mov	r1, r3
 80095d2:	68f8      	ldr	r0, [r7, #12]
 80095d4:	f7ff ff92 	bl	80094fc <VL53L0X_calc_macro_period_ps>
 80095d8:	61b8      	str	r0, [r7, #24]
	macro_period_ns = (macro_period_ps + 500) / 1000;
 80095da:	69bb      	ldr	r3, [r7, #24]
 80095dc:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 80095e0:	4a0a      	ldr	r2, [pc, #40]	; (800960c <VL53L0X_calc_timeout_mclks+0x50>)
 80095e2:	fba2 2303 	umull	r2, r3, r2, r3
 80095e6:	099b      	lsrs	r3, r3, #6
 80095e8:	617b      	str	r3, [r7, #20]

	timeout_period_mclks =
		(uint32_t) (((timeout_period_us * 1000)
 80095ea:	68bb      	ldr	r3, [r7, #8]
 80095ec:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80095f0:	fb03 f202 	mul.w	r2, r3, r2
		+ (macro_period_ns / 2)) / macro_period_ns);
 80095f4:	697b      	ldr	r3, [r7, #20]
 80095f6:	085b      	lsrs	r3, r3, #1
 80095f8:	441a      	add	r2, r3
	timeout_period_mclks =
 80095fa:	697b      	ldr	r3, [r7, #20]
 80095fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8009600:	61fb      	str	r3, [r7, #28]

    return timeout_period_mclks;
 8009602:	69fb      	ldr	r3, [r7, #28]
}
 8009604:	4618      	mov	r0, r3
 8009606:	3720      	adds	r7, #32
 8009608:	46bd      	mov	sp, r7
 800960a:	bd80      	pop	{r7, pc}
 800960c:	10624dd3 	.word	0x10624dd3

08009610 <VL53L0X_calc_timeout_us>:

/* To convert register value into us */
uint32_t VL53L0X_calc_timeout_us(VL53L0X_DEV Dev,
		uint16_t timeout_period_mclks,
		uint8_t vcsel_period_pclks)
{
 8009610:	b580      	push	{r7, lr}
 8009612:	b086      	sub	sp, #24
 8009614:	af00      	add	r7, sp, #0
 8009616:	6078      	str	r0, [r7, #4]
 8009618:	460b      	mov	r3, r1
 800961a:	807b      	strh	r3, [r7, #2]
 800961c:	4613      	mov	r3, r2
 800961e:	707b      	strb	r3, [r7, #1]
	uint32_t macro_period_ps;
	uint32_t macro_period_ns;
	uint32_t actual_timeout_period_us = 0;
 8009620:	2300      	movs	r3, #0
 8009622:	617b      	str	r3, [r7, #20]

	macro_period_ps = VL53L0X_calc_macro_period_ps(Dev, vcsel_period_pclks);
 8009624:	787b      	ldrb	r3, [r7, #1]
 8009626:	4619      	mov	r1, r3
 8009628:	6878      	ldr	r0, [r7, #4]
 800962a:	f7ff ff67 	bl	80094fc <VL53L0X_calc_macro_period_ps>
 800962e:	6138      	str	r0, [r7, #16]
	macro_period_ns = (macro_period_ps + 500) / 1000;
 8009630:	693b      	ldr	r3, [r7, #16]
 8009632:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8009636:	4a0a      	ldr	r2, [pc, #40]	; (8009660 <VL53L0X_calc_timeout_us+0x50>)
 8009638:	fba2 2303 	umull	r2, r3, r2, r3
 800963c:	099b      	lsrs	r3, r3, #6
 800963e:	60fb      	str	r3, [r7, #12]

	actual_timeout_period_us =
		((timeout_period_mclks * macro_period_ns) + 500) / 1000;
 8009640:	887b      	ldrh	r3, [r7, #2]
 8009642:	68fa      	ldr	r2, [r7, #12]
 8009644:	fb02 f303 	mul.w	r3, r2, r3
 8009648:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
	actual_timeout_period_us =
 800964c:	4a04      	ldr	r2, [pc, #16]	; (8009660 <VL53L0X_calc_timeout_us+0x50>)
 800964e:	fba2 2303 	umull	r2, r3, r2, r3
 8009652:	099b      	lsrs	r3, r3, #6
 8009654:	617b      	str	r3, [r7, #20]

	return actual_timeout_period_us;
 8009656:	697b      	ldr	r3, [r7, #20]
}
 8009658:	4618      	mov	r0, r3
 800965a:	3718      	adds	r7, #24
 800965c:	46bd      	mov	sp, r7
 800965e:	bd80      	pop	{r7, pc}
 8009660:	10624dd3 	.word	0x10624dd3

08009664 <get_sequence_step_timeout>:


VL53L0X_Error get_sequence_step_timeout(VL53L0X_DEV Dev,
				VL53L0X_SequenceStepId SequenceStepId,
				uint32_t *pTimeOutMicroSecs)
{
 8009664:	b580      	push	{r7, lr}
 8009666:	b08c      	sub	sp, #48	; 0x30
 8009668:	af00      	add	r7, sp, #0
 800966a:	60f8      	str	r0, [r7, #12]
 800966c:	460b      	mov	r3, r1
 800966e:	607a      	str	r2, [r7, #4]
 8009670:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009672:	2300      	movs	r3, #0
 8009674:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint8_t CurrentVCSELPulsePeriodPClk;
	uint8_t EncodedTimeOutByte = 0;
 8009678:	2300      	movs	r3, #0
 800967a:	f887 3020 	strb.w	r3, [r7, #32]
	uint32_t TimeoutMicroSeconds = 0;
 800967e:	2300      	movs	r3, #0
 8009680:	62bb      	str	r3, [r7, #40]	; 0x28
	uint16_t PreRangeEncodedTimeOut = 0;
 8009682:	2300      	movs	r3, #0
 8009684:	83fb      	strh	r3, [r7, #30]
	uint16_t MsrcTimeOutMClks;
	uint16_t PreRangeTimeOutMClks;
	uint16_t FinalRangeTimeOutMClks = 0;
 8009686:	2300      	movs	r3, #0
 8009688:	84bb      	strh	r3, [r7, #36]	; 0x24
	uint16_t FinalRangeEncodedTimeOut;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;

	if ((SequenceStepId == VL53L0X_SEQUENCESTEP_TCC)	 ||
 800968a:	7afb      	ldrb	r3, [r7, #11]
 800968c:	2b00      	cmp	r3, #0
 800968e:	d005      	beq.n	800969c <get_sequence_step_timeout+0x38>
 8009690:	7afb      	ldrb	r3, [r7, #11]
 8009692:	2b01      	cmp	r3, #1
 8009694:	d002      	beq.n	800969c <get_sequence_step_timeout+0x38>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_DSS)	 ||
 8009696:	7afb      	ldrb	r3, [r7, #11]
 8009698:	2b02      	cmp	r3, #2
 800969a:	d128      	bne.n	80096ee <get_sequence_step_timeout+0x8a>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_MSRC)) {

		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800969c:	f107 0321 	add.w	r3, r7, #33	; 0x21
 80096a0:	461a      	mov	r2, r3
 80096a2:	2100      	movs	r1, #0
 80096a4:	68f8      	ldr	r0, [r7, #12]
 80096a6:	f7fd fa7d 	bl	8006ba4 <VL53L0X_GetVcselPulsePeriod>
 80096aa:	4603      	mov	r3, r0
 80096ac:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);
		if (Status == VL53L0X_ERROR_NONE) {
 80096b0:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80096b4:	2b00      	cmp	r3, #0
 80096b6:	d109      	bne.n	80096cc <get_sequence_step_timeout+0x68>
			Status = VL53L0X_RdByte(Dev,
 80096b8:	f107 0320 	add.w	r3, r7, #32
 80096bc:	461a      	mov	r2, r3
 80096be:	2146      	movs	r1, #70	; 0x46
 80096c0:	68f8      	ldr	r0, [r7, #12]
 80096c2:	f001 fd8b 	bl	800b1dc <VL53L0X_RdByte>
 80096c6:	4603      	mov	r3, r0
 80096c8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_REG_MSRC_CONFIG_TIMEOUT_MACROP,
					&EncodedTimeOutByte);
		}
		MsrcTimeOutMClks = VL53L0X_decode_timeout(EncodedTimeOutByte);
 80096cc:	f897 3020 	ldrb.w	r3, [r7, #32]
 80096d0:	b29b      	uxth	r3, r3
 80096d2:	4618      	mov	r0, r3
 80096d4:	f7ff ff5c 	bl	8009590 <VL53L0X_decode_timeout>
 80096d8:	4603      	mov	r3, r0
 80096da:	847b      	strh	r3, [r7, #34]	; 0x22

		TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 80096dc:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 80096e0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80096e2:	4619      	mov	r1, r3
 80096e4:	68f8      	ldr	r0, [r7, #12]
 80096e6:	f7ff ff93 	bl	8009610 <VL53L0X_calc_timeout_us>
 80096ea:	62b8      	str	r0, [r7, #40]	; 0x28
 80096ec:	e092      	b.n	8009814 <get_sequence_step_timeout+0x1b0>
						MsrcTimeOutMClks,
						CurrentVCSELPulsePeriodPClk);
	} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_PRE_RANGE) {
 80096ee:	7afb      	ldrb	r3, [r7, #11]
 80096f0:	2b03      	cmp	r3, #3
 80096f2:	d135      	bne.n	8009760 <get_sequence_step_timeout+0xfc>
		/* Retrieve PRE-RANGE VCSEL Period */
		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 80096f4:	f107 0321 	add.w	r3, r7, #33	; 0x21
 80096f8:	461a      	mov	r2, r3
 80096fa:	2100      	movs	r1, #0
 80096fc:	68f8      	ldr	r0, [r7, #12]
 80096fe:	f7fd fa51 	bl	8006ba4 <VL53L0X_GetVcselPulsePeriod>
 8009702:	4603      	mov	r3, r0
 8009704:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
						VL53L0X_VCSEL_PERIOD_PRE_RANGE,
						&CurrentVCSELPulsePeriodPClk);

		/* Retrieve PRE-RANGE Timeout in Macro periods (MCLKS) */
		if (Status == VL53L0X_ERROR_NONE) {
 8009708:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800970c:	2b00      	cmp	r3, #0
 800970e:	f040 8081 	bne.w	8009814 <get_sequence_step_timeout+0x1b0>

			/* Retrieve PRE-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8009712:	f107 0321 	add.w	r3, r7, #33	; 0x21
 8009716:	461a      	mov	r2, r3
 8009718:	2100      	movs	r1, #0
 800971a:	68f8      	ldr	r0, [r7, #12]
 800971c:	f7fd fa42 	bl	8006ba4 <VL53L0X_GetVcselPulsePeriod>
 8009720:	4603      	mov	r3, r0
 8009722:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

			if (Status == VL53L0X_ERROR_NONE) {
 8009726:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800972a:	2b00      	cmp	r3, #0
 800972c:	d109      	bne.n	8009742 <get_sequence_step_timeout+0xde>
				Status = VL53L0X_RdWord(Dev,
 800972e:	f107 031e 	add.w	r3, r7, #30
 8009732:	461a      	mov	r2, r3
 8009734:	2151      	movs	r1, #81	; 0x51
 8009736:	68f8      	ldr	r0, [r7, #12]
 8009738:	f001 fd7a 	bl	800b230 <VL53L0X_RdWord>
 800973c:	4603      	mov	r3, r0
 800973e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&PreRangeEncodedTimeOut);
			}

			PreRangeTimeOutMClks = VL53L0X_decode_timeout(
 8009742:	8bfb      	ldrh	r3, [r7, #30]
 8009744:	4618      	mov	r0, r3
 8009746:	f7ff ff23 	bl	8009590 <VL53L0X_decode_timeout>
 800974a:	4603      	mov	r3, r0
 800974c:	84fb      	strh	r3, [r7, #38]	; 0x26
					PreRangeEncodedTimeOut);

			TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 800974e:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8009752:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8009754:	4619      	mov	r1, r3
 8009756:	68f8      	ldr	r0, [r7, #12]
 8009758:	f7ff ff5a 	bl	8009610 <VL53L0X_calc_timeout_us>
 800975c:	62b8      	str	r0, [r7, #40]	; 0x28
 800975e:	e059      	b.n	8009814 <get_sequence_step_timeout+0x1b0>
					PreRangeTimeOutMClks,
					CurrentVCSELPulsePeriodPClk);
		}
	} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_FINAL_RANGE) {
 8009760:	7afb      	ldrb	r3, [r7, #11]
 8009762:	2b04      	cmp	r3, #4
 8009764:	d156      	bne.n	8009814 <get_sequence_step_timeout+0x1b0>

		VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 8009766:	f107 0314 	add.w	r3, r7, #20
 800976a:	4619      	mov	r1, r3
 800976c:	68f8      	ldr	r0, [r7, #12]
 800976e:	f7fd fb25 	bl	8006dbc <VL53L0X_GetSequenceStepEnables>
		PreRangeTimeOutMClks = 0;
 8009772:	2300      	movs	r3, #0
 8009774:	84fb      	strh	r3, [r7, #38]	; 0x26

		if (SchedulerSequenceSteps.PreRangeOn) {
 8009776:	7dfb      	ldrb	r3, [r7, #23]
 8009778:	2b00      	cmp	r3, #0
 800977a:	d01d      	beq.n	80097b8 <get_sequence_step_timeout+0x154>
			/* Retrieve PRE-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800977c:	f107 0321 	add.w	r3, r7, #33	; 0x21
 8009780:	461a      	mov	r2, r3
 8009782:	2100      	movs	r1, #0
 8009784:	68f8      	ldr	r0, [r7, #12]
 8009786:	f7fd fa0d 	bl	8006ba4 <VL53L0X_GetVcselPulsePeriod>
 800978a:	4603      	mov	r3, r0
 800978c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_VCSEL_PERIOD_PRE_RANGE,
				&CurrentVCSELPulsePeriodPClk);

			/* Retrieve PRE-RANGE Timeout in Macro periods
			 * (MCLKS) */
			if (Status == VL53L0X_ERROR_NONE) {
 8009790:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8009794:	2b00      	cmp	r3, #0
 8009796:	d10f      	bne.n	80097b8 <get_sequence_step_timeout+0x154>
				Status = VL53L0X_RdWord(Dev,
 8009798:	f107 031e 	add.w	r3, r7, #30
 800979c:	461a      	mov	r2, r3
 800979e:	2151      	movs	r1, #81	; 0x51
 80097a0:	68f8      	ldr	r0, [r7, #12]
 80097a2:	f001 fd45 	bl	800b230 <VL53L0X_RdWord>
 80097a6:	4603      	mov	r3, r0
 80097a8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&PreRangeEncodedTimeOut);
				PreRangeTimeOutMClks = VL53L0X_decode_timeout(
 80097ac:	8bfb      	ldrh	r3, [r7, #30]
 80097ae:	4618      	mov	r0, r3
 80097b0:	f7ff feee 	bl	8009590 <VL53L0X_decode_timeout>
 80097b4:	4603      	mov	r3, r0
 80097b6:	84fb      	strh	r3, [r7, #38]	; 0x26
						PreRangeEncodedTimeOut);
			}
		}

		if (Status == VL53L0X_ERROR_NONE) {
 80097b8:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80097bc:	2b00      	cmp	r3, #0
 80097be:	d109      	bne.n	80097d4 <get_sequence_step_timeout+0x170>
			/* Retrieve FINAL-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 80097c0:	f107 0321 	add.w	r3, r7, #33	; 0x21
 80097c4:	461a      	mov	r2, r3
 80097c6:	2101      	movs	r1, #1
 80097c8:	68f8      	ldr	r0, [r7, #12]
 80097ca:	f7fd f9eb 	bl	8006ba4 <VL53L0X_GetVcselPulsePeriod>
 80097ce:	4603      	mov	r3, r0
 80097d0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
					&CurrentVCSELPulsePeriodPClk);
		}

		/* Retrieve FINAL-RANGE Timeout in Macro periods (MCLKS) */
		if (Status == VL53L0X_ERROR_NONE) {
 80097d4:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80097d8:	2b00      	cmp	r3, #0
 80097da:	d10f      	bne.n	80097fc <get_sequence_step_timeout+0x198>
			Status = VL53L0X_RdWord(Dev,
 80097dc:	f107 031c 	add.w	r3, r7, #28
 80097e0:	461a      	mov	r2, r3
 80097e2:	2171      	movs	r1, #113	; 0x71
 80097e4:	68f8      	ldr	r0, [r7, #12]
 80097e6:	f001 fd23 	bl	800b230 <VL53L0X_RdWord>
 80097ea:	4603      	mov	r3, r0
 80097ec:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_REG_FINAL_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&FinalRangeEncodedTimeOut);
			FinalRangeTimeOutMClks = VL53L0X_decode_timeout(
 80097f0:	8bbb      	ldrh	r3, [r7, #28]
 80097f2:	4618      	mov	r0, r3
 80097f4:	f7ff fecc 	bl	8009590 <VL53L0X_decode_timeout>
 80097f8:	4603      	mov	r3, r0
 80097fa:	84bb      	strh	r3, [r7, #36]	; 0x24
					FinalRangeEncodedTimeOut);
		}

		FinalRangeTimeOutMClks -= PreRangeTimeOutMClks;
 80097fc:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80097fe:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8009800:	1ad3      	subs	r3, r2, r3
 8009802:	84bb      	strh	r3, [r7, #36]	; 0x24
		TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 8009804:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8009808:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800980a:	4619      	mov	r1, r3
 800980c:	68f8      	ldr	r0, [r7, #12]
 800980e:	f7ff feff 	bl	8009610 <VL53L0X_calc_timeout_us>
 8009812:	62b8      	str	r0, [r7, #40]	; 0x28
						FinalRangeTimeOutMClks,
						CurrentVCSELPulsePeriodPClk);
	}

	*pTimeOutMicroSecs = TimeoutMicroSeconds;
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009818:	601a      	str	r2, [r3, #0]

	return Status;
 800981a:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 800981e:	4618      	mov	r0, r3
 8009820:	3730      	adds	r7, #48	; 0x30
 8009822:	46bd      	mov	sp, r7
 8009824:	bd80      	pop	{r7, pc}

08009826 <set_sequence_step_timeout>:


VL53L0X_Error set_sequence_step_timeout(VL53L0X_DEV Dev,
					VL53L0X_SequenceStepId SequenceStepId,
					uint32_t TimeOutMicroSecs)
{
 8009826:	b580      	push	{r7, lr}
 8009828:	b08a      	sub	sp, #40	; 0x28
 800982a:	af00      	add	r7, sp, #0
 800982c:	60f8      	str	r0, [r7, #12]
 800982e:	460b      	mov	r3, r1
 8009830:	607a      	str	r2, [r7, #4]
 8009832:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009834:	2300      	movs	r3, #0
 8009836:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint16_t MsrcRangeTimeOutMClks;
	uint32_t FinalRangeTimeOutMClks;
	uint16_t FinalRangeEncodedTimeOut;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;

	if ((SequenceStepId == VL53L0X_SEQUENCESTEP_TCC)	 ||
 800983a:	7afb      	ldrb	r3, [r7, #11]
 800983c:	2b00      	cmp	r3, #0
 800983e:	d005      	beq.n	800984c <set_sequence_step_timeout+0x26>
 8009840:	7afb      	ldrb	r3, [r7, #11]
 8009842:	2b01      	cmp	r3, #1
 8009844:	d002      	beq.n	800984c <set_sequence_step_timeout+0x26>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_DSS)	 ||
 8009846:	7afb      	ldrb	r3, [r7, #11]
 8009848:	2b02      	cmp	r3, #2
 800984a:	d138      	bne.n	80098be <set_sequence_step_timeout+0x98>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_MSRC)) {

		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800984c:	f107 031b 	add.w	r3, r7, #27
 8009850:	461a      	mov	r2, r3
 8009852:	2100      	movs	r1, #0
 8009854:	68f8      	ldr	r0, [r7, #12]
 8009856:	f7fd f9a5 	bl	8006ba4 <VL53L0X_GetVcselPulsePeriod>
 800985a:	4603      	mov	r3, r0
 800985c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

		if (Status == VL53L0X_ERROR_NONE) {
 8009860:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009864:	2b00      	cmp	r3, #0
 8009866:	d11a      	bne.n	800989e <set_sequence_step_timeout+0x78>
			MsrcRangeTimeOutMClks = VL53L0X_calc_timeout_mclks(Dev,
 8009868:	7efb      	ldrb	r3, [r7, #27]
 800986a:	461a      	mov	r2, r3
 800986c:	6879      	ldr	r1, [r7, #4]
 800986e:	68f8      	ldr	r0, [r7, #12]
 8009870:	f7ff fea4 	bl	80095bc <VL53L0X_calc_timeout_mclks>
 8009874:	4603      	mov	r3, r0
 8009876:	83bb      	strh	r3, [r7, #28]
					TimeOutMicroSecs,
					(uint8_t)CurrentVCSELPulsePeriodPClk);

			if (MsrcRangeTimeOutMClks > 256)
 8009878:	8bbb      	ldrh	r3, [r7, #28]
 800987a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800987e:	d903      	bls.n	8009888 <set_sequence_step_timeout+0x62>
				MsrcEncodedTimeOut = 255;
 8009880:	23ff      	movs	r3, #255	; 0xff
 8009882:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8009886:	e004      	b.n	8009892 <set_sequence_step_timeout+0x6c>
			else
				MsrcEncodedTimeOut =
					(uint8_t)MsrcRangeTimeOutMClks - 1;
 8009888:	8bbb      	ldrh	r3, [r7, #28]
 800988a:	b2db      	uxtb	r3, r3
				MsrcEncodedTimeOut =
 800988c:	3b01      	subs	r3, #1
 800988e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8009892:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8009896:	b29a      	uxth	r2, r3
 8009898:	68fb      	ldr	r3, [r7, #12]
 800989a:	f8a3 20d8 	strh.w	r2, [r3, #216]	; 0xd8
				LastEncodedTimeout,
				MsrcEncodedTimeOut);
		}

		if (Status == VL53L0X_ERROR_NONE) {
 800989e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80098a2:	2b00      	cmp	r3, #0
 80098a4:	f040 80ab 	bne.w	80099fe <set_sequence_step_timeout+0x1d8>
			Status = VL53L0X_WrByte(Dev,
 80098a8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80098ac:	461a      	mov	r2, r3
 80098ae:	2146      	movs	r1, #70	; 0x46
 80098b0:	68f8      	ldr	r0, [r7, #12]
 80098b2:	f001 fc11 	bl	800b0d8 <VL53L0X_WrByte>
 80098b6:	4603      	mov	r3, r0
 80098b8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if (Status == VL53L0X_ERROR_NONE) {
 80098bc:	e09f      	b.n	80099fe <set_sequence_step_timeout+0x1d8>
				VL53L0X_REG_MSRC_CONFIG_TIMEOUT_MACROP,
				MsrcEncodedTimeOut);
		}
	} else {

		if (SequenceStepId == VL53L0X_SEQUENCESTEP_PRE_RANGE) {
 80098be:	7afb      	ldrb	r3, [r7, #11]
 80098c0:	2b03      	cmp	r3, #3
 80098c2:	d135      	bne.n	8009930 <set_sequence_step_timeout+0x10a>

			if (Status == VL53L0X_ERROR_NONE) {
 80098c4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80098c8:	2b00      	cmp	r3, #0
 80098ca:	d11b      	bne.n	8009904 <set_sequence_step_timeout+0xde>
				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 80098cc:	f107 031b 	add.w	r3, r7, #27
 80098d0:	461a      	mov	r2, r3
 80098d2:	2100      	movs	r1, #0
 80098d4:	68f8      	ldr	r0, [r7, #12]
 80098d6:	f7fd f965 	bl	8006ba4 <VL53L0X_GetVcselPulsePeriod>
 80098da:	4603      	mov	r3, r0
 80098dc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						VL53L0X_VCSEL_PERIOD_PRE_RANGE,
						&CurrentVCSELPulsePeriodPClk);
				PreRangeTimeOutMClks =
					VL53L0X_calc_timeout_mclks(Dev,
 80098e0:	7efb      	ldrb	r3, [r7, #27]
 80098e2:	461a      	mov	r2, r3
 80098e4:	6879      	ldr	r1, [r7, #4]
 80098e6:	68f8      	ldr	r0, [r7, #12]
 80098e8:	f7ff fe68 	bl	80095bc <VL53L0X_calc_timeout_mclks>
 80098ec:	4603      	mov	r3, r0
				PreRangeTimeOutMClks =
 80098ee:	84bb      	strh	r3, [r7, #36]	; 0x24
					TimeOutMicroSecs,
					(uint8_t)CurrentVCSELPulsePeriodPClk);
				PreRangeEncodedTimeOut = VL53L0X_encode_timeout(
 80098f0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80098f2:	4618      	mov	r0, r3
 80098f4:	f7ff fe20 	bl	8009538 <VL53L0X_encode_timeout>
 80098f8:	4603      	mov	r3, r0
 80098fa:	833b      	strh	r3, [r7, #24]
					PreRangeTimeOutMClks);

				VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 80098fc:	8b3a      	ldrh	r2, [r7, #24]
 80098fe:	68fb      	ldr	r3, [r7, #12]
 8009900:	f8a3 20d8 	strh.w	r2, [r3, #216]	; 0xd8
					LastEncodedTimeout,
					PreRangeEncodedTimeOut);
			}

			if (Status == VL53L0X_ERROR_NONE) {
 8009904:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009908:	2b00      	cmp	r3, #0
 800990a:	d108      	bne.n	800991e <set_sequence_step_timeout+0xf8>
				Status = VL53L0X_WrWord(Dev,
 800990c:	8b3b      	ldrh	r3, [r7, #24]
 800990e:	461a      	mov	r2, r3
 8009910:	2151      	movs	r1, #81	; 0x51
 8009912:	68f8      	ldr	r0, [r7, #12]
 8009914:	f001 fc04 	bl	800b120 <VL53L0X_WrWord>
 8009918:	4603      	mov	r3, r0
 800991a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				PreRangeEncodedTimeOut);
			}

			if (Status == VL53L0X_ERROR_NONE) {
 800991e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009922:	2b00      	cmp	r3, #0
 8009924:	d16b      	bne.n	80099fe <set_sequence_step_timeout+0x1d8>
				VL53L0X_SETDEVICESPECIFICPARAMETER(
 8009926:	68fb      	ldr	r3, [r7, #12]
 8009928:	687a      	ldr	r2, [r7, #4]
 800992a:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
 800992e:	e066      	b.n	80099fe <set_sequence_step_timeout+0x1d8>
					Dev,
					PreRangeTimeoutMicroSecs,
					TimeOutMicroSecs);
			}
		} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_FINAL_RANGE) {
 8009930:	7afb      	ldrb	r3, [r7, #11]
 8009932:	2b04      	cmp	r3, #4
 8009934:	d160      	bne.n	80099f8 <set_sequence_step_timeout+0x1d2>
			 * must be added. To do this both final and pre-range
			 * timeouts must be expressed in macro periods MClks
			 * because they have different vcsel periods.
			 */

			VL53L0X_GetSequenceStepEnables(Dev,
 8009936:	f107 0310 	add.w	r3, r7, #16
 800993a:	4619      	mov	r1, r3
 800993c:	68f8      	ldr	r0, [r7, #12]
 800993e:	f7fd fa3d 	bl	8006dbc <VL53L0X_GetSequenceStepEnables>
					&SchedulerSequenceSteps);
			PreRangeTimeOutMClks = 0;
 8009942:	2300      	movs	r3, #0
 8009944:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (SchedulerSequenceSteps.PreRangeOn) {
 8009946:	7cfb      	ldrb	r3, [r7, #19]
 8009948:	2b00      	cmp	r3, #0
 800994a:	d01d      	beq.n	8009988 <set_sequence_step_timeout+0x162>

				/* Retrieve PRE-RANGE VCSEL Period */
				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800994c:	f107 031b 	add.w	r3, r7, #27
 8009950:	461a      	mov	r2, r3
 8009952:	2100      	movs	r1, #0
 8009954:	68f8      	ldr	r0, [r7, #12]
 8009956:	f7fd f925 	bl	8006ba4 <VL53L0X_GetVcselPulsePeriod>
 800995a:	4603      	mov	r3, r0
 800995c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

				/* Retrieve PRE-RANGE Timeout in Macro periods
				 * (MCLKS) */
				if (Status == VL53L0X_ERROR_NONE) {
 8009960:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009964:	2b00      	cmp	r3, #0
 8009966:	d10f      	bne.n	8009988 <set_sequence_step_timeout+0x162>
					Status = VL53L0X_RdWord(Dev, 0x51,
 8009968:	f107 0318 	add.w	r3, r7, #24
 800996c:	461a      	mov	r2, r3
 800996e:	2151      	movs	r1, #81	; 0x51
 8009970:	68f8      	ldr	r0, [r7, #12]
 8009972:	f001 fc5d 	bl	800b230 <VL53L0X_RdWord>
 8009976:	4603      	mov	r3, r0
 8009978:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						&PreRangeEncodedTimeOut);
					PreRangeTimeOutMClks =
						VL53L0X_decode_timeout(
 800997c:	8b3b      	ldrh	r3, [r7, #24]
 800997e:	4618      	mov	r0, r3
 8009980:	f7ff fe06 	bl	8009590 <VL53L0X_decode_timeout>
 8009984:	4603      	mov	r3, r0
					PreRangeTimeOutMClks =
 8009986:	84bb      	strh	r3, [r7, #36]	; 0x24
			}

			/* Calculate FINAL RANGE Timeout in Macro Periods
			 * (MCLKS) and add PRE-RANGE value
			 */
			if (Status == VL53L0X_ERROR_NONE) {
 8009988:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800998c:	2b00      	cmp	r3, #0
 800998e:	d109      	bne.n	80099a4 <set_sequence_step_timeout+0x17e>

				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8009990:	f107 031b 	add.w	r3, r7, #27
 8009994:	461a      	mov	r2, r3
 8009996:	2101      	movs	r1, #1
 8009998:	68f8      	ldr	r0, [r7, #12]
 800999a:	f7fd f903 	bl	8006ba4 <VL53L0X_GetVcselPulsePeriod>
 800999e:	4603      	mov	r3, r0
 80099a0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
						&CurrentVCSELPulsePeriodPClk);
			}
			if (Status == VL53L0X_ERROR_NONE) {
 80099a4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80099a8:	2b00      	cmp	r3, #0
 80099aa:	d128      	bne.n	80099fe <set_sequence_step_timeout+0x1d8>

				FinalRangeTimeOutMClks =
					VL53L0X_calc_timeout_mclks(Dev,
 80099ac:	7efb      	ldrb	r3, [r7, #27]
 80099ae:	461a      	mov	r2, r3
 80099b0:	6879      	ldr	r1, [r7, #4]
 80099b2:	68f8      	ldr	r0, [r7, #12]
 80099b4:	f7ff fe02 	bl	80095bc <VL53L0X_calc_timeout_mclks>
 80099b8:	6238      	str	r0, [r7, #32]
					TimeOutMicroSecs,
					(uint8_t) CurrentVCSELPulsePeriodPClk);

				FinalRangeTimeOutMClks += PreRangeTimeOutMClks;
 80099ba:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80099bc:	6a3a      	ldr	r2, [r7, #32]
 80099be:	4413      	add	r3, r2
 80099c0:	623b      	str	r3, [r7, #32]

				FinalRangeEncodedTimeOut =
				VL53L0X_encode_timeout(FinalRangeTimeOutMClks);
 80099c2:	6a38      	ldr	r0, [r7, #32]
 80099c4:	f7ff fdb8 	bl	8009538 <VL53L0X_encode_timeout>
 80099c8:	4603      	mov	r3, r0
 80099ca:	83fb      	strh	r3, [r7, #30]

				if (Status == VL53L0X_ERROR_NONE) {
 80099cc:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80099d0:	2b00      	cmp	r3, #0
 80099d2:	d108      	bne.n	80099e6 <set_sequence_step_timeout+0x1c0>
					Status = VL53L0X_WrWord(Dev, 0x71,
 80099d4:	8bfb      	ldrh	r3, [r7, #30]
 80099d6:	461a      	mov	r2, r3
 80099d8:	2171      	movs	r1, #113	; 0x71
 80099da:	68f8      	ldr	r0, [r7, #12]
 80099dc:	f001 fba0 	bl	800b120 <VL53L0X_WrWord>
 80099e0:	4603      	mov	r3, r0
 80099e2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					FinalRangeEncodedTimeOut);
				}

				if (Status == VL53L0X_ERROR_NONE) {
 80099e6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80099ea:	2b00      	cmp	r3, #0
 80099ec:	d107      	bne.n	80099fe <set_sequence_step_timeout+0x1d8>
					VL53L0X_SETDEVICESPECIFICPARAMETER(
 80099ee:	68fb      	ldr	r3, [r7, #12]
 80099f0:	687a      	ldr	r2, [r7, #4]
 80099f2:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
 80099f6:	e002      	b.n	80099fe <set_sequence_step_timeout+0x1d8>
						FinalRangeTimeoutMicroSecs,
						TimeOutMicroSecs);
				}
			}
		} else
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 80099f8:	23fc      	movs	r3, #252	; 0xfc
 80099fa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	}
	return Status;
 80099fe:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8009a02:	4618      	mov	r0, r3
 8009a04:	3728      	adds	r7, #40	; 0x28
 8009a06:	46bd      	mov	sp, r7
 8009a08:	bd80      	pop	{r7, pc}

08009a0a <VL53L0X_set_vcsel_pulse_period>:

VL53L0X_Error VL53L0X_set_vcsel_pulse_period(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t VCSELPulsePeriodPCLK)
{
 8009a0a:	b580      	push	{r7, lr}
 8009a0c:	b08a      	sub	sp, #40	; 0x28
 8009a0e:	af00      	add	r7, sp, #0
 8009a10:	6078      	str	r0, [r7, #4]
 8009a12:	460b      	mov	r3, r1
 8009a14:	70fb      	strb	r3, [r7, #3]
 8009a16:	4613      	mov	r3, r2
 8009a18:	70bb      	strb	r3, [r7, #2]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009a1a:	2300      	movs	r3, #0
 8009a1c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint8_t vcsel_period_reg;
	uint8_t MinPreVcselPeriodPCLK = 12;
 8009a20:	230c      	movs	r3, #12
 8009a22:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	uint8_t MaxPreVcselPeriodPCLK = 18;
 8009a26:	2312      	movs	r3, #18
 8009a28:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	uint8_t MinFinalVcselPeriodPCLK = 8;
 8009a2c:	2308      	movs	r3, #8
 8009a2e:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	uint8_t MaxFinalVcselPeriodPCLK = 14;
 8009a32:	230e      	movs	r3, #14
 8009a34:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	uint32_t MeasurementTimingBudgetMicroSeconds;
	uint32_t FinalRangeTimeoutMicroSeconds;
	uint32_t PreRangeTimeoutMicroSeconds;
	uint32_t MsrcTimeoutMicroSeconds;
	uint8_t PhaseCalInt = 0;
 8009a38:	2300      	movs	r3, #0
 8009a3a:	73fb      	strb	r3, [r7, #15]

	/* Check if valid clock period requested */

	if ((VCSELPulsePeriodPCLK % 2) != 0) {
 8009a3c:	78bb      	ldrb	r3, [r7, #2]
 8009a3e:	f003 0301 	and.w	r3, r3, #1
 8009a42:	b2db      	uxtb	r3, r3
 8009a44:	2b00      	cmp	r3, #0
 8009a46:	d003      	beq.n	8009a50 <VL53L0X_set_vcsel_pulse_period+0x46>
		/* Value must be an even number */
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8009a48:	23fc      	movs	r3, #252	; 0xfc
 8009a4a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8009a4e:	e020      	b.n	8009a92 <VL53L0X_set_vcsel_pulse_period+0x88>
	} else if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_PRE_RANGE &&
 8009a50:	78fb      	ldrb	r3, [r7, #3]
 8009a52:	2b00      	cmp	r3, #0
 8009a54:	d10d      	bne.n	8009a72 <VL53L0X_set_vcsel_pulse_period+0x68>
 8009a56:	78ba      	ldrb	r2, [r7, #2]
 8009a58:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8009a5c:	429a      	cmp	r2, r3
 8009a5e:	d304      	bcc.n	8009a6a <VL53L0X_set_vcsel_pulse_period+0x60>
		(VCSELPulsePeriodPCLK < MinPreVcselPeriodPCLK ||
 8009a60:	78ba      	ldrb	r2, [r7, #2]
 8009a62:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8009a66:	429a      	cmp	r2, r3
 8009a68:	d903      	bls.n	8009a72 <VL53L0X_set_vcsel_pulse_period+0x68>
		VCSELPulsePeriodPCLK > MaxPreVcselPeriodPCLK)) {
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8009a6a:	23fc      	movs	r3, #252	; 0xfc
 8009a6c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8009a70:	e00f      	b.n	8009a92 <VL53L0X_set_vcsel_pulse_period+0x88>
	} else if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_FINAL_RANGE &&
 8009a72:	78fb      	ldrb	r3, [r7, #3]
 8009a74:	2b01      	cmp	r3, #1
 8009a76:	d10c      	bne.n	8009a92 <VL53L0X_set_vcsel_pulse_period+0x88>
 8009a78:	78ba      	ldrb	r2, [r7, #2]
 8009a7a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8009a7e:	429a      	cmp	r2, r3
 8009a80:	d304      	bcc.n	8009a8c <VL53L0X_set_vcsel_pulse_period+0x82>
		(VCSELPulsePeriodPCLK < MinFinalVcselPeriodPCLK ||
 8009a82:	78ba      	ldrb	r2, [r7, #2]
 8009a84:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009a88:	429a      	cmp	r2, r3
 8009a8a:	d902      	bls.n	8009a92 <VL53L0X_set_vcsel_pulse_period+0x88>
		 VCSELPulsePeriodPCLK > MaxFinalVcselPeriodPCLK)) {

		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8009a8c:	23fc      	movs	r3, #252	; 0xfc
 8009a8e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	/* Apply specific settings for the requested clock period */

	if (Status != VL53L0X_ERROR_NONE)
 8009a92:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009a96:	2b00      	cmp	r3, #0
 8009a98:	d002      	beq.n	8009aa0 <VL53L0X_set_vcsel_pulse_period+0x96>
		return Status;
 8009a9a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009a9e:	e239      	b.n	8009f14 <VL53L0X_set_vcsel_pulse_period+0x50a>


	if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_PRE_RANGE) {
 8009aa0:	78fb      	ldrb	r3, [r7, #3]
 8009aa2:	2b00      	cmp	r3, #0
 8009aa4:	d150      	bne.n	8009b48 <VL53L0X_set_vcsel_pulse_period+0x13e>

		/* Set phase check limits */
		if (VCSELPulsePeriodPCLK == 12) {
 8009aa6:	78bb      	ldrb	r3, [r7, #2]
 8009aa8:	2b0c      	cmp	r3, #12
 8009aaa:	d110      	bne.n	8009ace <VL53L0X_set_vcsel_pulse_period+0xc4>

			Status = VL53L0X_WrByte(Dev,
 8009aac:	2218      	movs	r2, #24
 8009aae:	2157      	movs	r1, #87	; 0x57
 8009ab0:	6878      	ldr	r0, [r7, #4]
 8009ab2:	f001 fb11 	bl	800b0d8 <VL53L0X_WrByte>
 8009ab6:	4603      	mov	r3, r0
 8009ab8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x18);
			Status = VL53L0X_WrByte(Dev,
 8009abc:	2208      	movs	r2, #8
 8009abe:	2156      	movs	r1, #86	; 0x56
 8009ac0:	6878      	ldr	r0, [r7, #4]
 8009ac2:	f001 fb09 	bl	800b0d8 <VL53L0X_WrByte>
 8009ac6:	4603      	mov	r3, r0
 8009ac8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8009acc:	e17f      	b.n	8009dce <VL53L0X_set_vcsel_pulse_period+0x3c4>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		} else if (VCSELPulsePeriodPCLK == 14) {
 8009ace:	78bb      	ldrb	r3, [r7, #2]
 8009ad0:	2b0e      	cmp	r3, #14
 8009ad2:	d110      	bne.n	8009af6 <VL53L0X_set_vcsel_pulse_period+0xec>

			Status = VL53L0X_WrByte(Dev,
 8009ad4:	2230      	movs	r2, #48	; 0x30
 8009ad6:	2157      	movs	r1, #87	; 0x57
 8009ad8:	6878      	ldr	r0, [r7, #4]
 8009ada:	f001 fafd 	bl	800b0d8 <VL53L0X_WrByte>
 8009ade:	4603      	mov	r3, r0
 8009ae0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x30);
			Status = VL53L0X_WrByte(Dev,
 8009ae4:	2208      	movs	r2, #8
 8009ae6:	2156      	movs	r1, #86	; 0x56
 8009ae8:	6878      	ldr	r0, [r7, #4]
 8009aea:	f001 faf5 	bl	800b0d8 <VL53L0X_WrByte>
 8009aee:	4603      	mov	r3, r0
 8009af0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8009af4:	e16b      	b.n	8009dce <VL53L0X_set_vcsel_pulse_period+0x3c4>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		} else if (VCSELPulsePeriodPCLK == 16) {
 8009af6:	78bb      	ldrb	r3, [r7, #2]
 8009af8:	2b10      	cmp	r3, #16
 8009afa:	d110      	bne.n	8009b1e <VL53L0X_set_vcsel_pulse_period+0x114>

			Status = VL53L0X_WrByte(Dev,
 8009afc:	2240      	movs	r2, #64	; 0x40
 8009afe:	2157      	movs	r1, #87	; 0x57
 8009b00:	6878      	ldr	r0, [r7, #4]
 8009b02:	f001 fae9 	bl	800b0d8 <VL53L0X_WrByte>
 8009b06:	4603      	mov	r3, r0
 8009b08:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x40);
			Status = VL53L0X_WrByte(Dev,
 8009b0c:	2208      	movs	r2, #8
 8009b0e:	2156      	movs	r1, #86	; 0x56
 8009b10:	6878      	ldr	r0, [r7, #4]
 8009b12:	f001 fae1 	bl	800b0d8 <VL53L0X_WrByte>
 8009b16:	4603      	mov	r3, r0
 8009b18:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8009b1c:	e157      	b.n	8009dce <VL53L0X_set_vcsel_pulse_period+0x3c4>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		} else if (VCSELPulsePeriodPCLK == 18) {
 8009b1e:	78bb      	ldrb	r3, [r7, #2]
 8009b20:	2b12      	cmp	r3, #18
 8009b22:	f040 8154 	bne.w	8009dce <VL53L0X_set_vcsel_pulse_period+0x3c4>

			Status = VL53L0X_WrByte(Dev,
 8009b26:	2250      	movs	r2, #80	; 0x50
 8009b28:	2157      	movs	r1, #87	; 0x57
 8009b2a:	6878      	ldr	r0, [r7, #4]
 8009b2c:	f001 fad4 	bl	800b0d8 <VL53L0X_WrByte>
 8009b30:	4603      	mov	r3, r0
 8009b32:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x50);
			Status = VL53L0X_WrByte(Dev,
 8009b36:	2208      	movs	r2, #8
 8009b38:	2156      	movs	r1, #86	; 0x56
 8009b3a:	6878      	ldr	r0, [r7, #4]
 8009b3c:	f001 facc 	bl	800b0d8 <VL53L0X_WrByte>
 8009b40:	4603      	mov	r3, r0
 8009b42:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8009b46:	e142      	b.n	8009dce <VL53L0X_set_vcsel_pulse_period+0x3c4>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		}
	} else if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_FINAL_RANGE) {
 8009b48:	78fb      	ldrb	r3, [r7, #3]
 8009b4a:	2b01      	cmp	r3, #1
 8009b4c:	f040 813f 	bne.w	8009dce <VL53L0X_set_vcsel_pulse_period+0x3c4>

		if (VCSELPulsePeriodPCLK == 8) {
 8009b50:	78bb      	ldrb	r3, [r7, #2]
 8009b52:	2b08      	cmp	r3, #8
 8009b54:	d14c      	bne.n	8009bf0 <VL53L0X_set_vcsel_pulse_period+0x1e6>

			Status = VL53L0X_WrByte(Dev,
 8009b56:	2210      	movs	r2, #16
 8009b58:	2148      	movs	r1, #72	; 0x48
 8009b5a:	6878      	ldr	r0, [r7, #4]
 8009b5c:	f001 fabc 	bl	800b0d8 <VL53L0X_WrByte>
 8009b60:	4603      	mov	r3, r0
 8009b62:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x10);
			Status = VL53L0X_WrByte(Dev,
 8009b66:	2208      	movs	r2, #8
 8009b68:	2147      	movs	r1, #71	; 0x47
 8009b6a:	6878      	ldr	r0, [r7, #4]
 8009b6c:	f001 fab4 	bl	800b0d8 <VL53L0X_WrByte>
 8009b70:	4603      	mov	r3, r0
 8009b72:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);

			Status |= VL53L0X_WrByte(Dev,
 8009b76:	2202      	movs	r2, #2
 8009b78:	2132      	movs	r1, #50	; 0x32
 8009b7a:	6878      	ldr	r0, [r7, #4]
 8009b7c:	f001 faac 	bl	800b0d8 <VL53L0X_WrByte>
 8009b80:	4603      	mov	r3, r0
 8009b82:	461a      	mov	r2, r3
 8009b84:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009b88:	4313      	orrs	r3, r2
 8009b8a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x02);
			Status |= VL53L0X_WrByte(Dev,
 8009b8e:	220c      	movs	r2, #12
 8009b90:	2130      	movs	r1, #48	; 0x30
 8009b92:	6878      	ldr	r0, [r7, #4]
 8009b94:	f001 faa0 	bl	800b0d8 <VL53L0X_WrByte>
 8009b98:	4603      	mov	r3, r0
 8009b9a:	461a      	mov	r2, r3
 8009b9c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009ba0:	4313      	orrs	r3, r2
 8009ba2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x0C);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 8009ba6:	2201      	movs	r2, #1
 8009ba8:	21ff      	movs	r1, #255	; 0xff
 8009baa:	6878      	ldr	r0, [r7, #4]
 8009bac:	f001 fa94 	bl	800b0d8 <VL53L0X_WrByte>
 8009bb0:	4603      	mov	r3, r0
 8009bb2:	461a      	mov	r2, r3
 8009bb4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009bb8:	4313      	orrs	r3, r2
 8009bba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Status |= VL53L0X_WrByte(Dev,
 8009bbe:	2230      	movs	r2, #48	; 0x30
 8009bc0:	2130      	movs	r1, #48	; 0x30
 8009bc2:	6878      	ldr	r0, [r7, #4]
 8009bc4:	f001 fa88 	bl	800b0d8 <VL53L0X_WrByte>
 8009bc8:	4603      	mov	r3, r0
 8009bca:	461a      	mov	r2, r3
 8009bcc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009bd0:	4313      	orrs	r3, r2
 8009bd2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x30);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 8009bd6:	2200      	movs	r2, #0
 8009bd8:	21ff      	movs	r1, #255	; 0xff
 8009bda:	6878      	ldr	r0, [r7, #4]
 8009bdc:	f001 fa7c 	bl	800b0d8 <VL53L0X_WrByte>
 8009be0:	4603      	mov	r3, r0
 8009be2:	461a      	mov	r2, r3
 8009be4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009be8:	4313      	orrs	r3, r2
 8009bea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8009bee:	e0ee      	b.n	8009dce <VL53L0X_set_vcsel_pulse_period+0x3c4>
		} else if (VCSELPulsePeriodPCLK == 10) {
 8009bf0:	78bb      	ldrb	r3, [r7, #2]
 8009bf2:	2b0a      	cmp	r3, #10
 8009bf4:	d14c      	bne.n	8009c90 <VL53L0X_set_vcsel_pulse_period+0x286>

			Status = VL53L0X_WrByte(Dev,
 8009bf6:	2228      	movs	r2, #40	; 0x28
 8009bf8:	2148      	movs	r1, #72	; 0x48
 8009bfa:	6878      	ldr	r0, [r7, #4]
 8009bfc:	f001 fa6c 	bl	800b0d8 <VL53L0X_WrByte>
 8009c00:	4603      	mov	r3, r0
 8009c02:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x28);
			Status = VL53L0X_WrByte(Dev,
 8009c06:	2208      	movs	r2, #8
 8009c08:	2147      	movs	r1, #71	; 0x47
 8009c0a:	6878      	ldr	r0, [r7, #4]
 8009c0c:	f001 fa64 	bl	800b0d8 <VL53L0X_WrByte>
 8009c10:	4603      	mov	r3, r0
 8009c12:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);

			Status |= VL53L0X_WrByte(Dev,
 8009c16:	2203      	movs	r2, #3
 8009c18:	2132      	movs	r1, #50	; 0x32
 8009c1a:	6878      	ldr	r0, [r7, #4]
 8009c1c:	f001 fa5c 	bl	800b0d8 <VL53L0X_WrByte>
 8009c20:	4603      	mov	r3, r0
 8009c22:	461a      	mov	r2, r3
 8009c24:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009c28:	4313      	orrs	r3, r2
 8009c2a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x03);
			Status |= VL53L0X_WrByte(Dev,
 8009c2e:	2209      	movs	r2, #9
 8009c30:	2130      	movs	r1, #48	; 0x30
 8009c32:	6878      	ldr	r0, [r7, #4]
 8009c34:	f001 fa50 	bl	800b0d8 <VL53L0X_WrByte>
 8009c38:	4603      	mov	r3, r0
 8009c3a:	461a      	mov	r2, r3
 8009c3c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009c40:	4313      	orrs	r3, r2
 8009c42:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x09);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 8009c46:	2201      	movs	r2, #1
 8009c48:	21ff      	movs	r1, #255	; 0xff
 8009c4a:	6878      	ldr	r0, [r7, #4]
 8009c4c:	f001 fa44 	bl	800b0d8 <VL53L0X_WrByte>
 8009c50:	4603      	mov	r3, r0
 8009c52:	461a      	mov	r2, r3
 8009c54:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009c58:	4313      	orrs	r3, r2
 8009c5a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Status |= VL53L0X_WrByte(Dev,
 8009c5e:	2220      	movs	r2, #32
 8009c60:	2130      	movs	r1, #48	; 0x30
 8009c62:	6878      	ldr	r0, [r7, #4]
 8009c64:	f001 fa38 	bl	800b0d8 <VL53L0X_WrByte>
 8009c68:	4603      	mov	r3, r0
 8009c6a:	461a      	mov	r2, r3
 8009c6c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009c70:	4313      	orrs	r3, r2
 8009c72:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x20);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 8009c76:	2200      	movs	r2, #0
 8009c78:	21ff      	movs	r1, #255	; 0xff
 8009c7a:	6878      	ldr	r0, [r7, #4]
 8009c7c:	f001 fa2c 	bl	800b0d8 <VL53L0X_WrByte>
 8009c80:	4603      	mov	r3, r0
 8009c82:	461a      	mov	r2, r3
 8009c84:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009c88:	4313      	orrs	r3, r2
 8009c8a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8009c8e:	e09e      	b.n	8009dce <VL53L0X_set_vcsel_pulse_period+0x3c4>
		} else if (VCSELPulsePeriodPCLK == 12) {
 8009c90:	78bb      	ldrb	r3, [r7, #2]
 8009c92:	2b0c      	cmp	r3, #12
 8009c94:	d14c      	bne.n	8009d30 <VL53L0X_set_vcsel_pulse_period+0x326>

			Status = VL53L0X_WrByte(Dev,
 8009c96:	2238      	movs	r2, #56	; 0x38
 8009c98:	2148      	movs	r1, #72	; 0x48
 8009c9a:	6878      	ldr	r0, [r7, #4]
 8009c9c:	f001 fa1c 	bl	800b0d8 <VL53L0X_WrByte>
 8009ca0:	4603      	mov	r3, r0
 8009ca2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x38);
			Status = VL53L0X_WrByte(Dev,
 8009ca6:	2208      	movs	r2, #8
 8009ca8:	2147      	movs	r1, #71	; 0x47
 8009caa:	6878      	ldr	r0, [r7, #4]
 8009cac:	f001 fa14 	bl	800b0d8 <VL53L0X_WrByte>
 8009cb0:	4603      	mov	r3, r0
 8009cb2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);

			Status |= VL53L0X_WrByte(Dev,
 8009cb6:	2203      	movs	r2, #3
 8009cb8:	2132      	movs	r1, #50	; 0x32
 8009cba:	6878      	ldr	r0, [r7, #4]
 8009cbc:	f001 fa0c 	bl	800b0d8 <VL53L0X_WrByte>
 8009cc0:	4603      	mov	r3, r0
 8009cc2:	461a      	mov	r2, r3
 8009cc4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009cc8:	4313      	orrs	r3, r2
 8009cca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x03);
			Status |= VL53L0X_WrByte(Dev,
 8009cce:	2208      	movs	r2, #8
 8009cd0:	2130      	movs	r1, #48	; 0x30
 8009cd2:	6878      	ldr	r0, [r7, #4]
 8009cd4:	f001 fa00 	bl	800b0d8 <VL53L0X_WrByte>
 8009cd8:	4603      	mov	r3, r0
 8009cda:	461a      	mov	r2, r3
 8009cdc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009ce0:	4313      	orrs	r3, r2
 8009ce2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x08);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 8009ce6:	2201      	movs	r2, #1
 8009ce8:	21ff      	movs	r1, #255	; 0xff
 8009cea:	6878      	ldr	r0, [r7, #4]
 8009cec:	f001 f9f4 	bl	800b0d8 <VL53L0X_WrByte>
 8009cf0:	4603      	mov	r3, r0
 8009cf2:	461a      	mov	r2, r3
 8009cf4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009cf8:	4313      	orrs	r3, r2
 8009cfa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Status |= VL53L0X_WrByte(Dev,
 8009cfe:	2220      	movs	r2, #32
 8009d00:	2130      	movs	r1, #48	; 0x30
 8009d02:	6878      	ldr	r0, [r7, #4]
 8009d04:	f001 f9e8 	bl	800b0d8 <VL53L0X_WrByte>
 8009d08:	4603      	mov	r3, r0
 8009d0a:	461a      	mov	r2, r3
 8009d0c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009d10:	4313      	orrs	r3, r2
 8009d12:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x20);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 8009d16:	2200      	movs	r2, #0
 8009d18:	21ff      	movs	r1, #255	; 0xff
 8009d1a:	6878      	ldr	r0, [r7, #4]
 8009d1c:	f001 f9dc 	bl	800b0d8 <VL53L0X_WrByte>
 8009d20:	4603      	mov	r3, r0
 8009d22:	461a      	mov	r2, r3
 8009d24:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009d28:	4313      	orrs	r3, r2
 8009d2a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8009d2e:	e04e      	b.n	8009dce <VL53L0X_set_vcsel_pulse_period+0x3c4>
		} else if (VCSELPulsePeriodPCLK == 14) {
 8009d30:	78bb      	ldrb	r3, [r7, #2]
 8009d32:	2b0e      	cmp	r3, #14
 8009d34:	d14b      	bne.n	8009dce <VL53L0X_set_vcsel_pulse_period+0x3c4>

			Status = VL53L0X_WrByte(Dev,
 8009d36:	2248      	movs	r2, #72	; 0x48
 8009d38:	2148      	movs	r1, #72	; 0x48
 8009d3a:	6878      	ldr	r0, [r7, #4]
 8009d3c:	f001 f9cc 	bl	800b0d8 <VL53L0X_WrByte>
 8009d40:	4603      	mov	r3, r0
 8009d42:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x048);
			Status = VL53L0X_WrByte(Dev,
 8009d46:	2208      	movs	r2, #8
 8009d48:	2147      	movs	r1, #71	; 0x47
 8009d4a:	6878      	ldr	r0, [r7, #4]
 8009d4c:	f001 f9c4 	bl	800b0d8 <VL53L0X_WrByte>
 8009d50:	4603      	mov	r3, r0
 8009d52:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);

			Status |= VL53L0X_WrByte(Dev,
 8009d56:	2203      	movs	r2, #3
 8009d58:	2132      	movs	r1, #50	; 0x32
 8009d5a:	6878      	ldr	r0, [r7, #4]
 8009d5c:	f001 f9bc 	bl	800b0d8 <VL53L0X_WrByte>
 8009d60:	4603      	mov	r3, r0
 8009d62:	461a      	mov	r2, r3
 8009d64:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009d68:	4313      	orrs	r3, r2
 8009d6a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x03);
			Status |= VL53L0X_WrByte(Dev,
 8009d6e:	2207      	movs	r2, #7
 8009d70:	2130      	movs	r1, #48	; 0x30
 8009d72:	6878      	ldr	r0, [r7, #4]
 8009d74:	f001 f9b0 	bl	800b0d8 <VL53L0X_WrByte>
 8009d78:	4603      	mov	r3, r0
 8009d7a:	461a      	mov	r2, r3
 8009d7c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009d80:	4313      	orrs	r3, r2
 8009d82:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x07);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 8009d86:	2201      	movs	r2, #1
 8009d88:	21ff      	movs	r1, #255	; 0xff
 8009d8a:	6878      	ldr	r0, [r7, #4]
 8009d8c:	f001 f9a4 	bl	800b0d8 <VL53L0X_WrByte>
 8009d90:	4603      	mov	r3, r0
 8009d92:	461a      	mov	r2, r3
 8009d94:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009d98:	4313      	orrs	r3, r2
 8009d9a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Status |= VL53L0X_WrByte(Dev,
 8009d9e:	2220      	movs	r2, #32
 8009da0:	2130      	movs	r1, #48	; 0x30
 8009da2:	6878      	ldr	r0, [r7, #4]
 8009da4:	f001 f998 	bl	800b0d8 <VL53L0X_WrByte>
 8009da8:	4603      	mov	r3, r0
 8009daa:	461a      	mov	r2, r3
 8009dac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009db0:	4313      	orrs	r3, r2
 8009db2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x20);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 8009db6:	2200      	movs	r2, #0
 8009db8:	21ff      	movs	r1, #255	; 0xff
 8009dba:	6878      	ldr	r0, [r7, #4]
 8009dbc:	f001 f98c 	bl	800b0d8 <VL53L0X_WrByte>
 8009dc0:	4603      	mov	r3, r0
 8009dc2:	461a      	mov	r2, r3
 8009dc4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009dc8:	4313      	orrs	r3, r2
 8009dca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}


	/* Re-calculate and apply timeouts, in macro periods */

	if (Status == VL53L0X_ERROR_NONE) {
 8009dce:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009dd2:	2b00      	cmp	r3, #0
 8009dd4:	d17f      	bne.n	8009ed6 <VL53L0X_set_vcsel_pulse_period+0x4cc>
		vcsel_period_reg = VL53L0X_encode_vcsel_period((uint8_t)
 8009dd6:	78bb      	ldrb	r3, [r7, #2]
 8009dd8:	4618      	mov	r0, r3
 8009dda:	f7fe fe38 	bl	8008a4e <VL53L0X_encode_vcsel_period>
 8009dde:	4603      	mov	r3, r0
 8009de0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
		* using the new VCSEL period.
		*
		* For the MSRC timeout, the same applies - this timeout being
		* dependant on the pre-range vcsel period.
		*/
		switch (VcselPeriodType) {
 8009de4:	78fb      	ldrb	r3, [r7, #3]
 8009de6:	2b00      	cmp	r3, #0
 8009de8:	d002      	beq.n	8009df0 <VL53L0X_set_vcsel_pulse_period+0x3e6>
 8009dea:	2b01      	cmp	r3, #1
 8009dec:	d045      	beq.n	8009e7a <VL53L0X_set_vcsel_pulse_period+0x470>
 8009dee:	e06e      	b.n	8009ece <VL53L0X_set_vcsel_pulse_period+0x4c4>
		case VL53L0X_VCSEL_PERIOD_PRE_RANGE:
			Status = get_sequence_step_timeout(Dev,
 8009df0:	f107 0314 	add.w	r3, r7, #20
 8009df4:	461a      	mov	r2, r3
 8009df6:	2103      	movs	r1, #3
 8009df8:	6878      	ldr	r0, [r7, #4]
 8009dfa:	f7ff fc33 	bl	8009664 <get_sequence_step_timeout>
 8009dfe:	4603      	mov	r3, r0
 8009e00:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_SEQUENCESTEP_PRE_RANGE,
				&PreRangeTimeoutMicroSeconds);

			if (Status == VL53L0X_ERROR_NONE)
 8009e04:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009e08:	2b00      	cmp	r3, #0
 8009e0a:	d109      	bne.n	8009e20 <VL53L0X_set_vcsel_pulse_period+0x416>
				Status = get_sequence_step_timeout(Dev,
 8009e0c:	f107 0310 	add.w	r3, r7, #16
 8009e10:	461a      	mov	r2, r3
 8009e12:	2102      	movs	r1, #2
 8009e14:	6878      	ldr	r0, [r7, #4]
 8009e16:	f7ff fc25 	bl	8009664 <get_sequence_step_timeout>
 8009e1a:	4603      	mov	r3, r0
 8009e1c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_SEQUENCESTEP_MSRC,
					&MsrcTimeoutMicroSeconds);

			if (Status == VL53L0X_ERROR_NONE)
 8009e20:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009e24:	2b00      	cmp	r3, #0
 8009e26:	d109      	bne.n	8009e3c <VL53L0X_set_vcsel_pulse_period+0x432>
				Status = VL53L0X_WrByte(Dev,
 8009e28:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8009e2c:	461a      	mov	r2, r3
 8009e2e:	2150      	movs	r1, #80	; 0x50
 8009e30:	6878      	ldr	r0, [r7, #4]
 8009e32:	f001 f951 	bl	800b0d8 <VL53L0X_WrByte>
 8009e36:	4603      	mov	r3, r0
 8009e38:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VCSEL_PERIOD,
					vcsel_period_reg);


			if (Status == VL53L0X_ERROR_NONE)
 8009e3c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009e40:	2b00      	cmp	r3, #0
 8009e42:	d108      	bne.n	8009e56 <VL53L0X_set_vcsel_pulse_period+0x44c>
				Status = set_sequence_step_timeout(Dev,
 8009e44:	697b      	ldr	r3, [r7, #20]
 8009e46:	461a      	mov	r2, r3
 8009e48:	2103      	movs	r1, #3
 8009e4a:	6878      	ldr	r0, [r7, #4]
 8009e4c:	f7ff fceb 	bl	8009826 <set_sequence_step_timeout>
 8009e50:	4603      	mov	r3, r0
 8009e52:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_SEQUENCESTEP_PRE_RANGE,
					PreRangeTimeoutMicroSeconds);


			if (Status == VL53L0X_ERROR_NONE)
 8009e56:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009e5a:	2b00      	cmp	r3, #0
 8009e5c:	d108      	bne.n	8009e70 <VL53L0X_set_vcsel_pulse_period+0x466>
				Status = set_sequence_step_timeout(Dev,
 8009e5e:	693b      	ldr	r3, [r7, #16]
 8009e60:	461a      	mov	r2, r3
 8009e62:	2102      	movs	r1, #2
 8009e64:	6878      	ldr	r0, [r7, #4]
 8009e66:	f7ff fcde 	bl	8009826 <set_sequence_step_timeout>
 8009e6a:	4603      	mov	r3, r0
 8009e6c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_SEQUENCESTEP_MSRC,
					MsrcTimeoutMicroSeconds);

			VL53L0X_SETDEVICESPECIFICPARAMETER(
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	78ba      	ldrb	r2, [r7, #2]
 8009e74:	f883 20e8 	strb.w	r2, [r3, #232]	; 0xe8
				Dev,
				PreRangeVcselPulsePeriod,
				VCSELPulsePeriodPCLK);
			break;
 8009e78:	e02e      	b.n	8009ed8 <VL53L0X_set_vcsel_pulse_period+0x4ce>
		case VL53L0X_VCSEL_PERIOD_FINAL_RANGE:
			Status = get_sequence_step_timeout(Dev,
 8009e7a:	f107 0318 	add.w	r3, r7, #24
 8009e7e:	461a      	mov	r2, r3
 8009e80:	2104      	movs	r1, #4
 8009e82:	6878      	ldr	r0, [r7, #4]
 8009e84:	f7ff fbee 	bl	8009664 <get_sequence_step_timeout>
 8009e88:	4603      	mov	r3, r0
 8009e8a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_SEQUENCESTEP_FINAL_RANGE,
				&FinalRangeTimeoutMicroSeconds);

			if (Status == VL53L0X_ERROR_NONE)
 8009e8e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009e92:	2b00      	cmp	r3, #0
 8009e94:	d109      	bne.n	8009eaa <VL53L0X_set_vcsel_pulse_period+0x4a0>
				Status = VL53L0X_WrByte(Dev,
 8009e96:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8009e9a:	461a      	mov	r2, r3
 8009e9c:	2170      	movs	r1, #112	; 0x70
 8009e9e:	6878      	ldr	r0, [r7, #4]
 8009ea0:	f001 f91a 	bl	800b0d8 <VL53L0X_WrByte>
 8009ea4:	4603      	mov	r3, r0
 8009ea6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VCSEL_PERIOD,
					vcsel_period_reg);


			if (Status == VL53L0X_ERROR_NONE)
 8009eaa:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009eae:	2b00      	cmp	r3, #0
 8009eb0:	d108      	bne.n	8009ec4 <VL53L0X_set_vcsel_pulse_period+0x4ba>
				Status = set_sequence_step_timeout(Dev,
 8009eb2:	69bb      	ldr	r3, [r7, #24]
 8009eb4:	461a      	mov	r2, r3
 8009eb6:	2104      	movs	r1, #4
 8009eb8:	6878      	ldr	r0, [r7, #4]
 8009eba:	f7ff fcb4 	bl	8009826 <set_sequence_step_timeout>
 8009ebe:	4603      	mov	r3, r0
 8009ec0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_SEQUENCESTEP_FINAL_RANGE,
					FinalRangeTimeoutMicroSeconds);

			VL53L0X_SETDEVICESPECIFICPARAMETER(
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	78ba      	ldrb	r2, [r7, #2]
 8009ec8:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
				Dev,
				FinalRangeVcselPulsePeriod,
				VCSELPulsePeriodPCLK);
			break;
 8009ecc:	e004      	b.n	8009ed8 <VL53L0X_set_vcsel_pulse_period+0x4ce>
		default:
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 8009ece:	23fc      	movs	r3, #252	; 0xfc
 8009ed0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8009ed4:	e000      	b.n	8009ed8 <VL53L0X_set_vcsel_pulse_period+0x4ce>
		}
	}
 8009ed6:	bf00      	nop

	/* Finally, the timing budget must be re-applied */
	if (Status == VL53L0X_ERROR_NONE) {
 8009ed8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009edc:	2b00      	cmp	r3, #0
 8009ede:	d109      	bne.n	8009ef4 <VL53L0X_set_vcsel_pulse_period+0x4ea>
		VL53L0X_GETPARAMETERFIELD(Dev,
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	695b      	ldr	r3, [r3, #20]
 8009ee4:	61fb      	str	r3, [r7, #28]
			MeasurementTimingBudgetMicroSeconds,
			MeasurementTimingBudgetMicroSeconds);

		Status = VL53L0X_SetMeasurementTimingBudgetMicroSeconds(Dev,
 8009ee6:	69f9      	ldr	r1, [r7, #28]
 8009ee8:	6878      	ldr	r0, [r7, #4]
 8009eea:	f7fc fe1d 	bl	8006b28 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>
 8009eee:	4603      	mov	r3, r0
 8009ef0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	/* Perform the phase calibration. This is needed after changing on
	 * vcsel period.
	 * get_data_enable = 0, restore_config = 1 */
	if (Status == VL53L0X_ERROR_NONE)
 8009ef4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009ef8:	2b00      	cmp	r3, #0
 8009efa:	d109      	bne.n	8009f10 <VL53L0X_set_vcsel_pulse_period+0x506>
		Status = VL53L0X_perform_phase_calibration(
 8009efc:	f107 010f 	add.w	r1, r7, #15
 8009f00:	2301      	movs	r3, #1
 8009f02:	2200      	movs	r2, #0
 8009f04:	6878      	ldr	r0, [r7, #4]
 8009f06:	f7fe fcbd 	bl	8008884 <VL53L0X_perform_phase_calibration>
 8009f0a:	4603      	mov	r3, r0
 8009f0c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Dev, &PhaseCalInt, 0, 1);

	return Status;
 8009f10:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8009f14:	4618      	mov	r0, r3
 8009f16:	3728      	adds	r7, #40	; 0x28
 8009f18:	46bd      	mov	sp, r7
 8009f1a:	bd80      	pop	{r7, pc}

08009f1c <VL53L0X_get_vcsel_pulse_period>:

VL53L0X_Error VL53L0X_get_vcsel_pulse_period(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t *pVCSELPulsePeriodPCLK)
{
 8009f1c:	b580      	push	{r7, lr}
 8009f1e:	b086      	sub	sp, #24
 8009f20:	af00      	add	r7, sp, #0
 8009f22:	60f8      	str	r0, [r7, #12]
 8009f24:	460b      	mov	r3, r1
 8009f26:	607a      	str	r2, [r7, #4]
 8009f28:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009f2a:	2300      	movs	r3, #0
 8009f2c:	75fb      	strb	r3, [r7, #23]
	uint8_t vcsel_period_reg;

	switch (VcselPeriodType) {
 8009f2e:	7afb      	ldrb	r3, [r7, #11]
 8009f30:	2b00      	cmp	r3, #0
 8009f32:	d002      	beq.n	8009f3a <VL53L0X_get_vcsel_pulse_period+0x1e>
 8009f34:	2b01      	cmp	r3, #1
 8009f36:	d00a      	beq.n	8009f4e <VL53L0X_get_vcsel_pulse_period+0x32>
 8009f38:	e013      	b.n	8009f62 <VL53L0X_get_vcsel_pulse_period+0x46>
	case VL53L0X_VCSEL_PERIOD_PRE_RANGE:
		Status = VL53L0X_RdByte(Dev,
 8009f3a:	f107 0316 	add.w	r3, r7, #22
 8009f3e:	461a      	mov	r2, r3
 8009f40:	2150      	movs	r1, #80	; 0x50
 8009f42:	68f8      	ldr	r0, [r7, #12]
 8009f44:	f001 f94a 	bl	800b1dc <VL53L0X_RdByte>
 8009f48:	4603      	mov	r3, r0
 8009f4a:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_PRE_RANGE_CONFIG_VCSEL_PERIOD,
			&vcsel_period_reg);
	break;
 8009f4c:	e00b      	b.n	8009f66 <VL53L0X_get_vcsel_pulse_period+0x4a>
	case VL53L0X_VCSEL_PERIOD_FINAL_RANGE:
		Status = VL53L0X_RdByte(Dev,
 8009f4e:	f107 0316 	add.w	r3, r7, #22
 8009f52:	461a      	mov	r2, r3
 8009f54:	2170      	movs	r1, #112	; 0x70
 8009f56:	68f8      	ldr	r0, [r7, #12]
 8009f58:	f001 f940 	bl	800b1dc <VL53L0X_RdByte>
 8009f5c:	4603      	mov	r3, r0
 8009f5e:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_FINAL_RANGE_CONFIG_VCSEL_PERIOD,
			&vcsel_period_reg);
	break;
 8009f60:	e001      	b.n	8009f66 <VL53L0X_get_vcsel_pulse_period+0x4a>
	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8009f62:	23fc      	movs	r3, #252	; 0xfc
 8009f64:	75fb      	strb	r3, [r7, #23]
	}

	if (Status == VL53L0X_ERROR_NONE)
 8009f66:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009f6a:	2b00      	cmp	r3, #0
 8009f6c:	d107      	bne.n	8009f7e <VL53L0X_get_vcsel_pulse_period+0x62>
		*pVCSELPulsePeriodPCLK =
			VL53L0X_decode_vcsel_period(vcsel_period_reg);
 8009f6e:	7dbb      	ldrb	r3, [r7, #22]
 8009f70:	4618      	mov	r0, r3
 8009f72:	f7fe fd59 	bl	8008a28 <VL53L0X_decode_vcsel_period>
 8009f76:	4603      	mov	r3, r0
 8009f78:	461a      	mov	r2, r3
		*pVCSELPulsePeriodPCLK =
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	701a      	strb	r2, [r3, #0]

	return Status;
 8009f7e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009f82:	4618      	mov	r0, r3
 8009f84:	3718      	adds	r7, #24
 8009f86:	46bd      	mov	sp, r7
 8009f88:	bd80      	pop	{r7, pc}

08009f8a <VL53L0X_set_measurement_timing_budget_micro_seconds>:



VL53L0X_Error VL53L0X_set_measurement_timing_budget_micro_seconds(VL53L0X_DEV Dev,
		uint32_t MeasurementTimingBudgetMicroSeconds)
{
 8009f8a:	b580      	push	{r7, lr}
 8009f8c:	b092      	sub	sp, #72	; 0x48
 8009f8e:	af00      	add	r7, sp, #0
 8009f90:	6078      	str	r0, [r7, #4]
 8009f92:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009f94:	2300      	movs	r3, #0
 8009f96:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	uint32_t FinalRangeTimingBudgetMicroSeconds;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;
	uint32_t MsrcDccTccTimeoutMicroSeconds	= 2000;
 8009f9a:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8009f9e:	613b      	str	r3, [r7, #16]
	uint32_t StartOverheadMicroSeconds		= 1910;
 8009fa0:	f240 7376 	movw	r3, #1910	; 0x776
 8009fa4:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint32_t EndOverheadMicroSeconds		= 960;
 8009fa6:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8009faa:	63bb      	str	r3, [r7, #56]	; 0x38
	uint32_t MsrcOverheadMicroSeconds		= 660;
 8009fac:	f44f 7325 	mov.w	r3, #660	; 0x294
 8009fb0:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t TccOverheadMicroSeconds		= 590;
 8009fb2:	f240 234e 	movw	r3, #590	; 0x24e
 8009fb6:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t DssOverheadMicroSeconds		= 690;
 8009fb8:	f240 23b2 	movw	r3, #690	; 0x2b2
 8009fbc:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t PreRangeOverheadMicroSeconds	= 660;
 8009fbe:	f44f 7325 	mov.w	r3, #660	; 0x294
 8009fc2:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t FinalRangeOverheadMicroSeconds = 550;
 8009fc4:	f240 2326 	movw	r3, #550	; 0x226
 8009fc8:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t PreRangeTimeoutMicroSeconds	= 0;
 8009fca:	2300      	movs	r3, #0
 8009fcc:	60fb      	str	r3, [r7, #12]
	uint32_t cMinTimingBudgetMicroSeconds	= 20000;
 8009fce:	f644 6320 	movw	r3, #20000	; 0x4e20
 8009fd2:	623b      	str	r3, [r7, #32]
	uint32_t SubTimeout = 0;
 8009fd4:	2300      	movs	r3, #0
 8009fd6:	61fb      	str	r3, [r7, #28]

	LOG_FUNCTION_START("");

	if (MeasurementTimingBudgetMicroSeconds
 8009fd8:	683a      	ldr	r2, [r7, #0]
 8009fda:	6a3b      	ldr	r3, [r7, #32]
 8009fdc:	429a      	cmp	r2, r3
 8009fde:	d205      	bcs.n	8009fec <VL53L0X_set_measurement_timing_budget_micro_seconds+0x62>
			< cMinTimingBudgetMicroSeconds) {
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8009fe0:	23fc      	movs	r3, #252	; 0xfc
 8009fe2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		return Status;
 8009fe6:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8009fea:	e0aa      	b.n	800a142 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>
	}

	FinalRangeTimingBudgetMicroSeconds =
		MeasurementTimingBudgetMicroSeconds -
		(StartOverheadMicroSeconds + EndOverheadMicroSeconds);
 8009fec:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8009fee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ff0:	4413      	add	r3, r2
	FinalRangeTimingBudgetMicroSeconds =
 8009ff2:	683a      	ldr	r2, [r7, #0]
 8009ff4:	1ad3      	subs	r3, r2, r3
 8009ff6:	643b      	str	r3, [r7, #64]	; 0x40

	Status = VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 8009ff8:	f107 0314 	add.w	r3, r7, #20
 8009ffc:	4619      	mov	r1, r3
 8009ffe:	6878      	ldr	r0, [r7, #4]
 800a000:	f7fc fedc 	bl	8006dbc <VL53L0X_GetSequenceStepEnables>
 800a004:	4603      	mov	r3, r0
 800a006:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

	if (Status == VL53L0X_ERROR_NONE &&
 800a00a:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800a00e:	2b00      	cmp	r3, #0
 800a010:	d15b      	bne.n	800a0ca <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
		(SchedulerSequenceSteps.TccOn  ||
 800a012:	7d3b      	ldrb	r3, [r7, #20]
	if (Status == VL53L0X_ERROR_NONE &&
 800a014:	2b00      	cmp	r3, #0
 800a016:	d105      	bne.n	800a024 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x9a>
		SchedulerSequenceSteps.MsrcOn ||
 800a018:	7d7b      	ldrb	r3, [r7, #21]
		(SchedulerSequenceSteps.TccOn  ||
 800a01a:	2b00      	cmp	r3, #0
 800a01c:	d102      	bne.n	800a024 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x9a>
		SchedulerSequenceSteps.DssOn)) {
 800a01e:	7dbb      	ldrb	r3, [r7, #22]
		SchedulerSequenceSteps.MsrcOn ||
 800a020:	2b00      	cmp	r3, #0
 800a022:	d052      	beq.n	800a0ca <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>

		/* TCC, MSRC and DSS all share the same timeout */
		Status = get_sequence_step_timeout(Dev,
 800a024:	f107 0310 	add.w	r3, r7, #16
 800a028:	461a      	mov	r2, r3
 800a02a:	2102      	movs	r1, #2
 800a02c:	6878      	ldr	r0, [r7, #4]
 800a02e:	f7ff fb19 	bl	8009664 <get_sequence_step_timeout>
 800a032:	4603      	mov	r3, r0
 800a034:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					&MsrcDccTccTimeoutMicroSeconds);

		/* Subtract the TCC, MSRC and DSS timeouts if they are
		 * enabled. */

		if (Status != VL53L0X_ERROR_NONE)
 800a038:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800a03c:	2b00      	cmp	r3, #0
 800a03e:	d002      	beq.n	800a046 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xbc>
			return Status;
 800a040:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800a044:	e07d      	b.n	800a142 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>

		/* TCC */
		if (SchedulerSequenceSteps.TccOn) {
 800a046:	7d3b      	ldrb	r3, [r7, #20]
 800a048:	2b00      	cmp	r3, #0
 800a04a:	d00f      	beq.n	800a06c <VL53L0X_set_measurement_timing_budget_micro_seconds+0xe2>

			SubTimeout = MsrcDccTccTimeoutMicroSeconds
				+ TccOverheadMicroSeconds;
 800a04c:	693b      	ldr	r3, [r7, #16]
			SubTimeout = MsrcDccTccTimeoutMicroSeconds
 800a04e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a050:	4413      	add	r3, r2
 800a052:	61fb      	str	r3, [r7, #28]

			if (SubTimeout <
 800a054:	69fa      	ldr	r2, [r7, #28]
 800a056:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a058:	429a      	cmp	r2, r3
 800a05a:	d204      	bcs.n	800a066 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xdc>
				FinalRangeTimingBudgetMicroSeconds) {
				FinalRangeTimingBudgetMicroSeconds -=
 800a05c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a05e:	69fb      	ldr	r3, [r7, #28]
 800a060:	1ad3      	subs	r3, r2, r3
 800a062:	643b      	str	r3, [r7, #64]	; 0x40
 800a064:	e002      	b.n	800a06c <VL53L0X_set_measurement_timing_budget_micro_seconds+0xe2>
							SubTimeout;
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 800a066:	23fc      	movs	r3, #252	; 0xfc
 800a068:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			}
		}

		if (Status != VL53L0X_ERROR_NONE) {
 800a06c:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800a070:	2b00      	cmp	r3, #0
 800a072:	d002      	beq.n	800a07a <VL53L0X_set_measurement_timing_budget_micro_seconds+0xf0>
			LOG_FUNCTION_END(Status);
			return Status;
 800a074:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800a078:	e063      	b.n	800a142 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>
		}

		/* DSS */
		if (SchedulerSequenceSteps.DssOn) {
 800a07a:	7dbb      	ldrb	r3, [r7, #22]
 800a07c:	2b00      	cmp	r3, #0
 800a07e:	d011      	beq.n	800a0a4 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x11a>

			SubTimeout = 2 * (MsrcDccTccTimeoutMicroSeconds +
 800a080:	693a      	ldr	r2, [r7, #16]
 800a082:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a084:	4413      	add	r3, r2
 800a086:	005b      	lsls	r3, r3, #1
 800a088:	61fb      	str	r3, [r7, #28]
				DssOverheadMicroSeconds);

			if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 800a08a:	69fa      	ldr	r2, [r7, #28]
 800a08c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a08e:	429a      	cmp	r2, r3
 800a090:	d204      	bcs.n	800a09c <VL53L0X_set_measurement_timing_budget_micro_seconds+0x112>
				FinalRangeTimingBudgetMicroSeconds
							-= SubTimeout;
 800a092:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a094:	69fb      	ldr	r3, [r7, #28]
 800a096:	1ad3      	subs	r3, r2, r3
 800a098:	643b      	str	r3, [r7, #64]	; 0x40
 800a09a:	e016      	b.n	800a0ca <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 800a09c:	23fc      	movs	r3, #252	; 0xfc
 800a09e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800a0a2:	e012      	b.n	800a0ca <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			}
		} else if (SchedulerSequenceSteps.MsrcOn) {
 800a0a4:	7d7b      	ldrb	r3, [r7, #21]
 800a0a6:	2b00      	cmp	r3, #0
 800a0a8:	d00f      	beq.n	800a0ca <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			/* MSRC */
			SubTimeout = MsrcDccTccTimeoutMicroSeconds +
 800a0aa:	693b      	ldr	r3, [r7, #16]
 800a0ac:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a0ae:	4413      	add	r3, r2
 800a0b0:	61fb      	str	r3, [r7, #28]
						MsrcOverheadMicroSeconds;

			if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 800a0b2:	69fa      	ldr	r2, [r7, #28]
 800a0b4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a0b6:	429a      	cmp	r2, r3
 800a0b8:	d204      	bcs.n	800a0c4 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x13a>
				FinalRangeTimingBudgetMicroSeconds
							-= SubTimeout;
 800a0ba:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a0bc:	69fb      	ldr	r3, [r7, #28]
 800a0be:	1ad3      	subs	r3, r2, r3
 800a0c0:	643b      	str	r3, [r7, #64]	; 0x40
 800a0c2:	e002      	b.n	800a0ca <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 800a0c4:	23fc      	movs	r3, #252	; 0xfc
 800a0c6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			}
		}

	}

	if (Status != VL53L0X_ERROR_NONE) {
 800a0ca:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800a0ce:	2b00      	cmp	r3, #0
 800a0d0:	d002      	beq.n	800a0d8 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x14e>
		LOG_FUNCTION_END(Status);
		return Status;
 800a0d2:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800a0d6:	e034      	b.n	800a142 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>
	}

	if (SchedulerSequenceSteps.PreRangeOn) {
 800a0d8:	7dfb      	ldrb	r3, [r7, #23]
 800a0da:	2b00      	cmp	r3, #0
 800a0dc:	d019      	beq.n	800a112 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x188>

		/* Subtract the Pre-range timeout if enabled. */

		Status = get_sequence_step_timeout(Dev,
 800a0de:	f107 030c 	add.w	r3, r7, #12
 800a0e2:	461a      	mov	r2, r3
 800a0e4:	2103      	movs	r1, #3
 800a0e6:	6878      	ldr	r0, [r7, #4]
 800a0e8:	f7ff fabc 	bl	8009664 <get_sequence_step_timeout>
 800a0ec:	4603      	mov	r3, r0
 800a0ee:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
				VL53L0X_SEQUENCESTEP_PRE_RANGE,
				&PreRangeTimeoutMicroSeconds);

		SubTimeout = PreRangeTimeoutMicroSeconds +
 800a0f2:	68fb      	ldr	r3, [r7, #12]
 800a0f4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a0f6:	4413      	add	r3, r2
 800a0f8:	61fb      	str	r3, [r7, #28]
				PreRangeOverheadMicroSeconds;

		if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 800a0fa:	69fa      	ldr	r2, [r7, #28]
 800a0fc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a0fe:	429a      	cmp	r2, r3
 800a100:	d204      	bcs.n	800a10c <VL53L0X_set_measurement_timing_budget_micro_seconds+0x182>
			FinalRangeTimingBudgetMicroSeconds -= SubTimeout;
 800a102:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a104:	69fb      	ldr	r3, [r7, #28]
 800a106:	1ad3      	subs	r3, r2, r3
 800a108:	643b      	str	r3, [r7, #64]	; 0x40
 800a10a:	e002      	b.n	800a112 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x188>
		} else {
			/* Requested timeout too big. */
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 800a10c:	23fc      	movs	r3, #252	; 0xfc
 800a10e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		}
	}


	if (Status == VL53L0X_ERROR_NONE &&
 800a112:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800a116:	2b00      	cmp	r3, #0
 800a118:	d111      	bne.n	800a13e <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b4>
		SchedulerSequenceSteps.FinalRangeOn) {
 800a11a:	7e3b      	ldrb	r3, [r7, #24]
	if (Status == VL53L0X_ERROR_NONE &&
 800a11c:	2b00      	cmp	r3, #0
 800a11e:	d00e      	beq.n	800a13e <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b4>

		FinalRangeTimingBudgetMicroSeconds -=
 800a120:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a122:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a124:	1ad3      	subs	r3, r2, r3
 800a126:	643b      	str	r3, [r7, #64]	; 0x40
		 * budget and the sum of all other timeouts within the sequence.
		 * If there is no room for the final range timeout, then an error
		 * will be set. Otherwise the remaining time will be applied to
		 * the final range.
		 */
		Status = set_sequence_step_timeout(Dev,
 800a128:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a12a:	2104      	movs	r1, #4
 800a12c:	6878      	ldr	r0, [r7, #4]
 800a12e:	f7ff fb7a 	bl	8009826 <set_sequence_step_timeout>
 800a132:	4603      	mov	r3, r0
 800a134:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			VL53L0X_SEQUENCESTEP_FINAL_RANGE,
			FinalRangeTimingBudgetMicroSeconds);

		VL53L0X_SETPARAMETERFIELD(Dev,
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	683a      	ldr	r2, [r7, #0]
 800a13c:	615a      	str	r2, [r3, #20]
			MeasurementTimingBudgetMicroSeconds);
	}

	LOG_FUNCTION_END(Status);

	return Status;
 800a13e:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
}
 800a142:	4618      	mov	r0, r3
 800a144:	3748      	adds	r7, #72	; 0x48
 800a146:	46bd      	mov	sp, r7
 800a148:	bd80      	pop	{r7, pc}

0800a14a <VL53L0X_get_measurement_timing_budget_micro_seconds>:

VL53L0X_Error VL53L0X_get_measurement_timing_budget_micro_seconds(VL53L0X_DEV Dev,
		uint32_t *pMeasurementTimingBudgetMicroSeconds)
{
 800a14a:	b580      	push	{r7, lr}
 800a14c:	b090      	sub	sp, #64	; 0x40
 800a14e:	af00      	add	r7, sp, #0
 800a150:	6078      	str	r0, [r7, #4]
 800a152:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a154:	2300      	movs	r3, #0
 800a156:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;
	uint32_t FinalRangeTimeoutMicroSeconds;
	uint32_t MsrcDccTccTimeoutMicroSeconds	= 2000;
 800a15a:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800a15e:	613b      	str	r3, [r7, #16]
	uint32_t StartOverheadMicroSeconds		= 1910;
 800a160:	f240 7376 	movw	r3, #1910	; 0x776
 800a164:	63bb      	str	r3, [r7, #56]	; 0x38
	uint32_t EndOverheadMicroSeconds		= 960;
 800a166:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 800a16a:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t MsrcOverheadMicroSeconds		= 660;
 800a16c:	f44f 7325 	mov.w	r3, #660	; 0x294
 800a170:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t TccOverheadMicroSeconds		= 590;
 800a172:	f240 234e 	movw	r3, #590	; 0x24e
 800a176:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t DssOverheadMicroSeconds		= 690;
 800a178:	f240 23b2 	movw	r3, #690	; 0x2b2
 800a17c:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t PreRangeOverheadMicroSeconds	= 660;
 800a17e:	f44f 7325 	mov.w	r3, #660	; 0x294
 800a182:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t FinalRangeOverheadMicroSeconds = 550;
 800a184:	f240 2326 	movw	r3, #550	; 0x226
 800a188:	623b      	str	r3, [r7, #32]
	uint32_t PreRangeTimeoutMicroSeconds	= 0;
 800a18a:	2300      	movs	r3, #0
 800a18c:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");

	/* Start and end overhead times always present */
	*pMeasurementTimingBudgetMicroSeconds
		= StartOverheadMicroSeconds + EndOverheadMicroSeconds;
 800a18e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a190:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a192:	441a      	add	r2, r3
 800a194:	683b      	ldr	r3, [r7, #0]
 800a196:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 800a198:	f107 0318 	add.w	r3, r7, #24
 800a19c:	4619      	mov	r1, r3
 800a19e:	6878      	ldr	r0, [r7, #4]
 800a1a0:	f7fc fe0c 	bl	8006dbc <VL53L0X_GetSequenceStepEnables>
 800a1a4:	4603      	mov	r3, r0
 800a1a6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

	if (Status != VL53L0X_ERROR_NONE) {
 800a1aa:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800a1ae:	2b00      	cmp	r3, #0
 800a1b0:	d002      	beq.n	800a1b8 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x6e>
		LOG_FUNCTION_END(Status);
		return Status;
 800a1b2:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800a1b6:	e075      	b.n	800a2a4 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x15a>
	}


	if (SchedulerSequenceSteps.TccOn  ||
 800a1b8:	7e3b      	ldrb	r3, [r7, #24]
 800a1ba:	2b00      	cmp	r3, #0
 800a1bc:	d105      	bne.n	800a1ca <VL53L0X_get_measurement_timing_budget_micro_seconds+0x80>
		SchedulerSequenceSteps.MsrcOn ||
 800a1be:	7e7b      	ldrb	r3, [r7, #25]
	if (SchedulerSequenceSteps.TccOn  ||
 800a1c0:	2b00      	cmp	r3, #0
 800a1c2:	d102      	bne.n	800a1ca <VL53L0X_get_measurement_timing_budget_micro_seconds+0x80>
		SchedulerSequenceSteps.DssOn) {
 800a1c4:	7ebb      	ldrb	r3, [r7, #26]
		SchedulerSequenceSteps.MsrcOn ||
 800a1c6:	2b00      	cmp	r3, #0
 800a1c8:	d030      	beq.n	800a22c <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>

		Status = get_sequence_step_timeout(Dev,
 800a1ca:	f107 0310 	add.w	r3, r7, #16
 800a1ce:	461a      	mov	r2, r3
 800a1d0:	2102      	movs	r1, #2
 800a1d2:	6878      	ldr	r0, [r7, #4]
 800a1d4:	f7ff fa46 	bl	8009664 <get_sequence_step_timeout>
 800a1d8:	4603      	mov	r3, r0
 800a1da:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_SEQUENCESTEP_MSRC,
				&MsrcDccTccTimeoutMicroSeconds);

		if (Status == VL53L0X_ERROR_NONE) {
 800a1de:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800a1e2:	2b00      	cmp	r3, #0
 800a1e4:	d122      	bne.n	800a22c <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
			if (SchedulerSequenceSteps.TccOn) {
 800a1e6:	7e3b      	ldrb	r3, [r7, #24]
 800a1e8:	2b00      	cmp	r3, #0
 800a1ea:	d007      	beq.n	800a1fc <VL53L0X_get_measurement_timing_budget_micro_seconds+0xb2>
				*pMeasurementTimingBudgetMicroSeconds +=
 800a1ec:	683b      	ldr	r3, [r7, #0]
 800a1ee:	681a      	ldr	r2, [r3, #0]
					MsrcDccTccTimeoutMicroSeconds +
 800a1f0:	6939      	ldr	r1, [r7, #16]
 800a1f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a1f4:	440b      	add	r3, r1
				*pMeasurementTimingBudgetMicroSeconds +=
 800a1f6:	441a      	add	r2, r3
 800a1f8:	683b      	ldr	r3, [r7, #0]
 800a1fa:	601a      	str	r2, [r3, #0]
					TccOverheadMicroSeconds;
			}

			if (SchedulerSequenceSteps.DssOn) {
 800a1fc:	7ebb      	ldrb	r3, [r7, #26]
 800a1fe:	2b00      	cmp	r3, #0
 800a200:	d009      	beq.n	800a216 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xcc>
				*pMeasurementTimingBudgetMicroSeconds +=
 800a202:	683b      	ldr	r3, [r7, #0]
 800a204:	681a      	ldr	r2, [r3, #0]
				2 * (MsrcDccTccTimeoutMicroSeconds +
 800a206:	6939      	ldr	r1, [r7, #16]
 800a208:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a20a:	440b      	add	r3, r1
 800a20c:	005b      	lsls	r3, r3, #1
				*pMeasurementTimingBudgetMicroSeconds +=
 800a20e:	441a      	add	r2, r3
 800a210:	683b      	ldr	r3, [r7, #0]
 800a212:	601a      	str	r2, [r3, #0]
 800a214:	e00a      	b.n	800a22c <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
					DssOverheadMicroSeconds);
			} else if (SchedulerSequenceSteps.MsrcOn) {
 800a216:	7e7b      	ldrb	r3, [r7, #25]
 800a218:	2b00      	cmp	r3, #0
 800a21a:	d007      	beq.n	800a22c <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
				*pMeasurementTimingBudgetMicroSeconds +=
 800a21c:	683b      	ldr	r3, [r7, #0]
 800a21e:	681a      	ldr	r2, [r3, #0]
					MsrcDccTccTimeoutMicroSeconds +
 800a220:	6939      	ldr	r1, [r7, #16]
 800a222:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a224:	440b      	add	r3, r1
				*pMeasurementTimingBudgetMicroSeconds +=
 800a226:	441a      	add	r2, r3
 800a228:	683b      	ldr	r3, [r7, #0]
 800a22a:	601a      	str	r2, [r3, #0]
					MsrcOverheadMicroSeconds;
			}
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800a22c:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800a230:	2b00      	cmp	r3, #0
 800a232:	d114      	bne.n	800a25e <VL53L0X_get_measurement_timing_budget_micro_seconds+0x114>
		if (SchedulerSequenceSteps.PreRangeOn) {
 800a234:	7efb      	ldrb	r3, [r7, #27]
 800a236:	2b00      	cmp	r3, #0
 800a238:	d011      	beq.n	800a25e <VL53L0X_get_measurement_timing_budget_micro_seconds+0x114>
			Status = get_sequence_step_timeout(Dev,
 800a23a:	f107 030c 	add.w	r3, r7, #12
 800a23e:	461a      	mov	r2, r3
 800a240:	2103      	movs	r1, #3
 800a242:	6878      	ldr	r0, [r7, #4]
 800a244:	f7ff fa0e 	bl	8009664 <get_sequence_step_timeout>
 800a248:	4603      	mov	r3, r0
 800a24a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_SEQUENCESTEP_PRE_RANGE,
				&PreRangeTimeoutMicroSeconds);
			*pMeasurementTimingBudgetMicroSeconds +=
 800a24e:	683b      	ldr	r3, [r7, #0]
 800a250:	681a      	ldr	r2, [r3, #0]
				PreRangeTimeoutMicroSeconds +
 800a252:	68f9      	ldr	r1, [r7, #12]
 800a254:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a256:	440b      	add	r3, r1
			*pMeasurementTimingBudgetMicroSeconds +=
 800a258:	441a      	add	r2, r3
 800a25a:	683b      	ldr	r3, [r7, #0]
 800a25c:	601a      	str	r2, [r3, #0]
				PreRangeOverheadMicroSeconds;
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800a25e:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800a262:	2b00      	cmp	r3, #0
 800a264:	d114      	bne.n	800a290 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x146>
		if (SchedulerSequenceSteps.FinalRangeOn) {
 800a266:	7f3b      	ldrb	r3, [r7, #28]
 800a268:	2b00      	cmp	r3, #0
 800a26a:	d011      	beq.n	800a290 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x146>
			Status = get_sequence_step_timeout(Dev,
 800a26c:	f107 0314 	add.w	r3, r7, #20
 800a270:	461a      	mov	r2, r3
 800a272:	2104      	movs	r1, #4
 800a274:	6878      	ldr	r0, [r7, #4]
 800a276:	f7ff f9f5 	bl	8009664 <get_sequence_step_timeout>
 800a27a:	4603      	mov	r3, r0
 800a27c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
					VL53L0X_SEQUENCESTEP_FINAL_RANGE,
					&FinalRangeTimeoutMicroSeconds);
			*pMeasurementTimingBudgetMicroSeconds +=
 800a280:	683b      	ldr	r3, [r7, #0]
 800a282:	681a      	ldr	r2, [r3, #0]
				(FinalRangeTimeoutMicroSeconds +
 800a284:	6979      	ldr	r1, [r7, #20]
 800a286:	6a3b      	ldr	r3, [r7, #32]
 800a288:	440b      	add	r3, r1
			*pMeasurementTimingBudgetMicroSeconds +=
 800a28a:	441a      	add	r2, r3
 800a28c:	683b      	ldr	r3, [r7, #0]
 800a28e:	601a      	str	r2, [r3, #0]
				FinalRangeOverheadMicroSeconds);
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800a290:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800a294:	2b00      	cmp	r3, #0
 800a296:	d103      	bne.n	800a2a0 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x156>
		VL53L0X_SETPARAMETERFIELD(Dev,
 800a298:	683b      	ldr	r3, [r7, #0]
 800a29a:	681a      	ldr	r2, [r3, #0]
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	615a      	str	r2, [r3, #20]
			MeasurementTimingBudgetMicroSeconds,
			*pMeasurementTimingBudgetMicroSeconds);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800a2a0:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 800a2a4:	4618      	mov	r0, r3
 800a2a6:	3740      	adds	r7, #64	; 0x40
 800a2a8:	46bd      	mov	sp, r7
 800a2aa:	bd80      	pop	{r7, pc}

0800a2ac <VL53L0X_load_tuning_settings>:



VL53L0X_Error VL53L0X_load_tuning_settings(VL53L0X_DEV Dev,
		uint8_t *pTuningSettingBuffer)
{
 800a2ac:	b580      	push	{r7, lr}
 800a2ae:	b088      	sub	sp, #32
 800a2b0:	af00      	add	r7, sp, #0
 800a2b2:	6078      	str	r0, [r7, #4]
 800a2b4:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a2b6:	2300      	movs	r3, #0
 800a2b8:	77fb      	strb	r3, [r7, #31]
	uint8_t localBuffer[4]; /* max */
	uint16_t Temp16;

	LOG_FUNCTION_START("");

	Index = 0;
 800a2ba:	2300      	movs	r3, #0
 800a2bc:	617b      	str	r3, [r7, #20]

	while ((*(pTuningSettingBuffer + Index) != 0) &&
 800a2be:	e0c6      	b.n	800a44e <VL53L0X_load_tuning_settings+0x1a2>
			(Status == VL53L0X_ERROR_NONE)) {
		NumberOfWrites = *(pTuningSettingBuffer + Index);
 800a2c0:	697b      	ldr	r3, [r7, #20]
 800a2c2:	683a      	ldr	r2, [r7, #0]
 800a2c4:	4413      	add	r3, r2
 800a2c6:	781b      	ldrb	r3, [r3, #0]
 800a2c8:	74fb      	strb	r3, [r7, #19]
		Index++;
 800a2ca:	697b      	ldr	r3, [r7, #20]
 800a2cc:	3301      	adds	r3, #1
 800a2ce:	617b      	str	r3, [r7, #20]
		if (NumberOfWrites == 0xFF) {
 800a2d0:	7cfb      	ldrb	r3, [r7, #19]
 800a2d2:	2bff      	cmp	r3, #255	; 0xff
 800a2d4:	f040 808d 	bne.w	800a3f2 <VL53L0X_load_tuning_settings+0x146>
			/* internal parameters */
			SelectParam = *(pTuningSettingBuffer + Index);
 800a2d8:	697b      	ldr	r3, [r7, #20]
 800a2da:	683a      	ldr	r2, [r7, #0]
 800a2dc:	4413      	add	r3, r2
 800a2de:	781b      	ldrb	r3, [r3, #0]
 800a2e0:	747b      	strb	r3, [r7, #17]
			Index++;
 800a2e2:	697b      	ldr	r3, [r7, #20]
 800a2e4:	3301      	adds	r3, #1
 800a2e6:	617b      	str	r3, [r7, #20]
			switch (SelectParam) {
 800a2e8:	7c7b      	ldrb	r3, [r7, #17]
 800a2ea:	2b03      	cmp	r3, #3
 800a2ec:	d87e      	bhi.n	800a3ec <VL53L0X_load_tuning_settings+0x140>
 800a2ee:	a201      	add	r2, pc, #4	; (adr r2, 800a2f4 <VL53L0X_load_tuning_settings+0x48>)
 800a2f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a2f4:	0800a305 	.word	0x0800a305
 800a2f8:	0800a33f 	.word	0x0800a33f
 800a2fc:	0800a379 	.word	0x0800a379
 800a300:	0800a3b3 	.word	0x0800a3b3
			case 0: /* uint16_t SigmaEstRefArray -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 800a304:	697b      	ldr	r3, [r7, #20]
 800a306:	683a      	ldr	r2, [r7, #0]
 800a308:	4413      	add	r3, r2
 800a30a:	781b      	ldrb	r3, [r3, #0]
 800a30c:	743b      	strb	r3, [r7, #16]
				Index++;
 800a30e:	697b      	ldr	r3, [r7, #20]
 800a310:	3301      	adds	r3, #1
 800a312:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 800a314:	697b      	ldr	r3, [r7, #20]
 800a316:	683a      	ldr	r2, [r7, #0]
 800a318:	4413      	add	r3, r2
 800a31a:	781b      	ldrb	r3, [r3, #0]
 800a31c:	73fb      	strb	r3, [r7, #15]
				Index++;
 800a31e:	697b      	ldr	r3, [r7, #20]
 800a320:	3301      	adds	r3, #1
 800a322:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 800a324:	7c3b      	ldrb	r3, [r7, #16]
 800a326:	b29b      	uxth	r3, r3
 800a328:	021b      	lsls	r3, r3, #8
 800a32a:	b29a      	uxth	r2, r3
 800a32c:	7bfb      	ldrb	r3, [r7, #15]
 800a32e:	b29b      	uxth	r3, r3
 800a330:	4413      	add	r3, r2
 800a332:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, SigmaEstRefArray, Temp16);
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	89ba      	ldrh	r2, [r7, #12]
 800a338:	f8a3 2134 	strh.w	r2, [r3, #308]	; 0x134
				break;
 800a33c:	e087      	b.n	800a44e <VL53L0X_load_tuning_settings+0x1a2>
			case 1: /* uint16_t SigmaEstEffPulseWidth -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 800a33e:	697b      	ldr	r3, [r7, #20]
 800a340:	683a      	ldr	r2, [r7, #0]
 800a342:	4413      	add	r3, r2
 800a344:	781b      	ldrb	r3, [r3, #0]
 800a346:	743b      	strb	r3, [r7, #16]
				Index++;
 800a348:	697b      	ldr	r3, [r7, #20]
 800a34a:	3301      	adds	r3, #1
 800a34c:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 800a34e:	697b      	ldr	r3, [r7, #20]
 800a350:	683a      	ldr	r2, [r7, #0]
 800a352:	4413      	add	r3, r2
 800a354:	781b      	ldrb	r3, [r3, #0]
 800a356:	73fb      	strb	r3, [r7, #15]
				Index++;
 800a358:	697b      	ldr	r3, [r7, #20]
 800a35a:	3301      	adds	r3, #1
 800a35c:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 800a35e:	7c3b      	ldrb	r3, [r7, #16]
 800a360:	b29b      	uxth	r3, r3
 800a362:	021b      	lsls	r3, r3, #8
 800a364:	b29a      	uxth	r2, r3
 800a366:	7bfb      	ldrb	r3, [r7, #15]
 800a368:	b29b      	uxth	r3, r3
 800a36a:	4413      	add	r3, r2
 800a36c:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, SigmaEstEffPulseWidth,
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	89ba      	ldrh	r2, [r7, #12]
 800a372:	f8a3 2136 	strh.w	r2, [r3, #310]	; 0x136
					Temp16);
				break;
 800a376:	e06a      	b.n	800a44e <VL53L0X_load_tuning_settings+0x1a2>
			case 2: /* uint16_t SigmaEstEffAmbWidth -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 800a378:	697b      	ldr	r3, [r7, #20]
 800a37a:	683a      	ldr	r2, [r7, #0]
 800a37c:	4413      	add	r3, r2
 800a37e:	781b      	ldrb	r3, [r3, #0]
 800a380:	743b      	strb	r3, [r7, #16]
				Index++;
 800a382:	697b      	ldr	r3, [r7, #20]
 800a384:	3301      	adds	r3, #1
 800a386:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 800a388:	697b      	ldr	r3, [r7, #20]
 800a38a:	683a      	ldr	r2, [r7, #0]
 800a38c:	4413      	add	r3, r2
 800a38e:	781b      	ldrb	r3, [r3, #0]
 800a390:	73fb      	strb	r3, [r7, #15]
				Index++;
 800a392:	697b      	ldr	r3, [r7, #20]
 800a394:	3301      	adds	r3, #1
 800a396:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 800a398:	7c3b      	ldrb	r3, [r7, #16]
 800a39a:	b29b      	uxth	r3, r3
 800a39c:	021b      	lsls	r3, r3, #8
 800a39e:	b29a      	uxth	r2, r3
 800a3a0:	7bfb      	ldrb	r3, [r7, #15]
 800a3a2:	b29b      	uxth	r3, r3
 800a3a4:	4413      	add	r3, r2
 800a3a6:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, SigmaEstEffAmbWidth, Temp16);
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	89ba      	ldrh	r2, [r7, #12]
 800a3ac:	f8a3 2138 	strh.w	r2, [r3, #312]	; 0x138
				break;
 800a3b0:	e04d      	b.n	800a44e <VL53L0X_load_tuning_settings+0x1a2>
			case 3: /* uint16_t targetRefRate -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 800a3b2:	697b      	ldr	r3, [r7, #20]
 800a3b4:	683a      	ldr	r2, [r7, #0]
 800a3b6:	4413      	add	r3, r2
 800a3b8:	781b      	ldrb	r3, [r3, #0]
 800a3ba:	743b      	strb	r3, [r7, #16]
				Index++;
 800a3bc:	697b      	ldr	r3, [r7, #20]
 800a3be:	3301      	adds	r3, #1
 800a3c0:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 800a3c2:	697b      	ldr	r3, [r7, #20]
 800a3c4:	683a      	ldr	r2, [r7, #0]
 800a3c6:	4413      	add	r3, r2
 800a3c8:	781b      	ldrb	r3, [r3, #0]
 800a3ca:	73fb      	strb	r3, [r7, #15]
				Index++;
 800a3cc:	697b      	ldr	r3, [r7, #20]
 800a3ce:	3301      	adds	r3, #1
 800a3d0:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 800a3d2:	7c3b      	ldrb	r3, [r7, #16]
 800a3d4:	b29b      	uxth	r3, r3
 800a3d6:	021b      	lsls	r3, r3, #8
 800a3d8:	b29a      	uxth	r2, r3
 800a3da:	7bfb      	ldrb	r3, [r7, #15]
 800a3dc:	b29b      	uxth	r3, r3
 800a3de:	4413      	add	r3, r2
 800a3e0:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, targetRefRate, Temp16);
 800a3e2:	687b      	ldr	r3, [r7, #4]
 800a3e4:	89ba      	ldrh	r2, [r7, #12]
 800a3e6:	f8a3 213c 	strh.w	r2, [r3, #316]	; 0x13c
				break;
 800a3ea:	e030      	b.n	800a44e <VL53L0X_load_tuning_settings+0x1a2>
			default: /* invalid parameter */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 800a3ec:	23fc      	movs	r3, #252	; 0xfc
 800a3ee:	77fb      	strb	r3, [r7, #31]
 800a3f0:	e02d      	b.n	800a44e <VL53L0X_load_tuning_settings+0x1a2>
			}

		} else if (NumberOfWrites <= 4) {
 800a3f2:	7cfb      	ldrb	r3, [r7, #19]
 800a3f4:	2b04      	cmp	r3, #4
 800a3f6:	d828      	bhi.n	800a44a <VL53L0X_load_tuning_settings+0x19e>
			Address = *(pTuningSettingBuffer + Index);
 800a3f8:	697b      	ldr	r3, [r7, #20]
 800a3fa:	683a      	ldr	r2, [r7, #0]
 800a3fc:	4413      	add	r3, r2
 800a3fe:	781b      	ldrb	r3, [r3, #0]
 800a400:	74bb      	strb	r3, [r7, #18]
			Index++;
 800a402:	697b      	ldr	r3, [r7, #20]
 800a404:	3301      	adds	r3, #1
 800a406:	617b      	str	r3, [r7, #20]

			for (i = 0; i < NumberOfWrites; i++) {
 800a408:	2300      	movs	r3, #0
 800a40a:	61bb      	str	r3, [r7, #24]
 800a40c:	e00f      	b.n	800a42e <VL53L0X_load_tuning_settings+0x182>
				localBuffer[i] = *(pTuningSettingBuffer +
 800a40e:	697b      	ldr	r3, [r7, #20]
 800a410:	683a      	ldr	r2, [r7, #0]
 800a412:	4413      	add	r3, r2
 800a414:	7819      	ldrb	r1, [r3, #0]
 800a416:	f107 0208 	add.w	r2, r7, #8
 800a41a:	69bb      	ldr	r3, [r7, #24]
 800a41c:	4413      	add	r3, r2
 800a41e:	460a      	mov	r2, r1
 800a420:	701a      	strb	r2, [r3, #0]
							Index);
				Index++;
 800a422:	697b      	ldr	r3, [r7, #20]
 800a424:	3301      	adds	r3, #1
 800a426:	617b      	str	r3, [r7, #20]
			for (i = 0; i < NumberOfWrites; i++) {
 800a428:	69bb      	ldr	r3, [r7, #24]
 800a42a:	3301      	adds	r3, #1
 800a42c:	61bb      	str	r3, [r7, #24]
 800a42e:	7cfb      	ldrb	r3, [r7, #19]
 800a430:	69ba      	ldr	r2, [r7, #24]
 800a432:	429a      	cmp	r2, r3
 800a434:	dbeb      	blt.n	800a40e <VL53L0X_load_tuning_settings+0x162>
			}

			Status = VL53L0X_WriteMulti(Dev, Address, localBuffer,
 800a436:	7cfb      	ldrb	r3, [r7, #19]
 800a438:	f107 0208 	add.w	r2, r7, #8
 800a43c:	7cb9      	ldrb	r1, [r7, #18]
 800a43e:	6878      	ldr	r0, [r7, #4]
 800a440:	f000 fdee 	bl	800b020 <VL53L0X_WriteMulti>
 800a444:	4603      	mov	r3, r0
 800a446:	77fb      	strb	r3, [r7, #31]
 800a448:	e001      	b.n	800a44e <VL53L0X_load_tuning_settings+0x1a2>
					NumberOfWrites);

		} else {
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 800a44a:	23fc      	movs	r3, #252	; 0xfc
 800a44c:	77fb      	strb	r3, [r7, #31]
	while ((*(pTuningSettingBuffer + Index) != 0) &&
 800a44e:	697b      	ldr	r3, [r7, #20]
 800a450:	683a      	ldr	r2, [r7, #0]
 800a452:	4413      	add	r3, r2
 800a454:	781b      	ldrb	r3, [r3, #0]
 800a456:	2b00      	cmp	r3, #0
 800a458:	d004      	beq.n	800a464 <VL53L0X_load_tuning_settings+0x1b8>
 800a45a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800a45e:	2b00      	cmp	r3, #0
 800a460:	f43f af2e 	beq.w	800a2c0 <VL53L0X_load_tuning_settings+0x14>
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800a464:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800a468:	4618      	mov	r0, r3
 800a46a:	3720      	adds	r7, #32
 800a46c:	46bd      	mov	sp, r7
 800a46e:	bd80      	pop	{r7, pc}

0800a470 <VL53L0X_get_total_xtalk_rate>:

VL53L0X_Error VL53L0X_get_total_xtalk_rate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *ptotal_xtalk_rate_mcps)
{
 800a470:	b580      	push	{r7, lr}
 800a472:	b088      	sub	sp, #32
 800a474:	af00      	add	r7, sp, #0
 800a476:	60f8      	str	r0, [r7, #12]
 800a478:	60b9      	str	r1, [r7, #8]
 800a47a:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a47c:	2300      	movs	r3, #0
 800a47e:	77fb      	strb	r3, [r7, #31]

	uint8_t xtalkCompEnable;
	FixPoint1616_t totalXtalkMegaCps;
	FixPoint1616_t xtalkPerSpadMegaCps;

	*ptotal_xtalk_rate_mcps = 0;
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	2200      	movs	r2, #0
 800a484:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_GetXTalkCompensationEnable(Dev, &xtalkCompEnable);
 800a486:	f107 0313 	add.w	r3, r7, #19
 800a48a:	4619      	mov	r1, r3
 800a48c:	68f8      	ldr	r0, [r7, #12]
 800a48e:	f7fc fd21 	bl	8006ed4 <VL53L0X_GetXTalkCompensationEnable>
 800a492:	4603      	mov	r3, r0
 800a494:	77fb      	strb	r3, [r7, #31]
	if (Status == VL53L0X_ERROR_NONE) {
 800a496:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800a49a:	2b00      	cmp	r3, #0
 800a49c:	d111      	bne.n	800a4c2 <VL53L0X_get_total_xtalk_rate+0x52>

		if (xtalkCompEnable) {
 800a49e:	7cfb      	ldrb	r3, [r7, #19]
 800a4a0:	2b00      	cmp	r3, #0
 800a4a2:	d00e      	beq.n	800a4c2 <VL53L0X_get_total_xtalk_rate+0x52>

			VL53L0X_GETPARAMETERFIELD(
 800a4a4:	68fb      	ldr	r3, [r7, #12]
 800a4a6:	6a1b      	ldr	r3, [r3, #32]
 800a4a8:	61bb      	str	r3, [r7, #24]
				XTalkCompensationRateMegaCps,
				xtalkPerSpadMegaCps);

			/* FixPoint1616 * FixPoint 8:8 = FixPoint0824 */
			totalXtalkMegaCps =
				pRangingMeasurementData->EffectiveSpadRtnCount *
 800a4aa:	68bb      	ldr	r3, [r7, #8]
 800a4ac:	8a9b      	ldrh	r3, [r3, #20]
 800a4ae:	461a      	mov	r2, r3
			totalXtalkMegaCps =
 800a4b0:	69bb      	ldr	r3, [r7, #24]
 800a4b2:	fb02 f303 	mul.w	r3, r2, r3
 800a4b6:	617b      	str	r3, [r7, #20]
				xtalkPerSpadMegaCps;

			/* FixPoint0824 >> 8 = FixPoint1616 */
			*ptotal_xtalk_rate_mcps =
				(totalXtalkMegaCps + 0x80) >> 8;
 800a4b8:	697b      	ldr	r3, [r7, #20]
 800a4ba:	3380      	adds	r3, #128	; 0x80
 800a4bc:	0a1a      	lsrs	r2, r3, #8
			*ptotal_xtalk_rate_mcps =
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	601a      	str	r2, [r3, #0]
		}
	}

	return Status;
 800a4c2:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800a4c6:	4618      	mov	r0, r3
 800a4c8:	3720      	adds	r7, #32
 800a4ca:	46bd      	mov	sp, r7
 800a4cc:	bd80      	pop	{r7, pc}

0800a4ce <VL53L0X_get_total_signal_rate>:

VL53L0X_Error VL53L0X_get_total_signal_rate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *ptotal_signal_rate_mcps)
{
 800a4ce:	b580      	push	{r7, lr}
 800a4d0:	b086      	sub	sp, #24
 800a4d2:	af00      	add	r7, sp, #0
 800a4d4:	60f8      	str	r0, [r7, #12]
 800a4d6:	60b9      	str	r1, [r7, #8]
 800a4d8:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a4da:	2300      	movs	r3, #0
 800a4dc:	75fb      	strb	r3, [r7, #23]
	FixPoint1616_t totalXtalkMegaCps;

	LOG_FUNCTION_START("");

	*ptotal_signal_rate_mcps =
		pRangingMeasurementData->SignalRateRtnMegaCps;
 800a4de:	68bb      	ldr	r3, [r7, #8]
 800a4e0:	68da      	ldr	r2, [r3, #12]
	*ptotal_signal_rate_mcps =
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_get_total_xtalk_rate(
 800a4e6:	f107 0310 	add.w	r3, r7, #16
 800a4ea:	461a      	mov	r2, r3
 800a4ec:	68b9      	ldr	r1, [r7, #8]
 800a4ee:	68f8      	ldr	r0, [r7, #12]
 800a4f0:	f7ff ffbe 	bl	800a470 <VL53L0X_get_total_xtalk_rate>
 800a4f4:	4603      	mov	r3, r0
 800a4f6:	75fb      	strb	r3, [r7, #23]
		Dev, pRangingMeasurementData, &totalXtalkMegaCps);

	if (Status == VL53L0X_ERROR_NONE)
 800a4f8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a4fc:	2b00      	cmp	r3, #0
 800a4fe:	d105      	bne.n	800a50c <VL53L0X_get_total_signal_rate+0x3e>
		*ptotal_signal_rate_mcps += totalXtalkMegaCps;
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	681a      	ldr	r2, [r3, #0]
 800a504:	693b      	ldr	r3, [r7, #16]
 800a506:	441a      	add	r2, r3
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	601a      	str	r2, [r3, #0]

	return Status;
 800a50c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a510:	4618      	mov	r0, r3
 800a512:	3718      	adds	r7, #24
 800a514:	46bd      	mov	sp, r7
 800a516:	bd80      	pop	{r7, pc}

0800a518 <VL53L0X_calc_dmax>:
	FixPoint1616_t pwMult,
	uint32_t sigmaEstimateP1,
	FixPoint1616_t sigmaEstimateP2,
	uint32_t peakVcselDuration_us,
	uint32_t *pdmax_mm)
{
 800a518:	b580      	push	{r7, lr}
 800a51a:	b09a      	sub	sp, #104	; 0x68
 800a51c:	af00      	add	r7, sp, #0
 800a51e:	60f8      	str	r0, [r7, #12]
 800a520:	60b9      	str	r1, [r7, #8]
 800a522:	607a      	str	r2, [r7, #4]
 800a524:	603b      	str	r3, [r7, #0]
	const uint32_t cSigmaLimit		= 18;
 800a526:	2312      	movs	r3, #18
 800a528:	657b      	str	r3, [r7, #84]	; 0x54
	const FixPoint1616_t cSignalLimit	= 0x4000; /* 0.25 */
 800a52a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800a52e:	653b      	str	r3, [r7, #80]	; 0x50
	const FixPoint1616_t cSigmaEstRef	= 0x00000042; /* 0.001 */
 800a530:	2342      	movs	r3, #66	; 0x42
 800a532:	64fb      	str	r3, [r7, #76]	; 0x4c
	const uint32_t cAmbEffWidthSigmaEst_ns = 6;
 800a534:	2306      	movs	r3, #6
 800a536:	64bb      	str	r3, [r7, #72]	; 0x48
	const uint32_t cAmbEffWidthDMax_ns	   = 7;
 800a538:	2307      	movs	r3, #7
 800a53a:	647b      	str	r3, [r7, #68]	; 0x44
	FixPoint1616_t dmaxAmbient;
	FixPoint1616_t dmaxDarkTmp;
	FixPoint1616_t sigmaEstP2Tmp;
	uint32_t signalRateTemp_mcps;

	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a53c:	2300      	movs	r3, #0
 800a53e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

	LOG_FUNCTION_START("");

	dmaxCalRange_mm =
		PALDevDataGet(Dev, DmaxCalRangeMilliMeter);
 800a542:	68fb      	ldr	r3, [r7, #12]
 800a544:	f8b3 3154 	ldrh.w	r3, [r3, #340]	; 0x154
	dmaxCalRange_mm =
 800a548:	63fb      	str	r3, [r7, #60]	; 0x3c

	dmaxCalSignalRateRtn_mcps =
 800a54a:	68fb      	ldr	r3, [r7, #12]
 800a54c:	f8d3 3158 	ldr.w	r3, [r3, #344]	; 0x158
 800a550:	63bb      	str	r3, [r7, #56]	; 0x38
		PALDevDataGet(Dev, DmaxCalSignalRateRtnMegaCps);

	/* uint32 * FixPoint1616 = FixPoint1616 */
	SignalAt0mm = dmaxCalRange_mm * dmaxCalSignalRateRtn_mcps;
 800a552:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a554:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a556:	fb02 f303 	mul.w	r3, r2, r3
 800a55a:	637b      	str	r3, [r7, #52]	; 0x34

	/* FixPoint1616 >> 8 = FixPoint2408 */
	SignalAt0mm = (SignalAt0mm + 0x80) >> 8;
 800a55c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a55e:	3380      	adds	r3, #128	; 0x80
 800a560:	0a1b      	lsrs	r3, r3, #8
 800a562:	637b      	str	r3, [r7, #52]	; 0x34
	SignalAt0mm *= dmaxCalRange_mm;
 800a564:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a566:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800a568:	fb02 f303 	mul.w	r3, r2, r3
 800a56c:	637b      	str	r3, [r7, #52]	; 0x34

	minSignalNeeded_p1 = 0;
 800a56e:	2300      	movs	r3, #0
 800a570:	667b      	str	r3, [r7, #100]	; 0x64
	if (totalCorrSignalRate_mcps > 0) {
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	2b00      	cmp	r3, #0
 800a576:	d01a      	beq.n	800a5ae <VL53L0X_calc_dmax+0x96>

		/* Shift by 10 bits to increase resolution prior to the
		 * division */
		signalRateTemp_mcps = totalSignalRate_mcps << 10;
 800a578:	68bb      	ldr	r3, [r7, #8]
 800a57a:	029b      	lsls	r3, r3, #10
 800a57c:	633b      	str	r3, [r7, #48]	; 0x30

		/* Add rounding value prior to division */
		minSignalNeeded_p1 = signalRateTemp_mcps +
			(totalCorrSignalRate_mcps/2);
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	085b      	lsrs	r3, r3, #1
		minSignalNeeded_p1 = signalRateTemp_mcps +
 800a582:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a584:	4413      	add	r3, r2
 800a586:	667b      	str	r3, [r7, #100]	; 0x64

		/* FixPoint0626/FixPoint1616 = FixPoint2210 */
		minSignalNeeded_p1 /= totalCorrSignalRate_mcps;
 800a588:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	fbb2 f3f3 	udiv	r3, r2, r3
 800a590:	667b      	str	r3, [r7, #100]	; 0x64

		/* Apply a factored version of the speed of light.
		 Correction to be applied at the end */
		minSignalNeeded_p1 *= 3;
 800a592:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800a594:	4613      	mov	r3, r2
 800a596:	005b      	lsls	r3, r3, #1
 800a598:	4413      	add	r3, r2
 800a59a:	667b      	str	r3, [r7, #100]	; 0x64

		/* FixPoint2210 * FixPoint2210 = FixPoint1220 */
		minSignalNeeded_p1 *= minSignalNeeded_p1;
 800a59c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a59e:	fb03 f303 	mul.w	r3, r3, r3
 800a5a2:	667b      	str	r3, [r7, #100]	; 0x64

		/* FixPoint1220 >> 16 = FixPoint2804 */
		minSignalNeeded_p1 = (minSignalNeeded_p1 + 0x8000) >> 16;
 800a5a4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a5a6:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800a5aa:	0c1b      	lsrs	r3, r3, #16
 800a5ac:	667b      	str	r3, [r7, #100]	; 0x64
	}

	minSignalNeeded_p2 = pwMult * sigmaEstimateP1;
 800a5ae:	683b      	ldr	r3, [r7, #0]
 800a5b0:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800a5b2:	fb02 f303 	mul.w	r3, r2, r3
 800a5b6:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* FixPoint1616 >> 16 =	 uint32 */
	minSignalNeeded_p2 = (minSignalNeeded_p2 + 0x8000) >> 16;
 800a5b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a5ba:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800a5be:	0c1b      	lsrs	r3, r3, #16
 800a5c0:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* uint32 * uint32	=  uint32 */
	minSignalNeeded_p2 *= minSignalNeeded_p2;
 800a5c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a5c4:	fb03 f303 	mul.w	r3, r3, r3
 800a5c8:	62fb      	str	r3, [r7, #44]	; 0x2c
	/* Check sigmaEstimateP2
	 * If this value is too high there is not enough signal rate
	 * to calculate dmax value so set a suitable value to ensure
	 * a very small dmax.
	 */
	sigmaEstP2Tmp = (sigmaEstimateP2 + 0x8000) >> 16;
 800a5ca:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a5cc:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800a5d0:	0c1b      	lsrs	r3, r3, #16
 800a5d2:	62bb      	str	r3, [r7, #40]	; 0x28
	sigmaEstP2Tmp = (sigmaEstP2Tmp + cAmbEffWidthSigmaEst_ns/2)/
 800a5d4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a5d6:	085a      	lsrs	r2, r3, #1
 800a5d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a5da:	441a      	add	r2, r3
 800a5dc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a5de:	fbb2 f3f3 	udiv	r3, r2, r3
 800a5e2:	62bb      	str	r3, [r7, #40]	; 0x28
		cAmbEffWidthSigmaEst_ns;
	sigmaEstP2Tmp *= cAmbEffWidthDMax_ns;
 800a5e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a5e6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a5e8:	fb02 f303 	mul.w	r3, r2, r3
 800a5ec:	62bb      	str	r3, [r7, #40]	; 0x28

	if (sigmaEstP2Tmp > 0xffff) {
 800a5ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a5f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a5f4:	d302      	bcc.n	800a5fc <VL53L0X_calc_dmax+0xe4>
		minSignalNeeded_p3 = 0xfff00000;
 800a5f6:	4b54      	ldr	r3, [pc, #336]	; (800a748 <VL53L0X_calc_dmax+0x230>)
 800a5f8:	663b      	str	r3, [r7, #96]	; 0x60
 800a5fa:	e015      	b.n	800a628 <VL53L0X_calc_dmax+0x110>

		/* DMAX uses a different ambient width from sigma, so apply
		 * correction.
		 * Perform division before multiplication to prevent overflow.
		 */
		sigmaEstimateP2 = (sigmaEstimateP2 + cAmbEffWidthSigmaEst_ns/2)/
 800a5fc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a5fe:	085a      	lsrs	r2, r3, #1
 800a600:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a602:	441a      	add	r2, r3
 800a604:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a606:	fbb2 f3f3 	udiv	r3, r2, r3
 800a60a:	677b      	str	r3, [r7, #116]	; 0x74
			cAmbEffWidthSigmaEst_ns;
		sigmaEstimateP2 *= cAmbEffWidthDMax_ns;
 800a60c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a60e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a610:	fb02 f303 	mul.w	r3, r2, r3
 800a614:	677b      	str	r3, [r7, #116]	; 0x74

		/* FixPoint1616 >> 16 = uint32 */
		minSignalNeeded_p3 = (sigmaEstimateP2 + 0x8000) >> 16;
 800a616:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a618:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800a61c:	0c1b      	lsrs	r3, r3, #16
 800a61e:	663b      	str	r3, [r7, #96]	; 0x60

		minSignalNeeded_p3 *= minSignalNeeded_p3;
 800a620:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a622:	fb03 f303 	mul.w	r3, r3, r3
 800a626:	663b      	str	r3, [r7, #96]	; 0x60

	}

	/* FixPoint1814 / uint32 = FixPoint1814 */
	sigmaLimitTmp = ((cSigmaLimit << 14) + 500) / 1000;
 800a628:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a62a:	039b      	lsls	r3, r3, #14
 800a62c:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800a630:	4a46      	ldr	r2, [pc, #280]	; (800a74c <VL53L0X_calc_dmax+0x234>)
 800a632:	fba2 2303 	umull	r2, r3, r2, r3
 800a636:	099b      	lsrs	r3, r3, #6
 800a638:	627b      	str	r3, [r7, #36]	; 0x24

	/* FixPoint1814 * FixPoint1814 = FixPoint3628 := FixPoint0428 */
	sigmaLimitTmp *= sigmaLimitTmp;
 800a63a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a63c:	fb03 f303 	mul.w	r3, r3, r3
 800a640:	627b      	str	r3, [r7, #36]	; 0x24

	/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
	sigmaEstSqTmp = cSigmaEstRef * cSigmaEstRef;
 800a642:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a644:	fb03 f303 	mul.w	r3, r3, r3
 800a648:	623b      	str	r3, [r7, #32]

	/* FixPoint3232 >> 4 = FixPoint0428 */
	sigmaEstSqTmp = (sigmaEstSqTmp + 0x08) >> 4;
 800a64a:	6a3b      	ldr	r3, [r7, #32]
 800a64c:	3308      	adds	r3, #8
 800a64e:	091b      	lsrs	r3, r3, #4
 800a650:	623b      	str	r3, [r7, #32]

	/* FixPoint0428 - FixPoint0428	= FixPoint0428 */
	sigmaLimitTmp -=  sigmaEstSqTmp;
 800a652:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a654:	6a3b      	ldr	r3, [r7, #32]
 800a656:	1ad3      	subs	r3, r2, r3
 800a658:	627b      	str	r3, [r7, #36]	; 0x24

	/* uint32_t * FixPoint0428 = FixPoint0428 */
	minSignalNeeded_p4 = 4 * 12 * sigmaLimitTmp;
 800a65a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a65c:	4613      	mov	r3, r2
 800a65e:	005b      	lsls	r3, r3, #1
 800a660:	4413      	add	r3, r2
 800a662:	011b      	lsls	r3, r3, #4
 800a664:	61fb      	str	r3, [r7, #28]

	/* FixPoint0428 >> 14 = FixPoint1814 */
	minSignalNeeded_p4 = (minSignalNeeded_p4 + 0x2000) >> 14;
 800a666:	69fb      	ldr	r3, [r7, #28]
 800a668:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800a66c:	0b9b      	lsrs	r3, r3, #14
 800a66e:	61fb      	str	r3, [r7, #28]

	/* uint32 + uint32 = uint32 */
	minSignalNeeded = (minSignalNeeded_p2 + minSignalNeeded_p3);
 800a670:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a672:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a674:	4413      	add	r3, r2
 800a676:	61bb      	str	r3, [r7, #24]

	/* uint32 / uint32 = uint32 */
	minSignalNeeded += (peakVcselDuration_us/2);
 800a678:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a67a:	085b      	lsrs	r3, r3, #1
 800a67c:	69ba      	ldr	r2, [r7, #24]
 800a67e:	4413      	add	r3, r2
 800a680:	61bb      	str	r3, [r7, #24]
	minSignalNeeded /= peakVcselDuration_us;
 800a682:	69ba      	ldr	r2, [r7, #24]
 800a684:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a686:	fbb2 f3f3 	udiv	r3, r2, r3
 800a68a:	61bb      	str	r3, [r7, #24]

	/* uint32 << 14 = FixPoint1814 */
	minSignalNeeded <<= 14;
 800a68c:	69bb      	ldr	r3, [r7, #24]
 800a68e:	039b      	lsls	r3, r3, #14
 800a690:	61bb      	str	r3, [r7, #24]

	/* FixPoint1814 / FixPoint1814 = uint32 */
	minSignalNeeded += (minSignalNeeded_p4/2);
 800a692:	69fb      	ldr	r3, [r7, #28]
 800a694:	085b      	lsrs	r3, r3, #1
 800a696:	69ba      	ldr	r2, [r7, #24]
 800a698:	4413      	add	r3, r2
 800a69a:	61bb      	str	r3, [r7, #24]
	minSignalNeeded /= minSignalNeeded_p4;
 800a69c:	69ba      	ldr	r2, [r7, #24]
 800a69e:	69fb      	ldr	r3, [r7, #28]
 800a6a0:	fbb2 f3f3 	udiv	r3, r2, r3
 800a6a4:	61bb      	str	r3, [r7, #24]

	/* FixPoint3200 * FixPoint2804 := FixPoint2804*/
	minSignalNeeded *= minSignalNeeded_p1;
 800a6a6:	69bb      	ldr	r3, [r7, #24]
 800a6a8:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800a6aa:	fb02 f303 	mul.w	r3, r2, r3
 800a6ae:	61bb      	str	r3, [r7, #24]
	 * and 10E-22 on the denominator.
	 * We do this because 32bit fix point calculation can't
	 * handle the larger and smaller elements of this equation,
	 * i.e. speed of light and pulse widths.
	 */
	minSignalNeeded = (minSignalNeeded + 500) / 1000;
 800a6b0:	69bb      	ldr	r3, [r7, #24]
 800a6b2:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800a6b6:	4a25      	ldr	r2, [pc, #148]	; (800a74c <VL53L0X_calc_dmax+0x234>)
 800a6b8:	fba2 2303 	umull	r2, r3, r2, r3
 800a6bc:	099b      	lsrs	r3, r3, #6
 800a6be:	61bb      	str	r3, [r7, #24]
	minSignalNeeded <<= 4;
 800a6c0:	69bb      	ldr	r3, [r7, #24]
 800a6c2:	011b      	lsls	r3, r3, #4
 800a6c4:	61bb      	str	r3, [r7, #24]

	minSignalNeeded = (minSignalNeeded + 500) / 1000;
 800a6c6:	69bb      	ldr	r3, [r7, #24]
 800a6c8:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800a6cc:	4a1f      	ldr	r2, [pc, #124]	; (800a74c <VL53L0X_calc_dmax+0x234>)
 800a6ce:	fba2 2303 	umull	r2, r3, r2, r3
 800a6d2:	099b      	lsrs	r3, r3, #6
 800a6d4:	61bb      	str	r3, [r7, #24]

	/* FixPoint1616 >> 8 = FixPoint2408 */
	signalLimitTmp = (cSignalLimit + 0x80) >> 8;
 800a6d6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a6d8:	3380      	adds	r3, #128	; 0x80
 800a6da:	0a1b      	lsrs	r3, r3, #8
 800a6dc:	617b      	str	r3, [r7, #20]

	/* FixPoint2408/FixPoint2408 = uint32 */
	if (signalLimitTmp != 0)
 800a6de:	697b      	ldr	r3, [r7, #20]
 800a6e0:	2b00      	cmp	r3, #0
 800a6e2:	d008      	beq.n	800a6f6 <VL53L0X_calc_dmax+0x1de>
		dmaxDarkTmp = (SignalAt0mm + (signalLimitTmp / 2))
 800a6e4:	697b      	ldr	r3, [r7, #20]
 800a6e6:	085a      	lsrs	r2, r3, #1
 800a6e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a6ea:	441a      	add	r2, r3
 800a6ec:	697b      	ldr	r3, [r7, #20]
 800a6ee:	fbb2 f3f3 	udiv	r3, r2, r3
 800a6f2:	65bb      	str	r3, [r7, #88]	; 0x58
 800a6f4:	e001      	b.n	800a6fa <VL53L0X_calc_dmax+0x1e2>
			/ signalLimitTmp;
	else
		dmaxDarkTmp = 0;
 800a6f6:	2300      	movs	r3, #0
 800a6f8:	65bb      	str	r3, [r7, #88]	; 0x58

	dmaxDark = VL53L0X_isqrt(dmaxDarkTmp);
 800a6fa:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800a6fc:	f7fe f9ba 	bl	8008a74 <VL53L0X_isqrt>
 800a700:	6138      	str	r0, [r7, #16]

	/* FixPoint2408/FixPoint2408 = uint32 */
	if (minSignalNeeded != 0)
 800a702:	69bb      	ldr	r3, [r7, #24]
 800a704:	2b00      	cmp	r3, #0
 800a706:	d008      	beq.n	800a71a <VL53L0X_calc_dmax+0x202>
		dmaxAmbient = (SignalAt0mm + minSignalNeeded/2)
 800a708:	69bb      	ldr	r3, [r7, #24]
 800a70a:	085a      	lsrs	r2, r3, #1
 800a70c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a70e:	441a      	add	r2, r3
 800a710:	69bb      	ldr	r3, [r7, #24]
 800a712:	fbb2 f3f3 	udiv	r3, r2, r3
 800a716:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a718:	e001      	b.n	800a71e <VL53L0X_calc_dmax+0x206>
			/ minSignalNeeded;
	else
		dmaxAmbient = 0;
 800a71a:	2300      	movs	r3, #0
 800a71c:	65fb      	str	r3, [r7, #92]	; 0x5c

	dmaxAmbient = VL53L0X_isqrt(dmaxAmbient);
 800a71e:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 800a720:	f7fe f9a8 	bl	8008a74 <VL53L0X_isqrt>
 800a724:	65f8      	str	r0, [r7, #92]	; 0x5c

	*pdmax_mm = dmaxDark;
 800a726:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800a728:	693a      	ldr	r2, [r7, #16]
 800a72a:	601a      	str	r2, [r3, #0]
	if (dmaxDark > dmaxAmbient)
 800a72c:	693a      	ldr	r2, [r7, #16]
 800a72e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a730:	429a      	cmp	r2, r3
 800a732:	d902      	bls.n	800a73a <VL53L0X_calc_dmax+0x222>
		*pdmax_mm = dmaxAmbient;
 800a734:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800a736:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800a738:	601a      	str	r2, [r3, #0]

	LOG_FUNCTION_END(Status);

	return Status;
 800a73a:	f997 3043 	ldrsb.w	r3, [r7, #67]	; 0x43
}
 800a73e:	4618      	mov	r0, r3
 800a740:	3768      	adds	r7, #104	; 0x68
 800a742:	46bd      	mov	sp, r7
 800a744:	bd80      	pop	{r7, pc}
 800a746:	bf00      	nop
 800a748:	fff00000 	.word	0xfff00000
 800a74c:	10624dd3 	.word	0x10624dd3

0800a750 <VL53L0X_calc_sigma_estimate>:

VL53L0X_Error VL53L0X_calc_sigma_estimate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *pSigmaEstimate,
	uint32_t *pDmax_mm)
{
 800a750:	b580      	push	{r7, lr}
 800a752:	b0b4      	sub	sp, #208	; 0xd0
 800a754:	af04      	add	r7, sp, #16
 800a756:	60f8      	str	r0, [r7, #12]
 800a758:	60b9      	str	r1, [r7, #8]
 800a75a:	607a      	str	r2, [r7, #4]
 800a75c:	603b      	str	r3, [r7, #0]
	/* Expressed in 100ths of a ns, i.e. centi-ns */
	const uint32_t cPulseEffectiveWidth_centi_ns   = 800;
 800a75e:	f44f 7348 	mov.w	r3, #800	; 0x320
 800a762:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
	/* Expressed in 100ths of a ns, i.e. centi-ns */
	const uint32_t cAmbientEffectiveWidth_centi_ns = 600;
 800a766:	f44f 7316 	mov.w	r3, #600	; 0x258
 800a76a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	const FixPoint1616_t cDfltFinalRangeIntegrationTimeMilliSecs	= 0x00190000; /* 25ms */
 800a76e:	f44f 13c8 	mov.w	r3, #1638400	; 0x190000
 800a772:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
	const uint32_t cVcselPulseWidth_ps	= 4700; /* pico secs */
 800a776:	f241 235c 	movw	r3, #4700	; 0x125c
 800a77a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	const FixPoint1616_t cSigmaEstMax	= 0x028F87AE;
 800a77e:	4b9e      	ldr	r3, [pc, #632]	; (800a9f8 <VL53L0X_calc_sigma_estimate+0x2a8>)
 800a780:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
	const FixPoint1616_t cSigmaEstRtnMax	= 0xF000;
 800a784:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 800a788:	67fb      	str	r3, [r7, #124]	; 0x7c
	const FixPoint1616_t cAmbToSignalRatioMax = 0xF0000000/
 800a78a:	f04f 4270 	mov.w	r2, #4026531840	; 0xf0000000
 800a78e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a792:	fbb2 f3f3 	udiv	r3, r2, r3
 800a796:	67bb      	str	r3, [r7, #120]	; 0x78
		cAmbientEffectiveWidth_centi_ns;
	/* Time Of Flight per mm (6.6 pico secs) */
	const FixPoint1616_t cTOF_per_mm_ps		= 0x0006999A;
 800a798:	4b98      	ldr	r3, [pc, #608]	; (800a9fc <VL53L0X_calc_sigma_estimate+0x2ac>)
 800a79a:	677b      	str	r3, [r7, #116]	; 0x74
	const uint32_t c16BitRoundingParam		= 0x00008000;
 800a79c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a7a0:	673b      	str	r3, [r7, #112]	; 0x70
	const FixPoint1616_t cMaxXTalk_kcps		= 0x00320000;
 800a7a2:	f44f 1348 	mov.w	r3, #3276800	; 0x320000
 800a7a6:	66fb      	str	r3, [r7, #108]	; 0x6c
	const uint32_t cPllPeriod_ps			= 1655;
 800a7a8:	f240 6377 	movw	r3, #1655	; 0x677
 800a7ac:	66bb      	str	r3, [r7, #104]	; 0x68
	FixPoint1616_t xTalkCorrection;
	FixPoint1616_t ambientRate_kcps;
	FixPoint1616_t peakSignalRate_kcps;
	FixPoint1616_t xTalkCompRate_mcps;
	uint32_t xTalkCompRate_kcps;
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a7ae:	2300      	movs	r3, #0
 800a7b0:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
	 * Estimates the range sigma
	 */

	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationRateMegaCps,
 800a7b4:	68fb      	ldr	r3, [r7, #12]
 800a7b6:	6a1b      	ldr	r3, [r3, #32]
 800a7b8:	617b      	str	r3, [r7, #20]
	 * We work in kcps rather than mcps as this helps keep within the
	 * confines of the 32 Fix1616 type.
	 */

	ambientRate_kcps =
		(pRangingMeasurementData->AmbientRateRtnMegaCps * 1000) >> 16;
 800a7ba:	68bb      	ldr	r3, [r7, #8]
 800a7bc:	691b      	ldr	r3, [r3, #16]
 800a7be:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800a7c2:	fb02 f303 	mul.w	r3, r2, r3
	ambientRate_kcps =
 800a7c6:	0c1b      	lsrs	r3, r3, #16
 800a7c8:	667b      	str	r3, [r7, #100]	; 0x64

	correctedSignalRate_mcps =
 800a7ca:	68bb      	ldr	r3, [r7, #8]
 800a7cc:	68db      	ldr	r3, [r3, #12]
 800a7ce:	663b      	str	r3, [r7, #96]	; 0x60
		pRangingMeasurementData->SignalRateRtnMegaCps;


	Status = VL53L0X_get_total_signal_rate(
 800a7d0:	f107 0310 	add.w	r3, r7, #16
 800a7d4:	461a      	mov	r2, r3
 800a7d6:	68b9      	ldr	r1, [r7, #8]
 800a7d8:	68f8      	ldr	r0, [r7, #12]
 800a7da:	f7ff fe78 	bl	800a4ce <VL53L0X_get_total_signal_rate>
 800a7de:	4603      	mov	r3, r0
 800a7e0:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
		Dev, pRangingMeasurementData, &totalSignalRate_mcps);
	Status = VL53L0X_get_total_xtalk_rate(
 800a7e4:	f107 0314 	add.w	r3, r7, #20
 800a7e8:	461a      	mov	r2, r3
 800a7ea:	68b9      	ldr	r1, [r7, #8]
 800a7ec:	68f8      	ldr	r0, [r7, #12]
 800a7ee:	f7ff fe3f 	bl	800a470 <VL53L0X_get_total_xtalk_rate>
 800a7f2:	4603      	mov	r3, r0
 800a7f4:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f


	/* Signal rate measurement provided by device is the
	 * peak signal rate, not average.
	 */
	peakSignalRate_kcps = (totalSignalRate_mcps * 1000);
 800a7f8:	693b      	ldr	r3, [r7, #16]
 800a7fa:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800a7fe:	fb02 f303 	mul.w	r3, r2, r3
 800a802:	65fb      	str	r3, [r7, #92]	; 0x5c
	peakSignalRate_kcps = (peakSignalRate_kcps + 0x8000) >> 16;
 800a804:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a806:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800a80a:	0c1b      	lsrs	r3, r3, #16
 800a80c:	65fb      	str	r3, [r7, #92]	; 0x5c

	xTalkCompRate_kcps = xTalkCompRate_mcps * 1000;
 800a80e:	697b      	ldr	r3, [r7, #20]
 800a810:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800a814:	fb02 f303 	mul.w	r3, r2, r3
 800a818:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

	if (xTalkCompRate_kcps > cMaxXTalk_kcps)
 800a81c:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 800a820:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a822:	429a      	cmp	r2, r3
 800a824:	d902      	bls.n	800a82c <VL53L0X_calc_sigma_estimate+0xdc>
		xTalkCompRate_kcps = cMaxXTalk_kcps;
 800a826:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a828:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

	if (Status == VL53L0X_ERROR_NONE) {
 800a82c:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
 800a830:	2b00      	cmp	r3, #0
 800a832:	d168      	bne.n	800a906 <VL53L0X_calc_sigma_estimate+0x1b6>

		/* Calculate final range macro periods */
		finalRangeTimeoutMicroSecs = VL53L0X_GETDEVICESPECIFICPARAMETER(
 800a834:	68fb      	ldr	r3, [r7, #12]
 800a836:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800a83a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
			Dev, FinalRangeTimeoutMicroSecs);

		finalRangeVcselPCLKS = VL53L0X_GETDEVICESPECIFICPARAMETER(
 800a83e:	68fb      	ldr	r3, [r7, #12]
 800a840:	f893 30e0 	ldrb.w	r3, [r3, #224]	; 0xe0
 800a844:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
			Dev, FinalRangeVcselPulsePeriod);

		finalRangeMacroPCLKS = VL53L0X_calc_timeout_mclks(
 800a848:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 800a84c:	461a      	mov	r2, r3
 800a84e:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
 800a852:	68f8      	ldr	r0, [r7, #12]
 800a854:	f7fe feb2 	bl	80095bc <VL53L0X_calc_timeout_mclks>
 800a858:	6578      	str	r0, [r7, #84]	; 0x54
			Dev, finalRangeTimeoutMicroSecs, finalRangeVcselPCLKS);

		/* Calculate pre-range macro periods */
		preRangeTimeoutMicroSecs = VL53L0X_GETDEVICESPECIFICPARAMETER(
 800a85a:	68fb      	ldr	r3, [r7, #12]
 800a85c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800a860:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
			Dev, PreRangeTimeoutMicroSecs);

		preRangeVcselPCLKS = VL53L0X_GETDEVICESPECIFICPARAMETER(
 800a864:	68fb      	ldr	r3, [r7, #12]
 800a866:	f893 30e8 	ldrb.w	r3, [r3, #232]	; 0xe8
 800a86a:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
			Dev, PreRangeVcselPulsePeriod);

		preRangeMacroPCLKS = VL53L0X_calc_timeout_mclks(
 800a86e:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 800a872:	461a      	mov	r2, r3
 800a874:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
 800a878:	68f8      	ldr	r0, [r7, #12]
 800a87a:	f7fe fe9f 	bl	80095bc <VL53L0X_calc_timeout_mclks>
 800a87e:	64f8      	str	r0, [r7, #76]	; 0x4c
			Dev, preRangeTimeoutMicroSecs, preRangeVcselPCLKS);

		vcselWidth = 3;
 800a880:	2303      	movs	r3, #3
 800a882:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
		if (finalRangeVcselPCLKS == 8)
 800a886:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 800a88a:	2b08      	cmp	r3, #8
 800a88c:	d102      	bne.n	800a894 <VL53L0X_calc_sigma_estimate+0x144>
			vcselWidth = 2;
 800a88e:	2302      	movs	r3, #2
 800a890:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98


		peakVcselDuration_us = vcselWidth * 2048 *
			(preRangeMacroPCLKS + finalRangeMacroPCLKS);
 800a894:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800a896:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a898:	4413      	add	r3, r2
		peakVcselDuration_us = vcselWidth * 2048 *
 800a89a:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800a89e:	fb02 f303 	mul.w	r3, r2, r3
 800a8a2:	02db      	lsls	r3, r3, #11
 800a8a4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
		peakVcselDuration_us = (peakVcselDuration_us + 500)/1000;
 800a8a8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800a8ac:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800a8b0:	4a53      	ldr	r2, [pc, #332]	; (800aa00 <VL53L0X_calc_sigma_estimate+0x2b0>)
 800a8b2:	fba2 2303 	umull	r2, r3, r2, r3
 800a8b6:	099b      	lsrs	r3, r3, #6
 800a8b8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
		peakVcselDuration_us *= cPllPeriod_ps;
 800a8bc:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800a8c0:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800a8c2:	fb02 f303 	mul.w	r3, r2, r3
 800a8c6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
		peakVcselDuration_us = (peakVcselDuration_us + 500)/1000;
 800a8ca:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800a8ce:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800a8d2:	4a4b      	ldr	r2, [pc, #300]	; (800aa00 <VL53L0X_calc_sigma_estimate+0x2b0>)
 800a8d4:	fba2 2303 	umull	r2, r3, r2, r3
 800a8d8:	099b      	lsrs	r3, r3, #6
 800a8da:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

		/* Fix1616 >> 8 = Fix2408 */
		totalSignalRate_mcps = (totalSignalRate_mcps + 0x80) >> 8;
 800a8de:	693b      	ldr	r3, [r7, #16]
 800a8e0:	3380      	adds	r3, #128	; 0x80
 800a8e2:	0a1b      	lsrs	r3, r3, #8
 800a8e4:	613b      	str	r3, [r7, #16]

		/* Fix2408 * uint32 = Fix2408 */
		vcselTotalEventsRtn = totalSignalRate_mcps *
 800a8e6:	693a      	ldr	r2, [r7, #16]
 800a8e8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800a8ec:	fb02 f303 	mul.w	r3, r2, r3
 800a8f0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
			peakVcselDuration_us;

		/* Fix2408 >> 8 = uint32 */
		vcselTotalEventsRtn = (vcselTotalEventsRtn + 0x80) >> 8;
 800a8f4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800a8f8:	3380      	adds	r3, #128	; 0x80
 800a8fa:	0a1b      	lsrs	r3, r3, #8
 800a8fc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

		/* Fix2408 << 8 = Fix1616 = */
		totalSignalRate_mcps <<= 8;
 800a900:	693b      	ldr	r3, [r7, #16]
 800a902:	021b      	lsls	r3, r3, #8
 800a904:	613b      	str	r3, [r7, #16]
	}

	if (Status != VL53L0X_ERROR_NONE) {
 800a906:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
 800a90a:	2b00      	cmp	r3, #0
 800a90c:	d002      	beq.n	800a914 <VL53L0X_calc_sigma_estimate+0x1c4>
		LOG_FUNCTION_END(Status);
		return Status;
 800a90e:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
 800a912:	e15e      	b.n	800abd2 <VL53L0X_calc_sigma_estimate+0x482>
	}

	if (peakSignalRate_kcps == 0) {
 800a914:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a916:	2b00      	cmp	r3, #0
 800a918:	d10c      	bne.n	800a934 <VL53L0X_calc_sigma_estimate+0x1e4>
		*pSigmaEstimate = cSigmaEstMax;
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800a920:	601a      	str	r2, [r3, #0]
		PALDevDataSet(Dev, SigmaEstimate, cSigmaEstMax);
 800a922:	68fb      	ldr	r3, [r7, #12]
 800a924:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800a928:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
		*pDmax_mm = 0;
 800a92c:	683b      	ldr	r3, [r7, #0]
 800a92e:	2200      	movs	r2, #0
 800a930:	601a      	str	r2, [r3, #0]
 800a932:	e14c      	b.n	800abce <VL53L0X_calc_sigma_estimate+0x47e>
	} else {
		if (vcselTotalEventsRtn < 1)
 800a934:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800a938:	2b00      	cmp	r3, #0
 800a93a:	d102      	bne.n	800a942 <VL53L0X_calc_sigma_estimate+0x1f2>
			vcselTotalEventsRtn = 1;
 800a93c:	2301      	movs	r3, #1
 800a93e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

		sigmaEstimateP1 = cPulseEffectiveWidth_centi_ns;
 800a942:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800a946:	64bb      	str	r3, [r7, #72]	; 0x48

		/* ((FixPoint1616 << 16)* uint32)/uint32 = FixPoint1616 */
		sigmaEstimateP2 = (ambientRate_kcps << 16)/peakSignalRate_kcps;
 800a948:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a94a:	041a      	lsls	r2, r3, #16
 800a94c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a94e:	fbb2 f3f3 	udiv	r3, r2, r3
 800a952:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
		if (sigmaEstimateP2 > cAmbToSignalRatioMax) {
 800a956:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800a95a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a95c:	429a      	cmp	r2, r3
 800a95e:	d902      	bls.n	800a966 <VL53L0X_calc_sigma_estimate+0x216>
			/* Clip to prevent overflow. Will ensure safe
			 * max result. */
			sigmaEstimateP2 = cAmbToSignalRatioMax;
 800a960:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a962:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
		}
		sigmaEstimateP2 *= cAmbientEffectiveWidth_centi_ns;
 800a966:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800a96a:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800a96e:	fb02 f303 	mul.w	r3, r2, r3
 800a972:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

		sigmaEstimateP3 = 2 * VL53L0X_isqrt(vcselTotalEventsRtn * 12);
 800a976:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800a97a:	4613      	mov	r3, r2
 800a97c:	005b      	lsls	r3, r3, #1
 800a97e:	4413      	add	r3, r2
 800a980:	009b      	lsls	r3, r3, #2
 800a982:	4618      	mov	r0, r3
 800a984:	f7fe f876 	bl	8008a74 <VL53L0X_isqrt>
 800a988:	4603      	mov	r3, r0
 800a98a:	005b      	lsls	r3, r3, #1
 800a98c:	647b      	str	r3, [r7, #68]	; 0x44

		/* uint32 * FixPoint1616 = FixPoint1616 */
		deltaT_ps = pRangingMeasurementData->RangeMilliMeter *
 800a98e:	68bb      	ldr	r3, [r7, #8]
 800a990:	891b      	ldrh	r3, [r3, #8]
 800a992:	461a      	mov	r2, r3
 800a994:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a996:	fb02 f303 	mul.w	r3, r2, r3
 800a99a:	643b      	str	r3, [r7, #64]	; 0x40
		 * (uint32 << 16) - FixPoint1616 = FixPoint1616.
		 * Divide result by 1000 to convert to mcps.
		 * 500 is added to ensure rounding when integer division
		 * truncates.
		 */
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 800a99c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a99e:	041a      	lsls	r2, r3, #16
			2 * xTalkCompRate_kcps) + 500)/1000;
 800a9a0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800a9a4:	005b      	lsls	r3, r3, #1
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 800a9a6:	1ad3      	subs	r3, r2, r3
			2 * xTalkCompRate_kcps) + 500)/1000;
 800a9a8:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 800a9ac:	4a14      	ldr	r2, [pc, #80]	; (800aa00 <VL53L0X_calc_sigma_estimate+0x2b0>)
 800a9ae:	fba2 2303 	umull	r2, r3, r2, r3
 800a9b2:	099b      	lsrs	r3, r3, #6
 800a9b4:	63fb      	str	r3, [r7, #60]	; 0x3c

		/* vcselRate + xtalkCompRate */
		diff2_mcps = ((peakSignalRate_kcps << 16) + 500)/1000;
 800a9b6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a9b8:	041b      	lsls	r3, r3, #16
 800a9ba:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800a9be:	4a10      	ldr	r2, [pc, #64]	; (800aa00 <VL53L0X_calc_sigma_estimate+0x2b0>)
 800a9c0:	fba2 2303 	umull	r2, r3, r2, r3
 800a9c4:	099b      	lsrs	r3, r3, #6
 800a9c6:	63bb      	str	r3, [r7, #56]	; 0x38

		/* Shift by 8 bits to increase resolution prior to the
		 * division */
		diff1_mcps <<= 8;
 800a9c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a9ca:	021b      	lsls	r3, r3, #8
 800a9cc:	63fb      	str	r3, [r7, #60]	; 0x3c

		/* FixPoint0824/FixPoint1616 = FixPoint2408 */
		xTalkCorrection	 = abs(diff1_mcps/diff2_mcps);
 800a9ce:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800a9d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a9d2:	fbb2 f3f3 	udiv	r3, r2, r3
 800a9d6:	2b00      	cmp	r3, #0
 800a9d8:	bfb8      	it	lt
 800a9da:	425b      	neglt	r3, r3
 800a9dc:	637b      	str	r3, [r7, #52]	; 0x34

		/* FixPoint2408 << 8 = FixPoint1616 */
		xTalkCorrection <<= 8;
 800a9de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a9e0:	021b      	lsls	r3, r3, #8
 800a9e2:	637b      	str	r3, [r7, #52]	; 0x34

		if(pRangingMeasurementData->RangeStatus != 0){
 800a9e4:	68bb      	ldr	r3, [r7, #8]
 800a9e6:	7e1b      	ldrb	r3, [r3, #24]
 800a9e8:	2b00      	cmp	r3, #0
 800a9ea:	d00b      	beq.n	800aa04 <VL53L0X_calc_sigma_estimate+0x2b4>
			pwMult = 1 << 16;
 800a9ec:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800a9f0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800a9f4:	e033      	b.n	800aa5e <VL53L0X_calc_sigma_estimate+0x30e>
 800a9f6:	bf00      	nop
 800a9f8:	028f87ae 	.word	0x028f87ae
 800a9fc:	0006999a 	.word	0x0006999a
 800aa00:	10624dd3 	.word	0x10624dd3
		} else {
			/* FixPoint1616/uint32 = FixPoint1616 */
			pwMult = deltaT_ps/cVcselPulseWidth_ps; /* smaller than 1.0f */
 800aa04:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800aa06:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800aa0a:	fbb2 f3f3 	udiv	r3, r2, r3
 800aa0e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			/*
			 * FixPoint1616 * FixPoint1616 = FixPoint3232, however both
			 * values are small enough such that32 bits will not be
			 * exceeded.
			 */
			pwMult *= ((1 << 16) - xTalkCorrection);
 800aa12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aa14:	f5c3 3280 	rsb	r2, r3, #65536	; 0x10000
 800aa18:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800aa1c:	fb02 f303 	mul.w	r3, r2, r3
 800aa20:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

			/* (FixPoint3232 >> 16) = FixPoint1616 */
			pwMult =  (pwMult + c16BitRoundingParam) >> 16;
 800aa24:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800aa28:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800aa2a:	4413      	add	r3, r2
 800aa2c:	0c1b      	lsrs	r3, r3, #16
 800aa2e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

			/* FixPoint1616 + FixPoint1616 = FixPoint1616 */
			pwMult += (1 << 16);
 800aa32:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800aa36:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 800aa3a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			/*
			 * At this point the value will be 1.xx, therefore if we square
			 * the value this will exceed 32 bits. To address this perform
			 * a single shift to the right before the multiplication.
			 */
			pwMult >>= 1;
 800aa3e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800aa42:	085b      	lsrs	r3, r3, #1
 800aa44:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			/* FixPoint1715 * FixPoint1715 = FixPoint3430 */
			pwMult = pwMult * pwMult;
 800aa48:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800aa4c:	fb03 f303 	mul.w	r3, r3, r3
 800aa50:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

			/* (FixPoint3430 >> 14) = Fix1616 */
			pwMult >>= 14;
 800aa54:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800aa58:	0b9b      	lsrs	r3, r3, #14
 800aa5a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
		}

		/* FixPoint1616 * uint32 = FixPoint1616 */
		sqr1 = pwMult * sigmaEstimateP1;
 800aa5e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800aa62:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800aa64:	fb02 f303 	mul.w	r3, r2, r3
 800aa68:	633b      	str	r3, [r7, #48]	; 0x30

		/* (FixPoint1616 >> 16) = FixPoint3200 */
		sqr1 = (sqr1 + 0x8000) >> 16;
 800aa6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa6c:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800aa70:	0c1b      	lsrs	r3, r3, #16
 800aa72:	633b      	str	r3, [r7, #48]	; 0x30

		/* FixPoint3200 * FixPoint3200 = FixPoint6400 */
		sqr1 *= sqr1;
 800aa74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa76:	fb03 f303 	mul.w	r3, r3, r3
 800aa7a:	633b      	str	r3, [r7, #48]	; 0x30

		sqr2 = sigmaEstimateP2;
 800aa7c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800aa80:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* (FixPoint1616 >> 16) = FixPoint3200 */
		sqr2 = (sqr2 + 0x8000) >> 16;
 800aa82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa84:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800aa88:	0c1b      	lsrs	r3, r3, #16
 800aa8a:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* FixPoint3200 * FixPoint3200 = FixPoint6400 */
		sqr2 *= sqr2;
 800aa8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa8e:	fb03 f303 	mul.w	r3, r3, r3
 800aa92:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* FixPoint64000 + FixPoint6400 = FixPoint6400 */
		sqrSum = sqr1 + sqr2;
 800aa94:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800aa96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa98:	4413      	add	r3, r2
 800aa9a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* SQRT(FixPoin6400) = FixPoint3200 */
		sqrtResult_centi_ns = VL53L0X_isqrt(sqrSum);
 800aa9c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800aa9e:	f7fd ffe9 	bl	8008a74 <VL53L0X_isqrt>
 800aaa2:	6278      	str	r0, [r7, #36]	; 0x24

		/* (FixPoint3200 << 16) = FixPoint1616 */
		sqrtResult_centi_ns <<= 16;
 800aaa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aaa6:	041b      	lsls	r3, r3, #16
 800aaa8:	627b      	str	r3, [r7, #36]	; 0x24
		/*
		 * Note that the Speed Of Light is expressed in um per 1E-10
		 * seconds (2997) Therefore to get mm/ns we have to divide by
		 * 10000
		 */
		sigmaEstRtn = (((sqrtResult_centi_ns+50)/100) /
 800aaaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aaac:	3332      	adds	r3, #50	; 0x32
 800aaae:	4a4b      	ldr	r2, [pc, #300]	; (800abdc <VL53L0X_calc_sigma_estimate+0x48c>)
 800aab0:	fba2 2303 	umull	r2, r3, r2, r3
 800aab4:	095a      	lsrs	r2, r3, #5
 800aab6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800aab8:	fbb2 f3f3 	udiv	r3, r2, r3
 800aabc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
				sigmaEstimateP3);
		sigmaEstRtn		 *= VL53L0X_SPEED_OF_LIGHT_IN_AIR;
 800aac0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800aac4:	f640 32b5 	movw	r2, #2997	; 0xbb5
 800aac8:	fb02 f303 	mul.w	r3, r2, r3
 800aacc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

		/* Add 5000 before dividing by 10000 to ensure rounding. */
		sigmaEstRtn		 += 5000;
 800aad0:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800aad4:	f241 3388 	movw	r3, #5000	; 0x1388
 800aad8:	4413      	add	r3, r2
 800aada:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
		sigmaEstRtn		 /= 10000;
 800aade:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800aae2:	4a3f      	ldr	r2, [pc, #252]	; (800abe0 <VL53L0X_calc_sigma_estimate+0x490>)
 800aae4:	fba2 2303 	umull	r2, r3, r2, r3
 800aae8:	0b5b      	lsrs	r3, r3, #13
 800aaea:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

		if (sigmaEstRtn > cSigmaEstRtnMax) {
 800aaee:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800aaf2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800aaf4:	429a      	cmp	r2, r3
 800aaf6:	d902      	bls.n	800aafe <VL53L0X_calc_sigma_estimate+0x3ae>
			/* Clip to prevent overflow. Will ensure safe
			 * max result. */
			sigmaEstRtn = cSigmaEstRtnMax;
 800aaf8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800aafa:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
		}
		finalRangeIntegrationTimeMilliSecs =
			(finalRangeTimeoutMicroSecs + preRangeTimeoutMicroSecs + 500)/1000;
 800aafe:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800ab02:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800ab06:	4413      	add	r3, r2
 800ab08:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
		finalRangeIntegrationTimeMilliSecs =
 800ab0c:	4a35      	ldr	r2, [pc, #212]	; (800abe4 <VL53L0X_calc_sigma_estimate+0x494>)
 800ab0e:	fba2 2303 	umull	r2, r3, r2, r3
 800ab12:	099b      	lsrs	r3, r3, #6
 800ab14:	623b      	str	r3, [r7, #32]
		/* sigmaEstRef = 1mm * 25ms/final range integration time (inc pre-range)
		 * sqrt(FixPoint1616/int) = FixPoint2408)
		 */
		sigmaEstRef =
			VL53L0X_isqrt((cDfltFinalRangeIntegrationTimeMilliSecs +
				finalRangeIntegrationTimeMilliSecs/2)/
 800ab16:	6a3b      	ldr	r3, [r7, #32]
 800ab18:	085a      	lsrs	r2, r3, #1
			VL53L0X_isqrt((cDfltFinalRangeIntegrationTimeMilliSecs +
 800ab1a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800ab1e:	441a      	add	r2, r3
 800ab20:	6a3b      	ldr	r3, [r7, #32]
 800ab22:	fbb2 f3f3 	udiv	r3, r2, r3
 800ab26:	4618      	mov	r0, r3
 800ab28:	f7fd ffa4 	bl	8008a74 <VL53L0X_isqrt>
 800ab2c:	61f8      	str	r0, [r7, #28]
				finalRangeIntegrationTimeMilliSecs);

		/* FixPoint2408 << 8 = FixPoint1616 */
		sigmaEstRef <<= 8;
 800ab2e:	69fb      	ldr	r3, [r7, #28]
 800ab30:	021b      	lsls	r3, r3, #8
 800ab32:	61fb      	str	r3, [r7, #28]
		sigmaEstRef = (sigmaEstRef + 500)/1000;
 800ab34:	69fb      	ldr	r3, [r7, #28]
 800ab36:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800ab3a:	4a2a      	ldr	r2, [pc, #168]	; (800abe4 <VL53L0X_calc_sigma_estimate+0x494>)
 800ab3c:	fba2 2303 	umull	r2, r3, r2, r3
 800ab40:	099b      	lsrs	r3, r3, #6
 800ab42:	61fb      	str	r3, [r7, #28]

		/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
		sqr1 = sigmaEstRtn * sigmaEstRtn;
 800ab44:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800ab48:	fb03 f303 	mul.w	r3, r3, r3
 800ab4c:	633b      	str	r3, [r7, #48]	; 0x30
		/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
		sqr2 = sigmaEstRef * sigmaEstRef;
 800ab4e:	69fb      	ldr	r3, [r7, #28]
 800ab50:	fb03 f303 	mul.w	r3, r3, r3
 800ab54:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* sqrt(FixPoint3232) = FixPoint1616 */
		sqrtResult = VL53L0X_isqrt((sqr1 + sqr2));
 800ab56:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ab58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab5a:	4413      	add	r3, r2
 800ab5c:	4618      	mov	r0, r3
 800ab5e:	f7fd ff89 	bl	8008a74 <VL53L0X_isqrt>
 800ab62:	61b8      	str	r0, [r7, #24]
		 * Note that the Shift by 4 bits increases resolution prior to
		 * the sqrt, therefore the result must be shifted by 2 bits to
		 * the right to revert back to the FixPoint1616 format.
		 */

		sigmaEstimate	 = 1000 * sqrtResult;
 800ab64:	69bb      	ldr	r3, [r7, #24]
 800ab66:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800ab6a:	fb02 f303 	mul.w	r3, r2, r3
 800ab6e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

		if ((peakSignalRate_kcps < 1) || (vcselTotalEventsRtn < 1) ||
 800ab72:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ab74:	2b00      	cmp	r3, #0
 800ab76:	d009      	beq.n	800ab8c <VL53L0X_calc_sigma_estimate+0x43c>
 800ab78:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800ab7c:	2b00      	cmp	r3, #0
 800ab7e:	d005      	beq.n	800ab8c <VL53L0X_calc_sigma_estimate+0x43c>
 800ab80:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 800ab84:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800ab88:	429a      	cmp	r2, r3
 800ab8a:	d903      	bls.n	800ab94 <VL53L0X_calc_sigma_estimate+0x444>
				(sigmaEstimate > cSigmaEstMax)) {
				sigmaEstimate = cSigmaEstMax;
 800ab8c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800ab90:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
		}

		*pSigmaEstimate = (uint32_t)(sigmaEstimate);
 800ab94:	687b      	ldr	r3, [r7, #4]
 800ab96:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 800ab9a:	601a      	str	r2, [r3, #0]
		PALDevDataSet(Dev, SigmaEstimate, *pSigmaEstimate);
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	681a      	ldr	r2, [r3, #0]
 800aba0:	68fb      	ldr	r3, [r7, #12]
 800aba2:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
		Status = VL53L0X_calc_dmax(
 800aba6:	6939      	ldr	r1, [r7, #16]
 800aba8:	683b      	ldr	r3, [r7, #0]
 800abaa:	9303      	str	r3, [sp, #12]
 800abac:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800abb0:	9302      	str	r3, [sp, #8]
 800abb2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800abb6:	9301      	str	r3, [sp, #4]
 800abb8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800abba:	9300      	str	r3, [sp, #0]
 800abbc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800abc0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800abc2:	68f8      	ldr	r0, [r7, #12]
 800abc4:	f7ff fca8 	bl	800a518 <VL53L0X_calc_dmax>
 800abc8:	4603      	mov	r3, r0
 800abca:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
			peakVcselDuration_us,
			pDmax_mm);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800abce:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
}
 800abd2:	4618      	mov	r0, r3
 800abd4:	37c0      	adds	r7, #192	; 0xc0
 800abd6:	46bd      	mov	sp, r7
 800abd8:	bd80      	pop	{r7, pc}
 800abda:	bf00      	nop
 800abdc:	51eb851f 	.word	0x51eb851f
 800abe0:	d1b71759 	.word	0xd1b71759
 800abe4:	10624dd3 	.word	0x10624dd3

0800abe8 <VL53L0X_get_pal_range_status>:
		uint8_t DeviceRangeStatus,
		FixPoint1616_t SignalRate,
		uint16_t EffectiveSpadRtnCount,
		VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
		uint8_t *pPalRangeStatus)
{
 800abe8:	b580      	push	{r7, lr}
 800abea:	b090      	sub	sp, #64	; 0x40
 800abec:	af00      	add	r7, sp, #0
 800abee:	60f8      	str	r0, [r7, #12]
 800abf0:	607a      	str	r2, [r7, #4]
 800abf2:	461a      	mov	r2, r3
 800abf4:	460b      	mov	r3, r1
 800abf6:	72fb      	strb	r3, [r7, #11]
 800abf8:	4613      	mov	r3, r2
 800abfa:	813b      	strh	r3, [r7, #8]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800abfc:	2300      	movs	r3, #0
 800abfe:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	uint8_t NoneFlag;
	uint8_t SigmaLimitflag = 0;
 800ac02:	2300      	movs	r3, #0
 800ac04:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
	uint8_t SignalRefClipflag = 0;
 800ac08:	2300      	movs	r3, #0
 800ac0a:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
	uint8_t RangeIgnoreThresholdflag = 0;
 800ac0e:	2300      	movs	r3, #0
 800ac10:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	uint8_t SigmaLimitCheckEnable = 0;
 800ac14:	2300      	movs	r3, #0
 800ac16:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	uint8_t SignalRateFinalRangeLimitCheckEnable = 0;
 800ac1a:	2300      	movs	r3, #0
 800ac1c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
	uint8_t SignalRefClipLimitCheckEnable = 0;
 800ac20:	2300      	movs	r3, #0
 800ac22:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
	uint8_t RangeIgnoreThresholdLimitCheckEnable = 0;
 800ac26:	2300      	movs	r3, #0
 800ac28:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	FixPoint1616_t SigmaEstimate;
	FixPoint1616_t SigmaLimitValue;
	FixPoint1616_t SignalRefClipValue;
	FixPoint1616_t RangeIgnoreThresholdValue;
	FixPoint1616_t SignalRatePerSpad;
	uint8_t DeviceRangeStatusInternal = 0;
 800ac2c:	2300      	movs	r3, #0
 800ac2e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
	uint16_t tmpWord = 0;
 800ac32:	2300      	movs	r3, #0
 800ac34:	82fb      	strh	r3, [r7, #22]
	uint8_t Temp8;
	uint32_t Dmax_mm = 0;
 800ac36:	2300      	movs	r3, #0
 800ac38:	613b      	str	r3, [r7, #16]
	 * the value 11 in the DeviceRangeStatus.
	 * In addition, the SigmaEstimator is not included in the VL53L0X
	 * DeviceRangeStatus, this will be added in the PalRangeStatus.
	 */

	DeviceRangeStatusInternal = ((DeviceRangeStatus & 0x78) >> 3);
 800ac3a:	7afb      	ldrb	r3, [r7, #11]
 800ac3c:	10db      	asrs	r3, r3, #3
 800ac3e:	b2db      	uxtb	r3, r3
 800ac40:	f003 030f 	and.w	r3, r3, #15
 800ac44:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32

	if (DeviceRangeStatusInternal == 0 ||
 800ac48:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800ac4c:	2b00      	cmp	r3, #0
 800ac4e:	d017      	beq.n	800ac80 <VL53L0X_get_pal_range_status+0x98>
 800ac50:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800ac54:	2b05      	cmp	r3, #5
 800ac56:	d013      	beq.n	800ac80 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 5 ||
 800ac58:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800ac5c:	2b07      	cmp	r3, #7
 800ac5e:	d00f      	beq.n	800ac80 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 7 ||
 800ac60:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800ac64:	2b0c      	cmp	r3, #12
 800ac66:	d00b      	beq.n	800ac80 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 12 ||
 800ac68:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800ac6c:	2b0d      	cmp	r3, #13
 800ac6e:	d007      	beq.n	800ac80 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 13 ||
 800ac70:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800ac74:	2b0e      	cmp	r3, #14
 800ac76:	d003      	beq.n	800ac80 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 14 ||
 800ac78:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800ac7c:	2b0f      	cmp	r3, #15
 800ac7e:	d103      	bne.n	800ac88 <VL53L0X_get_pal_range_status+0xa0>
		DeviceRangeStatusInternal == 15
			) {
		NoneFlag = 1;
 800ac80:	2301      	movs	r3, #1
 800ac82:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 800ac86:	e002      	b.n	800ac8e <VL53L0X_get_pal_range_status+0xa6>
	} else {
		NoneFlag = 0;
 800ac88:	2300      	movs	r3, #0
 800ac8a:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e

	/*
	 * Check if Sigma limit is enabled, if yes then do comparison with limit
	 * value and put the result back into pPalRangeStatus.
	 */
	if (Status == VL53L0X_ERROR_NONE)
 800ac8e:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800ac92:	2b00      	cmp	r3, #0
 800ac94:	d109      	bne.n	800acaa <VL53L0X_get_pal_range_status+0xc2>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 800ac96:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 800ac9a:	461a      	mov	r2, r3
 800ac9c:	2100      	movs	r1, #0
 800ac9e:	68f8      	ldr	r0, [r7, #12]
 800aca0:	f7fc f9ec 	bl	800707c <VL53L0X_GetLimitCheckEnable>
 800aca4:	4603      	mov	r3, r0
 800aca6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
			&SigmaLimitCheckEnable);

	if ((SigmaLimitCheckEnable != 0) && (Status == VL53L0X_ERROR_NONE)) {
 800acaa:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800acae:	2b00      	cmp	r3, #0
 800acb0:	d02e      	beq.n	800ad10 <VL53L0X_get_pal_range_status+0x128>
 800acb2:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800acb6:	2b00      	cmp	r3, #0
 800acb8:	d12a      	bne.n	800ad10 <VL53L0X_get_pal_range_status+0x128>
		/*
		* compute the Sigma and check with limit
		*/
		Status = VL53L0X_calc_sigma_estimate(
 800acba:	f107 0310 	add.w	r3, r7, #16
 800acbe:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800acc2:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800acc4:	68f8      	ldr	r0, [r7, #12]
 800acc6:	f7ff fd43 	bl	800a750 <VL53L0X_calc_sigma_estimate>
 800acca:	4603      	mov	r3, r0
 800accc:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			Dev,
			pRangingMeasurementData,
			&SigmaEstimate,
			&Dmax_mm);
		if (Status == VL53L0X_ERROR_NONE)
 800acd0:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800acd4:	2b00      	cmp	r3, #0
 800acd6:	d103      	bne.n	800ace0 <VL53L0X_get_pal_range_status+0xf8>
			pRangingMeasurementData->RangeDMaxMilliMeter = Dmax_mm;
 800acd8:	693b      	ldr	r3, [r7, #16]
 800acda:	b29a      	uxth	r2, r3
 800acdc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800acde:	815a      	strh	r2, [r3, #10]

		if (Status == VL53L0X_ERROR_NONE) {
 800ace0:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800ace4:	2b00      	cmp	r3, #0
 800ace6:	d113      	bne.n	800ad10 <VL53L0X_get_pal_range_status+0x128>
			Status = VL53L0X_GetLimitCheckValue(Dev,
 800ace8:	f107 0320 	add.w	r3, r7, #32
 800acec:	461a      	mov	r2, r3
 800acee:	2100      	movs	r1, #0
 800acf0:	68f8      	ldr	r0, [r7, #12]
 800acf2:	f7fc fa49 	bl	8007188 <VL53L0X_GetLimitCheckValue>
 800acf6:	4603      	mov	r3, r0
 800acf8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				&SigmaLimitValue);

			if ((SigmaLimitValue > 0) &&
 800acfc:	6a3b      	ldr	r3, [r7, #32]
 800acfe:	2b00      	cmp	r3, #0
 800ad00:	d006      	beq.n	800ad10 <VL53L0X_get_pal_range_status+0x128>
				(SigmaEstimate > SigmaLimitValue))
 800ad02:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ad04:	6a3b      	ldr	r3, [r7, #32]
			if ((SigmaLimitValue > 0) &&
 800ad06:	429a      	cmp	r2, r3
 800ad08:	d902      	bls.n	800ad10 <VL53L0X_get_pal_range_status+0x128>
					/* Limit Fail */
					SigmaLimitflag = 1;
 800ad0a:	2301      	movs	r3, #1
 800ad0c:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d

	/*
	 * Check if Signal ref clip limit is enabled, if yes then do comparison
	 * with limit value and put the result back into pPalRangeStatus.
	 */
	if (Status == VL53L0X_ERROR_NONE)
 800ad10:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800ad14:	2b00      	cmp	r3, #0
 800ad16:	d109      	bne.n	800ad2c <VL53L0X_get_pal_range_status+0x144>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 800ad18:	f107 0329 	add.w	r3, r7, #41	; 0x29
 800ad1c:	461a      	mov	r2, r3
 800ad1e:	2102      	movs	r1, #2
 800ad20:	68f8      	ldr	r0, [r7, #12]
 800ad22:	f7fc f9ab 	bl	800707c <VL53L0X_GetLimitCheckEnable>
 800ad26:	4603      	mov	r3, r0
 800ad28:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				&SignalRefClipLimitCheckEnable);

	if ((SignalRefClipLimitCheckEnable != 0) &&
 800ad2c:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 800ad30:	2b00      	cmp	r3, #0
 800ad32:	d044      	beq.n	800adbe <VL53L0X_get_pal_range_status+0x1d6>
 800ad34:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800ad38:	2b00      	cmp	r3, #0
 800ad3a:	d140      	bne.n	800adbe <VL53L0X_get_pal_range_status+0x1d6>
			(Status == VL53L0X_ERROR_NONE)) {

		Status = VL53L0X_GetLimitCheckValue(Dev,
 800ad3c:	f107 031c 	add.w	r3, r7, #28
 800ad40:	461a      	mov	r2, r3
 800ad42:	2102      	movs	r1, #2
 800ad44:	68f8      	ldr	r0, [r7, #12]
 800ad46:	f7fc fa1f 	bl	8007188 <VL53L0X_GetLimitCheckValue>
 800ad4a:	4603      	mov	r3, r0
 800ad4c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				&SignalRefClipValue);

		/* Read LastSignalRefMcps from device */
		if (Status == VL53L0X_ERROR_NONE)
 800ad50:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800ad54:	2b00      	cmp	r3, #0
 800ad56:	d107      	bne.n	800ad68 <VL53L0X_get_pal_range_status+0x180>
			Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800ad58:	2201      	movs	r2, #1
 800ad5a:	21ff      	movs	r1, #255	; 0xff
 800ad5c:	68f8      	ldr	r0, [r7, #12]
 800ad5e:	f000 f9bb 	bl	800b0d8 <VL53L0X_WrByte>
 800ad62:	4603      	mov	r3, r0
 800ad64:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

		if (Status == VL53L0X_ERROR_NONE)
 800ad68:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800ad6c:	2b00      	cmp	r3, #0
 800ad6e:	d109      	bne.n	800ad84 <VL53L0X_get_pal_range_status+0x19c>
			Status = VL53L0X_RdWord(Dev,
 800ad70:	f107 0316 	add.w	r3, r7, #22
 800ad74:	461a      	mov	r2, r3
 800ad76:	21b6      	movs	r1, #182	; 0xb6
 800ad78:	68f8      	ldr	r0, [r7, #12]
 800ad7a:	f000 fa59 	bl	800b230 <VL53L0X_RdWord>
 800ad7e:	4603      	mov	r3, r0
 800ad80:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_REG_RESULT_PEAK_SIGNAL_RATE_REF,
				&tmpWord);

		if (Status == VL53L0X_ERROR_NONE)
 800ad84:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800ad88:	2b00      	cmp	r3, #0
 800ad8a:	d107      	bne.n	800ad9c <VL53L0X_get_pal_range_status+0x1b4>
			Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800ad8c:	2200      	movs	r2, #0
 800ad8e:	21ff      	movs	r1, #255	; 0xff
 800ad90:	68f8      	ldr	r0, [r7, #12]
 800ad92:	f000 f9a1 	bl	800b0d8 <VL53L0X_WrByte>
 800ad96:	4603      	mov	r3, r0
 800ad98:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

		LastSignalRefMcps = VL53L0X_FIXPOINT97TOFIXPOINT1616(tmpWord);
 800ad9c:	8afb      	ldrh	r3, [r7, #22]
 800ad9e:	025b      	lsls	r3, r3, #9
 800ada0:	62fb      	str	r3, [r7, #44]	; 0x2c
		PALDevDataSet(Dev, LastSignalRefMcps, LastSignalRefMcps);
 800ada2:	68fb      	ldr	r3, [r7, #12]
 800ada4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ada6:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148

		if ((SignalRefClipValue > 0) &&
 800adaa:	69fb      	ldr	r3, [r7, #28]
 800adac:	2b00      	cmp	r3, #0
 800adae:	d006      	beq.n	800adbe <VL53L0X_get_pal_range_status+0x1d6>
				(LastSignalRefMcps > SignalRefClipValue)) {
 800adb0:	69fb      	ldr	r3, [r7, #28]
		if ((SignalRefClipValue > 0) &&
 800adb2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800adb4:	429a      	cmp	r2, r3
 800adb6:	d902      	bls.n	800adbe <VL53L0X_get_pal_range_status+0x1d6>
			/* Limit Fail */
			SignalRefClipflag = 1;
 800adb8:	2301      	movs	r3, #1
 800adba:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
	 * Check if Signal ref clip limit is enabled, if yes then do comparison
	 * with limit value and put the result back into pPalRangeStatus.
	 * EffectiveSpadRtnCount has a format 8.8
	 * If (Return signal rate < (1.5 x Xtalk x number of Spads)) : FAIL
	 */
	if (Status == VL53L0X_ERROR_NONE)
 800adbe:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800adc2:	2b00      	cmp	r3, #0
 800adc4:	d109      	bne.n	800adda <VL53L0X_get_pal_range_status+0x1f2>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 800adc6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800adca:	461a      	mov	r2, r3
 800adcc:	2103      	movs	r1, #3
 800adce:	68f8      	ldr	r0, [r7, #12]
 800add0:	f7fc f954 	bl	800707c <VL53L0X_GetLimitCheckEnable>
 800add4:	4603      	mov	r3, r0
 800add6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				&RangeIgnoreThresholdLimitCheckEnable);

	if ((RangeIgnoreThresholdLimitCheckEnable != 0) &&
 800adda:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800adde:	2b00      	cmp	r3, #0
 800ade0:	d023      	beq.n	800ae2a <VL53L0X_get_pal_range_status+0x242>
 800ade2:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800ade6:	2b00      	cmp	r3, #0
 800ade8:	d11f      	bne.n	800ae2a <VL53L0X_get_pal_range_status+0x242>
			(Status == VL53L0X_ERROR_NONE)) {

		/* Compute the signal rate per spad */
		if (EffectiveSpadRtnCount == 0) {
 800adea:	893b      	ldrh	r3, [r7, #8]
 800adec:	2b00      	cmp	r3, #0
 800adee:	d102      	bne.n	800adf6 <VL53L0X_get_pal_range_status+0x20e>
			SignalRatePerSpad = 0;
 800adf0:	2300      	movs	r3, #0
 800adf2:	637b      	str	r3, [r7, #52]	; 0x34
 800adf4:	e005      	b.n	800ae02 <VL53L0X_get_pal_range_status+0x21a>
		} else {
			SignalRatePerSpad = (FixPoint1616_t)((256 * SignalRate)
 800adf6:	687b      	ldr	r3, [r7, #4]
 800adf8:	021a      	lsls	r2, r3, #8
 800adfa:	893b      	ldrh	r3, [r7, #8]
 800adfc:	fbb2 f3f3 	udiv	r3, r2, r3
 800ae00:	637b      	str	r3, [r7, #52]	; 0x34
				/ EffectiveSpadRtnCount);
		}

		Status = VL53L0X_GetLimitCheckValue(Dev,
 800ae02:	f107 0318 	add.w	r3, r7, #24
 800ae06:	461a      	mov	r2, r3
 800ae08:	2103      	movs	r1, #3
 800ae0a:	68f8      	ldr	r0, [r7, #12]
 800ae0c:	f7fc f9bc 	bl	8007188 <VL53L0X_GetLimitCheckValue>
 800ae10:	4603      	mov	r3, r0
 800ae12:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				&RangeIgnoreThresholdValue);

		if ((RangeIgnoreThresholdValue > 0) &&
 800ae16:	69bb      	ldr	r3, [r7, #24]
 800ae18:	2b00      	cmp	r3, #0
 800ae1a:	d006      	beq.n	800ae2a <VL53L0X_get_pal_range_status+0x242>
			(SignalRatePerSpad < RangeIgnoreThresholdValue)) {
 800ae1c:	69bb      	ldr	r3, [r7, #24]
		if ((RangeIgnoreThresholdValue > 0) &&
 800ae1e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ae20:	429a      	cmp	r2, r3
 800ae22:	d202      	bcs.n	800ae2a <VL53L0X_get_pal_range_status+0x242>
			/* Limit Fail add 2^6 to range status */
			RangeIgnoreThresholdflag = 1;
 800ae24:	2301      	movs	r3, #1
 800ae26:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800ae2a:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800ae2e:	2b00      	cmp	r3, #0
 800ae30:	d14a      	bne.n	800aec8 <VL53L0X_get_pal_range_status+0x2e0>
		if (NoneFlag == 1) {
 800ae32:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800ae36:	2b01      	cmp	r3, #1
 800ae38:	d103      	bne.n	800ae42 <VL53L0X_get_pal_range_status+0x25a>
			*pPalRangeStatus = 255;	 /* NONE */
 800ae3a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ae3c:	22ff      	movs	r2, #255	; 0xff
 800ae3e:	701a      	strb	r2, [r3, #0]
 800ae40:	e042      	b.n	800aec8 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 1 ||
 800ae42:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800ae46:	2b01      	cmp	r3, #1
 800ae48:	d007      	beq.n	800ae5a <VL53L0X_get_pal_range_status+0x272>
 800ae4a:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800ae4e:	2b02      	cmp	r3, #2
 800ae50:	d003      	beq.n	800ae5a <VL53L0X_get_pal_range_status+0x272>
					DeviceRangeStatusInternal == 2 ||
 800ae52:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800ae56:	2b03      	cmp	r3, #3
 800ae58:	d103      	bne.n	800ae62 <VL53L0X_get_pal_range_status+0x27a>
					DeviceRangeStatusInternal == 3) {
			*pPalRangeStatus = 5; /* HW fail */
 800ae5a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ae5c:	2205      	movs	r2, #5
 800ae5e:	701a      	strb	r2, [r3, #0]
 800ae60:	e032      	b.n	800aec8 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 6 ||
 800ae62:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800ae66:	2b06      	cmp	r3, #6
 800ae68:	d003      	beq.n	800ae72 <VL53L0X_get_pal_range_status+0x28a>
 800ae6a:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800ae6e:	2b09      	cmp	r3, #9
 800ae70:	d103      	bne.n	800ae7a <VL53L0X_get_pal_range_status+0x292>
					DeviceRangeStatusInternal == 9) {
			*pPalRangeStatus = 4;  /* Phase fail */
 800ae72:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ae74:	2204      	movs	r2, #4
 800ae76:	701a      	strb	r2, [r3, #0]
 800ae78:	e026      	b.n	800aec8 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 8 ||
 800ae7a:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800ae7e:	2b08      	cmp	r3, #8
 800ae80:	d007      	beq.n	800ae92 <VL53L0X_get_pal_range_status+0x2aa>
 800ae82:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800ae86:	2b0a      	cmp	r3, #10
 800ae88:	d003      	beq.n	800ae92 <VL53L0X_get_pal_range_status+0x2aa>
					DeviceRangeStatusInternal == 10 ||
 800ae8a:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800ae8e:	2b01      	cmp	r3, #1
 800ae90:	d103      	bne.n	800ae9a <VL53L0X_get_pal_range_status+0x2b2>
					SignalRefClipflag == 1) {
			*pPalRangeStatus = 3;  /* Min range */
 800ae92:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ae94:	2203      	movs	r2, #3
 800ae96:	701a      	strb	r2, [r3, #0]
 800ae98:	e016      	b.n	800aec8 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 4 ||
 800ae9a:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800ae9e:	2b04      	cmp	r3, #4
 800aea0:	d003      	beq.n	800aeaa <VL53L0X_get_pal_range_status+0x2c2>
 800aea2:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800aea6:	2b01      	cmp	r3, #1
 800aea8:	d103      	bne.n	800aeb2 <VL53L0X_get_pal_range_status+0x2ca>
					RangeIgnoreThresholdflag == 1) {
			*pPalRangeStatus = 2;  /* Signal Fail */
 800aeaa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800aeac:	2202      	movs	r2, #2
 800aeae:	701a      	strb	r2, [r3, #0]
 800aeb0:	e00a      	b.n	800aec8 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (SigmaLimitflag == 1) {
 800aeb2:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 800aeb6:	2b01      	cmp	r3, #1
 800aeb8:	d103      	bne.n	800aec2 <VL53L0X_get_pal_range_status+0x2da>
			*pPalRangeStatus = 1;  /* Sigma	 Fail */
 800aeba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800aebc:	2201      	movs	r2, #1
 800aebe:	701a      	strb	r2, [r3, #0]
 800aec0:	e002      	b.n	800aec8 <VL53L0X_get_pal_range_status+0x2e0>
		} else {
			*pPalRangeStatus = 0; /* Range Valid */
 800aec2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800aec4:	2200      	movs	r2, #0
 800aec6:	701a      	strb	r2, [r3, #0]
		}
	}

	/* DMAX only relevant during range error */
	if (*pPalRangeStatus == 0)
 800aec8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800aeca:	781b      	ldrb	r3, [r3, #0]
 800aecc:	2b00      	cmp	r3, #0
 800aece:	d102      	bne.n	800aed6 <VL53L0X_get_pal_range_status+0x2ee>
		pRangingMeasurementData->RangeDMaxMilliMeter = 0;
 800aed0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800aed2:	2200      	movs	r2, #0
 800aed4:	815a      	strh	r2, [r3, #10]

	/* fill the Limit Check Status */

	Status =  VL53L0X_GetLimitCheckEnable(Dev,
 800aed6:	f107 032a 	add.w	r3, r7, #42	; 0x2a
 800aeda:	461a      	mov	r2, r3
 800aedc:	2101      	movs	r1, #1
 800aede:	68f8      	ldr	r0, [r7, #12]
 800aee0:	f7fc f8cc 	bl	800707c <VL53L0X_GetLimitCheckEnable>
 800aee4:	4603      	mov	r3, r0
 800aee6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
			&SignalRateFinalRangeLimitCheckEnable);

	if (Status == VL53L0X_ERROR_NONE) {
 800aeea:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800aeee:	2b00      	cmp	r3, #0
 800aef0:	d14f      	bne.n	800af92 <VL53L0X_get_pal_range_status+0x3aa>
		if ((SigmaLimitCheckEnable == 0) || (SigmaLimitflag == 1))
 800aef2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800aef6:	2b00      	cmp	r3, #0
 800aef8:	d003      	beq.n	800af02 <VL53L0X_get_pal_range_status+0x31a>
 800aefa:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 800aefe:	2b01      	cmp	r3, #1
 800af00:	d103      	bne.n	800af0a <VL53L0X_get_pal_range_status+0x322>
			Temp8 = 1;
 800af02:	2301      	movs	r3, #1
 800af04:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800af08:	e002      	b.n	800af10 <VL53L0X_get_pal_range_status+0x328>
		else
			Temp8 = 0;
 800af0a:	2300      	movs	r3, #0
 800af0c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 800af10:	68fb      	ldr	r3, [r7, #12]
 800af12:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 800af16:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, Temp8);

		if ((DeviceRangeStatusInternal == 4) ||
 800af1a:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800af1e:	2b04      	cmp	r3, #4
 800af20:	d003      	beq.n	800af2a <VL53L0X_get_pal_range_status+0x342>
				(SignalRateFinalRangeLimitCheckEnable == 0))
 800af22:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
		if ((DeviceRangeStatusInternal == 4) ||
 800af26:	2b00      	cmp	r3, #0
 800af28:	d103      	bne.n	800af32 <VL53L0X_get_pal_range_status+0x34a>
			Temp8 = 1;
 800af2a:	2301      	movs	r3, #1
 800af2c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800af30:	e002      	b.n	800af38 <VL53L0X_get_pal_range_status+0x350>
		else
			Temp8 = 0;
 800af32:	2300      	movs	r3, #0
 800af34:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 800af38:	68fb      	ldr	r3, [r7, #12]
 800af3a:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 800af3e:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
				VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
				Temp8);

		if ((SignalRefClipLimitCheckEnable == 0) ||
 800af42:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 800af46:	2b00      	cmp	r3, #0
 800af48:	d003      	beq.n	800af52 <VL53L0X_get_pal_range_status+0x36a>
 800af4a:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800af4e:	2b01      	cmp	r3, #1
 800af50:	d103      	bne.n	800af5a <VL53L0X_get_pal_range_status+0x372>
					(SignalRefClipflag == 1))
			Temp8 = 1;
 800af52:	2301      	movs	r3, #1
 800af54:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800af58:	e002      	b.n	800af60 <VL53L0X_get_pal_range_status+0x378>
		else
			Temp8 = 0;
 800af5a:	2300      	movs	r3, #0
 800af5c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 800af60:	68fb      	ldr	r3, [r7, #12]
 800af62:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 800af66:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, Temp8);

		if ((RangeIgnoreThresholdLimitCheckEnable == 0) ||
 800af6a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800af6e:	2b00      	cmp	r3, #0
 800af70:	d003      	beq.n	800af7a <VL53L0X_get_pal_range_status+0x392>
 800af72:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800af76:	2b01      	cmp	r3, #1
 800af78:	d103      	bne.n	800af82 <VL53L0X_get_pal_range_status+0x39a>
				(RangeIgnoreThresholdflag == 1))
			Temp8 = 1;
 800af7a:	2301      	movs	r3, #1
 800af7c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800af80:	e002      	b.n	800af88 <VL53L0X_get_pal_range_status+0x3a0>
		else
			Temp8 = 0;
 800af82:	2300      	movs	r3, #0
 800af84:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 800af88:	68fb      	ldr	r3, [r7, #12]
 800af8a:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 800af8e:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				Temp8);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800af92:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f

}
 800af96:	4618      	mov	r0, r3
 800af98:	3740      	adds	r7, #64	; 0x40
 800af9a:	46bd      	mov	sp, r7
 800af9c:	bd80      	pop	{r7, pc}

0800af9e <_I2CWrite>:
#endif


uint8_t _I2CBuffer[64];

int _I2CWrite(VL53L0X_DEV Dev, uint8_t *pdata, uint32_t count) {
 800af9e:	b580      	push	{r7, lr}
 800afa0:	b088      	sub	sp, #32
 800afa2:	af02      	add	r7, sp, #8
 800afa4:	60f8      	str	r0, [r7, #12]
 800afa6:	60b9      	str	r1, [r7, #8]
 800afa8:	607a      	str	r2, [r7, #4]
    int status;
    int i2c_time_out = I2C_TIME_OUT_BASE+ count* I2C_TIME_OUT_BYTE;
 800afaa:	687b      	ldr	r3, [r7, #4]
 800afac:	330a      	adds	r3, #10
 800afae:	617b      	str	r3, [r7, #20]

    status = HAL_I2C_Master_Transmit(Dev->I2cHandle, Dev->I2cDevAddr, pdata, count, i2c_time_out);
 800afb0:	68fb      	ldr	r3, [r7, #12]
 800afb2:	f8d3 015c 	ldr.w	r0, [r3, #348]	; 0x15c
 800afb6:	68fb      	ldr	r3, [r7, #12]
 800afb8:	f893 3160 	ldrb.w	r3, [r3, #352]	; 0x160
 800afbc:	b299      	uxth	r1, r3
 800afbe:	687b      	ldr	r3, [r7, #4]
 800afc0:	b29a      	uxth	r2, r3
 800afc2:	697b      	ldr	r3, [r7, #20]
 800afc4:	9300      	str	r3, [sp, #0]
 800afc6:	4613      	mov	r3, r2
 800afc8:	68ba      	ldr	r2, [r7, #8]
 800afca:	f7f6 fe8d 	bl	8001ce8 <HAL_I2C_Master_Transmit>
 800afce:	4603      	mov	r3, r0
 800afd0:	613b      	str	r3, [r7, #16]
    if (status) {
        //VL6180x_ErrLog("I2C error 0x%x %d len", dev->I2cAddr, len);
        //XNUCLEO6180XA1_I2C1_Init(&hi2c1);
    }
    return status;
 800afd2:	693b      	ldr	r3, [r7, #16]
}
 800afd4:	4618      	mov	r0, r3
 800afd6:	3718      	adds	r7, #24
 800afd8:	46bd      	mov	sp, r7
 800afda:	bd80      	pop	{r7, pc}

0800afdc <_I2CRead>:

int _I2CRead(VL53L0X_DEV Dev, uint8_t *pdata, uint32_t count) {
 800afdc:	b580      	push	{r7, lr}
 800afde:	b088      	sub	sp, #32
 800afe0:	af02      	add	r7, sp, #8
 800afe2:	60f8      	str	r0, [r7, #12]
 800afe4:	60b9      	str	r1, [r7, #8]
 800afe6:	607a      	str	r2, [r7, #4]
    int status;
    int i2c_time_out = I2C_TIME_OUT_BASE+ count* I2C_TIME_OUT_BYTE;
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	330a      	adds	r3, #10
 800afec:	617b      	str	r3, [r7, #20]

    status = HAL_I2C_Master_Receive(Dev->I2cHandle, Dev->I2cDevAddr|1, pdata, count, i2c_time_out);
 800afee:	68fb      	ldr	r3, [r7, #12]
 800aff0:	f8d3 015c 	ldr.w	r0, [r3, #348]	; 0x15c
 800aff4:	68fb      	ldr	r3, [r7, #12]
 800aff6:	f893 3160 	ldrb.w	r3, [r3, #352]	; 0x160
 800affa:	f043 0301 	orr.w	r3, r3, #1
 800affe:	b2db      	uxtb	r3, r3
 800b000:	b299      	uxth	r1, r3
 800b002:	687b      	ldr	r3, [r7, #4]
 800b004:	b29a      	uxth	r2, r3
 800b006:	697b      	ldr	r3, [r7, #20]
 800b008:	9300      	str	r3, [sp, #0]
 800b00a:	4613      	mov	r3, r2
 800b00c:	68ba      	ldr	r2, [r7, #8]
 800b00e:	f7f6 ff5f 	bl	8001ed0 <HAL_I2C_Master_Receive>
 800b012:	4603      	mov	r3, r0
 800b014:	613b      	str	r3, [r7, #16]
    if (status) {
        //VL6180x_ErrLog("I2C error 0x%x %d len", dev->I2cAddr, len);
        //XNUCLEO6180XA1_I2C1_Init(&hi2c1);
    }
    return status;
 800b016:	693b      	ldr	r3, [r7, #16]
}
 800b018:	4618      	mov	r0, r3
 800b01a:	3718      	adds	r7, #24
 800b01c:	46bd      	mov	sp, r7
 800b01e:	bd80      	pop	{r7, pc}

0800b020 <VL53L0X_WriteMulti>:

// the ranging_sensor_comms.dll will take care of the page selection
VL53L0X_Error VL53L0X_WriteMulti(VL53L0X_DEV Dev, uint8_t index, uint8_t *pdata, uint32_t count) {
 800b020:	b580      	push	{r7, lr}
 800b022:	b086      	sub	sp, #24
 800b024:	af00      	add	r7, sp, #0
 800b026:	60f8      	str	r0, [r7, #12]
 800b028:	607a      	str	r2, [r7, #4]
 800b02a:	603b      	str	r3, [r7, #0]
 800b02c:	460b      	mov	r3, r1
 800b02e:	72fb      	strb	r3, [r7, #11]
    int status_int;
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b030:	2300      	movs	r3, #0
 800b032:	75fb      	strb	r3, [r7, #23]
    if (count > sizeof(_I2CBuffer) - 1) {
 800b034:	683b      	ldr	r3, [r7, #0]
 800b036:	2b3f      	cmp	r3, #63	; 0x3f
 800b038:	d902      	bls.n	800b040 <VL53L0X_WriteMulti+0x20>
        return VL53L0X_ERROR_INVALID_PARAMS;
 800b03a:	f06f 0303 	mvn.w	r3, #3
 800b03e:	e016      	b.n	800b06e <VL53L0X_WriteMulti+0x4e>
    }
    _I2CBuffer[0] = index;
 800b040:	4a0d      	ldr	r2, [pc, #52]	; (800b078 <VL53L0X_WriteMulti+0x58>)
 800b042:	7afb      	ldrb	r3, [r7, #11]
 800b044:	7013      	strb	r3, [r2, #0]
    memcpy(&_I2CBuffer[1], pdata, count);
 800b046:	683a      	ldr	r2, [r7, #0]
 800b048:	6879      	ldr	r1, [r7, #4]
 800b04a:	480c      	ldr	r0, [pc, #48]	; (800b07c <VL53L0X_WriteMulti+0x5c>)
 800b04c:	f000 f99e 	bl	800b38c <memcpy>
    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, count + 1);
 800b050:	683b      	ldr	r3, [r7, #0]
 800b052:	3301      	adds	r3, #1
 800b054:	461a      	mov	r2, r3
 800b056:	4908      	ldr	r1, [pc, #32]	; (800b078 <VL53L0X_WriteMulti+0x58>)
 800b058:	68f8      	ldr	r0, [r7, #12]
 800b05a:	f7ff ffa0 	bl	800af9e <_I2CWrite>
 800b05e:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800b060:	693b      	ldr	r3, [r7, #16]
 800b062:	2b00      	cmp	r3, #0
 800b064:	d001      	beq.n	800b06a <VL53L0X_WriteMulti+0x4a>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800b066:	23ec      	movs	r3, #236	; 0xec
 800b068:	75fb      	strb	r3, [r7, #23]
    }
    VL53L0X_PutI2cBus();
    return Status;
 800b06a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b06e:	4618      	mov	r0, r3
 800b070:	3718      	adds	r7, #24
 800b072:	46bd      	mov	sp, r7
 800b074:	bd80      	pop	{r7, pc}
 800b076:	bf00      	nop
 800b078:	20000680 	.word	0x20000680
 800b07c:	20000681 	.word	0x20000681

0800b080 <VL53L0X_ReadMulti>:

// the ranging_sensor_comms.dll will take care of the page selection
VL53L0X_Error VL53L0X_ReadMulti(VL53L0X_DEV Dev, uint8_t index, uint8_t *pdata, uint32_t count) {
 800b080:	b580      	push	{r7, lr}
 800b082:	b086      	sub	sp, #24
 800b084:	af00      	add	r7, sp, #0
 800b086:	60f8      	str	r0, [r7, #12]
 800b088:	607a      	str	r2, [r7, #4]
 800b08a:	603b      	str	r3, [r7, #0]
 800b08c:	460b      	mov	r3, r1
 800b08e:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b090:	2300      	movs	r3, #0
 800b092:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;
    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 800b094:	f107 030b 	add.w	r3, r7, #11
 800b098:	2201      	movs	r2, #1
 800b09a:	4619      	mov	r1, r3
 800b09c:	68f8      	ldr	r0, [r7, #12]
 800b09e:	f7ff ff7e 	bl	800af9e <_I2CWrite>
 800b0a2:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800b0a4:	693b      	ldr	r3, [r7, #16]
 800b0a6:	2b00      	cmp	r3, #0
 800b0a8:	d002      	beq.n	800b0b0 <VL53L0X_ReadMulti+0x30>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800b0aa:	23ec      	movs	r3, #236	; 0xec
 800b0ac:	75fb      	strb	r3, [r7, #23]
        goto done;
 800b0ae:	e00c      	b.n	800b0ca <VL53L0X_ReadMulti+0x4a>
    }
    status_int = _I2CRead(Dev, pdata, count);
 800b0b0:	683a      	ldr	r2, [r7, #0]
 800b0b2:	6879      	ldr	r1, [r7, #4]
 800b0b4:	68f8      	ldr	r0, [r7, #12]
 800b0b6:	f7ff ff91 	bl	800afdc <_I2CRead>
 800b0ba:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800b0bc:	693b      	ldr	r3, [r7, #16]
 800b0be:	2b00      	cmp	r3, #0
 800b0c0:	d002      	beq.n	800b0c8 <VL53L0X_ReadMulti+0x48>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800b0c2:	23ec      	movs	r3, #236	; 0xec
 800b0c4:	75fb      	strb	r3, [r7, #23]
 800b0c6:	e000      	b.n	800b0ca <VL53L0X_ReadMulti+0x4a>
    }
done:
 800b0c8:	bf00      	nop
    VL53L0X_PutI2cBus();
    return Status;
 800b0ca:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b0ce:	4618      	mov	r0, r3
 800b0d0:	3718      	adds	r7, #24
 800b0d2:	46bd      	mov	sp, r7
 800b0d4:	bd80      	pop	{r7, pc}
	...

0800b0d8 <VL53L0X_WrByte>:

VL53L0X_Error VL53L0X_WrByte(VL53L0X_DEV Dev, uint8_t index, uint8_t data) {
 800b0d8:	b580      	push	{r7, lr}
 800b0da:	b084      	sub	sp, #16
 800b0dc:	af00      	add	r7, sp, #0
 800b0de:	6078      	str	r0, [r7, #4]
 800b0e0:	460b      	mov	r3, r1
 800b0e2:	70fb      	strb	r3, [r7, #3]
 800b0e4:	4613      	mov	r3, r2
 800b0e6:	70bb      	strb	r3, [r7, #2]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b0e8:	2300      	movs	r3, #0
 800b0ea:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;

    _I2CBuffer[0] = index;
 800b0ec:	4a0b      	ldr	r2, [pc, #44]	; (800b11c <VL53L0X_WrByte+0x44>)
 800b0ee:	78fb      	ldrb	r3, [r7, #3]
 800b0f0:	7013      	strb	r3, [r2, #0]
    _I2CBuffer[1] = data;
 800b0f2:	4a0a      	ldr	r2, [pc, #40]	; (800b11c <VL53L0X_WrByte+0x44>)
 800b0f4:	78bb      	ldrb	r3, [r7, #2]
 800b0f6:	7053      	strb	r3, [r2, #1]

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 2);
 800b0f8:	2202      	movs	r2, #2
 800b0fa:	4908      	ldr	r1, [pc, #32]	; (800b11c <VL53L0X_WrByte+0x44>)
 800b0fc:	6878      	ldr	r0, [r7, #4]
 800b0fe:	f7ff ff4e 	bl	800af9e <_I2CWrite>
 800b102:	60b8      	str	r0, [r7, #8]
    if (status_int != 0) {
 800b104:	68bb      	ldr	r3, [r7, #8]
 800b106:	2b00      	cmp	r3, #0
 800b108:	d001      	beq.n	800b10e <VL53L0X_WrByte+0x36>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800b10a:	23ec      	movs	r3, #236	; 0xec
 800b10c:	73fb      	strb	r3, [r7, #15]
    }
    VL53L0X_PutI2cBus();
    return Status;
 800b10e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b112:	4618      	mov	r0, r3
 800b114:	3710      	adds	r7, #16
 800b116:	46bd      	mov	sp, r7
 800b118:	bd80      	pop	{r7, pc}
 800b11a:	bf00      	nop
 800b11c:	20000680 	.word	0x20000680

0800b120 <VL53L0X_WrWord>:

VL53L0X_Error VL53L0X_WrWord(VL53L0X_DEV Dev, uint8_t index, uint16_t data) {
 800b120:	b580      	push	{r7, lr}
 800b122:	b084      	sub	sp, #16
 800b124:	af00      	add	r7, sp, #0
 800b126:	6078      	str	r0, [r7, #4]
 800b128:	460b      	mov	r3, r1
 800b12a:	70fb      	strb	r3, [r7, #3]
 800b12c:	4613      	mov	r3, r2
 800b12e:	803b      	strh	r3, [r7, #0]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b130:	2300      	movs	r3, #0
 800b132:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;

    _I2CBuffer[0] = index;
 800b134:	4a0e      	ldr	r2, [pc, #56]	; (800b170 <VL53L0X_WrWord+0x50>)
 800b136:	78fb      	ldrb	r3, [r7, #3]
 800b138:	7013      	strb	r3, [r2, #0]
    _I2CBuffer[1] = data >> 8;
 800b13a:	883b      	ldrh	r3, [r7, #0]
 800b13c:	0a1b      	lsrs	r3, r3, #8
 800b13e:	b29b      	uxth	r3, r3
 800b140:	b2da      	uxtb	r2, r3
 800b142:	4b0b      	ldr	r3, [pc, #44]	; (800b170 <VL53L0X_WrWord+0x50>)
 800b144:	705a      	strb	r2, [r3, #1]
    _I2CBuffer[2] = data & 0x00FF;
 800b146:	883b      	ldrh	r3, [r7, #0]
 800b148:	b2da      	uxtb	r2, r3
 800b14a:	4b09      	ldr	r3, [pc, #36]	; (800b170 <VL53L0X_WrWord+0x50>)
 800b14c:	709a      	strb	r2, [r3, #2]

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 3);
 800b14e:	2203      	movs	r2, #3
 800b150:	4907      	ldr	r1, [pc, #28]	; (800b170 <VL53L0X_WrWord+0x50>)
 800b152:	6878      	ldr	r0, [r7, #4]
 800b154:	f7ff ff23 	bl	800af9e <_I2CWrite>
 800b158:	60b8      	str	r0, [r7, #8]
    if (status_int != 0) {
 800b15a:	68bb      	ldr	r3, [r7, #8]
 800b15c:	2b00      	cmp	r3, #0
 800b15e:	d001      	beq.n	800b164 <VL53L0X_WrWord+0x44>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800b160:	23ec      	movs	r3, #236	; 0xec
 800b162:	73fb      	strb	r3, [r7, #15]
    }
    VL53L0X_PutI2cBus();
    return Status;
 800b164:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b168:	4618      	mov	r0, r3
 800b16a:	3710      	adds	r7, #16
 800b16c:	46bd      	mov	sp, r7
 800b16e:	bd80      	pop	{r7, pc}
 800b170:	20000680 	.word	0x20000680

0800b174 <VL53L0X_UpdateByte>:
    }
    VL53L0X_PutI2cBus();
    return Status;
}

VL53L0X_Error VL53L0X_UpdateByte(VL53L0X_DEV Dev, uint8_t index, uint8_t AndData, uint8_t OrData) {
 800b174:	b580      	push	{r7, lr}
 800b176:	b084      	sub	sp, #16
 800b178:	af00      	add	r7, sp, #0
 800b17a:	6078      	str	r0, [r7, #4]
 800b17c:	4608      	mov	r0, r1
 800b17e:	4611      	mov	r1, r2
 800b180:	461a      	mov	r2, r3
 800b182:	4603      	mov	r3, r0
 800b184:	70fb      	strb	r3, [r7, #3]
 800b186:	460b      	mov	r3, r1
 800b188:	70bb      	strb	r3, [r7, #2]
 800b18a:	4613      	mov	r3, r2
 800b18c:	707b      	strb	r3, [r7, #1]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b18e:	2300      	movs	r3, #0
 800b190:	73fb      	strb	r3, [r7, #15]
    uint8_t data;

    Status = VL53L0X_RdByte(Dev, index, &data);
 800b192:	f107 020e 	add.w	r2, r7, #14
 800b196:	78fb      	ldrb	r3, [r7, #3]
 800b198:	4619      	mov	r1, r3
 800b19a:	6878      	ldr	r0, [r7, #4]
 800b19c:	f000 f81e 	bl	800b1dc <VL53L0X_RdByte>
 800b1a0:	4603      	mov	r3, r0
 800b1a2:	73fb      	strb	r3, [r7, #15]
    if (Status) {
 800b1a4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b1a8:	2b00      	cmp	r3, #0
 800b1aa:	d110      	bne.n	800b1ce <VL53L0X_UpdateByte+0x5a>
        goto done;
    }
    data = (data & AndData) | OrData;
 800b1ac:	7bba      	ldrb	r2, [r7, #14]
 800b1ae:	78bb      	ldrb	r3, [r7, #2]
 800b1b0:	4013      	ands	r3, r2
 800b1b2:	b2da      	uxtb	r2, r3
 800b1b4:	787b      	ldrb	r3, [r7, #1]
 800b1b6:	4313      	orrs	r3, r2
 800b1b8:	b2db      	uxtb	r3, r3
 800b1ba:	73bb      	strb	r3, [r7, #14]
    Status = VL53L0X_WrByte(Dev, index, data);
 800b1bc:	7bba      	ldrb	r2, [r7, #14]
 800b1be:	78fb      	ldrb	r3, [r7, #3]
 800b1c0:	4619      	mov	r1, r3
 800b1c2:	6878      	ldr	r0, [r7, #4]
 800b1c4:	f7ff ff88 	bl	800b0d8 <VL53L0X_WrByte>
 800b1c8:	4603      	mov	r3, r0
 800b1ca:	73fb      	strb	r3, [r7, #15]
 800b1cc:	e000      	b.n	800b1d0 <VL53L0X_UpdateByte+0x5c>
        goto done;
 800b1ce:	bf00      	nop
done:
    return Status;
 800b1d0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b1d4:	4618      	mov	r0, r3
 800b1d6:	3710      	adds	r7, #16
 800b1d8:	46bd      	mov	sp, r7
 800b1da:	bd80      	pop	{r7, pc}

0800b1dc <VL53L0X_RdByte>:

VL53L0X_Error VL53L0X_RdByte(VL53L0X_DEV Dev, uint8_t index, uint8_t *data) {
 800b1dc:	b580      	push	{r7, lr}
 800b1de:	b086      	sub	sp, #24
 800b1e0:	af00      	add	r7, sp, #0
 800b1e2:	60f8      	str	r0, [r7, #12]
 800b1e4:	460b      	mov	r3, r1
 800b1e6:	607a      	str	r2, [r7, #4]
 800b1e8:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b1ea:	2300      	movs	r3, #0
 800b1ec:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 800b1ee:	f107 030b 	add.w	r3, r7, #11
 800b1f2:	2201      	movs	r2, #1
 800b1f4:	4619      	mov	r1, r3
 800b1f6:	68f8      	ldr	r0, [r7, #12]
 800b1f8:	f7ff fed1 	bl	800af9e <_I2CWrite>
 800b1fc:	6138      	str	r0, [r7, #16]
    if( status_int ){
 800b1fe:	693b      	ldr	r3, [r7, #16]
 800b200:	2b00      	cmp	r3, #0
 800b202:	d002      	beq.n	800b20a <VL53L0X_RdByte+0x2e>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800b204:	23ec      	movs	r3, #236	; 0xec
 800b206:	75fb      	strb	r3, [r7, #23]
        goto done;
 800b208:	e00c      	b.n	800b224 <VL53L0X_RdByte+0x48>
    }
    status_int = _I2CRead(Dev, data, 1);
 800b20a:	2201      	movs	r2, #1
 800b20c:	6879      	ldr	r1, [r7, #4]
 800b20e:	68f8      	ldr	r0, [r7, #12]
 800b210:	f7ff fee4 	bl	800afdc <_I2CRead>
 800b214:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800b216:	693b      	ldr	r3, [r7, #16]
 800b218:	2b00      	cmp	r3, #0
 800b21a:	d002      	beq.n	800b222 <VL53L0X_RdByte+0x46>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800b21c:	23ec      	movs	r3, #236	; 0xec
 800b21e:	75fb      	strb	r3, [r7, #23]
 800b220:	e000      	b.n	800b224 <VL53L0X_RdByte+0x48>
    }
done:
 800b222:	bf00      	nop
    VL53L0X_PutI2cBus();
    return Status;
 800b224:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b228:	4618      	mov	r0, r3
 800b22a:	3718      	adds	r7, #24
 800b22c:	46bd      	mov	sp, r7
 800b22e:	bd80      	pop	{r7, pc}

0800b230 <VL53L0X_RdWord>:

VL53L0X_Error VL53L0X_RdWord(VL53L0X_DEV Dev, uint8_t index, uint16_t *data) {
 800b230:	b580      	push	{r7, lr}
 800b232:	b086      	sub	sp, #24
 800b234:	af00      	add	r7, sp, #0
 800b236:	60f8      	str	r0, [r7, #12]
 800b238:	460b      	mov	r3, r1
 800b23a:	607a      	str	r2, [r7, #4]
 800b23c:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b23e:	2300      	movs	r3, #0
 800b240:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 800b242:	f107 030b 	add.w	r3, r7, #11
 800b246:	2201      	movs	r2, #1
 800b248:	4619      	mov	r1, r3
 800b24a:	68f8      	ldr	r0, [r7, #12]
 800b24c:	f7ff fea7 	bl	800af9e <_I2CWrite>
 800b250:	6138      	str	r0, [r7, #16]

    if( status_int ){
 800b252:	693b      	ldr	r3, [r7, #16]
 800b254:	2b00      	cmp	r3, #0
 800b256:	d002      	beq.n	800b25e <VL53L0X_RdWord+0x2e>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800b258:	23ec      	movs	r3, #236	; 0xec
 800b25a:	75fb      	strb	r3, [r7, #23]
        goto done;
 800b25c:	e017      	b.n	800b28e <VL53L0X_RdWord+0x5e>
    }
    status_int = _I2CRead(Dev, _I2CBuffer, 2);
 800b25e:	2202      	movs	r2, #2
 800b260:	490e      	ldr	r1, [pc, #56]	; (800b29c <VL53L0X_RdWord+0x6c>)
 800b262:	68f8      	ldr	r0, [r7, #12]
 800b264:	f7ff feba 	bl	800afdc <_I2CRead>
 800b268:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800b26a:	693b      	ldr	r3, [r7, #16]
 800b26c:	2b00      	cmp	r3, #0
 800b26e:	d002      	beq.n	800b276 <VL53L0X_RdWord+0x46>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800b270:	23ec      	movs	r3, #236	; 0xec
 800b272:	75fb      	strb	r3, [r7, #23]
        goto done;
 800b274:	e00b      	b.n	800b28e <VL53L0X_RdWord+0x5e>
    }

    *data = ((uint16_t)_I2CBuffer[0]<<8) + (uint16_t)_I2CBuffer[1];
 800b276:	4b09      	ldr	r3, [pc, #36]	; (800b29c <VL53L0X_RdWord+0x6c>)
 800b278:	781b      	ldrb	r3, [r3, #0]
 800b27a:	b29b      	uxth	r3, r3
 800b27c:	021b      	lsls	r3, r3, #8
 800b27e:	b29a      	uxth	r2, r3
 800b280:	4b06      	ldr	r3, [pc, #24]	; (800b29c <VL53L0X_RdWord+0x6c>)
 800b282:	785b      	ldrb	r3, [r3, #1]
 800b284:	b29b      	uxth	r3, r3
 800b286:	4413      	add	r3, r2
 800b288:	b29a      	uxth	r2, r3
 800b28a:	687b      	ldr	r3, [r7, #4]
 800b28c:	801a      	strh	r2, [r3, #0]
done:
    VL53L0X_PutI2cBus();
    return Status;
 800b28e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b292:	4618      	mov	r0, r3
 800b294:	3718      	adds	r7, #24
 800b296:	46bd      	mov	sp, r7
 800b298:	bd80      	pop	{r7, pc}
 800b29a:	bf00      	nop
 800b29c:	20000680 	.word	0x20000680

0800b2a0 <VL53L0X_RdDWord>:

VL53L0X_Error VL53L0X_RdDWord(VL53L0X_DEV Dev, uint8_t index, uint32_t *data) {
 800b2a0:	b580      	push	{r7, lr}
 800b2a2:	b086      	sub	sp, #24
 800b2a4:	af00      	add	r7, sp, #0
 800b2a6:	60f8      	str	r0, [r7, #12]
 800b2a8:	460b      	mov	r3, r1
 800b2aa:	607a      	str	r2, [r7, #4]
 800b2ac:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b2ae:	2300      	movs	r3, #0
 800b2b0:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 800b2b2:	f107 030b 	add.w	r3, r7, #11
 800b2b6:	2201      	movs	r2, #1
 800b2b8:	4619      	mov	r1, r3
 800b2ba:	68f8      	ldr	r0, [r7, #12]
 800b2bc:	f7ff fe6f 	bl	800af9e <_I2CWrite>
 800b2c0:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800b2c2:	693b      	ldr	r3, [r7, #16]
 800b2c4:	2b00      	cmp	r3, #0
 800b2c6:	d002      	beq.n	800b2ce <VL53L0X_RdDWord+0x2e>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800b2c8:	23ec      	movs	r3, #236	; 0xec
 800b2ca:	75fb      	strb	r3, [r7, #23]
        goto done;
 800b2cc:	e01b      	b.n	800b306 <VL53L0X_RdDWord+0x66>
    }
    status_int = _I2CRead(Dev, _I2CBuffer, 4);
 800b2ce:	2204      	movs	r2, #4
 800b2d0:	4910      	ldr	r1, [pc, #64]	; (800b314 <VL53L0X_RdDWord+0x74>)
 800b2d2:	68f8      	ldr	r0, [r7, #12]
 800b2d4:	f7ff fe82 	bl	800afdc <_I2CRead>
 800b2d8:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800b2da:	693b      	ldr	r3, [r7, #16]
 800b2dc:	2b00      	cmp	r3, #0
 800b2de:	d002      	beq.n	800b2e6 <VL53L0X_RdDWord+0x46>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800b2e0:	23ec      	movs	r3, #236	; 0xec
 800b2e2:	75fb      	strb	r3, [r7, #23]
        goto done;
 800b2e4:	e00f      	b.n	800b306 <VL53L0X_RdDWord+0x66>
    }

    *data = ((uint32_t)_I2CBuffer[0]<<24) + ((uint32_t)_I2CBuffer[1]<<16) + ((uint32_t)_I2CBuffer[2]<<8) + (uint32_t)_I2CBuffer[3];
 800b2e6:	4b0b      	ldr	r3, [pc, #44]	; (800b314 <VL53L0X_RdDWord+0x74>)
 800b2e8:	781b      	ldrb	r3, [r3, #0]
 800b2ea:	061a      	lsls	r2, r3, #24
 800b2ec:	4b09      	ldr	r3, [pc, #36]	; (800b314 <VL53L0X_RdDWord+0x74>)
 800b2ee:	785b      	ldrb	r3, [r3, #1]
 800b2f0:	041b      	lsls	r3, r3, #16
 800b2f2:	441a      	add	r2, r3
 800b2f4:	4b07      	ldr	r3, [pc, #28]	; (800b314 <VL53L0X_RdDWord+0x74>)
 800b2f6:	789b      	ldrb	r3, [r3, #2]
 800b2f8:	021b      	lsls	r3, r3, #8
 800b2fa:	4413      	add	r3, r2
 800b2fc:	4a05      	ldr	r2, [pc, #20]	; (800b314 <VL53L0X_RdDWord+0x74>)
 800b2fe:	78d2      	ldrb	r2, [r2, #3]
 800b300:	441a      	add	r2, r3
 800b302:	687b      	ldr	r3, [r7, #4]
 800b304:	601a      	str	r2, [r3, #0]

done:
    VL53L0X_PutI2cBus();
    return Status;
 800b306:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b30a:	4618      	mov	r0, r3
 800b30c:	3718      	adds	r7, #24
 800b30e:	46bd      	mov	sp, r7
 800b310:	bd80      	pop	{r7, pc}
 800b312:	bf00      	nop
 800b314:	20000680 	.word	0x20000680

0800b318 <VL53L0X_PollingDelay>:

VL53L0X_Error VL53L0X_PollingDelay(VL53L0X_DEV Dev) {
 800b318:	b580      	push	{r7, lr}
 800b31a:	b084      	sub	sp, #16
 800b31c:	af00      	add	r7, sp, #0
 800b31e:	6078      	str	r0, [r7, #4]
    VL53L0X_Error status = VL53L0X_ERROR_NONE;
 800b320:	2300      	movs	r3, #0
 800b322:	73fb      	strb	r3, [r7, #15]

    // do nothing
    VL53L0X_OsDelay();
 800b324:	2002      	movs	r0, #2
 800b326:	f7f5 fe2b 	bl	8000f80 <HAL_Delay>
    return status;
 800b32a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b32e:	4618      	mov	r0, r3
 800b330:	3710      	adds	r7, #16
 800b332:	46bd      	mov	sp, r7
 800b334:	bd80      	pop	{r7, pc}
	...

0800b338 <__errno>:
 800b338:	4b01      	ldr	r3, [pc, #4]	; (800b340 <__errno+0x8>)
 800b33a:	6818      	ldr	r0, [r3, #0]
 800b33c:	4770      	bx	lr
 800b33e:	bf00      	nop
 800b340:	200002cc 	.word	0x200002cc

0800b344 <__libc_init_array>:
 800b344:	b570      	push	{r4, r5, r6, lr}
 800b346:	4d0d      	ldr	r5, [pc, #52]	; (800b37c <__libc_init_array+0x38>)
 800b348:	4c0d      	ldr	r4, [pc, #52]	; (800b380 <__libc_init_array+0x3c>)
 800b34a:	1b64      	subs	r4, r4, r5
 800b34c:	10a4      	asrs	r4, r4, #2
 800b34e:	2600      	movs	r6, #0
 800b350:	42a6      	cmp	r6, r4
 800b352:	d109      	bne.n	800b368 <__libc_init_array+0x24>
 800b354:	4d0b      	ldr	r5, [pc, #44]	; (800b384 <__libc_init_array+0x40>)
 800b356:	4c0c      	ldr	r4, [pc, #48]	; (800b388 <__libc_init_array+0x44>)
 800b358:	f000 fc96 	bl	800bc88 <_init>
 800b35c:	1b64      	subs	r4, r4, r5
 800b35e:	10a4      	asrs	r4, r4, #2
 800b360:	2600      	movs	r6, #0
 800b362:	42a6      	cmp	r6, r4
 800b364:	d105      	bne.n	800b372 <__libc_init_array+0x2e>
 800b366:	bd70      	pop	{r4, r5, r6, pc}
 800b368:	f855 3b04 	ldr.w	r3, [r5], #4
 800b36c:	4798      	blx	r3
 800b36e:	3601      	adds	r6, #1
 800b370:	e7ee      	b.n	800b350 <__libc_init_array+0xc>
 800b372:	f855 3b04 	ldr.w	r3, [r5], #4
 800b376:	4798      	blx	r3
 800b378:	3601      	adds	r6, #1
 800b37a:	e7f2      	b.n	800b362 <__libc_init_array+0x1e>
 800b37c:	0800bf30 	.word	0x0800bf30
 800b380:	0800bf30 	.word	0x0800bf30
 800b384:	0800bf30 	.word	0x0800bf30
 800b388:	0800bf34 	.word	0x0800bf34

0800b38c <memcpy>:
 800b38c:	440a      	add	r2, r1
 800b38e:	4291      	cmp	r1, r2
 800b390:	f100 33ff 	add.w	r3, r0, #4294967295
 800b394:	d100      	bne.n	800b398 <memcpy+0xc>
 800b396:	4770      	bx	lr
 800b398:	b510      	push	{r4, lr}
 800b39a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b39e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b3a2:	4291      	cmp	r1, r2
 800b3a4:	d1f9      	bne.n	800b39a <memcpy+0xe>
 800b3a6:	bd10      	pop	{r4, pc}

0800b3a8 <memset>:
 800b3a8:	4402      	add	r2, r0
 800b3aa:	4603      	mov	r3, r0
 800b3ac:	4293      	cmp	r3, r2
 800b3ae:	d100      	bne.n	800b3b2 <memset+0xa>
 800b3b0:	4770      	bx	lr
 800b3b2:	f803 1b01 	strb.w	r1, [r3], #1
 800b3b6:	e7f9      	b.n	800b3ac <memset+0x4>

0800b3b8 <siprintf>:
 800b3b8:	b40e      	push	{r1, r2, r3}
 800b3ba:	b500      	push	{lr}
 800b3bc:	b09c      	sub	sp, #112	; 0x70
 800b3be:	ab1d      	add	r3, sp, #116	; 0x74
 800b3c0:	9002      	str	r0, [sp, #8]
 800b3c2:	9006      	str	r0, [sp, #24]
 800b3c4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800b3c8:	4809      	ldr	r0, [pc, #36]	; (800b3f0 <siprintf+0x38>)
 800b3ca:	9107      	str	r1, [sp, #28]
 800b3cc:	9104      	str	r1, [sp, #16]
 800b3ce:	4909      	ldr	r1, [pc, #36]	; (800b3f4 <siprintf+0x3c>)
 800b3d0:	f853 2b04 	ldr.w	r2, [r3], #4
 800b3d4:	9105      	str	r1, [sp, #20]
 800b3d6:	6800      	ldr	r0, [r0, #0]
 800b3d8:	9301      	str	r3, [sp, #4]
 800b3da:	a902      	add	r1, sp, #8
 800b3dc:	f000 f870 	bl	800b4c0 <_svfiprintf_r>
 800b3e0:	9b02      	ldr	r3, [sp, #8]
 800b3e2:	2200      	movs	r2, #0
 800b3e4:	701a      	strb	r2, [r3, #0]
 800b3e6:	b01c      	add	sp, #112	; 0x70
 800b3e8:	f85d eb04 	ldr.w	lr, [sp], #4
 800b3ec:	b003      	add	sp, #12
 800b3ee:	4770      	bx	lr
 800b3f0:	200002cc 	.word	0x200002cc
 800b3f4:	ffff0208 	.word	0xffff0208

0800b3f8 <strcpy>:
 800b3f8:	4603      	mov	r3, r0
 800b3fa:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b3fe:	f803 2b01 	strb.w	r2, [r3], #1
 800b402:	2a00      	cmp	r2, #0
 800b404:	d1f9      	bne.n	800b3fa <strcpy+0x2>
 800b406:	4770      	bx	lr

0800b408 <__ssputs_r>:
 800b408:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b40c:	688e      	ldr	r6, [r1, #8]
 800b40e:	429e      	cmp	r6, r3
 800b410:	4682      	mov	sl, r0
 800b412:	460c      	mov	r4, r1
 800b414:	4690      	mov	r8, r2
 800b416:	461f      	mov	r7, r3
 800b418:	d838      	bhi.n	800b48c <__ssputs_r+0x84>
 800b41a:	898a      	ldrh	r2, [r1, #12]
 800b41c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b420:	d032      	beq.n	800b488 <__ssputs_r+0x80>
 800b422:	6825      	ldr	r5, [r4, #0]
 800b424:	6909      	ldr	r1, [r1, #16]
 800b426:	eba5 0901 	sub.w	r9, r5, r1
 800b42a:	6965      	ldr	r5, [r4, #20]
 800b42c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b430:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b434:	3301      	adds	r3, #1
 800b436:	444b      	add	r3, r9
 800b438:	106d      	asrs	r5, r5, #1
 800b43a:	429d      	cmp	r5, r3
 800b43c:	bf38      	it	cc
 800b43e:	461d      	movcc	r5, r3
 800b440:	0553      	lsls	r3, r2, #21
 800b442:	d531      	bpl.n	800b4a8 <__ssputs_r+0xa0>
 800b444:	4629      	mov	r1, r5
 800b446:	f000 fb55 	bl	800baf4 <_malloc_r>
 800b44a:	4606      	mov	r6, r0
 800b44c:	b950      	cbnz	r0, 800b464 <__ssputs_r+0x5c>
 800b44e:	230c      	movs	r3, #12
 800b450:	f8ca 3000 	str.w	r3, [sl]
 800b454:	89a3      	ldrh	r3, [r4, #12]
 800b456:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b45a:	81a3      	strh	r3, [r4, #12]
 800b45c:	f04f 30ff 	mov.w	r0, #4294967295
 800b460:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b464:	6921      	ldr	r1, [r4, #16]
 800b466:	464a      	mov	r2, r9
 800b468:	f7ff ff90 	bl	800b38c <memcpy>
 800b46c:	89a3      	ldrh	r3, [r4, #12]
 800b46e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b472:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b476:	81a3      	strh	r3, [r4, #12]
 800b478:	6126      	str	r6, [r4, #16]
 800b47a:	6165      	str	r5, [r4, #20]
 800b47c:	444e      	add	r6, r9
 800b47e:	eba5 0509 	sub.w	r5, r5, r9
 800b482:	6026      	str	r6, [r4, #0]
 800b484:	60a5      	str	r5, [r4, #8]
 800b486:	463e      	mov	r6, r7
 800b488:	42be      	cmp	r6, r7
 800b48a:	d900      	bls.n	800b48e <__ssputs_r+0x86>
 800b48c:	463e      	mov	r6, r7
 800b48e:	6820      	ldr	r0, [r4, #0]
 800b490:	4632      	mov	r2, r6
 800b492:	4641      	mov	r1, r8
 800b494:	f000 faa8 	bl	800b9e8 <memmove>
 800b498:	68a3      	ldr	r3, [r4, #8]
 800b49a:	1b9b      	subs	r3, r3, r6
 800b49c:	60a3      	str	r3, [r4, #8]
 800b49e:	6823      	ldr	r3, [r4, #0]
 800b4a0:	4433      	add	r3, r6
 800b4a2:	6023      	str	r3, [r4, #0]
 800b4a4:	2000      	movs	r0, #0
 800b4a6:	e7db      	b.n	800b460 <__ssputs_r+0x58>
 800b4a8:	462a      	mov	r2, r5
 800b4aa:	f000 fb97 	bl	800bbdc <_realloc_r>
 800b4ae:	4606      	mov	r6, r0
 800b4b0:	2800      	cmp	r0, #0
 800b4b2:	d1e1      	bne.n	800b478 <__ssputs_r+0x70>
 800b4b4:	6921      	ldr	r1, [r4, #16]
 800b4b6:	4650      	mov	r0, sl
 800b4b8:	f000 fab0 	bl	800ba1c <_free_r>
 800b4bc:	e7c7      	b.n	800b44e <__ssputs_r+0x46>
	...

0800b4c0 <_svfiprintf_r>:
 800b4c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b4c4:	4698      	mov	r8, r3
 800b4c6:	898b      	ldrh	r3, [r1, #12]
 800b4c8:	061b      	lsls	r3, r3, #24
 800b4ca:	b09d      	sub	sp, #116	; 0x74
 800b4cc:	4607      	mov	r7, r0
 800b4ce:	460d      	mov	r5, r1
 800b4d0:	4614      	mov	r4, r2
 800b4d2:	d50e      	bpl.n	800b4f2 <_svfiprintf_r+0x32>
 800b4d4:	690b      	ldr	r3, [r1, #16]
 800b4d6:	b963      	cbnz	r3, 800b4f2 <_svfiprintf_r+0x32>
 800b4d8:	2140      	movs	r1, #64	; 0x40
 800b4da:	f000 fb0b 	bl	800baf4 <_malloc_r>
 800b4de:	6028      	str	r0, [r5, #0]
 800b4e0:	6128      	str	r0, [r5, #16]
 800b4e2:	b920      	cbnz	r0, 800b4ee <_svfiprintf_r+0x2e>
 800b4e4:	230c      	movs	r3, #12
 800b4e6:	603b      	str	r3, [r7, #0]
 800b4e8:	f04f 30ff 	mov.w	r0, #4294967295
 800b4ec:	e0d1      	b.n	800b692 <_svfiprintf_r+0x1d2>
 800b4ee:	2340      	movs	r3, #64	; 0x40
 800b4f0:	616b      	str	r3, [r5, #20]
 800b4f2:	2300      	movs	r3, #0
 800b4f4:	9309      	str	r3, [sp, #36]	; 0x24
 800b4f6:	2320      	movs	r3, #32
 800b4f8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b4fc:	f8cd 800c 	str.w	r8, [sp, #12]
 800b500:	2330      	movs	r3, #48	; 0x30
 800b502:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800b6ac <_svfiprintf_r+0x1ec>
 800b506:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b50a:	f04f 0901 	mov.w	r9, #1
 800b50e:	4623      	mov	r3, r4
 800b510:	469a      	mov	sl, r3
 800b512:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b516:	b10a      	cbz	r2, 800b51c <_svfiprintf_r+0x5c>
 800b518:	2a25      	cmp	r2, #37	; 0x25
 800b51a:	d1f9      	bne.n	800b510 <_svfiprintf_r+0x50>
 800b51c:	ebba 0b04 	subs.w	fp, sl, r4
 800b520:	d00b      	beq.n	800b53a <_svfiprintf_r+0x7a>
 800b522:	465b      	mov	r3, fp
 800b524:	4622      	mov	r2, r4
 800b526:	4629      	mov	r1, r5
 800b528:	4638      	mov	r0, r7
 800b52a:	f7ff ff6d 	bl	800b408 <__ssputs_r>
 800b52e:	3001      	adds	r0, #1
 800b530:	f000 80aa 	beq.w	800b688 <_svfiprintf_r+0x1c8>
 800b534:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b536:	445a      	add	r2, fp
 800b538:	9209      	str	r2, [sp, #36]	; 0x24
 800b53a:	f89a 3000 	ldrb.w	r3, [sl]
 800b53e:	2b00      	cmp	r3, #0
 800b540:	f000 80a2 	beq.w	800b688 <_svfiprintf_r+0x1c8>
 800b544:	2300      	movs	r3, #0
 800b546:	f04f 32ff 	mov.w	r2, #4294967295
 800b54a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b54e:	f10a 0a01 	add.w	sl, sl, #1
 800b552:	9304      	str	r3, [sp, #16]
 800b554:	9307      	str	r3, [sp, #28]
 800b556:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b55a:	931a      	str	r3, [sp, #104]	; 0x68
 800b55c:	4654      	mov	r4, sl
 800b55e:	2205      	movs	r2, #5
 800b560:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b564:	4851      	ldr	r0, [pc, #324]	; (800b6ac <_svfiprintf_r+0x1ec>)
 800b566:	f7f4 fe53 	bl	8000210 <memchr>
 800b56a:	9a04      	ldr	r2, [sp, #16]
 800b56c:	b9d8      	cbnz	r0, 800b5a6 <_svfiprintf_r+0xe6>
 800b56e:	06d0      	lsls	r0, r2, #27
 800b570:	bf44      	itt	mi
 800b572:	2320      	movmi	r3, #32
 800b574:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b578:	0711      	lsls	r1, r2, #28
 800b57a:	bf44      	itt	mi
 800b57c:	232b      	movmi	r3, #43	; 0x2b
 800b57e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b582:	f89a 3000 	ldrb.w	r3, [sl]
 800b586:	2b2a      	cmp	r3, #42	; 0x2a
 800b588:	d015      	beq.n	800b5b6 <_svfiprintf_r+0xf6>
 800b58a:	9a07      	ldr	r2, [sp, #28]
 800b58c:	4654      	mov	r4, sl
 800b58e:	2000      	movs	r0, #0
 800b590:	f04f 0c0a 	mov.w	ip, #10
 800b594:	4621      	mov	r1, r4
 800b596:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b59a:	3b30      	subs	r3, #48	; 0x30
 800b59c:	2b09      	cmp	r3, #9
 800b59e:	d94e      	bls.n	800b63e <_svfiprintf_r+0x17e>
 800b5a0:	b1b0      	cbz	r0, 800b5d0 <_svfiprintf_r+0x110>
 800b5a2:	9207      	str	r2, [sp, #28]
 800b5a4:	e014      	b.n	800b5d0 <_svfiprintf_r+0x110>
 800b5a6:	eba0 0308 	sub.w	r3, r0, r8
 800b5aa:	fa09 f303 	lsl.w	r3, r9, r3
 800b5ae:	4313      	orrs	r3, r2
 800b5b0:	9304      	str	r3, [sp, #16]
 800b5b2:	46a2      	mov	sl, r4
 800b5b4:	e7d2      	b.n	800b55c <_svfiprintf_r+0x9c>
 800b5b6:	9b03      	ldr	r3, [sp, #12]
 800b5b8:	1d19      	adds	r1, r3, #4
 800b5ba:	681b      	ldr	r3, [r3, #0]
 800b5bc:	9103      	str	r1, [sp, #12]
 800b5be:	2b00      	cmp	r3, #0
 800b5c0:	bfbb      	ittet	lt
 800b5c2:	425b      	neglt	r3, r3
 800b5c4:	f042 0202 	orrlt.w	r2, r2, #2
 800b5c8:	9307      	strge	r3, [sp, #28]
 800b5ca:	9307      	strlt	r3, [sp, #28]
 800b5cc:	bfb8      	it	lt
 800b5ce:	9204      	strlt	r2, [sp, #16]
 800b5d0:	7823      	ldrb	r3, [r4, #0]
 800b5d2:	2b2e      	cmp	r3, #46	; 0x2e
 800b5d4:	d10c      	bne.n	800b5f0 <_svfiprintf_r+0x130>
 800b5d6:	7863      	ldrb	r3, [r4, #1]
 800b5d8:	2b2a      	cmp	r3, #42	; 0x2a
 800b5da:	d135      	bne.n	800b648 <_svfiprintf_r+0x188>
 800b5dc:	9b03      	ldr	r3, [sp, #12]
 800b5de:	1d1a      	adds	r2, r3, #4
 800b5e0:	681b      	ldr	r3, [r3, #0]
 800b5e2:	9203      	str	r2, [sp, #12]
 800b5e4:	2b00      	cmp	r3, #0
 800b5e6:	bfb8      	it	lt
 800b5e8:	f04f 33ff 	movlt.w	r3, #4294967295
 800b5ec:	3402      	adds	r4, #2
 800b5ee:	9305      	str	r3, [sp, #20]
 800b5f0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800b6bc <_svfiprintf_r+0x1fc>
 800b5f4:	7821      	ldrb	r1, [r4, #0]
 800b5f6:	2203      	movs	r2, #3
 800b5f8:	4650      	mov	r0, sl
 800b5fa:	f7f4 fe09 	bl	8000210 <memchr>
 800b5fe:	b140      	cbz	r0, 800b612 <_svfiprintf_r+0x152>
 800b600:	2340      	movs	r3, #64	; 0x40
 800b602:	eba0 000a 	sub.w	r0, r0, sl
 800b606:	fa03 f000 	lsl.w	r0, r3, r0
 800b60a:	9b04      	ldr	r3, [sp, #16]
 800b60c:	4303      	orrs	r3, r0
 800b60e:	3401      	adds	r4, #1
 800b610:	9304      	str	r3, [sp, #16]
 800b612:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b616:	4826      	ldr	r0, [pc, #152]	; (800b6b0 <_svfiprintf_r+0x1f0>)
 800b618:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b61c:	2206      	movs	r2, #6
 800b61e:	f7f4 fdf7 	bl	8000210 <memchr>
 800b622:	2800      	cmp	r0, #0
 800b624:	d038      	beq.n	800b698 <_svfiprintf_r+0x1d8>
 800b626:	4b23      	ldr	r3, [pc, #140]	; (800b6b4 <_svfiprintf_r+0x1f4>)
 800b628:	bb1b      	cbnz	r3, 800b672 <_svfiprintf_r+0x1b2>
 800b62a:	9b03      	ldr	r3, [sp, #12]
 800b62c:	3307      	adds	r3, #7
 800b62e:	f023 0307 	bic.w	r3, r3, #7
 800b632:	3308      	adds	r3, #8
 800b634:	9303      	str	r3, [sp, #12]
 800b636:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b638:	4433      	add	r3, r6
 800b63a:	9309      	str	r3, [sp, #36]	; 0x24
 800b63c:	e767      	b.n	800b50e <_svfiprintf_r+0x4e>
 800b63e:	fb0c 3202 	mla	r2, ip, r2, r3
 800b642:	460c      	mov	r4, r1
 800b644:	2001      	movs	r0, #1
 800b646:	e7a5      	b.n	800b594 <_svfiprintf_r+0xd4>
 800b648:	2300      	movs	r3, #0
 800b64a:	3401      	adds	r4, #1
 800b64c:	9305      	str	r3, [sp, #20]
 800b64e:	4619      	mov	r1, r3
 800b650:	f04f 0c0a 	mov.w	ip, #10
 800b654:	4620      	mov	r0, r4
 800b656:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b65a:	3a30      	subs	r2, #48	; 0x30
 800b65c:	2a09      	cmp	r2, #9
 800b65e:	d903      	bls.n	800b668 <_svfiprintf_r+0x1a8>
 800b660:	2b00      	cmp	r3, #0
 800b662:	d0c5      	beq.n	800b5f0 <_svfiprintf_r+0x130>
 800b664:	9105      	str	r1, [sp, #20]
 800b666:	e7c3      	b.n	800b5f0 <_svfiprintf_r+0x130>
 800b668:	fb0c 2101 	mla	r1, ip, r1, r2
 800b66c:	4604      	mov	r4, r0
 800b66e:	2301      	movs	r3, #1
 800b670:	e7f0      	b.n	800b654 <_svfiprintf_r+0x194>
 800b672:	ab03      	add	r3, sp, #12
 800b674:	9300      	str	r3, [sp, #0]
 800b676:	462a      	mov	r2, r5
 800b678:	4b0f      	ldr	r3, [pc, #60]	; (800b6b8 <_svfiprintf_r+0x1f8>)
 800b67a:	a904      	add	r1, sp, #16
 800b67c:	4638      	mov	r0, r7
 800b67e:	f3af 8000 	nop.w
 800b682:	1c42      	adds	r2, r0, #1
 800b684:	4606      	mov	r6, r0
 800b686:	d1d6      	bne.n	800b636 <_svfiprintf_r+0x176>
 800b688:	89ab      	ldrh	r3, [r5, #12]
 800b68a:	065b      	lsls	r3, r3, #25
 800b68c:	f53f af2c 	bmi.w	800b4e8 <_svfiprintf_r+0x28>
 800b690:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b692:	b01d      	add	sp, #116	; 0x74
 800b694:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b698:	ab03      	add	r3, sp, #12
 800b69a:	9300      	str	r3, [sp, #0]
 800b69c:	462a      	mov	r2, r5
 800b69e:	4b06      	ldr	r3, [pc, #24]	; (800b6b8 <_svfiprintf_r+0x1f8>)
 800b6a0:	a904      	add	r1, sp, #16
 800b6a2:	4638      	mov	r0, r7
 800b6a4:	f000 f87a 	bl	800b79c <_printf_i>
 800b6a8:	e7eb      	b.n	800b682 <_svfiprintf_r+0x1c2>
 800b6aa:	bf00      	nop
 800b6ac:	0800bef4 	.word	0x0800bef4
 800b6b0:	0800befe 	.word	0x0800befe
 800b6b4:	00000000 	.word	0x00000000
 800b6b8:	0800b409 	.word	0x0800b409
 800b6bc:	0800befa 	.word	0x0800befa

0800b6c0 <_printf_common>:
 800b6c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b6c4:	4616      	mov	r6, r2
 800b6c6:	4699      	mov	r9, r3
 800b6c8:	688a      	ldr	r2, [r1, #8]
 800b6ca:	690b      	ldr	r3, [r1, #16]
 800b6cc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b6d0:	4293      	cmp	r3, r2
 800b6d2:	bfb8      	it	lt
 800b6d4:	4613      	movlt	r3, r2
 800b6d6:	6033      	str	r3, [r6, #0]
 800b6d8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b6dc:	4607      	mov	r7, r0
 800b6de:	460c      	mov	r4, r1
 800b6e0:	b10a      	cbz	r2, 800b6e6 <_printf_common+0x26>
 800b6e2:	3301      	adds	r3, #1
 800b6e4:	6033      	str	r3, [r6, #0]
 800b6e6:	6823      	ldr	r3, [r4, #0]
 800b6e8:	0699      	lsls	r1, r3, #26
 800b6ea:	bf42      	ittt	mi
 800b6ec:	6833      	ldrmi	r3, [r6, #0]
 800b6ee:	3302      	addmi	r3, #2
 800b6f0:	6033      	strmi	r3, [r6, #0]
 800b6f2:	6825      	ldr	r5, [r4, #0]
 800b6f4:	f015 0506 	ands.w	r5, r5, #6
 800b6f8:	d106      	bne.n	800b708 <_printf_common+0x48>
 800b6fa:	f104 0a19 	add.w	sl, r4, #25
 800b6fe:	68e3      	ldr	r3, [r4, #12]
 800b700:	6832      	ldr	r2, [r6, #0]
 800b702:	1a9b      	subs	r3, r3, r2
 800b704:	42ab      	cmp	r3, r5
 800b706:	dc26      	bgt.n	800b756 <_printf_common+0x96>
 800b708:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800b70c:	1e13      	subs	r3, r2, #0
 800b70e:	6822      	ldr	r2, [r4, #0]
 800b710:	bf18      	it	ne
 800b712:	2301      	movne	r3, #1
 800b714:	0692      	lsls	r2, r2, #26
 800b716:	d42b      	bmi.n	800b770 <_printf_common+0xb0>
 800b718:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b71c:	4649      	mov	r1, r9
 800b71e:	4638      	mov	r0, r7
 800b720:	47c0      	blx	r8
 800b722:	3001      	adds	r0, #1
 800b724:	d01e      	beq.n	800b764 <_printf_common+0xa4>
 800b726:	6823      	ldr	r3, [r4, #0]
 800b728:	68e5      	ldr	r5, [r4, #12]
 800b72a:	6832      	ldr	r2, [r6, #0]
 800b72c:	f003 0306 	and.w	r3, r3, #6
 800b730:	2b04      	cmp	r3, #4
 800b732:	bf08      	it	eq
 800b734:	1aad      	subeq	r5, r5, r2
 800b736:	68a3      	ldr	r3, [r4, #8]
 800b738:	6922      	ldr	r2, [r4, #16]
 800b73a:	bf0c      	ite	eq
 800b73c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b740:	2500      	movne	r5, #0
 800b742:	4293      	cmp	r3, r2
 800b744:	bfc4      	itt	gt
 800b746:	1a9b      	subgt	r3, r3, r2
 800b748:	18ed      	addgt	r5, r5, r3
 800b74a:	2600      	movs	r6, #0
 800b74c:	341a      	adds	r4, #26
 800b74e:	42b5      	cmp	r5, r6
 800b750:	d11a      	bne.n	800b788 <_printf_common+0xc8>
 800b752:	2000      	movs	r0, #0
 800b754:	e008      	b.n	800b768 <_printf_common+0xa8>
 800b756:	2301      	movs	r3, #1
 800b758:	4652      	mov	r2, sl
 800b75a:	4649      	mov	r1, r9
 800b75c:	4638      	mov	r0, r7
 800b75e:	47c0      	blx	r8
 800b760:	3001      	adds	r0, #1
 800b762:	d103      	bne.n	800b76c <_printf_common+0xac>
 800b764:	f04f 30ff 	mov.w	r0, #4294967295
 800b768:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b76c:	3501      	adds	r5, #1
 800b76e:	e7c6      	b.n	800b6fe <_printf_common+0x3e>
 800b770:	18e1      	adds	r1, r4, r3
 800b772:	1c5a      	adds	r2, r3, #1
 800b774:	2030      	movs	r0, #48	; 0x30
 800b776:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b77a:	4422      	add	r2, r4
 800b77c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b780:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b784:	3302      	adds	r3, #2
 800b786:	e7c7      	b.n	800b718 <_printf_common+0x58>
 800b788:	2301      	movs	r3, #1
 800b78a:	4622      	mov	r2, r4
 800b78c:	4649      	mov	r1, r9
 800b78e:	4638      	mov	r0, r7
 800b790:	47c0      	blx	r8
 800b792:	3001      	adds	r0, #1
 800b794:	d0e6      	beq.n	800b764 <_printf_common+0xa4>
 800b796:	3601      	adds	r6, #1
 800b798:	e7d9      	b.n	800b74e <_printf_common+0x8e>
	...

0800b79c <_printf_i>:
 800b79c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b7a0:	7e0f      	ldrb	r7, [r1, #24]
 800b7a2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800b7a4:	2f78      	cmp	r7, #120	; 0x78
 800b7a6:	4691      	mov	r9, r2
 800b7a8:	4680      	mov	r8, r0
 800b7aa:	460c      	mov	r4, r1
 800b7ac:	469a      	mov	sl, r3
 800b7ae:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800b7b2:	d807      	bhi.n	800b7c4 <_printf_i+0x28>
 800b7b4:	2f62      	cmp	r7, #98	; 0x62
 800b7b6:	d80a      	bhi.n	800b7ce <_printf_i+0x32>
 800b7b8:	2f00      	cmp	r7, #0
 800b7ba:	f000 80d8 	beq.w	800b96e <_printf_i+0x1d2>
 800b7be:	2f58      	cmp	r7, #88	; 0x58
 800b7c0:	f000 80a3 	beq.w	800b90a <_printf_i+0x16e>
 800b7c4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b7c8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800b7cc:	e03a      	b.n	800b844 <_printf_i+0xa8>
 800b7ce:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800b7d2:	2b15      	cmp	r3, #21
 800b7d4:	d8f6      	bhi.n	800b7c4 <_printf_i+0x28>
 800b7d6:	a101      	add	r1, pc, #4	; (adr r1, 800b7dc <_printf_i+0x40>)
 800b7d8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b7dc:	0800b835 	.word	0x0800b835
 800b7e0:	0800b849 	.word	0x0800b849
 800b7e4:	0800b7c5 	.word	0x0800b7c5
 800b7e8:	0800b7c5 	.word	0x0800b7c5
 800b7ec:	0800b7c5 	.word	0x0800b7c5
 800b7f0:	0800b7c5 	.word	0x0800b7c5
 800b7f4:	0800b849 	.word	0x0800b849
 800b7f8:	0800b7c5 	.word	0x0800b7c5
 800b7fc:	0800b7c5 	.word	0x0800b7c5
 800b800:	0800b7c5 	.word	0x0800b7c5
 800b804:	0800b7c5 	.word	0x0800b7c5
 800b808:	0800b955 	.word	0x0800b955
 800b80c:	0800b879 	.word	0x0800b879
 800b810:	0800b937 	.word	0x0800b937
 800b814:	0800b7c5 	.word	0x0800b7c5
 800b818:	0800b7c5 	.word	0x0800b7c5
 800b81c:	0800b977 	.word	0x0800b977
 800b820:	0800b7c5 	.word	0x0800b7c5
 800b824:	0800b879 	.word	0x0800b879
 800b828:	0800b7c5 	.word	0x0800b7c5
 800b82c:	0800b7c5 	.word	0x0800b7c5
 800b830:	0800b93f 	.word	0x0800b93f
 800b834:	682b      	ldr	r3, [r5, #0]
 800b836:	1d1a      	adds	r2, r3, #4
 800b838:	681b      	ldr	r3, [r3, #0]
 800b83a:	602a      	str	r2, [r5, #0]
 800b83c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b840:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b844:	2301      	movs	r3, #1
 800b846:	e0a3      	b.n	800b990 <_printf_i+0x1f4>
 800b848:	6820      	ldr	r0, [r4, #0]
 800b84a:	6829      	ldr	r1, [r5, #0]
 800b84c:	0606      	lsls	r6, r0, #24
 800b84e:	f101 0304 	add.w	r3, r1, #4
 800b852:	d50a      	bpl.n	800b86a <_printf_i+0xce>
 800b854:	680e      	ldr	r6, [r1, #0]
 800b856:	602b      	str	r3, [r5, #0]
 800b858:	2e00      	cmp	r6, #0
 800b85a:	da03      	bge.n	800b864 <_printf_i+0xc8>
 800b85c:	232d      	movs	r3, #45	; 0x2d
 800b85e:	4276      	negs	r6, r6
 800b860:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b864:	485e      	ldr	r0, [pc, #376]	; (800b9e0 <_printf_i+0x244>)
 800b866:	230a      	movs	r3, #10
 800b868:	e019      	b.n	800b89e <_printf_i+0x102>
 800b86a:	680e      	ldr	r6, [r1, #0]
 800b86c:	602b      	str	r3, [r5, #0]
 800b86e:	f010 0f40 	tst.w	r0, #64	; 0x40
 800b872:	bf18      	it	ne
 800b874:	b236      	sxthne	r6, r6
 800b876:	e7ef      	b.n	800b858 <_printf_i+0xbc>
 800b878:	682b      	ldr	r3, [r5, #0]
 800b87a:	6820      	ldr	r0, [r4, #0]
 800b87c:	1d19      	adds	r1, r3, #4
 800b87e:	6029      	str	r1, [r5, #0]
 800b880:	0601      	lsls	r1, r0, #24
 800b882:	d501      	bpl.n	800b888 <_printf_i+0xec>
 800b884:	681e      	ldr	r6, [r3, #0]
 800b886:	e002      	b.n	800b88e <_printf_i+0xf2>
 800b888:	0646      	lsls	r6, r0, #25
 800b88a:	d5fb      	bpl.n	800b884 <_printf_i+0xe8>
 800b88c:	881e      	ldrh	r6, [r3, #0]
 800b88e:	4854      	ldr	r0, [pc, #336]	; (800b9e0 <_printf_i+0x244>)
 800b890:	2f6f      	cmp	r7, #111	; 0x6f
 800b892:	bf0c      	ite	eq
 800b894:	2308      	moveq	r3, #8
 800b896:	230a      	movne	r3, #10
 800b898:	2100      	movs	r1, #0
 800b89a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b89e:	6865      	ldr	r5, [r4, #4]
 800b8a0:	60a5      	str	r5, [r4, #8]
 800b8a2:	2d00      	cmp	r5, #0
 800b8a4:	bfa2      	ittt	ge
 800b8a6:	6821      	ldrge	r1, [r4, #0]
 800b8a8:	f021 0104 	bicge.w	r1, r1, #4
 800b8ac:	6021      	strge	r1, [r4, #0]
 800b8ae:	b90e      	cbnz	r6, 800b8b4 <_printf_i+0x118>
 800b8b0:	2d00      	cmp	r5, #0
 800b8b2:	d04d      	beq.n	800b950 <_printf_i+0x1b4>
 800b8b4:	4615      	mov	r5, r2
 800b8b6:	fbb6 f1f3 	udiv	r1, r6, r3
 800b8ba:	fb03 6711 	mls	r7, r3, r1, r6
 800b8be:	5dc7      	ldrb	r7, [r0, r7]
 800b8c0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800b8c4:	4637      	mov	r7, r6
 800b8c6:	42bb      	cmp	r3, r7
 800b8c8:	460e      	mov	r6, r1
 800b8ca:	d9f4      	bls.n	800b8b6 <_printf_i+0x11a>
 800b8cc:	2b08      	cmp	r3, #8
 800b8ce:	d10b      	bne.n	800b8e8 <_printf_i+0x14c>
 800b8d0:	6823      	ldr	r3, [r4, #0]
 800b8d2:	07de      	lsls	r6, r3, #31
 800b8d4:	d508      	bpl.n	800b8e8 <_printf_i+0x14c>
 800b8d6:	6923      	ldr	r3, [r4, #16]
 800b8d8:	6861      	ldr	r1, [r4, #4]
 800b8da:	4299      	cmp	r1, r3
 800b8dc:	bfde      	ittt	le
 800b8de:	2330      	movle	r3, #48	; 0x30
 800b8e0:	f805 3c01 	strble.w	r3, [r5, #-1]
 800b8e4:	f105 35ff 	addle.w	r5, r5, #4294967295
 800b8e8:	1b52      	subs	r2, r2, r5
 800b8ea:	6122      	str	r2, [r4, #16]
 800b8ec:	f8cd a000 	str.w	sl, [sp]
 800b8f0:	464b      	mov	r3, r9
 800b8f2:	aa03      	add	r2, sp, #12
 800b8f4:	4621      	mov	r1, r4
 800b8f6:	4640      	mov	r0, r8
 800b8f8:	f7ff fee2 	bl	800b6c0 <_printf_common>
 800b8fc:	3001      	adds	r0, #1
 800b8fe:	d14c      	bne.n	800b99a <_printf_i+0x1fe>
 800b900:	f04f 30ff 	mov.w	r0, #4294967295
 800b904:	b004      	add	sp, #16
 800b906:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b90a:	4835      	ldr	r0, [pc, #212]	; (800b9e0 <_printf_i+0x244>)
 800b90c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800b910:	6829      	ldr	r1, [r5, #0]
 800b912:	6823      	ldr	r3, [r4, #0]
 800b914:	f851 6b04 	ldr.w	r6, [r1], #4
 800b918:	6029      	str	r1, [r5, #0]
 800b91a:	061d      	lsls	r5, r3, #24
 800b91c:	d514      	bpl.n	800b948 <_printf_i+0x1ac>
 800b91e:	07df      	lsls	r7, r3, #31
 800b920:	bf44      	itt	mi
 800b922:	f043 0320 	orrmi.w	r3, r3, #32
 800b926:	6023      	strmi	r3, [r4, #0]
 800b928:	b91e      	cbnz	r6, 800b932 <_printf_i+0x196>
 800b92a:	6823      	ldr	r3, [r4, #0]
 800b92c:	f023 0320 	bic.w	r3, r3, #32
 800b930:	6023      	str	r3, [r4, #0]
 800b932:	2310      	movs	r3, #16
 800b934:	e7b0      	b.n	800b898 <_printf_i+0xfc>
 800b936:	6823      	ldr	r3, [r4, #0]
 800b938:	f043 0320 	orr.w	r3, r3, #32
 800b93c:	6023      	str	r3, [r4, #0]
 800b93e:	2378      	movs	r3, #120	; 0x78
 800b940:	4828      	ldr	r0, [pc, #160]	; (800b9e4 <_printf_i+0x248>)
 800b942:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800b946:	e7e3      	b.n	800b910 <_printf_i+0x174>
 800b948:	0659      	lsls	r1, r3, #25
 800b94a:	bf48      	it	mi
 800b94c:	b2b6      	uxthmi	r6, r6
 800b94e:	e7e6      	b.n	800b91e <_printf_i+0x182>
 800b950:	4615      	mov	r5, r2
 800b952:	e7bb      	b.n	800b8cc <_printf_i+0x130>
 800b954:	682b      	ldr	r3, [r5, #0]
 800b956:	6826      	ldr	r6, [r4, #0]
 800b958:	6961      	ldr	r1, [r4, #20]
 800b95a:	1d18      	adds	r0, r3, #4
 800b95c:	6028      	str	r0, [r5, #0]
 800b95e:	0635      	lsls	r5, r6, #24
 800b960:	681b      	ldr	r3, [r3, #0]
 800b962:	d501      	bpl.n	800b968 <_printf_i+0x1cc>
 800b964:	6019      	str	r1, [r3, #0]
 800b966:	e002      	b.n	800b96e <_printf_i+0x1d2>
 800b968:	0670      	lsls	r0, r6, #25
 800b96a:	d5fb      	bpl.n	800b964 <_printf_i+0x1c8>
 800b96c:	8019      	strh	r1, [r3, #0]
 800b96e:	2300      	movs	r3, #0
 800b970:	6123      	str	r3, [r4, #16]
 800b972:	4615      	mov	r5, r2
 800b974:	e7ba      	b.n	800b8ec <_printf_i+0x150>
 800b976:	682b      	ldr	r3, [r5, #0]
 800b978:	1d1a      	adds	r2, r3, #4
 800b97a:	602a      	str	r2, [r5, #0]
 800b97c:	681d      	ldr	r5, [r3, #0]
 800b97e:	6862      	ldr	r2, [r4, #4]
 800b980:	2100      	movs	r1, #0
 800b982:	4628      	mov	r0, r5
 800b984:	f7f4 fc44 	bl	8000210 <memchr>
 800b988:	b108      	cbz	r0, 800b98e <_printf_i+0x1f2>
 800b98a:	1b40      	subs	r0, r0, r5
 800b98c:	6060      	str	r0, [r4, #4]
 800b98e:	6863      	ldr	r3, [r4, #4]
 800b990:	6123      	str	r3, [r4, #16]
 800b992:	2300      	movs	r3, #0
 800b994:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b998:	e7a8      	b.n	800b8ec <_printf_i+0x150>
 800b99a:	6923      	ldr	r3, [r4, #16]
 800b99c:	462a      	mov	r2, r5
 800b99e:	4649      	mov	r1, r9
 800b9a0:	4640      	mov	r0, r8
 800b9a2:	47d0      	blx	sl
 800b9a4:	3001      	adds	r0, #1
 800b9a6:	d0ab      	beq.n	800b900 <_printf_i+0x164>
 800b9a8:	6823      	ldr	r3, [r4, #0]
 800b9aa:	079b      	lsls	r3, r3, #30
 800b9ac:	d413      	bmi.n	800b9d6 <_printf_i+0x23a>
 800b9ae:	68e0      	ldr	r0, [r4, #12]
 800b9b0:	9b03      	ldr	r3, [sp, #12]
 800b9b2:	4298      	cmp	r0, r3
 800b9b4:	bfb8      	it	lt
 800b9b6:	4618      	movlt	r0, r3
 800b9b8:	e7a4      	b.n	800b904 <_printf_i+0x168>
 800b9ba:	2301      	movs	r3, #1
 800b9bc:	4632      	mov	r2, r6
 800b9be:	4649      	mov	r1, r9
 800b9c0:	4640      	mov	r0, r8
 800b9c2:	47d0      	blx	sl
 800b9c4:	3001      	adds	r0, #1
 800b9c6:	d09b      	beq.n	800b900 <_printf_i+0x164>
 800b9c8:	3501      	adds	r5, #1
 800b9ca:	68e3      	ldr	r3, [r4, #12]
 800b9cc:	9903      	ldr	r1, [sp, #12]
 800b9ce:	1a5b      	subs	r3, r3, r1
 800b9d0:	42ab      	cmp	r3, r5
 800b9d2:	dcf2      	bgt.n	800b9ba <_printf_i+0x21e>
 800b9d4:	e7eb      	b.n	800b9ae <_printf_i+0x212>
 800b9d6:	2500      	movs	r5, #0
 800b9d8:	f104 0619 	add.w	r6, r4, #25
 800b9dc:	e7f5      	b.n	800b9ca <_printf_i+0x22e>
 800b9de:	bf00      	nop
 800b9e0:	0800bf05 	.word	0x0800bf05
 800b9e4:	0800bf16 	.word	0x0800bf16

0800b9e8 <memmove>:
 800b9e8:	4288      	cmp	r0, r1
 800b9ea:	b510      	push	{r4, lr}
 800b9ec:	eb01 0402 	add.w	r4, r1, r2
 800b9f0:	d902      	bls.n	800b9f8 <memmove+0x10>
 800b9f2:	4284      	cmp	r4, r0
 800b9f4:	4623      	mov	r3, r4
 800b9f6:	d807      	bhi.n	800ba08 <memmove+0x20>
 800b9f8:	1e43      	subs	r3, r0, #1
 800b9fa:	42a1      	cmp	r1, r4
 800b9fc:	d008      	beq.n	800ba10 <memmove+0x28>
 800b9fe:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ba02:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ba06:	e7f8      	b.n	800b9fa <memmove+0x12>
 800ba08:	4402      	add	r2, r0
 800ba0a:	4601      	mov	r1, r0
 800ba0c:	428a      	cmp	r2, r1
 800ba0e:	d100      	bne.n	800ba12 <memmove+0x2a>
 800ba10:	bd10      	pop	{r4, pc}
 800ba12:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ba16:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ba1a:	e7f7      	b.n	800ba0c <memmove+0x24>

0800ba1c <_free_r>:
 800ba1c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ba1e:	2900      	cmp	r1, #0
 800ba20:	d044      	beq.n	800baac <_free_r+0x90>
 800ba22:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ba26:	9001      	str	r0, [sp, #4]
 800ba28:	2b00      	cmp	r3, #0
 800ba2a:	f1a1 0404 	sub.w	r4, r1, #4
 800ba2e:	bfb8      	it	lt
 800ba30:	18e4      	addlt	r4, r4, r3
 800ba32:	f000 f913 	bl	800bc5c <__malloc_lock>
 800ba36:	4a1e      	ldr	r2, [pc, #120]	; (800bab0 <_free_r+0x94>)
 800ba38:	9801      	ldr	r0, [sp, #4]
 800ba3a:	6813      	ldr	r3, [r2, #0]
 800ba3c:	b933      	cbnz	r3, 800ba4c <_free_r+0x30>
 800ba3e:	6063      	str	r3, [r4, #4]
 800ba40:	6014      	str	r4, [r2, #0]
 800ba42:	b003      	add	sp, #12
 800ba44:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ba48:	f000 b90e 	b.w	800bc68 <__malloc_unlock>
 800ba4c:	42a3      	cmp	r3, r4
 800ba4e:	d908      	bls.n	800ba62 <_free_r+0x46>
 800ba50:	6825      	ldr	r5, [r4, #0]
 800ba52:	1961      	adds	r1, r4, r5
 800ba54:	428b      	cmp	r3, r1
 800ba56:	bf01      	itttt	eq
 800ba58:	6819      	ldreq	r1, [r3, #0]
 800ba5a:	685b      	ldreq	r3, [r3, #4]
 800ba5c:	1949      	addeq	r1, r1, r5
 800ba5e:	6021      	streq	r1, [r4, #0]
 800ba60:	e7ed      	b.n	800ba3e <_free_r+0x22>
 800ba62:	461a      	mov	r2, r3
 800ba64:	685b      	ldr	r3, [r3, #4]
 800ba66:	b10b      	cbz	r3, 800ba6c <_free_r+0x50>
 800ba68:	42a3      	cmp	r3, r4
 800ba6a:	d9fa      	bls.n	800ba62 <_free_r+0x46>
 800ba6c:	6811      	ldr	r1, [r2, #0]
 800ba6e:	1855      	adds	r5, r2, r1
 800ba70:	42a5      	cmp	r5, r4
 800ba72:	d10b      	bne.n	800ba8c <_free_r+0x70>
 800ba74:	6824      	ldr	r4, [r4, #0]
 800ba76:	4421      	add	r1, r4
 800ba78:	1854      	adds	r4, r2, r1
 800ba7a:	42a3      	cmp	r3, r4
 800ba7c:	6011      	str	r1, [r2, #0]
 800ba7e:	d1e0      	bne.n	800ba42 <_free_r+0x26>
 800ba80:	681c      	ldr	r4, [r3, #0]
 800ba82:	685b      	ldr	r3, [r3, #4]
 800ba84:	6053      	str	r3, [r2, #4]
 800ba86:	4421      	add	r1, r4
 800ba88:	6011      	str	r1, [r2, #0]
 800ba8a:	e7da      	b.n	800ba42 <_free_r+0x26>
 800ba8c:	d902      	bls.n	800ba94 <_free_r+0x78>
 800ba8e:	230c      	movs	r3, #12
 800ba90:	6003      	str	r3, [r0, #0]
 800ba92:	e7d6      	b.n	800ba42 <_free_r+0x26>
 800ba94:	6825      	ldr	r5, [r4, #0]
 800ba96:	1961      	adds	r1, r4, r5
 800ba98:	428b      	cmp	r3, r1
 800ba9a:	bf04      	itt	eq
 800ba9c:	6819      	ldreq	r1, [r3, #0]
 800ba9e:	685b      	ldreq	r3, [r3, #4]
 800baa0:	6063      	str	r3, [r4, #4]
 800baa2:	bf04      	itt	eq
 800baa4:	1949      	addeq	r1, r1, r5
 800baa6:	6021      	streq	r1, [r4, #0]
 800baa8:	6054      	str	r4, [r2, #4]
 800baaa:	e7ca      	b.n	800ba42 <_free_r+0x26>
 800baac:	b003      	add	sp, #12
 800baae:	bd30      	pop	{r4, r5, pc}
 800bab0:	200006c0 	.word	0x200006c0

0800bab4 <sbrk_aligned>:
 800bab4:	b570      	push	{r4, r5, r6, lr}
 800bab6:	4e0e      	ldr	r6, [pc, #56]	; (800baf0 <sbrk_aligned+0x3c>)
 800bab8:	460c      	mov	r4, r1
 800baba:	6831      	ldr	r1, [r6, #0]
 800babc:	4605      	mov	r5, r0
 800babe:	b911      	cbnz	r1, 800bac6 <sbrk_aligned+0x12>
 800bac0:	f000 f8bc 	bl	800bc3c <_sbrk_r>
 800bac4:	6030      	str	r0, [r6, #0]
 800bac6:	4621      	mov	r1, r4
 800bac8:	4628      	mov	r0, r5
 800baca:	f000 f8b7 	bl	800bc3c <_sbrk_r>
 800bace:	1c43      	adds	r3, r0, #1
 800bad0:	d00a      	beq.n	800bae8 <sbrk_aligned+0x34>
 800bad2:	1cc4      	adds	r4, r0, #3
 800bad4:	f024 0403 	bic.w	r4, r4, #3
 800bad8:	42a0      	cmp	r0, r4
 800bada:	d007      	beq.n	800baec <sbrk_aligned+0x38>
 800badc:	1a21      	subs	r1, r4, r0
 800bade:	4628      	mov	r0, r5
 800bae0:	f000 f8ac 	bl	800bc3c <_sbrk_r>
 800bae4:	3001      	adds	r0, #1
 800bae6:	d101      	bne.n	800baec <sbrk_aligned+0x38>
 800bae8:	f04f 34ff 	mov.w	r4, #4294967295
 800baec:	4620      	mov	r0, r4
 800baee:	bd70      	pop	{r4, r5, r6, pc}
 800baf0:	200006c4 	.word	0x200006c4

0800baf4 <_malloc_r>:
 800baf4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800baf8:	1ccd      	adds	r5, r1, #3
 800bafa:	f025 0503 	bic.w	r5, r5, #3
 800bafe:	3508      	adds	r5, #8
 800bb00:	2d0c      	cmp	r5, #12
 800bb02:	bf38      	it	cc
 800bb04:	250c      	movcc	r5, #12
 800bb06:	2d00      	cmp	r5, #0
 800bb08:	4607      	mov	r7, r0
 800bb0a:	db01      	blt.n	800bb10 <_malloc_r+0x1c>
 800bb0c:	42a9      	cmp	r1, r5
 800bb0e:	d905      	bls.n	800bb1c <_malloc_r+0x28>
 800bb10:	230c      	movs	r3, #12
 800bb12:	603b      	str	r3, [r7, #0]
 800bb14:	2600      	movs	r6, #0
 800bb16:	4630      	mov	r0, r6
 800bb18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bb1c:	4e2e      	ldr	r6, [pc, #184]	; (800bbd8 <_malloc_r+0xe4>)
 800bb1e:	f000 f89d 	bl	800bc5c <__malloc_lock>
 800bb22:	6833      	ldr	r3, [r6, #0]
 800bb24:	461c      	mov	r4, r3
 800bb26:	bb34      	cbnz	r4, 800bb76 <_malloc_r+0x82>
 800bb28:	4629      	mov	r1, r5
 800bb2a:	4638      	mov	r0, r7
 800bb2c:	f7ff ffc2 	bl	800bab4 <sbrk_aligned>
 800bb30:	1c43      	adds	r3, r0, #1
 800bb32:	4604      	mov	r4, r0
 800bb34:	d14d      	bne.n	800bbd2 <_malloc_r+0xde>
 800bb36:	6834      	ldr	r4, [r6, #0]
 800bb38:	4626      	mov	r6, r4
 800bb3a:	2e00      	cmp	r6, #0
 800bb3c:	d140      	bne.n	800bbc0 <_malloc_r+0xcc>
 800bb3e:	6823      	ldr	r3, [r4, #0]
 800bb40:	4631      	mov	r1, r6
 800bb42:	4638      	mov	r0, r7
 800bb44:	eb04 0803 	add.w	r8, r4, r3
 800bb48:	f000 f878 	bl	800bc3c <_sbrk_r>
 800bb4c:	4580      	cmp	r8, r0
 800bb4e:	d13a      	bne.n	800bbc6 <_malloc_r+0xd2>
 800bb50:	6821      	ldr	r1, [r4, #0]
 800bb52:	3503      	adds	r5, #3
 800bb54:	1a6d      	subs	r5, r5, r1
 800bb56:	f025 0503 	bic.w	r5, r5, #3
 800bb5a:	3508      	adds	r5, #8
 800bb5c:	2d0c      	cmp	r5, #12
 800bb5e:	bf38      	it	cc
 800bb60:	250c      	movcc	r5, #12
 800bb62:	4629      	mov	r1, r5
 800bb64:	4638      	mov	r0, r7
 800bb66:	f7ff ffa5 	bl	800bab4 <sbrk_aligned>
 800bb6a:	3001      	adds	r0, #1
 800bb6c:	d02b      	beq.n	800bbc6 <_malloc_r+0xd2>
 800bb6e:	6823      	ldr	r3, [r4, #0]
 800bb70:	442b      	add	r3, r5
 800bb72:	6023      	str	r3, [r4, #0]
 800bb74:	e00e      	b.n	800bb94 <_malloc_r+0xa0>
 800bb76:	6822      	ldr	r2, [r4, #0]
 800bb78:	1b52      	subs	r2, r2, r5
 800bb7a:	d41e      	bmi.n	800bbba <_malloc_r+0xc6>
 800bb7c:	2a0b      	cmp	r2, #11
 800bb7e:	d916      	bls.n	800bbae <_malloc_r+0xba>
 800bb80:	1961      	adds	r1, r4, r5
 800bb82:	42a3      	cmp	r3, r4
 800bb84:	6025      	str	r5, [r4, #0]
 800bb86:	bf18      	it	ne
 800bb88:	6059      	strne	r1, [r3, #4]
 800bb8a:	6863      	ldr	r3, [r4, #4]
 800bb8c:	bf08      	it	eq
 800bb8e:	6031      	streq	r1, [r6, #0]
 800bb90:	5162      	str	r2, [r4, r5]
 800bb92:	604b      	str	r3, [r1, #4]
 800bb94:	4638      	mov	r0, r7
 800bb96:	f104 060b 	add.w	r6, r4, #11
 800bb9a:	f000 f865 	bl	800bc68 <__malloc_unlock>
 800bb9e:	f026 0607 	bic.w	r6, r6, #7
 800bba2:	1d23      	adds	r3, r4, #4
 800bba4:	1af2      	subs	r2, r6, r3
 800bba6:	d0b6      	beq.n	800bb16 <_malloc_r+0x22>
 800bba8:	1b9b      	subs	r3, r3, r6
 800bbaa:	50a3      	str	r3, [r4, r2]
 800bbac:	e7b3      	b.n	800bb16 <_malloc_r+0x22>
 800bbae:	6862      	ldr	r2, [r4, #4]
 800bbb0:	42a3      	cmp	r3, r4
 800bbb2:	bf0c      	ite	eq
 800bbb4:	6032      	streq	r2, [r6, #0]
 800bbb6:	605a      	strne	r2, [r3, #4]
 800bbb8:	e7ec      	b.n	800bb94 <_malloc_r+0xa0>
 800bbba:	4623      	mov	r3, r4
 800bbbc:	6864      	ldr	r4, [r4, #4]
 800bbbe:	e7b2      	b.n	800bb26 <_malloc_r+0x32>
 800bbc0:	4634      	mov	r4, r6
 800bbc2:	6876      	ldr	r6, [r6, #4]
 800bbc4:	e7b9      	b.n	800bb3a <_malloc_r+0x46>
 800bbc6:	230c      	movs	r3, #12
 800bbc8:	603b      	str	r3, [r7, #0]
 800bbca:	4638      	mov	r0, r7
 800bbcc:	f000 f84c 	bl	800bc68 <__malloc_unlock>
 800bbd0:	e7a1      	b.n	800bb16 <_malloc_r+0x22>
 800bbd2:	6025      	str	r5, [r4, #0]
 800bbd4:	e7de      	b.n	800bb94 <_malloc_r+0xa0>
 800bbd6:	bf00      	nop
 800bbd8:	200006c0 	.word	0x200006c0

0800bbdc <_realloc_r>:
 800bbdc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bbe0:	4680      	mov	r8, r0
 800bbe2:	4614      	mov	r4, r2
 800bbe4:	460e      	mov	r6, r1
 800bbe6:	b921      	cbnz	r1, 800bbf2 <_realloc_r+0x16>
 800bbe8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bbec:	4611      	mov	r1, r2
 800bbee:	f7ff bf81 	b.w	800baf4 <_malloc_r>
 800bbf2:	b92a      	cbnz	r2, 800bc00 <_realloc_r+0x24>
 800bbf4:	f7ff ff12 	bl	800ba1c <_free_r>
 800bbf8:	4625      	mov	r5, r4
 800bbfa:	4628      	mov	r0, r5
 800bbfc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bc00:	f000 f838 	bl	800bc74 <_malloc_usable_size_r>
 800bc04:	4284      	cmp	r4, r0
 800bc06:	4607      	mov	r7, r0
 800bc08:	d802      	bhi.n	800bc10 <_realloc_r+0x34>
 800bc0a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800bc0e:	d812      	bhi.n	800bc36 <_realloc_r+0x5a>
 800bc10:	4621      	mov	r1, r4
 800bc12:	4640      	mov	r0, r8
 800bc14:	f7ff ff6e 	bl	800baf4 <_malloc_r>
 800bc18:	4605      	mov	r5, r0
 800bc1a:	2800      	cmp	r0, #0
 800bc1c:	d0ed      	beq.n	800bbfa <_realloc_r+0x1e>
 800bc1e:	42bc      	cmp	r4, r7
 800bc20:	4622      	mov	r2, r4
 800bc22:	4631      	mov	r1, r6
 800bc24:	bf28      	it	cs
 800bc26:	463a      	movcs	r2, r7
 800bc28:	f7ff fbb0 	bl	800b38c <memcpy>
 800bc2c:	4631      	mov	r1, r6
 800bc2e:	4640      	mov	r0, r8
 800bc30:	f7ff fef4 	bl	800ba1c <_free_r>
 800bc34:	e7e1      	b.n	800bbfa <_realloc_r+0x1e>
 800bc36:	4635      	mov	r5, r6
 800bc38:	e7df      	b.n	800bbfa <_realloc_r+0x1e>
	...

0800bc3c <_sbrk_r>:
 800bc3c:	b538      	push	{r3, r4, r5, lr}
 800bc3e:	4d06      	ldr	r5, [pc, #24]	; (800bc58 <_sbrk_r+0x1c>)
 800bc40:	2300      	movs	r3, #0
 800bc42:	4604      	mov	r4, r0
 800bc44:	4608      	mov	r0, r1
 800bc46:	602b      	str	r3, [r5, #0]
 800bc48:	f7f4 ffa6 	bl	8000b98 <_sbrk>
 800bc4c:	1c43      	adds	r3, r0, #1
 800bc4e:	d102      	bne.n	800bc56 <_sbrk_r+0x1a>
 800bc50:	682b      	ldr	r3, [r5, #0]
 800bc52:	b103      	cbz	r3, 800bc56 <_sbrk_r+0x1a>
 800bc54:	6023      	str	r3, [r4, #0]
 800bc56:	bd38      	pop	{r3, r4, r5, pc}
 800bc58:	200006c8 	.word	0x200006c8

0800bc5c <__malloc_lock>:
 800bc5c:	4801      	ldr	r0, [pc, #4]	; (800bc64 <__malloc_lock+0x8>)
 800bc5e:	f000 b811 	b.w	800bc84 <__retarget_lock_acquire_recursive>
 800bc62:	bf00      	nop
 800bc64:	200006cc 	.word	0x200006cc

0800bc68 <__malloc_unlock>:
 800bc68:	4801      	ldr	r0, [pc, #4]	; (800bc70 <__malloc_unlock+0x8>)
 800bc6a:	f000 b80c 	b.w	800bc86 <__retarget_lock_release_recursive>
 800bc6e:	bf00      	nop
 800bc70:	200006cc 	.word	0x200006cc

0800bc74 <_malloc_usable_size_r>:
 800bc74:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bc78:	1f18      	subs	r0, r3, #4
 800bc7a:	2b00      	cmp	r3, #0
 800bc7c:	bfbc      	itt	lt
 800bc7e:	580b      	ldrlt	r3, [r1, r0]
 800bc80:	18c0      	addlt	r0, r0, r3
 800bc82:	4770      	bx	lr

0800bc84 <__retarget_lock_acquire_recursive>:
 800bc84:	4770      	bx	lr

0800bc86 <__retarget_lock_release_recursive>:
 800bc86:	4770      	bx	lr

0800bc88 <_init>:
 800bc88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bc8a:	bf00      	nop
 800bc8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bc8e:	bc08      	pop	{r3}
 800bc90:	469e      	mov	lr, r3
 800bc92:	4770      	bx	lr

0800bc94 <_fini>:
 800bc94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bc96:	bf00      	nop
 800bc98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bc9a:	bc08      	pop	{r3}
 800bc9c:	469e      	mov	lr, r3
 800bc9e:	4770      	bx	lr
